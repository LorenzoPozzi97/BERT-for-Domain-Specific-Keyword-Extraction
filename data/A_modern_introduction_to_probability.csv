,Relevance,Tags,Heading,Seg,Sentence,Enc Relevance,Enc Tags,Enc Heading,Enc Sentence
0,1,"['probability', 'statistics']", Why probability and statistics,seg_1,"is everything on this planet determined by randomness? this question is open to philosophical debate. what is certain is that every day thousands and thousands of engineers, scientists, business persons, manufacturers, and others are using tools from probability and statistics.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([2339, 9723, 1998, 6747])","tensor([ 101, 2003, 2673, 2006, 2023, 4774, 4340, 2011, 6721, 2791, 1029, 2023,
        3160, 2003, 2330, 2000, 9569, 5981, 1012, 2054, 2003, 3056, 2003, 2008,
        2296, 2154, 5190, 1998, 5190, 1997, 6145, 1010, 6529, 1010, 2449, 5381,
        1010, 8712, 1010, 1998, 2500, 2024, 2478, 5906, 2013, 9723, 1998, 6747,
        1012,  102])"
1,1,"['probability', 'statistics']", Why probability and statistics,seg_1,"the theory and practice of probability and statistics were developed during the last century and are still actively being refined and extended. in this book we will introduce the basic notions and ideas, and in this first chapter we present a diverse collection of examples where randomness plays a role.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2339, 9723, 1998, 6747])","tensor([  101,  1996,  3399,  1998,  3218,  1997,  9723,  1998,  6747,  2020,
         2764,  2076,  1996,  2197,  2301,  1998,  2024,  2145,  8851,  2108,
        15514,  1998,  3668,  1012,  1999,  2023,  2338,  2057,  2097,  8970,
         1996,  3937, 21951,  1998,  4784,  1010,  1998,  1999,  2023,  2034,
         3127,  2057,  2556,  1037,  7578,  3074,  1997,  4973,  2073,  6721,
         2791,  3248,  1037,  2535,  1012,   102])"
2,1,"['random', 'correlation', 'percentage']", Biometry iris recognition,seg_3,"biometry is the art of identifying a person on the basis of his or her personal biological characteristics, such as fingerprints or voice. from recent research it appears that with the human iris one can beat all existing automatic human identification systems. iris recognition technology is based on the visible qualities of the iris. it converts these—via a video camera—into an “iris code” consisting of just 2048 bits. this is done in such a way that the code is hardly sensitive to the size of the iris or the size of the pupil. however, at different times and different places the iris code of the same person will not be exactly the same. thus one has to allow for a certain percentage of mismatching bits when identifying a person. in fact, the system allows about 34% mismatches! how can this lead to a reliable identification system? the miracle is that different persons have very different irides. in particular, over a large collection of different irides the code bits take the values 0 and 1 about half of the time. but that is certainly not sufficient: if one bit would determine the other 2047, then we could only distinguish two persons. in other words, single bits may be random, but the correlation between bits is also crucial (we will discuss correlation at length in chapter 10). john daugman who has developed the iris recognition technology made comparisons between 222743 pairs of iris",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16012, 24327, 11173,  5038])","tensor([  101, 16012, 24327,  2003,  1996,  2396,  1997, 12151,  1037,  2711,
         2006,  1996,  3978,  1997,  2010,  2030,  2014,  3167,  6897,  6459,
         1010,  2107,  2004, 27556,  2030,  2376,  1012,  2013,  3522,  2470,
         2009,  3544,  2008,  2007,  1996,  2529, 11173,  2028,  2064,  3786,
         2035,  4493,  6882,  2529,  8720,  3001,  1012, 11173,  5038,  2974,
         2003,  2241,  2006,  1996,  5710, 11647,  1997,  1996, 11173,  1012,
         2009, 19884,  2122,  1517,  3081,  1037,  2678,  4950,  1517,  2046,
         2019,  1523, 11173,  3642,  1524,  5398,  1997,  2074, 19627,  2620,
         9017,  1012,  2023,  2003,  2589,  1999,  2107,  1037,  2126,  2008,
         1996,  3642,  2003,  6684,  7591,  2000,  1996,  2946,  1997,  1996,
        11173,  2030,  1996,  2946,  1997,  1996, 11136,  1012,  2174,  1010,
         2012,  2367,  2335,  1998,  2367,  3182,  1996, 11173,  3642,  1997,
         1996,  2168,  2711,  2097,  2025,  2022,  3599,  1996,  2168,  1012,
         2947,  2028,  2038,  2000,  3499,  2005,  1037,  3056,  7017,  1997,
        28616, 18900,  8450,  9017,  2043, 12151,  1037,  2711,  1012,  1999,
         2755,  1010,  1996,  2291,  4473,  2055,  4090,  1003, 28616, 18900,
         8376,   999,  2129,  2064,  2023,  2599,  2000,  1037, 10539,  8720,
         2291,  1029,  1996,  9727,  2003,  2008,  2367,  5381,  2031,  2200,
         2367, 20868,  8621,  1012,  1999,  3327,  1010,  2058,  1037,  2312,
         3074,  1997,  2367, 20868,  8621,  1996,  3642,  9017,  2202,  1996,
         5300,  1014,  1998,  1015,  2055,  2431,  1997,  1996,  2051,  1012,
         2021,  2008,  2003,  5121,  2025,  7182,  1024,  2065,  2028,  2978,
         2052,  5646,  1996,  2060, 19627,  2581,  1010,  2059,  2057,  2071,
         2069, 10782,  2048,  5381,  1012,  1999,  2060,  2616,  1010,  2309,
         9017,  2089,  2022,  6721,  1010,  2021,  1996, 16902,  2090,  9017,
         2003,  2036, 10232,  1006,  2057,  2097,  6848, 16902,  2012,  3091,
         1999,  3127,  2184,  1007,  1012,  2198,  4830, 15916,  2386,  2040,
         2038,  2764,  1996, 11173,  5038,  2974,  2081, 18539,  2090, 19015,
         2581, 23777,  7689,  1997, 11173,   102])"
3,1,"['histograms', 'probability', 'interval', 'data']", Biometry iris recognition,seg_3,"codes and concluded that of the 2048 bits 266 may be considered as uncorrelated ([6]). he then argues that we may consider an iris code as the result of 266 coin tosses with a fair coin. this implies that if we compare two such codes from different persons, then there is an astronomically small probability that these two differ in less than 34% of the bits—almost all pairs will differ in about 50% of the bits. this is illustrated in figure 1.1, which originates from [6], and was kindly provided by john daugman. the iris code data consist of numbers between 0 and 1, each a hamming distance (the fraction of mismatches) between two iris codes. the data have been summarized in two histograms, that is, two graphs that show the number of counts of hamming distances falling in a certain interval. we will encounter histograms and other summaries of data in chapter 15. one sees from the figure that for codes from the same iris (left side) the mismatch fraction is only about 0.09, while for different irides (right side) it is about 0.46.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16012, 24327, 11173,  5038])","tensor([  101,  9537,  1998,  5531,  2008,  1997,  1996, 19627,  2620,  9017,
        25162,  2089,  2022,  2641,  2004,  4895, 27108, 16570,  4383,  1006,
         1031,  1020,  1033,  1007,  1012,  2002,  2059,  9251,  2008,  2057,
         2089,  5136,  2019, 11173,  3642,  2004,  1996,  2765,  1997, 25162,
         9226, 10055,  2229,  2007,  1037,  4189,  9226,  1012,  2023, 12748,
         2008,  2065,  2057, 12826,  2048,  2107,  9537,  2013,  2367,  5381,
         1010,  2059,  2045,  2003,  2019, 13674,  2135,  2235,  9723,  2008,
         2122,  2048, 11234,  1999,  2625,  2084,  4090,  1003,  1997,  1996,
         9017,  1517,  2471,  2035,  7689,  2097, 11234,  1999,  2055,  2753,
         1003,  1997,  1996,  9017,  1012,  2023,  2003,  7203,  1999,  3275,
         1015,  1012,  1015,  1010,  2029, 16896,  2013,  1031,  1020,  1033,
         1010,  1998,  2001, 19045,  3024,  2011,  2198,  4830, 15916,  2386,
         1012,  1996, 11173,  3642,  2951,  8676,  1997,  3616,  2090,  1014,
         1998,  1015,  1010,  2169,  1037, 10654,  6562,  3292,  1006,  1996,
        12884,  1997, 28616, 18900,  8376,  1007,  2090,  2048, 11173,  9537,
         1012,  1996,  2951,  2031,  2042, 22539,  1999,  2048,  2010,  3406,
        13113,  2015,  1010,  2008,  2003,  1010,  2048, 19287,  2008,  2265,
         1996,  2193,  1997,  9294,  1997, 10654,  6562, 12103,  4634,  1999,
         1037,  3056, 13483,  1012,  2057,  2097,  8087,  2010,  3406, 13113,
         2015,  1998,  2060,  7680,  7849,  3111,  1997,  2951,  1999,  3127,
         2321,  1012,  2028,  5927,  2013,  1996,  3275,  2008,  2005,  9537,
         2013,  1996,  2168, 11173,  1006,  2187,  2217,  1007,  1996, 28616,
        18900,  2818, 12884,  2003,  2069,  2055,  1014,  1012,  5641,  1010,
         2096,  2005,  2367, 20868,  8621,  1006,  2157,  2217,  1007,  2009,
         2003,  2055,  1014,  1012,  4805,  1012,   102])"
4,1,['events'], Biometry iris recognition,seg_3,"you may still wonder how it is possible that irides distinguish people so well. what about twins, for instance? the surprising thing is that although the color of eyes is hereditary, many features of iris patterns seem to be produced by so-called epigenetic events. this means that during embryo development the iris structure develops randomly. in particular, the iris patterns of (monozygotic) twins are as discrepant as those of two arbitrary individuals.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([16012, 24327, 11173,  5038])","tensor([  101,  2017,  2089,  2145,  4687,  2129,  2009,  2003,  2825,  2008,
        20868,  8621, 10782,  2111,  2061,  2092,  1012,  2054,  2055,  8178,
         1010,  2005,  6013,  1029,  1996, 11341,  2518,  2003,  2008,  2348,
         1996,  3609,  1997,  2159,  2003, 14800,  1010,  2116,  2838,  1997,
        11173,  7060,  4025,  2000,  2022,  2550,  2011,  2061,  1011,  2170,
         4958, 29206, 16530,  2824,  1012,  2023,  2965,  2008,  2076, 28086,
         2458,  1996, 11173,  3252, 11791, 18154,  1012,  1999,  3327,  1010,
         1996, 11173,  7060,  1997,  1006, 18847,  9096,  3995,  4588,  1007,
         8178,  2024,  2004,  5860,  2890,  9739,  2102,  2004,  2216,  1997,
         2048, 15275,  3633,  1012,   102])"
5,0,[], Biometry iris recognition,seg_3,"for this reason, as early as in the 1930s, eye specialists proposed that iris patterns might be used for identification purposes.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([16012, 24327, 11173,  5038])","tensor([  101,  2005,  2023,  3114,  1010,  2004,  2220,  2004,  1999,  1996,
         5687,  1010,  3239, 15744,  3818,  2008, 11173,  7060,  2453,  2022,
         2109,  2005,  8720,  5682,  1012,   102])"
6,1,"['confidence interval', 'data', 'interval', 'standard', 'population', 'statistical', 'confidence', 'average', 'combination']", Killer football,seg_5,"a couple of years ago the prestigious british medical journal published a paper with the title “cardiovascular mortality in dutch men during 1996 european football championship: longitudinal population study” ([41]). the authors claim to have shown that the effect of a single football match is detectable in national mortality data. they consider the mortality from infarctions (heart attacks) and strokes, and the “explanation” of the increase is a combination of heavy alcohol consumption and stress caused by watching the football match on june 22 between the netherlands and france (lost by the dutch team!). the authors mainly support their claim with a figure like figure 1.2, which shows the number of deaths from the causes mentioned (for men over 45), during the period june 17 to june 27, 1996. the middle horizontal line marks the average number of deaths on these days, and the upper and lower horizontal lines mark what the authors call the 95% confidence interval. the construction of such an interval is usually performed with standard statistical techniques, which you will learn in chapter 23. the interpretation of such an interval is rather tricky. that the bar on june 22 sticks out off the confidence interval should support the “killer claim.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6359, 2374])","tensor([  101,  1037,  3232,  1997,  2086,  3283,  1996,  8919,  2329,  2966,
         3485,  2405,  1037,  3259,  2007,  1996,  2516,  1523, 22935, 13356,
         1999,  3803,  2273,  2076,  2727,  2647,  2374,  2528,  1024, 20134,
         2313,  2817,  1524,  1006,  1031,  4601,  1033,  1007,  1012,  1996,
         6048,  4366,  2000,  2031,  3491,  2008,  1996,  3466,  1997,  1037,
         2309,  2374,  2674,  2003, 11487,  3085,  1999,  2120, 13356,  2951,
         1012,  2027,  5136,  1996, 13356,  2013,  1999, 14971, 22014,  1006,
         2540,  4491,  1007,  1998, 13692,  1010,  1998,  1996,  1523,  7526,
         1524,  1997,  1996,  3623,  2003,  1037,  5257,  1997,  3082,  6544,
         8381,  1998,  6911,  3303,  2011,  3666,  1996,  2374,  2674,  2006,
         2238,  2570,  2090,  1996,  4549,  1998,  2605,  1006,  2439,  2011,
         1996,  3803,  2136,   999,  1007,  1012,  1996,  6048,  3701,  2490,
         2037,  4366,  2007,  1037,  3275,  2066,  3275,  1015,  1012,  1016,
         1010,  2029,  3065,  1996,  2193,  1997,  6677,  2013,  1996,  5320,
         3855,  1006,  2005,  2273,  2058,  3429,  1007,  1010,  2076,  1996,
         2558,  2238,  2459,  2000,  2238,  2676,  1010,  2727,  1012,  1996,
         2690,  9876,  2240,  6017,  1996,  2779,  2193,  1997,  6677,  2006,
         2122,  2420,  1010,  1998,  1996,  3356,  1998,  2896,  9876,  3210,
         2928,  2054,  1996,  6048,  2655,  1996,  5345,  1003,  7023, 13483,
         1012,  1996,  2810,  1997,  2107,  2019, 13483,  2003,  2788,  2864,
         2007,  3115,  7778,  5461,  1010,  2029,  2017,  2097,  4553,  1999,
         3127,  2603,  1012,  1996,  7613,  1997,  2107,  2019, 13483,  2003,
         2738, 24026,  1012,  2008,  1996,  3347,  2006,  2238,  2570, 12668,
         2041,  2125,  1996,  7023, 13483,  2323,  2490,  1996,  1523,  6359,
         4366,  1012,  1524,   102])"
7,1,"['probability', 'poisson', 'poisson process', 'process', 'model']", Killer football,seg_5,"it is rather surprising that such a conclusion is based on a single football match, and one could wonder why no probability model is proposed in the paper. in fact, as we shall see in chapter 12, it would not be a bad idea to model the time points at which deaths occur as a so-called poisson process.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([6359, 2374])","tensor([  101,  2009,  2003,  2738, 11341,  2008,  2107,  1037,  7091,  2003,
         2241,  2006,  1037,  2309,  2374,  2674,  1010,  1998,  2028,  2071,
         4687,  2339,  2053,  9723,  2944,  2003,  3818,  1999,  1996,  3259,
         1012,  1999,  2755,  1010,  2004,  2057,  4618,  2156,  1999,  3127,
         2260,  1010,  2009,  2052,  2025,  2022,  1037,  2919,  2801,  2000,
         2944,  1996,  2051,  2685,  2012,  2029,  6677,  5258,  2004,  1037,
         2061,  1011,  2170, 13433, 24077,  2832,  1012,   102])"
8,1,"['mean', 'estimation', 'probability', 'interval', 'events', 'poisson', 'sample', 'poisson process', 'process', 'model', 'distribution', 'poisson distribution', 'average', 'data', 'sample mean', 'independent']", Killer football,seg_5,"once we have done this, we can compute how often a pattern like the one in the figure might occur—without paying attention to football matches and other high-risk national events. to do this we need the mean number of deaths per day. this number can be obtained from the data by an estimation procedure (the subject of chapters 19 to 23). we use the sample mean, which is equal to (10 · 27.2 + 41)/11 = 313/11 = 28.45. (here we have to make a computation like this because we only use the data in the paper: 27.2 is the average over the 5 days preceding and following the match, and 41 is the number of deaths on the day of the match.) now let phigh be the probability that there are 41 or more deaths on a day, and let pusual be the probability that there are between 21 and 34 deaths on a day—here 21 and 34 are the lowest and the highest number that fall in the interval in figure 1.2. from the formula of the poisson distribution given in chapter 12 one can compute that phigh = 0.008 and pusual = 0.820. since events on different days are independent according to the poisson process model, the probability p of a pattern as in the figure is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([6359, 2374])","tensor([  101,  2320,  2057,  2031,  2589,  2023,  1010,  2057,  2064, 24134,
         2129,  2411,  1037,  5418,  2066,  1996,  2028,  1999,  1996,  3275,
         2453,  5258,  1517,  2302,  7079,  3086,  2000,  2374,  3503,  1998,
         2060,  2152,  1011,  3891,  2120,  2824,  1012,  2000,  2079,  2023,
         2057,  2342,  1996,  2812,  2193,  1997,  6677,  2566,  2154,  1012,
         2023,  2193,  2064,  2022,  4663,  2013,  1996,  2951,  2011,  2019,
        24155,  7709,  1006,  1996,  3395,  1997,  9159,  2539,  2000,  2603,
         1007,  1012,  2057,  2224,  1996,  7099,  2812,  1010,  2029,  2003,
         5020,  2000,  1006,  2184,  1087,  2676,  1012,  1016,  1009,  4601,
         1007,  1013,  2340,  1027, 22997,  1013,  2340,  1027,  2654,  1012,
         3429,  1012,  1006,  2182,  2057,  2031,  2000,  2191,  1037, 22334,
         2066,  2023,  2138,  2057,  2069,  2224,  1996,  2951,  1999,  1996,
         3259,  1024,  2676,  1012,  1016,  2003,  1996,  2779,  2058,  1996,
         1019,  2420, 11003,  1998,  2206,  1996,  2674,  1010,  1998,  4601,
         2003,  1996,  2193,  1997,  6677,  2006,  1996,  2154,  1997,  1996,
         2674,  1012,  1007,  2085,  2292, 13569,  5603,  2022,  1996,  9723,
         2008,  2045,  2024,  4601,  2030,  2062,  6677,  2006,  1037,  2154,
         1010,  1998,  2292, 16405,  6342,  2389,  2022,  1996,  9723,  2008,
         2045,  2024,  2090,  2538,  1998,  4090,  6677,  2006,  1037,  2154,
         1517,  2182,  2538,  1998,  4090,  2024,  1996,  7290,  1998,  1996,
         3284,  2193,  2008,  2991,  1999,  1996, 13483,  1999,  3275,  1015,
         1012,  1016,  1012,  2013,  1996,  5675,  1997,  1996, 13433, 24077,
         4353,  2445,  1999,  3127,  2260,  2028,  2064, 24134,  2008, 13569,
         5603,  1027,  1014,  1012,  4002,  2620,  1998, 16405,  6342,  2389,
         1027,  1014,  1012, 26667,  1012,  2144,  2824,  2006,  2367,  2420,
         2024,  2981,  2429,  2000,  1996, 13433, 24077,  2832,  2944,  1010,
         1996,  9723,  1052,  1997,  1037,  5418,  2004,  1999,  1996,  3275,
         2003,   102])"
9,1,['law of large numbers'], Killer football,seg_5,"from this it can be shown by (a generalization of) the law of large numbers (which we will study in chapter 13) that such a pattern would appear about once every 1/0.0011 = 899 days. so it is not overwhelmingly exceptional to find such a pattern, and the fact that there was an important football match on the day in the middle of the pattern might just have been a coincidence.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6359, 2374])","tensor([  101,  2013,  2023,  2009,  2064,  2022,  3491,  2011,  1006,  1037,
         2236,  3989,  1997,  1007,  1996,  2375,  1997,  2312,  3616,  1006,
         2029,  2057,  2097,  2817,  1999,  3127,  2410,  1007,  2008,  2107,
         1037,  5418,  2052,  3711,  2055,  2320,  2296,  1015,  1013,  1014,
         1012, 25604,  2487,  1027,  6486,  2683,  2420,  1012,  2061,  2009,
         2003,  2025, 24783, 11813,  2000,  2424,  2107,  1037,  5418,  1010,
         1998,  1996,  2755,  2008,  2045,  2001,  2019,  2590,  2374,  2674,
         2006,  1996,  2154,  1999,  1996,  2690,  1997,  1996,  5418,  2453,
         2074,  2031,  2042,  1037, 16507,  1012,   102])"
10,1,['states'], Cars and goats the Monty Hall dilemma,seg_7,"on sunday september 9, 1990, the following question appeared in the “ask marilyn” column in parade, a sunday supplement to many newspapers across the united states:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3765,  1998, 17977,  1996, 18446,  2534, 21883])","tensor([  101,  2006,  4465,  2244,  1023,  1010,  2901,  1010,  1996,  2206,
         3160,  2596,  1999,  1996,  1523,  3198, 14749,  1524,  5930,  1999,
         7700,  1010,  1037,  4465, 12448,  2000,  2116,  6399,  2408,  1996,
         2142,  2163,  1024,   102])"
11,0,[], Cars and goats the Monty Hall dilemma,seg_7,"suppose you’re on a game show, and you’re given the choice of three doors; behind one door is a car; behind the others, goats. you pick a door, say no. 1, and the host, who knows what’s behind the doors, opens another door, say no. 3, which has a goat. he then says to you, “do you want to pick door no. 2?” is it to your advantage to switch your choice?—craig f. whitaker, columbia, md.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3765,  1998, 17977,  1996, 18446,  2534, 21883])","tensor([  101,  6814,  2017,  1521,  2128,  2006,  1037,  2208,  2265,  1010,
         1998,  2017,  1521,  2128,  2445,  1996,  3601,  1997,  2093,  4303,
         1025,  2369,  2028,  2341,  2003,  1037,  2482,  1025,  2369,  1996,
         2500,  1010, 17977,  1012,  2017,  4060,  1037,  2341,  1010,  2360,
         2053,  1012,  1015,  1010,  1998,  1996,  3677,  1010,  2040,  4282,
         2054,  1521,  1055,  2369,  1996,  4303,  1010,  7480,  2178,  2341,
         1010,  2360,  2053,  1012,  1017,  1010,  2029,  2038,  1037, 13555,
         1012,  2002,  2059,  2758,  2000,  2017,  1010,  1523,  2079,  2017,
         2215,  2000,  4060,  2341,  2053,  1012,  1016,  1029,  1524,  2003,
         2009,  2000,  2115,  5056,  2000,  6942,  2115,  3601,  1029,  1517,
         7010,  1042,  1012, 27049,  1010,  3996,  1010,  9108,  1012,   102])"
12,1,['estimated'], Cars and goats the Monty Hall dilemma,seg_7,"marilyn’s answer—one should switch—caused an avalanche of reactions, in total an estimated 10 000. some of these reactions were not so flattering (“you are the goat”), quite a lot were by professional mathematicians (“you blew it, and blew it big,” “you are utterly incorrect . . . . how many irate mathematicians are needed to change your mind?”). perhaps some of the reactions were so strong, because marilyn vos savant, the author of the column, is in the guinness book of records for having one of the highest iqs in the world.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3765,  1998, 17977,  1996, 18446,  2534, 21883])","tensor([  101, 14749,  1521,  1055,  3437,  1517,  2028,  2323,  6942,  1517,
         3303,  2019, 18846,  1997,  9597,  1010,  1999,  2561,  2019,  4358,
         2184,  2199,  1012,  2070,  1997,  2122,  9597,  2020,  2025,  2061,
         4257, 17989,  1006,  1523,  2017,  2024,  1996, 13555,  1524,  1007,
         1010,  3243,  1037,  2843,  2020,  2011,  2658, 29374,  1006,  1523,
         2017,  8682,  2009,  1010,  1998,  8682,  2009,  2502,  1010,  1524,
         1523,  2017,  2024, 12580, 16542,  1012,  1012,  1012,  1012,  2129,
         2116, 11209,  2618, 29374,  2024,  2734,  2000,  2689,  2115,  2568,
         1029,  1524,  1007,  1012,  3383,  2070,  1997,  1996,  9597,  2020,
         2061,  2844,  1010,  2138, 14749, 29536,  2015, 28350,  3372,  1010,
         1996,  3166,  1997,  1996,  5930,  1010,  2003,  1999,  1996, 17323,
         2338,  1997,  2636,  2005,  2383,  2028,  1997,  1996,  3284, 26264,
         2015,  1999,  1996,  2088,  1012,   102])"
13,0,[], Cars and goats the Monty Hall dilemma,seg_7,"the switching question was inspired by monty hall’s “let’s make a deal” game show, which ran with small interruptions for 23 years on various u.s. television networks.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3765,  1998, 17977,  1996, 18446,  2534, 21883])","tensor([  101,  1996, 11991,  3160,  2001,  4427,  2011, 18446,  2534,  1521,
         1055,  1523,  2292,  1521,  1055,  2191,  1037,  3066,  1524,  2208,
         2265,  1010,  2029,  2743,  2007,  2235, 24191,  2015,  2005,  2603,
         2086,  2006,  2536,  1057,  1012,  1055,  1012,  2547,  6125,  1012,
          102])"
14,1,"['probability', 'simulation', 'case']", Cars and goats the Monty Hall dilemma,seg_7,"although it is not explicitly stated in the question, the game show host will always open a door with a goat after you make your initial choice. many people would argue that in this situation it does not matter whether one would change or not: one door has a car behind it, the other a goat, so the odds to get the car are fifty-fifty. to see why they are wrong, consider the following argument. in the original situation two of the three doors have a goat behind them, so with probability 2/3 your initial choice was wrong, and with probability 1/3 it was right. now the host opens a door with a goat (note that he can always do this). in case your initial choice was wrong the host has only one option to show a door with a goat, and switching leads you to the door with the car. in case your initial choice was right the host has two goats to choose from, so switching will lead you to a goat. we see that switching is the best strategy, doubling our chances to win. to stress this argument, consider the following generalization of the problem: suppose there are 10 000 doors, behind one is a car and behind the rest, goats. after you make your choice, the host will open 9998 doors with goats, and offers you the option to switch. to change or not to change, that’s the question! still not convinced? use your internet browser to find one of the zillion sites where one can run a simulation of the monty hall problem (more about simulation in chapter 6).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3765,  1998, 17977,  1996, 18446,  2534, 21883])","tensor([  101,  2348,  2009,  2003,  2025, 12045,  3090,  1999,  1996,  3160,
         1010,  1996,  2208,  2265,  3677,  2097,  2467,  2330,  1037,  2341,
         2007,  1037, 13555,  2044,  2017,  2191,  2115,  3988,  3601,  1012,
         2116,  2111,  2052,  7475,  2008,  1999,  2023,  3663,  2009,  2515,
         2025,  3043,  3251,  2028,  2052,  2689,  2030,  2025,  1024,  2028,
         2341,  2038,  1037,  2482,  2369,  2009,  1010,  1996,  2060,  1037,
        13555,  1010,  2061,  1996, 10238,  2000,  2131,  1996,  2482,  2024,
         5595,  1011,  5595,  1012,  2000,  2156,  2339,  2027,  2024,  3308,
         1010,  5136,  1996,  2206,  6685,  1012,  1999,  1996,  2434,  3663,
         2048,  1997,  1996,  2093,  4303,  2031,  1037, 13555,  2369,  2068,
         1010,  2061,  2007,  9723,  1016,  1013,  1017,  2115,  3988,  3601,
         2001,  3308,  1010,  1998,  2007,  9723,  1015,  1013,  1017,  2009,
         2001,  2157,  1012,  2085,  1996,  3677,  7480,  1037,  2341,  2007,
         1037, 13555,  1006,  3602,  2008,  2002,  2064,  2467,  2079,  2023,
         1007,  1012,  1999,  2553,  2115,  3988,  3601,  2001,  3308,  1996,
         3677,  2038,  2069,  2028,  5724,  2000,  2265,  1037,  2341,  2007,
         1037, 13555,  1010,  1998, 11991,  5260,  2017,  2000,  1996,  2341,
         2007,  1996,  2482,  1012,  1999,  2553,  2115,  3988,  3601,  2001,
         2157,  1996,  3677,  2038,  2048, 17977,  2000,  5454,  2013,  1010,
         2061, 11991,  2097,  2599,  2017,  2000,  1037, 13555,  1012,  2057,
         2156,  2008, 11991,  2003,  1996,  2190,  5656,  1010, 19383,  2256,
         9592,  2000,  2663,  1012,  2000,  6911,  2023,  6685,  1010,  5136,
         1996,  2206,  2236,  3989,  1997,  1996,  3291,  1024,  6814,  2045,
         2024,  2184,  2199,  4303,  1010,  2369,  2028,  2003,  1037,  2482,
         1998,  2369,  1996,  2717,  1010, 17977,  1012,  2044,  2017,  2191,
         2115,  3601,  1010,  1996,  3677,  2097,  2330, 25897,  2620,  4303,
         2007, 17977,  1010,  1998,  4107,  2017,  1996,  5724,  2000,  6942,
         1012,  2000,  2689,  2030,  2025,  2000,  2689,  1010,  2008,  1521,
         1055,  1996,  3160,   999,  2145,  2025,  6427,  1029,  2224,  2115,
         4274, 16602,  2000,  2424,  2028,  1997,  1996,  1062,  8591,  3258,
         4573,  2073,  2028,  2064,  2448,  1037, 12504,  1997,  1996, 18446,
         2534,  3291,  1006,  2062,  2055, 12504,  1999,  3127,  1020,  1007,
         1012,   102])"
15,1,"['moment', 'probability', 'variations', 'law of total probability', 'total probability']", Cars and goats the Monty Hall dilemma,seg_7,"in fact, there are quite a lot of variations on the problem. for example, the situation that there are four doors: you select a door, the host always opens a door with a goat, and offers you to select another door. after you have made up your mind he opens a door with a goat, and again offers you to switch. after you have decided, he opens the door you selected. what is now the best strategy? in this situation switching only at the last possible moment yields a probability of 3/4 to bring the car home. using the law of total probability from section 3.3 you will find that this is indeed the best possible strategy.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3765,  1998, 17977,  1996, 18446,  2534, 21883])","tensor([  101,  1999,  2755,  1010,  2045,  2024,  3243,  1037,  2843,  1997,
         8358,  2006,  1996,  3291,  1012,  2005,  2742,  1010,  1996,  3663,
         2008,  2045,  2024,  2176,  4303,  1024,  2017,  7276,  1037,  2341,
         1010,  1996,  3677,  2467,  7480,  1037,  2341,  2007,  1037, 13555,
         1010,  1998,  4107,  2017,  2000,  7276,  2178,  2341,  1012,  2044,
         2017,  2031,  2081,  2039,  2115,  2568,  2002,  7480,  1037,  2341,
         2007,  1037, 13555,  1010,  1998,  2153,  4107,  2017,  2000,  6942,
         1012,  2044,  2017,  2031,  2787,  1010,  2002,  7480,  1996,  2341,
         2017,  3479,  1012,  2054,  2003,  2085,  1996,  2190,  5656,  1029,
         1999,  2023,  3663, 11991,  2069,  2012,  1996,  2197,  2825,  2617,
        16189,  1037,  9723,  1997,  1017,  1013,  1018,  2000,  3288,  1996,
         2482,  2188,  1012,  2478,  1996,  2375,  1997,  2561,  9723,  2013,
         2930,  1017,  1012,  1017,  2017,  2097,  2424,  2008,  2023,  2003,
         5262,  1996,  2190,  2825,  5656,  1012,   102])"
16,1,['space shuttle challenger'], The space shuttle Challenger,seg_9,"on january 28, 1986, the space shuttle challenger exploded about one minute after it had taken off from the launch pad at kennedy space center in florida. the seven astronauts on board were killed and the spacecraft was destroyed. the cause of the disaster was explosion of the main fuel tank, caused by flames of hot gas erupting from one of the so-called solid rocket boosters.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101,  2006,  2254,  2654,  1010,  3069,  1010,  1996,  2686, 10382,
        12932,  9913,  2055,  2028,  3371,  2044,  2009,  2018,  2579,  2125,
         2013,  1996,  4888, 11687,  2012,  5817,  2686,  2415,  1999,  3516,
         1012,  1996,  2698, 25881,  2006,  2604,  2020,  2730,  1998,  1996,
        12076,  2001,  3908,  1012,  1996,  3426,  1997,  1996,  7071,  2001,
         7738,  1997,  1996,  2364,  4762,  4951,  1010,  3303,  2011,  7311,
         1997,  2980,  3806,  9413, 29441,  2075,  2013,  2028,  1997,  1996,
         2061,  1011,  2170,  5024,  7596, 23715,  2015,  1012,   102])"
17,0,[], The space shuttle Challenger,seg_9,"these solid rocket boosters had been cause for concern since the early years of the shuttle. they are manufactured in segments, which are joined at a later stage, resulting in a number of joints that are sealed to protect against leakage. this is done with so-called o-rings, which in turn are protected by a layer of putty. when the rocket motor ignites, high pressure and high temperature",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101,  2122,  5024,  7596, 23715,  2015,  2018,  2042,  3426,  2005,
         5142,  2144,  1996,  2220,  2086,  1997,  1996, 10382,  1012,  2027,
         2024,  7609,  1999,  9214,  1010,  2029,  2024,  2587,  2012,  1037,
         2101,  2754,  1010,  4525,  1999,  1037,  2193,  1997, 17651,  2008,
         2024, 10203,  2000,  4047,  2114, 17271,  4270,  1012,  2023,  2003,
         2589,  2007,  2061,  1011,  2170,  1051,  1011,  7635,  1010,  2029,
         1999,  2735,  2024,  5123,  2011,  1037,  6741,  1997,  2404,  3723,
         1012,  2043,  1996,  7596,  5013, 16270,  7616,  1010,  2152,  3778,
         1998,  2152,  4860,   102])"
18,0,[], The space shuttle Challenger,seg_9,"build up within. in time these may burn away the putty and subsequently erode the o-rings, eventually causing hot flames to erupt on the outside. in a nutshell, this is what actually happened to the challenger.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101,  3857,  2039,  2306,  1012,  1999,  2051,  2122,  2089,  6402,
         2185,  1996,  2404,  3723,  1998,  3525,  9413, 10244,  1996,  1051,
         1011,  7635,  1010,  2776,  4786,  2980,  7311,  2000,  9413, 29441,
         2006,  1996,  2648,  1012,  1999,  1037, 12264, 18223,  1010,  2023,
         2003,  2054,  2941,  3047,  2000,  1996, 12932,  1012,   102])"
19,1,"['set', 'predicted', 'limit']", The space shuttle Challenger,seg_9,"after the explosion, an investigative commission determined the causes of the disaster, and a report was issued with many findings and recommendations ([24]). on the evening of january 27, a decision to launch the next day had been made, notwithstanding the fact that an extremely low temperature of 31◦f had been predicted, well below the operating limit of 40◦f set by morton thiokol, the manufacturer of the solid rocket boosters. apparently, a “man- agement decision” was made to overrule the engineers’ recommendation not to launch. the inquiry faulted both nasa and morton thiokol management for giving in to the pressure to launch, ignoring warnings about problems with the seals.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101,  2044,  1996,  7738,  1010,  2019, 15025,  3222,  4340,  1996,
         5320,  1997,  1996,  7071,  1010,  1998,  1037,  3189,  2001,  3843,
         2007,  2116,  9556,  1998, 11433,  1006,  1031,  2484,  1033,  1007,
         1012,  2006,  1996,  3944,  1997,  2254,  2676,  1010,  1037,  3247,
         2000,  4888,  1996,  2279,  2154,  2018,  2042,  2081,  1010, 26206,
         1996,  2755,  2008,  2019,  5186,  2659,  4860,  1997,   100,  2018,
         2042, 10173,  1010,  2092,  2917,  1996,  4082,  5787,  1997,   100,
         2275,  2011, 11164, 16215,  3695,  3683,  2140,  1010,  1996,  7751,
         1997,  1996,  5024,  7596, 23715,  2015,  1012,  4593,  1010,  1037,
         1523,  2158,  1011,  2287,  3672,  3247,  1524,  2001,  2081,  2000,
         2058,  6820,  2571,  1996,  6145,  1521, 12832,  2025,  2000,  4888,
         1012,  1996,  9934,  6346,  2098,  2119,  9274,  1998, 11164, 16215,
         3695,  3683,  2140,  2968,  2005,  3228,  1999,  2000,  1996,  3778,
         2000,  4888,  1010,  9217, 16234,  2055,  3471,  2007,  1996, 13945,
         1012,   102])"
20,1,"['failures', 'data', 'case']", The space shuttle Challenger,seg_9,"the challenger launch was the 24th of the space shuttle program, and we shall look at the data on the number of failed o-rings, available from previous launches (see [5] for more details). each rocket has three o-rings, and two rocket boosters are used per launch, so in total six o-rings are used each time. because low temperatures are known to adversely affect the o-rings, we also look at the corresponding launch temperature. in figure 1.3 the dots show the number of failed o-rings per mission (there are 23 dots—one time the boosters could not be recovered from the ocean; temperatures are rounded to the nearest degree fahrenheit; in case of two or more equal data points these are shifted slightly.). if you ignore the dots representing zero failures, which all occurred at high temperatures, a temperature effect is not apparent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101,  1996, 12932,  4888,  2001,  1996, 13386,  1997,  1996,  2686,
        10382,  2565,  1010,  1998,  2057,  4618,  2298,  2012,  1996,  2951,
         2006,  1996,  2193,  1997,  3478,  1051,  1011,  7635,  1010,  2800,
         2013,  3025, 18989,  1006,  2156,  1031,  1019,  1033,  2005,  2062,
         4751,  1007,  1012,  2169,  7596,  2038,  2093,  1051,  1011,  7635,
         1010,  1998,  2048,  7596, 23715,  2015,  2024,  2109,  2566,  4888,
         1010,  2061,  1999,  2561,  2416,  1051,  1011,  7635,  2024,  2109,
         2169,  2051,  1012,  2138,  2659,  7715,  2024,  2124,  2000, 15316,
         2135,  7461,  1996,  1051,  1011,  7635,  1010,  2057,  2036,  2298,
         2012,  1996,  7978,  4888,  4860,  1012,  1999,  3275,  1015,  1012,
         1017,  1996, 14981,  2265,  1996,  2193,  1997,  3478,  1051,  1011,
         7635,  2566,  3260,  1006,  2045,  2024,  2603, 14981,  1517,  2028,
         2051,  1996, 23715,  2015,  2071,  2025,  2022,  6757,  2013,  1996,
         4153,  1025,  7715,  2024,  8352,  2000,  1996,  7205,  3014,  6904,
        28362, 25311, 20175,  1025,  1999,  2553,  1997,  2048,  2030,  2062,
         5020,  2951,  2685,  2122,  2024,  5429,  3621,  1012,  1007,  1012,
         2065,  2017,  8568,  1996, 14981,  5052,  5717, 15428,  1010,  2029,
         2035,  4158,  2012,  2152,  7715,  1010,  1037,  4860,  3466,  2003,
         2025,  6835,  1012,   102])"
21,1,"['dependence', 'data', 'probability', 'distribution', 'model', 'logistic model', 'binomial', 'logistic', 'binomial distribution']", The space shuttle Challenger,seg_9,"in a model to describe these data, the probability p(t) that an individual o-ring fails should depend on the launch temperature t. per mission, the number of failed o-rings follows a so-called binomial distribution: six o-rings, and each may fail with probability p(t); more about this distribution and the circumstances under which it arises can be found in chapter 4. a logistic model was used in [5] to describe the dependence on t:",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101,  1999,  1037,  2944,  2000,  6235,  2122,  2951,  1010,  1996,
         9723,  1052,  1006,  1056,  1007,  2008,  2019,  3265,  1051,  1011,
         3614, 11896,  2323, 12530,  2006,  1996,  4888,  4860,  1056,  1012,
         2566,  3260,  1010,  1996,  2193,  1997,  3478,  1051,  1011,  7635,
         4076,  1037,  2061,  1011,  2170,  8026, 20936,  2389,  4353,  1024,
         2416,  1051,  1011,  7635,  1010,  1998,  2169,  2089,  8246,  2007,
         9723,  1052,  1006,  1056,  1007,  1025,  2062,  2055,  2023,  4353,
         1998,  1996,  6214,  2104,  2029,  2009, 18653,  2064,  2022,  2179,
         1999,  3127,  1018,  1012,  1037,  8833,  6553,  2944,  2001,  2109,
         1999,  1031,  1019,  1033,  2000,  6235,  1996, 18642,  2006,  1056,
         1024,   102])"
22,1,"['function', 'method of maximum likelihood', 'probability', 'estimated', 'probabilities', 'failures', 'maximum likelihood', 'method', 'results', 'likelihood', 'data']", The space shuttle Challenger,seg_9,"a high value of a + b · t corresponds to a high value of p(t), a low value to low p(t). values of a and b were determined from the data, according to the following principle: choose a and b so that the probability that we get data as in figure 1.3 is as high as possible. this is an example of the use of the method of maximum likelihood, which we shall discuss in chapter 21. this results in a = 5.085 and b = −0.1156, which indeed leads to lower probabilities at higher temperatures, and to p(31) = 0.8178. we can also compute the (estimated) expected number of failures, 6 ·p(t), as a function of the launch temperature t; this is the plotted line in the figure.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101,  1037,  2152,  3643,  1997,  1037,  1009,  1038,  1087,  1056,
        14788,  2000,  1037,  2152,  3643,  1997,  1052,  1006,  1056,  1007,
         1010,  1037,  2659,  3643,  2000,  2659,  1052,  1006,  1056,  1007,
         1012,  5300,  1997,  1037,  1998,  1038,  2020,  4340,  2013,  1996,
         2951,  1010,  2429,  2000,  1996,  2206,  6958,  1024,  5454,  1037,
         1998,  1038,  2061,  2008,  1996,  9723,  2008,  2057,  2131,  2951,
         2004,  1999,  3275,  1015,  1012,  1017,  2003,  2004,  2152,  2004,
         2825,  1012,  2023,  2003,  2019,  2742,  1997,  1996,  2224,  1997,
         1996,  4118,  1997,  4555, 16593,  1010,  2029,  2057,  4618,  6848,
         1999,  3127,  2538,  1012,  2023,  3463,  1999,  1037,  1027,  1019,
         1012,  5511,  2629,  1998,  1038,  1027,  1597,  2692,  1012, 10630,
         2575,  1010,  2029,  5262,  5260,  2000,  2896,  4013,  3676, 14680,
         2012,  3020,  7715,  1010,  1998,  2000,  1052,  1006,  2861,  1007,
         1027,  1014,  1012,  6282,  2581,  2620,  1012,  2057,  2064,  2036,
        24134,  1996,  1006,  4358,  1007,  3517,  2193,  1997, 15428,  1010,
         1020,  1087,  1052,  1006,  1056,  1007,  1010,  2004,  1037,  3853,
         1997,  1996,  4888,  4860,  1056,  1025,  2023,  2003,  1996, 27347,
         2240,  1999,  1996,  3275,  1012,   102])"
23,1,"['probability', 'estimated', 'events', 'failure', 'estimates', 'probabilities']", The space shuttle Challenger,seg_9,"combining the estimates with estimated probabilities of other events that should happen for a complete failure of the field-joint, the estimated probability of such a failure is 0.023. with six field-joints, the probability of at least one complete failure is then 1 − (1 − 0.023)6 = 0.13!",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2686, 10382, 12932])","tensor([  101, 11566,  1996, 10035,  2007,  4358,  4013,  3676, 14680,  1997,
         2060,  2824,  2008,  2323,  4148,  2005,  1037,  3143,  4945,  1997,
         1996,  2492,  1011,  4101,  1010,  1996,  4358,  9723,  1997,  2107,
         1037,  4945,  2003,  1014,  1012,  6185,  2509,  1012,  2007,  2416,
         2492,  1011, 17651,  1010,  1996,  9723,  1997,  2012,  2560,  2028,
         3143,  4945,  2003,  2059,  1015,  1597,  1006,  1015,  1597,  1014,
         1012,  6185,  2509,  1007,  1020,  1027,  1014,  1012,  2410,   999,
          102])"
24,1,"['estimates', 'information']", Statistics versus intelligence agencies,seg_11,"during world war ii, information about germany’s war potential was essential to the allied forces in order to schedule the time of invasions and to carry out the allied strategic bombing program. methods for estimating german production used during the early phases of the war proved to be inadequate. in order to obtain more reliable estimates of german war production, experts from the economic warfare division of the american embassy and the british ministry of economic warfare started to analyze markings and serial numbers obtained from captured german equipment.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6747, 6431, 4454, 6736])","tensor([  101,  2076,  2088,  2162,  2462,  1010,  2592,  2055,  2762,  1521,
         1055,  2162,  4022,  2001,  6827,  2000,  1996,  6035,  2749,  1999,
         2344,  2000,  6134,  1996,  2051,  1997, 23536,  1998,  2000,  4287,
         2041,  1996,  6035,  6143,  8647,  2565,  1012,  4725,  2005,  9765,
        22835,  2446,  2537,  2109,  2076,  1996,  2220, 12335,  1997,  1996,
         2162,  4928,  2000,  2022, 14710,  1012,  1999,  2344,  2000,  6855,
         2062, 10539, 10035,  1997,  2446,  2162,  2537,  1010,  8519,  2013,
         1996,  3171,  8309,  2407,  1997,  1996,  2137,  8408,  1998,  1996,
         2329,  3757,  1997,  3171,  8309,  2318,  2000, 17908, 13967,  1998,
         7642,  3616,  4663,  2013,  4110,  2446,  3941,  1012,   102])"
25,1,"['location', 'information', 'control']", Statistics versus intelligence agencies,seg_11,"each piece of enemy equipment was labeled with markings, which included all or some portion of the following information: (a) the name and location of the marker; (b) the date of manufacture; (c) a serial number; and (d) miscellaneous markings such as trademarks, mold numbers, casting numbers, etc. the purpose of these markings was to maintain an effective check on production standards and to perform spare parts control. however, these same markings offered allied intelligence a wealth of information about german industry.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([6747, 6431, 4454, 6736])","tensor([  101,  2169,  3538,  1997,  4099,  3941,  2001, 12599,  2007, 13967,
         1010,  2029,  2443,  2035,  2030,  2070,  4664,  1997,  1996,  2206,
         2592,  1024,  1006,  1037,  1007,  1996,  2171,  1998,  3295,  1997,
         1996, 12115,  1025,  1006,  1038,  1007,  1996,  3058,  1997,  9922,
         1025,  1006,  1039,  1007,  1037,  7642,  2193,  1025,  1998,  1006,
         1040,  1007, 25408, 13967,  2107,  2004, 11749,  2015,  1010, 18282,
         3616,  1010,  9179,  3616,  1010,  4385,  1012,  1996,  3800,  1997,
         2122, 13967,  2001,  2000,  5441,  2019,  4621,  4638,  2006,  2537,
         4781,  1998,  2000,  4685,  8622,  3033,  2491,  1012,  2174,  1010,
         2122,  2168, 13967,  3253,  6035,  4454,  1037,  7177,  1997,  2592,
         2055,  2446,  3068,  1012,   102])"
26,0,[], Statistics versus intelligence agencies,seg_11,"the first products to be analyzed were tires taken from german aircraft shot over britain and from supply dumps of aircraft and motor vehicle tires captured in north africa. the marking on each tire contained the maker’s name,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([6747, 6431, 4454, 6736])","tensor([  101,  1996,  2034,  3688,  2000,  2022, 16578,  2020, 13310,  2579,
         2013,  2446,  2948,  2915,  2058,  3725,  1998,  2013,  4425, 15653,
         2015,  1997,  2948,  1998,  5013,  4316, 13310,  4110,  1999,  2167,
         3088,  1012,  1996, 10060,  2006,  2169, 12824,  4838,  1996,  9338,
         1521,  1055,  2171,  1010,   102])"
27,1,"['variations', 'table']", Statistics versus intelligence agencies,seg_11,"a serial number, and a two-letter code for the date of manufacture. the first step in analyzing the tire markings involved breaking the two-letter date code. it was conjectured that one letter represented the month and the other the year of manufacture, and that there should be 12 letter variations for the month code and 3 to 6 for the year code. this, indeed, turned out to be true. the following table presents examples of the 12 letter variations used by four different manufacturers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([6747, 6431, 4454, 6736])","tensor([  101,  1037,  7642,  2193,  1010,  1998,  1037,  2048,  1011,  3661,
         3642,  2005,  1996,  3058,  1997,  9922,  1012,  1996,  2034,  3357,
         1999, 20253,  1996, 12824, 13967,  2920,  4911,  1996,  2048,  1011,
         3661,  3058,  3642,  1012,  2009,  2001, 22647,  2094,  2008,  2028,
         3661,  3421,  1996,  3204,  1998,  1996,  2060,  1996,  2095,  1997,
         9922,  1010,  1998,  2008,  2045,  2323,  2022,  2260,  3661,  8358,
         2005,  1996,  3204,  3642,  1998,  1017,  2000,  1020,  2005,  1996,
         2095,  3642,  1012,  2023,  1010,  5262,  1010,  2357,  2041,  2000,
         2022,  2995,  1012,  1996,  2206,  2795,  7534,  4973,  1997,  1996,
         2260,  3661,  8358,  2109,  2011,  2176,  2367,  8712,  1012,   102])"
28,1,"['estimation', 'estimate', 'method', 'average']", Statistics versus intelligence agencies,seg_11,"for instance, the dunlop code was dunlop arbeit spelled backwards. next, the year code was broken and the numbering system was solved so that for each manufacturer individually the serial numbers could be dated. moreover, for each month, the serial numbers could be recoded to numbers running from 1 to some unknown largest number n , and the observed (recoded) serial numbers could be seen as a subset of this. the objective was to estimate n for each month and each manufacturer separately by means of the observed (recoded) serial numbers. in chapter 20 we discuss two different methods of estimation, and we show that the method based on only the maximum observed (recoded) serial number is much better than the method based on the average observed (recoded) serial numbers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6747, 6431, 4454, 6736])","tensor([  101,  2005,  6013,  1010,  1996, 27458,  3642,  2001, 27458, 12098,
        19205,  2102, 11479, 11043,  1012,  2279,  1010,  1996,  2095,  3642,
         2001,  3714,  1998,  1996, 15200,  2291,  2001, 13332,  2061,  2008,
         2005,  2169,  7751, 14258,  1996,  7642,  3616,  2071,  2022,  6052,
         1012,  9308,  1010,  2005,  2169,  3204,  1010,  1996,  7642,  3616,
         2071,  2022, 28667, 10244,  2094,  2000,  3616,  2770,  2013,  1015,
         2000,  2070,  4242,  2922,  2193,  1050,  1010,  1998,  1996,  5159,
         1006, 28667, 10244,  2094,  1007,  7642,  3616,  2071,  2022,  2464,
         2004,  1037, 16745,  1997,  2023,  1012,  1996,  7863,  2001,  2000,
        10197,  1050,  2005,  2169,  3204,  1998,  2169,  7751, 10329,  2011,
         2965,  1997,  1996,  5159,  1006, 28667, 10244,  2094,  1007,  7642,
         3616,  1012,  1999,  3127,  2322,  2057,  6848,  2048,  2367,  4725,
         1997, 24155,  1010,  1998,  2057,  2265,  2008,  1996,  4118,  2241,
         2006,  2069,  1996,  4555,  5159,  1006, 28667, 10244,  2094,  1007,
         7642,  2193,  2003,  2172,  2488,  2084,  1996,  4118,  2241,  2006,
         1996,  2779,  5159,  1006, 28667, 10244,  2094,  1007,  7642,  3616,
         1012,   102])"
29,1,"['table', 'estimated', 'estimates', 'sample', 'statistics', 'average']", Statistics versus intelligence agencies,seg_11,"with a sample of about 1400 tires from five producers, individual monthly output figures were obtained for almost all months over a period from 1939 to mid-1943. the following table compares the accuracy of estimates of the average monthly production of all manufacturers of the first quarter of 1943 with the statistics of the speer ministry that became available after the war. the accuracy of the estimates can be appreciated even more if we compare them with the figures obtained by allied intelligence agencies. they estimated, using other methods, the production between 900 000 and 1 200 000 per month!",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([6747, 6431, 4454, 6736])","tensor([  101,  2007,  1037,  7099,  1997,  2055, 20652, 13310,  2013,  2274,
         6443,  1010,  3265,  7058,  6434,  4481,  2020,  4663,  2005,  2471,
         2035,  2706,  2058,  1037,  2558,  2013,  3912,  2000,  3054,  1011,
         3826,  1012,  1996,  2206,  2795, 22963,  1996, 10640,  1997, 10035,
         1997,  1996,  2779,  7058,  2537,  1997,  2035,  8712,  1997,  1996,
         2034,  4284,  1997,  3826,  2007,  1996,  6747,  1997,  1996, 11867,
        11510,  3757,  2008,  2150,  2800,  2044,  1996,  2162,  1012,  1996,
        10640,  1997,  1996, 10035,  2064,  2022, 12315,  2130,  2062,  2065,
         2057, 12826,  2068,  2007,  1996,  4481,  4663,  2011,  6035,  4454,
         6736,  1012,  2027,  4358,  1010,  2478,  2060,  4725,  1010,  1996,
         2537,  2090,  7706,  2199,  1998,  1015,  3263,  2199,  2566,  3204,
          999,   102])"
30,1,['estimated'], Statistics versus intelligence agencies,seg_11,type of tire estimated production actual production,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([6747, 6431, 4454, 6736])","tensor([  101,  2828,  1997, 12824,  4358,  2537,  5025,  2537,   102])"
31,1,"['interval', 'observations', 'experimental', 'experiments', 'statistical', 'measurements']", The speed of light,seg_13,"in 1983 the definition of the meter (the si unit of one meter) was changed to: the meter is the length of the path traveled by light in vacuum during a time interval of 1/299 792 458 of a second. this implicitly defines the speed of light as 299 792 458 meters per second. it was done because one thought that the speed of light was so accurately known that it made more sense to define the meter in terms of the speed of light rather than vice versa, a remarkable end to a long story of scientific discovery. for a long time most scientists believed that the speed of light was infinite. early experiments devised to demonstrate the finiteness of the speed of light failed because the speed is so extraordinarily high. in the 18th century this debate was settled, and work started on determination of the speed, using astronomical observations, but a century later scientists turned to earth-based experiments. albert michelson refined experimental arrangements from two previous experiments and conducted a series of measurements in june and early july of 1879, at the u.s. naval academy in annapolis. in this section we give a very short summary of his work. it is extracted from an article in statistical science ([18]).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  1999,  3172,  1996,  6210,  1997,  1996,  8316,  1006,  1996,
         9033,  3131,  1997,  2028,  8316,  1007,  2001,  2904,  2000,  1024,
         1996,  8316,  2003,  1996,  3091,  1997,  1996,  4130,  6158,  2011,
         2422,  1999, 11641,  2076,  1037,  2051, 13483,  1997,  1015,  1013,
        25926,  6535,  2475,  3429,  2620,  1997,  1037,  2117,  1012,  2023,
        24655,  2135, 11859,  1996,  3177,  1997,  2422,  2004, 25926,  6535,
         2475,  3429,  2620,  5563,  2566,  2117,  1012,  2009,  2001,  2589,
         2138,  2028,  2245,  2008,  1996,  3177,  1997,  2422,  2001,  2061,
        14125,  2124,  2008,  2009,  2081,  2062,  3168,  2000,  9375,  1996,
         8316,  1999,  3408,  1997,  1996,  3177,  1997,  2422,  2738,  2084,
         3580, 18601,  1010,  1037,  9487,  2203,  2000,  1037,  2146,  2466,
         1997,  4045,  5456,  1012,  2005,  1037,  2146,  2051,  2087,  6529,
         3373,  2008,  1996,  3177,  1997,  2422,  2001, 10709,  1012,  2220,
         7885, 14917,  2000, 10580,  1996, 10713,  2791,  1997,  1996,  3177,
         1997,  2422,  3478,  2138,  1996,  3177,  2003,  2061,  4469,  8551,
         3981, 11272,  2152,  1012,  1999,  1996,  4985,  2301,  2023,  5981,
         2001,  3876,  1010,  1998,  2147,  2318,  2006,  9128,  1997,  1996,
         3177,  1010,  2478, 13674,  9420,  1010,  2021,  1037,  2301,  2101,
         6529,  2357,  2000,  3011,  1011,  2241,  7885,  1012,  4789,  8709,
         3385, 15514,  6388,  7565,  2013,  2048,  3025,  7885,  1998,  4146,
         1037,  2186,  1997, 11702,  1999,  2238,  1998,  2220,  2251,  1997,
         7449,  1010,  2012,  1996,  1057,  1012,  1055,  1012,  3987,  2914,
         1999, 24889,  1012,  1999,  2023,  2930,  2057,  2507,  1037,  2200,
         2460, 12654,  1997,  2010,  2147,  1012,  2009,  2003, 15901,  2013,
         2019,  3720,  1999,  7778,  2671,  1006,  1031,  2324,  1033,  1007,
         1012,   102])"
32,1,"['interval', 'measurement']", The speed of light,seg_13,"the principle of speed measurement is easy, of course: measure a distance and the time it takes to travel that distance, the speed equals distance divided by time. for an accurate determination, both the distance and the time need to be measured accurately, and with the speed of light this is a problem: either we should use a very large distance and the accuracy of the distance measurement is a problem, or we have a very short time interval, which is also very difficult to measure accurately.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  1996,  6958,  1997,  3177, 10903,  2003,  3733,  1010,  1997,
         2607,  1024,  5468,  1037,  3292,  1998,  1996,  2051,  2009,  3138,
         2000,  3604,  2008,  3292,  1010,  1996,  3177, 19635,  3292,  4055,
         2011,  2051,  1012,  2005,  2019,  8321,  9128,  1010,  2119,  1996,
         3292,  1998,  1996,  2051,  2342,  2000,  2022,  7594, 14125,  1010,
         1998,  2007,  1996,  3177,  1997,  2422,  2023,  2003,  1037,  3291,
         1024,  2593,  2057,  2323,  2224,  1037,  2200,  2312,  3292,  1998,
         1996, 10640,  1997,  1996,  3292, 10903,  2003,  1037,  3291,  1010,
         2030,  2057,  2031,  1037,  2200,  2460,  2051, 13483,  1010,  2029,
         2003,  2036,  2200,  3697,  2000,  5468, 14125,  1012,   102])"
33,1,['experimental'], The speed of light,seg_13,"in michelson’s time it was known that the speed of light was about 300 000 km/s, and he embarked on his study with the goal of an improved value of the speed of light. his experimental setup is depicted schematically in figure 1.4. light emitted from a light source is aimed, through a slit in a fixed plate, at a rotating mirror; we call its distance from the plate the radius. at one particular angle, this rotating mirror reflects the beam in the direction of a distant (fixed) flat mirror. on its way the light first passes through a focusing lens. this second mirror is positioned in such a way that it reflects the beam back in the direction of the rotating mirror. in the time it takes the light to travel back and forth between the two mirrors, the rotating mirror has moved by an angle α, resulting in a reflection on the plate that is displaced with respect to the source beam that passed through the slit. the radius and the displacement determine the angle α because",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  1999,  8709,  3385,  1521,  1055,  2051,  2009,  2001,  2124,
         2008,  1996,  3177,  1997,  2422,  2001,  2055,  3998,  2199,  2463,
         1013,  1055,  1010,  1998,  2002, 11299,  2006,  2010,  2817,  2007,
         1996,  3125,  1997,  2019,  5301,  3643,  1997,  1996,  3177,  1997,
         2422,  1012,  2010,  6388, 16437,  2003,  8212,  8040, 28433, 25084,
         1999,  3275,  1015,  1012,  1018,  1012,  2422, 22627,  2013,  1037,
         2422,  3120,  2003,  6461,  1010,  2083,  1037, 18036,  1999,  1037,
         4964,  5127,  1010,  2012,  1037, 13618,  5259,  1025,  2057,  2655,
         2049,  3292,  2013,  1996,  5127,  1996, 12177,  1012,  2012,  2028,
         3327,  6466,  1010,  2023, 13618,  5259, 11138,  1996,  7504,  1999,
         1996,  3257,  1997,  1037,  6802,  1006,  4964,  1007,  4257,  5259,
         1012,  2006,  2049,  2126,  1996,  2422,  2034,  5235,  2083,  1037,
         7995, 10014,  1012,  2023,  2117,  5259,  2003, 10959,  1999,  2107,
         1037,  2126,  2008,  2009, 11138,  1996,  7504,  2067,  1999,  1996,
         3257,  1997,  1996, 13618,  5259,  1012,  1999,  1996,  2051,  2009,
         3138,  1996,  2422,  2000,  3604,  2067,  1998,  5743,  2090,  1996,
         2048, 13536,  1010,  1996, 13618,  5259,  2038,  2333,  2011,  2019,
         6466,  1155,  1010,  4525,  1999,  1037,  9185,  2006,  1996,  5127,
         2008,  2003, 12936,  2007,  4847,  2000,  1996,  3120,  7504,  2008,
         2979,  2083,  1996, 18036,  1012,  1996, 12177,  1998,  1996, 13508,
         5646,  1996,  6466,  1155,  2138,   102])"
34,0,[], The speed of light,seg_13,displacement tan 2α = radius,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([1996, 3177, 1997, 2422])","tensor([  101, 13508,  9092,  1016, 14608,  1027, 12177,   102])"
35,0,[], The speed of light,seg_13,"and combined with the number of revolutions per seconds (rps) of the mirror, this determines the elapsed time:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  1998,  4117,  2007,  1996,  2193,  1997, 25239,  2566,  3823,
         1006,  1054,  4523,  1007,  1997,  1996,  5259,  1010,  2023, 16463,
         1996,  3449,  9331,  6924,  2051,  1024,   102])"
36,0,[], The speed of light,seg_13,"during this time the light traveled twice the distance between the mirrors, so the speed of light in air now follows:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  2076,  2023,  2051,  1996,  2422,  6158,  3807,  1996,  3292,
         2090,  1996, 13536,  1010,  2061,  1996,  3177,  1997,  2422,  1999,
         2250,  2085,  4076,  1024,   102])"
37,0,[], The speed of light,seg_13,2 · distance cair = . time,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  1016,  1087,  3292, 29080,  2099,  1027,  1012,  2051,   102])"
38,1,['error'], The speed of light,seg_13,"all in all, it looks simple: just measure the four quantities—distance, radius, displacement and the revolutions per second—and do the calculations. this is much harder than it looks, and problems in the form of inaccuracies are lurking everywhere. an error in any of these quantities translates directly into some error in the final result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  2035,  1999,  2035,  1010,  2009,  3504,  3722,  1024,  2074,
         5468,  1996,  2176, 12450,  1517,  3292,  1010, 12177,  1010, 13508,
         1998,  1996, 25239,  2566,  2117,  1517,  1998,  2079,  1996, 16268,
         1012,  2023,  2003,  2172,  6211,  2084,  2009,  3504,  1010,  1998,
         3471,  1999,  1996,  2433,  1997, 27118,  9468,  4648,  9243,  2024,
        24261,  7249,  1012,  2019,  7561,  1999,  2151,  1997,  2122, 12450,
        16315,  3495,  2046,  2070,  7561,  1999,  1996,  2345,  2765,  1012,
          102])"
39,1,"['nominal', 'measuring', 'errors', 'error']", The speed of light,seg_13,"michelson did the utmost to reduce errors. for example, the distance between the mirrors was about 2000 feet, and to measure it he used a steel measuring tape. its nominal length was 100 feet, but he carefully checked this using a copy of the official “standard yard.” he found that the tape was in fact 100.006 feet. this way he eliminated a (small) systematic error.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  8709,  3385,  2106,  1996, 27917,  2000,  5547, 10697,  1012,
         2005,  2742,  1010,  1996,  3292,  2090,  1996, 13536,  2001,  2055,
         2456,  2519,  1010,  1998,  2000,  5468,  2009,  2002,  2109,  1037,
         3886,  9854,  6823,  1012,  2049, 15087,  3091,  2001,  2531,  2519,
         1010,  2021,  2002,  5362,  7039,  2023,  2478,  1037,  6100,  1997,
         1996,  2880,  1523,  3115,  4220,  1012,  1524,  2002,  2179,  2008,
         1996,  6823,  2001,  1999,  2755,  2531,  1012,  4002,  2575,  2519,
         1012,  2023,  2126,  2002,  5892,  1037,  1006,  2235,  1007, 11778,
         7561,  1012,   102])"
40,1,"['measuring', 'average', 'variation', 'error']", The speed of light,seg_13,"now imagine using the tape to measure a distance of 2000 feet: you have to use the tape 20 times, each time marking the next 100 feet. do it again, and you probably find a slightly different answer, no matter how hard you try to be very precise in every step of the measuring procedure. this kind of variation is inevitable: sometimes we end up with a value that is a bit too high, other times it is too low, but on average we’re doing okay—assuming that we have eliminated sources of systematic error, as in the measuring tape. michelson measured the distance five times, which resulted in values between 1984.93 and 1985.17 feet (after correcting for the temperature-dependent stretch), and he used the average as the “true distance.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  2085,  5674,  2478,  1996,  6823,  2000,  5468,  1037,  3292,
         1997,  2456,  2519,  1024,  2017,  2031,  2000,  2224,  1996,  6823,
         2322,  2335,  1010,  2169,  2051, 10060,  1996,  2279,  2531,  2519,
         1012,  2079,  2009,  2153,  1010,  1998,  2017,  2763,  2424,  1037,
         3621,  2367,  3437,  1010,  2053,  3043,  2129,  2524,  2017,  3046,
         2000,  2022,  2200, 10480,  1999,  2296,  3357,  1997,  1996,  9854,
         7709,  1012,  2023,  2785,  1997,  8386,  2003, 13418,  1024,  2823,
         2057,  2203,  2039,  2007,  1037,  3643,  2008,  2003,  1037,  2978,
         2205,  2152,  1010,  2060,  2335,  2009,  2003,  2205,  2659,  1010,
         2021,  2006,  2779,  2057,  1521,  2128,  2725,  3100,  1517, 10262,
         2008,  2057,  2031,  5892,  4216,  1997, 11778,  7561,  1010,  2004,
         1999,  1996,  9854,  6823,  1012,  8709,  3385,  7594,  1996,  3292,
         2274,  2335,  1010,  2029,  4504,  1999,  5300,  2090,  3118,  1012,
         6109,  1998,  3106,  1012,  2459,  2519,  1006,  2044,  6149,  2075,
         2005,  1996,  4860,  1011,  7790,  7683,  1007,  1010,  1998,  2002,
         2109,  1996,  2779,  2004,  1996,  1523,  2995,  3292,  1012,  1524,
          102])"
41,1,"['measuring', 'errors', 'process', 'systematic errors']", The speed of light,seg_13,in many phases of the measuring process michelson attempted to identify and determine systematic errors and subsequently applied corrections. he,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  1999,  2116, 12335,  1997,  1996,  9854,  2832,  8709,  3385,
         4692,  2000,  6709,  1998,  5646, 11778, 10697,  1998,  3525,  4162,
        20983,  1012,  2002,   102])"
42,1,"['variability', 'confidence interval', 'table', 'confidence', 'dataset', 'interval', 'data', 'uncertainty', 'results', 'measuring', 'confidence intervals', 'intervals', 'measurements', 'variables', 'error']", The speed of light,seg_13,"also systematically repeated measuring steps and averaged the results to reduce variability. his final dataset consists of 100 separate measurements (see table 17.1), but each is in fact summarized and averaged from repeated measurements on several variables. the final result he reported was that the speed of light in vacuum (this involved a conversion) was 299 944± 51 km/s, where the 51 is an indication of the uncertainty in the answer. in retrospect, we must conclude that, in spite of michelson’s admirable meticulousness, some source of error must have slipped his attention, as his result is off by about 150 km/s. with current methods we would derive from his data a so-called 95% confidence interval: 299 944 ± 15.5 km/s, suggesting that michelson’s uncertainty analysis was a little conservative. the methods used to construct confidence intervals are the topic of chapters 23 and 24.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3177, 1997, 2422])","tensor([  101,  2036, 23087,  5567,  9854,  4084,  1998, 11398,  1996,  3463,
         2000,  5547, 28436,  1012,  2010,  2345,  2951, 13462,  3774,  1997,
         2531,  3584, 11702,  1006,  2156,  2795,  2459,  1012,  1015,  1007,
         1010,  2021,  2169,  2003,  1999,  2755, 22539,  1998, 11398,  2013,
         5567, 11702,  2006,  2195, 10857,  1012,  1996,  2345,  2765,  2002,
         2988,  2001,  2008,  1996,  3177,  1997,  2422,  1999, 11641,  1006,
         2023,  2920,  1037,  7584,  1007,  2001, 25926,  6365,  2549, 29657,
         4868,  2463,  1013,  1055,  1010,  2073,  1996,  4868,  2003,  2019,
        12407,  1997,  1996, 12503,  1999,  1996,  3437,  1012,  1999, 22307,
        13102, 22471,  1010,  2057,  2442, 16519,  2008,  1010,  1999,  8741,
         1997,  8709,  3385,  1521,  1055,  4748, 14503,  3085,  2777,  2594,
        16203,  2791,  1010,  2070,  3120,  1997,  7561,  2442,  2031,  5707,
         2010,  3086,  1010,  2004,  2010,  2765,  2003,  2125,  2011,  2055,
         5018,  2463,  1013,  1055,  1012,  2007,  2783,  4725,  2057,  2052,
        18547,  2013,  2010,  2951,  1037,  2061,  1011,  2170,  5345,  1003,
         7023, 13483,  1024, 25926,  6365,  2549,  1081,  2321,  1012,  1019,
         2463,  1013,  1055,  1010,  9104,  2008,  8709,  3385,  1521,  1055,
        12503,  4106,  2001,  1037,  2210,  4603,  1012,  1996,  4725,  2109,
         2000,  9570,  7023, 14025,  2024,  1996,  8476,  1997,  9159,  2603,
         1998,  2484,  1012,   102])"
43,1,"['sample space', 'probability', 'events', 'outcomes', 'event', 'sample', 'random', 'experiment', 'model']", Outcomes events and probability,seg_15,"the world around us is full of phenomena we perceive as random or unpredictable. we aim to model these phenomena as outcomes of some experiment, where you should think of experiment in a very general sense. the outcomes are elements of a sample space ω, and subsets of ω are called events.the events will be assigned a probability, a number between 0 and 1 that expresses how likely the event is to occur.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([13105,  2824,  1998,  9723])","tensor([  101,  1996,  2088,  2105,  2149,  2003,  2440,  1997, 13352,  2057,
        23084,  2004,  6721,  2030, 21446,  1012,  2057,  6614,  2000,  2944,
         2122, 13352,  2004, 13105,  1997,  2070,  7551,  1010,  2073,  2017,
         2323,  2228,  1997,  7551,  1999,  1037,  2200,  2236,  3168,  1012,
         1996, 13105,  2024,  3787,  1997,  1037,  7099,  2686,  1179,  1010,
         1998, 16745,  2015,  1997,  1179,  2024,  2170,  2824,  1012,  1996,
         2824,  2097,  2022,  4137,  1037,  9723,  1010,  1037,  2193,  2090,
         1014,  1998,  1015,  2008, 16783,  2129,  3497,  1996,  2724,  2003,
         2000,  5258,  1012,   102])"
44,1,"['sets', 'outcomes', 'experiment']", Sample spaces,seg_17,sample spaces are simply sets whose elements describe the outcomes of the experiment in which we are interested.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([7099, 7258])","tensor([  101,  7099,  7258,  2024,  3432,  4520,  3005,  3787,  6235,  1996,
        13105,  1997,  1996,  7551,  1999,  2029,  2057,  2024,  4699,  1012,
          102])"
45,1,"['sample space', 'associated', 'set', 'tails', 'outcomes', 'sample', 'experiment']", Sample spaces,seg_17,"we start with the most basic experiment: the tossing of a coin. assuming that we will never see the coin land on its rim, there are two possible outcomes: heads and tails. we therefore take as the sample space associated with this experiment the set ω = {h, t }.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([7099, 7258])","tensor([  101,  2057,  2707,  2007,  1996,  2087,  3937,  7551,  1024,  1996,
        15021,  1997,  1037,  9226,  1012, 10262,  2008,  2057,  2097,  2196,
         2156,  1996,  9226,  2455,  2006,  2049, 11418,  1010,  2045,  2024,
         2048,  2825, 13105,  1024,  4641,  1998, 17448,  1012,  2057,  3568,
         2202,  2004,  1996,  7099,  2686,  3378,  2007,  2023,  7551,  1996,
         2275,  1179,  1027,  1063,  1044,  1010,  1056,  1065,  1012,   102])"
46,1,"['sample space', 'sample', 'experiment']", Sample spaces,seg_17,in another experiment we ask the next person we meet on the street in which month her birthday falls. an obvious choice for the sample space is,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([7099, 7258])","tensor([ 101, 1999, 2178, 7551, 2057, 3198, 1996, 2279, 2711, 2057, 3113, 2006,
        1996, 2395, 1999, 2029, 3204, 2014, 5798, 4212, 1012, 2019, 5793, 3601,
        2005, 1996, 7099, 2686, 2003,  102])"
47,1,"['sample space', 'outcomes', 'outcome', 'sample', 'limit', 'experiment', 'model']", Sample spaces,seg_17,"in a third experiment we load a scale model for a bridge up to the point where the structure collapses. the outcome is the load at which this occurs. in reality, one can only measure with finite accuracy, e.g., to five decimals, and a sample space with just those numbers would strictly be adequate. however, in principle, the load itself could be any positive number and therefore ω = (0,∞) is the right choice. even though in reality there may also be an upper limit to what loads are conceivable, it is not necessary or practical to try to limit the outcomes correspondingly.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0.])","tensor([7099, 7258])","tensor([  101,  1999,  1037,  2353,  7551,  2057,  7170,  1037,  4094,  2944,
         2005,  1037,  2958,  2039,  2000,  1996,  2391,  2073,  1996,  3252,
        25938,  1012,  1996,  9560,  2003,  1996,  7170,  2012,  2029,  2023,
         5158,  1012,  1999,  4507,  1010,  2028,  2064,  2069,  5468,  2007,
        10713, 10640,  1010,  1041,  1012,  1043,  1012,  1010,  2000,  2274,
        26066,  2015,  1010,  1998,  1037,  7099,  2686,  2007,  2074,  2216,
         3616,  2052,  9975,  2022, 11706,  1012,  2174,  1010,  1999,  6958,
         1010,  1996,  7170,  2993,  2071,  2022,  2151,  3893,  2193,  1998,
         3568,  1179,  1027,  1006,  1014,  1010,  1601,  1007,  2003,  1996,
         2157,  3601,  1012,  2130,  2295,  1999,  4507,  2045,  2089,  2036,
         2022,  2019,  3356,  5787,  2000,  2054, 15665,  2024,  9530,  3401,
        11444,  3468,  1010,  2009,  2003,  2025,  4072,  2030,  6742,  2000,
         3046,  2000,  5787,  1996, 13105,  7978,  2135,  1012,   102])"
48,1,"['sample space', 'sample', 'experiment']", Sample spaces,seg_17,"in a fourth experiment, we find on our doormat three envelopes, sent to us by three different persons, and we look in which order the envelopes lie on top of each other. coding them 1, 2, and 3, the sample space would be",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0.])","tensor([7099, 7258])","tensor([  101,  1999,  1037,  2959,  7551,  1010,  2057,  2424,  2006,  2256,
         2341, 18900,  2093, 11255,  2015,  1010,  2741,  2000,  2149,  2011,
         2093,  2367,  5381,  1010,  1998,  2057,  2298,  1999,  2029,  2344,
         1996, 11255,  2015,  4682,  2006,  2327,  1997,  2169,  2060,  1012,
        16861,  2068,  1015,  1010,  1016,  1010,  1998,  1017,  1010,  1996,
         7099,  2686,  2052,  2022,   102])"
49,1,"['sample', 'sample space']", Sample spaces,seg_17,"quick exercise 2.1 if we received mail from four different persons, how many elements would the corresponding sample space have?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0.])","tensor([7099, 7258])","tensor([ 101, 4248, 6912, 1016, 1012, 1015, 2065, 2057, 2363, 5653, 2013, 2176,
        2367, 5381, 1010, 2129, 2116, 3787, 2052, 1996, 7978, 7099, 2686, 2031,
        1029,  102])"
50,1,"['permutation', 'permutations']", Sample spaces,seg_17,"in general one might consider the order in which n different objects can be placed. this is called a permutation of the n objects. as we have seen, there are 6 possible permutations of 3 objects, and 4 · 6 = 24 of 4 objects. what happens is that if we add the nth object, then this can be placed in any of n positions in any of the permutations of n − 1 objects. therefore there are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([7099, 7258])","tensor([  101,  1999,  2236,  2028,  2453,  5136,  1996,  2344,  1999,  2029,
         1050,  2367,  5200,  2064,  2022,  2872,  1012,  2023,  2003,  2170,
         1037,  2566, 28120,  3370,  1997,  1996,  1050,  5200,  1012,  2004,
         2057,  2031,  2464,  1010,  2045,  2024,  1020,  2825,  2566, 28120,
        10708,  1997,  1017,  5200,  1010,  1998,  1018,  1087,  1020,  1027,
         2484,  1997,  1018,  5200,  1012,  2054,  6433,  2003,  2008,  2065,
         2057,  5587,  1996, 23961,  2232,  4874,  1010,  2059,  2023,  2064,
         2022,  2872,  1999,  2151,  1997,  1050,  4460,  1999,  2151,  1997,
         1996,  2566, 28120, 10708,  1997,  1050,  1597,  1015,  5200,  1012,
         3568,  2045,  2024,   102])"
51,1,"['standard', 'permutations']", Sample spaces,seg_17,possible permutations of n objects. here n! is the standard notation for this product and is pronounced “n factorial.” it is convenient to define 0! = 1.,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([7099, 7258])","tensor([  101,  2825,  2566, 28120, 10708,  1997,  1050,  5200,  1012,  2182,
         1050,   999,  2003,  1996,  3115, 14869,  2005,  2023,  4031,  1998,
         2003,  8793,  1523,  1050,  5387,  4818,  1012,  1524,  2009,  2003,
        14057,  2000,  9375,  1014,   999,  1027,  1015,  1012,   102])"
52,1,"['sample space', 'set', 'events', 'outcomes', 'event', 'outcome', 'sample', 'experiment']", Events,seg_19,"subsets of the sample space are called events . we say that an event a occurs if the outcome of the experiment is an element of the set a. for example, in the birthday experiment we can ask for the outcomes that correspond to a long month, i.e., a month with 31 days. this is the event",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([2824]),"tensor([  101, 16745,  2015,  1997,  1996,  7099,  2686,  2024,  2170,  2824,
         1012,  2057,  2360,  2008,  2019,  2724,  1037,  5158,  2065,  1996,
         9560,  1997,  1996,  7551,  2003,  2019,  5783,  1997,  1996,  2275,
         1037,  1012,  2005,  2742,  1010,  1999,  1996,  5798,  7551,  2057,
         2064,  3198,  2005,  1996, 13105,  2008, 17254,  2000,  1037,  2146,
         3204,  1010,  1045,  1012,  1041,  1012,  1010,  1037,  3204,  2007,
         2861,  2420,  1012,  2023,  2003,  1996,  2724,   102])"
53,1,['set'], Events,seg_19,events may be combined according to the usual set operations.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([2824]),"tensor([ 101, 2824, 2089, 2022, 4117, 2429, 2000, 1996, 5156, 2275, 3136, 1012,
         102])"
54,1,['event'], Events,seg_19,"for example if r is the event that corresponds to the months that have the letter r in their (full) name (so r = {jan, feb, mar, apr, sep, oct, nov, dec}), then the long months that contain the letter r are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  2005,  2742,  2065,  1054,  2003,  1996,  2724,  2008, 14788,
         2000,  1996,  2706,  2008,  2031,  1996,  3661,  1054,  1999,  2037,
         1006,  2440,  1007,  2171,  1006,  2061,  1054,  1027,  1063,  5553,
         1010, 13114,  1010,  9388,  1010, 19804,  1010, 19802,  1010, 13323,
         1010, 13292,  1010, 11703,  1065,  1007,  1010,  2059,  1996,  2146,
         2706,  2008,  5383,  1996,  3661,  1054,  2024,   102])"
55,1,"['complement', 'sets', 'set', 'events', 'event', 'intersection', 'union']", Events,seg_19,"the set l∩r is called the intersection of l and r and occurs if both l and r occur. similarly, we have the union a∪b of two sets a and b, which occurs if at least one of the events a and b occurs. another common operation is taking complements. the event ac = {ω ∈ ω : ω ∈/ a} is called the complement of a; it occurs if and only if a does not occur. the complement of ω is denoted ∅, the empty set, which represents the impossible event. figure 2.1 illustrates these three set operations.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([2824]),"tensor([  101,  1996,  2275,  1048, 30131,  2099,  2003,  2170,  1996,  6840,
         1997,  1048,  1998,  1054,  1998,  5158,  2065,  2119,  1048,  1998,
         1054,  5258,  1012,  6660,  1010,  2057,  2031,  1996,  2586,  1037,
        30132,  2497,  1997,  2048,  4520,  1037,  1998,  1038,  1010,  2029,
         5158,  2065,  2012,  2560,  2028,  1997,  1996,  2824,  1037,  1998,
         1038,  5158,  1012,  2178,  2691,  3169,  2003,  2635, 13711,  2015,
         1012,  1996,  2724,  9353,  1027,  1063,  1179,  1596,  1179,  1024,
         1179,  1596,  1013,  1037,  1065,  2003,  2170,  1996, 13711,  1997,
         1037,  1025,  2009,  5158,  2065,  1998,  2069,  2065,  1037,  2515,
         2025,  5258,  1012,  1996, 13711,  1997,  1179,  2003, 19537,  1593,
         1010,  1996,  4064,  2275,  1010,  2029,  5836,  1996,  5263,  2724,
         1012,  3275,  1016,  1012,  1015, 24899,  2122,  2093,  2275,  3136,
         1012,   102])"
56,1,"['set', 'disjoint', 'events', 'outcomes', 'event', 'mutually exclusive']", Events,seg_19,"we call events a and b disjoint or mutually exclusive if a and b have no outcomes in common; in set terminology: a∩b = ∅. for example, the event l “the birthday falls in a long month” and the event {feb} are disjoint.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0.])",tensor([2824]),"tensor([  101,  2057,  2655,  2824,  1037,  1998,  1038,  4487,  2015,  5558,
        18447,  2030, 20271,  7262,  2065,  1037,  1998,  1038,  2031,  2053,
        13105,  1999,  2691,  1025,  1999,  2275, 18444,  1024,  1037, 30131,
         2497,  1027,  1593,  1012,  2005,  2742,  1010,  1996,  2724,  1048,
         1523,  1996,  5798,  4212,  1999,  1037,  2146,  3204,  1524,  1998,
         1996,  2724,  1063, 13114,  1065,  2024,  4487,  2015,  5558, 18447,
         1012,   102])"
57,1,"['set', 'outcomes', 'event']", Events,seg_19,"finally, we say that event a implies event b if the outcomes of a also lie in b. in set notation: a ⊂ b; see figure 2.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  2633,  1010,  2057,  2360,  2008,  2724,  1037, 12748,  2724,
         1038,  2065,  1996, 13105,  1997,  1037,  2036,  4682,  1999,  1038,
         1012,  1999,  2275, 14869,  1024,  1037,  1610,  1038,  1025,  2156,
         3275,  1016,  1012,  1016,  1012,   102])"
58,0,[], Events,seg_19,some people like to use double negations:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([2824]),"tensor([  101,  2070,  2111,  2066,  2000,  2224,  3313, 11265, 12540,  2015,
         1024,   102])"
59,0,[], Events,seg_19,“it is certainly not true that neither john nor mary is to blame.”,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([2824]),"tensor([ 101, 1523, 2009, 2003, 5121, 2025, 2995, 2008, 4445, 2198, 4496, 2984,
        2003, 2000, 7499, 1012, 1524,  102])"
60,1,['events'], Events,seg_19,"this is equivalent to: “john or mary is to blame, or both.” the following useful rules formalize this mental operation to a manipulation with events.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([2824]),"tensor([  101,  2023,  2003,  5662,  2000,  1024,  1523,  2198,  2030,  2984,
         2003,  2000,  7499,  1010,  2030,  2119,  1012,  1524,  1996,  2206,
         6179,  3513,  5337,  4697,  2023,  5177,  3169,  2000,  1037, 16924,
         2007,  2824,  1012,   102])"
61,1,['events'], Events,seg_19,demorgan’s laws. for any two events a and b we have,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  9703, 16998,  1521,  1055,  4277,  1012,  2005,  2151,  2048,
         2824,  1037,  1998,  1038,  2057,  2031,   102])"
62,1,"['events', 'event']", Events,seg_19,"quick exercise 2.2 let j be the event “john is to blame” and m the event “mary is to blame.” express the two statements above in terms of the events j, jc, m , and m c, and check the equivalence of the statements by means of demorgan’s laws.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  4248,  6912,  1016,  1012,  1016,  2292,  1046,  2022,  1996,
         2724,  1523,  2198,  2003,  2000,  7499,  1524,  1998,  1049,  1996,
         2724,  1523,  2984,  2003,  2000,  7499,  1012,  1524,  4671,  1996,
         2048,  8635,  2682,  1999,  3408,  1997,  1996,  2824,  1046,  1010,
        29175,  1010,  1049,  1010,  1998,  1049,  1039,  1010,  1998,  4638,
         1996, 27841,  1997,  1996,  8635,  2011,  2965,  1997,  9703, 16998,
         1521,  1055,  4277,  1012,   102])"
63,1,"['function', 'probability', 'probability function', 'events', 'probabilities', 'event']", Probability,seg_21,"we want to express how likely it is that an event occurs. to do this we will assign a probability to each event. the assignment of probabilities to events is in general not an easy task, and some of the coming chapters will be dedicated directly or indirectly to this problem. since each event has to be assigned a probability, we speak of a probability function. it has to satisfy two basic properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  2057,  2215,  2000,  4671,  2129,  3497,  2009,  2003,  2008,
         2019,  2724,  5158,  1012,  2000,  2079,  2023,  2057,  2097, 23911,
         1037,  9723,  2000,  2169,  2724,  1012,  1996,  8775,  1997,  4013,
         3676, 14680,  2000,  2824,  2003,  1999,  2236,  2025,  2019,  3733,
         4708,  1010,  1998,  2070,  1997,  1996,  2746,  9159,  2097,  2022,
         4056,  3495,  2030, 17351,  2000,  2023,  3291,  1012,  2144,  2169,
         2724,  2038,  2000,  2022,  4137,  1037,  9723,  1010,  2057,  3713,
         1997,  1037,  9723,  3853,  1012,  2009,  2038,  2000, 13225,  2048,
         3937,  5144,  1012,   102])"
64,1,"['function', 'sample space', 'probability', 'disjoint', 'probability function', 'event', 'sample']", Probability,seg_21,"definition. a probability function p on a finite sample space ω assigns to each event a in ω a number p(a) in [0,1] such that (i) p(ω) = 1, and (ii) p(a ∪ b) = p(a) + p(b) if a and b are disjoint. the number p(a) is called the probability that a occurs.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  6210,  1012,  1037,  9723,  3853,  1052,  2006,  1037, 10713,
         7099,  2686,  1179, 24022,  2000,  2169,  2724,  1037,  1999,  1179,
         1037,  2193,  1052,  1006,  1037,  1007,  1999,  1031,  1014,  1010,
         1015,  1033,  2107,  2008,  1006,  1045,  1007,  1052,  1006,  1179,
         1007,  1027,  1015,  1010,  1998,  1006,  2462,  1007,  1052,  1006,
         1037,  1605,  1038,  1007,  1027,  1052,  1006,  1037,  1007,  1009,
         1052,  1006,  1038,  1007,  2065,  1037,  1998,  1038,  2024,  4487,
         2015,  5558, 18447,  1012,  1996,  2193,  1052,  1006,  1037,  1007,
         2003,  2170,  1996,  9723,  2008,  1037,  5158,  1012,   102])"
65,1,"['sets', 'probability function', 'outcome', 'additivity of the probability function', 'additivity property', 'additivity property of a probability function', 'disjoint', 'events', 'function', 'probability', 'disjoint events', 'sample space', 'sample', 'experiment']", Probability,seg_21,"property (i) expresses that the outcome of the experiment is always an element of the sample space, and property (ii) is the additivity property of a probability function. it implies additivity of the probability function over more than two sets; e.g., if a, b, and c are disjoint events, then the two events a ∪ b and c are also disjoint, so",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1.,
        0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])",tensor([9723]),"tensor([  101,  3200,  1006,  1045,  1007, 16783,  2008,  1996,  9560,  1997,
         1996,  7551,  2003,  2467,  2019,  5783,  1997,  1996,  7099,  2686,
         1010,  1998,  3200,  1006,  2462,  1007,  2003,  1996,  5587, 25090,
        24872,  3200,  1997,  1037,  9723,  3853,  1012,  2009, 12748,  5587,
        25090, 24872,  1997,  1996,  9723,  3853,  2058,  2062,  2084,  2048,
         4520,  1025,  1041,  1012,  1043,  1012,  1010,  2065,  1037,  1010,
         1038,  1010,  1998,  1039,  2024,  4487,  2015,  5558, 18447,  2824,
         1010,  2059,  1996,  2048,  2824,  1037,  1605,  1038,  1998,  1039,
         2024,  2036,  4487,  2015,  5558, 18447,  1010,  2061,   102])"
66,1,"['tails', 'outcome', 'experiment']", Probability,seg_21,"we will now look at some examples. when we want to decide whether peter or paul has to wash the dishes, we might toss a coin. the fact that we consider this a fair way to decide translates into the opinion that heads and tails are equally likely to occur as the outcome of the coin-tossing experiment. so we",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  2057,  2097,  2085,  2298,  2012,  2070,  4973,  1012,  2043,
         2057,  2215,  2000,  5630,  3251,  2848,  2030,  2703,  2038,  2000,
         9378,  1996, 10447,  1010,  2057,  2453, 10055,  1037,  9226,  1012,
         1996,  2755,  2008,  2057,  5136,  2023,  1037,  4189,  2126,  2000,
         5630, 16315,  2046,  1996,  5448,  2008,  4641,  1998, 17448,  2024,
         8053,  3497,  2000,  5258,  2004,  1996,  9560,  1997,  1996,  9226,
         1011, 15021,  7551,  1012,  2061,  2057,   102])"
67,1,"['function', 'set', 'probability', 'events', 'probability function', 'outcomes']", Probability,seg_21,"formally we have to write {h} for the set consisting of the single element h , because a probability function is defined on events, not on outcomes. from now on we shall drop these brackets.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  6246,  2057,  2031,  2000,  4339,  1063,  1044,  1065,  2005,
         1996,  2275,  5398,  1997,  1996,  2309,  5783,  1044,  1010,  2138,
         1037,  9723,  3853,  2003,  4225,  2006,  2824,  1010,  2025,  2006,
        13105,  1012,  2013,  2085,  2006,  2057,  4618,  4530,  2122, 19719,
         1012,   102])"
68,1,"['distribution', 'case', 'asymmetric']", Probability,seg_21,"now it might happen, for example due to an asymmetric distribution of the mass over the coin, that the coin is not completely fair. for example, it might be the case that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([9723]),"tensor([  101,  2085,  2009,  2453,  4148,  1010,  2005,  2742,  2349,  2000,
         2019,  2004, 24335, 12589,  4353,  1997,  1996,  3742,  2058,  1996,
         9226,  1010,  2008,  1996,  9226,  2003,  2025,  3294,  4189,  1012,
         2005,  2742,  1010,  2009,  2453,  2022,  1996,  2553,  2008,   102])"
69,1,"['outcomes', 'probabilities', 'experiment', 'experiments']", Probability,seg_21,"more generally we can consider experiments with two possible outcomes, say “failure” and “success”, which have probabilities 1− p and p to occur, where p is a number between 0 and 1. for example, when our experiment consists of buying a ticket in a lottery with 10 000 tickets and only one prize, where “success” stands for winning the prize, then p = 10−4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  2062,  3227,  2057,  2064,  5136,  7885,  2007,  2048,  2825,
        13105,  1010,  2360,  1523,  4945,  1524,  1998,  1523,  3112,  1524,
         1010,  2029,  2031,  4013,  3676, 14680,  1015, 22543,  1052,  1998,
         1052,  2000,  5258,  1010,  2073,  1052,  2003,  1037,  2193,  2090,
         1014,  1998,  1015,  1012,  2005,  2742,  1010,  2043,  2256,  7551,
         3774,  1997,  9343,  1037,  7281,  1999,  1037, 15213,  2007,  2184,
         2199,  9735,  1998,  2069,  2028,  3396,  1010,  2073,  1523,  3112,
         1524,  4832,  2005,  3045,  1996,  3396,  1010,  2059,  1052,  1027,
         2184, 22543,  2549,  1012,   102])"
70,1,"['probabilities', 'experiment']", Probability,seg_21,"how should we assign probabilities in the second experiment, where we ask for the month in which the next person we meet has his or her birthday? in analogy with what we have just done, we put",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  2129,  2323,  2057, 23911,  4013,  3676, 14680,  1999,  1996,
         2117,  7551,  1010,  2073,  2057,  3198,  2005,  1996,  3204,  1999,
         2029,  1996,  2279,  2711,  2057,  3113,  2038,  2010,  2030,  2014,
         5798,  1029,  1999, 23323,  2007,  2054,  2057,  2031,  2074,  2589,
         1010,  2057,  2404,   102])"
71,0,[], Probability,seg_21,"some of you might object to this and propose that we put, for example,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([9723]),"tensor([  101,  2070,  1997,  2017,  2453,  4874,  2000,  2023,  1998, 16599,
         2008,  2057,  2404,  1010,  2005,  2742,  1010,   102])"
72,0,[], Probability,seg_21,because we have long months and short months. but then the very precise among us might remark that this does not yet take care of leap years.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])",tensor([9723]),"tensor([  101,  2138,  2057,  2031,  2146,  2706,  1998,  2460,  2706,  1012,
         2021,  2059,  1996,  2200, 10480,  2426,  2149,  2453, 17674,  2008,
         2023,  2515,  2025,  2664,  2202,  2729,  1997, 11679,  2086,  1012,
          102])"
73,1,"['probability', 'approximation']", Probability,seg_21,"quick exercise 2.3 if you would take care of the leap years, assuming that one in every four years is a leap year (which again is an approximation to reality!), how would you assign a probability to each month?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  4248,  6912,  1016,  1012,  1017,  2065,  2017,  2052,  2202,
         2729,  1997,  1996, 11679,  2086,  1010, 10262,  2008,  2028,  1999,
         2296,  2176,  2086,  2003,  1037, 11679,  2095,  1006,  2029,  2153,
         2003,  2019, 20167,  2000,  4507,   999,  1007,  1010,  2129,  2052,
         2017, 23911,  1037,  9723,  2000,  2169,  3204,  1029,   102])"
74,1,"['probability', 'outcomes', 'sample spaces', 'outcome', 'sample', 'experiment']", Probability,seg_21,"in the third experiment (the buckling load of a bridge), where the outcomes are real numbers, it is impossible to assign a positive probability to each outcome (there are just too many outcomes!). we shall come back to this problem in chapter 5, restricting ourselves in this chapter to finite and countably infinite1 sample spaces.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([9723]),"tensor([  101,  1999,  1996,  2353,  7551,  1006,  1996, 10131,  2989,  7170,
         1997,  1037,  2958,  1007,  1010,  2073,  1996, 13105,  2024,  2613,
         3616,  1010,  2009,  2003,  5263,  2000, 23911,  1037,  3893,  9723,
         2000,  2169,  9560,  1006,  2045,  2024,  2074,  2205,  2116, 13105,
          999,  1007,  1012,  2057,  4618,  2272,  2067,  2000,  2023,  3291,
         1999,  3127,  1019,  1010, 26996,  9731,  1999,  2023,  3127,  2000,
        10713,  1998,  4175,  8231, 10709,  2487,  7099,  7258,  1012,   102])"
75,1,"['outcomes', 'probabilities', 'experiment']", Probability,seg_21,in the fourth experiment it makes sense to assign equal probabilities to all six outcomes:,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        0., 0.])",tensor([9723]),"tensor([  101,  1999,  1996,  2959,  7551,  2009,  3084,  3168,  2000, 23911,
         5020,  4013,  3676, 14680,  2000,  2035,  2416, 13105,  1024,   102])"
76,1,"['probability', 'events', 'outcomes', 'probabilities', 'event', 'experiment', 'experiments', 'additivity property']", Probability,seg_21,"until now we have only assigned probabilities to the individual outcomes of the experiments. to assign probabilities to events we use the additivity property. for instance, to find the probability p(t ) of the event t that in the three envelopes experiment envelope 2 is on top we note that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  2127,  2085,  2057,  2031,  2069,  4137,  4013,  3676, 14680,
         2000,  1996,  3265, 13105,  1997,  1996,  7885,  1012,  2000, 23911,
         4013,  3676, 14680,  2000,  2824,  2057,  2224,  1996,  5587, 25090,
        24872,  3200,  1012,  2005,  6013,  1010,  2000,  2424,  1996,  9723,
         1052,  1006,  1056,  1007,  1997,  1996,  2724,  1056,  2008,  1999,
         1996,  2093, 11255,  2015,  7551, 11255,  1016,  2003,  2006,  2327,
         2057,  3602,  2008,   102])"
77,1,"['probability', 'outcomes', 'probabilities', 'event', 'probability of an event']", Probability,seg_21,"in general, additivity of p implies that the probability of an event is obtained by summing the probabilities of the outcomes belonging to the event.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0.])",tensor([9723]),"tensor([  101,  1999,  2236,  1010,  5587, 25090, 24872,  1997,  1052, 12748,
         2008,  1996,  9723,  1997,  2019,  2724,  2003,  4663,  2011,  7680,
         6562,  1996,  4013,  3676, 14680,  1997,  1996, 13105,  7495,  2000,
         1996,  2724,  1012,   102])"
78,1,['experiment'], Probability,seg_21,quick exercise 2.4 compute p(l) and p(r) in the birthday experiment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([9723]),"tensor([  101,  4248,  6912,  1016,  1012,  1018, 24134,  1052,  1006,  1048,
         1007,  1998,  1052,  1006,  1054,  1007,  1999,  1996,  5798,  7551,
         1012,   102])"
79,1,"['disjoint', 'events', 'probabilities', 'union']", Probability,seg_21,"finally we mention a rule that permits us to compute probabilities of events a and b that are not disjoint. note that we can write a = (a∩b) ∪ (a∩bc), which is a disjoint union; hence",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0.])",tensor([9723]),"tensor([  101,  2633,  2057,  5254,  1037,  3627,  2008, 14245,  2149,  2000,
        24134,  4013,  3676, 14680,  1997,  2824,  1037,  1998,  1038,  2008,
         2024,  2025,  4487,  2015,  5558, 18447,  1012,  3602,  2008,  2057,
         2064,  4339,  1037,  1027,  1006,  1037, 30131,  2497,  1007,  1605,
         1006,  1037, 30131,  9818,  1007,  1010,  2029,  2003,  1037,  4487,
         2015,  5558, 18447,  2586,  1025,  6516,   102])"
80,1,['events'], Probability,seg_21,"if we split a ∪ b in the same way with b and bc, we obtain the events (a∪b)∩b, which is simply b and (a∪b)∩bc, which is nothing but a∩bc.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  2065,  2057,  3975,  1037,  1605,  1038,  1999,  1996,  2168,
         2126,  2007,  1038,  1998,  4647,  1010,  2057,  6855,  1996,  2824,
         1006,  1037, 30132,  2497,  1007,  1604,  2497,  1010,  2029,  2003,
         3432,  1038,  1998,  1006,  1037, 30132,  2497,  1007,  1604,  9818,
         1010,  2029,  2003,  2498,  2021,  1037, 30131,  9818,  1012,   102])"
81,0,[], Probability,seg_21,eliminating p(a ∩ bc) from these two equations we obtain the following rule.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([9723]),"tensor([  101, 15349,  1052,  1006,  1037,  1604,  4647,  1007,  2013,  2122,
         2048, 11380,  2057,  6855,  1996,  2206,  3627,  1012,   102])"
82,1,"['probability', 'events', 'union']", Probability,seg_21,the probability of a union. for any two events a and b we have p(a ∪ b) = p(a) + p(b) − p(a ∩ b) .,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([9723]),"tensor([ 101, 1996, 9723, 1997, 1037, 2586, 1012, 2005, 2151, 2048, 2824, 1037,
        1998, 1038, 2057, 2031, 1052, 1006, 1037, 1605, 1038, 1007, 1027, 1052,
        1006, 1037, 1007, 1009, 1052, 1006, 1038, 1007, 1597, 1052, 1006, 1037,
        1604, 1038, 1007, 1012,  102])"
83,1,"['events', 'probabilities', 'additivity property']", Probability,seg_21,"from the additivity property we can also find a way to compute probabilities of complements of events: from a ∪ ac = ω, we deduce that",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([9723]),"tensor([  101,  2013,  1996,  5587, 25090, 24872,  3200,  2057,  2064,  2036,
         2424,  1037,  2126,  2000, 24134,  4013,  3676, 14680,  1997, 13711,
         2015,  1997,  2824,  1024,  2013,  1037,  1605,  9353,  1027,  1179,
         1010,  2057,  2139,  8566,  3401,  2008,   102])"
84,1,"['sample space', 'associated', 'set', 'sample', 'experiment', 'statistics']", Products of sample spaces,seg_23,"basic to statistics is that one usually does not consider one experiment, but that the same experiment is performed several times. for example, suppose we throw a coin two times. what is the sample space associated with this new experiment? it is clear that it should be the set",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([ 101, 3937, 2000, 6747, 2003, 2008, 2028, 2788, 2515, 2025, 5136, 2028,
        7551, 1010, 2021, 2008, 1996, 2168, 7551, 2003, 2864, 2195, 2335, 1012,
        2005, 2742, 1010, 6814, 2057, 5466, 1037, 9226, 2048, 2335, 1012, 2054,
        2003, 1996, 7099, 2686, 3378, 2007, 2023, 2047, 7551, 1029, 2009, 2003,
        3154, 2008, 2009, 2323, 2022, 1996, 2275,  102])"
85,1,"['outcomes', 'probabilities', 'experiment']", Products of sample spaces,seg_23,"if in the original experiment we had a fair coin, i.e., p(h) = p(t ), then in this new experiment all 4 outcomes again have equal probabilities:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  2065,  1999,  1996,  2434,  7551,  2057,  2018,  1037,  4189,
         9226,  1010,  1045,  1012,  1041,  1012,  1010,  1052,  1006,  1044,
         1007,  1027,  1052,  1006,  1056,  1007,  1010,  2059,  1999,  2023,
         2047,  7551,  2035,  1018, 13105,  2153,  2031,  5020,  4013,  3676,
        14680,  1024,   102])"
86,1,"['sample space', 'set', 'sample spaces', 'sample', 'experiment', 'experiments']", Products of sample spaces,seg_23,"somewhat more generally, if we consider two experiments with sample spaces ω1 and ω2 then the combined experiment has as its sample space the set",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([ 101, 5399, 2062, 3227, 1010, 2065, 2057, 5136, 2048, 7885, 2007, 7099,
        7258, 1179, 2487, 1998, 1179, 2475, 2059, 1996, 4117, 7551, 2038, 2004,
        2049, 7099, 2686, 1996, 2275,  102])"
87,1,"['mean', 'probability', 'outcomes', 'probabilities', 'outcome', 'experiment', 'experiments', 'case']", Products of sample spaces,seg_23,"if ω1 has r elements and ω2 has s elements, then ω1 × ω2 has rs elements. now suppose that in the first, the second, and the combined experiment all outcomes are equally likely to occur. then the outcomes in the first experiment have probability 1/r to occur, those of the second experiment 1/s, and those of the combined experiment probability 1/rs. motivated by the fact that 1/rs = (1/r) × (1/s), we will assign probability pipj to the outcome (ωi, ωj) in the combined experiment, in the case that ωi has probability pi and ωj has probability pj to occur. one should realize that this is by no means the only way to assign probabilities to the outcomes of a combined experiment. the preceding choice corresponds to the situation where the two experiments do not influence each other in any way. what we mean by this influence will be explained in more detail in the next chapter.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  2065,  1179,  2487,  2038,  1054,  3787,  1998,  1179,  2475,
         2038,  1055,  3787,  1010,  2059,  1179,  2487,  1095,  1179,  2475,
         2038, 12667,  3787,  1012,  2085,  6814,  2008,  1999,  1996,  2034,
         1010,  1996,  2117,  1010,  1998,  1996,  4117,  7551,  2035, 13105,
         2024,  8053,  3497,  2000,  5258,  1012,  2059,  1996, 13105,  1999,
         1996,  2034,  7551,  2031,  9723,  1015,  1013,  1054,  2000,  5258,
         1010,  2216,  1997,  1996,  2117,  7551,  1015,  1013,  1055,  1010,
         1998,  2216,  1997,  1996,  4117,  7551,  9723,  1015,  1013, 12667,
         1012, 12774,  2011,  1996,  2755,  2008,  1015,  1013, 12667,  1027,
         1006,  1015,  1013,  1054,  1007,  1095,  1006,  1015,  1013,  1055,
         1007,  1010,  2057,  2097, 23911,  9723, 28315,  3501,  2000,  1996,
         9560,  1006,  1179,  2072,  1010,  1179,  3501,  1007,  1999,  1996,
         4117,  7551,  1010,  1999,  1996,  2553,  2008,  1179,  2072,  2038,
         9723, 14255,  1998,  1179,  3501,  2038,  9723,  1052,  3501,  2000,
         5258,  1012,  2028,  2323,  5382,  2008,  2023,  2003,  2011,  2053,
         2965,  1996,  2069,  2126,  2000, 23911,  4013,  3676, 14680,  2000,
         1996, 13105,  1997,  1037,  4117,  7551,  1012,  1996, 11003,  3601,
        14788,  2000,  1996,  3663,  2073,  1996,  2048,  7885,  2079,  2025,
         3747,  2169,  2060,  1999,  2151,  2126,  1012,  2054,  2057,  2812,
         2011,  2023,  3747,  2097,  2022,  4541,  1999,  2062,  6987,  1999,
         1996,  2279,  3127,  1012,   102])"
88,1,"['sample space', 'associated', 'probability', 'probabilities', 'outcome', 'sample', 'experiment']", Products of sample spaces,seg_23,"quick exercise 2.5 consider the sample space {a1, a2, a3, a4, a5, a6} of some experiment, where outcome ai has probability pi for i = 1, . . . , 6. we perform this experiment twice in such a way that the associated probabilities are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  4248,  6912,  1016,  1012,  1019,  5136,  1996,  7099,  2686,
         1063, 17350,  1010, 22441,  1010,  1037,  2509,  1010,  1037,  2549,
         1010,  1037,  2629,  1010,  1037,  2575,  1065,  1997,  2070,  7551,
         1010,  2073,  9560,  9932,  2038,  9723, 14255,  2005,  1045,  1027,
         1015,  1010,  1012,  1012,  1012,  1010,  1020,  1012,  2057,  4685,
         2023,  7551,  3807,  1999,  2107,  1037,  2126,  2008,  1996,  3378,
         4013,  3676, 14680,  2024,   102])"
89,1,"['function', 'sample space', 'probability', 'probability function', 'sample', 'experiment']", Products of sample spaces,seg_23,"check that p is a probability function on the sample space ω = {a1, . . . , a6}× {a1, . . . , a6} of the combined experiment. what is the relationship between the first experiment and the second experiment that is determined by this probability function?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  4638,  2008,  1052,  2003,  1037,  9723,  3853,  2006,  1996,
         7099,  2686,  1179,  1027,  1063, 17350,  1010,  1012,  1012,  1012,
         1010,  1037,  2575,  1065,  1095,  1063, 17350,  1010,  1012,  1012,
         1012,  1010,  1037,  2575,  1065,  1997,  1996,  4117,  7551,  1012,
         2054,  2003,  1996,  3276,  2090,  1996,  2034,  7551,  1998,  1996,
         2117,  7551,  2008,  2003,  4340,  2011,  2023,  9723,  3853,  1029,
          102])"
90,1,"['associated', 'set', 'failure', 'outcomes', 'event', 'experiment', 'success']", Products of sample spaces,seg_23,"we started this section with the experiment of throwing a coin twice. if we want to learn more about the randomness associated with a particular experiment, then we should repeat it more often, say n times. for example, if we perform an experiment with outcomes 1 (success) and 0 (failure) five times, and we consider the event a “exactly one experiment was a success,” then this event is given by the set",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  2057,  2318,  2023,  2930,  2007,  1996,  7551,  1997,  6886,
         1037,  9226,  3807,  1012,  2065,  2057,  2215,  2000,  4553,  2062,
         2055,  1996,  6721,  2791,  3378,  2007,  1037,  3327,  7551,  1010,
         2059,  2057,  2323,  9377,  2009,  2062,  2411,  1010,  2360,  1050,
         2335,  1012,  2005,  2742,  1010,  2065,  2057,  4685,  2019,  7551,
         2007, 13105,  1015,  1006,  3112,  1007,  1998,  1014,  1006,  4945,
         1007,  2274,  2335,  1010,  1998,  2057,  5136,  1996,  2724,  1037,
         1523,  3599,  2028,  7551,  2001,  1037,  3112,  1010,  1524,  2059,
         2023,  2724,  2003,  2445,  2011,  1996,  2275,   102])"
91,1,"['probability', 'failure', 'success']", Products of sample spaces,seg_23,"in ω = {0, 1} × {0, 1} × {0, 1} × {0, 1} × {0, 1}. moreover, if success has probability p and failure probability 1 − p, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([ 101, 1999, 1179, 1027, 1063, 1014, 1010, 1015, 1065, 1095, 1063, 1014,
        1010, 1015, 1065, 1095, 1063, 1014, 1010, 1015, 1065, 1095, 1063, 1014,
        1010, 1015, 1065, 1095, 1063, 1014, 1010, 1015, 1065, 1012, 9308, 1010,
        2065, 3112, 2038, 9723, 1052, 1998, 4945, 9723, 1015, 1597, 1052, 1010,
        2059,  102])"
92,1,"['probability', 'outcomes', 'event']", Products of sample spaces,seg_23,"since there are five outcomes in the event a, each having probability (1−p)4 ·p.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  2144,  2045,  2024,  2274, 13105,  1999,  1996,  2724,  1037,
         1010,  2169,  2383,  9723,  1006,  1015, 22543,  2361,  1007,  1018,
         1087,  1052,  1012,   102])"
93,1,"['probability', 'event', 'experiments', 'probability of the event']", Products of sample spaces,seg_23,quick exercise 2.6 what is the probability of the event b “exactly two experiments were successful”?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([ 101, 4248, 6912, 1016, 1012, 1020, 2054, 2003, 1996, 9723, 1997, 1996,
        2724, 1038, 1523, 3599, 2048, 7885, 2020, 3144, 1524, 1029,  102])"
94,1,"['sample space', 'sample', 'experiment']", Products of sample spaces,seg_23,"in general, when we perform an experiment n times, then the corresponding sample space is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([3688, 1997, 7099, 7258])","tensor([ 101, 1999, 2236, 1010, 2043, 2057, 4685, 2019, 7551, 1050, 2335, 1010,
        2059, 1996, 7978, 7099, 2686, 2003,  102])"
95,1,"['sample space', 'outcomes', 'probabilities', 'sample', 'standard']", Products of sample spaces,seg_23,"where ωi for i = 1, . . . , n is a copy of the sample space of the original experiment. moreover, we assign probabilities to the outcomes (ω1, . . . , ωn) in the standard way described earlier, i.e.,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  2073,  1179,  2072,  2005,  1045,  1027,  1015,  1010,  1012,
         1012,  1012,  1010,  1050,  2003,  1037,  6100,  1997,  1996,  7099,
         2686,  1997,  1996,  2434,  7551,  1012,  9308,  1010,  2057, 23911,
         4013,  3676, 14680,  2000,  1996, 13105,  1006,  1179,  2487,  1010,
         1012,  1012,  1012,  1010,  1179,  2078,  1007,  1999,  1996,  3115,
         2126,  2649,  3041,  1010,  1045,  1012,  1041,  1012,  1010,   102])"
96,1,['probability'], Products of sample spaces,seg_23,if each ωi has probability pi.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([3688, 1997, 7099, 7258])","tensor([  101,  2065,  2169,  1179,  2072,  2038,  9723, 14255,  1012,   102])"
97,1,"['outcomes', 'experiment', 'outcome']", An infinite sample space,seg_25,we end this chapter with an example of an experiment with infinitely many outcomes. we toss a coin repeatedly until the first head turns up. the outcome,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  2057,  2203,  2023,  3127,  2007,  2019,  2742,  1997,  2019,
         7551,  2007, 25773,  2116, 13105,  1012,  2057, 10055,  1037,  9226,
         8385,  2127,  1996,  2034,  2132,  4332,  2039,  1012,  1996,  9560,
          102])"
98,1,"['sample space', 'sample', 'experiment']", An infinite sample space,seg_25,of the experiment is the number of tosses it takes to have this first occurrence of a head. our sample space is the space of all positive natural numbers,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  1997,  1996,  7551,  2003,  1996,  2193,  1997, 10055,  2229,
         2009,  3138,  2000,  2031,  2023,  2034, 14404,  1997,  1037,  2132,
         1012,  2256,  7099,  2686,  2003,  1996,  2686,  1997,  2035,  3893,
         3019,  3616,   102])"
99,1,"['function', 'probability', 'probability function', 'experiment']", An infinite sample space,seg_25,what is the probability function p for this experiment?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([ 101, 2054, 2003, 1996, 9723, 3853, 1052, 2005, 2023, 7551, 1029,  102])"
100,1,"['probability', 'tails', 'event', 'outcome']", An infinite sample space,seg_25,"suppose the coin has probability p of falling on heads and probability 1−p to fall on tails, where 0 < p < 1. we determine the probability p(n) for each n. clearly p(1) = p, the probability that we have a head right away. the event {2} corresponds to the outcome (t, h) in {h, t }×{h, t }, so we should have",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  6814,  1996,  9226,  2038,  9723,  1052,  1997,  4634,  2006,
         4641,  1998,  9723,  1015, 22543,  2361,  2000,  2991,  2006, 17448,
         1010,  2073,  1014,  1026,  1052,  1026,  1015,  1012,  2057,  5646,
         1996,  9723,  1052,  1006,  1050,  1007,  2005,  2169,  1050,  1012,
         4415,  1052,  1006,  1015,  1007,  1027,  1052,  1010,  1996,  9723,
         2008,  2057,  2031,  1037,  2132,  2157,  2185,  1012,  1996,  2724,
         1063,  1016,  1065, 14788,  2000,  1996,  9560,  1006,  1056,  1010,
         1044,  1007,  1999,  1063,  1044,  1010,  1056,  1065,  1095,  1063,
         1044,  1010,  1056,  1065,  1010,  2061,  2057,  2323,  2031,   102])"
101,1,"['outcome', 'event']", An infinite sample space,seg_25,"similarly, the event {n} corresponds to the outcome (t, t, . . . , t, t, h) in the space {h, t } × · · · × {h, t }. hence we should have, in general,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  6660,  1010,  1996,  2724,  1063,  1050,  1065, 14788,  2000,
         1996,  9560,  1006,  1056,  1010,  1056,  1010,  1012,  1012,  1012,
         1010,  1056,  1010,  1056,  1010,  1044,  1007,  1999,  1996,  2686,
         1063,  1044,  1010,  1056,  1065,  1095,  1087,  1087,  1087,  1095,
         1063,  1044,  1010,  1056,  1065,  1012,  6516,  2057,  2323,  2031,
         1010,  1999,  2236,  1010,   102])"
102,1,"['function', 'sample space', 'probability', 'probability function', 'sample']", An infinite sample space,seg_25,"does this define a probability function on ω = {1, 2, 3, . . .}? then we should at least have p(ω) = 1. it is not directly clear how to calculate p(ω): since the sample space is no longer finite we have to amend the definition of a probability function.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  2515,  2023,  9375,  1037,  9723,  3853,  2006,  1179,  1027,
         1063,  1015,  1010,  1016,  1010,  1017,  1010,  1012,  1012,  1012,
         1065,  1029,  2059,  2057,  2323,  2012,  2560,  2031,  1052,  1006,
         1179,  1007,  1027,  1015,  1012,  2009,  2003,  2025,  3495,  3154,
         2129,  2000, 18422,  1052,  1006,  1179,  1007,  1024,  2144,  1996,
         7099,  2686,  2003,  2053,  2936, 10713,  2057,  2031,  2000, 27950,
         1996,  6210,  1997,  1037,  9723,  3853,  1012,   102])"
103,1,"['function', 'sample space', 'probability', 'disjoint', 'events', 'probability function', 'event', 'disjoint events', 'sample']", An infinite sample space,seg_25,"definition. a probability function on an infinite (or finite) sample space ω assigns to each event a in ω a number p(a) in [0, 1] such that (i) p(ω) = 1, and (ii) p(a1 ∪ a2 ∪ a3 ∪ · · ·) = p(a1) + p(a2) + p(a3) + · · · if a1, a2, a3, . . . are disjoint events.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  6210,  1012,  1037,  9723,  3853,  2006,  2019, 10709,  1006,
         2030, 10713,  1007,  7099,  2686,  1179, 24022,  2000,  2169,  2724,
         1037,  1999,  1179,  1037,  2193,  1052,  1006,  1037,  1007,  1999,
         1031,  1014,  1010,  1015,  1033,  2107,  2008,  1006,  1045,  1007,
         1052,  1006,  1179,  1007,  1027,  1015,  1010,  1998,  1006,  2462,
         1007,  1052,  1006, 17350,  1605, 22441,  1605,  1037,  2509,  1605,
         1087,  1087,  1087,  1007,  1027,  1052,  1006, 17350,  1007,  1009,
         1052,  1006, 22441,  1007,  1009,  1052,  1006,  1037,  2509,  1007,
         1009,  1087,  1087,  1087,  2065, 17350,  1010, 22441,  1010,  1037,
         2509,  1010,  1012,  1012,  1012,  2024,  4487,  2015,  5558, 18447,
         2824,  1012,   102])"
104,1,['additivity property'], An infinite sample space,seg_25,"note that this new additivity property is an extension of the previous one because if we choose a3 = a4 = · · · = ∅, then",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  3602,  2008,  2023,  2047,  5587, 25090, 24872,  3200,  2003,
         2019,  5331,  1997,  1996,  3025,  2028,  2138,  2065,  2057,  5454,
         1037,  2509,  1027,  1037,  2549,  1027,  1087,  1087,  1087,  1027,
         1593,  1010,  2059,   102])"
105,1,['probability'], An infinite sample space,seg_25,now we can compute the probability of ω:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  2085,  2057,  2064, 24134,  1996,  9723,  1997,  1179,  1024,
          102])"
106,1,"['geometric', 'geometric series']", An infinite sample space,seg_25,"the sum 1 + (1 − p) + · · · + (1 − p)n−1 + · · · is an example of a geometric series. it is well known that when |1 − p| < 1,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([  101,  1996,  7680,  1015,  1009,  1006,  1015,  1597,  1052,  1007,
         1009,  1087,  1087,  1087,  1009,  1006,  1015,  1597,  1052,  1007,
         1050, 27944,  1009,  1087,  1087,  1087,  2003,  2019,  2742,  1997,
         1037, 14965,  2186,  1012,  2009,  2003,  2092,  2124,  2008,  2043,
         1064,  1015,  1597,  1052,  1064,  1026,  1015,  1010,   102])"
107,1,"['probability', 'probability of success', 'experiment', 'success', 'successful']", An infinite sample space,seg_25,"quick exercise 2.7 suppose an experiment in a laboratory is repeated every day of the week until it is successful, the probability of success being p. the first experiment is started on a monday. what is the probability that the series ends on the next sunday?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019, 10709,  7099,  2686])","tensor([ 101, 4248, 6912, 1016, 1012, 1021, 6814, 2019, 7551, 1999, 1037, 5911,
        2003, 5567, 2296, 2154, 1997, 1996, 2733, 2127, 2009, 2003, 3144, 1010,
        1996, 9723, 1997, 3112, 2108, 1052, 1012, 1996, 2034, 7551, 2003, 2318,
        2006, 1037, 6928, 1012, 2054, 2003, 1996, 9723, 2008, 1996, 2186, 4515,
        2006, 1996, 2279, 4465, 1029,  102])"
108,1,"['sample space', 'outcomes', 'sample', 'experiment']", Solutions to the quick exercises,seg_27,"2.1 the sample space is ω = {1234, 1243, 1324, 1342, . . . , 4321}. the best way to count its elements is by noting that for each of the 6 outcomes of the threeenvelope experiment we can put a fourth envelope in any of 4 positions. hence ω has 4 · 6 = 24 elements.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012,  1015,  1996,  7099,  2686,  2003,  1179,  1027,
         1063, 13138,  2549,  1010, 13412,  2509,  1010, 14078,  2549,  1010,
        15170,  2475,  1010,  1012,  1012,  1012,  1010,  4724, 17465,  1065,
         1012,  1996,  2190,  2126,  2000,  4175,  2049,  3787,  2003,  2011,
         9073,  2008,  2005,  2169,  1997,  1996,  1020, 13105,  1997,  1996,
         2093,  2368, 15985, 17635,  7551,  2057,  2064,  2404,  1037,  2959,
        11255,  1999,  2151,  1997,  1018,  4460,  1012,  6516,  1179,  2038,
         1018,  1087,  1020,  1027,  2484,  3787,  1012,   102])"
109,1,['event'], Solutions to the quick exercises,seg_27,"2.2 the statement “it is certainly not true that neither john nor mary is to blame” corresponds to the event (jc ∩m c)c. the statement “john or mary is to blame, or both” corresponds to the event j ∪ m . equivalence now follows from demorgan’s laws.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012,  1016,  1996,  4861,  1523,  2009,  2003,  5121,
         2025,  2995,  2008,  4445,  2198,  4496,  2984,  2003,  2000,  7499,
         1524, 14788,  2000,  1996,  2724,  1006, 29175,  1604,  2213,  1039,
         1007,  1039,  1012,  1996,  4861,  1523,  2198,  2030,  2984,  2003,
         2000,  7499,  1010,  2030,  2119,  1524, 14788,  2000,  1996,  2724,
         1046,  1605,  1049,  1012, 27841,  2085,  4076,  2013,  9703, 16998,
         1521,  1055,  4277,  1012,   102])"
110,1,['probability'], Solutions to the quick exercises,seg_27,"2.3 in four years we have 365×3+366 = 1461 days. hence long months each have a probability 4 × 31/1461 = 124/1461, and short months a probability 120/1461 to occur. moreover, {feb} has probability 113/1461.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012,  1017,  1999,  2176,  2086,  2057,  2031, 19342,
        26306,  2509,  1009,  4029,  2575,  1027, 16333,  2487,  2420,  1012,
         6516,  2146,  2706,  2169,  2031,  1037,  9723,  1018,  1095,  2861,
         1013, 16333,  2487,  1027, 13412,  1013, 16333,  2487,  1010,  1998,
         2460,  2706,  1037,  9723,  6036,  1013, 16333,  2487,  2000,  5258,
         1012,  9308,  1010,  1063, 13114,  1065,  2038,  9723, 12104,  1013,
        16333,  2487,  1012,   102])"
111,1,"['probability function', 'function', 'probability']", Solutions to the quick exercises,seg_27,"2.5 checking that p is a probability function ω amounts to verifying that 0 ≤ p((ai, aj)) ≤ 1 for all i and j and noting that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012,  1019,  9361,  2008,  1052,  2003,  1037,  9723,
         3853,  1179,  8310,  2000, 20410,  2075,  2008,  1014,  1608,  1052,
         1006,  1006,  9932,  1010, 19128,  1007,  1007,  1608,  1015,  2005,
         2035,  1045,  1998,  1046,  1998,  9073,  2008,   102])"
112,1,"['outcome', 'experiments']", Solutions to the quick exercises,seg_27,the two experiments are totally coupled: one has outcome ai if and only if the other has outcome ai.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1996,  2048,  7885,  2024,  6135, 11211,  1024,  2028,  2038,
         9560,  9932,  2065,  1998,  2069,  2065,  1996,  2060,  2038,  9560,
         9932,  1012,   102])"
113,1,"['probability', 'outcomes']", Solutions to the quick exercises,seg_27,"2.6 now there are 10 outcomes in b (for example (0,1,0,1,0)), each having probability (1 − p)3p2. hence p(b) = 10(1 − p)3p2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012,  1020,  2085,  2045,  2024,  2184, 13105,  1999,
         1038,  1006,  2005,  2742,  1006,  1014,  1010,  1015,  1010,  1014,
         1010,  1015,  1010,  1014,  1007,  1007,  1010,  2169,  2383,  9723,
         1006,  1015,  1597,  1052,  1007,  1017,  2361,  2475,  1012,  6516,
         1052,  1006,  1038,  1007,  1027,  2184,  1006,  1015,  1597,  1052,
         1007,  1017,  2361,  2475,  1012,   102])"
114,1,"['probability', 'experiment', 'success']", Solutions to the quick exercises,seg_27,"2.7 this happens if and only if the experiment fails on monday,. . . , saturday, and is a success on sunday. this has probability p(1 − p)6 to happen.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012,  1021,  2023,  6433,  2065,  1998,  2069,  2065,
         1996,  7551, 11896,  2006,  6928,  1010,  1012,  1012,  1012,  1010,
         5095,  1010,  1998,  2003,  1037,  3112,  2006,  4465,  1012,  2023,
         2038,  9723,  1052,  1006,  1015,  1597,  1052,  1007,  1020,  2000,
         4148,  1012,   102])"
115,1,"['sample space', 'events', 'sample']", Exercises,seg_29,"2.1 let a and b be two events in a sample space for which p(a) = 2/3, p(b) = 1/6, and p(a ∩ b) = 1/9. what is p(a ∪ b)?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 1016, 1012, 1015, 2292, 1037, 1998, 1038, 2022, 2048, 2824, 1999,
        1037, 7099, 2686, 2005, 2029, 1052, 1006, 1037, 1007, 1027, 1016, 1013,
        1017, 1010, 1052, 1006, 1038, 1007, 1027, 1015, 1013, 1020, 1010, 1998,
        1052, 1006, 1037, 1604, 1038, 1007, 1027, 1015, 1013, 1023, 1012, 2054,
        2003, 1052, 1006, 1037, 1605, 1038, 1007, 1029,  102])"
116,1,"['probability', 'events']", Exercises,seg_29,2.2 let e and f be two events for which one knows that the probability that at least one of them occurs is 3/4. what is the probability that neither e nor f occurs? hint: use one of demorgan’s laws: ec ∩ f c = (e ∪ f )c.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  1016,  2292,  1041,  1998,  1042,  2022,  2048,
         2824,  2005,  2029,  2028,  4282,  2008,  1996,  9723,  2008,  2012,
         2560,  2028,  1997,  2068,  5158,  2003,  1017,  1013,  1018,  1012,
         2054,  2003,  1996,  9723,  2008,  4445,  1041,  4496,  1042,  5158,
         1029,  9374,  1024,  2224,  2028,  1997,  9703, 16998,  1521,  1055,
         4277,  1024, 14925,  1604,  1042,  1039,  1027,  1006,  1041,  1605,
         1042,  1007,  1039,  1012,   102])"
117,1,['events'], Exercises,seg_29,"2.3 let c and d be two events for which one knows that p(c) = 0.3, p(d) = 0.4, and p(c ∩ d) = 0.2. what is p(cc ∩ d)?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  1017,  2292,  1039,  1998,  1040,  2022,  2048,
         2824,  2005,  2029,  2028,  4282,  2008,  1052,  1006,  1039,  1007,
         1027,  1014,  1012,  1017,  1010,  1052,  1006,  1040,  1007,  1027,
         1014,  1012,  1018,  1010,  1998,  1052,  1006,  1039,  1604,  1040,
         1007,  1027,  1014,  1012,  1016,  1012,  2054,  2003,  1052,  1006,
        10507,  1604,  1040,  1007,  1029,   102])"
118,1,"['probability', 'events', 'experiment']", Exercises,seg_29,"2.4 we consider events a, b, and c, which can occur in some experiment. is it true that the probability that only a occurs (and not b or c) is equal to p(a ∪ b ∪ c) − p(b) − p(c) + p(b ∩ c)?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1016, 1012, 1018, 2057, 5136, 2824, 1037, 1010, 1038, 1010, 1998,
        1039, 1010, 2029, 2064, 5258, 1999, 2070, 7551, 1012, 2003, 2009, 2995,
        2008, 1996, 9723, 2008, 2069, 1037, 5158, 1006, 1998, 2025, 1038, 2030,
        1039, 1007, 2003, 5020, 2000, 1052, 1006, 1037, 1605, 1038, 1605, 1039,
        1007, 1597, 1052, 1006, 1038, 1007, 1597, 1052, 1006, 1039, 1007, 1009,
        1052, 1006, 1038, 1604, 1039, 1007, 1029,  102])"
119,1,['event'], Exercises,seg_29,"2.5 the event a∩bc that a occurs but not b is sometimes denoted as a\b. here \ is the set-theoretic minus sign. show that p(a \ b) = p(a) − p(b) if b implies a, i.e., if b ⊂ a.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  1019,  1996,  2724,  1037, 30131,  9818,  2008,
         1037,  5158,  2021,  2025,  1038,  2003,  2823, 19537,  2004,  1037,
         1032,  1038,  1012,  2182,  1032,  2003,  1996,  2275,  1011, 14833,
        13465,  2594, 15718,  3696,  1012,  2265,  2008,  1052,  1006,  1037,
         1032,  1038,  1007,  1027,  1052,  1006,  1037,  1007,  1597,  1052,
         1006,  1038,  1007,  2065,  1038, 12748,  1037,  1010,  1045,  1012,
         1041,  1012,  1010,  2065,  1038,  1610,  1037,  1012,   102])"
120,1,"['probability', 'events']", Exercises,seg_29,"2.7 let a and b be two events. suppose that p(a) = 0.4, p(b) = 0.5, and p(a ∩ b) = 0.1. find the probability that a or b occurs, but not both.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1016, 1012, 1021, 2292, 1037, 1998, 1038, 2022, 2048, 2824, 1012,
        6814, 2008, 1052, 1006, 1037, 1007, 1027, 1014, 1012, 1018, 1010, 1052,
        1006, 1038, 1007, 1027, 1014, 1012, 1019, 1010, 1998, 1052, 1006, 1037,
        1604, 1038, 1007, 1027, 1014, 1012, 1015, 1012, 2424, 1996, 9723, 2008,
        1037, 2030, 1038, 5158, 1010, 2021, 2025, 2119, 1012,  102])"
121,1,"['probability', 'events']", Exercises,seg_29,"2.8 suppose the events d1 and d2 represent disasters, which are rare: p(d1) ≤ 10−6 and p(d2) ≤ 10−6. what can you say about the probability that at least one of the disasters occurs? what about the probability that they both occur?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  1022,  6814,  1996,  2824,  1040,  2487,  1998,
         1040,  2475,  5050, 18665,  1010,  2029,  2024,  4678,  1024,  1052,
         1006,  1040,  2487,  1007,  1608,  2184, 22543,  2575,  1998,  1052,
         1006,  1040,  2475,  1007,  1608,  2184, 22543,  2575,  1012,  2054,
         2064,  2017,  2360,  2055,  1996,  9723,  2008,  2012,  2560,  2028,
         1997,  1996, 18665,  5158,  1029,  2054,  2055,  1996,  9723,  2008,
         2027,  2119,  5258,  1029,   102])"
122,1,"['sample space', 'sample', 'experiment']", Exercises,seg_29,2.9 we toss a coin three times. for this experiment we choose the sample space,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  1023,  2057, 10055,  1037,  9226,  2093,  2335,
         1012,  2005,  2023,  7551,  2057,  5454,  1996,  7099,  2686,   102])"
123,1,['tails'], Exercises,seg_29,where t stands for tails and h for heads.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1056,  4832,  2005, 17448,  1998,  1044,  2005,  4641,
         1012,   102])"
124,1,"['set', 'outcomes']", Exercises,seg_29,a. write down the set of outcomes corresponding to each of the following,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4339,  2091,  1996,  2275,  1997, 13105,  7978,
         2000,  2169,  1997,  1996,  2206,   102])"
125,1,"['results', 'tails']", Exercises,seg_29,a : “we throw tails exactly two times.” b : “we throw tails at least two times.” c : “tails did not appear before a head appeared.” d : “the first throw results in tails.”,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1024,  1523,  2057,  5466, 17448,  3599,  2048,  2335,
         1012,  1524,  1038,  1024,  1523,  2057,  5466, 17448,  2012,  2560,
         2048,  2335,  1012,  1524,  1039,  1024,  1523, 17448,  2106,  2025,
         3711,  2077,  1037,  2132,  2596,  1012,  1524,  1040,  1024,  1523,
         1996,  2034,  5466,  3463,  1999, 17448,  1012,  1524,   102])"
126,1,"['set', 'outcomes']", Exercises,seg_29,b. write down the set of outcomes corresponding to each of the following,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  4339,  2091,  1996,  2275,  1997, 13105,  7978,
         2000,  2169,  1997,  1996,  2206,   102])"
127,1,"['sample space', 'events', 'event', 'sample']", Exercises,seg_29,"2.10 in some sample space we consider two events a and b. let c be the event that a or b occurs, but not both. express c in terms of a and b, using only the basic operations “union,” “intersection,” and “complement.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2184,  1999,  2070,  7099,  2686,  2057,  5136,
         2048,  2824,  1037,  1998,  1038,  1012,  2292,  1039,  2022,  1996,
         2724,  2008,  1037,  2030,  1038,  5158,  1010,  2021,  2025,  2119,
         1012,  4671,  1039,  1999,  3408,  1997,  1037,  1998,  1038,  1010,
         2478,  2069,  1996,  3937,  3136,  1523,  2586,  1010,  1524,  1523,
         6840,  1010,  1524,  1998,  1523, 13711,  1012,  1524,   102])"
128,1,"['probability', 'outcomes', 'experiment']", Exercises,seg_29,"2.11 an experiment has only two outcomes. the first has probability p to occur, the second probability p2. what is p?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2340,  2019,  7551,  2038,  2069,  2048, 13105,
         1012,  1996,  2034,  2038,  9723,  1052,  2000,  5258,  1010,  1996,
         2117,  9723,  1052,  2475,  1012,  2054,  2003,  1052,  1029,   102])"
129,1,['probability'], Exercises,seg_29,"2.12 in the uefa euro 2004 playoffs draw 10 national football teams were matched in pairs. a lot of people complained that “the draw was not fair,” because each strong team had been matched with a weak team (this is commercially the most interesting). it was claimed that such a matching is extremely unlikely. we will compute the probability of this “dream draw” in this exercise. in the spirit of the three-envelope example of section 2.1 we put the names of the 5 strong teams in envelopes labeled 1, 2, 3, 4, and 5 and of the 5 weak teams in envelopes labeled 6, 7, 8, 9, and 10. we shuffle the 10 envelopes and then match the envelope on top with the next envelope, the third envelope with the fourth envelope, and so on. one particular way a “dream draw” occurs is when the five envelopes labeled 1, 2, 3, 4, 5 are in the odd numbered positions (in any order!) and the others are in the even numbered positions. this way corresponds to the situation where the first match of each strong team is a home match. since for each pair there are two possibilities for the home match, the total number of possibilities for the “dream draw” is 25 = 32 times as large.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2260,  1999,  1996,  6663,  9944,  2432,  7555,
         4009,  2184,  2120,  2374,  2780,  2020, 10349,  1999,  7689,  1012,
         1037,  2843,  1997,  2111, 10865,  2008,  1523,  1996,  4009,  2001,
         2025,  4189,  1010,  1524,  2138,  2169,  2844,  2136,  2018,  2042,
        10349,  2007,  1037,  5410,  2136,  1006,  2023,  2003, 11088,  1996,
         2087,  5875,  1007,  1012,  2009,  2001,  3555,  2008,  2107,  1037,
         9844,  2003,  5186,  9832,  1012,  2057,  2097, 24134,  1996,  9723,
         1997,  2023,  1523,  3959,  4009,  1524,  1999,  2023,  6912,  1012,
         1999,  1996,  4382,  1997,  1996,  2093,  1011, 11255,  2742,  1997,
         2930,  1016,  1012,  1015,  2057,  2404,  1996,  3415,  1997,  1996,
         1019,  2844,  2780,  1999, 11255,  2015, 12599,  1015,  1010,  1016,
         1010,  1017,  1010,  1018,  1010,  1998,  1019,  1998,  1997,  1996,
         1019,  5410,  2780,  1999, 11255,  2015, 12599,  1020,  1010,  1021,
         1010,  1022,  1010,  1023,  1010,  1998,  2184,  1012,  2057, 23046,
         1996,  2184, 11255,  2015,  1998,  2059,  2674,  1996, 11255,  2006,
         2327,  2007,  1996,  2279, 11255,  1010,  1996,  2353, 11255,  2007,
         1996,  2959, 11255,  1010,  1998,  2061,  2006,  1012,  2028,  3327,
         2126,  1037,  1523,  3959,  4009,  1524,  5158,  2003,  2043,  1996,
         2274, 11255,  2015, 12599,  1015,  1010,  1016,  1010,  1017,  1010,
         1018,  1010,  1019,  2024,  1999,  1996,  5976,  8597,  4460,  1006,
         1999,  2151,  2344,   999,  1007,  1998,  1996,  2500,  2024,  1999,
         1996,  2130,  8597,  4460,  1012,  2023,  2126, 14788,  2000,  1996,
         3663,  2073,  1996,  2034,  2674,  1997,  2169,  2844,  2136,  2003,
         1037,  2188,  2674,  1012,  2144,  2005,  2169,  3940,  2045,  2024,
         2048, 12020,  2005,  1996,  2188,  2674,  1010,  1996,  2561,  2193,
         1997, 12020,  2005,  1996,  1523,  3959,  4009,  1524,  2003,  2423,
         1027,  3590,  2335,  2004,  2312,  1012,   102])"
130,1,"['experiment', 'outcome']", Exercises,seg_29,"a. an outcome of this experiment is a sequence like 4, 9, 3, 7, 5, 10, 1, 8, 2, 6 of",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2019, 9560, 1997, 2023, 7551, 2003, 1037, 5537, 2066,
        1018, 1010, 1023, 1010, 1017, 1010, 1021, 1010, 1019, 1010, 2184, 1010,
        1015, 1010, 1022, 1010, 1016, 1010, 1020, 1997,  102])"
131,1,"['probability', 'outcome']", Exercises,seg_29,labels of envelopes. what is the probability of an outcome?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101, 10873,  1997, 11255,  2015,  1012,  2054,  2003,  1996,  9723,
         1997,  2019,  9560,  1029,   102])"
132,1,"['outcomes', 'event']", Exercises,seg_29,b. how many outcomes are there in the event “the five envelopes labeled,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2129,  2116, 13105,  2024,  2045,  1999,  1996,
         2724,  1523,  1996,  2274, 11255,  2015, 12599,   102])"
133,1,['probability'], Exercises,seg_29,c. what is the probability of a “dream draw”?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2054, 2003, 1996, 9723, 1997, 1037, 1523, 3959, 4009,
        1524, 1029,  102])"
134,1,"['sample spaces', 'sample', 'experiment']", Exercises,seg_29,"2.13 in some experiment first an arbitrary choice is made out of four possibilities, and then an arbitrary choice is made out of the remaining three possibilities. one way to describe this is with a product of two sample spaces {a, b, c, d}:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2410,  1999,  2070,  7551,  2034,  2019, 15275,
         3601,  2003,  2081,  2041,  1997,  2176, 12020,  1010,  1998,  2059,
         2019, 15275,  3601,  2003,  2081,  2041,  1997,  1996,  3588,  2093,
        12020,  1012,  2028,  2126,  2000,  6235,  2023,  2003,  2007,  1037,
         4031,  1997,  2048,  7099,  7258,  1063,  1037,  1010,  1038,  1010,
         1039,  1010,  1040,  1065,  1024,   102])"
135,1,"['outcomes', 'probabilities', 'table']", Exercises,seg_29,a. make a 4×4 table in which you write the probabilities of the outcomes.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2191,  1037,  1018, 26306,  2549,  2795,  1999,
         2029,  2017,  4339,  1996,  4013,  3676, 14680,  1997,  1996, 13105,
         1012,   102])"
136,1,['event'], Exercises,seg_29,b. describe the event “c is one of the chosen possibilities” and determine its,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6235,  1996,  2724,  1523,  1039,  2003,  2028,
         1997,  1996,  4217, 12020,  1524,  1998,  5646,  2049,   102])"
137,1,"['sample', 'sample space']", Exercises,seg_29,"2.14 consider the monty hall “experiment” described in section 1.3. the door behind which the car is parked we label a, the other two b and c. as the sample space we choose a product space",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2403,  5136,  1996, 18446,  2534,  1523,  7551,
         1524,  2649,  1999,  2930,  1015,  1012,  1017,  1012,  1996,  2341,
         2369,  2029,  1996,  2482,  2003,  9083,  2057,  3830,  1037,  1010,
         1996,  2060,  2048,  1038,  1998,  1039,  1012,  2004,  1996,  7099,
         2686,  2057,  5454,  1037,  4031,  2686,   102])"
138,0,[], Exercises,seg_29,"here the first entry gives the choice of the candidate, and the second entry the choice of the quizmaster.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2182,  1996,  2034,  4443,  3957,  1996,  3601,  1997,  1996,
         4018,  1010,  1998,  1996,  2117,  4443,  1996,  3601,  1997,  1996,
        19461,  8706,  1012,   102])"
139,1,"['outcomes', 'probabilities', 'table']", Exercises,seg_29,a. make a 3×3 table in which you write the probabilities of the outcomes.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2191,  1037,  1017, 26306,  2509,  2795,  1999,
         2029,  2017,  4339,  1996,  4013,  3676, 14680,  1997,  1996, 13105,
         1012,   102])"
140,0,[], Exercises,seg_29,"n.b. you should realize that the candidate does not know that the car is in a, but the quizmaster will never open the door labeled a because he knows that the car is there. you may assume that the quizmaster makes an arbitrary choice between the doors labeled b and c, when the candidate chooses door a.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1050,  1012,  1038,  1012,  2017,  2323,  5382,  2008,  1996,
         4018,  2515,  2025,  2113,  2008,  1996,  2482,  2003,  1999,  1037,
         1010,  2021,  1996, 19461,  8706,  2097,  2196,  2330,  1996,  2341,
        12599,  1037,  2138,  2002,  4282,  2008,  1996,  2482,  2003,  2045,
         1012,  2017,  2089,  7868,  2008,  1996, 19461,  8706,  3084,  2019,
        15275,  3601,  2090,  1996,  4303, 12599,  1038,  1998,  1039,  1010,
         2043,  1996,  4018, 15867,  2341,  1037,  1012,   102])"
141,0,[], Exercises,seg_29,b. consider the situation of a “no switching” candidate who will stick to his,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  5136,  1996,  3663,  1997,  1037,  1523,  2053,
        11991,  1524,  4018,  2040,  2097,  6293,  2000,  2010,   102])"
142,1,"['probability', 'event']", Exercises,seg_29,"or her choice. what is the event “the candidate wins the car,” and what is its probability?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 2030, 2014, 3601, 1012, 2054, 2003, 1996, 2724, 1523, 1996, 4018,
        5222, 1996, 2482, 1010, 1524, 1998, 2054, 2003, 2049, 9723, 1029,  102])"
143,0,[], Exercises,seg_29,c. consider the situation of a “switching” candidate who will not stick to,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  5136,  1996,  3663,  1997,  1037,  1523, 11991,
         1524,  4018,  2040,  2097,  2025,  6293,  2000,   102])"
144,1,"['probability', 'event']", Exercises,seg_29,"her choice. what is now the event “the candidate wins the car,” and what is its probability?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 2014, 3601, 1012, 2054, 2003, 2085, 1996, 2724, 1523, 1996, 4018,
        5222, 1996, 2482, 1010, 1524, 1998, 2054, 2003, 2049, 9723, 1029,  102])"
145,1,"['probability', 'events', 'union']", Exercises,seg_29,"2.15 the rule p(a ∪ b) = p(a) + p(b)−p(a ∩ b) from section 2.3 is often useful to compute the probability of the union of two events. what would be the corresponding rule for three events a, b, and c? it should start with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2321,  1996,  3627,  1052,  1006,  1037,  1605,
         1038,  1007,  1027,  1052,  1006,  1037,  1007,  1009,  1052,  1006,
         1038,  1007,  1597,  2361,  1006,  1037,  1604,  1038,  1007,  2013,
         2930,  1016,  1012,  1017,  2003,  2411,  6179,  2000, 24134,  1996,
         9723,  1997,  1996,  2586,  1997,  2048,  2824,  1012,  2054,  2052,
         2022,  1996,  7978,  3627,  2005,  2093,  2824,  1037,  1010,  1038,
         1010,  1998,  1039,  1029,  2009,  2323,  2707,  2007,   102])"
146,0,[], Exercises,seg_29,"hint: you could use the sum rule suitably, or you could make a diagram as in figure 2.1.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])",tensor([11110]),"tensor([  101,  9374,  1024,  2017,  2071,  2224,  1996,  7680,  3627,  4848,
         8231,  1010,  2030,  2017,  2071,  2191,  1037, 16403,  2004,  1999,
         3275,  1016,  1012,  1015,  1012,   102])"
147,1,"['events', 'information']", Exercises,seg_29,"2.16 three events e, f , and g cannot occur simultaneously. further it is known that p(e ∩ f ) = p(f ∩ g) = p(e ∩ g) = 1/3. can you determine p(e)? hint: if you try to use the formula of exercise 2.15 then it seems that you do not have enough information; make a diagram instead.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2385,  2093,  2824,  1041,  1010,  1042,  1010,
         1998,  1043,  3685,  5258,  7453,  1012,  2582,  2009,  2003,  2124,
         2008,  1052,  1006,  1041,  1604,  1042,  1007,  1027,  1052,  1006,
         1042,  1604,  1043,  1007,  1027,  1052,  1006,  1041,  1604,  1043,
         1007,  1027,  1015,  1013,  1017,  1012,  2064,  2017,  5646,  1052,
         1006,  1041,  1007,  1029,  9374,  1024,  2065,  2017,  3046,  2000,
         2224,  1996,  5675,  1997,  6912,  1016,  1012,  2321,  2059,  2009,
         3849,  2008,  2017,  2079,  2025,  2031,  2438,  2592,  1025,  2191,
         1037, 16403,  2612,  1012,   102])"
148,1,"['sample', 'sample space']", Exercises,seg_29,"2.17 a post office has two counters where customers can buy stamps, etc. if you are interested in the number of customers in the two queues that will form for the counters, what would you take as sample space?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2459,  1037,  2695,  2436,  2038,  2048, 24094,
         2073,  6304,  2064,  4965, 12133,  1010,  4385,  1012,  2065,  2017,
         2024,  4699,  1999,  1996,  2193,  1997,  6304,  1999,  1996,  2048,
        24240,  2015,  2008,  2097,  2433,  2005,  1996, 24094,  1010,  2054,
         2052,  2017,  2202,  2004,  7099,  2686,  1029,   102])"
149,1,"['scores', 'probability', 'probability of success', 'experiment', 'experiments', 'success', 'successful']", Exercises,seg_29,"2.18 in a laboratory, two experiments are repeated every day of the week in different rooms until at least one is successful, the probability of success being p for each experiment. supposing that the experiments in different rooms and on different days are performed independently of each other, what is the probability that the laboratory scores its first successful experiment on day n?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2324,  1999,  1037,  5911,  1010,  2048,  7885,
         2024,  5567,  2296,  2154,  1997,  1996,  2733,  1999,  2367,  4734,
         2127,  2012,  2560,  2028,  2003,  3144,  1010,  1996,  9723,  1997,
         3112,  2108,  1052,  2005,  2169,  7551,  1012, 10514,  9397, 18606,
         2008,  1996,  7885,  1999,  2367,  4734,  1998,  2006,  2367,  2420,
         2024,  2864,  9174,  1997,  2169,  2060,  1010,  2054,  2003,  1996,
         9723,  2008,  1996,  5911,  7644,  2049,  2034,  3144,  7551,  2006,
         2154,  1050,  1029,   102])"
150,1,"['tail', 'probability', 'outcome', 'experiment']", Exercises,seg_29,"2.19 we repeatedly toss a coin. a head has probability p, and a tail probability 1 − p to occur, where 0 < p < 1. the outcome of the experiment we are interested in is the number of tosses it takes until a head occurs for the second time.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1012,  2539,  2057,  8385, 10055,  1037,  9226,  1012,
         1037,  2132,  2038,  9723,  1052,  1010,  1998,  1037,  5725,  9723,
         1015,  1597,  1052,  2000,  5258,  1010,  2073,  1014,  1026,  1052,
         1026,  1015,  1012,  1996,  9560,  1997,  1996,  7551,  2057,  2024,
         4699,  1999,  2003,  1996,  2193,  1997, 10055,  2229,  2009,  3138,
         2127,  1037,  2132,  5158,  2005,  1996,  2117,  2051,  1012,   102])"
151,1,"['sample', 'sample space']", Exercises,seg_29,a. what would you choose as the sample space?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2054, 2052, 2017, 5454, 2004, 1996, 7099, 2686, 1029,
         102])"
152,1,['probability'], Exercises,seg_29,b. what is the probability that it takes 5 tosses?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2003,  1996,  9723,  2008,  2009,  3138,
         1019, 10055,  2229,  1029,   102])"
153,1,"['conditional probability', 'probability', 'events', 'probabilities', 'event', 'conditional probabilities', 'conditional', 'independent']", Conditional probability and independence,seg_31,"knowing that an event has occurred sometimes forces us to reassess the probability of another event; the new probability is the conditional probability. if the conditional probability equals what the probability was before, the events involved are called independent. often, conditional probabilities and independence are needed if we want to compute probabilities, and in many other situations they simplify the work.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([18462,  9723,  1998,  4336])","tensor([  101,  4209,  2008,  2019,  2724,  2038,  4158,  2823,  2749,  2149,
         2000,  2128, 27241,  4757,  1996,  9723,  1997,  2178,  2724,  1025,
         1996,  2047,  9723,  2003,  1996, 18462,  9723,  1012,  2065,  1996,
        18462,  9723, 19635,  2054,  1996,  9723,  2001,  2077,  1010,  1996,
         2824,  2920,  2024,  2170,  2981,  1012,  2411,  1010, 18462,  4013,
         3676, 14680,  1998,  4336,  2024,  2734,  2065,  2057,  2215,  2000,
        24134,  4013,  3676, 14680,  1010,  1998,  1999,  2116,  2060,  8146,
         2027, 21934, 28250,  1996,  2147,  1012,   102])"
154,1,"['events', 'probabilities']", Conditional probability,seg_33,"in the previous chapter we encountered the events l, “born in a long month,” and r, “born in a month with the letter r.” their probabilities are easy to compute: since l = {jan, mar, may, jul, aug, oct, dec} and r = {jan, feb, mar, apr, sep, oct, nov, dec}, one finds",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1999,  1996,  3025,  3127,  2057,  8567,  1996,  2824,  1048,
         1010,  1523,  2141,  1999,  1037,  2146,  3204,  1010,  1524,  1998,
         1054,  1010,  1523,  2141,  1999,  1037,  3204,  2007,  1996,  3661,
         1054,  1012,  1524,  2037,  4013,  3676, 14680,  2024,  3733,  2000,
        24134,  1024,  2144,  1048,  1027,  1063,  5553,  1010,  9388,  1010,
         2089,  1010, 21650,  1010, 15476,  1010, 13323,  1010, 11703,  1065,
         1998,  1054,  1027,  1063,  5553,  1010, 13114,  1010,  9388,  1010,
        19804,  1010, 19802,  1010, 13323,  1010, 13292,  1010, 11703,  1065,
         1010,  2028,  4858,   102])"
155,1,"['conditional probability', 'sample space', 'probability', 'information', 'outcomes', 'sample', 'conditional']", Conditional probability,seg_33,"now suppose that it is known about the person we meet in the street that he was born in a “long month,” and we wonder whether he was born in a “month with the letter r.” the information given excludes five outcomes of our sample space: it cannot be february, april, june, september, or november. seven possible outcomes are left, of which only four—those in r ∩ l = {jan, mar, oct, dec}—are favorable, so we reassess the probability as 4/7. we call this the conditional probability of r given l, and we write:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([18462,  9723])","tensor([  101,  2085,  6814,  2008,  2009,  2003,  2124,  2055,  1996,  2711,
         2057,  3113,  1999,  1996,  2395,  2008,  2002,  2001,  2141,  1999,
         1037,  1523,  2146,  3204,  1010,  1524,  1998,  2057,  4687,  3251,
         2002,  2001,  2141,  1999,  1037,  1523,  3204,  2007,  1996,  3661,
         1054,  1012,  1524,  1996,  2592,  2445, 23329,  2015,  2274, 13105,
         1997,  2256,  7099,  2686,  1024,  2009,  3685,  2022,  2337,  1010,
         2258,  1010,  2238,  1010,  2244,  1010,  2030,  2281,  1012,  2698,
         2825, 13105,  2024,  2187,  1010,  1997,  2029,  2069,  2176,  1517,
         2216,  1999,  1054,  1604,  1048,  1027,  1063,  5553,  1010,  9388,
         1010, 13323,  1010, 11703,  1065,  1517,  2024, 11119,  1010,  2061,
         2057,  2128, 27241,  4757,  1996,  9723,  2004,  1018,  1013,  1021,
         1012,  2057,  2655,  2023,  1996, 18462,  9723,  1997,  1054,  2445,
         1048,  1010,  1998,  2057,  4339,  1024,   102])"
156,1,"['conditional probability', 'probability', 'event', 'conditional']", Conditional probability,seg_33,quick exercise 3.1 let n = rc be the event “born in a month without r.” what is the conditional probability p(n |l)?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  4248,  6912,  1017,  1012,  1015,  2292,  1050,  1027, 22110,
         2022,  1996,  2724,  1523,  2141,  1999,  1037,  3204,  2302,  1054,
         1012,  1524,  2054,  2003,  1996, 18462,  9723,  1052,  1006,  1050,
         1064,  1048,  1007,  1029,   102])"
157,1,"['events', 'symmetry', 'information', 'probabilities', 'event']", Conditional probability,seg_33,"recalling the three envelopes on our doormat, consider the events “envelope 1 is the middle one” (call this event a) and “envelope 2 is the middle one” (b). then p(a) = p(213 or 312) = 1/3; by symmetry, the same is found for p(b). we say that the envelopes are in order if their order is either 123 or 321. suppose we know that they are not in order, but otherwise we do not know anything; what are the probabilities of a and b, given this information?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101, 21195,  1996,  2093, 11255,  2015,  2006,  2256,  2341, 18900,
         1010,  5136,  1996,  2824,  1523, 11255,  1015,  2003,  1996,  2690,
         2028,  1524,  1006,  2655,  2023,  2724,  1037,  1007,  1998,  1523,
        11255,  1016,  2003,  1996,  2690,  2028,  1524,  1006,  1038,  1007,
         1012,  2059,  1052,  1006,  1037,  1007,  1027,  1052,  1006, 19883,
         2030, 21036,  1007,  1027,  1015,  1013,  1017,  1025,  2011, 14991,
         1010,  1996,  2168,  2003,  2179,  2005,  1052,  1006,  1038,  1007,
         1012,  2057,  2360,  2008,  1996, 11255,  2015,  2024,  1999,  2344,
         2065,  2037,  2344,  2003,  2593, 13138,  2030, 24030,  1012,  6814,
         2057,  2113,  2008,  2027,  2024,  2025,  1999,  2344,  1010,  2021,
         4728,  2057,  2079,  2025,  2113,  2505,  1025,  2054,  2024,  1996,
         4013,  3676, 14680,  1997,  1037,  1998,  1038,  1010,  2445,  2023,
         2592,  1029,   102])"
158,1,"['probability', 'probabilities', 'event']", Conditional probability,seg_33,"let c be the event that the envelopes are not in order, so: c = {123, 321}c = {132, 213, 231, 312}. we ask for the probabilities of a and b, given that c occurs. event c consists of four elements, two of which also belong to a: a ∩ c = {213, 312}, so p(a |c) = 1/2. the probability of a ∩ c is half of p(c). no element of c also belongs to b, so p(b |c) = 0.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2292,  1039,  2022,  1996,  2724,  2008,  1996, 11255,  2015,
         2024,  2025,  1999,  2344,  1010,  2061,  1024,  1039,  1027,  1063,
        13138,  1010, 24030,  1065,  1039,  1027,  1063, 14078,  1010, 19883,
         1010, 20304,  1010, 21036,  1065,  1012,  2057,  3198,  2005,  1996,
         4013,  3676, 14680,  1997,  1037,  1998,  1038,  1010,  2445,  2008,
         1039,  5158,  1012,  2724,  1039,  3774,  1997,  2176,  3787,  1010,
         2048,  1997,  2029,  2036,  7141,  2000,  1037,  1024,  1037,  1604,
         1039,  1027,  1063, 19883,  1010, 21036,  1065,  1010,  2061,  1052,
         1006,  1037,  1064,  1039,  1007,  1027,  1015,  1013,  1016,  1012,
         1996,  9723,  1997,  1037,  1604,  1039,  2003,  2431,  1997,  1052,
         1006,  1039,  1007,  1012,  2053,  5783,  1997,  1039,  2036,  7460,
         2000,  1038,  1010,  2061,  1052,  1006,  1038,  1064,  1039,  1007,
         1027,  1014,  1012,   102])"
159,1,"['probability', 'event', 'probability of an event']", Conditional probability,seg_33,"in general, computing the probability of an event a, given that an event c occurs, means finding which fraction of the probability of c is also in the event a.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1999,  2236,  1010,  9798,  1996,  9723,  1997,  2019,  2724,
         1037,  1010,  2445,  2008,  2019,  2724,  1039,  5158,  1010,  2965,
         4531,  2029, 12884,  1997,  1996,  9723,  1997,  1039,  2003,  2036,
         1999,  1996,  2724,  1037,  1012,   102])"
160,1,"['probability', 'conditional probability', 'conditional']", Conditional probability,seg_33,definition. the conditional probability of a given c is given by:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  6210,  1012,  1996, 18462,  9723,  1997,  1037,  2445,  1039,
         2003,  2445,  2011,  1024,   102])"
161,1,"['conditional probability', 'function', 'probability', 'probability function', 'events', 'outcomes', 'probabilities', 'event', 'conditional probabilities', 'conditional']", Conditional probability,seg_33,"this exercise shows that the rule p(ac) = 1−p(a) also holds for conditional probabilities. in fact, even more is true: if we have a fixed conditioning event c and define q(a) = p(a |c) for events a ⊂ ω, then q is a probability function and hence satisfies all the rules as described in chapter 2. the definition of conditional probability agrees with our intuition and it also works in situations where computing probabilities by counting outcomes does not.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2023,  6912,  3065,  2008,  1996,  3627,  1052,  1006,  9353,
         1007,  1027,  1015, 22543,  2361,  1006,  1037,  1007,  2036,  4324,
         2005, 18462,  4013,  3676, 14680,  1012,  1999,  2755,  1010,  2130,
         2062,  2003,  2995,  1024,  2065,  2057,  2031,  1037,  4964, 14372,
         2724,  1039,  1998,  9375,  1053,  1006,  1037,  1007,  1027,  1052,
         1006,  1037,  1064,  1039,  1007,  2005,  2824,  1037,  1610,  1179,
         1010,  2059,  1053,  2003,  1037,  9723,  3853,  1998,  6516,  2938,
         2483, 14213,  2035,  1996,  3513,  2004,  2649,  1999,  3127,  1016,
         1012,  1996,  6210,  1997, 18462,  9723, 10217,  2007,  2256, 26406,
         1998,  2009,  2036,  2573,  1999,  8146,  2073,  9798,  4013,  3676,
        14680,  2011, 10320, 13105,  2515,  2025,  1012,   102])"
162,1,['residence times'], Conditional probability,seg_33,a chemical reactor: residence times,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0.])","tensor([18462,  9723])","tensor([  101,  1037,  5072, 13308,  1024,  5039,  2335,   102])"
163,1,"['residence time', 'distribution']", Conditional probability,seg_33,"consider a continuously stirred reactor vessel where a chemical reaction takes place. on one side fluid or gas flows in, mixes with whatever is already present in the vessel, and eventually flows out on the other side. one characteristic of each particular reaction setup is the so-called residence time distribution, which tells us how long particles stay inside the vessel before moving on. we consider a continuously stirred tank: the contents of the vessel are perfectly mixed at all times.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  5136,  1037, 10843, 13551, 13308,  6258,  2073,  1037,  5072,
         4668,  3138,  2173,  1012,  2006,  2028,  2217,  8331,  2030,  3806,
         6223,  1999,  1010, 21109,  2007,  3649,  2003,  2525,  2556,  1999,
         1996,  6258,  1010,  1998,  2776,  6223,  2041,  2006,  1996,  2060,
         2217,  1012,  2028,  8281,  1997,  2169,  3327,  4668, 16437,  2003,
         1996,  2061,  1011,  2170,  5039,  2051,  4353,  1010,  2029,  4136,
         2149,  2129,  2146,  9309,  2994,  2503,  1996,  6258,  2077,  3048,
         2006,  1012,  2057,  5136,  1037, 10843, 13551,  4951,  1024,  1996,
         8417,  1997,  1996,  6258,  2024,  6669,  3816,  2012,  2035,  2335,
         1012,   102])"
164,1,"['continuous', 'residence time', 'probabilities', 'event']", Conditional probability,seg_33,"let rt denote the event “the particle has a residence time longer than t seconds.” in section 5.3 we will see how continuous stirring determines the probabilities; here we just use that in a particular continuously stirred tank,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2292, 19387, 19090,  1996,  2724,  1523,  1996, 10811,  2038,
         1037,  5039,  2051,  2936,  2084,  1056,  3823,  1012,  1524,  1999,
         2930,  1019,  1012,  1017,  2057,  2097,  2156,  2129,  7142, 18385,
        16463,  1996,  4013,  3676, 14680,  1025,  2182,  2057,  2074,  2224,
         2008,  1999,  1037,  3327, 10843, 13551,  4951,  1010,   102])"
165,1,['probability'], Conditional probability,seg_33,−t rt has probability e . so:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1597,  2102, 19387,  2038,  9723,  1041,  1012,  2061,  1024,
          102])"
166,1,"['probability', 'conditional probability', 'conditional']", Conditional probability,seg_33,we can use the definition of conditional probability to find the probability that a particle that has stayed more than 3 seconds will stay more than 4:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2064,  2224,  1996,  6210,  1997, 18462,  9723,  2000,
         2424,  1996,  9723,  2008,  1037, 10811,  2008,  2038,  4370,  2062,
         2084,  1017,  3823,  2097,  2994,  2062,  2084,  1018,  1024,   102])"
167,0,[], Conditional probability,seg_33,quick exercise 3.4 calculate p(r3 |r4,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  4248,  6912,  1017,  1012,  1018, 18422,  1052,  1006,  1054,
         2509,  1064,  1054,  2549,   102])"
168,1,"['residence time', 'distributions']", Conditional probability,seg_33,"for more details on the subject of residence time distributions see, for example, the book on reaction engineering by fogler ([11]).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2005,  2062,  4751,  2006,  1996,  3395,  1997,  5039,  2051,
        20611,  2156,  1010,  2005,  2742,  1010,  1996,  2338,  2006,  4668,
         3330,  2011,  9666,  3917,  1006,  1031,  2340,  1033,  1007,  1012,
          102])"
169,1,"['probability', 'conditional probability', 'conditional']", The multiplication rule,seg_35,from the definition of conditional probability we derive a useful rule by multiplying left and right by p(c).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  2013,  1996,  6210,  1997, 18462,  9723,  2057, 18547,  1037,
         6179,  3627,  2011,  4800, 22086,  2075,  2187,  1998,  2157,  2011,
         1052,  1006,  1039,  1007,  1012,   102])"
170,1,"['events', 'multiplication rule']", The multiplication rule,seg_35,the multiplication rule. for any events a and c:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  1996, 24856,  3627,  1012,  2005,  2151,  2824,  1037,  1998,
         1039,  1024,   102])"
171,1,['probability'], The multiplication rule,seg_35,"computing the probability of a∩c can hence be decomposed into two parts, computing p(c) and p(a |c) separately, which is often easier than computing p(a ∩ c) directly.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  9798,  1996,  9723,  1997,  1037, 30131,  2278,  2064,  6516,
         2022, 21933,  8737, 24768,  2046,  2048,  3033,  1010,  9798,  1052,
         1006,  1039,  1007,  1998,  1052,  1006,  1037,  1064,  1039,  1007,
        10329,  1010,  2029,  2003,  2411,  6082,  2084,  9798,  1052,  1006,
         1037,  1604,  1039,  1007,  3495,  1012,   102])"
172,1,['probability'], The multiplication rule,seg_35,the probability of no coincident birthdays,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  1996,  9723,  1997,  2053, 19680,  3372,  5798,  2015,   102])"
173,1,"['probability', 'event']", The multiplication rule,seg_35,"suppose you meet two arbitrarily chosen people. what is the probability their birthdays are different? let b2 denote the event that this happens. whatever the birthday of the first person is, there is only one day the second person cannot “pick” as birthday, so:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  6814,  2017,  3113,  2048, 12098, 16313, 19848,  6588,  4217,
         2111,  1012,  2054,  2003,  1996,  9723,  2037,  5798,  2015,  2024,
         2367,  1029,  2292,  1038,  2475, 19090,  1996,  2724,  2008,  2023,
         6433,  1012,  3649,  1996,  5798,  1997,  1996,  2034,  2711,  2003,
         1010,  2045,  2003,  2069,  2028,  2154,  1996,  2117,  2711,  3685,
         1523,  4060,  1524,  2004,  5798,  1010,  2061,  1024,   102])"
174,1,"['probabilities', 'event', 'intersection', 'conditional probabilities', 'conditional']", The multiplication rule,seg_35,"when the same question is asked with three people, conditional probabilities become helpful. the event b3 can be seen as the intersection of the event b2,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  2043,  1996,  2168,  3160,  2003,  2356,  2007,  2093,  2111,
         1010, 18462,  4013,  3676, 14680,  2468, 14044,  1012,  1996,  2724,
         1038,  2509,  2064,  2022,  2464,  2004,  1996,  6840,  1997,  1996,
         2724,  1038,  2475,  1010,   102])"
175,1,"['multiplication rule', 'event']", The multiplication rule,seg_35,"“the first two have different birthdays,” with event a3 “the third person has a birthday that does not coincide with that of one of the first two persons.” using the multiplication rule:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  1523,  1996,  2034,  2048,  2031,  2367,  5798,  2015,  1010,
         1524,  2007,  2724,  1037,  2509,  1523,  1996,  2353,  2711,  2038,
         1037,  5798,  2008,  2515,  2025, 19680,  2007,  2008,  1997,  2028,
         1997,  1996,  2034,  2048,  5381,  1012,  1524,  2478,  1996, 24856,
         3627,  1024,   102])"
176,1,"['conditional probability', 'probability', 'random', 'conditional']", The multiplication rule,seg_35,"the conditional probability p(a3 |b2) is the probability that, when two days are already marked on the calendar, a day picked at random is not marked,",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  1996, 18462,  9723,  1052,  1006,  1037,  2509,  1064,  1038,
         2475,  1007,  2003,  1996,  9723,  2008,  1010,  2043,  2048,  2420,
         2024,  2525,  4417,  2006,  1996,  8094,  1010,  1037,  2154,  3856,
         2012,  6721,  2003,  2025,  4417,  1010,   102])"
177,1,"['probability', 'event']", The multiplication rule,seg_35,"we are already halfway to solving the general question: in a group of n arbitrarily chosen people, what is the probability there are no coincident birthdays? the event bn of no coincident birthdays among the n persons is the same as: “the birthdays of the first n − 1 persons are different” (the event bn−1) and “the birthday of the nth person does not coincide with a birthday of any of the first n − 1 persons” (the event an), that is,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  2057,  2024,  2525,  8576,  2000, 13729,  1996,  2236,  3160,
         1024,  1999,  1037,  2177,  1997,  1050, 12098, 16313, 19848,  6588,
         4217,  2111,  1010,  2054,  2003,  1996,  9723,  2045,  2024,  2053,
        19680,  3372,  5798,  2015,  1029,  1996,  2724, 24869,  1997,  2053,
        19680,  3372,  5798,  2015,  2426,  1996,  1050,  5381,  2003,  1996,
         2168,  2004,  1024,  1523,  1996,  5798,  2015,  1997,  1996,  2034,
         1050,  1597,  1015,  5381,  2024,  2367,  1524,  1006,  1996,  2724,
        24869, 27944,  1007,  1998,  1523,  1996,  5798,  1997,  1996, 23961,
         2232,  2711,  2515,  2025, 19680,  2007,  1037,  5798,  1997,  2151,
         1997,  1996,  2034,  1050,  1597,  1015,  5381,  1524,  1006,  1996,
         2724,  2019,  1007,  1010,  2008,  2003,  1010,   102])"
178,1,['multiplication rule'], The multiplication rule,seg_35,applying the multiplication rule yields:,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101, 11243,  1996, 24856,  3627, 16189,  1024,   102])"
179,1,['probability'], The multiplication rule,seg_35,"this can be used to compute the probability for arbitrary n. for example, we find: p(b22) = 0.5243 and p(b23) = 0.4927. in figure 3.1 the probability",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  2023,  2064,  2022,  2109,  2000, 24134,  1996,  9723,  2005,
        15275,  1050,  1012,  2005,  2742,  1010,  2057,  2424,  1024,  1052,
         1006,  1038, 19317,  1007,  1027,  1014,  1012,  4720, 23777,  1998,
         1052,  1006,  1038, 21926,  1007,  1027,  1014,  1012,  4749, 22907,
         1012,  1999,  3275,  1017,  1012,  1015,  1996,  9723,   102])"
180,0,[], The multiplication rule,seg_35,p(bn) .......................·,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([ 1996, 24856,  3627])","tensor([  101,  1052,  1006, 24869,  1007,  1012,  1012,  1012,  1012,  1012,
         1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,
         1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,  1087,   102])"
181,1,['probability'], The multiplication rule,seg_35,"p(bn) is plotted for n = 1, . . . , 100, with dotted lines drawn at n = 23 and at probability 0.5. it may be hard to believe, but with just 23 people the probability of all birthdays being different is less than 50%!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  1052,  1006, 24869,  1007,  2003, 27347,  2005,  1050,  1027,
         1015,  1010,  1012,  1012,  1012,  1010,  2531,  1010,  2007, 20384,
         3210,  4567,  2012,  1050,  1027,  2603,  1998,  2012,  9723,  1014,
         1012,  1019,  1012,  2009,  2089,  2022,  2524,  2000,  2903,  1010,
         2021,  2007,  2074,  2603,  2111,  1996,  9723,  1997,  2035,  5798,
         2015,  2108,  2367,  2003,  2625,  2084,  2753,  1003,   999,   102])"
182,1,['probability'], The multiplication rule,seg_35,quick exercise 3.5 compute the probability that three arbitrary people are born in different months. can you give the formula for n people?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  4248,  6912,  1017,  1012,  1019, 24134,  1996,  9723,  2008,
         2093, 15275,  2111,  2024,  2141,  1999,  2367,  2706,  1012,  2064,
         2017,  2507,  1996,  5675,  2005,  1050,  2111,  1029,   102])"
183,0,[], The multiplication rule,seg_35,it matters how one conditions,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 24856,  3627])","tensor([ 101, 2009, 5609, 2129, 2028, 3785,  102])"
184,1,['condition'], The multiplication rule,seg_35,"conditioning can help to make computations easier, but it matters how it is applied. to compute p(a ∩ c) we may condition on c to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101, 14372,  2064,  2393,  2000,  2191, 22334,  2015,  6082,  1010,
         2021,  2009,  5609,  2129,  2009,  2003,  4162,  1012,  2000, 24134,
         1052,  1006,  1037,  1604,  1039,  1007,  2057,  2089,  4650,  2006,
         1039,  2000,  2131,   102])"
185,1,['condition'], The multiplication rule,seg_35,or we may condition on a and get,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([ 101, 2030, 2057, 2089, 4650, 2006, 1037, 1998, 2131,  102])"
186,0,[], The multiplication rule,seg_35,"both ways are valid, but often one of p(a |c) and p(c |a) is easy and the other is not. for example, in the birthday example one could have tried:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 24856,  3627])","tensor([ 101, 2119, 3971, 2024, 9398, 1010, 2021, 2411, 2028, 1997, 1052, 1006,
        1037, 1064, 1039, 1007, 1998, 1052, 1006, 1039, 1064, 1037, 1007, 2003,
        3733, 1998, 1996, 2060, 2003, 2025, 1012, 2005, 2742, 1010, 1999, 1996,
        5798, 2742, 2028, 2071, 2031, 2699, 1024,  102])"
187,1,"['probability', 'conditional probability', 'conditional']", The multiplication rule,seg_35,but just trying to understand the conditional probability p(b2 |a3) already is confusing:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  2021,  2074,  2667,  2000,  3305,  1996, 18462,  9723,  1052,
         1006,  1038,  2475,  1064,  1037,  2509,  1007,  2525,  2003, 16801,
         1024,   102])"
188,1,['probability'], The multiplication rule,seg_35,the probability that the first two persons’ birthdays differ given that the third person’s birthday does not coincide with the birthday of one of the first two . . . ?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 24856,  3627])","tensor([  101,  1996,  9723,  2008,  1996,  2034,  2048,  5381,  1521,  5798,
         2015, 11234,  2445,  2008,  1996,  2353,  2711,  1521,  1055,  5798,
         2515,  2025, 19680,  2007,  1996,  5798,  1997,  2028,  1997,  1996,
         2034,  2048,  1012,  1012,  1012,  1029,   102])"
189,1,['probabilities'], The multiplication rule,seg_35,"conditioning should lead to easier probabilities; if not, it is probably the wrong approach.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 24856,  3627])","tensor([  101, 14372,  2323,  2599,  2000,  6082,  4013,  3676, 14680,  1025,
         2065,  2025,  1010,  2009,  2003,  2763,  1996,  3308,  3921,  1012,
          102])"
190,1,"['probability', 'probabilities', 'conditional probabilities', 'conditional']", The law of total probability and Bayes rule,seg_37,we will now discuss two important rules that help probability computations by means of conditional probabilities. we introduce both of them in the next example.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  2057,  2097,  2085,  6848,  2048,  2590,  3513,  2008,  2393,
         9723, 22334,  2015,  2011,  2965,  1997, 18462,  4013,  3676, 14680,
         1012,  2057,  8970,  2119,  1997,  2068,  1999,  1996,  2279,  2742,
         1012,   102])"
191,0,[], The law of total probability and Bayes rule,seg_37,testing for mad cow disease,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  5604,  2005,  5506, 11190,  4295,   102])"
192,1,"['false positives', 'false negatives', 'tests', 'false negative', 'false positives and false negatives', 'false positive', 'test']", The law of total probability and Bayes rule,seg_37,"in early 2001 the european commission introduced massive testing of cattle to determine infection with the transmissible form of bovine spongiform encephalopathy (bse) or “mad cow disease.” as no test is 100% accurate, most tests have the problem of false positives and false negatives. a false positive means that according to the test the cow is infected, but in actuality it is not. a false negative means an infected cow is not detected by the test.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  1999,  2220,  2541,  1996,  2647,  3222,  3107,  5294,  5604,
         1997,  7125,  2000,  5646,  8985,  2007,  1996,  9099, 26770,  2433,
         1997,  8945, 20534, 11867,  5063, 22631,  4372,  3401, 21890,  4135,
        20166,  1006, 18667,  2063,  1007,  2030,  1523,  5506, 11190,  4295,
         1012,  1524,  2004,  2053,  3231,  2003,  2531,  1003,  8321,  1010,
         2087,  5852,  2031,  1996,  3291,  1997,  6270,  3893,  2015,  1998,
         6270,  4997,  2015,  1012,  1037,  6270,  3893,  2965,  2008,  2429,
         2000,  1996,  3231,  1996, 11190,  2003, 10372,  1010,  2021,  1999,
         5025,  3012,  2009,  2003,  2025,  1012,  1037,  6270,  4997,  2965,
         2019, 10372, 11190,  2003,  2025, 11156,  2011,  1996,  3231,  1012,
          102])"
193,1,"['event', 'results', 'tests', 'samples', 'test']", The law of total probability and Bayes rule,seg_37,"imagine we test a cow. let b denote the event “the cow has bse” and t the event “the test comes up positive” (this is test jargon for: according to the test we should believe the cow is infected with bse). one can “test the test” by analyzing samples from cows that are known to be infected or known to be healthy and so determine the effectiveness of the test. the european commission had this done for four tests in 1999 (see [19]) and for several more later. the results for what the report calls test a may be summarized as follows: an infected cow has a 70% chance of testing positive, and a healthy cow just 10%; in formulas:",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  5674,  2057,  3231,  1037, 11190,  1012,  2292,  1038, 19090,
         1996,  2724,  1523,  1996, 11190,  2038, 18667,  2063,  1524,  1998,
         1056,  1996,  2724,  1523,  1996,  3231,  3310,  2039,  3893,  1524,
         1006,  2023,  2003,  3231, 15723,  7446,  2005,  1024,  2429,  2000,
         1996,  3231,  2057,  2323,  2903,  1996, 11190,  2003, 10372,  2007,
        18667,  2063,  1007,  1012,  2028,  2064,  1523,  3231,  1996,  3231,
         1524,  2011, 20253,  8168,  2013, 17188,  2008,  2024,  2124,  2000,
         2022, 10372,  2030,  2124,  2000,  2022,  7965,  1998,  2061,  5646,
         1996, 12353,  1997,  1996,  3231,  1012,  1996,  2647,  3222,  2018,
         2023,  2589,  2005,  2176,  5852,  1999,  2639,  1006,  2156,  1031,
         2539,  1033,  1007,  1998,  2005,  2195,  2062,  2101,  1012,  1996,
         3463,  2005,  2054,  1996,  3189,  4455,  3231,  1037,  2089,  2022,
        22539,  2004,  4076,  1024,  2019, 10372, 11190,  2038,  1037,  3963,
         1003,  3382,  1997,  5604,  3893,  1010,  1998,  1037,  7965, 11190,
         2074,  2184,  1003,  1025,  1999, 25814,  1024,   102])"
194,1,"['probability', 'events', 'event', 'tests', 'combination']", The law of total probability and Bayes rule,seg_37,suppose we want to determine the probability p(t ) that an arbitrary cow tests positive. the tested cow is either infected or it is not: event t occurs in combination with b or with bc (there are no other possibilities). in terms of events,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  6814,  2057,  2215,  2000,  5646,  1996,  9723,  1052,  1006,
         1056,  1007,  2008,  2019, 15275, 11190,  5852,  3893,  1012,  1996,
         7718, 11190,  2003,  2593, 10372,  2030,  2009,  2003,  2025,  1024,
         2724,  1056,  5158,  1999,  5257,  2007,  1038,  2030,  2007,  4647,
         1006,  2045,  2024,  2053,  2060, 12020,  1007,  1012,  1999,  3408,
         1997,  2824,   102])"
195,1,"['disjoint', 'probabilities', 'multiplication rule', 'conditional probabilities', 'conditional']", The law of total probability and Bayes rule,seg_37,"because t ∩b and t ∩bc are disjoint. next, apply the multiplication rule (in such a way that the known conditional probabilities appear!):",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  2138,  1056,  1604,  2497,  1998,  1056,  1604,  9818,  2024,
         4487,  2015,  5558, 18447,  1012,  2279,  1010,  6611,  1996, 24856,
         3627,  1006,  1999,  2107,  1037,  2126,  2008,  1996,  2124, 18462,
         4013,  3676, 14680,  3711,   999,  1007,  1024,   102])"
196,1,"['probability', 'disjoint', 'events', 'law of total probability', 'disjoint events', 'sample', 'total probability']", The law of total probability and Bayes rule,seg_37,this is an application of the law of total probability: computing a probability through conditioning on several disjoint events that make up the whole sample,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  2023,  2003,  2019,  4646,  1997,  1996,  2375,  1997,  2561,
         9723,  1024,  9798,  1037,  9723,  2083, 14372,  2006,  2195,  4487,
         2015,  5558, 18447,  2824,  2008,  2191,  2039,  1996,  2878,  7099,
          102])"
197,1,['case'], The law of total probability and Bayes rule,seg_37,space (in this case two). suppose1 p(b) = 0.02; then from the last equation we conclude: p(t ) = 0.02 · 0.70 + (1 − 0.02) · 0.10 = 0.112.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  2686,  1006,  1999,  2023,  2553,  2048,  1007,  1012,  6814,
         2487,  1052,  1006,  1038,  1007,  1027,  1014,  1012,  6185,  1025,
         2059,  2013,  1996,  2197,  8522,  2057, 16519,  1024,  1052,  1006,
         1056,  1007,  1027,  1014,  1012,  6185,  1087,  1014,  1012,  3963,
         1009,  1006,  1015,  1597,  1014,  1012,  6185,  1007,  1087,  1014,
         1012,  2184,  1027,  1014,  1012, 11176,  1012,   102])"
198,0,[], The law of total probability and Bayes rule,seg_37,following is a general statement of the law.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([ 101, 2206, 2003, 1037, 2236, 4861, 1997, 1996, 2375, 1012,  102])"
199,1,"['probability', 'disjoint', 'events', 'law of total probability', 'event', 'disjoint events', 'total probability']", The law of total probability and Bayes rule,seg_37,"the law of total probability. suppose c1, c2, . . . , cm are disjoint events such that c1 ∪c2 ∪ · · · ∪cm = ω. the probability of an arbitrary event a can be expressed as:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  1996,  2375,  1997,  2561,  9723,  1012,  6814, 27723,  1010,
        29248,  1010,  1012,  1012,  1012,  1010,  4642,  2024,  4487,  2015,
         5558, 18447,  2824,  2107,  2008, 27723,  1605,  2278,  2475,  1605,
         1087,  1087,  1087,  1605, 27487,  1027,  1179,  1012,  1996,  9723,
         1997,  2019, 15275,  2724,  1037,  2064,  2022,  5228,  2004,  1024,
          102])"
200,1,"['disjoint', 'states', 'event', 'union', 'multiplication rule']", The law of total probability and Bayes rule,seg_37,"figure 3.2 illustrates the law for m = 5. the event a is the disjoint union of a∩ci, for i = 1, . . . , 5, so p(a) = p(a ∩ c1)+ · · ·+p(a ∩ c5), and for each i the multiplication rule states p(a ∩ ci) = p(a |ci) · p(ci).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  3275,  1017,  1012,  1016, 24899,  1996,  2375,  2005,  1049,
         1027,  1019,  1012,  1996,  2724,  1037,  2003,  1996,  4487,  2015,
         5558, 18447,  2586,  1997,  1037, 30131,  6895,  1010,  2005,  1045,
         1027,  1015,  1010,  1012,  1012,  1012,  1010,  1019,  1010,  2061,
         1052,  1006,  1037,  1007,  1027,  1052,  1006,  1037,  1604, 27723,
         1007,  1009,  1087,  1087,  1087,  1009,  1052,  1006,  1037,  1604,
         1039,  2629,  1007,  1010,  1998,  2005,  2169,  1045,  1996, 24856,
         3627,  2163,  1052,  1006,  1037,  1604, 25022,  1007,  1027,  1052,
         1006,  1037,  1064, 25022,  1007,  1087,  1052,  1006, 25022,  1007,
         1012,   102])"
201,1,"['events', 'mutually exclusive events', 'mutually exclusive']", The law of total probability and Bayes rule,seg_37,"in the bse example, we have just two mutually exclusive events: substitute m = 2, c1 = b, c2 = bc, and a = t to obtain (3.2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  1999,  1996, 18667,  2063,  2742,  1010,  2057,  2031,  2074,
         2048, 20271,  7262,  2824,  1024,  7681,  1049,  1027,  1016,  1010,
        27723,  1027,  1038,  1010, 29248,  1027,  4647,  1010,  1998,  1037,
         1027,  1056,  2000,  6855,  1006,  1017,  1012,  1016,  1007,  1012,
          102])"
202,1,"['conditional probability', 'probability', 'information', 'tests', 'conditional', 'test']", The law of total probability and Bayes rule,seg_37,"another, perhaps more pertinent, question about the bse test is the following: suppose my cow tests positive; what is the probability it really has bse? translated, this asks for the value of p(b |t ). the information we were given is p(t |b), a conditional probability, but the wrong one. we would like to switch t and b.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  2178,  1010,  3383,  2062,  2566, 10196,  3372,  1010,  3160,
         2055,  1996, 18667,  2063,  3231,  2003,  1996,  2206,  1024,  6814,
         2026, 11190,  5852,  3893,  1025,  2054,  2003,  1996,  9723,  2009,
         2428,  2038, 18667,  2063,  1029,  5421,  1010,  2023,  5176,  2005,
         1996,  3643,  1997,  1052,  1006,  1038,  1064,  1056,  1007,  1012,
         1996,  2592,  2057,  2020,  2445,  2003,  1052,  1006,  1056,  1064,
         1038,  1007,  1010,  1037, 18462,  9723,  1010,  2021,  1996,  3308,
         2028,  1012,  2057,  2052,  2066,  2000,  6942,  1056,  1998,  1038,
         1012,   102])"
203,1,"['probability', 'conditional probability', 'conditional']", The law of total probability and Bayes rule,seg_37,start with the definition of conditional probability and then use equations (3.1) and (3.2):,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  2707,  2007,  1996,  6210,  1997, 18462,  9723,  1998,  2059,
         2224, 11380,  1006,  1017,  1012,  1015,  1007,  1998,  1006,  1017,
         1012,  1016,  1007,  1024,   102])"
204,1,"['probabilities', 'test']", The law of total probability and Bayes rule,seg_37,"and by a similar calculation: p(b |t c) = 0.0068. these probabilities reflect that this test a is not a very good test; a perfect test would result in p(b |t ) = 1 and p(b |t c) = 0. in exercise 3.4 we redo this calculation, replacing p(b) = 0.02 with a more realistic number.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  1998,  2011,  1037,  2714, 17208,  1024,  1052,  1006,  1038,
         1064,  1056,  1039,  1007,  1027,  1014,  1012,  4002,  2575,  2620,
         1012,  2122,  4013,  3676, 14680,  8339,  2008,  2023,  3231,  1037,
         2003,  2025,  1037,  2200,  2204,  3231,  1025,  1037,  3819,  3231,
         2052,  2765,  1999,  1052,  1006,  1038,  1064,  1056,  1007,  1027,
         1015,  1998,  1052,  1006,  1038,  1064,  1056,  1039,  1007,  1027,
         1014,  1012,  1999,  6912,  1017,  1012,  1018,  2057,  2417,  2080,
         2023, 17208,  1010,  6419,  1052,  1006,  1038,  1007,  1027,  1014,
         1012,  6185,  2007,  1037,  2062, 12689,  2193,  1012,   102])"
205,1,['bayes'], The law of total probability and Bayes rule,seg_37,"what we have just seen is known as bayes’ rule, after the english clergyman thomas bayes who derived this in the 18th century. the general statement follows.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  2054,  2057,  2031,  2074,  2464,  2003,  2124,  2004,  3016,
         2229,  1521,  3627,  1010,  2044,  1996,  2394, 22232,  2726,  3016,
         2229,  2040,  5173,  2023,  1999,  1996,  4985,  2301,  1012,  1996,
         2236,  4861,  4076,  1012,   102])"
206,1,"['conditional probability', 'probability', 'disjoint', 'events', 'event', 'conditional']", The law of total probability and Bayes rule,seg_37,"bayes’ rule. suppose the events c1, c2, . . . , cm are disjoint and c1 ∪c2 ∪ · · · ∪cm = ω. the conditional probability of ci, given an arbitrary event a, can be expressed as:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  3016,  2229,  1521,  3627,  1012,  6814,  1996,  2824, 27723,
         1010, 29248,  1010,  1012,  1012,  1012,  1010,  4642,  2024,  4487,
         2015,  5558, 18447,  1998, 27723,  1605,  2278,  2475,  1605,  1087,
         1087,  1087,  1605, 27487,  1027,  1179,  1012,  1996, 18462,  9723,
         1997, 25022,  1010,  2445,  2019, 15275,  2724,  1037,  1010,  2064,
         2022,  5228,  2004,  1024,   102])"
207,0,[], The law of total probability and Bayes rule,seg_37,this is the traditional form of bayes’ formula. it follows from,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([ 101, 2023, 2003, 1996, 3151, 2433, 1997, 3016, 2229, 1521, 5675, 1012,
        2009, 4076, 2013,  102])"
208,1,"['probability', 'law of total probability', 'combination', 'total probability']", The law of total probability and Bayes rule,seg_37,"in combination with the law of total probability applied to p(a) in the denominator. purists would refer to (3.3) as bayes’ rule, and perhaps they are right.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2561, 9723, 1998, 3016, 2229, 3627])","tensor([  101,  1999,  5257,  2007,  1996,  2375,  1997,  2561,  9723,  4162,
         2000,  1052,  1006,  1037,  1007,  1999,  1996,  7939, 20936, 27413,
         1012, 16405, 15061,  2015,  2052,  6523,  2000,  1006,  1017,  1012,
         1017,  1007,  2004,  3016,  2229,  1521,  3627,  1010,  1998,  3383,
         2027,  2024,  2157,  1012,   102])"
209,1,['probabilities'], Independence,seg_39,consider three probabilities from the previous section:,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  5136,  2093,  4013,  3676, 14680,  2013,  1996,  3025,  2930,
         1024,   102])"
210,0,[], Independence,seg_39,"if we know nothing about a cow, we would say that there is a 2% chance it is infected. however, if we know it tested positive, we can say there is a 12.5%",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([4336]),"tensor([  101,  2065,  2057,  2113,  2498,  2055,  1037, 11190,  1010,  2057,
         2052,  2360,  2008,  2045,  2003,  1037,  1016,  1003,  3382,  2009,
         2003, 10372,  1012,  2174,  1010,  2065,  2057,  2113,  2009,  7718,
         3893,  1010,  2057,  2064,  2360,  2045,  2003,  1037,  2260,  1012,
         1019,  1003,   102])"
211,1,"['probability', 'events']", Independence,seg_39,"chance the cow is infected. on the other hand, if it tested negative, there is only a 0.68% chance. we see that the two events are related in some way: the probability of b depends on whether t occurs.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  3382,  1996, 11190,  2003, 10372,  1012,  2006,  1996,  2060,
         2192,  1010,  2065,  2009,  7718,  4997,  1010,  2045,  2003,  2069,
         1037,  1014,  1012,  6273,  1003,  3382,  1012,  2057,  2156,  2008,
         1996,  2048,  2824,  2024,  3141,  1999,  2070,  2126,  1024,  1996,
         9723,  1997,  1038,  9041,  2006,  3251,  1056,  5158,  1012,   102])"
212,1,"['probability', 'test', 'outcome', 'case', 'independent']", Independence,seg_39,"imagine the opposite: the test is useless. whether the cow is infected is unrelated to the outcome of the test, and knowing the outcome of the test does not change our probability of b: p(b |t ) = p(b). in this case we would call b independent of t .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  5674,  1996,  4500,  1024,  1996,  3231,  2003, 11809,  1012,
         3251,  1996, 11190,  2003, 10372,  2003, 15142,  2000,  1996,  9560,
         1997,  1996,  3231,  1010,  1998,  4209,  1996,  9560,  1997,  1996,
         3231,  2515,  2025,  2689,  2256,  9723,  1997,  1038,  1024,  1052,
         1006,  1038,  1064,  1056,  1007,  1027,  1052,  1006,  1038,  1007,
         1012,  1999,  2023,  2553,  2057,  2052,  2655,  1038,  2981,  1997,
         1056,  1012,   102])"
213,1,"['event', 'independent']", Independence,seg_39,definition. an event a is called independent of b if,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([4336]),"tensor([ 101, 6210, 1012, 2019, 2724, 1037, 2003, 2170, 2981, 1997, 1038, 2065,
         102])"
214,1,['independent'], Independence,seg_39,a independent of b ⇔ ac independent of b. (3.4),tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([ 101, 1037, 2981, 1997, 1038,  100, 9353, 2981, 1997, 1038, 1012, 1006,
        1017, 1012, 1018, 1007,  102])"
215,1,"['independence', 'multiplication rule', 'independent']", Independence,seg_39,"by application of the multiplication rule, if a is independent of b, then p(a ∩ b) = p(a |b)p(b) = p(a) p(b). on the other hand, if p(a ∩ b) = p(a) p(b), then p(a |b) = p(a) follows from the definition of independence. this shows:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  2011,  4646,  1997,  1996, 24856,  3627,  1010,  2065,  1037,
         2003,  2981,  1997,  1038,  1010,  2059,  1052,  1006,  1037,  1604,
         1038,  1007,  1027,  1052,  1006,  1037,  1064,  1038,  1007,  1052,
         1006,  1038,  1007,  1027,  1052,  1006,  1037,  1007,  1052,  1006,
         1038,  1007,  1012,  2006,  1996,  2060,  2192,  1010,  2065,  1052,
         1006,  1037,  1604,  1038,  1007,  1027,  1052,  1006,  1037,  1007,
         1052,  1006,  1038,  1007,  1010,  2059,  1052,  1006,  1037,  1064,
         1038,  1007,  1027,  1052,  1006,  1037,  1007,  4076,  2013,  1996,
         6210,  1997,  4336,  1012,  2023,  3065,  1024,   102])"
216,1,['independent'], Independence,seg_39,a independent of b ⇔ p(a ∩ b) = p(a) p(b) .,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([4336]),"tensor([ 101, 1037, 2981, 1997, 1038,  100, 1052, 1006, 1037, 1604, 1038, 1007,
        1027, 1052, 1006, 1037, 1007, 1052, 1006, 1038, 1007, 1012,  102])"
217,1,"['conditional probability', 'probability', 'conditional', 'independent']", Independence,seg_39,"finally, by definition of conditional probability, if a is independent of b, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  2633,  1010,  2011,  6210,  1997, 18462,  9723,  1010,  2065,
         1037,  2003,  2981,  1997,  1038,  1010,  2059,   102])"
218,1,['independent'], Independence,seg_39,"that is, b is independent of a. this works in reverse, too, so we have:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([4336]),"tensor([ 101, 2008, 2003, 1010, 1038, 2003, 2981, 1997, 1037, 1012, 2023, 2573,
        1999, 7901, 1010, 2205, 1010, 2061, 2057, 2031, 1024,  102])"
219,1,['independent'], Independence,seg_39,a independent of b ⇔ b independent of a. (3.5),tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([ 101, 1037, 2981, 1997, 1038,  100, 1038, 2981, 1997, 1037, 1012, 1006,
        1017, 1012, 1019, 1007,  102])"
220,1,"['independence', 'independent']", Independence,seg_39,"this statement says that in fact, independence is a mutual property. therefore, the expressions “a is independent of b” and “a and b are independent” are used interchangeably. from the three ⇔-statements it follows that there are in fact 12 ways to show that a and b are independent; and if they are, there are 12 ways to use that.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  2023,  4861,  2758,  2008,  1999,  2755,  1010,  4336,  2003,
         1037,  8203,  3200,  1012,  3568,  1010,  1996, 11423,  1523,  1037,
         2003,  2981,  1997,  1038,  1524,  1998,  1523,  1037,  1998,  1038,
         2024,  2981,  1524,  2024,  2109,  8989,  8231,  1012,  2013,  1996,
         2093,   100,  1011,  8635,  2009,  4076,  2008,  2045,  2024,  1999,
         2755,  2260,  3971,  2000,  2265,  2008,  1037,  1998,  1038,  2024,
         2981,  1025,  1998,  2065,  2027,  2024,  1010,  2045,  2024,  2260,
         3971,  2000,  2224,  2008,  1012,   102])"
221,1,['independent'], Independence,seg_39,independence. to show that a and b are independent it suffices to prove just one of the following:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  4336,  1012,  2000,  2265,  2008,  1037,  1998,  1038,  2024,
         2981,  2009, 10514, 26989,  9623,  2000,  6011,  2074,  2028,  1997,
         1996,  2206,  1024,   102])"
222,1,"['dependent', 'events', 'independent']", Independence,seg_39,"where a may be replaced by ac and b replaced by bc, or both. if one of these statements holds, all of them are true. if two events are not independent, they are called dependent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0.])",tensor([4336]),"tensor([ 101, 2073, 1037, 2089, 2022, 2999, 2011, 9353, 1998, 1038, 2999, 2011,
        4647, 1010, 2030, 2119, 1012, 2065, 2028, 1997, 2122, 8635, 4324, 1010,
        2035, 1997, 2068, 2024, 2995, 1012, 2065, 2048, 2824, 2024, 2025, 2981,
        1010, 2027, 2024, 2170, 7790, 1012,  102])"
223,1,"['events', 'event', 'independent']", Independence,seg_39,"recall the birthday events l “born in a long month” and r “born in a month with the letter r.” let h be the event “born in the first half of the year,” so p(h) = 1/2. also, p(h |r) = 1/2. so h and r are independent, and we conclude, for example, p(rc |hc) = p(rc) = 1 − 8/12 = 1/3.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  9131,  1996,  5798,  2824,  1048,  1523,  2141,  1999,  1037,
         2146,  3204,  1524,  1998,  1054,  1523,  2141,  1999,  1037,  3204,
         2007,  1996,  3661,  1054,  1012,  1524,  2292,  1044,  2022,  1996,
         2724,  1523,  2141,  1999,  1996,  2034,  2431,  1997,  1996,  2095,
         1010,  1524,  2061,  1052,  1006,  1044,  1007,  1027,  1015,  1013,
         1016,  1012,  2036,  1010,  1052,  1006,  1044,  1064,  1054,  1007,
         1027,  1015,  1013,  1016,  1012,  2061,  1044,  1998,  1054,  2024,
         2981,  1010,  1998,  2057, 16519,  1010,  2005,  2742,  1010,  1052,
         1006, 22110,  1064, 16731,  1007,  1027,  1052,  1006, 22110,  1007,
         1027,  1015,  1597,  1022,  1013,  2260,  1027,  1015,  1013,  1017,
         1012,   102])"
224,1,['dependent'], Independence,seg_39,"we know that p(l ∩ h) = 1/4 and p(l) = 7/12. checking 1/2×7/12 = 1/4, you conclude that l and h are dependent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([4336]),"tensor([  101,  2057,  2113,  2008,  1052,  1006,  1048,  1604,  1044,  1007,
         1027,  1015,  1013,  1018,  1998,  1052,  1006,  1048,  1007,  1027,
         1021,  1013,  2260,  1012,  9361,  1015,  1013,  1016, 26306,  2581,
         1013,  2260,  1027,  1015,  1013,  1018,  1010,  2017, 16519,  2008,
         1048,  1998,  1044,  2024,  7790,  1012,   102])"
225,1,['independent'], Independence,seg_39,quick exercise 3.8 derive the statement “rc is independent of hc” from “h is independent of r” using rules (3.4) and (3.5).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([4336]),"tensor([  101,  4248,  6912,  1017,  1012,  1022, 18547,  1996,  4861,  1523,
        22110,  2003,  2981,  1997, 16731,  1524,  2013,  1523,  1044,  2003,
         2981,  1997,  1054,  1524,  2478,  3513,  1006,  1017,  1012,  1018,
         1007,  1998,  1006,  1017,  1012,  1019,  1007,  1012,   102])"
226,1,"['dependence', 'independence', 'statistical']", Independence,seg_39,"since the words dependence and independence have several meanings, one sometimes uses the terms stochastic or statistical dependence and independence to avoid ambiguity.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  2144,  1996,  2616, 18642,  1998,  4336,  2031,  2195, 15383,
         1010,  2028,  2823,  3594,  1996,  3408,  2358, 11663, 20875,  2030,
         7778, 18642,  1998,  4336,  2000,  4468, 27637,  1012,   102])"
227,1,['events'], Independence,seg_39,independence of two or more events,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])",tensor([4336]),"tensor([ 101, 4336, 1997, 2048, 2030, 2062, 2824,  102])"
228,1,"['events', 'independence']", Independence,seg_39,when more than two events are involved we need a more elaborate definition of independence. the reason behind this is explained by an example following the definition.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([ 101, 2043, 2062, 2084, 2048, 2824, 2024, 2920, 2057, 2342, 1037, 2062,
        9603, 6210, 1997, 4336, 1012, 1996, 3114, 2369, 2023, 2003, 4541, 2011,
        2019, 2742, 2206, 1996, 6210, 1012,  102])"
229,1,"['events', 'independent']", Independence,seg_39,"independence of two or more events. events a1, a2, . . . , am are called independent if",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([4336]),"tensor([  101,  4336,  1997,  2048,  2030,  2062,  2824,  1012,  2824, 17350,
         1010, 22441,  1010,  1012,  1012,  1012,  1010,  2572,  2024,  2170,
         2981,  2065,   102])"
230,1,['events'], Independence,seg_39,"and this statement also holds when any number of the events a1, . . . , am are replaced by their complements throughout the formula.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  1998,  2023,  4861,  2036,  4324,  2043,  2151,  2193,  1997,
         1996,  2824, 17350,  1010,  1012,  1012,  1012,  1010,  2572,  2024,
         2999,  2011,  2037, 13711,  2015,  2802,  1996,  5675,  1012,   102])"
231,1,"['events', 'independence']", Independence,seg_39,"you see that we need to check 2m equations to establish the independence of m events. in fact, m + 1 of those equations are redundant, but we chose this version of the definition because it is easier.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  2017,  2156,  2008,  2057,  2342,  2000,  4638,  1016,  2213,
        11380,  2000,  5323,  1996,  4336,  1997,  1049,  2824,  1012,  1999,
         2755,  1010,  1049,  1009,  1015,  1997,  2216, 11380,  2024, 21707,
         1010,  2021,  2057,  4900,  2023,  2544,  1997,  1996,  6210,  2138,
         2009,  2003,  6082,  1012,   102])"
232,1,"['events', 'independence']", Independence,seg_39,the reason we need to do so much more checking to establish independence for multiple events is that there are subtle ways in which events may depend on each other. consider the question:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([4336]),"tensor([  101,  1996,  3114,  2057,  2342,  2000,  2079,  2061,  2172,  2062,
         9361,  2000,  5323,  4336,  2005,  3674,  2824,  2003,  2008,  2045,
         2024, 11259,  3971,  1999,  2029,  2824,  2089, 12530,  2006,  2169,
         2060,  1012,  5136,  1996,  3160,  1024,   102])"
233,1,"['events', 'independence', 'independent']", Independence,seg_39,"is independence for three events a, b, and c the same as: a and b are independent; b and c are independent; and a and c are independent?",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([4336]),"tensor([ 101, 2003, 4336, 2005, 2093, 2824, 1037, 1010, 1038, 1010, 1998, 1039,
        1996, 2168, 2004, 1024, 1037, 1998, 1038, 2024, 2981, 1025, 1038, 1998,
        1039, 2024, 2981, 1025, 1998, 1037, 1998, 1039, 2024, 2981, 1029,  102])"
234,1,"['event', 'independent']", Independence,seg_39,"the answer is “no,” as the following example shows. perform two independent tosses of a coin. let a be the event “heads on toss 1,” b the event “heads on toss 2,” and c “the two tosses are equal.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([4336]),"tensor([  101,  1996,  3437,  2003,  1523,  2053,  1010,  1524,  2004,  1996,
         2206,  2742,  3065,  1012,  4685,  2048,  2981, 10055,  2229,  1997,
         1037,  9226,  1012,  2292,  1037,  2022,  1996,  2724,  1523,  4641,
         2006, 10055,  1015,  1010,  1524,  1038,  1996,  2724,  1523,  4641,
         2006, 10055,  1016,  1010,  1524,  1998,  1039,  1523,  1996,  2048,
        10055,  2229,  2024,  5020,  1012,  1524,   102])"
235,1,['probabilities'], Independence,seg_39,"first, get the probabilities. of course, p(a) = p(b) = 1/2, but also",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  2034,  1010,  2131,  1996,  4013,  3676, 14680,  1012,  1997,
         2607,  1010,  1052,  1006,  1037,  1007,  1027,  1052,  1006,  1038,
         1007,  1027,  1015,  1013,  1016,  1010,  2021,  2036,   102])"
236,1,"['events', 'independence', 'independent']", Independence,seg_39,"what about independence? events a and b are independent by assumption, so check the independence of a and c. given that the first toss is heads (a occurs), c occurs if and only if the second toss is heads as well (b occurs), so",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([4336]),"tensor([  101,  2054,  2055,  4336,  1029,  2824,  1037,  1998,  1038,  2024,
         2981,  2011, 11213,  1010,  2061,  4638,  1996,  4336,  1997,  1037,
         1998,  1039,  1012,  2445,  2008,  1996,  2034, 10055,  2003,  4641,
         1006,  1037,  5158,  1007,  1010,  1039,  5158,  2065,  1998,  2069,
         2065,  1996,  2117, 10055,  2003,  4641,  2004,  2092,  1006,  1038,
         5158,  1007,  1010,  2061,   102])"
237,1,"['symmetry', 'independence', 'pairwise independent', 'independent']", Independence,seg_39,"by symmetry, also p(c |b) = p(c), so all pairs taken from a, b, c are independent: the three are called pairwise independent. checking the full conditions for independence, we find, for example:",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  2011, 14991,  1010,  2036,  1052,  1006,  1039,  1064,  1038,
         1007,  1027,  1052,  1006,  1039,  1007,  1010,  2061,  2035,  7689,
         2579,  2013,  1037,  1010,  1038,  1010,  1039,  2024,  2981,  1024,
         1996,  2093,  2024,  2170,  3940, 14244,  2981,  1012,  9361,  1996,
         2440,  3785,  2005,  4336,  1010,  2057,  2424,  1010,  2005,  2742,
         1024,   102])"
238,1,['outcomes'], Independence,seg_39,the reason for this is clear: whether c occurs follows deterministically from the outcomes of tosses 1 and 2.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4336]),"tensor([  101,  1996,  3114,  2005,  2023,  2003,  3154,  1024,  3251,  1039,
         5158,  4076, 28283, 25300, 10074,  3973,  2013,  1996, 13105,  1997,
        10055,  2229,  1015,  1998,  1016,  1012,   102])"
239,1,['outcomes'], Solutions to the quick exercises,seg_41,"3.1 n = {may, jun, jul, aug}, l = {jan, mar, may, jul, aug, oct, dec}, and n ∩ l = {may, jul, aug}. three out of seven outcomes of l belong to n as well, so p(n |l) = 3/7.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1017,  1012,  1015,  1050,  1027,  1063,  2089,  1010, 12022,
         1010, 21650,  1010, 15476,  1065,  1010,  1048,  1027,  1063,  5553,
         1010,  9388,  1010,  2089,  1010, 21650,  1010, 15476,  1010, 13323,
         1010, 11703,  1065,  1010,  1998,  1050,  1604,  1048,  1027,  1063,
         2089,  1010, 21650,  1010, 15476,  1065,  1012,  2093,  2041,  1997,
         2698, 13105,  1997,  1048,  7141,  2000,  1050,  2004,  2092,  1010,
         2061,  1052,  1006,  1050,  1064,  1048,  1007,  1027,  1017,  1013,
         1021,  1012,   102])"
240,1,['event'], Solutions to the quick exercises,seg_41,"3.2 the event a is contained in c. so when a occurs, c also occurs; therefore p(c |a) = 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1017, 1012, 1016, 1996, 2724, 1037, 2003, 4838, 1999, 1039, 1012,
        2061, 2043, 1037, 5158, 1010, 1039, 2036, 5158, 1025, 3568, 1052, 1006,
        1039, 1064, 1037, 1007, 1027, 1015, 1012,  102])"
241,1,['outcomes'], Solutions to the quick exercises,seg_41,"since cc = {123, 321} and a∪b = {123, 321, 312, 213}, one can see that two of the four outcomes of a ∪ b belong to cc as well, so p(cc |a ∪ b) = 1/2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2144, 10507,  1027,  1063, 13138,  1010, 24030,  1065,  1998,
         1037, 30132,  2497,  1027,  1063, 13138,  1010, 24030,  1010, 21036,
         1010, 19883,  1065,  1010,  2028,  2064,  2156,  2008,  2048,  1997,
         1996,  2176, 13105,  1997,  1037,  1605,  1038,  7141,  2000, 10507,
         2004,  2092,  1010,  2061,  1052,  1006, 10507,  1064,  1037,  1605,
         1038,  1007,  1027,  1015,  1013,  1016,  1012,   102])"
242,0,[], Solutions to the quick exercises,seg_41,3.3 using the definition we find:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1017, 1012, 1017, 2478, 1996, 6210, 2057, 2424, 1024,  102])"
243,1,['disjoint'], Solutions to the quick exercises,seg_41,because c can be split into disjoint parts a ∩ c and ac ∩ c and therefore,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2138,  1039,  2064,  2022,  3975,  2046,  4487,  2015,  5558,
        18447,  3033,  1037,  1604,  1039,  1998,  9353,  1604,  1039,  1998,
         3568,   102])"
244,1,['probability'], Solutions to the quick exercises,seg_41,"3.4 this asks for the probability that the particle stays more than 3 seconds, given that it does not stay longer than 4 seconds, so 4 or less. from the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1017,  1012,  1018,  2023,  5176,  2005,  1996,  9723,  2008,
         1996, 10811, 12237,  2062,  2084,  1017,  3823,  1010,  2445,  2008,
         2009,  2515,  2025,  2994,  2936,  2084,  1018,  3823,  1010,  2061,
         1018,  2030,  2625,  1012,  2013,  1996,   102])"
245,1,['event'], Solutions to the quick exercises,seg_41,the event r3 ∩ r4,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1996, 2724, 1054, 2509, 1604, 1054, 2549,  102])"
246,1,"['disjoint', 'events', 'union']", Solutions to the quick exercises,seg_41,"c describes: longer than 3 but not longer than 4 seconds. furthermore, r3 is the disjoint union of the events r3∩r4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1039,  5577,  1024,  2936,  2084,  1017,  2021,  2025,  2936,
         2084,  1018,  3823,  1012,  7297,  1010,  1054,  2509,  2003,  1996,
         4487,  2015,  5558, 18447,  2586,  1997,  1996,  2824,  1054,  2509,
        30131,  2099,  2549,   102])"
247,1,['complement'], Solutions to the quick exercises,seg_41,c) = p(r3) − p(r4) = e−3 − e−4. using the complement rule: p(r4,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1039,  1007,  1027,  1052,  1006,  1054,  2509,  1007,  1597,
         1052,  1006,  1054,  2549,  1007,  1027,  1041, 22543,  2509,  1597,
         1041, 22543,  2549,  1012,  2478,  1996, 13711,  3627,  1024,  1052,
         1006,  1054,  2549,   102])"
248,1,['event'], Solutions to the quick exercises,seg_41,"3.5 instead of a calendar of 365 days, we have one with just 12 months. let cn be the event n arbitrary persons have different months of birth. then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1017,  1012,  1019,  2612,  1997,  1037,  8094,  1997, 19342,
         2420,  1010,  2057,  2031,  2028,  2007,  2074,  2260,  2706,  1012,
         2292, 27166,  2022,  1996,  2724,  1050, 15275,  5381,  2031,  2367,
         2706,  1997,  4182,  1012,  2059,   102])"
249,0,[], Solutions to the quick exercises,seg_41,and it is no surprise that this is much smaller than p(b3). the general formula,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1998, 2009, 2003, 2053, 4474, 2008, 2023, 2003, 2172, 3760, 2084,
        1052, 1006, 1038, 2509, 1007, 1012, 1996, 2236, 5675,  102])"
250,1,['case'], Solutions to the quick exercises,seg_41,"note that it is correct even if n is 13 or more, in which case p(cn) = 0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  3602,  2008,  2009,  2003,  6149,  2130,  2065,  1050,  2003,
         2410,  2030,  2062,  1010,  1999,  2029,  2553,  1052,  1006, 27166,
         1007,  1027,  1014,  1012,   102])"
251,0,[], Solutions to the quick exercises,seg_41,3.6 repeating the calculation we find:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1017,  1012,  1020, 15192,  1996, 17208,  2057,  2424,  1024,
          102])"
252,1,['independent'], Solutions to the quick exercises,seg_41,h independent of r ⇔ hc independent of r by (3.4),tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1044,  2981,  1997,  1054,   100, 16731,  2981,  1997,  1054,
         2011,  1006,  1017,  1012,  1018,  1007,   102])"
253,1,['independent'], Solutions to the quick exercises,seg_41,hc independent of r ⇔ r independent of hc by (3.5),tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101, 16731,  2981,  1997,  1054,   100,  1054,  2981,  1997, 16731,
         2011,  1006,  1017,  1012,  1019,  1007,   102])"
254,1,['independent'], Solutions to the quick exercises,seg_41,r independent of hc ⇔ rc independent of hc by (3.4).,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1054,  2981,  1997, 16731,   100, 22110,  2981,  1997, 16731,
         2011,  1006,  1017,  1012,  1018,  1007,  1012,   102])"
255,1,"['probability', 'moment']", Exercises,seg_43,"3.1 your lecturer wants to walk from a to b (see the map). to do so, he first randomly selects one of the paths to c, d, or e. next he selects randomly one of the possible paths at that moment (so if he first selected the path to e, he can either select the path to a or the path to f ), etc. what is the probability that he will reach b after two selections?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  1015,  2115,  9162,  4122,  2000,  3328,  2013,
         1037,  2000,  1038,  1006,  2156,  1996,  4949,  1007,  1012,  2000,
         2079,  2061,  1010,  2002,  2034, 18154, 27034,  2028,  1997,  1996,
        10425,  2000,  1039,  1010,  1040,  1010,  2030,  1041,  1012,  2279,
         2002, 27034, 18154,  2028,  1997,  1996,  2825, 10425,  2012,  2008,
         2617,  1006,  2061,  2065,  2002,  2034,  3479,  1996,  4130,  2000,
         1041,  1010,  2002,  2064,  2593,  7276,  1996,  4130,  2000,  1037,
         2030,  1996,  4130,  2000,  1042,  1007,  1010,  4385,  1012,  2054,
         2003,  1996,  9723,  2008,  2002,  2097,  3362,  1038,  2044,  2048,
        16310,  1029,   102])"
256,1,['event'], Exercises,seg_43,"3.2 a fair die is thrown twice. a is the event “sum of the throws equals 4,” b is “at least one of the throws is a 3.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  1016,  1037,  4189,  3280,  2003,  6908,  3807,
         1012,  1037,  2003,  1996,  2724,  1523,  7680,  1997,  1996, 11618,
        19635,  1018,  1010,  1524,  1038,  2003,  1523,  2012,  2560,  2028,
         1997,  1996, 11618,  2003,  1037,  1017,  1012,  1524,   102])"
257,1,"['independent events', 'events', 'independent']", Exercises,seg_43,b. are a and b independent events?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2024, 1037, 1998, 1038, 2981, 2824, 1029,  102])"
258,1,['event'], Exercises,seg_43,"3.3 we draw two cards from a regular deck of 52. let s1 be the event “the first one is a spade,” and s2 “the second one is a spade.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  1017,  2057,  4009,  2048,  5329,  2013,  1037,
         3180,  5877,  1997,  4720,  1012,  2292,  1055,  2487,  2022,  1996,
         2724,  1523,  1996,  2034,  2028,  2003,  1037, 23288,  1010,  1524,
         1998,  1055,  2475,  1523,  1996,  2117,  2028,  2003,  1037, 23288,
         1012,  1524,   102])"
259,0,[], Exercises,seg_43,b. compute p(s2) by conditioning on whether the first card is a spade.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1052,  1006,  1055,  2475,  1007,  2011,
        14372,  2006,  3251,  1996,  2034,  4003,  2003,  1037, 23288,  1012,
          102])"
260,1,"['estimated', 'risk', 'test']", Exercises,seg_43,"3.4 a dutch cow is tested for bse, using test a as described in section 3.3, with p(t |b) = 0.70 and p(t |bc) = 0.10. assume that the bse risk for the netherlands is the same as in 2003, when it was estimated to be p(b) = 1.3 · 10−5. compute p(b |t ) and p(b |t c).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  1018,  1037,  3803, 11190,  2003,  7718,  2005,
        18667,  2063,  1010,  2478,  3231,  1037,  2004,  2649,  1999,  2930,
         1017,  1012,  1017,  1010,  2007,  1052,  1006,  1056,  1064,  1038,
         1007,  1027,  1014,  1012,  3963,  1998,  1052,  1006,  1056,  1064,
         4647,  1007,  1027,  1014,  1012,  2184,  1012,  7868,  2008,  1996,
        18667,  2063,  3891,  2005,  1996,  4549,  2003,  1996,  2168,  2004,
         1999,  2494,  1010,  2043,  2009,  2001,  4358,  2000,  2022,  1052,
         1006,  1038,  1007,  1027,  1015,  1012,  1017,  1087,  2184, 22543,
         2629,  1012, 24134,  1052,  1006,  1038,  1064,  1056,  1007,  1998,
         1052,  1006,  1038,  1064,  1056,  1039,  1007,  1012,   102])"
261,1,"['probability', 'random']", Exercises,seg_43,"3.5 a ball is drawn at random from an urn containing one red and one white ball. if the white ball is drawn, it is put back into the urn. if the red ball is drawn, it is returned to the urn together with two more red balls. then a second draw is made. what is the probability a red ball was drawn on both the first and the second draws?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  1019,  1037,  3608,  2003,  4567,  2012,  6721,
         2013,  2019, 24471,  2078,  4820,  2028,  2417,  1998,  2028,  2317,
         3608,  1012,  2065,  1996,  2317,  3608,  2003,  4567,  1010,  2009,
         2003,  2404,  2067,  2046,  1996, 24471,  2078,  1012,  2065,  1996,
         2417,  3608,  2003,  4567,  1010,  2009,  2003,  2513,  2000,  1996,
        24471,  2078,  2362,  2007,  2048,  2062,  2417,  7395,  1012,  2059,
         1037,  2117,  4009,  2003,  2081,  1012,  2054,  2003,  1996,  9723,
         1037,  2417,  3608,  2001,  4567,  2006,  2119,  1996,  2034,  1998,
         1996,  2117,  9891,  1029,   102])"
262,1,"['probability', 'events', 'independent']", Exercises,seg_43,"3.6 we choose a month of the year, in such a manner that each month has the same probability. find out whether the following events are independent:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1017, 1012, 1020, 2057, 5454, 1037, 3204, 1997, 1996, 2095, 1010,
        1999, 2107, 1037, 5450, 2008, 2169, 3204, 2038, 1996, 2168, 9723, 1012,
        2424, 2041, 3251, 1996, 2206, 2824, 2024, 2981, 1024,  102])"
263,1,['events'], Exercises,seg_43,"a. the events “outcome is an even numbered month” (i.e., february, april,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 1996, 2824, 1523, 9560, 2003, 2019, 2130, 8597, 3204,
        1524, 1006, 1045, 1012, 1041, 1012, 1010, 2337, 1010, 2258, 1010,  102])"
264,0,[], Exercises,seg_43,"june, etc.) and “outcome is in the first half of the year.”",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2238, 1010, 4385, 1012, 1007, 1998, 1523, 9560, 2003, 1999, 1996,
        2034, 2431, 1997, 1996, 2095, 1012, 1524,  102])"
265,1,['events'], Exercises,seg_43,"b. the events “outcome is an even numbered month” (i.e., february, april,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 1996, 2824, 1523, 9560, 2003, 2019, 2130, 8597, 3204,
        1524, 1006, 1045, 1012, 1041, 1012, 1010, 2337, 1010, 2258, 1010,  102])"
266,1,"['probability', 'event']", Exercises,seg_43,"3.8 spaceman spiff’s spacecraft has a warning light that is supposed to switch on when the freem blasters are overheated. let w be the event “the warning light is switched on” and f “the freem blasters are overheated.” suppose the probability of freem blaster overheating p(f ) is 0.1, that the light is switched on when they actually are overheated is 0.99, and that there is a 2% chance that it comes on when nothing is wrong: p(w |f c) = 0.02.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1017,  1012,  1022,  2686,  2386, 11867, 13355,  1521,  1055,
        12076,  2038,  1037,  5432,  2422,  2008,  2003,  4011,  2000,  6942,
         2006,  2043,  1996,  2489,  2213,  8479,  2545,  2024,  2058, 20192,
         3064,  1012,  2292,  1059,  2022,  1996,  2724,  1523,  1996,  5432,
         2422,  2003,  7237,  2006,  1524,  1998,  1042,  1523,  1996,  2489,
         2213,  8479,  2545,  2024,  2058, 20192,  3064,  1012,  1524,  6814,
         1996,  9723,  1997,  2489,  2213,  8479,  2121,  2058, 20192,  3436,
         1052,  1006,  1042,  1007,  2003,  1014,  1012,  1015,  1010,  2008,
         1996,  2422,  2003,  7237,  2006,  2043,  2027,  2941,  2024,  2058,
        20192,  3064,  2003,  1014,  1012,  5585,  1010,  1998,  2008,  2045,
         2003,  1037,  1016,  1003,  3382,  2008,  2009,  3310,  2006,  2043,
         2498,  2003,  3308,  1024,  1052,  1006,  1059,  1064,  1042,  1039,
         1007,  1027,  1014,  1012,  6185,  1012,   102])"
267,1,['probability'], Exercises,seg_43,a. determine the probability that the warning light is switched on.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 1996, 9723, 2008, 1996, 5432, 2422, 2003, 7237,
        2006, 1012,  102])"
268,1,"['probability', 'conditional probability', 'conditional']", Exercises,seg_43,b. determine the conditional probability that the freem blasters are over-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996, 18462,  9723,  2008,  1996,  2489,
         2213,  8479,  2545,  2024,  2058,  1011,   102])"
269,0,[], Exercises,seg_43,"heated, given that the warning light is on.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 9685, 1010, 2445, 2008, 1996, 5432, 2422, 2003, 2006, 1012,  102])"
270,1,"['probability', 'event']", Exercises,seg_43,"3.9 a certain grapefruit variety is grown in two regions in southern spain. both areas get infested from time to time with parasites that damage the crop. let a be the event that region r1 is infested with parasites and b that region r2 is infested. suppose p(a) = 3/4, p(b) = 2/5 and p(a ∪b) = 4/5. if the food inspection detects the parasite in a ship carrying grapefruits from r1, what is the probability region r2 is infested as well?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1017,  1012,  1023,  1037,  3056, 14722, 19699, 14663,  3528,
         2003,  4961,  1999,  2048,  4655,  1999,  2670,  3577,  1012,  2119,
         2752,  2131,  1999, 14081,  2098,  2013,  2051,  2000,  2051,  2007,
        23996,  2008,  4053,  1996, 10416,  1012,  2292,  1037,  2022,  1996,
         2724,  2008,  2555,  1054,  2487,  2003,  1999, 14081,  2098,  2007,
        23996,  1998,  1038,  2008,  2555,  1054,  2475,  2003,  1999, 14081,
         2098,  1012,  6814,  1052,  1006,  1037,  1007,  1027,  1017,  1013,
         1018,  1010,  1052,  1006,  1038,  1007,  1027,  1016,  1013,  1019,
         1998,  1052,  1006,  1037,  1605,  2497,  1007,  1027,  1018,  1013,
         1019,  1012,  2065,  1996,  2833, 10569, 11487,  2015,  1996, 21198,
         1999,  1037,  2911,  4755, 14722, 19699, 14663,  2015,  2013,  1054,
         2487,  1010,  2054,  2003,  1996,  9723,  2555,  1054,  2475,  2003,
         1999, 14081,  2098,  2004,  2092,  1029,   102])"
271,1,"['probability', 'random']", Exercises,seg_43,"3.10 a student takes a multiple-choice exam. suppose for each question he either knows the answer or gambles and chooses an option at random. further suppose that if he knows the answer, the probability of a correct answer is 1, and if he gambles this probability is 1/4. to pass, students need to answer at least 60% of the questions correctly. the student has “studied for a minimal pass,” i.e., with probability 0.6 he knows the answer to a question. given that he answers a question correctly, what is the probability that he actually knows the answer?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1017,  1012,  2184,  1037,  3076,  3138,  1037,  3674,  1011,
         3601, 11360,  1012,  6814,  2005,  2169,  3160,  2002,  2593,  4282,
         1996,  3437,  2030, 18503,  2015,  1998, 15867,  2019,  5724,  2012,
         6721,  1012,  2582,  6814,  2008,  2065,  2002,  4282,  1996,  3437,
         1010,  1996,  9723,  1997,  1037,  6149,  3437,  2003,  1015,  1010,
         1998,  2065,  2002, 18503,  2015,  2023,  9723,  2003,  1015,  1013,
         1018,  1012,  2000,  3413,  1010,  2493,  2342,  2000,  3437,  2012,
         2560,  3438,  1003,  1997,  1996,  3980, 11178,  1012,  1996,  3076,
         2038,  1523,  3273,  2005,  1037, 10124,  3413,  1010,  1524,  1045,
         1012,  1041,  1012,  1010,  2007,  9723,  1014,  1012,  1020,  2002,
         4282,  1996,  3437,  2000,  1037,  3160,  1012,  2445,  2008,  2002,
         6998,  1037,  3160, 11178,  1010,  2054,  2003,  1996,  9723,  2008,
         2002,  2941,  4282,  1996,  3437,  1029,   102])"
272,1,"['set', 'percentage', 'limit', 'test']", Exercises,seg_43,"3.11 a breath analyzer, used by the police to test whether drivers exceed the legal limit set for the blood alcohol percentage while driving, is known to satisfy",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  2340,  1037,  3052, 17908,  2099,  1010,  2109,
         2011,  1996,  2610,  2000,  3231,  3251,  6853, 13467,  1996,  3423,
         5787,  2275,  2005,  1996,  2668,  6544,  7017,  2096,  4439,  1010,
         2003,  2124,  2000, 13225,   102])"
273,1,"['percentage', 'event', 'limit']", Exercises,seg_43,where a is the event “breath analyzer indicates that legal limit is exceeded” and b “driver’s blood alcohol percentage exceeds legal limit.” on saturday night about 5% of the drivers are known to exceed the limit.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1037,  2003,  1996,  2724,  1523,  3052, 17908,  2099,
         7127,  2008,  3423,  5787,  2003, 14872,  1524,  1998,  1038,  1523,
         4062,  1521,  1055,  2668,  6544,  7017, 23651,  3423,  5787,  1012,
         1524,  2006,  5095,  2305,  2055,  1019,  1003,  1997,  1996,  6853,
         2024,  2124,  2000, 13467,  1996,  5787,  1012,   102])"
274,0,[], Exercises,seg_43,a. describe in words the meaning of p(bc |a).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 6235, 1999, 2616, 1996, 3574, 1997, 1052, 1006, 4647,
        1064, 1037, 1007, 1012,  102])"
275,1,['events'], Exercises,seg_43,"3.12 the events a, b, and c satisfy: p(a |b ∩ c) = 1/4, p(b |c) = 1/3, and p(c) = 1/2. calculate p(ac ∩ b ∩ c).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  2260,  1996,  2824,  1037,  1010,  1038,  1010,
         1998,  1039, 13225,  1024,  1052,  1006,  1037,  1064,  1038,  1604,
         1039,  1007,  1027,  1015,  1013,  1018,  1010,  1052,  1006,  1038,
         1064,  1039,  1007,  1027,  1015,  1013,  1017,  1010,  1998,  1052,
         1006,  1039,  1007,  1027,  1015,  1013,  1016,  1012, 18422,  1052,
         1006,  9353,  1604,  1038,  1604,  1039,  1007,  1012,   102])"
276,1,"['probability', 'events', 'outcomes']", Exercises,seg_43,"3.13 in exercise 2.12 we computed the probability of a “dream draw” in the uefa playoffs lottery by counting outcomes. recall that there were ten teams in the lottery, five considered “strong” and five considered “weak.” introduce events di, “the ith pair drawn is a dream combination,” where a “dream combination” is a pair of a strong team with a weak team, and i = 1, . . . , 5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  2410,  1999,  6912,  1016,  1012,  2260,  2057,
        24806,  1996,  9723,  1997,  1037,  1523,  3959,  4009,  1524,  1999,
         1996,  6663,  7555, 15213,  2011, 10320, 13105,  1012,  9131,  2008,
         2045,  2020,  2702,  2780,  1999,  1996, 15213,  1010,  2274,  2641,
         1523,  2844,  1524,  1998,  2274,  2641,  1523,  5410,  1012,  1524,
         8970,  2824,  4487,  1010,  1523,  1996,  2009,  2232,  3940,  4567,
         2003,  1037,  3959,  5257,  1010,  1524,  2073,  1037,  1523,  3959,
         5257,  1524,  2003,  1037,  3940,  1997,  1037,  2844,  2136,  2007,
         1037,  5410,  2136,  1010,  1998,  1045,  1027,  1015,  1010,  1012,
         1012,  1012,  1010,  1019,  1012,   102])"
277,1,['probability'], Exercises,seg_43,d. continue the procedure to obtain the probability of a “dream draw”:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1040, 1012, 3613, 1996, 7709, 2000, 6855, 1996, 9723, 1997, 1037,
        1523, 3959, 4009, 1524, 1024,  102])"
278,1,['event'], Exercises,seg_43,"3.14 recall the monty hall problem from section 1.3. let r be the event “the prize is behind the door you chose initially,” and w the event “you win the prize by switching doors.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  2403,  9131,  1996, 18446,  2534,  3291,  2013,
         2930,  1015,  1012,  1017,  1012,  2292,  1054,  2022,  1996,  2724,
         1523,  1996,  3396,  2003,  2369,  1996,  2341,  2017,  4900,  3322,
         1010,  1524,  1998,  1059,  1996,  2724,  1523,  2017,  2663,  1996,
         3396,  2011, 11991,  4303,  1012,  1524,   102])"
279,1,"['probability', 'law of total probability', 'total probability']", Exercises,seg_43,b. compute p(w ) using the law of total probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1052,  1006,  1059,  1007,  2478,  1996,
         2375,  1997,  2561,  9723,  1012,   102])"
280,1,"['independent events', 'events', 'independent']", Exercises,seg_43,"3.15 two independent events a and b are given, and p(b |a ∪ b) = 2/3, p(a |b) = 1/2. what is p(b)?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1017, 1012, 2321, 2048, 2981, 2824, 1037, 1998, 1038, 2024, 2445,
        1010, 1998, 1052, 1006, 1038, 1064, 1037, 1605, 1038, 1007, 1027, 1016,
        1013, 1017, 1010, 1052, 1006, 1037, 1064, 1038, 1007, 1027, 1015, 1013,
        1016, 1012, 2054, 2003, 1052, 1006, 1038, 1007, 1029,  102])"
281,1,"['event', 'test']", Exercises,seg_43,3.16 you are diagnosed with an uncommon disease. you know that there only is a 1% chance of getting it. use the letter d for the event “you have the disease” and t for “the test says so.” it is known that the test is imperfect: p(t |d) = 0.98 and p(t c |dc) = 0.95.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  2385,  2017,  2024, 11441,  2007,  2019, 13191,
         4295,  1012,  2017,  2113,  2008,  2045,  2069,  2003,  1037,  1015,
         1003,  3382,  1997,  2893,  2009,  1012,  2224,  1996,  3661,  1040,
         2005,  1996,  2724,  1523,  2017,  2031,  1996,  4295,  1524,  1998,
         1056,  2005,  1523,  1996,  3231,  2758,  2061,  1012,  1524,  2009,
         2003,  2124,  2008,  1996,  3231,  2003, 29238,  1024,  1052,  1006,
         1056,  1064,  1040,  1007,  1027,  1014,  1012,  5818,  1998,  1052,
         1006,  1056,  1039,  1064,  5887,  1007,  1027,  1014,  1012,  5345,
         1012,   102])"
282,1,"['probability', 'test']", Exercises,seg_43,"a. given that you test positive, what is the probability that you really have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2445, 2008, 2017, 3231, 3893, 1010, 2054, 2003, 1996,
        9723, 2008, 2017, 2428, 2031,  102])"
283,1,"['independent', 'test']", Exercises,seg_43,b. you obtain a second opinion: an independent repetition of the test. you,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2017,  6855,  1037,  2117,  5448,  1024,  2019,
         2981, 23318,  1997,  1996,  3231,  1012,  2017,   102])"
284,1,['probability'], Exercises,seg_43,"test positive again. given this, what is the probability that you really have the disease?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 3231, 3893, 2153, 1012, 2445, 2023, 1010, 2054, 2003, 1996, 9723,
        2008, 2017, 2428, 2031, 1996, 4295, 1029,  102])"
285,1,"['probability', 'event', 'outcome', 'independent']", Exercises,seg_43,"3.17 you and i play a tennis match. it is deuce, which means if you win the next two rallies, you win the game; if i win both rallies, i win the game; if we each win one rally, it is deuce again. suppose the outcome of a rally is independent of other rallies, and you win a rally with probability p. let w be the event “you win the game,” g “the game ends after the next two rallies,” and d “it becomes deuce again.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1017,  1012,  2459,  2017,  1998,  1045,  2377,  1037,  5093,
         2674,  1012,  2009,  2003,  2139, 18796,  1010,  2029,  2965,  2065,
         2017,  2663,  1996,  2279,  2048, 22867,  1010,  2017,  2663,  1996,
         2208,  1025,  2065,  1045,  2663,  2119, 22867,  1010,  1045,  2663,
         1996,  2208,  1025,  2065,  2057,  2169,  2663,  2028,  8320,  1010,
         2009,  2003,  2139, 18796,  2153,  1012,  6814,  1996,  9560,  1997,
         1037,  8320,  2003,  2981,  1997,  2060, 22867,  1010,  1998,  2017,
         2663,  1037,  8320,  2007,  9723,  1052,  1012,  2292,  1059,  2022,
         1996,  2724,  1523,  2017,  2663,  1996,  2208,  1010,  1524,  1043,
         1523,  1996,  2208,  4515,  2044,  1996,  2279,  2048, 22867,  1010,
         1524,  1998,  1040,  1523,  2009,  4150,  2139, 18796,  2153,  1012,
         1524,   102])"
286,0,[], Exercises,seg_43,c. explain why the answers are the same.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1039, 1012, 4863, 2339, 1996, 6998, 2024, 1996, 2168, 1012,  102])"
287,1,['events'], Exercises,seg_43,3.18 suppose a and b are events with 0 < p(a) < 1 and 0 < p(b) < 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1017, 1012, 2324, 6814, 1037, 1998, 1038, 2024, 2824, 2007, 1014,
        1026, 1052, 1006, 1037, 1007, 1026, 1015, 1998, 1014, 1026, 1052, 1006,
        1038, 1007, 1026, 1015, 1012,  102])"
288,1,"['disjoint', 'independent']", Exercises,seg_43,"a. if a and b are disjoint, can they be independent?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2065,  1037,  1998,  1038,  2024,  4487,  2015,
         5558, 18447,  1010,  2064,  2027,  2022,  2981,  1029,   102])"
289,1,"['disjoint', 'independent']", Exercises,seg_43,"b. if a and b are independent, can they be disjoint?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2065,  1037,  1998,  1038,  2024,  2981,  1010,
         2064,  2027,  2022,  4487,  2015,  5558, 18447,  1029,   102])"
290,1,['independent'], Exercises,seg_43,"c. if a ⊂ b, can a and b be independent?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2065, 1037, 1610, 1038, 1010, 2064, 1037, 1998, 1038,
        2022, 2981, 1029,  102])"
291,1,['independent'], Exercises,seg_43,"d. if a and b are independent, can a and a ∪ b be independent?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1040, 1012, 2065, 1037, 1998, 1038, 2024, 2981, 1010, 2064, 1037,
        1998, 1037, 1605, 1038, 2022, 2981, 1029,  102])"
292,1,"['probability function', 'associated', 'bernoulli', 'events', 'probabilistic', 'geometric', 'binomial', 'discrete', 'geometric random variables', 'function', 'probability', 'random variables', 'sample space', 'discrete random variables', 'sample', 'random', 'experiment', 'variables']", Discrete random variables,seg_45,"the sample space associated with an experiment, together with a probability function defined on all its events, is a complete probabilistic description of that experiment. often we are interested only in certain features of this description. we focus on these features using random variables . in this chapter we discuss discrete random variables, and in the next we will consider continuous random variables. we introduce the bernoulli, binomial, and geometric random variables.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([16246,  6721, 10857])","tensor([  101,  1996,  7099,  2686,  3378,  2007,  2019,  7551,  1010,  2362,
         2007,  1037,  9723,  3853,  4225,  2006,  2035,  2049,  2824,  1010,
         2003,  1037,  3143,  4013,  3676, 27965,  4588,  6412,  1997,  2008,
         7551,  1012,  2411,  2057,  2024,  4699,  2069,  1999,  3056,  2838,
         1997,  2023,  6412,  1012,  2057,  3579,  2006,  2122,  2838,  2478,
         6721, 10857,  1012,  1999,  2023,  3127,  2057,  6848, 16246,  6721,
        10857,  1010,  1998,  1999,  1996,  2279,  2057,  2097,  5136,  7142,
         6721, 10857,  1012,  2057,  8970,  1996, 16595,  7140,  6894,  1010,
         8026, 20936,  2389,  1010,  1998, 14965,  6721, 10857,  1012,   102])"
293,1,"['sample', 'sample space', 'independent']", Random variables,seg_47,"suppose we are playing the board game “snakes and ladders,” where the moves are determined by the sum of two independent throws with a die. an obvious choice of the sample space is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  6814,  2057,  2024,  2652,  1996,  2604,  2208,  1523, 12971,
         1998, 10535,  2015,  1010,  1524,  2073,  1996,  5829,  2024,  4340,
         2011,  1996,  7680,  1997,  2048,  2981, 11618,  2007,  1037,  3280,
         1012,  2019,  5793,  3601,  1997,  1996,  7099,  2686,  2003,   102])"
294,1,"['outcomes', 'function']", Random variables,seg_47,"however, as players of the game, we are only interested in the sum of the outcomes of the two throws, i.e., in the value of the function s : ω → r, given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2174,  1010,  2004,  2867,  1997,  1996,  2208,  1010,  2057,
         2024,  2069,  4699,  1999,  1996,  7680,  1997,  1996, 13105,  1997,
         1996,  2048, 11618,  1010,  1045,  1012,  1041,  1012,  1010,  1999,
         1996,  3643,  1997,  1996,  3853,  1055,  1024,  1179,  1585,  1054,
         1010,  2445,  2011,   102])"
295,1,"['function', 'table', 'event', 'results']", Random variables,seg_47,"in table 4.1 the possible results of the first throw (top margin), those of the second throw (left margin), and the corresponding values of s (body) are given. note that the values of s are constant on lines perpendicular to the diagonal. we denote the event that the function s attains the value k by {s = k}, which is an abbreviation of “the subset of those ω = (ω1, ω2) ∈ ω for which s(ω1, ω2 ) = ω1 + ω2 = k,” i.e.,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1999,  2795,  1018,  1012,  1015,  1996,  2825,  3463,  1997,
         1996,  2034,  5466,  1006,  2327,  7785,  1007,  1010,  2216,  1997,
         1996,  2117,  5466,  1006,  2187,  7785,  1007,  1010,  1998,  1996,
         7978,  5300,  1997,  1055,  1006,  2303,  1007,  2024,  2445,  1012,
         3602,  2008,  1996,  5300,  1997,  1055,  2024,  5377,  2006,  3210,
        19581,  2000,  1996, 19754,  1012,  2057, 19090,  1996,  2724,  2008,
         1996,  3853,  1055, 18759,  2015,  1996,  3643,  1047,  2011,  1063,
         1055,  1027,  1047,  1065,  1010,  2029,  2003,  2019, 22498,  1997,
         1523,  1996, 16745,  1997,  2216,  1179,  1027,  1006,  1179,  2487,
         1010,  1179,  2475,  1007,  1596,  1179,  2005,  2029,  1055,  1006,
         1179,  2487,  1010,  1179,  2475,  1007,  1027,  1179,  2487,  1009,
         1179,  2475,  1027,  1047,  1010,  1524,  1045,  1012,  1041,  1012,
         1010,   102])"
296,1,"['outcomes', 'event']", Random variables,seg_47,quick exercise 4.1 list the outcomes in the event {s = 8}.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  4248,  6912,  1018,  1012,  1015,  2862,  1996, 13105,  1999,
         1996,  2724,  1063,  1055,  1027,  1022,  1065,  1012,   102])"
297,1,"['probability', 'probability of the event', 'event']", Random variables,seg_47,we denote the probability of the event {s = k} by,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2057, 19090,  1996,  9723,  1997,  1996,  2724,  1063,  1055,
         1027,  1047,  1065,  2011,   102])"
298,1,['probability'], Random variables,seg_47,"although formally we should write p({s = k}) instead of p(s = k). in our example, s attains only the values k = 2, 3, . . . , 12 with positive probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2348,  6246,  2057,  2323,  4339,  1052,  1006,  1063,  1055,
         1027,  1047,  1065,  1007,  2612,  1997,  1052,  1006,  1055,  1027,
         1047,  1007,  1012,  1999,  2256,  2742,  1010,  1055, 18759,  2015,
         2069,  1996,  5300,  1047,  1027,  1016,  1010,  1017,  1010,  1012,
         1012,  1012,  1010,  2260,  2007,  3893,  9723,  1012,   102])"
299,0,[], Random variables,seg_47,"for example, 1",tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([ 101, 2005, 2742, 1010, 1015,  102])"
300,0,[], Random variables,seg_47,because 13 is an “impossible outcome.”,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([ 101, 2138, 2410, 2003, 2019, 1523, 5263, 9560, 1012, 1524,  102])"
301,1,['table'], Random variables,seg_47,"quick exercise 4.2 use table 4.1 to determine p(s = k) for k = 4, 5, . . . , 12.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([ 101, 4248, 6912, 1018, 1012, 1016, 2224, 2795, 1018, 1012, 1015, 2000,
        5646, 1052, 1006, 1055, 1027, 1047, 1007, 2005, 1047, 1027, 1018, 1010,
        1019, 1010, 1012, 1012, 1012, 1010, 2260, 1012,  102])"
302,1,"['function', 'independent', 'case']", Random variables,seg_47,"now suppose that for some other game the moves are given by the maximum of two independent throws. in this case we are interested in the value of the function m : ω → r, given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2085,  6814,  2008,  2005,  2070,  2060,  2208,  1996,  5829,
         2024,  2445,  2011,  1996,  4555,  1997,  2048,  2981, 11618,  1012,
         1999,  2023,  2553,  2057,  2024,  4699,  1999,  1996,  3643,  1997,
         1996,  3853,  1049,  1024,  1179,  1585,  1054,  1010,  2445,  2011,
          102])"
303,1,"['discrete', 'table', 'functions', 'discrete random variables', 'random', 'results', 'random variables', 'variables']", Random variables,seg_47,"in table 4.2 the possible results of the first throw (top margin), those of the second throw (left margin), and the corresponding values of m (body) are given. the functions s and m are examples of what we call discrete random variables.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1999,  2795,  1018,  1012,  1016,  1996,  2825,  3463,  1997,
         1996,  2034,  5466,  1006,  2327,  7785,  1007,  1010,  2216,  1997,
         1996,  2117,  5466,  1006,  2187,  7785,  1007,  1010,  1998,  1996,
         7978,  5300,  1997,  1049,  1006,  2303,  1007,  2024,  2445,  1012,
         1996,  4972,  1055,  1998,  1049,  2024,  4973,  1997,  2054,  2057,
         2655, 16246,  6721, 10857,  1012,   102])"
304,1,"['function', 'discrete random variable', 'sample space', 'discrete', 'random variable', 'sample', 'random', 'variable']", Random variables,seg_47,"definition. let ω be a sample space. a discrete random variable is a function x : ω → r that takes on a finite number of values a1, a2, . . . , an or an infinite number of values a1, a2, . . . .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  6210,  1012,  2292,  1179,  2022,  1037,  7099,  2686,  1012,
         1037, 16246,  6721,  8023,  2003,  1037,  3853,  1060,  1024,  1179,
         1585,  1054,  2008,  3138,  2006,  1037, 10713,  2193,  1997,  5300,
        17350,  1010, 22441,  1010,  1012,  1012,  1012,  1010,  2019,  2030,
         2019, 10709,  2193,  1997,  5300, 17350,  1010, 22441,  1010,  1012,
         1012,  1012,  1012,   102])"
305,1,"['discrete random variable', 'discrete', 'sample space', 'probability', 'events', 'random variable', 'probabilities', 'sample', 'random', 'distribution', 'variable', 'probability distribution']", Random variables,seg_47,"in a way, a discrete random variable x “transforms” a sample space ω to a more “tangible” sample space ω̃, whose events are more directly related to what you are interested in. for instance, s transforms ω = {(1, 1), (1, 2), . . . , (1, 6), (2, 1), . . . , (6, 5), (6, 6)} to ω̃ = {2, . . . , 12}, and m transforms ω to ω̃ = {1, . . . , 6}. of course, there is a price to pay: one has to calculate the probabilities of x . or, to say things more formally, one has to determine the probability distribution of x , i.e., to describe how the probability mass is distributed over possible values of x .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  1999,  1037,  2126,  1010,  1037, 16246,  6721,  8023,  1060,
         1523, 21743,  1524,  1037,  7099,  2686,  1179,  2000,  1037,  2062,
         1523, 24600,  1524,  7099,  2686,  1179,  1010,  3005,  2824,  2024,
         2062,  3495,  3141,  2000,  2054,  2017,  2024,  4699,  1999,  1012,
         2005,  6013,  1010,  1055, 21743,  1179,  1027,  1063,  1006,  1015,
         1010,  1015,  1007,  1010,  1006,  1015,  1010,  1016,  1007,  1010,
         1012,  1012,  1012,  1010,  1006,  1015,  1010,  1020,  1007,  1010,
         1006,  1016,  1010,  1015,  1007,  1010,  1012,  1012,  1012,  1010,
         1006,  1020,  1010,  1019,  1007,  1010,  1006,  1020,  1010,  1020,
         1007,  1065,  2000,  1179,  1027,  1063,  1016,  1010,  1012,  1012,
         1012,  1010,  2260,  1065,  1010,  1998,  1049, 21743,  1179,  2000,
         1179,  1027,  1063,  1015,  1010,  1012,  1012,  1012,  1010,  1020,
         1065,  1012,  1997,  2607,  1010,  2045,  2003,  1037,  3976,  2000,
         3477,  1024,  2028,  2038,  2000, 18422,  1996,  4013,  3676, 14680,
         1997,  1060,  1012,  2030,  1010,  2000,  2360,  2477,  2062,  6246,
         1010,  2028,  2038,  2000,  5646,  1996,  9723,  4353,  1997,  1060,
         1010,  1045,  1012,  1041,  1012,  1010,  2000,  6235,  2129,  1996,
         9723,  3742,  2003,  5500,  2058,  2825,  5300,  1997,  1060,  1012,
          102])"
306,1,"['function', 'discrete random variable', 'sample space', 'discrete', 'probability', 'information', 'random variable', 'probabilities', 'sample', 'random', 'probability mass function', 'mass function', 'variable']", The probability distribution of a discrete random variable,seg_49,"once a discrete random variable x is introduced, the sample space ω is no longer important. it suffices to list the possible values of x and their corresponding probabilities. this information is contained in the probability mass function of x .",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  2320,  1037, 16246,  6721,  8023,  1060,  2003,  3107,  1010,
         1996,  7099,  2686,  1179,  2003,  2053,  2936,  2590,  1012,  2009,
        10514, 26989,  9623,  2000,  2862,  1996,  2825,  5300,  1997,  1060,
         1998,  2037,  7978,  4013,  3676, 14680,  1012,  2023,  2592,  2003,
         4838,  1999,  1996,  9723,  3742,  3853,  1997,  1060,  1012,   102])"
307,1,"['function', 'discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'probability mass function', 'mass function', 'variable']", The probability distribution of a discrete random variable,seg_49,"definition. the probability mass function p of a discrete random variable x is the function p : r → [0, 1], defined by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  6210,  1012,  1996,  9723,  3742,  3853,  1052,  1997,  1037,
        16246,  6721,  8023,  1060,  2003,  1996,  3853,  1052,  1024,  1054,
         1585,  1031,  1014,  1010,  1015,  1033,  1010,  4225,  2011,   102])"
308,1,"['discrete random variable', 'discrete', 'random variable', 'random', 'variable']", The probability distribution of a discrete random variable,seg_49,"if x is a discrete random variable that takes on the values a1, a2, . . ., then",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  2065,  1060,  2003,  1037, 16246,  6721,  8023,  2008,  3138,
         2006,  1996,  5300, 17350,  1010, 22441,  1010,  1012,  1012,  1012,
         1010,  2059,   102])"
309,1,"['function', 'probability', 'probability mass function', 'mass function']", The probability distribution of a discrete random variable,seg_49,as an example we give the probability mass function p of m .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([ 101, 2004, 2019, 2742, 2057, 2507, 1996, 9723, 3742, 3853, 1052, 1997,
        1049, 1012,  102])"
310,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", The probability distribution of a discrete random variable,seg_49,the distribution function of a random variable,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([ 101, 1996, 4353, 3853, 1997, 1037, 6721, 8023,  102])"
311,1,"['continuous', 'distribution', 'function', 'discrete', 'cumulative distribution function', 'probability', 'random variable', 'continuous random variables', 'random', 'random variables', 'probability mass function', 'mass function', 'distribution function', 'variables', 'variable']", The probability distribution of a discrete random variable,seg_49,"as we will see, so-called continuous random variables cannot be specified by giving a probability mass function. however, the distribution function of a random variable x (also known as the cumulative distribution function) allows us to treat discrete and continuous random variables in the same way.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  2004,  2057,  2097,  2156,  1010,  2061,  1011,  2170,  7142,
         6721, 10857,  3685,  2022,  9675,  2011,  3228,  1037,  9723,  3742,
         3853,  1012,  2174,  1010,  1996,  4353,  3853,  1997,  1037,  6721,
         8023,  1060,  1006,  2036,  2124,  2004,  1996, 23260,  4353,  3853,
         1007,  4473,  2149,  2000,  7438, 16246,  1998,  7142,  6721, 10857,
         1999,  1996,  2168,  2126,  1012,   102])"
312,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", The probability distribution of a discrete random variable,seg_49,"definition. the distribution function f of a random variable x is the function f : r → [0, 1], defined by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([ 101, 6210, 1012, 1996, 4353, 3853, 1042, 1997, 1037, 6721, 8023, 1060,
        2003, 1996, 3853, 1042, 1024, 1054, 1585, 1031, 1014, 1010, 1015, 1033,
        1010, 4225, 2011,  102])"
313,1,"['distribution', 'function', 'discrete random variable', 'discrete', 'probability', 'information', 'random variable', 'probabilistic', 'random', 'probability mass function', 'mass function', 'distribution function', 'variable']", The probability distribution of a discrete random variable,seg_49,"both the probability mass function and the distribution function of a discrete random variable x contain all the probabilistic information of x ; the probability distribution of x is determined by either of them. in fact, the distribution function f of a discrete random variable x can be expressed in terms of the probability mass function p of x and vice versa. if x attains values a1, a2, . . ., such that",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  2119,  1996,  9723,  3742,  3853,  1998,  1996,  4353,  3853,
         1997,  1037, 16246,  6721,  8023,  1060,  5383,  2035,  1996,  4013,
         3676, 27965,  4588,  2592,  1997,  1060,  1025,  1996,  9723,  4353,
         1997,  1060,  2003,  4340,  2011,  2593,  1997,  2068,  1012,  1999,
         2755,  1010,  1996,  4353,  3853,  1042,  1997,  1037, 16246,  6721,
         8023,  1060,  2064,  2022,  5228,  1999,  3408,  1997,  1996,  9723,
         3742,  3853,  1052,  1997,  1060,  1998,  3580, 18601,  1012,  2065,
         1060, 18759,  2015,  5300, 17350,  1010, 22441,  1010,  1012,  1012,
         1012,  1010,  2107,  2008,   102])"
314,1,"['function', 'discrete random variable', 'discrete', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", The probability distribution of a discrete random variable,seg_49,"we see that, for a discrete random variable x , the distribution function f jumps in each of the ai, and is constant between successive ai. the height of the jump at ai is p(ai); in this way p can be retrieved from f . for example, see figure 4.1, where p and f are displayed for the random variable m .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  2057,  2156,  2008,  1010,  2005,  1037, 16246,  6721,  8023,
         1060,  1010,  1996,  4353,  3853,  1042, 14523,  1999,  2169,  1997,
         1996,  9932,  1010,  1998,  2003,  5377,  2090, 11165,  9932,  1012,
         1996,  4578,  1997,  1996,  5376,  2012,  9932,  2003,  1052,  1006,
         9932,  1007,  1025,  1999,  2023,  2126,  1052,  2064,  2022,  5140,
         2013,  1042,  1012,  2005,  2742,  1010,  2156,  3275,  1018,  1012,
         1015,  1010,  2073,  1052,  1998,  1042,  2024,  6913,  2005,  1996,
         6721,  8023,  1049,  1012,   102])"
315,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", The probability distribution of a discrete random variable,seg_49,we end this section with three properties of the distribution function f of a random variable x :,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([ 101, 2057, 2203, 2023, 2930, 2007, 2093, 5144, 1997, 1996, 4353, 3853,
        1042, 1997, 1037, 6721, 8023, 1060, 1024,  102])"
316,1,['event'], The probability distribution of a discrete random variable,seg_49,consequence of the fact that a ≤ b implies that the event {x ≤ a} is contained in the event {x ≤ b}.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  9509,  1997,  1996,  2755,  2008,  1037,  1608,  1038, 12748,
         2008,  1996,  2724,  1063,  1060,  1608,  1037,  1065,  2003,  4838,
         1999,  1996,  2724,  1063,  1060,  1608,  1038,  1065,  1012,   102])"
317,1,"['function', 'probability', 'distribution', 'distribution function']", The probability distribution of a discrete random variable,seg_49,"2. since f (a) is a probability, the value of the distribution function is always",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([ 101, 1016, 1012, 2144, 1042, 1006, 1037, 1007, 2003, 1037, 9723, 1010,
        1996, 3643, 1997, 1996, 4353, 3853, 2003, 2467,  102])"
318,0,[], The probability distribution of a discrete random variable,seg_49,"between 0 and 1. moreover,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([ 101, 2090, 1014, 1998, 1015, 1012, 9308, 1010,  102])"
319,0,[], The probability distribution of a discrete random variable,seg_49,this is indicated in figure 4.1 by bullets. henceforth we will omit these bullets.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  2023,  2003,  5393,  1999,  3275,  1018,  1012,  1015,  2011,
        10432,  1012,  6516, 15628,  2057,  2097, 18168,  4183,  2122, 10432,
         1012,   102])"
320,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", The probability distribution of a discrete random variable,seg_49,"conversely, any function f satisfying 1, 2, and 3 is the distribution function of some random variable (see remarks 6.1 and 6.2).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101, 18868,  1010,  2151,  3853,  1042, 17087,  1015,  1010,  1016,
         1010,  1998,  1017,  2003,  1996,  4353,  3853,  1997,  2070,  6721,
         8023,  1006,  2156, 12629,  1020,  1012,  1015,  1998,  1020,  1012,
         1016,  1007,  1012,   102])"
321,1,"['discrete random variable', 'discrete', 'random variable', 'random', 'variable']", The probability distribution of a discrete random variable,seg_49,"quick exercise 4.3 let x be a discrete random variable, and let a be such that p(a) > 0. show that f (a) = p(x < a) + p(a).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  4248,  6912,  1018,  1012,  1017,  2292,  1060,  2022,  1037,
        16246,  6721,  8023,  1010,  1998,  2292,  1037,  2022,  2107,  2008,
         1052,  1006,  1037,  1007,  1028,  1014,  1012,  2265,  2008,  1042,
         1006,  1037,  1007,  1027,  1052,  1006,  1060,  1026,  1037,  1007,
         1009,  1052,  1006,  1037,  1007,  1012,   102])"
322,1,"['discrete', 'discrete random variables', 'random', 'random variables', 'variables']", The probability distribution of a discrete random variable,seg_49,there are many discrete random variables that arise in a natural way. we introduce three of them in the next two sections.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  9723,  4353,  1997,  1037, 16246,  6721,  8023])","tensor([  101,  2045,  2024,  2116, 16246,  6721, 10857,  2008, 13368,  1999,
         1037,  3019,  2126,  1012,  2057,  8970,  2093,  1997,  2068,  1999,
         1996,  2279,  2048,  5433,  1012,   102])"
323,1,"['bernoulli', 'outcomes', 'experiment', 'distribution', 'model', 'bernoulli distribution']", The Bernoulli and binomial distributions,seg_51,"the bernoulli distribution is used to model an experiment with only two possible outcomes, often referred to as “success” and “failure”, usually encoded as 1 and 0.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  1996, 16595,  7140,  6894,  4353,  2003,  2109,  2000,  2944,
         2019,  7551,  2007,  2069,  2048,  2825, 13105,  1010,  2411,  3615,
         2000,  2004,  1523,  3112,  1524,  1998,  1523,  4945,  1524,  1010,
         2788, 12359,  2004,  1015,  1998,  1014,  1012,   102])"
324,1,"['parameter', 'function', 'discrete random variable', 'discrete', 'bernoulli', 'probability', 'random variable', 'random', 'probability mass function', 'mass function', 'variable']", The Bernoulli and binomial distributions,seg_51,"definition. a discrete random variable x has a bernoulli distribution with parameter p, where 0 ≤ p ≤ 1, if its probability mass function is given by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  6210,  1012,  1037, 16246,  6721,  8023,  1060,  2038,  1037,
        16595,  7140,  6894,  4353,  2007, 16381,  1052,  1010,  2073,  1014,
         1608,  1052,  1608,  1015,  1010,  2065,  2049,  9723,  3742,  3853,
         2003,  2445,  2011,   102])"
325,1,['distribution'], The Bernoulli and binomial distributions,seg_51,we denote this distribution by ber(p).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2057, 19090,  2023,  4353,  2011,  2022,  2099,  1006,  1052,
         1007,  1012,   102])"
326,1,"['dependence', 'parameter', 'function', 'distribution', 'bernoulli', 'probability', 'probability mass function', 'mass function', 'bernoulli distribution']", The Bernoulli and binomial distributions,seg_51,note that we wrote px instead of p for the probability mass function of x . this was done to emphasize its dependence on x and to avoid possible confusion with the parameter p of the bernoulli distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  3602,  2008,  2057,  2626,  1052,  2595,  2612,  1997,  1052,
         2005,  1996,  9723,  3742,  3853,  1997,  1060,  1012,  2023,  2001,
         2589,  2000, 17902,  2049, 18642,  2006,  1060,  1998,  2000,  4468,
         2825,  6724,  2007,  1996, 16381,  1052,  1997,  1996, 16595,  7140,
         6894,  4353,  1012,   102])"
327,1,"['probability', 'random']", The Bernoulli and binomial distributions,seg_51,"consider the (fictitious) situation that you attend, completely unprepared, a multiple-choice exam. it consists of 10 questions, and each question has four alternatives (of which only one is correct). you will pass the exam if you answer six or more questions correctly. you decide to answer each of the questions in a random way, in such a way that the answer of one question is not affected by the answers of the others. what is the probability that you will pass?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  5136,  1996,  1006, 23577,  1007,  3663,  2008,  2017,  5463,
         1010,  3294,  4895, 28139, 19362,  2098,  1010,  1037,  3674,  1011,
         3601, 11360,  1012,  2009,  3774,  1997,  2184,  3980,  1010,  1998,
         2169,  3160,  2038,  2176, 15955,  1006,  1997,  2029,  2069,  2028,
         2003,  6149,  1007,  1012,  2017,  2097,  3413,  1996, 11360,  2065,
         2017,  3437,  2416,  2030,  2062,  3980, 11178,  1012,  2017,  5630,
         2000,  3437,  2169,  1997,  1996,  3980,  1999,  1037,  6721,  2126,
         1010,  1999,  2107,  1037,  2126,  2008,  1996,  3437,  1997,  2028,
         3160,  2003,  2025,  5360,  2011,  1996,  6998,  1997,  1996,  2500,
         1012,  2054,  2003,  1996,  9723,  2008,  2017,  2097,  3413,  1029,
          102])"
328,0,[], The Bernoulli and binomial distributions,seg_51,1 if the ith answer is correct,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 1015, 2065, 1996, 2009, 2232, 3437, 2003, 6149,  102])"
329,0,[], The Bernoulli and binomial distributions,seg_51,"ri = {0 if the ith answer is incorrect,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101, 15544,  1027,  1063,  1014,  2065,  1996,  2009,  2232,  3437,
         2003, 16542,  1010,   102])"
330,0,[], The Bernoulli and binomial distributions,seg_51,the number of correct answers x is given by,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 1996, 2193, 1997, 6149, 6998, 1060, 2003, 2445, 2011,  102])"
331,1,['probability'], The Bernoulli and binomial distributions,seg_51,quick exercise 4.4 calculate the probability that you answered the first question correctly and the second one incorrectly.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  4248,  6912,  1018,  1012,  1018, 18422,  1996,  9723,  2008,
         2017,  4660,  1996,  2034,  3160, 11178,  1998,  1996,  2117,  2028,
        19721,  1012,   102])"
332,1,"['events', 'independent', 'case']", The Bernoulli and binomial distributions,seg_51,"clearly, x attains only the values 0, 1, . . . , 10. let us first consider the case x = 0. since the answers to the different questions do not influence each other, we conclude that the events {r1 = a1}, . . . , {r10 = a10} are independent for every choice of the ai, where each ai is 0 or 1. we find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  4415,  1010,  1060, 18759,  2015,  2069,  1996,  5300,  1014,
         1010,  1015,  1010,  1012,  1012,  1012,  1010,  2184,  1012,  2292,
         2149,  2034,  5136,  1996,  2553,  1060,  1027,  1014,  1012,  2144,
         1996,  6998,  2000,  1996,  2367,  3980,  2079,  2025,  3747,  2169,
         2060,  1010,  2057, 16519,  2008,  1996,  2824,  1063,  1054,  2487,
         1027, 17350,  1065,  1010,  1012,  1012,  1012,  1010,  1063,  1054,
        10790,  1027, 17350,  2692,  1065,  2024,  2981,  2005,  2296,  3601,
         1997,  1996,  9932,  1010,  2073,  2169,  9932,  2003,  1014,  2030,
         1015,  1012,  2057,  2424,   102])"
333,1,['probability'], The Bernoulli and binomial distributions,seg_51,the probability that we have answered exactly one question correctly equals,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  1996,  9723,  2008,  2057,  2031,  4660,  3599,  2028,  3160,
        11178, 19635,   102])"
334,1,['probability'], The Bernoulli and binomial distributions,seg_51,"which is the probability that the answer is correct times the probability that the other nine answers are wrong, times the number of ways in which this can occur:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 2029, 2003, 1996, 9723, 2008, 1996, 3437, 2003, 6149, 2335, 1996,
        9723, 2008, 1996, 2060, 3157, 6998, 2024, 3308, 1010, 2335, 1996, 2193,
        1997, 3971, 1999, 2029, 2023, 2064, 5258, 1024,  102])"
335,1,['independence'], The Bernoulli and binomial distributions,seg_51,"in general we find for k = 0, 1, . . . , 10, again using independence, that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 1999, 2236, 2057, 2424, 2005, 1047, 1027, 1014, 1010, 1015, 1010,
        1012, 1012, 1012, 1010, 2184, 1010, 2153, 2478, 4336, 1010, 2008,  102])"
336,1,['probability'], The Bernoulli and binomial distributions,seg_51,"which is the probability that k questions were answered correctly times the probability that the other 10−k answers are wrong, times the number of ways c10,k this can occur.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2029,  2003,  1996,  9723,  2008,  1047,  3980,  2020,  4660,
        11178,  2335,  1996,  9723,  2008,  1996,  2060,  2184, 22543,  2243,
         6998,  2024,  3308,  1010,  2335,  1996,  2193,  1997,  3971, 27723,
         2692,  1010,  1047,  2023,  2064,  5258,  1012,   102])"
337,0,[], The Bernoulli and binomial distributions,seg_51,"so c10,k is the number of different ways in which one can choose k correct answers from the list of 10. we already have seen that c10,0 = 1, because there is only one way to do everything wrong; and that c10,1 = 10, because each of the 10 questions may have been answered correctly.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2061, 27723,  2692,  1010,  1047,  2003,  1996,  2193,  1997,
         2367,  3971,  1999,  2029,  2028,  2064,  5454,  1047,  6149,  6998,
         2013,  1996,  2862,  1997,  2184,  1012,  2057,  2525,  2031,  2464,
         2008, 27723,  2692,  1010,  1014,  1027,  1015,  1010,  2138,  2045,
         2003,  2069,  2028,  2126,  2000,  2079,  2673,  3308,  1025,  1998,
         2008, 27723,  2692,  1010,  1015,  1027,  2184,  1010,  2138,  2169,
         1997,  1996,  2184,  3980,  2089,  2031,  2042,  4660, 11178,  1012,
          102])"
338,0,['n'], The Bernoulli and binomial distributions,seg_51,"more generally, if we have to choose k different objects out of an ordered list of n objects, and the order in which we pick the objects matters, then for the first object you have n possibilities, and no matter which object you pick, for the second one there are n − 1 possibilities. for the third there are n − 2 possibilities, and so on, with n− (k − 1) possibilities for the kth. so there are",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2062,  3227,  1010,  2065,  2057,  2031,  2000,  5454,  1047,
         2367,  5200,  2041,  1997,  2019,  3641,  2862,  1997,  1050,  5200,
         1010,  1998,  1996,  2344,  1999,  2029,  2057,  4060,  1996,  5200,
         5609,  1010,  2059,  2005,  1996,  2034,  4874,  2017,  2031,  1050,
        12020,  1010,  1998,  2053,  3043,  2029,  4874,  2017,  4060,  1010,
         2005,  1996,  2117,  2028,  2045,  2024,  1050,  1597,  1015, 12020,
         1012,  2005,  1996,  2353,  2045,  2024,  1050,  1597,  1016, 12020,
         1010,  1998,  2061,  2006,  1010,  2007,  1050, 22543,  1006,  1047,
         1597,  1015,  1007, 12020,  2005,  1996,  1047,  2705,  1012,  2061,
         2045,  2024,   102])"
339,0,[], The Bernoulli and binomial distributions,seg_51,ways to choose the k objects.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 3971, 2000, 5454, 1996, 1047, 5200, 1012,  102])"
340,1,['permutations'], The Bernoulli and binomial distributions,seg_51,"in how many ways can we choose three questions? when the order matters, there are 10 · 9 · 8 ways. however, the order in which these three questions are selected does not matter: to answer questions 2, 5, and 8 correctly is the same as answering questions 8, 2, and 5 correctly, and so on. the triplet {2, 5, 8} can be chosen in 3 · 2 · 1 different orders, all with the same result. there are six permutations of the numbers 2, 5, and 8 (see page 14).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  1999,  2129,  2116,  3971,  2064,  2057,  5454,  2093,  3980,
         1029,  2043,  1996,  2344,  5609,  1010,  2045,  2024,  2184,  1087,
         1023,  1087,  1022,  3971,  1012,  2174,  1010,  1996,  2344,  1999,
         2029,  2122,  2093,  3980,  2024,  3479,  2515,  2025,  3043,  1024,
         2000,  3437,  3980,  1016,  1010,  1019,  1010,  1998,  1022, 11178,
         2003,  1996,  2168,  2004, 10739,  3980,  1022,  1010,  1016,  1010,
         1998,  1019, 11178,  1010,  1998,  2061,  2006,  1012,  1996,  6420,
         2102,  1063,  1016,  1010,  1019,  1010,  1022,  1065,  2064,  2022,
         4217,  1999,  1017,  1087,  1016,  1087,  1015,  2367,  4449,  1010,
         2035,  2007,  1996,  2168,  2765,  1012,  2045,  2024,  2416,  2566,
        28120, 10708,  1997,  1996,  3616,  1016,  1010,  1019,  1010,  1998,
         1022,  1006,  2156,  3931,  2403,  1007,  1012,   102])"
341,0,[], The Bernoulli and binomial distributions,seg_51,"thus, compensating for this six-fold overcount, the number c10,3 of ways to correctly answer 3 questions out of 10 becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2947,  1010,  4012, 11837, 16846,  2075,  2005,  2023,  2416,
         1011, 10671,  2058,  3597, 16671,  1010,  1996,  2193, 27723,  2692,
         1010,  1017,  1997,  3971,  2000, 11178,  3437,  1017,  3980,  2041,
         1997,  2184,  4150,   102])"
342,0,['n'], The Bernoulli and binomial distributions,seg_51,"note that this is equal to n! ,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 3602, 2008, 2023, 2003, 5020, 2000, 1050,  999, 1010,  102])"
343,0,['n'], The Bernoulli and binomial distributions,seg_51,which is usually denoted by (n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2029,  2003,  2788, 19537,  2011,  1006,  1050,   102])"
344,0,[], The Bernoulli and binomial distributions,seg_51,"k). moreover, in accordance with",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  1047,  1007,  1012,  9308,  1010,  1999, 10388,  2007,   102])"
345,0,[], The Bernoulli and binomial distributions,seg_51,quick exercise 4.5 show that (,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 4248, 6912, 1018, 1012, 1019, 2265, 2008, 1006,  102])"
346,1,['probability'], The Bernoulli and binomial distributions,seg_51,"since p(x ≥ 6) = p(x = 6) + · · · + p(x = 10), it is now an easy (but tedious) exercise to determine the probability that you will pass. one finds that p(x ≥ 6) = 0.0197. it pays to study, doesn’t it?!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2144,  1052,  1006,  1060,  1609,  1020,  1007,  1027,  1052,
         1006,  1060,  1027,  1020,  1007,  1009,  1087,  1087,  1087,  1009,
         1052,  1006,  1060,  1027,  2184,  1007,  1010,  2009,  2003,  2085,
         2019,  3733,  1006,  2021,  6945,  6313,  1007,  6912,  2000,  5646,
         1996,  9723,  2008,  2017,  2097,  3413,  1012,  2028,  4858,  2008,
         1052,  1006,  1060,  1609,  1020,  1007,  1027,  1014,  1012,  5890,
         2683,  2581,  1012,  2009, 12778,  2000,  2817,  1010,  2987,  1521,
         1056,  2009,  1029,   999,   102])"
347,1,"['random variable', 'random', 'distribution', 'parameters', 'binomial', 'variable', 'binomial distribution']", The Bernoulli and binomial distributions,seg_51,the preceding random variable x is an example of a random variable with a binomial distribution with parameters n = 10 and p = 1/4.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  1996, 11003,  6721,  8023,  1060,  2003,  2019,  2742,  1997,
         1037,  6721,  8023,  2007,  1037,  8026, 20936,  2389,  4353,  2007,
        11709,  1050,  1027,  2184,  1998,  1052,  1027,  1015,  1013,  1018,
         1012,   102])"
348,1,"['function', 'discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'probability mass function', 'mass function', 'parameters', 'binomial', 'variable']", The Bernoulli and binomial distributions,seg_51,"definition. a discrete random variable x has a binomial distribution with parameters n and p, where n = 1, 2, . . . and 0 ≤ p ≤ 1, if its probability mass function is given by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  6210,  1012,  1037, 16246,  6721,  8023,  1060,  2038,  1037,
         8026, 20936,  2389,  4353,  2007, 11709,  1050,  1998,  1052,  1010,
         2073,  1050,  1027,  1015,  1010,  1016,  1010,  1012,  1012,  1012,
         1998,  1014,  1608,  1052,  1608,  1015,  1010,  2065,  2049,  9723,
         3742,  3853,  2003,  2445,  2011,   102])"
349,1,['distribution'], The Bernoulli and binomial distributions,seg_51,"we denote this distribution by bin(n, p).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  2057, 19090,  2023,  4353,  2011,  8026,  1006,  1050,  1010,
         1052,  1007,  1012,   102])"
350,1,"['function', 'distribution', 'probability', 'probability mass function', 'mass function', 'distribution function']", The Bernoulli and binomial distributions,seg_51,"figure 4.2 shows the probability mass function px and distribution function fx of a bin(10, 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([  101,  3275,  1018,  1012,  1016,  3065,  1996,  9723,  3742,  3853,
         1052,  2595,  1998,  4353,  3853, 23292,  1997,  1037,  8026,  1006,
         2184,  1010,  1015,   102])"
351,1,"['random', 'random variable', 'variable']", The Bernoulli and binomial distributions,seg_51,4 ) distributed random variable.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 16595,  7140,  6894,  1998,  8026, 20936,  2389, 20611])","tensor([ 101, 1018, 1007, 5500, 6721, 8023, 1012,  102])"
352,1,['moment'], The geometric distribution,seg_53,"in 1986, weinberg and gladen [38] investigated the number of menstrual cycles it took women to become pregnant, measured from the moment they had",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  1999,  3069,  1010, 11417, 11144,  1998,  5580,  2368,  1031,
         4229,  1033, 10847,  1996,  2193,  1997,  2273,  3367,  6820,  2389,
        12709,  2009,  2165,  2308,  2000,  2468,  6875,  1010,  7594,  2013,
         1996,  2617,  2027,  2018,   102])"
353,1,"['random variable', 'random', 'model', 'variable']", The geometric distribution,seg_53,decided to become pregnant. we model the number of cycles up to pregnancy by a random variable x .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  2787,  2000,  2468,  6875,  1012,  2057,  2944,  1996,  2193,
         1997, 12709,  2039,  2000, 10032,  2011,  1037,  6721,  8023,  1060,
         1012,   102])"
354,1,"['probability', 'independence', 'independent']", The geometric distribution,seg_53,"assume that the probability that a woman becomes pregnant during a particular cycle is equal to p, for some p with 0 < p ≤ 1, independent of the previous cycles. then clearly p(x = 1) = p. due to the independence of consecutive cycles, one finds for k = 1, 2, . . . that",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  7868,  2008,  1996,  9723,  2008,  1037,  2450,  4150,  6875,
         2076,  1037,  3327,  5402,  2003,  5020,  2000,  1052,  1010,  2005,
         2070,  1052,  2007,  1014,  1026,  1052,  1608,  1015,  1010,  2981,
         1997,  1996,  3025, 12709,  1012,  2059,  4415,  1052,  1006,  1060,
         1027,  1015,  1007,  1027,  1052,  1012,  2349,  2000,  1996,  4336,
         1997,  5486, 12709,  1010,  2028,  4858,  2005,  1047,  1027,  1015,
         1010,  1016,  1010,  1012,  1012,  1012,  2008,   102])"
355,1,"['parameter', 'geometric distribution', 'random variable', 'random', 'distribution', 'geometric', 'variable']", The geometric distribution,seg_53,this random variable x is an example of a random variable with a geometric distribution with parameter p.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1.,
        0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  2023,  6721,  8023,  1060,  2003,  2019,  2742,  1997,  1037,
         6721,  8023,  2007,  1037, 14965,  4353,  2007, 16381,  1052,  1012,
          102])"
356,1,"['parameter', 'function', 'discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'probability mass function', 'mass function', 'geometric', 'variable']", The geometric distribution,seg_53,"definition. a discrete random variable x has a geometric distribution with parameter p, where 0 < p ≤ 1, if its probability mass function is given by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  6210,  1012,  1037, 16246,  6721,  8023,  1060,  2038,  1037,
        14965,  4353,  2007, 16381,  1052,  1010,  2073,  1014,  1026,  1052,
         1608,  1015,  1010,  2065,  2049,  9723,  3742,  3853,  2003,  2445,
         2011,   102])"
357,1,['distribution'], The geometric distribution,seg_53,we denote this distribution by geo(p).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  2057, 19090,  2023,  4353,  2011, 20248,  1006,  1052,  1007,
         1012,   102])"
358,1,"['function', 'distribution', 'probability', 'probability mass function', 'mass function', 'distribution function']", The geometric distribution,seg_53,figure 4.3 shows the probability mass function px and distribution function fx of a geo(1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  3275,  1018,  1012,  1017,  3065,  1996,  9723,  3742,  3853,
         1052,  2595,  1998,  4353,  3853, 23292,  1997,  1037, 20248,  1006,
         1015,   102])"
359,1,"['random', 'random variable', 'variable']", The geometric distribution,seg_53,4 ) distributed random variable.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([ 101, 1018, 1007, 5500, 6721, 8023, 1012,  102])"
360,1,['distribution'], The geometric distribution,seg_53,"quick exercise 4.6 let x have a geo(p) distribution. for n ≥ 0, show that p(x > n) = (1 − p)n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  4248,  6912,  1018,  1012,  1020,  2292,  1060,  2031,  1037,
        20248,  1006,  1052,  1007,  4353,  1012,  2005,  1050,  1609,  1014,
         1010,  2265,  2008,  1052,  1006,  1060,  1028,  1050,  1007,  1027,
         1006,  1015,  1597,  1052,  1007,  1050,  1012,   102])"
361,1,"['geometric distribution', 'distribution', 'geometric']", The geometric distribution,seg_53,"the geometric distribution has a remarkable property, which is known as the memoryless property.1 for n, k = 0, 1, 2, . . . one has",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 14965,  4353])","tensor([  101,  1996, 14965,  4353,  2038,  1037,  9487,  3200,  1010,  2029,
         2003,  2124,  2004,  1996,  3638,  3238,  3200,  1012,  1015,  2005,
         1050,  1010,  1047,  1027,  1014,  1010,  1015,  1010,  1016,  1010,
         1012,  1012,  1012,  2028,  2038,   102])"
362,0,[], The geometric distribution,seg_53,we can derive this equality using the result from quick exercise 4.6:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 14965,  4353])","tensor([  101,  2057,  2064, 18547,  2023,  9945,  2478,  1996,  2765,  2013,
         4248,  6912,  1018,  1012,  1020,  1024,   102])"
363,1,['table'], Solutions to the quick exercises,seg_55,"4.1 from table 4.1, one finds that",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1018, 1012, 1015, 2013, 2795, 1018, 1012, 1015, 1010, 2028, 4858,
        2008,  102])"
364,1,['table'], Solutions to the quick exercises,seg_55,"4.2 from table 4.1, one determines the following table.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1018,  1012,  1016,  2013,  2795,  1018,  1012,  1015,  1010,
         2028, 16463,  1996,  2206,  2795,  1012,   102])"
365,0,[], Solutions to the quick exercises,seg_55,not very interestingly: this also holds if p(a) = 0.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2025, 2200, 5875, 2135, 1024, 2023, 2036, 4324, 2065, 1052, 1006,
        1037, 1007, 1027, 1014, 1012,  102])"
366,1,"['probability', 'independence']", Solutions to the quick exercises,seg_55,"4.4 the probability that you answered the first question correctly and the second one incorrectly is given by p(r1 = 1, r2 = 0). due to independence,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1018,  1012,  1018,  1996,  9723,  2008,  2017,  4660,  1996,
         2034,  3160, 11178,  1998,  1996,  2117,  2028, 19721,  2003,  2445,
         2011,  1052,  1006,  1054,  2487,  1027,  1015,  1010,  1054,  2475,
         1027,  1014,  1007,  1012,  2349,  2000,  4336,  1010,   102])"
367,0,[], Solutions to the quick exercises,seg_55,4.5 rewriting yields,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1018,  1012,  1019,  2128, 18560, 16189,   102])"
368,1,"['probability', 'success']", Solutions to the quick exercises,seg_55,"4.6 there are two ways to show that p(x > n) = (1 − p)n. the easiest way is to realize that p(x > n) is the probability that we had “no success in the first n trials,” which clearly equals (1 − p)n. a more involved way is by calculation:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1018,  1012,  1020,  2045,  2024,  2048,  3971,  2000,  2265,
         2008,  1052,  1006,  1060,  1028,  1050,  1007,  1027,  1006,  1015,
         1597,  1052,  1007,  1050,  1012,  1996, 25551,  2126,  2003,  2000,
         5382,  2008,  1052,  1006,  1060,  1028,  1050,  1007,  2003,  1996,
         9723,  2008,  2057,  2018,  1523,  2053,  3112,  1999,  1996,  2034,
         1050,  7012,  1010,  1524,  2029,  4415, 19635,  1006,  1015,  1597,
         1052,  1007,  1050,  1012,  1037,  2062,  2920,  2126,  2003,  2011,
        17208,  1024,   102])"
369,0,[], Solutions to the quick exercises,seg_55,if we recall from calculus that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2065,  2057,  9131,  2013, 19276,  2008,   102])"
370,0,[], Solutions to the quick exercises,seg_55,the answer follows immediately.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1996, 3437, 4076, 3202, 1012,  102])"
371,1,['independent'], Exercises,seg_57,"4.1 let z represent the number of times a 6 appeared in two independent throws of a die, and let s and m be as in section 4.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  1015,  2292,  1062,  5050,  1996,  2193,  1997,
         2335,  1037,  1020,  2596,  1999,  2048,  2981, 11618,  1997,  1037,
         3280,  1010,  1998,  2292,  1055,  1998,  1049,  2022,  2004,  1999,
         2930,  1018,  1012,  1015,  1012,   102])"
372,1,"['probability', 'probability distribution', 'distribution']", Exercises,seg_57,"a. describe the probability distribution of z, by giving either the probability",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 6235, 1996, 9723, 4353, 1997, 1062, 1010, 2011, 3228,
        2593, 1996, 9723,  102])"
373,1,"['function', 'distribution', 'distribution function', 'parameters']", Exercises,seg_57,"mass function pz of z or the distribution function fz of z. what type of distribution does z have, and what are the values of its parameters?",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  3742,  3853,  1052,  2480,  1997,  1062,  2030,  1996,  4353,
         3853,  1042,  2480,  1997,  1062,  1012,  2054,  2828,  1997,  4353,
         2515,  1062,  2031,  1010,  1998,  2054,  2024,  1996,  5300,  1997,
         2049, 11709,  1029,   102])"
374,1,"['events', 'outcomes']", Exercises,seg_57,"b. list the outcomes in the events {m = 2, z = 0}, {s = 5, z = 1}, and",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2862,  1996, 13105,  1999,  1996,  2824,  1063,
         1049,  1027,  1016,  1010,  1062,  1027,  1014,  1065,  1010,  1063,
         1055,  1027,  1019,  1010,  1062,  1027,  1015,  1065,  1010,  1998,
          102])"
375,1,['probabilities'], Exercises,seg_57,"{s = 8, z = 1}. what are their probabilities?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1063,  1055,  1027,  1022,  1010,  1062,  1027,  1015,  1065,
         1012,  2054,  2024,  2037,  4013,  3676, 14680,  1029,   102])"
376,1,"['events', 'independent']", Exercises,seg_57,c. determine whether the events {m = 2} and {z = 0} are independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 5646, 3251, 1996, 2824, 1063, 1049, 1027, 1016, 1065,
        1998, 1063, 1062, 1027, 1014, 1065, 2024, 2981, 1012,  102])"
377,1,"['function', 'discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'probability mass function', 'mass function', 'variable']", Exercises,seg_57,4.2 let x be a discrete random variable with probability mass function p given by:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  1016,  2292,  1060,  2022,  1037, 16246,  6721,
         8023,  2007,  9723,  3742,  3853,  1052,  2445,  2011,  1024,   102])"
378,1,"['random', 'random variable', 'variable']", Exercises,seg_57,"a. let the random variable y be defined by y = x2, i.e., if x = 2, then",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2292, 1996, 6721, 8023, 1061, 2022, 4225, 2011, 1061,
        1027, 1060, 2475, 1010, 1045, 1012, 1041, 1012, 1010, 2065, 1060, 1027,
        1016, 1010, 2059,  102])"
379,1,"['function', 'probability', 'probability mass function', 'mass function']", Exercises,seg_57,y = 4. calculate the probability mass function of y .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1061,  1027,  1018,  1012, 18422,  1996,  9723,  3742,  3853,
         1997,  1061,  1012,   102])"
380,1,"['functions', 'distribution']", Exercises,seg_57,"b. calculate the value of the distribution functions of x and y in a = 1,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 18422,  1996,  3643,  1997,  1996,  4353,  4972,
         1997,  1060,  1998,  1061,  1999,  1037,  1027,  1015,  1010,   102])"
381,1,"['function', 'discrete random variable', 'discrete', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Exercises,seg_57,4.3 suppose that the distribution function of a discrete random variable x is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1018,  1012,  1017,  6814,  2008,  1996,  4353,  3853,  1997,
         1037, 16246,  6721,  8023,  1060,  2003,  2445,  2011,   102])"
382,1,"['function', 'probability', 'probability mass function', 'mass function']", Exercises,seg_57,determine the probability mass function of x .,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 5646, 1996, 9723, 3742, 3853, 1997, 1060, 1012,  102])"
383,1,"['tails', 'probability']", Exercises,seg_57,"4.4 you toss n coins, each showing heads with probability p, independently of the other tosses. each coin that shows tails is tossed again. let x be the total number of heads.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  1018,  2017, 10055,  1050,  7824,  1010,  2169,
         4760,  4641,  2007,  9723,  1052,  1010,  9174,  1997,  1996,  2060,
        10055,  2229,  1012,  2169,  9226,  2008,  3065, 17448,  2003,  7463,
         2153,  1012,  2292,  1060,  2022,  1996,  2561,  2193,  1997,  4641,
         1012,   102])"
384,1,['distribution'], Exercises,seg_57,a. what type of distribution does x have? specify its parameter(s).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2828,  1997,  4353,  2515,  1060,  2031,
         1029, 20648,  2049, 16381,  1006,  1055,  1007,  1012,   102])"
385,1,"['function', 'probability', 'probability mass function', 'mass function']", Exercises,seg_57,b. what is the probability mass function of the total number of heads x?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2054, 2003, 1996, 9723, 3742, 3853, 1997, 1996, 2561,
        2193, 1997, 4641, 1060, 1029,  102])"
386,1,"['function', 'random variable', 'random', 'results', 'distribution', 'distribution function', 'variable']", Exercises,seg_57,"4.5 a fair die is thrown until the sum of the results of the throws exceeds 6. the random variable x is the number of throws needed for this. let f be the distribution function of x . determine f (1), f (2), and f (7).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  1019,  1037,  4189,  3280,  2003,  6908,  2127,
         1996,  7680,  1997,  1996,  3463,  1997,  1996, 11618, 23651,  1020,
         1012,  1996,  6721,  8023,  1060,  2003,  1996,  2193,  1997, 11618,
         2734,  2005,  2023,  1012,  2292,  1042,  2022,  1996,  4353,  3853,
         1997,  1060,  1012,  5646,  1042,  1006,  1015,  1007,  1010,  1042,
         1006,  1016,  1007,  1010,  1998,  1042,  1006,  1021,  1007,  1012,
          102])"
387,0,[], Exercises,seg_57,4.6 three times we randomly draw a number from the following numbers:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1018,  1012,  1020,  2093,  2335,  2057, 18154,  4009,  1037,
         2193,  2013,  1996,  2206,  3616,  1024,   102])"
388,1,"['function', 'probability', 'probability mass function', 'mass function']", Exercises,seg_57,"if xi represents the ith draw, i = 1, 2, 3, then the probability mass function of xi is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2065, 8418, 5836, 1996, 2009, 2232, 4009, 1010, 1045, 1027, 1015,
        1010, 1016, 1010, 1017, 1010, 2059, 1996, 9723, 3742, 3853, 1997, 8418,
        2003, 2445, 2011,  102])"
389,1,"['average', 'independent']", Exercises,seg_57,"and p(xi = a) = 0 for all other a. we assume that each draw is independent of the previous draws. let x̄ be the average of x1, x2, and x3, i.e.,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1998, 1052, 1006, 8418, 1027, 1037, 1007, 1027, 1014, 2005, 2035,
        2060, 1037, 1012, 2057, 7868, 2008, 2169, 4009, 2003, 2981, 1997, 1996,
        3025, 9891, 1012, 2292, 1060, 2022, 1996, 2779, 1997, 1060, 2487, 1010,
        1060, 2475, 1010, 1998, 1060, 2509, 1010, 1045, 1012, 1041, 1012, 1010,
         102])"
390,1,"['function', 'probability', 'probability mass function', 'mass function']", Exercises,seg_57,a. determine the probability mass function px̄ of x̄.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 1996, 9723, 3742, 3853, 1052, 2595, 1997, 1060,
        1012,  102])"
391,1,['probability'], Exercises,seg_57,b. compute the probability that exactly two draws are equal to 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  9723,  2008,  3599,  2048,  9891,
         2024,  5020,  2000,  1015,  1012,   102])"
392,0,[], Exercises,seg_57,4.7 a shop receives a batch of 1000 cheap lamps. the odds that a lamp is defective are 0.1%. let x be the number of defective lamps in the batch.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1018,  1012,  1021,  1037,  4497,  8267,  1037, 14108,  1997,
         6694, 10036, 14186,  1012,  1996, 10238,  2008,  1037, 10437,  2003,
        28829,  2024,  1014,  1012,  1015,  1003,  1012,  2292,  1060,  2022,
         1996,  2193,  1997, 28829, 14186,  1999,  1996, 14108,  1012,   102])"
393,1,['distribution'], Exercises,seg_57,a. what kind of distribution does x have? what is/are the value(s) of pa-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2054, 2785, 1997, 4353, 2515, 1060, 2031, 1029, 2054,
        2003, 1013, 2024, 1996, 3643, 1006, 1055, 1007, 1997, 6643, 1011,  102])"
394,1,['distribution'], Exercises,seg_57,rameter(s) of this distribution?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  8223, 15141,  1006,  1055,  1007,  1997,  2023,  4353,  1029,
          102])"
395,1,['probability'], Exercises,seg_57,b. what is the probability that the batch contains no defective lamps? one,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2003,  1996,  9723,  2008,  1996, 14108,
         3397,  2053, 28829, 14186,  1029,  2028,   102])"
396,0,[], Exercises,seg_57,defective lamp? more than two defective ones?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 28829, 10437,  1029,  2062,  2084,  2048, 28829,  3924,  1029,
          102])"
397,1,['probability'], Exercises,seg_57,4.8 in section 1.4 we saw that each space shuttle has six o-rings and that each o-ring fails with probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  1022,  1999,  2930,  1015,  1012,  1018,  2057,
         2387,  2008,  2169,  2686, 10382,  2038,  2416,  1051,  1011,  7635,
         1998,  2008,  2169,  1051,  1011,  3614, 11896,  2007,  9723,   102])"
398,0,[], Exercises,seg_57,"where a = 5.085, b = −0.1156, and t is the temperature (in degrees fahrenheit) at the time of the launch of the space shuttle. at the time of the fatal launch of the challenger, t = 31, yielding p(31) = 0.8178.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2073,  1037,  1027,  1019,  1012,  5511,  2629,  1010,  1038,
         1027,  1597,  2692,  1012, 10630,  2575,  1010,  1998,  1056,  2003,
         1996,  4860,  1006,  1999,  5445,  6904, 28362, 25311, 20175,  1007,
         2012,  1996,  2051,  1997,  1996,  4888,  1997,  1996,  2686, 10382,
         1012,  2012,  1996,  2051,  1997,  1996, 10611,  4888,  1997,  1996,
        12932,  1010,  1056,  1027,  2861,  1010, 21336,  1052,  1006,  2861,
         1007,  1027,  1014,  1012,  6282,  2581,  2620,  1012,   102])"
399,0,[], Exercises,seg_57,a. let x be the number of failing o-rings at launch temperature 31◦f. what,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 2292, 1060, 2022, 1996, 2193, 1997, 7989, 1051, 1011,
        7635, 2012, 4888, 4860,  100, 1012, 2054,  102])"
400,1,"['probability', 'distribution', 'parameters', 'probability distribution']", Exercises,seg_57,"type of probability distribution does x have, and what are the values of its parameters?",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  2828,  1997,  9723,  4353,  2515,  1060,  2031,  1010,  1998,
         2054,  2024,  1996,  5300,  1997,  2049, 11709,  1029,   102])"
401,1,['probability'], Exercises,seg_57,b. what is the probability p(x ≥ 1) that at least one o-ring fails?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2003,  1996,  9723,  1052,  1006,  1060,
         1609,  1015,  1007,  2008,  2012,  2560,  2028,  1051,  1011,  3614,
        11896,  1029,   102])"
402,1,"['probability', 'failure']", Exercises,seg_57,"4.9 for simplicity’s sake, let us assume that all space shuttles will be launched at 81◦f (which is the highest recorded launch temperature in figure 1.3). with this temperature, the probability of an o-ring failure is equal to p(81) = 0.0137 (see section 1.4 or exercise 4.8).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  1023,  2005, 17839,  1521,  1055,  8739,  1010,
         2292,  2149,  7868,  2008,  2035,  2686, 10382,  2015,  2097,  2022,
         3390,  2012,   100,  1006,  2029,  2003,  1996,  3284,  2680,  4888,
         4860,  1999,  3275,  1015,  1012,  1017,  1007,  1012,  2007,  2023,
         4860,  1010,  1996,  9723,  1997,  2019,  1051,  1011,  3614,  4945,
         2003,  5020,  2000,  1052,  1006,  6282,  1007,  1027,  1014,  1012,
         5890, 24434,  1006,  2156,  2930,  1015,  1012,  1018,  2030,  6912,
         1018,  1012,  1022,  1007,  1012,   102])"
403,1,['probability'], Exercises,seg_57,"a. what is the probability that during 23 launches no o-ring will fail, but",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2003,  1996,  9723,  2008,  2076,  2603,
        18989,  2053,  1051,  1011,  3614,  2097,  8246,  1010,  2021,   102])"
404,0,[], Exercises,seg_57,that at least one o-ring will fail during the 24th launch of a space shuttle?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2008,  2012,  2560,  2028,  1051,  1011,  3614,  2097,  8246,
         2076,  1996, 13386,  4888,  1997,  1037,  2686, 10382,  1029,   102])"
405,1,['probability'], Exercises,seg_57,b. what is the probability that no o-ring fails during 24 launches?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2003,  1996,  9723,  2008,  2053,  1051,
         1011,  3614, 11896,  2076,  2484, 18989,  1029,   102])"
406,1,"['probability', 'random', 'random variables', 'variables']", Exercises,seg_57,"4.10 early in the morning, a group of m people decides to use the elevator in an otherwise deserted building of 21 floors. each of these persons chooses his or her floor independently of the others, and—from our point of view— completely at random, so that each person selects a floor with probability 1/21. let sm be the number of times the elevator stops. in order to study sm, we introduce for i = 1, 2, . . . , 21 random variables ri, given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  2184,  2220,  1999,  1996,  2851,  1010,  1037,
         2177,  1997,  1049,  2111,  7288,  2000,  2224,  1996,  7764,  1999,
         2019,  4728, 12768,  2311,  1997,  2538,  8158,  1012,  2169,  1997,
         2122,  5381, 15867,  2010,  2030,  2014,  2723,  9174,  1997,  1996,
         2500,  1010,  1998,  1517,  2013,  2256,  2391,  1997,  3193,  1517,
         3294,  2012,  6721,  1010,  2061,  2008,  2169,  2711, 27034,  1037,
         2723,  2007,  9723,  1015,  1013,  2538,  1012,  2292, 15488,  2022,
         1996,  2193,  1997,  2335,  1996,  7764,  6762,  1012,  1999,  2344,
         2000,  2817, 15488,  1010,  2057,  8970,  2005,  1045,  1027,  1015,
         1010,  1016,  1010,  1012,  1012,  1012,  1010,  2538,  6721, 10857,
        15544,  1010,  2445,  2011,   102])"
407,0,[], Exercises,seg_57,1 if the elevator stops at the ith floor,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1015, 2065, 1996, 7764, 6762, 2012, 1996, 2009, 2232, 2723,  102])"
408,0,[], Exercises,seg_57,ri = {0 if the elevator does not stop at the ith floor.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 15544,  1027,  1063,  1014,  2065,  1996,  7764,  2515,  2025,
         2644,  2012,  1996,  2009,  2232,  2723,  1012,   102])"
409,1,['distribution'], Exercises,seg_57,a. each ri has a ber(p) distribution. show that p = 1 − ( 2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2169, 15544,  2038,  1037,  2022,  2099,  1006,
         1052,  1007,  4353,  1012,  2265,  2008,  1052,  1027,  1015,  1597,
         1006,  1016,   102])"
410,0,[], Exercises,seg_57,"b. from the way we defined sm, it follows that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  2013,  1996,  2126,  2057,  4225, 15488,  1010,
         2009,  4076,  2008,   102])"
411,1,['distribution'], Exercises,seg_57,"can we conclude that sm has a bin(21, p) distribution, with p as in part a? why or why not?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2064,  2057, 16519,  2008, 15488,  2038,  1037,  8026,  1006,
         2538,  1010,  1052,  1007,  4353,  1010,  2007,  1052,  2004,  1999,
         2112,  1037,  1029,  2339,  2030,  2339,  2025,  1029,   102])"
412,1,['distribution'], Exercises,seg_57,and that s3 has the following distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1998, 2008, 1055, 2509, 2038, 1996, 2206, 4353, 1012,  102])"
413,1,"['parameter', 'distribution']", Exercises,seg_57,"4.11 you decide to play monthly in two different lotteries, and you stop playing as soon as you win a prize in one (or both) lotteries of at least one million euros. suppose that every time you participate in these lotteries, the probability to win one million (or more) euros is p1 for one of the lotteries and p2 for the other. let m be the number of times you participate in these lotteries until winning at least one prize. what kind of distribution does m have, and what is its parameter?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  2340,  2017,  5630,  2000,  2377,  7058,  1999,
         2048,  2367,  2843,  3334,  3111,  1010,  1998,  2017,  2644,  2652,
         2004,  2574,  2004,  2017,  2663,  1037,  3396,  1999,  2028,  1006,
         2030,  2119,  1007,  2843,  3334,  3111,  1997,  2012,  2560,  2028,
         2454, 19329,  1012,  6814,  2008,  2296,  2051,  2017,  5589,  1999,
         2122,  2843,  3334,  3111,  1010,  1996,  9723,  2000,  2663,  2028,
         2454,  1006,  2030,  2062,  1007, 19329,  2003,  1052,  2487,  2005,
         2028,  1997,  1996,  2843,  3334,  3111,  1998,  1052,  2475,  2005,
         1996,  2060,  1012,  2292,  1049,  2022,  1996,  2193,  1997,  2335,
         2017,  5589,  1999,  2122,  2843,  3334,  3111,  2127,  3045,  2012,
         2560,  2028,  3396,  1012,  2054,  2785,  1997,  4353,  2515,  1049,
         2031,  1010,  1998,  2054,  2003,  2049, 16381,  1029,   102])"
414,1,"['probability', 'independent']", Exercises,seg_57,"4.12 you and a friend want to go to a concert, but unfortunately only one ticket is still available. the man who sells the tickets decides to toss a coin until heads appears. in each toss heads appears with probability p, where 0 < p < 1, independent of each of the previous tosses. if the number of tosses needed is odd, your friend is allowed to buy the ticket; otherwise you can buy it. would you agree to this arrangement?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  2260,  2017,  1998,  1037,  2767,  2215,  2000,
         2175,  2000,  1037,  4164,  1010,  2021,  6854,  2069,  2028,  7281,
         2003,  2145,  2800,  1012,  1996,  2158,  2040, 15187,  1996,  9735,
         7288,  2000, 10055,  1037,  9226,  2127,  4641,  3544,  1012,  1999,
         2169, 10055,  4641,  3544,  2007,  9723,  1052,  1010,  2073,  1014,
         1026,  1052,  1026,  1015,  1010,  2981,  1997,  2169,  1997,  1996,
         3025, 10055,  2229,  1012,  2065,  1996,  2193,  1997, 10055,  2229,
         2734,  2003,  5976,  1010,  2115,  2767,  2003,  3039,  2000,  4965,
         1996,  7281,  1025,  4728,  2017,  2064,  4965,  2009,  1012,  2052,
         2017,  5993,  2000,  2023,  6512,  1029,   102])"
415,1,"['probability', 'estimate', 'random', 'distribution', 'probability distribution']", Exercises,seg_57,"4.13 a box contains an unknown number n of identical bolts. in order to get an idea of the size n , we randomly mark one of the bolts from the box. next we select at random a bolt from the box. if this is the marked bolt we stop, otherwise we return the bolt to the box, and we randomly select a second one, etc. we stop when the selected bolt is the marked one. let x be the number of times a bolt was selected. later (in exercise 21.11) we will try to find an estimate of n . here we look at the probability distribution of x .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1018,  1012,  2410,  1037,  3482,  3397,  2019,  4242,  2193,
         1050,  1997,  7235, 19947,  1012,  1999,  2344,  2000,  2131,  2019,
         2801,  1997,  1996,  2946,  1050,  1010,  2057, 18154,  2928,  2028,
         1997,  1996, 19947,  2013,  1996,  3482,  1012,  2279,  2057,  7276,
         2012,  6721,  1037, 10053,  2013,  1996,  3482,  1012,  2065,  2023,
         2003,  1996,  4417, 10053,  2057,  2644,  1010,  4728,  2057,  2709,
         1996, 10053,  2000,  1996,  3482,  1010,  1998,  2057, 18154,  7276,
         1037,  2117,  2028,  1010,  4385,  1012,  2057,  2644,  2043,  1996,
         3479, 10053,  2003,  1996,  4417,  2028,  1012,  2292,  1060,  2022,
         1996,  2193,  1997,  2335,  1037, 10053,  2001,  3479,  1012,  2101,
         1006,  1999,  6912,  2538,  1012,  2340,  1007,  2057,  2097,  3046,
         2000,  2424,  2019, 10197,  1997,  1050,  1012,  2182,  2057,  2298,
         2012,  1996,  9723,  4353,  1997,  1060,  1012,   102])"
416,1,"['probability', 'distribution', 'probability distribution']", Exercises,seg_57,a. what is the probability distribution of x? specify its parameter(s)!,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2003,  1996,  9723,  4353,  1997,  1060,
         1029, 20648,  2049, 16381,  1006,  1055,  1007,   999,   102])"
417,0,[], Exercises,seg_57,b. the drawback of this approach is that x can attain any of the values,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  4009,  5963,  1997,  2023,  3921,  2003,
         2008,  1060,  2064, 18759,  2151,  1997,  1996,  5300,   102])"
418,1,"['distribution', 'uniform distribution', 'sample', 'random', 'sampling', 'discrete uniform distribution', 'discrete']", Exercises,seg_57,"1, 2, 3, . . . , so that if n is large we might be sampling from the box for quite a long time. we decide to sample from the box in a slightly different way: after we have randomly marked one of the bolts in the box, we select at random a bolt from the box. if this is the marked one, we stop, otherwise we randomly select a second bolt (we do not return the selected bolt). we stop when we select the marked bolt. let y be the number of times a bolt was selected. show that p(y = k) = 1/n for k = 1, 2, . . . , n (y has a so-called discrete uniform distribution).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1015,  1010,  1016,  1010,  1017,  1010,  1012,  1012,  1012,
         1010,  2061,  2008,  2065,  1050,  2003,  2312,  2057,  2453,  2022,
        16227,  2013,  1996,  3482,  2005,  3243,  1037,  2146,  2051,  1012,
         2057,  5630,  2000,  7099,  2013,  1996,  3482,  1999,  1037,  3621,
         2367,  2126,  1024,  2044,  2057,  2031, 18154,  4417,  2028,  1997,
         1996, 19947,  1999,  1996,  3482,  1010,  2057,  7276,  2012,  6721,
         1037, 10053,  2013,  1996,  3482,  1012,  2065,  2023,  2003,  1996,
         4417,  2028,  1010,  2057,  2644,  1010,  4728,  2057, 18154,  7276,
         1037,  2117, 10053,  1006,  2057,  2079,  2025,  2709,  1996,  3479,
        10053,  1007,  1012,  2057,  2644,  2043,  2057,  7276,  1996,  4417,
        10053,  1012,  2292,  1061,  2022,  1996,  2193,  1997,  2335,  1037,
        10053,  2001,  3479,  1012,  2265,  2008,  1052,  1006,  1061,  1027,
         1047,  1007,  1027,  1015,  1013,  1050,  2005,  1047,  1027,  1015,
         1010,  1016,  1010,  1012,  1012,  1012,  1010,  1050,  1006,  1061,
         2038,  1037,  2061,  1011,  2170, 16246,  6375,  4353,  1007,  1012,
          102])"
419,0,[], Exercises,seg_57,"c. instead of randomly marking one bolt in the box, we mark m bolts, with",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  2612,  1997, 18154, 10060,  2028, 10053,  1999,
         1996,  3482,  1010,  2057,  2928,  1049, 19947,  1010,  2007,   102])"
420,1,['sample'], Exercises,seg_57,"m smaller than n . next, we randomly select r bolts; z is the number of marked bolts in the sample. show that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1049,  3760,  2084,  1050,  1012,  2279,  1010,  2057, 18154,
         7276,  1054, 19947,  1025,  1062,  2003,  1996,  2193,  1997,  4417,
        19947,  1999,  1996,  7099,  1012,  2265,  2008,   102])"
421,1,"['hypergeometric distribution', 'hypergeometric', 'distribution', 'parameters']", Exercises,seg_57,"(z has a so-called hypergeometric distribution, with parameters m, n , and r.)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1006,  1062,  2038,  1037,  2061,  1011,  2170, 23760,  3351,
        28993,  4353,  1010,  2007, 11709,  1049,  1010,  1050,  1010,  1998,
         1054,  1012,  1007,   102])"
422,1,"['probability', 'results', 'outcome']", Exercises,seg_57,"4.14 we throw a coin until a head turns up for the second time, where p is the probability that a throw results in a head and we assume that the outcome",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0.])",tensor([11110]),"tensor([ 101, 1018, 1012, 2403, 2057, 5466, 1037, 9226, 2127, 1037, 2132, 4332,
        2039, 2005, 1996, 2117, 2051, 1010, 2073, 1052, 2003, 1996, 9723, 2008,
        1037, 5466, 3463, 1999, 1037, 2132, 1998, 2057, 7868, 2008, 1996, 9560,
         102])"
423,1,"['outcomes', 'independent']", Exercises,seg_57,of each throw is independent of the previous outcomes. let x be the number of times we have thrown the coin.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1997,  2169,  5466,  2003,  2981,  1997,  1996,  3025, 13105,
         1012,  2292,  1060,  2022,  1996,  2193,  1997,  2335,  2057,  2031,
         6908,  1996,  9226,  1012,   102])"
424,1,"['continuous', 'outcomes', 'continuous random variables', 'random', 'random variables', 'experiments', 'model', 'variables']", Continuous random variables,seg_59,"many experiments have outcomes that take values on a continuous scale. for example, in chapter 2 we encountered the load at which a model of a bridge collapses. these experiments have continuous random variables naturally associated with them.",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7142,  6721, 10857])","tensor([  101,  2116,  7885,  2031, 13105,  2008,  2202,  5300,  2006,  1037,
         7142,  4094,  1012,  2005,  2742,  1010,  1999,  3127,  1016,  2057,
         8567,  1996,  7170,  2012,  2029,  1037,  2944,  1997,  1037,  2958,
        25938,  1012,  2122,  7885,  2031,  7142,  6721, 10857,  8100,  3378,
         2007,  2068,  1012,   102])"
425,1,"['discrete random variable', 'outcomes', 'mean', 'associated', 'interval', 'random variable', 'continuous random variables', 'discrete', 'continuous', 'probability', 'probabilities', 'random variables', 'process', 'discrete random variables', 'random', 'experiment', 'variables', 'variable']", Probability density functions,seg_61,"one way to look at continuous random variables is that they arise by a (neverending) process of refinement from discrete random variables. suppose, for example, that a discrete random variable associated with some experiment takes on the value 6.283 with probability p. if we refine, in the sense that we also get to know the fourth decimal, then the probability p is spread over the outcomes 6.2830, 6.2831, . . . , 6.2839. usually this will mean that each of these new values is taken on with a probability that is much smaller than p—the sum of the ten probabilities is p. continuing the refinement process to more and more decimals, the probabilities of the possible values of the outcomes become smaller and smaller, approaching zero. however, the probability that the possible values lie in some fixed interval [a, b] will settle down. this is closely related to the way sums converge to an integral in the definition of the integral and motivates the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2028,  2126,  2000,  2298,  2012,  7142,  6721, 10857,  2003,
         2008,  2027, 13368,  2011,  1037,  1006,  2196, 18537,  1007,  2832,
         1997, 25416,  3170,  3672,  2013, 16246,  6721, 10857,  1012,  6814,
         1010,  2005,  2742,  1010,  2008,  1037, 16246,  6721,  8023,  3378,
         2007,  2070,  7551,  3138,  2006,  1996,  3643,  1020,  1012, 25504,
         2007,  9723,  1052,  1012,  2065,  2057, 25416,  3170,  1010,  1999,
         1996,  3168,  2008,  2057,  2036,  2131,  2000,  2113,  1996,  2959,
        26066,  1010,  2059,  1996,  9723,  1052,  2003,  3659,  2058,  1996,
        13105,  1020,  1012, 25504,  2692,  1010,  1020,  1012, 25504,  2487,
         1010,  1012,  1012,  1012,  1010,  1020,  1012, 25504,  2683,  1012,
         2788,  2023,  2097,  2812,  2008,  2169,  1997,  2122,  2047,  5300,
         2003,  2579,  2006,  2007,  1037,  9723,  2008,  2003,  2172,  3760,
         2084,  1052,  1517,  1996,  7680,  1997,  1996,  2702,  4013,  3676,
        14680,  2003,  1052,  1012,  5719,  1996, 25416,  3170,  3672,  2832,
         2000,  2062,  1998,  2062, 26066,  2015,  1010,  1996,  4013,  3676,
        14680,  1997,  1996,  2825,  5300,  1997,  1996, 13105,  2468,  3760,
         1998,  3760,  1010,  8455,  5717,  1012,  2174,  1010,  1996,  9723,
         2008,  1996,  2825,  5300,  4682,  1999,  2070,  4964, 13483,  1031,
         1037,  1010,  1038,  1033,  2097,  7392,  2091,  1012,  2023,  2003,
         4876,  3141,  2000,  1996,  2126, 20571, 28314,  2000,  2019,  9897,
         1999,  1996,  6210,  1997,  1996,  9897,  1998,  9587, 29068,  8520,
         1996,  2206,  6210,  1012,   102])"
426,1,"['continuous', 'function', 'random variable', 'random', 'variable']", Probability density functions,seg_61,"definition. a random variable x is continuous if for some function f : r → r and for any numbers a and b with a ≤ b,",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([ 101, 6210, 1012, 1037, 6721, 8023, 1060, 2003, 7142, 2065, 2005, 2070,
        3853, 1042, 1024, 1054, 1585, 1054, 1998, 2005, 2151, 3616, 1037, 1998,
        1038, 2007, 1037, 1608, 1038, 1010,  102])"
427,1,['function'], Probability density functions,seg_61,the function f has to satisfy f(x) ≥ 0 for all x and ∫−,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([9723, 4304, 4972])","tensor([  101,  1996,  3853,  1042,  2038,  2000, 13225,  1042,  1006,  1060,
         1007,  1609,  1014,  2005,  2035,  1060,  1998,   100,   102])"
428,1,"['function', 'density function', 'probability', 'probability density function']", Probability density functions,seg_61,∞ ∞ f(x) dx = 1. we call f the probability density function (or probability density) of x.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([ 101, 1601, 1601, 1042, 1006, 1060, 1007, 1040, 2595, 1027, 1015, 1012,
        2057, 2655, 1042, 1996, 9723, 4304, 3853, 1006, 2030, 9723, 4304, 1007,
        1997, 1060, 1012,  102])"
429,1,"['function', 'density function', 'probability', 'probability density function', 'interval']", Probability density functions,seg_61,"note that the probability that x lies in an interval [a, b] is equal to the area under the probability density function f of x over the interval [a, b]; this is illustrated in figure 5.1. so if the interval gets smaller and smaller, the probability will go to zero: for any positive ε",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  3602,  2008,  1996,  9723,  2008,  1060,  3658,  1999,  2019,
        13483,  1031,  1037,  1010,  1038,  1033,  2003,  5020,  2000,  1996,
         2181,  2104,  1996,  9723,  4304,  3853,  1042,  1997,  1060,  2058,
         1996, 13483,  1031,  1037,  1010,  1038,  1033,  1025,  2023,  2003,
         7203,  1999,  3275,  1019,  1012,  1015,  1012,  2061,  2065,  1996,
        13483,  4152,  3760,  1998,  3760,  1010,  1996,  9723,  2097,  2175,
         2000,  5717,  1024,  2005,  2151,  3893,  1159,   102])"
430,0,[], Probability density functions,seg_61,"and sending ε to 0, it follows that for any a",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([9723, 4304, 4972])","tensor([ 101, 1998, 6016, 1159, 2000, 1014, 1010, 2009, 4076, 2008, 2005, 2151,
        1037,  102])"
431,1,"['continuous', 'continuous random variables', 'random', 'random variables', 'intervals', 'variables']", Probability density functions,seg_61,this implies that for continuous random variables you may be careless about the precise form of the intervals:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2023, 12748,  2008,  2005,  7142,  6721, 10857,  2017,  2089,
         2022, 23358,  2055,  1996, 10480,  2433,  1997,  1996, 14025,  1024,
          102])"
432,1,['probability'], Probability density functions,seg_61,"for small positive ε. hence f(a) can be interpreted as a (relative) measure of how likely it is that x will be near a. however, do not think of f(a) as a probability: f(a) can be arbitrarily large. an example of such an f is given in the following exercise.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2005,  2235,  3893,  1159,  1012,  6516,  1042,  1006,  1037,
         1007,  2064,  2022, 10009,  2004,  1037,  1006,  5816,  1007,  5468,
         1997,  2129,  3497,  2009,  2003,  2008,  1060,  2097,  2022,  2379,
         1037,  1012,  2174,  1010,  2079,  2025,  2228,  1997,  1042,  1006,
         1037,  1007,  2004,  1037,  9723,  1024,  1042,  1006,  1037,  1007,
         2064,  2022, 12098, 16313, 19848,  6588,  2312,  1012,  2019,  2742,
         1997,  2107,  2019,  1042,  2003,  2445,  1999,  1996,  2206,  6912,
         1012,   102])"
433,1,"['function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'variable']", Probability density functions,seg_61,"quick exercise 5.1 let the function f be defined by f(x) = 0 if x ≤ 0 or x ≥ 1, and f(x) = 1/(2√x) for 0 < x < 1. you can check quickly that f satisfies the two properties of a probability density function. let x be a random variable with f as its probability density function. compute the probability that x lies between 10−4 and 10−2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  4248,  6912,  1019,  1012,  1015,  2292,  1996,  3853,  1042,
         2022,  4225,  2011,  1042,  1006,  1060,  1007,  1027,  1014,  2065,
         1060,  1608,  1014,  2030,  1060,  1609,  1015,  1010,  1998,  1042,
         1006,  1060,  1007,  1027,  1015,  1013,  1006,  1016, 30127,  2595,
         1007,  2005,  1014,  1026,  1060,  1026,  1015,  1012,  2017,  2064,
         4638,  2855,  2008,  1042,  2938,  2483, 14213,  1996,  2048,  5144,
         1997,  1037,  9723,  4304,  3853,  1012,  2292,  1060,  2022,  1037,
         6721,  8023,  2007,  1042,  2004,  2049,  9723,  4304,  3853,  1012,
        24134,  1996,  9723,  2008,  1060,  3658,  2090,  2184, 22543,  2549,
         1998,  2184, 22543,  2475,  1012,   102])"
434,1,"['cases', 'density function', 'mass function', 'disjoint', 'probability density function', 'events', 'interval', 'union', 'continuous random variables', 'probability mass function', 'discrete', 'continuous', 'function', 'probability', 'random variables', 'discrete random variables', 'event', 'random', 'distribution', 'distribution function', 'variables']", Probability density functions,seg_61,"you should realize that discrete random variables do not have a probability density function f and continuous random variables do not have a probability mass function p, but that both have a distribution function f (a) = p(x ≤ a). using the fact that for a < b the event {x ≤ b} is a disjoint union of the events {x ≤ a} and {a < x ≤ b}, we can express the probability that x lies in an interval (a, b] directly in terms of f for both cases:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2017,  2323,  5382,  2008, 16246,  6721, 10857,  2079,  2025,
         2031,  1037,  9723,  4304,  3853,  1042,  1998,  7142,  6721, 10857,
         2079,  2025,  2031,  1037,  9723,  3742,  3853,  1052,  1010,  2021,
         2008,  2119,  2031,  1037,  4353,  3853,  1042,  1006,  1037,  1007,
         1027,  1052,  1006,  1060,  1608,  1037,  1007,  1012,  2478,  1996,
         2755,  2008,  2005,  1037,  1026,  1038,  1996,  2724,  1063,  1060,
         1608,  1038,  1065,  2003,  1037,  4487,  2015,  5558, 18447,  2586,
         1997,  1996,  2824,  1063,  1060,  1608,  1037,  1065,  1998,  1063,
         1037,  1026,  1060,  1608,  1038,  1065,  1010,  2057,  2064,  4671,
         1996,  9723,  2008,  1060,  3658,  1999,  2019, 13483,  1006,  1037,
         1010,  1038,  1033,  3495,  1999,  3408,  1997,  1042,  2005,  2119,
         3572,  1024,   102])"
435,1,"['continuous', 'continuous random variable', 'function', 'density function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Probability density functions,seg_61,there is a simple relation between the distribution function f and the probability density function f of a continuous random variable. it follows from integral calculus that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2045,  2003,  1037,  3722,  7189,  2090,  1996,  4353,  3853,
         1042,  1998,  1996,  9723,  4304,  3853,  1042,  1997,  1037,  7142,
         6721,  8023,  1012,  2009,  4076,  2013,  9897, 19276,  2008,   102])"
436,1,"['function', 'density function', 'probability', 'probability density function', 'information', 'random variable', 'probabilistic', 'random', 'distribution', 'distribution function', 'variable', 'probability distribution']", Probability density functions,seg_61,both the probability density function and the distribution function of a continuous random variable x contain all the probabilistic information about x ; the probability distribution of x is described by either of them.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2119,  1996,  9723,  4304,  3853,  1998,  1996,  4353,  3853,
         1997,  1037,  7142,  6721,  8023,  1060,  5383,  2035,  1996,  4013,
         3676, 27965,  4588,  2592,  2055,  1060,  1025,  1996,  9723,  4353,
         1997,  1060,  2003,  2649,  2011,  2593,  1997,  2068,  1012,   102])"
437,1,"['model', 'probability', 'experiment']", Probability density functions,seg_61,"we illustrate all this with an example. suppose we want to make a probability model for an experiment that can be described as “an object hits a disc of radius r in a completely arbitrary way” (of course, this is not you playing darts—nevertheless we will refer to this example as the darts example). we are interested in the distance x between the hitting point and the center of the disc. since distances cannot be negative, we have f (b) = p(x ≤ b) = 0 when b < 0. since the object hits the disc, we have f (b) = 1 when b > r. that the dart hits the disk in a completely arbitrary way we interpret as that the probability of hitting any region is proportional to the area of that region. in particular, because the disc has area πr2 and the disc with radius b has area πb2, we should put",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2057, 19141,  2035,  2023,  2007,  2019,  2742,  1012,  6814,
         2057,  2215,  2000,  2191,  1037,  9723,  2944,  2005,  2019,  7551,
         2008,  2064,  2022,  2649,  2004,  1523,  2019,  4874,  4978,  1037,
         5860,  1997, 12177,  1054,  1999,  1037,  3294, 15275,  2126,  1524,
         1006,  1997,  2607,  1010,  2023,  2003,  2025,  2017,  2652, 17493,
         1517,  6600,  2057,  2097,  6523,  2000,  2023,  2742,  2004,  1996,
        17493,  2742,  1007,  1012,  2057,  2024,  4699,  1999,  1996,  3292,
         1060,  2090,  1996,  7294,  2391,  1998,  1996,  2415,  1997,  1996,
         5860,  1012,  2144, 12103,  3685,  2022,  4997,  1010,  2057,  2031,
         1042,  1006,  1038,  1007,  1027,  1052,  1006,  1060,  1608,  1038,
         1007,  1027,  1014,  2043,  1038,  1026,  1014,  1012,  2144,  1996,
         4874,  4978,  1996,  5860,  1010,  2057,  2031,  1042,  1006,  1038,
         1007,  1027,  1015,  2043,  1038,  1028,  1054,  1012,  2008,  1996,
        14957,  4978,  1996,  9785,  1999,  1037,  3294, 15275,  2126,  2057,
        17841,  2004,  2008,  1996,  9723,  1997,  7294,  2151,  2555,  2003,
        14267,  2000,  1996,  2181,  1997,  2008,  2555,  1012,  1999,  3327,
         1010,  2138,  1996,  5860,  2038,  2181,  1170,  2099,  2475,  1998,
         1996,  5860,  2007, 12177,  1038,  2038,  2181,  1170,  2497,  2475,
         1010,  2057,  2323,  2404,   102])"
438,1,"['function', 'density function', 'probability', 'probability density function', 'interval']", Probability density functions,seg_61,"then the probability density function f of x is equal to 0 outside the interval [0, r] and",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  2059,  1996,  9723,  4304,  3853,  1042,  1997,  1060,  2003,
         5020,  2000,  1014,  2648,  1996, 13483,  1031,  1014,  1010,  1054,
         1033,  1998,   102])"
439,1,['probability'], Probability density functions,seg_61,"quick exercise 5.2 compute for the darts example the probability that 0 < x ≤ r/2, and the probability that r/2 < x ≤ r.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 4304, 4972])","tensor([  101,  4248,  6912,  1019,  1012,  1016, 24134,  2005,  1996, 17493,
         2742,  1996,  9723,  2008,  1014,  1026,  1060,  1608,  1054,  1013,
         1016,  1010,  1998,  1996,  9723,  2008,  1054,  1013,  1016,  1026,
         1060,  1608,  1054,  1012,   102])"
440,1,"['density function', 'outcomes', 'outcome', 'experiments', 'associated', 'interval', 'probability density function', 'random variable', 'continuous', 'function', 'probability', 'continuous random variable', 'random', 'experiment', 'measurements', 'variable']", The uniform distribution,seg_63,"in this section we encounter a continuous random variable that describes an experiment where the outcome is completely arbitrary, except that we know that it lies between certain bounds. many experiments of physical origin have this kind of behavior. for instance, suppose we measure for a long time the emission of radioactive particles of some material. suppose that the experiment consists of recording in each hour at what times the particles are emitted. then the outcomes will lie in the interval [0,60] minutes. if the measurements would concentrate in any way, there is either something wrong with your geiger counter or you are about to discover some new physical law. not concentrating in any way means that subintervals of the same length should have the same probability. it is then clear (cf. equation (5.1)) that the probability density function associated with this experiment should be constant on [0, 60]. this motivates the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6375, 4353])","tensor([  101,  1999,  2023,  2930,  2057,  8087,  1037,  7142,  6721,  8023,
         2008,  5577,  2019,  7551,  2073,  1996,  9560,  2003,  3294, 15275,
         1010,  3272,  2008,  2057,  2113,  2008,  2009,  3658,  2090,  3056,
        19202,  1012,  2116,  7885,  1997,  3558,  4761,  2031,  2023,  2785,
         1997,  5248,  1012,  2005,  6013,  1010,  6814,  2057,  5468,  2005,
         1037,  2146,  2051,  1996, 15760,  1997, 17669,  9309,  1997,  2070,
         3430,  1012,  6814,  2008,  1996,  7551,  3774,  1997,  3405,  1999,
         2169,  3178,  2012,  2054,  2335,  1996,  9309,  2024, 22627,  1012,
         2059,  1996, 13105,  2097,  4682,  1999,  1996, 13483,  1031,  1014,
         1010,  3438,  1033,  2781,  1012,  2065,  1996, 11702,  2052, 10152,
         1999,  2151,  2126,  1010,  2045,  2003,  2593,  2242,  3308,  2007,
         2115, 16216, 17071,  4675,  2030,  2017,  2024,  2055,  2000,  7523,
         2070,  2047,  3558,  2375,  1012,  2025, 16966,  1999,  2151,  2126,
         2965,  2008,  4942, 18447,  2121, 10175,  2015,  1997,  1996,  2168,
         3091,  2323,  2031,  1996,  2168,  9723,  1012,  2009,  2003,  2059,
         3154,  1006, 12935,  1012,  8522,  1006,  1019,  1012,  1015,  1007,
         1007,  2008,  1996,  9723,  4304,  3853,  3378,  2007,  2023,  7551,
         2323,  2022,  5377,  2006,  1031,  1014,  1010,  3438,  1033,  1012,
         2023,  9587, 29068,  8520,  1996,  2206,  6210,  1012,   102])"
441,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'interval', 'random variable', 'random', 'variable']", The uniform distribution,seg_63,"definition. a continuous random variable has a uniform distribution on the interval [α, β] if its probability density function f is given by f(x) = 0 if x is not in [α, β] and",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6375, 4353])","tensor([  101,  6210,  1012,  1037,  7142,  6721,  8023,  2038,  1037,  6375,
         4353,  2006,  1996, 13483,  1031,  1155,  1010,  1156,  1033,  2065,
         2049,  9723,  4304,  3853,  1042,  2003,  2445,  2011,  1042,  1006,
         1060,  1007,  1027,  1014,  2065,  1060,  2003,  2025,  1999,  1031,
         1155,  1010,  1156,  1033,  1998,   102])"
442,1,['distribution'], The uniform distribution,seg_63,"we denote this distribution by u(α, β).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6375, 4353])","tensor([  101,  2057, 19090,  2023,  4353,  2011,  1057,  1006,  1155,  1010,
         1156,  1007,  1012,   102])"
443,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", The uniform distribution,seg_63,"quick exercise 5.3 argue that the distribution function f of a random variable that has a u(α, β) distribution is given by f (x) = 0 if x < α, f (x) = 1 if x > β, and f (x) = (x − α)/(β − α) for α ≤ x ≤ β.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([1996, 6375, 4353])","tensor([ 101, 4248, 6912, 1019, 1012, 1017, 7475, 2008, 1996, 4353, 3853, 1042,
        1997, 1037, 6721, 8023, 2008, 2038, 1037, 1057, 1006, 1155, 1010, 1156,
        1007, 4353, 2003, 2445, 2011, 1042, 1006, 1060, 1007, 1027, 1014, 2065,
        1060, 1026, 1155, 1010, 1042, 1006, 1060, 1007, 1027, 1015, 2065, 1060,
        1028, 1156, 1010, 1998, 1042, 1006, 1060, 1007, 1027, 1006, 1060, 1597,
        1155, 1007, 1013, 1006, 1156, 1597, 1155, 1007, 2005, 1155, 1608, 1060,
        1608, 1156, 1012,  102])"
444,1,"['function', 'density function', 'probability', 'probability density function', 'distribution', 'distribution function']", The uniform distribution,seg_63,"in figure 5.3 the probability density function and the distribution function of a u(0, 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([1996, 6375, 4353])","tensor([ 101, 1999, 3275, 1019, 1012, 1017, 1996, 9723, 4304, 3853, 1998, 1996,
        4353, 3853, 1997, 1037, 1057, 1006, 1014, 1010, 1015,  102])"
445,1,['distribution'], The uniform distribution,seg_63,3 ) distribution are depicted.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0.])","tensor([1996, 6375, 4353])","tensor([ 101, 1017, 1007, 4353, 2024, 8212, 1012,  102])"
446,1,"['exponential distribution', 'independent', 'geometric distribution', 'interval', 'random variable', 'uniformly distributed', 'geometric', 'rate', 'probability', 'success', 'residence time', 'random', 'intervals', 'distribution', 'exponential', 'variable']", The exponential distribution,seg_65,"we already encountered the exponential distribution in the chemical reactor example of chapter 3. we will give an argument why it appears in that example. let v be the effluent volumetric flow rate, i.e., the volume that leaves the reactor over a time interval [0, t] is vt (and an equal volume enters the vessel at the other end). let v be the volume of the reactor vessel. then in total a fraction (v/v ) · t will have left the vessel during [0, t], when t is not too large. let the random variable t be the residence time of a particle in the vessel. to compute the distribution of t , we divide the interval [0, t] in n small intervals of equal length t/n. assuming perfect mixing, so that the particle’s position is uniformly distributed over the volume, the particle has probability p = (v/v ) · t/n to have left the vessel during any of the n intervals of length t/n. if we assume that the behavior of the particle in different time intervals of length t/n is independent, we have, if we call “leaving the vessel” a success, that t has a geometric distribution with success probability p. it follows (see also quick exercise 4.6) that the probability p(t > t) that the particle is still in the vessel at time t is, for large n, well approximated by",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  2057,  2525,  8567,  1996, 27258,  4353,  1999,  1996,  5072,
        13308,  2742,  1997,  3127,  1017,  1012,  2057,  2097,  2507,  2019,
         6685,  2339,  2009,  3544,  1999,  2008,  2742,  1012,  2292,  1058,
         2022,  1996,  1041,  4246,  7630,  4765,  3872, 12412,  4834,  3446,
         1010,  1045,  1012,  1041,  1012,  1010,  1996,  3872,  2008,  3727,
         1996, 13308,  2058,  1037,  2051, 13483,  1031,  1014,  1010,  1056,
         1033,  2003, 28879,  1006,  1998,  2019,  5020,  3872,  8039,  1996,
         6258,  2012,  1996,  2060,  2203,  1007,  1012,  2292,  1058,  2022,
         1996,  3872,  1997,  1996, 13308,  6258,  1012,  2059,  1999,  2561,
         1037, 12884,  1006,  1058,  1013,  1058,  1007,  1087,  1056,  2097,
         2031,  2187,  1996,  6258,  2076,  1031,  1014,  1010,  1056,  1033,
         1010,  2043,  1056,  2003,  2025,  2205,  2312,  1012,  2292,  1996,
         6721,  8023,  1056,  2022,  1996,  5039,  2051,  1997,  1037, 10811,
         1999,  1996,  6258,  1012,  2000, 24134,  1996,  4353,  1997,  1056,
         1010,  2057, 11443,  1996, 13483,  1031,  1014,  1010,  1056,  1033,
         1999,  1050,  2235, 14025,  1997,  5020,  3091,  1056,  1013,  1050,
         1012, 10262,  3819,  6809,  1010,  2061,  2008,  1996, 10811,  1521,
         1055,  2597,  2003, 27423,  5500,  2058,  1996,  3872,  1010,  1996,
        10811,  2038,  9723,  1052,  1027,  1006,  1058,  1013,  1058,  1007,
         1087,  1056,  1013,  1050,  2000,  2031,  2187,  1996,  6258,  2076,
         2151,  1997,  1996,  1050, 14025,  1997,  3091,  1056,  1013,  1050,
         1012,  2065,  2057,  7868,  2008,  1996,  5248,  1997,  1996, 10811,
         1999,  2367,  2051, 14025,  1997,  3091,  1056,  1013,  1050,  2003,
         2981,  1010,  2057,  2031,  1010,  2065,  2057,  2655,  1523,  2975,
         1996,  6258,  1524,  1037,  3112,  1010,  2008,  1056,  2038,  1037,
        14965,  4353,  2007,  3112,  9723,  1052,  1012,  2009,  4076,  1006,
         2156,  2036,  4248,  6912,  1018,  1012,  1020,  1007,  2008,  1996,
         9723,  1052,  1006,  1056,  1028,  1056,  1007,  2008,  1996, 10811,
         2003,  2145,  1999,  1996,  6258,  2012,  2051,  1056,  2003,  1010,
         2005,  2312,  1050,  1010,  2092, 15796,  2094,  2011,   102])"
447,1,['limit'], The exponential distribution,seg_65,"but then, letting n → ∞, we obtain (recall a well-known limit from your calculus course)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  2021,  2059,  1010,  5599,  1050,  1585,  1601,  1010,  2057,
         6855,  1006,  9131,  1037,  2092,  1011,  2124,  5787,  2013,  2115,
        19276,  2607,  1007,   102])"
448,1,"['function', 'density function', 'probability', 'probability density function', 'distribution', 'distribution function']", The exponential distribution,seg_65,"− v t it follows that the distribution function of t equals 1 − e v , and differentiating we obtain that the probability density function ft of t is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  1597,  1058,  1056,  2009,  4076,  2008,  1996,  4353,  3853,
         1997,  1056, 19635,  1015,  1597,  1041,  1058,  1010,  1998,  2367,
        15370,  2057,  6855,  2008,  1996,  9723,  4304,  3853,  3027,  1997,
         1056,  2003,  5020,  2000,   102])"
449,1,"['exponential', 'parameter', 'exponential distribution', 'distribution']", The exponential distribution,seg_65,"this is an example of an exponential distribution, with parameter v/v .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  2023,  2003,  2019,  2742,  1997,  2019, 27258,  4353,  1010,
         2007, 16381,  1058,  1013,  1058,  1012,   102])"
450,1,"['continuous', 'parameter', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'exponential', 'variable']", The exponential distribution,seg_65,definition. a continuous random variable has an exponential distribution with parameter λ if its probability density function f is given by f(x) = 0 if x < 0 and,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  6210,  1012,  1037,  7142,  6721,  8023,  2038,  2019, 27258,
         4353,  2007, 16381,  1165,  2065,  2049,  9723,  4304,  3853,  1042,
         2003,  2445,  2011,  1042,  1006,  1060,  1007,  1027,  1014,  2065,
         1060,  1026,  1014,  1998,   102])"
451,1,['distribution'], The exponential distribution,seg_65,we denote this distribution by exp(λ).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  2057, 19090,  2023,  4353,  2011,  4654,  2361,  1006,  1165,
         1007,  1012,   102])"
452,1,"['distribution function', 'function', 'distribution']", The exponential distribution,seg_65,the distribution function f of an exp(λ) distribution is given by,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([ 101, 1996, 4353, 3853, 1042, 1997, 2019, 4654, 2361, 1006, 1165, 1007,
        4353, 2003, 2445, 2011,  102])"
453,1,"['function', 'density function', 'probability', 'probability density function', 'distribution', 'distribution function']", The exponential distribution,seg_65,in figure 5.4 we show the probability density function and the distribution function of the exp(0.25) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([ 101, 1999, 3275, 1019, 1012, 1018, 2057, 2265, 1996, 9723, 4304, 3853,
        1998, 1996, 4353, 3853, 1997, 1996, 4654, 2361, 1006, 1014, 1012, 2423,
        1007, 4353, 1012,  102])"
454,1,"['memoryless property', 'geometric', 'geometric distribution', 'exponential distribution', 'distribution', 'exponential']", The exponential distribution,seg_65,"since we obtained the exponential distribution directly from the geometric distribution it should not come as a surprise that the exponential distribution also satisfies the memoryless property, i.e., if x has an exponential distribution, then for all s, t > 0,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  2144,  2057,  4663,  1996, 27258,  4353,  3495,  2013,  1996,
        14965,  4353,  2009,  2323,  2025,  2272,  2004,  1037,  4474,  2008,
         1996, 27258,  4353,  2036,  2938,  2483, 14213,  1996,  3638,  3238,
         3200,  1010,  1045,  1012,  1041,  1012,  1010,  2065,  1060,  2038,
         2019, 27258,  4353,  1010,  2059,  2005,  2035,  1055,  1010,  1056,
         1028,  1014,  1010,   102])"
455,0,[], The exponential distribution,seg_65,"actually, this follows directly from",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 27258,  4353])","tensor([ 101, 2941, 1010, 2023, 4076, 3495, 2013,  102])"
456,1,"['parameter', 'probability', 'exponentially distributed', 'response', 'exponentially']", The exponential distribution,seg_65,quick exercise 5.4 a study of the response time of a certain computer system yields that the response time in seconds has an exponentially distributed time with parameter 0.25. what is the probability that the response time exceeds 5 seconds?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 27258,  4353])","tensor([  101,  4248,  6912,  1019,  1012,  1018,  1037,  2817,  1997,  1996,
         3433,  2051,  1997,  1037,  3056,  3274,  2291, 16189,  2008,  1996,
         3433,  2051,  1999,  3823,  2038,  2019, 27258,  2135,  5500,  2051,
         2007, 16381,  1014,  1012,  2423,  1012,  2054,  2003,  1996,  9723,
         2008,  1996,  3433,  2051, 23651,  1019,  3823,  1029,   102])"
457,1,"['probability', 'functions', 'level', 'random', 'densities', 'random variables', 'distribution', 'variables', 'pareto']", The Pareto distribution,seg_67,"more than a century ago the economist vilfredo pareto ([20]) noticed that the number of people whose income exceeded level x was well approximated by c/xα, for some constants c and α > 0 (it appears that for all countries α is around 1.5). a similar phenomenon occurs with city sizes, earthquake rupture areas, insurance claims, and sizes of commercial companies. when these quantities are modeled as realizations of random variables x , then their distribution functions are of the type f (x) = 1 − 1/xα for x ≥ 1. (here 1 is a more or less arbitrarily chosen starting point—what matters is the behavior for large x.) differentiating, we obtain probability densities of the form f(x) = α/xα+1. this motivates the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 11968, 18903,  4353])","tensor([  101,  2062,  2084,  1037,  2301,  3283,  1996, 11708,  6819, 10270,
        23417, 11968, 18903,  1006,  1031,  2322,  1033,  1007,  4384,  2008,
         1996,  2193,  1997,  2111,  3005,  3318, 14872,  2504,  1060,  2001,
         2092, 15796,  2094,  2011,  1039,  1013,  1060, 14608,  1010,  2005,
         2070,  5377,  2015,  1039,  1998,  1155,  1028,  1014,  1006,  2009,
         3544,  2008,  2005,  2035,  3032,  1155,  2003,  2105,  1015,  1012,
         1019,  1007,  1012,  1037,  2714,  9575,  5158,  2007,  2103, 10826,
         1010,  8372, 21766, 13876,  5397,  2752,  1010,  5427,  4447,  1010,
         1998, 10826,  1997,  3293,  3316,  1012,  2043,  2122, 12450,  2024,
        14440,  2004, 12393,  2015,  1997,  6721, 10857,  1060,  1010,  2059,
         2037,  4353,  4972,  2024,  1997,  1996,  2828,  1042,  1006,  1060,
         1007,  1027,  1015,  1597,  1015,  1013,  1060, 14608,  2005,  1060,
         1609,  1015,  1012,  1006,  2182,  1015,  2003,  1037,  2062,  2030,
         2625, 12098, 16313, 19848,  6588,  4217,  3225,  2391,  1517,  2054,
         5609,  2003,  1996,  5248,  2005,  2312,  1060,  1012,  1007,  2367,
        15370,  1010,  2057,  6855,  9723,  7939, 24279,  1997,  1996,  2433,
         1042,  1006,  1060,  1007,  1027,  1155,  1013,  1060, 14608,  1009,
         1015,  1012,  2023,  9587, 29068,  8520,  1996,  2206,  6210,  1012,
          102])"
458,1,"['continuous', 'parameter', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'pareto distribution', 'random variable', 'random', 'distribution', 'pareto', 'variable']", The Pareto distribution,seg_67,definition. a continuous random variable has a pareto distribution with parameter α > 0 if its probability density function f is given by f(x) = 0 if x < 1 and,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996, 11968, 18903,  4353])","tensor([  101,  6210,  1012,  1037,  7142,  6721,  8023,  2038,  1037, 11968,
        18903,  4353,  2007, 16381,  1155,  1028,  1014,  2065,  2049,  9723,
         4304,  3853,  1042,  2003,  2445,  2011,  1042,  1006,  1060,  1007,
         1027,  1014,  2065,  1060,  1026,  1015,  1998,   102])"
459,1,['distribution'], The Pareto distribution,seg_67,we denote this distribution by par(α).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11968, 18903,  4353])","tensor([  101,  2057, 19090,  2023,  4353,  2011, 11968,  1006,  1155,  1007,
         1012,   102])"
460,1,"['probability', 'distribution']", The Pareto distribution,seg_67,in figure 5.5 we depicted the probability density f and the distribution function f of the par(0.5) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 11968, 18903,  4353])","tensor([  101,  1999,  3275,  1019,  1012,  1019,  2057,  8212,  1996,  9723,
         4304,  1042,  1998,  1996,  4353,  3853,  1042,  1997,  1996, 11968,
         1006,  1014,  1012,  1019,  1007,  4353,  1012,   102])"
461,1,"['probability theory', 'errors', 'independent', 'normal distribution', 'normal', 'independent random variables', 'model', 'probability distribution', 'probability', 'random variables', 'random', 'distribution', 'variables', 'average']", The normal distribution,seg_69,"the normal distribution plays a central role in probability theory and statistics. one of its first applications was due to c.f. gauss, who used it in 1809 to model observational errors in astronomy; see [13]. we will see in chapter 14 that the normal distribution is an important tool to approximate the probability distribution of the average of independent random variables.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1.,
        1., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  1996,  3671,  4353,  3248,  1037,  2430,  2535,  1999,  9723,
         3399,  1998,  6747,  1012,  2028,  1997,  2049,  2034,  5097,  2001,
         2349,  2000,  1039,  1012,  1042,  1012, 11721, 17854,  1010,  2040,
         2109,  2009,  1999, 12861,  2000,  2944,  8089,  2389, 10697,  1999,
        12799,  1025,  2156,  1031,  2410,  1033,  1012,  2057,  2097,  2156,
         1999,  3127,  2403,  2008,  1996,  3671,  4353,  2003,  2019,  2590,
         6994,  2000, 15796,  1996,  9723,  4353,  1997,  1996,  2779,  1997,
         2981,  6721, 10857,  1012,   102])"
462,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'normal', 'parameters', 'variable']", The normal distribution,seg_69,definition. a continuous random variable has a normal distribution with parameters µ and σ2 > 0 if its probability density function f is given by,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  6210,  1012,  1037,  7142,  6721,  8023,  2038,  1037,  3671,
         4353,  2007, 11709,  1085,  1998,  1173,  2475,  1028,  1014,  2065,
         2049,  9723,  4304,  3853,  1042,  2003,  2445,  2011,   102])"
463,1,['distribution'], The normal distribution,seg_69,"we denote this distribution by n(µ, σ2).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  2057, 19090,  2023,  4353,  2011,  1050,  1006,  1085,  1010,
         1173,  2475,  1007,  1012,   102])"
464,1,"['function', 'normal distribution', 'density function', 'probability', 'probability density function', 'normal', 'distribution', 'distribution function']", The normal distribution,seg_69,in figure 5.6 the graphs of the probability density function f and distribution function f of the normal distribution with µ = 3 and σ2 = 6.25 are displayed.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([1996, 3671, 4353])","tensor([  101,  1999,  3275,  1019,  1012,  1020,  1996, 19287,  1997,  1996,
         9723,  4304,  3853,  1042,  1998,  4353,  3853,  1042,  1997,  1996,
         3671,  4353,  2007,  1085,  1027,  1017,  1998,  1173,  2475,  1027,
         1020,  1012,  2423,  2024,  6913,  1012,   102])"
465,1,"['distribution function', 'function', 'distribution']", The normal distribution,seg_69,"if x has an n(µ, σ2) distribution, then its distribution function is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0.])","tensor([1996, 3671, 4353])","tensor([ 101, 2065, 1060, 2038, 2019, 1050, 1006, 1085, 1010, 1173, 2475, 1007,
        4353, 1010, 2059, 2049, 4353, 3853, 2003, 2445, 2011,  102])"
466,1,"['function', 'normal distribution', 'density function', 'transformation', 'table', 'probability density function', 'probability', 'standard normal distribution', 'standard normal', 'random variable', 'random', 'normal', 'standard', 'distribution', 'variable']", The normal distribution,seg_69,"unfortunately there is no explicit expression for f ; f has no antiderivative. however, as we shall see in chapter 8, any n(µ, σ2) distributed random variable can be turned into an n(0, 1) distributed random variable by a simple transformation. as a consequence, a table of the n(0, 1) distribution suffices. the latter is called the standard normal distribution, and because of its special role the letter φ has been reserved for its probability density function:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  6854,  2045,  2003,  2053, 13216,  3670,  2005,  1042,  1025,
         1042,  2038,  2053,  3424,  4063, 11444,  6024,  1012,  2174,  1010,
         2004,  2057,  4618,  2156,  1999,  3127,  1022,  1010,  2151,  1050,
         1006,  1085,  1010,  1173,  2475,  1007,  5500,  6721,  8023,  2064,
         2022,  2357,  2046,  2019,  1050,  1006,  1014,  1010,  1015,  1007,
         5500,  6721,  8023,  2011,  1037,  3722,  8651,  1012,  2004,  1037,
         9509,  1010,  1037,  2795,  1997,  1996,  1050,  1006,  1014,  1010,
         1015,  1007,  4353, 10514, 26989,  9623,  1012,  1996,  3732,  2003,
         2170,  1996,  3115,  3671,  4353,  1010,  1998,  2138,  1997,  2049,
         2569,  2535,  1996,  3661,  1176,  2038,  2042,  9235,  2005,  2049,
         9723,  4304,  3853,  1024,   102])"
467,1,"['table', 'standard normal random variable', 'symmetric', 'right tail probabilities', 'random variable', 'normal', 'function', 'probability', 'probabilities', 'tail probabilities', 'normal random variable', 'standard', 'tail', 'standard normal', 'random', 'distribution', 'distribution function', 'variable']", The normal distribution,seg_69,"note that φ is symmetric around zero: φ(−x) = φ(x) for each x. the corresponding distribution function is denoted by φ. the table for the standard normal distribution (see table b.1) does not contain the values of φ(a), but rather the so-called right tail probabilities 1−φ(a). if, for instance, we want to know the probability that a standard normal random variable z is smaller than or equal to 1, we use that p(z ≤ 1) = 1 − p(z ≥ 1). in the table we find that p(z ≥ 1) = 1−φ(1) is equal to 0.1587. hence p(z ≤ 1) = 1−0.1587 = 0.8413. with the table you can handle tail probabilities with numbers a given to two decimals. to find, for instance, p(z > 1.07), we stay in the same row in the table but move to the seventh column to find that p(z > 1.07) = 0.1423.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  3602,  2008,  1176,  2003, 19490,  2105,  5717,  1024,  1176,
         1006,  1597,  2595,  1007,  1027,  1176,  1006,  1060,  1007,  2005,
         2169,  1060,  1012,  1996,  7978,  4353,  3853,  2003, 19537,  2011,
         1176,  1012,  1996,  2795,  2005,  1996,  3115,  3671,  4353,  1006,
         2156,  2795,  1038,  1012,  1015,  1007,  2515,  2025,  5383,  1996,
         5300,  1997,  1176,  1006,  1037,  1007,  1010,  2021,  2738,  1996,
         2061,  1011,  2170,  2157,  5725,  4013,  3676, 14680,  1015, 22543,
        29736,  1006,  1037,  1007,  1012,  2065,  1010,  2005,  6013,  1010,
         2057,  2215,  2000,  2113,  1996,  9723,  2008,  1037,  3115,  3671,
         6721,  8023,  1062,  2003,  3760,  2084,  2030,  5020,  2000,  1015,
         1010,  2057,  2224,  2008,  1052,  1006,  1062,  1608,  1015,  1007,
         1027,  1015,  1597,  1052,  1006,  1062,  1609,  1015,  1007,  1012,
         1999,  1996,  2795,  2057,  2424,  2008,  1052,  1006,  1062,  1609,
         1015,  1007,  1027,  1015, 22543, 29736,  1006,  1015,  1007,  2003,
         5020,  2000,  1014,  1012, 17696,  2581,  1012,  6516,  1052,  1006,
         1062,  1608,  1015,  1007,  1027,  1015, 22543,  2692,  1012, 17696,
         2581,  1027,  1014,  1012,  6391, 17134,  1012,  2007,  1996,  2795,
         2017,  2064,  5047,  5725,  4013,  3676, 14680,  2007,  3616,  1037,
         2445,  2000,  2048, 26066,  2015,  1012,  2000,  2424,  1010,  2005,
         6013,  1010,  1052,  1006,  1062,  1028,  1015,  1012,  5718,  1007,
         1010,  2057,  2994,  1999,  1996,  2168,  5216,  1999,  1996,  2795,
         2021,  2693,  2000,  1996,  5066,  5930,  2000,  2424,  2008,  1052,
         1006,  1062,  1028,  1015,  1012,  5718,  1007,  1027,  1014,  1012,
        16087,  2509,  1012,   102])"
468,1,"['normal distribution', 'standard normal distribution', 'table', 'standard normal', 'random variable', 'random', 'normal', 'standard', 'distribution', 'variable']", The normal distribution,seg_69,quick exercise 5.5 let the random variable z have a standard normal distribution. use table b.1 to find p(z ≤ 0.75). how do you know—without doing any calculations—that the answer should be larger than 0.5?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([1996, 3671, 4353])","tensor([  101,  4248,  6912,  1019,  1012,  1019,  2292,  1996,  6721,  8023,
         1062,  2031,  1037,  3115,  3671,  4353,  1012,  2224,  2795,  1038,
         1012,  1015,  2000,  2424,  1052,  1006,  1062,  1608,  1014,  1012,
         4293,  1007,  1012,  2129,  2079,  2017,  2113,  1517,  2302,  2725,
         2151, 16268,  1517,  2008,  1996,  3437,  2323,  2022,  3469,  2084,
         1014,  1012,  1019,  1029,   102])"
469,1,"['mean', 'parameter', 'residence time', 'exponential distribution', 'control', 'process', 'distribution', 'exponential']", Quantiles,seg_71,"recall the chemical reactor example, where the residence time t , measured in minutes, has an exponential distribution with parameter λ = v/v = 0.25. as we shall see in the next chapters, a consequence of this choice of λ is that the mean time the particle stays in the vessel is 4 minutes. however, from the viewpoint of process control this is not the quantity of interest. often, there will be some minimal amount of time the particle has to stay in the vessel to participate in the chemical reaction, and we would want that at least 90% of the particles stay in the vessel this minimal amount of time. in other words, we are interested in the number q with the property that p(t > q) = 0.9, or equivalently,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  9131,  1996,  5072, 13308,  2742,  1010,  2073,  1996,  5039,
         2051,  1056,  1010,  7594,  1999,  2781,  1010,  2038,  2019, 27258,
         4353,  2007, 16381,  1165,  1027,  1058,  1013,  1058,  1027,  1014,
         1012,  2423,  1012,  2004,  2057,  4618,  2156,  1999,  1996,  2279,
         9159,  1010,  1037,  9509,  1997,  2023,  3601,  1997,  1165,  2003,
         2008,  1996,  2812,  2051,  1996, 10811, 12237,  1999,  1996,  6258,
         2003,  1018,  2781,  1012,  2174,  1010,  2013,  1996, 21386,  1997,
         2832,  2491,  2023,  2003,  2025,  1996, 11712,  1997,  3037,  1012,
         2411,  1010,  2045,  2097,  2022,  2070, 10124,  3815,  1997,  2051,
         1996, 10811,  2038,  2000,  2994,  1999,  1996,  6258,  2000,  5589,
         1999,  1996,  5072,  4668,  1010,  1998,  2057,  2052,  2215,  2008,
         2012,  2560,  3938,  1003,  1997,  1996,  9309,  2994,  1999,  1996,
         6258,  2023, 10124,  3815,  1997,  2051,  1012,  1999,  2060,  2616,
         1010,  2057,  2024,  4699,  1999,  1996,  2193,  1053,  2007,  1996,
         3200,  2008,  1052,  1006,  1056,  1028,  1053,  1007,  1027,  1014,
         1012,  1023,  1010,  2030,  5662,  2135,  1010,   102])"
470,1,"['quantile', 'distribution', 'percentile', 'case']", Quantiles,seg_71,the number q is called the 0.1th quantile or 10th percentile of the distribution. in the case at hand it is easy to determine. we should have,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  1996,  2193,  1053,  2003,  2170,  1996,  1014,  1012,  1015,
         2705, 24110, 15286,  2030,  6049,  3867,  9463,  1997,  1996,  4353,
         1012,  1999,  1996,  2553,  2012,  2192,  2009,  2003,  3733,  2000,
         5646,  1012,  2057,  2323,  2031,   102])"
471,1,"['residence time', 'mean']", Quantiles,seg_71,"−0.25q this holds exactly when e = 0.9 or when −0.25q = ln(0.9) = −0.105. so q = 0.42. hence, although the mean residence time is 4 minutes, 10% of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([24110, 15286,  2015])","tensor([ 101, 1597, 2692, 1012, 2423, 4160, 2023, 4324, 3599, 2043, 1041, 1027,
        1014, 1012, 1023, 2030, 2043, 1597, 2692, 1012, 2423, 4160, 1027, 1048,
        2078, 1006, 1014, 1012, 1023, 1007, 1027, 1597, 2692, 1012, 8746, 1012,
        2061, 1053, 1027, 1014, 1012, 4413, 1012, 6516, 1010, 2348, 1996, 2812,
        5039, 2051, 2003, 1018, 2781, 1010, 2184, 1003, 1997,  102])"
472,0,[], Quantiles,seg_71,"the particles stays less than 0.42 minute in the vessel, which is just slightly more than 25 seconds! we use the following general definition.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([24110, 15286,  2015])","tensor([  101,  1996,  9309, 12237,  2625,  2084,  1014,  1012,  4413,  3371,
         1999,  1996,  6258,  1010,  2029,  2003,  2074,  3621,  2062,  2084,
         2423,  3823,   999,  2057,  2224,  1996,  2206,  2236,  6210,  1012,
          102])"
473,1,"['continuous', 'quantile', 'continuous random variable', 'random variable', 'percentile', 'random', 'distribution', 'variable']", Quantiles,seg_71,definition. let x be a continuous random variable and let p be a number between 0 and 1. the pth quantile or 100pth percentile of the distribution of x is the smallest number qp such that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  6210,  1012,  2292,  1060,  2022,  1037,  7142,  6721,  8023,
         1998,  2292,  1052,  2022,  1037,  2193,  2090,  1014,  1998,  1015,
         1012,  1996, 13866,  2232, 24110, 15286,  2030,  2531, 13876,  2232,
         3867,  9463,  1997,  1996,  4353,  1997,  1060,  2003,  1996, 10479,
         2193,  1053,  2361,  2107,  2008,   102])"
474,1,"['percentile', 'median', 'distribution']", Quantiles,seg_71,the median of a distribution is its 50th percentile.,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  1996,  3991,  1997,  1037,  4353,  2003,  2049, 12951,  3867,
         9463,  1012,   102])"
475,1,"['median', 'distribution']", Quantiles,seg_71,"quick exercise 5.6 what is the median of the u(2, 7) distribution?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([24110, 15286,  2015])","tensor([ 101, 4248, 6912, 1019, 1012, 1020, 2054, 2003, 1996, 3991, 1997, 1996,
        1057, 1006, 1016, 1010, 1021, 1007, 4353, 1029,  102])"
476,1,"['continuous', 'interval', 'continuous random variables', 'random', 'random variables', 'variables']", Quantiles,seg_71,"for continuous random variables qp is often easy to determine. indeed, if f is strictly increasing from 0 to 1 on some interval (which may be infinite to one or both sides), then",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  2005,  7142,  6721, 10857,  1053,  2361,  2003,  2411,  3733,
         2000,  5646,  1012,  5262,  1010,  2065,  1042,  2003,  9975,  4852,
         2013,  1014,  2000,  1015,  2006,  2070, 13483,  1006,  2029,  2089,
         2022, 10709,  2000,  2028,  2030,  2119,  3903,  1007,  1010,  2059,
          102])"
477,1,['distribution'], Quantiles,seg_71,where f inv is the inverse of f . this is illustrated in figure 5.7 for the exp(0.25) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  2073,  1042,  1999,  2615,  2003,  1996, 19262,  1997,  1042,
         1012,  2023,  2003,  7203,  1999,  3275,  1019,  1012,  1021,  2005,
         1996,  4654,  2361,  1006,  1014,  1012,  2423,  1007,  4353,  1012,
          102])"
478,1,"['density function', 'table', 'exponential distribution', 'normal distribution', 'probability density function', 'normal', 'function', 'standard normal distribution', 'probability', 'standard', 'quantiles', 'percentile', 'standard normal', 'distribution', 'exponential', 'distribution function']", Quantiles,seg_71,"for an exponential distribution it is easy to compute quantiles. this is different for the standard normal distribution, where we have to use a table (like table b.1). for example, the 90th percentile of a standard normal is the number q0.9 such that φ(q0.9) = 0.9, which is the same as 1 − φ(q0.9) = 0.1, and the table gives us q0.9 = 1.28. this is illustrated in figure 5.8, with both the probability density function and the distribution function of the standard normal distribution.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  2005,  2019, 27258,  4353,  2009,  2003,  3733,  2000, 24134,
        24110, 15286,  2015,  1012,  2023,  2003,  2367,  2005,  1996,  3115,
         3671,  4353,  1010,  2073,  2057,  2031,  2000,  2224,  1037,  2795,
         1006,  2066,  2795,  1038,  1012,  1015,  1007,  1012,  2005,  2742,
         1010,  1996,  3938,  2705,  3867,  9463,  1997,  1037,  3115,  3671,
         2003,  1996,  2193,  1053,  2692,  1012,  1023,  2107,  2008,  1176,
         1006,  1053,  2692,  1012,  1023,  1007,  1027,  1014,  1012,  1023,
         1010,  2029,  2003,  1996,  2168,  2004,  1015,  1597,  1176,  1006,
         1053,  2692,  1012,  1023,  1007,  1027,  1014,  1012,  1015,  1010,
         1998,  1996,  2795,  3957,  2149,  1053,  2692,  1012,  1023,  1027,
         1015,  1012,  2654,  1012,  2023,  2003,  7203,  1999,  3275,  1019,
         1012,  1022,  1010,  2007,  2119,  1996,  9723,  4304,  3853,  1998,
         1996,  4353,  3853,  1997,  1996,  3115,  3671,  4353,  1012,   102])"
479,1,"['quantile', 'normal distribution', 'standard normal distribution', 'standard normal', 'normal', 'standard', 'distribution']", Quantiles,seg_71,"quick exercise 5.7 find the 0.95th quantile q0.95 of a standard normal distribution, accurate to two decimals.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24110, 15286,  2015])","tensor([  101,  4248,  6912,  1019,  1012,  1021,  2424,  1996,  1014,  1012,
         5345,  2705, 24110, 15286,  1053,  2692,  1012,  5345,  1997,  1037,
         3115,  3671,  4353,  1010,  8321,  2000,  2048, 26066,  2015,  1012,
          102])"
480,1,['probability'], Solutions to the quick exercises,seg_73,"1 1/(2√x) dx = 1 (so f is a probability density function—nonnegativity being obvious), and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1015,  1015,  1013,  1006,  1016, 30127,  2595,  1007,  1040,
         2595,  1027,  1015,  1006,  2061,  1042,  2003,  1037,  9723,  4304,
         3853,  1517,  2512,  2638, 20697,  7730,  2108,  5793,  1007,  1010,
         1998,   102])"
481,1,"['random', 'random variable', 'variable']", Solutions to the quick exercises,seg_73,"actually, the random variable x arises in a natural way; see equation (7.1).",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2941,  1010,  1996,  6721,  8023,  1060, 18653,  1999,  1037,
         3019,  2126,  1025,  2156,  8522,  1006,  1021,  1012,  1015,  1007,
         1012,   102])"
482,1,"['function', 'distribution', 'distribution function']", Solutions to the quick exercises,seg_73,in other words; the distribution function increases linearly from the value 0 in α to the value 1 in β.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1999, 2060, 2616, 1025, 1996, 4353, 3853, 7457, 7399, 2135, 2013,
        1996, 3643, 1014, 1999, 1155, 2000, 1996, 3643, 1015, 1999, 1156, 1012,
         102])"
483,1,['response'], Solutions to the quick exercises,seg_73,"5.4 if x is the response time, we ask for p(x > 5). this equals",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1019,  1012,  1018,  2065,  1060,  2003,  1996,  3433,  2051,
         1010,  2057,  3198,  2005,  1052,  1006,  1060,  1028,  1019,  1007,
         1012,  2023, 19635,   102])"
484,1,"['normal distribution', 'standard normal distribution', 'table', 'probability', 'standard normal', 'symmetry', 'normal', 'standard', 'distribution']", Solutions to the quick exercises,seg_73,"5.5 in the eighth row and sixth column of the table, we find that 1−φ(0.75) = 0.2266. hence the answer is 1− 0.2266 = 0.7734. because of the symmetry of the probability density φ, half of the mass of a standard normal distribution lies on the negative axis. hence for any number a > 0, it should be true that p(z ≤ a) > p(z ≤ 0) = 0.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1019,  1012,  1019,  1999,  1996,  5964,  5216,  1998,  4369,
         5930,  1997,  1996,  2795,  1010,  2057,  2424,  2008,  1015, 22543,
        29736,  1006,  1014,  1012,  4293,  1007,  1027,  1014,  1012, 21035,
         2575,  1012,  6516,  1996,  3437,  2003,  1015, 22543,  1014,  1012,
        21035,  2575,  1027,  1014,  1012,  6255, 22022,  1012,  2138,  1997,
         1996, 14991,  1997,  1996,  9723,  4304,  1176,  1010,  2431,  1997,
         1996,  3742,  1997,  1037,  3115,  3671,  4353,  3658,  2006,  1996,
         4997,  8123,  1012,  6516,  2005,  2151,  2193,  1037,  1028,  1014,
         1010,  2009,  2323,  2022,  2995,  2008,  1052,  1006,  1062,  1608,
         1037,  1007,  1028,  1052,  1006,  1062,  1608,  1014,  1007,  1027,
         1014,  1012,  1019,  1012,   102])"
485,1,"['function', 'interval', 'distribution', 'distribution function', 'median']", Solutions to the quick exercises,seg_73,"5.6 the median is the number q0.5 = f inv(0.5). you either see directly that you have got half of the mass to both sides of the middle of the interval, hence q0.5 = (2 + 7)/2 = 4.5, or you solve with the distribution function:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1019,  1012,  1020,  1996,  3991,  2003,  1996,  2193,  1053,
         2692,  1012,  1019,  1027,  1042,  1999,  2615,  1006,  1014,  1012,
         1019,  1007,  1012,  2017,  2593,  2156,  3495,  2008,  2017,  2031,
         2288,  2431,  1997,  1996,  3742,  2000,  2119,  3903,  1997,  1996,
         2690,  1997,  1996, 13483,  1010,  6516,  1053,  2692,  1012,  1019,
         1027,  1006,  1016,  1009,  1021,  1007,  1013,  1016,  1027,  1018,
         1012,  1019,  1010,  2030,  2017,  9611,  2007,  1996,  4353,  3853,
         1024,   102])"
486,1,['table'], Solutions to the quick exercises,seg_73,"5.7 since φ(q0.95) = 0.95 is the same as 1 − φ(q0.95) = 0.05, the table gives us q0.95 = 1.64, or more precisely, if we interpolate between the fourth and the fifth column; 1.645.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1019,  1012,  1021,  2144,  1176,  1006,  1053,  2692,  1012,
         5345,  1007,  1027,  1014,  1012,  5345,  2003,  1996,  2168,  2004,
         1015,  1597,  1176,  1006,  1053,  2692,  1012,  5345,  1007,  1027,
         1014,  1012,  5709,  1010,  1996,  2795,  3957,  2149,  1053,  2692,
         1012,  5345,  1027,  1015,  1012,  4185,  1010,  2030,  2062, 10785,
         1010,  2065,  2057,  6970, 18155,  3686,  2090,  1996,  2959,  1998,
         1996,  3587,  5930,  1025,  1015,  1012,  4185,  2629,  1012,   102])"
487,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'variable']", Exercises,seg_75,5.1 let x be a continuous random variable with probability density function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0.])",tensor([11110]),"tensor([ 101, 1019, 1012, 1015, 2292, 1060, 2022, 1037, 7142, 6721, 8023, 2007,
        9723, 4304, 3853,  102])"
488,1,"['distribution function', 'function', 'distribution']", Exercises,seg_75,"b. determine the distribution function f of x , and draw its graph.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996,  4353,  3853,  1042,  1997,  1060,
         1010,  1998,  4009,  2049, 10629,  1012,   102])"
489,1,"['random', 'random variable', 'variable']", Exercises,seg_75,"5.2 let x be a random variable that takes values in [0, 1], and is further given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1019, 1012, 1016, 2292, 1060, 2022, 1037, 6721, 8023, 2008, 3138,
        5300, 1999, 1031, 1014, 1010, 1015, 1033, 1010, 1998, 2003, 2582, 2445,
        2011,  102])"
490,1,"['continuous', 'continuous random variable', 'function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Exercises,seg_75,"5.3 let a continuous random variable x be given that takes values in [0, 1], and whose distribution function f satisfies",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  1017,  2292,  1037,  7142,  6721,  8023,  1060,
         2022,  2445,  2008,  3138,  5300,  1999,  1031,  1014,  1010,  1015,
         1033,  1010,  1998,  3005,  4353,  3853,  1042,  2938,  2483, 14213,
          102])"
491,1,"['function', 'density function', 'probability', 'probability density function']", Exercises,seg_75,4 ≤ x ≤ 3 4). b. what is the probability density function of x?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 1018, 1608, 1060, 1608, 1017, 1018, 1007, 1012, 1038, 1012, 2054,
        2003, 1996, 9723, 4304, 3853, 1997, 1060, 1029,  102])"
492,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'distribution', 'variable']", Exercises,seg_75,"5.4 jensen, arriving at a bus stop, just misses the bus. suppose that he decides to walk if the (next) bus takes longer than 5 minutes to arrive. suppose also that the time in minutes between the arrivals of buses at the bus stop is a continuous random variable with a u(4, 6) distribution. let x be the time that jensen will wait.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  1018, 14857,  1010,  7194,  2012,  1037,  3902,
         2644,  1010,  2074, 22182,  1996,  3902,  1012,  6814,  2008,  2002,
         7288,  2000,  3328,  2065,  1996,  1006,  2279,  1007,  3902,  3138,
         2936,  2084,  1019,  2781,  2000,  7180,  1012,  6814,  2036,  2008,
         1996,  2051,  1999,  2781,  2090,  1996, 25470,  1997,  7793,  2012,
         1996,  3902,  2644,  2003,  1037,  7142,  6721,  8023,  2007,  1037,
         1057,  1006,  1018,  1010,  1020,  1007,  4353,  1012,  2292,  1060,
         2022,  1996,  2051,  2008, 14857,  2097,  3524,  1012,   102])"
493,1,['probability'], Exercises,seg_75,a. what is the probability that x is less than 4 1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2054, 2003, 1996, 9723, 2008, 1060, 2003, 2625, 2084,
        1018, 1015,  102])"
494,1,['probability'], Exercises,seg_75,b. what is the probability that x equals 5 (minutes)?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2003,  1996,  9723,  2008,  1060, 19635,
         1019,  1006,  2781,  1007,  1029,   102])"
495,1,"['continuous', 'continuous random variable', 'discrete random variable', 'discrete', 'random variable', 'random', 'variable']", Exercises,seg_75,c. is x a discrete random variable or a continuous random variable?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2003,  1060,  1037, 16246,  6721,  8023,  2030,
         1037,  7142,  6721,  8023,  1029,   102])"
496,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'variable']", Exercises,seg_75,5.5 the probability density function f of a continuous random variable x,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1019, 1012, 1019, 1996, 9723, 4304, 3853, 1042, 1997, 1037, 7142,
        6721, 8023, 1060,  102])"
497,1,"['distribution function', 'function', 'distribution']", Exercises,seg_75,b. compute the distribution function of x .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  4353,  3853,  1997,  1060,  1012,
          102])"
498,1,['distribution'], Exercises,seg_75,5.6 let x have an exp(0.2) distribution. compute p(x > 5).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  1020,  2292,  1060,  2031,  2019,  4654,  2361,
         1006,  1014,  1012,  1016,  1007,  4353,  1012, 24134,  1052,  1006,
         1060,  1028,  1019,  1007,  1012,   102])"
499,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'experiment', 'model', 'variable']", Exercises,seg_75,"5.7 the score of a student on a certain exam is represented by a number between 0 and 1. suppose that the student passes the exam if this number is at least 0.55. suppose we model this experiment by a continuous random variable s, the score, whose probability density function is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  1021,  1996,  3556,  1997,  1037,  3076,  2006,
         1037,  3056, 11360,  2003,  3421,  2011,  1037,  2193,  2090,  1014,
         1998,  1015,  1012,  6814,  2008,  1996,  3076,  5235,  1996, 11360,
         2065,  2023,  2193,  2003,  2012,  2560,  1014,  1012,  4583,  1012,
         6814,  2057,  2944,  2023,  7551,  2011,  1037,  7142,  6721,  8023,
         1055,  1010,  1996,  3556,  1010,  3005,  9723,  4304,  3853,  2003,
         2445,  2011,   102])"
500,1,['probability'], Exercises,seg_75,a. what is the probability that the student fails the exam?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2003,  1996,  9723,  2008,  1996,  3076,
        11896,  1996, 11360,  1029,   102])"
501,0,[], Exercises,seg_75,"b. what is the score that he will obtain with a 50% chance, in other words,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1038, 1012, 2054, 2003, 1996, 3556, 2008, 2002, 2097, 6855, 2007,
        1037, 2753, 1003, 3382, 1010, 1999, 2060, 2616, 1010,  102])"
502,1,"['percentile', 'distribution']", Exercises,seg_75,what is the 50th percentile of the score distribution?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2054,  2003,  1996, 12951,  3867,  9463,  1997,  1996,  3556,
         4353,  1029,   102])"
503,1,"['distribution function', 'function', 'distribution']", Exercises,seg_75,5.8 consider quick exercise 5.2. for another dart thrower it is given that his distance to the center of the disc y is described by the following distribution function:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  1022,  5136,  4248,  6912,  1019,  1012,  1016,
         1012,  2005,  2178, 14957,  5466,  2121,  2009,  2003,  2445,  2008,
         2010,  3292,  2000,  1996,  2415,  1997,  1996,  5860,  1061,  2003,
         2649,  2011,  1996,  2206,  4353,  3853,  1024,   102])"
504,1,"['function', 'density function', 'probability', 'probability density function']", Exercises,seg_75,a. sketch the probability density function g(y) = d g(y).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 11080,  1996,  9723,  4304,  3853,  1043,  1006,
         1061,  1007,  1027,  1040,  1043,  1006,  1061,  1007,  1012,   102])"
505,0,[], Exercises,seg_75,dy b. is this person “better” than the person in quick exercise 5.2?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1040, 2100, 1038, 1012, 2003, 2023, 2711, 1523, 2488, 1524, 2084,
        1996, 2711, 1999, 4248, 6912, 1019, 1012, 1016, 1029,  102])"
506,1,"['function', 'associated', 'distribution', 'distribution function']", Exercises,seg_75,c. sketch a distribution function associated to a person who in 90% of his,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 11080,  1037,  4353,  3853,  3378,  2000,  1037,
         2711,  2040,  1999,  3938,  1003,  1997,  2010,   102])"
507,0,[], Exercises,seg_75,throws hits the disc no further than 0.1 · r of the center.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 11618,  4978,  1996,  5860,  2053,  2582,  2084,  1014,  1012,
         1015,  1087,  1054,  1997,  1996,  2415,  1012,   102])"
508,1,"['random', 'random variable', 'variable']", Exercises,seg_75,"5.9 suppose we choose arbitrarily a point from the square with corners at (2,1), (3,1), (2,2), and (3,2). the random variable a is the area of the triangle with its corners at (2,1), (3,1) and the chosen point (see figure 5.9).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  1023,  6814,  2057,  5454, 12098, 16313, 19848,
         6588,  1037,  2391,  2013,  1996,  2675,  2007,  8413,  2012,  1006,
         1016,  1010,  1015,  1007,  1010,  1006,  1017,  1010,  1015,  1007,
         1010,  1006,  1016,  1010,  1016,  1007,  1010,  1998,  1006,  1017,
         1010,  1016,  1007,  1012,  1996,  6721,  8023,  1037,  2003,  1996,
         2181,  1997,  1996,  9546,  2007,  2049,  8413,  2012,  1006,  1016,
         1010,  1015,  1007,  1010,  1006,  1017,  1010,  1015,  1007,  1998,
         1996,  4217,  2391,  1006,  2156,  3275,  1019,  1012,  1023,  1007,
         1012,   102])"
509,1,['set'], Exercises,seg_75,"a. what is the largest area a that can occur, and what is the set of points",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2054, 2003, 1996, 2922, 2181, 1037, 2008, 2064, 5258,
        1010, 1998, 2054, 2003, 1996, 2275, 1997, 2685,  102])"
510,1,"['distribution function', 'function', 'distribution']", Exercises,seg_75,b. determine the distribution function f of a.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 5646, 1996, 4353, 3853, 1042, 1997, 1037, 1012,  102])"
511,1,"['function', 'density function', 'probability', 'probability density function']", Exercises,seg_75,c. determine the probability density function f of a.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 5646, 1996, 9723, 4304, 3853, 1042, 1997, 1037, 1012,
         102])"
512,1,"['mean', 'parameter', 'residence time', 'percentage']", Exercises,seg_75,5.10 consider again the chemical reactor example with parameter λ = 0.5. we saw in section 5.6 that 10% of the particles stay in the vessel no longer than about 12 seconds—while the mean residence time is 2 minutes. which percentage of the particles stay no longer than 2 minutes in the vessel?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  2184,  5136,  2153,  1996,  5072, 13308,  2742,
         2007, 16381,  1165,  1027,  1014,  1012,  1019,  1012,  2057,  2387,
         1999,  2930,  1019,  1012,  1020,  2008,  2184,  1003,  1997,  1996,
         9309,  2994,  1999,  1996,  6258,  2053,  2936,  2084,  2055,  2260,
         3823,  1517,  2096,  1996,  2812,  5039,  2051,  2003,  1016,  2781,
         1012,  2029,  7017,  1997,  1996,  9309,  2994,  2053,  2936,  2084,
         1016,  2781,  1999,  1996,  6258,  1029,   102])"
513,1,"['median', 'distribution']", Exercises,seg_75,5.11 compute the median of an exp(λ) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  2340, 24134,  1996,  3991,  1997,  2019,  4654,
         2361,  1006,  1165,  1007,  4353,  1012,   102])"
514,1,"['median', 'distribution']", Exercises,seg_75,5.12 compute the median of a par(1) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1019,  1012,  2260, 24134,  1996,  3991,  1997,  1037, 11968,
         1006,  1015,  1007,  4353,  1012,   102])"
515,1,"['normal distribution', 'standard normal distribution', 'standard normal', 'random variable', 'random', 'normal', 'standard', 'distribution', 'variable']", Exercises,seg_75,5.13 we consider a random variable z with a standard normal distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1019, 1012, 2410, 2057, 5136, 1037, 6721, 8023, 1062, 2007, 1037,
        3115, 3671, 4353, 1012,  102])"
516,1,"['function', 'density function', 'probability', 'probability density function', 'symmetry']", Exercises,seg_75,a. show why the symmetry of the probability density function φ of z implies,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2265,  2339,  1996, 14991,  1997,  1996,  9723,
         4304,  3853,  1176,  1997,  1062, 12748,   102])"
517,1,"['normal distribution', 'standard normal distribution', 'standard normal', 'normal', 'standard', 'distribution', 'percentile']", Exercises,seg_75,5.14 determine the 10th percentile of a standard normal distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1019, 1012, 2403, 5646, 1996, 6049, 3867, 9463, 1997, 1037, 3115,
        3671, 4353, 1012,  102])"
518,1,"['simulation', 'outcomes', 'probabilistic', 'stochastic simulation', 'probabilistic models', 'random', 'random variables', 'model', 'variables']", Simulation,seg_77,"sometimes probabilistic models are so complex that the tools of mathematical analysis are not sufficient to answer all relevant questions about them. stochastic simulation is an alternative approach: values are generated for the random variables and inserted into the model, thus mimicking outcomes for the whole system. it is shown in this chapter how one can use uniform random number generators to mimic random variables. also two larger simulation examples are presented.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12504]),"tensor([  101,  2823,  4013,  3676, 27965,  4588,  4275,  2024,  2061,  3375,
         2008,  1996,  5906,  1997,  8045,  4106,  2024,  2025,  7182,  2000,
         3437,  2035,  7882,  3980,  2055,  2068,  1012,  2358, 11663, 20875,
        12504,  2003,  2019,  4522,  3921,  1024,  5300,  2024,  7013,  2005,
         1996,  6721, 10857,  1998, 12889,  2046,  1996,  2944,  1010,  2947,
        23150,  6834, 13105,  2005,  1996,  2878,  2291,  1012,  2009,  2003,
         3491,  1999,  2023,  3127,  2129,  2028,  2064,  2224,  6375,  6721,
         2193, 16937,  2000, 23150,  6721, 10857,  1012,  2036,  2048,  3469,
        12504,  4973,  2024,  3591,  1012,   102])"
519,1,"['model', 'rates']", What is simulation,seg_79,"in many areas of science, technology, government, and business, models are used to gain understanding of some part of reality (the portion of interest is often referred to as “the system”). sometimes these are physical models, such as a scale model of an airplane in a wind tunnel or a scale model of a chemical plant. other models are abstract, such as macroeconomic models consisting of equations relating things like interest rates, unemployment, and inflation or partial differential equations describing global weather patterns.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2054,  2003, 12504])","tensor([  101,  1999,  2116,  2752,  1997,  2671,  1010,  2974,  1010,  2231,
         1010,  1998,  2449,  1010,  4275,  2024,  2109,  2000,  5114,  4824,
         1997,  2070,  2112,  1997,  4507,  1006,  1996,  4664,  1997,  3037,
         2003,  2411,  3615,  2000,  2004,  1523,  1996,  2291,  1524,  1007,
         1012,  2823,  2122,  2024,  3558,  4275,  1010,  2107,  2004,  1037,
         4094,  2944,  1997,  2019, 13297,  1999,  1037,  3612,  5234,  2030,
         1037,  4094,  2944,  1997,  1037,  5072,  3269,  1012,  2060,  4275,
         2024, 10061,  1010,  2107,  2004, 26632, 23035,  4275,  5398,  1997,
        11380,  8800,  2477,  2066,  3037,  6165,  1010, 12163,  1010,  1998,
        14200,  2030,  7704, 11658, 11380,  7851,  3795,  4633,  7060,  1012,
          102])"
520,1,"['rate', 'simulation', 'response', 'experiments', 'distribution', 'model', 'average']", What is simulation,seg_79,"in simulation, one uses a model to create specific situations in order to study the response of the model to them and then interprets this in terms of what would happen to the system “in the real world.” in this way, one can carry out experiments that are impossible, too dangerous, or too expensive to do in the real world—addressing questions like: what happens to the average temperature if we reduce the greenhouse gas emissions globally by 50%? can the plane still fly if engines 3 and 4 stop in midair? what happens to the distribution of wealth if we halve the tax rate?",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2054,  2003, 12504])","tensor([  101,  1999, 12504,  1010,  2028,  3594,  1037,  2944,  2000,  3443,
         3563,  8146,  1999,  2344,  2000,  2817,  1996,  3433,  1997,  1996,
         2944,  2000,  2068,  1998,  2059, 17841,  2015,  2023,  1999,  3408,
         1997,  2054,  2052,  4148,  2000,  1996,  2291,  1523,  1999,  1996,
         2613,  2088,  1012,  1524,  1999,  2023,  2126,  1010,  2028,  2064,
         4287,  2041,  7885,  2008,  2024,  5263,  1010,  2205,  4795,  1010,
         2030,  2205,  6450,  2000,  2079,  1999,  1996,  2613,  2088,  1517,
        12786,  3980,  2066,  1024,  2054,  6433,  2000,  1996,  2779,  4860,
         2065,  2057,  5547,  1996, 16635,  3806, 11768, 16452,  2011,  2753,
         1003,  1029,  2064,  1996,  4946,  2145,  4875,  2065,  5209,  1017,
         1998,  1018,  2644,  1999,  3054, 11215,  1029,  2054,  6433,  2000,
         1996,  4353,  1997,  7177,  2065,  2057, 11085,  3726,  1996,  4171,
         3446,  1029,   102])"
521,1,"['uncertainty', 'simulation', 'probabilistic', 'stochastic simulation', 'random', 'random variables', 'variables']", What is simulation,seg_79,"more specifically, we focus on situations and problems where randomness or uncertainty or both play a significant or dominant role and should be modeled explicitly. models for such systems involve random variables, and we speak of probabilistic or stochastic models. simulating them is stochastic simulation. in",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0.])","tensor([ 2054,  2003, 12504])","tensor([  101,  2062,  4919,  1010,  2057,  3579,  2006,  8146,  1998,  3471,
         2073,  6721,  2791,  2030, 12503,  2030,  2119,  2377,  1037,  3278,
         2030,  7444,  2535,  1998,  2323,  2022, 14440, 12045,  1012,  4275,
         2005,  2107,  3001,  9125,  6721, 10857,  1010,  1998,  2057,  3713,
         1997,  4013,  3676, 27965,  4588,  2030,  2358, 11663, 20875,  4275,
         1012, 21934, 10924,  2068,  2003,  2358, 11663, 20875, 12504,  1012,
         1999,   102])"
522,1,"['probability theory', 'probability', 'simulation', 'distributions', 'stochastic simulation', 'random', 'random variables', 'model', 'variables']", What is simulation,seg_79,"the preceding chapters we have encountered some of the tools of probability theory, and we will encounter others in the chapters to come. with these tools we can compute quantities of interest explicitly for many models. stochastic simulation of a system means generating values for all the random variables in the model, according to their specified distributions, and recording and analyzing what happens. we refer to the generated values as realizations of the random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2054,  2003, 12504])","tensor([  101,  1996, 11003,  9159,  2057,  2031,  8567,  2070,  1997,  1996,
         5906,  1997,  9723,  3399,  1010,  1998,  2057,  2097,  8087,  2500,
         1999,  1996,  9159,  2000,  2272,  1012,  2007,  2122,  5906,  2057,
         2064, 24134, 12450,  1997,  3037, 12045,  2005,  2116,  4275,  1012,
         2358, 11663, 20875, 12504,  1997,  1037,  2291,  2965, 11717,  5300,
         2005,  2035,  1996,  6721, 10857,  1999,  1996,  2944,  1010,  2429,
         2000,  2037,  9675, 20611,  1010,  1998,  3405,  1998, 20253,  2054,
         6433,  1012,  2057,  6523,  2000,  1996,  7013,  5300,  2004, 12393,
         2015,  1997,  1996,  6721, 10857,  1012,   102])"
523,1,"['simulation', 'realization', 'random variable', 'stochastic simulation', 'random', 'random variables', 'variables', 'variable']", What is simulation,seg_79,"for us, there are two reasons to learn about stochastic simulation. the first is that for complex systems, simulation can be an alternative to mathematical analysis, sometimes the only one. the second reason is that through simulation, we can get more feeling for random variables, and this is why we study stochastic simulation at this point in the book. we start by asking how we can generate a realization of a random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 2054,  2003, 12504])","tensor([  101,  2005,  2149,  1010,  2045,  2024,  2048,  4436,  2000,  4553,
         2055,  2358, 11663, 20875, 12504,  1012,  1996,  2034,  2003,  2008,
         2005,  3375,  3001,  1010, 12504,  2064,  2022,  2019,  4522,  2000,
         8045,  4106,  1010,  2823,  1996,  2069,  2028,  1012,  1996,  2117,
         3114,  2003,  2008,  2083, 12504,  1010,  2057,  2064,  2131,  2062,
         3110,  2005,  6721, 10857,  1010,  1998,  2023,  2003,  2339,  2057,
         2817,  2358, 11663, 20875, 12504,  2012,  2023,  2391,  1999,  1996,
         2338,  1012,  2057,  2707,  2011,  4851,  2129,  2057,  2064,  9699,
         1037, 12393,  1997,  1037,  6721,  8023,  1012,   102])"
524,1,"['transforming', 'realization', 'random variable', 'outcome', 'random number', 'random', 'variable']", Generating realizations of random variables,seg_81,"simulations are almost always done using computers, which usually have one or more so-called (pseudo) random number generators. a call to the random number generator returns a random number between 0 and 1, which mimics a realization of a u(0, 1) variable. with this source of uniform (pseudo) randomness we can construct any random variable we want by transforming the outcome, as we shall see.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101, 24710,  2024,  2471,  2467,  2589,  2478,  7588,  1010,  2029,
         2788,  2031,  2028,  2030,  2062,  2061,  1011,  2170,  1006, 18404,
         1007,  6721,  2193, 16937,  1012,  1037,  2655,  2000,  1996,  6721,
         2193, 13103,  5651,  1037,  6721,  2193,  2090,  1014,  1998,  1015,
         1010,  2029, 23150,  2015,  1037, 12393,  1997,  1037,  1057,  1006,
         1014,  1010,  1015,  1007,  8023,  1012,  2007,  2023,  3120,  1997,
         6375,  1006, 18404,  1007,  6721,  2791,  2057,  2064,  9570,  2151,
         6721,  8023,  2057,  2215,  2011, 17903,  1996,  9560,  1010,  2004,
         2057,  4618,  2156,  1012,   102])"
525,0,[], Generating realizations of random variables,seg_81,quick exercise 6.1 describe how you can simulate a coin toss when instead of a coin you have a die. any ideas on how to simulate a roll of a die if you only have a coin?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  4248,  6912,  1020,  1012,  1015,  6235,  2129,  2017,  2064,
        26633,  1037,  9226, 10055,  2043,  2612,  1997,  1037,  9226,  2017,
         2031,  1037,  3280,  1012,  2151,  4784,  2006,  2129,  2000, 26633,
         1037,  4897,  1997,  1037,  3280,  2065,  2017,  2069,  2031,  1037,
         9226,  1029,   102])"
526,1,"['random', 'random variables', 'variables']", Generating realizations of random variables,seg_81,bernoulli random variables,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101, 16595,  7140,  6894,  6721, 10857,   102])"
527,1,"['random variable', 'random', 'distribution', 'variable']", Generating realizations of random variables,seg_81,"suppose u has a u(0, 1) distribution. to construct a ber(p) random variable for some 0 < p < 1, we define",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 6814, 1057, 2038, 1037, 1057, 1006, 1014, 1010, 1015, 1007, 4353,
        1012, 2000, 9570, 1037, 2022, 2099, 1006, 1052, 1007, 6721, 8023, 2005,
        2070, 1014, 1026, 1052, 1026, 1015, 1010, 2057, 9375,  102])"
528,1,"['parameter', 'bernoulli', 'random variable', 'random', 'bernoulli distribution', 'distribution', 'variable']", Generating realizations of random variables,seg_81,this random variable x has a bernoulli distribution with parameter p.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  2023,  6721,  8023,  1060,  2038,  1037, 16595,  7140,  6894,
         4353,  2007, 16381,  1052,  1012,   102])"
529,1,"['outcomes', 'probabilities', 'random variable', 'random', 'variable']", Generating realizations of random variables,seg_81,"quick exercise 6.2 a random variable y has outcomes 1, 3, and 4 with the following probabilities: p(y = 1) = 3/5, p(y = 3) = 1/5, and p(y = 4) = 1/5. describe how to construct y from a u(0, 1) random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  4248,  6912,  1020,  1012,  1016,  1037,  6721,  8023,  1061,
         2038, 13105,  1015,  1010,  1017,  1010,  1998,  1018,  2007,  1996,
         2206,  4013,  3676, 14680,  1024,  1052,  1006,  1061,  1027,  1015,
         1007,  1027,  1017,  1013,  1019,  1010,  1052,  1006,  1061,  1027,
         1017,  1007,  1027,  1015,  1013,  1019,  1010,  1998,  1052,  1006,
         1061,  1027,  1018,  1007,  1027,  1015,  1013,  1019,  1012,  6235,
         2129,  2000,  9570,  1061,  2013,  1037,  1057,  1006,  1014,  1010,
         1015,  1007,  6721,  8023,  1012,   102])"
530,1,"['random', 'random variables', 'variables']", Generating realizations of random variables,seg_81,continuous random variables,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  7142,  6721, 10857,   102])"
531,1,"['continuous', 'continuous random variable', 'function', 'interval', 'random variable', 'random', 'distribution', 'distribution function', 'variable', 'case']", Generating realizations of random variables,seg_81,"suppose we have the distribution function f of a continuous random variable and we wish to construct a random variable with this distribution. we show how to do this if f is strictly increasing from 0 to 1 on an interval. in that case f has an inverse function f inv. figure 6.1 shows an example: f is strictly increasing on the interval [2, 10]; the inverse f inv is a function from the interval [0, 1] to the interval [2, 10].",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  6814,  2057,  2031,  1996,  4353,  3853,  1042,  1997,  1037,
         7142,  6721,  8023,  1998,  2057,  4299,  2000,  9570,  1037,  6721,
         8023,  2007,  2023,  4353,  1012,  2057,  2265,  2129,  2000,  2079,
         2023,  2065,  1042,  2003,  9975,  4852,  2013,  1014,  2000,  1015,
         2006,  2019, 13483,  1012,  1999,  2008,  2553,  1042,  2038,  2019,
        19262,  3853,  1042,  1999,  2615,  1012,  3275,  1020,  1012,  1015,
         3065,  2019,  2742,  1024,  1042,  2003,  9975,  4852,  2006,  1996,
        13483,  1031,  1016,  1010,  2184,  1033,  1025,  1996, 19262,  1042,
         1999,  2615,  2003,  1037,  3853,  2013,  1996, 13483,  1031,  1014,
         1010,  1015,  1033,  2000,  1996, 13483,  1031,  1016,  1010,  2184,
         1033,  1012,   102])"
532,1,"['events', 'random variable', 'random', 'variable']", Generating realizations of random variables,seg_81,"note how u relates to f inv(u) as f (x) relates to x. we see that u ≤ f (x) is equivalent with f inv(u) ≤ x. if instead of a real number u we consider a u(0, 1) random variable u , we obtain that the corresponding events are the same:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  3602,  2129,  1057, 14623,  2000,  1042,  1999,  2615,  1006,
         1057,  1007,  2004,  1042,  1006,  1060,  1007, 14623,  2000,  1060,
         1012,  2057,  2156,  2008,  1057,  1608,  1042,  1006,  1060,  1007,
         2003,  5662,  2007,  1042,  1999,  2615,  1006,  1057,  1007,  1608,
         1060,  1012,  2065,  2612,  1997,  1037,  2613,  2193,  1057,  2057,
         5136,  1037,  1057,  1006,  1014,  1010,  1015,  1007,  6721,  8023,
         1057,  1010,  2057,  6855,  2008,  1996,  7978,  2824,  2024,  1996,
         2168,  1024,   102])"
533,1,"['random', 'random variable', 'variable']", Generating realizations of random variables,seg_81,"we know about the u(0, 1) random variable u that p(u ≤ b) = b for any number 0 ≤ b ≤ 1. substituting b = f (x) we see",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  2057,  2113,  2055,  1996,  1057,  1006,  1014,  1010,  1015,
         1007,  6721,  8023,  1057,  2008,  1052,  1006,  1057,  1608,  1038,
         1007,  1027,  1038,  2005,  2151,  2193,  1014,  1608,  1038,  1608,
         1015,  1012,  4942, 21532,  1038,  1027,  1042,  1006,  1060,  1007,
         2057,  2156,   102])"
534,0,[], Generating realizations of random variables,seg_81,"from equality (6.1), therefore,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 2013, 9945, 1006, 1020, 1012, 1015, 1007, 1010, 3568, 1010,  102])"
535,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Generating realizations of random variables,seg_81,"in other words, the random variable f inv(u) has distribution function f .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 1999, 2060, 2616, 1010, 1996, 6721, 8023, 1042, 1999, 2615, 1006,
        1057, 1007, 2038, 4353, 3853, 1042, 1012,  102])"
536,1,['function'], Generating realizations of random variables,seg_81,what remains is to find the function f inv. from figure 6.1 we see,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 2054, 3464, 2003, 2000, 2424, 1996, 3853, 1042, 1999, 2615, 1012,
        2013, 3275, 1020, 1012, 1015, 2057, 2156,  102])"
537,1,"['random', 'random variables', 'variables']", Generating realizations of random variables,seg_81,exponential random variables,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101, 27258,  6721, 10857,   102])"
538,1,"['function', 'interval', 'exponential distribution', 'method', 'distribution', 'exponential', 'distribution function']", Generating realizations of random variables,seg_81,"we apply this method to the exponential distribution. on the interval [0,∞), the exp(λ) distribution function is strictly increasing and given by",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  2057,  6611,  2023,  4118,  2000,  1996, 27258,  4353,  1012,
         2006,  1996, 13483,  1031,  1014,  1010,  1601,  1007,  1010,  1996,
         4654,  2361,  1006,  1165,  1007,  4353,  3853,  2003,  9975,  4852,
         1998,  2445,  2011,   102])"
539,1,"['random variable', 'random', 'distribution', 'variable']", Generating realizations of random variables,seg_81,"1 ln(1−u) and if u has a u(0, 1) distribution, then the random variable x defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  1015,  1048,  2078,  1006,  1015, 22543,  2226,  1007,  1998,
         2065,  1057,  2038,  1037,  1057,  1006,  1014,  1010,  1015,  1007,
         4353,  1010,  2059,  1996,  6721,  8023,  1060,  4225,  2011,   102])"
540,1,['distribution'], Generating realizations of random variables,seg_81,has an exp(λ) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 2038, 2019, 4654, 2361, 1006, 1165, 1007, 4353, 1012,  102])"
541,1,"['efficient', 'distribution']", Generating realizations of random variables,seg_81,"in practice, one replaces 1−u with u , because both have a u(0, 1) distribution (see exercise 6.3). leaving out the subtraction leads to more efficient computer code. so instead of x we may use",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  1999,  3218,  1010,  2028, 20736,  1015, 22543,  2226,  2007,
         1057,  1010,  2138,  2119,  2031,  1037,  1057,  1006,  1014,  1010,
         1015,  1007,  4353,  1006,  2156,  6912,  1020,  1012,  1017,  1007,
         1012,  2975,  2041,  1996,  4942,  6494,  7542,  5260,  2000,  2062,
         8114,  3274,  3642,  1012,  2061,  2612,  1997,  1060,  2057,  2089,
         2224,   102])"
542,1,['distribution'], Generating realizations of random variables,seg_81,which also has an exp(λ) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 2029, 2036, 2038, 2019, 4654, 2361, 1006, 1165, 1007, 4353, 1012,
         102])"
543,1,"['distribution function', 'function', 'distribution']", Generating realizations of random variables,seg_81,"quick exercise 6.3 a distribution function f is 0 for x < 1 and 1 for x > 3,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 4248, 6912, 1020, 1012, 1017, 1037, 4353, 3853, 1042, 2003, 1014,
        2005, 1060, 1026, 1015, 1998, 1015, 2005, 1060, 1028, 1017, 1010,  102])"
544,1,"['random variable', 'random', 'distribution', 'variable']", Generating realizations of random variables,seg_81,"1 (x − 1)2 if 1 ≤ x ≤ 3. let u be a u(0, 1) random variable. construct a random variable with distribution f from u .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([ 101, 1015, 1006, 1060, 1597, 1015, 1007, 1016, 2065, 1015, 1608, 1060,
        1608, 1017, 1012, 2292, 1057, 2022, 1037, 1057, 1006, 1014, 1010, 1015,
        1007, 6721, 8023, 1012, 9570, 1037, 6721, 8023, 2007, 4353, 1042, 2013,
        1057, 1012,  102])"
545,1,"['events', 'realization', 'random variable', 'simulations', 'random number', 'random', 'random variables', 'variables', 'variable']", Generating realizations of random variables,seg_81,"for simulations we often want to generate realizations for a large number of random variables. random number generators have been designed with this purpose in mind: each new call mimics a new u(0, 1) random variable. the sequence of numbers thus generated is considered as a realization of a sequence of u(0, 1) random variables u1, u2, u3,. . . with the special property that the events {ui ≤ ai} are independent1 for every choice of the ai.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717, 12393,  2015,  1997,  6721, 10857])","tensor([  101,  2005, 24710,  2057,  2411,  2215,  2000,  9699, 12393,  2015,
         2005,  1037,  2312,  2193,  1997,  6721, 10857,  1012,  6721,  2193,
        16937,  2031,  2042,  2881,  2007,  2023,  3800,  1999,  2568,  1024,
         2169,  2047,  2655, 23150,  2015,  1037,  2047,  1057,  1006,  1014,
         1010,  1015,  1007,  6721,  8023,  1012,  1996,  5537,  1997,  3616,
         2947,  7013,  2003,  2641,  2004,  1037, 12393,  1997,  1037,  5537,
         1997,  1057,  1006,  1014,  1010,  1015,  1007,  6721, 10857,  1057,
         2487,  1010, 23343,  1010,  1057,  2509,  1010,  1012,  1012,  1012,
         2007,  1996,  2569,  3200,  2008,  1996,  2824,  1063, 21318,  1608,
         9932,  1065,  2024,  2981,  2487,  2005,  2296,  3601,  1997,  1996,
         9932,  1012,   102])"
546,1,"['events', 'operating rules']", Comparing two jury rules,seg_83,"at the olympic games there are several sports events that are judged by a jury, including gymnastics, figure skating, and ice dancing. during the 2002 winter games a dispute arose concerning the gold medal in ice dancing: there were allegations that the russian team had bribed a french jury member, thereby causing the russian pair to win just ahead of the canadians. we look into operating rules for juries, although we leave the effects of bribery to the exercises (exercise 6.11).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2012,  1996,  4386,  2399,  2045,  2024,  2195,  2998,  2824,
         2008,  2024, 13224,  2011,  1037,  6467,  1010,  2164, 14002,  1010,
         3275, 10080,  1010,  1998,  3256,  5613,  1012,  2076,  1996,  2526,
         3467,  2399,  1037,  7593, 10375,  7175,  1996,  2751,  3101,  1999,
         3256,  5613,  1024,  2045,  2020,  9989,  2008,  1996,  2845,  2136,
         2018, 26470,  2094,  1037,  2413,  6467,  2266,  1010,  8558,  4786,
         1996,  2845,  3940,  2000,  2663,  2074,  3805,  1997,  1996, 16485,
         1012,  2057,  2298,  2046,  4082,  3513,  2005, 18414,  5134,  1010,
         2348,  2057,  2681,  1996,  3896,  1997, 27748,  2000,  1996, 11110,
         1006,  6912,  1020,  1012,  2340,  1007,  1012,   102])"
547,1,['transformed'], Comparing two jury rules,seg_83,"suppose we have a jury of seven members, and for each performance each juror assigns a grade. the seven grades are to be transformed into a final score. two rules to do this are under consideration, and we want to choose",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  6814,  2057,  2031,  1037,  6467,  1997,  2698,  2372,  1010,
         1998,  2005,  2169,  2836,  2169, 18414, 29165, 24022,  1037,  3694,
         1012,  1996,  2698,  7022,  2024,  2000,  2022,  8590,  2046,  1037,
         2345,  3556,  1012,  2048,  3513,  2000,  2079,  2023,  2024,  2104,
         9584,  1010,  1998,  2057,  2215,  2000,  5454,   102])"
548,1,"['average', 'scores']", Comparing two jury rules,seg_83,"the better one. for the first one, the highest and lowest scores are removed and the final score is the average of the remaining five. for the second rule, the scores are put in ascending order and the middle one is assigned as final score. before you continue reading, consider which rule is better and how you can verify this.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  1996,  2488,  2028,  1012,  2005,  1996,  2034,  2028,  1010,
         1996,  3284,  1998,  7290,  7644,  2024,  3718,  1998,  1996,  2345,
         3556,  2003,  1996,  2779,  1997,  1996,  3588,  2274,  1012,  2005,
         1996,  2117,  3627,  1010,  1996,  7644,  2024,  2404,  1999, 22316,
         2344,  1998,  1996,  2690,  2028,  2003,  4137,  2004,  2345,  3556,
         1012,  2077,  2017,  3613,  3752,  1010,  5136,  2029,  3627,  2003,
         2488,  1998,  2129,  2017,  2064, 20410,  2023,  1012,   102])"
549,1,"['model', 'probabilistic model', 'probabilistic']", Comparing two jury rules,seg_83,a probabilistic model,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  1037,  4013,  3676, 27965,  4588,  2944,   102])"
550,1,"['model', 'random', 'scores']", Comparing two jury rules,seg_83,for our investigation we assume that the scores the jurors assign deviate by some random amount from the true or deserved score. we model the score that juror i assigns when the performance deserves a score g by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2005,  2256,  4812,  2057,  7868,  2008,  1996,  7644,  1996,
        18414, 29165,  2015, 23911, 14386,  3686,  2011,  2070,  6721,  3815,
         2013,  1996,  2995,  2030, 10849,  3556,  1012,  2057,  2944,  1996,
         3556,  2008, 18414, 29165,  1045, 24022,  2043,  1996,  2836, 17210,
         1037,  3556,  1043,  2011,   102])"
551,1,"['functions', 'random', 'random variables', 'variables']", Comparing two jury rules,seg_83,"where z1, . . . , z7 are random variables with values around zero. let h1 and h2 be functions implementing the two rules:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2073,  1062,  2487,  1010,  1012,  1012,  1012,  1010,  1062,
         2581,  2024,  6721, 10857,  2007,  5300,  2105,  5717,  1012,  2292,
         1044,  2487,  1998,  1044,  2475,  2022,  4972, 14972,  1996,  2048,
         3513,  1024,   102])"
552,1,['average'], Comparing two jury rules,seg_83,"h1(y1, . . . , y7) = average of the middle five of y1, . . . , y7,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([ 101, 1044, 2487, 1006, 1061, 2487, 1010, 1012, 1012, 1012, 1010, 1061,
        2581, 1007, 1027, 2779, 1997, 1996, 2690, 2274, 1997, 1061, 2487, 1010,
        1012, 1012, 1012, 1010, 1061, 2581, 1010,  102])"
553,1,['deviations'], Comparing two jury rules,seg_83,we are interested in deviations from the deserved score g:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2057,  2024,  4699,  1999, 24353,  2015,  2013,  1996, 10849,
         3556,  1043,  1024,   102])"
554,1,"['distributions', 'random', 'errors', 'random variables', 'model', 'variables']", Comparing two jury rules,seg_83,"the distributions of t and m depend on the individual jury grades, and through those, on the juror-deviations z1, z2, . . . , z7, which we model as u(−0.5, 0.5) variables. this more or less finishes the modeling phase: we have given a stochastic model that mimics the workings of a jury and have defined, in terms of the variables in the model, the random variables t and m that represent the errors that result after application of the jury rules.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  1996, 20611,  1997,  1056,  1998,  1049, 12530,  2006,  1996,
         3265,  6467,  7022,  1010,  1998,  2083,  2216,  1010,  2006,  1996,
        18414, 29165,  1011, 24353,  2015,  1062,  2487,  1010,  1062,  2475,
         1010,  1012,  1012,  1012,  1010,  1062,  2581,  1010,  2029,  2057,
         2944,  2004,  1057,  1006,  1597,  2692,  1012,  1019,  1010,  1014,
         1012,  1019,  1007, 10857,  1012,  2023,  2062,  2030,  2625, 12321,
         1996, 11643,  4403,  1024,  2057,  2031,  2445,  1037,  2358, 11663,
        20875,  2944,  2008, 23150,  2015,  1996, 24884,  1997,  1037,  6467,
         1998,  2031,  4225,  1010,  1999,  3408,  1997,  1996, 10857,  1999,
         1996,  2944,  1010,  1996,  6721, 10857,  1056,  1998,  1049,  2008,
         5050,  1996, 10697,  2008,  2765,  2044,  4646,  1997,  1996,  6467,
         3513,  1012,   102])"
555,1,"['model', 'simulation']", Comparing two jury rules,seg_83,"in any serious application, the model should be validated. this means that one tries to gather evidence to convince oneself and others that the model adequately reflects the workings of the real system. in this chapter we are more interested in showing what you can do with simulation once you have a model, so we skip the validation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  1999,  2151,  3809,  4646,  1010,  1996,  2944,  2323,  2022,
         9398,  4383,  1012,  2023,  2965,  2008,  2028,  5363,  2000,  8587,
         3350,  2000,  8054, 25763,  1998,  2500,  2008,  1996,  2944, 23613,
        11138,  1996, 24884,  1997,  1996,  2613,  2291,  1012,  1999,  2023,
         3127,  2057,  2024,  2062,  4699,  1999,  4760,  2054,  2017,  2064,
         2079,  2007, 12504,  2320,  2017,  2031,  1037,  2944,  1010,  2061,
         2057, 13558,  1996, 27354,  1012,   102])"
556,1,"['mean', 'probabilities', 'random', 'random variables', 'deviations', 'variables']", Comparing two jury rules,seg_83,"the next phase is analysis: which of the deviations is closer to zero? because t and m are random variables, we would have to clarify what we mean by that, and answering the question certainly involves computing probabilities about t and m . we cannot do this with what we have learned so far, but we know how to simulate, so this is what we do.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  1996,  2279,  4403,  2003,  4106,  1024,  2029,  1997,  1996,
        24353,  2015,  2003,  3553,  2000,  5717,  1029,  2138,  1056,  1998,
         1049,  2024,  6721, 10857,  1010,  2057,  2052,  2031,  2000, 25037,
         2054,  2057,  2812,  2011,  2008,  1010,  1998, 10739,  1996,  3160,
         5121,  7336,  9798,  4013,  3676, 14680,  2055,  1056,  1998,  1049,
         1012,  2057,  3685,  2079,  2023,  2007,  2054,  2057,  2031,  4342,
         2061,  2521,  1010,  2021,  2057,  2113,  2129,  2000, 26633,  1010,
         2061,  2023,  2003,  2054,  2057,  2079,  1012,   102])"
557,1,"['realization', 'random variable', 'random', 'variable']", Comparing two jury rules,seg_83,"to generate a realization of a u(−0.5, 0.5) random variable, we only need to subtract 0.5 from the result we obtain from a call to the random generator.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2000,  9699,  1037, 12393,  1997,  1037,  1057,  1006,  1597,
         2692,  1012,  1019,  1010,  1014,  1012,  1019,  1007,  6721,  8023,
         1010,  2057,  2069,  2342,  2000,  4942,  6494,  6593,  1014,  1012,
         1019,  2013,  1996,  2765,  2057,  6855,  2013,  1037,  2655,  2000,
         1996,  6721, 13103,  1012,   102])"
558,1,['deviations'], Comparing two jury rules,seg_83,"we do this 7 times and insert the resulting values in (6.2) as jury deviations z1, . . . , z7, and substitute them in equations (6.3) to obtain t and m (the value of g is irrelevant: it drops out of the calculation):",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2057,  2079,  2023,  1021,  2335,  1998, 19274,  1996,  4525,
         5300,  1999,  1006,  1020,  1012,  1016,  1007,  2004,  6467, 24353,
         2015,  1062,  2487,  1010,  1012,  1012,  1012,  1010,  1062,  2581,
         1010,  1998,  7681,  2068,  1999, 11380,  1006,  1020,  1012,  1017,
         1007,  2000,  6855,  1056,  1998,  1049,  1006,  1996,  3643,  1997,
         1043,  2003, 22537,  1024,  2009,  9010,  2041,  1997,  1996, 17208,
         1007,  1024,   102])"
559,1,['average'], Comparing two jury rules,seg_83,"t = average of the middle five of z1, . . . , z7, (6.4)",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([ 101, 1056, 1027, 2779, 1997, 1996, 2690, 2274, 1997, 1062, 2487, 1010,
        1012, 1012, 1012, 1010, 1062, 2581, 1010, 1006, 1020, 1012, 1018, 1007,
         102])"
560,1,"['table', 'simulation', 'random', 'results', 'random variables', 'variables']", Comparing two jury rules,seg_83,"in simulation terminology, this is called a run: we have gone through the whole procedure once, inserting realizations for the random variables. if we repeat the whole procedure, we have a second run; see table 6.1 for the results of five runs.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  1999, 12504, 18444,  1010,  2023,  2003,  2170,  1037,  2448,
         1024,  2057,  2031,  2908,  2083,  1996,  2878,  7709,  2320,  1010,
        19274,  2075, 12393,  2015,  2005,  1996,  6721, 10857,  1012,  2065,
         2057,  9377,  1996,  2878,  7709,  1010,  2057,  2031,  1037,  2117,
         2448,  1025,  2156,  2795,  1020,  1012,  1015,  2005,  1996,  3463,
         1997,  2274,  3216,  1012,   102])"
561,0,[], Comparing two jury rules,seg_83,"quick exercise 6.4 the next realizations for z1,. . . , z7 are: −0.05, 0.26, 0.25, 0.39, 0.22, 0.23, 0.13. determine the corresponding realizations of t and m .",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  4248,  6912,  1020,  1012,  1018,  1996,  2279, 12393,  2015,
         2005,  1062,  2487,  1010,  1012,  1012,  1012,  1010,  1062,  2581,
         2024,  1024,  1597,  2692,  1012,  5709,  1010,  1014,  1012,  2656,
         1010,  1014,  1012,  2423,  1010,  1014,  1012,  4464,  1010,  1014,
         1012,  2570,  1010,  1014,  1012,  2603,  1010,  1014,  1012,  2410,
         1012,  5646,  1996,  7978, 12393,  2015,  1997,  1056,  1998,  1049,
         1012,   102])"
562,1,"['vary', 'moment', 'deviation', 'interval', 'table', 'variation', 'realization', 'histogram', 'deviations', 'process']", Comparing two jury rules,seg_83,"table 6.1 can be used to check some computations. we also see that the realization of t was closest to zero in runs 3 and 5, the realization of m was closest to zero in runs 1 and 4, and they were (about) the same in run 2. there is no clear conclusion from this, and even if there was, one could wonder whether the next five runs would yield the same picture. because the whole process mimics randomness, one has to expect some variation—or perhaps a lot. in later chapters we will get a better understanding of this variation; for the moment we just say that judgment based on a large number of runs is better. we do one thousand runs and exchange the table for pictures. figure 6.3 depicts, for juror 1, a histogram of all the deviations from the true score g. for each interval of length 0.05 we have counted the number of runs for which the deviation of juror 1 fell in that interval. these numbers vary from about 40 to about 60.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2795,  1020,  1012,  1015,  2064,  2022,  2109,  2000,  4638,
         2070, 22334,  2015,  1012,  2057,  2036,  2156,  2008,  1996, 12393,
         1997,  1056,  2001,  7541,  2000,  5717,  1999,  3216,  1017,  1998,
         1019,  1010,  1996, 12393,  1997,  1049,  2001,  7541,  2000,  5717,
         1999,  3216,  1015,  1998,  1018,  1010,  1998,  2027,  2020,  1006,
         2055,  1007,  1996,  2168,  1999,  2448,  1016,  1012,  2045,  2003,
         2053,  3154,  7091,  2013,  2023,  1010,  1998,  2130,  2065,  2045,
         2001,  1010,  2028,  2071,  4687,  3251,  1996,  2279,  2274,  3216,
         2052, 10750,  1996,  2168,  3861,  1012,  2138,  1996,  2878,  2832,
        23150,  2015,  6721,  2791,  1010,  2028,  2038,  2000,  5987,  2070,
         8386,  1517,  2030,  3383,  1037,  2843,  1012,  1999,  2101,  9159,
         2057,  2097,  2131,  1037,  2488,  4824,  1997,  2023,  8386,  1025,
         2005,  1996,  2617,  2057,  2074,  2360,  2008,  8689,  2241,  2006,
         1037,  2312,  2193,  1997,  3216,  2003,  2488,  1012,  2057,  2079,
         2028,  4595,  3216,  1998,  3863,  1996,  2795,  2005,  4620,  1012,
         3275,  1020,  1012,  1017, 11230,  1010,  2005, 18414, 29165,  1015,
         1010,  1037,  2010,  3406, 13113,  1997,  2035,  1996, 24353,  2015,
         2013,  1996,  2995,  3556,  1043,  1012,  2005,  2169, 13483,  1997,
         3091,  1014,  1012,  5709,  2057,  2031,  8897,  1996,  2193,  1997,
         3216,  2005,  2029,  1996, 24353,  1997, 18414, 29165,  1015,  3062,
         1999,  2008, 13483,  1012,  2122,  3616,  8137,  2013,  2055,  2871,
         2000,  2055,  3438,  1012,   102])"
563,1,"['scores', 'histograms', 'results']", Comparing two jury rules,seg_83,"this is just to get an idea about the results for an individual juror. in figure 6.4 we see histograms for the final scores. comparing the histograms, it seems that the realizations of t are more concentrated near zero than those of m .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2023,  2003,  2074,  2000,  2131,  2019,  2801,  2055,  1996,
         3463,  2005,  2019,  3265, 18414, 29165,  1012,  1999,  3275,  1020,
         1012,  1018,  2057,  2156,  2010,  3406, 13113,  2015,  2005,  1996,
         2345,  7644,  1012, 13599,  1996,  2010,  3406, 13113,  2015,  1010,
         2009,  3849,  2008,  1996, 12393,  2015,  1997,  1056,  2024,  2062,
         8279,  2379,  5717,  2084,  2216,  1997,  1049,  1012,   102])"
564,1,"['cases', 'scores', 'histograms', 'plot']", Comparing two jury rules,seg_83,"however, the two histograms do not tell us anything about the relation between t and m , so we plot the realizations of pairs (t, m) for all one thousand runs (figure 6.5). from this plot we see that in most cases m and t go in the same direction: if t is positive, then usually m is also positive, and the same goes for negative values. in terms of the final scores, both rules generally overvalue and undervalue the performance simultaneously. on closer examination, with help of the line drawn from (−0.5,−0.5) to (0.5, 0.5), we see that the t values tend to be a little closer to zero than the m values.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2174,  1010,  1996,  2048,  2010,  3406, 13113,  2015,  2079,
         2025,  2425,  2149,  2505,  2055,  1996,  7189,  2090,  1056,  1998,
         1049,  1010,  2061,  2057,  5436,  1996, 12393,  2015,  1997,  7689,
         1006,  1056,  1010,  1049,  1007,  2005,  2035,  2028,  4595,  3216,
         1006,  3275,  1020,  1012,  1019,  1007,  1012,  2013,  2023,  5436,
         2057,  2156,  2008,  1999,  2087,  3572,  1049,  1998,  1056,  2175,
         1999,  1996,  2168,  3257,  1024,  2065,  1056,  2003,  3893,  1010,
         2059,  2788,  1049,  2003,  2036,  3893,  1010,  1998,  1996,  2168,
         3632,  2005,  4997,  5300,  1012,  1999,  3408,  1997,  1996,  2345,
         7644,  1010,  2119,  3513,  3227,  2058, 10175,  5657,  1998,  2104,
        10175,  5657,  1996,  2836,  7453,  1012,  2006,  3553,  7749,  1010,
         2007,  2393,  1997,  1996,  2240,  4567,  2013,  1006,  1597,  2692,
         1012,  1019,  1010,  1597,  2692,  1012,  1019,  1007,  2000,  1006,
         1014,  1012,  1019,  1010,  1014,  1012,  1019,  1007,  1010,  2057,
         2156,  2008,  1996,  1056,  5300,  7166,  2000,  2022,  1037,  2210,
         3553,  2000,  5717,  2084,  1996,  1049,  5300,  1012,   102])"
565,1,"['deviation', 'deviations', 'histogram']", Comparing two jury rules,seg_83,"this suggests that we make a histogram that shows the difference of the absolute deviations from true score. for rule 1 this absolute deviation is |t |, for rule 2 it is |m |. if the difference |m | − |t | is positive, then t is closer to zero than m , and the difference tells us by how much. a negative difference",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2023,  6083,  2008,  2057,  2191,  1037,  2010,  3406, 13113,
         2008,  3065,  1996,  4489,  1997,  1996,  7619, 24353,  2015,  2013,
         2995,  3556,  1012,  2005,  3627,  1015,  2023,  7619, 24353,  2003,
         1064,  1056,  1064,  1010,  2005,  3627,  1016,  2009,  2003,  1064,
         1049,  1064,  1012,  2065,  1996,  4489,  1064,  1049,  1064,  1597,
         1064,  1056,  1064,  2003,  3893,  1010,  2059,  1056,  2003,  3553,
         2000,  5717,  2084,  1049,  1010,  1998,  1996,  4489,  4136,  2149,
         2011,  2129,  2172,  1012,  1037,  4997,  4489,   102])"
566,1,"['cases', 'histogram']", Comparing two jury rules,seg_83,"means that m was closer. in figure 6.6 all the differences are shown in a histogram. the bars to the right of zero represent 696 runs. so, in about 70% of the runs, rule 1 resulted in a final score that is closer to the true score than rule 2. in about 30% of the cases, rule 2 was better, but generally by a smaller amount, as we see from the histogram.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0.])","tensor([13599,  2048,  6467,  3513])","tensor([  101,  2965,  2008,  1049,  2001,  3553,  1012,  1999,  3275,  1020,
         1012,  1020,  2035,  1996,  5966,  2024,  3491,  1999,  1037,  2010,
         3406, 13113,  1012,  1996,  6963,  2000,  1996,  2157,  1997,  5717,
         5050,  6353,  2575,  3216,  1012,  2061,  1010,  1999,  2055,  3963,
         1003,  1997,  1996,  3216,  1010,  3627,  1015,  4504,  1999,  1037,
         2345,  3556,  2008,  2003,  3553,  2000,  1996,  2995,  3556,  2084,
         3627,  1016,  1012,  1999,  2055,  2382,  1003,  1997,  1996,  3572,
         1010,  3627,  1016,  2001,  2488,  1010,  2021,  3227,  2011,  1037,
         3760,  3815,  1010,  2004,  2057,  2156,  2013,  1996,  2010,  3406,
        13113,  1012,   102])"
567,1,"['locations', 'information']", The singleserver queue,seg_85,"there are many situations in life where you stand in a line waiting for some service: when you want to withdraw money from a cash dispenser, borrow books at the library, be admitted to the emergency room at the hospital, or pump gas at the gas station. many other queueing situations are hidden: an email message you send might be queued at the local server until it has sent all messages that were submitted ahead of yours; searching the internet, your browser sends and receives packets of information that are queued at various stages and locations; in assembly lines, partly finished products move from station to station, each time waiting for the next component to be added.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2045,  2024,  2116,  8146,  1999,  2166,  2073,  2017,  3233,
         1999,  1037,  2240,  3403,  2005,  2070,  2326,  1024,  2043,  2017,
         2215,  2000, 10632,  2769,  2013,  1037,  5356,  4487, 13102, 16700,
         2099,  1010, 17781,  2808,  2012,  1996,  3075,  1010,  2022,  4914,
         2000,  1996,  5057,  2282,  2012,  1996,  2902,  1010,  2030, 10216,
         3806,  2012,  1996,  3806,  2276,  1012,  2116,  2060, 24240,  2075,
         8146,  2024,  5023,  1024,  2019, 10373,  4471,  2017,  4604,  2453,
         2022, 24240,  2094,  2012,  1996,  2334,  8241,  2127,  2009,  2038,
         2741,  2035,  7696,  2008,  2020,  7864,  3805,  1997,  6737,  1025,
         6575,  1996,  4274,  1010,  2115, 16602, 10255,  1998,  8267, 23730,
         1997,  2592,  2008,  2024, 24240,  2094,  2012,  2536,  5711,  1998,
         5269,  1025,  1999,  3320,  3210,  1010,  6576,  2736,  3688,  2693,
         2013,  2276,  2000,  2276,  1010,  2169,  2051,  3403,  2005,  1996,
         2279,  6922,  2000,  2022,  2794,  1012,   102])"
568,1,['model'], The singleserver queue,seg_85,"we are going to study one simple queueing model, the so-called single-server queue: it has one server or service mechanism, and the arriving customers await their turn in order of their arrival. for definiteness, think of an oasis with one big water well. people arrive at the well with bottles, jerry cans, and other types of containers, to pump water. the supply of water is large, but the pump capacity is limited. the pump is about to be replaced, and while it is clear that a larger pump capacity will result in shorter waiting times, more powerful pumps are also more expensive. therefore, to prepare a decision that balances costs and benefits, we wish to investigate the relationship between pump capacity and system performance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2057,  2024,  2183,  2000,  2817,  2028,  3722, 24240,  2075,
         2944,  1010,  1996,  2061,  1011,  2170,  2309,  1011,  8241, 24240,
         1024,  2009,  2038,  2028,  8241,  2030,  2326,  7337,  1010,  1998,
         1996,  7194,  6304, 26751,  2037,  2735,  1999,  2344,  1997,  2037,
         5508,  1012,  2005, 15298,  2791,  1010,  2228,  1997,  2019, 18128,
         2007,  2028,  2502,  2300,  2092,  1012,  2111,  7180,  2012,  1996,
         2092,  2007, 11015,  1010,  6128, 18484,  1010,  1998,  2060,  4127,
         1997, 16143,  1010,  2000, 10216,  2300,  1012,  1996,  4425,  1997,
         2300,  2003,  2312,  1010,  2021,  1996, 10216,  3977,  2003,  3132,
         1012,  1996, 10216,  2003,  2055,  2000,  2022,  2999,  1010,  1998,
         2096,  2009,  2003,  3154,  2008,  1037,  3469, 10216,  3977,  2097,
         2765,  1999,  7820,  3403,  2335,  1010,  2062,  3928, 15856,  2024,
         2036,  2062,  6450,  1012,  3568,  1010,  2000,  7374,  1037,  3247,
         2008,  5703,  2015,  5366,  1998,  6666,  1010,  2057,  4299,  2000,
         8556,  1996,  3276,  2090, 10216,  3977,  1998,  2291,  2836,  1012,
          102])"
569,1,"['random', 'random variables', 'standard', 'model', 'variables', 'average']", The singleserver queue,seg_85,"a stochastic model is in order: some general characteristics are known, such as how many people arrive per day and how much water they take on average, but the individual arrival times and amounts are unpredictable. we introduce random variables to describe them: let t1 be the time between the start at time zero and the arrival of the first customer, t2 the time between the arrivals of the first and the second customer, t3 the time between the second and the third, etc.; these are called the interarrival times. let si be the length of time that customer i needs to use the pump; in standard terminology this is called the service time. this is our description so far:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  1037,  2358, 11663, 20875,  2944,  2003,  1999,  2344,  1024,
         2070,  2236,  6459,  2024,  2124,  1010,  2107,  2004,  2129,  2116,
         2111,  7180,  2566,  2154,  1998,  2129,  2172,  2300,  2027,  2202,
         2006,  2779,  1010,  2021,  1996,  3265,  5508,  2335,  1998,  8310,
         2024, 21446,  1012,  2057,  8970,  6721, 10857,  2000,  6235,  2068,
         1024,  2292,  1056,  2487,  2022,  1996,  2051,  2090,  1996,  2707,
         2012,  2051,  5717,  1998,  1996,  5508,  1997,  1996,  2034,  8013,
         1010,  1056,  2475,  1996,  2051,  2090,  1996, 25470,  1997,  1996,
         2034,  1998,  1996,  2117,  8013,  1010,  1056,  2509,  1996,  2051,
         2090,  1996,  2117,  1998,  1996,  2353,  1010,  4385,  1012,  1025,
         2122,  2024,  2170,  1996,  6970,  2906,  3089, 10175,  2335,  1012,
         2292,  9033,  2022,  1996,  3091,  1997,  2051,  2008,  8013,  1045,
         3791,  2000,  2224,  1996, 10216,  1025,  1999,  3115, 18444,  2023,
         2003,  2170,  1996,  2326,  2051,  1012,  2023,  2003,  2256,  6412,
         2061,  2521,  1024,   102])"
570,1,"['parameter', 'random variable', 'random', 'model', 'variable']", The singleserver queue,seg_85,"the pump capacity v (liters per minute) is not a random variable but a model parameter or decision variable, whose “best” value we wish to determine. so if customer i requires ri liters of water, then her service time is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  1996, 10216,  3977,  1058,  1006, 23675,  2015,  2566,  3371,
         1007,  2003,  2025,  1037,  6721,  8023,  2021,  1037,  2944, 16381,
         2030,  3247,  8023,  1010,  3005,  1523,  2190,  1524,  3643,  2057,
         4299,  2000,  5646,  1012,  2061,  2065,  8013,  1045,  5942, 15544,
        23675,  2015,  1997,  2300,  1010,  2059,  2014,  2326,  2051,  2003,
          102])"
571,1,"['random', 'random variables', 'distribution', 'model', 'variables']", The singleserver queue,seg_85,"to complete the model description, we need to specify the distribution of the random variables ti and ri:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2000,  3143,  1996,  2944,  6412,  1010,  2057,  2342,  2000,
        20648,  1996,  4353,  1997,  1996,  6721, 10857, 14841,  1998, 15544,
         1024,   102])"
572,1,['distribution'], The singleserver queue,seg_85,"interarrival times: every ti has an exp(0.5) distribution (minutes); service requirement: every ri has a u(2, 5) distribution (liters).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  6970,  2906,  3089, 10175,  2335,  1024,  2296, 14841,  2038,
         2019,  4654,  2361,  1006,  1014,  1012,  1019,  1007,  4353,  1006,
         2781,  1007,  1025,  2326,  9095,  1024,  2296, 15544,  2038,  1037,
         1057,  1006,  1016,  1010,  1019,  1007,  4353,  1006, 23675,  2015,
         1007,  1012,   102])"
573,1,"['processes', 'uniform distribution', 'exponential distribution', 'distributions', 'exponential', 'distribution', 'model']", The singleserver queue,seg_85,"this particular choice of distributions would have to be supported by evidence that they are suited for the system at hand: a validation step as suggested for the jury model is appropriate here as well. for many arrival type processes, however, the exponential distribution is reasonable as a model for the interarrival times (see chapter 12). the particular uniform distribution chosen for the required amount of water says that all amounts between 2 and 5 liters are equally likely. so there is no sheik who owns a 5000-liter water truck in “our” oasis.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2023,  3327,  3601,  1997, 20611,  2052,  2031,  2000,  2022,
         3569,  2011,  3350,  2008,  2027,  2024, 10897,  2005,  1996,  2291,
         2012,  2192,  1024,  1037, 27354,  3357,  2004,  4081,  2005,  1996,
         6467,  2944,  2003,  6413,  2182,  2004,  2092,  1012,  2005,  2116,
         5508,  2828,  6194,  1010,  2174,  1010,  1996, 27258,  4353,  2003,
         9608,  2004,  1037,  2944,  2005,  1996,  6970,  2906,  3089, 10175,
         2335,  1006,  2156,  3127,  2260,  1007,  1012,  1996,  3327,  6375,
         4353,  4217,  2005,  1996,  3223,  3815,  1997,  2300,  2758,  2008,
         2035,  8310,  2090,  1016,  1998,  1019, 23675,  2015,  2024,  8053,
         3497,  1012,  2061,  2045,  2003,  2053,  2016,  5480,  2040,  8617,
         1037, 13509,  1011, 23675,  2300,  4744,  1999,  1523,  2256,  1524,
        18128,  1012,   102])"
574,1,['model'], The singleserver queue,seg_85,"to evaluate system performance, we want to extract from the model the waiting times of the customers and how busy it is at the pump.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2000, 16157,  2291,  2836,  1010,  2057,  2215,  2000, 14817,
         2013,  1996,  2944,  1996,  3403,  2335,  1997,  1996,  6304,  1998,
         2129,  5697,  2009,  2003,  2012,  1996, 10216,  1012,   102])"
575,0,[], The singleserver queue,seg_85,"let wi denote the waiting time of customer i. the first customer is lucky; the system starts empty, and so w1 = 0. for customer i the waiting time depends on how long customer i−1 spent in the system compared to the time between their respective arrivals. we see that if the interarrival time ti is long, relatively speaking, then customer i arrives after the departure of customer i − 1, and so wi = 0:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2292, 15536, 19090,  1996,  3403,  2051,  1997,  8013,  1045,
         1012,  1996,  2034,  8013,  2003,  5341,  1025,  1996,  2291,  4627,
         4064,  1010,  1998,  2061,  1059,  2487,  1027,  1014,  1012,  2005,
         8013,  1045,  1996,  3403,  2051,  9041,  2006,  2129,  2146,  8013,
         1045, 27944,  2985,  1999,  1996,  2291,  4102,  2000,  1996,  2051,
         2090,  2037,  7972, 25470,  1012,  2057,  2156,  2008,  2065,  1996,
         6970,  2906,  3089, 10175,  2051, 14841,  2003,  2146,  1010,  4659,
         4092,  1010,  2059,  8013,  1045,  8480,  2044,  1996,  6712,  1997,
         8013,  1045,  1597,  1015,  1010,  1998,  2061, 15536,  1027,  1014,
         1024,   102])"
576,0,[], The singleserver queue,seg_85,"on the other hand, if customer i arrives before the departure, the waiting time wi equals whatever remains of wi−1 + si−1:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2006,  1996,  2060,  2192,  1010,  2065,  8013,  1045,  8480,
         2077,  1996,  6712,  1010,  1996,  3403,  2051, 15536, 19635,  3649,
         3464,  1997, 15536, 27944,  1009,  9033, 27944,  1024,   102])"
577,1,['cases'], The singleserver queue,seg_85,"summarizing the two cases, we see obtain:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([ 101, 7680, 7849, 6026, 1996, 2048, 3572, 1010, 2057, 2156, 6855, 1024,
         102])"
578,1,"['cases', 'table', 'simulation', 'model']", The singleserver queue,seg_85,"to carry out a simulation, we start at time zero and generate realizations of the interarrival times (the ti) and service requirements (the ri) for as long as we want, computing the other quantities that follow from the model on the way. table 6.2 shows the values generated this way, for two pump capacities (v = 2 and 3) for the first six customers. note that in both cases we use the same realizations of ti and ri.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2000,  4287,  2041,  1037, 12504,  1010,  2057,  2707,  2012,
         2051,  5717,  1998,  9699, 12393,  2015,  1997,  1996,  6970,  2906,
         3089, 10175,  2335,  1006,  1996, 14841,  1007,  1998,  2326,  5918,
         1006,  1996, 15544,  1007,  2005,  2004,  2146,  2004,  2057,  2215,
         1010,  9798,  1996,  2060, 12450,  2008,  3582,  2013,  1996,  2944,
         2006,  1996,  2126,  1012,  2795,  1020,  1012,  1016,  3065,  1996,
         5300,  7013,  2023,  2126,  1010,  2005,  2048, 10216, 21157,  1006,
         1058,  1027,  1016,  1998,  1017,  1007,  2005,  1996,  2034,  2416,
         6304,  1012,  3602,  2008,  1999,  2119,  3572,  2057,  2224,  1996,
         2168, 12393,  2015,  1997, 14841,  1998, 15544,  1012,   102])"
579,1,['table'], The singleserver queue,seg_85,quick exercise 6.5 the next four realizations are t7: 1.86; r7: 4.79; t8: 1.08; and r8: 2.33. complete the corresponding rows of the table.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  4248,  6912,  1020,  1012,  1019,  1996,  2279,  2176, 12393,
         2015,  2024,  1056,  2581,  1024,  1015,  1012,  6564,  1025,  1054,
         2581,  1024,  1018,  1012,  6535,  1025,  1056,  2620,  1024,  1015,
         1012,  5511,  1025,  1998,  1054,  2620,  1024,  1016,  1012,  3943,
         1012,  3143,  1996,  7978, 10281,  1997,  1996,  2795,  1012,   102])"
580,1,"['average', 'simulations']", The singleserver queue,seg_85,"longer simulations produce so many numbers that we will drown in them unless we think of something. first, we summarize the waiting times of the first n customers with their average:",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2936, 24710,  3965,  2061,  2116,  3616,  2008,  2057,  2097,
        19549,  1999,  2068,  4983,  2057,  2228,  1997,  2242,  1012,  2034,
         1010,  2057,  7680,  7849,  4697,  1996,  3403,  2335,  1997,  1996,
         2034,  1050,  6304,  2007,  2037,  2779,  1024,   102])"
581,1,"['law of large numbers', 'table', 'simulation', 'plot', 'average']", The singleserver queue,seg_85,"then, instead of giving a table, we plot the pairs (n, w̄n), for n = 1, 2, . . . until the end of the simulation. in figure 6.7 we see that both lines bounce up and down a bit. toward the end, the average waiting time for pump capacity 3 is about 0.5 and for v = 2 about 2. in a longer simulation we would see each of the averages converge to a limiting value (a consequence of the so-called law of large numbers, the topic of chapter 13).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2059,  1010,  2612,  1997,  3228,  1037,  2795,  1010,  2057,
         5436,  1996,  7689,  1006,  1050,  1010,  1059,  2078,  1007,  1010,
         2005,  1050,  1027,  1015,  1010,  1016,  1010,  1012,  1012,  1012,
         2127,  1996,  2203,  1997,  1996, 12504,  1012,  1999,  3275,  1020,
         1012,  1021,  2057,  2156,  2008,  2119,  3210, 17523,  2039,  1998,
         2091,  1037,  2978,  1012,  2646,  1996,  2203,  1010,  1996,  2779,
         3403,  2051,  2005, 10216,  3977,  1017,  2003,  2055,  1014,  1012,
         1019,  1998,  2005,  1058,  1027,  1016,  2055,  1016,  1012,  1999,
         1037,  2936, 12504,  2057,  2052,  2156,  2169,  1997,  1996, 20185,
        28314,  2000,  1037, 14879,  3643,  1006,  1037,  9509,  1997,  1996,
         2061,  1011,  2170,  2375,  1997,  2312,  3616,  1010,  1996,  8476,
         1997,  3127,  2410,  1007,  1012,   102])"
582,1,"['plot', 'moment']", The singleserver queue,seg_85,"to show how busy it is at the pump one could record how many customers are waiting in the queue and plot this quantity against time. a slightly different approach is to record at every moment how much work there is in the system, that is, how much time it would take to serve everyone present at that moment. for example, if i am halfway through filling my 4-liter jerry can and three persons are waiting who require 2, 3, and 5 liters, respectively, then there are 12 liters to go; at v = 2, there is 6 minutes of work in the system, and at v = 3 just 4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  2000,  2265,  2129,  5697,  2009,  2003,  2012,  1996, 10216,
         2028,  2071,  2501,  2129,  2116,  6304,  2024,  3403,  1999,  1996,
        24240,  1998,  5436,  2023, 11712,  2114,  2051,  1012,  1037,  3621,
         2367,  3921,  2003,  2000,  2501,  2012,  2296,  2617,  2129,  2172,
         2147,  2045,  2003,  1999,  1996,  2291,  1010,  2008,  2003,  1010,
         2129,  2172,  2051,  2009,  2052,  2202,  2000,  3710,  3071,  2556,
         2012,  2008,  2617,  1012,  2005,  2742,  1010,  2065,  1045,  2572,
         8576,  2083,  8110,  2026,  1018,  1011, 23675,  6128,  2064,  1998,
         2093,  5381,  2024,  3403,  2040,  5478,  1016,  1010,  1017,  1010,
         1998,  1019, 23675,  2015,  1010,  4414,  1010,  2059,  2045,  2024,
         2260, 23675,  2015,  2000,  2175,  1025,  2012,  1058,  1027,  1016,
         1010,  2045,  2003,  1020,  2781,  1997,  2147,  1999,  1996,  2291,
         1010,  1998,  2012,  1058,  1027,  1017,  2074,  1018,  1012,   102])"
583,0,[], The singleserver queue,seg_85,"the amount of work in the system just before a customer arrives equals the waiting time of that customer, because it is exactly the time it takes to finish the work for everybody ahead of her. the work-in-system at time t tells us how long the wait would be if somebody were to arrive at t. for this reason, this quantity is also called the virtual waiting time.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  1996,  3815,  1997,  2147,  1999,  1996,  2291,  2074,  2077,
         1037,  8013,  8480, 19635,  1996,  3403,  2051,  1997,  2008,  8013,
         1010,  2138,  2009,  2003,  3599,  1996,  2051,  2009,  3138,  2000,
         3926,  1996,  2147,  2005,  7955,  3805,  1997,  2014,  1012,  1996,
         2147,  1011,  1999,  1011,  2291,  2012,  2051,  1056,  4136,  2149,
         2129,  2146,  1996,  3524,  2052,  2022,  2065,  8307,  2020,  2000,
         7180,  2012,  1056,  1012,  2005,  2023,  3114,  1010,  2023, 11712,
         2003,  2036,  2170,  1996,  7484,  3403,  2051,  1012,   102])"
584,1,"['function', 'table', 'realization']", The singleserver queue,seg_85,"figure 6.8 shows the work-in-system as a function of time for the first 15 minutes, using the same realizations that were the basis for table 6.2. in the top graph, corresponding to v = 2, the work in the system jumps to 2.20 (which is the realization of r1/2) at t = 0.24, when the first customer arrives. so at t = 2.21, which is 1.97 later, there is 2.20− 1.97 = 0.23 minute of work left; this is the waiting time for customer 2, who brings an amount of work of 2.00 minutes, so the peak at 1.97 is 0.23 + 2.00 = 2.23, etc. in the bottom graph we see the work-in-system reach zero more often, because the individual (work) amounts are 2/3 of what they are when v = 2. more often, arriving",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  3275,  1020,  1012,  1022,  3065,  1996,  2147,  1011,  1999,
         1011,  2291,  2004,  1037,  3853,  1997,  2051,  2005,  1996,  2034,
         2321,  2781,  1010,  2478,  1996,  2168, 12393,  2015,  2008,  2020,
         1996,  3978,  2005,  2795,  1020,  1012,  1016,  1012,  1999,  1996,
         2327, 10629,  1010,  7978,  2000,  1058,  1027,  1016,  1010,  1996,
         2147,  1999,  1996,  2291, 14523,  2000,  1016,  1012,  2322,  1006,
         2029,  2003,  1996, 12393,  1997,  1054,  2487,  1013,  1016,  1007,
         2012,  1056,  1027,  1014,  1012,  2484,  1010,  2043,  1996,  2034,
         8013,  8480,  1012,  2061,  2012,  1056,  1027,  1016,  1012,  2538,
         1010,  2029,  2003,  1015,  1012,  5989,  2101,  1010,  2045,  2003,
         1016,  1012,  2322, 22543,  1015,  1012,  5989,  1027,  1014,  1012,
         2603,  3371,  1997,  2147,  2187,  1025,  2023,  2003,  1996,  3403,
         2051,  2005,  8013,  1016,  1010,  2040,  7545,  2019,  3815,  1997,
         2147,  1997,  1016,  1012,  4002,  2781,  1010,  2061,  1996,  4672,
         2012,  1015,  1012,  5989,  2003,  1014,  1012,  2603,  1009,  1016,
         1012,  4002,  1027,  1016,  1012,  2603,  1010,  4385,  1012,  1999,
         1996,  3953, 10629,  2057,  2156,  1996,  2147,  1011,  1999,  1011,
         2291,  3362,  5717,  2062,  2411,  1010,  2138,  1996,  3265,  1006,
         2147,  1007,  8310,  2024,  1016,  1013,  1017,  1997,  2054,  2027,
         2024,  2043,  1058,  1027,  1016,  1012,  2062,  2411,  1010,  7194,
          102])"
585,0,[], The singleserver queue,seg_85,customers find the queue empty and the pump not in use; they do not have to wait.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  6304,  2424,  1996, 24240,  4064,  1998,  1996, 10216,  2025,
         1999,  2224,  1025,  2027,  2079,  2025,  2031,  2000,  3524,  1012,
          102])"
586,1,['function'], The singleserver queue,seg_85,"in figure 6.9 the work-in-system is depicted as a function of time for the first 100 minutes of our run. at pump capacity 2 the virtual waiting time peaks at close to 11 minutes after about 55 minutes, whereas with v = 3 the corresponding peak is only about 4 minutes. there also is a marked difference in the proportion of time the system is empty.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3895,  2121,  6299, 24240])","tensor([  101,  1999,  3275,  1020,  1012,  1023,  1996,  2147,  1011,  1999,
         1011,  2291,  2003,  8212,  2004,  1037,  3853,  1997,  2051,  2005,
         1996,  2034,  2531,  2781,  1997,  2256,  2448,  1012,  2012, 10216,
         3977,  1016,  1996,  7484,  3403,  2051, 11373,  2012,  2485,  2000,
         2340,  2781,  2044,  2055,  4583,  2781,  1010,  6168,  2007,  1058,
         1027,  1017,  1996,  7978,  4672,  2003,  2069,  2055,  1018,  2781,
         1012,  2045,  2036,  2003,  1037,  4417,  4489,  1999,  1996, 10817,
         1997,  2051,  1996,  2291,  2003,  4064,  1012,   102])"
587,1,"['tails', 'outcomes', 'outcome']", Solutions to the quick exercises,seg_87,"6.1 to simulate the coin, choose any three of the six possible outcomes of the die, report heads if one of these three outcomes turns up, and report tails otherwise. for example, heads if the outcome is odd, tails if it is even.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1020,  1012,  1015,  2000, 26633,  1996,  9226,  1010,  5454,
         2151,  2093,  1997,  1996,  2416,  2825, 13105,  1997,  1996,  3280,
         1010,  3189,  4641,  2065,  2028,  1997,  2122,  2093, 13105,  4332,
         2039,  1010,  1998,  3189, 17448,  4728,  1012,  2005,  2742,  1010,
         4641,  2065,  1996,  9560,  2003,  5976,  1010, 17448,  2065,  2009,
         2003,  2130,  1012,   102])"
588,1,['table'], Solutions to the quick exercises,seg_87,to simulate the die using a coin is more difficult; one solution is as follows. toss the coin three times and use the following conversion table to map the result:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2000, 26633,  1996,  3280,  2478,  1037,  9226,  2003,  2062,
         3697,  1025,  2028,  5576,  2003,  2004,  4076,  1012, 10055,  1996,
         9226,  2093,  2335,  1998,  2224,  1996,  2206,  7584,  2795,  2000,
         4949,  1996,  2765,  1024,   102])"
589,0,[], Solutions to the quick exercises,seg_87,coins hhh hht hth htt thh tht,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  7824,  1044, 23644,  1044, 11039,  1044,  2705,  1044,  4779,
        16215,  2232, 16215,  2102,   102])"
590,0,[], Solutions to the quick exercises,seg_87,repeat the coin tosses if you get tth or ttt.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  9377,  1996,  9226, 10055,  2229,  2065,  2017,  2131, 23746,
         2232,  2030, 23746,  2102,  1012,   102])"
591,1,"['set', 'variable']", Solutions to the quick exercises,seg_87,"6.2 let the u(0, 1) variable be u and set:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1020, 1012, 1016, 2292, 1996, 1057, 1006, 1014, 1010, 1015, 1007,
        8023, 2022, 1057, 1998, 2275, 1024,  102])"
592,1,"['function', 'method', 'distribution', 'distribution function']", Solutions to the quick exercises,seg_87,"6.3 the given distribution function f is strictly increasing between 1 and 3, so we use the method with f inv. solve the equation f (x) = 4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1020, 1012, 1017, 1996, 2445, 4353, 3853, 1042, 2003, 9975, 4852,
        2090, 1015, 1998, 1017, 1010, 2061, 2057, 2224, 1996, 4118, 2007, 1042,
        1999, 2615, 1012, 9611, 1996, 8522, 1042, 1006, 1060, 1007, 1027, 1018,
         102])"
593,1,['set'], Solutions to the quick exercises,seg_87,"for x. this yields x = 1 + 2√u, so we can set x = 1 + 2√u . if you need to be convinced, determine fx .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2005,  1060,  1012,  2023, 16189,  1060,  1027,  1015,  1009,
         1016, 30127,  2226,  1010,  2061,  2057,  2064,  2275,  1060,  1027,
         1015,  1009,  1016, 30127,  2226,  1012,  2065,  2017,  2342,  2000,
         2022,  6427,  1010,  5646, 23292,  1012,   102])"
594,0,[], Solutions to the quick exercises,seg_87,input realizations v = 2 v = 3,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  7953, 12393,  2015,  1058,  1027,  1016,  1058,  1027,  1017,
          102])"
595,1,['distribution'], Exercises,seg_89,"6.1 let u have a u(0, 1) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1020, 1012, 1015, 2292, 1057, 2031, 1037, 1057, 1006, 1014, 1010,
        1015, 1007, 4353, 1012,  102])"
596,1,['outcome'], Exercises,seg_89,a. describe how to simulate the outcome of a roll with a die using u .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6235,  2129,  2000, 26633,  1996,  9560,  1997,
         1037,  4897,  2007,  1037,  3280,  2478,  1057,  1012,   102])"
597,0,[], Exercises,seg_89,b. define y as follows: round 6u + 1 down to the nearest integer. what are,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  9375,  1061,  2004,  4076,  1024,  2461,  1020,
         2226,  1009,  1015,  2091,  2000,  1996,  7205, 16109,  1012,  2054,
         2024,   102])"
598,1,"['outcomes', 'probabilities']", Exercises,seg_89,the possible outcomes of y and their probabilities?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  2825, 13105,  1997,  1061,  1998,  2037,  4013,  3676,
        14680,  1029,   102])"
599,1,"['pseudo random', 'realization', 'random variable', 'random', 'variable']", Exercises,seg_89,6.2 we simulate the random variable x = 1 + 2√u constructed in quick exercise 6.3. as realization for u we obtain from the pseudo random generator the number u = 0.3782739.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  1016,  2057, 26633,  1996,  6721,  8023,  1060,
         1027,  1015,  1009,  1016, 30127,  2226,  3833,  1999,  4248,  6912,
         1020,  1012,  1017,  1012,  2004, 12393,  2005,  1057,  2057,  6855,
         2013,  1996, 18404,  6721, 13103,  1996,  2193,  1057,  1027,  1014,
         1012,  4261,  2620, 22907, 23499,  1012,   102])"
600,1,"['realization', 'random variable', 'random', 'variable']", Exercises,seg_89,a. what is the corresponding realization x of the random variable x?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2003,  1996,  7978, 12393,  1060,  1997,
         1996,  6721,  8023,  1060,  1029,   102])"
601,1,['random'], Exercises,seg_89,"b. if the next call to the random generator yields u = 0.3, will the corre-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2065,  1996,  2279,  2655,  2000,  1996,  6721,
        13103, 16189,  1057,  1027,  1014,  1012,  1017,  1010,  2097,  1996,
         2522, 14343,  1011,   102])"
602,1,['realization'], Exercises,seg_89,sponding realization for x be larger or smaller than the value you found in a?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101, 11867, 15422,  2075, 12393,  2005,  1060,  2022,  3469,  2030,
         3760,  2084,  1996,  3643,  2017,  2179,  1999,  1037,  1029,   102])"
603,1,['probability'], Exercises,seg_89,c. what is the probability the next draw will be smaller than the value you,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2054, 2003, 1996, 9723, 1996, 2279, 4009, 2097, 2022,
        3760, 2084, 1996, 3643, 2017,  102])"
604,1,"['function', 'density function', 'probability', 'probability density function', 'distribution', 'distribution function']", Exercises,seg_89,"6.3 let u have a u(0, 1) distribution. show that z = 1 − u has a u(0, 1) distribution by deriving the probability density function or the distribution function.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  1017,  2292,  1057,  2031,  1037,  1057,  1006,
         1014,  1010,  1015,  1007,  4353,  1012,  2265,  2008,  1062,  1027,
         1015,  1597,  1057,  2038,  1037,  1057,  1006,  1014,  1010,  1015,
         1007,  4353,  2011,  4315, 14966,  1996,  9723,  4304,  3853,  2030,
         1996,  4353,  3853,  1012,   102])"
605,1,"['distribution function', 'function', 'distribution']", Exercises,seg_89,"6.4 let f be the distribution function as given in quick exercise 6.3: f (x) is 0 for x < 1 and 1 for x > 3, and f (x) = 4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1020, 1012, 1018, 2292, 1042, 2022, 1996, 4353, 3853, 2004, 2445,
        1999, 4248, 6912, 1020, 1012, 1017, 1024, 1042, 1006, 1060, 1007, 2003,
        1014, 2005, 1060, 1026, 1015, 1998, 1015, 2005, 1060, 1028, 1017, 1010,
        1998, 1042, 1006, 1060, 1007, 1027, 1018,  102])"
606,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Exercises,seg_89,"answer it is claimed that x = 1 + 2√u has distribution function f , where u is a u(0, 1) random variable. verify this by computing p(x ≤ a) and checking that this equals f (a), for any a.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  3437,  2009,  2003,  3555,  2008,  1060,  1027,  1015,  1009,
         1016, 30127,  2226,  2038,  4353,  3853,  1042,  1010,  2073,  1057,
         2003,  1037,  1057,  1006,  1014,  1010,  1015,  1007,  6721,  8023,
         1012, 20410,  2023,  2011,  9798,  1052,  1006,  1060,  1608,  1037,
         1007,  1998,  9361,  2008,  2023, 19635,  1042,  1006,  1037,  1007,
         1010,  2005,  2151,  1037,  1012,   102])"
607,1,['distribution'], Exercises,seg_89,"6.5 we have seen that if u has a u(0, 1) distribution, then x = − lnu has",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  1019,  2057,  2031,  2464,  2008,  2065,  1057,
         2038,  1037,  1057,  1006,  1014,  1010,  1015,  1007,  4353,  1010,
         2059,  1060,  1027,  1597,  1048, 11231,  2038,   102])"
608,1,['distribution'], Exercises,seg_89,−a an exp(1) distribution. check this by verifying that p(x ≤ a) = 1 − e for a ≥ 0.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1597,  2050,  2019,  4654,  2361,  1006,  1015,  1007,  4353,
         1012,  4638,  2023,  2011, 20410,  2075,  2008,  1052,  1006,  1060,
         1608,  1037,  1007,  1027,  1015,  1597,  1041,  2005,  1037,  1609,
         1014,  1012,   102])"
609,1,"['random numbers', 'random variable', 'random number', 'random', 'variable']", Exercises,seg_89,"6.6 somebody messed up the random number generator in your computer: instead of uniform random numbers it generates numbers with an exp(2) distribution. describe how to construct a u(0, 1) random variable u from an exp(2) distributed x . hint: look at how you obtain an exp(2) random variable from a u(0, 1) random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  1020,  8307, 18358,  2039,  1996,  6721,  2193,
        13103,  1999,  2115,  3274,  1024,  2612,  1997,  6375,  6721,  3616,
         2009, 19421,  3616,  2007,  2019,  4654,  2361,  1006,  1016,  1007,
         4353,  1012,  6235,  2129,  2000,  9570,  1037,  1057,  1006,  1014,
         1010,  1015,  1007,  6721,  8023,  1057,  2013,  2019,  4654,  2361,
         1006,  1016,  1007,  5500,  1060,  1012,  9374,  1024,  2298,  2012,
         2129,  2017,  6855,  2019,  4654,  2361,  1006,  1016,  1007,  6721,
         8023,  2013,  1037,  1057,  1006,  1014,  1010,  1015,  1007,  6721,
         8023,  1012,   102])"
610,1,"['functions', 'random', 'weibull', 'random variables', 'distribution', 'variables']", Exercises,seg_89,"6.7 in models for the lifetimes of mechanical components one sometimes uses random variables with distribution functions from the so-called weibull family. here is an example: f (x) = 0 for x < 0, and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  1021,  1999,  4275,  2005,  1996,  6480,  2015,
         1997,  6228,  6177,  2028,  2823,  3594,  6721, 10857,  2007,  4353,
         4972,  2013,  1996,  2061,  1011,  2170, 11417,  8569,  3363,  2155,
         1012,  2182,  2003,  2019,  2742,  1024,  1042,  1006,  1060,  1007,
         1027,  1014,  2005,  1060,  1026,  1014,  1010,  1998,   102])"
611,1,"['random variable', 'random', 'distribution', 'variable']", Exercises,seg_89,"construct a random variable z with this distribution from a u(0, 1) variable.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([11110]),"tensor([ 101, 9570, 1037, 6721, 8023, 1062, 2007, 2023, 4353, 2013, 1037, 1057,
        1006, 1014, 1010, 1015, 1007, 8023, 1012,  102])"
612,1,"['random variable', 'random', 'distribution', 'variable']", Exercises,seg_89,"6.8 a random variable x has a par(3) distribution, so with distribution func-",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  1022,  1037,  6721,  8023,  1060,  2038,  1037,
        11968,  1006,  1017,  1007,  4353,  1010,  2061,  2007,  4353,  4569,
         2278,  1011,   102])"
613,1,"['pareto distribution', 'random variable', 'random', 'distribution', 'pareto', 'variable']", Exercises,seg_89,"−3 tion f with f (x) = 0 for x < 1, and f (x) = 1− x for x ≥ 1. for details on the pareto distribution see section 5.4. describe how to construct x from a u(0, 1) random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1597,  2509, 14841,  2239,  1042,  2007,  1042,  1006,  1060,
         1007,  1027,  1014,  2005,  1060,  1026,  1015,  1010,  1998,  1042,
         1006,  1060,  1007,  1027,  1015, 22543,  1060,  2005,  1060,  1609,
         1015,  1012,  2005,  4751,  2006,  1996, 11968, 18903,  4353,  2156,
         2930,  1019,  1012,  1018,  1012,  6235,  2129,  2000,  9570,  1060,
         2013,  1037,  1057,  1006,  1014,  1010,  1015,  1007,  6721,  8023,
         1012,   102])"
614,1,['simulated'], Exercises,seg_89,6.9 in quick exercise 6.1 we simulated a die by tossing three coins. recall that we might need several attempts before succeeding.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  1023,  1999,  4248,  6912,  1020,  1012,  1015,
         2057, 23599,  1037,  3280,  2011, 15021,  2093,  7824,  1012,  9131,
         2008,  2057,  2453,  2342,  2195,  4740,  2077, 13034,  1012,   102])"
615,1,['probability'], Exercises,seg_89,a. what is the probability that we succeed on the first try?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2054, 2003, 1996, 9723, 2008, 2057, 9510, 2006, 1996,
        2034, 3046, 1029,  102])"
616,1,['distribution'], Exercises,seg_89,b. let n be the number of tries that we need. determine the distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2292, 1050, 2022, 1996, 2193, 1997, 5363, 2008, 2057,
        2342, 1012, 5646, 1996, 4353,  102])"
617,1,"['random variable', 'random', 'random variables', 'geometric', 'variables', 'geometric random variables', 'variable']", Exercises,seg_89,6.10 there is usually more than one way to simulate a particular random variable. in this exercise we consider two ways to generate geometric random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1020,  1012,  2184,  2045,  2003,  2788,  2062,  2084,  2028,
         2126,  2000, 26633,  1037,  3327,  6721,  8023,  1012,  1999,  2023,
         6912,  2057,  5136,  2048,  3971,  2000,  9699, 14965,  6721, 10857,
         1012,   102])"
618,1,"['random', 'random variables', 'variables', 'independent']", Exercises,seg_89,"a. we give you a sequence of independent u(0, 1) random variables u1, u2,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2057,  2507,  2017,  1037,  5537,  1997,  2981,
         1057,  1006,  1014,  1010,  1015,  1007,  6721, 10857,  1057,  2487,
         1010, 23343,  1010,   102])"
619,1,"['random', 'bernoulli']", Exercises,seg_89,". . . . from this sequence, construct a sequence of bernoulli random vari-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1012,  1012,  1012,  1012,  2013,  2023,  5537,  1010,  9570,
         1037,  5537,  1997, 16595,  7140,  6894,  6721, 13075,  2072,  1011,
          102])"
620,1,"['bernoulli', 'random variable', 'random', 'random variables', 'variables', 'variable']", Exercises,seg_89,"ables. from the sequence of bernoulli random variables, construct a (single) geo(p) random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2583,  2015,  1012,  2013,  1996,  5537,  1997, 16595,  7140,
         6894,  6721, 10857,  1010,  9570,  1037,  1006,  2309,  1007, 20248,
         1006,  1052,  1007,  6721,  8023,  1012,   102])"
621,1,"['random', 'random variable', 'variable']", Exercises,seg_89,"b. it is possible to generate a geo(p) random variable using just one u(0, 1)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2009,  2003,  2825,  2000,  9699,  1037, 20248,
         1006,  1052,  1007,  6721,  8023,  2478,  2074,  2028,  1057,  1006,
         1014,  1010,  1015,  1007,   102])"
622,1,"['continuous', 'discrete random variable', 'discrete', 'set', 'simulation', 'random variable', 'event', 'random number', 'random', 'distribution', 'variable']", Exercises,seg_89,"random variable. if calls to the random number generator take a lot of cpu time, this would lead to faster simulation programs. set λ = − ln(1− p) and let y have a exp(λ) distribution. we obtain z from y by rounding to the nearest integer greater than y . note that z is a discrete random variable, whereas y is a continuous one. show that, nevertheless, the event {z > n} is the same as {y > n}. use this to compute p(z > n) from the distribution of y . what is the distribution of z? (see quick exercise 4.6.)",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  6721,  8023,  1012,  2065,  4455,  2000,  1996,  6721,  2193,
        13103,  2202,  1037,  2843,  1997, 17368,  2051,  1010,  2023,  2052,
         2599,  2000,  5514, 12504,  3454,  1012,  2275,  1165,  1027,  1597,
         1048,  2078,  1006,  1015, 22543,  1052,  1007,  1998,  2292,  1061,
         2031,  1037,  4654,  2361,  1006,  1165,  1007,  4353,  1012,  2057,
         6855,  1062,  2013,  1061,  2011, 26939,  2000,  1996,  7205, 16109,
         3618,  2084,  1061,  1012,  3602,  2008,  1062,  2003,  1037, 16246,
         6721,  8023,  1010,  6168,  1061,  2003,  1037,  7142,  2028,  1012,
         2265,  2008,  1010,  6600,  1010,  1996,  2724,  1063,  1062,  1028,
         1050,  1065,  2003,  1996,  2168,  2004,  1063,  1061,  1028,  1050,
         1065,  1012,  2224,  2023,  2000, 24134,  1052,  1006,  1062,  1028,
         1050,  1007,  2013,  1996,  4353,  1997,  1061,  1012,  2054,  2003,
         1996,  4353,  1997,  1062,  1029,  1006,  2156,  4248,  6912,  1018,
         1012,  1020,  1012,  1007,   102])"
623,0,[], Exercises,seg_89,6.11 reconsider the jury example (see section 6.3). suppose the first jury member is bribed to vote in favor of the present candidate.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1020,  1012,  2340, 28667,  5644, 18688,  1996,  6467,  2742,
         1006,  2156,  2930,  1020,  1012,  1017,  1007,  1012,  6814,  1996,
         2034,  6467,  2266,  2003, 26470,  2094,  2000,  3789,  1999,  5684,
         1997,  1996,  2556,  4018,  1012,   102])"
624,1,['model'], Exercises,seg_89,a. how should you now model y1? describe how you can investigate which,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2129, 2323, 2017, 2085, 2944, 1061, 2487, 1029, 6235,
        2129, 2017, 2064, 8556, 2029,  102])"
625,0,[], Exercises,seg_89,of the two rules is less sensitive to the effect of the bribery.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1997,  1996,  2048,  3513,  2003,  2625,  7591,  2000,  1996,
         3466,  1997,  1996, 27748,  1012,   102])"
626,1,['union'], Exercises,seg_89,b. the international skating union decided to adopt a rule similar to the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  2248, 10080,  2586,  2787,  2000, 11092,
         1037,  3627,  2714,  2000,  1996,   102])"
627,1,"['average', 'scores']", Exercises,seg_89,"following: randomly discard two of the jury scores, then average the remaining scores. describe how to investigate this rule. do you expect this rule to be more sensitive to the bribery than the two rules already discussed, or less sensitive?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2206,  1024, 18154,  5860,  4232,  2048,  1997,  1996,  6467,
         7644,  1010,  2059,  2779,  1996,  3588,  7644,  1012,  6235,  2129,
         2000,  8556,  2023,  3627,  1012,  2079,  2017,  5987,  2023,  3627,
         2000,  2022,  2062,  7591,  2000,  1996, 27748,  2084,  1996,  2048,
         3513,  2525,  6936,  1010,  2030,  2625,  7591,  1029,   102])"
628,1,['model'], Exercises,seg_89,"6.12 a tiny financial model. to investigate investment strategies, consider the following:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([ 101, 1020, 1012, 2260, 1037, 4714, 3361, 2944, 1012, 2000, 8556, 5211,
        9942, 1010, 5136, 1996, 2206, 1024,  102])"
629,1,"['model', 'rate', 'probability']", Exercises,seg_89,"you can choose to invest your money in one particular stock or put it in a savings account. your initial capital is 1000. the interest rate r is 0.5% per month and does not change. the initial stock price is 100. your stochastic model for the stock price is as follows: next month the price is the same as this month with probability 1/2, with probability 1/4 it is 5% lower, and with probability 1/4 it is 5% higher. this principle applies for every new month. there are no transaction costs when you buy or sell stock.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2017,  2064,  5454,  2000, 15697,  2115,  2769,  1999,  2028,
         3327,  4518,  2030,  2404,  2009,  1999,  1037, 10995,  4070,  1012,
         2115,  3988,  3007,  2003,  6694,  1012,  1996,  3037,  3446,  1054,
         2003,  1014,  1012,  1019,  1003,  2566,  3204,  1998,  2515,  2025,
         2689,  1012,  1996,  3988,  4518,  3976,  2003,  2531,  1012,  2115,
         2358, 11663, 20875,  2944,  2005,  1996,  4518,  3976,  2003,  2004,
         4076,  1024,  2279,  3204,  1996,  3976,  2003,  1996,  2168,  2004,
         2023,  3204,  2007,  9723,  1015,  1013,  1016,  1010,  2007,  9723,
         1015,  1013,  1018,  2009,  2003,  1019,  1003,  2896,  1010,  1998,
         2007,  9723,  1015,  1013,  1018,  2009,  2003,  1019,  1003,  3020,
         1012,  2023,  6958, 12033,  2005,  2296,  2047,  3204,  1012,  2045,
         2024,  2053, 12598,  5366,  2043,  2017,  4965,  2030,  5271,  4518,
         1012,   102])"
630,0,[], Exercises,seg_89,"your investment strategy for the next 5 years is: convert all your money to stock when the price drops below 95, and sell all stock and put the money in the bank when the stock price exceeds 110.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2115,  5211,  5656,  2005,  1996,  2279,  1019,  2086,  2003,
         1024, 10463,  2035,  2115,  2769,  2000,  4518,  2043,  1996,  3976,
         9010,  2917,  5345,  1010,  1998,  5271,  2035,  4518,  1998,  2404,
         1996,  2769,  1999,  1996,  2924,  2043,  1996,  4518,  3976, 23651,
         7287,  1012,   102])"
631,1,"['model', 'results']", Exercises,seg_89,describe how to simulate the results of this strategy for the model given.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  6235,  2129,  2000, 26633,  1996,  3463,  1997,  2023,  5656,
         2005,  1996,  2944,  2445,  1012,   102])"
632,0,[], Exercises,seg_89,"6.13 we give you an unfair coin and you do not know p(h) for this coin. can you simulate a fair coin, and how many tosses do you need for each fair coin toss?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1020,  1012,  2410,  2057,  2507,  2017,  2019, 15571,  9226,
         1998,  2017,  2079,  2025,  2113,  1052,  1006,  1044,  1007,  2005,
         2023,  9226,  1012,  2064,  2017, 26633,  1037,  4189,  9226,  1010,
         1998,  2129,  2116, 10055,  2229,  2079,  2017,  2342,  2005,  2169,
         4189,  9226, 10055,  1029,   102])"
633,1,"['mean', 'variance', 'information', 'random variable', 'random', 'distribution', 'experiments', 'variables', 'average', 'expected value', 'expectation', 'variable']", Expectation and variance,seg_91,"random variables are complicated objects, containing a lot of information on the experiments that are modeled by them. if we want to summarize a random variable by a single number, then this number should undoubtedly be its expected value. the expected value, also called the expectation or mean, gives the center—in the sense of average value—of the distribution of the random variable. if we allow a second number to describe the random variable, then we look at its variance, which is a measure of spread of the distribution of the random variable.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0.])","tensor([17626,  1998, 23284])","tensor([  101,  6721, 10857,  2024,  8552,  5200,  1010,  4820,  1037,  2843,
         1997,  2592,  2006,  1996,  7885,  2008,  2024, 14440,  2011,  2068,
         1012,  2065,  2057,  2215,  2000,  7680,  7849,  4697,  1037,  6721,
         8023,  2011,  1037,  2309,  2193,  1010,  2059,  2023,  2193,  2323,
        17319,  2022,  2049,  3517,  3643,  1012,  1996,  3517,  3643,  1010,
         2036,  2170,  1996, 17626,  2030,  2812,  1010,  3957,  1996,  2415,
         1517,  1999,  1996,  3168,  1997,  2779,  3643,  1517,  1997,  1996,
         4353,  1997,  1996,  6721,  8023,  1012,  2065,  2057,  3499,  1037,
         2117,  2193,  2000,  6235,  1996,  6721,  8023,  1010,  2059,  2057,
         2298,  2012,  2049, 23284,  1010,  2029,  2003,  1037,  5468,  1997,
         3659,  1997,  1996,  4353,  1997,  1996,  6721,  8023,  1012,   102])"
634,1,"['weighted average', 'average', 'probabilities']", Expected values,seg_93,"an oil company needs drill bits in an exploration project. suppose that it is known that (after rounding to the nearest hour) drill bits of the type used in this particular project will last 2, 3, or 4 hours with probabilities 0.1, 0.7, and 0.2. if a drill bit is replaced by one of the same type each time it has worn out, how long could exploration be continued if in total the company would reserve 10 drill bits for the exploration job? what most people would do to answer this question is to take the weighted average",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([3517, 5300])","tensor([  101,  2019,  3514,  2194,  3791, 12913,  9017,  1999,  2019,  8993,
         2622,  1012,  6814,  2008,  2009,  2003,  2124,  2008,  1006,  2044,
        26939,  2000,  1996,  7205,  3178,  1007, 12913,  9017,  1997,  1996,
         2828,  2109,  1999,  2023,  3327,  2622,  2097,  2197,  1016,  1010,
         1017,  1010,  2030,  1018,  2847,  2007,  4013,  3676, 14680,  1014,
         1012,  1015,  1010,  1014,  1012,  1021,  1010,  1998,  1014,  1012,
         1016,  1012,  2065,  1037, 12913,  2978,  2003,  2999,  2011,  2028,
         1997,  1996,  2168,  2828,  2169,  2051,  2009,  2038,  6247,  2041,
         1010,  2129,  2146,  2071,  8993,  2022,  2506,  2065,  1999,  2561,
         1996,  2194,  2052,  3914,  2184, 12913,  9017,  2005,  1996,  8993,
         3105,  1029,  2054,  2087,  2111,  2052,  2079,  2000,  3437,  2023,
         3160,  2003,  2000,  2202,  1996, 18215,  2779,   102])"
635,1,"['weighted average', 'random variable', 'random', 'expectation', 'distribution', 'average', 'expected value', 'variable']", Expected values,seg_93,"and conclude that the exploration could continue for 10 × 3.1, or 31 hours. this weighted average is what we call the expected value or expectation of the random variable x whose distribution is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  1998, 16519,  2008,  1996,  8993,  2071,  3613,  2005,  2184,
         1095,  1017,  1012,  1015,  1010,  2030,  2861,  2847,  1012,  2023,
        18215,  2779,  2003,  2054,  2057,  2655,  1996,  3517,  3643,  2030,
        17626,  1997,  1996,  6721,  8023,  1060,  3005,  4353,  2003,  2445,
         2011,   102])"
636,1,['case'], Expected values,seg_93,"it might happen that the company is unlucky and that each of the 10 drill bits has worn out after two hours, in which case exploration ends after 20 hours. at the other extreme, they may be lucky and drill for 40 hours on these 10",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  2009,  2453,  4148,  2008,  1996,  2194,  2003,  4895,  7630,
        17413,  1998,  2008,  2169,  1997,  1996,  2184, 12913,  9017,  2038,
         6247,  2041,  2044,  2048,  2847,  1010,  1999,  2029,  2553,  8993,
         4515,  2044,  2322,  2847,  1012,  2012,  1996,  2060,  6034,  1010,
         2027,  2089,  2022,  5341,  1998, 12913,  2005,  2871,  2847,  2006,
         2122,  2184,   102])"
637,1,['probability'], Expected values,seg_93,"bits. however, it is a mathematical fact that the conclusion about a 31-hour total drilling time is correct in the following sense: for a large number n of drill bits the total running time will be around n times 3.1 hours with high probability. in the example, where n = 10, we have, for instance, that drilling will continue for 29, 30, 31, 32, or 33 hours with probability more than 0.86, while the probability that it will last only for 20, 21, 22, 23, or 24 hours is less than 0.00006. we will come back to this in chapters 13 and 14. this example illustrates the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  9017,  1012,  2174,  1010,  2009,  2003,  1037,  8045,  2755,
         2008,  1996,  7091,  2055,  1037,  2861,  1011,  3178,  2561, 15827,
         2051,  2003,  6149,  1999,  1996,  2206,  3168,  1024,  2005,  1037,
         2312,  2193,  1050,  1997, 12913,  9017,  1996,  2561,  2770,  2051,
         2097,  2022,  2105,  1050,  2335,  1017,  1012,  1015,  2847,  2007,
         2152,  9723,  1012,  1999,  1996,  2742,  1010,  2073,  1050,  1027,
         2184,  1010,  2057,  2031,  1010,  2005,  6013,  1010,  2008, 15827,
         2097,  3613,  2005,  2756,  1010,  2382,  1010,  2861,  1010,  3590,
         1010,  2030,  3943,  2847,  2007,  9723,  2062,  2084,  1014,  1012,
         6564,  1010,  2096,  1996,  9723,  2008,  2009,  2097,  2197,  2069,
         2005,  2322,  1010,  2538,  1010,  2570,  1010,  2603,  1010,  2030,
         2484,  2847,  2003,  2625,  2084,  1014,  1012,  2199,  2692,  2575,
         1012,  2057,  2097,  2272,  2067,  2000,  2023,  1999,  9159,  2410,
         1998,  2403,  1012,  2023,  2742, 24899,  1996,  2206,  6210,  1012,
          102])"
638,1,"['function', 'discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'probability mass function', 'mass function', 'expectation', 'variable']", Expected values,seg_93,"definition. the expectation of a discrete random variable x taking the values a1, a2, . . . and with probability mass function p is the number",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  6210,  1012,  1996, 17626,  1997,  1037, 16246,  6721,  8023,
         1060,  2635,  1996,  5300, 17350,  1010, 22441,  1010,  1012,  1012,
         1012,  1998,  2007,  9723,  3742,  3853,  1052,  2003,  1996,  2193,
          102])"
639,1,"['mean', 'probability', 'expectation', 'distribution', 'expected value', 'probability distribution']", Expected values,seg_93,"we also call e[x ] the expected value or mean of x . since the expectation is determined by the probability distribution of x only, we also speak of the expectation or mean of the distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 1., 0., 0.])","tensor([3517, 5300])","tensor([  101,  2057,  2036,  2655,  1041,  1031,  1060,  1033,  1996,  3517,
         3643,  2030,  2812,  1997,  1060,  1012,  2144,  1996, 17626,  2003,
         4340,  2011,  1996,  9723,  4353,  1997,  1060,  2069,  1010,  2057,
         2036,  3713,  1997,  1996, 17626,  2030,  2812,  1997,  1996,  4353,
         1012,   102])"
640,1,"['discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'expectation', 'variable']", Expected values,seg_93,"quick exercise 7.1 let x be the discrete random variable that takes the values 1, 2, 4, 8, and 16, each with probability 1/5. compute the expectation of x .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  4248,  6912,  1021,  1012,  1015,  2292,  1060,  2022,  1996,
        16246,  6721,  8023,  2008,  3138,  1996,  5300,  1015,  1010,  1016,
         1010,  1018,  1010,  1022,  1010,  1998,  2385,  1010,  2169,  2007,
         9723,  1015,  1013,  1019,  1012, 24134,  1996, 17626,  1997,  1060,
         1012,   102])"
641,1,"['associated', 'weighted average', 'random variable', 'random', 'expectation', 'average', 'variable']", Expected values,seg_93,"looking at an expectation as a weighted average gives a more physical interpretation of this notion, namely as the center of gravity of weights p(ai) placed at the points ai. for the random variable associated with the drill bit, this is illustrated in figure 7.1.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3517, 5300])","tensor([  101,  2559,  2012,  2019, 17626,  2004,  1037, 18215,  2779,  3957,
         1037,  2062,  3558,  7613,  1997,  2023,  9366,  1010,  8419,  2004,
         1996,  2415,  1997,  8992,  1997, 15871,  1052,  1006,  9932,  1007,
         2872,  2012,  1996,  2685,  9932,  1012,  2005,  1996,  6721,  8023,
         3378,  2007,  1996, 12913,  2978,  1010,  2023,  2003,  7203,  1999,
         3275,  1021,  1012,  1015,  1012,   102])"
642,1,"['continuous', 'continuous random variable', 'function', 'density function', 'discrete random variable', 'discrete', 'probability', 'probability density function', 'random variable', 'random', 'expected value', 'variable']", Expected values,seg_93,"this point of view also leads the way to how one should define the expected value of a continuous random variable. let, for example, x be a continuous random variable whose probability density function f is zero outside the interval [0, 1]. it seems reasonable to approximate x by the discrete random variable y , taking the values",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  2023,  2391,  1997,  3193,  2036,  5260,  1996,  2126,  2000,
         2129,  2028,  2323,  9375,  1996,  3517,  3643,  1997,  1037,  7142,
         6721,  8023,  1012,  2292,  1010,  2005,  2742,  1010,  1060,  2022,
         1037,  7142,  6721,  8023,  3005,  9723,  4304,  3853,  1042,  2003,
         5717,  2648,  1996, 13483,  1031,  1014,  1010,  1015,  1033,  1012,
         2009,  3849,  9608,  2000, 15796,  1060,  2011,  1996, 16246,  6721,
         8023,  1061,  1010,  2635,  1996,  5300,   102])"
643,1,"['intervals', 'probabilities']", Expected values,seg_93,with as probabilities the masses that x assigns to the intervals [k−,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  2007,  2004,  4013,  3676, 14680,  1996, 11678,  2008,  1060,
        24022,  2000,  1996, 14025,  1031,  1047, 22543,   102])"
644,1,['probability'], Expected values,seg_93,"we have a good idea of the size of this probability. for large n, it can be approximated well in terms of f :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  2057,  2031,  1037,  2204,  2801,  1997,  1996,  2946,  1997,
         2023,  9723,  1012,  2005,  2312,  1050,  1010,  2009,  2064,  2022,
        15796,  2094,  2092,  1999,  3408,  1997,  1042,  1024,   102])"
645,1,['expectation'], Expected values,seg_93,the “center-of-gravity” interpretation suggests that the expectation e[y ] of y should approximate the expectation e[x ] of x . we have,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  1996,  1523,  2415,  1011,  1997,  1011,  8992,  1524,  7613,
         6083,  2008,  1996, 17626,  1041,  1031,  1061,  1033,  1997,  1061,
         2323, 15796,  1996, 17626,  1041,  1031,  1060,  1033,  1997,  1060,
         1012,  2057,  2031,   102])"
646,0,['n'], Expected values,seg_93,"by the definition of a definite integral, for large n the right-hand side is close to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3517, 5300])","tensor([  101,  2011,  1996,  6210,  1997,  1037, 15298,  9897,  1010,  2005,
         2312,  1050,  1996,  2157,  1011,  2192,  2217,  2003,  2485,  2000,
          102])"
647,0,[], Expected values,seg_93,this motivates the following definition.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3517, 5300])","tensor([  101,  2023,  9587, 29068,  8520,  1996,  2206,  6210,  1012,   102])"
648,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'expectation', 'variable']", Expected values,seg_93,definition. the expectation of a continuous random variable x with probability density function f is the number,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0.])","tensor([3517, 5300])","tensor([  101,  6210,  1012,  1996, 17626,  1997,  1037,  7142,  6721,  8023,
         1060,  2007,  9723,  4304,  3853,  1042,  2003,  1996,  2193,   102])"
649,1,"['mean', 'function', 'distribution', 'expected value']", Expected values,seg_93,we also call e[x ] the expected value or mean of x . note that e[x ] is indeed the center of gravity of the mass distribution described by the function f :,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([3517, 5300])","tensor([ 101, 2057, 2036, 2655, 1041, 1031, 1060, 1033, 1996, 3517, 3643, 2030,
        2812, 1997, 1060, 1012, 3602, 2008, 1041, 1031, 1060, 1033, 2003, 5262,
        1996, 2415, 1997, 8992, 1997, 1996, 3742, 4353, 2649, 2011, 1996, 3853,
        1042, 1024,  102])"
650,0,[], Expected values,seg_93,this is illustrated in figure 7.2.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3517, 5300])","tensor([ 101, 2023, 2003, 7203, 1999, 3275, 1021, 1012, 1016, 1012,  102])"
651,1,"['random variable', 'random', 'expectation', 'uniformly distributed', 'variable']", Expected values,seg_93,"quick exercise 7.2 compute the expectation of a random variable u that is uniformly distributed over [2, 5].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 5300])","tensor([  101,  4248,  6912,  1021,  1012,  1016, 24134,  1996, 17626,  1997,
         1037,  6721,  8023,  1057,  2008,  2003, 27423,  5500,  2058,  1031,
         1016,  1010,  1019,  1033,  1012,   102])"
652,1,"['geometric', 'geometric distribution', 'distribution']", Three examples,seg_95,the geometric distribution,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([2093, 4973])","tensor([  101,  1996, 14965,  4353,   102])"
653,1,"['parameter', 'geometric', 'geometric distribution', 'random variable', 'random', 'distribution', 'variable']", Three examples,seg_95,"if you buy a lottery ticket every week and you have a chance of 1 in 10 000 of winning the jackpot, what is the expected number of weeks you have to buy tickets before you get the jackpot? the answer is: 10 000 weeks (almost two centuries!). the number of weeks is modeled by a random variable with a geometric distribution with parameter p = 10−4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2093, 4973])","tensor([  101,  2065,  2017,  4965,  1037, 15213,  7281,  2296,  2733,  1998,
         2017,  2031,  1037,  3382,  1997,  1015,  1999,  2184,  2199,  1997,
         3045,  1996,  2990, 11008,  1010,  2054,  2003,  1996,  3517,  2193,
         1997,  3134,  2017,  2031,  2000,  4965,  9735,  2077,  2017,  2131,
         1996,  2990, 11008,  1029,  1996,  3437,  2003,  1024,  2184,  2199,
         3134,  1006,  2471,  2048,  4693,   999,  1007,  1012,  1996,  2193,
         1997,  3134,  2003, 14440,  2011,  1037,  6721,  8023,  2007,  1037,
        14965,  4353,  2007, 16381,  1052,  1027,  2184, 22543,  2549,  1012,
          102])"
654,1,"['parameter', 'geometric distribution', 'expectation', 'distribution', 'geometric']", Three examples,seg_95,the expectation of a geometric distribution. let x have a geometric distribution with parameter p; then,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0.])","tensor([2093, 4973])","tensor([  101,  1996, 17626,  1997,  1037, 14965,  4353,  1012,  2292,  1060,
         2031,  1037, 14965,  4353,  2007, 16381,  1052,  1025,  2059,   102])"
655,1,['probabilistic'], Three examples,seg_95,∞ =1 kxk−1 = 1/(1 − x)2 that has been derived in your calculus course. we will see a simple (probabilistic) way to obtain the value of this sum in chapter 11.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2093, 4973])","tensor([  101,  1601,  1027,  1015,  1047,  2595,  2243, 27944,  1027,  1015,
         1013,  1006,  1015,  1597,  1060,  1007,  1016,  2008,  2038,  2042,
         5173,  1999,  2115, 19276,  2607,  1012,  2057,  2097,  2156,  1037,
         3722,  1006,  4013,  3676, 27965,  4588,  1007,  2126,  2000,  6855,
         1996,  3643,  1997,  2023,  7680,  1999,  3127,  2340,  1012,   102])"
656,1,"['exponential', 'exponential distribution', 'distribution']", Three examples,seg_95,the exponential distribution,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([2093, 4973])","tensor([  101,  1996, 27258,  4353,   102])"
657,1,"['residence time', 'mean', 'distribution']", Three examples,seg_95,"in section 5.6 we considered the chemical reactor example, where the residence time t , measured in minutes, has an exp(0.5) distribution. we claimed that this implies that the mean time a particle stays in the vessel is 2 minutes. more generally, we have the following.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2093, 4973])","tensor([  101,  1999,  2930,  1019,  1012,  1020,  2057,  2641,  1996,  5072,
        13308,  2742,  1010,  2073,  1996,  5039,  2051,  1056,  1010,  7594,
         1999,  2781,  1010,  2038,  2019,  4654,  2361,  1006,  1014,  1012,
         1019,  1007,  4353,  1012,  2057,  3555,  2008,  2023, 12748,  2008,
         1996,  2812,  2051,  1037, 10811, 12237,  1999,  1996,  6258,  2003,
         1016,  2781,  1012,  2062,  3227,  1010,  2057,  2031,  1996,  2206,
         1012,   102])"
658,1,"['parameter', 'exponential distribution', 'expectation', 'distribution', 'exponential']", Three examples,seg_95,the expectation of an exponential distribution. let x have an exponential distribution with parameter λ; then,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0.])","tensor([2093, 4973])","tensor([  101,  1996, 17626,  1997,  2019, 27258,  4353,  1012,  2292,  1060,
         2031,  2019, 27258,  4353,  2007, 16381,  1165,  1025,  2059,   102])"
659,0,[], Three examples,seg_95,the integral has been determined in your calculus course (with the technique of integration by parts).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2093, 4973])","tensor([  101,  1996,  9897,  2038,  2042,  4340,  1999,  2115, 19276,  2607,
         1006,  2007,  1996,  6028,  1997,  8346,  2011,  3033,  1007,  1012,
          102])"
660,1,"['normal', 'normal distribution', 'distribution']", Three examples,seg_95,the normal distribution,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([2093, 4973])","tensor([ 101, 1996, 3671, 4353,  102])"
661,1,['normal'], Three examples,seg_95,"here, using that the normal density integrates to 1 and applying the substitution z = (x − µ)/σ,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2093, 4973])","tensor([  101,  2182,  1010,  2478,  2008,  1996,  3671,  4304, 17409,  2015,
         2000,  1015,  1998, 11243,  1996, 20885,  1062,  1027,  1006,  1060,
         1597,  1085,  1007,  1013,  1173,  1010,   102])"
662,1,['function'], Three examples,seg_95,"where the integral is 0, because the integrand is an odd function. we obtained the following rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2093, 4973])","tensor([  101,  2073,  1996,  9897,  2003,  1014,  1010,  2138,  1996, 20014,
        13910, 13033,  2003,  2019,  5976,  3853,  1012,  2057,  4663,  1996,
         2206,  3627,  1012,   102])"
663,1,"['normal distribution', 'random variable', 'random', 'normal', 'expectation', 'distribution', 'variable']", Three examples,seg_95,"the expectation of a normal distribution. let x be an n(µ, σ2) distributed random variable. then",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([2093, 4973])","tensor([  101,  1996, 17626,  1997,  1037,  3671,  4353,  1012,  2292,  1060,
         2022,  2019,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  5500,
         6721,  8023,  1012,  2059,   102])"
664,1,"['function', 'random variable', 'random', 'uniformly distributed', 'distribution', 'distribution function', 'expected value', 'variable']", The changeofvariable formula,seg_97,"often one does not want to compute the expected value of a random variable x but rather of a function of x , as, for example, x2. we then need to determine the distribution of y = x2, for example by computing the distribution function fy of y (this is an example of the general problem of how distributions change under transformations—this topic is the subject of chapter 8). for a concrete example, suppose an architect wants maximal variety in the sizes of buildings: these should be of the same width and depth x , but x is uniformly distributed between 0 and 10 meters. what is the distribution of the area x2 of a building; in particular, will this distribution be (anything near to) uniform? let us compute fy ; for 0 ≤ a ≤ 100:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  2411,  2028,  2515,  2025,  2215,  2000, 24134,  1996,  3517,
         3643,  1997,  1037,  6721,  8023,  1060,  2021,  2738,  1997,  1037,
         3853,  1997,  1060,  1010,  2004,  1010,  2005,  2742,  1010,  1060,
         2475,  1012,  2057,  2059,  2342,  2000,  5646,  1996,  4353,  1997,
         1061,  1027,  1060,  2475,  1010,  2005,  2742,  2011,  9798,  1996,
         4353,  3853,  1042,  2100,  1997,  1061,  1006,  2023,  2003,  2019,
         2742,  1997,  1996,  2236,  3291,  1997,  2129, 20611,  2689,  2104,
        21865,  1517,  2023,  8476,  2003,  1996,  3395,  1997,  3127,  1022,
         1007,  1012,  2005,  1037,  5509,  2742,  1010,  6814,  2019,  4944,
         4122, 29160,  3528,  1999,  1996, 10826,  1997,  3121,  1024,  2122,
         2323,  2022,  1997,  1996,  2168,  9381,  1998,  5995,  1060,  1010,
         2021,  1060,  2003, 27423,  5500,  2090,  1014,  1998,  2184,  5563,
         1012,  2054,  2003,  1996,  4353,  1997,  1996,  2181,  1060,  2475,
         1997,  1037,  2311,  1025,  1999,  3327,  1010,  2097,  2023,  4353,
         2022,  1006,  2505,  2379,  2000,  1007,  6375,  1029,  2292,  2149,
        24134,  1042,  2100,  1025,  2005,  1014,  1608,  1037,  1608,  2531,
         1024,   102])"
665,1,"['function', 'density function', 'probability', 'probability density function']", The changeofvariable formula,seg_97,"hence the probability density function fy of the area is, for 0 < y < 100 meters squared, given by",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  6516,  1996,  9723,  4304,  3853,  1042,  2100,  1997,  1996,
         2181,  2003,  1010,  2005,  1014,  1026,  1061,  1026,  2531,  5563,
        19942,  1010,  2445,  2011,   102])"
666,0,[], The changeofvariable formula,seg_97,"this means that the buildings with small areas are heavily overrepresented, because fy explodes near 0—see also figure 7.3, in which we plotted fy .",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  2023,  2965,  2008,  1996,  3121,  2007,  2235,  2752,  2024,
         4600,  2058,  2890, 28994, 14088,  1010,  2138,  1042,  2100, 27583,
         2379,  1014,  1517,  2156,  2036,  3275,  1021,  1012,  1017,  1010,
         1999,  2029,  2057, 27347,  1042,  2100,  1012,   102])"
667,1,"['locations', 'poisson', 'poisson process', 'process']", The changeofvariable formula,seg_97,"surprisingly, this is not very visible in figure 7.4, an example where we should believe our calculations more than our eyes. in the figure the locations of the buildings are generated by a poisson process, the subject of chapter 12. suppose that a contractor has to make an offer on the price of the foundations of the buildings. the amount of concrete he needs will be proportional to the area x2 of a building. so his problem is: what is the expected area of a building? with fy from (7.1) he finds",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101, 10889,  1010,  2023,  2003,  2025,  2200,  5710,  1999,  3275,
         1021,  1012,  1018,  1010,  2019,  2742,  2073,  2057,  2323,  2903,
         2256, 16268,  2062,  2084,  2256,  2159,  1012,  1999,  1996,  3275,
         1996,  5269,  1997,  1996,  3121,  2024,  7013,  2011,  1037, 13433,
        24077,  2832,  1010,  1996,  3395,  1997,  3127,  2260,  1012,  6814,
         2008,  1037, 13666,  2038,  2000,  2191,  2019,  3749,  2006,  1996,
         3976,  1997,  1996, 10100,  1997,  1996,  3121,  1012,  1996,  3815,
         1997,  5509,  2002,  3791,  2097,  2022, 14267,  2000,  1996,  2181,
         1060,  2475,  1997,  1037,  2311,  1012,  2061,  2010,  3291,  2003,
         1024,  2054,  2003,  1996,  3517,  2181,  1997,  1037,  2311,  1029,
         2007,  1042,  2100,  2013,  1006,  1021,  1012,  1015,  1007,  2002,
         4858,   102])"
668,1,"['probability', 'weighted average', 'average']", The changeofvariable formula,seg_97,"it is interesting to note that we really need to do this calculation, because the expected area is not simply the product of the expected width and the expected depth, which is 25 m2. however, there is a much easier way in which the contractor could have obtained this result. he could have argued that the value of the area is x2 when x is the width, and that he should take the weighted average of those values, where the weight at width x is given by the value fx(x) of the probability density of x . then he would have computed",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  2009,  2003,  5875,  2000,  3602,  2008,  2057,  2428,  2342,
         2000,  2079,  2023, 17208,  1010,  2138,  1996,  3517,  2181,  2003,
         2025,  3432,  1996,  4031,  1997,  1996,  3517,  9381,  1998,  1996,
         3517,  5995,  1010,  2029,  2003,  2423, 25525,  1012,  2174,  1010,
         2045,  2003,  1037,  2172,  6082,  2126,  1999,  2029,  1996, 13666,
         2071,  2031,  4663,  2023,  2765,  1012,  2002,  2071,  2031,  5275,
         2008,  1996,  3643,  1997,  1996,  2181,  2003,  1060,  2475,  2043,
         1060,  2003,  1996,  9381,  1010,  1998,  2008,  2002,  2323,  2202,
         1996, 18215,  2779,  1997,  2216,  5300,  1010,  2073,  1996,  3635,
         2012,  9381,  1060,  2003,  2445,  2011,  1996,  3643, 23292,  1006,
         1060,  1007,  1997,  1996,  9723,  4304,  1997,  1060,  1012,  2059,
         2002,  2052,  2031, 24806,   102])"
669,1,"['functions', 'random', 'random variables', 'expected values', 'variables']", The changeofvariable formula,seg_97,it is indeed a mathematical theorem that this is always a correct way to compute expected values of functions of random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 0., 1., 1., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  2009,  2003,  5262,  1037,  8045,  9872,  2008,  2023,  2003,
         2467,  1037,  6149,  2126,  2000, 24134,  3517,  5300,  1997,  4972,
         1997,  6721, 10857,  1012,   102])"
670,1,"['function', 'discrete', 'random variable', 'random', 'variable']", The changeofvariable formula,seg_97,"the change-of-variable formula. let x be a random variable, and let g : r → r be a function. if x is discrete, taking the values a1, a2, . . . , then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  1996,  2689,  1011,  1997,  1011,  8023,  5675,  1012,  2292,
         1060,  2022,  1037,  6721,  8023,  1010,  1998,  2292,  1043,  1024,
         1054,  1585,  1054,  2022,  1037,  3853,  1012,  2065,  1060,  2003,
        16246,  1010,  2635,  1996,  5300, 17350,  1010, 22441,  1010,  1012,
         1012,  1012,  1010,  2059,   102])"
671,1,"['continuous', 'function', 'density function', 'probability', 'probability density function']", The changeofvariable formula,seg_97,"if x is continuous, with probability density function f , then",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([ 101, 2065, 1060, 2003, 7142, 1010, 2007, 9723, 4304, 3853, 1042, 1010,
        2059,  102])"
672,1,['distribution'], The changeofvariable formula,seg_97,quick exercise 7.3 let x have a ber(p) distribution. compute e[2x].,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  4248,  6912,  1021,  1012,  1017,  2292,  1060,  2031,  1037,
         2022,  2099,  1006,  1052,  1007,  4353,  1012, 24134,  1041,  1031,
         1016,  2595,  1033,  1012,   102])"
673,1,"['continuous', 'function', 'expectation', 'continuous distribution', 'distribution']", The changeofvariable formula,seg_97,"an operation that occurs very often in practice is a change of units, e.g., from fahrenheit to celsius. what happens then to the expectation? here we have to apply the formula with the function g(x) = rx + s, where r and s are real numbers. when x has a continuous distribution, the change-of-variable formula yields:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  2019,  3169,  2008,  5158,  2200,  2411,  1999,  3218,  2003,
         1037,  2689,  1997,  3197,  1010,  1041,  1012,  1043,  1012,  1010,
         2013,  6904, 28362, 25311, 20175,  2000,  8292,  4877,  4173,  1012,
         2054,  6433,  2059,  2000,  1996, 17626,  1029,  2182,  2057,  2031,
         2000,  6611,  1996,  5675,  2007,  1996,  3853,  1043,  1006,  1060,
         1007,  1027,  1054,  2595,  1009,  1055,  1010,  2073,  1054,  1998,
         1055,  2024,  2613,  3616,  1012,  2043,  1060,  2038,  1037,  7142,
         4353,  1010,  1996,  2689,  1011,  1997,  1011,  8023,  5675, 16189,
         1024,   102])"
674,1,"['discrete', 'discrete random variables', 'random', 'random variables', 'variables']", The changeofvariable formula,seg_97,a similar computation with integrals replaced by sums gives the same result for discrete random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([ 1996,  2689, 11253, 10755, 19210,  5675])","tensor([  101,  1037,  2714, 22334,  2007,  9897,  2015,  2999,  2011, 20571,
         3957,  1996,  2168,  2765,  2005, 16246,  6721, 10857,  1012,   102])"
675,1,"['mean', 'deviation', 'information', 'random variable', 'random', 'expected value', 'variable']", Variance,seg_99,"suppose you are offered an opportunity for an investment whose expected return is 500. if you are given the extra information that this expected value is the result of a 50% chance of a 450 return and a 50% chance of a 550 return, then you would not hesitate to spend 450 on this investment. however, if the expected return were the result of a 50% chance of a 0 return and a 50% chance of a 1000 return, then most people would be reluctant to spend such an amount. this demonstrates that the spread (around the mean) of a random variable is of great importance. usually this is measured by the expected squared deviation from the mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0.])",tensor([23284]),"tensor([  101,  6814,  2017,  2024,  3253,  2019,  4495,  2005,  2019,  5211,
         3005,  3517,  2709,  2003,  3156,  1012,  2065,  2017,  2024,  2445,
         1996,  4469,  2592,  2008,  2023,  3517,  3643,  2003,  1996,  2765,
         1997,  1037,  2753,  1003,  3382,  1997,  1037, 10332,  2709,  1998,
         1037,  2753,  1003,  3382,  1997,  1037, 13274,  2709,  1010,  2059,
         2017,  2052,  2025, 16390,  2000,  5247, 10332,  2006,  2023,  5211,
         1012,  2174,  1010,  2065,  1996,  3517,  2709,  2020,  1996,  2765,
         1997,  1037,  2753,  1003,  3382,  1997,  1037,  1014,  2709,  1998,
         1037,  2753,  1003,  3382,  1997,  1037,  6694,  2709,  1010,  2059,
         2087,  2111,  2052,  2022, 11542,  2000,  5247,  2107,  2019,  3815,
         1012,  2023, 16691,  2008,  1996,  3659,  1006,  2105,  1996,  2812,
         1007,  1997,  1037,  6721,  8023,  2003,  1997,  2307,  5197,  1012,
         2788,  2023,  2003,  7594,  2011,  1996,  3517, 19942, 24353,  2013,
         1996,  2812,  1012,   102])"
676,1,"['variance', 'random variable', 'random', 'variable']", Variance,seg_99,definition. the variance var(x) of a random variable x is the number var(x) = e[(x − e[x ])2] .,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  6210,  1012,  1996, 23284, 13075,  1006,  1060,  1007,  1997,
         1037,  6721,  8023,  1060,  2003,  1996,  2193, 13075,  1006,  1060,
         1007,  1027,  1041,  1031,  1006,  1060,  1597,  1041,  1031,  1060,
         1033,  1007,  1016,  1033,  1012,   102])"
677,1,"['deviation', 'variance', 'random variable', 'random', 'standard deviation', 'standard', 'variable']", Variance,seg_99,"note that the variance of a random variable is always positive (or 0). furthermore, there is the question of existence and finiteness (cf. remark 7.1). in practical situations one often considers the standard deviation defined by √var(x), because it has the same dimension as e[x ].",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  3602,  2008,  1996, 23284,  1997,  1037,  6721,  8023,  2003,
         2467,  3893,  1006,  2030,  1014,  1007,  1012,  7297,  1010,  2045,
         2003,  1996,  3160,  1997,  4598,  1998, 10713,  2791,  1006, 12935,
         1012, 17674,  1021,  1012,  1015,  1007,  1012,  1999,  6742,  8146,
         2028,  2411, 10592,  1996,  3115, 24353,  4225,  2011,  1600, 10755,
         1006,  1060,  1007,  1010,  2138,  2009,  2038,  1996,  2168,  9812,
         2004,  1041,  1031,  1060,  1033,  1012,   102])"
678,1,"['normal', 'normal distribution', 'variance', 'distribution']", Variance,seg_99,"as an example, let us compute the variance of a normal distribution. if x has an n(µ, σ2) distribution, then:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  2004,  2019,  2742,  1010,  2292,  2149, 24134,  1996, 23284,
         1997,  1037,  3671,  4353,  1012,  2065,  1060,  2038,  2019,  1050,
         1006,  1085,  1010,  1173,  2475,  1007,  4353,  1010,  2059,  1024,
          102])"
679,0,[], Variance,seg_99,here we substituted z = (x − µ)/σ. using integration by parts one finds that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([23284]),"tensor([  101,  2182,  2057, 17316,  1062,  1027,  1006,  1060,  1597,  1085,
         1007,  1013,  1173,  1012,  2478,  8346,  2011,  3033,  2028,  4858,
         2008,   102])"
680,0,[], Variance,seg_99,we have found the following property.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([23284]),"tensor([ 101, 2057, 2031, 2179, 1996, 2206, 3200, 1012,  102])"
681,1,"['normal distribution', 'random variable', 'random', 'normal', 'distribution', 'variable']", Variance,seg_99,"variance of a normal distribution. let x be an n(µ, σ2) distributed random variable. then",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0.])",tensor([23284]),"tensor([  101, 23284,  1997,  1037,  3671,  4353,  1012,  2292,  1060,  2022,
         2019,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  5500,  6721,
         8023,  1012,  2059,   102])"
682,1,"['deviation', 'variance', 'standard deviation', 'standard']", Variance,seg_99,"quick exercise 7.4 let us call the two returns discussed above y1 and y2, respectively. compute the variance and standard deviation of y1 and y2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  4248,  6912,  1021,  1012,  1018,  2292,  2149,  2655,  1996,
         2048,  5651,  6936,  2682,  1061,  2487,  1998,  1061,  2475,  1010,
         4414,  1012, 24134,  1996, 23284,  1998,  3115, 24353,  1997,  1061,
         2487,  1998,  1061,  2475,  1012,   102])"
683,0,[], Variance,seg_99,"it is often not practical to compute var(x) directly from the definition, but one uses the following rule.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([23284]),"tensor([  101,  2009,  2003,  2411,  2025,  6742,  2000, 24134, 13075,  1006,
         1060,  1007,  3495,  2013,  1996,  6210,  1010,  2021,  2028,  3594,
         1996,  2206,  3627,  1012,   102])"
684,1,"['variance', 'variable']", Variance,seg_99,"an alternative expression for the variance. for any random variable x ,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([23284]),"tensor([  101,  2019,  4522,  3670,  2005,  1996, 23284,  1012,  2005,  2151,
         6721,  8023,  1060,  1010,   102])"
685,1,"['continuous', 'continuous random variable', 'function', 'density function', 'discrete', 'probability', 'probability density function', 'random variable', 'random', 'variable', 'case']", Variance,seg_99,"to see that this rule holds, we apply the change-of-variable formula. suppose x is a continuous random variable with probability density function f (the discrete case runs completely analogously). using the change-of-variable formula, well-known properties of the integral, and ∫−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  2000,  2156,  2008,  2023,  3627,  4324,  1010,  2057,  6611,
         1996,  2689,  1011,  1997,  1011,  8023,  5675,  1012,  6814,  1060,
         2003,  1037,  7142,  6721,  8023,  2007,  9723,  4304,  3853,  1042,
         1006,  1996, 16246,  2553,  3216,  3294, 19639,  2135,  1007,  1012,
         2478,  1996,  2689,  1011,  1997,  1011,  8023,  5675,  1010,  2092,
         1011,  2124,  5144,  1997,  1996,  9897,  1010,  1998,   100,   102])"
686,1,"['moment', 'second moment', 'probabilities']", Variance,seg_99,"with this rule we make two steps: first we compute e[x ], then we compute e[x2]. the latter is called the second moment of x. let us compare the computations, using the definition and this rule for the drill bit example. recall that for this example x takes the values 2, 3, and 4 with probabilities 0.1, 0.7, and 0.2. we found that e[x ]= 3.1. according to the definition",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  2007,  2023,  3627,  2057,  2191,  2048,  4084,  1024,  2034,
         2057, 24134,  1041,  1031,  1060,  1033,  1010,  2059,  2057, 24134,
         1041,  1031,  1060,  2475,  1033,  1012,  1996,  3732,  2003,  2170,
         1996,  2117,  2617,  1997,  1060,  1012,  2292,  2149, 12826,  1996,
        22334,  2015,  1010,  2478,  1996,  6210,  1998,  2023,  3627,  2005,
         1996, 12913,  2978,  2742,  1012,  9131,  2008,  2005,  2023,  2742,
         1060,  3138,  1996,  5300,  1016,  1010,  1017,  1010,  1998,  1018,
         2007,  4013,  3676, 14680,  1014,  1012,  1015,  1010,  1014,  1012,
         1021,  1010,  1998,  1014,  1012,  1016,  1012,  2057,  2179,  2008,
         1041,  1031,  1060,  1033,  1027,  1017,  1012,  1015,  1012,  2429,
         2000,  1996,  6210,   102])"
687,0,[], Variance,seg_99,using the rule is neater and somewhat faster:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([23284]),"tensor([  101,  2478,  1996,  3627,  2003, 15708,  2121,  1998,  5399,  5514,
         1024,   102])"
688,1,['variance'], Variance,seg_99,what happens to the variance if we change units? at the end of the previous section we showed that e[rx + s] = re[x ] + s. this can be used to obtain the corresponding rule for the variance under change of units (see also exercise 7.15).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  2054,  6433,  2000,  1996, 23284,  2065,  2057,  2689,  3197,
         1029,  2012,  1996,  2203,  1997,  1996,  3025,  2930,  2057,  3662,
         2008,  1041,  1031,  1054,  2595,  1009,  1055,  1033,  1027,  2128,
         1031,  1060,  1033,  1009,  1055,  1012,  2023,  2064,  2022,  2109,
         2000,  6855,  1996,  7978,  3627,  2005,  1996, 23284,  2104,  2689,
         1997,  3197,  1006,  2156,  2036,  6912,  1021,  1012,  2321,  1007,
         1012,   102])"
689,1,"['variance', 'random variable', 'random', 'variable']", Variance,seg_99,"expectation and variance under change of units. for any random variable x and any real numbers r and s,",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101, 17626,  1998, 23284,  2104,  2689,  1997,  3197,  1012,  2005,
         2151,  6721,  8023,  1060,  1998,  2151,  2613,  3616,  1054,  1998,
         1055,  1010,   102])"
690,1,['variance'], Variance,seg_99,note that the variance is insensitive to the shift over s. can you understand why this must be true without doing any computations?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([23284]),"tensor([  101,  3602,  2008,  1996, 23284,  2003, 16021,  6132, 13043,  2000,
         1996,  5670,  2058,  1055,  1012,  2064,  2017,  3305,  2339,  2023,
         2442,  2022,  2995,  2302,  2725,  2151, 22334,  2015,  1029,   102])"
691,1,"['function', 'density function', 'probability', 'probability density function']", Solutions to the quick exercises,seg_101,"7.2 the probability density function f of u is given by f(x) = 0 outside [2, 5] and f(x) = 1/3 for 2 ≤ x ≤ 5; hence",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1021, 1012, 1016, 1996, 9723, 4304, 3853, 1042, 1997, 1057, 2003,
        2445, 2011, 1042, 1006, 1060, 1007, 1027, 1014, 2648, 1031, 1016, 1010,
        1019, 1033, 1998, 1042, 1006, 1060, 1007, 1027, 1015, 1013, 1017, 2005,
        1016, 1608, 1060, 1608, 1019, 1025, 6516,  102])"
692,0,[], Solutions to the quick exercises,seg_101,7.3 using the change-of-variable formula we obtain,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1021, 1012, 1017, 2478, 1996, 2689, 1011, 1997, 1011, 8023, 5675,
        2057, 6855,  102])"
693,1,['distribution'], Solutions to the quick exercises,seg_101,"you could also have noted that y = 2x has a distribution given by p(y = 1) = 1 − p, p(y = 2) = p; hence",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2017, 2071, 2036, 2031, 3264, 2008, 1061, 1027, 1016, 2595, 2038,
        1037, 4353, 2445, 2011, 1052, 1006, 1061, 1027, 1015, 1007, 1027, 1015,
        1597, 1052, 1010, 1052, 1006, 1061, 1027, 1016, 1007, 1027, 1052, 1025,
        6516,  102])"
694,1,"['deviation', 'standard deviation', 'standard']", Solutions to the quick exercises,seg_101,so y1 has standard deviation 50 and,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2061,  1061,  2487,  2038,  3115, 24353,  2753,  1998,   102])"
695,1,"['deviation', 'standard deviation', 'standard']", Solutions to the quick exercises,seg_101,so y2 has standard deviation 500.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2061,  1061,  2475,  2038,  3115, 24353,  3156,  1012,   102])"
696,1,['outcome'], Exercises,seg_103,7.1 let t be the outcome of a roll with a fair die.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1021, 1012, 1015, 2292, 1056, 2022, 1996, 9560, 1997, 1037, 4897,
        2007, 1037, 4189, 3280, 1012,  102])"
697,1,"['probability', 'outcomes', 'distribution', 'probability distribution']", Exercises,seg_103,"a. describe the probability distribution of t , that is, list the outcomes and",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6235,  1996,  9723,  4353,  1997,  1056,  1010,
         2008,  2003,  1010,  2862,  1996, 13105,  1998,   102])"
698,1,['probabilities'], Exercises,seg_103,the corresponding probabilities.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  7978,  4013,  3676, 14680,  1012,   102])"
699,1,"['discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'distribution', 'variable', 'probability distribution']", Exercises,seg_103,7.2 the probability distribution of a discrete random variable x is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  1016,  1996,  9723,  4353,  1997,  1037, 16246,
         6721,  8023,  1060,  2003,  2445,  2011,   102])"
700,1,"['probability', 'probability distribution', 'distribution']", Exercises,seg_103,b. give the probability distribution of y = x2 and compute e[y ] using the,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2507,  1996,  9723,  4353,  1997,  1061,  1027,
         1060,  2475,  1998, 24134,  1041,  1031,  1061,  1033,  2478,  1996,
          102])"
701,0,[], Exercises,seg_103,distribution of y .,tensor(0),"tensor([0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 4353, 1997, 1061, 1012,  102])"
702,0,[], Exercises,seg_103,c. determine e[x2] using the change-of-variable formula. check your an-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1039, 1012, 5646, 1041, 1031, 1060, 2475, 1033, 2478, 1996, 2689,
        1011, 1997, 1011, 8023, 5675, 1012, 4638, 2115, 2019, 1011,  102])"
703,0,[], Exercises,seg_103,swer against the answer in b.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 25430,  2121,  2114,  1996,  3437,  1999,  1038,  1012,   102])"
704,1,"['random', 'random variable', 'variable']", Exercises,seg_103,"7.3 for a certain random variable x it is known that e[x ] = 2, var(x) = 3. what is e[x2]?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1021,  1012,  1017,  2005,  1037,  3056,  6721,  8023,  1060,
         2009,  2003,  2124,  2008,  1041,  1031,  1060,  1033,  1027,  1016,
         1010, 13075,  1006,  1060,  1007,  1027,  1017,  1012,  2054,  2003,
         1041,  1031,  1060,  2475,  1033,  1029,   102])"
705,1,"['variance', 'random variable', 'random', 'expectation', 'variable']", Exercises,seg_103,"7.4 let x be a random variable with e[x ] = 2, var(x) = 4. compute the expectation and variance of 3 − 2x .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1021,  1012,  1018,  2292,  1060,  2022,  1037,  6721,  8023,
         2007,  1041,  1031,  1060,  1033,  1027,  1016,  1010, 13075,  1006,
         1060,  1007,  1027,  1018,  1012, 24134,  1996, 17626,  1998, 23284,
         1997,  1017,  1597,  1016,  2595,  1012,   102])"
706,1,"['expectation', 'variance', 'distribution']", Exercises,seg_103,7.5 determine the expectation and variance of the ber(p) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1021,  1012,  1019,  5646,  1996, 17626,  1998, 23284,  1997,
         1996,  2022,  2099,  1006,  1052,  1007,  4353,  1012,   102])"
707,1,"['function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'variable']", Exercises,seg_103,7.6 the random variable z has probability density function f(z) = 3z2/19 for 2 ≤ z ≤ 3 and f(z) = 0 elsewhere. determine e[z]. before you do the calculation: will the answer lie closer to 2 than to 3 or the other way around?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  1020,  1996,  6721,  8023,  1062,  2038,  9723,
         4304,  3853,  1042,  1006,  1062,  1007,  1027,  1017,  2480,  2475,
         1013,  2539,  2005,  1016,  1608,  1062,  1608,  1017,  1998,  1042,
         1006,  1062,  1007,  1027,  1014,  6974,  1012,  5646,  1041,  1031,
         1062,  1033,  1012,  2077,  2017,  2079,  1996, 17208,  1024,  2097,
         1996,  3437,  4682,  3553,  2000,  1016,  2084,  2000,  1017,  2030,
         1996,  2060,  2126,  2105,  1029,   102])"
708,1,"['function', 'density function', 'variance', 'probability', 'probability density function', 'random variable', 'random', 'expectation', 'variable']", Exercises,seg_103,"7.7 given is a random variable x with probability density function f given by f(x) = 0 for x < 0, and for x > 1, and f(x) = 4x − 4x3 for 0 ≤ x ≤ 1. determine the expectation and variance of the random variable 2x + 3.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  1021,  2445,  2003,  1037,  6721,  8023,  1060,
         2007,  9723,  4304,  3853,  1042,  2445,  2011,  1042,  1006,  1060,
         1007,  1027,  1014,  2005,  1060,  1026,  1014,  1010,  1998,  2005,
         1060,  1028,  1015,  1010,  1998,  1042,  1006,  1060,  1007,  1027,
         1018,  2595,  1597,  1018,  2595,  2509,  2005,  1014,  1608,  1060,
         1608,  1015,  1012,  5646,  1996, 17626,  1998, 23284,  1997,  1996,
         6721,  8023,  1016,  2595,  1009,  1017,  1012,   102])"
709,1,"['continuous', 'continuous random variable', 'function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Exercises,seg_103,"7.8 given is a continuous random variable x whose distribution function f satisfies f (x) = 0 for x < 0, f (x) = 1 for x > 1, and f (x) = x(2 − x) for 0 ≤ x ≤ 1. determine e[x ].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  1022,  2445,  2003,  1037,  7142,  6721,  8023,
         1060,  3005,  4353,  3853,  1042,  2938,  2483, 14213,  1042,  1006,
         1060,  1007,  1027,  1014,  2005,  1060,  1026,  1014,  1010,  1042,
         1006,  1060,  1007,  1027,  1015,  2005,  1060,  1028,  1015,  1010,
         1998,  1042,  1006,  1060,  1007,  1027,  1060,  1006,  1016,  1597,
         1060,  1007,  2005,  1014,  1608,  1060,  1608,  1015,  1012,  5646,
         1041,  1031,  1060,  1033,  1012,   102])"
710,1,"['random variable', 'random', 'distribution', 'variable']", Exercises,seg_103,"7.9 let u be a random variable with a u(α, β) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])",tensor([11110]),"tensor([ 101, 1021, 1012, 1023, 2292, 1057, 2022, 1037, 6721, 8023, 2007, 1037,
        1057, 1006, 1155, 1010, 1156, 1007, 4353, 1012,  102])"
711,1,['expectation'], Exercises,seg_103,a. determine the expectation of u .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996, 17626,  1997,  1057,  1012,   102])"
712,1,['variance'], Exercises,seg_103,b. determine the variance of u .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996, 23284,  1997,  1057,  1012,   102])"
713,1,"['exponential', 'parameter', 'exponential distribution', 'distribution']", Exercises,seg_103,7.10 let x have an exponential distribution with parameter λ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  2184,  2292,  1060,  2031,  2019, 27258,  4353,
         2007, 16381,  1165,  1012,   102])"
714,0,[], Exercises,seg_103,a. determine e[x ] and e[x2] using partial integration.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 1041, 1031, 1060, 1033, 1998, 1041, 1031, 1060,
        2475, 1033, 2478, 7704, 8346, 1012,  102])"
715,1,"['mean', 'pareto distribution', 'pareto', 'distribution']", Exercises,seg_103,7.11 in this exercise we take a look at the mean of a pareto distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  2340,  1999,  2023,  6912,  2057,  2202,  1037,
         2298,  2012,  1996,  2812,  1997,  1037, 11968, 18903,  4353,  1012,
          102])"
716,1,"['expectation', 'distribution']", Exercises,seg_103,a. determine the expectation of a par(2) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996, 17626,  1997,  1037, 11968,  1006,
         1016,  1007,  4353,  1012,   102])"
717,1,['expectation'], Exercises,seg_103,b. determine the expectation of a par(1,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996, 17626,  1997,  1037, 11968,  1006,
         1015,   102])"
718,1,['distribution'], Exercises,seg_103,2 ) distribution.,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1016, 1007, 4353, 1012,  102])"
719,1,['distribution'], Exercises,seg_103,c. let x have a par(α) distribution. show that e[x ] = α/(α− 1) if α > 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2292,  1060,  2031,  1037, 11968,  1006,  1155,
         1007,  4353,  1012,  2265,  2008,  1041,  1031,  1060,  1033,  1027,
         1155,  1013,  1006,  1155, 22543,  1015,  1007,  2065,  1155,  1028,
         1015,  1012,   102])"
720,1,"['variance', 'distribution']", Exercises,seg_103,7.12 for which α is the variance of a par(α) distribution finite? compute the variance for these α.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  2260,  2005,  2029,  1155,  2003,  1996, 23284,
         1997,  1037, 11968,  1006,  1155,  1007,  4353, 10713,  1029, 24134,
         1996, 23284,  2005,  2122,  1155,  1012,   102])"
721,0,[], Exercises,seg_103,7.13 remember that we found on page 95 that the expected area of a building was 333,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1021,  1012,  2410,  3342,  2008,  2057,  2179,  2006,  3931,
         5345,  2008,  1996,  3517,  2181,  1997,  1037,  2311,  2001, 21211,
          102])"
722,1,"['random', 'random variable', 'variable']", Exercises,seg_103,"1 m2, whereas the square of the expected width was only 25 m2. this phenomenon is more general: show that for any random variable x one has",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1015, 25525,  1010,  6168,  1996,  2675,  1997,  1996,  3517,
         9381,  2001,  2069,  2423, 25525,  1012,  2023,  9575,  2003,  2062,
         2236,  1024,  2265,  2008,  2005,  2151,  6721,  8023,  1060,  2028,
         2038,   102])"
723,1,"['random', 'random variable', 'variable']", Exercises,seg_103,"7.14 suppose we choose arbitrarily a point from the square with corners at (2,1), (3,1), (2,2), and (3,2). the random variable a is the area of the triangle with its corners at (2,1), (3,1), and the chosen point. (see also exercise 5.9 and figure 7.5.) compute e[a].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  2403,  6814,  2057,  5454, 12098, 16313, 19848,
         6588,  1037,  2391,  2013,  1996,  2675,  2007,  8413,  2012,  1006,
         1016,  1010,  1015,  1007,  1010,  1006,  1017,  1010,  1015,  1007,
         1010,  1006,  1016,  1010,  1016,  1007,  1010,  1998,  1006,  1017,
         1010,  1016,  1007,  1012,  1996,  6721,  8023,  1037,  2003,  1996,
         2181,  1997,  1996,  9546,  2007,  2049,  8413,  2012,  1006,  1016,
         1010,  1015,  1007,  1010,  1006,  1017,  1010,  1015,  1007,  1010,
         1998,  1996,  4217,  2391,  1012,  1006,  2156,  2036,  6912,  1019,
         1012,  1023,  1998,  3275,  1021,  1012,  1019,  1012,  1007, 24134,
         1041,  1031,  1037,  1033,  1012,   102])"
724,1,"['random variable', 'random', 'expectation', 'variable']", Exercises,seg_103,7.15 let x be a random variable and r and s any real numbers. use the change-of-units rule e[rx + s] = re[x ] + s for the expectation to obtain a and b.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  2321,  2292,  1060,  2022,  1037,  6721,  8023,
         1998,  1054,  1998,  1055,  2151,  2613,  3616,  1012,  2224,  1996,
         2689,  1011,  1997,  1011,  3197,  3627,  1041,  1031,  1054,  2595,
         1009,  1055,  1033,  1027,  2128,  1031,  1060,  1033,  1009,  1055,
         2005,  1996, 17626,  2000,  6855,  1037,  1998,  1038,  1012,   102])"
725,0,[], Exercises,seg_103,c. combine parts a and b to show that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012, 11506,  3033,  1037,  1998,  1038,  2000,  2265,
         2008,   102])"
726,1,"['function', 'density function', 'probability', 'probability density function', 'random variable', 'random', 'expectation', 'variable']", Exercises,seg_103,"7.16 the probability density function f of the random variable x used in figure 7.2 is given by f(x) = 0 outside (0, 1) and f(x) = −4x ln(x) for 0 < x < 1. compute the position of the balancing point in the figure, that is, compute the expectation of x .",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  2385,  1996,  9723,  4304,  3853,  1042,  1997,
         1996,  6721,  8023,  1060,  2109,  1999,  3275,  1021,  1012,  1016,
         2003,  2445,  2011,  1042,  1006,  1060,  1007,  1027,  1014,  2648,
         1006,  1014,  1010,  1015,  1007,  1998,  1042,  1006,  1060,  1007,
         1027,  1597,  2549,  2595,  1048,  2078,  1006,  1060,  1007,  2005,
         1014,  1026,  1060,  1026,  1015,  1012, 24134,  1996,  2597,  1997,
         1996, 20120,  2391,  1999,  1996,  3275,  1010,  2008,  2003,  1010,
        24134,  1996, 17626,  1997,  1060,  1012,   102])"
727,1,"['discrete random variable', 'discrete', 'probabilities', 'random variable', 'random', 'variable']", Exercises,seg_103,"7.17 let u be a discrete random variable taking the values a1, . . . , ar with probabilities p1, . . . , pr.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1021,  1012,  2459,  2292,  1057,  2022,  1037, 16246,  6721,
         8023,  2635,  1996,  5300, 17350,  1010,  1012,  1012,  1012,  1010,
        12098,  2007,  4013,  3676, 14680,  1052,  2487,  1010,  1012,  1012,
         1012,  1010, 10975,  1012,   102])"
728,1,"['random', 'random variable', 'variable']", Exercises,seg_103,"b. suppose that v is a random variable taking the values b1, . . . , br with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  2008,  1058,  2003,  1037,  6721,  8023,
         2635,  1996,  5300, 29491,  1010,  1012,  1012,  1012,  1010,  7987,
         2007,   102])"
729,1,"['expectations', 'maxima and minima', 'variances', 'distributions', 'transformed', 'random', 'random variables', 'process', 'inequality', 'variables']", Computations with random variables,seg_105,"there are many ways to make new random variables from old ones. of course this is not a goal in itself; usually new variables are created naturally in the process of solving a practical problem. the expectations and variances of such new random variables can be calculated with the change-of-variable formula. however, often one would like to know the distributions of the new random variables. we shall show how to determine these distributions, how to compare expectations of random variables and their transformed versions (jensen’s inequality), and how to determine the distributions of maxima and minima of several random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([22334,  2015,  2007,  6721, 10857])","tensor([  101,  2045,  2024,  2116,  3971,  2000,  2191,  2047,  6721, 10857,
         2013,  2214,  3924,  1012,  1997,  2607,  2023,  2003,  2025,  1037,
         3125,  1999,  2993,  1025,  2788,  2047, 10857,  2024,  2580,  8100,
         1999,  1996,  2832,  1997, 13729,  1037,  6742,  3291,  1012,  1996,
        10908,  1998, 23284,  2015,  1997,  2107,  2047,  6721, 10857,  2064,
         2022, 10174,  2007,  1996,  2689,  1011,  1997,  1011,  8023,  5675,
         1012,  2174,  1010,  2411,  2028,  2052,  2066,  2000,  2113,  1996,
        20611,  1997,  1996,  2047,  6721, 10857,  1012,  2057,  4618,  2265,
         2129,  2000,  5646,  2122, 20611,  1010,  2129,  2000, 12826, 10908,
         1997,  6721, 10857,  1998,  2037,  8590,  4617,  1006, 14857,  1521,
         1055, 16440,  1007,  1010,  1998,  2129,  2000,  5646,  1996, 20611,
         1997, 20446,  2050,  1998,  7163,  2863,  1997,  2195,  6721, 10857,
         1012,   102])"
730,1,"['function', 'random variable', 'random', 'distribution', 'variable']", Transforming discrete random variables,seg_107,"the problem we consider in this section and the next is how the distribution of a random variable x changes if we apply a function g to it, thus obtaining a new random variable y :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([17903, 16246,  6721, 10857])","tensor([  101,  1996,  3291,  2057,  5136,  1999,  2023,  2930,  1998,  1996,
         2279,  2003,  2129,  1996,  4353,  1997,  1037,  6721,  8023,  1060,
         3431,  2065,  2057,  6611,  1037,  3853,  1043,  2000,  2009,  1010,
         2947, 11381,  1037,  2047,  6721,  8023,  1061,  1024,   102])"
731,1,"['discrete random variable', 'discrete', 'probability', 'random variable', 'random', 'distribution', 'variable']", Transforming discrete random variables,seg_107,"when x is a discrete random variable this is usually not too hard to do: it is just a matter of bookkeeping. we illustrate this with an example. imagine an airline company that sells tickets for a flight with 150 available seats. it has no idea about how many tickets it will sell. suppose, to keep the example simple, that the number x of tickets that will be sold can be anything from 1 to 200. moreover, suppose that each possibility has equal probability to occur, i.e., p(x = j) = 1/200 for j = 1, 2, . . . , 200. the real interest of the airline company is in the random variable y, which is the number of passengers that have to be refused. what is the distribution of y ? to answer this, note that nobody will be refused when the passengers fit in the plane, hence",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903, 16246,  6721, 10857])","tensor([  101,  2043,  1060,  2003,  1037, 16246,  6721,  8023,  2023,  2003,
         2788,  2025,  2205,  2524,  2000,  2079,  1024,  2009,  2003,  2074,
         1037,  3043,  1997,  2338, 18321,  1012,  2057, 19141,  2023,  2007,
         2019,  2742,  1012,  5674,  2019,  8582,  2194,  2008, 15187,  9735,
         2005,  1037,  3462,  2007,  5018,  2800,  4272,  1012,  2009,  2038,
         2053,  2801,  2055,  2129,  2116,  9735,  2009,  2097,  5271,  1012,
         6814,  1010,  2000,  2562,  1996,  2742,  3722,  1010,  2008,  1996,
         2193,  1060,  1997,  9735,  2008,  2097,  2022,  2853,  2064,  2022,
         2505,  2013,  1015,  2000,  3263,  1012,  9308,  1010,  6814,  2008,
         2169,  6061,  2038,  5020,  9723,  2000,  5258,  1010,  1045,  1012,
         1041,  1012,  1010,  1052,  1006,  1060,  1027,  1046,  1007,  1027,
         1015,  1013,  3263,  2005,  1046,  1027,  1015,  1010,  1016,  1010,
         1012,  1012,  1012,  1010,  3263,  1012,  1996,  2613,  3037,  1997,
         1996,  8582,  2194,  2003,  1999,  1996,  6721,  8023,  1061,  1010,
         2029,  2003,  1996,  2193,  1997,  5467,  2008,  2031,  2000,  2022,
         4188,  1012,  2054,  2003,  1996,  4353,  1997,  1061,  1029,  2000,
         3437,  2023,  1010,  3602,  2008,  6343,  2097,  2022,  4188,  2043,
         1996,  5467,  4906,  1999,  1996,  4946,  1010,  6516,   102])"
732,1,['function'], Transforming discrete random variables,seg_107,"note that in this example the function g is given by g(x) = max{x − 150, 0}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903, 16246,  6721, 10857])","tensor([ 101, 3602, 2008, 1999, 2023, 2742, 1996, 3853, 1043, 2003, 2445, 2011,
        1043, 1006, 1060, 1007, 1027, 4098, 1063, 1060, 1597, 5018, 1010, 1014,
        1065, 1012,  102])"
733,1,"['function', 'probability', 'distribution', 'case', 'probability distribution']", Transforming discrete random variables,seg_107,quick exercise 8.1 let z be the number of passengers that will be in the plane. determine the probability distribution of z. what is the function g in this case?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0.])","tensor([17903, 16246,  6721, 10857])","tensor([ 101, 4248, 6912, 1022, 1012, 1015, 2292, 1062, 2022, 1996, 2193, 1997,
        5467, 2008, 2097, 2022, 1999, 1996, 4946, 1012, 5646, 1996, 9723, 4353,
        1997, 1062, 1012, 2054, 2003, 1996, 3853, 1043, 1999, 2023, 2553, 1029,
         102])"
734,1,"['continuous', 'continuous random variable', 'function', 'probability', 'random variable', 'continuous random variables', 'transformed', 'random', 'random variables', 'distribution', 'distribution function', 'variables', 'variable']", Transforming continuous random variables,seg_109,"we now turn to continuous random variables. since single values occur with probability zero for a continuous random variable, the approach above does not work. the strategy now is to first determine the distribution function of the transformed random variable y = g(x) and then the probability density by differentiating. we shall illustrate this with the following example (actually we saw an example of such a computation in section 7.3 with the function g(x) = x2).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2057,  2085,  2735,  2000,  7142,  6721, 10857,  1012,  2144,
         2309,  5300,  5258,  2007,  9723,  5717,  2005,  1037,  7142,  6721,
         8023,  1010,  1996,  3921,  2682,  2515,  2025,  2147,  1012,  1996,
         5656,  2085,  2003,  2000,  2034,  5646,  1996,  4353,  3853,  1997,
         1996,  8590,  6721,  8023,  1061,  1027,  1043,  1006,  1060,  1007,
         1998,  2059,  1996,  9723,  4304,  2011,  2367, 15370,  1012,  2057,
         4618, 19141,  2023,  2007,  1996,  2206,  2742,  1006,  2941,  2057,
         2387,  2019,  2742,  1997,  2107,  1037, 22334,  1999,  2930,  1021,
         1012,  1017,  2007,  1996,  3853,  1043,  1006,  1060,  1007,  1027,
         1060,  2475,  1007,  1012,   102])"
735,1,"['interval', 'measuring', 'method', 'limit', 'uniformly distributed']", Transforming continuous random variables,seg_109,"we consider two methods that traffic police employ to determine whether you deserve a fine for speeding. from experience, the traffic police think that vehicles are driving at speeds ranging from 60 to 90 km/hour at a certain road section where the speed limit is 80 km/hour. they assume that the speed of the cars is uniformly distributed over this interval. the first method is measuring the speed at a fixed spot in the road section. with this method the police will find that about (90 − 80)/(90 − 60) = 1/3 of the cars will be fined.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2057,  5136,  2048,  4725,  2008,  4026,  2610, 12666,  2000,
         5646,  3251,  2017, 10107,  1037,  2986,  2005, 21485,  1012,  2013,
         3325,  1010,  1996,  4026,  2610,  2228,  2008,  4683,  2024,  4439,
         2012, 10898,  7478,  2013,  3438,  2000,  3938,  2463,  1013,  3178,
         2012,  1037,  3056,  2346,  2930,  2073,  1996,  3177,  5787,  2003,
         3770,  2463,  1013,  3178,  1012,  2027,  7868,  2008,  1996,  3177,
         1997,  1996,  3765,  2003, 27423,  5500,  2058,  2023, 13483,  1012,
         1996,  2034,  4118,  2003,  9854,  1996,  3177,  2012,  1037,  4964,
         3962,  1999,  1996,  2346,  2930,  1012,  2007,  2023,  4118,  1996,
         2610,  2097,  2424,  2008,  2055,  1006,  3938,  1597,  3770,  1007,
         1013,  1006,  3938,  1597,  3438,  1007,  1027,  1015,  1013,  1017,
         1997,  1996,  3765,  2097,  2022, 16981,  1012,   102])"
736,1,"['model', 'uniform distribution', 'method', 'distribution']", Transforming continuous random variables,seg_109,"for the second method, cameras are put at the beginning and end of a 1-km road section, and a driver is fined if he spends less than a certain amount of time in the road section. cars driving at 60 km/hour need one minute, those driving at 90 km/hour only 40 seconds. let us therefore model the time t an arbitrary car spends in the section by a uniform distribution over (40, 60) seconds. what is the speed v we deduce from this travelling time? note that",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2005,  1996,  2117,  4118,  1010,  8629,  2024,  2404,  2012,
         1996,  2927,  1998,  2203,  1997,  1037,  1015,  1011,  2463,  2346,
         2930,  1010,  1998,  1037,  4062,  2003, 16981,  2065,  2002, 15970,
         2625,  2084,  1037,  3056,  3815,  1997,  2051,  1999,  1996,  2346,
         2930,  1012,  3765,  4439,  2012,  3438,  2463,  1013,  3178,  2342,
         2028,  3371,  1010,  2216,  4439,  2012,  3938,  2463,  1013,  3178,
         2069,  2871,  3823,  1012,  2292,  2149,  3568,  2944,  1996,  2051,
         1056,  2019, 15275,  2482, 15970,  1999,  1996,  2930,  2011,  1037,
         6375,  4353,  2058,  1006,  2871,  1010,  3438,  1007,  3823,  1012,
         2054,  2003,  1996,  3177,  1058,  2057,  2139,  8566,  3401,  2013,
         2023,  8932,  2051,  1029,  3602,  2008,   102])"
737,0,[], Transforming continuous random variables,seg_109,since there are 3600 seconds in an hour we have that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([17903,  7142,  6721, 10857])","tensor([ 101, 2144, 2045, 2024, 9475, 2692, 3823, 1999, 2019, 3178, 2057, 2031,
        2008,  102])"
738,1,"['distribution function', 'function', 'distribution']", Transforming continuous random variables,seg_109,we therefore find for the distribution function fv (v) = p(v ≤ v) of the speed v that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([ 101, 2057, 3568, 2424, 2005, 1996, 4353, 3853, 1042, 2615, 1006, 1058,
        1007, 1027, 1052, 1006, 1058, 1608, 1058, 1007, 1997, 1996, 3177, 1058,
        2008,  102])"
739,1,['probability'], Transforming continuous random variables,seg_109,for all speeds v between 60 and 90. we can now obtain the probability density fv of v by differentiating:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2005,  2035, 10898,  1058,  2090,  3438,  1998,  3938,  1012,
         2057,  2064,  2085,  6855,  1996,  9723,  4304,  1042,  2615,  1997,
         1058,  2011,  2367, 15370,  1024,   102])"
740,1,['model'], Transforming continuous random variables,seg_109,it is amusing to note that with the second model the traffic police write fewer speeding tickets because,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2009,  2003, 19142,  2000,  3602,  2008,  2007,  1996,  2117,
         2944,  1996,  4026,  2610,  4339,  8491, 21485,  9735,  2138,   102])"
741,1,"['model', 'mean', 'probability', 'inequality']", Transforming continuous random variables,seg_109,"(with the first model we found probability 1/3 that a car drove faster than 80 km/hour.) this is related to a famous result in road traffic research, which is succinctly phrased as: “space mean speed < time mean speed” (see [37]). it is also related to jensen’s inequality, which we introduce in section 8.3.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  1006,  2007,  1996,  2034,  2944,  2057,  2179,  9723,  1015,
         1013,  1017,  2008,  1037,  2482,  5225,  5514,  2084,  3770,  2463,
         1013,  3178,  1012,  1007,  2023,  2003,  3141,  2000,  1037,  3297,
         2765,  1999,  2346,  4026,  2470,  1010,  2029,  2003, 10514, 14693,
        12273, 14626,  7655,  2094,  2004,  1024,  1523,  2686,  2812,  3177,
         1026,  2051,  2812,  3177,  1524,  1006,  2156,  1031,  4261,  1033,
         1007,  1012,  2009,  2003,  2036,  3141,  2000, 14857,  1521,  1055,
        16440,  1010,  2029,  2057,  8970,  1999,  2930,  1022,  1012,  1017,
         1012,   102])"
742,1,"['continuous', 'outcome', 'continuous distribution', 'distribution']", Transforming continuous random variables,seg_109,"similar to the way this is done in the traffic example, one can determine the distribution of y = 1/x for any x with a continuous distribution. the outcome will be that if x has density fx , then the density fy of y is given",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2714,  2000,  1996,  2126,  2023,  2003,  2589,  1999,  1996,
         4026,  2742,  1010,  2028,  2064,  5646,  1996,  4353,  1997,  1061,
         1027,  1015,  1013,  1060,  2005,  2151,  1060,  2007,  1037,  7142,
         4353,  1012,  1996,  9560,  2097,  2022,  2008,  2065,  1060,  2038,
         4304, 23292,  1010,  2059,  1996,  4304,  1042,  2100,  1997,  1061,
         2003,  2445,   102])"
743,1,"['continuous', 'probability', 'continuous distribution', 'distribution']", Transforming continuous random variables,seg_109,quick exercise 8.2 let x have a continuous distribution with probability density fx(x) = 1/[π(1 + x2)]. what is the distribution of y = 1/x?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  4248,  6912,  1022,  1012,  1016,  2292,  1060,  2031,  1037,
         7142,  4353,  2007,  9723,  4304, 23292,  1006,  1060,  1007,  1027,
         1015,  1013,  1031,  1170,  1006,  1015,  1009,  1060,  2475,  1007,
         1033,  1012,  2054,  2003,  1996,  4353,  1997,  1061,  1027,  1015,
         1013,  1060,  1029,   102])"
744,1,['transformation'], Transforming continuous random variables,seg_109,"we turn to a second example. a very common transformation is a change of units, for instance, from celsius to fahrenheit. if x is temperature expressed in degrees celsius, then y = 9",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2057,  2735,  2000,  1037,  2117,  2742,  1012,  1037,  2200,
         2691,  8651,  2003,  1037,  2689,  1997,  3197,  1010,  2005,  6013,
         1010,  2013,  8292,  4877,  4173,  2000,  6904, 28362, 25311, 20175,
         1012,  2065,  1060,  2003,  4860,  5228,  1999,  5445,  8292,  4877,
         4173,  1010,  2059,  1061,  1027,  1023,   102])"
745,1,"['functions', 'distribution']", Transforming continuous random variables,seg_109,5x+32 is the temperature in degrees fahrenheit. let fx and fy be the distribution functions of x and y . then we have for any a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  1019,  2595,  1009,  3590,  2003,  1996,  4860,  1999,  5445,
         6904, 28362, 25311, 20175,  1012,  2292, 23292,  1998,  1042,  2100,
         2022,  1996,  4353,  4972,  1997,  1060,  1998,  1061,  1012,  2059,
         2057,  2031,  2005,  2151,  1037,   102])"
746,1,['probability'], Transforming continuous random variables,seg_109,"by differentiating fy (using the chain rule), we obtain the probability density fy (y) = 5",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2011,  2367, 15370,  1042,  2100,  1006,  2478,  1996,  4677,
         3627,  1007,  1010,  2057,  6855,  1996,  9723,  4304,  1042,  2100,
         1006,  1061,  1007,  1027,  1019,   102])"
747,0,[], Transforming continuous random variables,seg_109,"9fx( 5 9 (y − 32)). we can do this for more general changes of units, and we obtain the following useful rule.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([17903,  7142,  6721, 10857])","tensor([ 101, 1023, 2546, 2595, 1006, 1019, 1023, 1006, 1061, 1597, 3590, 1007,
        1007, 1012, 2057, 2064, 2079, 2023, 2005, 2062, 2236, 3431, 1997, 3197,
        1010, 1998, 2057, 6855, 1996, 2206, 6179, 3627, 1012,  102])"
748,1,"['continuous', 'function', 'density function', 'transformation', 'probability density function', 'probability', 'distribution', 'distribution function', 'variable']", Transforming continuous random variables,seg_109,"change-of-units transformation. let x be a continuous random variable with distribution function fx and probability density function fx . if we change units to y = rx+s for real numbers r > 0 and s, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2689,  1011,  1997,  1011,  3197,  8651,  1012,  2292,  1060,
         2022,  1037,  7142,  6721,  8023,  2007,  4353,  3853, 23292,  1998,
         9723,  4304,  3853, 23292,  1012,  2065,  2057,  2689,  3197,  2000,
         1061,  1027,  1054,  2595,  1009,  1055,  2005,  2613,  3616,  1054,
         1028,  1014,  1998,  1055,  1010,  2059,   102])"
749,1,"['random variable', 'random', 'distribution', 'variable']", Transforming continuous random variables,seg_109,"as an example, let x be a random variable with an n(µ, σ2) distribution, and let y = rx + s. then this rule gives us",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([17903,  7142,  6721, 10857])","tensor([ 101, 2004, 2019, 2742, 1010, 2292, 1060, 2022, 1037, 6721, 8023, 2007,
        2019, 1050, 1006, 1085, 1010, 1173, 2475, 1007, 4353, 1010, 1998, 2292,
        1061, 1027, 1054, 2595, 1009, 1055, 1012, 2059, 2023, 3627, 3957, 2149,
         102])"
750,1,"['normal distribution', 'probability', 'normal', 'distribution', 'parameters']", Transforming continuous random variables,seg_109,for −∞ < y < ∞. on the right-hand side we recognize the probability density of a normal distribution with parameters rµ+ s and r2σ2. this illustrates the following rule.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  2005,  1597, 30128,  1026,  1061,  1026,  1601,  1012,  2006,
         1996,  2157,  1011,  2192,  2217,  2057,  6807,  1996,  9723,  4304,
         1997,  1037,  3671,  4353,  2007, 11709,  1054, 29659,  1009,  1055,
         1998,  1054,  2475, 29733,  2475,  1012,  2023, 24899,  1996,  2206,
         3627,  1012,   102])"
751,1,"['random variable', 'random', 'random variables', 'distribution', 'variables', 'variable']", Transforming continuous random variables,seg_109,"normal random variables under change of units. let x be a random variable with an n(µ, σ2) distribution. for any r = 0 and any s, the random variable rx + s has an n(rµ + s, r2σ2) distribution.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  3671,  6721, 10857,  2104,  2689,  1997,  3197,  1012,  2292,
         1060,  2022,  1037,  6721,  8023,  2007,  2019,  1050,  1006,  1085,
         1010,  1173,  2475,  1007,  4353,  1012,  2005,  2151,  1054,  1027,
         1014,  1998,  2151,  1055,  1010,  1996,  6721,  8023,  1054,  2595,
         1009,  1055,  2038,  2019,  1050,  1006,  1054, 29659,  1009,  1055,
         1010,  1054,  2475, 29733,  2475,  1007,  4353,  1012,   102])"
752,1,['distribution'], Transforming continuous random variables,seg_109,"note that if x has an n(µ, σ2) distribution, then with r = 1/σ and s = −µ/σ we conclude that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  3602,  2008,  2065,  1060,  2038,  2019,  1050,  1006,  1085,
         1010,  1173,  2475,  1007,  4353,  1010,  2059,  2007,  1054,  1027,
         1015,  1013,  1173,  1998,  1055,  1027,  1597, 29659,  1013,  1173,
         2057, 16519,  2008,   102])"
753,1,['distribution'], Transforming continuous random variables,seg_109,"has an n(0, 1) distribution. as a consequence",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([ 101, 2038, 2019, 1050, 1006, 1014, 1010, 1015, 1007, 4353, 1012, 2004,
        1037, 9509,  102])"
754,1,"['probability', 'random variable', 'random', 'variable']", Transforming continuous random variables,seg_109,"so any probability for an n(µ, σ2) distributed random variable x can be expressed in terms of an n(0, 1) distributed random variable z.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([17903,  7142,  6721, 10857])","tensor([ 101, 2061, 2151, 9723, 2005, 2019, 1050, 1006, 1085, 1010, 1173, 2475,
        1007, 5500, 6721, 8023, 1060, 2064, 2022, 5228, 1999, 3408, 1997, 2019,
        1050, 1006, 1014, 1010, 1015, 1007, 5500, 6721, 8023, 1062, 1012,  102])"
755,1,"['probabilities', 'distribution']", Transforming continuous random variables,seg_109,"quick exercise 8.3 compute the probabilities p(x ≤ 5) and p(x ≥ 2) for x with an n(4, 25) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([17903,  7142,  6721, 10857])","tensor([  101,  4248,  6912,  1022,  1012,  1017, 24134,  1996,  4013,  3676,
        14680,  1052,  1006,  1060,  1608,  1019,  1007,  1998,  1052,  1006,
         1060,  1609,  1016,  1007,  2005,  1060,  2007,  2019,  1050,  1006,
         1018,  1010,  2423,  1007,  4353,  1012,   102])"
756,1,"['transformation', 'distribution']", Jensens inequality,seg_111,without actually computing the distribution of g(x) we can often tell how e[g(x)] relates to g(e[x ]). for the change-of-units transformation g(x) = rx + s we know that e[g(x)] = g(e[x ]) (see section 7.3). it is a common,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  2302,  2941,  9798,  1996,  4353,  1997,  1043,  1006,  1060,
         1007,  2057,  2064,  2411,  2425,  2129,  1041,  1031,  1043,  1006,
         1060,  1007,  1033, 14623,  2000,  1043,  1006,  1041,  1031,  1060,
         1033,  1007,  1012,  2005,  1996,  2689,  1011,  1997,  1011,  3197,
         8651,  1043,  1006,  1060,  1007,  1027,  1054,  2595,  1009,  1055,
         2057,  2113,  2008,  1041,  1031,  1043,  1006,  1060,  1007,  1033,
         1027,  1043,  1006,  1041,  1031,  1060,  1033,  1007,  1006,  2156,
         2930,  1021,  1012,  1017,  1007,  1012,  2009,  2003,  1037,  2691,
          102])"
757,1,"['functions', 'nonlinear']", Jensens inequality,seg_111,"error to equate these two sides for other functions g. in fact, equality will very rarely occur for nonlinear g.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  7561,  2000,  1041, 16211,  2618,  2122,  2048,  3903,  2005,
         2060,  4972,  1043,  1012,  1999,  2755,  1010,  9945,  2097,  2200,
         6524,  5258,  2005, 27400,  1043,  1012,   102])"
758,1,['average'], Jensens inequality,seg_111,"for example, suppose that a company that produces microelectronic parts has a target production of 240 chips per day, but the yield has only been 40, 60, and 80 chips on three consecutive days. the average production over the three days then is 60 chips, so on average the production should have been 4 times higher to reach the target. however, one can also look at this in the following way: on the three days the production should have been 240/40 = 6, 240/60 = 4, and 240/80 = 3 times higher. on average that is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  2005,  2742,  1010,  6814,  2008,  1037,  2194,  2008,  7137,
        12702, 12260,  6593,  4948,  2594,  3033,  2038,  1037,  4539,  2537,
         1997, 11212, 11772,  2566,  2154,  1010,  2021,  1996, 10750,  2038,
         2069,  2042,  2871,  1010,  3438,  1010,  1998,  3770, 11772,  2006,
         2093,  5486,  2420,  1012,  1996,  2779,  2537,  2058,  1996,  2093,
         2420,  2059,  2003,  3438, 11772,  1010,  2061,  2006,  2779,  1996,
         2537,  2323,  2031,  2042,  1018,  2335,  3020,  2000,  3362,  1996,
         4539,  1012,  2174,  1010,  2028,  2064,  2036,  2298,  2012,  2023,
         1999,  1996,  2206,  2126,  1024,  2006,  1996,  2093,  2420,  1996,
         2537,  2323,  2031,  2042, 11212,  1013,  2871,  1027,  1020,  1010,
        11212,  1013,  3438,  1027,  1018,  1010,  1998, 11212,  1013,  3770,
         1027,  1017,  2335,  3020,  1012,  2006,  2779,  2008,  2003,   102])"
759,1,"['outcomes', 'probabilities', 'random variable', 'random', 'variable']", Jensens inequality,seg_111,"times higher! what happens here can be explained (take for x the part of the target production that is realized, where you give equal probabilities to the three outcomes 1/6, 1/4, and 1/3) by the fact that if x is a random variable taking positive values, then always",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  2335,  3020,   999,  2054,  6433,  2182,  2064,  2022,  4541,
         1006,  2202,  2005,  1060,  1996,  2112,  1997,  1996,  4539,  2537,
         2008,  2003,  3651,  1010,  2073,  2017,  2507,  5020,  4013,  3676,
        14680,  2000,  1996,  2093, 13105,  1015,  1013,  1020,  1010,  1015,
         1013,  1018,  1010,  1998,  1015,  1013,  1017,  1007,  2011,  1996,
         2755,  2008,  2065,  1060,  2003,  1037,  6721,  8023,  2635,  3893,
         5300,  1010,  2059,  2467,   102])"
760,1,"['functions', 'convex functions', 'random', 'inequality', 'case']", Jensens inequality,seg_111,"unless var(x) = 0, which only happens if x is not random at all (cf. exercise 7.17). this inequality is the case g(x) = 1/x on (0,∞) of the following result that holds for general convex functions g.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  4983, 13075,  1006,  1060,  1007,  1027,  1014,  1010,  2029,
         2069,  6433,  2065,  1060,  2003,  2025,  6721,  2012,  2035,  1006,
        12935,  1012,  6912,  1021,  1012,  2459,  1007,  1012,  2023, 16440,
         2003,  1996,  2553,  1043,  1006,  1060,  1007,  1027,  1015,  1013,
         1060,  2006,  1006,  1014,  1010,  1601,  1007,  1997,  1996,  2206,
         2765,  2008,  4324,  2005,  2236, 18309,  4972,  1043,  1012,   102])"
761,1,"['convex function', 'function', 'random variable', 'random', 'inequality', 'variable']", Jensens inequality,seg_111,"jensen’s inequality. let g be a convex function, and let x be a random variable. then",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101, 14857,  1521,  1055, 16440,  1012,  2292,  1043,  2022,  1037,
        18309,  3853,  1010,  1998,  2292,  1060,  2022,  1037,  6721,  8023,
         1012,  2059,   102])"
762,1,"['function', 'interval', 'random', 'inequality']", Jensens inequality,seg_111,"recall from calculus that a twice differentiable function g is convex on an interval i if g′′(x) ≥ 0 for all x in i, and strictly convex if g′′(x) > 0 for all x in i. when x takes its values in an interval i (this can, for instance, be i = (−∞,∞)), and g is strictly convex on i, then strict inequality holds: g(e[x ]) < e[g(x)], unless x is not random.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  9131,  2013, 19276,  2008,  1037,  3807,  2367, 19210,  3853,
         1043,  2003, 18309,  2006,  2019, 13483,  1045,  2065,  1043,  1531,
         1531,  1006,  1060,  1007,  1609,  1014,  2005,  2035,  1060,  1999,
         1045,  1010,  1998,  9975, 18309,  2065,  1043,  1531,  1531,  1006,
         1060,  1007,  1028,  1014,  2005,  2035,  1060,  1999,  1045,  1012,
         2043,  1060,  3138,  2049,  5300,  1999,  2019, 13483,  1045,  1006,
         2023,  2064,  1010,  2005,  6013,  1010,  2022,  1045,  1027,  1006,
         1597, 30128,  1010,  1601,  1007,  1007,  1010,  1998,  1043,  2003,
         9975, 18309,  2006,  1045,  1010,  2059,  9384, 16440,  4324,  1024,
         1043,  1006,  1041,  1031,  1060,  1033,  1007,  1026,  1041,  1031,
         1043,  1006,  1060,  1007,  1033,  1010,  4983,  1060,  2003,  2025,
         6721,  1012,   102])"
763,1,"['probability', 'random variable', 'random', 'variable', 'case']", Jensens inequality,seg_111,"in figure 8.1 we illustrate the way in which this result can be obtained for the special case of a random variable x that takes two values, a and b. in the figure, x takes these two values with probability 3/4 and 1/4 respectively. convexity of g forces any line segment connecting two points on the graph of g to lie above the part of the graph between these two points. so if we choose the line segment from (a, g(a)) to (b, g(b)), then it follows that the point",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  1999,  3275,  1022,  1012,  1015,  2057, 19141,  1996,  2126,
         1999,  2029,  2023,  2765,  2064,  2022,  4663,  2005,  1996,  2569,
         2553,  1997,  1037,  6721,  8023,  1060,  2008,  3138,  2048,  5300,
         1010,  1037,  1998,  1038,  1012,  1999,  1996,  3275,  1010,  1060,
         3138,  2122,  2048,  5300,  2007,  9723,  1017,  1013,  1018,  1998,
         1015,  1013,  1018,  4414,  1012, 18309,  3012,  1997,  1043,  2749,
         2151,  2240,  6903,  7176,  2048,  2685,  2006,  1996, 10629,  1997,
         1043,  2000,  4682,  2682,  1996,  2112,  1997,  1996, 10629,  2090,
         2122,  2048,  2685,  1012,  2061,  2065,  2057,  5454,  1996,  2240,
         6903,  2013,  1006,  1037,  1010,  1043,  1006,  1037,  1007,  1007,
         2000,  1006,  1038,  1010,  1043,  1006,  1038,  1007,  1007,  1010,
         2059,  2009,  4076,  2008,  1996,  2391,   102])"
764,1,['function'], Jensens inequality,seg_111,"a simple example is given by g(x) = x2. this function is convex (g′′(x) = 2 for all x), and hence",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  1037,  3722,  2742,  2003,  2445,  2011,  1043,  1006,  1060,
         1007,  1027,  1060,  2475,  1012,  2023,  3853,  2003, 18309,  1006,
         1043,  1531,  1531,  1006,  1060,  1007,  1027,  1016,  2005,  2035,
         1060,  1007,  1010,  1998,  6516,   102])"
765,0,[], Jensens inequality,seg_111,"note that this is exactly the same as saying that var(x) ≥ 0, which we have already seen in section 7.4.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([14857,  2015, 16440])","tensor([  101,  3602,  2008,  2023,  2003,  3599,  1996,  2168,  2004,  3038,
         2008, 13075,  1006,  1060,  1007,  1609,  1014,  1010,  2029,  2057,
         2031,  2525,  2464,  1999,  2930,  1021,  1012,  1018,  1012,   102])"
766,1,"['random', 'random variable', 'variable']", Jensens inequality,seg_111,quick exercise 8.4 let x be a random variable with var(x) > 0. which is true: e[e−x] < e−e[x] or e[e−x] > e−e[x]?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14857,  2015, 16440])","tensor([  101,  4248,  6912,  1022,  1012,  1018,  2292,  1060,  2022,  1037,
         6721,  8023,  2007, 13075,  1006,  1060,  1007,  1028,  1014,  1012,
         2029,  2003,  2995,  1024,  1041,  1031,  1041, 22543,  2595,  1033,
         1026,  1041, 22543,  2063,  1031,  1060,  1033,  2030,  1041,  1031,
         1041, 22543,  2595,  1033,  1028,  1041, 22543,  2063,  1031,  1060,
         1033,  1029,   102])"
767,1,"['location', 'probability', 'contamination', 'level', 'random', 'random variables', 'distribution', 'variables', 'variable', 'probability distribution']", Extremes,seg_113,"in many situations the maximum (or minimum) of a sequence x1, x2, . . . , xn of random variables is the variable of interest. for instance, let x1, x2, . . . , x365 be the water level of a river during the days of a particular year for a particular location. suppose there will be flooding if the level exceeds a certain height—usually the height of the dykes. the question whether flooding occurs during a year is completely answered by looking at the maximum of x1, x2, . . . , x365. if one wants to predict occurrence of flooding in the future, the probability distribution of this maximum is of great interest. similar models arise, for instance, when one is interested in possible damage from a series of shocks or in the extent of a contamination plume in the subsurface.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([28800]),"tensor([  101,  1999,  2116,  8146,  1996,  4555,  1006,  2030,  6263,  1007,
         1997,  1037,  5537,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1997,  6721, 10857,  2003,  1996,
         8023,  1997,  3037,  1012,  2005,  6013,  1010,  2292,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060, 21619,
         2629,  2022,  1996,  2300,  2504,  1997,  1037,  2314,  2076,  1996,
         2420,  1997,  1037,  3327,  2095,  2005,  1037,  3327,  3295,  1012,
         6814,  2045,  2097,  2022,  9451,  2065,  1996,  2504, 23651,  1037,
         3056,  4578,  1517,  2788,  1996,  4578,  1997,  1996, 22212,  2015,
         1012,  1996,  3160,  3251,  9451,  5158,  2076,  1037,  2095,  2003,
         3294,  4660,  2011,  2559,  2012,  1996,  4555,  1997,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060, 21619,
         2629,  1012,  2065,  2028,  4122,  2000, 16014, 14404,  1997,  9451,
         1999,  1996,  2925,  1010,  1996,  9723,  4353,  1997,  2023,  4555,
         2003,  1997,  2307,  3037,  1012,  2714,  4275, 13368,  1010,  2005,
         6013,  1010,  2043,  2028,  2003,  4699,  1999,  2825,  4053,  2013,
         1037,  2186,  1997, 28215,  2030,  1999,  1996,  6698,  1997,  1037,
        18701, 26888,  1999,  1996,  4942, 26210, 12172,  1012,   102])"
768,1,"['random', 'random variable', 'variable', 'distribution']", Extremes,seg_113,we want to find the distribution of the random variable,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.])",tensor([28800]),"tensor([ 101, 2057, 2215, 2000, 2424, 1996, 4353, 1997, 1996, 6721, 8023,  102])"
769,1,"['distribution function', 'function', 'distribution']", Extremes,seg_113,we can determine the distribution function of z by realizing that the maximum of the xi is smaller than a number a if and only if all xi are smaller than a:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([28800]),"tensor([ 101, 2057, 2064, 5646, 1996, 4353, 3853, 1997, 1062, 2011, 9301, 2008,
        1996, 4555, 1997, 1996, 8418, 2003, 3760, 2084, 1037, 2193, 1037, 2065,
        1998, 2069, 2065, 2035, 8418, 2024, 3760, 2084, 1037, 1024,  102])"
770,1,"['events', 'independence', 'random', 'random variables', 'independent', 'random variables independent', 'variables', 'case']", Extremes,seg_113,"now suppose that the events {xi ≤ ai} are independent for every choice of the ai. in this case we call the random variables independent (see also chapter 9, where we study independence of random variables). in particular, the events {xi ≤ a} are independent for all a. it then follows that",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([28800]),"tensor([  101,  2085,  6814,  2008,  1996,  2824,  1063,  8418,  1608,  9932,
         1065,  2024,  2981,  2005,  2296,  3601,  1997,  1996,  9932,  1012,
         1999,  2023,  2553,  2057,  2655,  1996,  6721, 10857,  2981,  1006,
         2156,  2036,  3127,  1023,  1010,  2073,  2057,  2817,  4336,  1997,
         6721, 10857,  1007,  1012,  1999,  3327,  1010,  1996,  2824,  1063,
         8418,  1608,  1037,  1065,  2024,  2981,  2005,  2035,  1037,  1012,
         2009,  2059,  4076,  2008,   102])"
771,1,"['function', 'random', 'random variables', 'distribution', 'distribution function', 'variables']", Extremes,seg_113,"hence, if all random variables have the same distribution function f , then the following result holds.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([28800]),"tensor([  101,  6516,  1010,  2065,  2035,  6721, 10857,  2031,  1996,  2168,
         4353,  3853,  1042,  1010,  2059,  1996,  2206,  2765,  4324,  1012,
          102])"
772,1,"['function', 'random', 'random variables', 'independent random variables', 'distribution', 'distribution function', 'variables', 'independent']", Extremes,seg_113,"the distribution of the maximum. let x1, x2, . . . , xn be n independent random variables with the same distribution function f , and let z = max{x1, x2, . . . , xn}. then",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([28800]),"tensor([  101,  1996,  4353,  1997,  1996,  4555,  1012,  2292,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2022,  1050,  2981,  6721, 10857,  2007,  1996,  2168,  4353,  3853,
         1042,  1010,  1998,  2292,  1062,  1027,  4098,  1063,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1065,  1012,  2059,   102])"
773,1,"['function', 'density function', 'probability', 'probability density function', 'random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Extremes,seg_113,"quick exercise 8.5 let x1, x2, . . . , xn be independent random variables, all with a u(0, 1) distribution. let z = max{x1, . . . , xn}. compute the distribution function and the probability density function of z.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([28800]),"tensor([  101,  4248,  6912,  1022,  1012,  1019,  2292,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,
         2981,  6721, 10857,  1010,  2035,  2007,  1037,  1057,  1006,  1014,
         1010,  1015,  1007,  4353,  1012,  2292,  1062,  1027,  4098,  1063,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1065,
         1012, 24134,  1996,  4353,  3853,  1998,  1996,  9723,  4304,  3853,
         1997,  1062,  1012,   102])"
774,1,['distribution'], Extremes,seg_113,what can we say about the distribution of the minimum? let,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([28800]),"tensor([ 101, 2054, 2064, 2057, 2360, 2055, 1996, 4353, 1997, 1996, 6263, 1029,
        2292,  102])"
775,1,"['complement', 'function', 'event', 'distribution', 'distribution function']", Extremes,seg_113,we can now find the distribution function fv of v by observing that the minimum of the xi is larger than a number a if and only if all xi are larger than a. the trick is to switch to the complement of the event {v ≤ a}:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([28800]),"tensor([  101,  2057,  2064,  2085,  2424,  1996,  4353,  3853,  1042,  2615,
         1997,  1058,  2011, 14158,  2008,  1996,  6263,  1997,  1996,  8418,
         2003,  3469,  2084,  1037,  2193,  1037,  2065,  1998,  2069,  2065,
         2035,  8418,  2024,  3469,  2084,  1037,  1012,  1996,  7577,  2003,
         2000,  6942,  2000,  1996, 13711,  1997,  1996,  2724,  1063,  1058,
         1608,  1037,  1065,  1024,   102])"
776,1,['independence'], Extremes,seg_113,"so using independence and switching back again, we obtain",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([28800]),"tensor([  101,  2061,  2478,  4336,  1998, 11991,  2067,  2153,  1010,  2057,
         6855,   102])"
777,0,[], Extremes,seg_113,we have found the following result for the minimum.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([28800]),"tensor([ 101, 2057, 2031, 2179, 1996, 2206, 2765, 2005, 1996, 6263, 1012,  102])"
778,1,"['function', 'random', 'random variables', 'independent random variables', 'distribution', 'distribution function', 'variables', 'independent']", Extremes,seg_113,"the distribution of the minimum. let x1, x2, . . . , xn be n independent random variables with the same distribution function f , and let v = min{x1, x2, . . . , xn}. then",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([28800]),"tensor([  101,  1996,  4353,  1997,  1996,  6263,  1012,  2292,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2022,  1050,  2981,  6721, 10857,  2007,  1996,  2168,  4353,  3853,
         1042,  1010,  1998,  2292,  1058,  1027,  8117,  1063,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1065,  1012,  2059,   102])"
779,1,"['function', 'density function', 'probability', 'probability density function', 'random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Extremes,seg_113,"quick exercise 8.6 let x1, x2, . . . , xn be independent random variables, all with a u(0, 1) distribution. let v = min{x1, . . . , xn}. compute the distribution function and the probability density function of v .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([28800]),"tensor([  101,  4248,  6912,  1022,  1012,  1020,  2292,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,
         2981,  6721, 10857,  1010,  2035,  2007,  1037,  1057,  1006,  1014,
         1010,  1015,  1007,  4353,  1012,  2292,  1058,  1027,  8117,  1063,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1065,
         1012, 24134,  1996,  4353,  3853,  1998,  1996,  9723,  4304,  3853,
         1997,  1058,  1012,   102])"
780,1,['probability'], Solutions to the quick exercises,seg_115,8.2 the probability density of y = 1/x is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1022, 1012, 1016, 1996, 9723, 4304, 1997, 1061, 1027, 1015, 1013,
        1060, 2003,  102])"
781,1,"['cauchy', 'cauchy distribution', 'standard', 'distribution']", Solutions to the quick exercises,seg_115,"we see that 1/x has the same distribution as x ! (this distribution is called the standard cauchy distribution, it will be introduced in chapter 11.)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2057,  2156,  2008,  1015,  1013,  1060,  2038,  1996,  2168,
         4353,  2004,  1060,   999,  1006,  2023,  4353,  2003,  2170,  1996,
         3115,  6187, 10875,  2100,  4353,  1010,  2009,  2097,  2022,  3107,
         1999,  3127,  2340,  1012,  1007,   102])"
782,1,"['table', 'distribution']", Solutions to the quick exercises,seg_115,"8.3 first define z = (x−4)/5, which has an n(0, 1) distribution. then from table b.1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1022,  1012,  1017,  2034,  9375,  1062,  1027,  1006,  1060,
        22543,  2549,  1007,  1013,  1019,  1010,  2029,  2038,  2019,  1050,
         1006,  1014,  1010,  1015,  1007,  4353,  1012,  2059,  2013,  2795,
         1038,  1012,  1015,   102])"
783,1,"['symmetry', 'normal', 'normal distribution', 'distribution']", Solutions to the quick exercises,seg_115,"similarly, using the symmetry of the normal distribution,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  6660,  1010,  2478,  1996, 14991,  1997,  1996,  3671,  4353,
         1010,   102])"
784,1,['inequality'], Solutions to the quick exercises,seg_115,"8.4 if g(x) = e−x, then g′′(x) = e−x > 0; hence g is strictly convex. it follows from jensen’s inequality that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1022,  1012,  1018,  2065,  1043,  1006,  1060,  1007,  1027,
         1041, 22543,  2595,  1010,  2059,  1043,  1531,  1531,  1006,  1060,
         1007,  1027,  1041, 22543,  2595,  1028,  1014,  1025,  6516,  1043,
         2003,  9975, 18309,  1012,  2009,  4076,  2013, 14857,  1521,  1055,
        16440,  2008,   102])"
785,1,['inequality'], Solutions to the quick exercises,seg_115,"moreover, if var(x) > 0, then the inequality is strict.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  9308,  1010,  2065, 13075,  1006,  1060,  1007,  1028,  1014,
         1010,  2059,  1996, 16440,  2003,  9384,  1012,   102])"
786,1,"['function', 'density function', 'probability', 'probability density function', 'distribution', 'distribution function']", Solutions to the quick exercises,seg_115,"8.5 the distribution function of the xi is given by f (x) = x on [0, 1]. therefore the distribution function fz of the maximum z is equal to fz(a) = (f (a))n = an. its probability density function is",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1022, 1012, 1019, 1996, 4353, 3853, 1997, 1996, 8418, 2003, 2445,
        2011, 1042, 1006, 1060, 1007, 1027, 1060, 2006, 1031, 1014, 1010, 1015,
        1033, 1012, 3568, 1996, 4353, 3853, 1042, 2480, 1997, 1996, 4555, 1062,
        2003, 5020, 2000, 1042, 2480, 1006, 1037, 1007, 1027, 1006, 1042, 1006,
        1037, 1007, 1007, 1050, 1027, 2019, 1012, 2049, 9723, 4304, 3853, 2003,
         102])"
787,1,"['function', 'density function', 'probability', 'probability density function', 'distribution', 'distribution function']", Solutions to the quick exercises,seg_115,"8.6 the distribution function of the xi is given by f (x) = x on [0, 1]. therefore the distribution function fv of the minimum v is equal to fv (a) = 1 − (1 − a)n. its probability density function is",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1022, 1012, 1020, 1996, 4353, 3853, 1997, 1996, 8418, 2003, 2445,
        2011, 1042, 1006, 1060, 1007, 1027, 1060, 2006, 1031, 1014, 1010, 1015,
        1033, 1012, 3568, 1996, 4353, 3853, 1042, 2615, 1997, 1996, 6263, 1058,
        2003, 5020, 2000, 1042, 2615, 1006, 1037, 1007, 1027, 1015, 1597, 1006,
        1015, 1597, 1037, 1007, 1050, 1012, 2049, 9723, 4304, 3853, 2003,  102])"
788,1,"['mean', 'deviation', 'probability', 'random variable', 'probabilities', 'random', 'distribution', 'variable']", Exercises,seg_117,"8.1 often one is interested in the distribution of the deviation of a random variable x from its mean µ = e[x ]. let x take the values 80, 90, 100, 110, and 120, all with probability 0.2; then e[x ] = µ = 100. determine the distribution of y = |x − µ|. that is, specify the values y can take and give the corresponding probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  1015,  2411,  2028,  2003,  4699,  1999,  1996,
         4353,  1997,  1996, 24353,  1997,  1037,  6721,  8023,  1060,  2013,
         2049,  2812,  1085,  1027,  1041,  1031,  1060,  1033,  1012,  2292,
         1060,  2202,  1996,  5300,  3770,  1010,  3938,  1010,  2531,  1010,
         7287,  1010,  1998,  6036,  1010,  2035,  2007,  9723,  1014,  1012,
         1016,  1025,  2059,  1041,  1031,  1060,  1033,  1027,  1085,  1027,
         2531,  1012,  5646,  1996,  4353,  1997,  1061,  1027,  1064,  1060,
         1597,  1085,  1064,  1012,  2008,  2003,  1010, 20648,  1996,  5300,
         1061,  2064,  2202,  1998,  2507,  1996,  7978,  4013,  3676, 14680,
         1012,   102])"
789,1,"['uniform distribution', 'distribution']", Exercises,seg_117,"8.2 suppose x has a uniform distribution over the points {1, 2, 3, 4, 5, 6} and that g(x) = sin(π",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([ 101, 1022, 1012, 1016, 6814, 1060, 2038, 1037, 6375, 4353, 2058, 1996,
        2685, 1063, 1015, 1010, 1016, 1010, 1017, 1010, 1018, 1010, 1019, 1010,
        1020, 1065, 1998, 2008, 1043, 1006, 1060, 1007, 1027, 8254, 1006, 1170,
         102])"
790,1,['distribution'], Exercises,seg_117,a. determine the distribution of y = g(x) = sin(π,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 1996, 4353, 1997, 1061, 1027, 1043, 1006, 1060,
        1007, 1027, 8254, 1006, 1170,  102])"
791,1,['probabilities'], Exercises,seg_117,"2 x), that is, specify the values y can take and give the corresponding probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1060,  1007,  1010,  2008,  2003,  1010, 20648,  1996,
         5300,  1061,  2064,  2202,  1998,  2507,  1996,  7978,  4013,  3676,
        14680,  1012,   102])"
792,1,['distribution'], Exercises,seg_117,2 x). determine the distribution of z.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1016, 1060, 1007, 1012, 5646, 1996, 4353, 1997, 1062, 1012,  102])"
793,1,['distribution'], Exercises,seg_117,c. determine the distribution of w = y 2 + z2. warning: in this example,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 5646, 1996, 4353, 1997, 1059, 1027, 1061, 1016, 1009,
        1062, 2475, 1012, 5432, 1024, 1999, 2023, 2742,  102])"
794,1,"['function', 'random variable', 'random', 'random variables', 'distribution', 'variables', 'variable']", Exercises,seg_117,"there is a very special dependency between y and z, and in general it is much harder to determine the distribution of a random variable that is a function of two other random variables. this is the subject of chapter 11.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2045,  2003,  1037,  2200,  2569, 24394,  2090,  1061,  1998,
         1062,  1010,  1998,  1999,  2236,  2009,  2003,  2172,  6211,  2000,
         5646,  1996,  4353,  1997,  1037,  6721,  8023,  2008,  2003,  1037,
         3853,  1997,  2048,  2060,  6721, 10857,  1012,  2023,  2003,  1996,
         3395,  1997,  3127,  2340,  1012,   102])"
795,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'uniformly distributed', 'variable']", Exercises,seg_117,"8.3 the continuous random variable u is uniformly distributed over [0, 1].",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  1017,  1996,  7142,  6721,  8023,  1057,  2003,
        27423,  5500,  2058,  1031,  1014,  1010,  1015,  1033,  1012,   102])"
796,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,a. determine the distribution function of v = 2u + 7. what kind of distri-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 1996, 4353, 3853, 1997, 1058, 1027, 1016, 2226,
        1009, 1021, 1012, 2054, 2785, 1997, 4487, 3367, 3089, 1011,  102])"
797,0,[], Exercises,seg_117,bution does v have?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2021, 3258, 2515, 1058, 2031, 1029,  102])"
798,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,b. determine the distribution function of v = ru + s for all real numbers,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996,  4353,  3853,  1997,  1058,  1027,
        21766,  1009,  1055,  2005,  2035,  2613,  3616,   102])"
799,0,[], Exercises,seg_117,r > 0 and s. see exercise 8.9 for what happens for negative r.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1054, 1028, 1014, 1998, 1055, 1012, 2156, 6912, 1022, 1012, 1023,
        2005, 2054, 6433, 2005, 4997, 1054, 1012,  102])"
800,1,"['exponential distributions', 'transforming', 'distributions', 'exponential']", Exercises,seg_117,8.4 transforming exponential distributions.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  1018, 17903, 27258, 20611,  1012,   102])"
801,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,2 ) distribution. determine the distribution function of 1 2x . what kind of distribution does 1 2x have?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1016, 1007, 4353, 1012, 5646, 1996, 4353, 3853, 1997, 1015, 1016,
        2595, 1012, 2054, 2785, 1997, 4353, 2515, 1015, 1016, 2595, 2031, 1029,
         102])"
802,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,b. let x have an exp(λ) distribution. determine the distribution function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2292, 1060, 2031, 2019, 4654, 2361, 1006, 1165, 1007,
        4353, 1012, 5646, 1996, 4353, 3853,  102])"
803,1,['distribution'], Exercises,seg_117,of λx . what kind of distribution does λx have?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1997, 1165, 2595, 1012, 2054, 2785, 1997, 4353, 2515, 1165, 2595,
        2031, 1029,  102])"
804,1,"['continuous', 'continuous random variable', 'probability', 'random variable', 'random', 'variable']", Exercises,seg_117,8.5 let x be a continuous random variable with probability density function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1022, 1012, 1019, 2292, 1060, 2022, 1037, 7142, 6721, 8023, 2007,
        9723, 4304, 3853,  102])"
805,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,a. determine the distribution function fx .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996,  4353,  3853, 23292,  1012,   102])"
806,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,b. let y = √x . determine the distribution function fy .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2292, 1061, 1027, 1600, 2595, 1012, 5646, 1996, 4353,
        3853, 1042, 2100, 1012,  102])"
807,1,['probability'], Exercises,seg_117,c. determine the probability density of y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 5646, 1996, 9723, 4304, 1997, 1061, 1012,  102])"
808,1,"['continuous', 'continuous random variable', 'probability', 'random variable', 'random', 'variable']", Exercises,seg_117,8.6 let x be a continuous random variable with probability density fx that takes only positive values and let y = 1/x .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  1020,  2292,  1060,  2022,  1037,  7142,  6721,
         8023,  2007,  9723,  4304, 23292,  2008,  3138,  2069,  3893,  5300,
         1998,  2292,  1061,  1027,  1015,  1013,  1060,  1012,   102])"
809,1,['probability'], Exercises,seg_117,"b. let z = 1/y . using a, determine the probability density fz of z, in terms",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2292, 1062, 1027, 1015, 1013, 1061, 1012, 2478, 1037,
        1010, 5646, 1996, 9723, 4304, 1042, 2480, 1997, 1062, 1010, 1999, 3408,
         102])"
810,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,8.7 let x have a par(α) distribution. determine the distribution function of ln x . what kind of a distribution does lnx have?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  1021,  2292,  1060,  2031,  1037, 11968,  1006,
         1155,  1007,  4353,  1012,  5646,  1996,  4353,  3853,  1997,  1048,
         2078,  1060,  1012,  2054,  2785,  1997,  1037,  4353,  2515,  1048,
        26807,  2031,  1029,   102])"
811,1,"['function', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Exercises,seg_117,"8.8 let x have an exp(1) distribution, and let α and λ be positive numbers. determine the distribution function of the random variable",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([ 101, 1022, 1012, 1022, 2292, 1060, 2031, 2019, 4654, 2361, 1006, 1015,
        1007, 4353, 1010, 1998, 2292, 1155, 1998, 1165, 2022, 3893, 3616, 1012,
        5646, 1996, 4353, 3853, 1997, 1996, 6721, 8023,  102])"
812,1,"['random variable', 'random', 'weibull', 'distribution', 'weibull distribution', 'parameters', 'variable']", Exercises,seg_117,the distribution of the random variable w is called the weibull distribution with parameters α and λ.,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  4353,  1997,  1996,  6721,  8023,  1059,  2003,  2170,
         1996, 11417,  8569,  3363,  4353,  2007, 11709,  1155,  1998,  1165,
         1012,   102])"
813,1,"['continuous', 'continuous random variable', 'function', 'probability', 'random variable', 'random', 'distribution', 'distribution function', 'variable']", Exercises,seg_117,8.9 let x be a continuous random variable. express the distribution function and probability density of the random variable y = −x in terms of those of x .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1022, 1012, 1023, 2292, 1060, 2022, 1037, 7142, 6721, 8023, 1012,
        4671, 1996, 4353, 3853, 1998, 9723, 4304, 1997, 1996, 6721, 8023, 1061,
        1027, 1597, 2595, 1999, 3408, 1997, 2216, 1997, 1060, 1012,  102])"
814,1,"['table', 'random variable', 'probabilities', 'random', 'normal', 'random variables', 'variables', 'variable']", Exercises,seg_117,"8.10 let x be an n(3, 4) distributed random variable. use the rule for normal random variables under change of units and table b.1 to determine the probabilities p(x ≥ 3) and p(x ≤ 1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2184,  2292,  1060,  2022,  2019,  1050,  1006,
         1017,  1010,  1018,  1007,  5500,  6721,  8023,  1012,  2224,  1996,
         3627,  2005,  3671,  6721, 10857,  2104,  2689,  1997,  3197,  1998,
         2795,  1038,  1012,  1015,  2000,  5646,  1996,  4013,  3676, 14680,
         1052,  1006,  1060,  1609,  1017,  1007,  1998,  1052,  1006,  1060,
         1608,  1015,  1007,  1012,   102])"
815,1,"['function', 'functions', 'concave function', 'random variable', 'random', 'concave functions', 'variable']", Exercises,seg_117,"8.11 let x be a random variable, and let g be a twice differentiable function with g′′(x) ≤ 0 for all x. such a function is called a concave function. show that for concave functions always",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2340,  2292,  1060,  2022,  1037,  6721,  8023,
         1010,  1998,  2292,  1043,  2022,  1037,  3807,  2367, 19210,  3853,
         2007,  1043,  1531,  1531,  1006,  1060,  1007,  1608,  1014,  2005,
         2035,  1060,  1012,  2107,  1037,  3853,  2003,  2170,  1037,  9530,
        27454,  3853,  1012,  2265,  2008,  2005,  9530, 27454,  4972,  2467,
          102])"
816,1,"['probability', 'random variable', 'random', 'variable']", Exercises,seg_117,8.12 let x be a random variable with the following probability mass function:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1022, 1012, 2260, 2292, 1060, 2022, 1037, 6721, 8023, 2007, 1996,
        2206, 9723, 3742, 3853, 1024,  102])"
817,1,['distribution'], Exercises,seg_117,a. determine the distribution of y = √x.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 1996, 4353, 1997, 1061, 1027, 1600, 2595, 1012,
         102])"
818,1,['function'], Exercises,seg_117,"hint: use exercise 8.11, or start by showing that the function g(x) = −√x is convex.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9374,  1024,  2224,  6912,  1022,  1012,  2340,  1010,  2030,
         2707,  2011,  4760,  2008,  1996,  3853,  1043,  1006,  1060,  1007,
         1027,  1597, 30127,  2595,  2003, 18309,  1012,   102])"
819,0,[], Exercises,seg_117,√x] to check your answer (and to see that it,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1600, 2595, 1033, 2000, 4638, 2115, 3437, 1006, 1998, 2000, 2156,
        2008, 2009,  102])"
820,0,[], Exercises,seg_117,makes a big difference!).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 3084, 1037, 2502, 4489,  999, 1007, 1012,  102])"
821,1,['distribution'], Exercises,seg_117,"8.13 let w have a u(π, 2π) distribution. what is larger: e[sin(w )] or sin(e[w ])? check your answer by computing these two numbers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2410,  2292,  1059,  2031,  1037,  1057,  1006,
         1170,  1010,  1016, 29731,  1007,  4353,  1012,  2054,  2003,  3469,
         1024,  1041,  1031,  8254,  1006,  1059,  1007,  1033,  2030,  8254,
         1006,  1041,  1031,  1059,  1033,  1007,  1029,  4638,  2115,  3437,
         2011,  9798,  2122,  2048,  3616,  1012,   102])"
822,1,"['function', 'inequality']", Exercises,seg_117,"8.14 in this exercise we take a look at jensen’s inequality for the function g(x) = x3 (which is neither convex nor concave on (−∞,∞)).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2403,  1999,  2023,  6912,  2057,  2202,  1037,
         2298,  2012, 14857,  1521,  1055, 16440,  2005,  1996,  3853,  1043,
         1006,  1060,  1007,  1027,  1060,  2509,  1006,  2029,  2003,  4445,
        18309,  4496,  9530, 27454,  2006,  1006,  1597, 30128,  1010,  1601,
         1007,  1007,  1012,   102])"
823,1,"['variable', 'random variable', 'random', 'discrete']", Exercises,seg_117,a. can you find a (discrete) random variable x with var(x) > 0 such that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2064,  2017,  2424,  1037,  1006, 16246,  1007,
         6721,  8023,  1060,  2007, 13075,  1006,  1060,  1007,  1028,  1014,
         2107,  2008,   102])"
824,1,"['random variable', 'random', 'inequality', 'variable']", Exercises,seg_117,b. under what kind of conditions on a random variable x will the inequality,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2104,  2054,  2785,  1997,  3785,  2006,  1037,
         6721,  8023,  1060,  2097,  1996, 16440,   102])"
825,1,"['random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Exercises,seg_117,"8.15 let x1, x2, . . . , xn be independent random variables, all with a u(0, 1) distribution. let z = max{x1, . . . , xn} and v = min{x1, . . . , xn}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2321,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,  2981,  6721,
        10857,  1010,  2035,  2007,  1037,  1057,  1006,  1014,  1010,  1015,
         1007,  4353,  1012,  2292,  1062,  1027,  4098,  1063,  1060,  2487,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1065,  1998,  1058,
         1027,  8117,  1063,  1060,  2487,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1065,  1012,   102])"
826,1,['symmetry'], Exercises,seg_117,c. can you argue directly (using the symmetry of the uniform distribu-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2064,  2017,  7475,  3495,  1006,  2478,  1996,
        14991,  1997,  1996,  6375,  4487,  3367,  3089,  8569,  1011,   102])"
827,1,['inequality'], Exercises,seg_117,8.16 in this exercise we derive a kind of jensen inequality for the minimum.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2385,  1999,  2023,  6912,  2057, 18547,  1037,
         2785,  1997, 14857, 16440,  2005,  1996,  6263,  1012,   102])"
828,0,[], Exercises,seg_117,a. let a and b be real numbers. show that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 2292, 1037, 1998, 1038, 2022, 2613, 3616, 1012, 2265,
        2008,  102])"
829,1,"['random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Exercises,seg_117,b. let x and y be independent random variables with the same distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2292,  1060,  1998,  1061,  2022,  2981,  6721,
        10857,  2007,  1996,  2168,  4353,   102])"
830,1,['expectation'], Exercises,seg_117,and finite expectation. deduce from a that,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1998, 10713, 17626,  1012,  2139,  8566,  3401,  2013,  1037,
         2008,   102])"
831,1,"['inequality', 'distribution']", Exercises,seg_117,"remark: this is not so interesting, since min{e[x ] , e[y ]} = e[x ] = e[y ], but we will see in the exercises of chapter 11 that this inequality is also true for x and y, which do not have the same distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101, 17674,  1024,  2023,  2003,  2025,  2061,  5875,  1010,  2144,
         8117,  1063,  1041,  1031,  1060,  1033,  1010,  1041,  1031,  1061,
         1033,  1065,  1027,  1041,  1031,  1060,  1033,  1027,  1041,  1031,
         1061,  1033,  1010,  2021,  2057,  2097,  2156,  1999,  1996, 11110,
         1997,  3127,  2340,  2008,  2023, 16440,  2003,  2036,  2995,  2005,
         1060,  1998,  1061,  1010,  2029,  2079,  2025,  2031,  1996,  2168,
         4353,  1012,   102])"
832,1,"['function', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_117,"8.17 let x1, . . . , xn be n independent random variables with the same distribution function f .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2459,  2292,  1060,  2487,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2022,  1050,  2981,  6721, 10857,  2007,
         1996,  2168,  4353,  3853,  1042,  1012,   102])"
833,0,[], Exercises,seg_117,"a. convince yourself that for any numbers x1, . . . , xn it is true that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 8054, 4426, 2008, 2005, 2151, 3616, 1060, 2487, 1010,
        1012, 1012, 1012, 1010, 1060, 2078, 2009, 2003, 2995, 2008,  102])"
834,1,['observation'], Exercises,seg_117,cise 8.9 and the observation in a to deduce the formula,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 20199,  2063,  1022,  1012,  1023,  1998,  1996,  8089,  1999,
         1037,  2000,  2139,  8566,  3401,  1996,  5675,   102])"
835,0,[], Exercises,seg_117,directly from the formula,tensor(0),"tensor([0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 3495, 2013, 1996, 5675,  102])"
836,1,"['function', 'random', 'random variables', 'independent random variables', 'distribution', 'distribution function', 'variables', 'independent']", Exercises,seg_117,"8.18 let x1, x2, . . . , xn be independent random variables, all with an exp(λ) distribution. let v = min{x1, . . . , xn}. determine the distribution function of v . what kind of distribution is this?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1022,  1012,  2324,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,  2981,  6721,
        10857,  1010,  2035,  2007,  2019,  4654,  2361,  1006,  1165,  1007,
         4353,  1012,  2292,  1058,  1027,  8117,  1063,  1060,  2487,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1065,  1012,  5646,  1996,
         4353,  3853,  1997,  1058,  1012,  2054,  2785,  1997,  4353,  2003,
         2023,  1029,   102])"
837,0,['n'], Exercises,seg_117,"8.19 from the “north pole” n of a circle with diameter 1, a point q on the circle is mapped to a point t on the line by its projection from n , as illustrated in figure 8.2.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1022,  1012,  2539,  2013,  1996,  1523,  2167,  6536,  1524,
         1050,  1997,  1037,  4418,  2007,  6705,  1015,  1010,  1037,  2391,
         1053,  2006,  1996,  4418,  2003, 17715,  2000,  1037,  2391,  1056,
         2006,  1996,  2240,  2011,  2049, 13996,  2013,  1050,  1010,  2004,
         7203,  1999,  3275,  1022,  1012,  1016,  1012,   102])"
838,1,['interval'], Exercises,seg_117,suppose that the point q is uniformly chosen on the circle. this is the same as saying that the angle ϕ is uniformly chosen from the interval [−π,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  6814,  2008,  1996,  2391,  1053,  2003, 27423,  4217,  2006,
         1996,  4418,  1012,  2023,  2003,  1996,  2168,  2004,  3038,  2008,
         1996,  6466,   100,  2003, 27423,  4217,  2013,  1996, 13483,  1031,
         1597, 29731,   102])"
839,1,"['interval', 'uniformly distributed']", Exercises,seg_117,"2 , π 2 ] (can you see this?). let x be this angle, so that x is uniformly distributed over the interval [−π",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1010,  1170,  1016,  1033,  1006,  2064,  2017,  2156,
         2023,  1029,  1007,  1012,  2292,  1060,  2022,  2023,  6466,  1010,
         2061,  2008,  1060,  2003, 27423,  5500,  2058,  1996, 13483,  1031,
         1597, 29731,   102])"
840,1,"['random variable', 'event', 'random', 'distribution', 'variable']", Exercises,seg_117,"2 , π 2 ]. this means that p(x ≤ ϕ) = 1/2 + ϕ/π (cf. quick exercise 5.3). what will be the distribution of the projection of q on the line? let us call this random variable z. then it is clear that the event {z ≤ t} is equal to the event {x ≤ ϕ}, where t and ϕ correspond to each other under the projection. this means that tan(ϕ) = t, which is the same as saying that arctan(t) = ϕ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1010,  1170,  1016,  1033,  1012,  2023,  2965,  2008,
         1052,  1006,  1060,  1608,   100,  1007,  1027,  1015,  1013,  1016,
         1009,   100,  1013,  1170,  1006, 12935,  1012,  4248,  6912,  1019,
         1012,  1017,  1007,  1012,  2054,  2097,  2022,  1996,  4353,  1997,
         1996, 13996,  1997,  1053,  2006,  1996,  2240,  1029,  2292,  2149,
         2655,  2023,  6721,  8023,  1062,  1012,  2059,  2009,  2003,  3154,
         2008,  1996,  2724,  1063,  1062,  1608,  1056,  1065,  2003,  5020,
         2000,  1996,  2724,  1063,  1060,  1608,   100,  1065,  1010,  2073,
         1056,  1998,   100, 17254,  2000,  2169,  2060,  2104,  1996, 13996,
         1012,  2023,  2965,  2008,  9092,  1006,   100,  1007,  1027,  1056,
         1010,  2029,  2003,  1996,  2168,  2004,  3038,  2008,  8115,  5794,
         1006,  1056,  1007,  1027,   100,  1012,   102])"
841,1,['interval'], Exercises,seg_117,"a. what part of the circle is mapped to the interval [1,∞)?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2112,  1997,  1996,  4418,  2003, 17715,
         2000,  1996, 13483,  1031,  1015,  1010,  1601,  1007,  1029,   102])"
842,1,"['distribution function', 'function', 'distribution']", Exercises,seg_117,b. compute the distribution function of z using the correspondence between,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  4353,  3853,  1997,  1062,  2478,
         1996, 11061,  2090,   102])"
843,1,"['function', 'density function', 'probability', 'probability density function']", Exercises,seg_117,c. compute the probability density function of z.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 24134,  1996,  9723,  4304,  3853,  1997,  1062,
         1012,   102])"
844,1,"['cauchy', 'cauchy distribution', 'distribution']", Exercises,seg_117,the distribution of z is called the cauchy distribution (which will be discussed in chapter 11).,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  4353,  1997,  1062,  2003,  2170,  1996,  6187, 10875,
         2100,  4353,  1006,  2029,  2097,  2022,  6936,  1999,  3127,  2340,
         1007,  1012,   102])"
845,1,"['continuous', 'discrete', 'independence', 'continuous random variables', 'random', 'random variables', 'experiment', 'distribution', 'variables', 'joint']", Joint distributions and independence,seg_119,"random variables related to the same experiment often influence one another. in order to capture this, we introduce the joint distribution of two or more random variables. we also discuss the notion of independence for random variables, which models the situation where random variables do not influence each other. as with single random variables we treat these topics for discrete and continuous random variables separately.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0.,
        0.])","tensor([ 4101, 20611,  1998,  4336])","tensor([  101,  6721, 10857,  3141,  2000,  1996,  2168,  7551,  2411,  3747,
         2028,  2178,  1012,  1999,  2344,  2000,  5425,  2023,  1010,  2057,
         8970,  1996,  4101,  4353,  1997,  2048,  2030,  2062,  6721, 10857,
         1012,  2057,  2036,  6848,  1996,  9366,  1997,  4336,  2005,  6721,
        10857,  1010,  2029,  4275,  1996,  3663,  2073,  6721, 10857,  2079,
         2025,  3747,  2169,  2060,  1012,  2004,  2007,  2309,  6721, 10857,
         2057,  7438,  2122,  7832,  2005, 16246,  1998,  7142,  6721, 10857,
        10329,  1012,   102])"
846,1,"['information', 'jointly', 'variables']", Joint distributions of discrete random variables,seg_121,"in a census one is usually interested in several variables, such as income, age, and gender. in itself these variables are interesting, but when two (or more) are studied simultaneously, detailed information is obtained on the society where the census is performed. for instance, studying income, age, and gender jointly might give insight to the emancipation of women.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  1999,  1037,  2883,  2028,  2003,  2788,  4699,  1999,  2195,
        10857,  1010,  2107,  2004,  3318,  1010,  2287,  1010,  1998,  5907,
         1012,  1999,  2993,  2122, 10857,  2024,  5875,  1010,  2021,  2043,
         2048,  1006,  2030,  2062,  1007,  2024,  3273,  7453,  1010,  6851,
         2592,  2003,  4663,  2006,  1996,  2554,  2073,  1996,  2883,  2003,
         2864,  1012,  2005,  6013,  1010,  5702,  3318,  1010,  2287,  1010,
         1998,  5907, 10776,  2453,  2507, 12369,  2000,  1996, 22656,  1997,
         2308,  1012,   102])"
847,1,"['discrete', 'joint distributions', 'discrete random variables', 'distributions', 'random', 'random variables', 'variables', 'joint', 'independent']", Joint distributions of discrete random variables,seg_121,"without mentioning it explicitly, we already encountered several examples of joint distributions of discrete random variables. for example, in chapter 4 we defined two random variables s and m , the sum and the maximum of two independent throws of a die.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2302, 18625,  2009, 12045,  1010,  2057,  2525,  8567,  2195,
         4973,  1997,  4101, 20611,  1997, 16246,  6721, 10857,  1012,  2005,
         2742,  1010,  1999,  3127,  1018,  2057,  4225,  2048,  6721, 10857,
         1055,  1998,  1049,  1010,  1996,  7680,  1998,  1996,  4555,  1997,
         2048,  2981, 11618,  1997,  1037,  3280,  1012,   102])"
848,1,"['probability', 'event']", Joint distributions of discrete random variables,seg_121,"quick exercise 9.1 list the elements of the event {s = 7, m = 4} and compute its probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  4248,  6912,  1023,  1012,  1015,  2862,  1996,  3787,  1997,
         1996,  2724,  1063,  1055,  1027,  1021,  1010,  1049,  1027,  1018,
         1065,  1998, 24134,  2049,  9723,  1012,   102])"
849,1,"['discrete', 'sample space', 'discrete random variables', 'probabilities', 'sample', 'random', 'random variables', 'distribution', 'variables', 'joint']", Joint distributions of discrete random variables,seg_121,"in general, the joint distribution of two discrete random variables x and y , defined on the same sample space ω, is given by prescribing the probabilities of all possible values of the pair (x, y ).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  1999,  2236,  1010,  1996,  4101,  4353,  1997,  2048, 16246,
         6721, 10857,  1060,  1998,  1061,  1010,  4225,  2006,  1996,  2168,
         7099,  2686,  1179,  1010,  2003,  2445,  2011,  3653, 11020,  3089,
        10472,  1996,  4013,  3676, 14680,  1997,  2035,  2825,  5300,  1997,
         1996,  3940,  1006,  1060,  1010,  1061,  1007,  1012,   102])"
850,1,"['joint probability', 'function', 'discrete', 'probability', 'joint probability mass function', 'discrete random variables', 'random', 'random variables', 'probability mass function', 'mass function', 'variables', 'joint']", Joint distributions of discrete random variables,seg_121,"definition. the joint probability mass function p of two discrete random variables x and y is the function p : r2 → [0, 1], defined by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  6210,  1012,  1996,  4101,  9723,  3742,  3853,  1052,  1997,
         2048, 16246,  6721, 10857,  1060,  1998,  1061,  2003,  1996,  3853,
         1052,  1024,  1054,  2475,  1585,  1031,  1014,  1010,  1015,  1033,
         1010,  4225,  2011,   102])"
851,1,['dependence'], Joint distributions of discrete random variables,seg_121,"to stress the dependence on (x, y ), we sometimes write px,y instead of p.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2000,  6911,  1996, 18642,  2006,  1006,  1060,  1010,  1061,
         1007,  1010,  2057,  2823,  4339,  1052,  2595,  1010,  1061,  2612,
         1997,  1052,  1012,   102])"
852,1,"['table', 'random', 'random variables', 'distribution', 'variables', 'joint']", Joint distributions of discrete random variables,seg_121,"if x and y take on the values a1, a2, . . . , ak and b1, b2, . . . , b , respectively, the joint distribution of x and y can simply be described by listing all the possible values of p(ai, bj). for example, for the random variables s and m from chapter 4 we obtain table 9.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2065,  1060,  1998,  1061,  2202,  2006,  1996,  5300, 17350,
         1010, 22441,  1010,  1012,  1012,  1012,  1010, 17712,  1998, 29491,
         1010,  1038,  2475,  1010,  1012,  1012,  1012,  1010,  1038,  1010,
         4414,  1010,  1996,  4101,  4353,  1997,  1060,  1998,  1061,  2064,
         3432,  2022,  2649,  2011, 10328,  2035,  1996,  2825,  5300,  1997,
         1052,  1006,  9932,  1010,  1038,  3501,  1007,  1012,  2005,  2742,
         1010,  2005,  1996,  6721, 10857,  1055,  1998,  1049,  2013,  3127,
         1018,  2057,  6855,  2795,  1023,  1012,  1015,  1012,   102])"
853,1,"['table', 'distribution']", Joint distributions of discrete random variables,seg_121,"from this table we can retrieve the distribution of s and of m . for example, because",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2013,  2023,  2795,  2057,  2064, 12850,  1996,  4353,  1997,
         1055,  1998,  1997,  1049,  1012,  2005,  2742,  1010,  2138,   102])"
854,1,['events'], Joint distributions of discrete random variables,seg_121,and because the six events,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([ 101, 1998, 2138, 1996, 2416, 2824,  102])"
855,1,['mutually exclusive'], Joint distributions of discrete random variables,seg_121,"are mutually exclusive, we find that",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2024, 20271,  7262,  1010,  2057,  2424,  2008,   102])"
856,1,"['joint probabilities', 'marginal', 'table', 'probability', 'probabilities', 'distribution', 'marginal distribution', 'joint', 'probability distribution']", Joint distributions of discrete random variables,seg_121,"thus we see that the probabilities of s can be obtained by taking the sum of the joint probabilities in the rows of table 9.1. this yields the probability distribution of s, i.e., all values of ps(a) for a = 2, . . . , 12. we speak of the marginal distribution of s. in table 9.2 we have added this distribution in the right “margin” of the table. similarly, summing over the columns of table 9.1 yields the marginal distribution of m , in the bottom margin of table 9.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2947,  2057,  2156,  2008,  1996,  4013,  3676, 14680,  1997,
         1055,  2064,  2022,  4663,  2011,  2635,  1996,  7680,  1997,  1996,
         4101,  4013,  3676, 14680,  1999,  1996, 10281,  1997,  2795,  1023,
         1012,  1015,  1012,  2023, 16189,  1996,  9723,  4353,  1997,  1055,
         1010,  1045,  1012,  1041,  1012,  1010,  2035,  5300,  1997,  8827,
         1006,  1037,  1007,  2005,  1037,  1027,  1016,  1010,  1012,  1012,
         1012,  1010,  2260,  1012,  2057,  3713,  1997,  1996, 14785,  4353,
         1997,  1055,  1012,  1999,  2795,  1023,  1012,  1016,  2057,  2031,
         2794,  2023,  4353,  1999,  1996,  2157,  1523,  7785,  1524,  1997,
         1996,  2795,  1012,  6660,  1010,  7680,  6562,  2058,  1996,  7753,
         1997,  2795,  1023,  1012,  1015, 16189,  1996, 14785,  4353,  1997,
         1049,  1010,  1999,  1996,  3953,  7785,  1997,  2795,  1023,  1012,
         1016,  1012,   102])"
857,1,"['cases', 'functions', 'mass function', 'joint probability', 'marginal probability', 'probability mass function', 'function', 'marginal', 'probability', 'information', 'random variables', 'marginal distributions', 'joint probability mass function', 'distributions', 'random', 'distribution', 'variables', 'joint']", Joint distributions of discrete random variables,seg_121,the joint distribution of two random variables contains a lot more information than the two marginal distributions. this can be illustrated by the fact that in many cases the joint probability mass function of x and y cannot be retrieved from the marginal probability mass functions px and py . a simple example is given in the following quick exercise.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  1996,  4101,  4353,  1997,  2048,  6721, 10857,  3397,  1037,
         2843,  2062,  2592,  2084,  1996,  2048, 14785, 20611,  1012,  2023,
         2064,  2022,  7203,  2011,  1996,  2755,  2008,  1999,  2116,  3572,
         1996,  4101,  9723,  3742,  3853,  1997,  1060,  1998,  1061,  3685,
         2022,  5140,  2013,  1996, 14785,  9723,  3742,  4972,  1052,  2595,
         1998,  1052,  2100,  1012,  1037,  3722,  2742,  2003,  2445,  1999,
         1996,  2206,  4248,  6912,  1012,   102])"
858,1,"['joint probability', 'function', 'discrete', 'table', 'probability', 'joint probability mass function', 'discrete random variables', 'random', 'random variables', 'probability mass function', 'mass function', 'variables', 'joint']", Joint distributions of discrete random variables,seg_121,"quick exercise 9.2 let x and y be two discrete random variables, with joint probability mass function p, given by the following table, where ε is an arbitrary number between −1/4 and 1/4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  4248,  6912,  1023,  1012,  1016,  2292,  1060,  1998,  1061,
         2022,  2048, 16246,  6721, 10857,  1010,  2007,  4101,  9723,  3742,
         3853,  1052,  1010,  2445,  2011,  1996,  2206,  2795,  1010,  2073,
         1159,  2003,  2019, 15275,  2193,  2090,  1597,  2487,  1013,  1018,
         1998,  1015,  1013,  1018,  1012,   102])"
859,1,['table'], Joint distributions of discrete random variables,seg_121,"complete the table, and conclude that we cannot retrieve p from px and py .",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  3143,  1996,  2795,  1010,  1998, 16519,  2008,  2057,  3685,
        12850,  1052,  2013,  1052,  2595,  1998,  1052,  2100,  1012,   102])"
860,1,"['distribution function', 'joint', 'function', 'distribution']", Joint distributions of discrete random variables,seg_121,the joint distribution function,tensor(1),"tensor([0., 0., 1., 1., 1., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([ 101, 1996, 4101, 4353, 3853,  102])"
861,1,"['continuous', 'function', 'discrete', 'random variable', 'continuous random variables', 'random', 'random variables', 'distribution', 'distribution function', 'variables', 'variable', 'case']", Joint distributions of discrete random variables,seg_121,"as in the case of a single random variable, the distribution function enables us to treat pairs of discrete and pairs of continuous random variables in the same way.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2004,  1999,  1996,  2553,  1997,  1037,  2309,  6721,  8023,
         1010,  1996,  4353,  3853, 12939,  2149,  2000,  7438,  7689,  1997,
        16246,  1998,  7689,  1997,  7142,  6721, 10857,  1999,  1996,  2168,
         2126,  1012,   102])"
862,1,"['function', 'random', 'distribution', 'distribution function', 'joint']", Joint distributions of discrete random variables,seg_121,"definition. the joint distribution function f of two random variables x and y is the function f : r2 → [0, 1] defined by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  6210,  1012,  1996,  4101,  4353,  3853,  1042,  1997,  2048,
         6721, 10857,  1060,  1998,  1061,  2003,  1996,  3853,  1042,  1024,
         1054,  2475,  1585,  1031,  1014,  1010,  1015,  1033,  4225,  2011,
          102])"
863,1,"['function', 'distribution', 'distribution function', 'joint']", Joint distributions of discrete random variables,seg_121,"quick exercise 9.3 compute f (5, 3) for the joint distribution function f of the pair (s, m).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  4248,  6912,  1023,  1012,  1017, 24134,  1042,  1006,  1019,
         1010,  1017,  1007,  2005,  1996,  4101,  4353,  3853,  1042,  1997,
         1996,  3940,  1006,  1055,  1010,  1049,  1007,  1012,   102])"
864,1,"['function', 'marginal', 'functions', 'distribution', 'marginal distribution', 'distribution function', 'joint']", Joint distributions of discrete random variables,seg_121,"the distribution functions fx and fy can be obtained from the joint distribution function of x and y . as before, we speak of the marginal distribution functions. the following rule holds.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  1996,  4353,  4972, 23292,  1998,  1042,  2100,  2064,  2022,
         4663,  2013,  1996,  4101,  4353,  3853,  1997,  1060,  1998,  1061,
         1012,  2004,  2077,  1010,  2057,  3713,  1997,  1996, 14785,  4353,
         4972,  1012,  1996,  2206,  3627,  4324,  1012,   102])"
865,1,"['function', 'marginal', 'random', 'random variables', 'distribution', 'marginal distribution', 'distribution function', 'variables', 'joint']", Joint distributions of discrete random variables,seg_121,from joint to marginal distribution function. let f be the joint distribution function of random variables x and y . then the marginal distribution function of x is given for each a by,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  2013,  4101,  2000, 14785,  4353,  3853,  1012,  2292,  1042,
         2022,  1996,  4101,  4353,  3853,  1997,  6721, 10857,  1060,  1998,
         1061,  1012,  2059,  1996, 14785,  4353,  3853,  1997,  1060,  2003,
         2445,  2005,  2169,  1037,  2011,   102])"
866,1,"['function', 'marginal', 'distribution', 'marginal distribution', 'distribution function']", Joint distributions of discrete random variables,seg_121,and the marginal distribution function of y is given for each b by,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997, 16246,  6721, 10857])","tensor([  101,  1998,  1996, 14785,  4353,  3853,  1997,  1061,  2003,  2445,
         2005,  2169,  1038,  2011,   102])"
867,1,"['density function', 'joint probability', 'interval', 'probability density function', 'random variable', 'continuous random variables', 'continuous', 'function', 'probability', 'random variables', 'continuous random variable', 'joint probability density function', 'random', 'distribution', 'variables', 'joint', 'variable']", Joint distributions of continuous random variables,seg_123,"we saw in chapter 5 that the probability that a single continuous random variable x lies in an interval [a, b], is equal to the area under the probability density function f of x over the interval (see also figure 5.1). for the joint distribution of continuous random variables x and y the situation is analogous: the probability that the pair (x, y ) falls in the rectangle [a1, b1]×[a2, b2] is equal to the volume under the joint probability density function f(x, y) of (x, y ) over the rectangle. this is illustrated in figure 9.1, where a chunk of a joint probability density function f(x, y) is displayed for x between −0.5 and 1 and for y between −1.5 and 1. its volume represents the probability p(−0.5 ≤ x ≤ 1,−1.5 ≤ y ≤ 1). as the volume under f on [−0.5, 1]×[−1.5, 1] is equal to the integral of f over this rectangle, this motivates the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  2057,  2387,  1999,  3127,  1019,  2008,  1996,  9723,  2008,
         1037,  2309,  7142,  6721,  8023,  1060,  3658,  1999,  2019, 13483,
         1031,  1037,  1010,  1038,  1033,  1010,  2003,  5020,  2000,  1996,
         2181,  2104,  1996,  9723,  4304,  3853,  1042,  1997,  1060,  2058,
         1996, 13483,  1006,  2156,  2036,  3275,  1019,  1012,  1015,  1007,
         1012,  2005,  1996,  4101,  4353,  1997,  7142,  6721, 10857,  1060,
         1998,  1061,  1996,  3663,  2003, 19639,  1024,  1996,  9723,  2008,
         1996,  3940,  1006,  1060,  1010,  1061,  1007,  4212,  1999,  1996,
        28667, 23395,  1031, 17350,  1010, 29491,  1033,  1095,  1031, 22441,
         1010,  1038,  2475,  1033,  2003,  5020,  2000,  1996,  3872,  2104,
         1996,  4101,  9723,  4304,  3853,  1042,  1006,  1060,  1010,  1061,
         1007,  1997,  1006,  1060,  1010,  1061,  1007,  2058,  1996, 28667,
        23395,  1012,  2023,  2003,  7203,  1999,  3275,  1023,  1012,  1015,
         1010,  2073,  1037, 20000,  1997,  1037,  4101,  9723,  4304,  3853,
         1042,  1006,  1060,  1010,  1061,  1007,  2003,  6913,  2005,  1060,
         2090,  1597,  2692,  1012,  1019,  1998,  1015,  1998,  2005,  1061,
         2090,  1597,  2487,  1012,  1019,  1998,  1015,  1012,  2049,  3872,
         5836,  1996,  9723,  1052,  1006,  1597,  2692,  1012,  1019,  1608,
         1060,  1608,  1015,  1010,  1597,  2487,  1012,  1019,  1608,  1061,
         1608,  1015,  1007,  1012,  2004,  1996,  3872,  2104,  1042,  2006,
         1031,  1597,  2692,  1012,  1019,  1010,  1015,  1033,  1095,  1031,
         1597,  2487,  1012,  1019,  1010,  1015,  1033,  2003,  5020,  2000,
         1996,  9897,  1997,  1042,  2058,  2023, 28667, 23395,  1010,  2023,
         9587, 29068,  8520,  1996,  2206,  6210,  1012,   102])"
868,1,"['continuous', 'function', 'random', 'random variables', 'continuous distribution', 'distribution', 'variables', 'joint']", Joint distributions of continuous random variables,seg_123,"definition. random variables x and y have a joint continuous distribution if for some function f : r2 → r and for all numbers a1, a2 and b1, b2 with a1 ≤ b1 and a2 ≤ b2,",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  6210,  1012,  6721, 10857,  1060,  1998,  1061,  2031,  1037,
         4101,  7142,  4353,  2065,  2005,  2070,  3853,  1042,  1024,  1054,
         2475,  1585,  1054,  1998,  2005,  2035,  3616, 17350,  1010, 22441,
         1998, 29491,  1010,  1038,  2475,  2007, 17350,  1608, 29491,  1998,
        22441,  1608,  1038,  2475,  1010,   102])"
869,1,['function'], Joint distributions of continuous random variables,seg_123,"the function f has to satisfy f(x, y) ≥ 0 for all x and y, and",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  1996,  3853,  1042,  2038,  2000, 13225,  1042,  1006,  1060,
         1010,  1061,  1007,  1609,  1014,  2005,  2035,  1060,  1998,  1061,
         1010,  1998,   102])"
870,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']", Joint distributions of continuous random variables,seg_123,"∞ ∞ f(x, y) dxdy = 1. we call f the joint probability density function of x and y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([ 101, 1601, 1601, 1042, 1006, 1060, 1010, 1061, 1007, 1040, 2595, 5149,
        1027, 1015, 1012, 2057, 2655, 1042, 1996, 4101, 9723, 4304, 3853, 1997,
        1060, 1998, 1061, 1012,  102])"
871,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'distribution', 'distribution function', 'joint', 'case']", Joint distributions of continuous random variables,seg_123,as in the one-dimensional case there is a simple relation between the joint distribution function f and the joint probability density function f :,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([ 101, 2004, 1999, 1996, 2028, 1011, 8789, 2553, 2045, 2003, 1037, 3722,
        7189, 2090, 1996, 4101, 4353, 3853, 1042, 1998, 1996, 4101, 9723, 4304,
        3853, 1042, 1024,  102])"
872,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'random', 'bivariate', 'random variables', 'variables', 'joint']", Joint distributions of continuous random variables,seg_123,a joint probability density function of two random variables is also called a bivariate probability density. an explicit example of such a density is the,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  1037,  4101,  9723,  4304,  3853,  1997,  2048,  6721, 10857,
         2003,  2036,  2170,  1037, 12170, 10755, 13143,  9723,  4304,  1012,
         2019, 13216,  2742,  1997,  2107,  1037,  4304,  2003,  1996,   102])"
873,1,"['normal distributions', 'distributions', 'normal', 'bivariate']", Joint distributions of continuous random variables,seg_123,"f(x, y) = e π for −∞ < x < ∞ and −∞ < y < ∞; see figure 9.2. this is an example of a bivariate normal density (see remark 11.2 for a full description of bivariate normal distributions).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  1042,  1006,  1060,  1010,  1061,  1007,  1027,  1041,  1170,
         2005,  1597, 30128,  1026,  1060,  1026,  1601,  1998,  1597, 30128,
         1026,  1061,  1026,  1601,  1025,  2156,  3275,  1023,  1012,  1016,
         1012,  2023,  2003,  2019,  2742,  1997,  1037, 12170, 10755, 13143,
         3671,  4304,  1006,  2156, 17674,  2340,  1012,  1016,  2005,  1037,
         2440,  6412,  1997, 12170, 10755, 13143,  3671, 20611,  1007,  1012,
          102])"
874,1,"['continuous', 'joint probability', 'continuous distributions', 'probability', 'distributions', 'joint']", Joint distributions of continuous random variables,seg_123,we illustrate a number of properties of joint continuous distributions by means of the following simple example. suppose that x and y have joint probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  2057, 19141,  1037,  2193,  1997,  5144,  1997,  4101,  7142,
        20611,  2011,  2965,  1997,  1996,  2206,  3722,  2742,  1012,  6814,
         2008,  1060,  1998,  1061,  2031,  4101,  9723,   102])"
875,1,['function'], Joint distributions of continuous random variables,seg_123,density function,tensor(1),"tensor([0., 0., 1., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([ 101, 4304, 3853,  102])"
876,1,"['joint', 'joint probabilities', 'probabilities']", Joint distributions of continuous random variables,seg_123,as an illustration of how to compute joint probabilities:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  2004,  2019, 14614,  1997,  2129,  2000, 24134,  4101,  4013,
         3676, 14680,  1024,   102])"
877,1,"['function', 'distribution', 'distribution function', 'joint']", Joint distributions of continuous random variables,seg_123,"next, for a between 0 and 3 and b between 1 and 2, we determine the expression of the joint distribution function. since f(x, y) = 0 for x < 0 or y < 1,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([ 101, 2279, 1010, 2005, 1037, 2090, 1014, 1998, 1017, 1998, 1038, 2090,
        1015, 1998, 1016, 1010, 2057, 5646, 1996, 3670, 1997, 1996, 4101, 4353,
        3853, 1012, 2144, 1042, 1006, 1060, 1010, 1061, 1007, 1027, 1014, 2005,
        1060, 1026, 1014, 2030, 1061, 1026, 1015, 1010,  102])"
878,1,"['function', 'marginal', 'distribution', 'marginal distribution', 'distribution function']", Joint distributions of continuous random variables,seg_123,"hence, applying (9.1) one finds the marginal distribution function of x :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  6516,  1010, 11243,  1006,  1023,  1012,  1015,  1007,  2028,
         4858,  1996, 14785,  4353,  3853,  1997,  1060,  1024,   102])"
879,1,['probability'], Joint distributions of continuous random variables,seg_123,the probability density of x can be found by differentiating fx :,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  1996,  9723,  4304,  1997,  1060,  2064,  2022,  2179,  2011,
         2367, 15370, 23292,  1024,   102])"
880,1,"['function', 'density function', 'joint probabilities', 'discrete', 'probability', 'probability density function', 'marginal', 'table', 'discrete random variables', 'probabilities', 'random', 'random variables', 'variables', 'joint']", Joint distributions of continuous random variables,seg_123,"for x between 0 and 3. it is also possible to obtain the probability density function of x directly from f(x, y). recall that we determined marginal probabilities of discrete random variables by summing over the joint probabilities (see table 9.2). in a similar way we can find fx . for x between 0 and 3,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  2005,  1060,  2090,  1014,  1998,  1017,  1012,  2009,  2003,
         2036,  2825,  2000,  6855,  1996,  9723,  4304,  3853,  1997,  1060,
         3495,  2013,  1042,  1006,  1060,  1010,  1061,  1007,  1012,  9131,
         2008,  2057,  4340, 14785,  4013,  3676, 14680,  1997, 16246,  6721,
        10857,  2011,  7680,  6562,  2058,  1996,  4101,  4013,  3676, 14680,
         1006,  2156,  2795,  1023,  1012,  1016,  1007,  1012,  1999,  1037,
         2714,  2126,  2057,  2064,  2424, 23292,  1012,  2005,  1060,  2090,
         1014,  1998,  1017,  1010,   102])"
881,0,[], Joint distributions of continuous random variables,seg_123,this illustrates the following rule.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  2023, 24899,  1996,  2206,  3627,  1012,   102])"
882,1,"['joint probability', 'function', 'density function', 'marginal probability density', 'marginal', 'probability', 'probability density function', 'joint probability density function', 'random', 'densities', 'random variables', 'marginal probability', 'variables', 'joint']", Joint distributions of continuous random variables,seg_123,from joint to marginal probability density function. let f be the joint probability density function of random variables x and y . then the marginal probability densities of x and y can be found as follows:,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  2013,  4101,  2000, 14785,  9723,  4304,  3853,  1012,  2292,
         1042,  2022,  1996,  4101,  9723,  4304,  3853,  1997,  6721, 10857,
         1060,  1998,  1061,  1012,  2059,  1996, 14785,  9723,  7939, 24279,
         1997,  1060,  1998,  1061,  2064,  2022,  2179,  2004,  4076,  1024,
          102])"
883,1,"['function', 'density function', 'probability', 'probability density function', 'random', 'random variables', 'variables', 'variable']", Joint distributions of continuous random variables,seg_123,hence the probability density function of each of the random variables x and y can easily be obtained by “integrating out” the other variable.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([  101,  6516,  1996,  9723,  4304,  3853,  1997,  2169,  1997,  1996,
         6721, 10857,  1060,  1998,  1061,  2064,  4089,  2022,  4663,  2011,
         1523, 22380,  2041,  1524,  1996,  2060,  8023,  1012,   102])"
884,0,[], Joint distributions of continuous random variables,seg_123,quick exercise 9.5 determine fy (y).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4101, 20611,  1997,  7142,  6721, 10857])","tensor([ 101, 4248, 6912, 1023, 1012, 1019, 5646, 1042, 2100, 1006, 1061, 1007,
        1012,  102])"
885,1,"['function', 'sample space', 'probability', 'sample', 'random', 'random variables', 'distribution', 'distribution function', 'variables', 'joint']", More than two random variables,seg_125,"to determine the joint distribution of n random variables x1, x2, . . . , xn, all defined on the same sample space ω, we have to describe how the probability mass is distributed over all possible values of (x1, x2, . . . , xn). in fact, it suffices to specify the joint distribution function f of x1, x2, . . . , xn, which is defined by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  2000,  5646,  1996,  4101,  4353,  1997,  1050,  6721, 10857,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1010,  2035,  4225,  2006,  1996,  2168,  7099,  2686,
         1179,  1010,  2057,  2031,  2000,  6235,  2129,  1996,  9723,  3742,
         2003,  5500,  2058,  2035,  2825,  5300,  1997,  1006,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1007,  1012,  1999,  2755,  1010,  2009, 10514, 26989,  9623,  2000,
        20648,  1996,  4101,  4353,  3853,  1042,  1997,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,
         2029,  2003,  4225,  2011,   102])"
886,1,"['joint probability', 'distribution', 'function', 'discrete', 'probability', 'joint probability mass function', 'random', 'random variables', 'probability mass function', 'mass function', 'variables', 'joint', 'case']", More than two random variables,seg_125,"in case the random variables x1, x2, . . . , xn are discrete, the joint distribution can also be characterized by specifying the joint probability mass function p of x1, x2, . . . , xn, defined by",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  1999,  2553,  1996,  6721, 10857,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2024, 16246,
         1010,  1996,  4101,  4353,  2064,  2036,  2022,  7356,  2011, 20648,
         2075,  1996,  4101,  9723,  3742,  3853,  1052,  1997,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1010,  4225,  2011,   102])"
887,1,"['without replacement', 'replacement']", More than two random variables,seg_125,drawing without replacement,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([ 101, 5059, 2302, 6110,  102])"
888,1,"['joint probability', 'function', 'probability', 'joint probability mass function', 'probabilities', 'probability mass function', 'mass function', 'joint', 'case']", More than two random variables,seg_125,"let us illustrate the use of the joint probability mass function with an example. in the weekly dutch national lottery show, 6 balls are drawn from a vase that contains balls numbered from 1 to 41. clearly, the first number takes values 1, 2, . . . , 41 with equal probabilities. is this also the case for—say—the third ball?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  2292,  2149, 19141,  1996,  2224,  1997,  1996,  4101,  9723,
         3742,  3853,  2007,  2019,  2742,  1012,  1999,  1996,  4882,  3803,
         2120, 15213,  2265,  1010,  1020,  7395,  2024,  4567,  2013,  1037,
        18781,  2008,  3397,  7395,  8597,  2013,  1015,  2000,  4601,  1012,
         4415,  1010,  1996,  2034,  2193,  3138,  5300,  1015,  1010,  1016,
         1010,  1012,  1012,  1012,  1010,  4601,  2007,  5020,  4013,  3676,
        14680,  1012,  2003,  2023,  2036,  1996,  2553,  2005,  1517,  2360,
         1517,  1996,  2353,  3608,  1029,   102])"
889,1,"['joint probability', 'function', 'marginal', 'probability', 'without replacement', 'combinations', 'joint probability mass function', 'marginal probability', 'probability mass function', 'mass function', 'joint', 'replacement']", More than two random variables,seg_125,"let us consider a more general situation. suppose a vase contains balls numbered 1, 2, . . . , n . we draw n balls without replacement from the vase. note that n cannot be larger than n . each ball is selected with equal probability, i.e., in the first draw each ball has probability 1/n , in the second draw each of the n −1 remaining balls has probability 1/(n −1), and so on. let xi denote the number on the ball in the i-th draw, for i = 1, 2, . . . , n. in order to obtain the marginal probability mass function of xi, we first compute the joint probability mass function of x1, x2, . . . , xn. since there are n(n−1) · · · (n−n+1) possible combinations for the values of x1, x2, . . . , xn, each having the same probability, the joint probability mass function is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  2292,  2149,  5136,  1037,  2062,  2236,  3663,  1012,  6814,
         1037, 18781,  3397,  7395,  8597,  1015,  1010,  1016,  1010,  1012,
         1012,  1012,  1010,  1050,  1012,  2057,  4009,  1050,  7395,  2302,
         6110,  2013,  1996, 18781,  1012,  3602,  2008,  1050,  3685,  2022,
         3469,  2084,  1050,  1012,  2169,  3608,  2003,  3479,  2007,  5020,
         9723,  1010,  1045,  1012,  1041,  1012,  1010,  1999,  1996,  2034,
         4009,  2169,  3608,  2038,  9723,  1015,  1013,  1050,  1010,  1999,
         1996,  2117,  4009,  2169,  1997,  1996,  1050,  1597,  2487,  3588,
         7395,  2038,  9723,  1015,  1013,  1006,  1050,  1597,  2487,  1007,
         1010,  1998,  2061,  2006,  1012,  2292,  8418, 19090,  1996,  2193,
         2006,  1996,  3608,  1999,  1996,  1045,  1011, 16215,  4009,  1010,
         2005,  1045,  1027,  1015,  1010,  1016,  1010,  1012,  1012,  1012,
         1010,  1050,  1012,  1999,  2344,  2000,  6855,  1996, 14785,  9723,
         3742,  3853,  1997,  8418,  1010,  2057,  2034, 24134,  1996,  4101,
         9723,  3742,  3853,  1997,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1012,  2144,  2045,  2024,
         1050,  1006,  1050, 27944,  1007,  1087,  1087,  1087,  1006,  1050,
        22543,  2078,  1009,  1015,  1007,  2825, 14930,  2005,  1996,  5300,
         1997,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1010,  2169,  2383,  1996,  2168,  9723,  1010,
         1996,  4101,  9723,  3742,  3853,  2003,  2445,  2011,   102])"
890,1,"['joint probability', 'distribution', 'function', 'marginal', 'table', 'probability', 'functions', 'joint probability mass function', 'marginal probability', 'probability mass function', 'mass function', 'marginal distribution', 'joint']", More than two random variables,seg_125,"for all distinct values a1, a2, . . . , an with 1 ≤ aj ≤ n . clearly x1, x2, . . . , xn influence each other. nevertheless, the marginal distribution of each xi is the same. this can be seen as follows. similar to obtaining the marginal probability mass functions in table 9.2, we can find the marginal probability mass function of xi by summing the joint probability mass function over all possible values of x1, . . . , xi−1, xi+1, . . . , xn:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  2005,  2035,  5664,  5300, 17350,  1010, 22441,  1010,  1012,
         1012,  1012,  1010,  2019,  2007,  1015,  1608, 19128,  1608,  1050,
         1012,  4415,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  3747,  2169,  2060,  1012,  6600,  1010,
         1996, 14785,  4353,  1997,  2169,  8418,  2003,  1996,  2168,  1012,
         2023,  2064,  2022,  2464,  2004,  4076,  1012,  2714,  2000, 11381,
         1996, 14785,  9723,  3742,  4972,  1999,  2795,  1023,  1012,  1016,
         1010,  2057,  2064,  2424,  1996, 14785,  9723,  3742,  3853,  1997,
         8418,  2011,  7680,  6562,  1996,  4101,  9723,  3742,  3853,  2058,
         2035,  2825,  5300,  1997,  1060,  2487,  1010,  1012,  1012,  1012,
         1010,  8418, 27944,  1010,  8418,  1009,  1015,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  1024,   102])"
891,1,"['function', 'marginal', 'probability', 'marginal probability', 'probability mass function', 'mass function', 'combinations']", More than two random variables,seg_125,"where the sum runs over all distinct values a1, a2, . . . , an with 1 ≤ aj ≤ n and ai = k. since there are (n − 1)(n − 2) · · · (n −n+1) such combinations, we conclude that the marginal probability mass function of xi is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  2073,  1996,  7680,  3216,  2058,  2035,  5664,  5300, 17350,
         1010, 22441,  1010,  1012,  1012,  1012,  1010,  2019,  2007,  1015,
         1608, 19128,  1608,  1050,  1998,  9932,  1027,  1047,  1012,  2144,
         2045,  2024,  1006,  1050,  1597,  1015,  1007,  1006,  1050,  1597,
         1016,  1007,  1087,  1087,  1087,  1006,  1050,  1597,  2078,  1009,
         1015,  1007,  2107, 14930,  1010,  2057, 16519,  2008,  1996, 14785,
         9723,  3742,  3853,  1997,  8418,  2003,  2445,  2011,   102])"
892,1,"['function', 'marginal', 'probability', 'marginal probability', 'probability mass function', 'mass function']", More than two random variables,seg_125,"for k = 1, 2, . . . , n . we see that the marginal probability mass function of each xi is the same, assigning equal probability 1/n to each possible value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  2005,  1047,  1027,  1015,  1010,  1016,  1010,  1012,  1012,
         1012,  1010,  1050,  1012,  2057,  2156,  2008,  1996, 14785,  9723,
         3742,  3853,  1997,  2169,  8418,  2003,  1996,  2168,  1010, 23911,
         2075,  5020,  9723,  1015,  1013,  1050,  2000,  2169,  2825,  3643,
         1012,   102])"
893,1,"['continuous', 'function', 'random', 'random variables', 'variables', 'joint', 'case']", More than two random variables,seg_125,"in case the random variables x1, x2, . . . , xn are continuous, the joint distribution is defined in a similar way as in the case of two variables. we say that the random variables x1, x2, . . . , xn have a joint continuous distribution if for some function f : rn → r and for all numbers a1, a2, . . . , an and b1, b2, . . . , bn with ai ≤ bi,",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  1999,  2553,  1996,  6721, 10857,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2024,  7142,
         1010,  1996,  4101,  4353,  2003,  4225,  1999,  1037,  2714,  2126,
         2004,  1999,  1996,  2553,  1997,  2048, 10857,  1012,  2057,  2360,
         2008,  1996,  6721, 10857,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  2031,  1037,  4101,  7142,
         4353,  2065,  2005,  2070,  3853,  1042,  1024, 29300,  1585,  1054,
         1998,  2005,  2035,  3616, 17350,  1010, 22441,  1010,  1012,  1012,
         1012,  1010,  2019,  1998, 29491,  1010,  1038,  2475,  1010,  1012,
         1012,  1012,  1010, 24869,  2007,  9932,  1608, 12170,  1010,   102])"
894,1,"['joint probability', 'joint', 'probability']", More than two random variables,seg_125,"again f has to satisfy f(x1, x2, . . . , xn) ≥ 0 and f has to integrate to 1. we call f the joint probability density of x1, x2, . . . , xn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2062,  2084,  2048,  6721, 10857])","tensor([  101,  2153,  1042,  2038,  2000, 13225,  1042,  1006,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1007,  1609,  1014,  1998,  1042,  2038,  2000, 17409,  2000,  1015,
         1012,  2057,  2655,  1042,  1996,  4101,  9723,  4304,  1997,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1012,   102])"
895,1,"['events', 'independence', 'random', 'random variables', 'variables']", Independent random variables,seg_127,"in earlier chapters we have spoken of independence of random variables, anticipating a formal definition. on page 46 we postulated that the events",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  1999,  3041,  9159,  2057,  2031,  5287,  1997,  4336,  1997,
         6721, 10857,  1010, 26481,  1037,  5337,  6210,  1012,  2006,  3931,
         4805,  2057,  2695,  8898,  2008,  1996,  2824,   102])"
896,1,"['discrete', 'bernoulli', 'events', 'discrete random variables', 'event', 'union', 'independence', 'random', 'random variables', 'variables', 'independent']", Independent random variables,seg_127,"related to the bernoulli random variables r1, . . . , r10 are independent. how should one define independence of random variables? intuitively, random variables x and y are independent if every event involving only x is independent of every event involving only y . since for two discrete random variables x and y , any event involving x and y is the union of events of the type {x = a, y = b}, an adequate definition for independence would be",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  3141,  2000,  1996, 16595,  7140,  6894,  6721, 10857,  1054,
         2487,  1010,  1012,  1012,  1012,  1010,  1054, 10790,  2024,  2981,
         1012,  2129,  2323,  2028,  9375,  4336,  1997,  6721, 10857,  1029,
        29202,  2135,  1010,  6721, 10857,  1060,  1998,  1061,  2024,  2981,
         2065,  2296,  2724,  5994,  2069,  1060,  2003,  2981,  1997,  2296,
         2724,  5994,  2069,  1061,  1012,  2144,  2005,  2048, 16246,  6721,
        10857,  1060,  1998,  1061,  1010,  2151,  2724,  5994,  1060,  1998,
         1061,  2003,  1996,  2586,  1997,  2824,  1997,  1996,  2828,  1063,
         1060,  1027,  1037,  1010,  1061,  1027,  1038,  1065,  1010,  2019,
        11706,  6210,  2005,  4336,  2052,  2022,   102])"
897,1,"['continuous', 'discrete', 'continuous random variables', 'random', 'random variables', 'variables', 'case']", Independent random variables,seg_127,"for all possible values a and b. however, this definition is useless for continuous random variables. both the discrete and the continuous case are covered by the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2005,  2035,  2825,  5300,  1037,  1998,  1038,  1012,  2174,
         1010,  2023,  6210,  2003, 11809,  2005,  7142,  6721, 10857,  1012,
         2119,  1996, 16246,  1998,  1996,  7142,  2553,  2024,  3139,  2011,
         1996,  2206,  6210,  1012,   102])"
898,1,"['function', 'random', 'random variables', 'distribution', 'distribution function', 'variables', 'joint', 'independent']", Independent random variables,seg_127,"definition. the random variables x and y , with joint distribution function f , are independent if",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  6210,  1012,  1996,  6721, 10857,  1060,  1998,  1061,  1010,
         2007,  4101,  4353,  3853,  1042,  1010,  2024,  2981,  2065,   102])"
899,1,"['random', 'dependent', 'random variables', 'variables']", Independent random variables,seg_127,for all possible values a and b. random variables that are not independent are called dependent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2005,  2035,  2825,  5300,  1037,  1998,  1038,  1012,  6721,
        10857,  2008,  2024,  2025,  2981,  2024,  2170,  7790,  1012,   102])"
900,1,"['probability', 'independence', 'joint', 'joint probability', 'independent']", Independent random variables,seg_127,"note that independence of x and y guarantees that the joint probability of {x ≤ a, y ≤ b} factorizes. more generally, the following is true: if x and y are independent, then",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  3602,  2008,  4336,  1997,  1060,  1998,  1061, 21586,  2008,
         1996,  4101,  9723,  1997,  1063,  1060,  1608,  1037,  1010,  1061,
         1608,  1038,  1065,  5387, 10057,  1012,  2062,  3227,  1010,  1996,
         2206,  2003,  2995,  1024,  2065,  1060,  1998,  1061,  2024,  2981,
         1010,  2059,   102])"
901,1,"['independent', 'continuous random variables', 'discrete', 'case', 'continuous', 'marginal', 'probability', 'probabilities', 'independence', 'random variables', 'marginal probabilities', 'discrete random variables', 'random', 'intervals', 'variables']", Independent random variables,seg_127,"for all suitable a and b, such as intervals and points. as a special case we can take a = {a}, b = {b}, which yields that for independent x and y the probability of {x = a, y = b} equals the product of the marginal probabilities. in fact, for discrete random variables the definition of independence can be reduced—after cumbersome computations—to equality (9.3). for continuous random variables x and y we find, differentiating both sides of (9.4) with respect to x and y, that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2005,  2035,  7218,  1037,  1998,  1038,  1010,  2107,  2004,
        14025,  1998,  2685,  1012,  2004,  1037,  2569,  2553,  2057,  2064,
         2202,  1037,  1027,  1063,  1037,  1065,  1010,  1038,  1027,  1063,
         1038,  1065,  1010,  2029, 16189,  2008,  2005,  2981,  1060,  1998,
         1061,  1996,  9723,  1997,  1063,  1060,  1027,  1037,  1010,  1061,
         1027,  1038,  1065, 19635,  1996,  4031,  1997,  1996, 14785,  4013,
         3676, 14680,  1012,  1999,  2755,  1010,  2005, 16246,  6721, 10857,
         1996,  6210,  1997,  4336,  2064,  2022,  4359,  1517,  2044, 13988,
        17198,  8462, 22334,  2015,  1517,  2000,  9945,  1006,  1023,  1012,
         1017,  1007,  1012,  2005,  7142,  6721, 10857,  1060,  1998,  1061,
         2057,  2424,  1010,  2367, 15370,  2119,  3903,  1997,  1006,  1023,
         1012,  1018,  1007,  2007,  4847,  2000,  1060,  1998,  1061,  1010,
         2008,   102])"
902,1,"['discrete', 'discrete random variables', 'random', 'random variables', 'variables', 'independent']", Independent random variables,seg_127,quick exercise 9.6 determine for which value of ε the discrete random variables x and y from quick exercise 9.2 are independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  4248,  6912,  1023,  1012,  1020,  5646,  2005,  2029,  3643,
         1997,  1159,  1996, 16246,  6721, 10857,  1060,  1998,  1061,  2013,
         4248,  6912,  1023,  1012,  1016,  2024,  2981,  1012,   102])"
903,1,"['random', 'random variables', 'distribution', 'variables', 'joint', 'independent']", Independent random variables,seg_127,"more generally, random variables x1, x2, . . . , xn, with joint distribution function f , are independent if for all values a1, . . . , an,",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2062,  3227,  1010,  6721, 10857,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  2007,
         4101,  4353,  3853,  1042,  1010,  2024,  2981,  2065,  2005,  2035,
         5300, 17350,  1010,  1012,  1012,  1012,  1010,  2019,  1010,   102])"
904,1,"['discrete', 'discrete random variables', 'random', 'random variables', 'independent', 'variables', 'case']", Independent random variables,seg_127,"as in the case of two discrete random variables, the discrete random variables x1, x2, . . . , xn are independent if",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2004,  1999,  1996,  2553,  1997,  2048, 16246,  6721, 10857,
         1010,  1996, 16246,  6721, 10857,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2024,  2981,  2065,
          102])"
905,1,"['discrete', 'discrete random variables', 'random', 'random variables', 'variables']", Independent random variables,seg_127,"for all possible values a1, . . . , an. thus we see that the definition of independence for discrete random variables is in agreement with our intuitive interpretation given earlier in (9.3).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2005,  2035,  2825,  5300, 17350,  1010,  1012,  1012,  1012,
         1010,  2019,  1012,  2947,  2057,  2156,  2008,  1996,  6210,  1997,
         4336,  2005, 16246,  6721, 10857,  2003,  1999,  3820,  2007,  2256,
        29202,  7613,  2445,  3041,  1999,  1006,  1023,  1012,  1017,  1007,
         1012,   102])"
906,1,"['density function', 'joint probability', 'independent', 'probability density function', 'continuous random variables', 'case', 'continuous', 'function', 'probability', 'random variables', 'joint probability density function', 'random', 'distribution', 'distribution function', 'variables', 'joint']", Independent random variables,seg_127,"in case of independent continuous random variables x1, x2, . . . , xn with joint probability density function f , differentiating the joint distribution function with respect to all the variables gives that",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  1999,  2553,  1997,  2981,  7142,  6721, 10857,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2007,  4101,  9723,  4304,  3853,  1042,  1010,  2367, 15370,  1996,
         4101,  4353,  3853,  2007,  4847,  2000,  2035,  1996, 10857,  3957,
         2008,   102])"
907,1,"['continuous', 'independence', 'case']", Independent random variables,seg_127,"for all values x1, . . . , xn. by integrating both sides over (−∞, a1]× (−∞, a2]× · · ·×(−∞, an], we find the definition of independence. hence in the continuous case, (9.6) is equivalent to the definition of independence.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2005,  2035,  5300,  1060,  2487,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1012,  2011, 22380,  2119,  3903,  2058,  1006,
         1597, 30128,  1010, 17350,  1033,  1095,  1006,  1597, 30128,  1010,
        22441,  1033,  1095,  1087,  1087,  1087,  1095,  1006,  1597, 30128,
         1010,  2019,  1033,  1010,  2057,  2424,  1996,  6210,  1997,  4336,
         1012,  6516,  1999,  1996,  7142,  2553,  1010,  1006,  1023,  1012,
         1020,  1007,  2003,  5662,  2000,  1996,  6210,  1997,  4336,  1012,
          102])"
908,1,"['function', 'interval', 'transformed', 'random', 'random variables', 'independent random variables', 'distribution', 'distribution function', 'variables', 'joint', 'independent']", Propagation of independence,seg_129,"a natural question is whether transformed independent random variables are again independent. we start with a simple example. let x and y be two independent random variables with joint distribution function f . take an interval i = (a, b] and define random variables u and v as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([20594,  1997,  4336])","tensor([  101,  1037,  3019,  3160,  2003,  3251,  8590,  2981,  6721, 10857,
         2024,  2153,  2981,  1012,  2057,  2707,  2007,  1037,  3722,  2742,
         1012,  2292,  1060,  1998,  1061,  2022,  2048,  2981,  6721, 10857,
         2007,  4101,  4353,  3853,  1042,  1012,  2202,  2019, 13483,  1045,
         1027,  1006,  1037,  1010,  1038,  1033,  1998,  9375,  6721, 10857,
         1057,  1998,  1058,  2004,  4076,  1024,   102])"
909,1,"['independence', 'independent']", Propagation of independence,seg_129,"are u and v independent? yes, they are! by using (9.5) and the independence of x and y , we can write",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20594,  1997,  4336])","tensor([ 101, 2024, 1057, 1998, 1058, 2981, 1029, 2748, 1010, 2027, 2024,  999,
        2011, 2478, 1006, 1023, 1012, 1019, 1007, 1998, 1996, 4336, 1997, 1060,
        1998, 1061, 1010, 2057, 2064, 4339,  102])"
910,0,[], Propagation of independence,seg_129,"by a similar reasoning one finds that for all values a and b,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([20594,  1997,  4336])","tensor([  101,  2011,  1037,  2714, 13384,  2028,  4858,  2008,  2005,  2035,
         5300,  1037,  1998,  1038,  1010,   102])"
911,1,"['independence', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Propagation of independence,seg_129,"this illustrates the fact that for independent random variables x1, x2, . . . , xn, the random variables y1, y2, . . . , yn, where each yi is determined by xi only, inherit the independence from the xi. the general rule is given here.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20594,  1997,  4336])","tensor([  101,  2023, 24899,  1996,  2755,  2008,  2005,  2981,  6721, 10857,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1010,  1996,  6721, 10857,  1061,  2487,  1010,  1061,
         2475,  1010,  1012,  1012,  1012,  1010,  1061,  2078,  1010,  2073,
         2169, 12316,  2003,  4340,  2011,  8418,  2069,  1010, 22490,  1996,
         4336,  2013,  1996,  8418,  1012,  1996,  2236,  3627,  2003,  2445,
         2182,  1012,   102])"
912,1,"['function', 'random variable', 'independence', 'random', 'random variables', 'variables', 'variable']", Propagation of independence,seg_129,"propagation of independence. let x1, x2, . . . , xn be independent random variables. for each i, let hi : r → r be a function and define the random variable",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0.])","tensor([20594,  1997,  4336])","tensor([  101, 20594,  1997,  4336,  1012,  2292,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,  2981,
         6721, 10857,  1012,  2005,  2169,  1045,  1010,  2292,  7632,  1024,
         1054,  1585,  1054,  2022,  1037,  3853,  1998,  9375,  1996,  6721,
         8023,   102])"
913,1,['independent'], Propagation of independence,seg_129,"then y1, y2, . . . , yn are also independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([20594,  1997,  4336])","tensor([ 101, 2059, 1061, 2487, 1010, 1061, 2475, 1010, 1012, 1012, 1012, 1010,
        1061, 2078, 2024, 2036, 2981, 1012,  102])"
914,1,['functions'], Propagation of independence,seg_129,"often one uses this rule with all functions the same: hi = h. for instance, in the preceding example,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([20594,  1997,  4336])","tensor([  101,  2411,  2028,  3594,  2023,  3627,  2007,  2035,  4972,  1996,
         2168,  1024,  7632,  1027,  1044,  1012,  2005,  6013,  1010,  1999,
         1996, 11003,  2742,  1010,   102])"
915,1,"['independence', 'random', 'random variables', 'variables', 'transformations', 'independent']", Propagation of independence,seg_129,"the rule is also useful when we need different transformations for different xi. we already saw an example of this in chapter 6. in the single-server queue example in section 6.4, the exp(0.5) random variables t1, t2, . . . and u(2, 5) random variables s1, s2, . . . are required to be independent. they are generated according to the technique described in section 6.2. with a sequence u1, u2, . . . of independent u(0, 1) random variables we can accomplish independence of the ti and si as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([20594,  1997,  4336])","tensor([  101,  1996,  3627,  2003,  2036,  6179,  2043,  2057,  2342,  2367,
        21865,  2005,  2367,  8418,  1012,  2057,  2525,  2387,  2019,  2742,
         1997,  2023,  1999,  3127,  1020,  1012,  1999,  1996,  2309,  1011,
         8241, 24240,  2742,  1999,  2930,  1020,  1012,  1018,  1010,  1996,
         4654,  2361,  1006,  1014,  1012,  1019,  1007,  6721, 10857,  1056,
         2487,  1010,  1056,  2475,  1010,  1012,  1012,  1012,  1998,  1057,
         1006,  1016,  1010,  1019,  1007,  6721, 10857,  1055,  2487,  1010,
         1055,  2475,  1010,  1012,  1012,  1012,  2024,  3223,  2000,  2022,
         2981,  1012,  2027,  2024,  7013,  2429,  2000,  1996,  6028,  2649,
         1999,  2930,  1020,  1012,  1016,  1012,  2007,  1037,  5537,  1057,
         2487,  1010, 23343,  1010,  1012,  1012,  1012,  1997,  2981,  1057,
         1006,  1014,  1010,  1015,  1007,  6721, 10857,  2057,  2064, 14570,
         4336,  1997,  1996, 14841,  1998,  9033,  2004,  4076,  1024,   102])"
916,1,"['functions', 'random', 'random variables', 'distribution', 'variables', 'independent']", Propagation of independence,seg_129,"where f and g are the distribution functions of the exp(0.5) distribution and the u(2, 5) distribution. the propagation-of-independence rule now guarantees that all random variables t1, s1, t2, s2, . . . are independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([20594,  1997,  4336])","tensor([  101,  2073,  1042,  1998,  1043,  2024,  1996,  4353,  4972,  1997,
         1996,  4654,  2361,  1006,  1014,  1012,  1019,  1007,  4353,  1998,
         1996,  1057,  1006,  1016,  1010,  1019,  1007,  4353,  1012,  1996,
        20594,  1011,  1997,  1011,  4336,  3627,  2085, 21586,  2008,  2035,
         6721, 10857,  1056,  2487,  1010,  1055,  2487,  1010,  1056,  2475,
         1010,  1055,  2475,  1010,  1012,  1012,  1012,  2024,  2981,  1012,
          102])"
917,1,"['probability', 'combinations']", Solutions to the quick exercises,seg_131,"9.1 the only possibilities with the sum equal to 7 and the maximum equal to 4 are the combinations (3, 4) and (4, 3). they both have probability 1/36, so that p(s = 7, m = 4) = 2/36.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1023,  1012,  1015,  1996,  2069, 12020,  2007,  1996,  7680,
         5020,  2000,  1021,  1998,  1996,  4555,  5020,  2000,  1018,  2024,
         1996, 14930,  1006,  1017,  1010,  1018,  1007,  1998,  1006,  1018,
         1010,  1017,  1007,  1012,  2027,  2119,  2031,  9723,  1015,  1013,
         4029,  1010,  2061,  2008,  1052,  1006,  1055,  1027,  1021,  1010,
         1049,  1027,  1018,  1007,  1027,  1016,  1013,  4029,  1012,   102])"
918,1,['information'], Solutions to the quick exercises,seg_131,"9.2 since px(0), px(1), py (0), and py (1) are all equal to 1/2, knowing only px and py yields no information on ε whatsoever. you have to be a student at hogwarts to be able to get the values of p right!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1023,  1012,  1016,  2144,  1052,  2595,  1006,  1014,  1007,
         1010,  1052,  2595,  1006,  1015,  1007,  1010,  1052,  2100,  1006,
         1014,  1007,  1010,  1998,  1052,  2100,  1006,  1015,  1007,  2024,
         2035,  5020,  2000,  1015,  1013,  1016,  1010,  4209,  2069,  1052,
         2595,  1998,  1052,  2100, 16189,  2053,  2592,  2006,  1159, 18971,
         1012,  2017,  2031,  2000,  2022,  1037,  3076,  2012, 27589, 18367,
         2015,  2000,  2022,  2583,  2000,  2131,  1996,  5300,  1997,  1052,
         2157,   999,   102])"
919,1,"['discrete', 'table', 'discrete random variables', 'probabilities', 'random', 'random variables', 'variables', 'combinations']", Solutions to the quick exercises,seg_131,"9.3 since s and m are discrete random variables, f (5, 3) is the sum of the probabilities p(s = a, m = b) of all combinations (a, b) with a ≤ 5 and b ≤ 3. from table 9.2 we see that this sum is 8/36.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1023,  1012,  1017,  2144,  1055,  1998,  1049,  2024, 16246,
         6721, 10857,  1010,  1042,  1006,  1019,  1010,  1017,  1007,  2003,
         1996,  7680,  1997,  1996,  4013,  3676, 14680,  1052,  1006,  1055,
         1027,  1037,  1010,  1049,  1027,  1038,  1007,  1997,  2035, 14930,
         1006,  1037,  1010,  1038,  1007,  2007,  1037,  1608,  1019,  1998,
         1038,  1608,  1017,  1012,  2013,  2795,  1023,  1012,  1016,  2057,
         2156,  2008,  2023,  7680,  2003,  1022,  1013,  4029,  1012,   102])"
920,0,[], Solutions to the quick exercises,seg_131,1 5(3y3 + 18y2 − 21). differentiating with respect to y yields that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1015,  1019,  1006,  1017,  2100,  2509,  1009,  2324,  2100,
         2475,  1597,  2538,  1007,  1012,  2367, 15370,  2007,  4847,  2000,
         1061, 16189,  2008,   102])"
921,1,"['function', 'density function', 'probability', 'probability density function']", Solutions to the quick exercises,seg_131,"for y between 1 and 2 (and fy (y) = 0 otherwise). the probability density function of y can also be obtained directly from f(x, y). for y between 1 and 2:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2005, 1061, 2090, 1015, 1998, 1016, 1006, 1998, 1042, 2100, 1006,
        1061, 1007, 1027, 1014, 4728, 1007, 1012, 1996, 9723, 4304, 3853, 1997,
        1061, 2064, 2036, 2022, 4663, 3495, 2013, 1042, 1006, 1060, 1010, 1061,
        1007, 1012, 2005, 1061, 2090, 1015, 1998, 1016, 1024,  102])"
922,1,"['independent', 'case']", Solutions to the quick exercises,seg_131,"9.6 the number ε is between −1/4 and 1/4. now x and y are independent in case p(i, j) = p(x = i, y = j) = p(x = i)p(y = j) = px(i)py (j), for all i, j = 0, 1. if i = j = 0, we should have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1023, 1012, 1020, 1996, 2193, 1159, 2003, 2090, 1597, 2487, 1013,
        1018, 1998, 1015, 1013, 1018, 1012, 2085, 1060, 1998, 1061, 2024, 2981,
        1999, 2553, 1052, 1006, 1045, 1010, 1046, 1007, 1027, 1052, 1006, 1060,
        1027, 1045, 1010, 1061, 1027, 1046, 1007, 1027, 1052, 1006, 1060, 1027,
        1045, 1007, 1052, 1006, 1061, 1027, 1046, 1007, 1027, 1052, 2595, 1006,
        1045, 1007, 1052, 2100, 1006, 1046, 1007, 1010, 2005, 2035, 1045, 1010,
        1046, 1027, 1014, 1010, 1015, 1012, 2065, 1045, 1027, 1046, 1027, 1014,
        1010, 2057, 2323, 2031,  102])"
923,1,"['dependent', 'combinations', 'independent']", Solutions to the quick exercises,seg_131,"this implies that ε = 0. furthermore, for all other combinations (i, j) one can check that for ε = 0 also p(i, j) = px(i) py (j), so that x and y are independent. if ε = 0, we have p(0, 0) = px(0) py (0), so that x and y are dependent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2023, 12748,  2008,  1159,  1027,  1014,  1012,  7297,  1010,
         2005,  2035,  2060, 14930,  1006,  1045,  1010,  1046,  1007,  2028,
         2064,  4638,  2008,  2005,  1159,  1027,  1014,  2036,  1052,  1006,
         1045,  1010,  1046,  1007,  1027,  1052,  2595,  1006,  1045,  1007,
         1052,  2100,  1006,  1046,  1007,  1010,  2061,  2008,  1060,  1998,
         1061,  2024,  2981,  1012,  2065,  1159,  1027,  1014,  1010,  2057,
         2031,  1052,  1006,  1014,  1010,  1014,  1007,  1027,  1052,  2595,
         1006,  1014,  1007,  1052,  2100,  1006,  1014,  1007,  1010,  2061,
         2008,  1060,  1998,  1061,  2024,  7790,  1012,   102])"
924,1,"['joint probabilities', 'table', 'marginal probability', 'discrete', 'probability distributions', 'marginal', 'probability', 'probabilities', 'random variables', 'discrete random variables', 'distributions', 'random', 'variables', 'joint']", Exercises,seg_133,"9.1 the joint probabilities p(x = a, y = b) of discrete random variables x and y are given in the following table (which is based on the magical square in albrecht dürer’s engraving melencolia i in figure 9.4). determine the marginal probability distributions of x and y , i.e., determine the probabilities p(x = a) and p(y = b) for a, b = 1, 2, 3, 4.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  1015,  1996,  4101,  4013,  3676, 14680,  1052,
         1006,  1060,  1027,  1037,  1010,  1061,  1027,  1038,  1007,  1997,
        16246,  6721, 10857,  1060,  1998,  1061,  2024,  2445,  1999,  1996,
         2206,  2795,  1006,  2029,  2003,  2241,  2006,  1996,  8687,  2675,
         1999, 25542,  4241, 14544,  1521,  1055, 23501, 11463,  2368, 25778,
         2401,  1045,  1999,  3275,  1023,  1012,  1018,  1007,  1012,  5646,
         1996, 14785,  9723, 20611,  1997,  1060,  1998,  1061,  1010,  1045,
         1012,  1041,  1012,  1010,  5646,  1996,  4013,  3676, 14680,  1052,
         1006,  1060,  1027,  1037,  1007,  1998,  1052,  1006,  1061,  1027,
         1038,  1007,  2005,  1037,  1010,  1038,  1027,  1015,  1010,  1016,
         1010,  1017,  1010,  1018,  1012,   102])"
925,1,"['joint probability', 'joint probability distribution', 'discrete', 'table', 'probability', 'discrete random variables', 'random', 'random variables', 'distribution', 'variables', 'joint', 'probability distribution']", Exercises,seg_133,9.2 the joint probability distribution of two discrete random variables x and y is partly given in the following table.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  1016,  1996,  4101,  9723,  4353,  1997,  2048,
        16246,  6721, 10857,  1060,  1998,  1061,  2003,  6576,  2445,  1999,
         1996,  2206,  2795,  1012,   102])"
926,1,['table'], Exercises,seg_133,a. complete the table.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 3143, 1996, 2795, 1012,  102])"
927,1,"['dependent', 'independent']", Exercises,seg_133,b. are x and y dependent or independent?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2024, 1060, 1998, 1061, 7790, 2030, 2981, 1029,  102])"
928,1,"['table', 'random', 'random variables', 'distribution', 'variables', 'joint']", Exercises,seg_133,"9.3 let x and y be two random variables, with joint distribution the melencolia distribution, given by the table in exercise 9.1. what is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  1017,  2292,  1060,  1998,  1061,  2022,  2048,
         6721, 10857,  1010,  2007,  4101,  4353,  1996, 11463,  2368, 25778,
         2401,  4353,  1010,  2445,  2011,  1996,  2795,  1999,  6912,  1023,
         1012,  1015,  1012,  2054,  2003,   102])"
929,1,"['probability distributions', 'discrete', 'marginal', 'table', 'probability', 'discrete random variables', 'distributions', 'random', 'marginal probability', 'random variables', 'variables']", Exercises,seg_133,9.4 this exercise will be easy for those familiar with japanese puzzles called nonograms. the marginal probability distributions of the discrete random variables x and y are given in the following table:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  1018,  2023,  6912,  2097,  2022,  3733,  2005,
         2216,  5220,  2007,  2887, 19672,  2170,  2512,  8649,  6444,  2015,
         1012,  1996, 14785,  9723, 20611,  1997,  1996, 16246,  6721, 10857,
         1060,  1998,  1061,  2024,  2445,  1999,  1996,  2206,  2795,  1024,
          102])"
930,1,"['distribution', 'joint probability distribution', 'probability', 'joint', 'joint probability', 'probability distribution']", Exercises,seg_133,"moreover, for a and b from 1 to 5 the joint probability p(x = a, y = b) is either 0 or 1/14. determine the joint probability distribution of x and y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 9308, 1010, 2005, 1037, 1998, 1038, 2013, 1015, 2000, 1019, 1996,
        4101, 9723, 1052, 1006, 1060, 1027, 1037, 1010, 1061, 1027, 1038, 1007,
        2003, 2593, 1014, 2030, 1015, 1013, 2403, 1012, 5646, 1996, 4101, 9723,
        4353, 1997, 1060, 1998, 1061, 1012,  102])"
931,1,"['joint probabilities', 'discrete', 'table', 'discrete random variables', 'probabilities', 'random', 'random variables', 'variables', 'joint']", Exercises,seg_133,"9.5 let η be an unknown real number, and let the joint probabilities p(x = a, y = b) of the discrete random variables x and y be given by the following table:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  1019,  2292,  1161,  2022,  2019,  4242,  2613,
         2193,  1010,  1998,  2292,  1996,  4101,  4013,  3676, 14680,  1052,
         1006,  1060,  1027,  1037,  1010,  1061,  1027,  1038,  1007,  1997,
         1996, 16246,  6721, 10857,  1060,  1998,  1061,  2022,  2445,  2011,
         1996,  2206,  2795,  1024,   102])"
932,0,[], Exercises,seg_133,a. which are the values η can attain?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012,  2029,  2024,  1996,  5300,  1161,  2064, 18759,
         1029,   102])"
933,1,['independent'], Exercises,seg_133,b. is there a value of η for which x and y are independent?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2003, 2045, 1037, 3643, 1997, 1161, 2005, 2029, 1060,
        1998, 1061, 2024, 2981, 1029,  102])"
934,1,['independent'], Exercises,seg_133,9.6 let x and y be two independent ber(1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1023, 1012, 1020, 2292, 1060, 1998, 1061, 2022, 2048, 2981, 2022,
        2099, 1006, 1015,  102])"
935,1,"['random', 'random variables', 'variables']", Exercises,seg_133,2 ) random variables. define random variables u and v by:,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1007,  6721, 10857,  1012,  9375,  6721, 10857,  1057,
         1998,  1058,  2011,  1024,   102])"
936,1,"['probability distributions', 'marginal', 'probability', 'distributions', 'marginal probability', 'joint']", Exercises,seg_133,a. determine the joint and marginal probability distributions of u and v .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996,  4101,  1998, 14785,  9723, 20611,
         1997,  1057,  1998,  1058,  1012,   102])"
937,1,"['dependent', 'independent']", Exercises,seg_133,b. find out whether u and v are dependent or independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2424, 2041, 3251, 1057, 1998, 1058, 2024, 7790, 2030,
        2981, 1012,  102])"
938,1,"['data', 'table']", Exercises,seg_133,"9.7 to investigate the relation between hair color and eye color, the hair color and eye color of 5383 persons was recorded. the data are given in the following table:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0.])",tensor([11110]),"tensor([ 101, 1023, 1012, 1021, 2000, 8556, 1996, 7189, 2090, 2606, 3609, 1998,
        3239, 3609, 1010, 1996, 2606, 3609, 1998, 3239, 3609, 1997, 5187, 2620,
        2509, 5381, 2001, 2680, 1012, 1996, 2951, 2024, 2445, 1999, 1996, 2206,
        2795, 1024,  102])"
939,1,"['joint probability', 'joint probability distribution', 'table', 'probability', 'random', 'random variables', 'distribution', 'variables', 'joint', 'probability distribution']", Exercises,seg_133,"eye color is encoded by the values 1 (light) and 2 (dark), and hair color by 1 (fair/red), 2 (medium), and 3 (dark/black). by dividing the numbers in the table by 5383, the table is turned into a joint probability distribution for random variables x (hair color) taking values 1 to 3 and y (eye color) taking values 1 and 2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  3239,  3609,  2003, 12359,  2011,  1996,  5300,  1015,  1006,
         2422,  1007,  1998,  1016,  1006,  2601,  1007,  1010,  1998,  2606,
         3609,  2011,  1015,  1006,  4189,  1013,  2417,  1007,  1010,  1016,
         1006,  5396,  1007,  1010,  1998,  1017,  1006,  2601,  1013,  2304,
         1007,  1012,  2011, 16023,  1996,  3616,  1999,  1996,  2795,  2011,
         5187,  2620,  2509,  1010,  1996,  2795,  2003,  2357,  2046,  1037,
         4101,  9723,  4353,  2005,  6721, 10857,  1060,  1006,  2606,  3609,
         1007,  2635,  5300,  1015,  2000,  1017,  1998,  1061,  1006,  3239,
         3609,  1007,  2635,  5300,  1015,  1998,  1016,  1012,   102])"
940,1,"['probability distributions', 'marginal', 'probability', 'distributions', 'marginal probability', 'joint']", Exercises,seg_133,a. determine the joint and marginal probability distributions of x and y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996,  4101,  1998, 14785,  9723, 20611,
         1997,  1060,  1998,  1061,  1012,   102])"
941,1,"['dependent', 'independent']", Exercises,seg_133,b. find out whether x and y are dependent or independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2424, 2041, 3251, 1060, 1998, 1061, 2024, 7790, 2030,
        2981, 1012,  102])"
942,1,"['probability', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_133,9.8 let x and y be independent random variables with probability distributions given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  1022,  2292,  1060,  1998,  1061,  2022,  2981,
         6721, 10857,  2007,  9723, 20611,  2445,  2011,   102])"
943,1,['distribution'], Exercises,seg_133,a. compute the distribution of z = x + y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  4353,  1997,  1062,  1027,  1060,
         1009,  1061,  1012,   102])"
944,1,"['random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_133,"b. let ỹ and z̃ be independent random variables, where ỹ has the same",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2292,  1061,  1998,  1062,  2022,  2981,  6721,
        10857,  1010,  2073,  1061,  2038,  1996,  2168,   102])"
945,1,['distribution'], Exercises,seg_133,"distribution as y , and z̃ the same distribution as z. compute the distribution of x̃ = z̃ − ỹ .",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  4353,  2004,  1061,  1010,  1998,  1062,  1996,  2168,  4353,
         2004,  1062,  1012, 24134,  1996,  4353,  1997,  1060,  1027,  1062,
         1597,  1061,  1012,   102])"
946,1,"['function', 'distribution', 'distribution function', 'joint']", Exercises,seg_133,9.9 suppose that the joint distribution function of x and y is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1023, 1012, 1023, 6814, 2008, 1996, 4101, 4353, 3853, 1997, 1060,
        1998, 1061, 2003, 2445, 2011,  102])"
947,1,"['marginal', 'functions', 'distribution', 'marginal distribution']", Exercises,seg_133,a. determine the marginal distribution functions of x and y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996, 14785,  4353,  4972,  1997,  1060,
         1998,  1061,  1012,   102])"
948,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']", Exercises,seg_133,b. determine the joint probability density function of x and y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 5646, 1996, 4101, 9723, 4304, 3853, 1997, 1060, 1998,
        1061, 1012,  102])"
949,1,"['probability density functions', 'marginal probability density', 'marginal', 'probability', 'functions', 'marginal probability density functions', 'density functions', 'marginal probability']", Exercises,seg_133,c. determine the marginal probability density functions of x and y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  5646,  1996, 14785,  9723,  4304,  4972,  1997,
         1060,  1998,  1061,  1012,   102])"
950,1,['independent'], Exercises,seg_133,d. find out whether x and y are independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1040, 1012, 2424, 2041, 3251, 1060, 1998, 1061, 2024, 2981, 1012,
         102])"
951,1,"['continuous', 'function', 'density function', 'continuous random variables', 'random', 'random variables', 'variables', 'joint']", Exercises,seg_133,9.10 let x and y be two continuous random variables with joint probability density function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 1.,
        0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2184,  2292,  1060,  1998,  1061,  2022,  2048,
         7142,  6721, 10857,  2007,  4101,  9723,  4304,  3853,   102])"
952,1,['probability'], Exercises,seg_133,a. find the probability p(1,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2424, 1996, 9723, 1052, 1006, 1015,  102])"
953,1,"['function', 'distribution', 'distribution function', 'joint']", Exercises,seg_133,"4 ≤ x ≤ 1 2 , 1 3 ≤ y ≤ 2 3). b. determine the joint distribution function of x and y for a and b between",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1018, 1608, 1060, 1608, 1015, 1016, 1010, 1015, 1017, 1608, 1061,
        1608, 1016, 1017, 1007, 1012, 1038, 1012, 5646, 1996, 4101, 4353, 3853,
        1997, 1060, 1998, 1061, 2005, 1037, 1998, 1038, 2090,  102])"
954,1,"['function', 'density function', 'probability', 'probability density function']", Exercises,seg_133,d. apply the rule on page 122 to find the probability density function of x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1040,  1012,  6611,  1996,  3627,  2006,  3931, 13092,  2000,
         2424,  1996,  9723,  4304,  3853,  1997,  1060,   102])"
955,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']", Exercises,seg_133,"from the joint probability density function f(x, y). use the result to verify your answer from c.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2013,  1996,  4101,  9723,  4304,  3853,  1042,  1006,  1060,
         1010,  1061,  1007,  1012,  2224,  1996,  2765,  2000, 20410,  2115,
         3437,  2013,  1039,  1012,   102])"
956,1,['independent'], Exercises,seg_133,e. find out whether x and y are independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1041, 1012, 2424, 2041, 3251, 1060, 1998, 1061, 2024, 2981, 1012,
         102])"
957,1,"['continuous', 'joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'continuous random variables', 'random', 'random variables', 'variables', 'joint']", Exercises,seg_133,"9.11 let x and y be two continuous random variables, with the same joint probability density function as in exercise 9.10. find the probability p(x < y ) that x is smaller than y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2340,  2292,  1060,  1998,  1061,  2022,  2048,
         7142,  6721, 10857,  1010,  2007,  1996,  2168,  4101,  9723,  4304,
         3853,  2004,  1999,  6912,  1023,  1012,  2184,  1012,  2424,  1996,
         9723,  1052,  1006,  1060,  1026,  1061,  1007,  2008,  1060,  2003,
         3760,  2084,  1061,  1012,   102])"
958,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']", Exercises,seg_133,"9.12 the joint probability density function f of the pair (x, y ) is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1023, 1012, 2260, 1996, 4101, 9723, 4304, 3853, 1042, 1997, 1996,
        3940, 1006, 1060, 1010, 1061, 1007, 2003, 2445, 2011,  102])"
959,1,['probability'], Exercises,seg_133,b. determine the probability p(2x ≤ y ).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 5646, 1996, 9723, 1052, 1006, 1016, 2595, 1608, 1061,
        1007, 1012,  102])"
960,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']", Exercises,seg_133,"9.13 on a disc with origin (0, 0) and radius 1, a point (x, y ) is selected by throwing a dart that hits the disc in an arbitrary place. this is best described by the joint probability density function f of x and y , given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2410,  2006,  1037,  5860,  2007,  4761,  1006,
         1014,  1010,  1014,  1007,  1998, 12177,  1015,  1010,  1037,  2391,
         1006,  1060,  1010,  1061,  1007,  2003,  3479,  2011,  6886,  1037,
        14957,  2008,  4978,  1996,  5860,  1999,  2019, 15275,  2173,  1012,
         2023,  2003,  2190,  2649,  2011,  1996,  4101,  9723,  4304,  3853,
         1042,  1997,  1060,  1998,  1061,  1010,  2445,  2011,   102])"
961,0,[], Exercises,seg_133,where c is some positive constant.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2073, 1039, 2003, 2070, 3893, 5377, 1012,  102])"
962,1,"['distribution function', 'function', 'distribution']", Exercises,seg_133,the distribution function fr.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  4353,  3853, 10424,  1012,   102])"
963,1,"['function', 'density function', 'marginal', 'marginal density']", Exercises,seg_133,c. determine the marginal density function fx . without doing any calcula-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  5646,  1996, 14785,  4304,  3853, 23292,  1012,
         2302,  2725,  2151, 10250, 19879,  1011,   102])"
964,0,[], Exercises,seg_133,"tions, what can you say about fy ?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 14841,  5644,  1010,  2054,  2064,  2017,  2360,  2055,  1042,
         2100,  1029,   102])"
965,1,['probability'], Exercises,seg_133,"9.14 an arbitrary point (x, y ) is drawn from the square [−1, 1] × [−1, 1]. this means that for any region g in the plane, the probability that (x, y ) is in g, is given by the area of g∩ divided by the area of , where denotes the square [−1, 1]× [−1, 1]:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2403,  2019, 15275,  2391,  1006,  1060,  1010,
         1061,  1007,  2003,  4567,  2013,  1996,  2675,  1031,  1597,  2487,
         1010,  1015,  1033,  1095,  1031,  1597,  2487,  1010,  1015,  1033,
         1012,  2023,  2965,  2008,  2005,  2151,  2555,  1043,  1999,  1996,
         4946,  1010,  1996,  9723,  2008,  1006,  1060,  1010,  1061,  1007,
         2003,  1999,  1043,  1010,  2003,  2445,  2011,  1996,  2181,  1997,
         1043, 30131,  4055,  2011,  1996,  2181,  1997,  1010,  2073, 14796,
         1996,  2675,  1031,  1597,  2487,  1010,  1015,  1033,  1095,  1031,
         1597,  2487,  1010,  1015,  1033,  1024,   102])"
966,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']", Exercises,seg_133,"a. determine the joint probability density function of the pair (x, y ).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 1996, 4101, 9723, 4304, 3853, 1997, 1996, 3940,
        1006, 1060, 1010, 1061, 1007, 1012,  102])"
967,1,"['random', 'independent']", Exercises,seg_133,"b. check that x and y are two independent, u(−1, 1) distributed random",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 4638, 2008, 1060, 1998, 1061, 2024, 2048, 2981, 1010,
        1057, 1006, 1597, 2487, 1010, 1015, 1007, 5500, 6721,  102])"
968,1,"['function', 'distribution', 'distribution function', 'joint']", Exercises,seg_133,a. use figure 9.5 to show that the joint distribution function f of the pair,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2224, 3275, 1023, 1012, 1019, 2000, 2265, 2008, 1996,
        4101, 4353, 3853, 1042, 1997, 1996, 3940,  102])"
969,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']", Exercises,seg_133,"b. determine the joint probability density function f of the pair (x, y ).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 5646, 1996, 4101, 9723, 4304, 3853, 1042, 1997, 1996,
        3940, 1006, 1060, 1010, 1061, 1007, 1012,  102])"
970,1,['distribution'], Exercises,seg_133,"9.16 (continuation of exercise 9.15) an arbitrary point (u, v ) is drawn from the unit square [0, 1]× [0, 1]. let x and y be defined as in exercise 9.15. show that min{u, v } has the same distribution as x and that max{u, v } has the same distribution as y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2385,  1006, 13633,  1997,  6912,  1023,  1012,
         2321,  1007,  2019, 15275,  2391,  1006,  1057,  1010,  1058,  1007,
         2003,  4567,  2013,  1996,  3131,  2675,  1031,  1014,  1010,  1015,
         1033,  1095,  1031,  1014,  1010,  1015,  1033,  1012,  2292,  1060,
         1998,  1061,  2022,  4225,  2004,  1999,  6912,  1023,  1012,  2321,
         1012,  2265,  2008,  8117,  1063,  1057,  1010,  1058,  1065,  2038,
         1996,  2168,  4353,  2004,  1060,  1998,  2008,  4098,  1063,  1057,
         1010,  1058,  1065,  2038,  1996,  2168,  4353,  2004,  1061,  1012,
          102])"
971,1,"['function', 'random', 'random variables', 'uniformly distributed', 'independent random variables', 'distribution', 'distribution function', 'variables', 'joint', 'independent']", Exercises,seg_133,"9.17 let u1 and u2 be two independent random variables, both uniformly distributed over [0, a]. let v = min{u1, u2} and z = max{u1, u2}. show that the joint distribution function of v and z is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2459,  2292,  1057,  2487,  1998, 23343,  2022,
         2048,  2981,  6721, 10857,  1010,  2119, 27423,  5500,  2058,  1031,
         1014,  1010,  1037,  1033,  1012,  2292,  1058,  1027,  8117,  1063,
         1057,  2487,  1010, 23343,  1065,  1998,  1062,  1027,  4098,  1063,
         1057,  2487,  1010, 23343,  1065,  1012,  2265,  2008,  1996,  4101,
         4353,  3853,  1997,  1058,  1998,  1062,  2003,  2445,  2011,   102])"
972,1,"['function', 'marginal', 'probability', 'without replacement', 'marginal probability', 'probability mass function', 'mass function', 'replacement']", Exercises,seg_133,"9.18 suppose a vase contains balls numbered 1, 2, . . . , n . we draw n balls without replacement from the vase. each ball is selected with equal probability, i.e., in the first draw each ball has probability 1/n , in the second draw each of the n − 1 remaining balls has probability 1/(n − 1), and so on. for i = 1, 2, . . . , n, let xi denote the number on the ball in the ith draw. we have shown that the marginal probability mass function of xi is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2324,  6814,  1037, 18781,  3397,  7395,  8597,
         1015,  1010,  1016,  1010,  1012,  1012,  1012,  1010,  1050,  1012,
         2057,  4009,  1050,  7395,  2302,  6110,  2013,  1996, 18781,  1012,
         2169,  3608,  2003,  3479,  2007,  5020,  9723,  1010,  1045,  1012,
         1041,  1012,  1010,  1999,  1996,  2034,  4009,  2169,  3608,  2038,
         9723,  1015,  1013,  1050,  1010,  1999,  1996,  2117,  4009,  2169,
         1997,  1996,  1050,  1597,  1015,  3588,  7395,  2038,  9723,  1015,
         1013,  1006,  1050,  1597,  1015,  1007,  1010,  1998,  2061,  2006,
         1012,  2005,  1045,  1027,  1015,  1010,  1016,  1010,  1012,  1012,
         1012,  1010,  1050,  1010,  2292,  8418, 19090,  1996,  2193,  2006,
         1996,  3608,  1999,  1996,  2009,  2232,  4009,  1012,  2057,  2031,
         3491,  2008,  1996, 14785,  9723,  3742,  3853,  1997,  8418,  2003,
         2445,  2011,   102])"
973,1,['variance'], Exercises,seg_133,b. compute the variance of xi. you may use the identity,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996, 23284,  1997,  8418,  1012,  2017,
         2089,  2224,  1996,  4767,   102])"
974,1,"['continuous', 'function', 'density function', 'continuous random variables', 'random', 'random variables', 'variables', 'joint']", Exercises,seg_133,"9.19 let x and y be two continuous random variables, with joint probability density function",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1.,
        1., 0.])",tensor([11110]),"tensor([  101,  1023,  1012,  2539,  2292,  1060,  1998,  1061,  2022,  2048,
         7142,  6721, 10857,  1010,  2007,  4101,  9723,  4304,  3853,   102])"
975,0,[], Exercises,seg_133,"a. determine positive numbers a, b, and c such that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 5646, 3893, 3616, 1037, 1010, 1038, 1010, 1998, 1039,
        2107, 2008,  102])"
976,0,[], Exercises,seg_133,b. setting µ = 4,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1038, 1012, 4292, 1085, 1027, 1018,  102])"
977,0,[], Exercises,seg_133,and use this to show that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1998, 2224, 2023, 2000, 2265, 2008,  102])"
978,1,"['function', 'density function', 'probability', 'probability density function', 'results']", Exercises,seg_133,c. use the results from b to determine the probability density function fx,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2224,  1996,  3463,  2013,  1038,  2000,  5646,
         1996,  9723,  4304,  3853, 23292,   102])"
979,1,['distribution'], Exercises,seg_133,of x . what kind of distribution does x have?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1997, 1060, 1012, 2054, 2785, 1997, 4353, 2515, 1060, 2031, 1029,
         102])"
980,0,[], Exercises,seg_133,"9.20 suppose we throw a needle on a large sheet of paper, on which horizontal lines are drawn, which are at needle-length apart (see also exercise 21.16). choose one of the horizontal lines as x-axis, and let (x, y ) be the center of the needle. furthermore, let z be the distance of this center (x, y ) to the nearest horizontal line under (x, y ), and let h be the angle between the needle and the positive x-axis.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1023,  1012,  2322,  6814,  2057,  5466,  1037, 12201,  2006,
         1037,  2312,  7123,  1997,  3259,  1010,  2006,  2029,  9876,  3210,
         2024,  4567,  1010,  2029,  2024,  2012, 12201,  1011,  3091,  4237,
         1006,  2156,  2036,  6912,  2538,  1012,  2385,  1007,  1012,  5454,
         2028,  1997,  1996,  9876,  3210,  2004,  1060,  1011,  8123,  1010,
         1998,  2292,  1006,  1060,  1010,  1061,  1007,  2022,  1996,  2415,
         1997,  1996, 12201,  1012,  7297,  1010,  2292,  1062,  2022,  1996,
         3292,  1997,  2023,  2415,  1006,  1060,  1010,  1061,  1007,  2000,
         1996,  7205,  9876,  2240,  2104,  1006,  1060,  1010,  1061,  1007,
         1010,  1998,  2292,  1044,  2022,  1996,  6466,  2090,  1996, 12201,
         1998,  1996,  3893,  1060,  1011,  8123,  1012,   102])"
981,0,[], Exercises,seg_133,"a. assuming that the length of the needle is equal to 1, argue that z has",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012, 10262,  2008,  1996,  3091,  1997,  1996, 12201,
         2003,  5020,  2000,  1015,  1010,  7475,  2008,  1062,  2038,   102])"
982,1,"['independent', 'distribution']", Exercises,seg_133,"a u(0, 1) distribution. also argue that h has a u(0, π) distribution and that z and h are independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1057, 1006, 1014, 1010, 1015, 1007, 4353, 1012, 2036, 7475,
        2008, 1044, 2038, 1037, 1057, 1006, 1014, 1010, 1170, 1007, 4353, 1998,
        2008, 1062, 1998, 1044, 2024, 2981, 1012,  102])"
983,0,[], Exercises,seg_133,b. show that the needle hits a horizontal line when,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  2265,  2008,  1996, 12201,  4978,  1037,  9876,
         2240,  2043,   102])"
984,1,['probability'], Exercises,seg_133,c. show that the probability that the needle will hit one of the horizontal,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2265,  2008,  1996,  9723,  2008,  1996, 12201,
         2097,  2718,  2028,  1997,  1996,  9876,   102])"
985,1,"['variance', 'covariance', 'random', 'correlation', 'random variables', 'expectation', 'distribution', 'variables', 'joint', 'combination']", Covariance and correlation,seg_135,"in this chapter we see how the joint distribution of two or more random variables is used to compute the expectation of a combination of these random variables. we discuss the expectation and variance of a sum of random variables and introduce the notions of covariance and correlation, which express to some extent the way two random variables influence each other.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335,  1998, 16902])","tensor([  101,  1999,  2023,  3127,  2057,  2156,  2129,  1996,  4101,  4353,
         1997,  2048,  2030,  2062,  6721, 10857,  2003,  2109,  2000, 24134,
         1996, 17626,  1997,  1037,  5257,  1997,  2122,  6721, 10857,  1012,
         2057,  6848,  1996, 17626,  1998, 23284,  1997,  1037,  7680,  1997,
         6721, 10857,  1998,  8970,  1996, 21951,  1997,  2522, 10755, 28335,
         1998, 16902,  1010,  2029,  4671,  2000,  2070,  6698,  1996,  2126,
         2048,  6721, 10857,  3747,  2169,  2060,  1012,   102])"
986,1,"['probability', 'random variable', 'random', 'random variables', 'model', 'variables', 'expected value', 'variable']", Expectation and joint distributions,seg_137,"china vases of various shapes are produced in the delftware factories in the old city of delft. one particular simple cylindrical model has height h and radius r centimeters. due to all kinds of circumstances—the place of the vase in the oven, the fact that the vases are handmade, etc.—h and r are not constants but are random variables. the volume of a vase is equal to the random variable v = πhr2, and one is interested in its expected value e[v ]. when fv denotes the probability density of v , then by definition",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2859, 18781,  2015,  1997,  2536, 10466,  2024,  2550,  1999,
         1996,  3972,  6199,  8059, 11123,  1999,  1996,  2214,  2103,  1997,
         3972,  6199,  1012,  2028,  3327,  3722, 18797,  2944,  2038,  4578,
         1044,  1998, 12177,  1054, 18119,  1012,  2349,  2000,  2035,  7957,
         1997,  6214,  1517,  1996,  2173,  1997,  1996, 18781,  1999,  1996,
        17428,  1010,  1996,  2755,  2008,  1996, 18781,  2015,  2024,  2192,
        21565,  1010,  4385,  1012,  1517,  1044,  1998,  1054,  2024,  2025,
         5377,  2015,  2021,  2024,  6721, 10857,  1012,  1996,  3872,  1997,
         1037, 18781,  2003,  5020,  2000,  1996,  6721,  8023,  1058,  1027,
         1170,  8093,  2475,  1010,  1998,  2028,  2003,  4699,  1999,  2049,
         3517,  3643,  1041,  1031,  1058,  1033,  1012,  2043,  1042,  2615,
        14796,  1996,  9723,  4304,  1997,  1058,  1010,  2059,  2011,  6210,
          102])"
987,1,"['function', 'probability', 'joint', 'joint probability']", Expectation and joint distributions,seg_137,"however, to obtain e[v ], we do not necessarily need to determine fv from the joint probability density f of h and r! since v is a function of h and r, we can use a rule similar to the change-of-variable formula from chapter 7:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([ 101, 2174, 1010, 2000, 6855, 1041, 1031, 1058, 1033, 1010, 2057, 2079,
        2025, 9352, 2342, 2000, 5646, 1042, 2615, 2013, 1996, 4101, 9723, 4304,
        1042, 1997, 1044, 1998, 1054,  999, 2144, 1058, 2003, 1037, 3853, 1997,
        1044, 1998, 1054, 1010, 2057, 2064, 2224, 1037, 3627, 2714, 2000, 1996,
        2689, 1011, 1997, 1011, 8023, 5675, 2013, 3127, 1021, 1024,  102])"
988,1,"['independent', 'case', 'distribution']", Expectation and joint distributions,seg_137,"suppose that h has a u(25, 35) distribution and that r has a u(7.5, 12.5) distribution. in the case that h and r are also independent, we have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([ 101, 6814, 2008, 1044, 2038, 1037, 1057, 1006, 2423, 1010, 3486, 1007,
        4353, 1998, 2008, 1054, 2038, 1037, 1057, 1006, 1021, 1012, 1019, 1010,
        2260, 1012, 1019, 1007, 4353, 1012, 1999, 1996, 2553, 2008, 1044, 1998,
        1054, 2024, 2036, 2981, 1010, 2057, 2031,  102])"
989,0,[], Expectation and joint distributions,seg_137,this illustrates the following general rule.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2023, 24899,  1996,  2206,  2236,  3627,  1012,   102])"
990,1,"['function', 'discrete', 'discrete random variables', 'random', 'random variables', 'variables']", Expectation and joint distributions,seg_137,"two-dimensional change-of-variable formula. let x and y be random variables, and let g : r2 → r be a function. if x and y are discrete random variables with values a1, a2, . . . and b1, b2, . . . , respectively, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2048,  1011,  8789,  2689,  1011,  1997,  1011,  8023,  5675,
         1012,  2292,  1060,  1998,  1061,  2022,  6721, 10857,  1010,  1998,
         2292,  1043,  1024,  1054,  2475,  1585,  1054,  2022,  1037,  3853,
         1012,  2065,  1060,  1998,  1061,  2024, 16246,  6721, 10857,  2007,
         5300, 17350,  1010, 22441,  1010,  1012,  1012,  1012,  1998, 29491,
         1010,  1038,  2475,  1010,  1012,  1012,  1012,  1010,  4414,  1010,
         2059,   102])"
991,1,"['continuous', 'joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'continuous random variables', 'random', 'random variables', 'variables', 'joint']", Expectation and joint distributions,seg_137,"if x and y are continuous random variables with joint probability density function f , then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  7142,  6721, 10857,  2007,
         4101,  9723,  4304,  3853,  1042,  1010,  2059,   102])"
992,1,"['joint probability', 'joint probability distribution', 'discrete', 'table', 'probability', 'discrete random variables', 'random', 'random variables', 'expectation', 'distribution', 'variables', 'joint', 'probability distribution']", Expectation and joint distributions,seg_137,"as an example, take g(x, y) = xy for discrete random variables x and y with the joint probability distribution given in table 10.1. the expectation of xy is computed as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2004,  2019,  2742,  1010,  2202,  1043,  1006,  1060,  1010,
         1061,  1007,  1027,  1060,  2100,  2005, 16246,  6721, 10857,  1060,
         1998,  1061,  2007,  1996,  4101,  9723,  4353,  2445,  1999,  2795,
         2184,  1012,  1015,  1012,  1996, 17626,  1997,  1060,  2100,  2003,
        24806,  2004,  4076,  1024,   102])"
993,1,"['random', 'random variables', 'sum of two random variables', 'variables']", Expectation and joint distributions,seg_137,a natural question is whether this value can also be obtained from e[x ] e [y ]. we return to this question later in this chapter. first we address the expectation of the sum of two random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  1037,  3019,  3160,  2003,  3251,  2023,  3643,  2064,  2036,
         2022,  4663,  2013,  1041,  1031,  1060,  1033,  1041,  1031,  1061,
         1033,  1012,  2057,  2709,  2000,  2023,  3160,  2101,  1999,  2023,
         3127,  1012,  2034,  2057,  4769,  1996, 17626,  1997,  1996,  7680,
         1997,  2048,  6721, 10857,  1012,   102])"
994,1,"['table', 'random', 'random variables', 'distribution', 'variables', 'joint']", Expectation and joint distributions,seg_137,quick exercise 10.1 compute e[x + y ] for the random variables with the joint distribution given in table 10.1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  4248,  6912,  2184,  1012,  1015, 24134,  1041,  1031,  1060,
         1009,  1061,  1033,  2005,  1996,  6721, 10857,  2007,  1996,  4101,
         4353,  2445,  1999,  2795,  2184,  1012,  1015,  1012,   102])"
995,1,['discrete'], Expectation and joint distributions,seg_137,"for discrete x and y with values a1, a2, . . . and b1, b2, . . . , respectively, we see that",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2005, 16246,  1060,  1998,  1061,  2007,  5300, 17350,  1010,
        22441,  1010,  1012,  1012,  1012,  1998, 29491,  1010,  1038,  2475,
         1010,  1012,  1012,  1012,  1010,  4414,  1010,  2057,  2156,  2008,
          102])"
996,1,"['continuous', 'continuous random variables', 'random', 'random variables', 'variables', 'case']", Expectation and joint distributions,seg_137,a similar line of reasoning applies in case x and y are continuous random variables. the following general rule holds.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  1037,  2714,  2240,  1997, 13384, 12033,  1999,  2553,  1060,
         1998,  1061,  2024,  7142,  6721, 10857,  1012,  1996,  2206,  2236,
         3627,  4324,  1012,   102])"
997,1,"['expectations', 'random', 'random variables', 'variables']", Expectation and joint distributions,seg_137,"linearity of expectations. for all numbers r, s, and t and random variables x and y , one has",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  7399,  3012,  1997, 10908,  1012,  2005,  2035,  3616,  1054,
         1010,  1055,  1010,  1998,  1056,  1998,  6721, 10857,  1060,  1998,
         1061,  1010,  2028,  2038,   102])"
998,1,"['marginal', 'table', 'distributions', 'random', 'random variables', 'distribution', 'variables', 'joint', 'marginal distributions']", Expectation and joint distributions,seg_137,"quick exercise 10.2 determine the marginal distributions for the random variables x and y with the joint distribution given in table 10.1, and use them to compute e[x ] en e[y ]. check that e[x ]+e[y ] is equal to e[x + y ], which was computed in quick exercise 10.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  4248,  6912,  2184,  1012,  1016,  5646,  1996, 14785, 20611,
         2005,  1996,  6721, 10857,  1060,  1998,  1061,  2007,  1996,  4101,
         4353,  2445,  1999,  2795,  2184,  1012,  1015,  1010,  1998,  2224,
         2068,  2000, 24134,  1041,  1031,  1060,  1033,  4372,  1041,  1031,
         1061,  1033,  1012,  4638,  2008,  1041,  1031,  1060,  1033,  1009,
         1041,  1031,  1061,  1033,  2003,  5020,  2000,  1041,  1031,  1060,
         1009,  1061,  1033,  1010,  2029,  2001, 24806,  1999,  4248,  6912,
         2184,  1012,  1015,  1012,   102])"
999,1,"['random', 'random variables', 'variables']", Expectation and joint distributions,seg_137,"more generally, for random variables x1, . . . , xn and numbers s1, . . . , sn and t,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2062,  3227,  1010,  2005,  6721, 10857,  1060,  2487,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1998,  3616,  1055,  2487,
         1010,  1012,  1012,  1012,  1010,  1055,  2078,  1998,  1056,  1010,
          102])"
1000,1,"['random variable', 'random', 'expectation', 'distribution', 'variable']", Expectation and joint distributions,seg_137,"this rule is a powerful instrument. for example, it provides an easy way to compute the expectation of a random variable x with a bin(n, p) distribution. if we would use the definition of expectation, we have to compute",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2023,  3627,  2003,  1037,  3928,  6602,  1012,  2005,  2742,
         1010,  2009,  3640,  2019,  3733,  2126,  2000, 24134,  1996, 17626,
         1997,  1037,  6721,  8023,  1060,  2007,  1037,  8026,  1006,  1050,
         1010,  1052,  1007,  4353,  1012,  2065,  2057,  2052,  2224,  1996,
         6210,  1997, 17626,  1010,  2057,  2031,  2000, 24134,   102])"
1001,0,[], Expectation and joint distributions,seg_137,"to determine this sum is not straightforward. however, there is a simple alternative. recall the multiple-choice example from section 4.3. we represented",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2000,  5646,  2023,  7680,  2003,  2025, 19647,  1012,  2174,
         1010,  2045,  2003,  1037,  3722,  4522,  1012,  9131,  1996,  3674,
         1011,  3601,  2742,  2013,  2930,  1018,  1012,  1017,  1012,  2057,
         3421,   102])"
1002,1,"['bernoulli', 'random variable', 'random', 'random variables', 'distribution', 'variables', 'variable']", Expectation and joint distributions,seg_137,"the number of correct answers out of 10 multiple-choice questions as a sum of 10 bernoulli random variables. more generally, any random variable x with a bin(n, p) distribution can be represented as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  1996,  2193,  1997,  6149,  6998,  2041,  1997,  2184,  3674,
         1011,  3601,  3980,  2004,  1037,  7680,  1997,  2184, 16595,  7140,
         6894,  6721, 10857,  1012,  2062,  3227,  1010,  2151,  6721,  8023,
         1060,  2007,  1037,  8026,  1006,  1050,  1010,  1052,  1007,  4353,
         2064,  2022,  3421,  2004,   102])"
1003,1,"['random', 'random variables', 'variables', 'independent']", Expectation and joint distributions,seg_137,"where r1, r2, . . . , rn are independent ber(p) random variables, i.e.,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2073,  1054,  2487,  1010,  1054,  2475,  1010,  1012,  1012,
         1012,  1010, 29300,  2024,  2981,  2022,  2099,  1006,  1052,  1007,
         6721, 10857,  1010,  1045,  1012,  1041,  1012,  1010,   102])"
1004,1,['probability'], Expectation and joint distributions,seg_137,1 with probability p,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([ 101, 1015, 2007, 9723, 1052,  102])"
1005,1,['probability'], Expectation and joint distributions,seg_137,ri = {0 with probability 1 − p.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101, 15544,  1027,  1063,  1014,  2007,  9723,  1015,  1597,  1052,
         1012,   102])"
1006,1,['expectations'], Expectation and joint distributions,seg_137,"since e[ri] = 0 · (1 − p) + 1 · p = p, for every i = 1, 2, . . . , n, the linearity-of- expectations rule yields",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  2144,  1041,  1031, 15544,  1033,  1027,  1014,  1087,  1006,
         1015,  1597,  1052,  1007,  1009,  1015,  1087,  1052,  1027,  1052,
         1010,  2005,  2296,  1045,  1027,  1015,  1010,  1016,  1010,  1012,
         1012,  1012,  1010,  1050,  1010,  1996,  7399,  3012,  1011,  1997,
         1011, 10908,  3627, 16189,   102])"
1007,1,"['expectation', 'distribution']", Expectation and joint distributions,seg_137,"hence we conclude that the expectation of a bin(n, p) distribution equals np.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([17626,  1998,  4101, 20611])","tensor([  101,  6516,  2057, 16519,  2008,  1996, 17626,  1997,  1037,  8026,
         1006,  1050,  1010,  1052,  1007,  4353, 19635, 27937,  1012,   102])"
1008,1,"['random', 'random variables', 'variables']", Covariance,seg_139,in the previous section we have seen that for two random variables x and y always,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  1999,  1996,  3025,  2930,  2057,  2031,  2464,  2008,  2005,
         2048,  6721, 10857,  1060,  1998,  1061,  2467,   102])"
1009,1,"['expectation', 'variance']", Covariance,seg_139,does such a simple relation also hold for the variance of the sum var(x + y ) or for expectation of the product e[xy ]? we will investigate this in the current section.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2515,  2107,  1037,  3722,  7189,  2036,  2907,  2005,  1996,
        23284,  1997,  1996,  7680, 13075,  1006,  1060,  1009,  1061,  1007,
         2030,  2005, 17626,  1997,  1996,  4031,  1041,  1031,  1060,  2100,
         1033,  1029,  2057,  2097,  8556,  2023,  1999,  1996,  2783,  2930,
         1012,   102])"
1010,1,"['variables', 'joint']", Covariance,seg_139,for the variables x and y from the example in section 9.2 with joint probability density,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2005,  1996, 10857,  1060,  1998,  1061,  2013,  1996,  2742,
         1999,  2930,  1023,  1012,  1016,  2007,  4101,  9723,  4304,   102])"
1011,0,[], Covariance,seg_139,one can show that,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 2522, 10755, 28335])","tensor([ 101, 2028, 2064, 2265, 2008,  102])"
1012,1,['contrast'], Covariance,seg_139,"(see exercise 10.10). this shows, in contrast to the linearity-of-expectations rule, that var(x + y ) is generally not equal to var(x)+ var(y ). to determine var(x + y ), we exploit its definition:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  1006,  2156,  6912,  2184,  1012,  2184,  1007,  1012,  2023,
         3065,  1010,  1999,  5688,  2000,  1996,  7399,  3012,  1011,  1997,
         1011, 10908,  3627,  1010,  2008, 13075,  1006,  1060,  1009,  1061,
         1007,  2003,  3227,  2025,  5020,  2000, 13075,  1006,  1060,  1007,
         1009, 13075,  1006,  1061,  1007,  1012,  2000,  5646, 13075,  1006,
         1060,  1009,  1061,  1007,  1010,  2057, 18077,  2049,  6210,  1024,
          102])"
1013,1,['expectations'], Covariance,seg_139,"taking expectations on both sides, another application of the linearity-of- expectations rule gives",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2635, 10908,  2006,  2119,  3903,  1010,  2178,  4646,  1997,
         1996,  7399,  3012,  1011,  1997,  1011, 10908,  3627,  3957,   102])"
1014,1,"['variances', 'variance']", Covariance,seg_139,"that is, the variance of the sum x + y equals the sum of the variances of x and y , plus an extra term 2e[(x − e[x ])(y − e[y ])]. to some extent this term expresses the way x and y influence each other.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2008,  2003,  1010,  1996, 23284,  1997,  1996,  7680,  1060,
         1009,  1061, 19635,  1996,  7680,  1997,  1996, 23284,  2015,  1997,
         1060,  1998,  1061,  1010,  4606,  2019,  4469,  2744,  1016,  2063,
         1031,  1006,  1060,  1597,  1041,  1031,  1060,  1033,  1007,  1006,
         1061,  1597,  1041,  1031,  1061,  1033,  1007,  1033,  1012,  2000,
         2070,  6698,  2023,  2744, 16783,  1996,  2126,  1060,  1998,  1061,
         3747,  2169,  2060,  1012,   102])"
1015,1,"['random', 'random variables', 'variables', 'covariance']", Covariance,seg_139,definition. let x and y be two random variables. the covariance between x and y is defined by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  6210,  1012,  2292,  1060,  1998,  1061,  2022,  2048,  6721,
        10857,  1012,  1996,  2522, 10755, 28335,  2090,  1060,  1998,  1061,
         2003,  4225,  2011,   102])"
1016,1,"['correlated', 'realization', 'covariance', 'case']", Covariance,seg_139,"loosely speaking, if the covariance of x and y is positive, then if x has a realization larger than e[x ], it is likely that y will have a realization larger than e[y ], and the other way around. in this case we say that x and y are positively correlated . in case the covariance is negative, the opposite effect occurs; x and y are negatively correlated . in case cov(x, y ) = 0 we say that x and y are uncorrelated . an easy consequence of the linearity-of-expectations property (see exercise 10.19) is the following rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101, 11853,  4092,  1010,  2065,  1996,  2522, 10755, 28335,  1997,
         1060,  1998,  1061,  2003,  3893,  1010,  2059,  2065,  1060,  2038,
         1037, 12393,  3469,  2084,  1041,  1031,  1060,  1033,  1010,  2009,
         2003,  3497,  2008,  1061,  2097,  2031,  1037, 12393,  3469,  2084,
         1041,  1031,  1061,  1033,  1010,  1998,  1996,  2060,  2126,  2105,
         1012,  1999,  2023,  2553,  2057,  2360,  2008,  1060,  1998,  1061,
         2024, 13567, 23900,  1012,  1999,  2553,  1996,  2522, 10755, 28335,
         2003,  4997,  1010,  1996,  4500,  3466,  5158,  1025,  1060,  1998,
         1061,  2024, 19762, 23900,  1012,  1999,  2553,  2522,  2615,  1006,
         1060,  1010,  1061,  1007,  1027,  1014,  2057,  2360,  2008,  1060,
         1998,  1061,  2024,  4895, 27108, 16570,  4383,  1012,  2019,  3733,
         9509,  1997,  1996,  7399,  3012,  1011,  1997,  1011, 10908,  3200,
         1006,  2156,  6912,  2184,  1012,  2539,  1007,  2003,  1996,  2206,
         3627,  1012,   102])"
1017,1,"['random', 'random variables', 'variables', 'covariance']", Covariance,seg_139,"an alternative expression for the covariance. let x and y be two random variables, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2019,  4522,  3670,  2005,  1996,  2522, 10755, 28335,  1012,
         2292,  1060,  1998,  1061,  2022,  2048,  6721, 10857,  1010,  2059,
          102])"
1018,1,['correlated'], Covariance,seg_139,"for x and y from the example in section 9.2, we have e[x ] = 109/50, e[y ] = 157/100, and e[xy ] = 171/50 (see exercise 10.10). thus we see that x and y are negatively correlated:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2005,  1060,  1998,  1061,  2013,  1996,  2742,  1999,  2930,
         1023,  1012,  1016,  1010,  2057,  2031,  1041,  1031,  1060,  1033,
         1027, 11518,  1013,  2753,  1010,  1041,  1031,  1061,  1033,  1027,
        17403,  1013,  2531,  1010,  1998,  1041,  1031,  1060,  2100,  1033,
         1027, 18225,  1013,  2753,  1006,  2156,  6912,  2184,  1012,  2184,
         1007,  1012,  2947,  2057,  2156,  2008,  1060,  1998,  1061,  2024,
        19762, 23900,  1024,   102])"
1019,1,"['contrast', 'expectation']", Covariance,seg_139,"moreover, this also illustrates that, in contrast to the expectation of the sum, for the expectation of the product, in general e[xy ] is not equal to e[x ] e [y ].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  9308,  1010,  2023,  2036, 24899,  2008,  1010,  1999,  5688,
         2000,  1996, 17626,  1997,  1996,  7680,  1010,  2005,  1996, 17626,
         1997,  1996,  4031,  1010,  1999,  2236,  1041,  1031,  1060,  2100,
         1033,  2003,  2025,  5020,  2000,  1041,  1031,  1060,  1033,  1041,
         1031,  1061,  1033,  1012,   102])"
1020,1,"['discrete', 'random', 'random variables', 'independent', 'independent random variables', 'variables', 'case']", Covariance,seg_139,"now let x and y be two independent random variables. one expects that x and y are uncorrelated: they have nothing to do with one another! this is indeed the case, for instance, if x and y are discrete; one finds that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2085,  2292,  1060,  1998,  1061,  2022,  2048,  2981,  6721,
        10857,  1012,  2028, 24273,  2008,  1060,  1998,  1061,  2024,  4895,
        27108, 16570,  4383,  1024,  2027,  2031,  2498,  2000,  2079,  2007,
         2028,  2178,   999,  2023,  2003,  5262,  1996,  2553,  1010,  2005,
         6013,  1010,  2065,  1060,  1998,  1061,  2024, 16246,  1025,  2028,
         4858,  2008,   102])"
1021,1,"['continuous', 'observation', 'continuous random variables', 'random', 'random variables', 'variables', 'covariance', 'case']", Covariance,seg_139,a similar reasoning holds in case x and y are continuous random variables. the alternative expression for the covariance leads to the following important observation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  1037,  2714, 13384,  4324,  1999,  2553,  1060,  1998,  1061,
         2024,  7142,  6721, 10857,  1012,  1996,  4522,  3670,  2005,  1996,
         2522, 10755, 28335,  5260,  2000,  1996,  2206,  2590,  8089,  1012,
          102])"
1022,1,"['random', 'random variables', 'variables', 'independent']", Covariance,seg_139,"independent versus uncorrelated. if two random variables x and y are independent, then x and y are uncorrelated.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2981,  6431,  4895, 27108, 16570,  4383,  1012,  2065,  2048,
         6721, 10857,  1060,  1998,  1061,  2024,  2981,  1010,  2059,  1060,
         1998,  1061,  2024,  4895, 27108, 16570,  4383,  1012,   102])"
1023,1,['independent'], Covariance,seg_139,"note that the reverse is not necessarily true. if x and y are uncorrelated, they need not be independent. this is illustrated in the next quick exercise.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  3602,  2008,  1996,  7901,  2003,  2025,  9352,  2995,  1012,
         2065,  1060,  1998,  1061,  2024,  4895, 27108, 16570,  4383,  1010,
         2027,  2342,  2025,  2022,  2981,  1012,  2023,  2003,  7203,  1999,
         1996,  2279,  4248,  6912,  1012,   102])"
1024,1,"['table', 'random', 'dependent', 'random variables', 'distribution', 'variables', 'joint']", Covariance,seg_139,"quick exercise 10.3 consider the random variables x and y with the joint distribution given in table 10.1. check that x and y are dependent, but that also e[xy ] = e[x ] e [y ].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  4248,  6912,  2184,  1012,  1017,  5136,  1996,  6721, 10857,
         1060,  1998,  1061,  2007,  1996,  4101,  4353,  2445,  1999,  2795,
         2184,  1012,  1015,  1012,  4638,  2008,  1060,  1998,  1061,  2024,
         7790,  1010,  2021,  2008,  2036,  1041,  1031,  1060,  2100,  1033,
         1027,  1041,  1031,  1060,  1033,  1041,  1031,  1061,  1033,  1012,
          102])"
1025,1,"['variance', 'random', 'random variables', 'sum of two random variables', 'variables']", Covariance,seg_139,from the preceding we also deduce the following rule on the variance of the sum of two random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 1., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2013,  1996, 11003,  2057,  2036,  2139,  8566,  3401,  1996,
         2206,  3627,  2006,  1996, 23284,  1997,  1996,  7680,  1997,  2048,
         6721, 10857,  1012,   102])"
1026,1,"['random', 'random variables', 'variables']", Covariance,seg_139,variance of the sum. let x and y be two random variables. then always,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101, 23284,  1997,  1996,  7680,  1012,  2292,  1060,  1998,  1061,
         2022,  2048,  6721, 10857,  1012,  2059,  2467,   102])"
1027,0,[], Covariance,seg_139,"if x and y are uncorrelated,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2522, 10755, 28335])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  4895, 27108, 16570,  4383,
         1010,   102])"
1028,1,"['uncorrelated random variables', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Covariance,seg_139,"hence, we always have that e[x + y ] = e[x ]+e[y ], whereas var(x + y ) = var(x)+var(y ) only holds for uncorrelated random variables (and hence for independent random variables!).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  6516,  1010,  2057,  2467,  2031,  2008,  1041,  1031,  1060,
         1009,  1061,  1033,  1027,  1041,  1031,  1060,  1033,  1009,  1041,
         1031,  1061,  1033,  1010,  6168, 13075,  1006,  1060,  1009,  1061,
         1007,  1027, 13075,  1006,  1060,  1007,  1009, 13075,  1006,  1061,
         1007,  2069,  4324,  2005,  4895, 27108, 16570,  4383,  6721, 10857,
         1006,  1998,  6516,  2005,  2981,  6721, 10857,   999,  1007,  1012,
          102])"
1029,1,"['variance', 'uncorrelated random variables', 'random', 'random variables', 'variables']", Covariance,seg_139,"as with the linearity-of-expectations rule, the rule for the variance of the sum of uncorrelated random variables holds more generally. for uncorrelated random variables x1, x2, . . . , xn, we have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2004,  2007,  1996,  7399,  3012,  1011,  1997,  1011, 10908,
         3627,  1010,  1996,  3627,  2005,  1996, 23284,  1997,  1996,  7680,
         1997,  4895, 27108, 16570,  4383,  6721, 10857,  4324,  2062,  3227,
         1012,  2005,  4895, 27108, 16570,  4383,  6721, 10857,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1010,  2057,  2031,   102])"
1030,1,"['variance', 'random variable', 'random', 'distribution', 'variable']", Covariance,seg_139,"this rule provides an easy way to compute the variance of a random variable with a bin(n, p) distribution. recall the representation for a bin(n, p) random variable x :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2023,  3627,  3640,  2019,  3733,  2126,  2000, 24134,  1996,
        23284,  1997,  1037,  6721,  8023,  2007,  1037,  8026,  1006,  1050,
         1010,  1052,  1007,  4353,  1012,  9131,  1996,  6630,  2005,  1037,
         8026,  1006,  1050,  1010,  1052,  1007,  6721,  8023,  1060,  1024,
          102])"
1031,1,['variance'], Covariance,seg_139,each ri has variance,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2169, 15544,  2038, 23284,   102])"
1032,1,"['variance', 'independence']", Covariance,seg_139,"using the independence of the ri, the rule for the variance of the sum yields",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335])","tensor([  101,  2478,  1996,  4336,  1997,  1996, 15544,  1010,  1996,  3627,
         2005,  1996, 23284,  1997,  1996,  7680, 16189,   102])"
1033,1,"['random variable', 'transformed', 'random', 'random variables', 'variables', 'covariance', 'variable']", The correlation coefficient,seg_141,"in the previous section we saw that the covariance between random variables gives an indication of how they influence one another. a disadvantage of the covariance is the fact that it depends on the units in which the random variables are represented. for instance, suppose that the length in inches and weight in kilograms of dutch citizens are modeled by random variables l and w . someone prefers to represent the length in centimeters. since 1 inch ≡ 2.53 cm, one is dealing with a transformed random variable 2.53l. the covariance between 2.53l and w is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  1999,  1996,  3025,  2930,  2057,  2387,  2008,  1996,  2522,
        10755, 28335,  2090,  6721, 10857,  3957,  2019, 12407,  1997,  2129,
         2027,  3747,  2028,  2178,  1012,  1037, 20502,  1997,  1996,  2522,
        10755, 28335,  2003,  1996,  2755,  2008,  2009,  9041,  2006,  1996,
         3197,  1999,  2029,  1996,  6721, 10857,  2024,  3421,  1012,  2005,
         6013,  1010,  6814,  2008,  1996,  3091,  1999,  5282,  1998,  3635,
         1999, 18857,  1997,  3803,  4480,  2024, 14440,  2011,  6721, 10857,
         1048,  1998,  1059,  1012,  2619, 19233,  2000,  5050,  1996,  3091,
         1999, 18119,  1012,  2144,  1015,  4960,  1607,  1016,  1012,  5187,
         4642,  1010,  2028,  2003,  7149,  2007,  1037,  8590,  6721,  8023,
         1016,  1012,  5187,  2140,  1012,  1996,  2522, 10755, 28335,  2090,
         1016,  1012,  5187,  2140,  1998,  1059,  2003,   102])"
1034,1,"['dependence', 'factor', 'covariance']", The correlation coefficient,seg_141,"that is, the covariance increases with a factor 2.53, which is somewhat disturbing since changing from inches to centimeters does not essentially alter the dependence between length and weight. this illustrates that the covariance changes under a change of units. the following rule provides the exact relationship.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  2008,  2003,  1010,  1996,  2522, 10755, 28335,  7457,  2007,
         1037,  5387,  1016,  1012,  5187,  1010,  2029,  2003,  5399, 14888,
         2144,  5278,  2013,  5282,  2000, 18119,  2515,  2025,  7687, 11477,
         1996, 18642,  2090,  3091,  1998,  3635,  1012,  2023, 24899,  2008,
         1996,  2522, 10755, 28335,  3431,  2104,  1037,  2689,  1997,  3197,
         1012,  1996,  2206,  3627,  3640,  1996,  6635,  3276,  1012,   102])"
1035,1,"['random', 'random variables', 'variables']", The correlation coefficient,seg_141,covariance under change of units. let x and y be two random variables. then,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  2522, 10755, 28335,  2104,  2689,  1997,  3197,  1012,  2292,
         1060,  1998,  1061,  2022,  2048,  6721, 10857,  1012,  2059,   102])"
1036,0,[], The correlation coefficient,seg_141,see exercise 10.14 for a derivation of this rule.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16902, 19064])","tensor([  101,  2156,  6912,  2184,  1012,  2403,  2005,  1037, 29280,  1997,
         2023,  3627,  1012,   102])"
1037,1,"['dependence', 'coefficient', 'correlation coefficient', 'correlation', 'standardized', 'covariance']", The correlation coefficient,seg_141,"the preceding discussion indicates that the covariance cov(x, y ) may not always be suitable to express the dependence between x and y . for this reason there is a standardized version of the covariance called the correlation coefficient of x and y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  1996, 11003,  6594,  7127,  2008,  1996,  2522, 10755, 28335,
         2522,  2615,  1006,  1060,  1010,  1061,  1007,  2089,  2025,  2467,
         2022,  7218,  2000,  4671,  1996, 18642,  2090,  1060,  1998,  1061,
         1012,  2005,  2023,  3114,  2045,  2003,  1037, 16367,  2544,  1997,
         1996,  2522, 10755, 28335,  2170,  1996, 16902, 19064,  1997,  1060,
         1998,  1061,  1012,   102])"
1038,1,"['coefficient', 'correlation coefficient', 'random', 'correlation', 'random variables', 'variables']", The correlation coefficient,seg_141,"definition. let x and y be two random variables. the correlation coefficient ρ(x, y ) is defined to be 0 if var(x) = 0 or var(y ) = 0,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  6210,  1012,  2292,  1060,  1998,  1061,  2022,  2048,  6721,
        10857,  1012,  1996, 16902, 19064,  1171,  1006,  1060,  1010,  1061,
         1007,  2003,  4225,  2000,  2022,  1014,  2065, 13075,  1006,  1060,
         1007,  1027,  1014,  2030, 13075,  1006,  1061,  1007,  1027,  1014,
         1010,   102])"
1039,0,[], The correlation coefficient,seg_141,"note that ρ(x, y ) remains unaffected by a change of units, and therefore it is dimensionless. for instance, if x and y are measured in kilometers, then",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16902, 19064])","tensor([  101,  3602,  2008,  1171,  1006,  1060,  1010,  1061,  1007,  3464,
        24720,  2011,  1037,  2689,  1997,  3197,  1010,  1998,  3568,  2009,
         2003,  9812,  3238,  1012,  2005,  6013,  1010,  2065,  1060,  1998,
         1061,  2024,  7594,  1999,  7338,  1010,  2059,   102])"
1040,1,"['coefficient', 'correlation coefficient', 'random', 'correlation', 'random variables', 'variables']", The correlation coefficient,seg_141,"the previous quick exercise illustrates the following linearity property for the correlation coefficient. for numbers r, s, t, and u fixed, r, t = 0, and random variables x and y :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  1996,  3025,  4248,  6912, 24899,  1996,  2206,  7399,  3012,
         3200,  2005,  1996, 16902, 19064,  1012,  2005,  3616,  1054,  1010,
         1055,  1010,  1056,  1010,  1998,  1057,  4964,  1010,  1054,  1010,
         1056,  1027,  1014,  1010,  1998,  6721, 10857,  1060,  1998,  1061,
         1024,   102])"
1041,1,"['correlation', 'coefficient', 'correlation coefficient']", The correlation coefficient,seg_141,"thus we see that the size of the correlation coefficient is unaffected by a change of units, but note the possibility of a change of sign.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  2947,  2057,  2156,  2008,  1996,  2946,  1997,  1996, 16902,
        19064,  2003, 24720,  2011,  1037,  2689,  1997,  3197,  1010,  2021,
         3602,  1996,  6061,  1997,  1037,  2689,  1997,  3696,  1012,   102])"
1042,1,"['random', 'random variables', 'variables', 'case']", The correlation coefficient,seg_141,"two random variables x and y are “most correlated” if x = y or if x = −y . as a matter of fact, in the former case ρ(x, y ) = 1, while in the latter case ρ(x, y ) = −1. in general—for nonconstant random variables x and y —the following property holds:",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996, 16902, 19064])","tensor([  101,  2048,  6721, 10857,  1060,  1998,  1061,  2024,  1523,  2087,
        23900,  1524,  2065,  1060,  1027,  1061,  2030,  2065,  1060,  1027,
         1597,  2100,  1012,  2004,  1037,  3043,  1997,  2755,  1010,  1999,
         1996,  2280,  2553,  1171,  1006,  1060,  1010,  1061,  1007,  1027,
         1015,  1010,  2096,  1999,  1996,  3732,  2553,  1171,  1006,  1060,
         1010,  1061,  1007,  1027,  1597,  2487,  1012,  1999,  2236,  1517,
         2005,  2512,  8663, 12693,  2102,  6721, 10857,  1060,  1998,  1061,
         1517,  1996,  2206,  3200,  4324,  1024,   102])"
1043,0,[], The correlation coefficient,seg_141,"for a formal derivation of this property, see the next remark.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16902, 19064])","tensor([  101,  2005,  1037,  5337, 29280,  1997,  2023,  3200,  1010,  2156,
         1996,  2279, 17674,  1012,   102])"
1044,1,['expectation'], Solutions to the quick exercises,seg_143,10.1 the expectation of x + y is computed as follows:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2184,  1012,  1015,  1996, 17626,  1997,  1060,  1009,  1061,
         2003, 24806,  2004,  4076,  1024,   102])"
1045,1,"['marginal', 'table', 'distributions', 'marginal distributions']", Solutions to the quick exercises,seg_143,10.2 first complete table 10.1 with the marginal distributions:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2184,  1012,  1016,  2034,  3143,  2795,  2184,  1012,  1015,
         2007,  1996, 14785, 20611,  1024,   102])"
1046,1,"['dependent', 'covariance', 'table']", Solutions to the quick exercises,seg_143,"10.3 from table 10.1, as completed in quick exercise 10.2, we see that x and y are dependent. for instance, p(x = 0, y = 0) = p(x = 0)p(y = 0). from quick exercise 10.2 we know that e[x ] = e[y ] = 1. because we already computed e[xy ] = 1, it follows that e[xy ] = e[x ] e [y ]. according to the alternative expression for the covariance this means that cov(x, y ) = 0, i.e., x and y are uncorrelated.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2184,  1012,  1017,  2013,  2795,  2184,  1012,  1015,  1010,
         2004,  2949,  1999,  4248,  6912,  2184,  1012,  1016,  1010,  2057,
         2156,  2008,  1060,  1998,  1061,  2024,  7790,  1012,  2005,  6013,
         1010,  1052,  1006,  1060,  1027,  1014,  1010,  1061,  1027,  1014,
         1007,  1027,  1052,  1006,  1060,  1027,  1014,  1007,  1052,  1006,
         1061,  1027,  1014,  1007,  1012,  2013,  4248,  6912,  2184,  1012,
         1016,  2057,  2113,  2008,  1041,  1031,  1060,  1033,  1027,  1041,
         1031,  1061,  1033,  1027,  1015,  1012,  2138,  2057,  2525, 24806,
         1041,  1031,  1060,  2100,  1033,  1027,  1015,  1010,  2009,  4076,
         2008,  1041,  1031,  1060,  2100,  1033,  1027,  1041,  1031,  1060,
         1033,  1041,  1031,  1061,  1033,  1012,  2429,  2000,  1996,  4522,
         3670,  2005,  1996,  2522, 10755, 28335,  2023,  2965,  2008,  2522,
         2615,  1006,  1060,  1010,  1061,  1007,  1027,  1014,  1010,  1045,
         1012,  1041,  1012,  1010,  1060,  1998,  1061,  2024,  4895, 27108,
        16570,  4383,  1012,   102])"
1047,0,[], Solutions to the quick exercises,seg_143,"10.4 we already computed cov(x, y ) = −13/5000 in section 10.2. hence, by the linearity-of-covariance rule cov(−2x + 7, 5y − 3) = (−2)·5·(−13/5000) = 13/500.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2184,  1012,  1018,  2057,  2525, 24806,  2522,  2615,  1006,
         1060,  1010,  1061,  1007,  1027,  1597, 17134,  1013, 13509,  1999,
         2930,  2184,  1012,  1016,  1012,  6516,  1010,  2011,  1996,  7399,
         3012,  1011,  1997,  1011,  2522, 10755, 28335,  3627,  2522,  2615,
         1006,  1597,  2475,  2595,  1009,  1021,  1010,  1019,  2100,  1597,
         1017,  1007,  1027,  1006,  1597,  2475,  1007,  1087,  1019,  1087,
         1006,  1597, 17134,  1013, 13509,  1007,  1027,  2410,  1013,  3156,
         1012,   102])"
1048,1,"['coefficient', 'variances', 'correlation coefficient', 'correlation']", Solutions to the quick exercises,seg_143,"10.5 from quick exercise 10.4 we have cov(−2x + 7, 5y − 3) = 13/500. since var(x) = 989/2500 and var(y ) = 791/10 000, by definition of the correlation coefficient and the rule for variances,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2184,  1012,  1019,  2013,  4248,  6912,  2184,  1012,  1018,
         2057,  2031,  2522,  2615,  1006,  1597,  2475,  2595,  1009,  1021,
         1010,  1019,  2100,  1597,  1017,  1007,  1027,  2410,  1013,  3156,
         1012,  2144, 13075,  1006,  1060,  1007,  1027,  5818,  2683,  1013,
        25108,  1998, 13075,  1006,  1061,  1007,  1027,  6535,  2487,  1013,
         2184,  2199,  1010,  2011,  6210,  1997,  1996, 16902, 19064,  1998,
         1996,  3627,  2005, 23284,  2015,  1010,   102])"
1049,1,"['joint probability', 'joint probability distribution', 'expectations', 'probability', 'variances', 'distribution', 'joint', 'data', 'probability distribution']", Exercises,seg_145,"10.1 consider the joint probability distribution of x and y from exercise 9.7, obtained from data on hair color and eye color, for which we already computed the expectations and variances of x and y , as well as e[xy ].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1015,  5136,  1996,  4101,  9723,  4353,  1997,
         1060,  1998,  1061,  2013,  6912,  1023,  1012,  1021,  1010,  4663,
         2013,  2951,  2006,  2606,  3609,  1998,  3239,  3609,  1010,  2005,
         2029,  2057,  2525, 24806,  1996, 10908,  1998, 23284,  2015,  1997,
         1060,  1998,  1061,  1010,  2004,  2092,  2004,  1041,  1031,  1060,
         2100,  1033,  1012,   102])"
1050,1,['correlated'], Exercises,seg_145,"a. compute cov(x, y ). are x and y positively correlated, negative corre-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  2522,  2615,  1006,  1060,  1010,  1061,
         1007,  1012,  2024,  1060,  1998,  1061, 13567, 23900,  1010,  4997,
         2522, 14343,  1011,   102])"
1051,0,[], Exercises,seg_145,"lated, or uncorrelated?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2397,  2094,  1010,  2030,  4895, 27108, 16570,  4383,  1029,
          102])"
1052,1,"['correlation', 'coefficient', 'correlation coefficient']", Exercises,seg_145,b. compute the correlation coefficient between x and y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996, 16902, 19064,  2090,  1060,  1998,
         1061,  1012,   102])"
1053,1,"['discrete', 'discrete random variables', 'random', 'random variables', 'variables', 'joint']", Exercises,seg_145,10.2 consider the two discrete random variables x and y with joint distribution derived in exercise 9.2:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1016,  5136,  1996,  2048, 16246,  6721, 10857,
         1060,  1998,  1061,  2007,  4101,  4353,  5173,  1999,  6912,  1023,
         1012,  1016,  1024,   102])"
1054,1,['dependent'], Exercises,seg_145,b. note that x and y are dependent. show that x and y are uncorrelated.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  3602,  2008,  1060,  1998,  1061,  2024,  7790,
         1012,  2265,  2008,  1060,  1998,  1061,  2024,  4895, 27108, 16570,
         4383,  1012,   102])"
1055,1,"['joint probability', 'joint probability distribution', 'probability', 'random', 'dependent', 'random variables', 'distribution', 'variables', 'joint', 'probability distribution']", Exercises,seg_145,10.3 let u and v be the two random variables from exercise 9.6. we have seen that u and v are dependent with joint probability distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1017,  2292,  1057,  1998,  1058,  2022,  1996,
         2048,  6721, 10857,  2013,  6912,  1023,  1012,  1020,  1012,  2057,
         2031,  2464,  2008,  1057,  1998,  1058,  2024,  7790,  2007,  4101,
         9723,  4353,   102])"
1056,1,"['covariance', 'correlation', 'coefficient', 'correlation coefficient']", Exercises,seg_145,"determine the covariance cov(u, v ) and the correlation coefficient ρ(u, v ).",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  5646,  1996,  2522, 10755, 28335,  2522,  2615,  1006,  1057,
         1010,  1058,  1007,  1998,  1996, 16902, 19064,  1171,  1006,  1057,
         1010,  1058,  1007,  1012,   102])"
1057,1,"['joint probability', 'joint probability distribution', 'probability', 'random', 'distribution', 'joint', 'discrete', 'probability distribution']", Exercises,seg_145,"10.4 consider the joint probability distribution of the discrete random variables x and y from the melencolia exercise 9.1. compute cov(x, y ).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1018,  5136,  1996,  4101,  9723,  4353,  1997,
         1996, 16246,  6721, 10857,  1060,  1998,  1061,  2013,  1996, 11463,
         2368, 25778,  2401,  6912,  1023,  1012,  1015,  1012, 24134,  2522,
         2615,  1006,  1060,  1010,  1061,  1007,  1012,   102])"
1058,1,"['discrete', 'marginal', 'discrete random variables', 'distributions', 'random', 'random variables', 'variables', 'joint', 'marginal distributions']", Exercises,seg_145,"10.5 suppose x and y are discrete random variables taking values 0,1, and 2. the following is given about the joint and marginal distributions:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1019,  6814,  1060,  1998,  1061,  2024, 16246,
         6721, 10857,  2635,  5300,  1014,  1010,  1015,  1010,  1998,  1016,
         1012,  1996,  2206,  2003,  2445,  2055,  1996,  4101,  1998, 14785,
        20611,  1024,   102])"
1059,1,['table'], Exercises,seg_145,a. complete the table.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 3143, 1996, 2795, 1012,  102])"
1060,1,"['covariance', 'expectation']", Exercises,seg_145,b. compute the expectation of x and of y and the covariance between x,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996, 17626,  1997,  1060,  1998,  1997,
         1061,  1998,  1996,  2522, 10755, 28335,  2090,  1060,   102])"
1061,1,['independent'], Exercises,seg_145,c. are x and y independent?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2024, 1060, 1998, 1061, 2981, 1029,  102])"
1062,1,"['discrete', 'marginal', 'discrete random variables', 'distributions', 'random', 'random variables', 'variables', 'joint', 'marginal distributions']", Exercises,seg_145,"10.6 suppose x and y are discrete random variables taking values c−1, c, and c + 1. the following is given about the joint and marginal distributions:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1020,  6814,  1060,  1998,  1061,  2024, 16246,
         6721, 10857,  2635,  5300,  1039, 27944,  1010,  1039,  1010,  1998,
         1039,  1009,  1015,  1012,  1996,  2206,  2003,  2445,  2055,  1996,
         4101,  1998, 14785, 20611,  1024,   102])"
1063,1,"['covariance', 'expectation']", Exercises,seg_145,a. take c = 0 and compute the expectation of x and of y and the covariance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2202,  1039,  1027,  1014,  1998, 24134,  1996,
        17626,  1997,  1060,  1998,  1997,  1061,  1998,  1996,  2522, 10755,
        28335,   102])"
1064,0,[], Exercises,seg_145,between x and y .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2090, 1060, 1998, 1061, 1012,  102])"
1065,0,[], Exercises,seg_145,"b. show that x and y are uncorrelated, no matter what the value of c is.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  2265,  2008,  1060,  1998,  1061,  2024,  4895,
        27108, 16570,  4383,  1010,  2053,  3043,  2054,  1996,  3643,  1997,
         1039,  2003,  1012,   102])"
1066,1,['covariance'], Exercises,seg_145,"hint: one could compute cov(x, y ), but there is a short solution using the rule on the covariance under change of units (see page 141) together with part a.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9374,  1024,  2028,  2071, 24134,  2522,  2615,  1006,  1060,
         1010,  1061,  1007,  1010,  2021,  2045,  2003,  1037,  2460,  5576,
         2478,  1996,  3627,  2006,  1996,  2522, 10755, 28335,  2104,  2689,
         1997,  3197,  1006,  2156,  3931, 15471,  1007,  2362,  2007,  2112,
         1037,  1012,   102])"
1067,1,['independent'], Exercises,seg_145,c. are x and y independent?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2024, 1060, 1998, 1061, 2981, 1029,  102])"
1068,1,"['joint', 'distribution']", Exercises,seg_145,10.7 consider the joint distribution of quick exercise 9.2 and take ε fixed between −1/4 and 1/4:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2184, 1012, 1021, 5136, 1996, 4101, 4353, 1997, 4248, 6912, 1023,
        1012, 1016, 1998, 2202, 1159, 4964, 2090, 1597, 2487, 1013, 1018, 1998,
        1015, 1013, 1018, 1024,  102])"
1069,1,"['random', 'random variables', 'variables']", Exercises,seg_145,10.8 let x and y be random variables such that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1022,  2292,  1060,  1998,  1061,  2022,  6721,
        10857,  2107,  2008,   102])"
1070,1,['expectation'], Exercises,seg_145,b. determine the expectation of −2x2 + y .,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996, 17626,  1997,  1597,  2475,  2595,
         2475,  1009,  1061,  1012,   102])"
1071,1,"['probability', 'test']", Exercises,seg_145,10.9 suppose the blood of 1000 persons has to be tested to see which ones are infected by a (rare) disease. suppose that the probability that the test,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  1023,  6814,  1996,  2668,  1997,  6694,  5381,
         2038,  2000,  2022,  7718,  2000,  2156,  2029,  3924,  2024, 10372,
         2011,  1037,  1006,  4678,  1007,  4295,  1012,  6814,  2008,  1996,
         9723,  2008,  1996,  3231,   102])"
1072,1,"['sample', 'results', 'tests', 'test']", Exercises,seg_145,"is positive is p = 0.001. the obvious way to proceed is to test each person, which results in a total of 1000 tests. an alternative procedure is the following. distribute the blood of the 1000 persons over 25 groups of size 40, and mix half of the blood of each of the 40 persons with that of the others in each group. now test the aggregated blood sample of each group: when the test is negative no one in that group has the disease; when the test is positive, at least one person in the group has the disease, and one will test the other half of the blood of all 40 persons of that group separately. in total, that gives 41 tests for that group. let xi be the total number of tests one has to perform for the ith group using this alternative procedure.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  3893,  2003,  1052,  1027,  1014,  1012, 25604,  1012,
         1996,  5793,  2126,  2000, 10838,  2003,  2000,  3231,  2169,  2711,
         1010,  2029,  3463,  1999,  1037,  2561,  1997,  6694,  5852,  1012,
         2019,  4522,  7709,  2003,  1996,  2206,  1012, 16062,  1996,  2668,
         1997,  1996,  6694,  5381,  2058,  2423,  2967,  1997,  2946,  2871,
         1010,  1998,  4666,  2431,  1997,  1996,  2668,  1997,  2169,  1997,
         1996,  2871,  5381,  2007,  2008,  1997,  1996,  2500,  1999,  2169,
         2177,  1012,  2085,  3231,  1996,  9572,  2094,  2668,  7099,  1997,
         2169,  2177,  1024,  2043,  1996,  3231,  2003,  4997,  2053,  2028,
         1999,  2008,  2177,  2038,  1996,  4295,  1025,  2043,  1996,  3231,
         2003,  3893,  1010,  2012,  2560,  2028,  2711,  1999,  1996,  2177,
         2038,  1996,  4295,  1010,  1998,  2028,  2097,  3231,  1996,  2060,
         2431,  1997,  1996,  2668,  1997,  2035,  2871,  5381,  1997,  2008,
         2177, 10329,  1012,  1999,  2561,  1010,  2008,  3957,  4601,  5852,
         2005,  2008,  2177,  1012,  2292,  8418,  2022,  1996,  2561,  2193,
         1997,  5852,  2028,  2038,  2000,  4685,  2005,  1996,  2009,  2232,
         2177,  2478,  2023,  4522,  7709,  1012,   102])"
1073,1,"['probability', 'probability distribution', 'distribution']", Exercises,seg_145,"a. describe the probability distribution of xi, i.e., list the possible values it",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 6235, 1996, 9723, 4353, 1997, 8418, 1010, 1045, 1012,
        1041, 1012, 1010, 2862, 1996, 2825, 5300, 2009,  102])"
1074,1,['probabilities'], Exercises,seg_145,takes on and the corresponding probabilities.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  3138,  2006,  1998,  1996,  7978,  4013,  3676, 14680,  1012,
          102])"
1075,1,['tests'], Exercises,seg_145,b. what is the expected number of tests for the ith group? what is the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2054, 2003, 1996, 3517, 2193, 1997, 5852, 2005, 1996,
        2009, 2232, 2177, 1029, 2054, 2003, 1996,  102])"
1076,1,['tests'], Exercises,seg_145,expected total number of tests? what do you think of this alternative procedure for blood testing?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 3517, 2561, 2193, 1997, 5852, 1029, 2054, 2079, 2017, 2228, 1997,
        2023, 4522, 7709, 2005, 2668, 5604, 1029,  102])"
1077,1,"['probability', 'joint', 'variables', 'joint probability']", Exercises,seg_145,10.10 consider the variables x and y from the example in section 9.2 with joint probability density,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2184,  5136,  1996, 10857,  1060,  1998,  1061,
         2013,  1996,  2742,  1999,  2930,  1023,  1012,  1016,  2007,  4101,
         9723,  4304,   102])"
1078,1,"['probability', 'densities', 'marginal probability', 'marginal']", Exercises,seg_145,and marginal probability densities,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1998, 14785,  9723,  7939, 24279,   102])"
1079,0,[], Exercises,seg_145,10.11 recall the relation between degrees celsius and degrees fahrenheit,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2184,  1012,  2340,  9131,  1996,  7189,  2090,  5445,  8292,
         4877,  4173,  1998,  5445,  6904, 28362, 25311, 20175,   102])"
1080,0,[], Exercises,seg_145,9 degrees fahrenheit = · degrees celsius + 32. 5,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1023,  5445,  6904, 28362, 25311, 20175,  1027,  1087,  5445,
         8292,  4877,  4173,  1009,  3590,  1012,  1019,   102])"
1081,1,['average'], Exercises,seg_145,"let x and y be the average daily temperatures in degrees celsius in amsterdam and antwerp. suppose that cov(x, y ) = 3 and ρ(x, y ) = 0.8. let t and s be the same temperatures in degrees fahrenheit. compute cov(t, s) and ρ(t, s).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2292,  1060,  1998,  1061,  2022,  1996,  2779,  3679,  7715,
         1999,  5445,  8292,  4877,  4173,  1999,  7598,  1998, 14003,  1012,
         6814,  2008,  2522,  2615,  1006,  1060,  1010,  1061,  1007,  1027,
         1017,  1998,  1171,  1006,  1060,  1010,  1061,  1007,  1027,  1014,
         1012,  1022,  1012,  2292,  1056,  1998,  1055,  2022,  1996,  2168,
         7715,  1999,  5445,  6904, 28362, 25311, 20175,  1012, 24134,  2522,
         2615,  1006,  1056,  1010,  1055,  1007,  1998,  1171,  1006,  1056,
         1010,  1055,  1007,  1012,   102])"
1082,1,"['random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Exercises,seg_145,"10.12 consider the independent random variables h and r from the vase example, with a u(25, 35) and a u(7.5, 12.5) distribution. compute e[h ] and e[r2] and check that e[v ] = πe[h ] e[r2].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2260,  5136,  1996,  2981,  6721, 10857,  1044,
         1998,  1054,  2013,  1996, 18781,  2742,  1010,  2007,  1037,  1057,
         1006,  2423,  1010,  3486,  1007,  1998,  1037,  1057,  1006,  1021,
         1012,  1019,  1010,  2260,  1012,  1019,  1007,  4353,  1012, 24134,
         1041,  1031,  1044,  1033,  1998,  1041,  1031,  1054,  2475,  1033,
         1998,  4638,  2008,  1041,  1031,  1058,  1033,  1027,  1170,  2063,
         1031,  1044,  1033,  1041,  1031,  1054,  2475,  1033,  1012,   102])"
1083,0,[], Exercises,seg_145,"10.13 let x and y be as in the triangle example in exercise 9.15. recall from exercise 9.16 that x and y represent the minimum and maximum coordinate of a point that is drawn from the unit square: x = min{u, v } and y = max{u, v }.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2184,  1012,  2410,  2292,  1060,  1998,  1061,  2022,  2004,
         1999,  1996,  9546,  2742,  1999,  6912,  1023,  1012,  2321,  1012,
         9131,  2013,  6912,  1023,  1012,  2385,  2008,  1060,  1998,  1061,
         5050,  1996,  6263,  1998,  4555, 13530,  1997,  1037,  2391,  2008,
         2003,  4567,  2013,  1996,  3131,  2675,  1024,  1060,  1027,  8117,
         1063,  1057,  1010,  1058,  1065,  1998,  1061,  1027,  4098,  1063,
         1057,  1010,  1058,  1065,  1012,   102])"
1084,0,[], Exercises,seg_145,hint: you might consult exercise 8.15.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  9374,  1024,  2017,  2453, 23363,  6912,  1022,  1012,  2321,
         1012,   102])"
1085,1,['independent'], Exercises,seg_145,"b. check that var(x + y ) = 1/6, by using that u and v are independent",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  4638,  2008, 13075,  1006,  1060,  1009,  1061,
         1007,  1027,  1015,  1013,  1020,  1010,  2011,  2478,  2008,  1057,
         1998,  1058,  2024,  2981,   102])"
1086,1,"['results', 'covariance']", Exercises,seg_145,"c. determine the covariance cov(x, y ) using the results from a and b.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  5646,  1996,  2522, 10755, 28335,  2522,  2615,
         1006,  1060,  1010,  1061,  1007,  2478,  1996,  3463,  2013,  1037,
         1998,  1038,  1012,   102])"
1087,1,"['random', 'random variables', 'variables']", Exercises,seg_145,"10.14 let x and y be two random variables and let r, s, t, and u be arbitrary real numbers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2403,  2292,  1060,  1998,  1061,  2022,  2048,
         6721, 10857,  1998,  2292,  1054,  1010,  1055,  1010,  1056,  1010,
         1998,  1057,  2022, 15275,  2613,  3616,  1012,   102])"
1088,1,"['simulation', 'joint distributions', 'distributions', 'random', 'random variables', 'plots', 'variables', 'joint', 'plot']", Exercises,seg_145,"10.15 in figure 10.1 three plots are displayed. for each plot we carried out a simulation in which we generated 500 realizations of a pair of random variables (x, y ). we have chosen three different joint distributions of x and y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2321,  1999,  3275,  2184,  1012,  1015,  2093,
        14811,  2024,  6913,  1012,  2005,  2169,  5436,  2057,  3344,  2041,
         1037, 12504,  1999,  2029,  2057,  7013,  3156, 12393,  2015,  1997,
         1037,  3940,  1997,  6721, 10857,  1006,  1060,  1010,  1061,  1007,
         1012,  2057,  2031,  4217,  2093,  2367,  4101, 20611,  1997,  1060,
         1998,  1061,  1012,   102])"
1089,1,"['random', 'random variables', 'variables', 'plot']", Exercises,seg_145,a. indicate for each plot whether it corresponds to random variables x and,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5769,  2005,  2169,  5436,  3251,  2009, 14788,
         2000,  6721, 10857,  1060,  1998,   102])"
1090,1,['correlated'], Exercises,seg_145,"y that are positively correlated, negatively correlated, or uncorrelated.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1061,  2008,  2024, 13567, 23900,  1010, 19762, 23900,  1010,
         2030,  4895, 27108, 16570,  4383,  1012,   102])"
1091,1,"['random', 'random variables', 'variables', 'plot']", Exercises,seg_145,"b. which plot corresponds to random variables x and y for which |ρ(x, y )|",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2029,  5436, 14788,  2000,  6721, 10857,  1060,
         1998,  1061,  2005,  2029,  1064,  1171,  1006,  1060,  1010,  1061,
         1007,  1064,   102])"
1092,1,"['random', 'random variables', 'variables']", Exercises,seg_145,10.16 let x and y be random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2385,  2292,  1060,  1998,  1061,  2022,  6721,
        10857,  1012,   102])"
1093,1,['correlated'], Exercises,seg_145,"b. are x and x + y positively correlated, uncorrelated, or negatively cor-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2024,  1060,  1998,  1060,  1009,  1061, 13567,
        23900,  1010,  4895, 27108, 16570,  4383,  1010,  2030, 19762,  2522,
         2099,  1011,   102])"
1094,0,[], Exercises,seg_145,"related, or can anything happen?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 3141, 1010, 2030, 2064, 2505, 4148, 1029,  102])"
1095,0,[], Exercises,seg_145,"c. same question as in part b, but now assume that x and y are uncorre-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  2168,  3160,  2004,  1999,  2112,  1038,  1010,
         2021,  2085,  7868,  2008,  1060,  1998,  1061,  2024,  4895, 27108,
         2890,  1011,   102])"
1096,1,"['variance', 'random', 'random variables', 'expectation', 'variables']", Exercises,seg_145,10.17 extending the variance of the sum rule. for mathematical convenience we first extend the sum rule to three random variables with zero expectation. next we further extend the rule to three random variables with nonzero expectation. by the same line of reasoning we extend the rule to n random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2459,  8402,  1996, 23284,  1997,  1996,  7680,
         3627,  1012,  2005,  8045, 15106,  2057,  2034,  7949,  1996,  7680,
         3627,  2000,  2093,  6721, 10857,  2007,  5717, 17626,  1012,  2279,
         2057,  2582,  7949,  1996,  3627,  2000,  2093,  6721, 10857,  2007,
         2512,  6290,  2080, 17626,  1012,  2011,  1996,  2168,  2240,  1997,
        13384,  2057,  7949,  1996,  3627,  2000,  1050,  6721, 10857,  1012,
          102])"
1097,1,"['random', 'random variables', 'expectation', 'variables']", Exercises,seg_145,"a. let x, y and z be random variables with expectation 0. show that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2292,  1060,  1010,  1061,  1998,  1062,  2022,
         6721, 10857,  2007, 17626,  1014,  1012,  2265,  2008,   102])"
1098,0,[], Exercises,seg_145,"hint: directly apply that for real numbers y1, . . . , yn",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 9374, 1024, 3495, 6611, 2008, 2005, 2613, 3616, 1061, 2487, 1010,
        1012, 1012, 1012, 1010, 1061, 2078,  102])"
1099,1,['expectation'], Exercises,seg_145,"b. now show a for x, y , and z with nonzero expectation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2085,  2265,  1037,  2005,  1060,  1010,  1061,
         1010,  1998,  1062,  2007,  2512,  6290,  2080, 17626,  1012,   102])"
1100,1,"['covariance', 'variance']", Exercises,seg_145,hint: you might use the rules on pages 98 and 141 about variance and covariance under a change of units.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9374,  1024,  2017,  2453,  2224,  1996,  3513,  2006,  5530,
         5818,  1998, 15471,  2055, 23284,  1998,  2522, 10755, 28335,  2104,
         1037,  2689,  1997,  3197,  1012,   102])"
1101,1,['variance'], Exercises,seg_145,"c. derive a general variance of the sum rule, i.e., show that if x1, x2, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 18547,  1037,  2236, 23284,  1997,  1996,  7680,
         3627,  1010,  1045,  1012,  1041,  1012,  1010,  2265,  2008,  2065,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,   102])"
1102,1,"['random', 'random variables', 'variables']", Exercises,seg_145,"are random variables, then",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2024,  6721, 10857,  1010,  2059,   102])"
1103,1,['variances'], Exercises,seg_145,d. show that if the variances are all equal to σ2 and the covariances are all,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1040,  1012,  2265,  2008,  2065,  1996, 23284,  2015,  2024,
         2035,  5020,  2000,  1173,  2475,  1998,  1996,  2522, 10755, 28335,
         2015,  2024,  2035,   102])"
1104,0,[], Exercises,seg_145,"equal to some constant γ, then",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 5020, 2000, 2070, 5377, 1157, 1010, 2059,  102])"
1105,1,"['probability', 'without replacement', 'replacement', 'variance']", Exercises,seg_145,"10.18 consider a vase containing balls numbered 1, 2, . . . , n . we draw n balls without replacement from the vase. each ball is selected with equal probability, i.e., in the first draw each ball has probability 1/n , in the second draw each of the n − 1 remaining balls has probability 1/(n − 1), and so on. for i = 1, 2, . . . , n, let xi denote the number on the ball in the ith draw. from exercise 9.18 we know that the variance of xi equals",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2324,  5136,  1037, 18781,  4820,  7395,  8597,
         1015,  1010,  1016,  1010,  1012,  1012,  1012,  1010,  1050,  1012,
         2057,  4009,  1050,  7395,  2302,  6110,  2013,  1996, 18781,  1012,
         2169,  3608,  2003,  3479,  2007,  5020,  9723,  1010,  1045,  1012,
         1041,  1012,  1010,  1999,  1996,  2034,  4009,  2169,  3608,  2038,
         9723,  1015,  1013,  1050,  1010,  1999,  1996,  2117,  4009,  2169,
         1997,  1996,  1050,  1597,  1015,  3588,  7395,  2038,  9723,  1015,
         1013,  1006,  1050,  1597,  1015,  1007,  1010,  1998,  2061,  2006,
         1012,  2005,  1045,  1027,  1015,  1010,  1016,  1010,  1012,  1012,
         1012,  1010,  1050,  1010,  2292,  8418, 19090,  1996,  2193,  2006,
         1996,  3608,  1999,  1996,  2009,  2232,  4009,  1012,  2013,  6912,
         1023,  1012,  2324,  2057,  2113,  2008,  1996, 23284,  1997,  8418,
        19635,   102])"
1106,1,['covariance'], Exercises,seg_145,"before you do the exercise: why do you think the covariance is negative? hint: use var(x1 + x2 + · · · + xn ) = 0 (why?), and apply exercise 10.17.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2077,  2017,  2079,  1996,  6912,  1024,  2339,  2079,  2017,
         2228,  1996,  2522, 10755, 28335,  2003,  4997,  1029,  9374,  1024,
         2224, 13075,  1006,  1060,  2487,  1009,  1060,  2475,  1009,  1087,
         1087,  1087,  1009,  1060,  2078,  1007,  1027,  1014,  1006,  2339,
         1029,  1007,  1010,  1998,  6611,  6912,  2184,  1012,  2459,  1012,
          102])"
1107,1,"['expectations', 'linearity of expectations', 'covariance']", Exercises,seg_145,"10.19 derive the alternative expression for the covariance: cov(x, y ) = e[xy ] − e[x ] e [y ]. hint: work out (x − e[x ])(y − e[y ]) and use linearity of expectations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2539, 18547,  1996,  4522,  3670,  2005,  1996,
         2522, 10755, 28335,  1024,  2522,  2615,  1006,  1060,  1010,  1061,
         1007,  1027,  1041,  1031,  1060,  2100,  1033,  1597,  1041,  1031,
         1060,  1033,  1041,  1031,  1061,  1033,  1012,  9374,  1024,  2147,
         2041,  1006,  1060,  1597,  1041,  1031,  1060,  1033,  1007,  1006,
         1061,  1597,  1041,  1031,  1061,  1033,  1007,  1998,  2224,  7399,
         3012,  1997, 10908,  1012,   102])"
1108,1,['distribution'], Exercises,seg_145,"10.20 determine ρ(u, u2) when u has a u(0, a) distribution. here a is a positive number.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2184,  1012,  2322,  5646,  1171,  1006,  1057,  1010, 23343,
         1007,  2043,  1057,  2038,  1037,  1057,  1006,  1014,  1010,  1037,
         1007,  4353,  1012,  2182,  1037,  2003,  1037,  3893,  2193,  1012,
          102])"
1109,1,"['probability distributions', 'variance', 'probability', 'random variable', 'distributions', 'random', 'random variables', 'distribution', 'variables', 'expected value', 'variable', 'probability distribution']", More computations with more random variables,seg_147,"often one is interested in combining random variables, for instance, in taking the sum. in previous chapters, we have seen that it is fairly easy to describe the expected value and the variance of this new random variable. often more details are needed, and one also would like to have its probability distribution. in this chapter we consider the probability distributions of the sum, the product, and the quotient of two random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2062, 22334,  2015,  2007,  2062,  6721, 10857])","tensor([  101,  2411,  2028,  2003,  4699,  1999, 11566,  6721, 10857,  1010,
         2005,  6013,  1010,  1999,  2635,  1996,  7680,  1012,  1999,  3025,
         9159,  1010,  2057,  2031,  2464,  2008,  2009,  2003,  7199,  3733,
         2000,  6235,  1996,  3517,  3643,  1998,  1996, 23284,  1997,  2023,
         2047,  6721,  8023,  1012,  2411,  2062,  4751,  2024,  2734,  1010,
         1998,  2028,  2036,  2052,  2066,  2000,  2031,  2049,  9723,  4353,
         1012,  1999,  2023,  3127,  2057,  5136,  1996,  9723, 20611,  1997,
         1996,  7680,  1010,  1996,  4031,  1010,  1998,  1996, 22035,  9515,
         3372,  1997,  2048,  6721, 10857,  1012,   102])"
1110,1,"['set', 'probability', 'random', 'random variables', 'variables']", Sums of discrete random variables,seg_149,"in a solo race across the pacific ocean, a ship has one spare radio set for communications. each of the two radios has probability p of failing each time it is switched on. the skipper uses the radio once every day. let x be the number of days the radio is switched on until it fails (so if the radio can be used for two days and fails on the third day, x attains the value 3). similarly, let y be the number of days the spare radio is switched on until it fails. note that these random variables are similar to the one discussed in section 4.4, which modeled the number of cycles until pregnancy. hence, x and y are geo(p) distributed random variables. suppose that p = 1/75 and that the trip will last 100 days. then at first sight the skipper does not need to worry about radio contact: the number of days the first radio lasts is x − 1 days, and similarly the spare radio lasts y −1 days. therefore the expected number of days he is able to have radio contact is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  1999,  1037,  3948,  2679,  2408,  1996,  3534,  4153,  1010,
         1037,  2911,  2038,  2028,  8622,  2557,  2275,  2005,  4806,  1012,
         2169,  1997,  1996,  2048, 22229,  2038,  9723,  1052,  1997,  7989,
         2169,  2051,  2009,  2003,  7237,  2006,  1012,  1996, 23249,  3594,
         1996,  2557,  2320,  2296,  2154,  1012,  2292,  1060,  2022,  1996,
         2193,  1997,  2420,  1996,  2557,  2003,  7237,  2006,  2127,  2009,
        11896,  1006,  2061,  2065,  1996,  2557,  2064,  2022,  2109,  2005,
         2048,  2420,  1998, 11896,  2006,  1996,  2353,  2154,  1010,  1060,
        18759,  2015,  1996,  3643,  1017,  1007,  1012,  6660,  1010,  2292,
         1061,  2022,  1996,  2193,  1997,  2420,  1996,  8622,  2557,  2003,
         7237,  2006,  2127,  2009, 11896,  1012,  3602,  2008,  2122,  6721,
        10857,  2024,  2714,  2000,  1996,  2028,  6936,  1999,  2930,  1018,
         1012,  1018,  1010,  2029, 14440,  1996,  2193,  1997, 12709,  2127,
        10032,  1012,  6516,  1010,  1060,  1998,  1061,  2024, 20248,  1006,
         1052,  1007,  5500,  6721, 10857,  1012,  6814,  2008,  1052,  1027,
         1015,  1013,  4293,  1998,  2008,  1996,  4440,  2097,  2197,  2531,
         2420,  1012,  2059,  2012,  2034,  4356,  1996, 23249,  2515,  2025,
         2342,  2000,  4737,  2055,  2557,  3967,  1024,  1996,  2193,  1997,
         2420,  1996,  2034,  2557, 16180,  2003,  1060,  1597,  1015,  2420,
         1010,  1998,  6660,  1996,  8622,  2557, 16180,  1061,  1597,  2487,
         2420,  1012,  3568,  1996,  3517,  2193,  1997,  2420,  2002,  2003,
         2583,  2000,  2031,  2557,  3967,  2003,   102])"
1111,1,"['probability', 'risk']", Sums of discrete random variables,seg_149,the skipper—who has some training in probability theory—still has some concerns about the risk he runs with these two radios. what if the probability p(x + y − 2 ≤ 99) that his two radios break down before the end of the trip is large?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  1996, 23249,  1517,  2040,  2038,  2070,  2731,  1999,  9723,
         3399,  1517,  2145,  2038,  2070,  5936,  2055,  1996,  3891,  2002,
         3216,  2007,  2122,  2048, 22229,  1012,  2054,  2065,  1996,  9723,
         1052,  1006,  1060,  1009,  1061,  1597,  1016,  1608,  5585,  1007,
         2008,  2010,  2048, 22229,  3338,  2091,  2077,  1996,  2203,  1997,
         1996,  4440,  2003,  2312,  1029,   102])"
1112,1,"['function', 'discrete', 'probability', 'discrete random variables', 'random variable', 'random', 'random variables', 'probability mass function', 'mass function', 'variables', 'variable']", Sums of discrete random variables,seg_149,"this example illustrates that it is important to study the probability distribution of the sum z = x + y of two discrete random variables. the random variable z takes on values ai + bj , where ai is a possible value of x and bj of y . hence, the probability mass function of z is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  2023,  2742, 24899,  2008,  2009,  2003,  2590,  2000,  2817,
         1996,  9723,  4353,  1997,  1996,  7680,  1062,  1027,  1060,  1009,
         1061,  1997,  2048, 16246,  6721, 10857,  1012,  1996,  6721,  8023,
         1062,  3138,  2006,  5300,  9932,  1009,  1038,  3501,  1010,  2073,
         9932,  2003,  1037,  2825,  3643,  1997,  1060,  1998,  1038,  3501,
         1997,  1061,  1012,  6516,  1010,  1996,  9723,  3742,  3853,  1997,
         1062,  2003,  2445,  2011,   102])"
1113,1,['summation'], Sums of discrete random variables,seg_149,"where the sum runs over all possible values ai of x and bj of y such that ai + bj = c. because the sum only runs over values ai that are equal to c− bj, we simplify the summation and write",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  2073,  1996,  7680,  3216,  2058,  2035,  2825,  5300,  9932,
         1997,  1060,  1998,  1038,  3501,  1997,  1061,  2107,  2008,  9932,
         1009,  1038,  3501,  1027,  1039,  1012,  2138,  1996,  7680,  2069,
         3216,  2058,  5300,  9932,  2008,  2024,  5020,  2000,  1039, 22543,
         1038,  3501,  1010,  2057, 21934, 28250,  1996,  7680, 28649,  1998,
         4339,   102])"
1114,1,['independent'], Sums of discrete random variables,seg_149,"where the sum runs over all possible values bj of y . when x and y are independent, then p(x = c − bj , y = bj) = p(x = c − bj) p(y = bj). this leads to the following rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([ 101, 2073, 1996, 7680, 3216, 2058, 2035, 2825, 5300, 1038, 3501, 1997,
        1061, 1012, 2043, 1060, 1998, 1061, 2024, 2981, 1010, 2059, 1052, 1006,
        1060, 1027, 1039, 1597, 1038, 3501, 1010, 1061, 1027, 1038, 3501, 1007,
        1027, 1052, 1006, 1060, 1027, 1039, 1597, 1038, 3501, 1007, 1052, 1006,
        1061, 1027, 1038, 3501, 1007, 1012, 2023, 5260, 2000, 1996, 2206, 3627,
        1012,  102])"
1115,1,"['function', 'discrete', 'probability', 'functions', 'discrete random variables', 'random', 'random variables', 'probability mass function', 'mass function', 'variables', 'independent']", Sums of discrete random variables,seg_149,"adding two independent discrete random variables. let x and y be two independent discrete random variables, with probability mass functions px and py . then the probability mass function pz of z = x + y satisfies",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  5815,  2048,  2981, 16246,  6721, 10857,  1012,  2292,  1060,
         1998,  1061,  2022,  2048,  2981, 16246,  6721, 10857,  1010,  2007,
         9723,  3742,  4972,  1052,  2595,  1998,  1052,  2100,  1012,  2059,
         1996,  9723,  3742,  3853,  1052,  2480,  1997,  1062,  1027,  1060,
         1009,  1061,  2938,  2483, 14213,   102])"
1116,0,[], Sums of discrete random variables,seg_149,where the sum runs over all possible values bj of y .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([ 101, 2073, 1996, 7680, 3216, 2058, 2035, 2825, 5300, 1038, 3501, 1997,
        1061, 1012,  102])"
1117,1,"['table', 'addition rule', 'independent']", Sums of discrete random variables,seg_149,"quick exercise 11.1 let s be the sum of two independent throws with a die, so s = x + y , where x and y are independent, and p(x = k) = p(y = k) = 1/6, for k = 1, . . . , 6. use the addition rule to compute p(s = 3) and p(s = 8), and compare your answers with table 9.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  4248,  6912,  2340,  1012,  1015,  2292,  1055,  2022,  1996,
         7680,  1997,  2048,  2981, 11618,  2007,  1037,  3280,  1010,  2061,
         1055,  1027,  1060,  1009,  1061,  1010,  2073,  1060,  1998,  1061,
         2024,  2981,  1010,  1998,  1052,  1006,  1060,  1027,  1047,  1007,
         1027,  1052,  1006,  1061,  1027,  1047,  1007,  1027,  1015,  1013,
         1020,  1010,  2005,  1047,  1027,  1015,  1010,  1012,  1012,  1012,
         1010,  1020,  1012,  2224,  1996,  2804,  3627,  2000, 24134,  1052,
         1006,  1055,  1027,  1017,  1007,  1998,  1052,  1006,  1055,  1027,
         1022,  1007,  1010,  1998, 12826,  2115,  6998,  2007,  2795,  1023,
         1012,  1016,  1012,   102])"
1118,1,"['random', 'random variables', 'variables', 'independent']", Sums of discrete random variables,seg_149,"in the solo race example, x and y are independent geo(p) distributed random variables. let z = x + y ; then by the above rule for k ≥ 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  1999,  1996,  3948,  2679,  2742,  1010,  1060,  1998,  1061,
         2024,  2981, 20248,  1006,  1052,  1007,  5500,  6721, 10857,  1012,
         2292,  1062,  1027,  1060,  1009,  1061,  1025,  2059,  2011,  1996,
         2682,  3627,  2005,  1047,  1609,  1016,   102])"
1119,1,"['geometric', 'geometric distribution', 'distribution']", Sums of discrete random variables,seg_149,note that x + y does not have a geometric distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  3602,  2008,  1060,  1009,  1061,  2515,  2025,  2031,  1037,
        14965,  4353,  1012,   102])"
1120,0,[], Sums of discrete random variables,seg_149,"returning to the solo race example, it is clear that the skipper does have grounds to worry:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  4192,  2000,  1996,  3948,  2679,  2742,  1010,  2009,  2003,
         3154,  2008,  1996, 23249,  2515,  2031,  5286,  2000,  4737,  1024,
          102])"
1121,1,"['random', 'random variables', 'variables', 'binomial']", Sums of discrete random variables,seg_149,the sum of two binomial random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  1996,  7680,  1997,  2048,  8026, 20936,  2389,  6721, 10857,
          102])"
1122,1,"['addition rule', 'successes', 'independent', 'independent random variables', 'discrete', 'probability', 'trials', 'random variables', 'success', 'discrete random variables', 'random', 'distribution', 'variables']", Sums of discrete random variables,seg_149,"it is not always necessary to use the addition rule for two independent discrete random variables to find the distribution of their sum. for example, let x and y be two independent random variables, where x has a bin(n, p) distribution and y has a bin(m, p) distribution. since a bin(n, p) distribution models the number of successes in n independent trials with success probability p, heuristically, x + y represents the number of successes in n + m trials with success probability p and should therefore have a bin(n + m, p) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  2009,  2003,  2025,  2467,  4072,  2000,  2224,  1996,  2804,
         3627,  2005,  2048,  2981, 16246,  6721, 10857,  2000,  2424,  1996,
         4353,  1997,  2037,  7680,  1012,  2005,  2742,  1010,  2292,  1060,
         1998,  1061,  2022,  2048,  2981,  6721, 10857,  1010,  2073,  1060,
         2038,  1037,  8026,  1006,  1050,  1010,  1052,  1007,  4353,  1998,
         1061,  2038,  1037,  8026,  1006,  1049,  1010,  1052,  1007,  4353,
         1012,  2144,  1037,  8026,  1006,  1050,  1010,  1052,  1007,  4353,
         4275,  1996,  2193,  1997, 14152,  1999,  1050,  2981,  7012,  2007,
         3112,  9723,  1052,  1010,  2002,  9496, 10074,  3973,  1010,  1060,
         1009,  1061,  5836,  1996,  2193,  1997, 14152,  1999,  1050,  1009,
         1049,  7012,  2007,  3112,  9723,  1052,  1998,  2323,  3568,  2031,
         1037,  8026,  1006,  1050,  1009,  1049,  1010,  1052,  1007,  4353,
         1012,   102])"
1123,0,[], Sums of discrete random variables,seg_149,a more formal reasoning is the following. let,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  1037,  2062,  5337, 13384,  2003,  1996,  2206,  1012,  2292,
          102])"
1124,1,"['addition rule', 'random variable', 'random', 'random variables', 'distribution', 'variables', 'variable', 'independent']", Sums of discrete random variables,seg_149,"be independent ber(p) distributed random variables. recall that a bin(n, p) distributed random variable has the same distribution as the sum of n independent ber(p) distributed random variables (see section 4.3 or 10.2). hence x has the same distribution as r1 + r2 + · · · + rn and y has the same distribution as s1 + s2 + · · ·+ sm. this means that x + y has the same distribution as the sum of n+m independent ber(p) variables and therefore has a bin(n + m, p) distribution. this can also be verified analytically by means of the addition rule, using that x and y are also independent.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([  101,  2022,  2981,  2022,  2099,  1006,  1052,  1007,  5500,  6721,
        10857,  1012,  9131,  2008,  1037,  8026,  1006,  1050,  1010,  1052,
         1007,  5500,  6721,  8023,  2038,  1996,  2168,  4353,  2004,  1996,
         7680,  1997,  1050,  2981,  2022,  2099,  1006,  1052,  1007,  5500,
         6721, 10857,  1006,  2156,  2930,  1018,  1012,  1017,  2030,  2184,
         1012,  1016,  1007,  1012,  6516,  1060,  2038,  1996,  2168,  4353,
         2004,  1054,  2487,  1009,  1054,  2475,  1009,  1087,  1087,  1087,
         1009, 29300,  1998,  1061,  2038,  1996,  2168,  4353,  2004,  1055,
         2487,  1009,  1055,  2475,  1009,  1087,  1087,  1087,  1009, 15488,
         1012,  2023,  2965,  2008,  1060,  1009,  1061,  2038,  1996,  2168,
         4353,  2004,  1996,  7680,  1997,  1050,  1009,  1049,  2981,  2022,
         2099,  1006,  1052,  1007, 10857,  1998,  3568,  2038,  1037,  8026,
         1006,  1050,  1009,  1049,  1010,  1052,  1007,  4353,  1012,  2023,
         2064,  2036,  2022, 20119, 17826,  2135,  2011,  2965,  1997,  1996,
         2804,  3627,  1010,  2478,  2008,  1060,  1998,  1061,  2024,  2036,
         2981,  1012,   102])"
1125,1,"['random variable', 'random', 'variable', 'independent']", Sums of discrete random variables,seg_149,"quick exercise 11.2 for i = 1, 2, 3, let xi be a bin(ni, p) distributed random variable, and suppose that x1, x2, and x3 are independent. argue that z = x1 + x2 + x3 is a bin(n1 + n2 + n3, p) distributed random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([20571,  1997, 16246,  6721, 10857])","tensor([ 101, 4248, 6912, 2340, 1012, 1016, 2005, 1045, 1027, 1015, 1010, 1016,
        1010, 1017, 1010, 2292, 8418, 2022, 1037, 8026, 1006, 9152, 1010, 1052,
        1007, 5500, 6721, 8023, 1010, 1998, 6814, 2008, 1060, 2487, 1010, 1060,
        2475, 1010, 1998, 1060, 2509, 2024, 2981, 1012, 7475, 2008, 1062, 1027,
        1060, 2487, 1009, 1060, 2475, 1009, 1060, 2509, 2003, 1037, 8026, 1006,
        1050, 2487, 1009, 1050, 2475, 1009, 1050, 2509, 1010, 1052, 1007, 5500,
        6721, 8023, 1012,  102])"
1126,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'continuous random variables', 'random', 'random variables', 'uniformly distributed', 'variables', 'independent']", Sums of continuous random variables,seg_151,"let x and y be two continuous random variables. what can we say about the probability density function of z = x+y ? we start with an example. suppose that x and y are two independent, u(0, 1) distributed random variables. one might be tempted to think that z is also uniformly distributed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2292,  1060,  1998,  1061,  2022,  2048,  7142,  6721, 10857,
         1012,  2054,  2064,  2057,  2360,  2055,  1996,  9723,  4304,  3853,
         1997,  1062,  1027,  1060,  1009,  1061,  1029,  2057,  2707,  2007,
         2019,  2742,  1012,  6814,  2008,  1060,  1998,  1061,  2024,  2048,
         2981,  1010,  1057,  1006,  1014,  1010,  1015,  1007,  5500,  6721,
        10857,  1012,  2028,  2453,  2022, 16312,  2000,  2228,  2008,  1062,
         2003,  2036, 27423,  5500,  1012,   102])"
1127,1,"['joint probability', 'function', 'density function', 'marginal', 'probability', 'functions', 'probability density function', 'joint probability density function', 'marginal probability', 'joint']", Sums of continuous random variables,seg_151,note that the joint probability density function f of x and y is equal to the product of the marginal probability functions fx and fy :,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  3602,  2008,  1996,  4101,  9723,  4304,  3853,  1042,  1997,
         1060,  1998,  1061,  2003,  5020,  2000,  1996,  4031,  1997,  1996,
        14785,  9723,  4972, 23292,  1998,  1042,  2100,  1024,   102])"
1128,1,"['distribution function', 'function', 'distribution']", Sums of continuous random variables,seg_151,"and f(x, y) = 0 otherwise. let us compute the distribution function fz of z. it is easy to see that fz(a) = 0 for a ≤ 0 and fz(a) = 1 for a ≥ 2. for a between 0 and 1, let g be that part of the plane below the line x+ y = a, and let ∆ be the triangle with vertices (0, 0), (a, 0), and (0, a); see figure 11.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1998,  1042,  1006,  1060,  1010,  1061,  1007,  1027,  1014,
         4728,  1012,  2292,  2149, 24134,  1996,  4353,  3853,  1042,  2480,
         1997,  1062,  1012,  2009,  2003,  3733,  2000,  2156,  2008,  1042,
         2480,  1006,  1037,  1007,  1027,  1014,  2005,  1037,  1608,  1014,
         1998,  1042,  2480,  1006,  1037,  1007,  1027,  1015,  2005,  1037,
         1609,  1016,  1012,  2005,  1037,  2090,  1014,  1998,  1015,  1010,
         2292,  1043,  2022,  2008,  2112,  1997,  1996,  4946,  2917,  1996,
         2240,  1060,  1009,  1061,  1027,  1037,  1010,  1998,  2292,  1594,
         2022,  1996,  9546,  2007, 18984,  1006,  1014,  1010,  1014,  1007,
         1010,  1006,  1037,  1010,  1014,  1007,  1010,  1998,  1006,  1014,
         1010,  1037,  1007,  1025,  2156,  3275,  2340,  1012,  1015,  1012,
          102])"
1129,1,"['distribution function', 'function', 'distribution']", Sums of continuous random variables,seg_151,"since f(x, y) = 0 outside [0, 1] × [0, 1], the distribution function of z is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([ 101, 2144, 1042, 1006, 1060, 1010, 1061, 1007, 1027, 1014, 2648, 1031,
        1014, 1010, 1015, 1033, 1095, 1031, 1014, 1010, 1015, 1033, 1010, 1996,
        4353, 3853, 1997, 1062, 2003, 2445, 2011,  102])"
1130,1,['case'], Sums of continuous random variables,seg_151,"for 0 < a < 1. for the case where 1 ≤ a < 2 one can draw a similar figure (see figure 11.2), from which one can find that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([ 101, 2005, 1014, 1026, 1037, 1026, 1015, 1012, 2005, 1996, 2553, 2073,
        1015, 1608, 1037, 1026, 1016, 2028, 2064, 4009, 1037, 2714, 3275, 1006,
        2156, 3275, 2340, 1012, 1016, 1007, 1010, 2013, 2029, 2028, 2064, 2424,
        2008,  102])"
1131,1,['uniformly distributed'], Sums of continuous random variables,seg_151,we see that z is not uniformly distributed.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2057,  2156,  2008,  1062,  2003,  2025, 27423,  5500,  1012,
          102])"
1132,1,"['continuous', 'function', 'distribution', 'distribution function', 'variables']", Sums of continuous random variables,seg_151,"in general, the distribution function fz of the sum z of two continuous random variables x and y is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1999,  2236,  1010,  1996,  4353,  3853,  1042,  2480,  1997,
         1996,  7680,  1062,  1997,  2048,  7142,  6721, 10857,  1060,  1998,
         1061,  2003,  2445,  2011,   102])"
1133,0,[], Sums of continuous random variables,seg_151,"the double integral on the right-hand side can be written as a repeated integral, first over x and then over y. note that x and y are between minus and plus infinity and that they also have to satisfy x + y ≤ a or, equivalently, x ≤ a − y. this means that the integral over x runs from minus infinity to y − a, and the integral over y runs from minus infinity to plus infinity. hence",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1996,  3313,  9897,  2006,  1996,  2157,  1011,  2192,  2217,
         2064,  2022,  2517,  2004,  1037,  5567,  9897,  1010,  2034,  2058,
         1060,  1998,  2059,  2058,  1061,  1012,  3602,  2008,  1060,  1998,
         1061,  2024,  2090, 15718,  1998,  4606, 15579,  1998,  2008,  2027,
         2036,  2031,  2000, 13225,  1060,  1009,  1061,  1608,  1037,  2030,
         1010,  5662,  2135,  1010,  1060,  1608,  1037,  1597,  1061,  1012,
         2023,  2965,  2008,  1996,  9897,  2058,  1060,  3216,  2013, 15718,
        15579,  2000,  1061,  1597,  1037,  1010,  1998,  1996,  9897,  2058,
         1061,  3216,  2013, 15718, 15579,  2000,  4606, 15579,  1012,  6516,
          102])"
1134,1,"['independent', 'case']", Sums of continuous random variables,seg_151,"in case x and y are independent, the last double integral can be written as",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([ 101, 1999, 2553, 1060, 1998, 1061, 2024, 2981, 1010, 1996, 2197, 3313,
        9897, 2064, 2022, 2517, 2004,  102])"
1135,0,[], Sums of continuous random variables,seg_151,and we find that,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([ 101, 1998, 2057, 2424, 2008,  102])"
1136,0,[], Sums of continuous random variables,seg_151,for −∞ < a < ∞. differentiating fz we find the following rule.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2005,  1597, 30128,  1026,  1037,  1026,  1601,  1012,  2367,
        15370,  1042,  2480,  2057,  2424,  1996,  2206,  3627,  1012,   102])"
1137,1,"['continuous', 'function', 'density function', 'probability density functions', 'probability', 'functions', 'probability density function', 'continuous random variables', 'random', 'density functions', 'random variables', 'variables', 'independent']", Sums of continuous random variables,seg_151,"adding two independent continuous random variables. let x and y be two independent continuous random variables, with probability density functions fx and fy . then the probability density function fz of z = x + y is given by",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  5815,  2048,  2981,  7142,  6721, 10857,  1012,  2292,  1060,
         1998,  1061,  2022,  2048,  2981,  7142,  6721, 10857,  1010,  2007,
         9723,  4304,  4972, 23292,  1998,  1042,  2100,  1012,  2059,  1996,
         9723,  4304,  3853,  1042,  2480,  1997,  1062,  1027,  1060,  1009,
         1061,  2003,  2445,  2011,   102])"
1138,0,[], Sums of continuous random variables,seg_151,the single-server queue revisited,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1996,  2309,  1011,  8241, 24240, 24354,   102])"
1139,1,"['expectations', 'distribution', 'model']", Sums of continuous random variables,seg_151,"in the single-server queue model from section 6.4, t1 is the time between the start at time zero and the arrival of the first customer and ti is the time between the arrival of the (i − 1)th and ith customer at a well. we are interested in the arrival time of the nth customer at the well. for n ≥ 1, let zn be the arrival time of the nth customer at the well: zn = t1 + · · · + tn. since each ti has an exp(0.5) distribution, it follows from the linearity-of- expectations rule in section 10.1 that the expected arrival time of the nth customer is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1999,  1996,  2309,  1011,  8241, 24240,  2944,  2013,  2930,
         1020,  1012,  1018,  1010,  1056,  2487,  2003,  1996,  2051,  2090,
         1996,  2707,  2012,  2051,  5717,  1998,  1996,  5508,  1997,  1996,
         2034,  8013,  1998, 14841,  2003,  1996,  2051,  2090,  1996,  5508,
         1997,  1996,  1006,  1045,  1597,  1015,  1007, 16215,  1998,  2009,
         2232,  8013,  2012,  1037,  2092,  1012,  2057,  2024,  4699,  1999,
         1996,  5508,  2051,  1997,  1996, 23961,  2232,  8013,  2012,  1996,
         2092,  1012,  2005,  1050,  1609,  1015,  1010,  2292,  1062,  2078,
         2022,  1996,  5508,  2051,  1997,  1996, 23961,  2232,  8013,  2012,
         1996,  2092,  1024,  1062,  2078,  1027,  1056,  2487,  1009,  1087,
         1087,  1087,  1009, 28286,  1012,  2144,  2169, 14841,  2038,  2019,
         4654,  2361,  1006,  1014,  1012,  1019,  1007,  4353,  1010,  2009,
         4076,  2013,  1996,  7399,  3012,  1011,  1997,  1011, 10908,  3627,
         1999,  2930,  2184,  1012,  1015,  2008,  1996,  3517,  5508,  2051,
         1997,  1996, 23961,  2232,  8013,  2003,   102])"
1140,1,"['random', 'independent', 'case']", Sums of continuous random variables,seg_151,"we would like to know whether the pump capacity is sufficient; for instance, when the service times si are independent u(2, 5) distributed random variables (this is the case when the pump capacity v = 1). in that case, at most 30 customers can pump water at the well in the first hour. if p(z30 ≤ 60) is large, one might be tempted to increase the capacity of the well.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2057,  2052,  2066,  2000,  2113,  3251,  1996, 10216,  3977,
         2003,  7182,  1025,  2005,  6013,  1010,  2043,  1996,  2326,  2335,
         9033,  2024,  2981,  1057,  1006,  1016,  1010,  1019,  1007,  5500,
         6721, 10857,  1006,  2023,  2003,  1996,  2553,  2043,  1996, 10216,
         3977,  1058,  1027,  1015,  1007,  1012,  1999,  2008,  2553,  1010,
         2012,  2087,  2382,  6304,  2064, 10216,  2300,  2012,  1996,  2092,
         1999,  1996,  2034,  3178,  1012,  2065,  1052,  1006,  1062, 14142,
         1608,  3438,  1007,  2003,  2312,  1010,  2028,  2453,  2022, 16312,
         2000,  3623,  1996,  3977,  1997,  1996,  2092,  1012,   102])"
1141,1,"['addition rule', 'random', 'random variables', 'variables', 'independent']", Sums of continuous random variables,seg_151,"recalling that the ti are independent exp(λ) random variables, it follows from the addition rule that ft1+t2(z) = 0 if z < 0, and for z ≥ 0 that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101, 21195,  2008,  1996, 14841,  2024,  2981,  4654,  2361,  1006,
         1165,  1007,  6721, 10857,  1010,  2009,  4076,  2013,  1996,  2804,
         3627,  2008,  3027,  2487,  1009,  1056,  2475,  1006,  1062,  1007,
         1027,  1014,  2065,  1062,  1026,  1014,  1010,  1998,  2005,  1062,
         1609,  1014,  2008,   102])"
1142,1,['addition rule'], Sums of continuous random variables,seg_151,"viewing t1 + t2 + t3 as the sum of t1 and t2 + t3, we find, by applying the addition rule again, that fz3(z) = 0 if z < 0, and for z ≥ 0 that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101, 10523,  1056,  2487,  1009,  1056,  2475,  1009,  1056,  2509,
         2004,  1996,  7680,  1997,  1056,  2487,  1998,  1056,  2475,  1009,
         1056,  2509,  1010,  2057,  2424,  1010,  2011, 11243,  1996,  2804,
         3627,  2153,  1010,  2008,  1042,  2480,  2509,  1006,  1062,  1007,
         1027,  1014,  2065,  1062,  1026,  1014,  1010,  1998,  2005,  1062,
         1609,  1014,  2008,   102])"
1143,1,['probability'], Sums of continuous random variables,seg_151,"even if each customer fills his jerrican in the minimum time of 2 minutes, we see that after an hour with probability 0.524, people will be waiting at the pump!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2130,  2065,  2169,  8013, 17469,  2010, 15333, 18752,  9336,
         1999,  1996,  6263,  2051,  1997,  1016,  2781,  1010,  2057,  2156,
         2008,  2044,  2019,  3178,  2007,  9723,  1014,  1012,  4720,  2549,
         1010,  2111,  2097,  2022,  3403,  2012,  1996, 10216,   999,   102])"
1144,1,"['gamma', 'random variable', 'random', 'gamma random variable', 'variable']", Sums of continuous random variables,seg_151,"the random variable zn is an example of a gamma random variable, defined as follows.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1996,  6721,  8023,  1062,  2078,  2003,  2019,  2742,  1997,
         1037, 13091,  6721,  8023,  1010,  4225,  2004,  4076,  1012,   102])"
1145,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'gamma', 'random variable', 'random', 'parameters', 'variable']", Sums of continuous random variables,seg_151,definition. a continuous random variable x has a gamma distribution with parameters α > 0 and λ > 0 if its probability density function f is given by f(x) = 0 for x < 0 and,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  6210,  1012,  1037,  7142,  6721,  8023,  1060,  2038,  1037,
        13091,  4353,  2007, 11709,  1155,  1028,  1014,  1998,  1165,  1028,
         1014,  2065,  2049,  9723,  4304,  3853,  1042,  2003,  2445,  2011,
         1042,  1006,  1060,  1007,  1027,  1014,  2005,  1060,  1026,  1014,
         1998,   102])"
1146,1,['distribution'], Sums of continuous random variables,seg_151,"where the quantity γ(α) is a normalizing constant such that f integrates to 1. we denote this distribution by gam(α, λ).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2073,  1996, 11712,  1157,  1006,  1155,  1007,  2003,  1037,
         3671,  6026,  5377,  2107,  2008,  1042, 17409,  2015,  2000,  1015,
         1012,  2057, 19090,  2023,  4353,  2011, 11721,  2213,  1006,  1155,
         1010,  1165,  1007,  1012,   102])"
1147,1,"['parameter', 'random', 'random variables', 'distribution', 'variables']", Sums of continuous random variables,seg_151,"(see also exercise 11.12). it follows from our example that the sum of n independent exp(λ) distributed random variables has a gam(n, λ) distribution, also known as the erlang-n distribution with parameter λ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1006,  2156,  2036,  6912,  2340,  1012,  2260,  1007,  1012,
         2009,  4076,  2013,  2256,  2742,  2008,  1996,  7680,  1997,  1050,
         2981,  4654,  2361,  1006,  1165,  1007,  5500,  6721, 10857,  2038,
         1037, 11721,  2213,  1006,  1050,  1010,  1165,  1007,  4353,  1010,
         2036,  2124,  2004,  1996,  9413, 25023,  1011,  1050,  4353,  2007,
        16381,  1165,  1012,   102])"
1148,1,"['random', 'normal', 'random variables', 'variables', 'independent']", Sums of continuous random variables,seg_151,the sum of independent normal random variables,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1996,  7680,  1997,  2981,  3671,  6721, 10857,   102])"
1149,1,"['normally distributed', 'addition rule', 'random', 'random variables', 'variables', 'independent']", Sums of continuous random variables,seg_151,using the addition rule you can show that the sum of two independent normally distributed random variables is again a normally distributed random,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 1., 1., 1., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2478,  1996,  2804,  3627,  2017,  2064,  2265,  2008,  1996,
         7680,  1997,  2048,  2981,  5373,  5500,  6721, 10857,  2003,  2153,
         1037,  5373,  5500,  6721,   102])"
1150,1,"['random', 'random variables', 'variables', 'variable', 'independent']", Sums of continuous random variables,seg_151,"variable. for instance, if x and y are independent n(0, 1) distributed random variables, one has",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  8023,  1012,  2005,  6013,  1010,  2065,  1060,  1998,  1061,
         2024,  2981,  1050,  1006,  1014,  1010,  1015,  1007,  5500,  6721,
        10857,  1010,  2028,  2038,   102])"
1151,1,"['change of variables', 'variables']", Sums of continuous random variables,seg_151,"to prepare a change of variables, we subtract the term 2",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2000,  7374,  1037,  2689,  1997, 10857,  1010,  2057,  4942,
         6494,  6593,  1996,  2744,  1016,   102])"
1152,0,[], Sums of continuous random variables,seg_151,to complete the square in the exponent:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2000,  3143,  1996,  2675,  1999,  1996, 16258, 21576,  1024,
          102])"
1153,1,['variables'], Sums of continuous random variables,seg_151,in this way we find with changing integration variables t = √2(y − z/2):,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1999,  2023,  2126,  2057,  2424,  2007,  5278,  8346, 10857,
         1056,  1027,  1600,  2475,  1006,  1061,  1597,  1062,  1013,  1016,
         1007,  1024,   102])"
1154,1,"['normal distribution', 'standard normal distribution', 'probability', 'standard normal', 'normal', 'standard', 'distribution']", Sums of continuous random variables,seg_151,"since φ is the probability density of the standard normal distribution, it in-",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([ 101, 2144, 1176, 2003, 1996, 9723, 4304, 1997, 1996, 3115, 3671, 4353,
        1010, 2009, 1999, 1011,  102])"
1155,1,"['probability', 'normal', 'normal distribution', 'distribution']", Sums of continuous random variables,seg_151,"which is the probability density of the n(0, 2) distribution. thus, x + y also has a normal distribution. this is more generally true.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([ 101, 2029, 2003, 1996, 9723, 4304, 1997, 1996, 1050, 1006, 1014, 1010,
        1016, 1007, 4353, 1012, 2947, 1010, 1060, 1009, 1061, 2036, 2038, 1037,
        3671, 4353, 1012, 2023, 2003, 2062, 3227, 2995, 1012,  102])"
1156,1,"['normal distribution', 'random', 'normal', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Sums of continuous random variables,seg_151,"the sum of independent normal random variables. if x and y are independent random variables with a normal distribution, then x + y also has a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  1996,  7680,  1997,  2981,  3671,  6721, 10857,  1012,  2065,
         1060,  1998,  1061,  2024,  2981,  6721, 10857,  2007,  1037,  3671,
         4353,  1010,  2059,  1060,  1009,  1061,  2036,  2038,  1037,  3671,
         4353,  1012,   102])"
1157,1,"['normally distributed', 'random variable', 'parameters', 'random', 'random variables', 'independent random variables', 'distribution', 'variables', 'variable', 'independent']", Sums of continuous random variables,seg_151,"quick exercise 11.3 let x and y be independent random variables, where x has an n(3, 16) distribution, and y an n(5, 9) distribution. then x + y is a normally distributed random variable. what are its parameters?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  4248,  6912,  2340,  1012,  1017,  2292,  1060,  1998,  1061,
         2022,  2981,  6721, 10857,  1010,  2073,  1060,  2038,  2019,  1050,
         1006,  1017,  1010,  2385,  1007,  4353,  1010,  1998,  1061,  2019,
         1050,  1006,  1019,  1010,  1023,  1007,  4353,  1012,  2059,  1060,
         1009,  1061,  2003,  1037,  5373,  5500,  6721,  8023,  1012,  2054,
         2024,  2049, 11709,  1029,   102])"
1158,1,['independence'], Sums of continuous random variables,seg_151,"rather surprisingly, independence of x and y is not a prerequisite, as can be seen in the following remark.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20571,  1997,  7142,  6721, 10857])","tensor([  101,  2738, 10889,  1010,  4336,  1997,  1060,  1998,  1061,  2003,
         2025,  1037,  3653,  2890, 24871,  1010,  2004,  2064,  2022,  2464,
         1999,  1996,  2206, 17674,  1012,   102])"
1159,1,"['independent', 'uniformly distributed', 'distribution']", Product and quotient of two random variables,seg_153,"recall from chapter 7 the example of the architect who wants maximal variety in the sizes of buildings. the architect wants more variety and therefore replaces the square buildings by rectangular buildings: the buildings should be of width x and depth y , where x and y are independent and uniformly distributed between 0 and 10 meters. since x and y are independent, the expected area of a building equals e[xy ] = e[x ] e [y ] = 5 · 5 = 25 m2. but what can one say about the distribution of the area z = xy of an arbitrary building?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  9131,  2013,  3127,  1021,  1996,  2742,  1997,  1996,  4944,
         2040,  4122, 29160,  3528,  1999,  1996, 10826,  1997,  3121,  1012,
         1996,  4944,  4122,  2062,  3528,  1998,  3568, 20736,  1996,  2675,
         3121,  2011, 10806,  3121,  1024,  1996,  3121,  2323,  2022,  1997,
         9381,  1060,  1998,  5995,  1061,  1010,  2073,  1060,  1998,  1061,
         2024,  2981,  1998, 27423,  5500,  2090,  1014,  1998,  2184,  5563,
         1012,  2144,  1060,  1998,  1061,  2024,  2981,  1010,  1996,  3517,
         2181,  1997,  1037,  2311, 19635,  1041,  1031,  1060,  2100,  1033,
         1027,  1041,  1031,  1060,  1033,  1041,  1031,  1061,  1033,  1027,
         1019,  1087,  1019,  1027,  2423, 25525,  1012,  2021,  2054,  2064,
         2028,  2360,  2055,  1996,  4353,  1997,  1996,  2181,  1062,  1027,
         1060,  2100,  1997,  2019, 15275,  2311,  1029,   102])"
1160,1,"['distribution function', 'function', 'distribution']", Product and quotient of two random variables,seg_153,let us calculate the distribution function of z. clearly fz(a) = 0 if a < 0 and fz(a) = 1 if a > 100. for a between 0 and 100 we can compute fz(a) with the help of figure 11.3.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2292,  2149, 18422,  1996,  4353,  3853,  1997,  1062,  1012,
         4415,  1042,  2480,  1006,  1037,  1007,  1027,  1014,  2065,  1037,
         1026,  1014,  1998,  1042,  2480,  1006,  1037,  1007,  1027,  1015,
         2065,  1037,  1028,  2531,  1012,  2005,  1037,  2090,  1014,  1998,
         2531,  2057,  2064, 24134,  1042,  2480,  1006,  1037,  1007,  2007,
         1996,  2393,  1997,  3275,  2340,  1012,  1017,  1012,   102])"
1161,0,[], Product and quotient of two random variables,seg_153,area of the shaded region in figure 11.3,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2181,  1997,  1996, 25273,  2555,  1999,  3275,  2340,  1012,
         1017,   102])"
1162,1,"['function', 'density function', 'probability', 'probability density function']", Product and quotient of two random variables,seg_153,hence the probability density function fz of z is given by,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([ 101, 6516, 1996, 9723, 4304, 3853, 1042, 2480, 1997, 1062, 2003, 2445,
        2011,  102])"
1163,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'continuous random variables', 'random', 'random variables', 'variables', 'independent']", Product and quotient of two random variables,seg_153,"this computation can be generalized to arbitrary independent continuous random variables, and we obtain the following formula for the probability density function of the product of two random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2023, 22334,  2064,  2022, 18960,  2000, 15275,  2981,  7142,
         6721, 10857,  1010,  1998,  2057,  6855,  1996,  2206,  5675,  2005,
         1996,  9723,  4304,  3853,  1997,  1996,  4031,  1997,  2048,  6721,
        10857,  1012,   102])"
1164,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'continuous random variables', 'random', 'densities', 'random variables', 'variables', 'independent']", Product and quotient of two random variables,seg_153,product of independent continuous random variables. let x and y be two independent continuous random variables with probability densities fx and fy . then the probability density function fz of z = xy is given by,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  4031,  1997,  2981,  7142,  6721, 10857,  1012,  2292,  1060,
         1998,  1061,  2022,  2048,  2981,  7142,  6721, 10857,  2007,  9723,
         7939, 24279, 23292,  1998,  1042,  2100,  1012,  2059,  1996,  9723,
         4304,  3853,  1042,  2480,  1997,  1062,  1027,  1060,  2100,  2003,
         2445,  2011,   102])"
1165,1,"['function', 'density function', 'probability', 'probability density function', 'independence', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Product and quotient of two random variables,seg_153,"for the quotient z = x/y of two independent random variables x and y it is now fairly easy to derive the probability density function. since the independence of x and y implies that x and 1/y are independent, the preceding rule yields",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2005,  1996, 22035,  9515,  3372,  1062,  1027,  1060,  1013,
         1061,  1997,  2048,  2981,  6721, 10857,  1060,  1998,  1061,  2009,
         2003,  2085,  7199,  3733,  2000, 18547,  1996,  9723,  4304,  3853,
         1012,  2144,  1996,  4336,  1997,  1060,  1998,  1061, 12748,  2008,
         1060,  1998,  1015,  1013,  1061,  2024,  2981,  1010,  1996, 11003,
         3627, 16189,   102])"
1166,1,"['function', 'density function', 'probability', 'probability density function']", Product and quotient of two random variables,seg_153,recall from section 8.2 that the probability density function of 1/y is given,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([ 101, 9131, 2013, 2930, 1022, 1012, 1016, 2008, 1996, 9723, 4304, 3853,
        1997, 1015, 1013, 1061, 2003, 2445,  102])"
1167,1,['variable'], Product and quotient of two random variables,seg_153,"substituting this in the integral, after changing the variable of integration, we find the following rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  4942, 21532,  2023,  1999,  1996,  9897,  1010,  2044,  5278,
         1996,  8023,  1997,  8346,  1010,  2057,  2424,  1996,  2206,  3627,
         1012,   102])"
1168,1,"['continuous', 'probability', 'continuous random variables', 'random', 'densities', 'random variables', 'variables', 'independent']", Product and quotient of two random variables,seg_153,quotient of independent continuous random variables. let x and y be two independent continuous random variables with probability densities fx and fy . then the probability density function fz of z = x/y is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101, 22035,  9515,  3372,  1997,  2981,  7142,  6721, 10857,  1012,
         2292,  1060,  1998,  1061,  2022,  2048,  2981,  7142,  6721, 10857,
         2007,  9723,  7939, 24279, 23292,  1998,  1042,  2100,  1012,  2059,
         1996,  9723,  4304,  3853,  1042,  2480,  1997,  1062,  1027,  1060,
         1013,  1061,  2003,  2445,  2011,   102])"
1169,1,"['random', 'normal', 'random variables', 'variables', 'independent']", Product and quotient of two random variables,seg_153,the quotient of two independent normal random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  1996, 22035,  9515,  3372,  1997,  2048,  2981,  3671,  6721,
        10857,   102])"
1170,1,"['normal distribution', 'standard normal distribution', 'standard normal', 'cauchy', 'random', 'normal', 'random variables', 'standard', 'cauchy distribution', 'distribution', 'independent random variables', 'variables', 'independent']", Product and quotient of two random variables,seg_153,"let x and y be independent random variables, both having a standard normal distribution. when we compute the quotient z of x and y , we find a so-called standard cauchy distribution:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2292,  1060,  1998,  1061,  2022,  2981,  6721, 10857,  1010,
         2119,  2383,  1037,  3115,  3671,  4353,  1012,  2043,  2057, 24134,
         1996, 22035,  9515,  3372,  1062,  1997,  1060,  1998,  1061,  1010,
         2057,  2424,  1037,  2061,  1011,  2170,  3115,  6187, 10875,  2100,
         4353,  1024,   102])"
1171,1,"['case', 'distributions']", Product and quotient of two random variables,seg_153,"this is the special case α = 0, β = 1 of the following family of distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2023,  2003,  1996,  2569,  2553,  1155,  1027,  1014,  1010,
         1156,  1027,  1015,  1997,  1996,  2206,  2155,  1997, 20611,  1012,
          102])"
1172,1,"['continuous', 'continuous random variable', 'function', 'density function', 'probability', 'probability density function', 'cauchy', 'random variable', 'random', 'parameters', 'variable']", Product and quotient of two random variables,seg_153,definition. a continuous random variable has a cauchy distribution with parameters α and β > 0 if its probability density function f is given by,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  6210,  1012,  1037,  7142,  6721,  8023,  2038,  1037,  6187,
        10875,  2100,  4353,  2007, 11709,  1155,  1998,  1156,  1028,  1014,
         2065,  2049,  9723,  4304,  3853,  1042,  2003,  2445,  2011,   102])"
1173,1,['distribution'], Product and quotient of two random variables,seg_153,"we denote this distribution by cau(α, β).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2057, 19090,  2023,  4353,  2011,  6187,  2226,  1006,  1155,
         1010,  1156,  1007,  1012,   102])"
1174,1,"['function', 'cauchy', 'distribution', 'distribution function']", Product and quotient of two random variables,seg_153,"by integrating, we find that the distribution function f of a cauchy distribution is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  2011, 22380,  1010,  2057,  2424,  2008,  1996,  4353,  3853,
         1042,  1997,  1037,  6187, 10875,  2100,  4353,  2003,  2445,  2011,
          102])"
1175,1,"['parameter', 'function', 'probability', 'symmetry', 'distribution', 'distribution function', 'expected value', 'case']", Product and quotient of two random variables,seg_153,"the parameter α is the point of symmetry of the probability density function f . note that α is not the expected value of z. as a matter of fact, it was shown in remark 7.1 that the expected value does not exist! the probability density f is shown together with the distribution function f for the case α = 2, β = 5 in figure 11.4.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  1996, 16381,  1155,  2003,  1996,  2391,  1997, 14991,  1997,
         1996,  9723,  4304,  3853,  1042,  1012,  3602,  2008,  1155,  2003,
         2025,  1996,  3517,  3643,  1997,  1062,  1012,  2004,  1037,  3043,
         1997,  2755,  1010,  2009,  2001,  3491,  1999, 17674,  1021,  1012,
         1015,  2008,  1996,  3517,  3643,  2515,  2025,  4839,   999,  1996,
         9723,  4304,  1042,  2003,  3491,  2362,  2007,  1996,  4353,  3853,
         1042,  2005,  1996,  2553,  1155,  1027,  1016,  1010,  1156,  1027,
         1019,  1999,  3275,  2340,  1012,  1018,  1012,   102])"
1176,1,"['cauchy', 'cauchy distribution', 'standard', 'distribution']", Product and quotient of two random variables,seg_153,"quick exercise 11.4 argue—without doing any calculations—that if z has a standard cauchy distribution, 1/z also has a standard cauchy distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0.])","tensor([ 4031,  1998, 22035,  9515,  3372,  1997,  2048,  6721, 10857])","tensor([  101,  4248,  6912,  2340,  1012,  1018,  7475,  1517,  2302,  2725,
         2151, 16268,  1517,  2008,  2065,  1062,  2038,  1037,  3115,  6187,
        10875,  2100,  4353,  1010,  1015,  1013,  1062,  2036,  2038,  1037,
         3115,  6187, 10875,  2100,  4353,  1012,   102])"
1177,1,['addition rule'], Solutions to the quick exercises,seg_155,11.1 using the addition rule we find,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2340, 1012, 1015, 2478, 1996, 2804, 3627, 2057, 2424,  102])"
1178,1,"['random variable', 'random', 'variable']", Solutions to the quick exercises,seg_155,"11.2 we have seen that x1 + x2 is a bin(n1 + n2, p) distributed random variable. viewing x1 + x2 + x3 as the sum of x1 + x2 and x3, it follows that x1 + x2 + x3 is a bin(n1 + n2 + n3, p) distributed random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2340,  1012,  1016,  2057,  2031,  2464,  2008,  1060,  2487,
         1009,  1060,  2475,  2003,  1037,  8026,  1006,  1050,  2487,  1009,
         1050,  2475,  1010,  1052,  1007,  5500,  6721,  8023,  1012, 10523,
         1060,  2487,  1009,  1060,  2475,  1009,  1060,  2509,  2004,  1996,
         7680,  1997,  1060,  2487,  1009,  1060,  2475,  1998,  1060,  2509,
         1010,  2009,  4076,  2008,  1060,  2487,  1009,  1060,  2475,  1009,
         1060,  2509,  2003,  1037,  8026,  1006,  1050,  2487,  1009,  1050,
         2475,  1009,  1050,  2509,  1010,  1052,  1007,  5500,  6721,  8023,
         1012,   102])"
1179,1,"['normally distributed', 'variance', 'expectations', 'random variable', 'linearity of expectations', 'random', 'normal', 'random variables', 'expectation', 'parameters', 'variables', 'variable']", Solutions to the quick exercises,seg_155,11.3 the sum rule for two normal random variables tells us that x + y is a normally distributed random variable. its parameters are expectation and variance of x + y . hence by linearity of expectations,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2340,  1012,  1017,  1996,  7680,  3627,  2005,  2048,  3671,
         6721, 10857,  4136,  2149,  2008,  1060,  1009,  1061,  2003,  1037,
         5373,  5500,  6721,  8023,  1012,  2049, 11709,  2024, 17626,  1998,
        23284,  1997,  1060,  1009,  1061,  1012,  6516,  2011,  7399,  3012,
         1997, 10908,   102])"
1180,1,['variance'], Solutions to the quick exercises,seg_155,and by the rule for the variance of the sum,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1998,  2011,  1996,  3627,  2005,  1996, 23284,  1997,  1996,
         7680,   102])"
1181,1,['independence'], Solutions to the quick exercises,seg_155,"using that cov(x, y ) = 0 due to independence of x and y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2478, 2008, 2522, 2615, 1006, 1060, 1010, 1061, 1007, 1027, 1014,
        2349, 2000, 4336, 1997, 1060, 1998, 1061, 1012,  102])"
1182,1,"['standard normal random variables', 'standard normal', 'cauchy', 'random variable', 'random', 'normal', 'random variables', 'standard', 'distribution', 'cauchy distribution', 'variables', 'variable', 'independent']", Solutions to the quick exercises,seg_155,"11.4 in the examples we have seen that the quotient x/y of two independent standard normal random variables has a standard cauchy distribution. since z = x/y , the random variable 1/z = y/x . this is also the quotient of two independent standard normal random variables, and it has a standard cauchy distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2340,  1012,  1018,  1999,  1996,  4973,  2057,  2031,  2464,
         2008,  1996, 22035,  9515,  3372,  1060,  1013,  1061,  1997,  2048,
         2981,  3115,  3671,  6721, 10857,  2038,  1037,  3115,  6187, 10875,
         2100,  4353,  1012,  2144,  1062,  1027,  1060,  1013,  1061,  1010,
         1996,  6721,  8023,  1015,  1013,  1062,  1027,  1061,  1013,  1060,
         1012,  2023,  2003,  2036,  1996, 22035,  9515,  3372,  1997,  2048,
         2981,  3115,  3671,  6721, 10857,  1010,  1998,  2009,  2038,  1037,
         3115,  6187, 10875,  2100,  4353,  1012,   102])"
1183,1,"['distribution', 'discrete', 'probability', 'functions', 'uniform distribution', 'random', 'discrete uniform distribution', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_157,"11.1 let x and y be independent random variables with a discrete uniform distribution, i.e., with probability mass functions",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1015,  2292,  1060,  1998,  1061,  2022,  2981,
         6721, 10857,  2007,  1037, 16246,  6375,  4353,  1010,  1045,  1012,
         1041,  1012,  1010,  2007,  9723,  3742,  4972,   102])"
1184,1,"['cases', 'function', 'discrete', 'addition rule', 'probability', 'discrete random variables', 'random', 'random variables', 'probability mass function', 'mass function', 'variables']", Exercises,seg_157,use the addition rule for discrete random variables on page 152 to determine the probability mass function of z = x + y for the following two cases.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2224,  1996,  2804,  3627,  2005, 16246,  6721, 10857,  2006,
         3931, 15017,  2000,  5646,  1996,  9723,  3742,  3853,  1997,  1062,
         1027,  1060,  1009,  1061,  2005,  1996,  2206,  2048,  3572,  1012,
          102])"
1185,0,['n'], Exercises,seg_157,"a. suppose n = 6, so that x and y represent two throws with a die. show",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  1050,  1027,  1020,  1010,  2061,  2008,
         1060,  1998,  1061,  5050,  2048, 11618,  2007,  1037,  3280,  1012,
         2265,   102])"
1186,0,[], Exercises,seg_157,you may check this with quick exercise 11.1.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2017, 2089, 4638, 2023, 2007, 4248, 6912, 2340, 1012, 1015, 1012,
         102])"
1187,0,['n'], Exercises,seg_157,b. determine the expression for pz(k) for general n .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1038, 1012, 5646, 1996, 3670, 2005, 1052, 2480, 1006, 1047, 1007,
        2005, 2236, 1050, 1012,  102])"
1188,1,"['discrete random variable', 'discrete', 'probabilities', 'random variable', 'random', 'variable']", Exercises,seg_157,"11.2 consider a discrete random variable x taking values k = 0, 1, 2, . . . with probabilities",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1016,  5136,  1037, 16246,  6721,  8023,  1060,
         2635,  5300,  1047,  1027,  1014,  1010,  1015,  1010,  1016,  1010,
         1012,  1012,  1012,  2007,  4013,  3676, 14680,   102])"
1189,1,"['parameter', 'poisson', 'distribution', 'poisson distribution', 'variables', 'independent']", Exercises,seg_157,where µ > 0. this is the poisson distribution with parameter µ. we will learn more about this distribution in chapter 12. this exercise illustrates that the sum of independent poisson variables again has a poisson distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1085,  1028,  1014,  1012,  2023,  2003,  1996, 13433,
        24077,  4353,  2007, 16381,  1085,  1012,  2057,  2097,  4553,  2062,
         2055,  2023,  4353,  1999,  3127,  2260,  1012,  2023,  6912, 24899,
         2008,  1996,  7680,  1997,  2981, 13433, 24077, 10857,  2153,  2038,
         1037, 13433, 24077,  4353,  1012,   102])"
1190,1,"['poisson', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_157,"a. let x and y be independent random variables, each having a poisson",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2292,  1060,  1998,  1061,  2022,  2981,  6721,
        10857,  1010,  2169,  2383,  1037, 13433, 24077,   102])"
1191,1,"['poisson', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_157,"b. let x and y be independent random variables, each having a poisson",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2292,  1060,  1998,  1061,  2022,  2981,  6721,
        10857,  1010,  2169,  2383,  1037, 13433, 24077,   102])"
1192,1,['parameters'], Exercises,seg_157,"distribution with parameters λ and µ. show that for k = 0, 1, 2, . . .",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  4353,  2007, 11709,  1165,  1998,  1085,  1012,  2265,  2008,
         2005,  1047,  1027,  1014,  1010,  1015,  1010,  1016,  1010,  1012,
         1012,  1012,   102])"
1193,1,"['poisson', 'parameter', 'poisson distribution', 'distribution']", Exercises,seg_157,by using ∑k =0 (k)p (1 − p)k− = 1 for p = µ/(λ + µ). we conclude that x +y has a poisson distribution with parameter λ+µ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2011,  2478,   100,  1027,  1014,  1006,  1047,  1007,  1052,
         1006,  1015,  1597,  1052,  1007,  1047, 22543,  1027,  1015,  2005,
         1052,  1027,  1085,  1013,  1006,  1165,  1009,  1085,  1007,  1012,
         2057, 16519,  2008,  1060,  1009,  1061,  2038,  1037, 13433, 24077,
         4353,  2007, 16381,  1165,  1009,  1085,  1012,   102])"
1194,1,"['random', 'random variables', 'independent', 'independent random variables', 'distribution', 'variables', 'binomial', 'binomial distribution']", Exercises,seg_157,"11.3 let x and y be two independent random variables, where x has a ber(p) distribution, and y has a ber(q) distribution. when p = q = r, we know that x + y has a bin(2, r) distribution. suppose that p = 1/2 and q = 1/4. determine p(x + y = k), for k = 0, 1, 2, and conclude that x + y does not have a binomial distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1017,  2292,  1060,  1998,  1061,  2022,  2048,
         2981,  6721, 10857,  1010,  2073,  1060,  2038,  1037,  2022,  2099,
         1006,  1052,  1007,  4353,  1010,  1998,  1061,  2038,  1037,  2022,
         2099,  1006,  1053,  1007,  4353,  1012,  2043,  1052,  1027,  1053,
         1027,  1054,  1010,  2057,  2113,  2008,  1060,  1009,  1061,  2038,
         1037,  8026,  1006,  1016,  1010,  1054,  1007,  4353,  1012,  6814,
         2008,  1052,  1027,  1015,  1013,  1016,  1998,  1053,  1027,  1015,
         1013,  1018,  1012,  5646,  1052,  1006,  1060,  1009,  1061,  1027,
         1047,  1007,  1010,  2005,  1047,  1027,  1014,  1010,  1015,  1010,
         1016,  1010,  1998, 16519,  2008,  1060,  1009,  1061,  2515,  2025,
         2031,  1037,  8026, 20936,  2389,  4353,  1012,   102])"
1195,1,"['random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Exercises,seg_157,"11.4 let x and y be two independent random variables, where x has an n(2, 5) distribution and y has an n(5, 9) distribution. define z = 3x−2y +1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1018,  2292,  1060,  1998,  1061,  2022,  2048,
         2981,  6721, 10857,  1010,  2073,  1060,  2038,  2019,  1050,  1006,
         1016,  1010,  1019,  1007,  4353,  1998,  1061,  2038,  2019,  1050,
         1006,  1019,  1010,  1023,  1007,  4353,  1012,  9375,  1062,  1027,
         1017,  2595, 22543,  2475,  2100,  1009,  1015,  1012,   102])"
1196,1,['distribution'], Exercises,seg_157,b. what is the distribution of z?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2054, 2003, 1996, 4353, 1997, 1062, 1029,  102])"
1197,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'continuous random variables', 'random', 'random variables', 'variables', 'independent']", Exercises,seg_157,"11.5 let x and y be two independent, u(0, 1) distributed random variables. use the rule on addition of independent continuous random variables on page 156 to show that the probability density function of x + y is given",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1019,  2292,  1060,  1998,  1061,  2022,  2048,
         2981,  1010,  1057,  1006,  1014,  1010,  1015,  1007,  5500,  6721,
        10857,  1012,  2224,  1996,  3627,  2006,  2804,  1997,  2981,  7142,
         6721, 10857,  2006,  3931, 16734,  2000,  2265,  2008,  1996,  9723,
         4304,  3853,  1997,  1060,  1009,  1061,  2003,  2445,   102])"
1198,1,"['probability', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_157,11.6 let x and y be independent random variables with probability den-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1020,  2292,  1060,  1998,  1061,  2022,  2981,
         6721, 10857,  2007,  9723,  7939,  1011,   102])"
1199,1,"['continuous', 'probability', 'continuous random variables', 'random', 'random variables', 'variables', 'independent']", Exercises,seg_157,use the rule on addition of independent continuous random variables to determine the probability density of z = x + y .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2224,  1996,  3627,  2006,  2804,  1997,  2981,  7142,  6721,
        10857,  2000,  5646,  1996,  9723,  4304,  1997,  1062,  1027,  1060,
         1009,  1061,  1012,   102])"
1200,1,"['cases', 'random', 'random variables', 'variables']", Exercises,seg_157,"11.7 the two random variables in exercise 11.6 are special cases of gam(α, λ) variables, namely with α = 2 and λ = 1/2. more generally, let",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1021,  1996,  2048,  6721, 10857,  1999,  6912,
         2340,  1012,  1020,  2024,  2569,  3572,  1997, 11721,  2213,  1006,
         1155,  1010,  1165,  1007, 10857,  1010,  8419,  2007,  1155,  1027,
         1016,  1998,  1165,  1027,  1015,  1013,  1016,  1012,  2062,  3227,
         1010,  2292,   102])"
1201,1,"['random', 'random variables', 'distribution', 'variables', 'independent']", Exercises,seg_157,"x1, . . . , xn be independent gam(k, λ) distributed random variables, where λ > 0 and k is a positive integer. argue—without doing any calculations— that x1 + · · · + xn has a gam(nk, λ) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2022,  2981, 11721,  2213,  1006,  1047,  1010,  1165,  1007,  5500,
         6721, 10857,  1010,  2073,  1165,  1028,  1014,  1998,  1047,  2003,
         1037,  3893, 16109,  1012,  7475,  1517,  2302,  2725,  2151, 16268,
         1517,  2008,  1060,  2487,  1009,  1087,  1087,  1087,  1009,  1060,
         2078,  2038,  1037, 11721,  2213,  1006, 25930,  1010,  1165,  1007,
         4353,  1012,   102])"
1202,1,"['cauchy', 'cauchy distribution', 'distribution']", Exercises,seg_157,11.8 we investigate the effect on the cauchy distribution under a change of units.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1022,  2057,  8556,  1996,  3466,  2006,  1996,
         6187, 10875,  2100,  4353,  2104,  1037,  2689,  1997,  3197,  1012,
          102])"
1203,1,"['cauchy', 'cauchy distribution', 'standard', 'distribution']", Exercises,seg_157,a. let x have a standard cauchy distribution. what is the distribution of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2292,  1060,  2031,  1037,  3115,  6187, 10875,
         2100,  4353,  1012,  2054,  2003,  1996,  4353,  1997,   102])"
1204,1,['distribution'], Exercises,seg_157,"b. let x have a cau(α, β) distribution. what is the distribution of the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2292, 1060, 2031, 1037, 6187, 2226, 1006, 1155, 1010,
        1156, 1007, 4353, 1012, 2054, 2003, 1996, 4353, 1997, 1996,  102])"
1205,1,['variable'], Exercises,seg_157,random variable (x − α)/β?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 6721, 8023, 1006, 1060, 1597, 1155, 1007, 1013, 1156, 1029,  102])"
1206,1,"['random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Exercises,seg_157,11.9 let x and y be independent random variables with a par(α) and par(β) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  1023,  2292,  1060,  1998,  1061,  2022,  2981,
         6721, 10857,  2007,  1037, 11968,  1006,  1155,  1007,  1998, 11968,
         1006,  1156,  1007,  4353,  1012,   102])"
1207,1,['probability'], Exercises,seg_157,a. take α = 3 and β = 1 and determine the probability density of z = xy .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2202, 1155, 1027, 1017, 1998, 1156, 1027, 1015, 1998,
        5646, 1996, 9723, 4304, 1997, 1062, 1027, 1060, 2100, 1012,  102])"
1208,1,['probability'], Exercises,seg_157,b. determine the probability density of z = xy for general α and β.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 5646, 1996, 9723, 4304, 1997, 1062, 1027, 1060, 2100,
        2005, 2236, 1155, 1998, 1156, 1012,  102])"
1209,1,"['random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Exercises,seg_157,11.10 let x and y be independent random variables with a par(α) and par(β) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  2184,  2292,  1060,  1998,  1061,  2022,  2981,
         6721, 10857,  2007,  1037, 11968,  1006,  1155,  1007,  1998, 11968,
         1006,  1156,  1007,  4353,  1012,   102])"
1210,1,['probability'], Exercises,seg_157,a. take α = β = 2. show that z = x/y has probability density,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2202, 1155, 1027, 1156, 1027, 1016, 1012, 2265, 2008,
        1062, 1027, 1060, 1013, 1061, 2038, 9723, 4304,  102])"
1211,1,['probability'], Exercises,seg_157,"b. for general α, β > 0, show that z = x/y has probability density",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2005, 2236, 1155, 1010, 1156, 1028, 1014, 1010, 2265,
        2008, 1062, 1027, 1060, 1013, 1061, 2038, 9723, 4304,  102])"
1212,1,"['random', 'random variables', 'variables', 'independent']", Exercises,seg_157,"11.11 let x1, x2, and x3 be three independent geo(p) distributed random variables, and let z = x1 + x2 + x3.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2340,  1012,  2340,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1998,  1060,  2509,  2022,  2093,  2981, 20248,  1006,  1052,
         1007,  5500,  6721, 10857,  1010,  1998,  2292,  1062,  1027,  1060,
         2487,  1009,  1060,  2475,  1009,  1060,  2509,  1012,   102])"
1213,1,"['function', 'probability', 'probability mass function', 'mass function']", Exercises,seg_157,a. show for k ≥ 3 that the probability mass function pz of z is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2265, 2005, 1047, 1609, 1017, 2008, 1996, 9723, 3742,
        3853, 1052, 2480, 1997, 1062, 2003, 2445, 2011,  102])"
1214,0,[], Exercises,seg_157,"11.12 show that γ(1) = 1, and use integration by parts to show that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2340, 1012, 2260, 2265, 2008, 1157, 1006, 1015, 1007, 1027, 1015,
        1010, 1998, 2224, 8346, 2011, 3033, 2000, 2265, 2008,  102])"
1215,0,['n'], Exercises,seg_157,"use this last expression to show for n = 1, 2, . . . that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2224, 2023, 2197, 3670, 2000, 2265, 2005, 1050, 1027, 1015, 1010,
        1016, 1010, 1012, 1012, 1012, 2008,  102])"
1216,1,"['parameter', 'distribution']", Exercises,seg_157,11.13 let zn have an erlang-n distribution with parameter λ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2340,  1012,  2410,  2292,  1062,  2078,  2031,  2019,  9413,
        25023,  1011,  1050,  4353,  2007, 16381,  1165,  1012,   102])"
1217,0,['n'], Exercises,seg_157,a. use integration by parts to show that for a ≥ 0 and n ≥ 2:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 2224, 8346, 2011, 3033, 2000, 2265, 2008, 2005, 1037,
        1609, 1014, 1998, 1050, 1609, 1016, 1024,  102])"
1218,1,"['processes', 'homogeneity', 'random process', 'independence', 'poisson', 'random', 'random variables', 'process', 'poisson process', 'variables', 'case']", The Poisson process,seg_159,"in many random phenomena we encounter, it is not just one or two random variables that play a role but a whole collection. in that case one often speaks of a random process. the poisson process is a simple kind of random process, which models the occurrence of random points in time or space. there are numerous ways in which processes of random points arise: some examples are presented in the first section. the poisson process describes in a certain sense the most random way to distribute points in time or space. this is made more precise with the notions of homogeneity and independence.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0.])","tensor([ 1996, 13433, 24077,  2832])","tensor([  101,  1999,  2116,  6721, 13352,  2057,  8087,  1010,  2009,  2003,
         2025,  2074,  2028,  2030,  2048,  6721, 10857,  2008,  2377,  1037,
         2535,  2021,  1037,  2878,  3074,  1012,  1999,  2008,  2553,  2028,
         2411,  8847,  1997,  1037,  6721,  2832,  1012,  1996, 13433, 24077,
         2832,  2003,  1037,  3722,  2785,  1997,  6721,  2832,  1010,  2029,
         4275,  1996, 14404,  1997,  6721,  2685,  1999,  2051,  2030,  2686,
         1012,  2045,  2024,  3365,  3971,  1999,  2029,  6194,  1997,  6721,
         2685, 13368,  1024,  2070,  4973,  2024,  3591,  1999,  1996,  2034,
         2930,  1012,  1996, 13433, 24077,  2832,  5577,  1999,  1037,  3056,
         3168,  1996,  2087,  6721,  2126,  2000, 16062,  2685,  1999,  2051,
         2030,  2686,  1012,  2023,  2003,  2081,  2062, 10480,  2007,  1996,
        21951,  1997, 24004,  6914, 20175,  2100,  1998,  4336,  1012,   102])"
1219,1,['random'], Random points,seg_161,"typical examples of the occurrence of random time points are: arrival times of email messages at a server, the times at which asteroids hit the earth, arrival times of radioactive particles at a geiger counter, times at which your computer crashes, the times at which electronic components fail, and arrival times of people at a pump in an oasis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 2685])","tensor([  101,  5171,  4973,  1997,  1996, 14404,  1997,  6721,  2051,  2685,
         2024,  1024,  5508,  2335,  1997, 10373,  7696,  2012,  1037,  8241,
         1010,  1996,  2335,  2012,  2029, 26732,  2718,  1996,  3011,  1010,
         5508,  2335,  1997, 17669,  9309,  2012,  1037, 16216, 17071,  4675,
         1010,  2335,  2012,  2029,  2115,  3274, 19119,  1010,  1996,  2335,
         2012,  2029,  4816,  6177,  8246,  1010,  1998,  5508,  2335,  1997,
         2111,  2012,  1037, 10216,  1999,  2019, 18128,  1012,   102])"
1220,1,"['locations', 'random']", Random points,seg_161,"examples of the occurrence of random points in space are: the locations of asteroid impacts with earth (2-dimensional), the locations of imperfections in a material (3-dimensional), and the locations of trees in a forest (2-dimensional).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 2685])","tensor([  101,  4973,  1997,  1996, 14404,  1997,  6721,  2685,  1999,  2686,
         2024,  1024,  1996,  5269,  1997, 12175, 14670,  2007,  3011,  1006,
         1016,  1011,  8789,  1007,  1010,  1996,  5269,  1997, 29238,  8496,
         1999,  1037,  3430,  1006,  1017,  1011,  8789,  1007,  1010,  1998,
         1996,  5269,  1997,  3628,  1999,  1037,  3224,  1006,  1016,  1011,
         8789,  1007,  1012,   102])"
1221,1,"['probability', 'locations', 'poisson', 'poisson process', 'process', 'population', 'model']", Random points,seg_161,"some of these phenomena are better modeled by the poisson process than others. loosely speaking, one might say that the poisson process model often applies in situations where there is a very large population, and each member of the population has a very small probability to produce a point of the process. this is, for instance, well fulfilled in the geiger counter example where, in a huge collection of atoms, just a few will emit a radioactive particle (see [28]). a property of the poisson process—as we will see shortly—is that points may lie arbitrarily close together. therefore the tree locations are not so well modeled by the poisson process.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([6721, 2685])","tensor([  101,  2070,  1997,  2122, 13352,  2024,  2488, 14440,  2011,  1996,
        13433, 24077,  2832,  2084,  2500,  1012, 11853,  4092,  1010,  2028,
         2453,  2360,  2008,  1996, 13433, 24077,  2832,  2944,  2411, 12033,
         1999,  8146,  2073,  2045,  2003,  1037,  2200,  2312,  2313,  1010,
         1998,  2169,  2266,  1997,  1996,  2313,  2038,  1037,  2200,  2235,
         9723,  2000,  3965,  1037,  2391,  1997,  1996,  2832,  1012,  2023,
         2003,  1010,  2005,  6013,  1010,  2092, 16829,  1999,  1996, 16216,
        17071,  4675,  2742,  2073,  1010,  1999,  1037,  4121,  3074,  1997,
        13353,  1010,  2074,  1037,  2261,  2097, 12495,  2102,  1037, 17669,
        10811,  1006,  2156,  1031,  2654,  1033,  1007,  1012,  1037,  3200,
         1997,  1996, 13433, 24077,  2832,  1517,  2004,  2057,  2097,  2156,
         3859,  1517,  2003,  2008,  2685,  2089,  4682, 12098, 16313, 19848,
         6588,  2485,  2362,  1012,  3568,  1996,  3392,  5269,  2024,  2025,
         2061,  2092, 14440,  2011,  1996, 13433, 24077,  2832,  1012,   102])"
1222,1,"['poisson', 'poisson process', 'process']", Taking a closer look at random arrivals,seg_163,a well-known example that is usually modeled by the poisson process is that of calls arriving at a telephone exchange—the exchange is connected to a large number of people who make phone calls now and then. this will be our leading example in this section.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1037,  2092,  1011,  2124,  2742,  2008,  2003,  2788, 14440,
         2011,  1996, 13433, 24077,  2832,  2003,  2008,  1997,  4455,  7194,
         2012,  1037,  7026,  3863,  1517,  1996,  3863,  2003,  4198,  2000,
         1037,  2312,  2193,  1997,  2111,  2040,  2191,  3042,  4455,  2085,
         1998,  2059,  1012,  2023,  2097,  2022,  2256,  2877,  2742,  1999,
         2023,  2930,  1012,   102])"
1223,1,"['interval', 'random']", Taking a closer look at random arrivals,seg_163,"telephone calls arrive at random times x1, x2, . . . at the telephone exchange during a time interval [0, t].",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  7026,  4455,  7180,  2012,  6721,  2335,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  2012,  1996,  7026,  3863,
         2076,  1037,  2051, 13483,  1031,  1014,  1010,  1056,  1033,  1012,
          102])"
1224,1,['random'], Taking a closer look at random arrivals,seg_163,the two basic assumptions we make on these random arrivals are,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1996,  2048,  3937, 17568,  2057,  2191,  2006,  2122,  6721,
        25470,  2024,   102])"
1225,1,"['rate', 'homogeneity']", Taking a closer look at random arrivals,seg_163,1. (homogeneity) the rate λ at which arrivals occur is constant over time:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1015,  1012,  1006, 24004,  6914, 20175,  2100,  1007,  1996,
         3446,  1165,  2012,  2029, 25470,  5258,  2003,  5377,  2058,  2051,
         1024,   102])"
1226,1,['expectation'], Taking a closer look at random arrivals,seg_163,in a subinterval of length u the expectation of the number of telephone calls is λu.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1999,  1037,  4942, 18447,  2121, 10175,  1997,  3091,  1057,
         1996, 17626,  1997,  1996,  2193,  1997,  7026,  4455,  2003,  1165,
         2226,  1012,   102])"
1227,1,"['disjoint', 'intervals', 'independence']", Taking a closer look at random arrivals,seg_163,2. (independence) the numbers of arrivals in disjoint time intervals are in-,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0.,
        0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1016,  1012,  1006,  4336,  1007,  1996,  3616,  1997, 25470,
         1999,  4487,  2015,  5558, 18447,  2051, 14025,  2024,  1999,  1011,
          102])"
1228,1,"['random', 'random variables', 'variables']", Taking a closer look at random arrivals,seg_163,dependent random variables.,tensor(1),"tensor([0., 0., 1., 1., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  7790,  6721, 10857,  1012,   102])"
1229,1,"['interval', 'homogeneity', 'stationarity']", Taking a closer look at random arrivals,seg_163,"homogeneity is also called weak stationarity. we denote the total number of calls in an interval i by n(i), abbreviating n([0, t]) to nt. homogeneity then implies that we require",tensor(1),"tensor([0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101, 24004,  6914, 20175,  2100,  2003,  2036,  2170,  5410,  2276,
         8486,  3723,  1012,  2057, 19090,  1996,  2561,  2193,  1997,  4455,
         1999,  2019, 13483,  1045,  2011,  1050,  1006,  1045,  1007,  1010,
        11113, 13578,  9035,  3436,  1050,  1006,  1031,  1014,  1010,  1056,
         1033,  1007,  2000, 23961,  1012, 24004,  6914, 20175,  2100,  2059,
        12748,  2008,  2057,  5478,   102])"
1230,1,"['interval', 'intervals', 'distribution']", Taking a closer look at random arrivals,seg_163,"to get hold of the distribution of nt we divide the interval [0, t] into n intervals of length t/n. when n is large enough, every interval ij,n = ((j − 1) t/n, j t/n] will contain either 0 or 1 arrival: for such a large n (which also satisfies",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2000,  2131,  2907,  1997,  1996,  4353,  1997, 23961,  2057,
        11443,  1996, 13483,  1031,  1014,  1010,  1056,  1033,  2046,  1050,
        14025,  1997,  3091,  1056,  1013,  1050,  1012,  2043,  1050,  2003,
         2312,  2438,  1010,  2296, 13483,  1045,  3501,  1010,  1050,  1027,
         1006,  1006,  1046,  1597,  1015,  1007,  1056,  1013,  1050,  1010,
         1046,  1056,  1013,  1050,  1033,  2097,  5383,  2593,  1014,  2030,
         1015,  5508,  1024,  2005,  2107,  1037,  2312,  1050,  1006,  2029,
         2036,  2938,  2483, 14213,   102])"
1231,1,"['bernoulli', 'interval', 'bernoulli random variable', 'homogeneity', 'random variable', 'random', 'distribution', 'variable']", Taking a closer look at random arrivals,seg_163,"n > λt), let rj be the number of arrivals in the time interval ij,n. since rj is 0 or 1, rj has a ber(pj) distribution for some pj . recall that for a bernoulli random variable e[rj ] = 0 · (1 − pj) + 1 · pj = pj. by the homogeneity assumption, for each j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1050,  1028,  1165,  2102,  1007,  1010,  2292,  1054,  3501,
         2022,  1996,  2193,  1997, 25470,  1999,  1996,  2051, 13483,  1045,
         3501,  1010,  1050,  1012,  2144,  1054,  3501,  2003,  1014,  2030,
         1015,  1010,  1054,  3501,  2038,  1037,  2022,  2099,  1006,  1052,
         3501,  1007,  4353,  2005,  2070,  1052,  3501,  1012,  9131,  2008,
         2005,  1037, 16595,  7140,  6894,  6721,  8023,  1041,  1031,  1054,
         3501,  1033,  1027,  1014,  1087,  1006,  1015,  1597,  1052,  3501,
         1007,  1009,  1015,  1087,  1052,  3501,  1027,  1052,  3501,  1012,
         2011,  1996, 24004,  6914, 20175,  2100, 11213,  1010,  2005,  2169,
         1046,   102])"
1232,1,['intervals'], Taking a closer look at random arrivals,seg_163,"summing the number of calls in the intervals gives the total number of calls, hence",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  7680,  6562,  1996,  2193,  1997,  4455,  1999,  1996, 14025,
         3957,  1996,  2561,  2193,  1997,  4455,  1010,  6516,   102])"
1233,1,"['independence', 'random', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Taking a closer look at random arrivals,seg_163,"by the independence assumption, the rj are independent random variables, therefore nt has a bin(n, p) distribution, with p = λt/n.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2011,  1996,  4336, 11213,  1010,  1996,  1054,  3501,  2024,
         2981,  6721, 10857,  1010,  3568, 23961,  2038,  1037,  8026,  1006,
         1050,  1010,  1052,  1007,  4353,  1010,  2007,  1052,  1027,  1165,
         2102,  1013,  1050,  1012,   102])"
1234,1,['approximation'], Taking a closer look at random arrivals,seg_163,we have found that (at least in first approximation),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2057,  2031,  2179,  2008,  1006,  2012,  2560,  1999,  2034,
        20167,  1007,   102])"
1235,1,"['parameter', 'probability', 'distribution', 'probability distribution']", Taking a closer look at random arrivals,seg_163,"in this analysis n is a rather artificial parameter, of which we only know that it should not be “too small.” it therefore seems a good idea to get rid of n by letting n go to infinity, hoping that the probability distribution of nt will settle down. note that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1999,  2023,  4106,  1050,  2003,  1037,  2738,  7976, 16381,
         1010,  1997,  2029,  2057,  2069,  2113,  2008,  2009,  2323,  2025,
         2022,  1523,  2205,  2235,  1012,  1524,  2009,  3568,  3849,  1037,
         2204,  2801,  2000,  2131,  9436,  1997,  1050,  2011,  5599,  1050,
         2175,  2000, 15579,  1010,  5327,  2008,  1996,  9723,  4353,  1997,
        23961,  2097,  7392,  2091,  1012,  3602,  2008,   102])"
1236,0,[], Taking a closer look at random arrivals,seg_163,and from calculus we know that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1998,  2013, 19276,  2057,  2113,  2008,   102])"
1237,0,[], Taking a closer look at random arrivals,seg_163,"we obtain, combining these three limits, that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2057,  6855,  1010, 11566,  2122,  2093,  6537,  1010,  2008,
          102])"
1238,1,"['probability', 'probabilities', 'probability distribution', 'distribution']", Taking a closer look at random arrivals,seg_163,"we have indeed run into a probability distribution on the numbers 0, 1, 2, . . . . note that all these probabilities are determined by the single value λt. this motivates the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2057,  2031,  5262,  2448,  2046,  1037,  9723,  4353,  2006,
         1996,  3616,  1014,  1010,  1015,  1010,  1016,  1010,  1012,  1012,
         1012,  1012,  3602,  2008,  2035,  2122,  4013,  3676, 14680,  2024,
         4340,  2011,  1996,  2309,  3643,  1165,  2102,  1012,  2023,  9587,
        29068,  8520,  1996,  2206,  6210,  1012,   102])"
1239,1,"['parameter', 'function', 'discrete random variable', 'discrete', 'probability', 'random variable', 'poisson', 'random', 'mass function', 'probability mass function', 'variable']", Taking a closer look at random arrivals,seg_163,"definition. a discrete random variable x has a poisson distribution with parameter µ, where µ > 0 if its probability mass function p is given by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  6210,  1012,  1037, 16246,  6721,  8023,  1060,  2038,  1037,
        13433, 24077,  4353,  2007, 16381,  1085,  1010,  2073,  1085,  1028,
         1014,  2065,  2049,  9723,  3742,  3853,  1052,  2003,  2445,  2011,
          102])"
1240,1,['distribution'], Taking a closer look at random arrivals,seg_163,we denote this distribution by pois(µ).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2057, 19090,  2023,  4353,  2011, 13433,  2483,  1006,  1085,
         1007,  1012,   102])"
1241,1,"['distribution', 'probability', 'functions', 'poisson', 'poisson distribution']", Taking a closer look at random arrivals,seg_163,figure 12.1 displays the graphs of the probability mass functions of the poisson distribution with µ = 0.9 (left) and the poisson distribution with µ = 5 (right).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  3275,  2260,  1012,  1015,  8834,  1996, 19287,  1997,  1996,
         9723,  3742,  4972,  1997,  1996, 13433, 24077,  4353,  2007,  1085,
         1027,  1014,  1012,  1023,  1006,  2187,  1007,  1998,  1996, 13433,
        24077,  4353,  2007,  1085,  1027,  1019,  1006,  2157,  1007,  1012,
          102])"
1242,1,['event'], Taking a closer look at random arrivals,seg_163,quick exercise 12.1 consider the event “exactly one call arrives in the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([ 101, 4248, 6912, 2260, 1012, 1015, 5136, 1996, 2724, 1523, 3599, 2028,
        2655, 8480, 1999, 1996,  102])"
1243,1,"['probability', 'interval', 'event', 'probability of the event', 'probability of this event']", Taking a closer look at random arrivals,seg_163,"−λ·2s interval [0, 2s].” the probability of this event is p(n2s = 1) = λ · 2s · e . but note that this event is the same as “there is exactly one call in the interval [0, s) and no calls in the interval [s, 2s], or no calls in [0, s) and exactly one call in [s, 2s].” verify (using assumptions 1 and 2) that you get the same answer if you compute the probability of the event in this way.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1597, 29727,  1087,  1016,  2015, 13483,  1031,  1014,  1010,
         1016,  2015,  1033,  1012,  1524,  1996,  9723,  1997,  2023,  2724,
         2003,  1052,  1006,  1050,  2475,  2015,  1027,  1015,  1007,  1027,
         1165,  1087,  1016,  2015,  1087,  1041,  1012,  2021,  3602,  2008,
         2023,  2724,  2003,  1996,  2168,  2004,  1523,  2045,  2003,  3599,
         2028,  2655,  1999,  1996, 13483,  1031,  1014,  1010,  1055,  1007,
         1998,  2053,  4455,  1999,  1996, 13483,  1031,  1055,  1010,  1016,
         2015,  1033,  1010,  2030,  2053,  4455,  1999,  1031,  1014,  1010,
         1055,  1007,  1998,  3599,  2028,  2655,  1999,  1031,  1055,  1010,
         1016,  2015,  1033,  1012,  1524, 20410,  1006,  2478, 17568,  1015,
         1998,  1016,  1007,  2008,  2017,  2131,  1996,  2168,  3437,  2065,
         2017, 24134,  1996,  9723,  1997,  1996,  2724,  1999,  2023,  2126,
         1012,   102])"
1244,1,"['poisson random variable', 'variance', 'random variable', 'poisson', 'random', 'expectation', 'distribution', 'poisson distribution', 'variable']", Taking a closer look at random arrivals,seg_163,"we do have a hint1 about what the expectation and variance of a poisson random variable might be: since e[nt] = λt for all n, we anticipate that the limiting poisson distribution will have expectation λt. similarly, since nt has a bin(n, λ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2057,  2079,  2031,  1037,  9374,  2487,  2055,  2054,  1996,
        17626,  1998, 23284,  1997,  1037, 13433, 24077,  6721,  8023,  2453,
         2022,  1024,  2144,  1041,  1031, 23961,  1033,  1027,  1165,  2102,
         2005,  2035,  1050,  1010,  2057,  3424,  6895, 17585,  2008,  1996,
        14879, 13433, 24077,  4353,  2097,  2031, 17626,  1165,  2102,  1012,
         6660,  1010,  2144, 23961,  2038,  1037,  8026,  1006,  1050,  1010,
         1165,   102])"
1245,1,"['variance', 'distribution']", Taking a closer look at random arrivals,seg_163,"t ) distribution, we anticipate that the variance will be",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1056,  1007,  4353,  1010,  2057,  3424,  6895, 17585,  2008,
         1996, 23284,  2097,  2022,   102])"
1246,1,"['parameter', 'poisson random variable', 'random variable', 'poisson', 'random', 'expectation', 'variable']", Taking a closer look at random arrivals,seg_163,"actually, the expectation of a poisson random variable x with parameter µ is easy to compute:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  2941,  1010,  1996, 17626,  1997,  1037, 13433, 24077,  6721,
         8023,  1060,  2007, 16381,  1085,  2003,  3733,  2000, 24134,  1024,
          102])"
1247,1,['variance'], Taking a closer look at random arrivals,seg_163,"in a similar way the variance can be determined (see exercise 12.8), and we arrive at the following rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1999,  1037,  2714,  2126,  1996, 23284,  2064,  2022,  4340,
         1006,  2156,  6912,  2260,  1012,  1022,  1007,  1010,  1998,  2057,
         7180,  2012,  1996,  2206,  3627,  1012,   102])"
1248,1,"['parameter', 'variance', 'poisson', 'expectation', 'distribution', 'poisson distribution']", Taking a closer look at random arrivals,seg_163,the expectation and variance of a poisson distribution. let x have a poisson distribution with parameter µ; then,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 1., 0., 0., 0., 0.])","tensor([ 2635,  1037,  3553,  2298,  2012,  6721, 25470])","tensor([  101,  1996, 17626,  1998, 23284,  1997,  1037, 13433, 24077,  4353,
         1012,  2292,  1060,  2031,  1037, 13433, 24077,  4353,  2007, 16381,
         1085,  1025,  2059,   102])"
1249,1,"['interval', 'random variable', 'random', 'distribution', 'variable']", The onedimensional Poisson process,seg_165,"we will derive some properties of the sequence of random points x1, x2, . . . that we considered in the previous section. what we derived so far is that for any interval (s, s + t] the number n((s, s + t]) of points xi in that interval is a random variable with a pois(λt) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2057,  2097, 18547,  2070,  5144,  1997,  1996,  5537,  1997,
         6721,  2685,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  2008,  2057,  2641,  1999,  1996,  3025,  2930,  1012,  2054,
         2057,  5173,  2061,  2521,  2003,  2008,  2005,  2151, 13483,  1006,
         1055,  1010,  1055,  1009,  1056,  1033,  1996,  2193,  1050,  1006,
         1006,  1055,  1010,  1055,  1009,  1056,  1033,  1007,  1997,  2685,
         8418,  1999,  2008, 13483,  2003,  1037,  6721,  8023,  2007,  1037,
        13433,  2483,  1006,  1165,  2102,  1007,  4353,  1012,   102])"
1250,1,"['probability', 'event', 'distribution', 'probability distribution']", The onedimensional Poisson process,seg_165,"are called interarrival times. here we define t1 = x1, the time of the first arrival. to determine the probability distribution of t1, we observe that the event {t1 > t} that the first call arrives after time t is the same as the event {nt = 0} that no calls have been made in [0, t]. but this implies that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2024,  2170,  6970,  2906,  3089, 10175,  2335,  1012,  2182,
         2057,  9375,  1056,  2487,  1027,  1060,  2487,  1010,  1996,  2051,
         1997,  1996,  2034,  5508,  1012,  2000,  5646,  1996,  9723,  4353,
         1997,  1056,  2487,  1010,  2057, 11949,  2008,  1996,  2724,  1063,
         1056,  2487,  1028,  1056,  1065,  2008,  1996,  2034,  2655,  8480,
         2044,  2051,  1056,  2003,  1996,  2168,  2004,  1996,  2724,  1063,
        23961,  1027,  1014,  1065,  2008,  2053,  4455,  2031,  2042,  2081,
         1999,  1031,  1014,  1010,  1056,  1033,  1012,  2021,  2023, 12748,
         2008,   102])"
1251,1,"['exponential', 'parameter', 'exponential distribution', 'distribution']", The onedimensional Poisson process,seg_165,therefore t1 has an exponential distribution with parameter λ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  3568,  1056,  2487,  2038,  2019, 27258,  4353,  2007, 16381,
         1165,  1012,   102])"
1252,1,"['conditional probability', 'probability', 'conditional', 'intervals', 'distribution', 'joint', 'independent']", The onedimensional Poisson process,seg_165,"to compute the joint distribution of t1 and t2, we consider the conditional probability that t2 > t, given that t1 = s, and use the property that arrivals in different intervals are independent:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2000, 24134,  1996,  4101,  4353,  1997,  1056,  2487,  1998,
         1056,  2475,  1010,  2057,  5136,  1996, 18462,  9723,  2008,  1056,
         2475,  1028,  1056,  1010,  2445,  2008,  1056,  2487,  1027,  1055,
         1010,  1998,  2224,  1996,  3200,  2008, 25470,  1999,  2367, 14025,
         2024,  2981,  1024,   102])"
1253,1,['independent'], The onedimensional Poisson process,seg_165,"since this answer does not depend on s, we conclude that t1 and t2 are independent, and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2144,  2023,  3437,  2515,  2025, 12530,  2006,  1055,  1010,
         2057, 16519,  2008,  1056,  2487,  1998,  1056,  2475,  2024,  2981,
         1010,  1998,   102])"
1254,1,"['parameter', 'probability', 'interval', 'exponential distribution', 'event', 'poisson', 'method', 'poisson process', 'process', 'distribution', 'exponential', 'independent']", The onedimensional Poisson process,seg_165,"i.e., t2 also has an exponential distribution with parameter λ. actually, although the conclusion is correct, the method to derive it is not, because we conditioned on the event {t1 = s}, which has zero probability. this problem could be circumvented by conditioning on the event that t1 lies in some small interval, but that will not be done here. analogously, one can show that the ti are independent and have an exp(λ) distribution. this nice property allows us to give a simple definition of the one-dimensional poisson process.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  1045,  1012,  1041,  1012,  1010,  1056,  2475,  2036,  2038,
         2019, 27258,  4353,  2007, 16381,  1165,  1012,  2941,  1010,  2348,
         1996,  7091,  2003,  6149,  1010,  1996,  4118,  2000, 18547,  2009,
         2003,  2025,  1010,  2138,  2057, 22442,  2006,  1996,  2724,  1063,
         1056,  2487,  1027,  1055,  1065,  1010,  2029,  2038,  5717,  9723,
         1012,  2023,  3291,  2071,  2022, 25022, 11890,  2819, 15338,  2098,
         2011, 14372,  2006,  1996,  2724,  2008,  1056,  2487,  3658,  1999,
         2070,  2235, 13483,  1010,  2021,  2008,  2097,  2025,  2022,  2589,
         2182,  1012, 19639,  2135,  1010,  2028,  2064,  2265,  2008,  1996,
        14841,  2024,  2981,  1998,  2031,  2019,  4654,  2361,  1006,  1165,
         1007,  4353,  1012,  2023,  3835,  3200,  4473,  2149,  2000,  2507,
         1037,  3722,  6210,  1997,  1996,  2028,  1011,  8789, 13433, 24077,
         2832,  1012,   102])"
1255,1,"['poisson', 'random', 'random variables', 'process', 'intensity', 'distribution', 'poisson process', 'independent random variables', 'variables', 'independent']", The onedimensional Poisson process,seg_165,"definition. the one-dimensional poisson process with intensity λ is a sequence x1, x2, x3, . . . of random variables having the property that the interarrival times x1, x2−x1, x3−x2, . . . are independent random variables, each with an exp(λ) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  6210,  1012,  1996,  2028,  1011,  8789, 13433, 24077,  2832,
         2007,  8015,  1165,  2003,  1037,  5537,  1060,  2487,  1010,  1060,
         2475,  1010,  1060,  2509,  1010,  1012,  1012,  1012,  1997,  6721,
        10857,  2383,  1996,  3200,  2008,  1996,  6970,  2906,  3089, 10175,
         2335,  1060,  2487,  1010,  1060,  2475, 22543,  2595,  2487,  1010,
         1060,  2509, 22543,  2595,  2475,  1010,  1012,  1012,  1012,  2024,
         2981,  6721, 10857,  1010,  2169,  2007,  2019,  4654,  2361,  1006,
         1165,  1007,  4353,  1012,   102])"
1256,0,[], The onedimensional Poisson process,seg_165,note that the connection with nt is as follows: nt is equal to the number of xi that are smaller than (or equal to) t.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  3602,  2008,  1996,  4434,  2007, 23961,  2003,  2004,  4076,
         1024, 23961,  2003,  5020,  2000,  1996,  2193,  1997,  8418,  2008,
         2024,  3760,  2084,  1006,  2030,  5020,  2000,  1007,  1056,  1012,
          102])"
1257,1,"['poisson', 'intensity', 'process', 'expectation', 'poisson process', 'model', 'average']", The onedimensional Poisson process,seg_165,quick exercise 12.2 we model the arrivals of email messages at a server as a poisson process. suppose that on average 330 messages arrive per minute. what would you choose for the intensity λ in messages per second? what is the expectation of the interarrival time?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  4248,  6912,  2260,  1012,  1016,  2057,  2944,  1996, 25470,
         1997, 10373,  7696,  2012,  1037,  8241,  2004,  1037, 13433, 24077,
         2832,  1012,  6814,  2008,  2006,  2779, 14210,  7696,  7180,  2566,
         3371,  1012,  2054,  2052,  2017,  5454,  2005,  1996,  8015,  1165,
         1999,  7696,  2566,  2117,  1029,  2054,  2003,  1996, 17626,  1997,
         1996,  6970,  2906,  3089, 10175,  2051,  1029,   102])"
1258,1,"['exponentially distributed', 'random', 'random variables', 'exponentially', 'distribution', 'variables', 'independent']", The onedimensional Poisson process,seg_165,"an obvious question is: what is the distribution of xi? this has already been answered in chapter 11: since xi is a sum of i independent exponentially distributed random variables, we have the following.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2019,  5793,  3160,  2003,  1024,  2054,  2003,  1996,  4353,
         1997,  8418,  1029,  2023,  2038,  2525,  2042,  4660,  1999,  3127,
         2340,  1024,  2144,  8418,  2003,  1037,  7680,  1997,  1045,  2981,
        27258,  2135,  5500,  6721, 10857,  1010,  2057,  2031,  1996,  2206,
         1012,   102])"
1259,1,"['random variable', 'poisson', 'random', 'poisson process', 'process', 'distribution', 'variable']", The onedimensional Poisson process,seg_165,"the points of the poisson process. for i = 1, 2, . . . the random variable xi has a gam(i, λ) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  1996,  2685,  1997,  1996, 13433, 24077,  2832,  1012,  2005,
         1045,  1027,  1015,  1010,  1016,  1010,  1012,  1012,  1012,  1996,
         6721,  8023,  8418,  2038,  1037, 11721,  2213,  1006,  1045,  1010,
         1165,  1007,  4353,  1012,   102])"
1260,1,['distribution'], The onedimensional Poisson process,seg_165,the distribution of points,tensor(1),"tensor([0., 0., 1., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([ 101, 1996, 4353, 1997, 2685,  102])"
1261,1,"['location', 'case', 'interval', 'distribution']", The onedimensional Poisson process,seg_165,"another interesting question is: if we know that n points are generated in an interval, where do these points lie? since the distribution of the number of points only depends on the length of the interval, and not on its location, it suffices to determine this for an interval starting at 0. let this interval be [0, a]. we start with the simplest case, where there is one point in [0, a]: suppose that n([0, a]) = 1. then, for 0 < s < a:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2178,  5875,  3160,  2003,  1024,  2065,  2057,  2113,  2008,
         1050,  2685,  2024,  7013,  1999,  2019, 13483,  1010,  2073,  2079,
         2122,  2685,  4682,  1029,  2144,  1996,  4353,  1997,  1996,  2193,
         1997,  2685,  2069,  9041,  2006,  1996,  3091,  1997,  1996, 13483,
         1010,  1998,  2025,  2006,  2049,  3295,  1010,  2009, 10514, 26989,
         9623,  2000,  5646,  2023,  2005,  2019, 13483,  3225,  2012,  1014,
         1012,  2292,  2023, 13483,  2022,  1031,  1014,  1010,  1037,  1033,
         1012,  2057,  2707,  2007,  1996, 21304,  2553,  1010,  2073,  2045,
         2003,  2028,  2391,  1999,  1031,  1014,  1010,  1037,  1033,  1024,
         6814,  2008,  1050,  1006,  1031,  1014,  1010,  1037,  1033,  1007,
         1027,  1015,  1012,  2059,  1010,  2005,  1014,  1026,  1055,  1026,
         1037,  1024,   102])"
1262,1,"['interval', 'random variable', 'event', 'random', 'uniformly distributed', 'conditional', 'variable']", The onedimensional Poisson process,seg_165,"we find that conditional on the event {n([0, a]) = 1}, the random variable x1 is uniformly distributed over the interval [0, a].",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2057,  2424,  2008, 18462,  2006,  1996,  2724,  1063,  1050,
         1006,  1031,  1014,  1010,  1037,  1033,  1007,  1027,  1015,  1065,
         1010,  1996,  6721,  8023,  1060,  2487,  2003, 27423,  5500,  2058,
         1996, 13483,  1031,  1014,  1010,  1037,  1033,  1012,   102])"
1263,0,[], The onedimensional Poisson process,seg_165,"now suppose that it is given that there are two points in [0, a]: n([0, a]) = 2. in a way similar to what we did for one point, we can show that (see exercise 12.12)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([ 101, 2085, 6814, 2008, 2009, 2003, 2445, 2008, 2045, 2024, 2048, 2685,
        1999, 1031, 1014, 1010, 1037, 1033, 1024, 1050, 1006, 1031, 1014, 1010,
        1037, 1033, 1007, 1027, 1016, 1012, 1999, 1037, 2126, 2714, 2000, 2054,
        2057, 2106, 2005, 2028, 2391, 1010, 2057, 2064, 2265, 2008, 1006, 2156,
        6912, 2260, 1012, 2260, 1007,  102])"
1264,1,"['function', 'random', 'random variables', 'uniformly distributed', 'independent random variables', 'variables', 'joint', 'independent']", The onedimensional Poisson process,seg_165,"now recall the result of exercise 9.17: if u1 and u2 are two independent random variables, both uniformly distributed over [0, a], then the joint distribution function of v = min(u1, u2) and z = max(u1, u2) is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2085,  9131,  1996,  2765,  1997,  6912,  1023,  1012,  2459,
         1024,  2065,  1057,  2487,  1998, 23343,  2024,  2048,  2981,  6721,
        10857,  1010,  2119, 27423,  5500,  2058,  1031,  1014,  1010,  1037,
         1033,  1010,  2059,  1996,  4101,  4353,  3853,  1997,  1058,  1027,
         8117,  1006,  1057,  2487,  1010, 23343,  1007,  1998,  1062,  1027,
         4098,  1006,  1057,  2487,  1010, 23343,  1007,  2003,  2445,  2011,
          102])"
1265,1,"['uniformly distributed', 'independent']", The onedimensional Poisson process,seg_165,"thus we have found that, if we forget about their order, the two points in [0, a] are independent and uniformly distributed over [0, a]. with somewhat more work, this generalizes to an arbitrary number of points, and we arrive at the following property.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  2947,  2057,  2031,  2179,  2008,  1010,  2065,  2057,  5293,
         2055,  2037,  2344,  1010,  1996,  2048,  2685,  1999,  1031,  1014,
         1010,  1037,  1033,  2024,  2981,  1998, 27423,  5500,  2058,  1031,
         1014,  1010,  1037,  1033,  1012,  2007,  5399,  2062,  2147,  1010,
         2023,  2236, 10057,  2000,  2019, 15275,  2193,  1997,  2685,  1010,
         1998,  2057,  7180,  2012,  1996,  2206,  3200,  1012,   102])"
1266,1,"['location', 'interval', 'locations', 'uniform distribution', 'poisson', 'poisson process', 'process', 'distribution']", The onedimensional Poisson process,seg_165,"location of the points, given their number. given that the poisson process has n points in the interval [a, b], the locations of these points are independently distributed, each with a uniform distribution on [a, b].",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2028, 22172,  6132, 19301, 13433, 24077,  2832])","tensor([  101,  3295,  1997,  1996,  2685,  1010,  2445,  2037,  2193,  1012,
         2445,  2008,  1996, 13433, 24077,  2832,  2038,  1050,  2685,  1999,
         1996, 13483,  1031,  1037,  1010,  1038,  1033,  1010,  1996,  5269,
         1997,  2122,  2685,  2024,  9174,  5500,  1010,  2169,  2007,  1037,
         6375,  4353,  2006,  1031,  1037,  1010,  1038,  1033,  1012,   102])"
1267,1,"['set', 'homogeneity', 'poisson', 'poisson process', 'process', 'distribution', 'poisson distribution']", Higherdimensional Poisson processes,seg_167,"our definition of the one-dimensional poisson process, starting with the interarrival times, does not generalize easily, because it is based on the ordering of the real numbers. however, we can easily extend the assumptions of independence, homogeneity, and the poisson distribution property. to do this we need a higher-dimensional version of the concept of length. we denote the kdimensional volume of a set a in k-dimensional space by m(a). for instance, in the plane m(a) is the area of a, and in space m(a) is the volume of a.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  2256,  6210,  1997,  1996,  2028,  1011,  8789, 13433, 24077,
         2832,  1010,  3225,  2007,  1996,  6970,  2906,  3089, 10175,  2335,
         1010,  2515,  2025,  2236,  4697,  4089,  1010,  2138,  2009,  2003,
         2241,  2006,  1996, 13063,  1997,  1996,  2613,  3616,  1012,  2174,
         1010,  2057,  2064,  4089,  7949,  1996, 17568,  1997,  4336,  1010,
        24004,  6914, 20175,  2100,  1010,  1998,  1996, 13433, 24077,  4353,
         3200,  1012,  2000,  2079,  2023,  2057,  2342,  1037,  3020,  1011,
         8789,  2544,  1997,  1996,  4145,  1997,  3091,  1012,  2057, 19090,
         1996,  1047, 22172,  6132, 19301,  3872,  1997,  1037,  2275,  1037,
         1999,  1047,  1011,  8789,  2686,  2011,  1049,  1006,  1037,  1007,
         1012,  2005,  6013,  1010,  1999,  1996,  4946,  1049,  1006,  1037,
         1007,  2003,  1996,  2181,  1997,  1037,  1010,  1998,  1999,  2686,
         1049,  1006,  1037,  1007,  2003,  1996,  3872,  1997,  1037,  1012,
          102])"
1268,1,"['parameter', 'sets', 'set', 'disjoint', 'homogeneity', 'random variable', 'disjoint sets', 'independence', 'poisson', 'random', 'intensity', 'process', 'poisson process', 'variable', 'independent']", Higherdimensional Poisson processes,seg_167,"definition. the k-dimensional poisson process with intensity λ is a collection x1, x2, x3, . . . of random points having the property that if n(a) denotes the number of points in the set a, then 1. (homogeneity) the random variable n(a) has a poisson distribution with parameter λm(a). 2. (independence) for disjoint sets a1, a2, . . . , an the random variables n(a1), n(a2), . . . , n(an) are independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  6210,  1012,  1996,  1047,  1011,  8789, 13433, 24077,  2832,
         2007,  8015,  1165,  2003,  1037,  3074,  1060,  2487,  1010,  1060,
         2475,  1010,  1060,  2509,  1010,  1012,  1012,  1012,  1997,  6721,
         2685,  2383,  1996,  3200,  2008,  2065,  1050,  1006,  1037,  1007,
        14796,  1996,  2193,  1997,  2685,  1999,  1996,  2275,  1037,  1010,
         2059,  1015,  1012,  1006, 24004,  6914, 20175,  2100,  1007,  1996,
         6721,  8023,  1050,  1006,  1037,  1007,  2038,  1037, 13433, 24077,
         4353,  2007, 16381,  1165,  2213,  1006,  1037,  1007,  1012,  1016,
         1012,  1006,  4336,  1007,  2005,  4487,  2015,  5558, 18447,  4520,
        17350,  1010, 22441,  1010,  1012,  1012,  1012,  1010,  2019,  1996,
         6721, 10857,  1050,  1006, 17350,  1007,  1010,  1050,  1006, 22441,
         1007,  1010,  1012,  1012,  1012,  1010,  1050,  1006,  2019,  1007,
         2024,  2981,  1012,   102])"
1269,1,"['probability', 'locations', 'poisson', 'poisson process', 'process', 'model', 'average']", Higherdimensional Poisson processes,seg_167,quick exercise 12.3 suppose that the locations of defects in a certain type of material follow the two-dimensional poisson process model. for this material it is known that it contains on average five defects per square meter. what is the probability that a strip of length 2 meters and width 5 cm will be without defects?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  4248,  6912,  2260,  1012,  1017,  6814,  2008,  1996,  5269,
         1997, 18419,  1999,  1037,  3056,  2828,  1997,  3430,  3582,  1996,
         2048,  1011,  8789, 13433, 24077,  2832,  2944,  1012,  2005,  2023,
         3430,  2009,  2003,  2124,  2008,  2009,  3397,  2006,  2779,  2274,
        18419,  2566,  2675,  8316,  1012,  2054,  2003,  1996,  9723,  2008,
         1037,  6167,  1997,  3091,  1016,  5563,  1998,  9381,  1019,  4642,
         2097,  2022,  2302, 18419,  1029,   102])"
1270,1,"['parameter', 'set', 'locations', 'poisson', 'poisson process', 'process', 'uniformly distributed', 'distribution', 'poisson distribution']", Higherdimensional Poisson processes,seg_167,"in figure 7.4 the locations of the buildings the architect wanted to distribute over a 100-by-300-m terrain have been generated by a two-dimensional poisson process. this has been done in the following way. one can again show that given the total number of points in a set, these points are uniformly distributed over the set. this leads to the following procedure: first one generates a value n from a poisson distribution with the appropriate parameter (λ times the area), then one generates n times a point uniformly distributed over the 100- by-300 rectangle.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  1999,  3275,  1021,  1012,  1018,  1996,  5269,  1997,  1996,
         3121,  1996,  4944,  2359,  2000, 16062,  2058,  1037,  2531,  1011,
         2011,  1011,  3998,  1011,  1049,  9291,  2031,  2042,  7013,  2011,
         1037,  2048,  1011,  8789, 13433, 24077,  2832,  1012,  2023,  2038,
         2042,  2589,  1999,  1996,  2206,  2126,  1012,  2028,  2064,  2153,
         2265,  2008,  2445,  1996,  2561,  2193,  1997,  2685,  1999,  1037,
         2275,  1010,  2122,  2685,  2024, 27423,  5500,  2058,  1996,  2275,
         1012,  2023,  5260,  2000,  1996,  2206,  7709,  1024,  2034,  2028,
        19421,  1037,  3643,  1050,  2013,  1037, 13433, 24077,  4353,  2007,
         1996,  6413, 16381,  1006,  1165,  2335,  1996,  2181,  1007,  1010,
         2059,  2028, 19421,  1050,  2335,  1037,  2391, 27423,  5500,  2058,
         1996,  2531,  1011,  2011,  1011,  3998, 28667, 23395,  1012,   102])"
1271,1,"['exponentially distributed', 'poisson', 'poisson process', 'process', 'exponentially']", Higherdimensional Poisson processes,seg_167,"actually one can generate a higher-dimensional poisson process in a way that is very similar to the natural way this can be done for the one-dimensional process. directly from the definition of the one-dimensional process we see that it can be obtained by consecutively generating points with exponentially distributed gaps. we will explain a similar procedure for dimension two. for s > 0, let",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  2941,  2028,  2064,  9699,  1037,  3020,  1011,  8789, 13433,
        24077,  2832,  1999,  1037,  2126,  2008,  2003,  2200,  2714,  2000,
         1996,  3019,  2126,  2023,  2064,  2022,  2589,  2005,  1996,  2028,
         1011,  8789,  2832,  1012,  3495,  2013,  1996,  6210,  1997,  1996,
         2028,  1011,  8789,  2832,  2057,  2156,  2008,  2009,  2064,  2022,
         4663,  2011,  5486,  2135, 11717,  2685,  2007, 27258,  2135,  5500,
        16680,  1012,  2057,  2097,  4863,  1037,  2714,  7709,  2005,  9812,
         2048,  1012,  2005,  1055,  1028,  1014,  1010,  2292,   102])"
1272,1,"['poisson', 'parameter', 'poisson distribution', 'distribution']", Higherdimensional Poisson processes,seg_167,"where cs is the circular region of radius s, centered at the origin. since cs has area πs2, ms has a poisson distribution with parameter λπs2. let ri denote the distance of the ith closest point to the origin. this is illustrated in figure 12.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  2073, 20116,  2003,  1996,  8206,  2555,  1997, 12177,  1055,
         1010,  8857,  2012,  1996,  4761,  1012,  2144, 20116,  2038,  2181,
         1170,  2015,  2475,  1010,  5796,  2038,  1037, 13433, 24077,  4353,
         2007, 16381,  1165, 29731,  2015,  2475,  1012,  2292, 15544, 19090,
         1996,  3292,  1997,  1996,  2009,  2232,  7541,  2391,  2000,  1996,
         4761,  1012,  2023,  2003,  7203,  1999,  3275,  2260,  1012,  1016,
         1012,   102])"
1273,1,"['poisson', 'poisson process', 'process']", Higherdimensional Poisson processes,seg_167,note that ri is the analogue of the ith arrival time for the one-dimensional poisson process: we have in fact that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  3602,  2008, 15544,  2003,  1996, 21800,  1997,  1996,  2009,
         2232,  5508,  2051,  2005,  1996,  2028,  1011,  8789, 13433, 24077,
         2832,  1024,  2057,  2031,  1999,  2755,  2008,   102])"
1274,0,[], Higherdimensional Poisson processes,seg_167,"in other words: r12 is exp(λπ) distributed. for general i, we can similarly write",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  1999,  2060,  2616,  1024,  1054, 12521,  2003,  4654,  2361,
         1006,  1165, 29731,  1007,  5500,  1012,  2005,  2236,  1045,  1010,
         2057,  2064,  6660,  4339,   102])"
1275,1,"['gamma', 'distributions', 'gamma distributions', 'exponential', 'independent']", Higherdimensional Poisson processes,seg_167,"which means that ri2 has a gam(i, λπ) distribution—as we saw on page 157. since gamma distributions arise as sums of independent exponential distributions, we can also write",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  2029,  2965,  2008, 15544,  2475,  2038,  1037, 11721,  2213,
         1006,  1045,  1010,  1165, 29731,  1007,  4353,  1517,  2004,  2057,
         2387,  2006,  3931, 17403,  1012,  2144, 13091, 20611, 13368,  2004,
        20571,  1997,  2981, 27258, 20611,  1010,  2057,  2064,  2036,  4339,
          102])"
1276,1,"['poisson', 'random', 'random variables', 'process', 'independent', 'distribution', 'poisson process', 'variables', 'case']", Higherdimensional Poisson processes,seg_167,"where the ti are independent exp(λπ) random variables (and where r0 = 0). note that this is quite similar to the one-dimensional case. to simulate the two-dimensional poisson process from a sequence u1, u2, . . . of independent u(0, 1) random variables, one can therefore proceed as follows (recall from section 6.2 that −(1/λ) ln(ui) has an exp(λ) distribution): for i = 1, 2, . . . put",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  2073,  1996, 14841,  2024,  2981,  4654,  2361,  1006,  1165,
        29731,  1007,  6721, 10857,  1006,  1998,  2073,  1054,  2692,  1027,
         1014,  1007,  1012,  3602,  2008,  2023,  2003,  3243,  2714,  2000,
         1996,  2028,  1011,  8789,  2553,  1012,  2000, 26633,  1996,  2048,
         1011,  8789, 13433, 24077,  2832,  2013,  1037,  5537,  1057,  2487,
         1010, 23343,  1010,  1012,  1012,  1012,  1997,  2981,  1057,  1006,
         1014,  1010,  1015,  1007,  6721, 10857,  1010,  2028,  2064,  3568,
        10838,  2004,  4076,  1006,  9131,  2013,  2930,  1020,  1012,  1016,
         2008,  1597,  1006,  1015,  1013,  1165,  1007,  1048,  2078,  1006,
        21318,  1007,  2038,  2019,  4654,  2361,  1006,  1165,  1007,  4353,
         1007,  1024,  2005,  1045,  1027,  1015,  1010,  1016,  1010,  1012,
         1012,  1012,  2404,   102])"
1277,1,"['poisson', 'poisson process', 'process', 'uniformly distributed', 'independent']", Higherdimensional Poisson processes,seg_167,"this gives the distance of the ith point to the origin, and then put the point on this circle according to an angle value generated by 2πu2i−1. this is the correct way to do it, because one can show that in polar coordinates the radius and the angle of a poisson process point are independent of each other, and the angle is uniformly distributed over [0, 2π]. the latter is called the isotropy property of the poisson process.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 3020, 22172,  6132, 19301, 13433, 24077,  6194])","tensor([  101,  2023,  3957,  1996,  3292,  1997,  1996,  2009,  2232,  2391,
         2000,  1996,  4761,  1010,  1998,  2059,  2404,  1996,  2391,  2006,
         2023,  4418,  2429,  2000,  2019,  6466,  3643,  7013,  2011,  1016,
        29731,  2226,  2475,  2072, 27944,  1012,  2023,  2003,  1996,  6149,
         2126,  2000,  2079,  2009,  1010,  2138,  2028,  2064,  2265,  2008,
         1999, 11508, 12093,  1996, 12177,  1998,  1996,  6466,  1997,  1037,
        13433, 24077,  2832,  2391,  2024,  2981,  1997,  2169,  2060,  1010,
         1998,  1996,  6466,  2003, 27423,  5500,  2058,  1031,  1014,  1010,
         1016, 29731,  1033,  1012,  1996,  3732,  2003,  2170,  1996, 11163,
        13181,  7685,  3200,  1997,  1996, 13433, 24077,  2832,  1012,   102])"
1278,1,['probability'], Solutions to the quick exercises,seg_169,"12.1 the probability of exactly one call in [0, s) and no calls in [s, 2s] equals",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2260,  1012,  1015,  1996,  9723,  1997,  3599,  2028,  2655,
         1999,  1031,  1014,  1010,  1055,  1007,  1998,  2053,  4455,  1999,
         1031,  1055,  1010,  1016,  2015,  1033, 19635,   102])"
1279,1,"['probability', 'homogeneity', 'independence']", Solutions to the quick exercises,seg_169,"because of independence and homogeneity. in the same way, the probability",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2138,  1997,  4336,  1998, 24004,  6914, 20175,  2100,  1012,
         1999,  1996,  2168,  2126,  1010,  1996,  9723,   102])"
1280,0,[], Solutions to the quick exercises,seg_169,"12.2 because there are 60 seconds in a minute, we have 60λ = 330. it follows that λ = 5 1",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2260,  1012,  1016,  2138,  2045,  2024,  3438,  3823,  1999,
         1037,  3371,  1010,  2057,  2031,  3438, 29727,  1027, 14210,  1012,
         2009,  4076,  2008,  1165,  1027,  1019,  1015,   102])"
1281,1,['distribution'], Solutions to the quick exercises,seg_169,"2 . since the interarrival times have an exp(λ) distribution, the expected time between messages is 1/λ = 0.18 second.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012,  2144,  1996,  6970,  2906,  3089, 10175,  2335,
         2031,  2019,  4654,  2361,  1006,  1165,  1007,  4353,  1010,  1996,
         3517,  2051,  2090,  7696,  2003,  1015,  1013,  1165,  1027,  1014,
         1012,  2324,  2117,  1012,   102])"
1282,1,"['probability', 'intensity', 'process']", Solutions to the quick exercises,seg_169,12.3 the intensity of this process is λ = 5 per m2. the area of the strip is 2 · (1/20) = 1/10 m2. hence the probability that no defects occur in the strip is e−λ·(area of strip) = e−5·(1/10) = e−1/2 = 0.60.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2260,  1012,  1017,  1996,  8015,  1997,  2023,  2832,  2003,
         1165,  1027,  1019,  2566, 25525,  1012,  1996,  2181,  1997,  1996,
         6167,  2003,  1016,  1087,  1006,  1015,  1013,  2322,  1007,  1027,
         1015,  1013,  2184, 25525,  1012,  6516,  1996,  9723,  2008,  2053,
        18419,  5258,  1999,  1996,  6167,  2003,  1041, 22543, 29727,  1087,
         1006,  2181,  1997,  6167,  1007,  1027,  1041, 22543,  2629,  1087,
         1006,  1015,  1013,  2184,  1007,  1027,  1041, 27944,  1013,  1016,
         1027,  1014,  1012,  3438,  1012,   102])"
1283,1,"['poisson', 'poisson process', 'process', 'model']", Exercises,seg_171,"12.1 in each of the following examples, try to indicate whether the poisson process would be a good model.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1015,  1999,  2169,  1997,  1996,  2206,  4973,
         1010,  3046,  2000,  5769,  3251,  1996, 13433, 24077,  2832,  2052,
         2022,  1037,  2204,  2944,  1012,   102])"
1284,1,['states'], Exercises,seg_171,a. the times of bankruptcy of enterprises in the united states.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  1996,  2335,  1997, 10528,  1997,  9926,  1999,
         1996,  2142,  2163,  1012,   102])"
1285,0,[], Exercises,seg_171,b. the times a chicken lays its eggs.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  2335,  1037,  7975, 19764,  2049,  6763,
         1012,   102])"
1286,0,[], Exercises,seg_171,c. the times of airplane crashes in a worldwide registration.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  1996,  2335,  1997, 13297, 19119,  1999,  1037,
         4969,  8819,  1012,   102])"
1287,1,['locations'], Exercises,seg_171,d. the locations of worngly spelled words in a book.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1040,  1012,  1996,  5269,  1997,  6247, 25643, 11479,  2616,
         1999,  1037,  2338,  1012,   102])"
1288,0,['e'], Exercises,seg_171,e. the times of traffic accidents at a crossroad.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1041,  1012,  1996,  2335,  1997,  4026, 13436,  2012,  1037,
         2892,  3217,  4215,  1012,   102])"
1289,1,"['probability', 'poisson', 'distribution', 'poisson distribution']", Exercises,seg_171,12.2 the number of customers that visit a bank on a day is modeled by a poisson distribution. it is known that the probability of no customers at all is 0.00001. what is the expected number of customers?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1016,  1996,  2193,  1997,  6304,  2008,  3942,
         1037,  2924,  2006,  1037,  2154,  2003, 14440,  2011,  1037, 13433,
        24077,  4353,  1012,  2009,  2003,  2124,  2008,  1996,  9723,  1997,
         2053,  6304,  2012,  2035,  2003,  1014,  1012,  2199, 24096,  1012,
         2054,  2003,  1996,  3517,  2193,  1997,  6304,  1029,   102])"
1290,1,['distribution'], Exercises,seg_171,12.3 let n have a pois(4) distribution. what is p(n = 4)?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1017,  2292,  1050,  2031,  1037, 13433,  2483,
         1006,  1018,  1007,  4353,  1012,  2054,  2003,  1052,  1006,  1050,
         1027,  1018,  1007,  1029,   102])"
1291,1,['distribution'], Exercises,seg_171,12.4 let x have a pois(2) distribution. what is p(x ≤ 1)?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1018,  2292,  1060,  2031,  1037, 13433,  2483,
         1006,  1016,  1007,  4353,  1012,  2054,  2003,  1052,  1006,  1060,
         1608,  1015,  1007,  1029,   102])"
1292,1,"['error', 'poisson random variable', 'random variable', 'poisson', 'random', 'errors', 'expectation', 'variable']", Exercises,seg_171,"12.5 the number of errors on a hard disk is modeled as a poisson random variable with expectation one error in every mb, that is, in every 220 bytes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1019,  1996,  2193,  1997, 10697,  2006,  1037,
         2524,  9785,  2003, 14440,  2004,  1037, 13433, 24077,  6721,  8023,
         2007, 17626,  2028,  7561,  1999,  2296, 16914,  1010,  2008,  2003,
         1010,  1999,  2296, 10545, 27507,  1012,   102])"
1293,1,"['probability', 'error']", Exercises,seg_171,a. what is the probability of at least one error in a sector of 512 bytes?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2003,  1996,  9723,  1997,  2012,  2560,
         2028,  7561,  1999,  1037,  4753,  1997, 24406, 27507,  1029,   102])"
1294,0,[], Exercises,seg_171,b. the hard disk is an 18.62-gb disk drive with 39 054 015 sectors. what is,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  2524,  9785,  2003,  2019,  2324,  1012,
         5786,  1011, 16351,  9785,  3298,  2007,  4464,  5709,  2549,  5890,
         2629, 11105,  1012,  2054,  2003,   102])"
1295,1,"['probability', 'error']", Exercises,seg_171,the probability of at least one error on the hard disk?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1996, 9723, 1997, 2012, 2560, 2028, 7561, 2006, 1996, 2524, 9785,
        1029,  102])"
1296,1,"['probability', 'locations', 'poisson', 'poisson process', 'process', 'model']", Exercises,seg_171,12.6 a certain brand of copper wire has flaws about every 40 centimeters. model the locations of the flaws as a poisson process. what is the probability of two flaws in 1 meter of wire?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1020,  1037,  3056,  4435,  1997,  6967,  7318,
         2038, 21407,  2055,  2296,  2871, 18119,  1012,  2944,  1996,  5269,
         1997,  1996, 21407,  2004,  1037, 13433, 24077,  2832,  1012,  2054,
         2003,  1996,  9723,  1997,  2048, 21407,  1999,  1015,  8316,  1997,
         7318,  1029,   102])"
1297,1,"['interval', 'poisson', 'poisson process', 'process', 'model']", Exercises,seg_171,"12.7 the poisson model is sometimes used to study the flow of traffic ([15]). if the traffic can flow freely, it behaves like a poisson process. a 20-minute time interval is divided into 10-second time slots. at a certain point along the highway the number of passing cars is registered for each 10-second time slot. let nj be the number of slots in which j cars have passed for j = 0, . . . , 9. suppose that one finds",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1021,  1996, 13433, 24077,  2944,  2003,  2823,
         2109,  2000,  2817,  1996,  4834,  1997,  4026,  1006,  1031,  2321,
         1033,  1007,  1012,  2065,  1996,  4026,  2064,  4834, 10350,  1010,
         2009, 16582,  2015,  2066,  1037, 13433, 24077,  2832,  1012,  1037,
         2322,  1011,  3371,  2051, 13483,  2003,  4055,  2046,  2184,  1011,
         2117,  2051, 19832,  1012,  2012,  1037,  3056,  2391,  2247,  1996,
         3307,  1996,  2193,  1997,  4458,  3765,  2003,  5068,  2005,  2169,
         2184,  1011,  2117,  2051, 10453,  1012,  2292, 19193,  2022,  1996,
         2193,  1997, 19832,  1999,  2029,  1046,  3765,  2031,  2979,  2005,
         1046,  1027,  1014,  1010,  1012,  1012,  1012,  1010,  1023,  1012,
         6814,  2008,  2028,  4858,   102])"
1298,0,[], Exercises,seg_171,note that the total number of cars passing in these 20 minutes is 230.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  3602,  2008,  1996,  2561,  2193,  1997,  3765,  4458,  1999,
         2122,  2322,  2781,  2003, 11816,  1012,   102])"
1299,1,"['parameter', 'intensity']", Exercises,seg_171,a. what would you choose for the intensity parameter λ?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2052,  2017,  5454,  2005,  1996,  8015,
        16381,  1165,  1029,   102])"
1300,1,"['probability', 'estimates']", Exercises,seg_171,b. suppose one estimates the probability of 0 cars passing in a 10-second,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  2028, 10035,  1996,  9723,  1997,  1014,
         3765,  4458,  1999,  1037,  2184,  1011,  2117,   102])"
1301,0,[], Exercises,seg_171,time slot by n0 divided by the total number of time slots. does that (reasonably) agree with the value that follows from your answer in a?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2051, 10453,  2011,  1050,  2692,  4055,  2011,  1996,  2561,
         2193,  1997,  2051, 19832,  1012,  2515,  2008,  1006, 16286,  1007,
         5993,  2007,  1996,  3643,  2008,  4076,  2013,  2115,  3437,  1999,
         1037,  1029,   102])"
1302,1,['probability'], Exercises,seg_171,c. what would you take for the probability that 10 cars pass in a 10-second,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2054, 2052, 2017, 2202, 2005, 1996, 9723, 2008, 2184,
        3765, 3413, 1999, 1037, 2184, 1011, 2117,  102])"
1303,1,"['parameter', 'poisson random variable', 'random variable', 'poisson', 'random', 'variable']", Exercises,seg_171,12.8 let x be a poisson random variable with parameter µ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1022,  2292,  1060,  2022,  1037, 13433, 24077,
         6721,  8023,  2007, 16381,  1085,  1012,   102])"
1304,1,"['parameter', 'addition rule', 'disjoint', 'poisson', 'random', 'random variables', 'process', 'intensity', 'distribution', 'poisson distribution', 'intervals', 'variables', 'poisson process', 'independent']", Exercises,seg_171,"12.9 let y1 and y2 be independent poisson random variables with parameter µ1, respectively µ2. show that y = y1 + y2 also has a poisson distribution. instead of using the addition rule in section 11.1 as in exercise 11.2, you can prove this without doing any computations by considering the number of points of a poisson process (with intensity 1) in two disjoint intervals of length µ1 and µ2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  1023,  2292,  1061,  2487,  1998,  1061,  2475,
         2022,  2981, 13433, 24077,  6721, 10857,  2007, 16381,  1085,  2487,
         1010,  4414,  1085,  2475,  1012,  2265,  2008,  1061,  1027,  1061,
         2487,  1009,  1061,  2475,  2036,  2038,  1037, 13433, 24077,  4353,
         1012,  2612,  1997,  2478,  1996,  2804,  3627,  1999,  2930,  2340,
         1012,  1015,  2004,  1999,  6912,  2340,  1012,  1016,  1010,  2017,
         2064,  6011,  2023,  2302,  2725,  2151, 22334,  2015,  2011,  6195,
         1996,  2193,  1997,  2685,  1997,  1037, 13433, 24077,  2832,  1006,
         2007,  8015,  1015,  1007,  1999,  2048,  4487,  2015,  5558, 18447,
        14025,  1997,  3091,  1085,  2487,  1998,  1085,  2475,  1012,   102])"
1305,1,"['random variable', 'probabilities', 'random', 'distribution', 'variable']", Exercises,seg_171,"12.10 let x be a random variable with a pois(µ) distribution. show the following. if µ < 1, then the probabilities p(x = k) are strictly decreasing in k. if µ > 1, then the probabilities p(x = k) are first increasing, then decreasing (cf. figure 12.1). what happens if µ = 1?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  2184,  2292,  1060,  2022,  1037,  6721,  8023,
         2007,  1037, 13433,  2483,  1006,  1085,  1007,  4353,  1012,  2265,
         1996,  2206,  1012,  2065,  1085,  1026,  1015,  1010,  2059,  1996,
         4013,  3676, 14680,  1052,  1006,  1060,  1027,  1047,  1007,  2024,
         9975, 16922,  1999,  1047,  1012,  2065,  1085,  1028,  1015,  1010,
         2059,  1996,  4013,  3676, 14680,  1052,  1006,  1060,  1027,  1047,
         1007,  2024,  2034,  4852,  1010,  2059, 16922,  1006, 12935,  1012,
         3275,  2260,  1012,  1015,  1007,  1012,  2054,  6433,  2065,  1085,
         1027,  1015,  1029,   102])"
1306,1,"['poisson', 'poisson process', 'process', 'intensity']", Exercises,seg_171,"12.11 consider the one-dimensional poisson process with intensity λ. show that the number of points in [0, t], given that the number of points in [0, 2t] is equal to n, has a bin(n, 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2260,  1012,  2340,  5136,  1996,  2028,  1011,  8789, 13433,
        24077,  2832,  2007,  8015,  1165,  1012,  2265,  2008,  1996,  2193,
         1997,  2685,  1999,  1031,  1014,  1010,  1056,  1033,  1010,  2445,
         2008,  1996,  2193,  1997,  2685,  1999,  1031,  1014,  1010,  1016,
         2102,  1033,  2003,  5020,  2000,  1050,  1010,  2038,  1037,  8026,
         1006,  1050,  1010,  1015,   102])"
1307,1,"['events', 'event', 'intersection', 'distribution', 'independent']", Exercises,seg_171,"2 ) distribution. hint: write the event {n([0, s]) = k, n([0, 2s]) = n} as the intersection of the (independent!) events {n([0, s]) = k} and {n((s, 2s]) = n − k}.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1016, 1007, 4353, 1012, 9374, 1024, 4339, 1996, 2724, 1063, 1050,
        1006, 1031, 1014, 1010, 1055, 1033, 1007, 1027, 1047, 1010, 1050, 1006,
        1031, 1014, 1010, 1016, 2015, 1033, 1007, 1027, 1050, 1065, 2004, 1996,
        6840, 1997, 1996, 1006, 2981,  999, 1007, 2824, 1063, 1050, 1006, 1031,
        1014, 1010, 1055, 1033, 1007, 1027, 1047, 1065, 1998, 1063, 1050, 1006,
        1006, 1055, 1010, 1016, 2015, 1033, 1007, 1027, 1050, 1597, 1047, 1065,
        1012,  102])"
1308,1,"['locations', 'poisson', 'poisson process', 'process', 'distribution', 'joint', 'conditional']", Exercises,seg_171,"12.12 we consider the one-dimensional poisson process. suppose for some a > 0 it is given that there are exactly two points in [0, a], or in other words: na = 2. the goal of this exercise is to determine the joint distribution of x1 and x2, the locations of the two points, conditional on na = 2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  2260,  2057,  5136,  1996,  2028,  1011,  8789,
        13433, 24077,  2832,  1012,  6814,  2005,  2070,  1037,  1028,  1014,
         2009,  2003,  2445,  2008,  2045,  2024,  3599,  2048,  2685,  1999,
         1031,  1014,  1010,  1037,  1033,  1010,  2030,  1999,  2060,  2616,
         1024,  6583,  1027,  1016,  1012,  1996,  3125,  1997,  2023,  6912,
         2003,  2000,  5646,  1996,  4101,  4353,  1997,  1060,  2487,  1998,
         1060,  2475,  1010,  1996,  5269,  1997,  1996,  2048,  2685,  1010,
        18462,  2006,  6583,  1027,  1016,  1012,   102])"
1309,0,[], Exercises,seg_171,b. deduce from a that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1038, 1012, 2139, 8566, 3401, 2013, 1037, 2008,  102])"
1310,1,"['poisson', 'poisson process', 'intensity', 'process', 'model']", Exercises,seg_171,"12.13 walking through a meadow we encounter two kinds of flowers, daisies and dandelions. as we walk in a straight line, we model the positions of the flowers we encounter with a one-dimensional poisson process with intensity λ. it appears that about one in every four flowers is a daisy. forgetting about the dandelions, what does the process of the daisies look like? this question will be answered with the following steps.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  2410,  3788,  2083,  1037, 13244,  2057,  8087,
         2048,  7957,  1997,  4870,  1010, 18765, 14625,  1998,  4907,  9247,
         8496,  1012,  2004,  2057,  3328,  1999,  1037,  3442,  2240,  1010,
         2057,  2944,  1996,  4460,  1997,  1996,  4870,  2057,  8087,  2007,
         1037,  2028,  1011,  8789, 13433, 24077,  2832,  2007,  8015,  1165,
         1012,  2009,  3544,  2008,  2055,  2028,  1999,  2296,  2176,  4870,
         2003,  1037, 10409,  1012, 17693,  2055,  1996,  4907,  9247,  8496,
         1010,  2054,  2515,  1996,  2832,  1997,  1996, 18765, 14625,  2298,
         2066,  1029,  2023,  3160,  2097,  2022,  4660,  2007,  1996,  2206,
         4084,  1012,   102])"
1311,0,[], Exercises,seg_171,"a. let nt be the total number of flowers, xt the number of daisies, and yt",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012,  2292, 23961,  2022,  1996,  2561,  2193,  1997,
         4870,  1010,  1060,  2102,  1996,  2193,  1997, 18765, 14625,  1010,
         1998,  1061,  2102,   102])"
1312,1,"['probability', 'independent']", Exercises,seg_171,"be the number of dandelions we encounter during the first t minutes of our walk. note that xt + yt = nt. suppose that each flower is a daisy with probability 1/4, independent of the other flowers. argue that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2022,  1996,  2193,  1997,  4907,  9247,  8496,  2057,  8087,
         2076,  1996,  2034,  1056,  2781,  1997,  2256,  3328,  1012,  3602,
         2008,  1060,  2102,  1009,  1061,  2102,  1027, 23961,  1012,  6814,
         2008,  2169,  6546,  2003,  1037, 10409,  2007,  9723,  1015,  1013,
         1018,  1010,  2981,  1997,  1996,  2060,  4870,  1012,  7475,  2008,
          102])"
1313,0,[], Exercises,seg_171,by conditioning on nt and using a.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2011, 14372,  2006, 23961,  1998,  2478,  1037,  1012,   102])"
1314,1,"['disjoint', 'poisson', 'intensity', 'process', 'intervals', 'poisson process', 'independent']", Exercises,seg_171,"since it is clear that the numbers of daisies that we encounter in disjoint time intervals are independent, we may conclude from c that the process (xt) is again a poisson process, with intensity λ/4. one often says that the process (xt) is obtained by thinning the process (nt). in our example this corresponds to picking all the dandelions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2144,  2009,  2003,  3154,  2008,  1996,  3616,  1997, 18765,
        14625,  2008,  2057,  8087,  1999,  4487,  2015,  5558, 18447,  2051,
        14025,  2024,  2981,  1010,  2057,  2089, 16519,  2013,  1039,  2008,
         1996,  2832,  1006,  1060,  2102,  1007,  2003,  2153,  1037, 13433,
        24077,  2832,  1010,  2007,  8015,  1165,  1013,  1018,  1012,  2028,
         2411,  2758,  2008,  1996,  2832,  1006,  1060,  2102,  1007,  2003,
         4663,  2011,  4857,  5582,  1996,  2832,  1006, 23961,  1007,  1012,
         1999,  2256,  2742,  2023, 14788,  2000,  8130,  2035,  1996,  4907,
         9247,  8496,  1012,   102])"
1315,1,"['expectations', 'random variable', 'distributions', 'random', 'random variables', 'expectation', 'distribution', 'variables', 'variable']", Exercises,seg_171,"12.14 in this exercise we look at a simple example of random variables xn that have the property that their distributions converge to the distribution of a random variable x as n → ∞, while it is not true that their expectations converge to the expectation of x . let for n = 1, 2, . . . the random variables xn be defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2260,  1012,  2403,  1999,  2023,  6912,  2057,  2298,  2012,
         1037,  3722,  2742,  1997,  6721, 10857,  1060,  2078,  2008,  2031,
         1996,  3200,  2008,  2037, 20611, 28314,  2000,  1996,  4353,  1997,
         1037,  6721,  8023,  1060,  2004,  1050,  1585,  1601,  1010,  2096,
         2009,  2003,  2025,  2995,  2008,  2037, 10908, 28314,  2000,  1996,
        17626,  1997,  1060,  1012,  2292,  2005,  1050,  1027,  1015,  1010,
         1016,  1010,  1012,  1012,  1012,  1996,  6721, 10857,  1060,  2078,
         2022,  4225,  2011,   102])"
1316,1,"['probability', 'random variable', 'random', 'variable']", Exercises,seg_171,a. let x be the random variable that is equal to 0 with probability 1. show,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2292, 1060, 2022, 1996, 6721, 8023, 2008, 2003, 5020,
        2000, 1014, 2007, 9723, 1015, 1012, 2265,  102])"
1317,1,"['function', 'probability', 'functions', 'probability mass function', 'mass function']", Exercises,seg_171,that for all a the probability mass functions pxn(a) of the xn converge to the probability mass function px(a) of x as n → ∞. note that e[x ]=0.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2008,  2005,  2035,  1037,  1996,  9723,  3742,  4972,  1052,
         2595,  2078,  1006,  1037,  1007,  1997,  1996,  1060,  2078, 28314,
         2000,  1996,  9723,  3742,  3853,  1052,  2595,  1006,  1037,  1007,
         1997,  1060,  2004,  1050,  1585,  1601,  1012,  3602,  2008,  1041,
         1031,  1060,  1033,  1027,  1014,  1012,   102])"
1318,1,"['outcomes', 'factors', 'experiments', 'independent', 'observations', 'probabilistic', 'independent random variables', 'model', 'law of large numbers', 'variation', 'results', 'measuring', 'random variables', 'random', 'experiment', 'distribution', 'measurements', 'variables']", The law of large numbers,seg_173,"for many experiments and observations concerning natural phenomena—such as measuring the speed of light—one finds that performing the procedure twice under (what seem) identical conditions results in two different outcomes. uncontrollable factors cause “random” variation. in practice one tries to overcome this as follows: the experiment is repeated a number of times and the results are averaged in some way. in this chapter we will see why this works so well, using a model for repeated measurements. we view them as a sequence of independent random variables, each with the same unknown distribution. it is a probabilistic fact that from such a sequence—in principle—any feature of the distribution can be recovered. this is a consequence of the law of large numbers.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  2005,  2116,  7885,  1998,  9420,  7175,  3019, 13352,  1517,
         2107,  2004,  9854,  1996,  3177,  1997,  2422,  1517,  2028,  4858,
         2008,  4488,  1996,  7709,  3807,  2104,  1006,  2054,  4025,  1007,
         7235,  3785,  3463,  1999,  2048,  2367, 13105,  1012,  4895,  8663,
        13181,  4571,  3468,  5876,  3426,  1523,  6721,  1524,  8386,  1012,
         1999,  3218,  2028,  5363,  2000,  9462,  2023,  2004,  4076,  1024,
         1996,  7551,  2003,  5567,  1037,  2193,  1997,  2335,  1998,  1996,
         3463,  2024, 11398,  1999,  2070,  2126,  1012,  1999,  2023,  3127,
         2057,  2097,  2156,  2339,  2023,  2573,  2061,  2092,  1010,  2478,
         1037,  2944,  2005,  5567, 11702,  1012,  2057,  3193,  2068,  2004,
         1037,  5537,  1997,  2981,  6721, 10857,  1010,  2169,  2007,  1996,
         2168,  4242,  4353,  1012,  2009,  2003,  1037,  4013,  3676, 27965,
         4588,  2755,  2008,  2013,  2107,  1037,  5537,  1517,  1999,  6958,
         1517,  2151,  3444,  1997,  1996,  4353,  2064,  2022,  6757,  1012,
         2023,  2003,  1037,  9509,  1997,  1996,  2375,  1997,  2312,  3616,
         1012,   102])"
1319,1,"['variability', 'inequality', 'experimental', 'levels', 'statistical', 'measurements', 'combination']", Averages vary less,seg_175,"scientists and engineers involved in experimental work have known for centuries that more accurate answers are obtained when measurements or experiments are repeated a number of times and one averages the individual outcomes.1 for example, if you read a description of a.a. michelson’s work done in 1879 to determine the speed of light, you would find that for each value he collected, repeated measurements at several levels were performed. in an article in statistical science describing his work ([18]), r.j. mackay and r.w. oldford state: “it is clear that michelson appreciated the power of averaging to reduce variability in measurement.” we shall see that we can understand this reduction using only what we have learned so far about probability in combination with a simple inequality called chebyshev’s inequality.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  6529,  1998,  6145,  2920,  1999,  6388,  2147,  2031,  2124,
         2005,  4693,  2008,  2062,  8321,  6998,  2024,  4663,  2043, 11702,
         2030,  7885,  2024,  5567,  1037,  2193,  1997,  2335,  1998,  2028,
        20185,  1996,  3265, 13105,  1012,  1015,  2005,  2742,  1010,  2065,
         2017,  3191,  1037,  6412,  1997,  1037,  1012,  1037,  1012,  8709,
         3385,  1521,  1055,  2147,  2589,  1999,  7449,  2000,  5646,  1996,
         3177,  1997,  2422,  1010,  2017,  2052,  2424,  2008,  2005,  2169,
         3643,  2002,  5067,  1010,  5567, 11702,  2012,  2195,  3798,  2020,
         2864,  1012,  1999,  2019,  3720,  1999,  7778,  2671,  7851,  2010,
         2147,  1006,  1031,  2324,  1033,  1007,  1010,  1054,  1012,  1046,
         1012, 17090,  1998,  1054,  1012,  1059,  1012,  2214,  3877,  2110,
         1024,  1523,  2009,  2003,  3154,  2008,  8709,  3385, 12315,  1996,
         2373,  1997, 14985,  2000,  5547, 28436,  1999, 10903,  1012,  1524,
         2057,  4618,  2156,  2008,  2057,  2064,  3305,  2023,  7312,  2478,
         2069,  2054,  2057,  2031,  4342,  2061,  2521,  2055,  9723,  1999,
         5257,  2007,  1037,  3722, 16440,  2170, 18178,  3762,  4095,  6777,
         1521,  1055, 16440,  1012,   102])"
1320,1,"['random', 'random variables', 'experiment', 'measurement', 'variables']", Averages vary less,seg_175,"throughout this chapter we consider a sequence of random variables x1, x2, x3, . . . . you should think of xi as the result of the ith repetition of a particular measurement or experiment. we confine ourselves to the situation where",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  2802,  2023,  3127,  2057,  5136,  1037,  5537,  1997,  6721,
        10857,  1060,  2487,  1010,  1060,  2475,  1010,  1060,  2509,  1010,
         1012,  1012,  1012,  1012,  2017,  2323,  2228,  1997,  8418,  2004,
         1996,  2765,  1997,  1996,  2009,  2232, 23318,  1997,  1037,  3327,
        10903,  2030,  7551,  1012,  2057,  9530, 23460,  9731,  2000,  1996,
         3663,  2073,   102])"
1321,1,"['outcomes', 'outcome', 'independent and identically distributed sequence', 'experiments', 'independent', 'random variable', 'standard deviation', 'function', 'deviation', 'random variables', 'expectation', 'standard', 'random', 'experiment', 'distribution', 'variables', 'variable']", Averages vary less,seg_175,"experimental conditions of subsequent experiments are identical, and the outcome of any one experiment does not influence the outcomes of others. under those circumstances, the random variables of the sequence are independent, and all have the same distribution, and we therefore call x1, x2, x3, . . . an independent and identically distributed sequence. we shall denote the distribution function of each random variable xi by f , its expectation by µ, and the standard deviation by σ.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  6388,  3785,  1997,  4745,  7885,  2024,  7235,  1010,  1998,
         1996,  9560,  1997,  2151,  2028,  7551,  2515,  2025,  3747,  1996,
        13105,  1997,  2500,  1012,  2104,  2216,  6214,  1010,  1996,  6721,
        10857,  1997,  1996,  5537,  2024,  2981,  1010,  1998,  2035,  2031,
         1996,  2168,  4353,  1010,  1998,  2057,  3568,  2655,  1060,  2487,
         1010,  1060,  2475,  1010,  1060,  2509,  1010,  1012,  1012,  1012,
         2019,  2981,  1998,  7235,  2135,  5500,  5537,  1012,  2057,  4618,
        19090,  1996,  4353,  3853,  1997,  2169,  6721,  8023,  8418,  2011,
         1042,  1010,  2049, 17626,  2011,  1085,  1010,  1998,  1996,  3115,
        24353,  2011,  1173,  1012,   102])"
1322,1,"['random', 'random variables', 'variables', 'average']", Averages vary less,seg_175,the average of the first n random variables in the sequence is,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  1996,  2779,  1997,  1996,  2034,  1050,  6721, 10857,  1999,
         1996,  5537,  2003,   102])"
1323,1,"['expectations', 'linearity of expectations']", Averages vary less,seg_175,and using linearity of expectations we find:,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  1998,  2478,  7399,  3012,  1997, 10908,  2057,  2424,  1024,
          102])"
1324,1,['independence'], Averages vary less,seg_175,"by the variance-of-the-sum rule, using the independence of x1, . . . , xn,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  2011,  1996, 23284,  1011,  1997,  1011,  1996,  1011,  7680,
         3627,  1010,  2478,  1996,  4336,  1997,  1060,  2487,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1010,   102])"
1325,0,[], Averages vary less,seg_175,this establishes the following rule.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([20185,  8137,  2625])","tensor([  101,  2023, 21009,  1996,  2206,  3627,  1012,   102])"
1326,1,"['variance', 'random', 'random variables', 'expectation', 'independent random variables', 'variables', 'average', 'independent']", Averages vary less,seg_175,"expectation and variance of an average. if x̄n is the average of n independent random variables with the same expectation µ and variance σ2, then",tensor(1),"tensor([0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101, 17626,  1998, 23284,  1997,  2019,  2779,  1012,  2065,  1060,
         2078,  2003,  1996,  2779,  1997,  1050,  2981,  6721, 10857,  2007,
         1996,  2168, 17626,  1085,  1998, 23284,  1173,  2475,  1010,  2059,
          102])"
1327,1,"['deviation', 'factor', 'standard deviation', 'expectation', 'standard']", Averages vary less,seg_175,"the expectation of x̄n is again µ, and its standard deviation is less than that of a single xi by a factor √n; the “typical distance” from µ is √n smaller. the latter property is what michelson used to gain accuracy. to illustrate this, we analyze an example.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  1996, 17626,  1997,  1060,  2078,  2003,  2153,  1085,  1010,
         1998,  2049,  3115, 24353,  2003,  2625,  2084,  2008,  1997,  1037,
         2309,  8418,  2011,  1037,  5387,  1600,  2078,  1025,  1996,  1523,
         5171,  3292,  1524,  2013,  1085,  2003,  1600,  2078,  3760,  1012,
         1996,  3732,  3200,  2003,  2054,  8709,  3385,  2109,  2000,  5114,
        10640,  1012,  2000, 19141,  2023,  1010,  2057, 17908,  2019,  2742,
         1012,   102])"
1328,1,"['continuous', 'probability', 'random', 'random variables', 'distribution', 'variables']", Averages vary less,seg_175,"suppose the random variables x1, x2, . . . are continuous with a gam(2, 1) distribution, so with probability density:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  6814,  1996,  6721, 10857,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  2024,  7142,  2007,  1037, 11721,  2213,
         1006,  1016,  1010,  1015,  1007,  4353,  1010,  2061,  2007,  9723,
         4304,  1024,   102])"
1329,1,"['probability', 'random', 'random variables', 'distribution', 'variables', 'independent']", Averages vary less,seg_175,"recall from section 11.2 that this means that each xi is distributed as the sum of two independent exp(1) random variables. hence, sn = x1 + · · ·+xn is distributed as the sum of 2n independent exp(1) random variables, which has a gam(2n, 1) distribution, with probability density",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  9131,  2013,  2930,  2340,  1012,  1016,  2008,  2023,  2965,
         2008,  2169,  8418,  2003,  5500,  2004,  1996,  7680,  1997,  2048,
         2981,  4654,  2361,  1006,  1015,  1007,  6721, 10857,  1012,  6516,
         1010,  1055,  2078,  1027,  1060,  2487,  1009,  1087,  1087,  1087,
         1009,  1060,  2078,  2003,  5500,  2004,  1996,  7680,  1997,  1016,
         2078,  2981,  4654,  2361,  1006,  1015,  1007,  6721, 10857,  1010,
         2029,  2038,  1037, 11721,  2213,  1006,  1016,  2078,  1010,  1015,
         1007,  4353,  1010,  2007,  9723,  4304,   102])"
1330,1,"['probability', 'distribution']", Averages vary less,seg_175,"this is the probability density of the gam(2n, n) distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([20185,  8137,  2625])","tensor([  101,  2023,  2003,  1996,  9723,  4304,  1997,  1996, 11721,  2213,
         1006,  1016,  2078,  1010,  1050,  1007,  4353,  1012,   102])"
1331,1,"['probability', 'plotting', 'densities', 'plots', 'distribution']", Averages vary less,seg_175,"so we have determined the distribution of x̄n explicitly and we can investigate what happens as n increases, for example, by plotting probability densities. in the left-hand column of figure 13.1 you see plots of fx̄ for n = 1, 2, 4, 9,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  2061,  2057,  2031,  4340,  1996,  4353,  1997,  1060,  2078,
        12045,  1998,  2057,  2064,  8556,  2054,  6433,  2004,  1050,  7457,
         1010,  2005,  2742,  1010,  2011, 20699,  9723,  7939, 24279,  1012,
         1999,  1996,  2187,  1011,  2192,  5930,  1997,  3275,  2410,  1012,
         1015,  2017,  2156, 14811,  1997, 23292,  2005,  1050,  1027,  1015,
         1010,  1016,  1010,  1018,  1010,  1023,  1010,   102])"
1332,1,"['function', 'density function', 'probability', 'probability density function', 'gamma', 'results', 'densities', 'bimodal', 'bimodal density']", Averages vary less,seg_175,"n 16, and 400 (note that for n = 1 this is just f itself). for comparison, we take as a second example a so-called bimodal density function: a density with two bumps, formally called modes. for the same values of n we determined the probability density function of x̄n (unlike the previous example, we are not concerned with the computations, just with the results). the graphs of these densities are given side by side with the gamma densities in figure 13.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  1050,  2385,  1010,  1998,  4278,  1006,  3602,  2008,  2005,
         1050,  1027,  1015,  2023,  2003,  2074,  1042,  2993,  1007,  1012,
         2005,  7831,  1010,  2057,  2202,  2004,  1037,  2117,  2742,  1037,
         2061,  1011,  2170, 12170,  5302,  9305,  4304,  3853,  1024,  1037,
         4304,  2007,  2048, 18548,  1010,  6246,  2170, 11583,  1012,  2005,
         1996,  2168,  5300,  1997,  1050,  2057,  4340,  1996,  9723,  4304,
         3853,  1997,  1060,  2078,  1006,  4406,  1996,  3025,  2742,  1010,
         2057,  2024,  2025,  4986,  2007,  1996, 22334,  2015,  1010,  2074,
         2007,  1996,  3463,  1007,  1012,  1996, 19287,  1997,  2122,  7939,
        24279,  2024,  2445,  2217,  2011,  2217,  2007,  1996, 13091,  7939,
        24279,  1999,  3275,  2410,  1012,  1015,  1012,   102])"
1333,1,"['probability', 'gamma', 'densities', 'bimodal', 'expected value']", Averages vary less,seg_175,"the graphs clearly show that, as n increases, there is “contraction” of the probability mass near the expected value µ (for the gamma densities this is 2, for the bimodal densities 2.625).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  1996, 19287,  4415,  2265,  2008,  1010,  2004,  1050,  7457,
         1010,  2045,  2003,  1523, 21963,  1524,  1997,  1996,  9723,  3742,
         2379,  1996,  3517,  3643,  1085,  1006,  2005,  1996, 13091,  7939,
        24279,  2023,  2003,  1016,  1010,  2005,  1996, 12170,  5302,  9305,
         7939, 24279,  1016,  1012, 22810,  1007,  1012,   102])"
1334,1,"['gamma', 'expected value', 'probabilities', 'case']", Averages vary less,seg_175,"quick exercise 13.1 compare the probabilities that x̄n is within 0.5 of its expected value for n = 1, 4, 16, and 400. do this for the gamma case only by estimating the probabilities from the graphs in the left-hand column of figure 13.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20185,  8137,  2625])","tensor([  101,  4248,  6912,  2410,  1012,  1015, 12826,  1996,  4013,  3676,
        14680,  2008,  1060,  2078,  2003,  2306,  1014,  1012,  1019,  1997,
         2049,  3517,  3643,  2005,  1050,  1027,  1015,  1010,  1018,  1010,
         2385,  1010,  1998,  4278,  1012,  2079,  2023,  2005,  1996, 13091,
         2553,  2069,  2011,  9765, 22835,  1996,  4013,  3676, 14680,  2013,
         1996, 19287,  1999,  1996,  2187,  1011,  2192,  5930,  1997,  3275,
         2410,  1012,  1015,  1012,   102])"
1335,1,"['probability', 'interval', 'random variable', 'random', 'deviations', 'standard', 'distribution', 'standard deviations', 'expectation', 'variable', 'probability distribution']", Chebyshevs inequality,seg_177,"the contraction of probability mass near the expectation is a consequence of the fact that, for any probability distribution, most probability mass is within a few standard deviations from the expectation. to show this we will employ the following tool, which provides a bound for the probability that the random variable y is outside the interval (e[y ] − a, e[y ] + a).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101,  1996, 21963,  1997,  9723,  3742,  2379,  1996, 17626,  2003,
         1037,  9509,  1997,  1996,  2755,  2008,  1010,  2005,  2151,  9723,
         4353,  1010,  2087,  9723,  3742,  2003,  2306,  1037,  2261,  3115,
        24353,  2015,  2013,  1996, 17626,  1012,  2000,  2265,  2023,  2057,
         2097, 12666,  1996,  2206,  6994,  1010,  2029,  3640,  1037,  5391,
         2005,  1996,  9723,  2008,  1996,  6721,  8023,  1061,  2003,  2648,
         1996, 13483,  1006,  1041,  1031,  1061,  1033,  1597,  1037,  1010,
         1041,  1031,  1061,  1033,  1009,  1037,  1007,  1012,   102])"
1336,1,"['random variable', 'random', 'inequality', 'variable']", Chebyshevs inequality,seg_177,chebyshev’s inequality. for an arbitrary random variable y and any a > 0:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101, 18178,  3762,  4095,  6777,  1521,  1055, 16440,  1012,  2005,
         2019, 15275,  6721,  8023,  1061,  1998,  2151,  1037,  1028,  1014,
         1024,   102])"
1337,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'inequality', 'discrete', 'case']", Chebyshevs inequality,seg_177,we shall derive this inequality for continuous y (the discrete case is similar). let fy be the probability density function of y . let µ denote e[y ]. then:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101,  2057,  4618, 18547,  2023, 16440,  2005,  7142,  1061,  1006,
         1996, 16246,  2553,  2003,  2714,  1007,  1012,  2292,  1042,  2100,
         2022,  1996,  9723,  4304,  3853,  1997,  1061,  1012,  2292,  1085,
        19090,  1041,  1031,  1061,  1033,  1012,  2059,  1024,   102])"
1338,1,['inequality'], Chebyshevs inequality,seg_177,"dividing both sides of the resulting inequality by a2, we obtain chebyshev’s inequality.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101, 16023,  2119,  3903,  1997,  1996,  4525, 16440,  2011, 22441,
         1010,  2057,  6855, 18178,  3762,  4095,  6777,  1521,  1055, 16440,
         1012,   102])"
1339,1,"['probability', 'deviations', 'expectation', 'standard', 'standard deviations']", Chebyshevs inequality,seg_177,denote var(y ) by σ2 and consider the probability that y is within a few standard deviations from its expectation µ:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101, 19090, 13075,  1006,  1061,  1007,  2011,  1173,  2475,  1998,
         5136,  1996,  9723,  2008,  1061,  2003,  2306,  1037,  2261,  3115,
        24353,  2015,  2013,  2049, 17626,  1085,  1024,   102])"
1340,1,['inequality'], Chebyshevs inequality,seg_177,"where k is a small integer. setting a = kσ in chebyshev’s inequality, we find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101,  2073,  1047,  2003,  1037,  2235, 16109,  1012,  4292,  1037,
         1027,  1047, 29733,  1999, 18178,  3762,  4095,  6777,  1521,  1055,
        16440,  1010,  2057,  2424,   102])"
1341,1,"['inequality', 'distributions']", Chebyshevs inequality,seg_177,"for k = 2, 3, 4 the right-hand side is 3/4, 8/9, and 15/16, respectively. this suggests that with chebyshev’s inequality we can make very strong statements. for most distributions, however, the actual value of p(|y − µ| < kσ) is even higher than the lower bound (13.1). we summarize this as a somewhat loose rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101,  2005,  1047,  1027,  1016,  1010,  1017,  1010,  1018,  1996,
         2157,  1011,  2192,  2217,  2003,  1017,  1013,  1018,  1010,  1022,
         1013,  1023,  1010,  1998,  2321,  1013,  2385,  1010,  4414,  1012,
         2023,  6083,  2008,  2007, 18178,  3762,  4095,  6777,  1521,  1055,
        16440,  2057,  2064,  2191,  2200,  2844,  8635,  1012,  2005,  2087,
        20611,  1010,  2174,  1010,  1996,  5025,  3643,  1997,  1052,  1006,
         1064,  1061,  1597,  1085,  1064,  1026,  1047, 29733,  1007,  2003,
         2130,  3020,  2084,  1996,  2896,  5391,  1006,  2410,  1012,  1015,
         1007,  1012,  2057,  7680,  7849,  4697,  2023,  2004,  1037,  5399,
         6065,  3627,  1012,   102])"
1342,1,"['probability', 'random variable', 'random', 'deviations', 'standard', 'standard deviations', 'variable']", Chebyshevs inequality,seg_177,the “µ ± a few σ” rule. most of the probability mass of a random variable is within a few standard deviations from its expectation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101,  1996,  1523,  1085,  1081,  1037,  2261,  1173,  1524,  3627,
         1012,  2087,  1997,  1996,  9723,  3742,  1997,  1037,  6721,  8023,
         2003,  2306,  1037,  2261,  3115, 24353,  2015,  2013,  2049, 17626,
         1012,   102])"
1343,1,"['inequality', 'distribution']", Chebyshevs inequality,seg_177,"quick exercise 13.2 calculate p(|y − µ| < kσ) exactly for k = 1, 2, 3, 4 when y has an exp(1) distribution and compare this with the bounds from chebyshev’s inequality.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([18178,  3762,  4095,  6777,  2015, 16440])","tensor([  101,  4248,  6912,  2410,  1012,  1016, 18422,  1052,  1006,  1064,
         1061,  1597,  1085,  1064,  1026,  1047, 29733,  1007,  3599,  2005,
         1047,  1027,  1015,  1010,  1016,  1010,  1017,  1010,  1018,  2043,
         1061,  2038,  2019,  4654,  2361,  1006,  1015,  1007,  4353,  1998,
        12826,  2023,  2007,  1996, 19202,  2013, 18178,  3762,  4095,  6777,
         1521,  1055, 16440,  1012,   102])"
1344,1,"['variance', 'independent and identically distributed sequence', 'expectation', 'inequality', 'variables', 'average', 'independent']", The law of large numbers,seg_179,"we return to the independent and identically distributed sequence of random variables x1, x2, . . . with expectation µ and variance σ2. we apply chebyshev’s inequality to the average x̄n, where we use e[x̄n] = µ and",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  2057,  2709,  2000,  1996,  2981,  1998,  7235,  2135,  5500,
         5537,  1997,  6721, 10857,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  2007, 17626,  1085,  1998, 23284,  1173,  2475,
         1012,  2057,  6611, 18178,  3762,  4095,  6777,  1521,  1055, 16440,
         2000,  1996,  2779,  1060,  2078,  1010,  2073,  2057,  2224,  1041,
         1031,  1060,  2078,  1033,  1027,  1085,  1998,   102])"
1345,0,['n'], The law of large numbers,seg_179,"the right-hand side vanishes as n goes to infinity, no matter how small ε is. this proves the following law.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  1996,  2157,  1011,  2192,  2217, 25887,  2229,  2004,  1050,
         3632,  2000, 15579,  1010,  2053,  3043,  2129,  2235,  1159,  2003,
         1012,  2023, 16481,  1996,  2206,  2375,  1012,   102])"
1346,1,"['variance', 'law of large numbers', 'random', 'random variables', 'expectation', 'independent random variables', 'variables', 'average', 'independent']", The law of large numbers,seg_179,"the law of large numbers. if x̄n is the average of n independent random variables with expectation µ and variance σ2, then for any ε > 0: lim p(|x̄n − µ| > ε) = 0. n→∞",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  1996,  2375,  1997,  2312,  3616,  1012,  2065,  1060,  2078,
         2003,  1996,  2779,  1997,  1050,  2981,  6721, 10857,  2007, 17626,
         1085,  1998, 23284,  1173,  2475,  1010,  2059,  2005,  2151,  1159,
         1028,  1014,  1024, 18525,  1052,  1006,  1064,  1060,  2078,  1597,
         1085,  1064,  1028,  1159,  1007,  1027,  1014,  1012,  1050, 30113,
        30128,   102])"
1347,1,['experimental'], The law of large numbers,seg_179,a connection with experimental work,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([ 101, 1037, 4434, 2007, 6388, 2147,  102])"
1348,1,"['vary', 'law of large numbers', 'gamma', 'estimate', 'experimental', 'gamma distribution', 'experiments', 'distribution', 'expectation', 'measurements', 'average']", The law of large numbers,seg_179,"let us try to interpret the law of large numbers from an experimenter’s perspective. imagine you conduct a series of experiments. the experimental setup is complicated and your measurements vary quite a bit around the “true” value you are after. suppose (unknown to you) your measurements have a gamma distribution, and its expectation is what you want to determine. you decide to do a certain number of measurements, say n, and to use their average as your estimate of the expectation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 1., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  2292,  2149,  3046,  2000, 17841,  1996,  2375,  1997,  2312,
         3616,  2013,  2019,  7551,  2121,  1521,  1055,  7339,  1012,  5674,
         2017,  6204,  1037,  2186,  1997,  7885,  1012,  1996,  6388, 16437,
         2003,  8552,  1998,  2115, 11702,  8137,  3243,  1037,  2978,  2105,
         1996,  1523,  2995,  1524,  3643,  2017,  2024,  2044,  1012,  6814,
         1006,  4242,  2000,  2017,  1007,  2115, 11702,  2031,  1037, 13091,
         4353,  1010,  1998,  2049, 17626,  2003,  2054,  2017,  2215,  2000,
         5646,  1012,  2017,  5630,  2000,  2079,  1037,  3056,  2193,  1997,
        11702,  1010,  2360,  1050,  1010,  1998,  2000,  2224,  2037,  2779,
         2004,  2115, 10197,  1997,  1996, 17626,  1012,   102])"
1349,1,"['simulation', 'results', 'expectation', 'distribution', 'measurements', 'average']", The law of large numbers,seg_179,"we can simulate all this, and figure 13.2 shows the results of a simulation, where we chose the same gam(2, 1) distribution, i.e., with expectation µ = 2. we anticipated that you might want to do as many as 500 measurements, so we generated realizations for x1, x2, . . . , x500. for each n we computed the average of the first n values and plotted these averages against n in figure 13.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  2057,  2064, 26633,  2035,  2023,  1010,  1998,  3275,  2410,
         1012,  1016,  3065,  1996,  3463,  1997,  1037, 12504,  1010,  2073,
         2057,  4900,  1996,  2168, 11721,  2213,  1006,  1016,  1010,  1015,
         1007,  4353,  1010,  1045,  1012,  1041,  1012,  1010,  2007, 17626,
         1085,  1027,  1016,  1012,  2057, 11436,  2008,  2017,  2453,  2215,
         2000,  2079,  2004,  2116,  2004,  3156, 11702,  1010,  2061,  2057,
         7013, 12393,  2015,  2005,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060, 29345,  1012,  2005,  2169,  1050,
         2057, 24806,  1996,  2779,  1997,  1996,  2034,  1050,  5300,  1998,
        27347,  2122, 20185,  2114,  1050,  1999,  3275,  2410,  1012,  1016,
         1012,   102])"
1350,1,"['probability', 'simulation', 'limit', 'expectation', 'average']", The law of large numbers,seg_179,"if your decision is to do 200 repetitions, you would find (in this simulation) a value of about 2.09 (slightly too high, but you wouldn’t know!), whereas with n = 400 you would be almost exactly correct with 1.99, and with n = 500 again a little farther away with 2.06. for another sequence of realizations, the details in the pattern that you see in figure 13.2 would be different, but the general dampening of the oscillations would still be present. this follows from what we saw earlier, that as n is larger, the probability for the average to be within a certain distance of the expectation increases, in the limit even to 1. in practice it may happen that with a large number of repetitions your average is farther from the “true” value than with a smaller number of repetitions—if it is, then you had bad luck, because the odds are in your favor.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  2065,  2115,  3247,  2003,  2000,  2079,  3263, 23318,  2015,
         1010,  2017,  2052,  2424,  1006,  1999,  2023, 12504,  1007,  1037,
         3643,  1997,  2055,  1016,  1012,  5641,  1006,  3621,  2205,  2152,
         1010,  2021,  2017,  2876,  1521,  1056,  2113,   999,  1007,  1010,
         6168,  2007,  1050,  1027,  4278,  2017,  2052,  2022,  2471,  3599,
         6149,  2007,  1015,  1012,  5585,  1010,  1998,  2007,  1050,  1027,
         3156,  2153,  1037,  2210,  8736,  2185,  2007,  1016,  1012,  5757,
         1012,  2005,  2178,  5537,  1997, 12393,  2015,  1010,  1996,  4751,
         1999,  1996,  5418,  2008,  2017,  2156,  1999,  3275,  2410,  1012,
         1016,  2052,  2022,  2367,  1010,  2021,  1996,  2236, 10620,  7406,
         1997,  1996,  9808,  6895, 20382,  2015,  2052,  2145,  2022,  2556,
         1012,  2023,  4076,  2013,  2054,  2057,  2387,  3041,  1010,  2008,
         2004,  1050,  2003,  3469,  1010,  1996,  9723,  2005,  1996,  2779,
         2000,  2022,  2306,  1037,  3056,  3292,  1997,  1996, 17626,  7457,
         1010,  1999,  1996,  5787,  2130,  2000,  1015,  1012,  1999,  3218,
         2009,  2089,  4148,  2008,  2007,  1037,  2312,  2193,  1997, 23318,
         2015,  2115,  2779,  2003,  8736,  2013,  1996,  1523,  2995,  1524,
         3643,  2084,  2007,  1037,  3760,  2193,  1997, 23318,  2015,  1517,
         2065,  2009,  2003,  1010,  2059,  2017,  2018,  2919,  6735,  1010,
         2138,  1996, 10238,  2024,  1999,  2115,  5684,  1012,   102])"
1351,0,[], The law of large numbers,seg_179,the averages may fail to converge,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  1996, 20185,  2089,  8246,  2000, 28314,   102])"
1352,1,"['simulation', 'symmetry', 'pareto', 'tails', 'cauchy', 'case', 'law of large numbers', 'probability', 'realization', 'random variables', 'expectation', 'pareto distributions', 'gamma', 'distributions', 'random', 'densities', 'distribution', 'variables', 'average']", The law of large numbers,seg_179,"the law of large numbers is valid if the expectation of the distribution f is finite. this is not always the case. for example, the cauchy and some pareto distributions have heavy tails: their probability densities do go to 0 as x becomes large, but (too) slowly.2 on the left in figure 13.3 you see the result of a simulation with cau(2, 1) random variables. as in the gamma case, the averages tend to go toward 2 (which is the point of symmetry of the cau(2, 1) density), but once in a while a very large (positive or negative) realization of an xi throws off the average.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  1996,  2375,  1997,  2312,  3616,  2003,  9398,  2065,  1996,
        17626,  1997,  1996,  4353,  1042,  2003, 10713,  1012,  2023,  2003,
         2025,  2467,  1996,  2553,  1012,  2005,  2742,  1010,  1996,  6187,
        10875,  2100,  1998,  2070, 11968, 18903, 20611,  2031,  3082, 17448,
         1024,  2037,  9723,  7939, 24279,  2079,  2175,  2000,  1014,  2004,
         1060,  4150,  2312,  1010,  2021,  1006,  2205,  1007,  3254,  1012,
         1016,  2006,  1996,  2187,  1999,  3275,  2410,  1012,  1017,  2017,
         2156,  1996,  2765,  1997,  1037, 12504,  2007,  6187,  2226,  1006,
         1016,  1010,  1015,  1007,  6721, 10857,  1012,  2004,  1999,  1996,
        13091,  2553,  1010,  1996, 20185,  7166,  2000,  2175,  2646,  1016,
         1006,  2029,  2003,  1996,  2391,  1997, 14991,  1997,  1996,  6187,
         2226,  1006,  1016,  1010,  1015,  1007,  4304,  1007,  1010,  2021,
         2320,  1999,  1037,  2096,  1037,  2200,  2312,  1006,  3893,  2030,
         4997,  1007, 12393,  1997,  2019,  8418, 11618,  2125,  1996,  2779,
         1012,   102])"
1353,1,"['simulation', 'level', 'expectation', 'plot', 'average']", The law of large numbers,seg_179,"on the right in figure 13.3 the result of a simulation with a par(0.99) distribution is shown. its expectation is infinite. in the plot we see segments where the average “drifts downward,” separated by upward jumps, which correspond to xi with extremely large values. the effect of the jumps dominates: it can be shown that x̄n grows beyond any level.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  2006,  1996,  2157,  1999,  3275,  2410,  1012,  1017,  1996,
         2765,  1997,  1037, 12504,  2007,  1037, 11968,  1006,  1014,  1012,
         5585,  1007,  4353,  2003,  3491,  1012,  2049, 17626,  2003, 10709,
         1012,  1999,  1996,  5436,  2057,  2156,  9214,  2073,  1996,  2779,
         1523, 11852,  2015, 14047,  1010,  1524,  5459,  2011, 10745, 14523,
         1010,  2029, 17254,  2000,  8418,  2007,  5186,  2312,  5300,  1012,
         1996,  3466,  1997,  1996, 14523, 29532,  1024,  2009,  2064,  2022,
         3491,  2008,  1060,  2078,  7502,  3458,  2151,  2504,  1012,   102])"
1354,1,"['simulation', 'results', 'simulations']", The law of large numbers,seg_179,"you might think that these patterns are phenomena that occur because of the short length of the simulation and that in longer simulations they would disappear after some value of n. however, the patterns as described will continue to occur and the results of a longer simulation, say to n = 5000, would not look any “better.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 2375, 1997, 2312, 3616])","tensor([  101,  2017,  2453,  2228,  2008,  2122,  7060,  2024, 13352,  2008,
         5258,  2138,  1997,  1996,  2460,  3091,  1997,  1996, 12504,  1998,
         2008,  1999,  2936, 24710,  2027,  2052, 10436,  2044,  2070,  3643,
         1997,  1050,  1012,  2174,  1010,  1996,  7060,  2004,  2649,  2097,
         3613,  2000,  5258,  1998,  1996,  3463,  1997,  1037,  2936, 12504,
         1010,  2360,  2000,  1050,  1027, 13509,  1010,  2052,  2025,  2298,
         2151,  1523,  2488,  1012,  1524,   102])"
1355,1,"['function', 'probability', 'realization', 'random variable', 'random', 'random variables', 'expectation', 'distribution', 'independent random variables', 'distribution function', 'variables', 'variable', 'independent']", Consequences of the law of large numbers,seg_181,"we continue with the sequence x1, x2, . . . of independent random variables with distribution function f . in the previous section we saw how we could recover the (unknown) expectation µ from a realization of the sequence. we shall see that in fact we can recover any feature of the probability distribution. in order to avoid unnecessary indices, as in e[x1] and p(x1 ∈ c), we introduce an additional random variable x that also has f as its distribution function.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2057,  3613,  2007,  1996,  5537,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1997,  2981,  6721, 10857,  2007,
         4353,  3853,  1042,  1012,  1999,  1996,  3025,  2930,  2057,  2387,
         2129,  2057,  2071,  8980,  1996,  1006,  4242,  1007, 17626,  1085,
         2013,  1037, 12393,  1997,  1996,  5537,  1012,  2057,  4618,  2156,
         2008,  1999,  2755,  2057,  2064,  8980,  2151,  3444,  1997,  1996,
         9723,  4353,  1012,  1999,  2344,  2000,  4468, 14203, 29299,  1010,
         2004,  1999,  1041,  1031,  1060,  2487,  1033,  1998,  1052,  1006,
         1060,  2487,  1596,  1039,  1007,  1010,  2057,  8970,  2019,  3176,
         6721,  8023,  1060,  2008,  2036,  2038,  1042,  2004,  2049,  4353,
         3853,  1012,   102])"
1356,1,"['probability', 'probability of an event', 'event']", Consequences of the law of large numbers,seg_181,recovering the probability of an event,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101, 13400,  1996,  9723,  1997,  2019,  2724,   102])"
1357,1,"['probability', 'probability of an event', 'event']", Consequences of the law of large numbers,seg_181,"suppose that, rather than being interested in µ = e[x ], we want to know the probability of an event, for example,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([ 101, 6814, 2008, 1010, 2738, 2084, 2108, 4699, 1999, 1085, 1027, 1041,
        1031, 1060, 1033, 1010, 2057, 2215, 2000, 2113, 1996, 9723, 1997, 2019,
        2724, 1010, 2005, 2742, 1010,  102])"
1358,1,"['set', 'probability', 'estimate', 'frequency', 'event', 'relative frequency']", Consequences of the law of large numbers,seg_181,"if you do not know this probability p, you would probably estimate it from how often the event {xi ∈ c} occurs in the sequence. you would use the relative frequency of xi ∈ c among x1, . . . , xn: the number of times the set c was hit divided by n. define for each i:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2065,  2017,  2079,  2025,  2113,  2023,  9723,  1052,  1010,
         2017,  2052,  2763, 10197,  2009,  2013,  2129,  2411,  1996,  2724,
         1063,  8418,  1596,  1039,  1065,  5158,  1999,  1996,  5537,  1012,
         2017,  2052,  2224,  1996,  5816,  6075,  1997,  8418,  1596,  1039,
         2426,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1024,  1996,  2193,  1997,  2335,  1996,  2275,  1039,  2001,  2718,
         4055,  2011,  1050,  1012,  9375,  2005,  2169,  1045,  1024,   102])"
1359,1,"['set', 'indicator random variable', 'random variable', 'event', 'random', 'expectation', 'indicator', 'variable']", Consequences of the law of large numbers,seg_181,"the random variable yi indicates whether the corresponding xi hits the set c; it is called an indicator random variable. in general, an indicator random variable for an event a is a random variable that is 1 when a occurs and 0 when ac occurs. using this terminology, yi is the indicator random variable of the event xi ∈ c. its expectation is given by",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  1996,  6721,  8023, 12316,  7127,  3251,  1996,  7978,  8418,
         4978,  1996,  2275,  1039,  1025,  2009,  2003,  2170,  2019, 17245,
         6721,  8023,  1012,  1999,  2236,  1010,  2019, 17245,  6721,  8023,
         2005,  2019,  2724,  1037,  2003,  1037,  6721,  8023,  2008,  2003,
         1015,  2043,  1037,  5158,  1998,  1014,  2043,  9353,  5158,  1012,
         2478,  2023, 18444,  1010, 12316,  2003,  1996, 17245,  6721,  8023,
         1997,  1996,  2724,  8418,  1596,  1039,  1012,  2049, 17626,  2003,
         2445,  2011,   102])"
1360,1,"['frequency', 'variables', 'independence', 'relative frequency', 'random', 'random variables', 'independent']", Consequences of the law of large numbers,seg_181,"using the yi, the relative frequency is expressed as (y1+y2+· · ·+yn)/n = ȳn. note that the random variables y1, y2, . . . are independent; the xi form an independent sequence, and yi is determined from xi only (this is an application of the rule about propagation of independence; see page 126).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2478,  1996, 12316,  1010,  1996,  5816,  6075,  2003,  5228,
         2004,  1006,  1061,  2487,  1009,  1061,  2475,  1009,  1087,  1087,
         1087,  1009,  1061,  2078,  1007,  1013,  1050,  1027,  1061,  2078,
         1012,  3602,  2008,  1996,  6721, 10857,  1061,  2487,  1010,  1061,
         2475,  1010,  1012,  1012,  1012,  2024,  2981,  1025,  1996,  8418,
         2433,  2019,  2981,  5537,  1010,  1998, 12316,  2003,  4340,  2013,
         8418,  2069,  1006,  2023,  2003,  2019,  4646,  1997,  1996,  3627,
         2055, 20594,  1997,  4336,  1025,  2156,  3931, 14010,  1007,  1012,
          102])"
1361,1,"['variance', 'law of large numbers', 'random', 'random variables', 'expectation', 'independent random variables', 'variables', 'average', 'independent']", Consequences of the law of large numbers,seg_181,"the law of large numbers, with p in the role of µ, can now be applied to ȳn; it is the average of n independent random variables with expectation p and variance p(1 − p), so",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  1996,  2375,  1997,  2312,  3616,  1010,  2007,  1052,  1999,
         1996,  2535,  1997,  1085,  1010,  2064,  2085,  2022,  4162,  2000,
         1061,  2078,  1025,  2009,  2003,  1996,  2779,  1997,  1050,  2981,
         6721, 10857,  2007, 17626,  1052,  1998, 23284,  1052,  1006,  1015,
         1597,  1052,  1007,  1010,  2061,   102])"
1362,1,"['probability', 'estimate']", Consequences of the law of large numbers,seg_181,"for any ε > 0. by reasoning along the same lines as in the previous section, we see that from a long sequence of realizations we can get an accurate estimate of the probability p.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2005,  2151,  1159,  1028,  1014,  1012,  2011, 13384,  2247,
         1996,  2168,  3210,  2004,  1999,  1996,  3025,  2930,  1010,  2057,
         2156,  2008,  2013,  1037,  2146,  5537,  1997, 12393,  2015,  2057,
         2064,  2131,  2019,  8321, 10197,  1997,  1996,  9723,  1052,  1012,
          102])"
1363,1,"['density function', 'probability density function', 'function', 'probability']", Consequences of the law of large numbers,seg_181,recovering the probability density function,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101, 13400,  1996,  9723,  4304,  3853,   102])"
1364,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'case']", Consequences of the law of large numbers,seg_181,"consider the continuous case, where f is the probability density function corresponding with f , and now choose c = (a − h, a + h], for some (small) positive h. by equation (13.2), for large n:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([ 101, 5136, 1996, 7142, 2553, 1010, 2073, 1042, 2003, 1996, 9723, 4304,
        3853, 7978, 2007, 1042, 1010, 1998, 2085, 5454, 1039, 1027, 1006, 1037,
        1597, 1044, 1010, 1037, 1009, 1044, 1033, 1010, 2005, 2070, 1006, 2235,
        1007, 3893, 1044, 1012, 2011, 8522, 1006, 2410, 1012, 1016, 1007, 1010,
        2005, 2312, 1050, 1024,  102])"
1365,1,"['probability', 'estimate']", Consequences of the law of large numbers,seg_181,this relationship suggests to estimate the probability density in a as follows:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2023,  3276,  6083,  2000, 10197,  1996,  9723,  4304,  1999,
         1037,  2004,  4076,  1024,   102])"
1366,1,"['interval', 'plotting', 'estimate', 'results']", Consequences of the law of large numbers,seg_181,"in figure 13.4 we have done so for h = 0.25 and two values of a: 2 and 4. rather than plotting the estimate in just one point, we use the same value for the whole interval (a− h, a + h]. this results in a vertical bar, whose area corresponds to ȳn:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  1999,  3275,  2410,  1012,  1018,  2057,  2031,  2589,  2061,
         2005,  1044,  1027,  1014,  1012,  2423,  1998,  2048,  5300,  1997,
         1037,  1024,  1016,  1998,  1018,  1012,  2738,  2084, 20699,  1996,
        10197,  1999,  2074,  2028,  2391,  1010,  2057,  2224,  1996,  2168,
         3643,  2005,  1996,  2878, 13483,  1006,  1037, 22543,  1044,  1010,
         1037,  1009,  1044,  1033,  1012,  2023,  3463,  1999,  1037,  7471,
         3347,  1010,  3005,  2181, 14788,  2000,  1061,  2078,  1024,   102])"
1367,1,"['estimates', 'random', 'random variables', 'variables', 'independent']", Consequences of the law of large numbers,seg_181,"these estimates are based on the realizations of 500 independent gam(2, 1) distributed random variables. in order to be able to see how well things came",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2122, 10035,  2024,  2241,  2006,  1996, 12393,  2015,  1997,
         3156,  2981, 11721,  2213,  1006,  1016,  1010,  1015,  1007,  5500,
         6721, 10857,  1012,  1999,  2344,  2000,  2022,  2583,  2000,  2156,
         2129,  2092,  2477,  2234,   102])"
1368,1,"['estimate', 'function', 'density function']", Consequences of the law of large numbers,seg_181,"out, the gam(2, 1) density function is shown as well; near a = 2 the estimate is very accurate, but around a = 4 it is a little too low.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2041,  1010,  1996, 11721,  2213,  1006,  1016,  1010,  1015,
         1007,  4304,  3853,  2003,  3491,  2004,  2092,  1025,  2379,  1037,
         1027,  1016,  1996, 10197,  2003,  2200,  8321,  1010,  2021,  2105,
         1037,  1027,  1018,  2009,  2003,  1037,  2210,  2205,  2659,  1012,
          102])"
1369,1,"['sets', 'estimated', 'bar graph', 'histogram']", Consequences of the law of large numbers,seg_181,"there really is no reason to derive estimated values around just a few points, as is done in figure 13.4. we might as well cover the whole x-axis with a grid (with grid size 2h) and do the computation for each point in the grid, thus covering the axis with a series of bars. the resulting bar graph is called a histogram. figure 13.5 shows the result for two sets of realizations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  2045,  2428,  2003,  2053,  3114,  2000, 18547,  4358,  5300,
         2105,  2074,  1037,  2261,  2685,  1010,  2004,  2003,  2589,  1999,
         3275,  2410,  1012,  1018,  1012,  2057,  2453,  2004,  2092,  3104,
         1996,  2878,  1060,  1011,  8123,  2007,  1037,  8370,  1006,  2007,
         8370,  2946,  1016,  2232,  1007,  1998,  2079,  1996, 22334,  2005,
         2169,  2391,  1999,  1996,  8370,  1010,  2947,  5266,  1996,  8123,
         2007,  1037,  2186,  1997,  6963,  1012,  1996,  4525,  3347, 10629,
         2003,  2170,  1037,  2010,  3406, 13113,  1012,  3275,  2410,  1012,
         1019,  3065,  1996,  2765,  2005,  2048,  4520,  1997, 12393,  2015,
         1012,   102])"
1370,1,"['histograms', 'set']", Consequences of the law of large numbers,seg_181,"the top graph is constructed from the same realizations as figure 13.4 and the bottom graph is constructed from a new set of realizations. both graphs match the general shape of the density, with some bumps and valleys that are particular for the corresponding set of realizations. in chapters 15 and 17 we shall return to histograms and treat them more elaborately.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  1996,  2327, 10629,  2003,  3833,  2013,  1996,  2168, 12393,
         2015,  2004,  3275,  2410,  1012,  1018,  1998,  1996,  3953, 10629,
         2003,  3833,  2013,  1037,  2047,  2275,  1997, 12393,  2015,  1012,
         2119, 19287,  2674,  1996,  2236,  4338,  1997,  1996,  4304,  1010,
         2007,  2070, 18548,  1998, 12467,  2008,  2024,  3327,  2005,  1996,
         7978,  2275,  1997, 12393,  2015,  1012,  1999,  9159,  2321,  1998,
         2459,  2057,  4618,  2709,  2000,  2010,  3406, 13113,  2015,  1998,
         7438,  2068,  2062,  9603,  2135,  1012,   102])"
1371,1,['histogram'], Consequences of the law of large numbers,seg_181,quick exercise 13.3 the height of the bar at x = 2 in the first histogram is 0.26. how many of the 500 realizations were between 1.75 and 2.25?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8465, 1997, 1996, 2375, 1997, 2312, 3616])","tensor([  101,  4248,  6912,  2410,  1012,  1017,  1996,  4578,  1997,  1996,
         3347,  2012,  1060,  1027,  1016,  1999,  1996,  2034,  2010,  3406,
        13113,  2003,  1014,  1012,  2656,  1012,  2129,  2116,  1997,  1996,
         3156, 12393,  2015,  2020,  2090,  1015,  1012,  4293,  1998,  1016,
         1012,  2423,  1029,   102])"
1372,0,[], Solutions to the quick exercises,seg_183,13.1 the answers you have found should be in the neighborhood of the following exact values:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2410, 1012, 1015, 1996, 6998, 2017, 2031, 2179, 2323, 2022, 1999,
        1996, 5101, 1997, 1996, 2206, 6635, 5300, 1024,  102])"
1373,1,['distribution'], Solutions to the quick exercises,seg_183,13.2 because y has an exp(1) distribution µ = 1 and var(y ) = σ2 = 1; we find for k ≥ 1:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2410,  1012,  1016,  2138,  1061,  2038,  2019,  4654,  2361,
         1006,  1015,  1007,  4353,  1085,  1027,  1015,  1998, 13075,  1006,
         1061,  1007,  1027,  1173,  2475,  1027,  1015,  1025,  2057,  2424,
         2005,  1047,  1609,  1015,  1024,   102])"
1374,0,[], Solutions to the quick exercises,seg_183,using this formula and (13.1) we obtain the following numbers:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2478, 2023, 5675, 1998, 1006, 2410, 1012, 1015, 1007, 2057, 6855,
        1996, 2206, 3616, 1024,  102])"
1375,0,[], Solutions to the quick exercises,seg_183,"13.3 the value of ȳn for this bar equals its area 0.26 · 0.5 = 0.13. the bar represents 13% of the values, or 0.13 · 500 = 65 realizations.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2410,  1012,  1017,  1996,  3643,  1997,  1061,  2078,  2005,
         2023,  3347, 19635,  2049,  2181,  1014,  1012,  2656,  1087,  1014,
         1012,  1019,  1027,  1014,  1012,  2410,  1012,  1996,  3347,  5836,
         2410,  1003,  1997,  1996,  5300,  1010,  2030,  1014,  1012,  2410,
         1087,  3156,  1027,  3515, 12393,  2015,  1012,   102])"
1376,1,"['table', 'distribution', 'distributions']", Exercises,seg_185,"13.1 verify the “µ±a few σ” rule as you did in quick exercise 13.2 for the following distributions: u(−1, 1), u(−a, a), n(0, 1), n(µ, σ2), par(3), geo(1/2). construct a table as in the answer to the quick exercise and enter a line for each distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  2410,  1012,  1015, 20410,  1996,  1523,  1085, 29657,  2050,
         2261,  1173,  1524,  3627,  2004,  2017,  2106,  1999,  4248,  6912,
         2410,  1012,  1016,  2005,  1996,  2206, 20611,  1024,  1057,  1006,
         1597,  2487,  1010,  1015,  1007,  1010,  1057,  1006,  1597,  2050,
         1010,  1037,  1007,  1010,  1050,  1006,  1014,  1010,  1015,  1007,
         1010,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  1010, 11968,
         1006,  1017,  1007,  1010, 20248,  1006,  1015,  1013,  1016,  1007,
         1012,  9570,  1037,  2795,  2004,  1999,  1996,  3437,  2000,  1996,
         4248,  6912,  1998,  4607,  1037,  2240,  2005,  2169,  4353,  1012,
          102])"
1377,1,"['errors', 'model', 'variables', 'independent']", Exercises,seg_185,"13.2 an accountant wants to simplify his bookkeeping by rounding amounts to the nearest integer, for example, rounding 99.53 and 100.46 both to 100. what is the cumulative effect of this if there are, say, 100 amounts? to study this we model the rounding errors by 100 independent u(−0.5, 0.5) random variables x1, x2, . . . , x100.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  1016,  2019, 17907,  4122,  2000, 21934, 28250,
         2010,  2338, 18321,  2011, 26939,  8310,  2000,  1996,  7205, 16109,
         1010,  2005,  2742,  1010, 26939,  5585,  1012,  5187,  1998,  2531,
         1012,  4805,  2119,  2000,  2531,  1012,  2054,  2003,  1996, 23260,
         3466,  1997,  2023,  2065,  2045,  2024,  1010,  2360,  1010,  2531,
         8310,  1029,  2000,  2817,  2023,  2057,  2944,  1996, 26939, 10697,
         2011,  2531,  2981,  1057,  1006,  1597,  2692,  1012,  1019,  1010,
         1014,  1012,  1019,  1007,  6721, 10857,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060, 18613,  1012,   102])"
1378,1,"['expectation', 'variance']", Exercises,seg_185,a. compute the expectation and the variance of the xi.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996, 17626,  1998,  1996, 23284,  1997,
         1996,  8418,  1012,   102])"
1379,1,"['probability', 'inequality']", Exercises,seg_185,b. use chebyshev’s inequality to compute an upper bound for the probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2224, 18178,  3762,  4095,  6777,  1521,  1055,
        16440,  2000, 24134,  2019,  3356,  5391,  2005,  1996,  9723,   102])"
1380,1,['error'], Exercises,seg_185,p(|x1 + x2 + · · · + x100| > 10) that the cumulative rounding error x1 + x2 + · · · + x100 exceeds 10.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1052,  1006,  1064,  1060,  2487,  1009,  1060,  2475,  1009,
         1087,  1087,  1087,  1009,  1060, 18613,  1064,  1028,  2184,  1007,
         2008,  1996, 23260, 26939,  7561,  1060,  2487,  1009,  1060,  2475,
         1009,  1087,  1087,  1087,  1009,  1060, 18613, 23651,  2184,  1012,
          102])"
1381,1,"['mean', 'error']", Exercises,seg_185,13.3 consider the situation of the previous exercise. a manager wants to know what happens to the mean absolute error n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 2410, 1012, 1017, 5136, 1996, 3663, 1997, 1996, 3025, 6912, 1012,
        1037, 3208, 4122, 2000, 2113, 2054, 6433, 2000, 1996, 2812, 7619, 7561,
        1050,  102])"
1382,1,['law of large numbers'], Exercises,seg_185,"n =1 |xi| as n becomes large. what can you say about this, applying the law of large numbers?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1050,  1027,  1015,  1064,  8418,  1064,  2004,  1050,  4150,
         2312,  1012,  2054,  2064,  2017,  2360,  2055,  2023,  1010, 11243,
         1996,  2375,  1997,  2312,  3616,  1029,   102])"
1383,1,"['indicator random variable', 'random variable', 'event', 'random', 'random variables', 'distribution', 'model', 'variables', 'indicator', 'variable', 'independent']", Exercises,seg_185,"13.4 of the voters in florida, a proportion p will vote for candidate g, and a proportion 1− p will vote for candidate b. in an election poll a number of voters are asked for whom they will vote. let xi be the indicator random variable for the event “the ith person interviewed will vote for g.” a model for the election poll is that the people to be interviewed are selected in such a way that the indicator random variables x1, x2,. . . are independent and have a ber(p) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  1018,  1997,  1996,  7206,  1999,  3516,  1010,
         1037, 10817,  1052,  2097,  3789,  2005,  4018,  1043,  1010,  1998,
         1037, 10817,  1015, 22543,  1052,  2097,  3789,  2005,  4018,  1038,
         1012,  1999,  2019,  2602,  8554,  1037,  2193,  1997,  7206,  2024,
         2356,  2005,  3183,  2027,  2097,  3789,  1012,  2292,  8418,  2022,
         1996, 17245,  6721,  8023,  2005,  1996,  2724,  1523,  1996,  2009,
         2232,  2711, 10263,  2097,  3789,  2005,  1043,  1012,  1524,  1037,
         2944,  2005,  1996,  2602,  8554,  2003,  2008,  1996,  2111,  2000,
         2022, 10263,  2024,  3479,  1999,  2107,  1037,  2126,  2008,  1996,
        17245,  6721, 10857,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  2024,  2981,  1998,  2031,  1037,  2022,  2099,  1006,
         1052,  1007,  4353,  1012,   102])"
1384,1,['inequality'], Exercises,seg_185,"a. suppose we use x̄n to predict p. according to chebyshev’s inequality, how",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  2057,  2224,  1060,  2078,  2000, 16014,
         1052,  1012,  2429,  2000, 18178,  3762,  4095,  6777,  1521,  1055,
        16440,  1010,  2129,   102])"
1385,1,['probability'], Exercises,seg_185,"large should n be (how many people should be interviewed) such that the probability that x̄n is within 0.2 of the “true” p is at least 0.9? hint: solve this first for p = 1/2, and use that p(1 − p) ≤ 1/4 for all 0 ≤ p ≤ 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2312,  2323,  1050,  2022,  1006,  2129,  2116,  2111,  2323,
         2022, 10263,  1007,  2107,  2008,  1996,  9723,  2008,  1060,  2078,
         2003,  2306,  1014,  1012,  1016,  1997,  1996,  1523,  2995,  1524,
         1052,  2003,  2012,  2560,  1014,  1012,  1023,  1029,  9374,  1024,
         9611,  2023,  2034,  2005,  1052,  1027,  1015,  1013,  1016,  1010,
         1998,  2224,  2008,  1052,  1006,  1015,  1597,  1052,  1007,  1608,
         1015,  1013,  1018,  2005,  2035,  1014,  1608,  1052,  1608,  1015,
         1012,   102])"
1386,1,['probability'], Exercises,seg_185,"c. answer the question from part a, but now the probability should be at",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 3437, 1996, 3160, 2013, 2112, 1037, 1010, 2021, 2085,
        1996, 9723, 2323, 2022, 2012,  102])"
1387,1,['probability'], Exercises,seg_185,"find an n (as small as you can) such that the probability that you predict correctly is at least 0.9, if in fact p = 0.6.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2424,  2019,  1050,  1006,  2004,  2235,  2004,  2017,  2064,
         1007,  2107,  2008,  1996,  9723,  2008,  2017, 16014, 11178,  2003,
         2012,  2560,  1014,  1012,  1023,  1010,  2065,  1999,  2755,  1052,
         1027,  1014,  1012,  1020,  1012,   102])"
1388,1,"['error', 'measurement error', 'sample', 'random', 'random variables', 'measurement', 'samples', 'model', 'variables']", Exercises,seg_185,"13.5 you are trying to determine the melting point of a new material, of which you have a large number of samples. for each sample that you measure you find a value close to the actual melting point c but corrupted with a measurement error. we model this with random variables:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  1019,  2017,  2024,  2667,  2000,  5646,  1996,
        13721,  2391,  1997,  1037,  2047,  3430,  1010,  1997,  2029,  2017,
         2031,  1037,  2312,  2193,  1997,  8168,  1012,  2005,  2169,  7099,
         2008,  2017,  5468,  2017,  2424,  1037,  3643,  2485,  2000,  1996,
         5025, 13721,  2391,  1039,  2021, 27279,  2007,  1037, 10903,  7561,
         1012,  2057,  2944,  2023,  2007,  6721, 10857,  1024,   102])"
1389,1,"['error', 'random', 'random variables', 'samples', 'inequality', 'measurements', 'variables', 'average', 'random error', 'independent']", Exercises,seg_185,"where mi is the measured value in degree kelvin, and ui is the occurring random error. it is known that e[ui] = 0 and var(ui) = 3, for each i, and that we may consider the random variables m1, m2, . . . independent. according to chebyshev’s inequality, how many samples do you need to measure to be 90% sure that the average of the measurements is within half a degree of c?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  2771,  2003,  1996,  7594,  3643,  1999,  3014, 24810,
         1010,  1998, 21318,  2003,  1996, 10066,  6721,  7561,  1012,  2009,
         2003,  2124,  2008,  1041,  1031, 21318,  1033,  1027,  1014,  1998,
        13075,  1006, 21318,  1007,  1027,  1017,  1010,  2005,  2169,  1045,
         1010,  1998,  2008,  2057,  2089,  5136,  1996,  6721, 10857, 23290,
         1010, 25525,  1010,  1012,  1012,  1012,  2981,  1012,  2429,  2000,
        18178,  3762,  4095,  6777,  1521,  1055, 16440,  1010,  2129,  2116,
         8168,  2079,  2017,  2342,  2000,  5468,  2000,  2022,  3938,  1003,
         2469,  2008,  1996,  2779,  1997,  1996, 11702,  2003,  2306,  2431,
         1037,  3014,  1997,  1039,  1029,   102])"
1390,1,['probability'], Exercises,seg_185,"13.6 the casino la bella fortuna is for sale and you think you might want to buy it, but you want to know how much money you are going to make. all the present owner can tell you is that the roulette game red or black is played about 1000 times a night, 365 days a year. each time it is played you have probability 19/37 of winning the player’s bet of 1 and probability 18/37 of having to pay the player 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  1020,  1996,  9270,  2474, 12101,  3481,  9521,
         2003,  2005,  5096,  1998,  2017,  2228,  2017,  2453,  2215,  2000,
         4965,  2009,  1010,  2021,  2017,  2215,  2000,  2113,  2129,  2172,
         2769,  2017,  2024,  2183,  2000,  2191,  1012,  2035,  1996,  2556,
         3954,  2064,  2425,  2017,  2003,  2008,  1996, 20996,  9307,  4674,
         2208,  2417,  2030,  2304,  2003,  2209,  2055,  6694,  2335,  1037,
         2305,  1010, 19342,  2420,  1037,  2095,  1012,  2169,  2051,  2009,
         2003,  2209,  2017,  2031,  9723,  2539,  1013,  4261,  1997,  3045,
         1996,  2447,  1521,  1055,  6655,  1997,  1015,  1998,  9723,  2324,
         1013,  4261,  1997,  2383,  2000,  3477,  1996,  2447,  1015,  1012,
          102])"
1391,1,['law of large numbers'], Exercises,seg_185,"explain in detail why the law of large numbers can be used to determine the income of the casino, and determine how much it is.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 4863, 1999, 6987, 2339, 1996, 2375, 1997, 2312, 3616, 2064, 2022,
        2109, 2000, 5646, 1996, 3318, 1997, 1996, 9270, 1010, 1998, 5646, 2129,
        2172, 2009, 2003, 1012,  102])"
1392,1,"['function', 'independent and identically distributed random variables', 'distributions', 'random', 'random variables', 'variables', 'independent']", Exercises,seg_185,"13.7 let x1, x2, . . . be a sequence of independent and identically distributed random variables with distributions function f . define fn as follows: for any a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  1021,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  2022,  1037,  5537,  1997,  2981,  1998,
         7235,  2135,  5500,  6721, 10857,  2007, 20611,  3853,  1042,  1012,
         9375,  1042,  2078,  2004,  4076,  1024,  2005,  2151,  1037,   102])"
1393,1,"['variance', 'law of large numbers', 'random', 'random variables', 'expectation', 'variables', 'indicator']", Exercises,seg_185,consider a fixed and introduce the appropriate indicator random variables (as in section 13.4). compute their expectation and variance and show that the law of large numbers tells us that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  5136,  1037,  4964,  1998,  8970,  1996,  6413, 17245,  6721,
        10857,  1006,  2004,  1999,  2930,  2410,  1012,  1018,  1007,  1012,
        24134,  2037, 17626,  1998, 23284,  1998,  2265,  2008,  1996,  2375,
         1997,  2312,  3616,  4136,  2149,  2008,   102])"
1394,1,"['function', 'density function', 'probability', 'probability density function', 'histogram']", Exercises,seg_185,"13.8 in section 13.4 we described how the probability density function could be recovered from a sequence x1, x2, x3, . . . . we consider the gam(2, 1) probability density discussed in the main text and a histogram bar",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  1022,  1999,  2930,  2410,  1012,  1018,  2057,
         2649,  2129,  1996,  9723,  4304,  3853,  2071,  2022,  6757,  2013,
         1037,  5537,  1060,  2487,  1010,  1060,  2475,  1010,  1060,  2509,
         1010,  1012,  1012,  1012,  1012,  2057,  5136,  1996, 11721,  2213,
         1006,  1016,  1010,  1015,  1007,  9723,  4304,  6936,  1999,  1996,
         2364,  3793,  1998,  1037,  2010,  3406, 13113,  3347,   102])"
1395,1,['estimate'], Exercises,seg_185,"−2 around the point a = 2. then f(a) = f(2) = 2e = 0.27 and the estimate for f(2) is ȳn/2h, where ȳn as in (13.3).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1597,  2475,  2105,  1996,  2391,  1037,  1027,  1016,  1012,
         2059,  1042,  1006,  1037,  1007,  1027,  1042,  1006,  1016,  1007,
         1027,  1016,  2063,  1027,  1014,  1012,  2676,  1998,  1996, 10197,
         2005,  1042,  1006,  1016,  1007,  2003,  1061,  2078,  1013,  1016,
         2232,  1010,  2073,  1061,  2078,  2004,  1999,  1006,  2410,  1012,
         1017,  1007,  1012,   102])"
1396,1,"['deviation', 'standard deviation', 'standard']", Exercises,seg_185,a. express the standard deviation of ȳn/2h in terms of n and h.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4671,  1996,  3115, 24353,  1997,  1061,  2078,
         1013,  1016,  2232,  1999,  3408,  1997,  1050,  1998,  1044,  1012,
          102])"
1397,1,"['probability', 'estimate']", Exercises,seg_185,"equality) so that the estimate is within 20% of the “true value”, with probability 80%?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9945,  1007,  2061,  2008,  1996, 10197,  2003,  2306,  2322,
         1003,  1997,  1996,  1523,  2995,  3643,  1524,  1010,  2007,  9723,
         3770,  1003,  1029,   102])"
1398,1,"['random', 'independent']", Exercises,seg_185,"13.9 let x1, x2, . . . be an independent sequence of u(−1, 1) random",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([ 101, 2410, 1012, 1023, 2292, 1060, 2487, 1010, 1060, 2475, 1010, 1012,
        1012, 1012, 2022, 2019, 2981, 5537, 1997, 1057, 1006, 1597, 2487, 1010,
        1015, 1007, 6721,  102])"
1399,0,['n'], Exercises,seg_185,variables and let tn = n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 10857,  1998,  2292, 28286,  1027,  1050,   102])"
1400,0,[], Exercises,seg_185,a. explain how this could be true.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 4863, 2129, 2023, 2071, 2022, 2995, 1012,  102])"
1401,1,"['random', 'random variables', 'variables', 'independent']", Exercises,seg_185,"13.10 let mn be the maximum of n independent u(0, 1) random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  2184,  2292, 24098,  2022,  1996,  4555,  1997,
         1050,  2981,  1057,  1006,  1014,  1010,  1015,  1007,  6721, 10857,
         1012,   102])"
1402,1,"['inequality', 'law of large numbers']", Exercises,seg_185,shev’s inequality or the law of large numbers?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2016,  2615,  1521,  1055, 16440,  2030,  1996,  2375,  1997,
         2312,  3616,  1029,   102])"
1403,1,"['probabilities', 'random variable', 'random', 'variable']", Exercises,seg_185,"13.11 for some t > 1, let x be a random variable taking the values 0 and t, with probabilities",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  2340,  2005,  2070,  1056,  1028,  1015,  1010,
         2292,  1060,  2022,  1037,  6721,  8023,  2635,  1996,  5300,  1014,
         1998,  1056,  1010,  2007,  4013,  3676, 14680,   102])"
1404,1,['probability'], Exercises,seg_185,then e[x ] = 1 and var(x) = t− 1. consider the probability p(|x − 1| > a).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2059,  1041,  1031,  1060,  1033,  1027,  1015,  1998, 13075,
         1006,  1060,  1007,  1027,  1056, 22543,  1015,  1012,  5136,  1996,
         9723,  1052,  1006,  1064,  1060,  1597,  1015,  1064,  1028,  1037,
         1007,  1012,   102])"
1405,1,"['probability', 'inequality']", Exercises,seg_185,chebyshev’s inequality gives an upper bound for this probability of 9/64. the difference is 9/64 − 1/10 ≈ 0.04. we will say that for t = 10 the chebyshev gap for x at a = 8 is 0.04.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 18178,  3762,  4095,  6777,  1521,  1055, 16440,  3957,  2019,
         3356,  5391,  2005,  2023,  9723,  1997,  1023,  1013,  4185,  1012,
         1996,  4489,  2003,  1023,  1013,  4185,  1597,  1015,  1013,  2184,
         1606,  1014,  1012,  5840,  1012,  2057,  2097,  2360,  2008,  2005,
         1056,  1027,  2184,  1996, 18178,  3762,  4095,  6777,  6578,  2005,
         1060,  2012,  1037,  1027,  1022,  2003,  1014,  1012,  5840,  1012,
          102])"
1406,0,[], Exercises,seg_185,"c. can you find a gap smaller than 0.01, smaller than 0.001, smaller than",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  2064,  2017,  2424,  1037,  6578,  3760,  2084,
         1014,  1012,  5890,  1010,  3760,  2084,  1014,  1012, 25604,  1010,
         3760,  2084,   102])"
1407,1,['inequality'], Exercises,seg_185,"d. do you think one could improve chebyshev’s inequality, i.e., find an upper",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1040,  1012,  2079,  2017,  2228,  2028,  2071,  5335, 18178,
         3762,  4095,  6777,  1521,  1055, 16440,  1010,  1045,  1012,  1041,
         1012,  1010,  2424,  2019,  3356,   102])"
1408,1,['probabilities'], Exercises,seg_185,bound closer to the true probabilities?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  5391,  3553,  2000,  1996,  2995,  4013,  3676, 14680,  1029,
          102])"
1409,1,"['law of large numbers', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_185,"13.12 (a more general law of large numbers). let x1, x2, . . . be a sequence of independent random variables, with e[xi] = µi and var(xi) = σi2, for i = 1, 2, . . . . suppose that 0 < σi2 ≤ m , for all i. let a be an arbitrary positive number.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  2260,  1006,  1037,  2062,  2236,  2375,  1997,
         2312,  3616,  1007,  1012,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  2022,  1037,  5537,  1997,  2981,  6721,
        10857,  1010,  2007,  1041,  1031,  8418,  1033,  1027,  1085,  2072,
         1998, 13075,  1006,  8418,  1007,  1027,  1173,  2072,  2475,  1010,
         2005,  1045,  1027,  1015,  1010,  1016,  1010,  1012,  1012,  1012,
         1012,  6814,  2008,  1014,  1026,  1173,  2072,  2475,  1608,  1049,
         1010,  2005,  2035,  1045,  1012,  2292,  1037,  2022,  2019, 15275,
         3893,  2193,  1012,   102])"
1410,1,['inequality'], Exercises,seg_185,a. apply chebyshev’s inequality to show that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6611, 18178,  3762,  4095,  6777,  1521,  1055,
        16440,  2000,  2265,  2008,   102])"
1411,0,[], Exercises,seg_185,b. conclude from a that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012, 16519,  2013,  1037,  2008,   102])"
1412,1,"['law of large numbers', 'case']", Exercises,seg_185,check that the law of large numbers is a special case of this result.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 4638, 2008, 1996, 2375, 1997, 2312, 3616, 2003, 1037, 2569, 2553,
        1997, 2023, 2765, 1012,  102])"
1413,1,"['normal distribution', 'variance', 'law of large numbers', 'probabilities', 'random', 'normal', 'random variables', 'limit', 'distribution', 'central limit theorem', 'variables', 'average', 'independent']", The central limit theorem,seg_187,"the central limit theorem is a refinement of the law of large numbers. for a large number of independent identically distributed random variables x1, . . . , xn, with finite variance, the average x̄n approximately has a normal distribution, no matter what the distribution of the xi is. in the first section we discuss the proper normalization of x̄n to obtain a normal distribution in the limit. in the second section we will use the central limit theorem to approximate probabilities of averages and sums of random variables.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([1996, 2430, 5787, 9872])","tensor([  101,  1996,  2430,  5787,  9872,  2003,  1037, 25416,  3170,  3672,
         1997,  1996,  2375,  1997,  2312,  3616,  1012,  2005,  1037,  2312,
         2193,  1997,  2981,  7235,  2135,  5500,  6721, 10857,  1060,  2487,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  2007, 10713,
        23284,  1010,  1996,  2779,  1060,  2078,  3155,  2038,  1037,  3671,
         4353,  1010,  2053,  3043,  2054,  1996,  4353,  1997,  1996,  8418,
         2003,  1012,  1999,  1996,  2034,  2930,  2057,  6848,  1996,  5372,
         3671,  3989,  1997,  1060,  2078,  2000,  6855,  1037,  3671,  4353,
         1999,  1996,  5787,  1012,  1999,  1996,  2117,  2930,  2057,  2097,
         2224,  1996,  2430,  5787,  9872,  2000, 15796,  4013,  3676, 14680,
         1997, 20185,  1998, 20571,  1997,  6721, 10857,  1012,   102])"
1414,1,"['density function', 'independent', 'probability density function', 'convergence', 'independent random variables', 'bimodal', 'function', 'law of large numbers', 'probability', 'random variables', 'expectation', 'variance', 'distributions', 'random', 'distribution', 'variables', 'average', 'expected value']", Standardizing averages,seg_189,"in the previous chapter we saw that the law of large numbers guarantees the convergence to µ of the average x̄n of n independent random variables x1, . . . , xn, all having the same expectation µ and variance σ2. this convergence was illustrated by figure 13.1. closer examination of this figure suggests another phenomenon: for the two distributions considered (i.e., the gam(2, 1) distribution and a bimodal distribution), the probability density function of x̄n seems to become symmetrical and bell shaped around the expected value µ as n becomes larger and larger. however, the bell collapses into a single spike at µ. nevertheless, by a proper normalization it is possible to stabilize the bell shape, as we will see.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  1999,  1996,  3025,  3127,  2057,  2387,  2008,  1996,  2375,
         1997,  2312,  3616, 21586,  1996, 19143,  2000,  1085,  1997,  1996,
         2779,  1060,  2078,  1997,  1050,  2981,  6721, 10857,  1060,  2487,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  2035,  2383,
         1996,  2168, 17626,  1085,  1998, 23284,  1173,  2475,  1012,  2023,
        19143,  2001,  7203,  2011,  3275,  2410,  1012,  1015,  1012,  3553,
         7749,  1997,  2023,  3275,  6083,  2178,  9575,  1024,  2005,  1996,
         2048, 20611,  2641,  1006,  1045,  1012,  1041,  1012,  1010,  1996,
        11721,  2213,  1006,  1016,  1010,  1015,  1007,  4353,  1998,  1037,
        12170,  5302,  9305,  4353,  1007,  1010,  1996,  9723,  4304,  3853,
         1997,  1060,  2078,  3849,  2000,  2468, 23476,  1998,  4330,  5044,
         2105,  1996,  3517,  3643,  1085,  2004,  1050,  4150,  3469,  1998,
         3469,  1012,  2174,  1010,  1996,  4330, 25938,  2046,  1037,  2309,
         9997,  2012,  1085,  1012,  6600,  1010,  2011,  1037,  5372,  3671,
         3989,  2009,  2003,  2825,  2000, 27790,  1996,  4330,  4338,  1010,
         2004,  2057,  2097,  2156,  1012,   102])"
1415,1,"['function', 'density function', 'variance', 'probability density function', 'probability', 'random', 'random variables', 'expectation', 'distribution', 'variables', 'average']", Standardizing averages,seg_189,"in order to let the distribution of x̄n settle down it seems to be a good idea to stabilize the expectation and variance. since e[x̄n] = µ for all n, only the variance needs some special attention. in figure 14.1 we depict the probability density function of the centered average x̄n−µ of gam(2, 1) random variables, multiplied by three different powers of n. in the left column we display the density of n 4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  1999,  2344,  2000,  2292,  1996,  4353,  1997,  1060,  2078,
         7392,  2091,  2009,  3849,  2000,  2022,  1037,  2204,  2801,  2000,
        27790,  1996, 17626,  1998, 23284,  1012,  2144,  1041,  1031,  1060,
         2078,  1033,  1027,  1085,  2005,  2035,  1050,  1010,  2069,  1996,
        23284,  3791,  2070,  2569,  3086,  1012,  1999,  3275,  2403,  1012,
         1015,  2057, 17120,  1996,  9723,  4304,  3853,  1997,  1996,  8857,
         2779,  1060,  2078, 22543, 29659,  1997, 11721,  2213,  1006,  1016,
         1010,  1015,  1007,  6721, 10857,  1010, 28608,  2011,  2093,  2367,
         4204,  1997,  1050,  1012,  1999,  1996,  2187,  5930,  2057,  4653,
         1996,  4304,  1997,  1050,  1018,   102])"
1416,1,['factor'], Standardizing averages,seg_189,in the right column the density of n(x̄n − µ). these figures suggest that √n is the right factor to stabilize the bell shape.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  1999,  1996,  2157,  5930,  1996,  4304,  1997,  1050,  1006,
         1060,  2078,  1597,  1085,  1007,  1012,  2122,  4481,  6592,  2008,
         1600,  2078,  2003,  1996,  2157,  5387,  2000, 27790,  1996,  4330,
         4338,  1012,   102])"
1417,1,"['average', 'variance']", Standardizing averages,seg_189,"indeed, according to the rule for the variance of an average (see page 182), we have var(x̄n) = σ2/n, and therefore for any number c:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  5262,  1010,  2429,  2000,  1996,  3627,  2005,  1996, 23284,
         1997,  2019,  2779,  1006,  2156,  3931, 17691,  1007,  1010,  2057,
         2031, 13075,  1006,  1060,  2078,  1007,  1027,  1173,  2475,  1013,
         1050,  1010,  1998,  3568,  2005,  2151,  2193,  1039,  1024,   102])"
1418,1,"['random', 'variance']", Standardizing averages,seg_189,"to stabilize the variance we therefore must choose c = √n. in fact, by choosing c = √n/σ, one standardizes the averages, i.e., the resulting random variable zn, defined by",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  2000, 27790,  1996, 23284,  2057,  3568,  2442,  5454,  1039,
         1027,  1600,  2078,  1012,  1999,  2755,  1010,  2011, 10549,  1039,
         1027,  1600,  2078,  1013,  1173,  1010,  2028,  3115, 10057,  1996,
        20185,  1010,  1045,  1012,  1041,  1012,  1010,  1996,  4525,  6721,
         8023,  1062,  2078,  1010,  4225,  2011,   102])"
1419,1,"['variance', 'random', 'random variables', 'variables', 'expected value']", Standardizing averages,seg_189,has expected value 0 and variance 1. what more can we say about the distribution of the random variables zn?,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  2038,  3517,  3643,  1014,  1998, 23284,  1015,  1012,  2054,
         2062,  2064,  2057,  2360,  2055,  1996,  4353,  1997,  1996,  6721,
        10857,  1062,  2078,  1029,   102])"
1420,1,"['density function', 'functions', 'independent', 'probability density function', 'states', 'bimodal', 'case', 'function', 'probability', 'random variables', 'expectation', 'probability density functions', 'variance', 'gamma', 'random', 'density functions', 'distribution', 'variables']", Standardizing averages,seg_189,"in case x1, x2, . . . are independent n(µ, σ2) distributed random variables, we know from section 11.2 and the rule on expectation and variance under change of units (see page 98), that zn has an n(0, 1) distribution for all n. for the gamma and bimodal random variables from section 13.1 we depicted the probability density function of zn in figure 14.2. for both examples we see that the probability density functions of the zn seem to converge to the probability density function of the n(0, 1) distribution, indicated by the dotted line. the following amazing result states that this behavior generally occurs no matter what distribution we start with.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  1999,  2553,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  2024,  2981,  1050,  1006,  1085,  1010,  1173,  2475,
         1007,  5500,  6721, 10857,  1010,  2057,  2113,  2013,  2930,  2340,
         1012,  1016,  1998,  1996,  3627,  2006, 17626,  1998, 23284,  2104,
         2689,  1997,  3197,  1006,  2156,  3931,  5818,  1007,  1010,  2008,
         1062,  2078,  2038,  2019,  1050,  1006,  1014,  1010,  1015,  1007,
         4353,  2005,  2035,  1050,  1012,  2005,  1996, 13091,  1998, 12170,
         5302,  9305,  6721, 10857,  2013,  2930,  2410,  1012,  1015,  2057,
         8212,  1996,  9723,  4304,  3853,  1997,  1062,  2078,  1999,  3275,
         2403,  1012,  1016,  1012,  2005,  2119,  4973,  2057,  2156,  2008,
         1996,  9723,  4304,  4972,  1997,  1996,  1062,  2078,  4025,  2000,
        28314,  2000,  1996,  9723,  4304,  3853,  1997,  1996,  1050,  1006,
         1014,  1010,  1015,  1007,  4353,  1010,  5393,  2011,  1996, 20384,
         2240,  1012,  1996,  2206,  6429,  2765,  2163,  2008,  2023,  5248,
         3227,  5158,  2053,  3043,  2054,  4353,  2057,  2707,  2007,  1012,
          102])"
1421,1,"['variance', 'random', 'random variables', 'limit', 'central limit theorem', 'variables', 'expected value', 'independent']", Standardizing averages,seg_189,"the central limit theorem. let x1, x2, . . . be any sequence of independent identically distributed random variables with finite positive variance. let µ be the expected value and σ2 the variance of each of the xi. for n ≥ 1, let zn be defined by",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  1996,  2430,  5787,  9872,  1012,  2292,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  2022,  2151,  5537,  1997,
         2981,  7235,  2135,  5500,  6721, 10857,  2007, 10713,  3893, 23284,
         1012,  2292,  1085,  2022,  1996,  3517,  3643,  1998,  1173,  2475,
         1996, 23284,  1997,  2169,  1997,  1996,  8418,  1012,  2005,  1050,
         1609,  1015,  1010,  2292,  1062,  2078,  2022,  4225,  2011,   102])"
1422,0,[], Standardizing averages,seg_189,then for any number a,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 3115,  6026, 20185])","tensor([ 101, 2059, 2005, 2151, 2193, 1037,  102])"
1423,1,"['function', 'normal distribution', 'standard normal distribution', 'standard normal', 'normal', 'standard', 'distribution', 'distribution function']", Standardizing averages,seg_189,"where φ is the distribution function of the n(0, 1) distribution. in words: the distribution function of zn converges to the distribution function φ of the standard normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  2073,  1176,  2003,  1996,  4353,  3853,  1997,  1996,  1050,
         1006,  1014,  1010,  1015,  1007,  4353,  1012,  1999,  2616,  1024,
         1996,  4353,  3853,  1997,  1062,  2078, 28314,  2015,  2000,  1996,
         4353,  3853,  1176,  1997,  1996,  3115,  3671,  4353,  1012,   102])"
1424,1,"['average', 'standardized']", Standardizing averages,seg_189,which is a more direct way to see that zn is the average x̄n standardized.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  2029,  2003,  1037,  2062,  3622,  2126,  2000,  2156,  2008,
         1062,  2078,  2003,  1996,  2779,  1060,  2078, 16367,  1012,   102])"
1425,1,['standardized'], Standardizing averages,seg_189,one can also write zn as a standardized sum,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  2028,  2064,  2036,  4339,  1062,  2078,  2004,  1037, 16367,
         7680,   102])"
1426,1,"['probabilities', 'random', 'random variables', 'variables', 'independent']", Standardizing averages,seg_189,in the next section we will see that this last representation of zn is very helpful when one wants to approximate probabilities of sums of independent identically distributed random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  1999,  1996,  2279,  2930,  2057,  2097,  2156,  2008,  2023,
         2197,  6630,  1997,  1062,  2078,  2003,  2200, 14044,  2043,  2028,
         4122,  2000, 15796,  4013,  3676, 14680,  1997, 20571,  1997,  2981,
         7235,  2135,  5500,  6721, 10857,  1012,   102])"
1427,1,"['probability', 'random', 'normal', 'random variables', 'densities', 'distribution', 'variables']", Standardizing averages,seg_189,"it follows that x̄n approximately has an n(µ, σ2/n) distribution; see the change-of-units rule for normal random variables on page 106. this explains the symmetrical bell shape of the probability densities in figure 13.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3115,  6026, 20185])","tensor([  101,  2009,  4076,  2008,  1060,  2078,  3155,  2038,  2019,  1050,
         1006,  1085,  1010,  1173,  2475,  1013,  1050,  1007,  4353,  1025,
         2156,  1996,  2689,  1011,  1997,  1011,  3197,  3627,  2005,  3671,
         6721, 10857,  2006,  3931, 10114,  1012,  2023,  7607,  1996, 23476,
         4330,  4338,  1997,  1996,  9723,  7939, 24279,  1999,  3275,  2410,
         1012,  1015,  1012,   102])"
1428,1,"['probability', 'probabilities', 'random', 'random variables', 'limit', 'independent', 'distribution', 'central limit theorem', 'variables', 'average', 'probability distribution']", Applications of the central limit theorem,seg_191,"the central limit theorem provides a tool to approximate the probability distribution of the average or the sum of independent identically distributed random variables. this plays an important role in applications, for instance, see sections 23.4, 24.1, 26.2, and 27.2. here we will illustrate the use of the central limit theorem to approximate probabilities of averages and sums of random variables in three examples. the first example deals with an average; the other two concern sums of random variables.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1996,  2430,  5787,  9872,  3640,  1037,  6994,  2000, 15796,
         1996,  9723,  4353,  1997,  1996,  2779,  2030,  1996,  7680,  1997,
         2981,  7235,  2135,  5500,  6721, 10857,  1012,  2023,  3248,  2019,
         2590,  2535,  1999,  5097,  1010,  2005,  6013,  1010,  2156,  5433,
         2603,  1012,  1018,  1010,  2484,  1012,  1015,  1010,  2656,  1012,
         1016,  1010,  1998,  2676,  1012,  1016,  1012,  2182,  2057,  2097,
        19141,  1996,  2224,  1997,  1996,  2430,  5787,  9872,  2000, 15796,
         4013,  3676, 14680,  1997, 20185,  1998, 20571,  1997,  6721, 10857,
         1999,  2093,  4973,  1012,  1996,  2034,  2742,  9144,  2007,  2019,
         2779,  1025,  1996,  2060,  2048,  5142, 20571,  1997,  6721, 10857,
         1012,   102])"
1429,0,[], Applications of the central limit theorem,seg_191,did we have bad luck?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 2106, 2057, 2031, 2919, 6735, 1029,  102])"
1430,1,"['probability', 'simulation', 'approximation', 'simulated', 'random', 'random variables', 'limit', 'central limit theorem', 'variables', 'expected value', 'independent']", Applications of the central limit theorem,seg_191,"in the example in section 13.3 averages of independent gam(2, 1) distributed random variables were simulated for n = 1, . . . , 500. in figure 13.2 the realization of x̄n for n = 400 is 1.99, which is almost exactly equal to the expected value 2. for n = 500 the simulation was 2.06, a little bit farther away. did we have bad luck, or is a value 2.06 or higher not unusual? to answer this question we want to compute p(x̄n ≥ 2.06). we will find an approximation of this probability using the central limit theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1999,  1996,  2742,  1999,  2930,  2410,  1012,  1017, 20185,
         1997,  2981, 11721,  2213,  1006,  1016,  1010,  1015,  1007,  5500,
         6721, 10857,  2020, 23599,  2005,  1050,  1027,  1015,  1010,  1012,
         1012,  1012,  1010,  3156,  1012,  1999,  3275,  2410,  1012,  1016,
         1996, 12393,  1997,  1060,  2078,  2005,  1050,  1027,  4278,  2003,
         1015,  1012,  5585,  1010,  2029,  2003,  2471,  3599,  5020,  2000,
         1996,  3517,  3643,  1016,  1012,  2005,  1050,  1027,  3156,  1996,
        12504,  2001,  1016,  1012,  5757,  1010,  1037,  2210,  2978,  8736,
         2185,  1012,  2106,  2057,  2031,  2919,  6735,  1010,  2030,  2003,
         1037,  3643,  1016,  1012,  5757,  2030,  3020,  2025,  5866,  1029,
         2000,  3437,  2023,  3160,  2057,  2215,  2000, 24134,  1052,  1006,
         1060,  2078,  1609,  1016,  1012,  5757,  1007,  1012,  2057,  2097,
         2424,  2019, 20167,  1997,  2023,  9723,  2478,  1996,  2430,  5787,
         9872,  1012,   102])"
1431,1,"['random', 'random variables', 'variables']", Applications of the central limit theorem,seg_191,"since the xi are gam(2, 1) random variables, µ = e[xi] = 2 and σ2 = var(xi) = 2. we find for n = 500 that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  2144,  1996,  8418,  2024, 11721,  2213,  1006,  1016,  1010,
         1015,  1007,  6721, 10857,  1010,  1085,  1027,  1041,  1031,  8418,
         1033,  1027,  1016,  1998,  1173,  2475,  1027, 13075,  1006,  8418,
         1007,  1027,  1016,  1012,  2057,  2424,  2005,  1050,  1027,  3156,
         2008,   102])"
1432,1,"['central limit theorem', 'limit']", Applications of the central limit theorem,seg_191,it now follows from the central limit theorem that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 2009, 2085, 4076, 2013, 1996, 2430, 5787, 9872, 2008,  102])"
1433,1,['probability'], Applications of the central limit theorem,seg_191,"this is close to the exact answer 0.1710881, which was obtained using the probability density of x̄n as given in section 13.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  2023,  2003,  2485,  2000,  1996,  6635,  3437,  1014,  1012,
        23841,  2620,  2620,  2487,  1010,  2029,  2001,  4663,  2478,  1996,
         9723,  4304,  1997,  1060,  2078,  2004,  2445,  1999,  2930,  2410,
         1012,  1015,  1012,   102])"
1434,1,"['probability', 'average']", Applications of the central limit theorem,seg_191,"thus we see that there is about a 17% probability that the average x̄500 is at least 0.06 above 2. since 17% is quite large, we conclude that the value 2.06 is not unusual. in other words, we did not have bad luck; n = 500 is simply not large enough to be that close. would 2.06 be unusual if n = 5000?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  2947,  2057,  2156,  2008,  2045,  2003,  2055,  1037,  2459,
         1003,  9723,  2008,  1996,  2779,  1060, 29345,  2003,  2012,  2560,
         1014,  1012,  5757,  2682,  1016,  1012,  2144,  2459,  1003,  2003,
         3243,  2312,  1010,  2057, 16519,  2008,  1996,  3643,  1016,  1012,
         5757,  2003,  2025,  5866,  1012,  1999,  2060,  2616,  1010,  2057,
         2106,  2025,  2031,  2919,  6735,  1025,  1050,  1027,  3156,  2003,
         3432,  2025,  2312,  2438,  2000,  2022,  2008,  2485,  1012,  2052,
         1016,  1012,  5757,  2022,  5866,  2065,  1050,  1027, 13509,  1029,
          102])"
1435,1,"['central limit theorem', 'limit']", Applications of the central limit theorem,seg_191,"quick exercise 14.1 show that p(x̄5000 ≥ 2.06) ≈ 0.0013, using the central limit theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  4248,  6912,  2403,  1012,  1015,  2265,  2008,  1052,  1006,
         1060, 29345,  2692,  1609,  1016,  1012,  5757,  1007,  1606,  1014,
         1012, 25604,  2509,  1010,  2478,  1996,  2430,  5787,  9872,  1012,
          102])"
1436,0,[], Applications of the central limit theorem,seg_191,rounding amounts to the nearest integer,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101, 26939,  8310,  2000,  1996,  7205, 16109,   102])"
1437,1,"['probability', 'inequality']", Applications of the central limit theorem,seg_191,"in exercise 13.2 an accountant wanted to simplify his bookkeeping by rounding amounts to the nearest integer, and you were asked to use chebyshev’s inequality to compute an upper bound for the probability",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1999,  6912,  2410,  1012,  1016,  2019, 17907,  2359,  2000,
        21934, 28250,  2010,  2338, 18321,  2011, 26939,  8310,  2000,  1996,
         7205, 16109,  1010,  1998,  2017,  2020,  2356,  2000,  2224, 18178,
         3762,  4095,  6777,  1521,  1055, 16440,  2000, 24134,  2019,  3356,
         5391,  2005,  1996,  9723,   102])"
1438,1,"['approximation', 'limit', 'distribution', 'central limit theorem', 'error']", Applications of the central limit theorem,seg_191,"that the cumulative rounding error x1 + x2 + · · · + x100 exceeds 10. this upper bound equals 1/12. in order to know the exact value of p one has to determine the distribution of the sum x1+ · · ·+x100. this is difficult, but the central limit theorem is a handy tool to get an approximation of p. clearly,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  2008,  1996, 23260, 26939,  7561,  1060,  2487,  1009,  1060,
         2475,  1009,  1087,  1087,  1087,  1009,  1060, 18613, 23651,  2184,
         1012,  2023,  3356,  5391, 19635,  1015,  1013,  2260,  1012,  1999,
         2344,  2000,  2113,  1996,  6635,  3643,  1997,  1052,  2028,  2038,
         2000,  5646,  1996,  4353,  1997,  1996,  7680,  1060,  2487,  1009,
         1087,  1087,  1087,  1009,  1060, 18613,  1012,  2023,  2003,  3697,
         1010,  2021,  1996,  2430,  5787,  9872,  2003,  1037, 18801,  6994,
         2000,  2131,  2019, 20167,  1997,  1052,  1012,  4415,  1010,   102])"
1439,1,['probability'], Applications of the central limit theorem,seg_191,"standardizing as in (14.1), for the second probability we write, with n = 100",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 3115, 6026, 2004, 1999, 1006, 2403, 1012, 1015, 1007, 1010, 2005,
        1996, 2117, 9723, 2057, 4339, 1010, 2007, 1050, 1027, 2531,  102])"
1440,1,"['random', 'random variables', 'variables']", Applications of the central limit theorem,seg_191,"the xi are u(−0.5, 0.5) random variables, µ = e[xi] = 0, and σ2 = var(xi) = 1/12, so that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1996,  8418,  2024,  1057,  1006,  1597,  2692,  1012,  1019,
         1010,  1014,  1012,  1019,  1007,  6721, 10857,  1010,  1085,  1027,
         1041,  1031,  8418,  1033,  1027,  1014,  1010,  1998,  1173,  2475,
         1027, 13075,  1006,  8418,  1007,  1027,  1015,  1013,  2260,  1010,
         2061,  2008,   102])"
1441,1,"['central limit theorem', 'limit']", Applications of the central limit theorem,seg_191,it follows from the central limit theorem that,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 2009, 4076, 2013, 1996, 2430, 5787, 9872, 2008,  102])"
1442,1,"['approximation', 'distribution', 'binomial', 'binomial distribution']", Applications of the central limit theorem,seg_191,normal approximation of the binomial distribution,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  3671, 20167,  1997,  1996,  8026, 20936,  2389,  4353,   102])"
1443,1,['probability'], Applications of the central limit theorem,seg_191,"in section 4.3 we considered the (fictitious) situation that you attend, completely unprepared, a multiple-choice exam consisting of 10 questions. we saw that the probability you will pass equals",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1999,  2930,  1018,  1012,  1017,  2057,  2641,  1996,  1006,
        23577,  1007,  3663,  2008,  2017,  5463,  1010,  3294,  4895, 28139,
        19362,  2098,  1010,  1037,  3674,  1011,  3601, 11360,  5398,  1997,
         2184,  3980,  1012,  2057,  2387,  2008,  1996,  9723,  2017,  2097,
         3413, 19635,   102])"
1444,1,['independent'], Applications of the central limit theorem,seg_191,where x—being the sum of 10 independent ber(1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 2073, 1060, 1517, 2108, 1996, 7680, 1997, 2184, 2981, 2022, 2099,
        1006, 1015,  102])"
1445,1,['random'], Applications of the central limit theorem,seg_191,"4 ) random variables—has a bin(10, 1",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1018,  1007,  6721, 10857,  1517,  2038,  1037,  8026,  1006,
         2184,  1010,  1015,   102])"
1446,1,"['approximation', 'random variable', 'random', 'random variables', 'limit', 'distribution', 'central limit theorem', 'variables', 'variable', 'independent']", Applications of the central limit theorem,seg_191,"4 ) distribution. as we saw in chapter 4 it is rather easy, but tedious, to calculate p(x ≥ 6). although n is small, we investigate what the central limit theorem will yield as an approximation of p(x ≥ 6). recall that a random variable with a bin(n, p) distribution can be written as the sum of n independent ber(p) distributed random variables r1, . . . , rn. substituting n = 10, µ = p = 1/4, and σ2 = p(1 − p) = 3/16, it follows from the central limit theorem that",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1018,  1007,  4353,  1012,  2004,  2057,  2387,  1999,  3127,
         1018,  2009,  2003,  2738,  3733,  1010,  2021,  6945,  6313,  1010,
         2000, 18422,  1052,  1006,  1060,  1609,  1020,  1007,  1012,  2348,
         1050,  2003,  2235,  1010,  2057,  8556,  2054,  1996,  2430,  5787,
         9872,  2097, 10750,  2004,  2019, 20167,  1997,  1052,  1006,  1060,
         1609,  1020,  1007,  1012,  9131,  2008,  1037,  6721,  8023,  2007,
         1037,  8026,  1006,  1050,  1010,  1052,  1007,  4353,  2064,  2022,
         2517,  2004,  1996,  7680,  1997,  1050,  2981,  2022,  2099,  1006,
         1052,  1007,  5500,  6721, 10857,  1054,  2487,  1010,  1012,  1012,
         1012,  1010, 29300,  1012,  4942, 21532,  1050,  1027,  2184,  1010,
         1085,  1027,  1052,  1027,  1015,  1013,  1018,  1010,  1998,  1173,
         2475,  1027,  1052,  1006,  1015,  1597,  1052,  1007,  1027,  1017,
         1013,  2385,  1010,  2009,  4076,  2013,  1996,  2430,  5787,  9872,
         2008,   102])"
1447,1,['approximation'], Applications of the central limit theorem,seg_191,"the number 0.0052 is quite a poor approximation for the true value 0.0197. note however, that we could also argue that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1996,  2193,  1014,  1012,  4002, 25746,  2003,  3243,  1037,
         3532, 20167,  2005,  1996,  2995,  3643,  1014,  1012,  5890,  2683,
         2581,  1012,  3602,  2174,  1010,  2008,  2057,  2071,  2036,  7475,
         2008,   102])"
1448,1,['approximation'], Applications of the central limit theorem,seg_191,"which gives an approximation that is too large! a better approach lies somewhere in the middle, as the following quick exercise illustrates.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  2029,  3957,  2019, 20167,  2008,  2003,  2205,  2312,   999,
         1037,  2488,  3921,  3658,  4873,  1999,  1996,  2690,  1010,  2004,
         1996,  2206,  4248,  6912, 24899,  1012,   102])"
1449,1,"['central limit theorem', 'limit']", Applications of the central limit theorem,seg_191,quick exercise 14.2 apply the central limit theorem to find 0.0143 as an approximation to p(x ≥ 5 1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  4248,  6912,  2403,  1012,  1016,  6611,  1996,  2430,  5787,
         9872,  2000,  2424,  1014,  1012,  5890, 23777,  2004,  2019, 20167,
         2000,  1052,  1006,  1060,  1609,  1019,  1015,   102])"
1450,0,[], Applications of the central limit theorem,seg_191,"1), this also provides",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 1015, 1007, 1010, 2023, 2036, 3640,  102])"
1451,1,['approximation'], Applications of the central limit theorem,seg_191,an approximation of p(x ≥ 6).,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  2019, 20167,  1997,  1052,  1006,  1060,  1609,  1020,  1007,
         1012,   102])"
1452,0,['n'], Applications of the central limit theorem,seg_191,how large should n be?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 2129, 2312, 2323, 1050, 2022, 1029,  102])"
1453,1,"['continuous', 'normal distribution', 'approximation', 'convergence', 'central limit theorem', 'normal', 'limit', 'distribution', 'bimodal', 'discrete distribution', 'discrete', 'asymmetric']", Applications of the central limit theorem,seg_191,"in view of the previous examples one might raise the question of how large n should be to have a good approximation when using the central limit theorem. in other words, how fast is the convergence to the normal distribution? this is a difficult question to answer in general. for instance, in the third example one might initially be tempted to think that the approximation was quite poor, but after taking the fact into account that we approximate a discrete distribution by a continuous one we obtain a considerable improvement of the approximation, as was illustrated in quick exercise 14.2. for another example, see figure 14.2. here we see that the convergence is slightly faster for the bimodal distribution than for the gam(2, 1) distribution, which is due to the fact that the gam(2, 1) is rather asymmetric.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1999,  3193,  1997,  1996,  3025,  4973,  2028,  2453,  5333,
         1996,  3160,  1997,  2129,  2312,  1050,  2323,  2022,  2000,  2031,
         1037,  2204, 20167,  2043,  2478,  1996,  2430,  5787,  9872,  1012,
         1999,  2060,  2616,  1010,  2129,  3435,  2003,  1996, 19143,  2000,
         1996,  3671,  4353,  1029,  2023,  2003,  1037,  3697,  3160,  2000,
         3437,  1999,  2236,  1012,  2005,  6013,  1010,  1999,  1996,  2353,
         2742,  2028,  2453,  3322,  2022, 16312,  2000,  2228,  2008,  1996,
        20167,  2001,  3243,  3532,  1010,  2021,  2044,  2635,  1996,  2755,
         2046,  4070,  2008,  2057, 15796,  1037, 16246,  4353,  2011,  1037,
         7142,  2028,  2057,  6855,  1037,  6196,  7620,  1997,  1996, 20167,
         1010,  2004,  2001,  7203,  1999,  4248,  6912,  2403,  1012,  1016,
         1012,  2005,  2178,  2742,  1010,  2156,  3275,  2403,  1012,  1016,
         1012,  2182,  2057,  2156,  2008,  1996, 19143,  2003,  3621,  5514,
         2005,  1996, 12170,  5302,  9305,  4353,  2084,  2005,  1996, 11721,
         2213,  1006,  1016,  1010,  1015,  1007,  4353,  1010,  2029,  2003,
         2349,  2000,  1996,  2755,  2008,  1996, 11721,  2213,  1006,  1016,
         1010,  1015,  1007,  2003,  2738,  2004, 24335, 12589,  1012,   102])"
1454,1,"['bimodal', 'approximation', 'discrete', 'asymmetric']", Applications of the central limit theorem,seg_191,"in general the approximation might be poor when n is small, when the distribution of the xi is asymmetric, bimodal, or discrete, or when the value a in",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([  101,  1999,  2236,  1996, 20167,  2453,  2022,  3532,  2043,  1050,
         2003,  2235,  1010,  2043,  1996,  4353,  1997,  1996,  8418,  2003,
         2004, 24335, 12589,  1010, 12170,  5302,  9305,  1010,  2030, 16246,
         1010,  2030,  2043,  1996,  3643,  1037,  1999,   102])"
1455,1,['distribution'], Applications of the central limit theorem,seg_191,is far from the center of the distribution of the xi.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 1996, 2430, 5787, 9872])","tensor([ 101, 2003, 2521, 2013, 1996, 2415, 1997, 1996, 4353, 1997, 1996, 8418,
        1012,  102])"
1456,1,"['central limit theorem', 'limit']", Solutions to the quick exercises,seg_193,"14.1 in the same way we approximated p(x̄n ≥ 2.06) using the central limit theorem, we have that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2403,  1012,  1015,  1999,  1996,  2168,  2126,  2057, 15796,
         2094,  1052,  1006,  1060,  2078,  1609,  1016,  1012,  5757,  1007,
         2478,  1996,  2430,  5787,  9872,  1010,  2057,  2031,  2008,   102])"
1457,1,"['probability', 'mean', 'central limit theorem', 'limit']", Solutions to the quick exercises,seg_193,"which is approximately equal to 1−φ(3) = 0.0013, thanks to the central limit theorem. because we think that 0.13% is a small probability, to find 2.06 as a value for x̄5000 would mean that you really had bad luck!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2029,  2003,  3155,  5020,  2000,  1015, 22543, 29736,  1006,
         1017,  1007,  1027,  1014,  1012, 25604,  2509,  1010,  4283,  2000,
         1996,  2430,  5787,  9872,  1012,  2138,  2057,  2228,  2008,  1014,
         1012,  2410,  1003,  2003,  1037,  2235,  9723,  1010,  2000,  2424,
         1016,  1012,  5757,  2004,  1037,  3643,  2005,  1060, 29345,  2692,
         2052,  2812,  2008,  2017,  2428,  2018,  2919,  6735,   999,   102])"
1458,1,"['probability', 'central limit theorem', 'limit']", Solutions to the quick exercises,seg_193,"we have seen that using the central limit theorem to approximate p(x ≥ 6) gives an underestimate of this probability, while using the central limit theorem to p(x > 5) gives an overestimation. since 52",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2057,  2031,  2464,  2008,  2478,  1996,  2430,  5787,  9872,
         2000, 15796,  1052,  1006,  1060,  1609,  1020,  1007,  3957,  2019,
         2104,  4355, 21499,  1997,  2023,  9723,  1010,  2096,  2478,  1996,
         2430,  5787,  9872,  2000,  1052,  1006,  1060,  1028,  1019,  1007,
         3957,  2019,  2058,  4355,  9581,  3508,  1012,  2144,  4720,   102])"
1459,0,[], Solutions to the quick exercises,seg_193,approximation will be better.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101, 20167,  2097,  2022,  2488,  1012,   102])"
1460,1,"['variance', 'random', 'random variables', 'limit', 'central limit theorem', 'variables', 'expected value', 'independent']", Exercises,seg_195,"14.1 let x1, x2, . . . , x144 be independent identically distributed random variables, each with expected value µ = e[xi] = 2, and variance σ2 = var(xi) = 4. approximate p(x1 + x2 + · · · + x144 > 144), using the central limit theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  1015,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060, 16932,  2549,  2022,  2981,
         7235,  2135,  5500,  6721, 10857,  1010,  2169,  2007,  3517,  3643,
         1085,  1027,  1041,  1031,  8418,  1033,  1027,  1016,  1010,  1998,
        23284,  1173,  2475,  1027, 13075,  1006,  8418,  1007,  1027,  1018,
         1012, 15796,  1052,  1006,  1060,  2487,  1009,  1060,  2475,  1009,
         1087,  1087,  1087,  1009,  1060, 16932,  2549,  1028, 14748,  1007,
         1010,  2478,  1996,  2430,  5787,  9872,  1012,   102])"
1461,1,"['function', 'density function', 'probability', 'probability density function', 'random', 'random variables', 'variables', 'independent']", Exercises,seg_195,"14.2 let x1, x2, . . . , x625 be independent identically distributed random variables, with probability density function f given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  1016,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2575, 17788,  2022,  2981,
         7235,  2135,  5500,  6721, 10857,  1010,  2007,  9723,  4304,  3853,
         1042,  2445,  2011,   102])"
1462,1,"['central limit theorem', 'limit']", Exercises,seg_195,use the central limit theorem to approximate p(x1 + x2 + · · · + x625 < 170).,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2224,  1996,  2430,  5787,  9872,  2000, 15796,  1052,  1006,
         1060,  2487,  1009,  1060,  2475,  1009,  1087,  1087,  1087,  1009,
         1060,  2575, 17788,  1026, 10894,  1007,  1012,   102])"
1463,1,"['probability', 'central limit theorem', 'limit', 'inequality']", Exercises,seg_195,14.3 in exercise 13.4 a you were asked to use chebyshev’s inequality to determine how large n should be (how many people should be interviewed) so that the probability that x̄n is within 0.2 of the “true” p is at least 0.9. here p is the proportion of the voters in florida who will vote for g (and 1 − p is the proportion of the voters who will vote for b). how large should n at least be according to the central limit theorem?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  1017,  1999,  6912,  2410,  1012,  1018,  1037,
         2017,  2020,  2356,  2000,  2224, 18178,  3762,  4095,  6777,  1521,
         1055, 16440,  2000,  5646,  2129,  2312,  1050,  2323,  2022,  1006,
         2129,  2116,  2111,  2323,  2022, 10263,  1007,  2061,  2008,  1996,
         9723,  2008,  1060,  2078,  2003,  2306,  1014,  1012,  1016,  1997,
         1996,  1523,  2995,  1524,  1052,  2003,  2012,  2560,  1014,  1012,
         1023,  1012,  2182,  1052,  2003,  1996, 10817,  1997,  1996,  7206,
         1999,  3516,  2040,  2097,  3789,  2005,  1043,  1006,  1998,  1015,
         1597,  1052,  2003,  1996, 10817,  1997,  1996,  7206,  2040,  2097,
         3789,  2005,  1038,  1007,  1012,  2129,  2312,  2323,  1050,  2012,
         2560,  2022,  2429,  2000,  1996,  2430,  5787,  9872,  1029,   102])"
1464,1,"['probability', 'approximation', 'normal approximation', 'random', 'normal', 'random variables', 'model', 'variables', 'independent']", Exercises,seg_195,"14.4 in the single-server queue model from section 6.4, ti is the time between the arrival of the (i − 1)th and ith customers. furthermore, one of the model assumptions is that the ti are independent, exp(0.5) distributed random variables. in section 11.2 we saw that the probability p(t1 + · · · + t30 ≤ 60) of the 30th customer arriving within an hour at the well is equal to 0.542. find the normal approximation of this probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  1018,  1999,  1996,  2309,  1011,  8241, 24240,
         2944,  2013,  2930,  1020,  1012,  1018,  1010, 14841,  2003,  1996,
         2051,  2090,  1996,  5508,  1997,  1996,  1006,  1045,  1597,  1015,
         1007, 16215,  1998,  2009,  2232,  6304,  1012,  7297,  1010,  2028,
         1997,  1996,  2944, 17568,  2003,  2008,  1996, 14841,  2024,  2981,
         1010,  4654,  2361,  1006,  1014,  1012,  1019,  1007,  5500,  6721,
        10857,  1012,  1999,  2930,  2340,  1012,  1016,  2057,  2387,  2008,
         1996,  9723,  1052,  1006,  1056,  2487,  1009,  1087,  1087,  1087,
         1009,  1056, 14142,  1608,  3438,  1007,  1997,  1996, 13293,  8013,
         7194,  2306,  2019,  3178,  2012,  1996,  2092,  2003,  5020,  2000,
         1014,  1012,  5139,  2475,  1012,  2424,  1996,  3671, 20167,  1997,
         2023,  9723,  1012,   102])"
1465,1,"['random variable', 'random', 'variable']", Exercises,seg_195,"14.5 let x be a bin(n, p) distributed random variable. show that the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2403, 1012, 1019, 2292, 1060, 2022, 1037, 8026, 1006, 1050, 1010,
        1052, 1007, 5500, 6721, 8023, 1012, 2265, 2008, 1996,  102])"
1466,1,['variable'], Exercises,seg_195,random variable x − np,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  6721,  8023,  1060,  1597, 27937,   102])"
1467,1,"['standard normal', 'normal', 'standard', 'distribution']", Exercises,seg_195,has a distribution that is approximately standard normal.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 2038, 1037, 4353, 2008, 2003, 3155, 3115, 3671, 1012,  102])"
1468,1,"['random variable', 'random', 'variable']", Exercises,seg_195,"14.6 again, as in the previous exercise, let x be a bin(n, p) distributed random variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 2403, 1012, 1020, 2153, 1010, 2004, 1999, 1996, 3025, 6912, 1010,
        2292, 1060, 2022, 1037, 8026, 1006, 1050, 1010, 1052, 1007, 5500, 6721,
        8023, 1012,  102])"
1469,1,"['central limit theorem', 'approximation', 'limit']", Exercises,seg_195,and p = 1/4. use the central limit theorem to give an approximation of p(x ≤ 25) and p(x < 26).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1998,  1052,  1027,  1015,  1013,  1018,  1012,  2224,  1996,
         2430,  5787,  9872,  2000,  2507,  2019, 20167,  1997,  1052,  1006,
         1060,  1608,  2423,  1007,  1998,  1052,  1006,  1060,  1026,  2656,
         1007,  1012,   102])"
1470,1,"['probability', 'approximation']", Exercises,seg_195,limit theorem to give an approximation of this probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  5787,  9872,  2000,  2507,  2019, 20167,  1997,  2023,  9723,
         1012,   102])"
1471,1,"['variance', 'random', 'random variables', 'independent random variables', 'inequality', 'variables', 'independent']", Exercises,seg_195,"14.7 let x1, x2, . . . , xn be n independent random variables, each with expected value µ and finite positive variance σ2. use chebyshev’s inequality to show that for any a > 0 one has",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  1021,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,  1050,  2981,
         6721, 10857,  1010,  2169,  2007,  3517,  3643,  1085,  1998, 10713,
         3893, 23284,  1173,  2475,  1012,  2224, 18178,  3762,  4095,  6777,
         1521,  1055, 16440,  2000,  2265,  2008,  2005,  2151,  1037,  1028,
         1014,  2028,  2038,   102])"
1472,0,[], Exercises,seg_195,use this fact to explain the occurrence of a single spike in the left column of figure 14.1.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2224,  2023,  2755,  2000,  4863,  1996, 14404,  1997,  1037,
         2309,  9997,  1999,  1996,  2187,  5930,  1997,  3275,  2403,  1012,
         1015,  1012,   102])"
1473,1,"['random variable', 'random', 'random variables', 'variables', 'variable', 'independent']", Exercises,seg_195,"14.8 let x1, x2, . . . be a sequence of independent n(0, 1) distributed random variables. for n = 1, 2, . . . , let yn be the random variable, defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  1022,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  2022,  1037,  5537,  1997,  2981,  1050,
         1006,  1014,  1010,  1015,  1007,  5500,  6721, 10857,  1012,  2005,
         1050,  1027,  1015,  1010,  1016,  1010,  1012,  1012,  1012,  1010,
         2292,  1061,  2078,  2022,  1996,  6721,  8023,  1010,  4225,  2011,
          102])"
1474,0,[], Exercises,seg_195,b. one can show—using integration by parts—that e[xi4] = 3. deduce from,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])",tensor([11110]),"tensor([ 101, 1038, 1012, 2028, 2064, 2265, 1517, 2478, 8346, 2011, 3033, 1517,
        2008, 1041, 1031, 8418, 2549, 1033, 1027, 1017, 1012, 2139, 8566, 3401,
        2013,  102])"
1475,1,"['central limit theorem', 'limit']", Exercises,seg_195,c. use the central limit theorem to approximate p(y100 > 110).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2224,  1996,  2430,  5787,  9872,  2000, 15796,
         1052,  1006,  1061, 18613,  1028,  7287,  1007,  1012,   102])"
1476,1,"['variance', 'random variable', 'random', 'expected value', 'variable']", Exercises,seg_195,"14.9 a factory produces links for heavy metal chains. the research lab of the factory models the length (in cm) of a link by the random variable x , with expected value e[x ] = 5 and variance var(x) = 0.04. the length of a link is defined in such a way that the length of a chain is equal to the sum of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  1023,  1037,  4713,  7137,  6971,  2005,  3082,
         3384,  8859,  1012,  1996,  2470,  6845,  1997,  1996,  4713,  4275,
         1996,  3091,  1006,  1999,  4642,  1007,  1997,  1037,  4957,  2011,
         1996,  6721,  8023,  1060,  1010,  2007,  3517,  3643,  1041,  1031,
         1060,  1033,  1027,  1019,  1998, 23284, 13075,  1006,  1060,  1007,
         1027,  1014,  1012,  5840,  1012,  1996,  3091,  1997,  1037,  4957,
         2003,  4225,  1999,  2107,  1037,  2126,  2008,  1996,  3091,  1997,
         1037,  4677,  2003,  5020,  2000,  1996,  7680,  1997,   102])"
1477,0,[], Exercises,seg_195,"the lengths of its links. the factory sells chains of 50 meters; to be on the safe side 1002 links are used for such chains. the factory guarantees that the chain is not shorter than 50 meters. if by chance a chain is too short, the customer is reimbursed, and a new chain is given for free.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1996, 10742,  1997,  2049,  6971,  1012,  1996,  4713, 15187,
         8859,  1997,  2753,  5563,  1025,  2000,  2022,  2006,  1996,  3647,
         2217,  2531,  2475,  6971,  2024,  2109,  2005,  2107,  8859,  1012,
         1996,  4713, 21586,  2008,  1996,  4677,  2003,  2025,  7820,  2084,
         2753,  5563,  1012,  2065,  2011,  3382,  1037,  4677,  2003,  2205,
         2460,  1010,  1996,  8013,  2003, 24964, 14905, 28393,  2094,  1010,
         1998,  1037,  2047,  4677,  2003,  2445,  2005,  2489,  1012,   102])"
1478,1,"['probability', 'estimate']", Exercises,seg_195,a. give an estimate of the probability that for a chain of at least 50 meters,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2507,  2019, 10197,  1997,  1996,  9723,  2008,
         2005,  1037,  4677,  1997,  2012,  2560,  2753,  5563,   102])"
1479,1,['percentage'], Exercises,seg_195,more than 1002 links are needed. for what percentage of the chains does the factory have to reimburse clients and provide free chains?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2062,  2084,  2531,  2475,  6971,  2024,  2734,  1012,  2005,
         2054,  7017,  1997,  1996,  8859,  2515,  1996,  4713,  2031,  2000,
        24964, 14905, 28393,  7846,  1998,  3073,  2489,  8859,  1029,   102])"
1480,0,[], Exercises,seg_195,b. the sales department of the factory notices that it has to hand out a,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  4341,  2533,  1997,  1996,  4713, 14444,
         2008,  2009,  2038,  2000,  2192,  2041,  1037,   102])"
1481,1,['expectation'], Exercises,seg_195,"lot of free chains and asks the research lab what is wrong. after further investigations the research lab reports to the sales department that the expectation value 5 is incorrect, and that the correct value is 4.99 (cm). do you think that it was necessary to report such a minor change of this value?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2843,  1997,  2489,  8859,  1998,  5176,  1996,  2470,  6845,
         2054,  2003,  3308,  1012,  2044,  2582,  9751,  1996,  2470,  6845,
         4311,  2000,  1996,  4341,  2533,  2008,  1996, 17626,  3643,  1019,
         2003, 16542,  1010,  1998,  2008,  1996,  6149,  3643,  2003,  1018,
         1012,  5585,  1006,  4642,  1007,  1012,  2079,  2017,  2228,  2008,
         2009,  2001,  4072,  2000,  3189,  2107,  1037,  3576,  2689,  1997,
         2023,  3643,  1029,   102])"
1482,1,"['sample', 'inequality', 'measurements', 'average']", Exercises,seg_195,14.10 chebyshev’s inequality was used in exercise 13.5 to determine how many times n one needs to measure a sample to be 90% sure that the average of the measurements is within half a degree of the actual melting point c of a new material.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2403,  1012,  2184, 18178,  3762,  4095,  6777,  1521,  1055,
        16440,  2001,  2109,  1999,  6912,  2410,  1012,  1019,  2000,  5646,
         2129,  2116,  2335,  1050,  2028,  3791,  2000,  5468,  1037,  7099,
         2000,  2022,  3938,  1003,  2469,  2008,  1996,  2779,  1997,  1996,
        11702,  2003,  2306,  2431,  1037,  3014,  1997,  1996,  5025, 13721,
         2391,  1039,  1997,  1037,  2047,  3430,  1012,   102])"
1483,1,"['normal', 'approximation', 'normal approximation']", Exercises,seg_195,a. use the normal approximation to find a less conservative value for n.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2224,  1996,  3671, 20167,  2000,  2424,  1037,
         2625,  4603,  3643,  2005,  1050,  1012,   102])"
1484,1,"['random errors', 'random', 'normal', 'errors', 'measurements', 'case']", Exercises,seg_195,b. only in case the random errors ui in the measurements have a normal,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2069,  1999,  2553,  1996,  6721, 10697, 21318,
         1999,  1996, 11702,  2031,  1037,  3671,   102])"
1485,1,['cases'], Exercises,seg_195,"distribution the value of n from a is “exact,” in all other cases an approximation. explain this.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  4353,  1996,  3643,  1997,  1050,  2013,  1037,  2003,  1523,
         6635,  1010,  1524,  1999,  2035,  2060,  3572,  2019, 20167,  1012,
         4863,  2023,  1012,   102])"
1486,1,"['dataset', 'associated', 'set', 'probability', 'observations', 'random', 'experiment', 'model']", Exploratory data analysis graphical summaries,seg_197,"in the previous chapters we focused on probability models to describe random phenomena. confronted with a new phenomenon, we want to learn about the randomness that is associated with it. it is common to conduct an experiment for this purpose and record observations concerning the phenomenon. the set of observations is called a dataset. by exploring the dataset we can gain insight into what probability model suits the phenomenon.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4654, 24759,  6525,  7062,  2951,  4106, 20477,  7680,  7849,  3111])","tensor([  101,  1999,  1996,  3025,  9159,  2057,  4208,  2006,  9723,  4275,
         2000,  6235,  6721, 13352,  1012, 12892,  2007,  1037,  2047,  9575,
         1010,  2057,  2215,  2000,  4553,  2055,  1996,  6721,  2791,  2008,
         2003,  3378,  2007,  2009,  1012,  2009,  2003,  2691,  2000,  6204,
         2019,  7551,  2005,  2023,  3800,  1998,  2501,  9420,  7175,  1996,
         9575,  1012,  1996,  2275,  1997,  9420,  2003,  2170,  1037,  2951,
        13462,  1012,  2011, 11131,  1996,  2951, 13462,  2057,  2064,  5114,
        12369,  2046,  2054,  9723,  2944, 11072,  1996,  9575,  1012,   102])"
1487,1,"['scatterplot', 'dataset', 'bivariate dataset', 'histogram', 'bivariate', 'data', 'kernel density estimates', 'function', 'kernel', 'graphical', 'estimates', 'measurements']", Exploratory data analysis graphical summaries,seg_197,"frequently you will have to deal with a dataset that contains so many elements that it is necessary to condense the data for easy visual comprehension of general characteristics. in this chapter we present several graphical methods to do so. to graphically represent univariate datasets, consisting of repeated measurements of one particular quantity, we discuss the classical histogram, the more recently introduced kernel density estimates and the empirical distribution function. to represent a bivariate dataset, which consists of repeated measurements of two quantities, we use the scatterplot.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0.])","tensor([ 4654, 24759,  6525,  7062,  2951,  4106, 20477,  7680,  7849,  3111])","tensor([  101,  4703,  2017,  2097,  2031,  2000,  3066,  2007,  1037,  2951,
        13462,  2008,  3397,  2061,  2116,  3787,  2008,  2009,  2003,  4072,
         2000, 24707, 12325,  1996,  2951,  2005,  3733,  5107, 26683,  1997,
         2236,  6459,  1012,  1999,  2023,  3127,  2057,  2556,  2195, 20477,
         4725,  2000,  2079,  2061,  1012,  2000, 20477,  2135,  5050,  4895,
        28739, 13143,  2951, 13462,  2015,  1010,  5398,  1997,  5567, 11702,
         1997,  2028,  3327, 11712,  1010,  2057,  6848,  1996,  4556,  2010,
         3406, 13113,  1010,  1996,  2062,  3728,  3107, 16293,  4304, 10035,
         1998,  1996, 17537,  4353,  3853,  1012,  2000,  5050,  1037, 12170,
        10755, 13143,  2951, 13462,  1010,  2029,  3774,  1997,  5567, 11702,
         1997,  2048, 12450,  1010,  2057,  2224,  1996,  8040, 20097, 24759,
         4140,  1012,   102])"
1488,1,"['data', 'table']", Example the Old Faithful data,seg_199,"the old faithful geyser at yellowstone national park, wyoming, usa, was observed from august 1st to august 15th, 1985. during that time, data were collected on the duration of eruptions. there were 272 eruptions observed, of which the recorded durations are listed in table 15.1. the data are given in seconds.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2742,  1996,  2214, 11633,  2951])","tensor([  101,  1996,  2214, 11633, 16216, 23274,  2099,  2012, 29231,  2120,
         2380,  1010, 10622,  1010,  3915,  1010,  2001,  5159,  2013,  2257,
         3083,  2000,  2257,  6286,  1010,  3106,  1012,  2076,  2008,  2051,
         1010,  2951,  2020,  5067,  2006,  1996,  9367,  1997, 28448,  1012,
         2045,  2020, 24231, 28448,  5159,  1010,  1997,  2029,  1996,  2680,
         9367,  2015,  2024,  3205,  1999,  2795,  2321,  1012,  1015,  1012,
         1996,  2951,  2024,  2445,  1999,  3823,  1012,   102])"
1489,1,"['vary', 'dataset', 'information', 'data']", Example the Old Faithful data,seg_199,"the variety in the lengths of the eruptions indicates that randomness is involved. by exploring the dataset we might learn about this randomness. for instance: we like to know which durations are more likely to occur than others; is there something like “the typical duration of an eruption”; do the durations vary symmetrically around the center of the dataset; and so on. in order to retrieve this type of information, just listing the observed durations does not help us very much. somehow we must summarize the observed data. we could",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([ 2742,  1996,  2214, 11633,  2951])","tensor([  101,  1996,  3528,  1999,  1996, 10742,  1997,  1996, 28448,  7127,
         2008,  6721,  2791,  2003,  2920,  1012,  2011, 11131,  1996,  2951,
        13462,  2057,  2453,  4553,  2055,  2023,  6721,  2791,  1012,  2005,
         6013,  1024,  2057,  2066,  2000,  2113,  2029,  9367,  2015,  2024,
         2062,  3497,  2000,  5258,  2084,  2500,  1025,  2003,  2045,  2242,
         2066,  1523,  1996,  5171,  9367,  1997,  2019, 17259,  1524,  1025,
         2079,  1996,  9367,  2015,  8137, 23476,  2135,  2105,  1996,  2415,
         1997,  1996,  2951, 13462,  1025,  1998,  2061,  2006,  1012,  1999,
         2344,  2000, 12850,  2023,  2828,  1997,  2592,  1010,  2074, 10328,
         1996,  5159,  9367,  2015,  2515,  2025,  2393,  2149,  2200,  2172,
         1012,  5064,  2057,  2442,  7680,  7849,  4697,  1996,  5159,  2951,
         1012,  2057,  2071,   102])"
1490,1,"['mean', 'information', 'data', 'dataset']", Example the Old Faithful data,seg_199,"start by computing the mean of the data, which is 209.3 for the old faithful data. however, this is a poor summary of the dataset, because there is a lot more information in the observed durations. how do we get hold of this?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2742,  1996,  2214, 11633,  2951])","tensor([  101,  2707,  2011,  9798,  1996,  2812,  1997,  1996,  2951,  1010,
         2029,  2003, 19348,  1012,  1017,  2005,  1996,  2214, 11633,  2951,
         1012,  2174,  1010,  2023,  2003,  1037,  3532, 12654,  1997,  1996,
         2951, 13462,  1010,  2138,  2045,  2003,  1037,  2843,  2062,  2592,
         1999,  1996,  5159,  9367,  2015,  1012,  2129,  2079,  2057,  2131,
         2907,  1997,  2023,  1029,   102])"
1491,1,"['dataset', 'information', 'data', 'table']", Example the Old Faithful data,seg_199,"just staring at the dataset for a while tells us very little. to see something, we have to rearrange the data somehow. the first thing we could do is order the data. the result is shown in table 15.2. putting the elements in order already provides more information. for instance, it is now immediately clear that all elements lie between 96 and 306.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2742,  1996,  2214, 11633,  2951])","tensor([  101,  2074,  4582,  2012,  1996,  2951, 13462,  2005,  1037,  2096,
         4136,  2149,  2200,  2210,  1012,  2000,  2156,  2242,  1010,  2057,
         2031,  2000,  4373, 24388,  2063,  1996,  2951,  5064,  1012,  1996,
         2034,  2518,  2057,  2071,  2079,  2003,  2344,  1996,  2951,  1012,
         1996,  2765,  2003,  3491,  1999,  2795,  2321,  1012,  1016,  1012,
         5128,  1996,  3787,  1999,  2344,  2525,  3640,  2062,  2592,  1012,
         2005,  6013,  1010,  2009,  2003,  2085,  3202,  3154,  2008,  2035,
         3787,  4682,  2090,  5986,  1998, 24622,  1012,   102])"
1492,1,['dataset'], Example the Old Faithful data,seg_199,quick exercise 15.1 which two elements of the old faithful dataset split the dataset in three groups of equal size?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2742,  1996,  2214, 11633,  2951])","tensor([  101,  4248,  6912,  2321,  1012,  1015,  2029,  2048,  3787,  1997,
         1996,  2214, 11633,  2951, 13462,  3975,  1996,  2951, 13462,  1999,
         2093,  2967,  1997,  5020,  2946,  1029,   102])"
1493,1,['data'], Example the Old Faithful data,seg_199,"a closer look at the ordered data shows that the two middle elements (the 136th and 137th elements in ascending order) are equal to 240, which is much closer to the maximum value 306 than to the minimum value 96. this seems to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2742,  1996,  2214, 11633,  2951])","tensor([  101,  1037,  3553,  2298,  2012,  1996,  3641,  2951,  3065,  2008,
         1996,  2048,  2690,  3787,  1006,  1996, 15407,  2705,  1998, 14989,
         2705,  3787,  1999, 22316,  2344,  1007,  2024,  5020,  2000, 11212,
         1010,  2029,  2003,  2172,  3553,  2000,  1996,  4555,  3643, 24622,
         2084,  2000,  1996,  6263,  3643,  5986,  1012,  2023,  3849,  2000,
          102])"
1494,1,"['dataset', 'symmetry', 'plot', 'data', 'asymmetric']", Example the Old Faithful data,seg_199,"indicate that the dataset is somewhat asymmetric, but even from the ordered dataset we cannot get a clear picture of this asymmetry. also, geologists believe that there are two different kinds of eruptions that play a role. hence one would expect two separate values around which the elements of the dataset would accumulate, corresponding to the typical durations of the two types of eruptions. again it is not clear, not even from the ordered dataset, what these two typical values are. it would be better to have a plot of the dataset that reflects symmetry or asymmetry of the data and from which we can easily see where the elements accumulate. in the following sections we will discuss two such methods.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2742,  1996,  2214, 11633,  2951])","tensor([  101,  5769,  2008,  1996,  2951, 13462,  2003,  5399,  2004, 24335,
        12589,  1010,  2021,  2130,  2013,  1996,  3641,  2951, 13462,  2057,
         3685,  2131,  1037,  3154,  3861,  1997,  2023,  2004, 24335, 24327,
         1012,  2036,  1010, 21334,  2015,  2903,  2008,  2045,  2024,  2048,
         2367,  7957,  1997, 28448,  2008,  2377,  1037,  2535,  1012,  6516,
         2028,  2052,  5987,  2048,  3584,  5300,  2105,  2029,  1996,  3787,
         1997,  1996,  2951, 13462,  2052, 27598,  1010,  7978,  2000,  1996,
         5171,  9367,  2015,  1997,  1996,  2048,  4127,  1997, 28448,  1012,
         2153,  2009,  2003,  2025,  3154,  1010,  2025,  2130,  2013,  1996,
         3641,  2951, 13462,  1010,  2054,  2122,  2048,  5171,  5300,  2024,
         1012,  2009,  2052,  2022,  2488,  2000,  2031,  1037,  5436,  1997,
         1996,  2951, 13462,  2008, 11138, 14991,  2030,  2004, 24335, 24327,
         1997,  1996,  2951,  1998,  2013,  2029,  2057,  2064,  4089,  2156,
         2073,  1996,  3787, 27598,  1012,  1999,  1996,  2206,  5433,  2057,
         2097,  6848,  2048,  2107,  4725,  1012,   102])"
1495,1,"['method', 'histogram', 'data']", Histograms,seg_201,"the classical method to graphically represent data is the histogram, which probably dates from the mortality studies of john graunt in 1662 (see west-",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1996,  4556,  4118,  2000, 20477,  2135,  5050,  2951,  2003,
         1996,  2010,  3406, 13113,  1010,  2029,  2763,  5246,  2013,  1996,
        13356,  2913,  1997,  2198, 24665,  4887,  3372,  1999, 25909,  1006,
         2156,  2225,  1011,   102])"
1496,1,"['dataset', 'pearson', 'histogram', 'tables', 'data']", Histograms,seg_201,"ergaard [39], p.22). the term histogram appears to have been used first by karl pearson ([22]). figure 15.1 displays a histogram of the old faithful data. the picture immediately reveals the asymmetry of the dataset and the fact that the elements accumulate somewhere near 120 and 270, which was not clear from tables 15.1 and 15.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  9413, 18839,  1031,  4464,  1033,  1010,  1052,  1012,  2570,
         1007,  1012,  1996,  2744,  2010,  3406, 13113,  3544,  2000,  2031,
         2042,  2109,  2034,  2011,  6382, 12874,  1006,  1031,  2570,  1033,
         1007,  1012,  3275,  2321,  1012,  1015,  8834,  1037,  2010,  3406,
        13113,  1997,  1996,  2214, 11633,  2951,  1012,  1996,  3861,  3202,
         7657,  1996,  2004, 24335, 24327,  1997,  1996,  2951, 13462,  1998,
         1996,  2755,  2008,  1996,  3787, 27598,  4873,  2379,  6036,  1998,
        13756,  1010,  2029,  2001,  2025,  3154,  2013,  7251,  2321,  1012,
         1015,  1998,  2321,  1012,  1016,  1012,   102])"
1497,1,"['dataset', 'histogram']", Histograms,seg_201,the construction of the histogram is as follows. let us denote a generic (univariate) dataset of size n by,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1996,  2810,  1997,  1996,  2010,  3406, 13113,  2003,  2004,
         4076,  1012,  2292,  2149, 19090,  1037, 12391,  1006,  4895, 28739,
        13143,  1007,  2951, 13462,  1997,  2946,  1050,  2011,   102])"
1498,1,"['curve', 'histogram']", Histograms,seg_201,and suppose we want to construct a histogram. we use the version of the histogram that is scaled in such a way that the total area under the curve is equal to one.1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1998,  6814,  2057,  2215,  2000,  9570,  1037,  2010,  3406,
        13113,  1012,  2057,  2224,  1996,  2544,  1997,  1996,  2010,  3406,
        13113,  2008,  2003, 18953,  1999,  2107,  1037,  2126,  2008,  1996,
         2561,  2181,  2104,  1996,  7774,  2003,  5020,  2000,  2028,  1012,
         1015,   102])"
1499,1,"['range', 'bins', 'intervals', 'data']", Histograms,seg_201,first we divide the range of the data into intervals. these intervals are called bins and are denoted by,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  2034,  2057, 11443,  1996,  2846,  1997,  1996,  2951,  2046,
        14025,  1012,  2122, 14025,  2024,  2170,  8026,  2015,  1998,  2024,
        19537,  2011,   102])"
1500,1,"['bin width', 'dataset', 'interval', 'histogram', 'bins', 'bin']", Histograms,seg_201,"the length of an interval bi is denoted by |bi| and is called the bin width. the bins do not necessarily have the same width. in figure 15.1 we have eight bins of equal bin width. we want the area under the histogram on each bin bi to reflect the number of elements in bi. since the total area 1 under the histogram then corresponds to the total number of elements n in the dataset, the area under the histogram on a bin bi is equal to the proportion of elements",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1996,  3091,  1997,  2019, 13483, 12170,  2003, 19537,  2011,
         1064, 12170,  1064,  1998,  2003,  2170,  1996,  8026,  9381,  1012,
         1996,  8026,  2015,  2079,  2025,  9352,  2031,  1996,  2168,  9381,
         1012,  1999,  3275,  2321,  1012,  1015,  2057,  2031,  2809,  8026,
         2015,  1997,  5020,  8026,  9381,  1012,  2057,  2215,  1996,  2181,
         2104,  1996,  2010,  3406, 13113,  2006,  2169,  8026, 12170,  2000,
         8339,  1996,  2193,  1997,  3787,  1999, 12170,  1012,  2144,  1996,
         2561,  2181,  1015,  2104,  1996,  2010,  3406, 13113,  2059, 14788,
         2000,  1996,  2561,  2193,  1997,  3787,  1050,  1999,  1996,  2951,
        13462,  1010,  1996,  2181,  2104,  1996,  2010,  3406, 13113,  2006,
         1037,  8026, 12170,  2003,  5020,  2000,  1996, 10817,  1997,  3787,
          102])"
1501,1,"['bin', 'histogram']", Histograms,seg_201,the height of the histogram on bin bi must then be equal to,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1996,  4578,  1997,  1996,  2010,  3406, 13113,  2006,  8026,
        12170,  2442,  2059,  2022,  5020,  2000,   102])"
1502,0,[], Histograms,seg_201,the number of xj in bi .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1996,  2193,  1997,  1060,  3501,  1999, 12170,  1012,   102])"
1503,1,"['bins', 'bin', 'table']", Histograms,seg_201,"quick exercise 15.2 use table 15.2 to count how many elements fall into each of the bins (90, 120], (120, 150], . . . , (300, 330] in figure 15.1 and compute the height on each bin.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  4248,  6912,  2321,  1012,  1016,  2224,  2795,  2321,  1012,
         1016,  2000,  4175,  2129,  2116,  3787,  2991,  2046,  2169,  1997,
         1996,  8026,  2015,  1006,  3938,  1010,  6036,  1033,  1010,  1006,
         6036,  1010,  5018,  1033,  1010,  1012,  1012,  1012,  1010,  1006,
         3998,  1010, 14210,  1033,  1999,  3275,  2321,  1012,  1015,  1998,
        24134,  1996,  4578,  2006,  2169,  8026,  1012,   102])"
1504,1,"['bin width', 'bin']", Histograms,seg_201,choice of the bin width,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([ 101, 3601, 1997, 1996, 8026, 9381,  102])"
1505,1,"['bins', 'histogram', 'case']", Histograms,seg_201,consider a histogram with bins of equal width. in that case the bins are of the form,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  5136,  1037,  2010,  3406, 13113,  2007,  8026,  2015,  1997,
         5020,  9381,  1012,  1999,  2008,  2553,  1996,  8026,  2015,  2024,
         1997,  1996,  2433,   102])"
1506,1,"['bin width', 'dataset', 'histograms', 'risk', 'bin widths', 'table', 'information', 'histogram', 'bins', 'bin', 'data']", Histograms,seg_201,"where r is some reference point smaller than the minimum of the dataset, and b denotes the bin width. in figure 15.2, three histograms of the old faithful data of table 15.2 are displayed with bin widths equal to 2, 30, and 90, respectively. clearly, the choice of the bin width b, or the corresponding choice of the number of bins m, will determine what the resulting histogram will look like. choosing the bin width too small will result in a chaotic figure with many isolated peaks. choosing the bin width too large will result in a figure without much detail, at the risk of losing information about general characteristics. in figure 15.2, bin width b = 2 is somewhat too small. bin width b = 90 is clearly too large and produces a histogram that no longer captures the fact that the data show two separate modes near 120 and 270.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  2073,  1054,  2003,  2070,  4431,  2391,  3760,  2084,  1996,
         6263,  1997,  1996,  2951, 13462,  1010,  1998,  1038, 14796,  1996,
         8026,  9381,  1012,  1999,  3275,  2321,  1012,  1016,  1010,  2093,
         2010,  3406, 13113,  2015,  1997,  1996,  2214, 11633,  2951,  1997,
         2795,  2321,  1012,  1016,  2024,  6913,  2007,  8026,  9381,  2015,
         5020,  2000,  1016,  1010,  2382,  1010,  1998,  3938,  1010,  4414,
         1012,  4415,  1010,  1996,  3601,  1997,  1996,  8026,  9381,  1038,
         1010,  2030,  1996,  7978,  3601,  1997,  1996,  2193,  1997,  8026,
         2015,  1049,  1010,  2097,  5646,  2054,  1996,  4525,  2010,  3406,
        13113,  2097,  2298,  2066,  1012, 10549,  1996,  8026,  9381,  2205,
         2235,  2097,  2765,  1999,  1037, 19633,  3275,  2007,  2116,  7275,
        11373,  1012, 10549,  1996,  8026,  9381,  2205,  2312,  2097,  2765,
         1999,  1037,  3275,  2302,  2172,  6987,  1010,  2012,  1996,  3891,
         1997,  3974,  2592,  2055,  2236,  6459,  1012,  1999,  3275,  2321,
         1012,  1016,  1010,  8026,  9381,  1038,  1027,  1016,  2003,  5399,
         2205,  2235,  1012,  8026,  9381,  1038,  1027,  3938,  2003,  4415,
         2205,  2312,  1998,  7137,  1037,  2010,  3406, 13113,  2008,  2053,
         2936, 19566,  1996,  2755,  2008,  1996,  2951,  2265,  2048,  3584,
        11583,  2379,  6036,  1998, 13756,  1012,   102])"
1507,1,"['trial', 'bin width', 'bin', 'error']", Histograms,seg_201,"how does one go about choosing the bin width? in practice, this might boil down to picking the bin width by trial and error, continuing until the figure looks reasonable. mathematical research, however, has provided some guidelines for a data-based choice for b or m. formulas that may effectively be",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  2129,  2515,  2028,  2175,  2055, 10549,  1996,  8026,  9381,
         1029,  1999,  3218,  1010,  2023,  2453, 26077,  2091,  2000,  8130,
         1996,  8026,  9381,  2011,  3979,  1998,  7561,  1010,  5719,  2127,
         1996,  3275,  3504,  9608,  1012,  8045,  2470,  1010,  2174,  1010,
         2038,  3024,  2070, 11594,  2005,  1037,  2951,  1011,  2241,  3601,
         2005,  1038,  2030,  1049,  1012, 25814,  2008,  2089,  6464,  2022,
          102])"
1508,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard']", Histograms,seg_201,"−1/3 used are m = 1 + 3.3 log10(n) (see [34]) or b = 3.49 sn (see [29]; see also remark 15.1), where s is the sample standard deviation (see section 16.2 for the definition of the sample standard deviation).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1597,  2487,  1013,  1017,  2109,  2024,  1049,  1027,  1015,
         1009,  1017,  1012,  1017,  8833, 10790,  1006,  1050,  1007,  1006,
         2156,  1031,  4090,  1033,  1007,  2030,  1038,  1027,  1017,  1012,
         4749,  1055,  2078,  1006,  2156,  1031,  2756,  1033,  1025,  2156,
         2036, 17674,  2321,  1012,  1015,  1007,  1010,  2073,  1055,  2003,
         1996,  7099,  3115, 24353,  1006,  2156,  2930,  2385,  1012,  1016,
         2005,  1996,  6210,  1997,  1996,  7099,  3115, 24353,  1007,  1012,
          102])"
1509,1,"['data', 'histogram']", Histograms,seg_201,quick exercise 15.3 if we construct a histogram for the old faithful data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  4248,  6912,  2321,  1012,  1017,  2065,  2057,  9570,  1037,
         2010,  3406, 13113,  2005,  1996,  2214, 11633,  2951,   102])"
1510,1,"['bins', 'bin width', 'bin', 'data']", Histograms,seg_201,"−1/3 with equal bin width b = 3.49 sn , how may bins will we need to cover the data if s = 68.48?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([ 101, 1597, 2487, 1013, 1017, 2007, 5020, 8026, 9381, 1038, 1027, 1017,
        1012, 4749, 1055, 2078, 1010, 2129, 2089, 8026, 2015, 2097, 2057, 2342,
        2000, 3104, 1996, 2951, 2065, 1055, 1027, 6273, 1012, 4466, 1029,  102])"
1511,1,"['bin width', 'histogram', 'bins', 'method', 'plot', 'bin', 'discrete']", Histograms,seg_201,the main advantage of the histogram is that it is simple. its disadvantage is the discrete character of the plot. in figure 15.1 it is still somewhat unclear which two values correspond to the typical durations of the two types of eruptions. another well-known artifact is that changing the bin width slightly or keeping the bin width fixed and shifting the bins slightly may result in a figure of a different nature. a method that produces a smoother figure and is less sensitive to these kinds of changes will be discussed in the next section.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2010,  3406, 13113,  2015])","tensor([  101,  1996,  2364,  5056,  1997,  1996,  2010,  3406, 13113,  2003,
         2008,  2009,  2003,  3722,  1012,  2049, 20502,  2003,  1996, 16246,
         2839,  1997,  1996,  5436,  1012,  1999,  3275,  2321,  1012,  1015,
         2009,  2003,  2145,  5399, 10599,  2029,  2048,  5300, 17254,  2000,
         1996,  5171,  9367,  2015,  1997,  1996,  2048,  4127,  1997, 28448,
         1012,  2178,  2092,  1011,  2124, 20785,  2003,  2008,  5278,  1996,
         8026,  9381,  3621,  2030,  4363,  1996,  8026,  9381,  4964,  1998,
         9564,  1996,  8026,  2015,  3621,  2089,  2765,  1999,  1037,  3275,
         1997,  1037,  2367,  3267,  1012,  1037,  4118,  2008,  7137,  1037,
         5744,  2121,  3275,  1998,  2003,  2625,  7591,  2000,  2122,  7957,
         1997,  3431,  2097,  2022,  6936,  1999,  1996,  2279,  2930,  1012,
          102])"
1512,1,"['kernel density estimate', 'estimation', 'kernel', 'estimate', 'kernel density estimation', 'method', 'density estimation', 'plot', 'data']", Kernel density estimates,seg_203,"we can graphically represent data in a more variegated plot by a so-called kernel density estimate. the basic ideas of kernel density estimation first appeared in the early 1950s. rosenblatt [25] and parzen [21] provided the stimulus for further research on this topic. although the method was introduced in the middle of the last century, until recently it remained unpopular as a tool for practitioners because of its computationally intensive nature.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([16293,  4304, 10035])","tensor([  101,  2057,  2064, 20477,  2135,  5050,  2951,  1999,  1037,  2062,
        13075, 28872,  4383,  5436,  2011,  1037,  2061,  1011,  2170, 16293,
         4304, 10197,  1012,  1996,  3937,  4784,  1997, 16293,  4304, 24155,
         2034,  2596,  1999,  1996,  2220,  4856,  1012, 21701, 28522,  4779,
         1031,  2423,  1033,  1998, 11968, 10431,  1031,  2538,  1033,  3024,
         1996, 19220,  2005,  2582,  2470,  2006,  2023,  8476,  1012,  2348,
         1996,  4118,  2001,  3107,  1999,  1996,  2690,  1997,  1996,  2197,
         2301,  1010,  2127,  3728,  2009,  2815, 19657,  2004,  1037,  6994,
         2005, 14617,  2138,  1997,  2049, 15078,  2135, 11806,  3267,  1012,
          102])"
1513,1,"['dataset', 'kernel', 'data', 'estimate', 'kernel density estimate']", Kernel density estimates,seg_203,"figure 15.3 displays a kernel density estimate of the old faithful data. again the picture immediately reveals the asymmetry of the dataset, but it is much",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  3275,  2321,  1012,  1017,  8834,  1037, 16293,  4304, 10197,
         1997,  1996,  2214, 11633,  2951,  1012,  2153,  1996,  3861,  3202,
         7657,  1996,  2004, 24335, 24327,  1997,  1996,  2951, 13462,  1010,
         2021,  2009,  2003,  2172,   102])"
1514,1,['histogram'], Kernel density estimates,seg_203,smoother than the histogram in figure 15.1. note that it is now easier to detect the two typical values around which the elements accumulate.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  5744,  2121,  2084,  1996,  2010,  3406, 13113,  1999,  3275,
         2321,  1012,  1015,  1012,  3602,  2008,  2009,  2003,  2085,  6082,
         2000, 11487,  1996,  2048,  5171,  5300,  2105,  2029,  1996,  3787,
        27598,  1012,   102])"
1515,1,"['parameter', 'dataset', 'function', 'kernel', 'kernels', 'plot', 'bandwidth']", Kernel density estimates,seg_203,"the idea behind the construction of the plot is to “put a pile of sand” around each element of the dataset. at places where the elements accumulate, the sand will pile up. the actual plot is constructed by choosing a kernel k and a bandwidth h. the kernel k reflects the shape of the piles of sand, whereas the bandwidth is a tuning parameter that determines how wide the piles of sand will be. formally, a kernel k is a function k : r → r. figure 15.4 displays several well-known kernels. a kernel k typically satisfies the following conditions:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1996,  2801,  2369,  1996,  2810,  1997,  1996,  5436,  2003,
         2000,  1523,  2404,  1037,  8632,  1997,  5472,  1524,  2105,  2169,
         5783,  1997,  1996,  2951, 13462,  1012,  2012,  3182,  2073,  1996,
         3787, 27598,  1010,  1996,  5472,  2097,  8632,  2039,  1012,  1996,
         5025,  5436,  2003,  3833,  2011, 10549,  1037, 16293,  1047,  1998,
         1037, 20235,  1044,  1012,  1996, 16293,  1047, 11138,  1996,  4338,
         1997,  1996, 18526,  1997,  5472,  1010,  6168,  1996, 20235,  2003,
         1037, 17372, 16381,  2008, 16463,  2129,  2898,  1996, 18526,  1997,
         5472,  2097,  2022,  1012,  6246,  1010,  1037, 16293,  1047,  2003,
         1037,  3853,  1047,  1024,  1054,  1585,  1054,  1012,  3275,  2321,
         1012,  1018,  8834,  2195,  2092,  1011,  2124, 16293,  2015,  1012,
         1037, 16293,  1047,  4050,  2938,  2483, 14213,  1996,  2206,  3785,
         1024,   102])"
1516,1,['probability'], Kernel density estimates,seg_203,"(k1) k is a probability density, i.e., k(u) ≥ 0 and ∫−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([ 101, 1006, 1047, 2487, 1007, 1047, 2003, 1037, 9723, 4304, 1010, 1045,
        1012, 1041, 1012, 1010, 1047, 1006, 1057, 1007, 1609, 1014, 1998,  100,
         102])"
1517,1,['symmetric'], Kernel density estimates,seg_203,"(k2) k is symmetric around zero, i.e., k(u) = k(−u);",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1006,  1047,  2475,  1007,  1047,  2003, 19490,  2105,  5717,
         1010,  1045,  1012,  1041,  1012,  1010,  1047,  1006,  1057,  1007,
         1027,  1047,  1006,  1597,  2226,  1007,  1025,   102])"
1518,1,"['kernel', 'kernel ']", Kernel density estimates,seg_203,examples are the epanechnikov kernel :,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  4973,  2024,  1996, 19044,  2638,  2818, 22576, 16293,  1024,
          102])"
1519,1,['kernel'], Kernel density estimates,seg_203,"and k(u) = 0 elsewhere, and the triweight kernel",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1998,  1047,  1006,  1057,  1007,  1027,  1014,  6974,  1010,
         1998,  1996, 13012, 11179, 16293,   102])"
1520,1,"['kernels', 'normal', 'kernel', 'condition']", Kernel density estimates,seg_203,"and k(u) = 0 elsewhere. sometimes one uses kernels that do not satisfy condition (k3), for example, the normal kernel",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1998,  1047,  1006,  1057,  1007,  1027,  1014,  6974,  1012,
         2823,  2028,  3594, 16293,  2015,  2008,  2079,  2025, 13225,  4650,
         1006,  1047,  2509,  1007,  1010,  2005,  2742,  1010,  1996,  3671,
        16293,   102])"
1521,1,"['dataset', 'kernel', 'estimate', 'kernel density estimate']", Kernel density estimates,seg_203,"let us denote a kernel density estimate by fn,h, and suppose that we want to construct fn,h for a dataset x1, x2, . . . , xn. in figure 15.5 the construction is",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  2292,  2149, 19090,  1037, 16293,  4304, 10197,  2011,  1042,
         2078,  1010,  1044,  1010,  1998,  6814,  2008,  2057,  2215,  2000,
         9570,  1042,  2078,  1010,  1044,  2005,  1037,  2951, 13462,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1012,  1999,  3275,  2321,  1012,  1019,  1996,  2810,  2003,
          102])"
1522,1,"['dataset', 'kernel', 'bandwidth']", Kernel density estimates,seg_203,"illustrated for a dataset containing five elements, where we use the epanechnikov kernel and bandwidth h = 0.5. first we scale the kernel k (solid line)",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  7203,  2005,  1037,  2951, 13462,  4820,  2274,  3787,  1010,
         2073,  2057,  2224,  1996, 19044,  2638,  2818, 22576, 16293,  1998,
        20235,  1044,  1027,  1014,  1012,  1019,  1012,  2034,  2057,  4094,
         1996, 16293,  1047,  1006,  5024,  2240,  1007,   102])"
1523,1,['function'], Kernel density estimates,seg_203,into the function 1 t,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([ 101, 2046, 1996, 3853, 1015, 1056,  102])"
1524,1,"['curve', 'dataset', 'kernel', 'interval', 'functions', 'results']", Kernel density estimates,seg_203,"the scaled kernel (dotted line) is of the same type as the original kernel, with area 1 under the curve but is positive on the interval [−h, h] instead of [−1, 1] and higher (lower) when h is smaller (larger) than 1. next, we put a scaled kernel around each element xi in the dataset. this results in functions of the type",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1996, 18953, 16293,  1006, 20384,  2240,  1007,  2003,  1997,
         1996,  2168,  2828,  2004,  1996,  2434, 16293,  1010,  2007,  2181,
         1015,  2104,  1996,  7774,  2021,  2003,  3893,  2006,  1996, 13483,
         1031,  1597,  2232,  1010,  1044,  1033,  2612,  1997,  1031,  1597,
         2487,  1010,  1015,  1033,  1998,  3020,  1006,  2896,  1007,  2043,
         1044,  2003,  3760,  1006,  3469,  1007,  2084,  1015,  1012,  2279,
         1010,  2057,  2404,  1037, 18953, 16293,  2105,  2169,  5783,  8418,
         1999,  1996,  2951, 13462,  1012,  2023,  3463,  1999,  4972,  1997,
         1996,  2828,   102])"
1525,1,"['curve', 'kernel', 'interval', 'estimate', 'kernels', 'transformed', 'kernel density estimate', 'symmetric']", Kernel density estimates,seg_203,"these shifted kernels (dotted lines) have the same shape as the transformed kernel, all with area 1 under the curve, but they are now symmetric around xi and positive on the interval [xi − h, xi + h]. we see that the graphs of the shifted kernels will overlap whenever xi and xj are close to each other, so that things will pile up more at places where more elements accumulate. the kernel density estimate fn,h is constructed by summing the scaled kernels and dividing them by n, in order to obtain area 1 under the curve:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  2122,  5429, 16293,  2015,  1006, 20384,  3210,  1007,  2031,
         1996,  2168,  4338,  2004,  1996,  8590, 16293,  1010,  2035,  2007,
         2181,  1015,  2104,  1996,  7774,  1010,  2021,  2027,  2024,  2085,
        19490,  2105,  8418,  1998,  3893,  2006,  1996, 13483,  1031,  8418,
         1597,  1044,  1010,  8418,  1009,  1044,  1033,  1012,  2057,  2156,
         2008,  1996, 19287,  1997,  1996,  5429, 16293,  2015,  2097, 17702,
         7188,  8418,  1998,  1060,  3501,  2024,  2485,  2000,  2169,  2060,
         1010,  2061,  2008,  2477,  2097,  8632,  2039,  2062,  2012,  3182,
         2073,  2062,  3787, 27598,  1012,  1996, 16293,  4304, 10197,  1042,
         2078,  1010,  1044,  2003,  3833,  2011,  7680,  6562,  1996, 18953,
        16293,  2015,  1998, 16023,  2068,  2011,  1050,  1010,  1999,  2344,
         2000,  6855,  2181,  1015,  2104,  1996,  7774,  1024,   102])"
1526,1,"['contrast', 'probability', 'observations', 'histogram', 'condition', 'bin']", Kernel density estimates,seg_203,"when computing fn,h(t), we assign higher weights to observations xi closer to t, in contrast to the histogram where we simply count the number of observations in the bin that contains t. note that as a consequence of condition (k1), fn,h itself is a probability density:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  2043,  9798,  1042,  2078,  1010,  1044,  1006,  1056,  1007,
         1010,  2057, 23911,  3020, 15871,  2000,  9420,  8418,  3553,  2000,
         1056,  1010,  1999,  5688,  2000,  1996,  2010,  3406, 13113,  2073,
         2057,  3432,  4175,  1996,  2193,  1997,  9420,  1999,  1996,  8026,
         2008,  3397,  1056,  1012,  3602,  2008,  2004,  1037,  9509,  1997,
         4650,  1006,  1047,  2487,  1007,  1010,  1042,  2078,  1010,  1044,
         2993,  2003,  1037,  9723,  4304,  1024,   102])"
1527,1,"['estimate', 'kernel', 'kernel density estimate']", Kernel density estimates,seg_203,"quick exercise 15.4 check that the total area under the kernel density estimate is equal to one, i.e., show that ∫−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  4248,  6912,  2321,  1012,  1018,  4638,  2008,  1996,  2561,
         2181,  2104,  1996, 16293,  4304, 10197,  2003,  5020,  2000,  2028,
         1010,  1045,  1012,  1041,  1012,  1010,  2265,  2008,   100,   102])"
1528,1,['method'], Kernel density estimates,seg_203,"note that computing fn,h is very computationally intensive. its common use nowadays is therefore a typical product of the recent developments in computer hardware, despite the fact that the method was introduced much earlier.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  3602,  2008,  9798,  1042,  2078,  1010,  1044,  2003,  2200,
        15078,  2135, 11806,  1012,  2049,  2691,  2224, 13367,  2003,  3568,
         1037,  5171,  4031,  1997,  1996,  3522,  8973,  1999,  3274,  8051,
         1010,  2750,  1996,  2755,  2008,  1996,  4118,  2001,  3107,  2172,
         3041,  1012,   102])"
1529,1,['bandwidth'], Kernel density estimates,seg_203,choice of the bandwidth,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  3601,  1997,  1996, 20235,   102])"
1530,1,"['curve', 'bin width', 'kernel density estimates', 'kernel density estimate', 'kernel', 'risk', 'histograms', 'bandwidths', 'estimate', 'estimates', 'bandwidth', 'bin', 'data']", Kernel density estimates,seg_203,"the bandwidth h plays the same role for kernel density estimates as the bin width b does for histograms. in figure 15.6 three kernel density estimates of the old faithful data are plotted with the triweight kernel and bandwidths 1.8, 18, and 180. it is clear that the choice of the bandwidth h determines largely what the resulting kernel density estimate will look like. choosing the bandwidth too small will produce a curve with many isolated peaks. choosing the bandwidth too large will produce a very smooth curve, at the risk of smoothing away important features of the data. in figure 15.6 bandwidth",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1996, 20235,  1044,  3248,  1996,  2168,  2535,  2005, 16293,
         4304, 10035,  2004,  1996,  8026,  9381,  1038,  2515,  2005,  2010,
         3406, 13113,  2015,  1012,  1999,  3275,  2321,  1012,  1020,  2093,
        16293,  4304, 10035,  1997,  1996,  2214, 11633,  2951,  2024, 27347,
         2007,  1996, 13012, 11179, 16293,  1998, 20235,  2015,  1015,  1012,
         1022,  1010,  2324,  1010,  1998,  8380,  1012,  2009,  2003,  3154,
         2008,  1996,  3601,  1997,  1996, 20235,  1044, 16463,  4321,  2054,
         1996,  4525, 16293,  4304, 10197,  2097,  2298,  2066,  1012, 10549,
         1996, 20235,  2205,  2235,  2097,  3965,  1037,  7774,  2007,  2116,
         7275, 11373,  1012, 10549,  1996, 20235,  2205,  2312,  2097,  3965,
         1037,  2200,  5744,  7774,  1010,  2012,  1996,  3891,  1997, 27045,
         2185,  2590,  2838,  1997,  1996,  2951,  1012,  1999,  3275,  2321,
         1012,  1020, 20235,   102])"
1531,1,"['kernel', 'data', 'estimate', 'bandwidth', 'kernel density estimate']", Kernel density estimates,seg_203,h = 1.8 is somewhat too small. bandwidth h = 180 is clearly too large and produces an oversmoothed kernel density estimate that no longer captures the fact that the data show two separate modes.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1044,  1027,  1015,  1012,  1022,  2003,  5399,  2205,  2235,
         1012, 20235,  1044,  1027,  8380,  2003,  4415,  2205,  2312,  1998,
         7137,  2019, 15849,  5302, 14573,  2098, 16293,  4304, 10197,  2008,
         2053,  2936, 19566,  1996,  2755,  2008,  1996,  2951,  2265,  2048,
         3584, 11583,  1012,   102])"
1532,1,"['trial', 'histograms', 'bandwidth', 'error']", Kernel density estimates,seg_203,"how does one go about choosing the bandwidth? similar to histograms, in practice one could do this by trial and error and continue until one obtains a reasonable picture. recent research, however, has provided some guidelines for a data-based choice of h. a formula that may effectively be used is h =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  2129,  2515,  2028,  2175,  2055, 10549,  1996, 20235,  1029,
         2714,  2000,  2010,  3406, 13113,  2015,  1010,  1999,  3218,  2028,
         2071,  2079,  2023,  2011,  3979,  1998,  7561,  1998,  3613,  2127,
         2028,  6855,  2015,  1037,  9608,  3861,  1012,  3522,  2470,  1010,
         2174,  1010,  2038,  3024,  2070, 11594,  2005,  1037,  2951,  1011,
         2241,  3601,  1997,  1044,  1012,  1037,  5675,  2008,  2089,  6464,
         2022,  2109,  2003,  1044,  1027,   102])"
1533,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard']", Kernel density estimates,seg_203,"−1/5 1.06 sn , where s denotes the sample standard deviation (see, for instance, [31]; see also remark 15.2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([16293,  4304, 10035])","tensor([  101,  1597,  2487,  1013,  1019,  1015,  1012,  5757,  1055,  2078,
         1010,  2073,  1055, 14796,  1996,  7099,  3115, 24353,  1006,  2156,
         1010,  2005,  6013,  1010,  1031,  2861,  1033,  1025,  2156,  2036,
        17674,  2321,  1012,  1016,  1007,  1012,   102])"
1534,1,"['estimate', 'kernel', 'kernel density estimate']", Kernel density estimates,seg_203,quick exercise 15.5 if we construct a kernel density estimate for the old,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  4248,  6912,  2321,  1012,  1019,  2065,  2057,  9570,  1037,
        16293,  4304, 10197,  2005,  1996,  2214,   102])"
1535,1,"['interval', 'bandwidth', 'data']", Kernel density estimates,seg_203,"−1/5 faithful data with bandwidth h = 1.06sn , then on what interval is fn,h strictly positive if s = 68.48?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1597,  2487,  1013,  1019, 11633,  2951,  2007, 20235,  1044,
         1027,  1015,  1012,  5757,  2015,  2078,  1010,  2059,  2006,  2054,
        13483,  2003,  1042,  2078,  1010,  1044,  9975,  3893,  2065,  1055,
         1027,  6273,  1012,  4466,  1029,   102])"
1536,1,['kernel'], Kernel density estimates,seg_203,choice of the kernel,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  3601,  1997,  1996, 16293,   102])"
1537,1,"['kernel density estimates', 'kernel density estimate', 'kernel', 'table', 'set', 'estimate', 'estimates', 'kernels', 'normal', 'bandwidth', 'data']", Kernel density estimates,seg_203,"to construct a kernel density estimate, one has to choose a kernel k and a bandwidth h. the choice of kernel is less important. in figure 15.7 we have plotted two kernel density estimates for the old faithful data of table 15.1: one is constructed with the triweight kernel (solid line), and one with the epanechnikov kernel (dotted line), both with the same bandwidth h = 24. as one can see, the graphs are very similar. if one wants to compare with the normal kernel, one should set the bandwidth of the normal kernel at about h/4. this has to do with the fact that the normal kernel is much more spread out than the two kernels mentioned here, which are zero outside [−1, 1].",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  2000,  9570,  1037, 16293,  4304, 10197,  1010,  2028,  2038,
         2000,  5454,  1037, 16293,  1047,  1998,  1037, 20235,  1044,  1012,
         1996,  3601,  1997, 16293,  2003,  2625,  2590,  1012,  1999,  3275,
         2321,  1012,  1021,  2057,  2031, 27347,  2048, 16293,  4304, 10035,
         2005,  1996,  2214, 11633,  2951,  1997,  2795,  2321,  1012,  1015,
         1024,  2028,  2003,  3833,  2007,  1996, 13012, 11179, 16293,  1006,
         5024,  2240,  1007,  1010,  1998,  2028,  2007,  1996, 19044,  2638,
         2818, 22576, 16293,  1006, 20384,  2240,  1007,  1010,  2119,  2007,
         1996,  2168, 20235,  1044,  1027,  2484,  1012,  2004,  2028,  2064,
         2156,  1010,  1996, 19287,  2024,  2200,  2714,  1012,  2065,  2028,
         4122,  2000, 12826,  2007,  1996,  3671, 16293,  1010,  2028,  2323,
         2275,  1996, 20235,  1997,  1996,  3671, 16293,  2012,  2055,  1044,
         1013,  1018,  1012,  2023,  2038,  2000,  2079,  2007,  1996,  2755,
         2008,  1996,  3671, 16293,  2003,  2172,  2062,  3659,  2041,  2084,
         1996,  2048, 16293,  2015,  3855,  2182,  1010,  2029,  2024,  5717,
         2648,  1031,  1597,  2487,  1010,  1015,  1033,  1012,   102])"
1538,1,['kernels'], Kernel density estimates,seg_203,boundary kernels,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  6192, 16293,  2015,   102])"
1539,1,"['estimate', 'failure', 'results', 'model', 'parameters', 'data']", Kernel density estimates,seg_203,"in order to estimate the parameters of a software reliability model, failure data are collected. usually the most desirable type of failure data results when the",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  1999,  2344,  2000, 10197,  1996, 11709,  1997,  1037,  4007,
        15258,  2944,  1010,  4945,  2951,  2024,  5067,  1012,  2788,  1996,
         2087, 16166,  2828,  1997,  4945,  2951,  3463,  2043,  1996,   102])"
1540,1,"['kernel density estimate', 'kernel', 'table', 'interval', 'estimate', 'failure', 'failures', 'control', 'data']", Kernel density estimates,seg_203,"failure times are recorded, or equivalently, the length of an interval between successive failures. the data in table 15.3 are observed interfailure times in cpu seconds for a certain control software system. on the left in figure 15.8 a kernel density estimate of the observed interfailure times is plotted. note that to the left of the origin, fn,h is positive. this is absurd, since it suggests that there are negative interfailure times.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  4945,  2335,  2024,  2680,  1010,  2030,  5662,  2135,  1010,
         1996,  3091,  1997,  2019, 13483,  2090, 11165, 15428,  1012,  1996,
         2951,  1999,  2795,  2321,  1012,  1017,  2024,  5159,  6970,  7011,
         4014,  5397,  2335,  1999, 17368,  3823,  2005,  1037,  3056,  2491,
         4007,  2291,  1012,  2006,  1996,  2187,  1999,  3275,  2321,  1012,
         1022,  1037, 16293,  4304, 10197,  1997,  1996,  5159,  6970,  7011,
         4014,  5397,  2335,  2003, 27347,  1012,  3602,  2008,  2000,  1996,
         2187,  1997,  1996,  4761,  1010,  1042,  2078,  1010,  1044,  2003,
         3893,  1012,  2023,  2003, 18691,  1010,  2144,  2009,  6083,  2008,
         2045,  2024,  4997,  6970,  7011,  4014,  5397,  2335,  1012,   102])"
1541,1,"['dataset', 'kernel', 'interval', 'estimate', 'kernel density estimate', 'symmetric', 'case']", Kernel density estimates,seg_203,"this phenomenon is a consequence of the fact that one uses a symmetric kernel. in that case, the resulting kernel density estimate will always be positive on the interval [xi−h, xi+h] for every element xi in the dataset. hence, obser-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([16293,  4304, 10035])","tensor([  101,  2023,  9575,  2003,  1037,  9509,  1997,  1996,  2755,  2008,
         2028,  3594,  1037, 19490, 16293,  1012,  1999,  2008,  2553,  1010,
         1996,  4525, 16293,  4304, 10197,  2097,  2467,  2022,  3893,  2006,
         1996, 13483,  1031,  8418, 22543,  2232,  1010,  8418,  1009,  1044,
         1033,  2005,  2296,  5783,  8418,  1999,  1996,  2951, 13462,  1012,
         6516,  1010, 27885,  8043,  1011,   102])"
1542,1,"['kernel density estimates', 'kernel', 'interval', 'estimate', 'estimates', 'histogram', 'adjusted', 'kernel density estimate', 'symmetric']", Kernel density estimates,seg_203,"vations close to zero will cause the kernel density estimate fn,h to be positive to the left of zero. it is possible to improve the kernel density estimate in a neighborhood of zero by means of a so-called boundary kernel. without going into detail about the construction of such an improvement, we will only show the result of this. on the right in figure 15.8 the histogram of the interfailure times is plotted together with the kernel density estimate constructed with a symmetric kernel (dotted line) and with the boundary kernel density estimate (solid line). the boundary kernel density estimate is 0 to the left of the origin and is adjusted on the interval [0, h). on the interval [h,∞) both kernel density estimates are the same.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([16293,  4304, 10035])","tensor([  101, 12436,  9285,  2485,  2000,  5717,  2097,  3426,  1996, 16293,
         4304, 10197,  1042,  2078,  1010,  1044,  2000,  2022,  3893,  2000,
         1996,  2187,  1997,  5717,  1012,  2009,  2003,  2825,  2000,  5335,
         1996, 16293,  4304, 10197,  1999,  1037,  5101,  1997,  5717,  2011,
         2965,  1997,  1037,  2061,  1011,  2170,  6192, 16293,  1012,  2302,
         2183,  2046,  6987,  2055,  1996,  2810,  1997,  2107,  2019,  7620,
         1010,  2057,  2097,  2069,  2265,  1996,  2765,  1997,  2023,  1012,
         2006,  1996,  2157,  1999,  3275,  2321,  1012,  1022,  1996,  2010,
         3406, 13113,  1997,  1996,  6970,  7011,  4014,  5397,  2335,  2003,
        27347,  2362,  2007,  1996, 16293,  4304, 10197,  3833,  2007,  1037,
        19490, 16293,  1006, 20384,  2240,  1007,  1998,  2007,  1996,  6192,
        16293,  4304, 10197,  1006,  5024,  2240,  1007,  1012,  1996,  6192,
        16293,  4304, 10197,  2003,  1014,  2000,  1996,  2187,  1997,  1996,
         4761,  1998,  2003, 10426,  2006,  1996, 13483,  1031,  1014,  1010,
         1044,  1007,  1012,  2006,  1996, 13483,  1031,  1044,  1010,  1601,
         1007,  2119, 16293,  4304, 10035,  2024,  1996,  2168,  1012,   102])"
1543,1,"['dataset', 'function', 'cumulative distribution function', 'distribution function', 'distribution', 'empirical cumulative distribution function', 'plot', 'data']", The empirical distribution function,seg_205,another way to graphically represent a dataset is to plot the data in a cumulative manner. this can be done using the empirical cumulative distribution function of the data. it is denoted by fn and is defined at a point x as the proportion of elements in the dataset that are less than or equal to x:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  2178,  2126,  2000, 20477,  2135,  5050,  1037,  2951, 13462,
         2003,  2000,  5436,  1996,  2951,  1999,  1037, 23260,  5450,  1012,
         2023,  2064,  2022,  2589,  2478,  1996, 17537, 23260,  4353,  3853,
         1997,  1996,  2951,  1012,  2009,  2003, 19537,  2011,  1042,  2078,
         1998,  2003,  4225,  2012,  1037,  2391,  1060,  2004,  1996, 10817,
         1997,  3787,  1999,  1996,  2951, 13462,  2008,  2024,  2625,  2084,
         2030,  5020,  2000,  1060,  1024,   102])"
1544,1,['dataset'], The empirical distribution function,seg_205,number of elements in the dataset ≤ x fn(x) = . n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  2193,  1997,  3787,  1999,  1996,  2951, 13462,  1608,  1060,
         1042,  2078,  1006,  1060,  1007,  1027,  1012,  1050,   102])"
1545,1,['dataset'], The empirical distribution function,seg_205,"to illustrate the construction of fn, consider the dataset consisting of the elements",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  2000, 19141,  1996,  2810,  1997,  1042,  2078,  1010,  5136,
         1996,  2951, 13462,  5398,  1997,  1996,  3787,   102])"
1546,1,"['function', 'distribution', 'distribution function', 'empirical distribution function']", The empirical distribution function,seg_205,"the corresponding empirical distribution function is displayed in figure 15.9. for x < 1, there are no elements less than or equal to x, so that fn(x) = 0. for 1 ≤ x < 3, only the element 1 is less than or equal to x, so that fn(x) = 1/5. for 3 ≤ x < 4, the elements 1 and 3 are less than or equal to x, so that fn(x) = 2/5, and so on.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  1996,  7978, 17537,  4353,  3853,  2003,  6913,  1999,  3275,
         2321,  1012,  1023,  1012,  2005,  1060,  1026,  1015,  1010,  2045,
         2024,  2053,  3787,  2625,  2084,  2030,  5020,  2000,  1060,  1010,
         2061,  2008,  1042,  2078,  1006,  1060,  1007,  1027,  1014,  1012,
         2005,  1015,  1608,  1060,  1026,  1017,  1010,  2069,  1996,  5783,
         1015,  2003,  2625,  2084,  2030,  5020,  2000,  1060,  1010,  2061,
         2008,  1042,  2078,  1006,  1060,  1007,  1027,  1015,  1013,  1019,
         1012,  2005,  1017,  1608,  1060,  1026,  1018,  1010,  1996,  3787,
         1015,  1998,  1017,  2024,  2625,  2084,  2030,  5020,  2000,  1060,
         1010,  2061,  2008,  1042,  2078,  1006,  1060,  1007,  1027,  1016,
         1013,  1019,  1010,  1998,  2061,  2006,  1012,   102])"
1547,1,['dataset'], The empirical distribution function,seg_205,"in general, the graph of fn has the form of a staircase, with fn(x) = 0 for all x smaller than the minimum of the dataset and fn(x) = 1 for all x greater than the maximum of the dataset. between the minimum and maximum, fn has a jump of size 1/n at each element of the dataset and is constant between successive elements. in figure 15.9, the marks • and ◦ are added to the graph to emphasize the fact that, for instance, the value of fn(x) at x = 3 is 0.4, not 0.2. usually, we leave these out, and one might also connect the horizontal segments by vertical lines.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  1999,  2236,  1010,  1996, 10629,  1997,  1042,  2078,  2038,
         1996,  2433,  1997,  1037, 10714,  1010,  2007,  1042,  2078,  1006,
         1060,  1007,  1027,  1014,  2005,  2035,  1060,  3760,  2084,  1996,
         6263,  1997,  1996,  2951, 13462,  1998,  1042,  2078,  1006,  1060,
         1007,  1027,  1015,  2005,  2035,  1060,  3618,  2084,  1996,  4555,
         1997,  1996,  2951, 13462,  1012,  2090,  1996,  6263,  1998,  4555,
         1010,  1042,  2078,  2038,  1037,  5376,  1997,  2946,  1015,  1013,
         1050,  2012,  2169,  5783,  1997,  1996,  2951, 13462,  1998,  2003,
         5377,  2090, 11165,  3787,  1012,  1999,  3275,  2321,  1012,  1023,
         1010,  1996,  6017,  1528,  1998,   100,  2024,  2794,  2000,  1996,
        10629,  2000, 17902,  1996,  2755,  2008,  1010,  2005,  6013,  1010,
         1996,  3643,  1997,  1042,  2078,  1006,  1060,  1007,  2012,  1060,
         1027,  1017,  2003,  1014,  1012,  1018,  1010,  2025,  1014,  1012,
         1016,  1012,  2788,  1010,  2057,  2681,  2122,  2041,  1010,  1998,
         2028,  2453,  2036,  7532,  1996,  9876,  9214,  2011,  7471,  3210,
         1012,   102])"
1548,1,"['dataset', 'functions', 'empirical distribution functions', 'distribution', 'data']", The empirical distribution function,seg_205,in figure 15.10 the empirical distribution functions are plotted for the old faithful data and the software reliability data. the fact that the old faithful data accumulate in the neighborhood of 120 and 270 is reflected in the graph of fn by the fact that it is steeper at these places: the jumps of fn succeed each other faster. in regions where the elements of the dataset are more stretched,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  1999,  3275,  2321,  1012,  2184,  1996, 17537,  4353,  4972,
         2024, 27347,  2005,  1996,  2214, 11633,  2951,  1998,  1996,  4007,
        15258,  2951,  1012,  1996,  2755,  2008,  1996,  2214, 11633,  2951,
        27598,  1999,  1996,  5101,  1997,  6036,  1998, 13756,  2003,  7686,
         1999,  1996, 10629,  1997,  1042,  2078,  2011,  1996,  2755,  2008,
         2009,  2003,  9561,  2121,  2012,  2122,  3182,  1024,  1996, 14523,
         1997,  1042,  2078,  9510,  2169,  2060,  5514,  1012,  1999,  4655,
         2073,  1996,  3787,  1997,  1996,  2951, 13462,  2024,  2062,  7121,
          102])"
1549,1,"['function', 'distribution', 'distribution function', 'data', 'empirical distribution function']", The empirical distribution function,seg_205,"out, the graph of fn is flatter. similar behavior can be seen for the software reliability data in the neighborhood of zero. the elements accumulate more close to zero, less as we move to the right. this is reflected by the empirical distribution function, which is very steep near zero and flattens out if we move to the right.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  2041,  1010,  1996, 10629,  1997,  1042,  2078,  2003,  4257,
         3334,  1012,  2714,  5248,  2064,  2022,  2464,  2005,  1996,  4007,
        15258,  2951,  1999,  1996,  5101,  1997,  5717,  1012,  1996,  3787,
        27598,  2062,  2485,  2000,  5717,  1010,  2625,  2004,  2057,  2693,
         2000,  1996,  2157,  1012,  2023,  2003,  7686,  2011,  1996, 17537,
         4353,  3853,  1010,  2029,  2003,  2200,  9561,  2379,  5717,  1998,
         4257, 25808,  2041,  2065,  2057,  2693,  2000,  1996,  2157,  1012,
          102])"
1550,1,"['function', 'graphical', 'frequency', 'histogram', 'relative frequency', 'bins', 'distribution', 'distribution function', 'bin', 'data', 'empirical distribution function']", The empirical distribution function,seg_205,"the graph of the empirical distribution function for the old faithful data agrees with the histogram in figure 15.1 whose height is the largest on the bins (90, 120] and (240, 270]. in fact, there is a one-to-one relation between the two graphical summaries of the data: the area under the histogram on a single bin is equal to the relative frequency of elements that lie in that bin, which is also equal to the increase of fn on that bin. for instance, the area under the histogram on bin (240, 270] for the old faithful data is equal to 30 · 0.0092 =",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  1996, 10629,  1997,  1996, 17537,  4353,  3853,  2005,  1996,
         2214, 11633,  2951, 10217,  2007,  1996,  2010,  3406, 13113,  1999,
         3275,  2321,  1012,  1015,  3005,  4578,  2003,  1996,  2922,  2006,
         1996,  8026,  2015,  1006,  3938,  1010,  6036,  1033,  1998,  1006,
        11212,  1010, 13756,  1033,  1012,  1999,  2755,  1010,  2045,  2003,
         1037,  2028,  1011,  2000,  1011,  2028,  7189,  2090,  1996,  2048,
        20477,  7680,  7849,  3111,  1997,  1996,  2951,  1024,  1996,  2181,
         2104,  1996,  2010,  3406, 13113,  2006,  1037,  2309,  8026,  2003,
         5020,  2000,  1996,  5816,  6075,  1997,  3787,  2008,  4682,  1999,
         2008,  8026,  1010,  2029,  2003,  2036,  5020,  2000,  1996,  3623,
         1997,  1042,  2078,  2006,  2008,  8026,  1012,  2005,  6013,  1010,
         1996,  2181,  2104,  1996,  2010,  3406, 13113,  2006,  8026,  1006,
        11212,  1010, 13756,  1033,  2005,  1996,  2214, 11633,  2951,  2003,
         5020,  2000,  2382,  1087,  1014,  1012,  4002,  2683,  2475,  1027,
          102])"
1551,1,"['dataset', 'function', 'distribution', 'distribution function', 'empirical distribution function']", The empirical distribution function,seg_205,"quick exercise 15.6 suppose that for a dataset consisting of 300 elements, the value of the empirical distribution function in the point 1.5 is equal to 0.7. how many elements in the dataset are strictly greater than 1.5?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  4353,  3853])","tensor([  101,  4248,  6912,  2321,  1012,  1020,  6814,  2008,  2005,  1037,
         2951, 13462,  5398,  1997,  3998,  3787,  1010,  1996,  3643,  1997,
         1996, 17537,  4353,  3853,  1999,  1996,  2391,  1015,  1012,  1019,
         2003,  5020,  2000,  1014,  1012,  1021,  1012,  2129,  2116,  3787,
         1999,  1996,  2951, 13462,  2024,  9975,  3618,  2084,  1015,  1012,
         1019,  1029,   102])"
1552,1,"['dataset', 'observations', 'variables', 'case']", Scatterplot,seg_207,"in some situations one wants to investigate the relationship between two or more variables. in the case of two variables x and y, the dataset consists of pairs of observations :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  1999,  2070,  8146,  2028,  4122,  2000,  8556,  1996,  3276,
         2090,  2048,  2030,  2062, 10857,  1012,  1999,  1996,  2553,  1997,
         2048, 10857,  1060,  1998,  1061,  1010,  1996,  2951, 13462,  3774,
         1997,  7689,  1997,  9420,  1024,   102])"
1553,1,"['dataset', 'contrast', 'observations', 'bivariate dataset', 'bivariate', 'scatterplot', 'variables', 'plot', 'data', 'variable']", Scatterplot,seg_207,"we call such a dataset a bivariate dataset in contrast to the univariate dataset, which consists of observations of one particular quantity. we often like to investigate whether the value of variable y depends on the value of the variable x, and if so, whether we can describe the relation between the two variables. a first step is to take a look at the data, i.e., to plot the points (xi, yi) for i = 1, 2 . . . , n. such a plot is called a scatterplot.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  2057,  2655,  2107,  1037,  2951, 13462,  1037, 12170, 10755,
        13143,  2951, 13462,  1999,  5688,  2000,  1996,  4895, 28739, 13143,
         2951, 13462,  1010,  2029,  3774,  1997,  9420,  1997,  2028,  3327,
        11712,  1012,  2057,  2411,  2066,  2000,  8556,  3251,  1996,  3643,
         1997,  8023,  1061,  9041,  2006,  1996,  3643,  1997,  1996,  8023,
         1060,  1010,  1998,  2065,  2061,  1010,  3251,  2057,  2064,  6235,
         1996,  7189,  2090,  1996,  2048, 10857,  1012,  1037,  2034,  3357,
         2003,  2000,  2202,  1037,  2298,  2012,  1996,  2951,  1010,  1045,
         1012,  1041,  1012,  1010,  2000,  5436,  1996,  2685,  1006,  8418,
         1010, 12316,  1007,  2005,  1045,  1027,  1015,  1010,  1016,  1012,
         1012,  1012,  1010,  1050,  1012,  2107,  1037,  5436,  2003,  2170,
         1037,  8040, 20097, 24759,  4140,  1012,   102])"
1554,1,"['mean', 'table', 'observations', 'process', 'data']", Scatterplot,seg_207,"during a study about “dry” and “wet” drilling in rock, six holes were drilled, three corresponding to each process. in a dry hole one forces compressed air down the drill rods to flush the cutting and the drive hammer, whereas in a wet hole one forces water. as the hole gets deeper, one has to add a rod of 5 feet length to the drill. in each hole the time was recorded to advance 5 feet to a total depth of 400 feet. the data in table 15.4 are in 1/100 minute and are derived from the original data in [23]. the original data consisted of drill times for each of the six holes and contained missing observations and observations that were known to be too large. the data in table 15.4 are the mean drill times of the bona fide observations at each depth for dry and wet drilling.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  2076,  1037,  2817,  2055,  1523,  4318,  1524,  1998,  1523,
         4954,  1524, 15827,  1999,  2600,  1010,  2416,  8198,  2020, 24311,
         1010,  2093,  7978,  2000,  2169,  2832,  1012,  1999,  1037,  4318,
         4920,  2028,  2749, 16620,  2250,  2091,  1996, 12913, 19485,  2000,
        13862,  1996,  6276,  1998,  1996,  3298,  8691,  1010,  6168,  1999,
         1037,  4954,  4920,  2028,  2749,  2300,  1012,  2004,  1996,  4920,
         4152,  6748,  1010,  2028,  2038,  2000,  5587,  1037,  8473,  1997,
         1019,  2519,  3091,  2000,  1996, 12913,  1012,  1999,  2169,  4920,
         1996,  2051,  2001,  2680,  2000,  5083,  1019,  2519,  2000,  1037,
         2561,  5995,  1997,  4278,  2519,  1012,  1996,  2951,  1999,  2795,
         2321,  1012,  1018,  2024,  1999,  1015,  1013,  2531,  3371,  1998,
         2024,  5173,  2013,  1996,  2434,  2951,  1999,  1031,  2603,  1033,
         1012,  1996,  2434,  2951,  5031,  1997, 12913,  2335,  2005,  2169,
         1997,  1996,  2416,  8198,  1998,  4838,  4394,  9420,  1998,  9420,
         2008,  2020,  2124,  2000,  2022,  2205,  2312,  1012,  1996,  2951,
         1999,  2795,  2321,  1012,  1018,  2024,  1996,  2812, 12913,  2335,
         1997,  1996, 14753,  2050, 26000,  9420,  2012,  2169,  5995,  2005,
         4318,  1998,  4954, 15827,  1012,   102])"
1555,1,"['mean', 'plot']", Scatterplot,seg_207,"one of the questions of interest is whether drill time depends on depth. to investigate this, we plot the mean drill time against depth. figure 15.11 displays",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  2028,  1997,  1996,  3980,  1997,  3037,  2003,  3251, 12913,
         2051,  9041,  2006,  5995,  1012,  2000,  8556,  2023,  1010,  2057,
         5436,  1996,  2812, 12913,  2051,  2114,  5995,  1012,  3275,  2321,
         1012,  2340,  8834,   102])"
1556,1,"['vary', 'range', 'scatterplots']", Scatterplot,seg_207,"the resulting scatterplots for the dry and wet holes. the scatterplots seem to indicate that in the beginning the drill time hardly depends on depth, at least up to, let’s say, 250 feet. at greater depth, the drill time seems to vary over a larger range and increases somewhat with depth. a possible explanation for this is that the drill moved from softer to harder material. this was suggested by the fact that the drill hit an ore lens at about 250 feet and that the natural place such ore lenses occur is between two different materials (see [23] for details).",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  1996,  4525,  8040, 20097, 24759, 12868,  2005,  1996,  4318,
         1998,  4954,  8198,  1012,  1996,  8040, 20097, 24759, 12868,  4025,
         2000,  5769,  2008,  1999,  1996,  2927,  1996, 12913,  2051,  6684,
         9041,  2006,  5995,  1010,  2012,  2560,  2039,  2000,  1010,  2292,
         1521,  1055,  2360,  1010,  5539,  2519,  1012,  2012,  3618,  5995,
         1010,  1996, 12913,  2051,  3849,  2000,  8137,  2058,  1037,  3469,
         2846,  1998,  7457,  5399,  2007,  5995,  1012,  1037,  2825,  7526,
         2005,  2023,  2003,  2008,  1996, 12913,  2333,  2013, 19013,  2000,
         6211,  3430,  1012,  2023,  2001,  4081,  2011,  1996,  2755,  2008,
         1996, 12913,  2718,  2019, 10848, 10014,  2012,  2055,  5539,  2519,
         1998,  2008,  1996,  3019,  2173,  2107, 10848, 15072,  5258,  2003,
         2090,  2048,  2367,  4475,  1006,  2156,  1031,  2603,  1033,  2005,
         4751,  1007,  1012,   102])"
1557,1,['scatterplots'], Scatterplot,seg_207,a more important question is whether one can drill holes faster using dry drilling or wet drilling. the scatterplots seem to suggest that dry drilling might be faster. we will come back to this later.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  1037,  2062,  2590,  3160,  2003,  3251,  2028,  2064, 12913,
         8198,  5514,  2478,  4318, 15827,  2030,  4954, 15827,  1012,  1996,
         8040, 20097, 24759, 12868,  4025,  2000,  6592,  2008,  4318, 15827,
         2453,  2022,  5514,  1012,  2057,  2097,  2272,  2067,  2000,  2023,
         2101,  1012,   102])"
1558,0,[], Scatterplot,seg_207,predicting janka hardness of australian timber,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101, 29458,  5553,  2912, 23608,  1997,  2827,  7227,   102])"
1559,1,"['dataset', 'table', 'bivariate dataset', 'bivariate', 'standard', 'test']", Scatterplot,seg_207,"the janka hardness test is a standard test to measure the hardness of wood. it measures the force required to push a steel ball with a diameter of 11.28 millimeters (0.444 inch) into the wood to a depth of half the ball’s diameter. to measure janka hardness directly is difficult. however, it is related to the density of the wood, which is comparatively easy to measure. in table 15.5 a bivariate dataset is given of density (x) and janka hardness (y) of 36 australian eucalypt hardwoods.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  1996,  5553,  2912, 23608,  3231,  2003,  1037,  3115,  3231,
         2000,  5468,  1996, 23608,  1997,  3536,  1012,  2009,  5761,  1996,
         2486,  3223,  2000,  5245,  1037,  3886,  3608,  2007,  1037,  6705,
         1997,  2340,  1012,  2654,  4971, 28136,  1006,  1014,  1012,  4008,
         2549,  4960,  1007,  2046,  1996,  3536,  2000,  1037,  5995,  1997,
         2431,  1996,  3608,  1521,  1055,  6705,  1012,  2000,  5468,  5553,
         2912, 23608,  3495,  2003,  3697,  1012,  2174,  1010,  2009,  2003,
         3141,  2000,  1996,  4304,  1997,  1996,  3536,  1010,  2029,  2003,
        20172,  3733,  2000,  5468,  1012,  1999,  2795,  2321,  1012,  1019,
         1037, 12170, 10755, 13143,  2951, 13462,  2003,  2445,  1997,  4304,
         1006,  1060,  1007,  1998,  5553,  2912, 23608,  1006,  1061,  1007,
         1997,  4029,  2827,  7327,  9289, 22571,  2102, 23165,  2015,  1012,
          102])"
1560,1,"['dataset', 'case', 'linear', 'bivariate dataset', 'bivariate', 'scatterplot', 'variables']", Scatterplot,seg_207,"in order to get an impression of the relationship between hardness and density, we made a scatterplot of the bivariate dataset, which is displayed in figure 15.12. it consists of all points (xi, yi) for i = 1, 2, . . . , 36. the scatterplot might provide suggestions for the formula that describes the relationship between the variables x and y. in this case, a linear relationship between the two variables does not seem unreasonable. later (chapter 22) we will discuss",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  1999,  2344,  2000,  2131,  2019,  8605,  1997,  1996,  3276,
         2090, 23608,  1998,  4304,  1010,  2057,  2081,  1037,  8040, 20097,
        24759,  4140,  1997,  1996, 12170, 10755, 13143,  2951, 13462,  1010,
         2029,  2003,  6913,  1999,  3275,  2321,  1012,  2260,  1012,  2009,
         3774,  1997,  2035,  2685,  1006,  8418,  1010, 12316,  1007,  2005,
         1045,  1027,  1015,  1010,  1016,  1010,  1012,  1012,  1012,  1010,
         4029,  1012,  1996,  8040, 20097, 24759,  4140,  2453,  3073, 15690,
         2005,  1996,  5675,  2008,  5577,  1996,  3276,  2090,  1996, 10857,
         1060,  1998,  1061,  1012,  1999,  2023,  2553,  1010,  1037,  7399,
         3276,  2090,  1996,  2048, 10857,  2515,  2025,  4025, 29205,  1012,
         2101,  1006,  3127,  2570,  1007,  2057,  2097,  6848,   102])"
1561,1,['linear'], Scatterplot,seg_207,how one can establish such a linear relationship by means of the observed pairs.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([ 101, 2129, 2028, 2064, 5323, 2107, 1037, 7399, 3276, 2011, 2965, 1997,
        1996, 5159, 7689, 1012,  102])"
1562,1,['prediction'], Scatterplot,seg_207,quick exercise 15.7 suppose we have a eucalypt hardwood tree with density 65. what would your prediction be for the corresponding janka hardness?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8040, 20097, 24759,  4140])","tensor([  101,  4248,  6912,  2321,  1012,  1021,  6814,  2057,  2031,  1037,
         7327,  9289, 22571,  2102, 23165,  3392,  2007,  4304,  3515,  1012,
         2054,  2052,  2115, 17547,  2022,  2005,  1996,  7978,  5553,  2912,
        23608,  1029,   102])"
1563,1,"['dataset', 'data', 'table']", Solutions to the quick exercises,seg_209,"15.1 there are 272 elements in the dataset. the 91st and 182nd elements of the ordered data divide the dataset in three groups, each consisting of 90 elements. from a closer look at table 15.2 we find that these two elements are 145 and 260.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2321,  1012,  1015,  2045,  2024, 24231,  3787,  1999,  1996,
         2951, 13462,  1012,  1996,  6205,  3367,  1998, 17691,  4859,  3787,
         1997,  1996,  3641,  2951, 11443,  1996,  2951, 13462,  1999,  2093,
         2967,  1010,  2169,  5398,  1997,  3938,  3787,  1012,  2013,  1037,
         3553,  2298,  2012,  2795,  2321,  1012,  1016,  2057,  2424,  2008,
         2122,  2048,  3787,  2024, 13741,  1998, 13539,  1012,   102])"
1564,1,"['table', 'observations', 'number of observations', 'bins', 'bin']", Solutions to the quick exercises,seg_209,"15.2 in table 15.2 one can easily count the number of observations in each of the bins (90, 120], . . . , (300, 330]. the heights on each bin can be computed by dividing the number of observations in each bin by 272 ·30 = 8160. we get the following:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2321,  1012,  1016,  1999,  2795,  2321,  1012,  1016,  2028,
         2064,  4089,  4175,  1996,  2193,  1997,  9420,  1999,  2169,  1997,
         1996,  8026,  2015,  1006,  3938,  1010,  6036,  1033,  1010,  1012,
         1012,  1012,  1010,  1006,  3998,  1010, 14210,  1033,  1012,  1996,
         7535,  2006,  2169,  8026,  2064,  2022, 24806,  2011, 16023,  1996,
         2193,  1997,  9420,  1999,  2169,  8026,  2011, 24231,  1087,  2382,
         1027,  6282, 16086,  1012,  2057,  2131,  1996,  2206,  1024,   102])"
1565,1,['bin'], Solutions to the quick exercises,seg_209,bin count height bin count height,tensor(1),"tensor([0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 8026, 4175, 4578, 8026, 4175, 4578,  102])"
1566,1,"['dataset', 'table', 'interval', 'bins']", Solutions to the quick exercises,seg_209,"15.3 from table 15.2 we see that we must cover an interval of length of at least 306 − 96 = 210 with bins of width b = 3.49 · 68.48 · 272−1/3 = 36.89. since 210/36.89 = 5.69, we need at least six bins to cover the whole dataset.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2321,  1012,  1017,  2013,  2795,  2321,  1012,  1016,  2057,
         2156,  2008,  2057,  2442,  3104,  2019, 13483,  1997,  3091,  1997,
         2012,  2560, 24622,  1597,  5986,  1027, 12875,  2007,  8026,  2015,
         1997,  9381,  1038,  1027,  1017,  1012,  4749,  1087,  6273,  1012,
         4466,  1087, 24231, 27944,  1013,  1017,  1027,  4029,  1012,  6486,
         1012,  2144, 12875,  1013,  4029,  1012,  6486,  1027,  1019,  1012,
         6353,  1010,  2057,  2342,  2012,  2560,  2416,  8026,  2015,  2000,
         3104,  1996,  2878,  2951, 13462,  1012,   102])"
1567,0,[], Solutions to the quick exercises,seg_209,"15.4 by means of formula (15.1), we can write",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2321, 1012, 1018, 2011, 2965, 1997, 5675, 1006, 2321, 1012, 1015,
        1007, 1010, 2057, 2064, 4339,  102])"
1568,1,['variables'], Solutions to the quick exercises,seg_209,"for any i = 1, . . . , n, we find by change of integration variables t = hu + xi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2005,  2151,  1045,  1027,  1015,  1010,  1012,  1012,  1012,
         1010,  1050,  1010,  2057,  2424,  2011,  2689,  1997,  8346, 10857,
         1056,  1027, 15876,  1009,  8418,   102])"
1569,1,['condition'], Solutions to the quick exercises,seg_209,where we also use condition (k1). this directly yields,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2073,  2057,  2036,  2224,  4650,  1006,  1047,  2487,  1007,
         1012,  2023,  3495, 16189,   102])"
1570,1,"['kernel', 'table', 'estimate', 'bandwidth', 'kernel density estimate']", Solutions to the quick exercises,seg_209,"15.5 the kernel density estimate will be strictly positive between the minimum minus h and the maximum plus h. the bandwidth equals h = 1.06 · 68.48 · 272−1/5 = 23.66. from table 15.2, we see that this will be between 96 − 23.66 = 72.34 and 306 + 23.66 = 329.66.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2321,  1012,  1019,  1996, 16293,  4304, 10197,  2097,  2022,
         9975,  3893,  2090,  1996,  6263, 15718,  1044,  1998,  1996,  4555,
         4606,  1044,  1012,  1996, 20235, 19635,  1044,  1027,  1015,  1012,
         5757,  1087,  6273,  1012,  4466,  1087, 24231, 27944,  1013,  1019,
         1027,  2603,  1012,  5764,  1012,  2013,  2795,  2321,  1012,  1016,
         1010,  2057,  2156,  2008,  2023,  2097,  2022,  2090,  5986,  1597,
         2603,  1012,  5764,  1027,  5824,  1012,  4090,  1998, 24622,  1009,
         2603,  1012,  5764,  1027, 29567,  1012,  5764,  1012,   102])"
1571,0,[], Solutions to the quick exercises,seg_209,15.6 by definition the number of elements less than or equal to 1.5 is f300(1.5) · 300 = 210. hence 90 elements are strictly greater than 1.5.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2321,  1012,  1020,  2011,  6210,  1996,  2193,  1997,  3787,
         2625,  2084,  2030,  5020,  2000,  1015,  1012,  1019,  2003,  1042,
        14142,  2692,  1006,  1015,  1012,  1019,  1007,  1087,  3998,  1027,
        12875,  1012,  6516,  3938,  3787,  2024,  9975,  3618,  2084,  1015,
         1012,  1019,  1012,   102])"
1572,1,['predicted'], Solutions to the quick exercises,seg_209,"15.7 just by drawing a straight line that seems to fit the datapoints well, the authors predicted a janka hardness of about 2700.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2321,  1012,  1021,  2074,  2011,  5059,  1037,  3442,  2240,
         2008,  3849,  2000,  4906,  1996,  2951, 26521,  2092,  1010,  1996,
         6048, 10173,  1037,  5553,  2912, 23608,  1997,  2055, 13756,  2692,
         1012,   102])"
1573,1,"['bin width', 'information', 'histogram', 'bin', 'data']", Exercises,seg_211,"15.1 in [33] stephen stigler discusses data from the edinburgh medical and surgical journal (1817). these concern the chest circumference of 5732 scottish soldiers, measured in inches. the following information is given about the histogram with bin width 1, the first bin starting at 32.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  1015,  1999,  1031,  3943,  1033,  4459,  2358,
         8004,  3917, 15841,  2951,  2013,  1996,  5928,  2966,  1998, 11707,
         3485,  1006, 12529,  1007,  1012,  2122,  5142,  1996,  3108, 25022,
        11890,  2819, 25523,  1997,  5401, 16703,  4104,  3548,  1010,  7594,
         1999,  5282,  1012,  1996,  2206,  2592,  2003,  2445,  2055,  1996,
         2010,  3406, 13113,  2007,  8026,  9381,  1015,  1010,  1996,  2034,
         8026,  3225,  2012,  3590,  1012,  1019,  1012,   102])"
1574,1,['bin'], Exercises,seg_211,bin count bin count,tensor(1),"tensor([0., 1., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 8026, 4175, 8026, 4175,  102])"
1575,1,"['bin', 'histogram']", Exercises,seg_211,a. compute the height of the histogram on each bin.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  4578,  1997,  1996,  2010,  3406,
        13113,  2006,  2169,  8026,  1012,   102])"
1576,1,"['dataset', 'histogram']", Exercises,seg_211,b. make a sketch of the histogram. would you view the dataset as being,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2191,  1037, 11080,  1997,  1996,  2010,  3406,
        13113,  1012,  2052,  2017,  3193,  1996,  2951, 13462,  2004,  2108,
          102])"
1577,1,['skewed'], Exercises,seg_211,symmetric or skewed?,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101, 19490,  2030, 15315,  7974,  2098,  1029,   102])"
1578,1,['space shuttle challenger'], Exercises,seg_211,15.2 recall the example of the space shuttle challenger in section 1.4. the following list contains the launch temperatures in degrees fahrenheit during previous takeoffs.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2321,  1012,  1016,  9131,  1996,  2742,  1997,  1996,  2686,
        10382, 12932,  1999,  2930,  1015,  1012,  1018,  1012,  1996,  2206,
         2862,  3397,  1996,  4888,  7715,  1999,  5445,  6904, 28362, 25311,
        20175,  2076,  3025, 19744,  2015,  1012,   102])"
1579,1,"['bin width', 'bin', 'histogram']", Exercises,seg_211,"a. compute the heights of a histogram with bin width 5, the first bin starting",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  7535,  1997,  1037,  2010,  3406,
        13113,  2007,  8026,  9381,  1019,  1010,  1996,  2034,  8026,  3225,
          102])"
1580,1,['space shuttle challenger'], Exercises,seg_211,"b. on january 28, 1986, during the launch of the space shuttle challenger,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2006,  2254,  2654,  1010,  3069,  1010,  2076,
         1996,  4888,  1997,  1996,  2686, 10382, 12932,  1010,   102])"
1581,1,['dataset'], Exercises,seg_211,"the temperature was 31 degrees fahrenheit. given the dataset of launch temperatures of previous takeoffs, would you consider 31 as a representative launch temperature?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  4860,  2001,  2861,  5445,  6904, 28362, 25311, 20175,
         1012,  2445,  1996,  2951, 13462,  1997,  4888,  7715,  1997,  3025,
        19744,  2015,  1010,  2052,  2017,  5136,  2861,  2004,  1037,  4387,
         4888,  4860,  1029,   102])"
1582,1,"['dataset', 'table', 'intervals', 'data']", Exercises,seg_211,"15.3 in an article in biometrika, an example is discussed about mine disasters during the period from march 15, 1851, to march, 22, 1962. a dataset has been obtained of 190 recorded time intervals (in days) between successive coal mine disasters involving ten or more men killed. the ordered data are listed in table 15.6.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  1017,  1999,  2019,  3720,  1999, 16012, 11368,
        23778,  1010,  2019,  2742,  2003,  6936,  2055,  3067, 18665,  2076,
         1996,  2558,  2013,  2233,  2321,  1010,  8792,  1010,  2000,  2233,
         1010,  2570,  1010,  3705,  1012,  1037,  2951, 13462,  2038,  2042,
         4663,  1997, 11827,  2680,  2051, 14025,  1006,  1999,  2420,  1007,
         2090, 11165,  5317,  3067, 18665,  5994,  2702,  2030,  2062,  2273,
         2730,  1012,  1996,  3641,  2951,  2024,  3205,  1999,  2795,  2321,
         1012,  1020,  1012,   102])"
1583,1,"['bins', 'bin', 'histogram']", Exercises,seg_211,"a. compute the height on each bin of the histogram with bins [0, 250],",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  4578,  2006,  2169,  8026,  1997,
         1996,  2010,  3406, 13113,  2007,  8026,  2015,  1031,  1014,  1010,
         5539,  1033,  1010,   102])"
1584,1,"['dataset', 'histogram']", Exercises,seg_211,b. make a sketch of the histogram. would you view the dataset as being,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2191,  1037, 11080,  1997,  1996,  2010,  3406,
        13113,  1012,  2052,  2017,  3193,  1996,  2951, 13462,  2004,  2108,
          102])"
1585,1,['skewed'], Exercises,seg_211,symmetric or skewed?,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101, 19490,  2030, 15315,  7974,  2098,  1029,   102])"
1586,1,"['data', 'table']", Exercises,seg_211,15.4 the ordered software data (see also table 15.3) are given in the following list.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2321, 1012, 1018, 1996, 3641, 4007, 2951, 1006, 2156, 2036, 2795,
        2321, 1012, 1017, 1007, 2024, 2445, 1999, 1996, 2206, 2862, 1012,  102])"
1587,1,"['bins', 'bin', 'histogram']", Exercises,seg_211,"a. compute the heights on each bin of the histogram with bins [0, 500],",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  7535,  2006,  2169,  8026,  1997,
         1996,  2010,  3406, 13113,  2007,  8026,  2015,  1031,  1014,  1010,
         3156,  1033,  1010,   102])"
1588,1,"['function', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_211,b. compute the value of the empirical distribution function in the endpoints,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  3643,  1997,  1996, 17537,  4353,
         3853,  1999,  1996,  2203, 26521,   102])"
1589,1,['bins'], Exercises,seg_211,of the bins.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1997, 1996, 8026, 2015, 1012,  102])"
1590,1,"['bin', 'histogram']", Exercises,seg_211,"c. check that the area under the histogram on bin (1000, 1500] is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  4638,  2008,  1996,  2181,  2104,  1996,  2010,
         3406, 13113,  2006,  8026,  1006,  6694,  1010, 10347,  1033,  2003,
         5020,  2000,   102])"
1591,1,"['function', 'distribution', 'distribution function', 'bin', 'empirical distribution function']", Exercises,seg_211,"the increase fn(1500) − fn(1000) of the empirical distribution function on this bin. actually, this is true for each single bin (see exercise 15.11).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  3623,  1042,  2078,  1006, 10347,  1007,  1597,  1042,
         2078,  1006,  6694,  1007,  1997,  1996, 17537,  4353,  3853,  2006,
         2023,  8026,  1012,  2941,  1010,  2023,  2003,  2995,  2005,  2169,
         2309,  8026,  1006,  2156,  6912,  2321,  1012,  2340,  1007,  1012,
          102])"
1592,1,"['function', 'histogram', 'bins', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_211,"15.5 suppose we construct a histogram with bins [0,1], (1,3], (3,5], (5,8], (8,11], (11,14], and (14,18]. given are the values of the empirical distribution function at the boundaries of the bins:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  1019,  6814,  2057,  9570,  1037,  2010,  3406,
        13113,  2007,  8026,  2015,  1031,  1014,  1010,  1015,  1033,  1010,
         1006,  1015,  1010,  1017,  1033,  1010,  1006,  1017,  1010,  1019,
         1033,  1010,  1006,  1019,  1010,  1022,  1033,  1010,  1006,  1022,
         1010,  2340,  1033,  1010,  1006,  2340,  1010,  2403,  1033,  1010,
         1998,  1006,  2403,  1010,  2324,  1033,  1012,  2445,  2024,  1996,
         5300,  1997,  1996, 17537,  4353,  3853,  2012,  1996,  7372,  1997,
         1996,  8026,  2015,  1024,   102])"
1593,1,"['bin', 'histogram']", Exercises,seg_211,compute the height of the histogram on each bin.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101, 24134,  1996,  4578,  1997,  1996,  2010,  3406, 13113,  2006,
         2169,  8026,  1012,   102])"
1594,1,"['information', 'histogram']", Exercises,seg_211,15.6 given is the following information about a histogram:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  1020,  2445,  2003,  1996,  2206,  2592,  2055,
         1037,  2010,  3406, 13113,  1024,   102])"
1595,1,"['function', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_211,compute the value of the empirical distribution function in the point t = 7.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 24134,  1996,  3643,  1997,  1996, 17537,  4353,  3853,  1999,
         1996,  2391,  1056,  1027,  1021,  1012,   102])"
1596,1,"['function', 'histogram', 'distribution', 'distribution function', 'bin', 'data', 'empirical distribution function']", Exercises,seg_211,15.7 in exercise 15.2 a histogram was constructed for the challenger data. on which bin does the empirical distribution function have the largest increase?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  1021,  1999,  6912,  2321,  1012,  1016,  1037,
         2010,  3406, 13113,  2001,  3833,  2005,  1996, 12932,  2951,  1012,
         2006,  2029,  8026,  2515,  1996, 17537,  4353,  3853,  2031,  1996,
         2922,  3623,  1029,   102])"
1597,1,['function'], Exercises,seg_211,15.8 define a function k by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2321, 1012, 1022, 9375, 1037, 3853, 1047, 2011,  102])"
1598,1,"['function', 'kernel']", Exercises,seg_211,and k(u) = 0 elsewhere. check whether k satisfies the conditions (k1)–(k3) for a kernel function.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1998,  1047,  1006,  1057,  1007,  1027,  1014,  6974,  1012,
         4638,  3251,  1047,  2938,  2483, 14213,  1996,  3785,  1006,  1047,
         2487,  1007,  1516,  1006,  1047,  2509,  1007,  2005,  1037, 16293,
         3853,  1012,   102])"
1599,1,['scatterplot'], Exercises,seg_211,"15.9 on the basis of the duration of an eruption of the old faithful geyser, park rangers try to predict the waiting time to the next eruption. in figure 15.13 a scatterplot is displayed of the duration and the time to the next eruption in seconds.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  1023,  2006,  1996,  3978,  1997,  1996,  9367,
         1997,  2019, 17259,  1997,  1996,  2214, 11633, 16216, 23274,  2099,
         1010,  2380,  7181,  3046,  2000, 16014,  1996,  3403,  2051,  2000,
         1996,  2279, 17259,  1012,  1999,  3275,  2321,  1012,  2410,  1037,
         8040, 20097, 24759,  4140,  2003,  6913,  1997,  1996,  9367,  1998,
         1996,  2051,  2000,  1996,  2279, 17259,  1999,  3823,  1012,   102])"
1600,1,['scatterplot'], Exercises,seg_211,a. does the scatterplot give reason to believe that the duration of an eruption,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2515,  1996,  8040, 20097, 24759,  4140,  2507,
         3114,  2000,  2903,  2008,  1996,  9367,  1997,  2019, 17259,   102])"
1601,0,[], Exercises,seg_211,influences the time to the next eruption?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  8092,  1996,  2051,  2000,  1996,  2279, 17259,  1029,   102])"
1602,0,[], Exercises,seg_211,b. suppose you have just observed an eruption that lasted 250 seconds. what,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  2017,  2031,  2074,  5159,  2019, 17259,
         2008,  6354,  5539,  3823,  1012,  2054,   102])"
1603,0,[], Exercises,seg_211,would you predict for the time to the next eruption?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2052,  2017, 16014,  2005,  1996,  2051,  2000,  1996,  2279,
        17259,  1029,   102])"
1604,1,['dataset'], Exercises,seg_211,"c. the dataset of durations shows two modes, i.e., there are two places where",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  1996,  2951, 13462,  1997,  9367,  2015,  3065,
         2048, 11583,  1010,  1045,  1012,  1041,  1012,  1010,  2045,  2024,
         2048,  3182,  2073,   102])"
1605,1,"['dataset', 'data', 'histogram']", Exercises,seg_211,"the data accumulate (see, for instance, the histogram in figure 15.1). how many modes does the dataset of waiting times show?",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  2951, 27598,  1006,  2156,  1010,  2005,  6013,  1010,
         1996,  2010,  3406, 13113,  1999,  3275,  2321,  1012,  1015,  1007,
         1012,  2129,  2116, 11583,  2515,  1996,  2951, 13462,  1997,  3403,
         2335,  2265,  1029,   102])"
1606,1,"['dataset', 'function', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_211,15.10 figure 15.14 displays the graph of an empirical distribution function of a dataset consisting of 200 elements. how many modes does the dataset show?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  2184,  3275,  2321,  1012,  2403,  8834,  1996,
        10629,  1997,  2019, 17537,  4353,  3853,  1997,  1037,  2951, 13462,
         5398,  1997,  3263,  3787,  1012,  2129,  2116, 11583,  2515,  1996,
         2951, 13462,  2265,  1029,   102])"
1607,1,"['dataset', 'function', 'histogram', 'distribution', 'distribution function', 'bin', 'empirical distribution function']", Exercises,seg_211,"15.11 given is a histogram and the empirical distribution function fn of the same dataset. show that the height of the histogram on a bin (a, b] is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  2340,  2445,  2003,  1037,  2010,  3406, 13113,
         1998,  1996, 17537,  4353,  3853,  1042,  2078,  1997,  1996,  2168,
         2951, 13462,  1012,  2265,  2008,  1996,  4578,  1997,  1996,  2010,
         3406, 13113,  2006,  1037,  8026,  1006,  1037,  1010,  1038,  1033,
         2003,   102])"
1608,1,"['probability', 'estimate', 'kernel']", Exercises,seg_211,"15.12 let fn,h be a kernel estimate. as mentioned in section 15.3, fn,h itself is a probability density.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2321,  1012,  2260,  2292,  1042,  2078,  1010,  1044,  2022,
         1037, 16293, 10197,  1012,  2004,  3855,  1999,  2930,  2321,  1012,
         1017,  1010,  1042,  2078,  1010,  1044,  2993,  2003,  1037,  9723,
         4304,  1012,   102])"
1609,1,['expectation'], Exercises,seg_211,a. show that the corresponding expectation is equal to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2265,  2008,  1996,  7978, 17626,  2003,  5020,
         2000,   102])"
1610,0,[], Exercises,seg_211,hint: you might consult the solution to quick exercise 15.4.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  9374,  1024,  2017,  2453, 23363,  1996,  5576,  2000,  4248,
         6912,  2321,  1012,  1018,  1012,   102])"
1611,1,"['moment', 'second moment']", Exercises,seg_211,"b. show that the second moment corresponding to fn,h satisfies",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2265,  2008,  1996,  2117,  2617,  7978,  2000,
         1042,  2078,  1010,  1044,  2938,  2483, 14213,   102])"
1612,1,"['variability', 'boxplot', 'center of a dataset', 'mean', 'dataset', 'sample mean', 'probability distributions', 'empirical quantiles', 'probability', 'random variables', 'quantiles', 'graphical', 'distributions', 'sample', 'random', 'variables', 'numerical']", Exploratory data analysis numerical summaries,seg_213,"the classical way to describe important features of a dataset is to give several numerical summaries. we discuss numerical summaries for the center of a dataset and for the amount of variability among the elements of a dataset, and then we introduce the notion of quantiles for a dataset. to distinguish these quantities from corresponding notions for probability distributions of random variables, we will often add the word sample or empirical ; for instance, we will speak of the sample mean and empirical quantiles. we end this chapter with the boxplot, which combines some of the numerical summaries in a graphical display.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 4654, 24759,  6525,  7062,  2951,  4106, 15973,  7680,  7849,  3111])","tensor([  101,  1996,  4556,  2126,  2000,  6235,  2590,  2838,  1997,  1037,
         2951, 13462,  2003,  2000,  2507,  2195, 15973,  7680,  7849,  3111,
         1012,  2057,  6848, 15973,  7680,  7849,  3111,  2005,  1996,  2415,
         1997,  1037,  2951, 13462,  1998,  2005,  1996,  3815,  1997, 28436,
         2426,  1996,  3787,  1997,  1037,  2951, 13462,  1010,  1998,  2059,
         2057,  8970,  1996,  9366,  1997, 24110, 15286,  2015,  2005,  1037,
         2951, 13462,  1012,  2000, 10782,  2122, 12450,  2013,  7978, 21951,
         2005,  9723, 20611,  1997,  6721, 10857,  1010,  2057,  2097,  2411,
         5587,  1996,  2773,  7099,  2030, 17537,  1025,  2005,  6013,  1010,
         2057,  2097,  3713,  1997,  1996,  7099,  2812,  1998, 17537, 24110,
        15286,  2015,  1012,  2057,  2203,  2023,  3127,  2007,  1996,  3482,
        24759,  4140,  1010,  2029, 13585,  2070,  1997,  1996, 15973,  7680,
         7849,  3111,  1999,  1037, 20477,  4653,  1012,   102])"
1613,1,"['center of a dataset', 'dataset', 'method']", The center of a dataset,seg_215,the best-known method to identify the center of a dataset is to compute the,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  1996,  2190,  1011,  2124,  4118,  2000,  6709,  1996,  2415,
         1997,  1037,  2951, 13462,  2003,  2000, 24134,  1996,   102])"
1614,1,['mean'], The center of a dataset,seg_215,sample mean x1 + x2 + · · · + xn,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([ 101, 7099, 2812, 1060, 2487, 1009, 1060, 2475, 1009, 1087, 1087, 1087,
        1009, 1060, 2078,  102])"
1615,1,"['mean', 'dataset', 'sample', 'measurements', 'sample mean']", The center of a dataset,seg_215,"for the sake of notational convenience we will sometimes drop the subscript n and write x̄ instead of x̄n. the following dataset consists of hourly temperatures in degrees fahrenheit (rounded to the nearest integer), recorded at wick in northern scotland from 5 p.m. december 31, 1960, to 3 a.m. january 1, 1961. the sample mean of the 11 measurements is equal to 44.7.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  2005,  1996,  8739,  1997, 14869,  2389, 15106,  2057,  2097,
         2823,  4530,  1996,  4942, 22483,  1050,  1998,  4339,  1060,  2612,
         1997,  1060,  2078,  1012,  1996,  2206,  2951, 13462,  3774,  1997,
        21462,  7715,  1999,  5445,  6904, 28362, 25311, 20175,  1006,  8352,
         2000,  1996,  7205, 16109,  1007,  1010,  2680,  2012, 15536,  3600,
         1999,  2642,  3885,  2013,  1019,  1052,  1012,  1049,  1012,  2285,
         2861,  1010,  3624,  1010,  2000,  1017,  1037,  1012,  1049,  1012,
         2254,  1015,  1010,  3777,  1012,  1996,  7099,  2812,  1997,  1996,
         2340, 11702,  2003,  5020,  2000,  4008,  1012,  1021,  1012,   102])"
1616,1,"['dataset', 'sample median', 'sample', 'center of a dataset', 'median']", The center of a dataset,seg_215,"another way to identify the center of a dataset is by means of the sample median, which we will denote by med(x1, x2, . . . , xn) or briefly medn. the sample median is defined as the middle element of the dataset when it is put in ascending order. when n is odd, it is clear what this means. when n is even,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  2178,  2126,  2000,  6709,  1996,  2415,  1997,  1037,  2951,
        13462,  2003,  2011,  2965,  1997,  1996,  7099,  3991,  1010,  2029,
         2057,  2097, 19090,  2011, 19960,  1006,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1007,  2030,
         4780, 19960,  2078,  1012,  1996,  7099,  3991,  2003,  4225,  2004,
         1996,  2690,  5783,  1997,  1996,  2951, 13462,  2043,  2009,  2003,
         2404,  1999, 22316,  2344,  1012,  2043,  1050,  2003,  5976,  1010,
         2009,  2003,  3154,  2054,  2023,  2965,  1012,  2043,  1050,  2003,
         2130,  1010,   102])"
1617,1,"['sample median', 'sample', 'average', 'data', 'median']", The center of a dataset,seg_215,we take the average of the two middle elements. for the wick temperature data the sample median is equal to 42.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  2057,  2202,  1996,  2779,  1997,  1996,  2048,  2690,  3787,
         1012,  2005,  1996, 15536,  3600,  4860,  2951,  1996,  7099,  3991,
         2003,  5020,  2000,  4413,  1012,   102])"
1618,1,"['mean', 'dataset', 'sample median', 'sample', 'sample mean', 'median']", The center of a dataset,seg_215,quick exercise 16.1 compute the sample mean and sample median of the dataset,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  4248,  6912,  2385,  1012,  1015, 24134,  1996,  7099,  2812,
         1998,  7099,  3991,  1997,  1996,  2951, 13462,   102])"
1619,1,"['mean', 'dataset', 'probability', 'observations', 'sample', 'outliers', 'expectation', 'distribution', 'data', 'sample mean', 'probability distribution']", The center of a dataset,seg_215,"both methods have pros and cons. the sample mean is the natural analogue for a dataset of what the expectation is for a probability distribution. however, it is very sensitive to outliers, by which we mean observations in the dataset that deviate a lot from the bulk of the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  2119,  4725,  2031,  4013,  2015,  1998,  9530,  2015,  1012,
         1996,  7099,  2812,  2003,  1996,  3019, 21800,  2005,  1037,  2951,
        13462,  1997,  2054,  1996, 17626,  2003,  2005,  1037,  9723,  4353,
         1012,  2174,  1010,  2009,  2003,  2200,  7591,  2000,  2041, 14355,
         2015,  1010,  2011,  2029,  2057,  2812,  9420,  1999,  1996,  2951,
        13462,  2008, 14386,  3686,  1037,  2843,  2013,  1996,  9625,  1997,
         1996,  2951,  1012,   102])"
1620,1,"['mean', 'sensitivity', 'sample median', 'sample', 'outliers', 'sample mean', 'measurements', 'average', 'data', 'median']", The center of a dataset,seg_215,"to illustrate the sensitivity of the sample mean, consider the wick temperature data displayed in figure 16.1. the values 58 and 58 recorded at midnight and 1 a.m. are clearly far from the bulk of the data and give grounds for concern whether they are genuine (58 degrees fahrenheit seems very warm at midnight for new year’s in northern scotland). to investigate their effect on the sample mean we compute the average of the data, leaving out these measurements, which gives 41.8 (instead of 44.7). the sample median of the data is equal to 41 (instead of 42) when leaving out the measurements with value 58. the median is more robust in the sense that it is hardly affected by a few outliers.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  2000, 19141,  1996, 14639,  1997,  1996,  7099,  2812,  1010,
         5136,  1996, 15536,  3600,  4860,  2951,  6913,  1999,  3275,  2385,
         1012,  1015,  1012,  1996,  5300,  5388,  1998,  5388,  2680,  2012,
         7090,  1998,  1015,  1037,  1012,  1049,  1012,  2024,  4415,  2521,
         2013,  1996,  9625,  1997,  1996,  2951,  1998,  2507,  5286,  2005,
         5142,  3251,  2027,  2024, 10218,  1006,  5388,  5445,  6904, 28362,
        25311, 20175,  3849,  2200,  4010,  2012,  7090,  2005,  2047,  2095,
         1521,  1055,  1999,  2642,  3885,  1007,  1012,  2000,  8556,  2037,
         3466,  2006,  1996,  7099,  2812,  2057, 24134,  1996,  2779,  1997,
         1996,  2951,  1010,  2975,  2041,  2122, 11702,  1010,  2029,  3957,
         4601,  1012,  1022,  1006,  2612,  1997,  4008,  1012,  1021,  1007,
         1012,  1996,  7099,  3991,  1997,  1996,  2951,  2003,  5020,  2000,
         4601,  1006,  2612,  1997,  4413,  1007,  2043,  2975,  2041,  1996,
        11702,  2007,  3643,  5388,  1012,  1996,  3991,  2003,  2062, 15873,
         1999,  1996,  3168,  2008,  2009,  2003,  6684,  5360,  2011,  1037,
         2261,  2041, 14355,  2015,  1012,   102])"
1621,1,"['mean', 'sensitivity', 'sample', 'measurement', 'measurements', 'outlier', 'data', 'sample mean', 'case']", The center of a dataset,seg_215,"it should be emphasized that this discussion is only meant to illustrate the sensitivity of the sample mean and by no means is intended to suggest we leave out measurements that deviate a lot from the bulk of the data! it is important to be aware of the presence of an outlier. in that case, one could try to find out whether there is perhaps something suspicious about this measurement. this might lead to assigning a smaller weight to such a measurement or even to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  2009,  2323,  2022, 13155,  2008,  2023,  6594,  2003,  2069,
         3214,  2000, 19141,  1996, 14639,  1997,  1996,  7099,  2812,  1998,
         2011,  2053,  2965,  2003,  3832,  2000,  6592,  2057,  2681,  2041,
        11702,  2008, 14386,  3686,  1037,  2843,  2013,  1996,  9625,  1997,
         1996,  2951,   999,  2009,  2003,  2590,  2000,  2022,  5204,  1997,
         1996,  3739,  1997,  2019,  2041, 14355,  1012,  1999,  2008,  2553,
         1010,  2028,  2071,  3046,  2000,  2424,  2041,  3251,  2045,  2003,
         3383,  2242, 10027,  2055,  2023, 10903,  1012,  2023,  2453,  2599,
         2000, 23911,  2075,  1037,  3760,  3635,  2000,  2107,  1037, 10903,
         2030,  2130,  2000,   102])"
1622,1,"['dataset', 'measurement']", The center of a dataset,seg_215,"removing it from the dataset. however, sometimes it is possible to reconstruct the exact circumstances and correct the measurement. for instance, after further inquiry in the temperature example it turned out that at midnight the meteorological office changed its recording unit from degrees fahrenheit to 1/10th degree celsius (so 58 and 41 should read 5.8◦c and 4.1◦c). the corrected values in degrees fahrenheit (to the nearest integer) are",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  9268,  2009,  2013,  1996,  2951, 13462,  1012,  2174,  1010,
         2823,  2009,  2003,  2825,  2000, 28667,  5644, 18300,  1996,  6635,
         6214,  1998,  6149,  1996, 10903,  1012,  2005,  6013,  1010,  2044,
         2582,  9934,  1999,  1996,  4860,  2742,  2009,  2357,  2041,  2008,
         2012,  7090,  1996, 20557,  2436,  2904,  2049,  3405,  3131,  2013,
         5445,  6904, 28362, 25311, 20175,  2000,  1015,  1013,  6049,  3014,
         8292,  4877,  4173,  1006,  2061,  5388,  1998,  4601,  2323,  3191,
         1019,  1012,   100,  1998,  1018,  1012,   100,  1007,  1012,  1996,
        13371,  5300,  1999,  5445,  6904, 28362, 25311, 20175,  1006,  2000,
         1996,  7205, 16109,  1007,  2024,   102])"
1623,1,"['mean', 'sample median', 'sample', 'sample mean', 'data', 'median']", The center of a dataset,seg_215,for the corrected data the sample mean is 41.5 and the sample median is 42.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  2005,  1996, 13371,  2951,  1996,  7099,  2812,  2003,  4601,
         1012,  1019,  1998,  1996,  7099,  3991,  2003,  4413,  1012,   102])"
1624,1,['dataset'], The center of a dataset,seg_215,quick exercise 16.2 consider the same dataset as in quick exercise 16.1. suppose that someone misreads the dataset as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101,  4248,  6912,  2385,  1012,  1016,  5136,  1996,  2168,  2951,
        13462,  2004,  1999,  4248,  6912,  2385,  1012,  1015,  1012,  6814,
         2008,  2619, 28616, 16416,  5104,  1996,  2951, 13462,  2004,   102])"
1625,1,"['mean', 'sample median', 'sample', 'median', 'sample mean']", The center of a dataset,seg_215,compute the sample mean and sample median and compare these values with the ones you found in quick exercise 16.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2415,  1997,  1037,  2951, 13462])","tensor([  101, 24134,  1996,  7099,  2812,  1998,  7099,  3991,  1998, 12826,
         2122,  5300,  2007,  1996,  3924,  2017,  2179,  1999,  4248,  6912,
         2385,  1012,  1015,  1012,   102])"
1626,1,"['variability', 'dataset', 'variance', 'sample', 'sample variance']", The amount of variability of a dataset,seg_217,"to quantify the amount of variability among the elements of a dataset, one often uses the sample variance defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2000, 24110, 27351,  1996,  3815,  1997, 28436,  2426,  1996,
         3787,  1997,  1037,  2951, 13462,  1010,  2028,  2411,  3594,  1996,
         7099, 23284,  4225,  2011,   102])"
1627,1,"['deviation', 'variance', 'sample', 'factor', 'sample variance', 'average']", The amount of variability of a dataset,seg_217,"up to a scaling factor this is equal to the average squared deviation from x̄n. at first sight, it seems more natural to define the sample variance by",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2039,  2000,  1037, 25169,  5387,  2023,  2003,  5020,  2000,
         1996,  2779, 19942, 24353,  2013,  1060,  2078,  1012,  2012,  2034,
         4356,  1010,  2009,  3849,  2062,  3019,  2000,  9375,  1996,  7099,
        23284,  2011,   102])"
1628,1,"['dataset', 'deviation', 'sample', 'factor', 'sample standard deviation', 'standard deviation', 'standard']", The amount of variability of a dataset,seg_217,"why we choose the factor 1/(n−1) instead of 1/n will be explained later (see chapter 19). because s2n is in different units from the elements of the dataset, one often prefers the sample standard deviation",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2339,  2057,  5454,  1996,  5387,  1015,  1013,  1006,  1050,
        27944,  1007,  2612,  1997,  1015,  1013,  1050,  2097,  2022,  4541,
         2101,  1006,  2156,  3127,  2539,  1007,  1012,  2138,  1055,  2475,
         2078,  2003,  1999,  2367,  3197,  2013,  1996,  3787,  1997,  1996,
         2951, 13462,  1010,  2028,  2411, 19233,  1996,  7099,  3115, 24353,
          102])"
1629,1,['dataset'], The amount of variability of a dataset,seg_217,which is measured in the same units as the elements of the dataset itself.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2029,  2003,  7594,  1999,  1996,  2168,  3197,  2004,  1996,
         3787,  1997,  1996,  2951, 13462,  2993,  1012,   102])"
1630,1,"['mean', 'deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard', 'outliers', 'measurements', 'data', 'sample mean']", The amount of variability of a dataset,seg_217,"just as the sample mean, the sample standard deviation is very sensitive to outliers. for the (uncorrected) wick temperature data the sample standard deviation is 6.62, or 0.97 if we leave out the two measurements with value 58.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2074,  2004,  1996,  7099,  2812,  1010,  1996,  7099,  3115,
        24353,  2003,  2200,  7591,  2000,  2041, 14355,  2015,  1012,  2005,
         1996,  1006,  4895, 27108,  2890, 10985,  1007, 15536,  3600,  4860,
         2951,  1996,  7099,  3115, 24353,  2003,  1020,  1012,  5786,  1010,
         2030,  1014,  1012,  5989,  2065,  2057,  2681,  2041,  1996,  2048,
        11702,  2007,  3643,  5388,  1012,   102])"
1631,1,"['variability', 'deviation', 'sample median', 'median of absolute deviations', 'sample', 'standard deviation', 'deviations', 'standard', 'data', 'median']", The amount of variability of a dataset,seg_217,"for the corrected data the standard deviation is 1.44. a more robust measure of variability is the median of absolute deviations or mad, which is defined as follows. consider the absolute deviation of every element xi with respect to the sample median:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2005,  1996, 13371,  2951,  1996,  3115, 24353,  2003,  1015,
         1012,  4008,  1012,  1037,  2062, 15873,  5468,  1997, 28436,  2003,
         1996,  3991,  1997,  7619, 24353,  2015,  2030,  5506,  1010,  2029,
         2003,  4225,  2004,  4076,  1012,  5136,  1996,  7619, 24353,  1997,
         2296,  5783,  8418,  2007,  4847,  2000,  1996,  7099,  3991,  1024,
          102])"
1632,1,"['deviations', 'median']", The amount of variability of a dataset,seg_217,the mad is obtained by taking the median of all these absolute deviations,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  1996,  5506,  2003,  4663,  2011,  2635,  1996,  3991,  1997,
         2035,  2122,  7619, 24353,  2015,   102])"
1633,1,"['dataset', 'deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard']", The amount of variability of a dataset,seg_217,quick exercise 16.3 compute the sample standard deviation for the dataset of quick exercise 16.1 for which it is given that the values of xi − x̄n are:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  4248,  6912,  2385,  1012,  1017, 24134,  1996,  7099,  3115,
        24353,  2005,  1996,  2951, 13462,  1997,  4248,  6912,  2385,  1012,
         1015,  2005,  2029,  2009,  2003,  2445,  2008,  1996,  5300,  1997,
         8418,  1597,  1060,  2078,  2024,  1024,   102])"
1634,1,['dataset'], The amount of variability of a dataset,seg_217,also compute the mad for this dataset.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2036, 24134,  1996,  5506,  2005,  2023,  2951, 13462,  1012,
          102])"
1635,1,"['observations', 'sample median', 'sample', 'outliers', 'measurements', 'data', 'median']", The amount of variability of a dataset,seg_217,"just as the sample median, the mad is hardly affected by outliers. for the (uncorrected) wick temperature data the mad is 1 and equal to 0 if we leave out the two measurements with value 58 (the value 0 seems a bit strange, but is a consequence of the fact that the observations are given in degrees fahrenheit rounded to the nearest integer). for the corrected data the mad is 1.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2074,  2004,  1996,  7099,  3991,  1010,  1996,  5506,  2003,
         6684,  5360,  2011,  2041, 14355,  2015,  1012,  2005,  1996,  1006,
         4895, 27108,  2890, 10985,  1007, 15536,  3600,  4860,  2951,  1996,
         5506,  2003,  1015,  1998,  5020,  2000,  1014,  2065,  2057,  2681,
         2041,  1996,  2048, 11702,  2007,  3643,  5388,  1006,  1996,  3643,
         1014,  3849,  1037,  2978,  4326,  1010,  2021,  2003,  1037,  9509,
         1997,  1996,  2755,  2008,  1996,  9420,  2024,  2445,  1999,  5445,
         6904, 28362, 25311, 20175,  8352,  2000,  1996,  7205, 16109,  1007,
         1012,  2005,  1996, 13371,  2951,  1996,  5506,  2003,  1015,  1012,
          102])"
1636,1,"['dataset', 'deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard']", The amount of variability of a dataset,seg_217,quick exercise 16.4 compute the sample standard deviation for the misread dataset of quick exercise 16.2 for which it is given that the values of xi − x̄n are:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  4248,  6912,  2385,  1012,  1018, 24134,  1996,  7099,  3115,
        24353,  2005,  1996, 28616, 16416,  2094,  2951, 13462,  1997,  4248,
         6912,  2385,  1012,  1016,  2005,  2029,  2009,  2003,  2445,  2008,
         1996,  5300,  1997,  8418,  1597,  1060,  2078,  2024,  1024,   102])"
1637,1,['dataset'], The amount of variability of a dataset,seg_217,also compute the mad for this dataset and compare both values with the ones you found in quick exercise 16.3.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3815,  1997, 28436,  1997,  1037,  2951, 13462])","tensor([  101,  2036, 24134,  1996,  5506,  2005,  2023,  2951, 13462,  1998,
        12826,  2119,  5300,  2007,  1996,  3924,  2017,  2179,  1999,  4248,
         6912,  2385,  1012,  1017,  1012,   102])"
1638,1,"['quantile', 'dataset', 'empirical quantiles', 'order statistics', 'sample median', 'empirical quantile', 'percentile', 'sample', 'empirical percentile', 'statistics', 'quantiles', 'median']", Empirical quantiles quartiles and the IQR,seg_219,"the sample median divides the dataset in two more or less equal parts: about half of the elements are less than the median and about half of the elements are greater than the median. more generally, we can divide the dataset in two parts in such a way that a proportion p is less than a certain number and a proportion 1 − p is greater than this number. such a number is called the 100p empirical percentile or the pth empirical quantile and is denoted by qn(p). for a suitable introduction of empirical quantiles we need the notion of order statistics.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  1996,  7099,  3991, 20487,  1996,  2951, 13462,  1999,  2048,
         2062,  2030,  2625,  5020,  3033,  1024,  2055,  2431,  1997,  1996,
         3787,  2024,  2625,  2084,  1996,  3991,  1998,  2055,  2431,  1997,
         1996,  3787,  2024,  3618,  2084,  1996,  3991,  1012,  2062,  3227,
         1010,  2057,  2064, 11443,  1996,  2951, 13462,  1999,  2048,  3033,
         1999,  2107,  1037,  2126,  2008,  1037, 10817,  1052,  2003,  2625,
         2084,  1037,  3056,  2193,  1998,  1037, 10817,  1015,  1597,  1052,
         2003,  3618,  2084,  2023,  2193,  1012,  2107,  1037,  2193,  2003,
         2170,  1996,  2531,  2361, 17537,  3867,  9463,  2030,  1996, 13866,
         2232, 17537, 24110, 15286,  1998,  2003, 19537,  2011,  1053,  2078,
         1006,  1052,  1007,  1012,  2005,  1037,  7218,  4955,  1997, 17537,
        24110, 15286,  2015,  2057,  2342,  1996,  9366,  1997,  2344,  6747,
         1012,   102])"
1639,1,"['dataset', 'order statistics', 'statistics']", Empirical quantiles quartiles and the IQR,seg_219,"the order statistics consist of the same elements as in the original dataset x1, x2, . . . , xn, but in ascending order. denote by x(k) the kth element in the ordered list. then",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  1996,  2344,  6747,  8676,  1997,  1996,  2168,  3787,  2004,
         1999,  1996,  2434,  2951, 13462,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  2021,  1999,
        22316,  2344,  1012, 19090,  2011,  1060,  1006,  1047,  1007,  1996,
         1047,  2705,  5783,  1999,  1996,  3641,  2862,  1012,  2059,   102])"
1640,1,"['order statistics', 'data', 'statistics']", Empirical quantiles quartiles and the IQR,seg_219,"are called the order statistics of x1, x2, . . . , xn. the order statistics of the wick temperature data are",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  2024,  2170,  1996,  2344,  6747,  1997,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1012,
         1996,  2344,  6747,  1997,  1996, 15536,  3600,  4860,  2951,  2024,
          102])"
1641,1,"['dataset', 'order statistics', 'table', 'statistics']", Empirical quantiles quartiles and the IQR,seg_219,"note that by putting the elements in order, it is possible that successive order statistics are the same, for instance, x(1) = · · · = x(5) = 41. another example is table 15.2, which lists the order statistics of the old faithful dataset.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  3602,  2008,  2011,  5128,  1996,  3787,  1999,  2344,  1010,
         2009,  2003,  2825,  2008, 11165,  2344,  6747,  2024,  1996,  2168,
         1010,  2005,  6013,  1010,  1060,  1006,  1015,  1007,  1027,  1087,
         1087,  1087,  1027,  1060,  1006,  1019,  1007,  1027,  4601,  1012,
         2178,  2742,  2003,  2795,  2321,  1012,  1016,  1010,  2029,  7201,
         1996,  2344,  6747,  1997,  1996,  2214, 11633,  2951, 13462,  1012,
          102])"
1642,1,"['quantile', 'dataset', 'empirical quantiles', 'order statistic', 'empirical quantile', 'integer part', 'quantiles', 'statistic']", Empirical quantiles quartiles and the IQR,seg_219,"to compute empirical quantiles one linearly interpolates between order statistics of the dataset. let 0 < p < 1, and suppose we want to compute the pth empirical quantile for a dataset x1, x2, . . . , xn. the following computation is based on requiring that the ith order statistic is the i/(n + 1) quantile. if we denote the integer part of a by a , then the computation of qn(p) runs as follows:",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  2000, 24134, 17537, 24110, 15286,  2015,  2028,  7399,  2135,
         6970, 18155,  8520,  2090,  2344,  6747,  1997,  1996,  2951, 13462,
         1012,  2292,  1014,  1026,  1052,  1026,  1015,  1010,  1998,  6814,
         2057,  2215,  2000, 24134,  1996, 13866,  2232, 17537, 24110, 15286,
         2005,  1037,  2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1012,  1996,  2206, 22334,
         2003,  2241,  2006,  9034,  2008,  1996,  2009,  2232,  2344, 28093,
         6553,  2003,  1996,  1045,  1013,  1006,  1050,  1009,  1015,  1007,
        24110, 15286,  1012,  2065,  2057, 19090,  1996, 16109,  2112,  1997,
         1037,  2011,  1037,  1010,  2059,  1996, 22334,  1997,  1053,  2078,
         1006,  1052,  1007,  3216,  2004,  4076,  1024,   102])"
1643,1,"['quantile', 'function', 'distribution', 'distribution function', 'data', 'empirical distribution function']", Empirical quantiles quartiles and the IQR,seg_219,with k = p(n + 1) and α = p(n + 1) − k. on the left in figure 16.2 the relation between the pth quantile and the empirical distribution function is illustrated for the old faithful data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  2007,  1047,  1027,  1052,  1006,  1050,  1009,  1015,  1007,
         1998,  1155,  1027,  1052,  1006,  1050,  1009,  1015,  1007,  1597,
         1047,  1012,  2006,  1996,  2187,  1999,  3275,  2385,  1012,  1016,
         1996,  7189,  2090,  1996, 13866,  2232, 24110, 15286,  1998,  1996,
        17537,  4353,  3853,  2003,  7203,  2005,  1996,  2214, 11633,  2951,
         1012,   102])"
1644,1,"['empirical percentile', 'data', 'percentile']", Empirical quantiles quartiles and the IQR,seg_219,quick exercise 16.5 compute the 55th empirical percentile for the wick temperature data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  4248,  6912,  2385,  1012,  1019, 24134,  1996, 29075, 17537,
         3867,  9463,  2005,  1996, 15536,  3600,  4860,  2951,  1012,   102])"
1645,1,['quartiles'], Empirical quantiles quartiles and the IQR,seg_219,lower and upper quartiles,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  2896,  1998,  3356, 24209,  8445,  9463,  2015,   102])"
1646,1,"['empirical percentiles', 'percentiles', 'median', 'dataset', 'interquartile range', 'skewness', 'quartiles', 'empirical percentile', 'quartile', 'data', 'empirical distribution function', 'function', 'upper quartile', 'percentile', 'range', 'sample median', 'sample', 'distribution', 'distribution function']", Empirical quantiles quartiles and the IQR,seg_219,"instead of identifying only the center of the dataset, tukey [35] suggested to give a five-number summary of the dataset: the minimum, the maximum, the sample median, and the 25th and 75th empirical percentiles. the 25th empirical percentile qn(0.25) is called the lower quartile and the 75th empirical percentile qn(0.75) is called the upper quartile. together with the median, the lower and upper quartiles divide the dataset in four more or less equal parts consisting of about one quarter of the number of elements. the relation of the two quartiles and the median with the empirical distribution function is illustrated for the old faithful data on the right of figure 16.2. the distance between the lower quartile and the median, relative to the distance between the upper quartile and the median, gives some indication on the skewness of the dataset. the distance between the upper and lower quartiles is called the interquartile range, or iqr:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  2612,  1997, 12151,  2069,  1996,  2415,  1997,  1996,  2951,
        13462,  1010, 10722, 14839,  1031,  3486,  1033,  4081,  2000,  2507,
         1037,  2274,  1011,  2193, 12654,  1997,  1996,  2951, 13462,  1024,
         1996,  6263,  1010,  1996,  4555,  1010,  1996,  7099,  3991,  1010,
         1998,  1996, 10965,  1998, 25092, 17537,  3867,  9463,  2015,  1012,
         1996, 10965, 17537,  3867,  9463,  1053,  2078,  1006,  1014,  1012,
         2423,  1007,  2003,  2170,  1996,  2896, 24209,  8445,  9463,  1998,
         1996, 25092, 17537,  3867,  9463,  1053,  2078,  1006,  1014,  1012,
         4293,  1007,  2003,  2170,  1996,  3356, 24209,  8445,  9463,  1012,
         2362,  2007,  1996,  3991,  1010,  1996,  2896,  1998,  3356, 24209,
         8445,  9463,  2015, 11443,  1996,  2951, 13462,  1999,  2176,  2062,
         2030,  2625,  5020,  3033,  5398,  1997,  2055,  2028,  4284,  1997,
         1996,  2193,  1997,  3787,  1012,  1996,  7189,  1997,  1996,  2048,
        24209,  8445,  9463,  2015,  1998,  1996,  3991,  2007,  1996, 17537,
         4353,  3853,  2003,  7203,  2005,  1996,  2214, 11633,  2951,  2006,
         1996,  2157,  1997,  3275,  2385,  1012,  1016,  1012,  1996,  3292,
         2090,  1996,  2896, 24209,  8445,  9463,  1998,  1996,  3991,  1010,
         5816,  2000,  1996,  3292,  2090,  1996,  3356, 24209,  8445,  9463,
         1998,  1996,  3991,  1010,  3957,  2070, 12407,  2006,  1996, 15315,
         7974,  2791,  1997,  1996,  2951, 13462,  1012,  1996,  3292,  2090,
         1996,  3356,  1998,  2896, 24209,  8445,  9463,  2015,  2003,  2170,
         1996,  6970, 16211, 28228,  2571,  2846,  1010,  2030, 26264,  2099,
         1024,   102])"
1647,1,"['variability', 'dataset', 'range', 'data']", Empirical quantiles quartiles and the IQR,seg_219,the iqr specifies the range of the middle half of the dataset. it could also serve as a robust measure of the amount of variability among the elements of the dataset. for the old faithful data the five-number summary is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  1996, 26264,  2099, 27171,  1996,  2846,  1997,  1996,  2690,
         2431,  1997,  1996,  2951, 13462,  1012,  2009,  2071,  2036,  3710,
         2004,  1037, 15873,  5468,  1997,  1996,  3815,  1997, 28436,  2426,
         1996,  3787,  1997,  1996,  2951, 13462,  1012,  2005,  1996,  2214,
        11633,  2951,  1996,  2274,  1011,  2193, 12654,  2003,   102])"
1648,1,"['quartile', 'median', 'upper quartile']", Empirical quantiles quartiles and the IQR,seg_219,minimum lower quartile median upper quartile maximum 96 129.25 240 267.75 306,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  6263,  2896, 24209,  8445,  9463,  3991,  3356, 24209,  8445,
         9463,  4555,  5986, 14378,  1012,  2423, 11212, 25491,  1012,  4293,
        24622,   102])"
1649,1,['data'], Empirical quantiles quartiles and the IQR,seg_219,quick exercise 16.6 compute the five-number summary for the (uncorrected) wick temperature data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([17537, 24110, 15286,  2015, 24209,  8445,  9463,  2015,  1998,  1996,
        26264,  2099])","tensor([  101,  4248,  6912,  2385,  1012,  1020, 24134,  1996,  2274,  1011,
         2193, 12654,  2005,  1996,  1006,  4895, 27108,  2890, 10985,  1007,
        15536,  3600,  4860,  2951,  1012,   102])"
1650,1,"['observation', 'observations', 'outlier', 'sample median', 'boxplot', 'sample', 'whiskers', 'whisker', 'upper quartile', 'plot', 'quartile', 'data', 'median']", The boxandwhisker plot,seg_221,"tukey [35] also proposed visualizing the five-number summary discussed in the previous section by a so-called box-and-whisker plot, briefly boxplot. figure 16.3 displays a boxplot. the data are now on the vertical axis, where we left out the numbers on the axis in order to explain the construction of the figure. the horizontal width of the box is irrelevant. in the vertical direction the box extends from the lower to the upper quartile, so that the height of the box is precisely the iqr. the horizontal line inside the box corresponds to the sample median. up from the upper quartile we measure out a distance of 1.5 times the iqr and draw a so-called whisker up to the largest observation that lies within this distance, where we put a horizontal line. similarly, down from the lower quartile we measure out a distance of 1.5 times the iqr and draw a whisker to the smallest observation that lies within this distance, where we also put a horizontal line. all other observations beyond the whiskers are marked by ◦. such an observation is called an outlier.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  3482,  5685,  2860, 24158,  5484,  5436])","tensor([  101, 10722, 14839,  1031,  3486,  1033,  2036,  3818,  5107,  6026,
         1996,  2274,  1011,  2193, 12654,  6936,  1999,  1996,  3025,  2930,
         2011,  1037,  2061,  1011,  2170,  3482,  1011,  1998,  1011,  1059,
        24158,  5484,  5436,  1010,  4780,  3482, 24759,  4140,  1012,  3275,
         2385,  1012,  1017,  8834,  1037,  3482, 24759,  4140,  1012,  1996,
         2951,  2024,  2085,  2006,  1996,  7471,  8123,  1010,  2073,  2057,
         2187,  2041,  1996,  3616,  2006,  1996,  8123,  1999,  2344,  2000,
         4863,  1996,  2810,  1997,  1996,  3275,  1012,  1996,  9876,  9381,
         1997,  1996,  3482,  2003, 22537,  1012,  1999,  1996,  7471,  3257,
         1996,  3482,  8908,  2013,  1996,  2896,  2000,  1996,  3356, 24209,
         8445,  9463,  1010,  2061,  2008,  1996,  4578,  1997,  1996,  3482,
         2003, 10785,  1996, 26264,  2099,  1012,  1996,  9876,  2240,  2503,
         1996,  3482, 14788,  2000,  1996,  7099,  3991,  1012,  2039,  2013,
         1996,  3356, 24209,  8445,  9463,  2057,  5468,  2041,  1037,  3292,
         1997,  1015,  1012,  1019,  2335,  1996, 26264,  2099,  1998,  4009,
         1037,  2061,  1011,  2170,  1059, 24158,  5484,  2039,  2000,  1996,
         2922,  8089,  2008,  3658,  2306,  2023,  3292,  1010,  2073,  2057,
         2404,  1037,  9876,  2240,  1012,  6660,  1010,  2091,  2013,  1996,
         2896, 24209,  8445,  9463,  2057,  5468,  2041,  1037,  3292,  1997,
         1015,  1012,  1019,  2335,  1996, 26264,  2099,  1998,  4009,  1037,
         1059, 24158,  5484,  2000,  1996, 10479,  8089,  2008,  3658,  2306,
         2023,  3292,  1010,  2073,  2057,  2036,  2404,  1037,  9876,  2240,
         1012,  2035,  2060,  9420,  3458,  1996,  1059, 24158, 11451,  2024,
         4417,  2011,   100,  1012,  2107,  2019,  8089,  2003,  2170,  2019,
         2041, 14355,  1012,   102])"
1651,1,"['dataset', 'skewed', 'boxplots', 'observations', 'skewness', 'sample median', 'boxplot', 'sample', 'whiskers', 'upper quartile', 'quartile', 'data', 'median']", The boxandwhisker plot,seg_221,"in figure 16.4 the boxplots of the old faithful data and of the software reliability data (see also chapter 15) are displayed. the skewness of the software reliability data produces a boxplot with whiskers of very different length and with several observations beyond the upper quartile plus 1.5 times the iqr. the boxplot of the old faithful data illustrates one of the shortcomings of the boxplot; it does not capture the fact that the data show two separate peaks. however, the position of the sample median inside the box does suggest that the dataset is skewed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 1., 0., 0.])","tensor([ 1996,  3482,  5685,  2860, 24158,  5484,  5436])","tensor([  101,  1999,  3275,  2385,  1012,  1018,  1996,  3482, 24759, 12868,
         1997,  1996,  2214, 11633,  2951,  1998,  1997,  1996,  4007, 15258,
         2951,  1006,  2156,  2036,  3127,  2321,  1007,  2024,  6913,  1012,
         1996, 15315,  7974,  2791,  1997,  1996,  4007, 15258,  2951,  7137,
         1037,  3482, 24759,  4140,  2007,  1059, 24158, 11451,  1997,  2200,
         2367,  3091,  1998,  2007,  2195,  9420,  3458,  1996,  3356, 24209,
         8445,  9463,  4606,  1015,  1012,  1019,  2335,  1996, 26264,  2099,
         1012,  1996,  3482, 24759,  4140,  1997,  1996,  2214, 11633,  2951,
        24899,  2028,  1997,  1996,  2460, 18935,  2015,  1997,  1996,  3482,
        24759,  4140,  1025,  2009,  2515,  2025,  5425,  1996,  2755,  2008,
         1996,  2951,  2265,  2048,  3584, 11373,  1012,  2174,  1010,  1996,
         2597,  1997,  1996,  7099,  3991,  2503,  1996,  3482,  2515,  6592,
         2008,  1996,  2951, 13462,  2003, 15315,  7974,  2098,  1012,   102])"
1652,1,"['boxplot', 'whiskers', 'outliers', 'measurements', 'data', 'extreme outliers']", The boxandwhisker plot,seg_221,"quick exercise 16.7 suppose we want to construct a boxplot of the (uncorrected) wick temperature data. what is the height of the box, the length of both whiskers, and which measurements fall outside the box and whiskers? would you consider the two values 58 extreme outliers?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 1996,  3482,  5685,  2860, 24158,  5484,  5436])","tensor([  101,  4248,  6912,  2385,  1012,  1021,  6814,  2057,  2215,  2000,
         9570,  1037,  3482, 24759,  4140,  1997,  1996,  1006,  4895, 27108,
         2890, 10985,  1007, 15536,  3600,  4860,  2951,  1012,  2054,  2003,
         1996,  4578,  1997,  1996,  3482,  1010,  1996,  3091,  1997,  2119,
         1059, 24158, 11451,  1010,  1998,  2029, 11702,  2991,  2648,  1996,
         3482,  1998,  1059, 24158, 11451,  1029,  2052,  2017,  5136,  1996,
         2048,  5300,  5388,  6034,  2041, 14355,  2015,  1029,   102])"
1653,1,['boxplots'], The boxandwhisker plot,seg_221,using boxplots to compare several datasets,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3482,  5685,  2860, 24158,  5484,  5436])","tensor([  101,  2478,  3482, 24759, 12868,  2000, 12826,  2195,  2951, 13462,
         2015,   102])"
1654,1,"['sets', 'table', 'symmetry', 'boxplot', 'dataset', 'estimate', 'skewness', 'histogram', 'data', 'kernel', 'boxplots', 'information', 'kernel density estimate', 'range', 'graphical', 'average']", The boxandwhisker plot,seg_221,"although the boxplot provides some information about the structure of the data, such as center, range, skewness or symmetry, it is a poor graphical display of the dataset. graphical summaries such as the histogram and kernel density estimate are more informative displays of a single dataset. boxplots become useful if we want to compare several sets of data in a simple graphical display. in figure 16.5 boxplots are displayed of the average drill time for dry and wet drilling up to a depth of 250 feet for the drill data discussed in section 15.5 (see also table 15.4). it is clear that the boxplot corresponding to dry drilling differs from that corresponding to wet drilling. however, the question is whether this difference can still be attributed to chance or is caused by the drilling technique used. we will return to this type of question in chapter 25.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3482,  5685,  2860, 24158,  5484,  5436])","tensor([  101,  2348,  1996,  3482, 24759,  4140,  3640,  2070,  2592,  2055,
         1996,  3252,  1997,  1996,  2951,  1010,  2107,  2004,  2415,  1010,
         2846,  1010, 15315,  7974,  2791,  2030, 14991,  1010,  2009,  2003,
         1037,  3532, 20477,  4653,  1997,  1996,  2951, 13462,  1012, 20477,
         7680,  7849,  3111,  2107,  2004,  1996,  2010,  3406, 13113,  1998,
        16293,  4304, 10197,  2024,  2062, 12367,  8082,  8834,  1997,  1037,
         2309,  2951, 13462,  1012,  3482, 24759, 12868,  2468,  6179,  2065,
         2057,  2215,  2000, 12826,  2195,  4520,  1997,  2951,  1999,  1037,
         3722, 20477,  4653,  1012,  1999,  3275,  2385,  1012,  1019,  3482,
        24759, 12868,  2024,  6913,  1997,  1996,  2779, 12913,  2051,  2005,
         4318,  1998,  4954, 15827,  2039,  2000,  1037,  5995,  1997,  5539,
         2519,  2005,  1996, 12913,  2951,  6936,  1999,  2930,  2321,  1012,
         1019,  1006,  2156,  2036,  2795,  2321,  1012,  1018,  1007,  1012,
         2009,  2003,  3154,  2008,  1996,  3482, 24759,  4140,  7978,  2000,
         4318, 15827, 12980,  2013,  2008,  7978,  2000,  4954, 15827,  1012,
         2174,  1010,  1996,  3160,  2003,  3251,  2023,  4489,  2064,  2145,
         2022,  7108,  2000,  3382,  2030,  2003,  3303,  2011,  1996, 15827,
         6028,  2109,  1012,  2057,  2097,  2709,  2000,  2023,  2828,  1997,
         3160,  1999,  3127,  2423,  1012,   102])"
1655,1,['average'], Solutions to the quick exercises,seg_223,16.1 the average is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2385, 1012, 1015, 1996, 2779, 2003,  102])"
1656,1,['median'], Solutions to the quick exercises,seg_223,"the median is the middle element of 3.0, 3.2, 4.2, 4.6, and 5.0, which gives medn = 4.2.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1996,  3991,  2003,  1996,  2690,  5783,  1997,  1017,  1012,
         1014,  1010,  1017,  1012,  1016,  1010,  1018,  1012,  1016,  1010,
         1018,  1012,  1020,  1010,  1998,  1019,  1012,  1014,  1010,  2029,
         3957, 19960,  2078,  1027,  1018,  1012,  1016,  1012,   102])"
1657,1,['average'], Solutions to the quick exercises,seg_223,16.2 the average is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2385, 1012, 1016, 1996, 2779, 2003,  102])"
1658,1,"['average', 'outliers', 'median']", Solutions to the quick exercises,seg_223,"which differs 14.4 from the average we found in quick exercise 16.1. the median is the middle element of 3.2, 4.2, 4.6, 30, and 50. this gives medn = 4.6, which only differs 0.4 from the median we found in quick exercise 16.1. as one can see, the median is hardly affected by the two outliers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2029, 12980,  2403,  1012,  1018,  2013,  1996,  2779,  2057,
         2179,  1999,  4248,  6912,  2385,  1012,  1015,  1012,  1996,  3991,
         2003,  1996,  2690,  5783,  1997,  1017,  1012,  1016,  1010,  1018,
         1012,  1016,  1010,  1018,  1012,  1020,  1010,  2382,  1010,  1998,
         2753,  1012,  2023,  3957, 19960,  2078,  1027,  1018,  1012,  1020,
         1010,  2029,  2069, 12980,  1014,  1012,  1018,  2013,  1996,  3991,
         2057,  2179,  1999,  4248,  6912,  2385,  1012,  1015,  1012,  2004,
         2028,  2064,  2156,  1010,  1996,  3991,  2003,  6684,  5360,  2011,
         1996,  2048,  2041, 14355,  2015,  1012,   102])"
1659,1,"['sample', 'sample variance', 'variance']", Solutions to the quick exercises,seg_223,16.3 the sample variance is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2385,  1012,  1017,  1996,  7099, 23284,  2003,   102])"
1660,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard', 'deviations', 'median']", Solutions to the quick exercises,seg_223,"so that the sample standard deviation is sn = √0.76 = 0.872. the median is 4.2, so that the absolute deviations from the median are given by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2061,  2008,  1996,  7099,  3115, 24353,  2003,  1055,  2078,
         1027,  1600,  2692,  1012,  6146,  1027,  1014,  1012,  6584,  2475,
         1012,  1996,  3991,  2003,  1018,  1012,  1016,  1010,  2061,  2008,
         1996,  7619, 24353,  2015,  2013,  1996,  3991,  2024,  2445,  2011,
          102])"
1661,1,['median'], Solutions to the quick exercises,seg_223,"the mad is the median of these numbers, which is 0.8.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1996, 5506, 2003, 1996, 3991, 1997, 2122, 3616, 1010, 2029, 2003,
        1014, 1012, 1022, 1012,  102])"
1662,1,"['sample', 'sample variance', 'variance']", Solutions to the quick exercises,seg_223,16.4 the sample variance is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2385,  1012,  1018,  1996,  7099, 23284,  2003,   102])"
1663,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard', 'deviations', 'median']", Solutions to the quick exercises,seg_223,"so that the sample standard deviation is sn = √439.06 = 20.95, which is a difference of 20.19 from the value we found in quick exercise 16.3. the median is 4.6, so that the absolute deviations from the median are given by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2061,  2008,  1996,  7099,  3115, 24353,  2003,  1055,  2078,
         1027,  1600, 23777,  2683,  1012,  5757,  1027,  2322,  1012,  5345,
         1010,  2029,  2003,  1037,  4489,  1997,  2322,  1012,  2539,  2013,
         1996,  3643,  2057,  2179,  1999,  4248,  6912,  2385,  1012,  1017,
         1012,  1996,  3991,  2003,  1018,  1012,  1020,  1010,  2061,  2008,
         1996,  7619, 24353,  2015,  2013,  1996,  3991,  2024,  2445,  2011,
          102])"
1664,1,"['outliers', 'median']", Solutions to the quick exercises,seg_223,"the mad is the median of these numbers, which is 1.4. just as the median, the mad is hardly affected by the two outliers.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1996,  5506,  2003,  1996,  3991,  1997,  2122,  3616,  1010,
         2029,  2003,  1015,  1012,  1018,  1012,  2074,  2004,  1996,  3991,
         1010,  1996,  5506,  2003,  6684,  5360,  2011,  1996,  2048,  2041,
        14355,  2015,  1012,   102])"
1665,1,"['order statistics', 'data', 'statistics']", Solutions to the quick exercises,seg_223,16.6 from the order statistics of the wick temperature data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2385,  1012,  1020,  2013,  1996,  2344,  6747,  1997,  1996,
        15536,  3600,  4860,  2951,   102])"
1666,1,"['quartile', 'data', 'median', 'upper quartile']", Solutions to the quick exercises,seg_223,"it can be seen immediately that minimum, maximum, and median are given by 41, 58, and 42. for the lower quartile we have k = 0.25·12 = 3, so that α = 0 and qn(0.25) = x(3) = 41. for the upper quartile we have k = 0.75 · 12 = 9, so that again α = 0 and qn(0.75) = x(9) = 43. hence for the wick temperature data the five-number summary is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2009,  2064,  2022,  2464,  3202,  2008,  6263,  1010,  4555,
         1010,  1998,  3991,  2024,  2445,  2011,  4601,  1010,  5388,  1010,
         1998,  4413,  1012,  2005,  1996,  2896, 24209,  8445,  9463,  2057,
         2031,  1047,  1027,  1014,  1012,  2423,  1087,  2260,  1027,  1017,
         1010,  2061,  2008,  1155,  1027,  1014,  1998,  1053,  2078,  1006,
         1014,  1012,  2423,  1007,  1027,  1060,  1006,  1017,  1007,  1027,
         4601,  1012,  2005,  1996,  3356, 24209,  8445,  9463,  2057,  2031,
         1047,  1027,  1014,  1012,  4293,  1087,  2260,  1027,  1023,  1010,
         2061,  2008,  2153,  1155,  1027,  1014,  1998,  1053,  2078,  1006,
         1014,  1012,  4293,  1007,  1027,  1060,  1006,  1023,  1007,  1027,
         4724,  1012,  6516,  2005,  1996, 15536,  3600,  4860,  2951,  1996,
         2274,  1011,  2193, 12654,  2003,   102])"
1667,1,"['quartile', 'median', 'upper quartile']", Solutions to the quick exercises,seg_223,minimum lower quartile median upper quartile maximum 41 41 42 43 58,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  6263,  2896, 24209,  8445,  9463,  3991,  3356, 24209,  8445,
         9463,  4555,  4601,  4601,  4413,  4724,  5388,   102])"
1668,1,"['range', 'observation', 'whiskers', 'outliers', 'whisker', 'measurements', 'quartile', 'data', 'extreme outliers']", Solutions to the quick exercises,seg_223,"16.7 from the five-number summary for the wick temperature data (see quick exercise 16.6), it follows immediately that the height of the box is the iqr: 43 − 41 = 2. if we measure out a distance of 1.5 times 2 down from the lower quartile 41, we see that the smallest observation within this range is 41, which means that the lower whisker has length zero. similarly, the upper whisker has length zero. the two measurements with value 58 are outside the box and whiskers. the two values 58 are clearly far away from the bulk of the data and should be considered extreme outliers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2385,  1012,  1021,  2013,  1996,  2274,  1011,  2193, 12654,
         2005,  1996, 15536,  3600,  4860,  2951,  1006,  2156,  4248,  6912,
         2385,  1012,  1020,  1007,  1010,  2009,  4076,  3202,  2008,  1996,
         4578,  1997,  1996,  3482,  2003,  1996, 26264,  2099,  1024,  4724,
         1597,  4601,  1027,  1016,  1012,  2065,  2057,  5468,  2041,  1037,
         3292,  1997,  1015,  1012,  1019,  2335,  1016,  2091,  2013,  1996,
         2896, 24209,  8445,  9463,  4601,  1010,  2057,  2156,  2008,  1996,
        10479,  8089,  2306,  2023,  2846,  2003,  4601,  1010,  2029,  2965,
         2008,  1996,  2896,  1059, 24158,  5484,  2038,  3091,  5717,  1012,
         6660,  1010,  1996,  3356,  1059, 24158,  5484,  2038,  3091,  5717,
         1012,  1996,  2048, 11702,  2007,  3643,  5388,  2024,  2648,  1996,
         3482,  1998,  1059, 24158, 11451,  1012,  1996,  2048,  5300,  5388,
         2024,  4415,  2521,  2185,  2013,  1996,  9625,  1997,  1996,  2951,
         1998,  2323,  2022,  2641,  6034,  2041, 14355,  2015,  1012,   102])"
1669,1,"['order statistics', 'data', 'statistics']", Exercises,seg_225,16.1 use the order statistics of the software data as given in exercise 15.4 to answer the following questions.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2385, 1012, 1015, 2224, 1996, 2344, 6747, 1997, 1996, 4007, 2951,
        2004, 2445, 1999, 6912, 2321, 1012, 1018, 2000, 3437, 1996, 2206, 3980,
        1012,  102])"
1670,1,"['sample', 'sample median', 'median']", Exercises,seg_225,a. compute the sample median.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  7099,  3991,  1012,   102])"
1671,1,['quartiles'], Exercises,seg_225,b. compute the lower and upper quartiles and the iqr.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  2896,  1998,  3356, 24209,  8445,
         9463,  2015,  1998,  1996, 26264,  2099,  1012,   102])"
1672,1,"['empirical percentile', 'percentile']", Exercises,seg_225,c. compute the 37th empirical percentile.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 24134,  1996, 23027, 17537,  3867,  9463,  1012,
          102])"
1673,1,"['quartiles', 'data', 'median']", Exercises,seg_225,16.2 compute for the old faithful data the distance of the lower and upper quartiles to the median and explain the difference.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  1016, 24134,  2005,  1996,  2214, 11633,  2951,
         1996,  3292,  1997,  1996,  2896,  1998,  3356, 24209,  8445,  9463,
         2015,  2000,  1996,  3991,  1998,  4863,  1996,  4489,  1012,   102])"
1674,1,"['order statistics', 'table', 'space shuttle challenger', 'statistics']", Exercises,seg_225,"16.3 recall the example about the space shuttle challenger in section 1.4. the following table lists the order statistics of launch temperatures during take-offs in degrees fahrenheit, including the launch temperature on january 28, 1986.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  1017,  9131,  1996,  2742,  2055,  1996,  2686,
        10382, 12932,  1999,  2930,  1015,  1012,  1018,  1012,  1996,  2206,
         2795,  7201,  1996,  2344,  6747,  1997,  4888,  7715,  2076,  2202,
         1011, 12446,  1999,  5445,  6904, 28362, 25311, 20175,  1010,  2164,
         1996,  4888,  4860,  2006,  2254,  2654,  1010,  3069,  1012,   102])"
1675,1,"['sample median', 'sample', 'quartiles', 'median']", Exercises,seg_225,a. find the sample median and the lower and upper quartiles.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2424,  1996,  7099,  3991,  1998,  1996,  2896,
         1998,  3356, 24209,  8445,  9463,  2015,  1012,   102])"
1676,1,"['dataset', 'boxplot']", Exercises,seg_225,b. sketch the boxplot of this dataset.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 11080,  1996,  3482, 24759,  4140,  1997,  2023,
         2951, 13462,  1012,   102])"
1677,0,[], Exercises,seg_225,"c. on january 28, 1986, the launch temperature was 31 degrees fahrenheit.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  2006,  2254,  2654,  1010,  3069,  1010,  1996,
         4888,  4860,  2001,  2861,  5445,  6904, 28362, 25311, 20175,  1012,
          102])"
1678,1,['data'], Exercises,seg_225,comment on the value 31 with respect to the other data points.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 7615, 2006, 1996, 3643, 2861, 2007, 4847, 2000, 1996, 2060, 2951,
        2685, 1012,  102])"
1679,1,"['mean', 'transform', 'sample median', 'sample', 'sample mean', 'data', 'median']", Exercises,seg_225,16.4 the sample mean and sample median of the uncorrected wick temperature data (in degrees fahrenheit) are 44.7 and 42. we transform the data from degrees fahrenheit (xi) to degrees celsius (yi) by means of the formula,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  1018,  1996,  7099,  2812,  1998,  7099,  3991,
         1997,  1996,  4895, 27108,  2890, 10985, 15536,  3600,  4860,  2951,
         1006,  1999,  5445,  6904, 28362, 25311, 20175,  1007,  2024,  4008,
         1012,  1021,  1998,  4413,  1012,  2057, 10938,  1996,  2951,  2013,
         5445,  6904, 28362, 25311, 20175,  1006,  8418,  1007,  2000,  5445,
         8292,  4877,  4173,  1006, 12316,  1007,  2011,  2965,  1997,  1996,
         5675,   102])"
1680,1,['dataset'], Exercises,seg_225,which gives the following dataset,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2029,  3957,  1996,  2206,  2951, 13462,   102])"
1681,1,['dataset'], Exercises,seg_225,"c. suppose we have a dataset x1, x2, . . . , xn and construct y1, y2, . . . , yn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  6814,  2057,  2031,  1037,  2951, 13462,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1998,  9570,  1061,  2487,  1010,  1061,  2475,  1010,  1012,
         1012,  1012,  1010,  1061,  2078,   102])"
1682,1,"['mean', 'sample median', 'sample', 'median', 'sample mean']", Exercises,seg_225,"where yi = axi + b with a and b being real numbers. do similar relations hold for the sample mean and sample median? if so, state them.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073, 12316,  1027, 22260,  2072,  1009,  1038,  2007,  1037,
         1998,  1038,  2108,  2613,  3616,  1012,  2079,  2714,  4262,  2907,
         2005,  1996,  7099,  2812,  1998,  7099,  3991,  1029,  2065,  2061,
         1010,  2110,  2068,  1012,   102])"
1683,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard', 'data']", Exercises,seg_225,16.5 consider the uncorrected wick temperature data in degrees fahrenheit (xi) and the corresponding temperatures in degrees celsius (yi) as given in exercise 16.4. the sample standard deviation and the mad for the wick data are 6.62 and 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  1019,  5136,  1996,  4895, 27108,  2890, 10985,
        15536,  3600,  4860,  2951,  1999,  5445,  6904, 28362, 25311, 20175,
         1006,  8418,  1007,  1998,  1996,  7978,  7715,  1999,  5445,  8292,
         4877,  4173,  1006, 12316,  1007,  2004,  2445,  1999,  6912,  2385,
         1012,  1018,  1012,  1996,  7099,  3115, 24353,  1998,  1996,  5506,
         2005,  1996, 15536,  3600,  2951,  2024,  1020,  1012,  5786,  1998,
         1015,  1012,   102])"
1684,1,"['sample standard deviations', 'sample', 'standard', 'deviations', 'standard deviations']", Exercises,seg_225,"a. let sf and sc denote the sample standard deviations of x1, x2, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2292, 16420,  1998,  8040, 19090,  1996,  7099,
         3115, 24353,  2015,  1997,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,   102])"
1685,0,[], Exercises,seg_225,"b. let madf and madc denote the mad of x1, x2, . . . , xn and y1, y2, . . . , yn",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  2292,  5506,  2546,  1998,  5506,  2278, 19090,
         1996,  5506,  1997,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1998,  1061,  2487,  1010,  1061,
         2475,  1010,  1012,  1012,  1012,  1010,  1061,  2078,   102])"
1686,0,[], Exercises,seg_225,respectively. is it also true that madc = 5 9madf ?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  4414,  1012,  2003,  2009,  2036,  2995,  2008,  5506,  2278,
         1027,  1019,  1023, 25666,  2546,  1029,   102])"
1687,1,['dataset'], Exercises,seg_225,"c. suppose we have a dataset x1, x2, . . . , xn and construct y1, y2, . . . , yn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  6814,  2057,  2031,  1037,  2951, 13462,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1998,  9570,  1061,  2487,  1010,  1061,  2475,  1010,  1012,
         1012,  1012,  1010,  1061,  2078,   102])"
1688,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard']", Exercises,seg_225,"where yi = axi + b with a and b being real numbers. do similar relations hold for the sample standard deviation and the mad? if so, state them.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073, 12316,  1027, 22260,  2072,  1009,  1038,  2007,  1037,
         1998,  1038,  2108,  2613,  3616,  1012,  2079,  2714,  4262,  2907,
         2005,  1996,  7099,  3115, 24353,  1998,  1996,  5506,  1029,  2065,
         2061,  1010,  2110,  2068,  1012,   102])"
1689,0,[], Exercises,seg_225,"16.6 consider two datasets: 1, 5, 9 and 2, 4, 6, 8.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([11110]),"tensor([  101,  2385,  1012,  1020,  5136,  2048,  2951, 13462,  2015,  1024,
         1015,  1010,  1019,  1010,  1023,  1998,  1016,  1010,  1018,  1010,
         1020,  1010,  1022,  1012,   102])"
1690,1,"['sample', 'sample means']", Exercises,seg_225,a. denote the sample means of the two datasets by x̄ and ȳ. is it true that the,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 19090,  1996,  7099,  2965,  1997,  1996,  2048,
         2951, 13462,  2015,  2011,  1060,  1998,  1061,  1012,  2003,  2009,
         2995,  2008,  1996,   102])"
1691,1,"['mean', 'dataset', 'sample', 'sample mean']", Exercises,seg_225,average (x̄+ ȳ)/2 of x̄ and ȳ is equal to the sample mean of the combined dataset with 7 elements?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2779,  1006,  1060,  1009,  1061,  1007,  1013,  1016,  1997,
         1060,  1998,  1061,  2003,  5020,  2000,  1996,  7099,  2812,  1997,
         1996,  4117,  2951, 13462,  2007,  1021,  3787,  1029,   102])"
1692,1,"['mean', 'sample', 'sample mean']", Exercises,seg_225,b. suppose we have two other datasets: one of size n with sample mean,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  2057,  2031,  2048,  2060,  2951, 13462,
         2015,  1024,  2028,  1997,  2946,  1050,  2007,  7099,  2812,   102])"
1693,1,"['mean', 'dataset', 'sample', 'average', 'sample mean']", Exercises,seg_225,"x̄n and another dataset of size m with sample mean ȳm. is it always true that the average (x̄n + ȳm)/2 of x̄n and ȳm is equal to the sample mean of the combined dataset with n + m elements? if no, then provide a counterexample. if yes, then explain this.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1060,  2078,  1998,  2178,  2951, 13462,  1997,  2946,  1049,
         2007,  7099,  2812,  1061,  2213,  1012,  2003,  2009,  2467,  2995,
         2008,  1996,  2779,  1006,  1060,  2078,  1009,  1061,  2213,  1007,
         1013,  1016,  1997,  1060,  2078,  1998,  1061,  2213,  2003,  5020,
         2000,  1996,  7099,  2812,  1997,  1996,  4117,  2951, 13462,  2007,
         1050,  1009,  1049,  3787,  1029,  2065,  2053,  1010,  2059,  3073,
         1037,  4675, 10288, 16613,  2571,  1012,  2065,  2748,  1010,  2059,
         4863,  2023,  1012,   102])"
1694,1,"['mean', 'dataset', 'sample', 'sample mean']", Exercises,seg_225,"c. if m = n, is (x̄n+ȳm)/2 equal to the sample mean of the combined dataset",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2065,  1049,  1027,  1050,  1010,  2003,  1006,
         1060,  2078,  1009,  1061,  2213,  1007,  1013,  1016,  5020,  2000,
         1996,  7099,  2812,  1997,  1996,  4117,  2951, 13462,   102])"
1695,0,[], Exercises,seg_225,16.7 consider the two datasets from exercise 16.6.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2385,  1012,  1021,  5136,  1996,  2048,  2951, 13462,  2015,
         2013,  6912,  2385,  1012,  1020,  1012,   102])"
1696,1,"['sample', 'medians', 'sample medians']", Exercises,seg_225,a. denote the sample medians of the two datasets by medx and medy. is it,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 19090,  1996,  7099,  3991,  2015,  1997,  1996,
         2048,  2951, 13462,  2015,  2011, 19960,  2595,  1998, 19960,  2100,
         1012,  2003,  2009,   102])"
1697,1,"['dataset', 'sample median', 'sample', 'medians', 'sample medians', 'median']", Exercises,seg_225,true that the sample median (medx +medy)/2 of the two sample medians is equal to the sample median of the combined dataset with 7 elements?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2995,  2008,  1996,  7099,  3991,  1006, 19960,  2595,  1009,
        19960,  2100,  1007,  1013,  1016,  1997,  1996,  2048,  7099,  3991,
         2015,  2003,  5020,  2000,  1996,  7099,  3991,  1997,  1996,  4117,
         2951, 13462,  2007,  1021,  3787,  1029,   102])"
1698,1,"['sample median', 'sample', 'median']", Exercises,seg_225,b. suppose we have two other datasets: one of size n with sample median,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  2057,  2031,  2048,  2060,  2951, 13462,
         2015,  1024,  2028,  1997,  2946,  1050,  2007,  7099,  3991,   102])"
1699,1,"['dataset', 'sample median', 'sample', 'medians', 'sample medians', 'median']", Exercises,seg_225,"medx and another dataset of size m with sample median medy. is it always true that the sample median (medx + medy)/2 of the two sample medians is equal to the sample median of the combined dataset with n+m elements? if no, then provide a counterexample. if yes, then explain this.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101, 19960,  2595,  1998,  2178,  2951, 13462,  1997,  2946,  1049,
         2007,  7099,  3991, 19960,  2100,  1012,  2003,  2009,  2467,  2995,
         2008,  1996,  7099,  3991,  1006, 19960,  2595,  1009, 19960,  2100,
         1007,  1013,  1016,  1997,  1996,  2048,  7099,  3991,  2015,  2003,
         5020,  2000,  1996,  7099,  3991,  1997,  1996,  4117,  2951, 13462,
         2007,  1050,  1009,  1049,  3787,  1029,  2065,  2053,  1010,  2059,
         3073,  1037,  4675, 10288, 16613,  2571,  1012,  2065,  2748,  1010,
         2059,  4863,  2023,  1012,   102])"
1700,1,['dataset'], Exercises,seg_225,16.8 compute the mad for the combined dataset of 7 elements from exercise 16.6.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  1022, 24134,  1996,  5506,  2005,  1996,  4117,
         2951, 13462,  1997,  1021,  3787,  2013,  6912,  2385,  1012,  1020,
         1012,   102])"
1701,1,['dataset'], Exercises,seg_225,"16.9 consider a dataset x1, x2, . . . , xn with xi = 0. we construct a second",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  1023,  5136,  1037,  2951, 13462,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2007,  8418,  1027,  1014,  1012,  2057,  9570,  1037,  2117,   102])"
1702,1,['dataset'], Exercises,seg_225,"a. suppose dataset x1, x2, . . . , xn consists of −6, 1, 15. is it true that ȳ3 =",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  2951, 13462,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  3774,  1997,
         1597,  2575,  1010,  1015,  1010,  2321,  1012,  2003,  2009,  2995,
         2008,  1061,  2509,  1027,   102])"
1703,1,"['mean', 'dataset', 'sensitivity', 'sample median', 'sample', 'method', 'outliers', 'extreme outliers', 'sample mean', 'median']", Exercises,seg_225,"16.10 a method to investigate the sensitivity of the sample mean and the sample median to extreme outliers is to replace one or more elements in a given dataset by a number y and investigate the effect when y goes to infinity. to illustrate this, consider the dataset from quick exercise 16.1:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2184,  1037,  4118,  2000,  8556,  1996, 14639,
         1997,  1996,  7099,  2812,  1998,  1996,  7099,  3991,  2000,  6034,
         2041, 14355,  2015,  2003,  2000,  5672,  2028,  2030,  2062,  3787,
         1999,  1037,  2445,  2951, 13462,  2011,  1037,  2193,  1061,  1998,
         8556,  1996,  3466,  2043,  1061,  3632,  2000, 15579,  1012,  2000,
        19141,  2023,  1010,  5136,  1996,  2951, 13462,  2013,  4248,  6912,
         2385,  1012,  1015,  1024,   102])"
1704,1,"['mean', 'sample median', 'sample', 'median', 'sample mean']", Exercises,seg_225,with sample mean 4 and sample median 4.2.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2007, 7099, 2812, 1018, 1998, 7099, 3991, 1018, 1012, 1016, 1012,
         102])"
1705,0,[], Exercises,seg_225,a. we replace the element 3.2 by some real number y. what happens with,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 2057, 5672, 1996, 5783, 1017, 1012, 1016, 2011, 2070,
        2613, 2193, 1061, 1012, 2054, 6433, 2007,  102])"
1706,1,"['mean', 'dataset', 'sample median', 'sample', 'sample mean', 'median']", Exercises,seg_225,the sample mean and the sample median of this new dataset as y → ∞?,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1996,  7099,  2812,  1998,  1996,  7099,  3991,  1997,  2023,
         2047,  2951, 13462,  2004,  1061,  1585,  1601,  1029,   102])"
1707,0,[], Exercises,seg_225,b. we replace a number of elements by some real number y. how many,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1038, 1012, 2057, 5672, 1037, 2193, 1997, 3787, 2011, 2070, 2613,
        2193, 1061, 1012, 2129, 2116,  102])"
1708,1,"['dataset', 'sample median', 'sample', 'median']", Exercises,seg_225,elements do we need to replace so that the sample median of the new dataset goes to infinity as y → ∞?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  3787,  2079,  2057,  2342,  2000,  5672,  2061,  2008,  1996,
         7099,  3991,  1997,  1996,  2047,  2951, 13462,  3632,  2000, 15579,
         2004,  1061,  1585,  1601,  1029,   102])"
1709,1,['dataset'], Exercises,seg_225,c. suppose we have another dataset of size n. how many elements do we,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1039,  1012,  6814,  2057,  2031,  2178,  2951, 13462,  1997,
         2946,  1050,  1012,  2129,  2116,  3787,  2079,  2057,   102])"
1710,1,"['mean', 'dataset', 'sample median', 'sample', 'sample mean', 'median']", Exercises,seg_225,"need to replace by some real number y, so that the sample mean of the new dataset goes to infinity as y → ∞? and how many elements do we need to replace, so that the sample median of the new dataset goes to infinity?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2342,  2000,  5672,  2011,  2070,  2613,  2193,  1061,  1010,
         2061,  2008,  1996,  7099,  2812,  1997,  1996,  2047,  2951, 13462,
         3632,  2000, 15579,  2004,  1061,  1585,  1601,  1029,  1998,  2129,
         2116,  3787,  2079,  2057,  2342,  2000,  5672,  1010,  2061,  2008,
         1996,  7099,  3991,  1997,  1996,  2047,  2951, 13462,  3632,  2000,
        15579,  1029,   102])"
1711,1,"['median', 'mean', 'dataset', 'sensitivity', 'standard deviation', 'deviation', 'standard', 'extreme outliers', 'sample median', 'sample', 'sample standard deviation', 'outliers', 'sample mean']", Exercises,seg_225,"16.11 just as in exercise 16.10 we investigate the sensitivity of the sample standard deviation and the mad to extreme outliers, by considering the same dataset with sample standard deviation 0.872 and mad equal to 0.8. answer the same three questions for the sample standard deviation and the mad instead of the sample mean and sample median.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2340,  2074,  2004,  1999,  6912,  2385,  1012,
         2184,  2057,  8556,  1996, 14639,  1997,  1996,  7099,  3115, 24353,
         1998,  1996,  5506,  2000,  6034,  2041, 14355,  2015,  1010,  2011,
         6195,  1996,  2168,  2951, 13462,  2007,  7099,  3115, 24353,  1014,
         1012,  6584,  2475,  1998,  5506,  5020,  2000,  1014,  1012,  1022,
         1012,  3437,  1996,  2168,  2093,  3980,  2005,  1996,  7099,  3115,
        24353,  1998,  1996,  5506,  2612,  1997,  1996,  7099,  2812,  1998,
         7099,  3991,  1012,   102])"
1712,1,"['mean', 'dataset', 'sample median', 'sample', 'sample mean', 'median']", Exercises,seg_225,16.12 compute the sample mean and sample median for the dataset,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2260, 24134,  1996,  7099,  2812,  1998,  7099,
         3991,  2005,  1996,  2951, 13462,   102])"
1713,1,['case'], Exercises,seg_225,in case n is odd and in case n is even. you may use the fact that,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1999, 2553, 1050, 2003, 5976, 1998, 1999, 2553, 1050, 2003, 2130,
        1012, 2017, 2089, 2224, 1996, 2755, 2008,  102])"
1714,1,"['dataset', 'deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard']", Exercises,seg_225,16.13 compute the sample standard deviation and mad for the dataset,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2410, 24134,  1996,  7099,  3115, 24353,  1998,
         5506,  2005,  1996,  2951, 13462,   102])"
1715,0,[], Exercises,seg_225,you may use the fact that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2017, 2089, 2224, 1996, 2755, 2008,  102])"
1716,1,"['sample median', 'percentile', 'sample', 'empirical percentile', 'median']", Exercises,seg_225,16.14 check that the 50th empirical percentile is the sample median.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2403,  4638,  2008,  1996, 12951, 17537,  3867,
         9463,  2003,  1996,  7099,  3991,  1012,   102])"
1717,1,"['deviation', 'sample', 'standard deviation', 'standard']", Exercises,seg_225,16.15 the following rule is useful for the computation of the sample variance (and standard deviation). show that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2321,  1996,  2206,  3627,  2003,  6179,  2005,
         1996, 22334,  1997,  1996,  7099, 23284,  1006,  1998,  3115, 24353,
         1007,  1012,  2265,  2008,   102])"
1718,1,"['mean', 'estimate', 'variance']", Exercises,seg_225,"16.16 recall exercise 15.12, where we computed the mean and second moment corresponding to a density estimate fn,h. show that the variance corresponding to fn,h satisfies:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2385,  9131,  6912,  2321,  1012,  2260,  1010,
         2073,  2057, 24806,  1996,  2812,  1998,  2117,  2617,  7978,  2000,
         1037,  4304, 10197,  1042,  2078,  1010,  1044,  1012,  2265,  2008,
         1996, 23284,  7978,  2000,  1042,  2078,  1010,  1044,  2938,  2483,
        14213,  1024,   102])"
1719,1,"['quantile', 'dataset', 'order statistic', 'empirical quantile', 'statistic']", Exercises,seg_225,"16.17 suppose we have a dataset x1, x2, . . . , xn. check that if p = i/(n + 1) the pth empirical quantile is the ith order statistic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2385,  1012,  2459,  6814,  2057,  2031,  1037,  2951, 13462,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1012,  4638,  2008,  2065,  1052,  1027,  1045,  1013,
         1006,  1050,  1009,  1015,  1007,  1996, 13866,  2232, 17537, 24110,
        15286,  2003,  1996,  2009,  2232,  2344, 28093,  6553,  1012,   102])"
1720,1,"['regression', 'sample statistics', 'simple linear regression', 'regression model', 'linear regression', 'dataset', 'paired', 'statistics', 'model', 'statistical', 'statistical model', 'probability distribution', 'linear', 'probability', 'random variables', 'linear regression model', 'sample', 'random', 'distribution', 'measurements', 'variables']", Basic statistical models,seg_227,"in this chapter we introduce a common statistical model. it corresponds to the situation where the elements of the dataset are repeated measurements of the same quantity and where different measurements do not influence each other. next, we discuss the probability distribution of the random variables that model the measurements and illustrate how sample statistics can help to select a suitable statistical model. finally, we discuss the simple linear regression model that corresponds to the situation where the elements of the dataset are paired measurements.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 0., 0.])","tensor([3937, 7778, 4275])","tensor([  101,  1999,  2023,  3127,  2057,  8970,  1037,  2691,  7778,  2944,
         1012,  2009, 14788,  2000,  1996,  3663,  2073,  1996,  3787,  1997,
         1996,  2951, 13462,  2024,  5567, 11702,  1997,  1996,  2168, 11712,
         1998,  2073,  2367, 11702,  2079,  2025,  3747,  2169,  2060,  1012,
         2279,  1010,  2057,  6848,  1996,  9723,  4353,  1997,  1996,  6721,
        10857,  2008,  2944,  1996, 11702,  1998, 19141,  2129,  7099,  6747,
         2064,  2393,  2000,  7276,  1037,  7218,  7778,  2944,  1012,  2633,
         1010,  2057,  6848,  1996,  3722,  7399, 26237,  2944,  2008, 14788,
         2000,  1996,  3663,  2073,  1996,  3787,  1997,  1996,  2951, 13462,
         2024, 12739, 11702,  1012,   102])"
1721,1,"['table', 'outcome', 'experimental', 'random variable', 'model', 'probability distributions', 'probability', 'variation', 'realization', 'measuring', 'random variables', 'distributions', 'random', 'experiment', 'measurement', 'measurements', 'variables', 'variable']", Random samples and statistical models,seg_229,"in chapter 1 we briefly discussed michelson’s experiment conducted between june 5 and july 2 in 1879, in which 100 measurements were obtained on the speed of light. the values are given in table 17.1 and represent the speed of light in air in km/sec minus 299 000. the variation among the 100 values suggests that measuring the speed of light is subject to random influences. as we have seen before, we describe random phenomena by means of a probability model, i.e., we interpret the outcome of an experiment as a realization of some random variable. hence the first measurement is modeled by a random variable x1 and the value 850 is interpreted as the realization of x1. similarly, the second measurement is modeled by a random variable x2 and the value 740 is interpreted as the realization of x2. since both measurements are obtained under the same experimental conditions, it is justified to assume that the probability distributions of x1 and x2 are the same. more generally, the 100 measurements are modeled by random variables",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1999,  3127,  1015,  2057,  4780,  6936,  8709,  3385,  1521,
         1055,  7551,  4146,  2090,  2238,  1019,  1998,  2251,  1016,  1999,
         7449,  1010,  1999,  2029,  2531, 11702,  2020,  4663,  2006,  1996,
         3177,  1997,  2422,  1012,  1996,  5300,  2024,  2445,  1999,  2795,
         2459,  1012,  1015,  1998,  5050,  1996,  3177,  1997,  2422,  1999,
         2250,  1999,  2463,  1013, 10819, 15718, 25926,  2199,  1012,  1996,
         8386,  2426,  1996,  2531,  5300,  6083,  2008,  9854,  1996,  3177,
         1997,  2422,  2003,  3395,  2000,  6721,  8092,  1012,  2004,  2057,
         2031,  2464,  2077,  1010,  2057,  6235,  6721, 13352,  2011,  2965,
         1997,  1037,  9723,  2944,  1010,  1045,  1012,  1041,  1012,  1010,
         2057, 17841,  1996,  9560,  1997,  2019,  7551,  2004,  1037, 12393,
         1997,  2070,  6721,  8023,  1012,  6516,  1996,  2034, 10903,  2003,
        14440,  2011,  1037,  6721,  8023,  1060,  2487,  1998,  1996,  3643,
        15678,  2003, 10009,  2004,  1996, 12393,  1997,  1060,  2487,  1012,
         6660,  1010,  1996,  2117, 10903,  2003, 14440,  2011,  1037,  6721,
         8023,  1060,  2475,  1998,  1996,  3643, 25833,  2003, 10009,  2004,
         1996, 12393,  1997,  1060,  2475,  1012,  2144,  2119, 11702,  2024,
         4663,  2104,  1996,  2168,  6388,  3785,  1010,  2009,  2003, 15123,
         2000,  7868,  2008,  1996,  9723, 20611,  1997,  1060,  2487,  1998,
         1060,  2475,  2024,  1996,  2168,  1012,  2062,  3227,  1010,  1996,
         2531, 11702,  2024, 14440,  2011,  6721, 10857,   102])"
1722,1,"['table', 'probability', 'distribution', 'probability distribution']", Random samples and statistical models,seg_229,"with the same probability distribution, and the values in table 17.1 are interpreted as realizations of x1, x2, . . . , x100. moreover, because we believe that",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  2007,  1996,  2168,  9723,  4353,  1010,  1998,  1996,  5300,
         1999,  2795,  2459,  1012,  1015,  2024, 10009,  2004, 12393,  2015,
         1997,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060, 18613,  1012,  9308,  1010,  2138,  2057,  2903,  2008,
          102])"
1723,1,"['random sample', 'independence', 'sample', 'random', 'random variables', 'measurements', 'variables']", Random samples and statistical models,seg_229,"michelson took great care not to have the measurements influence each other, the random variables x1, x2, . . . , x100 are assumed to be mutually independent (see also remark 3.1 about physical and stochastic independence). such a collection of random variables is called a random sample or briefly, sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  8709,  3385,  2165,  2307,  2729,  2025,  2000,  2031,  1996,
        11702,  3747,  2169,  2060,  1010,  1996,  6721, 10857,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060, 18613,
         2024,  5071,  2000,  2022, 20271,  2981,  1006,  2156,  2036, 17674,
         1017,  1012,  1015,  2055,  3558,  1998,  2358, 11663, 20875,  4336,
         1007,  1012,  2107,  1037,  3074,  1997,  6721, 10857,  2003,  2170,
         1037,  6721,  7099,  2030,  4780,  1010,  7099,  1012,   102])"
1724,1,"['mutually independent', 'probability', 'random sample', 'sample', 'random', 'independent', 'distribution', 'probability distribution']", Random samples and statistical models,seg_229,"random sample. a random sample is a collection of random variables x1, x2, . . . , xn, that have the same probability distribution and are mutually independent.",tensor(1),"tensor([0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  6721,  7099,  1012,  1037,  6721,  7099,  2003,  1037,  3074,
         1997,  6721, 10857,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1010,  2008,  2031,  1996,  2168,
         9723,  4353,  1998,  2024, 20271,  2981,  1012,   102])"
1725,1,"['function', 'random variable', 'random sample', 'sample', 'random', 'distribution', 'distribution function', 'variable']", Random samples and statistical models,seg_229,"if f is the distribution function of each random variable xi in a random sample, we speak of a random sample from f . similarly, we speak of a random sample from a density f , a random sample from an n(µ, σ2) distribution, etc.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([ 101, 2065, 1042, 2003, 1996, 4353, 3853, 1997, 2169, 6721, 8023, 8418,
        1999, 1037, 6721, 7099, 1010, 2057, 3713, 1997, 1037, 6721, 7099, 2013,
        1042, 1012, 6660, 1010, 2057, 3713, 1997, 1037, 6721, 7099, 2013, 1037,
        4304, 1042, 1010, 1037, 6721, 7099, 2013, 2019, 1050, 1006, 1085, 1010,
        1173, 2475, 1007, 4353, 1010, 4385, 1012,  102])"
1726,1,"['variance', 'random sample', 'sample', 'random']", Random samples and statistical models,seg_229,"quick exercise 17.1 suppose we have a random sample x1, x2 from a distribution with variance 1. compute the variance of x1 + x2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  4248,  6912,  2459,  1012,  1015,  6814,  2057,  2031,  1037,
         6721,  7099,  1060,  2487,  1010,  1060,  2475,  2013,  1037,  4353,
         2007, 23284,  1015,  1012, 24134,  1996, 23284,  1997,  1060,  2487,
         1009,  1060,  2475,  1012,   102])"
1727,1,"['exponential distribution', 'independent', 'disjoint', 'interval', 'failure', 'failures', 'poisson', 'poisson process', 'model', 'data', 'rate', 'probability', 'realization', 'random sample', 'process', 'sample', 'random', 'intervals', 'distribution', 'exponential']", Random samples and statistical models,seg_229,"properties that are inherent to the random phenomenon under study may provide additional knowledge about the distribution of the sample. recall the software data discussed in chapter 15. the data are observed lengths in cpu seconds between successive failures that occur during the execution of a certain real-time command. typically, in a situation like this, in a small time interval, either 0 or 1 failure occurs. moreover, failures occur with small probability and in disjoint time intervals failures occur independent of each other. in addition, let us assume that the rate at which the failures occur is constant over time. according to chapter 12, this justifies the choice of a poisson process to model the series of failures. from the properties of the poisson process we know that the interfailure times are independent and have the same exponential distribution. hence we model the software data as the realization of a random sample from an exponential distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  5144,  2008,  2024, 16112,  2000,  1996,  6721,  9575,  2104,
         2817,  2089,  3073,  3176,  3716,  2055,  1996,  4353,  1997,  1996,
         7099,  1012,  9131,  1996,  4007,  2951,  6936,  1999,  3127,  2321,
         1012,  1996,  2951,  2024,  5159, 10742,  1999, 17368,  3823,  2090,
        11165, 15428,  2008,  5258,  2076,  1996,  7781,  1997,  1037,  3056,
         2613,  1011,  2051,  3094,  1012,  4050,  1010,  1999,  1037,  3663,
         2066,  2023,  1010,  1999,  1037,  2235,  2051, 13483,  1010,  2593,
         1014,  2030,  1015,  4945,  5158,  1012,  9308,  1010, 15428,  5258,
         2007,  2235,  9723,  1998,  1999,  4487,  2015,  5558, 18447,  2051,
        14025, 15428,  5258,  2981,  1997,  2169,  2060,  1012,  1999,  2804,
         1010,  2292,  2149,  7868,  2008,  1996,  3446,  2012,  2029,  1996,
        15428,  5258,  2003,  5377,  2058,  2051,  1012,  2429,  2000,  3127,
         2260,  1010,  2023,  2074, 14144,  1996,  3601,  1997,  1037, 13433,
        24077,  2832,  2000,  2944,  1996,  2186,  1997, 15428,  1012,  2013,
         1996,  5144,  1997,  1996, 13433, 24077,  2832,  2057,  2113,  2008,
         1996,  6970,  7011,  4014,  5397,  2335,  2024,  2981,  1998,  2031,
         1996,  2168, 27258,  4353,  1012,  6516,  2057,  2944,  1996,  4007,
         2951,  2004,  1996, 12393,  1997,  1037,  6721,  7099,  2013,  2019,
        27258,  4353,  1012,   102])"
1728,1,"['continuous', 'cases', 'realization', 'random sample', 'sample', 'random', 'continuous distribution', 'distribution', 'model', 'data']", Random samples and statistical models,seg_229,"in some cases we may not be able to specify the type of distribution. take, for instance, the old faithful data consisting of observed durations of eruptions of the old faithful geyser. due to lack of specific geological knowledge about the subsurface and the mechanism that governs the eruptions, we prefer not to assume a particular type of distribution. however, we do model the durations as the realization of a random sample from a continuous distribution on (0,∞).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1999,  2070,  3572,  2057,  2089,  2025,  2022,  2583,  2000,
        20648,  1996,  2828,  1997,  4353,  1012,  2202,  1010,  2005,  6013,
         1010,  1996,  2214, 11633,  2951,  5398,  1997,  5159,  9367,  2015,
         1997, 28448,  1997,  1996,  2214, 11633, 16216, 23274,  2099,  1012,
         2349,  2000,  3768,  1997,  3563,  9843,  3716,  2055,  1996,  4942,
        26210, 12172,  1998,  1996,  7337,  2008, 21208,  2015,  1996, 28448,
         1010,  2057,  9544,  2025,  2000,  7868,  1037,  3327,  2828,  1997,
         4353,  1012,  2174,  1010,  2057,  2079,  2944,  1996,  9367,  2015,
         2004,  1996, 12393,  1997,  1037,  6721,  7099,  2013,  1037,  7142,
         4353,  2006,  1006,  1014,  1010,  1601,  1007,  1012,   102])"
1729,1,"['dataset', 'probability', 'realization', 'random sample', 'sample', 'random', 'experimental', 'experiment', 'distribution', 'model', 'measurements', 'probability distribution']", Random samples and statistical models,seg_229,in each of the three examples the dataset was obtained from repeated measurements performed under the same experimental conditions. the basic statistical model for such a dataset is to consider the measurements as a random sample and to interpret the dataset as the realization of the random sample. knowledge about the phenomenon under study and the nature of the experiment may lead to partial specification of the probability distribution of each xi in the sample. this should be included in the model.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1999,  2169,  1997,  1996,  2093,  4973,  1996,  2951, 13462,
         2001,  4663,  2013,  5567, 11702,  2864,  2104,  1996,  2168,  6388,
         3785,  1012,  1996,  3937,  7778,  2944,  2005,  2107,  1037,  2951,
        13462,  2003,  2000,  5136,  1996, 11702,  2004,  1037,  6721,  7099,
         1998,  2000, 17841,  1996,  2951, 13462,  2004,  1996, 12393,  1997,
         1996,  6721,  7099,  1012,  3716,  2055,  1996,  9575,  2104,  2817,
         1998,  1996,  3267,  1997,  1996,  7551,  2089,  2599,  2000,  7704,
        12827,  1997,  1996,  9723,  4353,  1997,  2169,  8418,  1999,  1996,
         7099,  1012,  2023,  2323,  2022,  2443,  1999,  1996,  2944,  1012,
          102])"
1730,1,"['dataset', 'probability', 'realization', 'random sample', 'sample', 'random', 'distribution', 'model', 'measurements', 'probability distribution']", Random samples and statistical models,seg_229,"statistical model for repeated measurements. a dataset consisting of values x1, x2, . . . , xn of repeated measurements of the same quantity is modeled as the realization of a random sample x1, x2, . . . , xn. the model may include a partial specification of the probability distribution of each xi.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  7778,  2944,  2005,  5567, 11702,  1012,  1037,  2951, 13462,
         5398,  1997,  5300,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1997,  5567, 11702,  1997,  1996,
         2168, 11712,  2003, 14440,  2004,  1996, 12393,  1997,  1037,  6721,
         7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1012,  1996,  2944,  2089,  2421,  1037,  7704,
        12827,  1997,  1996,  9723,  4353,  1997,  2169,  8418,  1012,   102])"
1731,1,"['exponential distributions', 'exponential distribution', 'continuous distributions', 'statistical', 'model', 'case', 'continuous', 'parameter', 'probability distribution', 'statistical model', 'probability', 'approximation', 'distributions', 'sample', 'distribution', 'exponential']", Random samples and statistical models,seg_229,"the probability distribution of each xi is called the model distribution. usually it refers to a collection of distributions: in the old faithful example to the collection of all continuous distributions on (0,∞), in the software example to the collection of all exponential distributions. in the latter case the parameter of the exponential distribution is called the model parameter. the unique distribution from which the sample actually originates is assumed to be one particular member of this collection and is called the “true” distribution. similarly, in the software example, the parameter corresponding to the “true” exponential distribution is called the “true” parameter. the word true is put between quotation marks because it does not refer to something in the real world, but only to a distribution (or parameter) in the statistical model, which is merely an approximation of the real situation.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1996,  9723,  4353,  1997,  2169,  8418,  2003,  2170,  1996,
         2944,  4353,  1012,  2788,  2009,  5218,  2000,  1037,  3074,  1997,
        20611,  1024,  1999,  1996,  2214, 11633,  2742,  2000,  1996,  3074,
         1997,  2035,  7142, 20611,  2006,  1006,  1014,  1010,  1601,  1007,
         1010,  1999,  1996,  4007,  2742,  2000,  1996,  3074,  1997,  2035,
        27258, 20611,  1012,  1999,  1996,  3732,  2553,  1996, 16381,  1997,
         1996, 27258,  4353,  2003,  2170,  1996,  2944, 16381,  1012,  1996,
         4310,  4353,  2013,  2029,  1996,  7099,  2941, 16896,  2003,  5071,
         2000,  2022,  2028,  3327,  2266,  1997,  2023,  3074,  1998,  2003,
         2170,  1996,  1523,  2995,  1524,  4353,  1012,  6660,  1010,  1999,
         1996,  4007,  2742,  1010,  1996, 16381,  7978,  2000,  1996,  1523,
         2995,  1524, 27258,  4353,  2003,  2170,  1996,  1523,  2995,  1524,
        16381,  1012,  1996,  2773,  2995,  2003,  2404,  2090, 20563,  3508,
         6017,  2138,  2009,  2515,  2025,  6523,  2000,  2242,  1999,  1996,
         2613,  2088,  1010,  2021,  2069,  2000,  1037,  4353,  1006,  2030,
        16381,  1007,  1999,  1996,  7778,  2944,  1010,  2029,  2003,  6414,
         2019, 20167,  1997,  1996,  2613,  3663,  1012,   102])"
1732,1,"['model', 'dataset', 'distribution']", Random samples and statistical models,seg_229,quick exercise 17.2 we obtain a dataset of ten elements by tossing a coin ten times and recording the result of each toss. what is an appropriate statistical model and corresponding model distribution for this dataset?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  4248,  6912,  2459,  1012,  1016,  2057,  6855,  1037,  2951,
        13462,  1997,  2702,  3787,  2011, 15021,  1037,  9226,  2702,  2335,
         1998,  3405,  1996,  2765,  1997,  2169, 10055,  1012,  2054,  2003,
         2019,  6413,  7778,  2944,  1998,  7978,  2944,  4353,  2005,  2023,
         2951, 13462,  1029,   102])"
1733,1,"['dataset', 'case', 'realization', 'distributions', 'random sample', 'sample', 'random', 'independence', 'statistical', 'model', 'statistical model']", Random samples and statistical models,seg_229,"of course there are situations where the assumption of independence or identical distributions is unrealistic. in that case a different statistical model would be more appropriate. however, we will restrict ourselves mainly to the case where the dataset can be modeled as the realization of a random sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1997,  2607,  2045,  2024,  8146,  2073,  1996, 11213,  1997,
         4336,  2030,  7235, 20611,  2003,  4895, 22852,  6553,  1012,  1999,
         2008,  2553,  1037,  2367,  7778,  2944,  2052,  2022,  2062,  6413,
         1012,  2174,  1010,  2057,  2097, 21573,  9731,  3701,  2000,  1996,
         2553,  2073,  1996,  2951, 13462,  2064,  2022, 14440,  2004,  1996,
        12393,  1997,  1037,  6721,  7099,  1012,   102])"
1734,1,"['dataset', 'statistical', 'distribution', 'model', 'statistical model']", Random samples and statistical models,seg_229,"once we have formulated a statistical model for our dataset, we can use the dataset to infer knowledge about the model distribution. important questions about the corresponding model distribution are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  2320,  2057,  2031, 19788,  1037,  7778,  2944,  2005,  2256,
         2951, 13462,  1010,  2057,  2064,  2224,  1996,  2951, 13462,  2000,
         1999,  7512,  3716,  2055,  1996,  2944,  4353,  1012,  2590,  3980,
         2055,  1996,  7978,  2944,  4353,  2024,   102])"
1735,1,"['model', 'distribution']", Random samples and statistical models,seg_229,ĺ which feature of the model distribution represents the quantity of interest,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1048,  2029,  3444,  1997,  1996,  2944,  4353,  5836,  1996,
        11712,  1997,  3037,   102])"
1736,1,['dataset'], Random samples and statistical models,seg_229,and how do we use our dataset to determine a value for this?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1998,  2129,  2079,  2057,  2224,  2256,  2951, 13462,  2000,
         5646,  1037,  3643,  2005,  2023,  1029,   102])"
1737,1,"['model', 'dataset', 'distribution']", Random samples and statistical models,seg_229,ĺ which model distribution fits a particular dataset best?,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1048,  2029,  2944,  4353, 16142,  1037,  3327,  2951, 13462,
         2190,  1029,   102])"
1738,1,"['continuous', 'curve', 'dataset', 'function', 'probability', 'estimate', 'realization', 'random sample', 'sample', 'random', 'continuous distribution', 'distribution', 'distribution function', 'data']", Random samples and statistical models,seg_229,"these questions can be diverse, and answering them may be difficult. for instance, the old faithful data are modeled as a realization of a random sample from a continuous distribution. suppose we are interested in a complete characterization of the “true” distribution, such as the distribution function f or the probability density f . since there are no further specifications about the type of distribution, our problem would be to estimate the complete curve of f or f on the basis of our dataset.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  2122,  3980,  2064,  2022,  7578,  1010,  1998, 10739,  2068,
         2089,  2022,  3697,  1012,  2005,  6013,  1010,  1996,  2214, 11633,
         2951,  2024, 14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,
         2013,  1037,  7142,  4353,  1012,  6814,  2057,  2024,  4699,  1999,
         1037,  3143, 23191,  1997,  1996,  1523,  2995,  1524,  4353,  1010,
         2107,  2004,  1996,  4353,  3853,  1042,  2030,  1996,  9723,  4304,
         1042,  1012,  2144,  2045,  2024,  2053,  2582, 15480,  2055,  1996,
         2828,  1997,  4353,  1010,  2256,  3291,  2052,  2022,  2000, 10197,
         1996,  3143,  7774,  1997,  1042,  2030,  1042,  2006,  1996,  3978,
         1997,  2256,  2951, 13462,  1012,   102])"
1739,1,"['parameter', 'realization', 'exponential distribution', 'random sample', 'sample', 'random', 'exponential', 'distribution', 'data', 'case']", Random samples and statistical models,seg_229,"on the other hand, the software data are modeled as the realization of a random sample from an exponential distribution. in that case f and f are completely characterized by a single parameter λ:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  2006,  1996,  2060,  2192,  1010,  1996,  4007,  2951,  2024,
        14440,  2004,  1996, 12393,  1997,  1037,  6721,  7099,  2013,  2019,
        27258,  4353,  1012,  1999,  2008,  2553,  1042,  1998,  1042,  2024,
         3294,  7356,  2011,  1037,  2309, 16381,  1165,  1024,   102])"
1740,1,"['parameter', 'dataset']", Random samples and statistical models,seg_229,"even if we are interested in the curves of f and f , our problem would reduce to estimating a single parameter on the basis of our dataset.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  2130,  2065,  2057,  2024,  4699,  1999,  1996, 10543,  1997,
         1042,  1998,  1042,  1010,  2256,  3291,  2052,  5547,  2000,  9765,
        22835,  1037,  2309, 16381,  2006,  1996,  3978,  1997,  2256,  2951,
        13462,  1012,   102])"
1741,1,"['cases', 'experiment', 'measurement', 'distribution', 'model']", Random samples and statistical models,seg_229,"in other cases we may not be interested in the distribution as a whole, but only in a specific feature of the model distribution that represents the quantity of interest. for instance, in a physical experiment, such as the one performed by michelson, one usually thinks of each measurement as",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1999,  2060,  3572,  2057,  2089,  2025,  2022,  4699,  1999,
         1996,  4353,  2004,  1037,  2878,  1010,  2021,  2069,  1999,  1037,
         3563,  3444,  1997,  1996,  2944,  4353,  2008,  5836,  1996, 11712,
         1997,  3037,  1012,  2005,  6013,  1010,  1999,  1037,  3558,  7551,
         1010,  2107,  2004,  1996,  2028,  2864,  2011,  8709,  3385,  1010,
         2028,  2788,  6732,  1997,  2169, 10903,  2004,   102])"
1742,1,"['error', 'measurement', 'measurement error']", Random samples and statistical models,seg_229,measurement = quantity of interest + measurement error.,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101, 10903,  1027, 11712,  1997,  3037,  1009, 10903,  7561,  1012,
          102])"
1743,1,"['measurement error', 'dataset', 'estimate', 'random variable', 'model', 'case', 'variable', 'random sample', 'expectation', 'variance', 'sample', 'random', 'measurement', 'distribution', 'measurements', 'error']", Random samples and statistical models,seg_229,"the quantity of interest, in this case the speed of light, is thought of as being some (unknown) constant and the measurement error is some random fluctuation. in the absence of systematic error, the measurement error can be modeled by a random variable with zero expectation and finite variance. in that case the measurements are modeled by a random sample from a distribution with some unknown expectation and finite variance. the speed of light is represented by the expectation of the model distribution. our problem would be to estimate the expectation of the model distribution on the basis of our dataset.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1996, 11712,  1997,  3037,  1010,  1999,  2023,  2553,  1996,
         3177,  1997,  2422,  1010,  2003,  2245,  1997,  2004,  2108,  2070,
         1006,  4242,  1007,  5377,  1998,  1996, 10903,  7561,  2003,  2070,
         6721, 19857,  6593, 14505,  1012,  1999,  1996,  6438,  1997, 11778,
         7561,  1010,  1996, 10903,  7561,  2064,  2022, 14440,  2011,  1037,
         6721,  8023,  2007,  5717, 17626,  1998, 10713, 23284,  1012,  1999,
         2008,  2553,  1996, 11702,  2024, 14440,  2011,  1037,  6721,  7099,
         2013,  1037,  4353,  2007,  2070,  4242, 17626,  1998, 10713, 23284,
         1012,  1996,  3177,  1997,  2422,  2003,  3421,  2011,  1996, 17626,
         1997,  1996,  2944,  4353,  1012,  2256,  3291,  2052,  2022,  2000,
        10197,  1996, 17626,  1997,  1996,  2944,  4353,  2006,  1996,  3978,
         1997,  2256,  2951, 13462,  1012,   102])"
1744,1,"['dataset', 'graphical', 'expectation', 'distribution', 'statistical', 'numerical']", Random samples and statistical models,seg_229,"in the remaining chapters, we will develop several statistical methods to infer knowledge about the “true” distribution or about a specific feature of it, by means of a dataset. in the remainder of this chapter we will investigate how the graphical and numerical summaries of our dataset can serve as a first indication of what an appropriate choice would be for this distribution or for a specific feature, such as its expectation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([6721, 8168, 1998, 7778, 4275])","tensor([  101,  1999,  1996,  3588,  9159,  1010,  2057,  2097,  4503,  2195,
         7778,  4725,  2000,  1999,  7512,  3716,  2055,  1996,  1523,  2995,
         1524,  4353,  2030,  2055,  1037,  3563,  3444,  1997,  2009,  1010,
         2011,  2965,  1997,  1037,  2951, 13462,  1012,  1999,  1996,  6893,
         1997,  2023,  3127,  2057,  2097,  8556,  2129,  1996, 20477,  1998,
        15973,  7680,  7849,  3111,  1997,  2256,  2951, 13462,  2064,  3710,
         2004,  1037,  2034, 12407,  1997,  2054,  2019,  6413,  3601,  2052,
         2022,  2005,  2023,  4353,  2030,  2005,  1037,  3563,  3444,  1010,
         2107,  2004,  2049, 17626,  1012,   102])"
1745,0,[], Distribution features and sample statistics,seg_231,"in chapters 15 and 16 we have discussed several empirical summaries of datasets. they are examples of numbers, curves, and other objects that are a",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1999,  9159,  2321,  1998,  2385,  2057,  2031,  6936,  2195,
        17537,  7680,  7849,  3111,  1997,  2951, 13462,  2015,  1012,  2027,
         2024,  4973,  1997,  3616,  1010, 10543,  1010,  1998,  2060,  5200,
         2008,  2024,  1037,   102])"
1746,1,"['dataset', 'random samples', 'realization', 'random', 'samples']", Distribution features and sample statistics,seg_231,"of the dataset x1, x2, . . . , xn only. since datasets are modeled as realizations of random samples x1, x2, . . . , xn, an object h(x1, x2, . . . , xn) is a realization of the corresponding random object",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1997,  1996,  2951, 13462,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2069,  1012,  2144,
         2951, 13462,  2015,  2024, 14440,  2004, 12393,  2015,  1997,  6721,
         8168,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1010,  2019,  4874,  1044,  1006,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1007,  2003,  1037, 12393,  1997,  1996,  7978,  6721,  4874,   102])"
1747,1,"['random sample', 'sample', 'random', 'sample statistic', 'statistic']", Distribution features and sample statistics,seg_231,"such an object, which depends on the random sample x1, x2, . . . , xn only, is called a sample statistic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2107,  2019,  4874,  1010,  2029,  9041,  2006,  1996,  6721,
         7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  2069,  1010,  2003,  2170,  1037,  7099, 28093,
         6553,  1012,   102])"
1748,1,"['dataset', 'sample statistics', 'sample', 'sample statistic', 'statistics', 'distribution', 'model', 'statistical', 'statistic', 'statistical model']", Distribution features and sample statistics,seg_231,"if a statistical model adequately describes the dataset at hand, then the sample statistics corresponding to the empirical summaries should somehow reflect corresponding features of the model distribution. we have already seen a mathematical justification for this in chapter 13 for the sample statistic",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2065,  1037,  7778,  2944, 23613,  5577,  1996,  2951, 13462,
         2012,  2192,  1010,  2059,  1996,  7099,  6747,  7978,  2000,  1996,
        17537,  7680,  7849,  3111,  2323,  5064,  8339,  7978,  2838,  1997,
         1996,  2944,  4353,  1012,  2057,  2031,  2525,  2464,  1037,  8045,
        19777,  2005,  2023,  1999,  3127,  2410,  2005,  1996,  7099, 28093,
         6553,   102])"
1749,1,"['probability', 'sample', 'distribution', 'law of large numbers', 'probability distribution']", Distribution features and sample statistics,seg_231,"based on a sample x1, x2, . . . , xn from a probability distribution with expectation µ. according to the law of large numbers,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2241,  2006,  1037,  7099,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,  1037,  9723,
         4353,  2007, 17626,  1085,  1012,  2429,  2000,  1996,  2375,  1997,
         2312,  3616,  1010,   102])"
1750,1,"['mean', 'dataset', 'normal distribution', 'sample statistics', 'random sample', 'sample', 'random', 'normal', 'sample size', 'expectation', 'distribution', 'statistics', 'sample mean']", Distribution features and sample statistics,seg_231,"for every ε > 0. this means that for large sample size n, the sample mean of most realizations of the random sample is close to the expectation of the corresponding distribution. in fact, all sample statistics discussed in chapters 15 and 16 are close to corresponding distribution features. to illustrate this we generate an artificial dataset from a normal distribution with parameters µ = 5 and σ = 2, using a technique similar to the one described in section 6.2. next, we compare the sample statistics with corresponding features of this distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2005,  2296,  1159,  1028,  1014,  1012,  2023,  2965,  2008,
         2005,  2312,  7099,  2946,  1050,  1010,  1996,  7099,  2812,  1997,
         2087, 12393,  2015,  1997,  1996,  6721,  7099,  2003,  2485,  2000,
         1996, 17626,  1997,  1996,  7978,  4353,  1012,  1999,  2755,  1010,
         2035,  7099,  6747,  6936,  1999,  9159,  2321,  1998,  2385,  2024,
         2485,  2000,  7978,  4353,  2838,  1012,  2000, 19141,  2023,  2057,
         9699,  2019,  7976,  2951, 13462,  2013,  1037,  3671,  4353,  2007,
        11709,  1085,  1027,  1019,  1998,  1173,  1027,  1016,  1010,  2478,
         1037,  6028,  2714,  2000,  1996,  2028,  2649,  1999,  2930,  1020,
         1012,  1016,  1012,  2279,  1010,  2057, 12826,  1996,  7099,  6747,
         2007,  7978,  2838,  1997,  2023,  4353,  1012,   102])"
1751,1,"['distribution function', 'empirical distribution function', 'function', 'distribution']", Distribution features and sample statistics,seg_231,the empirical distribution function,tensor(1),"tensor([0., 0., 1., 1., 1., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1996, 17537,  4353,  3853,   102])"
1752,1,"['function', 'random sample', 'sample', 'random', 'distribution', 'distribution function']", Distribution features and sample statistics,seg_231,"let x1, x2, . . . , xn be a random sample from distribution function f , and let",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([ 101, 2292, 1060, 2487, 1010, 1060, 2475, 1010, 1012, 1012, 1012, 1010,
        1060, 2078, 2022, 1037, 6721, 7099, 2013, 4353, 3853, 1042, 1010, 1998,
        2292,  102])"
1753,1,"['function', 'sample', 'distribution', 'distribution function', 'law of large numbers', 'empirical distribution function']", Distribution features and sample statistics,seg_231,"be the empirical distribution function of the sample. another application of the law of large numbers (see exercise 13.7) yields that for every ε > 0,",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2022,  1996, 17537,  4353,  3853,  1997,  1996,  7099,  1012,
         2178,  4646,  1997,  1996,  2375,  1997,  2312,  3616,  1006,  2156,
         6912,  2410,  1012,  1021,  1007, 16189,  2008,  2005,  2296,  1159,
         1028,  1014,  1010,   102])"
1754,1,"['function', 'random sample', 'sample', 'random', 'distribution', 'distribution function', 'empirical distribution function']", Distribution features and sample statistics,seg_231,this means that for most realizations of the random sample the empirical distribution function fn is close to f :,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2023,  2965,  2008,  2005,  2087, 12393,  2015,  1997,  1996,
         6721,  7099,  1996, 17537,  4353,  3853,  1042,  2078,  2003,  2485,
         2000,  1042,  1024,   102])"
1755,1,"['dataset', 'function', 'normal', 'distribution', 'distribution function', 'empirical distribution function']", Distribution features and sample statistics,seg_231,hence the empirical distribution function of the normal dataset should resemble the distribution function,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  6516,  1996, 17537,  4353,  3853,  1997,  1996,  3671,  2951,
        13462,  2323, 13014,  1996,  4353,  3853,   102])"
1756,1,"['function', 'functions', 'sample', 'sample size', 'empirical distribution functions', 'distribution', 'distribution function']", Distribution features and sample statistics,seg_231,"of the n(5, 4) distribution, and the fit should become better as the sample size n increases. an illustration of this can be found in figure 17.1. we displayed the empirical distribution functions of datasets generated from an n(5, 4) distribution together with the “true” distribution function f (dotted lines), for sample sizes n = 20 (left) and n = 200 (right).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1997,  1996,  1050,  1006,  1019,  1010,  1018,  1007,  4353,
         1010,  1998,  1996,  4906,  2323,  2468,  2488,  2004,  1996,  7099,
         2946,  1050,  7457,  1012,  2019, 14614,  1997,  2023,  2064,  2022,
         2179,  1999,  3275,  2459,  1012,  1015,  1012,  2057,  6913,  1996,
        17537,  4353,  4972,  1997,  2951, 13462,  2015,  7013,  2013,  2019,
         1050,  1006,  1019,  1010,  1018,  1007,  4353,  2362,  2007,  1996,
         1523,  2995,  1524,  4353,  3853,  1042,  1006, 20384,  3210,  1007,
         1010,  2005,  7099, 10826,  1050,  1027,  2322,  1006,  2187,  1007,
         1998,  1050,  1027,  3263,  1006,  2157,  1007,  1012,   102])"
1757,1,"['kernel', 'estimate', 'histogram', 'kernel density estimate']", Distribution features and sample statistics,seg_231,the histogram and the kernel density estimate,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1996,  2010,  3406, 13113,  1998,  1996, 16293,  4304, 10197,
          102])"
1758,1,"['continuous', 'probability', 'random sample', 'sample', 'random', 'continuous distribution', 'distribution', 'law of large numbers']", Distribution features and sample statistics,seg_231,"suppose the random sample x1, x2, . . . , xn is generated from a continuous distribution with probability density f . in section 13.4 we have seen yet another consequence of the law of large numbers:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([ 101, 6814, 1996, 6721, 7099, 1060, 2487, 1010, 1060, 2475, 1010, 1012,
        1012, 1012, 1010, 1060, 2078, 2003, 7013, 2013, 1037, 7142, 4353, 2007,
        9723, 4304, 1042, 1012, 1999, 2930, 2410, 1012, 1018, 2057, 2031, 2464,
        2664, 2178, 9509, 1997, 1996, 2375, 1997, 2312, 3616, 1024,  102])"
1759,1,"['histogram', 'random sample', 'sample', 'random', 'bin']", Distribution features and sample statistics,seg_231,"when (x− h, x+ h] is a bin of a histogram of the random sample, this means that the height of the histogram approximates the value of f at the midpoint of the bin:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2043,  1006,  1060, 22543,  1044,  1010,  1060,  1009,  1044,
         1033,  2003,  1037,  8026,  1997,  1037,  2010,  3406, 13113,  1997,
         1996,  6721,  7099,  1010,  2023,  2965,  2008,  1996,  4578,  1997,
         1996,  2010,  3406, 13113, 15796,  2015,  1996,  3643,  1997,  1042,
         2012,  1996,  3054,  8400,  1997,  1996,  8026,  1024,   102])"
1760,1,['histogram'], Distribution features and sample statistics,seg_231,"height of the histogram on (x − h, x + h] ≈ f(x).",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  4578,  1997,  1996,  2010,  3406, 13113,  2006,  1006,  1060,
         1597,  1044,  1010,  1060,  1009,  1044,  1033,  1606,  1042,  1006,
         1060,  1007,  1012,   102])"
1761,1,"['kernel', 'probability', 'estimate', 'random sample', 'sample', 'random', 'kernel density estimate']", Distribution features and sample statistics,seg_231,"similarly, the kernel density estimate of a random sample approximates the corresponding probability density f :",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  6660,  1010,  1996, 16293,  4304, 10197,  1997,  1037,  6721,
         7099, 15796,  2015,  1996,  7978,  9723,  4304,  1042,  1024,   102])"
1762,1,"['dataset', 'kernel', 'probability', 'estimate', 'histogram', 'normal', 'kernel density estimate']", Distribution features and sample statistics,seg_231,so the histogram and kernel density estimate of the normal dataset should resemble the graph of the probability density,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2061,  1996,  2010,  3406, 13113,  1998, 16293,  4304, 10197,
         1997,  1996,  3671,  2951, 13462,  2323, 13014,  1996, 10629,  1997,
         1996,  9723,  4304,   102])"
1763,1,"['dataset', 'kernel', 'estimate', 'histogram', 'distribution', 'kernel density estimate']", Distribution features and sample statistics,seg_231,"of the n(5, 4) distribution. this is illustrated in figure 17.2, where we displayed a histogram and a kernel density estimate of our dataset consisting of 200 values generated from the n(5, 4) distribution. it should be noted that with a smaller dataset the similarity can be much worse. this is demonstrated in figure 17.3, which is based on the dataset consisting of 20 values generated from the same distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1997,  1996,  1050,  1006,  1019,  1010,  1018,  1007,  4353,
         1012,  2023,  2003,  7203,  1999,  3275,  2459,  1012,  1016,  1010,
         2073,  2057,  6913,  1037,  2010,  3406, 13113,  1998,  1037, 16293,
         4304, 10197,  1997,  2256,  2951, 13462,  5398,  1997,  3263,  5300,
         7013,  2013,  1996,  1050,  1006,  1019,  1010,  1018,  1007,  4353,
         1012,  2009,  2323,  2022,  3264,  2008,  2007,  1037,  3760,  2951,
        13462,  1996, 14402,  2064,  2022,  2172,  4788,  1012,  2023,  2003,
         7645,  1999,  3275,  2459,  1012,  1017,  1010,  2029,  2003,  2241,
         2006,  1996,  2951, 13462,  5398,  1997,  2322,  5300,  7013,  2013,
         1996,  2168,  4353,  1012,   102])"
1764,1,"['mean', 'empirical quantiles', 'sample median', 'sample', 'sample mean', 'quantiles', 'median']", Distribution features and sample statistics,seg_231,"the sample mean, the sample median, and empirical quantiles",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1996,  7099,  2812,  1010,  1996,  7099,  3991,  1010,  1998,
        17537, 24110, 15286,  2015,   102])"
1765,1,"['dataset', 'expectation', 'distribution', 'law of large numbers']", Distribution features and sample statistics,seg_231,"as we saw in section 5.5, the expectation of an n(µ, σ2) distribution is µ; so the n(5, 4) distribution has expectation 5. according to the law of large numbers: x̄n ≈ µ. this is illustrated by our dataset of 200 values generated from the n(5, 4) distribution for which we find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2004,  2057,  2387,  1999,  2930,  1019,  1012,  1019,  1010,
         1996, 17626,  1997,  2019,  1050,  1006,  1085,  1010,  1173,  2475,
         1007,  4353,  2003,  1085,  1025,  2061,  1996,  1050,  1006,  1019,
         1010,  1018,  1007,  4353,  2038, 17626,  1019,  1012,  2429,  2000,
         1996,  2375,  1997,  2312,  3616,  1024,  1060,  2078,  1606,  1085,
         1012,  2023,  2003,  7203,  2011,  2256,  2951, 13462,  1997,  3263,
         5300,  7013,  2013,  1996,  1050,  1006,  1019,  1010,  1018,  1007,
         4353,  2005,  2029,  2057,  2424,   102])"
1766,1,"['sample', 'sample median', 'median']", Distribution features and sample statistics,seg_231,for the sample median we find,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([ 101, 2005, 1996, 7099, 3991, 2057, 2424,  102])"
1767,1,"['quantile', 'empirical quantile', 'sample median', 'random sample', 'sample', 'random', 'median']", Distribution features and sample statistics,seg_231,"this illustrates the fact that the sample median of a random sample from f approximates the median q0.5 = f inv(0.5). in fact, we have the following general property for the pth empirical quantile:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2023, 24899,  1996,  2755,  2008,  1996,  7099,  3991,  1997,
         1037,  6721,  7099,  2013,  1042, 15796,  2015,  1996,  3991,  1053,
         2692,  1012,  1019,  1027,  1042,  1999,  2615,  1006,  1014,  1012,
         1019,  1007,  1012,  1999,  2755,  1010,  2057,  2031,  1996,  2206,
         2236,  3200,  2005,  1996, 13866,  2232, 17537, 24110, 15286,  1024,
          102])"
1768,1,"['mean', 'dataset', 'sample median', 'sample', 'normal', 'expectation', 'sample mean', 'distribution', 'median', 'case']", Distribution features and sample statistics,seg_231,"in the special case of the n(µ, σ2) distribution, the expectation and the median coincide, which explains why the sample mean and sample median of the normal dataset are so close to each other.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1999,  1996,  2569,  2553,  1997,  1996,  1050,  1006,  1085,
         1010,  1173,  2475,  1007,  4353,  1010,  1996, 17626,  1998,  1996,
         3991, 19680,  1010,  2029,  7607,  2339,  1996,  7099,  2812,  1998,
         7099,  3991,  1997,  1996,  3671,  2951, 13462,  2024,  2061,  2485,
         2000,  2169,  2060,  1012,   102])"
1769,1,"['deviation', 'variance', 'sample', 'standard deviation', 'standard', 'sample variance']", Distribution features and sample statistics,seg_231,"the sample variance and standard deviation, and the mad",tensor(1),"tensor([0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1996,  7099, 23284,  1998,  3115, 24353,  1010,  1998,  1996,
         5506,   102])"
1770,1,"['deviation', 'variance', 'standard deviation', 'standard', 'distribution', 'law of large numbers']", Distribution features and sample statistics,seg_231,"as we saw in section 5.5, the standard deviation and variance of an n(µ, σ2) distribution are σ and σ2; so for the n(5, 4) distribution these are 2 and 4. another consequence of the law of large numbers is that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2004,  2057,  2387,  1999,  2930,  1019,  1012,  1019,  1010,
         1996,  3115, 24353,  1998, 23284,  1997,  2019,  1050,  1006,  1085,
         1010,  1173,  2475,  1007,  4353,  2024,  1173,  1998,  1173,  2475,
         1025,  2061,  2005,  1996,  1050,  1006,  1019,  1010,  1018,  1007,
         4353,  2122,  2024,  1016,  1998,  1018,  1012,  2178,  9509,  1997,
         1996,  2375,  1997,  2312,  3616,  2003,  2008,   102])"
1771,1,"['dataset', 'normal']", Distribution features and sample statistics,seg_231,"this is illustrated by our normal dataset of size 200, for which we find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2023,  2003,  7203,  2011,  2256,  3671,  2951, 13462,  1997,
         2946,  3263,  1010,  2005,  2029,  2057,  2424,   102])"
1772,1,"['deviation', 'variance', 'sample', 'sample standard deviation', 'standard deviation', 'standard', 'sample variance']", Distribution features and sample statistics,seg_231,for the sample variance and sample standard deviation.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2005,  1996,  7099, 23284,  1998,  7099,  3115, 24353,  1012,
          102])"
1773,1,"['dataset', 'deviation', 'standard deviation', 'standard', 'distribution']", Distribution features and sample statistics,seg_231,"for the mad of the dataset we find 1.334, which clearly differs from the standard deviation 2 of the n(5, 4) distribution. the reason is that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2005,  1996,  5506,  1997,  1996,  2951, 13462,  2057,  2424,
         1015,  1012, 29562,  1010,  2029,  4415, 12980,  2013,  1996,  3115,
        24353,  1016,  1997,  1996,  1050,  1006,  1019,  1010,  1018,  1007,
         4353,  1012,  1996,  3114,  2003,  2008,   102])"
1774,1,"['function', 'normal distribution', 'standard normal distribution', 'symmetric', 'standard normal', 'normal', 'standard', 'distribution', 'distribution function', 'median']", Distribution features and sample statistics,seg_231,"for any distribution that is symmetric around its median f inv(0.5). for the n(5, 4) distribution f inv(0.75) − f inv(0.5) = 2φinv(0.75) = 1.3490, where φ denotes the distribution function of the standard normal distribution (see exercise 17.10).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2005,  2151,  4353,  2008,  2003, 19490,  2105,  2049,  3991,
         1042,  1999,  2615,  1006,  1014,  1012,  1019,  1007,  1012,  2005,
         1996,  1050,  1006,  1019,  1010,  1018,  1007,  4353,  1042,  1999,
         2615,  1006,  1014,  1012,  4293,  1007,  1597,  1042,  1999,  2615,
         1006,  1014,  1012,  1019,  1007,  1027,  1016, 29736,  2378,  2615,
         1006,  1014,  1012,  4293,  1007,  1027,  1015,  1012,  4090, 21057,
         1010,  2073,  1176, 14796,  1996,  4353,  3853,  1997,  1996,  3115,
         3671,  4353,  1006,  2156,  6912,  2459,  1012,  2184,  1007,  1012,
          102])"
1775,1,['frequencies'], Distribution features and sample statistics,seg_231,relative frequencies,tensor(1),"tensor([0., 0., 1., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  5816, 13139,   102])"
1776,1,"['mass function', 'continuous distributions', 'histogram', 'probability mass function', 'relative frequencies', 'statistic', 'discrete', 'case', 'continuous', 'kernel density estimates', 'function', 'kernel', 'frequencies', 'probability', 'probabilities', 'random sample', 'estimates', 'distributions', 'sample', 'random', 'sample statistic', 'distribution', 'law of large numbers', 'discrete distribution']", Distribution features and sample statistics,seg_231,"for continuous distributions the histogram and kernel density estimates of a random sample approximate the corresponding probability density f . for discrete distributions we would like to have a sample statistic that approximates the probability mass function. in section 13.4 we saw that, as a consequence of the law of large numbers, relative frequencies based on a random sample approximate corresponding probabilities. as a special case, for a random sample x1, x2, . . . , xn from a discrete distribution with probability mass function p,",tensor(1),"tensor([0., 0., 1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  2005,  7142, 20611,  1996,  2010,  3406, 13113,  1998, 16293,
         4304, 10035,  1997,  1037,  6721,  7099, 15796,  1996,  7978,  9723,
         4304,  1042,  1012,  2005, 16246, 20611,  2057,  2052,  2066,  2000,
         2031,  1037,  7099, 28093,  6553,  2008, 15796,  2015,  1996,  9723,
         3742,  3853,  1012,  1999,  2930,  2410,  1012,  1018,  2057,  2387,
         2008,  1010,  2004,  1037,  9509,  1997,  1996,  2375,  1997,  2312,
         3616,  1010,  5816, 13139,  2241,  2006,  1037,  6721,  7099, 15796,
         7978,  4013,  3676, 14680,  1012,  2004,  1037,  2569,  2553,  1010,
         2005,  1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  2013,  1037, 16246,  4353,
         2007,  9723,  3742,  3853,  1052,  1010,   102])"
1777,1,"['distribution', 'function', 'sample statistics', 'probability', 'table', 'frequency', 'relative frequency', 'sample', 'probability mass function', 'mass function', 'statistics']", Distribution features and sample statistics,seg_231,n this means that the relative frequency of a’s in the sample approximates the value of the probability mass function at a. table 17.2 lists the sample statistics and the corresponding distribution features they approximate.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0.])","tensor([4353, 2838, 1998, 7099, 6747])","tensor([  101,  1050,  2023,  2965,  2008,  1996,  5816,  6075,  1997,  1037,
         1521,  1055,  1999,  1996,  7099, 15796,  2015,  1996,  3643,  1997,
         1996,  9723,  3742,  3853,  2012,  1037,  1012,  2795,  2459,  1012,
         1016,  7201,  1996,  7099,  6747,  1998,  1996,  7978,  4353,  2838,
         2027, 15796,  1012,   102])"
1778,1,"['dataset', 'case', 'probability', 'sample statistics', 'estimate', 'realization', 'random sample', 'sample', 'random', 'statistics', 'distribution', 'probability distribution']", Estimating features of the true distribution,seg_233,"in the previous section we generated a dataset of 200 elements from a probability distribution, and we have seen that certain features of this distribution are approximated by corresponding sample statistics. in practice, the situation is reversed. in that case we have a dataset of n elements that is modeled as the realization of a random sample with a probability distribution that is unknown to us. our goal is to use our dataset to estimate a certain feature of this distribution that represents the quantity of interest. in this section we will discuss a few examples.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([  101,  1999,  1996,  3025,  2930,  2057,  7013,  1037,  2951, 13462,
         1997,  3263,  3787,  2013,  1037,  9723,  4353,  1010,  1998,  2057,
         2031,  2464,  2008,  3056,  2838,  1997,  2023,  4353,  2024, 15796,
         2094,  2011,  7978,  7099,  6747,  1012,  1999,  3218,  1010,  1996,
         3663,  2003, 11674,  1012,  1999,  2008,  2553,  2057,  2031,  1037,
         2951, 13462,  1997,  1050,  3787,  2008,  2003, 14440,  2004,  1996,
        12393,  1997,  1037,  6721,  7099,  2007,  1037,  9723,  4353,  2008,
         2003,  4242,  2000,  2149,  1012,  2256,  3125,  2003,  2000,  2224,
         2256,  2951, 13462,  2000, 10197,  1037,  3056,  3444,  1997,  2023,
         4353,  2008,  5836,  1996, 11712,  1997,  3037,  1012,  1999,  2023,
         2930,  2057,  2097,  6848,  1037,  2261,  4973,  1012,   102])"
1779,1,['data'], Estimating features of the true distribution,seg_233,the old faithful data,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([  101,  1996,  2214, 11633,  2951,   102])"
1780,1,"['density function', 'dataset', 'probability density function', 'estimate', 'model', 'data', 'empirical distribution function', 'continuous', 'probability distribution', 'function', 'kernel', 'probability', 'realization', 'random sample', 'kernel density estimate', 'distributions', 'sample', 'random', 'distribution', 'distribution function', 'continuous probability distribution']", Estimating features of the true distribution,seg_233,"we stick to the assumptions of section 17.1: by lack of knowledge on this phenomenon we prefer not to specify a particular parametric type of distribution, and we model the old faithful data as the realization of a random sample of size 272 from a continuous probability distribution. from the previous section we know that the kernel density estimate and the empirical distribution function of the dataset approximate the probability density f and the distribution function f of this distribution. in figure 17.4 a kernel density estimate (left) and the empirical distribution function (right) are displayed. indeed, neither graph resembles the probability density function or distribution function of any of the familiar parametric distributions. instead of viewing both graphs",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([  101,  2057,  6293,  2000,  1996, 17568,  1997,  2930,  2459,  1012,
         1015,  1024,  2011,  3768,  1997,  3716,  2006,  2023,  9575,  2057,
         9544,  2025,  2000, 20648,  1037,  3327, 11498, 12589,  2828,  1997,
         4353,  1010,  1998,  2057,  2944,  1996,  2214, 11633,  2951,  2004,
         1996, 12393,  1997,  1037,  6721,  7099,  1997,  2946, 24231,  2013,
         1037,  7142,  9723,  4353,  1012,  2013,  1996,  3025,  2930,  2057,
         2113,  2008,  1996, 16293,  4304, 10197,  1998,  1996, 17537,  4353,
         3853,  1997,  1996,  2951, 13462, 15796,  1996,  9723,  4304,  1042,
         1998,  1996,  4353,  3853,  1042,  1997,  2023,  4353,  1012,  1999,
         3275,  2459,  1012,  1018,  1037, 16293,  4304, 10197,  1006,  2187,
         1007,  1998,  1996, 17537,  4353,  3853,  1006,  2157,  1007,  2024,
         6913,  1012,  5262,  1010,  4445, 10629, 12950,  1996,  9723,  4304,
         3853,  2030,  4353,  3853,  1997,  2151,  1997,  1996,  5220, 11498,
        12589, 20611,  1012,  2612,  1997, 10523,  2119, 19287,   102])"
1781,1,"['function', 'kernel density estimate', 'graphical', 'kernel', 'probability', 'estimate', 'estimates', 'distribution', 'model', 'distribution function', 'data', 'empirical distribution function']", Estimating features of the true distribution,seg_233,"only as graphical summaries of the data, we can also use both curves as estimates for f and f . we estimate the model probability density f by means of the kernel density estimate and the model distribution function f by means of the empirical distribution function. since neither estimate assumes a particular parametric model, they are called nonparametric estimates.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([  101,  2069,  2004, 20477,  7680,  7849,  3111,  1997,  1996,  2951,
         1010,  2057,  2064,  2036,  2224,  2119, 10543,  2004, 10035,  2005,
         1042,  1998,  1042,  1012,  2057, 10197,  1996,  2944,  9723,  4304,
         1042,  2011,  2965,  1997,  1996, 16293,  4304, 10197,  1998,  1996,
         2944,  4353,  3853,  1042,  2011,  2965,  1997,  1996, 17537,  4353,
         3853,  1012,  2144,  4445, 10197, 15980,  1037,  3327, 11498, 12589,
         2944,  1010,  2027,  2024,  2170,  2512, 28689, 12589, 10035,  1012,
          102])"
1782,1,['data'], Estimating features of the true distribution,seg_233,the software data,tensor(1),"tensor([0., 0., 0., 1., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([ 101, 1996, 4007, 2951,  102])"
1783,1,"['kernel density estimate', 'kernel', 'estimate', 'realization', 'exponential distribution', 'random sample', 'sample', 'random', 'histogram', 'exponential', 'distribution', 'model', 'plot', 'data']", Estimating features of the true distribution,seg_233,"next consider the software reliability data. as motivated in section 17.1, we model interfailure times as the realization of a random sample from an exponential distribution. to see whether an exponential distribution is indeed a reasonable model, we plot a histogram and a kernel density estimate using a boundary kernel in figure 17.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([  101,  2279,  5136,  1996,  4007, 15258,  2951,  1012,  2004, 12774,
         1999,  2930,  2459,  1012,  1015,  1010,  2057,  2944,  6970,  7011,
         4014,  5397,  2335,  2004,  1996, 12393,  1997,  1037,  6721,  7099,
         2013,  2019, 27258,  4353,  1012,  2000,  2156,  3251,  2019, 27258,
         4353,  2003,  5262,  1037,  9608,  2944,  1010,  2057,  5436,  1037,
         2010,  3406, 13113,  1998,  1037, 16293,  4304, 10197,  2478,  1037,
         6192, 16293,  1999,  3275,  2459,  1012,  1019,  1012,   102])"
1784,1,"['estimated', 'exponential distribution', 'dataset', 'estimate', 'model', 'data', 'empirical distribution function', 'parameter', 'function', 'kernel', 'kernel density estimate', 'range', 'estimates', 'sample', 'distribution', 'exponential', 'distribution function', 'law of large numbers']", Estimating features of the true distribution,seg_233,"both seem to corroborate the assumption of an exponential distribution. accepting this, we are left with estimating the parameter λ. because for the exponential distribution e[x ] = 1/λ, the law of large numbers suggests 1/x̄ as an estimate for λ. for our dataset x̄ = 656.88, which yields 1/x̄ = 0.0015. in figure 17.6 we compare the estimated exponential density (left) and distribution function (right) with the corresponding nonparametric estimates. note that the nonparametric estimates do not assume an exponential model for the data. but, if an exponential distribution were the right model, the kernel density estimate and empirical distribution function should resemble the estimated exponential density and distribution function. at first sight the fit seems reasonable, although near zero the data accumulate more than one might perhaps expect for a sample of size 135 from an exponential distribution, and the other way around at the other end of the data range. the question is whether this phenomenon can be attributed to chance or is caused by the fact that the exponential model is the wrong model. we will return to this type of question in chapter 25 (see also chapter 18).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([  101,  2119,  4025,  2000,  2522, 18933, 12821,  3686,  1996, 11213,
         1997,  2019, 27258,  4353,  1012, 10564,  2023,  1010,  2057,  2024,
         2187,  2007,  9765, 22835,  1996, 16381,  1165,  1012,  2138,  2005,
         1996, 27258,  4353,  1041,  1031,  1060,  1033,  1027,  1015,  1013,
         1165,  1010,  1996,  2375,  1997,  2312,  3616,  6083,  1015,  1013,
         1060,  2004,  2019, 10197,  2005,  1165,  1012,  2005,  2256,  2951,
        13462,  1060,  1027,  3515,  2575,  1012,  6070,  1010,  2029, 16189,
         1015,  1013,  1060,  1027,  1014,  1012, 25604,  2629,  1012,  1999,
         3275,  2459,  1012,  1020,  2057, 12826,  1996,  4358, 27258,  4304,
         1006,  2187,  1007,  1998,  4353,  3853,  1006,  2157,  1007,  2007,
         1996,  7978,  2512, 28689, 12589, 10035,  1012,  3602,  2008,  1996,
         2512, 28689, 12589, 10035,  2079,  2025,  7868,  2019, 27258,  2944,
         2005,  1996,  2951,  1012,  2021,  1010,  2065,  2019, 27258,  4353,
         2020,  1996,  2157,  2944,  1010,  1996, 16293,  4304, 10197,  1998,
        17537,  4353,  3853,  2323, 13014,  1996,  4358, 27258,  4304,  1998,
         4353,  3853,  1012,  2012,  2034,  4356,  1996,  4906,  3849,  9608,
         1010,  2348,  2379,  5717,  1996,  2951, 27598,  2062,  2084,  2028,
         2453,  3383,  5987,  2005,  1037,  7099,  1997,  2946, 11502,  2013,
         2019, 27258,  4353,  1010,  1998,  1996,  2060,  2126,  2105,  2012,
         1996,  2060,  2203,  1997,  1996,  2951,  2846,  1012,  1996,  3160,
         2003,  3251,  2023,  9575,  2064,  2022,  7108,  2000,  3382,  2030,
         2003,  3303,  2011,  1996,  2755,  2008,  1996, 27258,  2944,  2003,
         1996,  3308,  2944,  1012,  2057,  2097,  2709,  2000,  2023,  2828,
         1997,  3160,  1999,  3127,  2423,  1006,  2156,  2036,  3127,  2324,
         1007,  1012,   102])"
1785,1,['data'], Estimating features of the true distribution,seg_233,michelson data,tensor(1),"tensor([0., 0., 0., 1., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([ 101, 8709, 3385, 2951,  102])"
1786,1,"['mean', 'estimation', 'estimate', 'sample', 'expectation', 'distribution', 'law of large numbers', 'data', 'sample mean', 'case']", Estimating features of the true distribution,seg_233,"consider the michelson data on the speed of light. in this case we are not particularly interested in estimation of the “true” distribution, but solely in the expectation of this distribution, which represents the speed of light. the law of large numbers suggests to estimate the expectation by the sample mean x̄, which equals 852.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  2838,  1997,  1996,  2995,  4353])","tensor([  101,  5136,  1996,  8709,  3385,  2951,  2006,  1996,  3177,  1997,
         2422,  1012,  1999,  2023,  2553,  2057,  2024,  2025,  3391,  4699,
         1999, 24155,  1997,  1996,  1523,  2995,  1524,  4353,  1010,  2021,
         9578,  1999,  1996, 17626,  1997,  2023,  4353,  1010,  2029,  5836,
         1996,  3177,  1997,  2422,  1012,  1996,  2375,  1997,  2312,  3616,
         6083,  2000, 10197,  1996, 17626,  2011,  1996,  7099,  2812,  1060,
         1010,  2029, 19635,  5594,  2475,  1012,  1018,  1012,   102])"
1787,0,[], The linear regression model,seg_235,"recall the example about predicting janka hardness of wood from the density of the wood in section 15.5. the idea is, of course, that janka hardness is related to the density: the higher the density of the wood, the higher the value of janka hardness. this suggests a relationship of the type",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  9131,  1996,  2742,  2055, 29458,  5553,  2912, 23608,  1997,
         3536,  2013,  1996,  4304,  1997,  1996,  3536,  1999,  2930,  2321,
         1012,  1019,  1012,  1996,  2801,  2003,  1010,  1997,  2607,  1010,
         2008,  5553,  2912, 23608,  2003,  3141,  2000,  1996,  4304,  1024,
         1996,  3020,  1996,  4304,  1997,  1996,  3536,  1010,  1996,  3020,
         1996,  3643,  1997,  5553,  2912, 23608,  1012,  2023,  6083,  1037,
         3276,  1997,  1996,  2828,   102])"
1788,0,[], The linear regression model,seg_235,hardness = g(density of timber),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101, 23608,  1027,  1043,  1006,  4304,  1997,  7227,  1007,   102])"
1789,1,"['dataset', 'function', 'regression', 'table', 'bivariate dataset', 'bivariate', 'regression model', 'model', 'scatterplot', 'data']", The linear regression model,seg_235,"for some increasing function g. this is supported by the scatterplot of the data in figure 17.7. a closer look at the bivariate dataset in table 15.5 suggests that randomness is also involved. for instance, for the value 51.5 of the density, different corresponding values of janka hardness were observed. one way to model such a situation is by means of a regression model :",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  2005,  2070,  4852,  3853,  1043,  1012,  2023,  2003,  3569,
         2011,  1996,  8040, 20097, 24759,  4140,  1997,  1996,  2951,  1999,
         3275,  2459,  1012,  1021,  1012,  1037,  3553,  2298,  2012,  1996,
        12170, 10755, 13143,  2951, 13462,  1999,  2795,  2321,  1012,  1019,
         6083,  2008,  6721,  2791,  2003,  2036,  2920,  1012,  2005,  6013,
         1010,  2005,  1996,  3643,  4868,  1012,  1019,  1997,  1996,  4304,
         1010,  2367,  7978,  5300,  1997,  5553,  2912, 23608,  2020,  5159,
         1012,  2028,  2126,  2000,  2944,  2107,  1037,  3663,  2003,  2011,
         2965,  1997,  1037, 26237,  2944,  1024,   102])"
1790,1,['random'], The linear regression model,seg_235,hardness = g(density of timber) + random fluctuation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101, 23608,  1027,  1043,  1006,  4304,  1997,  7227,  1007,  1009,
         6721, 19857,  6593, 14505,  1012,   102])"
1791,1,"['scatterplot', 'function']", The linear regression model,seg_235,the important question now is what sort of function g fits well to the points in the scatterplot?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  1996,  2590,  3160,  2085,  2003,  2054,  4066,  1997,  3853,
         1043, 16142,  2092,  2000,  1996,  2685,  1999,  1996,  8040, 20097,
        24759,  4140,  1029,   102])"
1792,1,['data'], The linear regression model,seg_235,"in general, this may be a difficult question to answer. we may have so little knowledge about the phenomenon under study, and the data points may be",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([ 101, 1999, 2236, 1010, 2023, 2089, 2022, 1037, 3697, 3160, 2000, 3437,
        1012, 2057, 2089, 2031, 2061, 2210, 3716, 2055, 1996, 9575, 2104, 2817,
        1010, 1998, 1996, 2951, 2685, 2089, 2022,  102])"
1793,1,"['function', 'random', 'scatterplot', 'data']", The linear regression model,seg_235,"scattered in such a way, that there is no reason to assume a specific type of function for g. however, for the janka hardness data it makes sense to assume that g is increasing, but this still leaves us with many possibilities. looking at the scatterplot, at first sight it does not seem unreasonable to assume that g is a straight line, i.e., janka hardness depends linearly on the density of timber. the fact that the points are not exactly on a straight line is then modeled by a random fluctuation with respect to the straight line:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  7932,  1999,  2107,  1037,  2126,  1010,  2008,  2045,  2003,
         2053,  3114,  2000,  7868,  1037,  3563,  2828,  1997,  3853,  2005,
         1043,  1012,  2174,  1010,  2005,  1996,  5553,  2912, 23608,  2951,
         2009,  3084,  3168,  2000,  7868,  2008,  1043,  2003,  4852,  1010,
         2021,  2023,  2145,  3727,  2149,  2007,  2116, 12020,  1012,  2559,
         2012,  1996,  8040, 20097, 24759,  4140,  1010,  2012,  2034,  4356,
         2009,  2515,  2025,  4025, 29205,  2000,  7868,  2008,  1043,  2003,
         1037,  3442,  2240,  1010,  1045,  1012,  1041,  1012,  1010,  5553,
         2912, 23608,  9041,  7399,  2135,  2006,  1996,  4304,  1997,  7227,
         1012,  1996,  2755,  2008,  1996,  2685,  2024,  2025,  3599,  2006,
         1037,  3442,  2240,  2003,  2059, 14440,  2011,  1037,  6721, 19857,
         6593, 14505,  2007,  4847,  2000,  1996,  3442,  2240,  1024,   102])"
1794,1,['random'], The linear regression model,seg_235,hardness = α + β · (density of timber) + random fluctuation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101, 23608,  1027,  1155,  1009,  1156,  1087,  1006,  4304,  1997,
         7227,  1007,  1009,  6721, 19857,  6593, 14505,  1012,   102])"
1795,1,"['regression', 'linear', 'simple linear regression', 'regression model', 'linear regression', 'model', 'linear regression model']", The linear regression model,seg_235,this is a loose description of a simple linear regression model. a more complete description is given below.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  2023,  2003,  1037,  6065,  6412,  1997,  1037,  3722,  7399,
        26237,  2944,  1012,  1037,  2062,  3143,  6412,  2003,  2445,  2917,
         1012,   102])"
1796,1,"['dataset', 'regression', 'linear', 'bivariate dataset', 'simple linear regression', 'random', 'linear regression', 'random variables', 'bivariate', 'regression model', 'model', 'linear regression model', 'variables']", The linear regression model,seg_235,"simple linear regression model. in a simple linear regression model for a bivariate dataset (x1, y1), (x2, y2), . . . , (xn, yn), we assume that x1, x2, . . . , xn are nonrandom and that y1, y2, . . . , yn are realizations of random variables y1, y2, . . . , yn satisfying",tensor(1),"tensor([0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  3722,  7399, 26237,  2944,  1012,  1999,  1037,  3722,  7399,
        26237,  2944,  2005,  1037, 12170, 10755, 13143,  2951, 13462,  1006,
         1060,  2487,  1010,  1061,  2487,  1007,  1010,  1006,  1060,  2475,
         1010,  1061,  2475,  1007,  1010,  1012,  1012,  1012,  1010,  1006,
         1060,  2078,  1010,  1061,  2078,  1007,  1010,  2057,  7868,  2008,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2024,  2512, 13033,  5358,  1998,  2008,  1061,  2487,
         1010,  1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,  2078,
         2024, 12393,  2015,  1997,  6721, 10857,  1061,  2487,  1010,  1061,
         2475,  1010,  1012,  1012,  1012,  1010,  1061,  2078, 17087,   102])"
1797,1,"['random', 'random variables', 'independent random variables', 'variables', 'independent']", The linear regression model,seg_235,"where u1, . . . , un are independent random variables with e[ui] = 0 and var(ui) = σ2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  2073,  1057,  2487,  1010,  1012,  1012,  1012,  1010,  4895,
         2024,  2981,  6721, 10857,  2007,  1041,  1031, 21318,  1033,  1027,
         1014,  1998, 13075,  1006, 21318,  1007,  1027,  1173,  2475,  1012,
          102])"
1798,1,"['regression', 'dependent', 'explanatory', 'independent', 'regression line', 'explanatory variable', 'response', 'independent and dependent variables', 'slope', 'intercept', 'random variables', 'parameters', 'response variable', 'random', 'measurements', 'variables', 'variable', 'dependent variables']", The linear regression model,seg_235,"the line y = α + βx is called the regression line. the parameters α and β represent the intercept and slope of the regression line. usually, the x-variable is called the explanatory variable and the y-variable is called the response variable. one also refers to x and y as independent and dependent variables. the random variables u1, u2, . . . , un are assumed to be independent when the different measurements do not influence each other. they are assumed to have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  1996,  2240,  1061,  1027,  1155,  1009,  1156,  2595,  2003,
         2170,  1996, 26237,  2240,  1012,  1996, 11709,  1155,  1998,  1156,
         5050,  1996, 19115,  1998,  9663,  1997,  1996, 26237,  2240,  1012,
         2788,  1010,  1996,  1060,  1011,  8023,  2003,  2170,  1996,  4654,
        24759,  5162,  7062,  8023,  1998,  1996,  1061,  1011,  8023,  2003,
         2170,  1996,  3433,  8023,  1012,  2028,  2036,  5218,  2000,  1060,
         1998,  1061,  2004,  2981,  1998,  7790, 10857,  1012,  1996,  6721,
        10857,  1057,  2487,  1010, 23343,  1010,  1012,  1012,  1012,  1010,
         4895,  2024,  5071,  2000,  2022,  2981,  2043,  1996,  2367, 11702,
         2079,  2025,  3747,  2169,  2060,  1012,  2027,  2024,  5071,  2000,
         2031,   102])"
1799,1,"['variability', 'regression', 'variance', 'regression line', 'distributions', 'random sample', 'sample', 'random', 'independence', 'expectation']", The linear regression model,seg_235,"expectation zero, because the random fluctuation is considered to be around the regression line y = α + βx. finally, because each random fluctuation is supposed to have the same amount of variability, we assume that all ui have the same variance. note that by the propagation of independence rule in section 9.4, independence of the ui implies independence of yi. however, y1, y2, . . . , yn do not form a random sample. indeed, the yi have different distributions because every yi has a different expectation",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101, 17626,  5717,  1010,  2138,  1996,  6721, 19857,  6593, 14505,
         2003,  2641,  2000,  2022,  2105,  1996, 26237,  2240,  1061,  1027,
         1155,  1009,  1156,  2595,  1012,  2633,  1010,  2138,  2169,  6721,
        19857,  6593, 14505,  2003,  4011,  2000,  2031,  1996,  2168,  3815,
         1997, 28436,  1010,  2057,  7868,  2008,  2035, 21318,  2031,  1996,
         2168, 23284,  1012,  3602,  2008,  2011,  1996, 20594,  1997,  4336,
         3627,  1999,  2930,  1023,  1012,  1018,  1010,  4336,  1997,  1996,
        21318, 12748,  4336,  1997, 12316,  1012,  2174,  1010,  1061,  2487,
         1010,  1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,  2078,
         2079,  2025,  2433,  1037,  6721,  7099,  1012,  5262,  1010,  1996,
        12316,  2031,  2367, 20611,  2138,  2296, 12316,  2038,  1037,  2367,
        17626,   102])"
1800,1,"['regression', 'linear', 'variance', 'simple linear regression', 'regression model', 'linear regression', 'model', 'linear regression model']", The linear regression model,seg_235,quick exercise 17.3 consider the simple linear regression model as defined earlier. compute the variance of yi.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  4248,  6912,  2459,  1012,  1017,  5136,  1996,  3722,  7399,
        26237,  2944,  2004,  4225,  3041,  1012, 24134,  1996, 23284,  1997,
        12316,  1012,   102])"
1801,1,"['estimated', 'estimate', 'scatterplot', 'parameters', 'data']", The linear regression model,seg_235,the parameters α and β are unknown and our task will be to estimate them on the basis of the data. we will come back to this in chapter 22. in figure 17.8 the scatterplot for the janka hardness data is displayed with the estimated,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  1996, 11709,  1155,  1998,  1156,  2024,  4242,  1998,  2256,
         4708,  2097,  2022,  2000, 10197,  2068,  2006,  1996,  3978,  1997,
         1996,  2951,  1012,  2057,  2097,  2272,  2067,  2000,  2023,  1999,
         3127,  2570,  1012,  1999,  3275,  2459,  1012,  1022,  1996,  8040,
        20097, 24759,  4140,  2005,  1996,  5553,  2912, 23608,  2951,  2003,
         6913,  2007,  1996,  4358,   102])"
1802,0,[], The linear regression model,seg_235,"taking a closer look at figure 17.8, you might wonder whether",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  7399, 26237,  2944])","tensor([ 101, 2635, 1037, 3553, 2298, 2012, 3275, 2459, 1012, 1022, 1010, 2017,
        2453, 4687, 3251,  102])"
1803,1,"['regression', 'linear', 'simple linear regression', 'linear regression', 'multiple linear regression', 'model']", The linear regression model,seg_235,would be a more appropriate model. by trying to answer this question we enter the area of multiple linear regression. we will not pursue this topic; we restrict ourselves to simple linear regression.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0.])","tensor([ 1996,  7399, 26237,  2944])","tensor([  101,  2052,  2022,  1037,  2062,  6413,  2944,  1012,  2011,  2667,
         2000,  3437,  2023,  3160,  2057,  4607,  1996,  2181,  1997,  3674,
         7399, 26237,  1012,  2057,  2097,  2025,  7323,  2023,  8476,  1025,
         2057, 21573,  9731,  2000,  3722,  7399, 26237,  1012,   102])"
1804,1,"['variance', 'random sample', 'sample', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Solutions to the quick exercises,seg_237,"17.1 because x1, x2 form a random sample, they are independent. using the rule about the variance of the sum of independent random variables, this means that var(x1 + x2) = var(x1) + var(x2) = 1 + 1 = 2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2459,  1012,  1015,  2138,  1060,  2487,  1010,  1060,  2475,
         2433,  1037,  6721,  7099,  1010,  2027,  2024,  2981,  1012,  2478,
         1996,  3627,  2055,  1996, 23284,  1997,  1996,  7680,  1997,  2981,
         6721, 10857,  1010,  2023,  2965,  2008, 13075,  1006,  1060,  2487,
         1009,  1060,  2475,  1007,  1027, 13075,  1006,  1060,  2487,  1007,
         1009, 13075,  1006,  1060,  2475,  1007,  1027,  1015,  1009,  1015,
         1027,  1016,  1012,   102])"
1805,1,"['bernoulli random variable', 'outcomes', 'bernoulli', 'tails', 'random variable', 'model', 'case', 'parameter', 'probability', 'realization', 'random sample', 'bernoulli distribution', 'sample', 'random', 'distribution', 'variable']", Solutions to the quick exercises,seg_237,"17.2 the result of each toss of a coin can be modeled by a bernoulli random variable taking values 1 (heads) and 0 (tails). in the case when it is known that we are tossing a fair coin, heads and tails occur with equal probability. since it is reasonable to assume that the tosses do not influence each other, the outcomes of the ten tosses are modeled as the realization of a random sample x1, . . . , x10 from a bernoulli distribution with parameter p = 1/2. in this case the model distribution is completely specified and coincides with the “true” distribution: a ber(1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2459,  1012,  1016,  1996,  2765,  1997,  2169, 10055,  1997,
         1037,  9226,  2064,  2022, 14440,  2011,  1037, 16595,  7140,  6894,
         6721,  8023,  2635,  5300,  1015,  1006,  4641,  1007,  1998,  1014,
         1006, 17448,  1007,  1012,  1999,  1996,  2553,  2043,  2009,  2003,
         2124,  2008,  2057,  2024, 15021,  1037,  4189,  9226,  1010,  4641,
         1998, 17448,  5258,  2007,  5020,  9723,  1012,  2144,  2009,  2003,
         9608,  2000,  7868,  2008,  1996, 10055,  2229,  2079,  2025,  3747,
         2169,  2060,  1010,  1996, 13105,  1997,  1996,  2702, 10055,  2229,
         2024, 14440,  2004,  1996, 12393,  1997,  1037,  6721,  7099,  1060,
         2487,  1010,  1012,  1012,  1012,  1010,  1060, 10790,  2013,  1037,
        16595,  7140,  6894,  4353,  2007, 16381,  1052,  1027,  1015,  1013,
         1016,  1012,  1999,  2023,  2553,  1996,  2944,  4353,  2003,  3294,
         9675,  1998, 19680,  2015,  2007,  1996,  1523,  2995,  1524,  4353,
         1024,  1037,  2022,  2099,  1006,  1015,   102])"
1806,1,['distribution'], Solutions to the quick exercises,seg_237,2 ) distribution.,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1016, 1007, 4353, 1012,  102])"
1807,1,"['parameter', 'bernoulli', 'outcomes', 'realization', 'random sample', 'sample', 'random', 'distribution', 'model', 'bernoulli distribution', 'case']", Solutions to the quick exercises,seg_237,"in the case when we are dealing with a possibly unfair coin, the outcomes of the ten tosses are still modeled as the realization of a random sample x1, . . . , x10 from a bernoulli distribution, but we cannot specify the value of the parameter p. the model distribution is a bernoulli distribution. the “true” distribution is a bernoulli distribution with one particular value for p, unknown to us.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1999,  1996,  2553,  2043,  2057,  2024,  7149,  2007,  1037,
         4298, 15571,  9226,  1010,  1996, 13105,  1997,  1996,  2702, 10055,
         2229,  2024,  2145, 14440,  2004,  1996, 12393,  1997,  1037,  6721,
         7099,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060, 10790,
         2013,  1037, 16595,  7140,  6894,  4353,  1010,  2021,  2057,  3685,
        20648,  1996,  3643,  1997,  1996, 16381,  1052,  1012,  1996,  2944,
         4353,  2003,  1037, 16595,  7140,  6894,  4353,  1012,  1996,  1523,
         2995,  1524,  4353,  2003,  1037, 16595,  7140,  6894,  4353,  2007,
         2028,  3327,  3643,  2005,  1052,  1010,  4242,  2000,  2149,  1012,
          102])"
1808,1,"['exponential distributions', 'functions', 'dataset', 'normal', 'kernel density estimates', 'kernel', 'histograms', 'normal distributions', 'estimates', 'distributions', 'empirical distribution functions', 'distribution', 'exponential']", Exercises,seg_239,"17.1 figure 17.9 displays several histograms, kernel density estimates, and empirical distribution functions. it is known that all figures correspond to datasets of size 200 that are generated from normal distributions n(0, 1), n(0, 9), and n(3, 1), and from exponential distributions exp(1) and exp(1/3). report for each figure from which distribution the dataset has been generated.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1015,  3275,  2459,  1012,  1023,  8834,  2195,
         2010,  3406, 13113,  2015,  1010, 16293,  4304, 10035,  1010,  1998,
        17537,  4353,  4972,  1012,  2009,  2003,  2124,  2008,  2035,  4481,
        17254,  2000,  2951, 13462,  2015,  1997,  2946,  3263,  2008,  2024,
         7013,  2013,  3671, 20611,  1050,  1006,  1014,  1010,  1015,  1007,
         1010,  1050,  1006,  1014,  1010,  1023,  1007,  1010,  1998,  1050,
         1006,  1017,  1010,  1015,  1007,  1010,  1998,  2013, 27258, 20611,
         4654,  2361,  1006,  1015,  1007,  1998,  4654,  2361,  1006,  1015,
         1013,  1017,  1007,  1012,  3189,  2005,  2169,  3275,  2013,  2029,
         4353,  1996,  2951, 13462,  2038,  2042,  7013,  1012,   102])"
1809,1,"['dataset', 'boxplots', 'boxplot', 'distribution']", Exercises,seg_239,17.2 figure 17.10 displays several boxplots. it is known that all figures correspond to datasets of size 200 that are generated from the same five distributions as in exercise 17.1. report for each boxplot from which distribution the dataset has been generated.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1016,  3275,  2459,  1012,  2184,  8834,  2195,
         3482, 24759, 12868,  1012,  2009,  2003,  2124,  2008,  2035,  4481,
        17254,  2000,  2951, 13462,  2015,  1997,  2946,  3263,  2008,  2024,
         7013,  2013,  1996,  2168,  2274, 20611,  2004,  1999,  6912,  2459,
         1012,  1015,  1012,  3189,  2005,  2169,  3482, 24759,  4140,  2013,
         2029,  4353,  1996,  2951, 13462,  2038,  2042,  7013,  1012,   102])"
1810,1,"['dataset', 'table']", Exercises,seg_239,"17.3 at a london underground station, the number of women was counted in each of 100 queues of length 10. in this way a dataset x1, x2, . . . , x100 was obtained, where xi denotes the observed number of women in the ith queue. the dataset is summarized in the following table and lists the number of queues with 0 women, 1 woman, 2 women, etc.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1017,  2012,  1037,  2414,  5230,  2276,  1010,
         1996,  2193,  1997,  2308,  2001,  8897,  1999,  2169,  1997,  2531,
        24240,  2015,  1997,  3091,  2184,  1012,  1999,  2023,  2126,  1037,
         2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060, 18613,  2001,  4663,  1010,  2073,  8418, 14796,
         1996,  5159,  2193,  1997,  2308,  1999,  1996,  2009,  2232, 24240,
         1012,  1996,  2951, 13462,  2003, 22539,  1999,  1996,  2206,  2795,
         1998,  7201,  1996,  2193,  1997, 24240,  2015,  2007,  1014,  2308,
         1010,  1015,  2450,  1010,  1016,  2308,  1010,  4385,  1012,   102])"
1811,1,['frequency'], Exercises,seg_239,count 0 1 2 3 4 5 6 7 8 9 10 frequency 1 3 4 23 25 19 18 5 1 1 0,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 4175, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,
        2184, 6075, 1015, 1017, 1018, 2603, 2423, 2539, 2324, 1019, 1015, 1015,
        1014,  102])"
1812,1,"['dataset', 'realization', 'random sample', 'sample', 'random', 'statistical', 'model', 'statistical model']", Exercises,seg_239,"in the statistical model for this dataset, we assume that the observed counts are a realization of a random sample x1, x2, . . . , x100.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1999,  1996,  7778,  2944,  2005,  2023,  2951, 13462,  1010,
         2057,  7868,  2008,  1996,  5159,  9294,  2024,  1037, 12393,  1997,
         1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060, 18613,  1012,   102])"
1813,0,[], Exercises,seg_239,a. assume that people line up in such a way that a man or woman in a,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 7868, 2008, 2111, 2240, 2039, 1999, 2107, 1037, 2126,
        2008, 1037, 2158, 2030, 2450, 1999, 1037,  102])"
1814,1,"['model', 'probability', 'independent', 'distribution']", Exercises,seg_239,"certain position is independent of the other positions, and that in each position one has a woman with equal probability. what is an appropriate choice for the model distribution?",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 3056, 2597, 2003, 2981, 1997, 1996, 2060, 4460, 1010, 1998, 2008,
        1999, 2169, 2597, 2028, 2038, 1037, 2450, 2007, 5020, 9723, 1012, 2054,
        2003, 2019, 6413, 3601, 2005, 1996, 2944, 4353, 1029,  102])"
1815,1,"['table', 'estimate', 'model']", Exercises,seg_239,b. use the table to find an estimate for the parameter(s) of the model dis-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2224,  1996,  2795,  2000,  2424,  2019, 10197,
         2005,  1996, 16381,  1006,  1055,  1007,  1997,  1996,  2944,  4487,
         2015,  1011,   102])"
1816,0,[], Exercises,seg_239,tribution chosen in part a.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 13012, 29446,  4217,  1999,  2112,  1037,  1012,   102])"
1817,1,"['dataset', 'data', 'table']", Exercises,seg_239,"17.4 during the second world war, london was hit by numerous flying bombs. the following data are from an area in south london of 36 square kilometers. the area was divided into 576 squares with sides of length 1/4 kilometer. for each of the 576 squares the number of hits was recorded. in this way we obtain a dataset x1, x2, . . . , x576, where xi denotes the number of hits in the ith square. the data are summarized in the following table which lists the number of squares with no hits, 1 hit, 2 hits, etc.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1018,  2076,  1996,  2117,  2088,  2162,  1010,
         2414,  2001,  2718,  2011,  3365,  3909,  9767,  1012,  1996,  2206,
         2951,  2024,  2013,  2019,  2181,  1999,  2148,  2414,  1997,  4029,
         2675,  7338,  1012,  1996,  2181,  2001,  4055,  2046,  5401,  2575,
        14320,  2007,  3903,  1997,  3091,  1015,  1013,  1018, 20595,  1012,
         2005,  2169,  1997,  1996,  5401,  2575, 14320,  1996,  2193,  1997,
         4978,  2001,  2680,  1012,  1999,  2023,  2126,  2057,  6855,  1037,
         2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060, 28311,  2575,  1010,  2073,  8418, 14796,  1996,
         2193,  1997,  4978,  1999,  1996,  2009,  2232,  2675,  1012,  1996,
         2951,  2024, 22539,  1999,  1996,  2206,  2795,  2029,  7201,  1996,
         2193,  1997, 14320,  2007,  2053,  4978,  1010,  1015,  2718,  1010,
         1016,  4978,  1010,  4385,  1012,   102])"
1818,1,"['poisson', 'random', 'distribution', 'poisson distribution', 'data', 'case']", Exercises,seg_239,an interesting question is whether london was hit in a completely random manner. in that case a poisson distribution should fit the data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 1., 1., 1., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2019,  5875,  3160,  2003,  3251,  2414,  2001,  2718,  1999,
         1037,  3294,  6721,  5450,  1012,  1999,  2008,  2553,  1037, 13433,
        24077,  4353,  2323,  4906,  1996,  2951,  1012,   102])"
1819,1,"['dataset', 'realization', 'random sample', 'sample', 'random', 'model']", Exercises,seg_239,a. if we model the dataset as the realization of a random sample from a,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2065,  2057,  2944,  1996,  2951, 13462,  2004,
         1996, 12393,  1997,  1037,  6721,  7099,  2013,  1037,   102])"
1820,1,"['parameter', 'estimate', 'distribution']", Exercises,seg_239,"poisson distribution with parameter µ, then what would you choose as an estimate for µ?",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101, 13433, 24077,  4353,  2007, 16381,  1085,  1010,  2059,  2054,
         2052,  2017,  5454,  2004,  2019, 10197,  2005,  1085,  1029,   102])"
1821,1,"['poisson', 'poisson distribution', 'distribution']", Exercises,seg_239,b. check the fit with a poisson distribution by comparing some of the ob-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012,  4638,  1996,  4906,  2007,  1037, 13433, 24077,
         4353,  2011, 13599,  2070,  1997,  1996, 27885,  1011,   102])"
1822,1,"['frequencies', 'estimated', 'probabilities', 'poisson', 'relative frequencies', 'distribution', 'poisson distribution']", Exercises,seg_239,"served relative frequencies of 0’s, 1’s, 2’s, etc., with the corresponding probabilities for the poisson distribution with µ estimated as in part a.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2366,  5816, 13139,  1997,  1014,  1521,  1055,  1010,  1015,
         1521,  1055,  1010,  1016,  1521,  1055,  1010,  4385,  1012,  1010,
         2007,  1996,  7978,  4013,  3676, 14680,  2005,  1996, 13433, 24077,
         4353,  2007,  1085,  4358,  2004,  1999,  2112,  1037,  1012,   102])"
1823,1,"['geometric', 'random variable', 'random', 'tables', 'data', 'variable']", Exercises,seg_239,"17.5 we return to the example concerning the number of menstrual cycles up to pregnancy, where the number of cycles was modeled by a geometric random variable (see section 4.4). the original data concerned 100 smoking and 486 nonsmoking women. for 7 smokers and 12 nonsmokers, the exact number of cycles up to pregnancy was unknown. in the following tables we only",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1019,  2057,  2709,  2000,  1996,  2742,  7175,
         1996,  2193,  1997,  2273,  3367,  6820,  2389, 12709,  2039,  2000,
        10032,  1010,  2073,  1996,  2193,  1997, 12709,  2001, 14440,  2011,
         1037, 14965,  6721,  8023,  1006,  2156,  2930,  1018,  1012,  1018,
         1007,  1012,  1996,  2434,  2951,  4986,  2531,  9422,  1998,  4466,
         2575,  2512, 25855,  6834,  2308,  1012,  2005,  1021,  5610,  2869,
         1998,  2260,  2512, 25855, 11451,  1010,  1996,  6635,  2193,  1997,
        12709,  2039,  2000, 10032,  2001,  4242,  1012,  1999,  1996,  2206,
         7251,  2057,  2069,   102])"
1824,1,['dataset'], Exercises,seg_239,"incorporated the 93 smokers and 474 nonsmokers, for which the exact number of cycles was observed. another analysis, based on the complete dataset, is done in section 21.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  5100,  1996,  6109,  5610,  2869,  1998,  4700,  2549,  2512,
        25855, 11451,  1010,  2005,  2029,  1996,  6635,  2193,  1997, 12709,
         2001,  5159,  1012,  2178,  4106,  1010,  2241,  2006,  1996,  3143,
         2951, 13462,  1010,  2003,  2589,  1999,  2930,  2538,  1012,  1015,
         1012,   102])"
1825,1,['dataset'], Exercises,seg_239,"a. consider the dataset x1, x2, . . . , x93 corresponding to the smoking women,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5136,  1996,  2951, 13462,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2683,  2509,
         7978,  2000,  1996,  9422,  2308,  1010,   102])"
1826,1,"['data', 'table']", Exercises,seg_239,where xi denotes the number of cycles for the ith smoking woman. the data are summarized in the following table.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  8418, 14796,  1996,  2193,  1997, 12709,  2005,  1996,
         2009,  2232,  9422,  2450,  1012,  1996,  2951,  2024, 22539,  1999,
         1996,  2206,  2795,  1012,   102])"
1827,1,['frequency'], Exercises,seg_239,cycles 1 2 3 4 5 6 7 8 9 10 11 12 frequency 29 16 17 4 3 9 4 5 1 1 1 3,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 12709,  1015,  1016,  1017,  1018,  1019,  1020,  1021,  1022,
         1023,  2184,  2340,  2260,  6075,  2756,  2385,  2459,  1018,  1017,
         1023,  1018,  1019,  1015,  1015,  1015,  1017,   102])"
1828,1,"['parameter', 'dataset', 'geometric', 'geometric distribution', 'table', 'estimate', 'realization', 'random sample', 'sample', 'random', 'distribution', 'model']", Exercises,seg_239,"the table lists the number of women that had to wait 1 cycle, 2 cycles, etc. if we model the dataset as the realization of a random sample from a geometric distribution with parameter p, then what would you choose as an estimate for p?",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  2795,  7201,  1996,  2193,  1997,  2308,  2008,  2018,
         2000,  3524,  1015,  5402,  1010,  1016, 12709,  1010,  4385,  1012,
         2065,  2057,  2944,  1996,  2951, 13462,  2004,  1996, 12393,  1997,
         1037,  6721,  7099,  2013,  1037, 14965,  4353,  2007, 16381,  1052,
         1010,  2059,  2054,  2052,  2017,  5454,  2004,  2019, 10197,  2005,
         1052,  1029,   102])"
1829,1,"['parameter', 'estimate']", Exercises,seg_239,"b. also estimate the parameter p for the 474 nonsmoking women, which",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2036, 10197,  1996, 16381,  1052,  2005,  1996,
         4700,  2549,  2512, 25855,  6834,  2308,  1010,  2029,   102])"
1830,1,"['dataset', 'geometric', 'geometric distribution', 'realization', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_239,"is also modeled as the realization of a random sample from a geometric distribution. the dataset y1, y2, . . . , y474, where yj denotes the number of cycles for the jth nonsmoking woman, is summarized here:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2003,  2036, 14440,  2004,  1996, 12393,  1997,  1037,  6721,
         7099,  2013,  1037, 14965,  4353,  1012,  1996,  2951, 13462,  1061,
         2487,  1010,  1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,
        22610,  2549,  1010,  2073,  1061,  3501, 14796,  1996,  2193,  1997,
        12709,  2005,  1996,  1046,  2705,  2512, 25855,  6834,  2450,  1010,
         2003, 22539,  2182,  1024,   102])"
1831,1,['frequency'], Exercises,seg_239,cycles 1 2 3 4 5 6 7 8 9 10 11 12 frequency 198 107 55 38 18 22 7 9 5 3 6 6,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 12709,  1015,  1016,  1017,  1018,  1019,  1020,  1021,  1022,
         1023,  2184,  2340,  2260,  6075, 20003, 10550,  4583,  4229,  2324,
         2570,  1021,  1023,  1019,  1017,  1020,  1020,   102])"
1832,1,"['probability', 'estimates']", Exercises,seg_239,c. compare the estimates of the probability of becoming pregnant in three,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 12826,  1996, 10035,  1997,  1996,  9723,  1997,
         3352,  6875,  1999,  2093,   102])"
1833,0,[], Exercises,seg_239,or fewer cycles for smoking and nonsmoking women.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2030,  8491, 12709,  2005,  9422,  1998,  2512, 25855,  6834,
         2308,  1012,   102])"
1834,1,"['normal distribution', 'realization', 'histogram', 'random sample', 'sample', 'random', 'normal', 'distribution', 'data']", Exercises,seg_239,"17.6 recall exercise 15.1 about the chest circumference of 5732 scottish soldiers, where we constructed the histogram displayed in figure 17.11. the histogram suggests modeling the data as the realization of a random sample from a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1020,  9131,  6912,  2321,  1012,  1015,  2055,
         1996,  3108, 25022, 11890,  2819, 25523,  1997,  5401, 16703,  4104,
         3548,  1010,  2073,  2057,  3833,  1996,  2010,  3406, 13113,  6913,
         1999,  3275,  2459,  1012,  2340,  1012,  1996,  2010,  3406, 13113,
         6083, 11643,  1996,  2951,  2004,  1996, 12393,  1997,  1037,  6721,
         7099,  2013,  1037,  3671,  4353,  1012,   102])"
1835,0,[], Exercises,seg_239,a. suppose that for the dataset∑xi = 228377.2 and∑x2i = 9124064. what,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  2008,  2005,  1996,   100,  1027, 22238,
        24434,  2581,  1012,  1016,   100,  1027,  6205, 18827,  2692, 21084,
         1012,  2054,   102])"
1836,1,"['estimates', 'distribution', 'parameters']", Exercises,seg_239,"would you choose as estimates for the parameters µ and σ of the n(µ, σ2) distribution? hint: you may want to use the relation from exercise 16.15.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2052,  2017,  5454,  2004, 10035,  2005,  1996, 11709,  1085,
         1998,  1173,  1997,  1996,  1050,  1006,  1085,  1010,  1173,  2475,
         1007,  4353,  1029,  9374,  1024,  2017,  2089,  2215,  2000,  2224,
         1996,  7189,  2013,  6912,  2385,  1012,  2321,  1012,   102])"
1837,1,"['probability', 'estimate']", Exercises,seg_239,b. give an estimate for the probability that a scottish soldier has a chest,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2507,  2019, 10197,  2005,  1996,  9723,  2008,
         1037,  4104,  5268,  2038,  1037,  3108,   102])"
1838,0,[], Exercises,seg_239,circumference between 38.5 and 42.5 inches.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101, 25022, 11890,  2819, 25523,  2090,  4229,  1012,  1019,  1998,
         4413,  1012,  1019,  5282,  1012,   102])"
1839,1,"['function', 'rate', 'probability', 'distribution function', 'histogram', 'poisson', 'intervals', 'process', 'distribution', 'poisson process', 'empirical distribution function']", Exercises,seg_239,17.7 recall exercise 15.3 about time intervals between successive coal mine disasters. let us assume that the rate at which the disasters occur is constant over time and that on a single day a disaster takes place with small probability independently of what happens on other days. according to chapter 12 this suggests modeling the series of disasters with a poisson process. figure 17.12 displays a histogram and empirical distribution function of the observed time intervals.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1021,  9131,  6912,  2321,  1012,  1017,  2055,
         2051, 14025,  2090, 11165,  5317,  3067, 18665,  1012,  2292,  2149,
         7868,  2008,  1996,  3446,  2012,  2029,  1996, 18665,  5258,  2003,
         5377,  2058,  2051,  1998,  2008,  2006,  1037,  2309,  2154,  1037,
         7071,  3138,  2173,  2007,  2235,  9723,  9174,  1997,  2054,  6433,
         2006,  2060,  2420,  1012,  2429,  2000,  3127,  2260,  2023,  6083,
        11643,  1996,  2186,  1997, 18665,  2007,  1037, 13433, 24077,  2832,
         1012,  3275,  2459,  1012,  2260,  8834,  1037,  2010,  3406, 13113,
         1998, 17537,  4353,  3853,  1997,  1996,  5159,  2051, 14025,  1012,
          102])"
1840,1,"['dataset', 'intervals', 'statistical', 'model', 'statistical model']", Exercises,seg_239,a. in the statistical model for this dataset we model the 190 time intervals,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  1999,  1996,  7778,  2944,  2005,  2023,  2951,
        13462,  2057,  2944,  1996, 11827,  2051, 14025,   102])"
1841,1,"['realization', 'random sample', 'sample', 'random', 'distribution', 'model']", Exercises,seg_239,as the realization of a random sample. what would you choose for the model distribution?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  2004,  1996, 12393,  1997,  1037,  6721,  7099,  1012,  2054,
         2052,  2017,  5454,  2005,  1996,  2944,  4353,  1029,   102])"
1842,1,"['estimate', 'intervals']", Exercises,seg_239,b. the sum of the observed time intervals is 40 549 days. give an estimate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  7680,  1997,  1996,  5159,  2051, 14025,
         2003,  2871,  5139,  2683,  2420,  1012,  2507,  2019, 10197,   102])"
1843,1,['distribution'], Exercises,seg_239,for the parameter(s) of the distribution chosen in part a.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2005,  1996, 16381,  1006,  1055,  1007,  1997,  1996,  4353,
         4217,  1999,  2112,  1037,  1012,   102])"
1844,1,"['failure', 'data']", Exercises,seg_239,17.8 the following data represent the number of revolutions to failure (in millions) of 22 deep-groove ball-bearings.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1022,  1996,  2206,  2951,  5050,  1996,  2193,
         1997, 25239,  2000,  4945,  1006,  1999,  8817,  1007,  1997,  2570,
         2784,  1011, 14100,  3608,  1011, 21714,  1012,   102])"
1845,1,"['dataset', 'function', 'distribution function', 'realization', 'random sample', 'sample', 'random', 'weibull', 'distribution', 'weibull distribution']", Exercises,seg_239,"lieblein and zelen propose modeling the dataset as a realization of a random sample from a weibull distribution, which has distribution function",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  4682,  3468,  2378,  1998, 27838,  7770, 16599, 11643,  1996,
         2951, 13462,  2004,  1037, 12393,  1997,  1037,  6721,  7099,  2013,
         1037, 11417,  8569,  3363,  4353,  1010,  2029,  2038,  4353,  3853,
          102])"
1846,1,"['random variable', 'random', 'weibull', 'distribution', 'weibull distribution', 'variable']", Exercises,seg_239,a. suppose that x is a random variable with a weibull distribution. check,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  2008,  1060,  2003,  1037,  6721,  8023,
         2007,  1037, 11417,  8569,  3363,  4353,  1012,  4638,   102])"
1847,1,"['parameter', 'exponential distribution', 'random variable', 'random', 'distribution', 'exponential', 'variable']", Exercises,seg_239,that the random variable y = xα has an exponential distribution with parameter λα and conclude that e[xα] = 1/λα.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2008,  1996,  6721,  8023,  1061,  1027,  1060, 14608,  2038,
         2019, 27258,  4353,  2007, 16381,  1165, 14608,  1998, 16519,  2008,
         1041,  1031,  1060, 14608,  1033,  1027,  1015,  1013,  1165, 14608,
         1012,   102])"
1848,1,"['data', 'table']", Exercises,seg_239,b. use part a to explain how one can use the data in the table to find,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2224, 2112, 1037, 2000, 4863, 2129, 2028, 2064, 2224,
        1996, 2951, 1999, 1996, 2795, 2000, 2424,  102])"
1849,1,"['parameter', 'estimated', 'estimate']", Exercises,seg_239,"an estimate for the parameter λ, if it is given that the parameter α is estimated by 2.102.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2019, 10197,  2005,  1996, 16381,  1165,  1010,  2065,  2009,
         2003,  2445,  2008,  1996, 16381,  1155,  2003,  4358,  2011,  1016,
         1012,  9402,  1012,   102])"
1850,1,"['scatterplot', 'estimate', 'data', 'table']", Exercises,seg_239,"17.9 the volume (i.e., the effective wood production in cubic meters), height (in meters), and diameter (in meters) (measured at 1.37 meter above the ground) are recorded for 31 black cherry trees in the allegheny national forest in pennsylvania. the data are listed in table 17.3. they were collected to find an estimate for the volume of a tree (and therefore for the timber yield), given its height and diameter. for each tree the volume y and the value of x = d2h are recorded, where d and h are the diameter and height of the tree. the resulting points (x1, y1), . . . , (x31, y31) are displayed in the scatterplot in figure 17.13.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  1023,  1996,  3872,  1006,  1045,  1012,  1041,
         1012,  1010,  1996,  4621,  3536,  2537,  1999, 11919,  5563,  1007,
         1010,  4578,  1006,  1999,  5563,  1007,  1010,  1998,  6705,  1006,
         1999,  5563,  1007,  1006,  7594,  2012,  1015,  1012,  4261,  8316,
         2682,  1996,  2598,  1007,  2024,  2680,  2005,  2861,  2304,  9115,
         3628,  1999,  1996, 21192,  2120,  3224,  1999,  3552,  1012,  1996,
         2951,  2024,  3205,  1999,  2795,  2459,  1012,  1017,  1012,  2027,
         2020,  5067,  2000,  2424,  2019, 10197,  2005,  1996,  3872,  1997,
         1037,  3392,  1006,  1998,  3568,  2005,  1996,  7227, 10750,  1007,
         1010,  2445,  2049,  4578,  1998,  6705,  1012,  2005,  2169,  3392,
         1996,  3872,  1061,  1998,  1996,  3643,  1997,  1060,  1027,  1040,
         2475,  2232,  2024,  2680,  1010,  2073,  1040,  1998,  1044,  2024,
         1996,  6705,  1998,  4578,  1997,  1996,  3392,  1012,  1996,  4525,
         2685,  1006,  1060,  2487,  1010,  1061,  2487,  1007,  1010,  1012,
         1012,  1012,  1010,  1006,  1060, 21486,  1010,  1061, 21486,  1007,
         2024,  6913,  1999,  1996,  8040, 20097, 24759,  4140,  1999,  3275,
         2459,  1012,  2410,  1012,   102])"
1851,1,"['regression', 'linear', 'intercept', 'regression model', 'linear regression', 'model', 'data', 'linear regression model']", Exercises,seg_239,we model the data by the following linear regression model (without intercept),tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2057,  2944,  1996,  2951,  2011,  1996,  2206,  7399, 26237,
         2944,  1006,  2302, 19115,  1007,   102])"
1852,1,['linear'], Exercises,seg_239,a. what physical reasons justify the linear relationship between y and d2h?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  3558,  4436, 16114,  1996,  7399,  3276,
         2090,  1061,  1998,  1040,  2475,  2232,  1029,   102])"
1853,0,[], Exercises,seg_239,hint: how does the volume of a cylinder relate to its diameter and height?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  9374,  1024,  2129,  2515,  1996,  3872,  1997,  1037,  7956,
        14396,  2000,  2049,  6705,  1998,  4578,  1029,   102])"
1854,1,"['slope', 'estimate']", Exercises,seg_239,b. we want to find an estimate for the slope β of the line y = βx. two,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2057,  2215,  2000,  2424,  2019, 10197,  2005,
         1996,  9663,  1156,  1997,  1996,  2240,  1061,  1027,  1156,  2595,
         1012,  2048,   102])"
1855,1,"['slope', 'average']", Exercises,seg_239,"natural candidates are the average slope z̄n, where zi = yi/xi, and the",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  3019,  5347,  2024,  1996,  2779,  9663,  1062,  2078,  1010,
         2073,  1062,  2072,  1027, 12316,  1013,  8418,  1010,  1998,  1996,
          102])"
1856,0,[], Exercises,seg_239,slope of the averages ȳ/x̄. in chapter 22 we will encounter the so-called,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  9663,  1997,  1996, 20185,  1061,  1013,  1060,  1012,  1999,
         3127,  2570,  2057,  2097,  8087,  1996,  2061,  1011,  2170,   102])"
1857,1,['estimate'], Exercises,seg_239,least squares estimate: n,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2560, 14320, 10197,  1024,  1050,   102])"
1858,1,"['table', 'estimates', 'data']", Exercises,seg_239,"compute all three estimates for the data in table 17.3. you need at least 5 digits accuracy, and you may use that ∑ xi = 87.456, ∑ yi = 26.486, ∑ yi/xi = 9.369, ∑ xiyi = 95.498, and ∑x2i = 314.644.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 24134,  2035,  2093, 10035,  2005,  1996,  2951,  1999,  2795,
         2459,  1012,  1017,  1012,  2017,  2342,  2012,  2560,  1019, 16648,
        10640,  1010,  1998,  2017,  2089,  2224,  2008,   100,  8418,  1027,
         6584,  1012,  3429,  2575,  1010,   100, 12316,  1027,  2656,  1012,
         4466,  2575,  1010,   100, 12316,  1013,  8418,  1027,  1023,  1012,
         4029,  2683,  1010,   100,  8418, 10139,  1027,  5345,  1012,  4749,
         2620,  1010,  1998,   100,  1027, 26257,  1012,  4185,  2549,  1012,
          102])"
1859,1,"['continuous', 'function', 'random variable', 'random', 'distribution', 'distribution function', 'median', 'variable']", Exercises,seg_239,17.10 let x be a random variable with (continuous) distribution function f . let m = q0.5 = f inv(0.5) be the median of f and define the random variable,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([ 101, 2459, 1012, 2184, 2292, 1060, 2022, 1037, 6721, 8023, 2007, 1006,
        7142, 1007, 4353, 3853, 1042, 1012, 2292, 1049, 1027, 1053, 2692, 1012,
        1019, 1027, 1042, 1999, 2615, 1006, 1014, 1012, 1019, 1007, 2022, 1996,
        3991, 1997, 1042, 1998, 9375, 1996, 6721, 8023,  102])"
1860,1,"['distribution function', 'function', 'distribution']", Exercises,seg_239,"a. show that y has distribution function g, defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2265, 2008, 1061, 2038, 4353, 3853, 1043, 1010, 4225,
        2011,  102])"
1861,1,['median'], Exercises,seg_239,b. the mad of f is the median of g. show that if the density f correspond-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  5506,  1997,  1042,  2003,  1996,  3991,
         1997,  1043,  1012,  2265,  2008,  2065,  1996,  4304,  1042, 17254,
         1011,   102])"
1862,1,"['median', 'symmetric']", Exercises,seg_239,"ing to f is symmetric around its median m, then",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 13749,  2000,  1042,  2003, 19490,  2105,  2049,  3991,  1049,
         1010,  2059,   102])"
1863,1,['distribution'], Exercises,seg_239,"c. use b to conclude that the mad of an n(µ, σ2) distribution is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2224,  1038,  2000, 16519,  2008,  1996,  5506,
         1997,  2019,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  4353,
         2003,  5020,  2000,   102])"
1864,1,"['function', 'normal distribution', 'standard normal distribution', 'standard normal', 'normal', 'standard', 'distribution', 'distribution function']", Exercises,seg_239,"σφinv(3/4), where φ is the distribution function of a standard normal distribution. recall that the distribution function f of an n(µ, σ2) can",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1173, 29736,  2378,  2615,  1006,  1017,  1013,  1018,  1007,
         1010,  2073,  1176,  2003,  1996,  4353,  3853,  1997,  1037,  3115,
         3671,  4353,  1012,  9131,  2008,  1996,  4353,  3853,  1042,  1997,
         2019,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  2064,   102])"
1865,1,['distribution'], Exercises,seg_239,"you might check that, as stated in section 17.2, the mad of the n(5, 4) distribution is equal to 2φinv(3/4) = 1.3490.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2017,  2453,  4638,  2008,  1010,  2004,  3090,  1999,  2930,
         2459,  1012,  1016,  1010,  1996,  5506,  1997,  1996,  1050,  1006,
         1019,  1010,  1018,  1007,  4353,  2003,  5020,  2000,  1016, 29736,
         2378,  2615,  1006,  1017,  1013,  1018,  1007,  1027,  1015,  1012,
         4090, 21057,  1012,   102])"
1866,1,['distribution'], Exercises,seg_239,17.11 in this exercise we compute the mad of the exp(λ) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])",tensor([11110]),"tensor([  101,  2459,  1012,  2340,  1999,  2023,  6912,  2057, 24134,  1996,
         5506,  1997,  1996,  4654,  2361,  1006,  1165,  1007,  4353,  1012,
          102])"
1867,1,"['median', 'distribution']", Exercises,seg_239,"a. let x have an exp(λ) distribution, with median m = (ln 2)/λ. show that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2292, 1060, 2031, 2019, 4654, 2361, 1006, 1165, 1007,
        4353, 1010, 2007, 3991, 1049, 1027, 1006, 1048, 2078, 1016, 1007, 1013,
        1165, 1012, 2265, 2008,  102])"
1868,1,"['distribution function', 'function', 'distribution']", Exercises,seg_239,y = |x − m| has distribution function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([ 101, 1061, 1027, 1064, 1060, 1597, 1049, 1064, 2038, 4353, 3853,  102])"
1869,1,['distribution'], Exercises,seg_239,b. argue that the mad of the exp(λ) distribution is a solution of the equa-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  7475,  2008,  1996,  5506,  1997,  1996,  4654,
         2361,  1006,  1165,  1007,  4353,  2003,  1037,  5576,  1997,  1996,
         1041, 16211,  1011,   102])"
1870,1,['distribution'], Exercises,seg_239,c. compute the mad of the exp(λ) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 24134,  1996,  5506,  1997,  1996,  4654,  2361,
         1006,  1165,  1007,  4353,  1012,   102])"
1871,1,"['sample statistics', 'simulation', 'method', 'mean', 'estimate', 'normal', 'statistics', 'model', 'statistical', 'statistic', 'function', 'probability', 'approximation', 'expectation', 'sample', 'sample size', 'sample statistic', 'limit', 'distribution', 'distribution function', 'sample mean']", The bootstrap,seg_241,"in the forthcoming chapters we will develop statistical methods to infer knowledge about the model distribution and encounter several sample statistics to do this. in the previous chapter we have seen examples of sample statistics that can be used to estimate different model features, for instance, the empirical distribution function to estimate the model distribution function f , and the sample mean to estimate the expectation µ corresponding to f . one of the things we would like to know is how close a sample statistic is to the model feature it is supposed to estimate. for instance, what is the probability that the sample mean and µ differ more than a given tolerance ε? for this we need to know the distribution of x̄n − µ. more generally, it is important to know how a sample statistic is distributed in relation to the corresponding model feature. for the distribution of the sample mean we saw a normal limit approximation in chapter 14. in this chapter we discuss a simulation procedure that approximates the distribution of the sample mean for finite sample size. moreover, the method is more generally applicable to sample statistics other than the sample mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([1996, 6879, 6494, 2361])","tensor([  101,  1999,  1996, 16875,  9159,  2057,  2097,  4503,  7778,  4725,
         2000,  1999,  7512,  3716,  2055,  1996,  2944,  4353,  1998,  8087,
         2195,  7099,  6747,  2000,  2079,  2023,  1012,  1999,  1996,  3025,
         3127,  2057,  2031,  2464,  4973,  1997,  7099,  6747,  2008,  2064,
         2022,  2109,  2000, 10197,  2367,  2944,  2838,  1010,  2005,  6013,
         1010,  1996, 17537,  4353,  3853,  2000, 10197,  1996,  2944,  4353,
         3853,  1042,  1010,  1998,  1996,  7099,  2812,  2000, 10197,  1996,
        17626,  1085,  7978,  2000,  1042,  1012,  2028,  1997,  1996,  2477,
         2057,  2052,  2066,  2000,  2113,  2003,  2129,  2485,  1037,  7099,
        28093,  6553,  2003,  2000,  1996,  2944,  3444,  2009,  2003,  4011,
         2000, 10197,  1012,  2005,  6013,  1010,  2054,  2003,  1996,  9723,
         2008,  1996,  7099,  2812,  1998,  1085, 11234,  2062,  2084,  1037,
         2445, 13986,  1159,  1029,  2005,  2023,  2057,  2342,  2000,  2113,
         1996,  4353,  1997,  1060,  2078,  1597,  1085,  1012,  2062,  3227,
         1010,  2009,  2003,  2590,  2000,  2113,  2129,  1037,  7099, 28093,
         6553,  2003,  5500,  1999,  7189,  2000,  1996,  7978,  2944,  3444,
         1012,  2005,  1996,  4353,  1997,  1996,  7099,  2812,  2057,  2387,
         1037,  3671,  5787, 20167,  1999,  3127,  2403,  1012,  1999,  2023,
         3127,  2057,  6848,  1037, 12504,  7709,  2008, 15796,  2015,  1996,
         4353,  1997,  1996,  7099,  2812,  2005, 10713,  7099,  2946,  1012,
         9308,  1010,  1996,  4118,  2003,  2062,  3227, 12711,  2000,  7099,
         6747,  2060,  2084,  1996,  7099,  2812,  1012,   102])"
1872,1,"['mean', 'dataset', 'estimate', 'random variable', 'data', 'function', 'variable', 'realization', 'random sample', 'expectation', 'sample', 'random', 'distribution', 'distribution function', 'sample mean']", The bootstrap principle,seg_243,"consider the old faithful data introduced in chapter 15, which we modeled as the realization of a random sample of size n = 272 from some distribution function f . the sample mean x̄n of the observed durations equals 209.3. what does this say about the expectation µ of f? as we saw in chapter 17, the value 209.3 is a natural estimate for µ, but to conclude that µ is equal to 209.3 is unwise. the reason is that, if we would observe a new dataset of durations, we will obtain a different sample mean as an estimate for µ. this should not come as a surprise. since the dataset x1, x2, . . . , xn is just one possible realization of the random sample x1, x2, . . . , xn, the observed sample mean is just one possible realization of the random variable",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  5136,  1996,  2214, 11633,  2951,  3107,  1999,  3127,  2321,
         1010,  2029,  2057, 14440,  2004,  1996, 12393,  1997,  1037,  6721,
         7099,  1997,  2946,  1050,  1027, 24231,  2013,  2070,  4353,  3853,
         1042,  1012,  1996,  7099,  2812,  1060,  2078,  1997,  1996,  5159,
         9367,  2015, 19635, 19348,  1012,  1017,  1012,  2054,  2515,  2023,
         2360,  2055,  1996, 17626,  1085,  1997,  1042,  1029,  2004,  2057,
         2387,  1999,  3127,  2459,  1010,  1996,  3643, 19348,  1012,  1017,
         2003,  1037,  3019, 10197,  2005,  1085,  1010,  2021,  2000, 16519,
         2008,  1085,  2003,  5020,  2000, 19348,  1012,  1017,  2003,  4895,
        14244,  1012,  1996,  3114,  2003,  2008,  1010,  2065,  2057,  2052,
        11949,  1037,  2047,  2951, 13462,  1997,  9367,  2015,  1010,  2057,
         2097,  6855,  1037,  2367,  7099,  2812,  2004,  2019, 10197,  2005,
         1085,  1012,  2023,  2323,  2025,  2272,  2004,  1037,  4474,  1012,
         2144,  1996,  2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  2003,  2074,  2028,  2825,
        12393,  1997,  1996,  6721,  7099,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  1996,  5159,
         7099,  2812,  2003,  2074,  2028,  2825, 12393,  1997,  1996,  6721,
         8023,   102])"
1873,1,"['mean', 'vary', 'dataset', 'probability', 'variation', 'realization', 'random variable', 'random sample', 'sample', 'random', 'sample mean', 'distribution', 'variable', 'probability distribution']", The bootstrap principle,seg_243,"a new dataset is another realization of the random sample, and the corresponding sample mean is another realization of the random variable x̄n. hence, to infer something about µ, one should take into account how realizations of x̄n vary. this variation is described by the probability distribution of x̄n.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1037,  2047,  2951, 13462,  2003,  2178, 12393,  1997,  1996,
         6721,  7099,  1010,  1998,  1996,  7978,  7099,  2812,  2003,  2178,
        12393,  1997,  1996,  6721,  8023,  1060,  2078,  1012,  6516,  1010,
         2000,  1999,  7512,  2242,  2055,  1085,  1010,  2028,  2323,  2202,
         2046,  4070,  2129, 12393,  2015,  1997,  1060,  2078,  8137,  1012,
         2023,  8386,  2003,  2649,  2011,  1996,  9723,  4353,  1997,  1060,
         2078,  1012,   102])"
1874,1,"['bootstrap', 'mean', 'dataset', 'estimate', 'random variable', 'probability distribution', 'function', 'probability', 'variable', 'random sample', 'sample', 'random', 'distribution', 'distribution function', 'sample mean']", The bootstrap principle,seg_243,"in principle1 it is possible to determine the distribution function of x̄n from the distribution function f of the random sample x1, x2, . . . , xn. however, f is unknown. nevertheless, in chapter 17 we saw that the observed dataset reflects most features of the “true” probability distribution. hence the natural thing to do is to compute an estimate f̂ for the distribution function f and then to consider a random sample from f̂ and the corresponding sample mean as substitutes for the random sample x1, x2, . . . , xn from f and the random variable x̄n. a random sample from f̂ is called a bootstrap random sample, or briefly bootstrap sample, and is denoted by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1999,  6958,  2487,  2009,  2003,  2825,  2000,  5646,  1996,
         4353,  3853,  1997,  1060,  2078,  2013,  1996,  4353,  3853,  1042,
         1997,  1996,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1012,  2174,  1010,  1042,
         2003,  4242,  1012,  6600,  1010,  1999,  3127,  2459,  2057,  2387,
         2008,  1996,  5159,  2951, 13462, 11138,  2087,  2838,  1997,  1996,
         1523,  2995,  1524,  9723,  4353,  1012,  6516,  1996,  3019,  2518,
         2000,  2079,  2003,  2000, 24134,  2019, 10197,  1042,  2005,  1996,
         4353,  3853,  1042,  1998,  2059,  2000,  5136,  1037,  6721,  7099,
         2013,  1042,  1998,  1996,  7978,  7099,  2812,  2004, 29200,  2005,
         1996,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  2013,  1042,  1998,  1996,  6721,
         8023,  1060,  2078,  1012,  1037,  6721,  7099,  2013,  1042,  2003,
         2170,  1037,  6879,  6494,  2361,  6721,  7099,  1010,  2030,  4780,
         6879,  6494,  2361,  7099,  1010,  1998,  2003, 19537,  2011,   102])"
1875,1,"['mean', 'bootstrapped', 'random variable', 'random sample', 'sample', 'random', 'sample mean', 'average', 'variable']", The bootstrap principle,seg_243,"to distinguish it from the random sample x1, x2, . . . , xn from the “true” f . the corresponding average is called the bootstrapped sample mean, and this random variable is denoted by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  2000, 10782,  2009,  2013,  1996,  6721,  7099,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2013,  1996,  1523,  2995,  1524,  1042,  1012,  1996,  7978,  2779,
         2003,  2170,  1996,  6879,  6494, 11469,  7099,  2812,  1010,  1998,
         2023,  6721,  8023,  2003, 19537,  2011,   102])"
1876,1,"['random variable', 'random', 'distribution', 'variable']", The bootstrap principle,seg_243,to distinguish it from the random variable x̄n. the idea is now to use the distribution of x̄n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  2000, 10782,  2009,  2013,  1996,  6721,  8023,  1060,  2078,
         1012,  1996,  2801,  2003,  2085,  2000,  2224,  1996,  4353,  1997,
         1060,  2078,   102])"
1877,1,['distribution'], The bootstrap principle,seg_243,∗ to approximate the distribution of x̄n.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1598,  2000, 15796,  1996,  4353,  1997,  1060,  2078,  1012,
          102])"
1878,1,"['mean', 'bootstrapped', 'probability', 'sample', 'bootstrap', 'sample statistic', 'distribution', 'statistic', 'sample mean', 'probability distribution']", The bootstrap principle,seg_243,"the preceding procedure is called the bootstrap principle for the sample mean. clearly, it can be applied to any sample statistic h(x1, x2, . . . , xn) by approximating its probability distribution by that of the corresponding bootstrapped sample statistic h(x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1996, 11003,  7709,  2003,  2170,  1996,  6879,  6494,  2361,
         6958,  2005,  1996,  7099,  2812,  1012,  4415,  1010,  2009,  2064,
         2022,  4162,  2000,  2151,  7099, 28093,  6553,  1044,  1006,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1007,  2011, 22480, 22835,  2049,  9723,  4353,  2011,  2008,
         1997,  1996,  7978,  6879,  6494, 11469,  7099, 28093,  6553,  1044,
         1006,  1060,  2487, 30125,  1010,  1060,  2475, 30125,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,   102])"
1879,1,"['dataset', 'function', 'probability', 'estimate', 'random sample', 'sample', 'random', 'distribution', 'distribution function']", The bootstrap principle,seg_243,"bootstrap principle. use the dataset x1, x2, . . . , xn to compute an estimate f̂ for the “true” distribution function f . replace the random sample x1, x2, . . . , xn from f by a random sample x1∗, x2∗, . . . , xn ∗ from f̂ , and approximate the probability distribution of h(x1, x2, . . . , xn) by that of h(x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  6879,  6494,  2361,  6958,  1012,  2224,  1996,  2951, 13462,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2000, 24134,  2019, 10197,  1042,  2005,  1996,  1523,
         2995,  1524,  4353,  3853,  1042,  1012,  5672,  1996,  6721,  7099,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2013,  1042,  2011,  1037,  6721,  7099,  1060,  2487,
        30125,  1010,  1060,  2475, 30125,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1598,  2013,  1042,  1010,  1998, 15796,  1996,  9723,
         4353,  1997,  1044,  1006,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1007,  2011,  2008,  1997,
         1044,  1006,  1060,  2487, 30125,  1010,  1060,  2475, 30125,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,   102])"
1880,1,"['mean', 'sample', 'distribution', 'sample mean']", The bootstrap principle,seg_243,"returning to the sample mean, the first question that comes to mind is, of course, how well does the distribution of x̄n",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([ 101, 4192, 2000, 1996, 7099, 2812, 1010, 1996, 2034, 3160, 2008, 3310,
        2000, 2568, 2003, 1010, 1997, 2607, 1010, 2129, 2092, 2515, 1996, 4353,
        1997, 1060, 2078,  102])"
1881,1,['distribution'], The bootstrap principle,seg_243,∗ approximate the distribution,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1598, 15796,  1996,  4353,   102])"
1882,1,"['bootstrapped', 'sample', 'sample statistic', 'distribution', 'statistic']", The bootstrap principle,seg_243,"of x̄n? or more generally, how well does the distribution of a bootstrapped sample statistic h(x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1997,  1060,  2078,  1029,  2030,  2062,  3227,  1010,  2129,
         2092,  2515,  1996,  4353,  1997,  1037,  6879,  6494, 11469,  7099,
        28093,  6553,  1044,  1006,  1060,  2487, 30125,  1010,  1060,  2475,
        30125,  1010,  1012,  1012,  1012,  1010,  1060,  2078,   102])"
1883,1,['distribution'], The bootstrap principle,seg_243,∗) approximate the distribution of the sam-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1598,  1007, 15796,  1996,  4353,  1997,  1996,  3520,  1011,
          102])"
1884,1,"['mean', 'approximation', 'sample', 'bootstrap', 'distribution', 'statistic', 'sample mean']", The bootstrap principle,seg_243,"ple statistic of interest h(x1, x2, . . . , xn)? applied in such a straightforward manner, the bootstrap approximation for the distribution of x̄n by that of x̄n ∗ may not be so good (see remark 18.1). the bootstrap approximation will improve if we approximate the distribution of the centered sample mean:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101, 20228,  2063, 28093,  6553,  1997,  3037,  1044,  1006,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1007,  1029,  4162,  1999,  2107,  1037, 19647,  5450,  1010,
         1996,  6879,  6494,  2361, 20167,  2005,  1996,  4353,  1997,  1060,
         2078,  2011,  2008,  1997,  1060,  2078,  1598,  2089,  2025,  2022,
         2061,  2204,  1006,  2156, 17674,  2324,  1012,  1015,  1007,  1012,
         1996,  6879,  6494,  2361, 20167,  2097,  5335,  2065,  2057, 15796,
         1996,  4353,  1997,  1996,  8857,  7099,  2812,  1024,   102])"
1885,1,"['bootstrapped', 'random variable', 'random', 'expectation', 'variable']", The bootstrap principle,seg_243,where µ is the expectation corresponding to f . the bootstrapped version would be the random variable,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  2073,  1085,  2003,  1996, 17626,  7978,  2000,  1042,  1012,
         1996,  6879,  6494, 11469,  2544,  2052,  2022,  1996,  6721,  8023,
          102])"
1886,1,"['sample median', 'sample', 'bootstrap', 'sample statistic', 'expectation', 'distribution', 'statistic', 'median']", The bootstrap principle,seg_243,where µ∗ is the expectation corresponding to f̂ . often the bootstrap approximation of the distribution of a sample statistic will improve if we somehow normalize the sample statistic by relating it to a corresponding feature of the “true” distribution. an example is the centered sample median,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  2073,  1085, 30125,  2003,  1996, 17626,  7978,  2000,  1042,
         1012,  2411,  1996,  6879,  6494,  2361, 20167,  1997,  1996,  4353,
         1997,  1037,  7099, 28093,  6553,  2097,  5335,  2065,  2057,  5064,
         3671,  4697,  1996,  7099, 28093,  6553,  2011,  8800,  2009,  2000,
         1037,  7978,  3444,  1997,  1996,  1523,  2995,  1524,  4353,  1012,
         2019,  2742,  2003,  1996,  8857,  7099,  3991,   102])"
1887,1,"['variance', 'sample', 'sample variance', 'median']", The bootstrap principle,seg_243,where we subtract the median f inv(0.5) of f . another example is the normalized sample variance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  2073,  2057,  4942,  6494,  6593,  1996,  3991,  1042,  1999,
         2615,  1006,  1014,  1012,  1019,  1007,  1997,  1042,  1012,  2178,
         2742,  2003,  1996,  3671,  3550,  7099, 23284,   102])"
1888,1,['variance'], The bootstrap principle,seg_243,where we divide by the variance σ2 of f .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  2073,  2057, 11443,  2011,  1996, 23284,  1173,  2475,  1997,
         1042,  1012,   102])"
1889,1,"['bootstrap', 'distribution']", The bootstrap principle,seg_243,"quick exercise 18.1 describe how the bootstrap principle should be applied to approximate the distribution of med(x1, x2, . . . , xn) − f inv(0.5).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  4248,  6912,  2324,  1012,  1015,  6235,  2129,  1996,  6879,
         6494,  2361,  6958,  2323,  2022,  4162,  2000, 15796,  1996,  4353,
         1997, 19960,  1006,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1007,  1597,  1042,  1999,  2615,
         1006,  1014,  1012,  1019,  1007,  1012,   102])"
1890,1,"['parameter', 'dataset', 'estimate', 'realization', 'random sample', 'sample', 'random', 'bootstrap', 'distribution', 'model', 'data']", The bootstrap principle,seg_243,"the question that remains is what to take as an estimate f̂ for f . this will depend on how well f can be specified. for the old faithful data we cannot say anything about the type of distribution. however, for the software data it seems reasonable to model the dataset as a realization of a random sample from an exp(λ) distribution and then we only have to estimate the parameter λ. different assumptions about f give rise to different bootstrap procedures. we will discuss two of them in the next sections.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6879, 6494, 2361, 6958])","tensor([  101,  1996,  3160,  2008,  3464,  2003,  2054,  2000,  2202,  2004,
         2019, 10197,  1042,  2005,  1042,  1012,  2023,  2097, 12530,  2006,
         2129,  2092,  1042,  2064,  2022,  9675,  1012,  2005,  1996,  2214,
        11633,  2951,  2057,  3685,  2360,  2505,  2055,  1996,  2828,  1997,
         4353,  1012,  2174,  1010,  2005,  1996,  4007,  2951,  2009,  3849,
         9608,  2000,  2944,  1996,  2951, 13462,  2004,  1037, 12393,  1997,
         1037,  6721,  7099,  2013,  2019,  4654,  2361,  1006,  1165,  1007,
         4353,  1998,  2059,  2057,  2069,  2031,  2000, 10197,  1996, 16381,
         1165,  1012,  2367, 17568,  2055,  1042,  2507,  4125,  2000,  2367,
         6879,  6494,  2361,  8853,  1012,  2057,  2097,  6848,  2048,  1997,
         2068,  1999,  1996,  2279,  5433,  1012,   102])"
1891,1,"['dataset', 'function', 'estimate', 'realization', 'random sample', 'sample', 'random', 'distribution', 'distribution function', 'empirical distribution function']", The empirical bootstrap,seg_245,"suppose we consider our dataset x1, x2, . . . , xn as a realization of a random sample from a distribution function f . when we cannot make any assumptions about the type of f , we can always estimate f by the empirical distribution function of the dataset:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  6814,  2057,  5136,  2256,  2951, 13462,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2004,
         1037, 12393,  1997,  1037,  6721,  7099,  2013,  1037,  4353,  3853,
         1042,  1012,  2043,  2057,  3685,  2191,  2151, 17568,  2055,  1996,
         2828,  1997,  1042,  1010,  2057,  2064,  2467, 10197,  1042,  2011,
         1996, 17537,  4353,  3853,  1997,  1996,  2951, 13462,  1024,   102])"
1892,1,"['mean', 'function', 'estimate', 'random sample', 'sample', 'random', 'bootstrap', 'distribution', 'empirical bootstrap', 'distribution function', 'sample mean', 'empirical distribution function']", The empirical bootstrap,seg_245,"since we estimate f by the empirical distribution function, the corresponding bootstrap principle is called the empirical bootstrap. applying this principle to the centered sample mean, the random sample x1, x2, . . . , xn from f is replaced by a bootstrap random sample x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2144,  2057, 10197,  1042,  2011,  1996, 17537,  4353,  3853,
         1010,  1996,  7978,  6879,  6494,  2361,  6958,  2003,  2170,  1996,
        17537,  6879,  6494,  2361,  1012, 11243,  2023,  6958,  2000,  1996,
         8857,  7099,  2812,  1010,  1996,  6721,  7099,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,
         1042,  2003,  2999,  2011,  1037,  6879,  6494,  2361,  6721,  7099,
         1060,  2487, 30125,  1010,  1060,  2475, 30125,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,   102])"
1893,1,"['mean', 'approximation', 'sample', 'bootstrap', 'expectation', 'distribution', 'empirical bootstrap', 'sample mean']", The empirical bootstrap,seg_245,"the expectation corresponding to fn. the question is, of course, how good this approximation is. a mathematical theorem tells us that the empirical bootstrap works for the centered sample mean, i.e., the distribution of x̄n−µ is well approximated by that of x̄n",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1996, 17626,  7978,  2000,  1042,  2078,  1012,  1996,  3160,
         2003,  1010,  1997,  2607,  1010,  2129,  2204,  2023, 20167,  2003,
         1012,  1037,  8045,  9872,  4136,  2149,  2008,  1996, 17537,  6879,
         6494,  2361,  2573,  2005,  1996,  8857,  7099,  2812,  1010,  1045,
         1012,  1041,  1012,  1010,  1996,  4353,  1997,  1060,  2078, 22543,
        29659,  2003,  2092, 15796,  2094,  2011,  2008,  1997,  1060,  2078,
          102])"
1894,1,"['normalized', 'sample statistics', 'sample', 'bootstrap', 'statistics', 'empirical bootstrap']", The empirical bootstrap,seg_245,"∗−µ∗ (see remark 18.2). on the other hand, there are (normalized) sample statistics for which the empirical bootstrap fails,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598, 22543, 29659, 30125,  1006,  2156, 17674,  2324,  1012,
         1016,  1007,  1012,  2006,  1996,  2060,  2192,  1010,  2045,  2024,
         1006,  3671,  3550,  1007,  7099,  6747,  2005,  2029,  1996, 17537,
         6879,  6494,  2361, 11896,  1010,   102])"
1895,1,"['random sample', 'sample', 'random', 'distribution']", The empirical bootstrap,seg_245,"based on a random sample x1, x2, . . . , xn from a u(0, θ) distribution (see exercise 18.12).",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([ 101, 2241, 2006, 1037, 6721, 7099, 1060, 2487, 1010, 1060, 2475, 1010,
        1012, 1012, 1012, 1010, 1060, 2078, 2013, 1037, 1057, 1006, 1014, 1010,
        1162, 1007, 4353, 1006, 2156, 6912, 2324, 1012, 2260, 1007, 1012,  102])"
1896,1,"['discrete random variable', 'bootstrap', 'dataset', 'random variable', 'discrete', 'empirical distribution function', 'function', 'probability', 'random variables', 'expectation', 'random', 'distribution', 'distribution function', 'variables', 'variable']", The empirical bootstrap,seg_245,"let us continue with approximating the distribution of x̄n − µ by that of x̄n ∗−µ∗. first note that the empirical distribution function fn of the original dataset is the distribution function of a discrete random variable that attains the values x1, x2, . . . , xn, each with probability 1/n. this means that each of the bootstrap random variables xi∗ has expectation",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2292,  2149,  3613,  2007, 22480, 22835,  1996,  4353,  1997,
         1060,  2078,  1597,  1085,  2011,  2008,  1997,  1060,  2078,  1598,
        22543, 29659, 30125,  1012,  2034,  3602,  2008,  1996, 17537,  4353,
         3853,  1042,  2078,  1997,  1996,  2434,  2951, 13462,  2003,  1996,
         4353,  3853,  1997,  1037, 16246,  6721,  8023,  2008, 18759,  2015,
         1996,  5300,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  1010,  2169,  2007,  9723,  1015,  1013,
         1050,  1012,  2023,  2965,  2008,  2169,  1997,  1996,  6879,  6494,
         2361,  6721, 10857,  8418, 30125,  2038, 17626,   102])"
1897,1,"['empirical bootstrap', 'bootstrap', 'distribution']", The empirical bootstrap,seg_245,"therefore, applying the empirical bootstrap to x̄n − µ means approximating its distribution by that of x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  3568,  1010, 11243,  1996, 17537,  6879,  6494,  2361,  2000,
         1060,  2078,  1597,  1085,  2965, 22480, 22835,  2049,  4353,  2011,
         2008,  1997,  1060,  2078,   102])"
1898,1,"['probability', 'probability distribution', 'distribution']", The empirical bootstrap,seg_245,∗ − x̄n. in principle it would be possible to determine the probability distribution of x̄n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([ 101, 1598, 1597, 1060, 2078, 1012, 1999, 6958, 2009, 2052, 2022, 2825,
        2000, 5646, 1996, 9723, 4353, 1997, 1060, 2078,  102])"
1899,1,"['random', 'random variable', 'variable']", The empirical bootstrap,seg_245,"∗− x̄n. indeed, the random variable x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598, 22543,  1060,  2078,  1012,  5262,  1010,  1996,  6721,
         8023,  1060,  2078,   102])"
1900,1,"['probability', 'random', 'random variables', 'distribution', 'variables']", The empirical bootstrap,seg_245,"is based on the random variables xi∗, whose distribution we know precisely: it takes values x1, x2, . . . , xn with equal probability 1/n. hence we could determine the possible values of x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2003,  2241,  2006,  1996,  6721, 10857,  8418, 30125,  1010,
         3005,  4353,  2057,  2113, 10785,  1024,  2009,  3138,  5300,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2007,  5020,  9723,  1015,  1013,  1050,  1012,  6516,  2057,
         2071,  5646,  1996,  2825,  5300,  1997,  1060,  2078,   102])"
1901,1,['probabilities'], The empirical bootstrap,seg_245,∗ − x̄n and the corresponding probabilities.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598,  1597,  1060,  2078,  1998,  1996,  7978,  4013,  3676,
        14680,  1012,   102])"
1902,1,['approximation'], The empirical bootstrap,seg_245,"for small n this can be done (see exercise 18.5), but for large n this becomes cumbersome. therefore we invoke a second approximation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2005,  2235,  1050,  2023,  2064,  2022,  2589,  1006,  2156,
         6912,  2324,  1012,  1019,  1007,  1010,  2021,  2005,  2312,  1050,
         2023,  4150, 13988, 17198,  8462,  1012,  3568,  2057,  1999,  6767,
         3489,  1037,  2117, 20167,  1012,   102])"
1903,1,"['vary', 'sample statistics', 'simulation', 'variation', 'realization', 'random sample', 'sample', 'random', 'statistics', 'distribution']", The empirical bootstrap,seg_245,"recall the jury example in section 6.3, where we investigated the variation of two different rules that a jury might use to assign grades. in terms of the present chapter, the jury example deals with a random sample from a u(−0.5, 0.5) distribution and two different sample statistics t and m , corresponding to the two rules. to investigate the distribution of t and m , a simulation was carried out with one thousand runs, where in every run we generated a realization of a random sample from the u(−0.5, 0.5) distribution and computed the corresponding realization of t and m . the one thousand realizations give a good impression of how t and m vary around the deserved score (see figure 6.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  9131,  1996,  6467,  2742,  1999,  2930,  1020,  1012,  1017,
         1010,  2073,  2057, 10847,  1996,  8386,  1997,  2048,  2367,  3513,
         2008,  1037,  6467,  2453,  2224,  2000, 23911,  7022,  1012,  1999,
         3408,  1997,  1996,  2556,  3127,  1010,  1996,  6467,  2742,  9144,
         2007,  1037,  6721,  7099,  2013,  1037,  1057,  1006,  1597,  2692,
         1012,  1019,  1010,  1014,  1012,  1019,  1007,  4353,  1998,  2048,
         2367,  7099,  6747,  1056,  1998,  1049,  1010,  7978,  2000,  1996,
         2048,  3513,  1012,  2000,  8556,  1996,  4353,  1997,  1056,  1998,
         1049,  1010,  1037, 12504,  2001,  3344,  2041,  2007,  2028,  4595,
         3216,  1010,  2073,  1999,  2296,  2448,  2057,  7013,  1037, 12393,
         1997,  1037,  6721,  7099,  2013,  1996,  1057,  1006,  1597,  2692,
         1012,  1019,  1010,  1014,  1012,  1019,  1007,  4353,  1998, 24806,
         1996,  7978, 12393,  1997,  1056,  1998,  1049,  1012,  1996,  2028,
         4595, 12393,  2015,  2507,  1037,  2204,  8605,  1997,  2129,  1056,
         1998,  1049,  8137,  2105,  1996, 10849,  3556,  1006,  2156,  3275,
         1020,  1012,  1018,  1007,  1012,   102])"
1904,1,['distribution'], The empirical bootstrap,seg_245,returning to the distribution of x̄n,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([ 101, 4192, 2000, 1996, 4353, 1997, 1060, 2078,  102])"
1905,1,"['realization', 'random sample', 'sample', 'random', 'bootstrap']", The empirical bootstrap,seg_245,"∗− x̄n, the analogue would be to repeatedly generate a realization of the bootstrap random sample from fn and every time compute the corresponding realization of x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598, 22543,  1060,  2078,  1010,  1996, 21800,  2052,  2022,
         2000,  8385,  9699,  1037, 12393,  1997,  1996,  6879,  6494,  2361,
         6721,  7099,  2013,  1042,  2078,  1998,  2296,  2051, 24134,  1996,
         7978, 12393,  1997,  1060,  2078,   102])"
1906,1,['distribution'], The empirical bootstrap,seg_245,∗ − x̄n. the resulting realizations would give a good impression about the distribution of x̄n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598,  1597,  1060,  2078,  1012,  1996,  4525, 12393,  2015,
         2052,  2507,  1037,  2204,  8605,  2055,  1996,  4353,  1997,  1060,
         2078,   102])"
1907,1,['realization'], The empirical bootstrap,seg_245,∗− x̄n. a realization,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598, 22543,  1060,  2078,  1012,  1037, 12393,   102])"
1908,1,"['dataset', 'random sample', 'sample', 'random', 'bootstrap']", The empirical bootstrap,seg_245,of the bootstrap random sample is called a bootstrap dataset and is denoted by,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1997,  1996,  6879,  6494,  2361,  6721,  7099,  2003,  2170,
         1037,  6879,  6494,  2361,  2951, 13462,  1998,  2003, 19537,  2011,
          102])"
1909,1,"['mean', 'dataset', 'simulation', 'sample', 'sample mean']", The empirical bootstrap,seg_245,"to distinguish it from the original dataset x1, x2, . . . , xn. for the centered sample mean the simulation procedure is as follows.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2000, 10782,  2009,  2013,  1996,  2434,  2951, 13462,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1012,  2005,  1996,  8857,  7099,  2812,  1996, 12504,  7709,
         2003,  2004,  4076,  1012,   102])"
1910,1,"['dataset', 'function', 'simulation', 'estimate', 'bootstrap', 'expectation', 'distribution', 'distribution function', 'empirical distribution function']", The empirical bootstrap,seg_245,"empirical bootstrap simulation (for x̄n−µ). given a dataset x1, x2, . . . , xn, determine its empirical distribution function fn as an estimate of f , and compute the expectation",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101, 17537,  6879,  6494,  2361, 12504,  1006,  2005,  1060,  2078,
        22543, 29659,  1007,  1012,  2445,  1037,  2951, 13462,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1010,  5646,  2049, 17537,  4353,  3853,  1042,  2078,  2004,  2019,
        10197,  1997,  1042,  1010,  1998, 24134,  1996, 17626,   102])"
1911,1,"['mean', 'dataset', 'sample', 'bootstrap', 'sample mean']", The empirical bootstrap,seg_245,"corresponding to fn. 1. generate a bootstrap dataset x∗1, x∗2, . . . , x∗n from fn. 2. compute the centered sample mean for the bootstrap dataset:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  7978,  2000,  1042,  2078,  1012,  1015,  1012,  9699,  1037,
         6879,  6494,  2361,  2951, 13462,  1060, 30125,  2487,  1010,  1060,
        30125,  2475,  1010,  1012,  1012,  1012,  1010,  1060, 30125,  2078,
         2013,  1042,  2078,  1012,  1016,  1012, 24134,  1996,  8857,  7099,
         2812,  2005,  1996,  6879,  6494,  2361,  2951, 13462,  1024,   102])"
1912,0,[], The empirical bootstrap,seg_245,repeat steps 1 and 2 many times.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([ 101, 9377, 4084, 1015, 1998, 1016, 2116, 2335, 1012,  102])"
1913,1,"['probability', 'dataset']", The empirical bootstrap,seg_245,"note that generating a value x∗i from fn is equivalent to choosing one of the elements x1, x2, . . . , xn of the original dataset with equal probability 1/n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  3602,  2008, 11717,  1037,  3643,  1060, 30125,  2072,  2013,
         1042,  2078,  2003,  5662,  2000, 10549,  2028,  1997,  1996,  3787,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1997,  1996,  2434,  2951, 13462,  2007,  5020,  9723,
         1015,  1013,  1050,  1012,   102])"
1914,1,"['mean', 'simulation', 'sample', 'bootstrap', 'sample statistic', 'empirical bootstrap', 'statistic', 'sample mean']", The empirical bootstrap,seg_245,"the empirical bootstrap simulation is described for the centered sample mean, but clearly a similar simulation procedure can be formulated for any (normalized) sample statistic.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1996, 17537,  6879,  6494,  2361, 12504,  2003,  2649,  2005,
         1996,  8857,  7099,  2812,  1010,  2021,  4415,  1037,  2714, 12504,
         7709,  2064,  2022, 19788,  2005,  2151,  1006,  3671,  3550,  1007,
         7099, 28093,  6553,  1012,   102])"
1915,1,"['simulation', 'sample median', 'sample', 'bootstrap', 'empirical bootstrap', 'median']", The empirical bootstrap,seg_245,"quick exercise 18.2 describe the empirical bootstrap simulation for the centered sample median med(x1, x2, . . . , xn) − f inv(0.5).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  4248,  6912,  2324,  1012,  1016,  6235,  1996, 17537,  6879,
         6494,  2361, 12504,  2005,  1996,  8857,  7099,  3991, 19960,  1006,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1007,  1597,  1042,  1999,  2615,  1006,  1014,  1012,
         1019,  1007,  1012,   102])"
1916,1,"['mean', 'kernel density estimate', 'kernel', 'simulation', 'estimate', 'histogram', 'sample', 'bootstrap', 'empirical bootstrap', 'sample means', 'data', 'sample mean']", The empirical bootstrap,seg_245,for the old faithful data we carried out the empirical bootstrap simulation for the centered sample mean with one thousand repetitions. in figure 18.1 a histogram (left) and kernel density estimate (right) are displayed of one thousand centered bootstrap sample means,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2005,  1996,  2214, 11633,  2951,  2057,  3344,  2041,  1996,
        17537,  6879,  6494,  2361, 12504,  2005,  1996,  8857,  7099,  2812,
         2007,  2028,  4595, 23318,  2015,  1012,  1999,  3275,  2324,  1012,
         1015,  1037,  2010,  3406, 13113,  1006,  2187,  1007,  1998, 16293,
         4304, 10197,  1006,  2157,  1007,  2024,  6913,  1997,  2028,  4595,
         8857,  6879,  6494,  2361,  7099,  2965,   102])"
1917,1,"['random variable', 'random', 'variable']", The empirical bootstrap,seg_245,since these are realizations of the random variable x̄n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2144,  2122,  2024, 12393,  2015,  1997,  1996,  6721,  8023,
         1060,  2078,   102])"
1918,1,['distribution'], The empirical bootstrap,seg_245,"∗ − x̄n, we know from section 17.2 that they reflect the distribution of x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([ 101, 1598, 1597, 1060, 2078, 1010, 2057, 2113, 2013, 2930, 2459, 1012,
        1016, 2008, 2027, 8339, 1996, 4353, 1997, 1060, 2078,  102])"
1919,1,"['sample', 'bootstrap', 'distribution', 'sample means']", The empirical bootstrap,seg_245,"∗ − x̄n approximates that of x̄n − µ, the centered bootstrap sample means also reflect the distribution of x̄n−µ. this leads to the following application.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598,  1597,  1060,  2078, 15796,  2015,  2008,  1997,  1060,
         2078,  1597,  1085,  1010,  1996,  8857,  6879,  6494,  2361,  7099,
         2965,  2036,  8339,  1996,  4353,  1997,  1060,  2078, 22543, 29659,
         1012,  2023,  5260,  2000,  1996,  2206,  4646,  1012,   102])"
1920,1,"['empirical bootstrap', 'bootstrap']", The empirical bootstrap,seg_245,an application of the empirical bootstrap,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2019,  4646,  1997,  1996, 17537,  6879,  6494,  2361,   102])"
1921,1,"['estimate', 'realization', 'random sample', 'sample', 'random', 'expectation', 'measurements', 'average', 'data']", The empirical bootstrap,seg_245,"let us return to our example about the old faithful data, which are modeled as a realization of a random sample from some f . suppose we estimate the expectation µ corresponding to f by x̄n = 209.3. can we say how far away 209.3 is from the “true” expectation µ? to be honest, the answer is no. . . (oops). in a situation like this, the measurements and their corresponding average are subject to randomness, so that we cannot say anything with absolute certainty about how far away the average will be from µ. one of the things we can say is how likely it is that the average is within a given distance from µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2292,  2149,  2709,  2000,  2256,  2742,  2055,  1996,  2214,
        11633,  2951,  1010,  2029,  2024, 14440,  2004,  1037, 12393,  1997,
         1037,  6721,  7099,  2013,  2070,  1042,  1012,  6814,  2057, 10197,
         1996, 17626,  1085,  7978,  2000,  1042,  2011,  1060,  2078,  1027,
        19348,  1012,  1017,  1012,  2064,  2057,  2360,  2129,  2521,  2185,
        19348,  1012,  1017,  2003,  2013,  1996,  1523,  2995,  1524, 17626,
         1085,  1029,  2000,  2022,  7481,  1010,  1996,  3437,  2003,  2053,
         1012,  1012,  1012,  1006,  1051, 11923,  1007,  1012,  1999,  1037,
         3663,  2066,  2023,  1010,  1996, 11702,  1998,  2037,  7978,  2779,
         2024,  3395,  2000,  6721,  2791,  1010,  2061,  2008,  2057,  3685,
         2360,  2505,  2007,  7619, 15855,  2055,  2129,  2521,  2185,  1996,
         2779,  2097,  2022,  2013,  1085,  1012,  2028,  1997,  1996,  2477,
         2057,  2064,  2360,  2003,  2129,  3497,  2009,  2003,  2008,  1996,
         2779,  2003,  2306,  1037,  2445,  3292,  2013,  1085,  1012,   102])"
1922,1,"['mean', 'dataset', 'probability', 'sample', 'average', 'sample mean']", The empirical bootstrap,seg_245,"to get an impression of how close the average of a dataset of n = 272 observed durations of the old faithful geyser is to µ, we want to compute the probability that the sample mean deviates more than 5 from µ:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2000,  2131,  2019,  8605,  1997,  2129,  2485,  1996,  2779,
         1997,  1037,  2951, 13462,  1997,  1050,  1027, 24231,  5159,  9367,
         2015,  1997,  1996,  2214, 11633, 16216, 23274,  2099,  2003,  2000,
         1085,  1010,  2057,  2215,  2000, 24134,  1996,  9723,  2008,  1996,
         7099,  2812, 14386,  8520,  2062,  2084,  1019,  2013,  1085,  1024,
          102])"
1923,1,"['probability', 'random variable', 'random', 'distribution', 'variable']", The empirical bootstrap,seg_245,"direct computation of this probability is impossible, because we do not know the distribution of the random variable x̄n−µ. however, since the distribution of x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  3622, 22334,  1997,  2023,  9723,  2003,  5263,  1010,  2138,
         2057,  2079,  2025,  2113,  1996,  4353,  1997,  1996,  6721,  8023,
         1060,  2078, 22543, 29659,  1012,  2174,  1010,  2144,  1996,  4353,
         1997,  1060,  2078,   102])"
1924,1,"['probability', 'distribution']", The empirical bootstrap,seg_245,"∗ − x̄n approximates the distribution of x̄n − µ, we can approximate the probability as follows",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598,  1597,  1060,  2078, 15796,  2015,  1996,  4353,  1997,
         1060,  2078,  1597,  1085,  1010,  2057,  2064, 15796,  1996,  9723,
         2004,  4076,   102])"
1925,1,"['probability', 'data']", The empirical bootstrap,seg_245,"where we have also used that for the old faithful data, x̄n = 209.3. as we mentioned before, in principle it is possible to compute the last probability exactly. since this is too cumbersome, we approximate p(|x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2073,  2057,  2031,  2036,  2109,  2008,  2005,  1996,  2214,
        11633,  2951,  1010,  1060,  2078,  1027, 19348,  1012,  1017,  1012,
         2004,  2057,  3855,  2077,  1010,  1999,  6958,  2009,  2003,  2825,
         2000, 24134,  1996,  2197,  9723,  3599,  1012,  2144,  2023,  2003,
         2205, 13988, 17198,  8462,  1010,  2057, 15796,  1052,  1006,  1064,
         1060,  2078,   102])"
1926,1,"['simulation', 'sample', 'bootstrap', 'empirical bootstrap', 'sample means']", The empirical bootstrap,seg_245,by means of the one thousand centered bootstrap sample means obtained from the empirical bootstrap simulation:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2011,  2965,  1997,  1996,  2028,  4595,  8857,  6879,  6494,
         2361,  7099,  2965,  4663,  2013,  1996, 17537,  6879,  6494,  2361,
        12504,  1024,   102])"
1927,1,"['estimate', 'table']", The empirical bootstrap,seg_245,"in view of table 17.2, a natural estimate for p(|x̄n",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1999,  3193,  1997,  2795,  2459,  1012,  1016,  1010,  1037,
         3019, 10197,  2005,  1052,  1006,  1064,  1060,  2078,   102])"
1928,1,"['absolute value', 'frequency', 'relative frequency', 'sample', 'bootstrap', 'sample means']", The empirical bootstrap,seg_245,∗ − 209.3| > 5) is the relative frequency of centered bootstrap sample means that are greater than 5 in absolute value:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  1598,  1597, 19348,  1012,  1017,  1064,  1028,  1019,  1007,
         2003,  1996,  5816,  6075,  1997,  8857,  6879,  6494,  2361,  7099,
         2965,  2008,  2024,  3618,  2084,  1019,  1999,  7619,  3643,  1024,
          102])"
1929,1,"['approximation', 'sample', 'bootstrap', 'sample means']", The empirical bootstrap,seg_245,"for the centered bootstrap sample means of figure 18.1, this relative frequency is 0.227. hence, we obtain the following bootstrap approximation",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2005,  1996,  8857,  6879,  6494,  2361,  7099,  2965,  1997,
         3275,  2324,  1012,  1015,  1010,  2023,  5816,  6075,  2003,  1014,
         1012, 21489,  1012,  6516,  1010,  2057,  6855,  1996,  2206,  6879,
         6494,  2361, 20167,   102])"
1930,1,"['bootstrap procedure', 'bootstrap', 'approximation']", The empirical bootstrap,seg_245,it should be emphasized that the second approximation can be made arbitrarily accurate by increasing the number of repetitions in the bootstrap procedure.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 1996, 17537,  6879,  6494,  2361])","tensor([  101,  2009,  2323,  2022, 13155,  2008,  1996,  2117, 20167,  2064,
         2022,  2081, 12098, 16313, 19848,  6588,  8321,  2011,  4852,  1996,
         2193,  1997, 23318,  2015,  1999,  1996,  6879,  6494,  2361,  7709,
         1012,   102])"
1931,1,"['parameter', 'dataset', 'function', 'estimate', 'realization', 'random sample', 'sample', 'random', 'distribution', 'distribution function', 'parameters', 'case']", The parametric bootstrap,seg_247,"suppose we consider our dataset as a realization of a random sample from a distribution of a specific parametric type. in that case the distribution function is completely determined by a parameter or vector of parameters θ: f = fθ. then we do not have to estimate the whole distribution function f , but it suffices to estimate the parameter(vector) θ by θ̂ and estimate f by",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  6814,  2057,  5136,  2256,  2951, 13462,  2004,  1037, 12393,
         1997,  1037,  6721,  7099,  2013,  1037,  4353,  1997,  1037,  3563,
        11498, 12589,  2828,  1012,  1999,  2008,  2553,  1996,  4353,  3853,
         2003,  3294,  4340,  2011,  1037, 16381,  2030,  9207,  1997, 11709,
         1162,  1024,  1042,  1027,  1042, 29725,  1012,  2059,  2057,  2079,
         2025,  2031,  2000, 10197,  1996,  2878,  4353,  3853,  1042,  1010,
         2021,  2009, 10514, 26989,  9623,  2000, 10197,  1996, 16381,  1006,
         9207,  1007,  1162,  2011,  1162,  1998, 10197,  1042,  2011,   102])"
1932,1,"['parametric bootstrap', 'bootstrap']", The parametric bootstrap,seg_247,the corresponding bootstrap principle is called the parametric bootstrap.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  1996,  7978,  6879,  6494,  2361,  6958,  2003,  2170,  1996,
        11498, 12589,  6879,  6494,  2361,  1012,   102])"
1933,1,"['mean', 'function', 'parametric bootstrap', 'random sample', 'sample', 'random', 'bootstrap', 'expectation', 'distribution', 'distribution function', 'sample mean']", The parametric bootstrap,seg_247,"let us investigate what this would mean for the centered sample mean. first we should realize that the expectation of fθ is also determined by θ: µ = µθ. the parametric bootstrap for the centered sample mean now amounts to the following. the random sample x1, x2, . . . , xn from the “true” distribution function fθ is replaced by a bootstrap random sample x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2292,  2149,  8556,  2054,  2023,  2052,  2812,  2005,  1996,
         8857,  7099,  2812,  1012,  2034,  2057,  2323,  5382,  2008,  1996,
        17626,  1997,  1042, 29725,  2003,  2036,  4340,  2011,  1162,  1024,
         1085,  1027,  1085, 29725,  1012,  1996, 11498, 12589,  6879,  6494,
         2361,  2005,  1996,  8857,  7099,  2812,  2085,  8310,  2000,  1996,
         2206,  1012,  1996,  6721,  7099,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,  1996,  1523,
         2995,  1524,  4353,  3853,  1042, 29725,  2003,  2999,  2011,  1037,
         6879,  6494,  2361,  6721,  7099,  1060,  2487, 30125,  1010,  1060,
         2475, 30125,  1010,  1012,  1012,  1012,  1010,  1060,  2078,   102])"
1934,1,"['probability', 'probability distribution', 'distribution']", The parametric bootstrap,seg_247,"fθ̂, and the probability distribution of x̄n − µθ is approximated by that of x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  1042, 29725,  1010,  1998,  1996,  9723,  4353,  1997,  1060,
         2078,  1597,  1085, 29725,  2003, 15796,  2094,  2011,  2008,  1997,
         1060,  2078,   102])"
1935,1,['expectation'], The parametric bootstrap,seg_247,denotes the expectation corresponding to fθ̂.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101, 14796,  1996, 17626,  7978,  2000,  1042, 29725,  1012,   102])"
1936,1,"['empirical bootstrap', 'parametric bootstrap', 'bootstrap', 'approximation']", The parametric bootstrap,seg_247,"often the parametric bootstrap approximation is better than the empirical bootstrap approximation, as illustrated in the next quick exercise.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2411,  1996, 11498, 12589,  6879,  6494,  2361, 20167,  2003,
         2488,  2084,  1996, 17537,  6879,  6494,  2361, 20167,  1010,  2004,
         7203,  1999,  1996,  2279,  4248,  6912,  1012,   102])"
1937,1,"['dataset', 'estimate', 'realization', 'random sample', 'sample', 'random', 'bootstrap', 'distribution']", The parametric bootstrap,seg_247,"quick exercise 18.3 suppose the dataset x1, x2, . . . , xn is a realization of a random sample x1, x2, . . . , xn from an n(µ, 1) distribution. estimate µ by x̄n and consider a bootstrap random sample x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  4248,  6912,  2324,  1012,  1017,  6814,  1996,  2951, 13462,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2003,  1037, 12393,  1997,  1037,  6721,  7099,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2013,  2019,  1050,  1006,  1085,  1010,  1015,  1007,  4353,
         1012, 10197,  1085,  2011,  1060,  2078,  1998,  5136,  1037,  6879,
         6494,  2361,  6721,  7099,  1060,  2487, 30125,  1010,  1060,  2475,
        30125,  1010,  1012,  1012,  1012,  1010,  1060,  2078,   102])"
1938,1,"['probability distributions', 'probability', 'distributions', 'distribution']", The parametric bootstrap,seg_247,distribution. check that the probability distributions of x̄n − µ and x̄n,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  4353,  1012,  4638,  2008,  1996,  9723, 20611,  1997,  1060,
         2078,  1597,  1085,  1998,  1060,  2078,   102])"
1939,1,['distribution'], The parametric bootstrap,seg_247,"are the same: an n(0, 1/n) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([ 101, 2024, 1996, 2168, 1024, 2019, 1050, 1006, 1014, 1010, 1015, 1013,
        1050, 1007, 4353, 1012,  102])"
1940,1,['distribution'], The parametric bootstrap,seg_247,"once more, in principle it is possible to determine the distribution of x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([ 101, 2320, 2062, 1010, 1999, 6958, 2009, 2003, 2825, 2000, 5646, 1996,
        4353, 1997, 1060, 2078,  102])"
1941,1,"['cases', 'mean', 'contrast', 'simulation', 'sample', 'sample mean']", The parametric bootstrap,seg_247,"exactly. however, in contrast with the situation considered in the previous quick exercise, in some cases this is still cumbersome. again a simulation procedure may help us out. for the centered sample mean the procedure is as follows.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  3599,  1012,  2174,  1010,  1999,  5688,  2007,  1996,  3663,
         2641,  1999,  1996,  3025,  4248,  6912,  1010,  1999,  2070,  3572,
         2023,  2003,  2145, 13988, 17198,  8462,  1012,  2153,  1037, 12504,
         7709,  2089,  2393,  2149,  2041,  1012,  2005,  1996,  8857,  7099,
         2812,  1996,  7709,  2003,  2004,  4076,  1012,   102])"
1942,1,"['simulation', 'bootstrap']", The parametric bootstrap,seg_247,parametric bootstrap simulation (for x̄n − µ). given a,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101, 11498, 12589,  6879,  6494,  2361, 12504,  1006,  2005,  1060,
         2078,  1597,  1085,  1007,  1012,  2445,  1037,   102])"
1943,1,"['mean', 'dataset', 'estimate', 'sample', 'bootstrap', 'expectation', 'sample mean']", The parametric bootstrap,seg_247,"dataset x1, x2, . . . , xn, compute an estimate θ̂ for θ. determine fθ̂ as an estimate for fθ, and compute the expectation µ∗ = µθ̂ corresponding to fθ̂. 1. generate a bootstrap dataset x∗1, x∗2, . . . , x∗n from fθ̂. 2. compute the centered sample mean for the bootstrap dataset:",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0.,
        0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1010, 24134,  2019, 10197,  1162,
         2005,  1162,  1012,  5646,  1042, 29725,  2004,  2019, 10197,  2005,
         1042, 29725,  1010,  1998, 24134,  1996, 17626,  1085, 30125,  1027,
         1085, 29725,  7978,  2000,  1042, 29725,  1012,  1015,  1012,  9699,
         1037,  6879,  6494,  2361,  2951, 13462,  1060, 30125,  2487,  1010,
         1060, 30125,  2475,  1010,  1012,  1012,  1012,  1010,  1060, 30125,
         2078,  2013,  1042, 29725,  1012,  1016,  1012, 24134,  1996,  8857,
         7099,  2812,  2005,  1996,  6879,  6494,  2361,  2951, 13462,  1024,
          102])"
1944,0,[], The parametric bootstrap,seg_247,repeat steps 1 and 2 many times.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([ 101, 9377, 4084, 1015, 1998, 1016, 2116, 2335, 1012,  102])"
1945,1,"['simulation', 'parametric bootstrap', 'exponential distribution', 'bootstrap', 'exponential', 'distribution', 'model', 'data']", The parametric bootstrap,seg_247,as an application we will use the parametric bootstrap simulation to investigate whether the exponential distribution is a reasonable model for the software data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2004,  2019,  4646,  2057,  2097,  2224,  1996, 11498, 12589,
         6879,  6494,  2361, 12504,  2000,  8556,  3251,  1996, 27258,  4353,
         2003,  1037,  9608,  2944,  2005,  1996,  4007,  2951,  1012,   102])"
1946,1,"['exponential', 'data']", The parametric bootstrap,seg_247,are the software data exponential?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2024,  1996,  4007,  2951, 27258,  1029,   102])"
1947,1,"['dataset', 'function', 'estimated', 'exponential distribution', 'exponential', 'distribution', 'model', 'distribution function', 'data', 'empirical distribution function']", The parametric bootstrap,seg_247,"consider fitting an exponential distribution to the software data, as discussed in section 17.3. at first sight, figure 17.6 shows a reasonable fit with the exponential distribution. one way to quantify the difference between the dataset and the exponential model is to compute the maximum distance between the empirical distribution function fn of the dataset and the exponential distribution function fλ̂ estimated from the dataset:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  5136, 11414,  2019, 27258,  4353,  2000,  1996,  4007,  2951,
         1010,  2004,  6936,  1999,  2930,  2459,  1012,  1017,  1012,  2012,
         2034,  4356,  1010,  3275,  2459,  1012,  1020,  3065,  1037,  9608,
         4906,  2007,  1996, 27258,  4353,  1012,  2028,  2126,  2000, 24110,
        27351,  1996,  4489,  2090,  1996,  2951, 13462,  1998,  1996, 27258,
         2944,  2003,  2000, 24134,  1996,  4555,  3292,  2090,  1996, 17537,
         4353,  3853,  1042,  2078,  1997,  1996,  2951, 13462,  1998,  1996,
        27258,  4353,  3853,  1042, 29727,  4358,  2013,  1996,  2951, 13462,
         1024,   102])"
1948,1,"['dataset', 'estimated']", The parametric bootstrap,seg_247,where λ̂ = 1/x̄n is estimated from the dataset. the quantity tks is called the kolmogorov-smirnov distance between fn and fλ̂.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2073,  1165,  1027,  1015,  1013,  1060,  2078,  2003,  4358,
         2013,  1996,  2951, 13462,  1012,  1996, 11712,  1056,  5705,  2003,
         2170,  1996, 12849, 13728, 22844, 12298,  1011, 15488,  4313, 16693,
         3292,  2090,  1042,  2078,  1998,  1042, 29727,  1012,   102])"
1949,1,"['dataset', 'function', 'functions', 'estimated', 'exponential', 'distribution', 'model', 'distribution function', 'empirical distribution function']", The parametric bootstrap,seg_247,"the idea behind the use of this distance is the following. if f denotes the “true” distribution function, then according to section 17.2 the empirical distribution function fn will resemble f whether f equals the distribution function fλ of some exp(λ) distribution or not. on the other hand, if the “true” distribution function is fλ, then the estimated exponential distribution function fλ̂ will resemble fλ, because λ̂ = 1/x̄n is close to the “true” λ. therefore, if f = fλ, then both fn and fλ̂ will be close to the same distribution function, so that tks is small; if f is different from fλ, then fn and fλ̂ are close to two different distribution functions, so that tks is large. the value tks is always between 0 and 1, and the further away this value is from 0, the more it is an indication that the exponential model is inappropriate. for the software dataset we find λ̂ = 1/x̄n = 0.0015 and tks = 0.176. does this speak against the believed exponential model?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  1996,  2801,  2369,  1996,  2224,  1997,  2023,  3292,  2003,
         1996,  2206,  1012,  2065,  1042, 14796,  1996,  1523,  2995,  1524,
         4353,  3853,  1010,  2059,  2429,  2000,  2930,  2459,  1012,  1016,
         1996, 17537,  4353,  3853,  1042,  2078,  2097, 13014,  1042,  3251,
         1042, 19635,  1996,  4353,  3853,  1042, 29727,  1997,  2070,  4654,
         2361,  1006,  1165,  1007,  4353,  2030,  2025,  1012,  2006,  1996,
         2060,  2192,  1010,  2065,  1996,  1523,  2995,  1524,  4353,  3853,
         2003,  1042, 29727,  1010,  2059,  1996,  4358, 27258,  4353,  3853,
         1042, 29727,  2097, 13014,  1042, 29727,  1010,  2138,  1165,  1027,
         1015,  1013,  1060,  2078,  2003,  2485,  2000,  1996,  1523,  2995,
         1524,  1165,  1012,  3568,  1010,  2065,  1042,  1027,  1042, 29727,
         1010,  2059,  2119,  1042,  2078,  1998,  1042, 29727,  2097,  2022,
         2485,  2000,  1996,  2168,  4353,  3853,  1010,  2061,  2008,  1056,
         5705,  2003,  2235,  1025,  2065,  1042,  2003,  2367,  2013,  1042,
        29727,  1010,  2059,  1042,  2078,  1998,  1042, 29727,  2024,  2485,
         2000,  2048,  2367,  4353,  4972,  1010,  2061,  2008,  1056,  5705,
         2003,  2312,  1012,  1996,  3643,  1056,  5705,  2003,  2467,  2090,
         1014,  1998,  1015,  1010,  1998,  1996,  2582,  2185,  2023,  3643,
         2003,  2013,  1014,  1010,  1996,  2062,  2009,  2003,  2019, 12407,
         2008,  1996, 27258,  2944,  2003, 15884,  1012,  2005,  1996,  4007,
         2951, 13462,  2057,  2424,  1165,  1027,  1015,  1013,  1060,  2078,
         1027,  1014,  1012, 25604,  2629,  1998,  1056,  5705,  1027,  1014,
         1012, 18561,  1012,  2515,  2023,  3713,  2114,  1996,  3373, 27258,
         2944,  1029,   102])"
1950,1,"['dataset', 'estimate', 'random variable', 'data', 'statistic', 'case', 'empirical distribution function', 'function', 'realization', 'random sample', 'sample', 'random', 'sample statistic', 'distribution', 'exponential', 'distribution function', 'variable']", The parametric bootstrap,seg_247,"one way to investigate this is to find out whether, in the case when the data are truly a realization of an exponential random sample from fλ, the value 0.176 is unusually large. to answer this question we consider the sample statistic that corresponds to tks. the estimate λ̂ = 1/x̄n is replaced by the random variable λ̂ = 1/x̄n, and the empirical distribution function of the dataset is replaced by the empirical distribution function of the random sample x1, x2, . . . , xn (again denoted by fn):",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2028,  2126,  2000,  8556,  2023,  2003,  2000,  2424,  2041,
         3251,  1010,  1999,  1996,  2553,  2043,  1996,  2951,  2024,  5621,
         1037, 12393,  1997,  2019, 27258,  6721,  7099,  2013,  1042, 29727,
         1010,  1996,  3643,  1014,  1012, 18561,  2003, 12890,  2312,  1012,
         2000,  3437,  2023,  3160,  2057,  5136,  1996,  7099, 28093,  6553,
         2008, 14788,  2000,  1056,  5705,  1012,  1996, 10197,  1165,  1027,
         1015,  1013,  1060,  2078,  2003,  2999,  2011,  1996,  6721,  8023,
         1165,  1027,  1015,  1013,  1060,  2078,  1010,  1998,  1996, 17537,
         4353,  3853,  1997,  1996,  2951, 13462,  2003,  2999,  2011,  1996,
        17537,  4353,  3853,  1997,  1996,  6721,  7099,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1006,
         2153, 19537,  2011,  1042,  2078,  1007,  1024,   102])"
1951,1,"['realization', 'sample', 'sample statistic', 'statistic']", The parametric bootstrap,seg_247,"in this way, tks is a realization of the sample statistic",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  1999,  2023,  2126,  1010,  1056,  5705,  2003,  1037, 12393,
         1997,  1996,  7099, 28093,  6553,   102])"
1952,1,"['parameter', 'dataset', 'probability', 'parametric bootstrap', 'estimate', 'random sample', 'sample', 'random', 'bootstrap', 'distribution', 'probability distribution']", The parametric bootstrap,seg_247,"to find out whether 0.176 is an exceptionally large value for the random variable tks, we must determine the probability distribution of tks. however, this is impossible because the parameter λ of the exp(λ) distribution is unknown. we will approximate the distribution of tks by a parametric bootstrap. we use the dataset to estimate λ by λ̂ = 1/x̄n = 0.0015 and replace the random sample x1, x2, . . . , xn from fλ by a bootstrap random sample x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2000,  2424,  2041,  3251,  1014,  1012, 18561,  2003,  2019,
        17077,  2312,  3643,  2005,  1996,  6721,  8023,  1056,  5705,  1010,
         2057,  2442,  5646,  1996,  9723,  4353,  1997,  1056,  5705,  1012,
         2174,  1010,  2023,  2003,  5263,  2138,  1996, 16381,  1165,  1997,
         1996,  4654,  2361,  1006,  1165,  1007,  4353,  2003,  4242,  1012,
         2057,  2097, 15796,  1996,  4353,  1997,  1056,  5705,  2011,  1037,
        11498, 12589,  6879,  6494,  2361,  1012,  2057,  2224,  1996,  2951,
        13462,  2000, 10197,  1165,  2011,  1165,  1027,  1015,  1013,  1060,
         2078,  1027,  1014,  1012, 25604,  2629,  1998,  5672,  1996,  6721,
         7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  2013,  1042, 29727,  2011,  1037,  6879,  6494,
         2361,  6721,  7099,  1060,  2487, 30125,  1010,  1060,  2475, 30125,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,   102])"
1953,1,['distribution'], The parametric bootstrap,seg_247,from fλ̂. next we approximate the distribution of tks by that of its bootstrapped version,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2013,  1042, 29727,  1012,  2279,  2057, 15796,  1996,  4353,
         1997,  1056,  5705,  2011,  2008,  1997,  2049,  6879,  6494, 11469,
         2544,   102])"
1954,1,"['function', 'random', 'bootstrap', 'distribution', 'distribution function', 'empirical distribution function']", The parametric bootstrap,seg_247,where fn∗ is the empirical distribution function of the bootstrap random sam-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.,
        0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2073,  1042,  2078, 30125,  2003,  1996, 17537,  4353,  3853,
         1997,  1996,  6879,  6494,  2361,  6721,  3520,  1011,   102])"
1955,0,[], The parametric bootstrap,seg_247,ple: number of x∗ less than or equal to a,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101, 20228,  2063,  1024,  2193,  1997,  1060, 30125,  2625,  2084,
         2030,  5020,  2000,  1037,   102])"
1956,1,"['random sample', 'sample', 'random', 'bootstrap', 'average']", The parametric bootstrap,seg_247,"∗, with x̄n ∗ being the average of the bootstrap random sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0.,
        0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([ 101, 1598, 1010, 2007, 1060, 2078, 1598, 2108, 1996, 2779, 1997, 1996,
        6879, 6494, 2361, 6721, 7099, 1012,  102])"
1957,1,"['bootstrapped', 'probability', 'parametric bootstrap', 'sample', 'bootstrap', 'sample statistic', 'distribution', 'statistic', 'probability distribution']", The parametric bootstrap,seg_247,"the bootstrapped sample statistic tk∗s is too complicated to determine its probability distribution, and hence we perform a parametric bootstrap simulation:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  1996,  6879,  6494, 11469,  7099, 28093,  6553,  1056,  2243,
        30125,  2015,  2003,  2205,  8552,  2000,  5646,  2049,  9723,  4353,
         1010,  1998,  6516,  2057,  4685,  1037, 11498, 12589,  6879,  6494,
         2361, 12504,  1024,   102])"
1958,1,"['exponential', 'dataset', 'bootstrap']", The parametric bootstrap,seg_247,"1. we generate a bootstrap dataset x∗1, x∗2, . . . , x∗135 from an exponential dis-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  1015,  1012,  2057,  9699,  1037,  6879,  6494,  2361,  2951,
        13462,  1060, 30125,  2487,  1010,  1060, 30125,  2475,  1010,  1012,
         1012,  1012,  1010,  1060, 30125, 17134,  2629,  2013,  2019, 27258,
         4487,  2015,  1011,   102])"
1959,1,['parameter'], The parametric bootstrap,seg_247,tribution with parameter λ̂ = 0.0015.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101, 13012, 29446,  2007, 16381,  1165,  1027,  1014,  1012, 25604,
         2629,  1012,   102])"
1960,1,['bootstrapped'], The parametric bootstrap,seg_247,2. we compute the bootstrapped ks distance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  1016,  1012,  2057, 24134,  1996,  6879,  6494, 11469, 29535,
         3292,   102])"
1961,1,"['dataset', 'function', 'estimated', 'exponential distribution', 'bootstrap', 'distribution', 'exponential', 'distribution function', 'empirical distribution function']", The parametric bootstrap,seg_247,"where fn∗ denotes the empirical distribution function of the bootstrap dataset and fλ̂∗ denotes the estimated exponential distribution function,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2073,  1042,  2078, 30125, 14796,  1996, 17537,  4353,  3853,
         1997,  1996,  6879,  6494,  2361,  2951, 13462,  1998,  1042, 29727,
        30125, 14796,  1996,  4358, 27258,  4353,  3853,  1010,   102])"
1962,1,"['dataset', 'bootstrap']", The parametric bootstrap,seg_247,where λ̂∗ = 1/x̄n∗ is computed from the bootstrap dataset.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2073,  1165, 30125,  1027,  1015,  1013,  1060,  2078, 30125,
         2003, 24806,  2013,  1996,  6879,  6494,  2361,  2951, 13462,  1012,
          102])"
1963,1,"['exponential distribution', 'estimate', 'histogram', 'failures', 'poisson', 'poisson process', 'model', 'data', 'rate', 'kernel', 'bootstrapped', 'results', 'process', 'kernel density estimate', 'distribution', 'exponential']", The parametric bootstrap,seg_247,"we repeat steps 1 and 2 one thousand times, which results in one thousand values of the bootstrapped ks distance. in figure 18.2 we have displayed a histogram and kernel density estimate of the one thousand bootstrapped ks distances. it is clear that if the software data would come from an exponential distribution, the value 0.176 of the ks distance would be very unlikely! this strongly suggests that the exponential distribution is not the right model for the software data. the reason for this is that the poisson process is the wrong model for the series of failures. a closer inspection shows that the rate at which failures occur over time is not constant, as was assumed in chapter 17, but decreases.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 11498, 12589,  6879,  6494,  2361])","tensor([  101,  2057,  9377,  4084,  1015,  1998,  1016,  2028,  4595,  2335,
         1010,  2029,  3463,  1999,  2028,  4595,  5300,  1997,  1996,  6879,
         6494, 11469, 29535,  3292,  1012,  1999,  3275,  2324,  1012,  1016,
         2057,  2031,  6913,  1037,  2010,  3406, 13113,  1998, 16293,  4304,
        10197,  1997,  1996,  2028,  4595,  6879,  6494, 11469, 29535, 12103,
         1012,  2009,  2003,  3154,  2008,  2065,  1996,  4007,  2951,  2052,
         2272,  2013,  2019, 27258,  4353,  1010,  1996,  3643,  1014,  1012,
        18561,  1997,  1996, 29535,  3292,  2052,  2022,  2200,  9832,   999,
         2023,  6118,  6083,  2008,  1996, 27258,  4353,  2003,  2025,  1996,
         2157,  2944,  2005,  1996,  4007,  2951,  1012,  1996,  3114,  2005,
         2023,  2003,  2008,  1996, 13433, 24077,  2832,  2003,  1996,  3308,
         2944,  2005,  1996,  2186,  1997, 15428,  1012,  1037,  3553, 10569,
         3065,  2008,  1996,  3446,  2012,  2029, 15428,  5258,  2058,  2051,
         2003,  2025,  5377,  1010,  2004,  2001,  5071,  1999,  3127,  2459,
         1010,  2021, 17913,  1012,   102])"
1964,1,"['dataset', 'estimate', 'random sample', 'sample', 'random']", Solutions to the quick exercises,seg_249,"18.1 you could have written something like the following: “use the dataset x1, x2, . . . , xn to compute an estimate f̂ for f . replace the random sample x1, x2, . . . , xn from f by a random sample x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2324,  1012,  1015,  2017,  2071,  2031,  2517,  2242,  2066,
         1996,  2206,  1024,  1523,  2224,  1996,  2951, 13462,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2000, 24134,  2019, 10197,  1042,  2005,  1042,  1012,  5672,  1996,
         6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2013,  1042,  2011,  1037,  6721,  7099,
         1060,  2487, 30125,  1010,  1060,  2475, 30125,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,   102])"
1965,1,"['probability', 'probability distribution', 'distribution']", Solutions to the quick exercises,seg_249,approximate the probability distribution of,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101, 15796,  1996,  9723,  4353,  1997,   102])"
1966,1,['median'], Solutions to the quick exercises,seg_249,"∗) − f̂ inv(0.5), where f̂ inv(0.5) is the median",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1598, 1007, 1597, 1042, 1999, 2615, 1006, 1014, 1012, 1019, 1007,
        1010, 2073, 1042, 1999, 2615, 1006, 1014, 1012, 1019, 1007, 2003, 1996,
        3991,  102])"
1967,1,"['dataset', 'function', 'estimate', 'distribution', 'distribution function', 'median', 'empirical distribution function']", Solutions to the quick exercises,seg_249,"18.2 you could have written something like the following: “given a dataset x1, x2, . . . , xn, determine its empirical distribution function fn as an estimate of f , and the median f inv(0.5) of fn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2324,  1012,  1016,  2017,  2071,  2031,  2517,  2242,  2066,
         1996,  2206,  1024,  1523,  2445,  1037,  2951, 13462,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1010,  5646,  2049, 17537,  4353,  3853,  1042,  2078,  2004,  2019,
        10197,  1997,  1042,  1010,  1998,  1996,  3991,  1042,  1999,  2615,
         1006,  1014,  1012,  1019,  1007,  1997,  1042,  2078,  1012,   102])"
1968,1,"['dataset', 'bootstrap']", Solutions to the quick exercises,seg_249,"1. generate a bootstrap dataset x∗1, x∗2, . . . , x∗n from fn.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1015,  1012,  9699,  1037,  6879,  6494,  2361,  2951, 13462,
         1060, 30125,  2487,  1010,  1060, 30125,  2475,  1010,  1012,  1012,
         1012,  1010,  1060, 30125,  2078,  2013,  1042,  2078,  1012,   102])"
1969,1,"['dataset', 'sample median', 'sample', 'bootstrap', 'median']", Solutions to the quick exercises,seg_249,2. compute the sample median for the bootstrap dataset:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  1012, 24134,  1996,  7099,  3991,  2005,  1996,  6879,
         6494,  2361,  2951, 13462,  1024,   102])"
1970,1,"['sample', 'sample median', 'median']", Solutions to the quick exercises,seg_249,"where med∗n = sample median of x∗1, x∗2, . . . , x∗n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2073, 19960, 30125,  2078,  1027,  7099,  3991,  1997,  1060,
        30125,  2487,  1010,  1060, 30125,  2475,  1010,  1012,  1012,  1012,
         1010,  1060, 30125,  2078,  1012,   102])"
1971,0,[], Solutions to the quick exercises,seg_249,repeat steps 1 and 2 many times.”,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 9377, 4084, 1015, 1998, 1016, 2116, 2335, 1012, 1524,  102])"
1972,1,"['dataset', 'sample median', 'sample', 'median']", Solutions to the quick exercises,seg_249,"note that if n is odd, then f inv(0.5) equals the sample median of the original dataset, but this is not necessarily so for n even.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  3602,  2008,  2065,  1050,  2003,  5976,  1010,  2059,  1042,
         1999,  2615,  1006,  1014,  1012,  1019,  1007, 19635,  1996,  7099,
         3991,  1997,  1996,  2434,  2951, 13462,  1010,  2021,  2023,  2003,
         2025,  9352,  2061,  2005,  1050,  2130,  1012,   102])"
1973,1,"['normal distribution', 'random', 'normal', 'random variables', 'distribution', 'variables', 'average', 'independent']", Solutions to the quick exercises,seg_249,"18.3 according to remark 11.2 about the sum of independent normal random variables, the sum of n independent n(µ, 1) distributed random variables has an n(nµ, n) distribution. hence by the change-of-units rule for the normal distribution (see page 106), it follows that x̄n has an n(µ, 1/n) distribution, and that x̄n − µ has an n(0, 1/n) distribution. similarly, the average x̄n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2324,  1012,  1017,  2429,  2000, 17674,  2340,  1012,  1016,
         2055,  1996,  7680,  1997,  2981,  3671,  6721, 10857,  1010,  1996,
         7680,  1997,  1050,  2981,  1050,  1006,  1085,  1010,  1015,  1007,
         5500,  6721, 10857,  2038,  2019,  1050,  1006,  1050, 29659,  1010,
         1050,  1007,  4353,  1012,  6516,  2011,  1996,  2689,  1011,  1997,
         1011,  3197,  3627,  2005,  1996,  3671,  4353,  1006,  2156,  3931,
        10114,  1007,  1010,  2009,  4076,  2008,  1060,  2078,  2038,  2019,
         1050,  1006,  1085,  1010,  1015,  1013,  1050,  1007,  4353,  1010,
         1998,  2008,  1060,  2078,  1597,  1085,  2038,  2019,  1050,  1006,
         1014,  1010,  1015,  1013,  1050,  1007,  4353,  1012,  6660,  1010,
         1996,  2779,  1060,  2078,   102])"
1974,1,"['random', 'bootstrap', 'random variables', 'distribution', 'variables', 'independent']", Solutions to the quick exercises,seg_249,"n independent n(x̄n, 1) distributed bootstrap random variables has a normal distribution n(x̄n, 1/n) distribution, and therefore x̄n",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1050,  2981,  1050,  1006,  1060,  2078,  1010,  1015,  1007,
         5500,  6879,  6494,  2361,  6721, 10857,  2038,  1037,  3671,  4353,
         1050,  1006,  1060,  2078,  1010,  1015,  1013,  1050,  1007,  4353,
         1010,  1998,  3568,  1060,  2078,   102])"
1975,1,['distribution'], Solutions to the quick exercises,seg_249,"n(0, 1/n) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1050, 1006, 1014, 1010, 1015, 1013, 1050, 1007, 4353, 1012,  102])"
1976,1,"['dataset', 'function', 'bootstrap', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_251,"18.1 we generate a bootstrap dataset x∗1, x∗2, . . . , x∗6 from the empirical distribution function of the dataset",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1015,  2057,  9699,  1037,  6879,  6494,  2361,
         2951, 13462,  1060, 30125,  2487,  1010,  1060, 30125,  2475,  1010,
         1012,  1012,  1012,  1010,  1060, 30125,  2575,  2013,  1996, 17537,
         4353,  3853,  1997,  1996,  2951, 13462,   102])"
1977,1,"['with replacement', 'probability', 'bootstrap', 'replacement']", Exercises,seg_251,"i.e., we draw (with replacement) six values from these numbers with equal probability 1/6. how many different bootstrap datasets are possible? are they all equally likely to occur?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1045,  1012,  1041,  1012,  1010,  2057,  4009,  1006,  2007,
         6110,  1007,  2416,  5300,  2013,  2122,  3616,  2007,  5020,  9723,
         1015,  1013,  1020,  1012,  2129,  2116,  2367,  6879,  6494,  2361,
         2951, 13462,  2015,  2024,  2825,  1029,  2024,  2027,  2035,  8053,
         3497,  2000,  5258,  1029,   102])"
1978,1,"['dataset', 'function', 'bootstrap']", Exercises,seg_251,"18.2 we generate a bootstrap dataset x∗1, x∗2, x∗3, x∗4 from the empirical distribution function of the dataset",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1016,  2057,  9699,  1037,  6879,  6494,  2361,
         2951, 13462,  1060, 30125,  2487,  1010,  1060, 30125,  2475,  1010,
         1060, 30125,  2509,  1010,  1060, 30125,  2549,  2013,  1996, 17537,
         4353,  3853,  1997,  1996,  2951, 13462,   102])"
1979,1,"['mean', 'probability', 'sample', 'bootstrap', 'sample mean']", Exercises,seg_251,a. compute the probability that the bootstrap sample mean is equal to 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  9723,  2008,  1996,  6879,  6494,
         2361,  7099,  2812,  2003,  5020,  2000,  1015,  1012,   102])"
1980,1,"['probability', 'dataset', 'bootstrap']", Exercises,seg_251,b. compute the probability that the maximum of the bootstrap dataset is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  9723,  2008,  1996,  4555,  1997,
         1996,  6879,  6494,  2361,  2951, 13462,  2003,   102])"
1981,1,"['probability', 'bootstrap']", Exercises,seg_251,c. compute the probability that exactly two elements in the bootstrap sam-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 24134,  1996,  9723,  2008,  3599,  2048,  3787,
         1999,  1996,  6879,  6494,  2361,  3520,  1011,   102])"
1982,1,"['dataset', 'function', 'bootstrap', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_251,"18.3 we generate a bootstrap dataset x∗1, x∗2, . . . , x∗10 from the empirical distribution function of the dataset",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1017,  2057,  9699,  1037,  6879,  6494,  2361,
         2951, 13462,  1060, 30125,  2487,  1010,  1060, 30125,  2475,  1010,
         1012,  1012,  1012,  1010,  1060, 30125, 10790,  2013,  1996, 17537,
         4353,  3853,  1997,  1996,  2951, 13462,   102])"
1983,1,"['probability', 'dataset', 'bootstrap']", Exercises,seg_251,a. compute the probability that the bootstrap dataset has exactly three,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  9723,  2008,  1996,  6879,  6494,
         2361,  2951, 13462,  2038,  3599,  2093,   102])"
1984,1,"['probability', 'dataset', 'bootstrap']", Exercises,seg_251,b. compute the probability that the bootstrap dataset has at most two ele-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  9723,  2008,  1996,  6879,  6494,
         2361,  2951, 13462,  2038,  2012,  2087,  2048,  3449,  2063,  1011,
          102])"
1985,1,"['probability', 'dataset', 'bootstrap']", Exercises,seg_251,c. compute the probability that the bootstrap dataset has exactly two ele-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 24134,  1996,  9723,  2008,  1996,  6879,  6494,
         2361,  2951, 13462,  2038,  3599,  2048,  3449,  2063,  1011,   102])"
1986,0,[], Exercises,seg_251,ments less than or equal to 0.38 and all other elements greater than 0.42.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2273, 3215, 2625, 2084, 2030, 5020, 2000, 1014, 1012, 4229, 1998,
        2035, 2060, 3787, 3618, 2084, 1014, 1012, 4413, 1012,  102])"
1987,1,['dataset'], Exercises,seg_251,"18.4 consider the dataset from exercise 18.3, with maximum 0.46.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1018,  5136,  1996,  2951, 13462,  2013,  6912,
         2324,  1012,  1017,  1010,  2007,  4555,  1014,  1012,  4805,  1012,
          102])"
1988,1,"['random sample', 'sample', 'random', 'bootstrap']", Exercises,seg_251,"a. we generate a bootstrap random sample x1∗, x2∗, . . . , x1∗0 from the empir-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2057,  9699,  1037,  6879,  6494,  2361,  6721,
         7099,  1060,  2487, 30125,  1010,  1060,  2475, 30125,  1010,  1012,
         1012,  1012,  1010,  1060,  2487, 30125,  2692,  2013,  1996,  7861,
         8197,  2099,  1011,   102])"
1989,1,"['dataset', 'function', 'distribution', 'distribution function']", Exercises,seg_251,"ical distribution function of the dataset. compute p(m1∗0 < 0.46), where m1∗0 = max{x1∗, x2∗, . . . , x1∗0}.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 24582,  2389,  4353,  3853,  1997,  1996,  2951, 13462,  1012,
        24134,  1052,  1006, 23290, 30125,  2692,  1026,  1014,  1012,  4805,
         1007,  1010,  2073, 23290, 30125,  2692,  1027,  4098,  1063,  1060,
         2487, 30125,  1010,  1060,  2475, 30125,  1010,  1012,  1012,  1012,
         1010,  1060,  2487, 30125,  2692,  1065,  1012,   102])"
1990,1,['dataset'], Exercises,seg_251,"b. the same question as in a, but now for a dataset with distinct elements",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  2168,  3160,  2004,  1999,  1037,  1010,
         2021,  2085,  2005,  1037,  2951, 13462,  2007,  5664,  3787,   102])"
1991,1,"['random sample', 'sample', 'random', 'bootstrap']", Exercises,seg_251,"x1, x2, . . . , xn and maximum mn. compute p(mn∗ < mn), where mn∗ is the maximum of a bootstrap random sample x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1998,  4555, 24098,  1012, 24134,  1052,  1006,
        24098, 30125,  1026, 24098,  1007,  1010,  2073, 24098, 30125,  2003,
         1996,  4555,  1997,  1037,  6879,  6494,  2361,  6721,  7099,  1060,
         2487, 30125,  1010,  1060,  2475, 30125,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,   102])"
1992,1,"['dataset', 'function', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_251,from the empirical distribution function of the dataset.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2013,  1996, 17537,  4353,  3853,  1997,  1996,  2951, 13462,
         1012,   102])"
1993,1,['dataset'], Exercises,seg_251,18.5 suppose we have a dataset,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1019,  6814,  2057,  2031,  1037,  2951, 13462,
          102])"
1994,1,"['bootstrap', 'mean', 'estimate', 'random variable', 'empirical distribution function', 'function', 'bootstrapped', 'variable', 'realization', 'probabilities', 'random sample', 'sample', 'random', 'distribution', 'distribution function', 'sample mean']", Exercises,seg_251,"which is the realization of a random sample from a distribution function f . if we estimate f by the empirical distribution function, then according to the bootstrap principle applied to the centered sample mean x̄3 − µ, we must replace this random variable by its bootstrapped version x̄3∗ − x̄3. determine the possible values for the bootstrap random variable x̄3∗ − x̄3 and the corresponding probabilities.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2029,  2003,  1996, 12393,  1997,  1037,  6721,  7099,  2013,
         1037,  4353,  3853,  1042,  1012,  2065,  2057, 10197,  1042,  2011,
         1996, 17537,  4353,  3853,  1010,  2059,  2429,  2000,  1996,  6879,
         6494,  2361,  6958,  4162,  2000,  1996,  8857,  7099,  2812,  1060,
         2509,  1597,  1085,  1010,  2057,  2442,  5672,  2023,  6721,  8023,
         2011,  2049,  6879,  6494, 11469,  2544,  1060,  2509, 30125,  1597,
         1060,  2509,  1012,  5646,  1996,  2825,  5300,  2005,  1996,  6879,
         6494,  2361,  6721,  8023,  1060,  2509, 30125,  1597,  1060,  2509,
         1998,  1996,  7978,  4013,  3676, 14680,  1012,   102])"
1995,1,"['dataset', 'function', 'realization', 'random sample', 'sample', 'random', 'distribution', 'distribution function']", Exercises,seg_251,"18.6 suppose that the dataset x1, x2, . . . , xn is a realization of a random sample from an exp(λ) distribution with distribution function fλ, and that x̄n = 5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1020,  6814,  2008,  1996,  2951, 13462,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2003,  1037, 12393,  1997,  1037,  6721,  7099,  2013,  2019,
         4654,  2361,  1006,  1165,  1007,  4353,  2007,  4353,  3853,  1042,
        29727,  1010,  1998,  2008,  1060,  2078,  1027,  1019,  1012,   102])"
1996,1,"['median', 'distribution']", Exercises,seg_251,a. check that the median of the exp(λ) distribution is mλ = (ln 2)/λ (see,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4638,  2008,  1996,  3991,  1997,  1996,  4654,
         2361,  1006,  1165,  1007,  4353,  2003,  1049, 29727,  1027,  1006,
         1048,  2078,  1016,  1007,  1013,  1165,  1006,  2156,   102])"
1997,1,"['parametric bootstrap', 'estimate', 'bootstrap']", Exercises,seg_251,b. suppose we estimate λ by 1/x̄n. describe the parametric bootstrap sim-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  2057, 10197,  1165,  2011,  1015,  1013,
         1060,  2078,  1012,  6235,  1996, 11498, 12589,  6879,  6494,  2361,
        21934,  1011,   102])"
1998,1,"['mean', 'dataset', 'bootstrapped', 'simulations', 'random sample', 'sample', 'random', 'bootstrap', 'expectation', 'distribution', 'empirical bootstrap', 'sample mean']", Exercises,seg_251,"18.7 to give an example in which the bootstrapped centered sample mean in the parametric and empirical bootstrap simulations may be different, consider the following situation. suppose that the dataset x1, x2, . . . , xn is a realization of a random sample from a u(0, θ) distribution with expectation",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1021,  2000,  2507,  2019,  2742,  1999,  2029,
         1996,  6879,  6494, 11469,  8857,  7099,  2812,  1999,  1996, 11498,
        12589,  1998, 17537,  6879,  6494,  2361, 24710,  2089,  2022,  2367,
         1010,  5136,  1996,  2206,  3663,  1012,  6814,  2008,  1996,  2951,
        13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  2003,  1037, 12393,  1997,  1037,  6721,  7099,
         2013,  1037,  1057,  1006,  1014,  1010,  1162,  1007,  4353,  2007,
        17626,   102])"
1999,1,['estimate'], Exercises,seg_251,µ = θ/2. we estimate θ by n + 1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1085,  1027,  1162,  1013,  1016,  1012,  2057, 10197,  1162,
         2011,  1050,  1009,  1015,   102])"
2000,1,"['mean', 'parametric bootstrap', 'sample', 'bootstrap', 'sample mean']", Exercises,seg_251,"where mn = max{x1, x2, . . . , xn}. describe the parametric bootstrap simulation for the centered sample mean x̄n − µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2073, 24098,  1027,  4098,  1063,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1065,  1012,
         6235,  1996, 11498, 12589,  6879,  6494,  2361, 12504,  2005,  1996,
         8857,  7099,  2812,  1060,  2078,  1597,  1085,  1012,   102])"
2001,1,"['simulation', 'bootstrap', 'median', 'mean', 'simulations', 'empirical bootstrap', 'data', 'function', 'bootstrapped', 'realization', 'random sample', 'expectation', 'sample', 'random', 'distribution', 'distribution function', 'average', 'sample mean']", Exercises,seg_251,"18.8 here is an example in which the bootstrapped centered sample mean in the parametric and empirical bootstrap simulations are the same. consider the software data with average x̄n = 656.8815 and median mn = 290, modeled as a realization of a random sample x1, x2, . . . , xn from a distribution function f with expectation µ. by means of bootstrap simulation we like to get an impression of the distribution of x̄n − µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1022,  2182,  2003,  2019,  2742,  1999,  2029,
         1996,  6879,  6494, 11469,  8857,  7099,  2812,  1999,  1996, 11498,
        12589,  1998, 17537,  6879,  6494,  2361, 24710,  2024,  1996,  2168,
         1012,  5136,  1996,  4007,  2951,  2007,  2779,  1060,  2078,  1027,
         3515,  2575,  1012,  6070, 16068,  1998,  3991, 24098,  1027, 17222,
         1010, 14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2013,  1037,  4353,  3853,  1042,  2007, 17626,  1085,  1012,
         2011,  2965,  1997,  6879,  6494,  2361, 12504,  2057,  2066,  2000,
         2131,  2019,  8605,  1997,  1996,  4353,  1997,  1060,  2078,  1597,
         1085,  1012,   102])"
2002,1,['distribution'], Exercises,seg_251,a. suppose that we assume nothing about the distribution of the interfailure,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 6814, 2008, 2057, 7868, 2498, 2055, 1996, 4353, 1997,
        1996, 6970, 7011, 4014, 5397,  102])"
2003,1,"['simulation', 'bootstrap']", Exercises,seg_251,times. describe the appropriate bootstrap simulation procedure with one thousand repetitions.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2335,  1012,  6235,  1996,  6413,  6879,  6494,  2361, 12504,
         7709,  2007,  2028,  4595, 23318,  2015,  1012,   102])"
2004,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,b. suppose we assume that f is the distribution function of an exp(λ) distri-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 6814, 2057, 7868, 2008, 1042, 2003, 1996, 4353, 3853,
        1997, 2019, 4654, 2361, 1006, 1165, 1007, 4487, 3367, 3089, 1011,  102])"
2005,1,"['simulation', 'estimated', 'bootstrap']", Exercises,seg_251,"bution, where λ is estimated by 1/x̄n = 0.0015. describe the appropriate bootstrap simulation procedure with one thousand repetitions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2021,  3258,  1010,  2073,  1165,  2003,  4358,  2011,  1015,
         1013,  1060,  2078,  1027,  1014,  1012, 25604,  2629,  1012,  6235,
         1996,  6413,  6879,  6494,  2361, 12504,  7709,  2007,  2028,  4595,
        23318,  2015,  1012,   102])"
2006,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,c. suppose we assume that f is the distribution function of an exp(λ) dis-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 6814, 2057, 7868, 2008, 1042, 2003, 1996, 4353, 3853,
        1997, 2019, 4654, 2361, 1006, 1165, 1007, 4487, 2015, 1011,  102])"
2007,1,"['parameter', 'simulation', 'estimated', 'bootstrap']", Exercises,seg_251,"tribution, and that (as suggested by exercise 18.6a) the parameter λ is estimated by (ln 2)/mn = 0.0024. describe the appropriate bootstrap simulation procedure with one thousand repetitions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 13012, 29446,  1010,  1998,  2008,  1006,  2004,  4081,  2011,
         6912,  2324,  1012,  1020,  2050,  1007,  1996, 16381,  1165,  2003,
         4358,  2011,  1006,  1048,  2078,  1016,  1007,  1013, 24098,  1027,
         1014,  1012,  4002, 18827,  1012,  6235,  1996,  6413,  6879,  6494,
         2361, 12504,  7709,  2007,  2028,  4595, 23318,  2015,  1012,   102])"
2008,1,"['bootstrap', 'mean', 'dataset', 'estimate', 'histogram', 'standard deviation', 'data', 'deviation', 'probability', 'realization', 'random sample', 'standard', 'sample', 'random', 'sample standard deviation', 'distribution', 'average', 'sample mean']", Exercises,seg_251,"18.9 consider the dataset from exercises 15.1 and 17.6 consisting of measured chest circumferences of scottish soldiers with average x̄n = 39.85 and sample standard deviation sn = 2.09. the histogram in figure 17.11 suggests modeling the data as the realization of a random sample x1, x2, . . . , xn from an n(µ, σ2) distribution. we estimate µ by the sample mean and we are interested in the probability that the sample mean deviates more than 1 from µ: p(|x̄n − µ| > 1). describe how one can use the bootstrap principle to approximate this probability, i.e., describe the distribution of the bootstrap random sample x1∗, x2∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  1023,  5136,  1996,  2951, 13462,  2013, 11110,
         2321,  1012,  1015,  1998,  2459,  1012,  1020,  5398,  1997,  7594,
         3108, 25022, 11890,  2819, 25523,  2015,  1997,  4104,  3548,  2007,
         2779,  1060,  2078,  1027,  4464,  1012,  5594,  1998,  7099,  3115,
        24353,  1055,  2078,  1027,  1016,  1012,  5641,  1012,  1996,  2010,
         3406, 13113,  1999,  3275,  2459,  1012,  2340,  6083, 11643,  1996,
         2951,  2004,  1996, 12393,  1997,  1037,  6721,  7099,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2013,  2019,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  4353,
         1012,  2057, 10197,  1085,  2011,  1996,  7099,  2812,  1998,  2057,
         2024,  4699,  1999,  1996,  9723,  2008,  1996,  7099,  2812, 14386,
         8520,  2062,  2084,  1015,  2013,  1085,  1024,  1052,  1006,  1064,
         1060,  2078,  1597,  1085,  1064,  1028,  1015,  1007,  1012,  6235,
         2129,  2028,  2064,  2224,  1996,  6879,  6494,  2361,  6958,  2000,
        15796,  2023,  9723,  1010,  1045,  1012,  1041,  1012,  1010,  6235,
         1996,  4353,  1997,  1996,  6879,  6494,  2361,  6721,  7099,  1060,
         2487, 30125,  1010,  1060,  2475, 30125,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,   102])"
2009,1,"['probability', 'simulation']", Exercises,seg_251,∗ and compute p(|x̄n ∗ − µ∗| > 1). note that one does not need a simulation to approximate this latter probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1598,  1998, 24134,  1052,  1006,  1064,  1060,  2078,  1598,
         1597,  1085, 30125,  1064,  1028,  1015,  1007,  1012,  3602,  2008,
         2028,  2515,  2025,  2342,  1037, 12504,  2000, 15796,  2023,  3732,
         9723,  1012,   102])"
2010,1,"['mean', 'probability', 'estimate', 'realization', 'random sample', 'sample', 'random', 'expectation', 'distribution', 'average', 'data', 'sample mean']", Exercises,seg_251,"18.10 consider the software data, with average x̄n = 656.8815, modeled as a realization of a random sample x1, x2, . . . , xn from a distribution function f . we estimate the expectation µ of f by the sample mean and we are interested in the probability that the sample mean deviates more than ten from µ: p(|x̄n − µ| > 10).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  2184,  5136,  1996,  4007,  2951,  1010,  2007,
         2779,  1060,  2078,  1027,  3515,  2575,  1012,  6070, 16068,  1010,
        14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2013,  1037,  4353,  3853,  1042,  1012,  2057, 10197,  1996, 17626,
         1085,  1997,  1042,  2011,  1996,  7099,  2812,  1998,  2057,  2024,
         4699,  1999,  1996,  9723,  2008,  1996,  7099,  2812, 14386,  8520,
         2062,  2084,  2702,  2013,  1085,  1024,  1052,  1006,  1064,  1060,
         2078,  1597,  1085,  1064,  1028,  2184,  1007,  1012,   102])"
2011,1,['distribution'], Exercises,seg_251,a. suppose we assume nothing about the distribution of the interfailure,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 6814, 2057, 7868, 2498, 2055, 1996, 4353, 1997, 1996,
        6970, 7011, 4014, 5397,  102])"
2012,1,"['probability', 'simulation', 'approximation', 'results', 'bootstrap']", Exercises,seg_251,"times. describe how one can obtain a bootstrap approximation for the probability, i.e., describe the appropriate bootstrap simulation procedure with one thousand repetitions and how the results of this simulation can be used to approximate the probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2335,  1012,  6235,  2129,  2028,  2064,  6855,  1037,  6879,
         6494,  2361, 20167,  2005,  1996,  9723,  1010,  1045,  1012,  1041,
         1012,  1010,  6235,  1996,  6413,  6879,  6494,  2361, 12504,  7709,
         2007,  2028,  4595, 23318,  2015,  1998,  2129,  1996,  3463,  1997,
         2023, 12504,  2064,  2022,  2109,  2000, 15796,  1996,  9723,  1012,
          102])"
2013,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,b. suppose we assume that f is the distribution function of an exp(λ) dis-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 6814, 2057, 7868, 2008, 1042, 2003, 1996, 4353, 3853,
        1997, 2019, 4654, 2361, 1006, 1165, 1007, 4487, 2015, 1011,  102])"
2014,1,"['probability', 'bootstrap', 'approximation']", Exercises,seg_251,tribution. describe how one can obtain a bootstrap approximation for the probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101, 13012, 29446,  1012,  6235,  2129,  2028,  2064,  6855,  1037,
         6879,  6494,  2361, 20167,  2005,  1996,  9723,  1012,   102])"
2015,1,"['dataset', 'function', 'normal distribution', 'estimated', 'normal', 'distribution', 'distribution function', 'parameters', 'empirical distribution function']", Exercises,seg_251,"18.11 consider the dataset of measured chest circumferences of 5732 scottish soldiers (see exercises 15.1, 17.6, and 18.9). the kolmogorov-smirnov distance between the empirical distribution function and the distribution function fx̄n,sn of the normal distribution with estimated parameters µ̂ = x̄n = 39.85 and σ̂ = sn = 2.09 is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  2340,  5136,  1996,  2951, 13462,  1997,  7594,
         3108, 25022, 11890,  2819, 25523,  2015,  1997,  5401, 16703,  4104,
         3548,  1006,  2156, 11110,  2321,  1012,  1015,  1010,  2459,  1012,
         1020,  1010,  1998,  2324,  1012,  1023,  1007,  1012,  1996, 12849,
        13728, 22844, 12298,  1011, 15488,  4313, 16693,  3292,  2090,  1996,
        17537,  4353,  3853,  1998,  1996,  4353,  3853, 23292,  2078,  1010,
         1055,  2078,  1997,  1996,  3671,  4353,  2007,  4358, 11709,  1085,
         1027,  1060,  2078,  1027,  4464,  1012,  5594,  1998,  1173,  1027,
         1055,  2078,  1027,  1016,  1012,  5641,  2003,  5020,  2000,   102])"
2016,1,"['mean', 'dataset', 'deviation', 'simulation', 'sample', 'bootstrap', 'standard deviation', 'standard', 'sample standard deviation', 'sample mean', 'normality']", Exercises,seg_251,where x̄n and sn denote sample mean and sample standard deviation of the dataset. suppose we want to perform a bootstrap simulation with one thousand repetitions for the ks distance to investigate to which degree the value 0.0987 agrees with the assumed normality of the dataset. describe the appropriate bootstrap simulation that must be carried out.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1060,  2078,  1998,  1055,  2078, 19090,  7099,  2812,
         1998,  7099,  3115, 24353,  1997,  1996,  2951, 13462,  1012,  6814,
         2057,  2215,  2000,  4685,  1037,  6879,  6494,  2361, 12504,  2007,
         2028,  4595, 23318,  2015,  2005,  1996, 29535,  3292,  2000,  8556,
         2000,  2029,  3014,  1996,  3643,  1014,  1012,  5641,  2620,  2581,
        10217,  2007,  1996,  5071,  3671,  3012,  1997,  1996,  2951, 13462,
         1012,  6235,  1996,  6413,  6879,  6494,  2361, 12504,  2008,  2442,
         2022,  3344,  2041,  1012,   102])"
2017,1,"['dataset', 'realization', 'random sample', 'sample', 'random', 'bootstrap', 'distribution', 'empirical bootstrap']", Exercises,seg_251,"18.12 to give an example where the empirical bootstrap fails, consider the following situation. suppose our dataset x1, x2, . . . , xn is a realization of a random sample x1, x2, . . . , xn from a u(0, θ) distribution. consider the nor-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  2260,  2000,  2507,  2019,  2742,  2073,  1996,
        17537,  6879,  6494,  2361, 11896,  1010,  5136,  1996,  2206,  3663,
         1012,  6814,  2256,  2951, 13462,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,  1037, 12393,
         1997,  1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  2013,  1037,  1057,  1006,
         1014,  1010,  1162,  1007,  4353,  1012,  5136,  1996,  4496,  1011,
          102])"
2018,1,"['sample', 'sample statistic', 'statistic']", Exercises,seg_251,malized sample statistic mn,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101, 16007,  5422,  7099, 28093,  6553, 24098,   102])"
2019,1,"['dataset', 'function', 'functions', 'random sample', 'sample', 'random', 'bootstrap', 'distribution', 'distribution function', 'empirical distribution function']", Exercises,seg_251,"strap random sample from the empirical distribution function of our dataset, and let mn∗ be the corresponding bootstrap maximum. we are going to compare the distribution functions of tn and its bootstrap counterpart",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101, 16195,  6721,  7099,  2013,  1996, 17537,  4353,  3853,  1997,
         2256,  2951, 13462,  1010,  1998,  2292, 24098, 30125,  2022,  1996,
         7978,  6879,  6494,  2361,  4555,  1012,  2057,  2024,  2183,  2000,
        12826,  1996,  4353,  4972,  1997, 28286,  1998,  2049,  6879,  6494,
         2361, 13637,   102])"
2020,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,"b. let gn(t) = p(tn ≤ t) be the distribution function of tn, and similarly let",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2292,  1043,  2078,  1006,  1056,  1007,  1027,
         1052,  1006, 28286,  1608,  1056,  1007,  2022,  1996,  4353,  3853,
         1997, 28286,  1010,  1998,  6660,  2292,   102])"
2021,1,"['function', 'bootstrap', 'distribution', 'distribution function', 'statistic']", Exercises,seg_251,g∗n(t) = p(tn∗ ≤ t) be the distribution function of the bootstrap statistic tn∗. conclude from part a that the maximum distance between g∗n and gn can be bounded from below as follows:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1043, 30125,  2078,  1006,  1056,  1007,  1027,  1052,  1006,
        28286, 30125,  1608,  1056,  1007,  2022,  1996,  4353,  3853,  1997,
         1996,  6879,  6494,  2361, 28093,  6553, 28286, 30125,  1012, 16519,
         2013,  2112,  1037,  2008,  1996,  4555,  3292,  2090,  1043, 30125,
         2078,  1998,  1043,  2078,  2064,  2022, 10351,  2013,  2917,  2004,
         4076,  1024,   102])"
2022,0,['n'], Exercises,seg_251,"c. use part b to argue that for all n, the maximum distance between g∗n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  2224,  2112,  1038,  2000,  7475,  2008,  2005,
         2035,  1050,  1010,  1996,  4555,  3292,  2090,  1043, 30125,  2078,
          102])"
2023,1,"['functions', 'sample', 'bootstrap', 'distribution']", Exercises,seg_251,hint: you may use that e−x ≥ 1 − x for all x. we conclude that even for very large sample sizes the maximum distance between the distribution functions of tn and its bootstrap counterpart tn∗ is at least 0.632.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9374,  1024,  2017,  2089,  2224,  2008,  1041, 22543,  2595,
         1609,  1015,  1597,  1060,  2005,  2035,  1060,  1012,  2057, 16519,
         2008,  2130,  2005,  2200,  2312,  7099, 10826,  1996,  4555,  3292,
         2090,  1996,  4353,  4972,  1997, 28286,  1998,  2049,  6879,  6494,
         2361, 13637, 28286, 30125,  2003,  2012,  2560,  1014,  1012,  6191,
         2475,  1012,   102])"
2024,1,"['parameter', 'contrast', 'parametric bootstrap', 'estimate', 'bootstrap', 'distribution', 'empirical bootstrap']", Exercises,seg_251,"18.13 (exercise 18.12 continued). in contrast to the empirical bootstrap, the parametric bootstrap for tn does work. suppose we estimate the parameter θ of the u(0, θ) distribution by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2324,  1012,  2410,  1006,  6912,  2324,  1012,  2260,  2506,
         1007,  1012,  1999,  5688,  2000,  1996, 17537,  6879,  6494,  2361,
         1010,  1996, 11498, 12589,  6879,  6494,  2361,  2005, 28286,  2515,
         2147,  1012,  6814,  2057, 10197,  1996, 16381,  1162,  1997,  1996,
         1057,  1006,  1014,  1010,  1162,  1007,  4353,  2011,   102])"
2025,1,"['function', 'random sample', 'sample', 'random', 'bootstrap', 'distribution', 'distribution function']", Exercises,seg_251,"∗ be a bootstrap random sample from a u(0, θ̂) distribution, and let mn∗ be the corresponding bootstrap maximum. again, we are going to compare the distribution function gn of tn = 1−mn/θ with the",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1598,  2022,  1037,  6879,  6494,  2361,  6721,  7099,  2013,
         1037,  1057,  1006,  1014,  1010,  1162,  1007,  4353,  1010,  1998,
         2292, 24098, 30125,  2022,  1996,  7978,  6879,  6494,  2361,  4555,
         1012,  2153,  1010,  2057,  2024,  2183,  2000, 12826,  1996,  4353,
         3853,  1043,  2078,  1997, 28286,  1027,  1015, 22543,  2213,  2078,
         1013,  1162,  2007,  1996,   102])"
2026,1,"['bootstrap', 'function']", Exercises,seg_251,distribution function g∗n of its bootstrap counterpart tn∗ = 1 − mn∗/θ̂.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  4353,  3853,  1043, 30125,  2078,  1997,  2049,  6879,  6494,
         2361, 13637, 28286, 30125,  1027,  1015,  1597, 24098, 30125,  1013,
         1162,  1012,   102])"
2027,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,"a. check that the distribution function fθ of a u(0, θ) distribution is given",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4638,  2008,  1996,  4353,  3853,  1042, 29725,
         1997,  1037,  1057,  1006,  1014,  1010,  1162,  1007,  4353,  2003,
         2445,   102])"
2028,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,b. check that the distribution function of tn is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  4638,  2008,  1996,  4353,  3853,  1997, 28286,
         2003,   102])"
2029,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,hint: rewrite p(tn ≤ t) as 1 − p(mn ≤ θ(1 − t)) and use the rule on page 109 about the distribution function of the maximum.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9374,  1024,  2128, 26373,  1052,  1006, 28286,  1608,  1056,
         1007,  2004,  1015,  1597,  1052,  1006, 24098,  1608,  1162,  1006,
         1015,  1597,  1056,  1007,  1007,  1998,  2224,  1996,  3627,  2006,
         3931, 11518,  2055,  1996,  4353,  3853,  1997,  1996,  4555,  1012,
          102])"
2030,1,"['distribution function', 'function', 'distribution']", Exercises,seg_251,c. show that tn∗ has the same distribution function:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2265,  2008, 28286, 30125,  2038,  1996,  2168,
         4353,  3853,  1024,   102])"
2031,1,"['contrast', 'parametric bootstrap', 'bootstrap', 'empirical bootstrap']", Exercises,seg_251,"this means that, in contrast to the empirical bootstrap (see exercise 18.12), the parametric bootstrap works perfectly in this situation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2023,  2965,  2008,  1010,  1999,  5688,  2000,  1996, 17537,
         6879,  6494,  2361,  1006,  2156,  6912,  2324,  1012,  2260,  1007,
         1010,  1996, 11498, 12589,  6879,  6494,  2361,  2573,  6669,  1999,
         2023,  3663,  1012,   102])"
2032,1,"['mean', 'dataset', 'estimators', 'estimate', 'model', 'probability distribution', 'function', 'probability', 'realization', 'unbiased', 'random sample', 'estimator', 'unbiased estimators', 'expectation', 'parameters', 'variance', 'sample', 'random', 'distribution']", Unbiased estimators,seg_253,in chapter 17 we saw that a dataset can be modeled as a realization of a random sample from a probability distribution and that quantities of interest correspond to features of the model distribution. one of our tasks is to use the dataset to estimate a quantity of interest. we shall mainly deal with the situation where it is modeled as one of the parameters of the model distribution or as a certain function of the parameters. we will first discuss what we mean exactly by an estimator and then introduce the notion of unbiasedness as a desirable property for estimators. we end the chapter by providing unbiased estimators for the expectation and variance of a model distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        1., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591])","tensor([  101,  1999,  3127,  2459,  2057,  2387,  2008,  1037,  2951, 13462,
         2064,  2022, 14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,
         2013,  1037,  9723,  4353,  1998,  2008, 12450,  1997,  3037, 17254,
         2000,  2838,  1997,  1996,  2944,  4353,  1012,  2028,  1997,  2256,
         8518,  2003,  2000,  2224,  1996,  2951, 13462,  2000, 10197,  1037,
        11712,  1997,  3037,  1012,  2057,  4618,  3701,  3066,  2007,  1996,
         3663,  2073,  2009,  2003, 14440,  2004,  2028,  1997,  1996, 11709,
         1997,  1996,  2944,  4353,  2030,  2004,  1037,  3056,  3853,  1997,
         1996, 11709,  1012,  2057,  2097,  2034,  6848,  2054,  2057,  2812,
         3599,  2011,  2019,  9765,  9581,  4263,  1998,  2059,  8970,  1996,
         9366,  1997,  4895, 11607,  6924,  2791,  2004,  1037, 16166,  3200,
         2005,  9765,  9581,  6591,  1012,  2057,  2203,  1996,  3127,  2011,
         4346,  4895, 11607,  6924,  9765,  9581,  6591,  2005,  1996, 17626,
         1998, 23284,  1997,  1037,  2944,  4353,  1012,   102])"
2033,1,"['mean', 'parameter', 'percentage', 'random variable', 'poisson', 'random', 'intensity', 'distribution', 'poisson distribution', 'process', 'poisson process', 'variable']", Estimators,seg_255,"consider the arrivals of packages at a network server. one is interested in the intensity at which packages arrive on a generic day and in the percentage of minutes during which no packages arrive. if the arrivals occur completely at random in time, the arrival process can be modeled by a poisson process. this would mean that the number of arrivals during one minute is modeled by a random variable having a poisson distribution with (unknown) parameter µ. the intensity of the arrivals is then modeled by the parameter µ itself, and the percentage of minutes during which no packages arrive is modeled by the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  5136,  1996, 25470,  1997, 14555,  2012,  1037,  2897,  8241,
         1012,  2028,  2003,  4699,  1999,  1996,  8015,  2012,  2029, 14555,
         7180,  2006,  1037, 12391,  2154,  1998,  1999,  1996,  7017,  1997,
         2781,  2076,  2029,  2053, 14555,  7180,  1012,  2065,  1996, 25470,
         5258,  3294,  2012,  6721,  1999,  2051,  1010,  1996,  5508,  2832,
         2064,  2022, 14440,  2011,  1037, 13433, 24077,  2832,  1012,  2023,
         2052,  2812,  2008,  1996,  2193,  1997, 25470,  2076,  2028,  3371,
         2003, 14440,  2011,  1037,  6721,  8023,  2383,  1037, 13433, 24077,
         4353,  2007,  1006,  4242,  1007, 16381,  1085,  1012,  1996,  8015,
         1997,  1996, 25470,  2003,  2059, 14440,  2011,  1996, 16381,  1085,
         2993,  1010,  1998,  1996,  7017,  1997,  2781,  2076,  2029,  2053,
        14555,  7180,  2003, 14440,  2011,  1996,   102])"
2034,1,"['dataset', 'probability', 'estimate', 'process']", Estimators,seg_255,"−µ probability of zero arrivals: e . suppose one observes the arrival process for a while and gathers a dataset x1, x2, . . . , xn, where xi represents the number of arrivals in the ith minute. our task will be to estimate, based on the dataset,",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1597, 29659,  9723,  1997,  5717, 25470,  1024,  1041,  1012,
         6814,  2028, 24451,  1996,  5508,  2832,  2005,  1037,  2096,  1998,
        29438,  1037,  2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1010,  2073,  8418,  5836,
         1996,  2193,  1997, 25470,  1999,  1996,  2009,  2232,  3371,  1012,
         2256,  4708,  2097,  2022,  2000, 10197,  1010,  2241,  2006,  1996,
         2951, 13462,  1010,   102])"
2035,1,"['parameter', 'function']", Estimators,seg_255,−µ the parameter µ and a function of the parameter: e .,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1597, 29659,  1996, 16381,  1085,  1998,  1037,  3853,  1997,
         1996, 16381,  1024,  1041,  1012,   102])"
2036,1,"['dataset', 'probability', 'realization', 'random sample', 'sample', 'random', 'distribution', 'model', 'parameters', 'probability distribution']", Estimators,seg_255,"this example is typical for the general situation in which our dataset is modeled as a realization of a random sample x1, x2, . . . , xn from a probability distribution that is completely determined by one or more parameters. the parameters that determine the model distribution are called the model parameters. we focus on the situation where the quantity of interest corresponds",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  2023,  2742,  2003,  5171,  2005,  1996,  2236,  3663,  1999,
         2029,  2256,  2951, 13462,  2003, 14440,  2004,  1037, 12393,  1997,
         1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  2013,  1037,  9723,  4353,  2008,
         2003,  3294,  4340,  2011,  2028,  2030,  2062, 11709,  1012,  1996,
        11709,  2008,  5646,  1996,  2944,  4353,  2024,  2170,  1996,  2944,
        11709,  1012,  2057,  3579,  2006,  1996,  3663,  2073,  1996, 11712,
         1997,  3037, 14788,   102])"
2037,1,"['parameter', 'function', 'parameter of interest', 'percentage', 'intensity', 'distribution', 'model', 'parameters']", Estimators,seg_255,"to a feature of the model distribution that can be described by the model parameters themselves or by some function of the model parameters. this distribution feature is referred to as the parameter of interest. in discussing this general setup we shall denote the parameter of interest by the greek letter θ. so, for instance, in our network server example, µ is the model parameter. when we are interested in the arrival intensity, the role of θ is played by the parameter µ itself, and when we are interested in the percentage of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  2000,  1037,  3444,  1997,  1996,  2944,  4353,  2008,  2064,
         2022,  2649,  2011,  1996,  2944, 11709,  3209,  2030,  2011,  2070,
         3853,  1997,  1996,  2944, 11709,  1012,  2023,  4353,  3444,  2003,
         3615,  2000,  2004,  1996, 16381,  1997,  3037,  1012,  1999, 10537,
         2023,  2236, 16437,  2057,  4618, 19090,  1996, 16381,  1997,  3037,
         2011,  1996,  3306,  3661,  1162,  1012,  2061,  1010,  2005,  6013,
         1010,  1999,  2256,  2897,  8241,  2742,  1010,  1085,  2003,  1996,
         2944, 16381,  1012,  2043,  2057,  2024,  4699,  1999,  1996,  5508,
         8015,  1010,  1996,  2535,  1997,  1162,  2003,  2209,  2011,  1996,
        16381,  1085,  2993,  1010,  1998,  2043,  2057,  2024,  4699,  1999,
         1996,  7017,  1997,   102])"
2038,1,"['parameter', 'dataset', 'parameter of interest', 'estimate', 'method']", Estimators,seg_255,"whatever method we use to estimate the parameter of interest θ, the result depends only on our dataset.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  3649,  4118,  2057,  2224,  2000, 10197,  1996, 16381,  1997,
         3037,  1162,  1010,  1996,  2765,  9041,  2069,  2006,  2256,  2951,
        13462,  1012,   102])"
2039,1,"['dataset', 'function', 'estimate']", Estimators,seg_255,"estimate. an estimate is a value t that only depends on the dataset x1, x2, . . . , xn, i.e., t is some function of the dataset only:",tensor(1),"tensor([0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101, 10197,  1012,  2019, 10197,  2003,  1037,  3643,  1056,  2008,
         2069,  9041,  2006,  1996,  2951, 13462,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  1045,
         1012,  1041,  1012,  1010,  1056,  2003,  2070,  3853,  1997,  1996,
         2951, 13462,  2069,  1024,   102])"
2040,1,"['curve', 'parameter', 'dataset', 'table', 'estimate', 'estimates']", Estimators,seg_255,"this description of estimate is a bit formal. the idea is, of course, that the value t, computed from our dataset x1, x2, . . . , xn, gives some indication of the “true” value of the parameter θ. we have already met several estimates in chapter 17; see, for instance, table 17.2. this table illustrates that the value of an estimate can be anything: a single number, a vector of numbers, even a complete curve.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  2023,  6412,  1997, 10197,  2003,  1037,  2978,  5337,  1012,
         1996,  2801,  2003,  1010,  1997,  2607,  1010,  2008,  1996,  3643,
         1056,  1010, 24806,  2013,  2256,  2951, 13462,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,
         3957,  2070, 12407,  1997,  1996,  1523,  2995,  1524,  3643,  1997,
         1996, 16381,  1162,  1012,  2057,  2031,  2525,  2777,  2195, 10035,
         1999,  3127,  2459,  1025,  2156,  1010,  2005,  6013,  1010,  2795,
         2459,  1012,  1016,  1012,  2023,  2795, 24899,  2008,  1996,  3643,
         1997,  2019, 10197,  2064,  2022,  2505,  1024,  1037,  2309,  2193,
         1010,  1037,  9207,  1997,  3616,  1010,  2130,  1037,  3143,  7774,
         1012,   102])"
2041,1,"['mean', 'dataset', 'estimate', 'intensity', 'model', 'parameter', 'realization', 'random sample', 'expectation', 'sample variance', 'variance', 'sample', 'random', 'distribution', 'law of large numbers', 'sample mean']", Estimators,seg_255,"let us return to our network server example in which our dataset x1, x2, . . . , xn is modeled as a realization of a random sample from a pois(µ) distribution. the intensity at which packages arrive is then represented by the parameter µ. since the parameter µ is the expectation of the model distribution, the law of large numbers suggests the sample mean x̄n as a natural estimate for µ. on the other hand, the parameter µ also represents the variance of the model distribution, so that by a similar reasoning another natural estimate is the sample variance s2n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  2292,  2149,  2709,  2000,  2256,  2897,  8241,  2742,  1999,
         2029,  2256,  2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  2003, 14440,  2004,  1037,
        12393,  1997,  1037,  6721,  7099,  2013,  1037, 13433,  2483,  1006,
         1085,  1007,  4353,  1012,  1996,  8015,  2012,  2029, 14555,  7180,
         2003,  2059,  3421,  2011,  1996, 16381,  1085,  1012,  2144,  1996,
        16381,  1085,  2003,  1996, 17626,  1997,  1996,  2944,  4353,  1010,
         1996,  2375,  1997,  2312,  3616,  6083,  1996,  7099,  2812,  1060,
         2078,  2004,  1037,  3019, 10197,  2005,  1085,  1012,  2006,  1996,
         2060,  2192,  1010,  1996, 16381,  1085,  2036,  5836,  1996, 23284,
         1997,  1996,  2944,  4353,  1010,  2061,  2008,  2011,  1037,  2714,
        13384,  2178,  3019, 10197,  2003,  1996,  7099, 23284,  1055,  2475,
         2078,  1012,   102])"
2042,1,"['dataset', 'probability', 'estimate', 'percentage', 'frequency', 'relative frequency']", Estimators,seg_255,"the percentage of idle minutes is modeled by the probability of zero arrivals. similar to the reasoning in section 13.4, a natural estimate is the relative frequency of zeros in the dataset:",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1996,  7017,  1997, 18373,  2781,  2003, 14440,  2011,  1996,
         9723,  1997,  5717, 25470,  1012,  2714,  2000,  1996, 13384,  1999,
         2930,  2410,  1012,  1018,  1010,  1037,  3019, 10197,  2003,  1996,
         5816,  6075,  1997,  5717,  2015,  1999,  1996,  2951, 13462,  1024,
          102])"
2043,0,[], Estimators,seg_255,number of xi equal to zero .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([9765, 9581, 6591])","tensor([ 101, 2193, 1997, 8418, 5020, 2000, 5717, 1012,  102])"
2044,1,['probability'], Estimators,seg_255,"on the other hand, the probability of zero arrivals can be expressed as a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  2006,  1996,  2060,  2192,  1010,  1996,  9723,  1997,  5717,
        25470,  2064,  2022,  5228,  2004,  1037,   102])"
2045,1,"['parameter', 'function', 'estimate', 'model']", Estimators,seg_255,"−µ function of the model parameter: e . hence, if we estimate µ by x̄n, we could also estimate e−µ by e−x̄n .",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1597, 29659,  3853,  1997,  1996,  2944, 16381,  1024,  1041,
         1012,  6516,  1010,  2065,  2057, 10197,  1085,  2011,  1060,  2078,
         1010,  2057,  2071,  2036, 10197,  1041, 22543, 29659,  2011,  1041,
        22543,  2595,  2078,  1012,   102])"
2046,1,"['probability', 'estimate', 'frequency', 'relative frequency']", Estimators,seg_255,quick exercise 19.1 suppose we estimate the probability of zero arrivals −µ e by the relative frequency of xi equal to zero. deduce an estimate for µ from this.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  4248,  6912,  2539,  1012,  1015,  6814,  2057, 10197,  1996,
         9723,  1997,  5717, 25470,  1597, 29659,  1041,  2011,  1996,  5816,
         6075,  1997,  8418,  5020,  2000,  5717,  1012,  2139,  8566,  3401,
         2019, 10197,  2005,  1085,  2013,  2023,  1012,   102])"
2047,1,"['parameter of interest', 'parameter', 'estimates']", Estimators,seg_255,the preceding examples illustrate that one can often think of several estimates for the parameter of interest. this raises questions like,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1996, 11003,  4973, 19141,  2008,  2028,  2064,  2411,  2228,
         1997,  2195, 10035,  2005,  1996, 16381,  1997,  3037,  1012,  2023,
        13275,  3980,  2066,   102])"
2048,1,['estimate'], Estimators,seg_255,ĺ when is one estimate better than another?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1048,  2043,  2003,  2028, 10197,  2488,  2084,  2178,  1029,
          102])"
2049,1,['estimate'], Estimators,seg_255,ĺ does there exist a best possible estimate?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1048,  2515,  2045,  4839,  1037,  2190,  2825, 10197,  1029,
          102])"
2050,1,"['parameter', 'dataset', 'estimate', 'realization', 'random variable', 'estimates', 'random sample', 'sample', 'random', 'random variables', 'variables', 'variable']", Estimators,seg_255,"for instance, can we say which of the values x̄n or s2n computed from the dataset is closer to the “true” parameter µ? the answer is no. the measurements and the corresponding estimates are subject to randomness, so that we cannot say anything with certainty about which of the two is closer to µ. one of the things we can say for each of them is how likely it is that they are within a given distance from µ. to this end, we consider the random variables that correspond to the estimates. because our dataset x1, x2, . . . , xn is modeled as a realization of a random sample x1, x2, . . . , xn, the estimate t is a realization of a random variable t .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  2005,  6013,  1010,  2064,  2057,  2360,  2029,  1997,  1996,
         5300,  1060,  2078,  2030,  1055,  2475,  2078, 24806,  2013,  1996,
         2951, 13462,  2003,  3553,  2000,  1996,  1523,  2995,  1524, 16381,
         1085,  1029,  1996,  3437,  2003,  2053,  1012,  1996, 11702,  1998,
         1996,  7978, 10035,  2024,  3395,  2000,  6721,  2791,  1010,  2061,
         2008,  2057,  3685,  2360,  2505,  2007, 15855,  2055,  2029,  1997,
         1996,  2048,  2003,  3553,  2000,  1085,  1012,  2028,  1997,  1996,
         2477,  2057,  2064,  2360,  2005,  2169,  1997,  2068,  2003,  2129,
         3497,  2009,  2003,  2008,  2027,  2024,  2306,  1037,  2445,  3292,
         2013,  1085,  1012,  2000,  2023,  2203,  1010,  2057,  5136,  1996,
         6721, 10857,  2008, 17254,  2000,  1996, 10035,  1012,  2138,  2256,
         2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2003, 14440,  2004,  1037, 12393,  1997,
         1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1010,  1996, 10197,  1056,  2003,
         1037, 12393,  1997,  1037,  6721,  8023,  1056,  1012,   102])"
2051,1,"['dataset', 'estimate', 'realization', 'random variable', 'random', 'variable']", Estimators,seg_255,"estimator. let t = h(x1, x2, . . . , xn) be an estimate based on the dataset x1, x2, . . . , xn. then t is a realization of the random variable",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  9765,  9581,  4263,  1012,  2292,  1056,  1027,  1044,  1006,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1007,  2022,  2019, 10197,  2241,  2006,  1996,  2951,
        13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1012,  2059,  1056,  2003,  1037, 12393,  1997,
         1996,  6721,  8023,   102])"
2052,1,"['random variable', 'random', 'estimator', 'variable']", Estimators,seg_255,the random variable t is called an estimator.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([9765, 9581, 6591])","tensor([ 101, 1996, 6721, 8023, 1056, 2003, 2170, 2019, 9765, 9581, 4263, 1012,
         102])"
2053,1,"['cases', 'dataset', 'estimators', 'estimation', 'sample statistics', 'estimate', 'sample', 'method', 'estimator', 'statistics']", Estimators,seg_255,"the word estimator refers to the method or device for estimation. this is distinguished from estimate, which refers to the actual value computed from a dataset. note that estimators are special cases of sample statistics. in the remainder of this chapter we will discuss the notion of unbiasedness that describes to some extent the behavior of estimators.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([9765, 9581, 6591])","tensor([  101,  1996,  2773,  9765,  9581,  4263,  5218,  2000,  1996,  4118,
         2030,  5080,  2005, 24155,  1012,  2023,  2003,  5182,  2013, 10197,
         1010,  2029,  5218,  2000,  1996,  5025,  3643, 24806,  2013,  1037,
         2951, 13462,  1012,  3602,  2008,  9765,  9581,  6591,  2024,  2569,
         3572,  1997,  7099,  6747,  1012,  1999,  1996,  6893,  1997,  2023,
         3127,  2057,  2097,  6848,  1996,  9366,  1997,  4895, 11607,  6924,
         2791,  2008,  5577,  2000,  2070,  6698,  1996,  5248,  1997,  9765,
         9581,  6591,  1012,   102])"
2054,1,"['dataset', 'estimators', 'probability', 'realization', 'random sample', 'sample', 'random', 'distribution']", Investigating the behavior of an estimator,seg_257,"let us continue with our network server example. suppose we have observed the network for 30 minutes and we have recorded the number of arrivals in each minute. the dataset is modeled as a realization of a random sample x1, x2, . . . , xn of size n = 30 from a pois(µ) distribution. let us concentrate on estimating the probability p0 of zero arrivals, which is an unknown number between 0 and 1. as motivated in the previous section, we have the following possible estimators:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([11538,  1996,  5248,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  2292,  2149,  3613,  2007,  2256,  2897,  8241,  2742,  1012,
         6814,  2057,  2031,  5159,  1996,  2897,  2005,  2382,  2781,  1998,
         2057,  2031,  2680,  1996,  2193,  1997, 25470,  1999,  2169,  3371,
         1012,  1996,  2951, 13462,  2003, 14440,  2004,  1037, 12393,  1997,
         1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1997,  2946,  1050,  1027,  2382,
         2013,  1037, 13433,  2483,  1006,  1085,  1007,  4353,  1012,  2292,
         2149, 10152,  2006,  9765, 22835,  1996,  9723,  1052,  2692,  1997,
         5717, 25470,  1010,  2029,  2003,  2019,  4242,  2193,  2090,  1014,
         1998,  1015,  1012,  2004, 12774,  1999,  1996,  3025,  2930,  1010,
         2057,  2031,  1996,  2206,  2825,  9765,  9581,  6591,  1024,   102])"
2055,1,['estimator'], Investigating the behavior of an estimator,seg_257,"1 2 our first estimator s can only attain the values 0, 30 , 30 , . . . , 1, so that in general it cannot give the exact value of p0. similarly for our second estima-",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11538,  1996,  5248,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  1015,  1016,  2256,  2034,  9765,  9581,  4263,  1055,  2064,
         2069, 18759,  1996,  5300,  1014,  1010,  2382,  1010,  2382,  1010,
         1012,  1012,  1012,  1010,  1015,  1010,  2061,  2008,  1999,  2236,
         2009,  3685,  2507,  1996,  6635,  3643,  1997,  1052,  2692,  1012,
         6660,  2005,  2256,  2117,  9765,  9581,  1011,   102])"
2056,1,"['observations', 'estimator', 'estimators']", Investigating the behavior of an estimator,seg_257,"cannot expect our estimators always to give the exact value of p0 on basis of 30 observations. well, then what can we expect from a reasonable estimator?",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([11538,  1996,  5248,  1997,  2019,  9765,  9581,  4263])","tensor([ 101, 3685, 5987, 2256, 9765, 9581, 6591, 2467, 2000, 2507, 1996, 6635,
        3643, 1997, 1052, 2692, 2006, 3978, 1997, 2382, 9420, 1012, 2092, 1010,
        2059, 2054, 2064, 2057, 5987, 2013, 1037, 9608, 9765, 9581, 4263, 1029,
         102])"
2057,1,"['estimators', 'estimation', 'observations', 'process', 'case']", Investigating the behavior of an estimator,seg_257,"to get an idea of the behavior of both estimators, we pretend we know µ and we simulate the estimation process in the case of n = 30 observations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([11538,  1996,  5248,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  2000,  2131,  2019,  2801,  1997,  1996,  5248,  1997,  2119,
         9765,  9581,  6591,  1010,  2057,  9811,  2057,  2113,  1085,  1998,
         2057, 26633,  1996, 24155,  2832,  1999,  1996,  2553,  1997,  1050,
         1027,  2382,  9420,  1012,   102])"
2058,1,"['vary', 'parameter', 'estimators', 'estimate', 'frequency', 'poisson', 'estimator', 'distribution', 'poisson distribution']", Investigating the behavior of an estimator,seg_257,"−µ let us choose µ = ln 10, so that p0 = e = 0.1. we draw 30 values from a poisson distribution with parameter µ = ln 10 and compute the value of estimators s and t . we repeat this 500 times, so that we have 500 values for each estimator. in figure 19.1 a frequency histogram1 of these values for estimator s is displayed on the left and for estimator t on the right. clearly, the values of both estimators vary around the value 0.1, which they are supposed to estimate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([11538,  1996,  5248,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  1597, 29659,  2292,  2149,  5454,  1085,  1027,  1048,  2078,
         2184,  1010,  2061,  2008,  1052,  2692,  1027,  1041,  1027,  1014,
         1012,  1015,  1012,  2057,  4009,  2382,  5300,  2013,  1037, 13433,
        24077,  4353,  2007, 16381,  1085,  1027,  1048,  2078,  2184,  1998,
        24134,  1996,  3643,  1997,  9765,  9581,  6591,  1055,  1998,  1056,
         1012,  2057,  9377,  2023,  3156,  2335,  1010,  2061,  2008,  2057,
         2031,  3156,  5300,  2005,  2169,  9765,  9581,  4263,  1012,  1999,
         3275,  2539,  1012,  1015,  1037,  6075,  2010,  3406, 13113,  2487,
         1997,  2122,  5300,  2005,  9765,  9581,  4263,  1055,  2003,  6913,
         2006,  1996,  2187,  1998,  2005,  9765,  9581,  4263,  1056,  2006,
         1996,  2157,  1012,  4415,  1010,  1996,  5300,  1997,  2119,  9765,
         9581,  6591,  8137,  2105,  1996,  3643,  1014,  1012,  1015,  1010,
         2029,  2027,  2024,  4011,  2000, 10197,  1012,   102])"
2059,1,"['estimator', 'average']", The sampling distribution and unbiasedness,seg_259,"we have just seen that the values generated for estimator s fluctuate around p0 = 0.1. although the value of this estimator is not always equal to 0.1, it is desirable that on average, s is on target, i.e., e[s] = 0.1. moreover, it is desirable that this property holds no matter what the actual value of p0 is, i.e.,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2057,  2031,  2074,  2464,  2008,  1996,  5300,  7013,  2005,
         9765,  9581,  4263,  1055, 19857,  6593, 20598,  2105,  1052,  2692,
         1027,  1014,  1012,  1015,  1012,  2348,  1996,  3643,  1997,  2023,
         9765,  9581,  4263,  2003,  2025,  2467,  5020,  2000,  1014,  1012,
         1015,  1010,  2009,  2003, 16166,  2008,  2006,  2779,  1010,  1055,
         2003,  2006,  4539,  1010,  1045,  1012,  1041,  1012,  1010,  1041,
         1031,  1055,  1033,  1027,  1014,  1012,  1015,  1012,  9308,  1010,
         2009,  2003, 16166,  2008,  2023,  3200,  4324,  2053,  3043,  2054,
         1996,  5025,  3643,  1997,  1052,  2692,  2003,  1010,  1045,  1012,
         1041,  1012,  1010,   102])"
2060,1,"['probability', 'estimator', 'probability distribution', 'distribution']", The sampling distribution and unbiasedness,seg_259,"irrespective of the value 0 < p0 < 1. in order to find out whether this is true, we need the probability distribution of the estimator s. of course this",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101, 20868,  6072,  5051, 15277,  1997,  1996,  3643,  1014,  1026,
         1052,  2692,  1026,  1015,  1012,  1999,  2344,  2000,  2424,  2041,
         3251,  2023,  2003,  2995,  1010,  2057,  2342,  1996,  9723,  4353,
         1997,  1996,  9765,  9581,  4263,  1055,  1012,  1997,  2607,  2023,
          102])"
2061,1,"['estimators', 'random variable', 'random sample', 'sample', 'random', 'sampling', 'distribution', 'sampling distribution', 'variable']", The sampling distribution and unbiasedness,seg_259,"is simply the distribution of a random variable, but because estimators are constructed from a random sample x1, x2, . . . , xn, we speak of the sampling distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2003,  3432,  1996,  4353,  1997,  1037,  6721,  8023,  1010,
         2021,  2138,  9765,  9581,  6591,  2024,  3833,  2013,  1037,  6721,
         7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1010,  2057,  3713,  1997,  1996, 16227,  4353,
         1012,   102])"
2062,1,"['random sample', 'sample', 'random', 'sampling', 'estimator', 'distribution', 'sampling distribution']", The sampling distribution and unbiasedness,seg_259,"the sampling distribution. let t = h(x1, x2, . . . , xn) be an estimator based on a random sample x1, x2, . . . , xn. the probability distribution of t is called the sampling distribution of t .",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  1996, 16227,  4353,  1012,  2292,  1056,  1027,  1044,  1006,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1007,  2022,  2019,  9765,  9581,  4263,  2241,  2006,
         1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1012,  1996,  9723,  4353,  1997,
         1056,  2003,  2170,  1996, 16227,  4353,  1997,  1056,  1012,   102])"
2063,1,"['sampling', 'sampling distribution', 'distribution']", The sampling distribution and unbiasedness,seg_259,the sampling distribution of s can be found as follows. write,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  1996, 16227,  4353,  1997,  1055,  2064,  2022,  2179,  2004,
         4076,  1012,  4339,   102])"
2064,1,"['discrete random variable', 'sampling distribution', 'successes', 'independent', 'random variable', 'sampling', 'discrete', 'probability', 'probabilities', 'probability of success', 'trials', 'success', 'random', 'distribution', 'variable']", The sampling distribution and unbiasedness,seg_259,"where y is the number of xi equal to zero. if for each i we label xi = 0 as a success, then y is equal to the number of successes in n independent trials with p0 as the probability of success. similar to section 4.3, it follows that y has a bin(n, p0) distribution. hence the sampling distribution of s is that of a bin(n, p0) distributed random variable divided by n. this means that s is a discrete random variable that attains the values k/n, where k = 0, 1, . . . , n, with probabilities given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2073,  1061,  2003,  1996,  2193,  1997,  8418,  5020,  2000,
         5717,  1012,  2065,  2005,  2169,  1045,  2057,  3830,  8418,  1027,
         1014,  2004,  1037,  3112,  1010,  2059,  1061,  2003,  5020,  2000,
         1996,  2193,  1997, 14152,  1999,  1050,  2981,  7012,  2007,  1052,
         2692,  2004,  1996,  9723,  1997,  3112,  1012,  2714,  2000,  2930,
         1018,  1012,  1017,  1010,  2009,  4076,  2008,  1061,  2038,  1037,
         8026,  1006,  1050,  1010,  1052,  2692,  1007,  4353,  1012,  6516,
         1996, 16227,  4353,  1997,  1055,  2003,  2008,  1997,  1037,  8026,
         1006,  1050,  1010,  1052,  2692,  1007,  5500,  6721,  8023,  4055,
         2011,  1050,  1012,  2023,  2965,  2008,  1055,  2003,  1037, 16246,
         6721,  8023,  2008, 18759,  2015,  1996,  5300,  1047,  1013,  1050,
         1010,  2073,  1047,  1027,  1014,  1010,  1015,  1010,  1012,  1012,
         1012,  1010,  1050,  1010,  2007,  4013,  3676, 14680,  2445,  2011,
          102])"
2065,1,"['function', 'distribution', 'probability', 'probability mass function', 'mass function', 'case']", The sampling distribution and unbiasedness,seg_259,"the probability mass function of s for the case n = 30 and p0 = 0.1 is displayed in figure 19.2. since s = y/n and y has a bin(n, p0) distribution,",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([ 101, 1996, 9723, 3742, 3853, 1997, 1055, 2005, 1996, 2553, 1050, 1027,
        2382, 1998, 1052, 2692, 1027, 1014, 1012, 1015, 2003, 6913, 1999, 3275,
        2539, 1012, 1016, 1012, 2144, 1055, 1027, 1061, 1013, 1050, 1998, 1061,
        2038, 1037, 8026, 1006, 1050, 1010, 1052, 2692, 1007, 4353, 1010,  102])"
2066,1,['estimator'], The sampling distribution and unbiasedness,seg_259,"so, indeed, the estimator s for p0 has the property e[s] = p0. this property reflects the fact that estimator s has no systematic tendency to produce",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2061,  1010,  5262,  1010,  1996,  9765,  9581,  4263,  1055,
         2005,  1052,  2692,  2038,  1996,  3200,  1041,  1031,  1055,  1033,
         1027,  1052,  2692,  1012,  2023,  3200, 11138,  1996,  2755,  2008,
         9765,  9581,  4263,  1055,  2038,  2053, 11778, 11765,  2000,  3965,
          102])"
2067,1,"['estimators', 'unbiased', 'estimates']", The sampling distribution and unbiasedness,seg_259,"estimates that are larger than p0, and no systematic tendency to produce estimates that are smaller than p0. this is a desirable property for estimators, and estimators that have this property are called unbiased.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101, 10035,  2008,  2024,  3469,  2084,  1052,  2692,  1010,  1998,
         2053, 11778, 11765,  2000,  3965, 10035,  2008,  2024,  3760,  2084,
         1052,  2692,  1012,  2023,  2003,  1037, 16166,  3200,  2005,  9765,
         9581,  6591,  1010,  1998,  9765,  9581,  6591,  2008,  2031,  2023,
         3200,  2024,  2170,  4895, 11607,  6924,  1012,   102])"
2068,1,"['unbiased estimator', 'parameter', 'estimator', 'unbiased']", The sampling distribution and unbiasedness,seg_259,"definition. an estimator t is called an unbiased estimator for the parameter θ, if e [t ] = θ",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  6210,  1012,  2019,  9765,  9581,  4263,  1056,  2003,  2170,
         2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,  1996, 16381,
         1162,  1010,  2065,  1041,  1031,  1056,  1033,  1027,  1162,   102])"
2069,1,"['biased', 'bias']", The sampling distribution and unbiasedness,seg_259,"irrespective of the value of θ. the difference e[t ] − θ is called the bias of t ; if this difference is nonzero, then t is called biased.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101, 20868,  6072,  5051, 15277,  1997,  1996,  3643,  1997,  1162,
         1012,  1996,  4489,  1041,  1031,  1056,  1033,  1597,  1162,  2003,
         2170,  1996, 13827,  1997,  1056,  1025,  2065,  2023,  4489,  2003,
         2512,  6290,  2080,  1010,  2059,  1056,  2003,  2170, 25352,  1012,
          102])"
2070,1,"['distribution', 'probability', 'estimator', 'sampling', 'sampling distribution']", The sampling distribution and unbiasedness,seg_259,let us return to our second estimator for the probability of zero arrivals in the network server example: t = e−x̄n . the sampling distribution can be obtained as follows. write,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2292,  2149,  2709,  2000,  2256,  2117,  9765,  9581,  4263,
         2005,  1996,  9723,  1997,  5717, 25470,  1999,  1996,  2897,  8241,
         2742,  1024,  1056,  1027,  1041, 22543,  2595,  2078,  1012,  1996,
        16227,  4353,  2064,  2022,  4663,  2004,  4076,  1012,  4339,   102])"
2071,1,"['discrete random variable', 'discrete', 'random variable', 'random', 'random variables', 'distribution', 'variables', 'variable', 'independent']", The sampling distribution and unbiasedness,seg_259,"where z = x1 +x2 + · · ·+xn. from exercise 12.9 we know that the random variable z, being the sum of n independent pois(µ) random variables, has a pois(nµ) distribution. this means that t is a discrete random variable",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2073,  1062,  1027,  1060,  2487,  1009,  1060,  2475,  1009,
         1087,  1087,  1087,  1009,  1060,  2078,  1012,  2013,  6912,  2260,
         1012,  1023,  2057,  2113,  2008,  1996,  6721,  8023,  1062,  1010,
         2108,  1996,  7680,  1997,  1050,  2981, 13433,  2483,  1006,  1085,
         1007,  6721, 10857,  1010,  2038,  1037, 13433,  2483,  1006,  1050,
        29659,  1007,  4353,  1012,  2023,  2965,  2008,  1056,  2003,  1037,
        16246,  6721,  8023,   102])"
2072,1,"['function', 'probability', 'probability mass function', 'mass function']", The sampling distribution and unbiasedness,seg_259,"−k/n attaining values e , where k = 0, 1, . . . and the probability mass function of t is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  1597,  2243,  1013,  1050, 26615,  5300,  1041,  1010,  2073,
         1047,  1027,  1014,  1010,  1015,  1010,  1012,  1012,  1012,  1998,
         1996,  9723,  3742,  3853,  1997,  1056,  2003,  2445,  2011,   102])"
2073,1,"['function', 'probability', 'unbiased', 'inequality', 'histogram', 'estimator', 'probability mass function', 'mass function', 'unbiased estimator', 'case']", The sampling distribution and unbiasedness,seg_259,"the probability mass function of t for the case n = 30 and p0 = 0.1 is displayed in figure 19.3. from the histogram in figure 19.1 as well as from the probability mass function in figure 19.3, you may get the impression that t is also an unbiased estimator. however, this not the case, which follows immediately from an application of jensen’s inequality:",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  1996,  9723,  3742,  3853,  1997,  1056,  2005,  1996,  2553,
         1050,  1027,  2382,  1998,  1052,  2692,  1027,  1014,  1012,  1015,
         2003,  6913,  1999,  3275,  2539,  1012,  1017,  1012,  2013,  1996,
         2010,  3406, 13113,  1999,  3275,  2539,  1012,  1015,  2004,  2092,
         2004,  2013,  1996,  9723,  3742,  3853,  1999,  3275,  2539,  1012,
         1017,  1010,  2017,  2089,  2131,  1996,  8605,  2008,  1056,  2003,
         2036,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  1012,  2174,
         1010,  2023,  2025,  1996,  2553,  1010,  2029,  4076,  3202,  2013,
         2019,  4646,  1997, 14857,  1521,  1055, 16440,  1024,   102])"
2074,1,"['parameter', 'function', 'inequality', 'expectation', 'distribution', 'model']", The sampling distribution and unbiasedness,seg_259,"−x where we have a strict inequality because the function g(x) = e is strictly convex (g′′(x) = e−x > 0). recall that the parameter µ equals the expectation of the pois(µ) model distribution, so that according to section 13.1 we have e[x̄n] = µ. we find that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  1597,  2595,  2073,  2057,  2031,  1037,  9384, 16440,  2138,
         1996,  3853,  1043,  1006,  1060,  1007,  1027,  1041,  2003,  9975,
        18309,  1006,  1043,  1531,  1531,  1006,  1060,  1007,  1027,  1041,
        22543,  2595,  1028,  1014,  1007,  1012,  9131,  2008,  1996, 16381,
         1085, 19635,  1996, 17626,  1997,  1996, 13433,  2483,  1006,  1085,
         1007,  2944,  4353,  1010,  2061,  2008,  2429,  2000,  2930,  2410,
         1012,  1015,  2057,  2031,  1041,  1031,  1060,  2078,  1033,  1027,
         1085,  1012,  2057,  2424,  2008,   102])"
2075,1,"['estimator', 'bias']", The sampling distribution and unbiasedness,seg_259,which means that the estimator t for p0 has positive bias. in fact we can compute e[t ] exactly (see exercise 19.9):,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2029,  2965,  2008,  1996,  9765,  9581,  4263,  1056,  2005,
         1052,  2692,  2038,  3893, 13827,  1012,  1999,  2755,  2057,  2064,
        24134,  1041,  1031,  1056,  1033,  3599,  1006,  2156,  6912,  2539,
         1012,  1023,  1007,  1024,   102])"
2076,1,"['function', 'sample', 'sample size', 'expectation', 'bias', 'case']", The sampling distribution and unbiasedness,seg_259,"as n goes to infinity. hence, although t has positive bias, the bias decreases to zero as the sample size becomes larger. in figure 19.4 the expectation of t is displayed as a function of the sample size n for the case µ = ln(10). for n = 30 the difference between e[t ] and p0 = 0.1 equals 0.0038.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2004,  1050,  3632,  2000, 15579,  1012,  6516,  1010,  2348,
         1056,  2038,  3893, 13827,  1010,  1996, 13827, 17913,  2000,  5717,
         2004,  1996,  7099,  2946,  4150,  3469,  1012,  1999,  3275,  2539,
         1012,  1018,  1996, 17626,  1997,  1056,  2003,  6913,  2004,  1037,
         3853,  1997,  1996,  7099,  2946,  1050,  2005,  1996,  2553,  1085,
         1027,  1048,  2078,  1006,  2184,  1007,  1012,  2005,  1050,  1027,
         2382,  1996,  4489,  2090,  1041,  1031,  1056,  1033,  1998,  1052,
         2692,  1027,  1014,  1012,  1015, 19635,  1014,  1012,  4002, 22025,
         1012,   102])"
2077,1,"['biased estimator', 'estimate', 'frequency', 'biased', 'relative frequency', 'estimator', 'bias']", The sampling distribution and unbiasedness,seg_259,"−µ quick exercise 19.2 if we estimate p0 = e by the relative frequency of zeros s = y/n, then we could estimate µ by u = − ln(s). argue that u is a biased estimator for µ. is the bias positive or negative?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  1597, 29659,  4248,  6912,  2539,  1012,  1016,  2065,  2057,
        10197,  1052,  2692,  1027,  1041,  2011,  1996,  5816,  6075,  1997,
         5717,  2015,  1055,  1027,  1061,  1013,  1050,  1010,  2059,  2057,
         2071, 10197,  1085,  2011,  1057,  1027,  1597,  1048,  2078,  1006,
         1055,  1007,  1012,  7475,  2008,  1057,  2003,  1037, 25352,  9765,
         9581,  4263,  2005,  1085,  1012,  2003,  1996, 13827,  3893,  2030,
         4997,  1029,   102])"
2078,1,"['parameter', 'estimation', 'biased', 'estimator']", The sampling distribution and unbiasedness,seg_259,we conclude this section by returning to the estimation of the parameter µ. apart from the (biased) estimator in quick exercise 19.2 we also considered,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2057, 16519,  2023,  2930,  2011,  4192,  2000,  1996, 24155,
         1997,  1996, 16381,  1085,  1012,  4237,  2013,  1996,  1006, 25352,
         1007,  9765,  9581,  4263,  1999,  4248,  6912,  2539,  1012,  1016,
         2057,  2036,  2641,   102])"
2079,1,"['mean', 'variance', 'sample', 'sample variance', 'sample mean']", The sampling distribution and unbiasedness,seg_259,the sample mean x̄n and sample variance sn,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  1996,  7099,  2812,  1060,  2078,  1998,  7099, 23284,  1055,
         2078,   102])"
2080,1,['estimators'], The sampling distribution and unbiasedness,seg_259,2 as possible estimators for µ.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([ 101, 1016, 2004, 2825, 9765, 9581, 6591, 2005, 1085, 1012,  102])"
2081,1,"['parameter', 'estimators', 'unbiased', 'unbiased estimators']", The sampling distribution and unbiasedness,seg_259,these are both unbiased estimators for the parameter µ. this is a direct consequence of a more general property of x̄n and sn,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([  101,  2122,  2024,  2119,  4895, 11607,  6924,  9765,  9581,  6591,
         2005,  1996, 16381,  1085,  1012,  2023,  2003,  1037,  3622,  9509,
         1997,  1037,  2062,  2236,  3200,  1997,  1060,  2078,  1998,  1055,
         2078,   102])"
2082,0,[], The sampling distribution and unbiasedness,seg_259,"2 , which is discussed in the next section.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 16227,  4353,  1998,  4895, 11607,  6924,  2791])","tensor([ 101, 1016, 1010, 2029, 2003, 6936, 1999, 1996, 2279, 2930, 1012,  102])"
2083,1,"['estimators', 'variance', 'unbiased', 'unbiased estimators', 'expectation', 'distribution', 'model']", Unbiased estimators for expectation and variance,seg_261,"sometimes the quantity of interest can be described by the expectation or variance of the model distribution, and is it irrelevant whether this distribution is of a parametric type. in this section we propose unbiased estimators for these distribution features.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2823,  1996, 11712,  1997,  3037,  2064,  2022,  2649,  2011,
         1996, 17626,  2030, 23284,  1997,  1996,  2944,  4353,  1010,  1998,
         2003,  2009, 22537,  3251,  2023,  4353,  2003,  1997,  1037, 11498,
        12589,  2828,  1012,  1999,  2023,  2930,  2057, 16599,  4895, 11607,
         6924,  9765,  9581,  6591,  2005,  2122,  4353,  2838,  1012,   102])"
2084,1,"['estimators', 'variance', 'random sample', 'sample', 'random', 'expectation', 'distribution']", Unbiased estimators for expectation and variance,seg_261,"unbiased estimators for expectation and variance. suppose x1, x2, . . . , xn is a random sample from a distribution with finite expectation µ and finite variance σ2. then",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998,
        23284,  1012,  6814,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  2003,  1037,  6721,  7099,  2013,
         1037,  4353,  2007, 10713, 17626,  1085,  1998, 10713, 23284,  1173,
         2475,  1012,  2059,   102])"
2085,1,"['unbiased estimator', 'estimator', 'unbiased']", Unbiased estimators for expectation and variance,seg_261,is an unbiased estimator for µ and,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1085,  1998,   102])"
2086,1,"['unbiased estimator', 'estimator', 'unbiased']", Unbiased estimators for expectation and variance,seg_261,is an unbiased estimator for σ2.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1173,  2475,  1012,   102])"
2087,0,[], Unbiased estimators for expectation and variance,seg_261,the second statement says e[sn,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([ 101, 1996, 2117, 4861, 2758, 1041, 1031, 1055, 2078,  102])"
2088,0,[], Unbiased estimators for expectation and variance,seg_261,"2] = σ2. to see this, use linearity of expecta-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([ 101, 1016, 1033, 1027, 1173, 2475, 1012, 2000, 2156, 2023, 1010, 2224,
        7399, 3012, 1997, 5987, 2050, 1011,  102])"
2089,0,['n'], Unbiased estimators for expectation and variance,seg_261,tions to write n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101, 14841,  5644,  2000,  4339,  1050,   102])"
2090,1,"['random', 'random variable', 'variable']", Unbiased estimators for expectation and variance,seg_261,"since e[x̄n] = µ, we have e[xi − x̄n] = e[xi]−e[x̄n] = 0. now note that for any random variable y with e[y ] = 0, we have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([ 101, 2144, 1041, 1031, 1060, 2078, 1033, 1027, 1085, 1010, 2057, 2031,
        1041, 1031, 8418, 1597, 1060, 2078, 1033, 1027, 1041, 1031, 8418, 1033,
        1597, 2063, 1031, 1060, 2078, 1033, 1027, 1014, 1012, 2085, 3602, 2008,
        2005, 2151, 6721, 8023, 1061, 2007, 1041, 1031, 1061, 1033, 1027, 1014,
        1010, 2057, 2031,  102])"
2091,0,[], Unbiased estimators for expectation and variance,seg_261,note that we can write,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([ 101, 3602, 2008, 2057, 2064, 4339,  102])"
2092,1,"['variances', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Unbiased estimators for expectation and variance,seg_261,then from the rules concerning variances of sums of independent random variables we find that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2059,  2013,  1996,  3513,  7175, 23284,  2015,  1997, 20571,
         1997,  2981,  6721, 10857,  2057,  2424,  2008,   102])"
2093,0,[], Unbiased estimators for expectation and variance,seg_261,this explains why we divide by n− 1 in the formula for sn,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2023,  7607,  2339,  2057, 11443,  2011,  1050, 22543,  1015,
         1999,  1996,  5675,  2005,  1055,  2078,   102])"
2094,1,['case'], Unbiased estimators for expectation and variance,seg_261,2 ; only in this case,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([ 101, 1016, 1025, 2069, 1999, 2023, 2553,  102])"
2095,1,"['variance', 'unbiased', 'estimates', 'estimator', 'unbiased estimator', 'bias']", Unbiased estimators for expectation and variance,seg_261,"sn 2 is an unbiased estimator for the “true” variance σ2. if we would divide by n instead of n− 1, we would obtain an estimator with negative bias; it would systematically produce too-small estimates for σ2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  1055,  2078,  1016,  2003,  2019,  4895, 11607,  6924,  9765,
         9581,  4263,  2005,  1996,  1523,  2995,  1524, 23284,  1173,  2475,
         1012,  2065,  2057,  2052, 11443,  2011,  1050,  2612,  1997,  1050,
        22543,  1015,  1010,  2057,  2052,  6855,  2019,  9765,  9581,  4263,
         2007,  4997, 13827,  1025,  2009,  2052, 23087,  3965,  2205,  1011,
         2235, 10035,  2005,  1173,  2475,  1012,   102])"
2096,1,['estimator'], Unbiased estimators for expectation and variance,seg_261,quick exercise 19.3 consider the following estimator for σ2:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([ 101, 4248, 6912, 2539, 1012, 1017, 5136, 1996, 2206, 9765, 9581, 4263,
        2005, 1173, 2475, 1024,  102])"
2097,1,"['estimator', 'bias']", Unbiased estimators for expectation and variance,seg_261,"compute the bias e[vn2]− σ2 for this estimator, where you can keep computations simple by realizing that vn2 = (n − 1)sn",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101, 24134,  1996, 13827,  1041,  1031,  1058,  2078,  2475,  1033,
         1597,  1173,  2475,  2005,  2023,  9765,  9581,  4263,  1010,  2073,
         2017,  2064,  2562, 22334,  2015,  3722,  2011,  9301,  2008,  1058,
         2078,  2475,  1027,  1006,  1050,  1597,  1015,  1007,  1055,  2078,
          102])"
2098,0,[], Unbiased estimators for expectation and variance,seg_261,unbiasedness does not always carry over,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  4895, 11607,  6924,  2791,  2515,  2025,  2467,  4287,  2058,
          102])"
2099,0,[], Unbiased estimators for expectation and variance,seg_261,we have seen that sn,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([ 101, 2057, 2031, 2464, 2008, 1055, 2078,  102])"
2100,1,"['function', 'variance', 'unbiased', 'inequality', 'estimator', 'unbiased estimator', 'case']", Unbiased estimators for expectation and variance,seg_261,"2 is an unbiased estimator for the “true” variance σ2. a natural question is whether sn is again an unbiased estimator for σ. this is not the case. since the function g(x) = x2 is strictly convex, jensen’s inequality yields that",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  1016,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,
         2005,  1996,  1523,  2995,  1524, 23284,  1173,  2475,  1012,  1037,
         3019,  3160,  2003,  3251,  1055,  2078,  2003,  2153,  2019,  4895,
        11607,  6924,  9765,  9581,  4263,  2005,  1173,  1012,  2023,  2003,
         2025,  1996,  2553,  1012,  2144,  1996,  3853,  1043,  1006,  1060,
         1007,  1027,  1060,  2475,  2003,  9975, 18309,  1010, 14857,  1521,
         1055, 16440, 16189,  2008,   102])"
2101,1,"['unbiased', 'biased', 'estimator', 'unbiased estimator']", Unbiased estimators for expectation and variance,seg_261,"which implies that e[sn] < σ. another example is the network arrivals, in which x̄n is an unbiased estimator for µ, whereas e−x̄n is positively biased",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2029, 12748,  2008,  1041,  1031,  1055,  2078,  1033,  1026,
         1173,  1012,  2178,  2742,  2003,  1996,  2897, 25470,  1010,  1999,
         2029,  1060,  2078,  2003,  2019,  4895, 11607,  6924,  9765,  9581,
         4263,  2005,  1085,  1010,  6168,  1041, 22543,  2595,  2078,  2003,
        13567, 25352,   102])"
2102,1,"['unbiased estimator', 'parameter', 'estimator', 'unbiased']", Unbiased estimators for expectation and variance,seg_261,"−µ with respect to e . these examples illustrate a general fact: unbiasedness does not always carry over, i.e., if t is an unbiased estimator for a parameter θ, then g(t ) does not have to be an unbiased estimator for g(θ).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  1597, 29659,  2007,  4847,  2000,  1041,  1012,  2122,  4973,
        19141,  1037,  2236,  2755,  1024,  4895, 11607,  6924,  2791,  2515,
         2025,  2467,  4287,  2058,  1010,  1045,  1012,  1041,  1012,  1010,
         2065,  1056,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,
         2005,  1037, 16381,  1162,  1010,  2059,  1043,  1006,  1056,  1007,
         2515,  2025,  2031,  2000,  2022,  2019,  4895, 11607,  6924,  9765,
         9581,  4263,  2005,  1043,  1006,  1162,  1007,  1012,   102])"
2103,1,"['expectations', 'unbiased', 'case']", Unbiased estimators for expectation and variance,seg_261,"however, there is one special case in which unbiasedness does carry over, namely if g(t ) = at + b. indeed, if t is unbiased for θ: e [t ] = θ, then by the change-of-units rule for expectations,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2174,  1010,  2045,  2003,  2028,  2569,  2553,  1999,  2029,
         4895, 11607,  6924,  2791,  2515,  4287,  2058,  1010,  8419,  2065,
         1043,  1006,  1056,  1007,  1027,  2012,  1009,  1038,  1012,  5262,
         1010,  2065,  1056,  2003,  4895, 11607,  6924,  2005,  1162,  1024,
         1041,  1031,  1056,  1033,  1027,  1162,  1010,  2059,  2011,  1996,
         2689,  1011,  1997,  1011,  3197,  3627,  2005, 10908,  1010,   102])"
2104,1,['unbiased'], Unbiased estimators for expectation and variance,seg_261,which means that at + b is unbiased for aθ + b.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4895, 11607,  6924,  9765,  9581,  6591,  2005, 17626,  1998, 23284])","tensor([  101,  2029,  2965,  2008,  2012,  1009,  1038,  2003,  4895, 11607,
         6924,  2005,  1037, 29725,  1009,  1038,  1012,   102])"
2105,1,['probability'], Solutions to the quick exercises,seg_263,19.1 write y for the number of xi equal to zero. denote the probability of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2539,  1012,  1015,  4339,  1061,  2005,  1996,  2193,  1997,
         8418,  5020,  2000,  5717,  1012, 19090,  1996,  9723,  1997,   102])"
2106,1,"['estimate', 'frequency', 'relative frequency']", Solutions to the quick exercises,seg_263,"−µ zero by p0, so that p0 = e . this means that µ = − ln(p0). hence if we estimate p0 by the relative frequency y/n, we can estimate µ by − ln(y/n).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1597, 29659,  5717,  2011,  1052,  2692,  1010,  2061,  2008,
         1052,  2692,  1027,  1041,  1012,  2023,  2965,  2008,  1085,  1027,
         1597,  1048,  2078,  1006,  1052,  2692,  1007,  1012,  6516,  2065,
         2057, 10197,  1052,  2692,  2011,  1996,  5816,  6075,  1061,  1013,
         1050,  1010,  2057,  2064, 10197,  1085,  2011,  1597,  1048,  2078,
         1006,  1061,  1013,  1050,  1007,  1012,   102])"
2107,1,"['function', 'inequality']", Solutions to the quick exercises,seg_263,"19.2 the function g(x) = − ln(x) is strictly convex, since g′′(x) = 1/x2 > 0. hence by jensen’s inequality",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2539,  1012,  1016,  1996,  3853,  1043,  1006,  1060,  1007,
         1027,  1597,  1048,  2078,  1006,  1060,  1007,  2003,  9975, 18309,
         1010,  2144,  1043,  1531,  1531,  1006,  1060,  1007,  1027,  1015,
         1013,  1060,  2475,  1028,  1014,  1012,  6516,  2011, 14857,  1521,
         1055, 16440,   102])"
2108,1,['bias'], Solutions to the quick exercises,seg_263,"−µ since we have seen that e[s] = p0 = e , it follows that e[u ] > − ln(e[s]) = − ln(e−µ) = µ. this means that u has positive bias.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1597, 29659,  2144,  2057,  2031,  2464,  2008,  1041,  1031,
         1055,  1033,  1027,  1052,  2692,  1027,  1041,  1010,  2009,  4076,
         2008,  1041,  1031,  1057,  1033,  1028,  1597,  1048,  2078,  1006,
         1041,  1031,  1055,  1033,  1007,  1027,  1597,  1048,  2078,  1006,
         1041, 22543, 29659,  1007,  1027,  1085,  1012,  2023,  2965,  2008,
         1057,  2038,  3893, 13827,  1012,   102])"
2109,1,['bias'], Solutions to the quick exercises,seg_263,we conclude that the bias of vn2 equals e[vn2]− σ2 = −σ2/n < 0.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2057, 16519,  2008,  1996, 13827,  1997,  1058,  2078,  2475,
        19635,  1041,  1031,  1058,  2078,  2475,  1033,  1597,  1173,  2475,
         1027,  1597, 29733,  2475,  1013,  1050,  1026,  1014,  1012,   102])"
2110,1,"['dataset', 'interval', 'uniform distribution', 'realization', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_265,"19.1 suppose our dataset is a realization of a random sample x1, x2, . . . , xn from a uniform distribution on the interval [−θ, θ], where θ is unknown.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1015,  6814,  2256,  2951, 13462,  2003,  1037,
        12393,  1997,  1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,  1037,  6375,
         4353,  2006,  1996, 13483,  1031,  1597, 29725,  1010,  1162,  1033,
         1010,  2073,  1162,  2003,  4242,  1012,   102])"
2111,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,is an unbiased estimator for θ2.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1162,  2475,  1012,   102])"
2112,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,"b. is √t also an unbiased estimator for θ? if not, argue whether it has",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2003,  1600,  2102,  2036,  2019,  4895, 11607,
         6924,  9765,  9581,  4263,  2005,  1162,  1029,  2065,  2025,  1010,
         7475,  3251,  2009,  2038,   102])"
2113,1,['bias'], Exercises,seg_265,positive or negative bias.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  3893,  2030,  4997, 13827,  1012,   102])"
2114,1,"['random', 'random variables', 'variables']", Exercises,seg_265,"19.2 suppose the random variables x1, x2, . . . , xn have the same expectation µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1016,  6814,  1996,  6721, 10857,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2031,  1996,  2168, 17626,  1085,  1012,   102])"
2115,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,2x1 + 1 3x2 + 1 6x3 an unbiased estimator for µ?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  2595,  2487,  1009,  1015,  1017,  2595,  2475,  1009,
         1015,  1020,  2595,  2509,  2019,  4895, 11607,  6924,  9765,  9581,
         4263,  2005,  1085,  1029,   102])"
2116,0,[], Exercises,seg_265,"b. under what conditions on constants a1, a2, . . . , an is",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  2104,  2054,  3785,  2006,  5377,  2015, 17350,
         1010, 22441,  1010,  1012,  1012,  1012,  1010,  2019,  2003,   102])"
2117,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,an unbiased estimator for µ?,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,  1085,
         1029,   102])"
2118,1,"['random', 'random variables', 'variables']", Exercises,seg_265,"19.3 suppose the random variables x1, x2, . . . , xn have the same expectation µ. for which constants a and b is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1017,  6814,  1996,  6721, 10857,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2031,  1996,  2168, 17626,  1085,  1012,  2005,  2029,  5377,  2015,
         1037,  1998,  1038,  2003,   102])"
2119,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,an unbiased estimator for µ?,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,  1085,
         1029,   102])"
2120,1,"['dataset', 'table', 'realization', 'random sample', 'sample', 'random', 'estimator', 'distribution', 'law of large numbers']", Exercises,seg_265,"19.4 recall exercise 17.5 about the number of cycles to pregnancy. suppose the dataset corresponding to the table in exercise 17.5 a is modeled as a realization of a random sample x1, x2, . . . , xn from a geo(p) distribution, where 0 < p < 1 is unknown. motivated by the law of large numbers, a natural estimator for p is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1018,  9131,  6912,  2459,  1012,  1019,  2055,
         1996,  2193,  1997, 12709,  2000, 10032,  1012,  6814,  1996,  2951,
        13462,  7978,  2000,  1996,  2795,  1999,  6912,  2459,  1012,  1019,
         1037,  2003, 14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2013,  1037, 20248,  1006,  1052,  1007,  4353,  1010,
         2073,  1014,  1026,  1052,  1026,  1015,  2003,  4242,  1012, 12774,
         2011,  1996,  2375,  1997,  2312,  3616,  1010,  1037,  3019,  9765,
         9581,  4263,  2005,  1052,  2003,   102])"
2121,1,"['estimator', 'biased', 'biased estimator']", Exercises,seg_265,a. check that t is a biased estimator for p and find out whether it has,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4638,  2008,  1056,  2003,  1037, 25352,  9765,
         9581,  4263,  2005,  1052,  1998,  2424,  2041,  3251,  2009,  2038,
          102])"
2122,1,['bias'], Exercises,seg_265,positive or negative bias.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  3893,  2030,  4997, 13827,  1012,   102])"
2123,1,"['probability', 'estimation']", Exercises,seg_265,b. in exercise 17.5 we discussed the estimation of the probability that a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1999,  6912,  2459,  1012,  1019,  2057,  6936,
         1996, 24155,  1997,  1996,  9723,  2008,  1037,   102])"
2124,1,"['relative frequency', 'probability', 'frequency']", Exercises,seg_265,woman becomes pregnant within three or fewer cycles. one possible estimator for this probability is the relative frequency of women that became pregnant within three cycles,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2450,  4150,  6875,  2306,  2093,  2030,  8491, 12709,  1012,
         2028,  2825,  9765,  9581,  4263,  2005,  2023,  9723,  2003,  1996,
         5816,  6075,  1997,  2308,  2008,  2150,  6875,  2306,  2093, 12709,
          102])"
2125,1,"['unbiased estimator', 'estimator', 'probability', 'unbiased']", Exercises,seg_265,show that s is an unbiased estimator for this probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2265,  2008,  1055,  2003,  2019,  4895, 11607,  6924,  9765,
         9581,  4263,  2005,  2023,  9723,  1012,   102])"
2126,1,"['dataset', 'realization', 'random sample', 'sample', 'random', 'estimator', 'expectation', 'distribution']", Exercises,seg_265,"19.5 suppose a dataset is modeled as a realization of a random sample x1, x2, . . . , xn from an exp(λ) distribution, where λ > 0 is unknown. let µ denote the corresponding expectation and let mn denote the minimum of x1, x2, . . . , xn. recall from exercise 8.18 that mn has an exp(nλ) distribution. find out for which constant c the estimator",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1019,  6814,  1037,  2951, 13462,  2003, 14440,
         2004,  1037, 12393,  1997,  1037,  6721,  7099,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,
         2019,  4654,  2361,  1006,  1165,  1007,  4353,  1010,  2073,  1165,
         1028,  1014,  2003,  4242,  1012,  2292,  1085, 19090,  1996,  7978,
        17626,  1998,  2292, 24098, 19090,  1996,  6263,  1997,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1012,  9131,  2013,  6912,  1022,  1012,  2324,  2008, 24098,  2038,
         2019,  4654,  2361,  1006,  1050, 29727,  1007,  4353,  1012,  2424,
         2041,  2005,  2029,  5377,  1039,  1996,  9765,  9581,  4263,   102])"
2127,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,is an unbiased estimator for µ.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1085,  1012,   102])"
2128,1,['dataset'], Exercises,seg_265,19.6 consider the following dataset of lifetimes of ball bearings in hours.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1020,  5136,  1996,  2206,  2951, 13462,  1997,
         6480,  2015,  1997,  3608, 21714,  1999,  2847,  1012,   102])"
2129,1,"['dataset', 'realization', 'random variable', 'random sample', 'sample', 'random', 'variable']", Exercises,seg_265,"one is interested in estimating the minimum lifetime of this type of ball bearing. the dataset is modeled as a realization of a random sample x1, . . . , xn. each random variable xi is represented as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2028,  2003,  4699,  1999,  9765, 22835,  1996,  6263,  6480,
         1997,  2023,  2828,  1997,  3608,  7682,  1012,  1996,  2951, 13462,
         2003, 14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,  1060,
         2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1012,  2169,
         6721,  8023,  8418,  2003,  3421,  2004,   102])"
2130,1,"['parameter', 'unbiased estimator', 'unbiased', 'estimator', 'distribution', 'model']", Exercises,seg_265,where yi has an exp(λ) distribution and δ > 0 is an unknown parameter that is supposed to model the minimum lifetime. the objective is to construct an unbiased estimator for δ. it is known that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073, 12316,  2038,  2019,  4654,  2361,  1006,  1165,  1007,
         4353,  1998,  1158,  1028,  1014,  2003,  2019,  4242, 16381,  2008,
         2003,  4011,  2000,  2944,  1996,  6263,  6480,  1012,  1996,  7863,
         2003,  2000,  9570,  2019,  4895, 11607,  6924,  9765,  9581,  4263,
         2005,  1158,  1012,  2009,  2003,  2124,  2008,   102])"
2131,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,is an unbiased estimator for 1/λ.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1015,  1013,  1165,  1012,   102])"
2132,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_265,b. construct an unbiased estimator for δ.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  9570,  2019,  4895, 11607,  6924,  9765,  9581,
         4263,  2005,  1158,  1012,   102])"
2133,1,"['dataset', 'estimate']", Exercises,seg_265,c. use the dataset to compute an estimate for the minimum lifetime δ. you,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2224,  1996,  2951, 13462,  2000, 24134,  2019,
        10197,  2005,  1996,  6263,  6480,  1158,  1012,  2017,   102])"
2134,1,"['average', 'data']", Exercises,seg_265,may use that the average lifetime of the data is 8563.5.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2089, 2224, 2008, 1996, 2779, 6480, 1997, 1996, 2951, 2003, 5594,
        2575, 2509, 1012, 1019, 1012,  102])"
2135,1,['probabilities'], Exercises,seg_265,"19.7 leaves are divided into four different types: starchy-green, sugary-white, starchy-white, and sugary-green. according to genetic theory, the types occur with probabilities 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1021,  3727,  2024,  4055,  2046,  2176,  2367,
         4127,  1024,  2732, 11714,  1011,  2665,  1010,  5699,  2100,  1011,
         2317,  1010,  2732, 11714,  1011,  2317,  1010,  1998,  5699,  2100,
         1011,  2665,  1012,  2429,  2000,  7403,  3399,  1010,  1996,  4127,
         5258,  2007,  4013,  3676, 14680,  1015,   102])"
2136,1,"['random variable', 'random', 'distribution', 'variable']", Exercises,seg_265,"4 (θ + 2), 1 4θ, 1 4 (1 − θ), and 1 4 (1 − θ), respectively, where 0 < θ < 1. suppose one has n leaves. then the number of starchy-green leaves is modeled by a random variable n1 with a bin(n, p1) distribution, where p1 = 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1006,  1162,  1009,  1016,  1007,  1010,  1015,  1018,
        29725,  1010,  1015,  1018,  1006,  1015,  1597,  1162,  1007,  1010,
         1998,  1015,  1018,  1006,  1015,  1597,  1162,  1007,  1010,  4414,
         1010,  2073,  1014,  1026,  1162,  1026,  1015,  1012,  6814,  2028,
         2038,  1050,  3727,  1012,  2059,  1996,  2193,  1997,  2732, 11714,
         1011,  2665,  3727,  2003, 14440,  2011,  1037,  6721,  8023,  1050,
         2487,  2007,  1037,  8026,  1006,  1050,  1010,  1052,  2487,  1007,
         4353,  1010,  2073,  1052,  2487,  1027,  1015,   102])"
2137,1,"['random variable', 'random', 'distribution', 'variable']", Exercises,seg_265,"4 (θ + 2), and the number of sugary-white leaves is modeled by a random variable n2 with a bin(n, p2) distribution, where p2 = 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1006,  1162,  1009,  1016,  1007,  1010,  1998,  1996,
         2193,  1997,  5699,  2100,  1011,  2317,  3727,  2003, 14440,  2011,
         1037,  6721,  8023,  1050,  2475,  2007,  1037,  8026,  1006,  1050,
         1010,  1052,  2475,  1007,  4353,  1010,  2073,  1052,  2475,  1027,
         1015,   102])"
2138,1,['table'], Exercises,seg_265,4θ. the following table lists the counts for the progeny of self-fertilized heterozygotes among 3839 leaves.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018, 29725,  1012,  1996,  2206,  2795,  7201,  1996,  9294,
         2005,  1996,  4013, 17487,  1997,  2969,  1011, 10768, 28228, 28931,
        21770, 10624,  9096,  3995,  4570,  2426,  4229, 23499,  3727,  1012,
          102])"
2139,0,[], Exercises,seg_265,starchy-green 1997 sugary-white 32 starchy-white 906 sugary-green 904,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2732, 11714,  1011,  2665,  2722,  5699,  2100,  1011,  2317,
         3590,  2732, 11714,  1011,  2317,  3938,  2575,  5699,  2100,  1011,
         2665,  3938,  2549,   102])"
2140,1,['estimators'], Exercises,seg_265,consider the following two estimators for θ:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 5136, 1996, 2206, 2048, 9765, 9581, 6591, 2005, 1162, 1024,  102])"
2141,1,"['estimators', 'unbiased', 'unbiased estimators']", Exercises,seg_265,a. check that both t1 and t2 are unbiased estimators for θ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4638,  2008,  2119,  1056,  2487,  1998,  1056,
         2475,  2024,  4895, 11607,  6924,  9765,  9581,  6591,  2005,  1162,
         1012,   102])"
2142,1,['estimators'], Exercises,seg_265,b. compute the value of both estimators for θ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  3643,  1997,  2119,  9765,  9581,
         6591,  2005,  1162,  1012,   102])"
2143,1,"['regression', 'linear', 'intercept', 'regression model', 'linear regression', 'model', 'linear regression model']", Exercises,seg_265,"19.8 recall the black cherry trees example from exercise 17.9, modeled by a linear regression model without intercept",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 1., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1022,  9131,  1996,  2304,  9115,  3628,  2742,
         2013,  6912,  2459,  1012,  1023,  1010, 14440,  2011,  1037,  7399,
        26237,  2944,  2302, 19115,   102])"
2144,1,"['parameter', 'estimators', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_265,"where u1, u2, . . . , un are independent random variables with e[ui] = 0 and var(ui) = σ2. we discussed three estimators for the parameter β:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1057,  2487,  1010, 23343,  1010,  1012,  1012,  1012,
         1010,  4895,  2024,  2981,  6721, 10857,  2007,  1041,  1031, 21318,
         1033,  1027,  1014,  1998, 13075,  1006, 21318,  1007,  1027,  1173,
         2475,  1012,  2057,  6936,  2093,  9765,  9581,  6591,  2005,  1996,
        16381,  1156,  1024,   102])"
2145,1,"['estimators', 'unbiased']", Exercises,seg_265,show that all three estimators are unbiased for β.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2265,  2008,  2035,  2093,  9765,  9581,  6591,  2024,  4895,
        11607,  6924,  2005,  1156,  1012,   102])"
2146,1,"['dataset', 'probability', 'estimate', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_265,"19.9 consider the network example where the dataset is modeled as a realization of a random sample x1, x2, . . . , xn from a pois(µ) distribution. we estimate the probability of zero arrivals e−µ by means of t = e−x̄n . check that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2539,  1012,  1023,  5136,  1996,  2897,  2742,  2073,  1996,
         2951, 13462,  2003, 14440,  2004,  1037, 12393,  1997,  1037,  6721,
         7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  2013,  1037, 13433,  2483,  1006,  1085,  1007,
         4353,  1012,  2057, 10197,  1996,  9723,  1997,  5717, 25470,  1041,
        22543, 29659,  2011,  2965,  1997,  1056,  1027,  1041, 22543,  2595,
         2078,  1012,  4638,  2008,   102])"
2147,1,['distribution'], Exercises,seg_265,"−z/n hint: write t = e , where z = x1 + x2 + · · · + xn has a pois(nµ) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  1597,  2480,  1013,  1050,  9374,  1024,  4339,  1056,  1027,
         1041,  1010,  2073,  1062,  1027,  1060,  2487,  1009,  1060,  2475,
         1009,  1087,  1087,  1087,  1009,  1060,  2078,  2038,  1037, 13433,
         2483,  1006,  1050, 29659,  1007,  4353,  1012,   102])"
2148,1,"['mean', 'parameter', 'estimators', 'parameter of interest', 'variance', 'mean squared error', 'mse', 'unbiased', 'estimator', 'unbiased estimators', 'bias', 'error']", Efficiency and mean squared error,seg_267,"in the previous chapter we introduced the notion of unbiasedness as a desirable property of an estimator. if several unbiased estimators for the same parameter of interest exist, we need a criterion for comparison of these estimators. a natural criterion is some measure of spread of the estimators around the parameter of interest. for unbiased estimators we will use variance. for arbitrary estimators we introduce the notion of mean squared error (mse), which combines variance and bias.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        1., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([ 8122,  1998,  2812, 19942,  7561])","tensor([  101,  1999,  1996,  3025,  3127,  2057,  3107,  1996,  9366,  1997,
         4895, 11607,  6924,  2791,  2004,  1037, 16166,  3200,  1997,  2019,
         9765,  9581,  4263,  1012,  2065,  2195,  4895, 11607,  6924,  9765,
         9581,  6591,  2005,  1996,  2168, 16381,  1997,  3037,  4839,  1010,
         2057,  2342,  1037, 19229,  2005,  7831,  1997,  2122,  9765,  9581,
         6591,  1012,  1037,  3019, 19229,  2003,  2070,  5468,  1997,  3659,
         1997,  1996,  9765,  9581,  6591,  2105,  1996, 16381,  1997,  3037,
         1012,  2005,  4895, 11607,  6924,  9765,  9581,  6591,  2057,  2097,
         2224, 23284,  1012,  2005, 15275,  9765,  9581,  6591,  2057,  8970,
         1996,  9366,  1997,  2812, 19942,  7561,  1006,  5796,  2063,  1007,
         1010,  2029, 13585, 23284,  1998, 13827,  1012,   102])"
2149,1,"['set', 'estimate']", Estimating the number of German tanks,seg_269,"in this section we come back to the problem of estimating german war production as discussed in section 1.5. we consider serial numbers on tanks, recoded to numbers running from 1 to some unknown largest number n . given is a subset of n numbers of this set. the objective is to estimate the total number of tanks n on the basis of the observed serial numbers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  1999,  2023,  2930,  2057,  2272,  2067,  2000,  1996,  3291,
         1997,  9765, 22835,  2446,  2162,  2537,  2004,  6936,  1999,  2930,
         1015,  1012,  1019,  1012,  2057,  5136,  7642,  3616,  2006,  7286,
         1010, 28667, 10244,  2094,  2000,  3616,  2770,  2013,  1015,  2000,
         2070,  4242,  2922,  2193,  1050,  1012,  2445,  2003,  1037, 16745,
         1997,  1050,  3616,  1997,  2023,  2275,  1012,  1996,  7863,  2003,
         2000, 10197,  1996,  2561,  2193,  1997,  7286,  1050,  2006,  1996,
         3978,  1997,  1996,  5159,  7642,  3616,  1012,   102])"
2150,1,"['dependent', 'dataset', 'estimators', 'probability', 'realization', 'unbiased', 'random sample', 'unbiased estimators', 'random variables', 'without replacement', 'sample', 'random', 'variables', 'replacement']", Estimating the number of German tanks,seg_269,"denote the observed distinct serial numbers by x1, x2, . . . , xn. this dataset can be modeled as a realization of random variables x1, x2, . . . , xn representing n draws without replacement from the numbers 1, 2, . . . , n with equal probability. note that in this example our dataset is not a realization of a random sample, because the random variables x1, x2, . . . , xn are dependent. we propose two unbiased estimators. the first one is based on the sample",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101, 19090,  1996,  5159,  5664,  7642,  3616,  2011,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1012,  2023,  2951, 13462,  2064,  2022, 14440,  2004,  1037, 12393,
         1997,  6721, 10857,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  5052,  1050,  9891,  2302,  6110,
         2013,  1996,  3616,  1015,  1010,  1016,  1010,  1012,  1012,  1012,
         1010,  1050,  2007,  5020,  9723,  1012,  3602,  2008,  1999,  2023,
         2742,  2256,  2951, 13462,  2003,  2025,  1037, 12393,  1997,  1037,
         6721,  7099,  1010,  2138,  1996,  6721, 10857,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2024,
         7790,  1012,  2057, 16599,  2048,  4895, 11607,  6924,  9765,  9581,
         6591,  1012,  1996,  2034,  2028,  2003,  2241,  2006,  1996,  7099,
          102])"
2151,1,['sample'], Estimating the number of German tanks,seg_269,and the second one is based on the sample maximum,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([ 101, 1998, 1996, 2117, 2028, 2003, 2241, 2006, 1996, 7099, 4555,  102])"
2152,1,"['mean', 'sample', 'estimator', 'sample mean']", Estimating the number of German tanks,seg_269,an estimator based on the sample mean,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([ 101, 2019, 9765, 9581, 4263, 2241, 2006, 1996, 7099, 2812,  102])"
2153,1,"['mean', 'unbiased', 'sample', 'random', 'estimator', 'random variables', 'expectation', 'sample mean', 'dependent', 'unbiased estimator', 'variables']", Estimating the number of German tanks,seg_269,"to construct an unbiased estimator for n based on the sample mean, we start by computing the expectation of x̄n. the linearity-of-expectations rule also applies to dependent random variables, so that",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2000,  9570,  2019,  4895, 11607,  6924,  9765,  9581,  4263,
         2005,  1050,  2241,  2006,  1996,  7099,  2812,  1010,  2057,  2707,
         2011,  9798,  1996, 17626,  1997,  1060,  2078,  1012,  1996,  7399,
         3012,  1011,  1997,  1011, 10908,  3627,  2036, 12033,  2000,  7790,
         6721, 10857,  1010,  2061,  2008,   102])"
2154,1,"['marginal distribution', 'marginal', 'distribution']", Estimating the number of German tanks,seg_269,in section 9.3 we saw that the marginal distribution of each xi is the same:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  1999,  2930,  1023,  1012,  1017,  2057,  2387,  2008,  1996,
        14785,  4353,  1997,  2169,  8418,  2003,  1996,  2168,  1024,   102])"
2155,1,['expectation'], Estimating the number of German tanks,seg_269,therefore the expectation of each xi is given by,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  3568,  1996, 17626,  1997,  2169,  8418,  2003,  2445,  2011,
          102])"
2156,0,[], Estimating the number of German tanks,seg_269,this directly implies that,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2023,  3495, 12748,  2008,   102])"
2157,1,"['unbiased estimator', 'estimator', 'unbiased']", Estimating the number of German tanks,seg_269,"is an unbiased estimator for n , since the change-of-units rule yields that",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1050,  1010,  2144,  1996,  2689,  1011,  1997,  1011,  3197,  3627,
        16189,  2008,   102])"
2158,0,[], Estimating the number of German tanks,seg_269,quick exercise 20.1 suppose we have observed tanks with (recoded) serial numbers,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  4248,  6912,  2322,  1012,  1015,  6814,  2057,  2031,  5159,
         7286,  2007,  1006, 28667, 10244,  2094,  1007,  7642,  3616,   102])"
2159,1,['estimator'], Estimating the number of German tanks,seg_269,compute the value of the estimator t1 for the total number of tanks.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101, 24134,  1996,  3643,  1997,  1996,  9765,  9581,  4263,  1056,
         2487,  2005,  1996,  2561,  2193,  1997,  7286,  1012,   102])"
2160,1,"['sample', 'estimator']", Estimating the number of German tanks,seg_269,an estimator based on the sample maximum,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([ 101, 2019, 9765, 9581, 4263, 2241, 2006, 1996, 7099, 4555,  102])"
2161,1,"['probability', 'without replacement', 'unbiased', 'estimator', 'expectation', 'distribution', 'unbiased estimator', 'replacement', 'binomial', 'binomial distribution']", Estimating the number of German tanks,seg_269,"to construct an unbiased estimator for n based on the maximum, we first compute the expectation of mn. we start by computing the probability that mn = k, where k takes the values n, . . . , n . similar to the combinatorics used in section 4.3 to derive the binomial distribution, the number of ways to draw n numbers without replacement from 1, 2, . . . , n is (n",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2000,  9570,  2019,  4895, 11607,  6924,  9765,  9581,  4263,
         2005,  1050,  2241,  2006,  1996,  4555,  1010,  2057,  2034, 24134,
         1996, 17626,  1997, 24098,  1012,  2057,  2707,  2011,  9798,  1996,
         9723,  2008, 24098,  1027,  1047,  1010,  2073,  1047,  3138,  1996,
         5300,  1050,  1010,  1012,  1012,  1012,  1010,  1050,  1012,  2714,
         2000,  1996, 22863, 23207,  6558,  2109,  1999,  2930,  1018,  1012,
         1017,  2000, 18547,  1996,  8026, 20936,  2389,  4353,  1010,  1996,
         2193,  1997,  3971,  2000,  4009,  1050,  3616,  2302,  6110,  2013,
         1015,  1010,  1016,  1010,  1012,  1012,  1012,  1010,  1050,  2003,
         1006,  1050,   102])"
2162,0,['n'], Estimating the number of German tanks,seg_269,n). hence each,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([ 101, 1050, 1007, 1012, 6516, 2169,  102])"
2163,1,['probability'], Estimating the number of German tanks,seg_269,combination has probability 1/(n,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([ 101, 5257, 2038, 9723, 1015, 1013, 1006, 1050,  102])"
2164,1,['expectation'], Estimating the number of German tanks,seg_269,thus the expectation of mn is given by,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2947,  1996, 17626,  1997, 24098,  2003,  2445,  2011,   102])"
2165,0,[], Estimating the number of German tanks,seg_269,how to continue the computation of e[mn]? we use a trick: we start by rearranging,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2129,  2000,  3613,  1996, 22334,  1997,  1041,  1031, 24098,
         1033,  1029,  2057,  2224,  1037,  7577,  1024,  2057,  2707,  2011,
         4373, 24388,  2075,   102])"
2166,0,['n'], Estimating the number of German tanks,seg_269,this holds for any n and any n ≤ n . in particular we could replace n by n + 1 and n by n + 1:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([ 101, 2023, 4324, 2005, 2151, 1050, 1998, 2151, 1050, 1608, 1050, 1012,
        1999, 3327, 2057, 2071, 5672, 1050, 2011, 1050, 1009, 1015, 1998, 1050,
        2011, 1050, 1009, 1015, 1024,  102])"
2167,1,"['summation', 'variable']", Estimating the number of German tanks,seg_269,"changing the summation variable to k = j − 1, we obtain",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  5278,  1996,  7680, 28649,  8023,  2000,  1047,  1027,  1046,
         1597,  1015,  1010,  2057,  6855,   102])"
2168,0,[], Estimating the number of German tanks,seg_269,"this is exactly what we need to finish the computation of e[mn]. substituting (20.2) in what we obtained earlier, we find",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2023,  2003,  3599,  2054,  2057,  2342,  2000,  3926,  1996,
        22334,  1997,  1041,  1031, 24098,  1033,  1012,  4942, 21532,  1006,
         2322,  1012,  1016,  1007,  1999,  2054,  2057,  4663,  3041,  1010,
         2057,  2424,   102])"
2169,0,['n'], Estimating the number of German tanks,seg_269,quick exercise 20.2 choosing n = n in this formula yields e[mn ] = n . can you argue that this is the right answer without doing any computations?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  4248,  6912,  2322,  1012,  1016, 10549,  1050,  1027,  1050,
         1999,  2023,  5675, 16189,  1041,  1031, 24098,  1033,  1027,  1050,
         1012,  2064,  2017,  7475,  2008,  2023,  2003,  1996,  2157,  3437,
         2302,  2725,  2151, 22334,  2015,  1029,   102])"
2170,0,[], Estimating the number of German tanks,seg_269,with the formula for e[mn] we can derive immediately that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2007,  1996,  5675,  2005,  1041,  1031, 24098,  1033,  2057,
         2064, 18547,  3202,  2008,   102])"
2171,1,"['unbiased estimator', 'estimator', 'unbiased']", Estimating the number of German tanks,seg_269,"is an unbiased estimator for n , since by the change-of-units rule,",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1050,  1010,  2144,  2011,  1996,  2689,  1011,  1997,  1011,  3197,
         3627,  1010,   102])"
2172,1,['estimator'], Estimating the number of German tanks,seg_269,quick exercise 20.3 compute the value of estimator t2 for the total number of tanks on basis of the observed numbers from quick exercise 20.1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9765, 22835,  1996,  2193,  1997,  2446,  7286])","tensor([  101,  4248,  6912,  2322,  1012,  1017, 24134,  1996,  3643,  1997,
         9765,  9581,  4263,  1056,  2475,  2005,  1996,  2561,  2193,  1997,
         7286,  2006,  3978,  1997,  1996,  5159,  3616,  2013,  4248,  6912,
         2322,  1012,  1015,  1012,   102])"
2173,1,"['vary', 'parameter', 'estimators', 'parameter of interest', 'histograms', 'probability', 'simulation', 'without replacement', 'unbiased', 'histogram', 'distributions', 'replacement']", Variance of an estimator,seg_271,"in the previous section we saw that we can construct two completely different estimators for the total number of tanks n that are both unbiased. the obvious question is: which of the two is better? to answer this question, we investigate how both estimators vary around the parameter of interest n . although we could in principle compute the distributions of t1 and t2, we carry out a small simulation study instead. take n = 1000 and n = 10 fixed. we draw 10 numbers, without replacement, from 1, 2, . . . , 1000 and compute the value of the estimators t1 and t2. we repeat this two thousand times, so that we have 2000 values for both estimators. in figure 20.1 we have displayed the histogram of the 2000 values for t1 on the left and the histogram of the 2000 values for t2 on the right. from the histograms, which reflect the probability",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  1999,  1996,  3025,  2930,  2057,  2387,  2008,  2057,  2064,
         9570,  2048,  3294,  2367,  9765,  9581,  6591,  2005,  1996,  2561,
         2193,  1997,  7286,  1050,  2008,  2024,  2119,  4895, 11607,  6924,
         1012,  1996,  5793,  3160,  2003,  1024,  2029,  1997,  1996,  2048,
         2003,  2488,  1029,  2000,  3437,  2023,  3160,  1010,  2057,  8556,
         2129,  2119,  9765,  9581,  6591,  8137,  2105,  1996, 16381,  1997,
         3037,  1050,  1012,  2348,  2057,  2071,  1999,  6958, 24134,  1996,
        20611,  1997,  1056,  2487,  1998,  1056,  2475,  1010,  2057,  4287,
         2041,  1037,  2235, 12504,  2817,  2612,  1012,  2202,  1050,  1027,
         6694,  1998,  1050,  1027,  2184,  4964,  1012,  2057,  4009,  2184,
         3616,  1010,  2302,  6110,  1010,  2013,  1015,  1010,  1016,  1010,
         1012,  1012,  1012,  1010,  6694,  1998, 24134,  1996,  3643,  1997,
         1996,  9765,  9581,  6591,  1056,  2487,  1998,  1056,  2475,  1012,
         2057,  9377,  2023,  2048,  4595,  2335,  1010,  2061,  2008,  2057,
         2031,  2456,  5300,  2005,  2119,  9765,  9581,  6591,  1012,  1999,
         3275,  2322,  1012,  1015,  2057,  2031,  6913,  1996,  2010,  3406,
        13113,  1997,  1996,  2456,  5300,  2005,  1056,  2487,  2006,  1996,
         2187,  1998,  1996,  2010,  3406, 13113,  1997,  1996,  2456,  5300,
         2005,  1056,  2475,  2006,  1996,  2157,  1012,  2013,  1996,  2010,
         3406, 13113,  2015,  1010,  2029,  8339,  1996,  9723,   102])"
2174,1,"['vary', 'functions', 'estimators', 'random variable', 'parameter', 'histograms', 'parameter of interest', 'variation', 'unbiased', 'estimator', 'variance', 'estimates', 'distributions', 'random', 'variable']", Variance of an estimator,seg_271,"mass functions of both estimators, we see that the distributions of t1 and t2 are of completely different types. as can be expected from the fact that both estimators are unbiased, the values vary around the parameter of interest n = 1000. the most important difference between the histograms is that the variation in the values of t2 is less than the variation in the values of t1. this suggests that estimator t2 estimates the total number of tanks more efficiently than estimator t1, in the sense that it produces estimates that are more concentrated around the parameter of interest n than estimates produced by t1. recall that the variance measures the spread of a random variable. hence the previous discussion motivates the use of the variance of an estimator to evaluate its performance.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  3742,  4972,  1997,  2119,  9765,  9581,  6591,  1010,  2057,
         2156,  2008,  1996, 20611,  1997,  1056,  2487,  1998,  1056,  2475,
         2024,  1997,  3294,  2367,  4127,  1012,  2004,  2064,  2022,  3517,
         2013,  1996,  2755,  2008,  2119,  9765,  9581,  6591,  2024,  4895,
        11607,  6924,  1010,  1996,  5300,  8137,  2105,  1996, 16381,  1997,
         3037,  1050,  1027,  6694,  1012,  1996,  2087,  2590,  4489,  2090,
         1996,  2010,  3406, 13113,  2015,  2003,  2008,  1996,  8386,  1999,
         1996,  5300,  1997,  1056,  2475,  2003,  2625,  2084,  1996,  8386,
         1999,  1996,  5300,  1997,  1056,  2487,  1012,  2023,  6083,  2008,
         9765,  9581,  4263,  1056,  2475, 10035,  1996,  2561,  2193,  1997,
         7286,  2062, 18228,  2084,  9765,  9581,  4263,  1056,  2487,  1010,
         1999,  1996,  3168,  2008,  2009,  7137, 10035,  2008,  2024,  2062,
         8279,  2105,  1996, 16381,  1997,  3037,  1050,  2084, 10035,  2550,
         2011,  1056,  2487,  1012,  9131,  2008,  1996, 23284,  5761,  1996,
         3659,  1997,  1037,  6721,  8023,  1012,  6516,  1996,  3025,  6594,
         9587, 29068,  8520,  1996,  2224,  1997,  1996, 23284,  1997,  2019,
         9765,  9581,  4263,  2000, 16157,  2049,  2836,  1012,   102])"
2175,1,"['parameter', 'estimators', 'unbiased', 'efficient', 'unbiased estimators', 'estimator']", Variance of an estimator,seg_271,"efficiency. let t1 and t2 be two unbiased estimators for the same parameter θ. then estimator t2 is called more efficient than estimator t1 if var(t2) < var(t1), irrespective of the value of θ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  8122,  1012,  2292,  1056,  2487,  1998,  1056,  2475,  2022,
         2048,  4895, 11607,  6924,  9765,  9581,  6591,  2005,  1996,  2168,
        16381,  1162,  1012,  2059,  9765,  9581,  4263,  1056,  2475,  2003,
         2170,  2062,  8114,  2084,  9765,  9581,  4263,  1056,  2487,  2065,
        13075,  1006,  1056,  2475,  1007,  1026, 13075,  1006,  1056,  2487,
         1007,  1010, 20868,  6072,  5051, 15277,  1997,  1996,  3643,  1997,
         1162,  1012,   102])"
2176,0,[], Variance of an estimator,seg_271,let us compare t1 and t2 using this criterion. for t1 we have,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  2292,  2149, 12826,  1056,  2487,  1998,  1056,  2475,  2478,
         2023, 19229,  1012,  2005,  1056,  2487,  2057,  2031,   102])"
2177,1,"['random', 'random variables', 'distribution', 'variables', 'independent']", Variance of an estimator,seg_271,"although the xi are not independent, it is true that all pairs (xi, xj) with i = j have the same distribution (this follows in the same way in which we showed on page 122 that all xi have the same distribution). with the variance-of-the-sum rule for n random variables (see exercise 10.17), we find that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  2348,  1996,  8418,  2024,  2025,  2981,  1010,  2009,  2003,
         2995,  2008,  2035,  7689,  1006,  8418,  1010,  1060,  3501,  1007,
         2007,  1045,  1027,  1046,  2031,  1996,  2168,  4353,  1006,  2023,
         4076,  1999,  1996,  2168,  2126,  1999,  2029,  2057,  3662,  2006,
         3931, 13092,  2008,  2035,  8418,  2031,  1996,  2168,  4353,  1007,
         1012,  2007,  1996, 23284,  1011,  1997,  1011,  1996,  1011,  7680,
         3627,  2005,  1050,  6721, 10857,  1006,  2156,  6912,  2184,  1012,
         2459,  1007,  1010,  2057,  2424,  2008,   102])"
2178,0,[], Variance of an estimator,seg_271,"in exercises 9.18 and 10.18, we computed that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  1999, 11110,  1023,  1012,  2324,  1998,  2184,  1012,  2324,
         1010,  2057, 24806,  2008,   102])"
2179,0,[], Variance of an estimator,seg_271,we find therefore that,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([ 101, 2057, 2424, 3568, 2008,  102])"
2180,1,['variance'], Variance of an estimator,seg_271,obtaining the variance of t2 is a little more work. one can compute the variance of mn in a way that is very similar to the way we obtained e[mn]. the result is (see remark 20.1 for details),tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101, 11381,  1996, 23284,  1997,  1056,  2475,  2003,  1037,  2210,
         2062,  2147,  1012,  2028,  2064, 24134,  1996, 23284,  1997, 24098,
         1999,  1037,  2126,  2008,  2003,  2200,  2714,  2000,  1996,  2126,
         2057,  4663,  1041,  1031, 24098,  1033,  1012,  1996,  2765,  2003,
         1006,  2156, 17674,  2322,  1012,  1015,  2005,  4751,  1007,   102])"
2181,1,['variance'], Variance of an estimator,seg_271,"with the expression for the variance of mn, we derive",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  2007,  1996,  3670,  2005,  1996, 23284,  1997, 24098,  1010,
         2057, 18547,   102])"
2182,1,"['estimators', 'variances', 'efficient', 'case']", Variance of an estimator,seg_271,"we see that var(t2) < var(t1) for all n and n ≥ 2. hence t2 is always more efficient than t1, except when n = 1. in this case the variances are equal, simply because the estimators are the same—they both equal x1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  2057,  2156,  2008, 13075,  1006,  1056,  2475,  1007,  1026,
        13075,  1006,  1056,  2487,  1007,  2005,  2035,  1050,  1998,  1050,
         1609,  1016,  1012,  6516,  1056,  2475,  2003,  2467,  2062,  8114,
         2084,  1056,  2487,  1010,  3272,  2043,  1050,  1027,  1015,  1012,
         1999,  2023,  2553,  1996, 23284,  2015,  2024,  5020,  1010,  3432,
         2138,  1996,  9765,  9581,  6591,  2024,  1996,  2168,  1517,  2027,
         2119,  5020,  1060,  2487,  1012,   102])"
2183,1,"['relative efficiency', 'efficiency', 'case']", Variance of an estimator,seg_271,"the quotient var(t1) /var(t2), is called the relative efficiency of t2 with respect to t1. in our case the relative efficiency of t2 with respect to t1 equals",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  1996, 22035,  9515,  3372, 13075,  1006,  1056,  2487,  1007,
         1013, 13075,  1006,  1056,  2475,  1007,  1010,  2003,  2170,  1996,
         5816,  8122,  1997,  1056,  2475,  2007,  4847,  2000,  1056,  2487,
         1012,  1999,  2256,  2553,  1996,  5816,  8122,  1997,  1056,  2475,
         2007,  4847,  2000,  1056,  2487, 19635,   102])"
2184,1,"['sample', 'sample size']", Variance of an estimator,seg_271,"surprisingly, this quotient does not depend on n , and we see clearly the advantage of t2 over t1 as the sample size n gets larger.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101, 10889,  1010,  2023, 22035,  9515,  3372,  2515,  2025, 12530,
         2006,  1050,  1010,  1998,  2057,  2156,  4415,  1996,  5056,  1997,
         1056,  2475,  2058,  1056,  2487,  2004,  1996,  7099,  2946,  1050,
         4152,  3469,  1012,   102])"
2185,1,['sample'], Variance of an estimator,seg_271,"quick exercise 20.4 let n = 5, and let the sample be",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([ 101, 4248, 6912, 2322, 1012, 1018, 2292, 1050, 1027, 1019, 1010, 1998,
        2292, 1996, 7099, 2022,  102])"
2186,1,['estimator'], Variance of an estimator,seg_271,compute the value of the estimator t1 for n . do you notice anything strange?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101, 24134,  1996,  3643,  1997,  1996,  9765,  9581,  4263,  1056,
         2487,  2005,  1050,  1012,  2079,  2017,  5060,  2505,  4326,  1029,
          102])"
2187,1,['samples'], Variance of an estimator,seg_271,the self-contradictory behavior of t1 in quick exercise 20.4 is not rare: this phenomenon will occur for up to 50% of the samples if n and n are large. this gives another reason to prefer t2 over t1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1997,  2019,  9765,  9581,  4263])","tensor([  101,  1996,  2969,  1011, 27894,  5248,  1997,  1056,  2487,  1999,
         4248,  6912,  2322,  1012,  1018,  2003,  2025,  4678,  1024,  2023,
         9575,  2097,  5258,  2005,  2039,  2000,  2753,  1003,  1997,  1996,
         8168,  2065,  1050,  1998,  1050,  2024,  2312,  1012,  2023,  3957,
         2178,  3114,  2000,  9544,  1056,  2475,  2058,  1056,  2487,  1012,
          102])"
2188,1,"['parameter', 'estimators', 'variance', 'estimated', 'unbiased', 'estimator', 'unbiased estimators']", Mean squared error,seg_273,"in the last section we compared two unbiased estimators by considering their spread around the value to be estimated, where the spread was measured by the variance. although unbiasedness is a desirable property, the performance of an estimator should mainly be judged by the way it spreads around the parameter θ to be estimated. this leads to the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  1999,  1996,  2197,  2930,  2057,  4102,  2048,  4895, 11607,
         6924,  9765,  9581,  6591,  2011,  6195,  2037,  3659,  2105,  1996,
         3643,  2000,  2022,  4358,  1010,  2073,  1996,  3659,  2001,  7594,
         2011,  1996, 23284,  1012,  2348,  4895, 11607,  6924,  2791,  2003,
         1037, 16166,  3200,  1010,  1996,  2836,  1997,  2019,  9765,  9581,
         4263,  2323,  3701,  2022, 13224,  2011,  1996,  2126,  2009, 20861,
         2105,  1996, 16381,  1162,  2000,  2022,  4358,  1012,  2023,  5260,
         2000,  1996,  2206,  6210,  1012,   102])"
2189,1,"['mean', 'parameter', 'mean squared error', 'estimator', 'error']", Mean squared error,seg_273,definition. let t be an estimator for a parameter θ. the mean squared error of t is the number mse(t ) = e[(t − θ)2] .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  6210,  1012,  2292,  1056,  2022,  2019,  9765,  9581,  4263,
         2005,  1037, 16381,  1162,  1012,  1996,  2812, 19942,  7561,  1997,
         1056,  2003,  1996,  2193,  5796,  2063,  1006,  1056,  1007,  1027,
         1041,  1031,  1006,  1056,  1597,  1162,  1007,  1016,  1033,  1012,
          102])"
2190,1,['estimator'], Mean squared error,seg_273,"according to this criterion, an estimator t1 performs better than an estimator t2 if mse(t1) < mse(t2). note that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  2429,  2000,  2023, 19229,  1010,  2019,  9765,  9581,  4263,
         1056,  2487, 10438,  2488,  2084,  2019,  9765,  9581,  4263,  1056,
         2475,  2065,  5796,  2063,  1006,  1056,  2487,  1007,  1026,  5796,
         2063,  1006,  1056,  2475,  1007,  1012,  3602,  2008,   102])"
2191,1,"['mean', 'parameter', 'estimators', 'parameter of interest', 'variance', 'mse', 'unbiased', 'efficient', 'estimator', 'errors', 'efficiency', 'bias']", Mean squared error,seg_273,"so the mse of t turns out to be the variance of t plus the square of the bias of t . in particular, when t is unbiased, the mse of t is just the variance of t . this means that we already used mean squared errors to compare the estimators t1 and t2 in the previous section. we extend the notion of efficiency by saying that estimator t2 is more efficient than estimator t1 (for the same parameter of interest), if the mse of t2 is smaller than the mse of t1.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  2061,  1996,  5796,  2063,  1997,  1056,  4332,  2041,  2000,
         2022,  1996, 23284,  1997,  1056,  4606,  1996,  2675,  1997,  1996,
        13827,  1997,  1056,  1012,  1999,  3327,  1010,  2043,  1056,  2003,
         4895, 11607,  6924,  1010,  1996,  5796,  2063,  1997,  1056,  2003,
         2074,  1996, 23284,  1997,  1056,  1012,  2023,  2965,  2008,  2057,
         2525,  2109,  2812, 19942, 10697,  2000, 12826,  1996,  9765,  9581,
         6591,  1056,  2487,  1998,  1056,  2475,  1999,  1996,  3025,  2930,
         1012,  2057,  7949,  1996,  9366,  1997,  8122,  2011,  3038,  2008,
         9765,  9581,  4263,  1056,  2475,  2003,  2062,  8114,  2084,  9765,
         9581,  4263,  1056,  2487,  1006,  2005,  1996,  2168, 16381,  1997,
         3037,  1007,  1010,  2065,  1996,  5796,  2063,  1997,  1056,  2475,
         2003,  3760,  2084,  1996,  5796,  2063,  1997,  1056,  2487,  1012,
          102])"
2192,1,['efficiency'], Mean squared error,seg_273,unbiasedness and efficiency,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  4895, 11607,  6924,  2791,  1998,  8122,   102])"
2193,1,"['biased estimator', 'variance', 'unbiased', 'biased', 'estimator', 'unbiased estimator']", Mean squared error,seg_273,a biased estimator with a small variance may be more useful than an unbiased estimator with a large variance. we illustrate this with the network server,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  1037, 25352,  9765,  9581,  4263,  2007,  1037,  2235, 23284,
         2089,  2022,  2062,  6179,  2084,  2019,  4895, 11607,  6924,  9765,
         9581,  4263,  2007,  1037,  2312, 23284,  1012,  2057, 19141,  2023,
         2007,  1996,  2897,  8241,   102])"
2194,1,"['probability', 'estimate', 'estimators']", Mean squared error,seg_273,example from section 19.2. recall that our goal was to estimate the probability p0 = e−µ of zero arrivals (of packages) in a minute. we did have two promising candidates as estimators:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  2742,  2013,  2930,  2539,  1012,  1016,  1012,  9131,  2008,
         2256,  3125,  2001,  2000, 10197,  1996,  9723,  1052,  2692,  1027,
         1041, 22543, 29659,  1997,  5717, 25470,  1006,  1997, 14555,  1007,
         1999,  1037,  3371,  1012,  2057,  2106,  2031,  2048, 10015,  5347,
         2004,  9765,  9581,  6591,  1024,   102])"
2195,1,"['random samples', 'histograms', 'biased', 'simulations', 'efficient', 'random', 'samples', 'estimator', 'distribution']", Mean squared error,seg_273,"in figure 20.2 we depict histograms of one thousand simulations of the values of s and t computed for random samples of size n = 25 from a pois(µ) distribution, where µ = 2. considering the way the values of the (biased!) estimator t are more concentrated around the true value e−µ = e−2 = 0.1353, we would be inclined to prefer t over s. this choice is strongly supported by the fact that t is more efficient than s: mse(t ) is always smaller than mse(s), as illustrated in figure 20.3.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2812, 19942,  7561])","tensor([  101,  1999,  3275,  2322,  1012,  1016,  2057, 17120,  2010,  3406,
        13113,  2015,  1997,  2028,  4595, 24710,  1997,  1996,  5300,  1997,
         1055,  1998,  1056, 24806,  2005,  6721,  8168,  1997,  2946,  1050,
         1027,  2423,  2013,  1037, 13433,  2483,  1006,  1085,  1007,  4353,
         1010,  2073,  1085,  1027,  1016,  1012,  6195,  1996,  2126,  1996,
         5300,  1997,  1996,  1006, 25352,   999,  1007,  9765,  9581,  4263,
         1056,  2024,  2062,  8279,  2105,  1996,  2995,  3643,  1041, 22543,
        29659,  1027,  1041, 22543,  2475,  1027,  1014,  1012, 11502,  2509,
         1010,  2057,  2052,  2022, 13050,  2000,  9544,  1056,  2058,  1055,
         1012,  2023,  3601,  2003,  6118,  3569,  2011,  1996,  2755,  2008,
         1056,  2003,  2062,  8114,  2084,  1055,  1024,  5796,  2063,  1006,
         1056,  1007,  2003,  2467,  3760,  2084,  5796,  2063,  1006,  1055,
         1007,  1010,  2004,  7203,  1999,  3275,  2322,  1012,  1017,  1012,
          102])"
2196,1,"['sample', 'estimate']", Solutions to the quick exercises,seg_275,"20.4 since 45 is in the sample, n has to be at least 45. adding the numbers yields 7 + 3 + 10 + 15 + 45 = 80. so t1 = 2x̄n − 1 = 2 · 16 − 1 = 31. what is strange about this is that the estimate for n is far smaller than the number 45 in the sample!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2322,  1012,  1018,  2144,  3429,  2003,  1999,  1996,  7099,
         1010,  1050,  2038,  2000,  2022,  2012,  2560,  3429,  1012,  5815,
         1996,  3616, 16189,  1021,  1009,  1017,  1009,  2184,  1009,  2321,
         1009,  3429,  1027,  3770,  1012,  2061,  1056,  2487,  1027,  1016,
         2595,  2078,  1597,  1015,  1027,  1016,  1087,  2385,  1597,  1015,
         1027,  2861,  1012,  2054,  2003,  4326,  2055,  2023,  2003,  2008,
         1996, 10197,  2005,  1050,  2003,  2521,  3760,  2084,  1996,  2193,
         3429,  1999,  1996,  7099,   999,   102])"
2197,1,"['mean', 'variance', 'estimate', 'random sample', 'sample', 'efficient', 'random', 'estimator', 'efficiency', 'expectation', 'distribution', 'relative efficiency', 'sample mean']", Exercises,seg_277,"20.1 given is a random sample x1, x2, . . . , xn from a distribution with finite variance σ2. we estimate the expectation of the distribution with the sample mean x̄n. argue that the larger our sample, the more efficient our estimator. what is the relative efficiency var(x̄n) /var(x̄2n) of x̄2n with respect to x̄n?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1015,  2445,  2003,  1037,  6721,  7099,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2013,  1037,  4353,  2007, 10713, 23284,  1173,  2475,  1012,
         2057, 10197,  1996, 17626,  1997,  1996,  4353,  2007,  1996,  7099,
         2812,  1060,  2078,  1012,  7475,  2008,  1996,  3469,  2256,  7099,
         1010,  1996,  2062,  8114,  2256,  9765,  9581,  4263,  1012,  2054,
         2003,  1996,  5816,  8122, 13075,  1006,  1060,  2078,  1007,  1013,
        13075,  1006,  1060,  2475,  2078,  1007,  1997,  1060,  2475,  2078,
         2007,  4847,  2000,  1060,  2078,  1029,   102])"
2198,1,"['parameter', 'estimators']", Exercises,seg_277,20.2 given are two estimators s and t for a parameter θ. furthermore it is known that var(s) = 40 and var(t ) = 4.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1016,  2445,  2024,  2048,  9765,  9581,  6591,
         1055,  1998,  1056,  2005,  1037, 16381,  1162,  1012,  7297,  2009,
         2003,  2124,  2008, 13075,  1006,  1055,  1007,  1027,  2871,  1998,
        13075,  1006,  1056,  1007,  1027,  1018,  1012,   102])"
2199,1,['estimator'], Exercises,seg_277,a. suppose that we know that e[s] = θ and e[t ] = θ + 3. which estimator,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 6814, 2008, 2057, 2113, 2008, 1041, 1031, 1055, 1033,
        1027, 1162, 1998, 1041, 1031, 1056, 1033, 1027, 1162, 1009, 1017, 1012,
        2029, 9765, 9581, 4263,  102])"
2200,0,[], Exercises,seg_277,"would you prefer, and why?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2052, 2017, 9544, 1010, 1998, 2339, 1029,  102])"
2201,1,['estimator'], Exercises,seg_277,"number a. for each a, which estimator would you prefer, and why?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 2193, 1037, 1012, 2005, 2169, 1037, 1010, 2029, 9765, 9581, 4263,
        2052, 2017, 9544, 1010, 1998, 2339, 1029,  102])"
2202,1,"['mean', 'estimate', 'random sample', 'sample', 'random']", Exercises,seg_277,"20.3 suppose we have a random sample x1, . . . , xn from an exp(λ) distribution. suppose we want to estimate the mean 1/λ. according to section 19.4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1017,  6814,  2057,  2031,  1037,  6721,  7099,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,
         2019,  4654,  2361,  1006,  1165,  1007,  4353,  1012,  6814,  2057,
         2215,  2000, 10197,  1996,  2812,  1015,  1013,  1165,  1012,  2429,
         2000,  2930,  2539,  1012,  1018,   102])"
2203,1,['estimator'], Exercises,seg_277,the estimator 1,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1996, 9765, 9581, 4263, 1015,  102])"
2204,1,"['unbiased estimator', 'estimator', 'unbiased', 'distribution']", Exercises,seg_277,"is an unbiased estimator of 1/λ. let mn be the minimum of x1, x2, . . . , xn. recall from exercise 8.18 that mn has an exp(nλ) distribution. in exercise 19.5 you have determined that",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  1997,
         1015,  1013,  1165,  1012,  2292, 24098,  2022,  1996,  6263,  1997,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1012,  9131,  2013,  6912,  1022,  1012,  2324,  2008,
        24098,  2038,  2019,  4654,  2361,  1006,  1050, 29727,  1007,  4353,
         1012,  1999,  6912,  2539,  1012,  1019,  2017,  2031,  4340,  2008,
          102])"
2205,1,"['mean', 'estimators', 'unbiased', 'estimator', 'unbiased estimator']", Exercises,seg_277,is another unbiased estimator for 1/λ. which of the estimators t1 and t2 would you choose for estimating the mean 1/λ? substantiate your answer.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  2178,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1015,  1013,  1165,  1012,  2029,  1997,  1996,  9765,  9581,  6591,
         1056,  2487,  1998,  1056,  2475,  2052,  2017,  5454,  2005,  9765,
        22835,  1996,  2812,  1015,  1013,  1165,  1029,  4942, 12693, 10711,
         2618,  2115,  3437,  1012,   102])"
2206,1,"['parameter', 'without replacement', 'estimate', 'unbiased', 'random variable', 'symmetry', 'sample', 'random', 'estimator', 'distribution', 'unbiased estimator', 'replacement', 'variable']", Exercises,seg_277,"20.4 consider the situation of this chapter, where we have to estimate the parameter n from a sample x1, . . . , xn drawn without replacement from the numbers {1, . . . , n}. to keep it simple, we consider n = 2. let m = m2 be the maximum of x1 and x2. we have found that t2 = 3m/2 − 1 is a good unbiased estimator for n . we want to construct a new unbiased estimator t3 based on the minimum l of x1 and x2. in the following you may use that the random variable l has the same distribution as the random variable n + 1 − m (this follows from symmetry considerations).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1018,  5136,  1996,  3663,  1997,  2023,  3127,
         1010,  2073,  2057,  2031,  2000, 10197,  1996, 16381,  1050,  2013,
         1037,  7099,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  4567,  2302,  6110,  2013,  1996,  3616,  1063,  1015,  1010,
         1012,  1012,  1012,  1010,  1050,  1065,  1012,  2000,  2562,  2009,
         3722,  1010,  2057,  5136,  1050,  1027,  1016,  1012,  2292,  1049,
         1027, 25525,  2022,  1996,  4555,  1997,  1060,  2487,  1998,  1060,
         2475,  1012,  2057,  2031,  2179,  2008,  1056,  2475,  1027,  1017,
         2213,  1013,  1016,  1597,  1015,  2003,  1037,  2204,  4895, 11607,
         6924,  9765,  9581,  4263,  2005,  1050,  1012,  2057,  2215,  2000,
         9570,  1037,  2047,  4895, 11607,  6924,  9765,  9581,  4263,  1056,
         2509,  2241,  2006,  1996,  6263,  1048,  1997,  1060,  2487,  1998,
         1060,  2475,  1012,  1999,  1996,  2206,  2017,  2089,  2224,  2008,
         1996,  6721,  8023,  1048,  2038,  1996,  2168,  4353,  2004,  1996,
         6721,  8023,  1050,  1009,  1015,  1597,  1049,  1006,  2023,  4076,
         2013, 14991, 16852,  1007,  1012,   102])"
2207,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_277,a. show that t3 = 3l − 1 is an unbiased estimator for n .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2265,  2008,  1056,  2509,  1027,  1017,  2140,
         1597,  1015,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,
         2005,  1050,  1012,   102])"
2208,0,[], Exercises,seg_277,has been computed in remark 20.1.),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2038,  2042, 24806,  1999, 17674,  2322,  1012,  1015,  1012,
         1007,   102])"
2209,1,"['efficiency', 'relative efficiency']", Exercises,seg_277,c. what is the relative efficiency of t2 with respect to t3?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2054, 2003, 1996, 5816, 8122, 1997, 1056, 2475, 2007,
        4847, 2000, 1056, 2509, 1029,  102])"
2210,1,"['joint probability', 'estimators', 'joint probability distribution', 'variance', 'probability', 'information', 'unbiased', 'estimator', 'unbiased estimators', 'efficiency', 'distribution', 'relative efficiency', 'joint', 'case', 'probability distribution']", Exercises,seg_277,"20.5 someone is proposing two unbiased estimators u and v , with the same variance var(u) = var(v ). it therefore appears that we would not prefer one estimator over the other. however, we could go for a third estimator, namely w = (u + v )/2. note that w is unbiased. to judge the quality of w we want to compute its variance. lacking information on the joint probability distribution of u and v , this is impossible. however, we should prefer w in any case! to see this, show by means of the variance-of-the-sum rule that the relative efficiency of u with respect to w is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1019,  2619,  2003, 21991,  2048,  4895, 11607,
         6924,  9765,  9581,  6591,  1057,  1998,  1058,  1010,  2007,  1996,
         2168, 23284, 13075,  1006,  1057,  1007,  1027, 13075,  1006,  1058,
         1007,  1012,  2009,  3568,  3544,  2008,  2057,  2052,  2025,  9544,
         2028,  9765,  9581,  4263,  2058,  1996,  2060,  1012,  2174,  1010,
         2057,  2071,  2175,  2005,  1037,  2353,  9765,  9581,  4263,  1010,
         8419,  1059,  1027,  1006,  1057,  1009,  1058,  1007,  1013,  1016,
         1012,  3602,  2008,  1059,  2003,  4895, 11607,  6924,  1012,  2000,
         3648,  1996,  3737,  1997,  1059,  2057,  2215,  2000, 24134,  2049,
        23284,  1012, 11158,  2592,  2006,  1996,  4101,  9723,  4353,  1997,
         1057,  1998,  1058,  1010,  2023,  2003,  5263,  1012,  2174,  1010,
         2057,  2323,  9544,  1059,  1999,  2151,  2553,   999,  2000,  2156,
         2023,  1010,  2265,  2011,  2965,  1997,  1996, 23284,  1011,  1997,
         1011,  1996,  1011,  7680,  3627,  2008,  1996,  5816,  8122,  1997,
         1057,  2007,  4847,  2000,  1059,  2003,  5020,  2000,   102])"
2211,1,"['correlation', 'coefficient', 'correlation coefficient']", Exercises,seg_277,"here ρ(u, v ) is the correlation coefficient. why does this result imply that we should use w instead of u (or v )?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2182,  1171,  1006,  1057,  1010,  1058,  1007,  2003,  1996,
        16902, 19064,  1012,  2339,  2515,  2023,  2765, 19515,  2008,  2057,
         2323,  2224,  1059,  2612,  1997,  1057,  1006,  2030,  1058,  1007,
         1029,   102])"
2212,1,"['uncertainty', 'expectations', 'random', 'random variables', 'independent random variables', 'measurements', 'variables', 'independent']", Exercises,seg_277,"20.6 a geodesic engineer measures the three unknown angles α1, α2, and α3 of a triangle. he models the uncertainty in the measurements by considering them as realizations of three independent random variables t1, t2, and t3 with expectations",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1020,  1037, 20248,  6155,  2594,  3992,  5761,
         1996,  2093,  4242, 12113,  1155,  2487,  1010,  1155,  2475,  1010,
         1998,  1155,  2509,  1997,  1037,  9546,  1012,  2002,  4275,  1996,
        12503,  1999,  1996, 11702,  2011,  6195,  2068,  2004, 12393,  2015,
         1997,  2093,  2981,  6721, 10857,  1056,  2487,  1010,  1056,  2475,
         1010,  1998,  1056,  2509,  2007, 10908,   102])"
2213,1,"['estimators', 'variance']", Exercises,seg_277,"and all three with the same variance σ2. in order to make use of the fact that the three angles must add to π, he also considers new estimators u1, u2, and u3 defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1998,  2035,  2093,  2007,  1996,  2168, 23284,  1173,  2475,
         1012,  1999,  2344,  2000,  2191,  2224,  1997,  1996,  2755,  2008,
         1996,  2093, 12113,  2442,  5587,  2000,  1170,  1010,  2002,  2036,
        10592,  2047,  9765,  9581,  6591,  1057,  2487,  1010, 23343,  1010,
         1998,  1057,  2509,  4225,  2011,   102])"
2214,1,['measurements'], Exercises,seg_277,(note that the “deviation” π − t1 − t2 − t3 is evenly divided over the three measurements and that u1 + u2 + u3 = π.),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1006,  3602,  2008,  1996,  1523, 24353,  1524,  1170,  1597,
         1056,  2487,  1597,  1056,  2475,  1597,  1056,  2509,  2003, 18030,
         4055,  2058,  1996,  2093, 11702,  1998,  2008,  1057,  2487,  1009,
        23343,  1009,  1057,  2509,  1027,  1170,  1012,  1007,   102])"
2215,1,"['estimate', 'efficiency']", Exercises,seg_277,b. what does he gain in efficiency when he uses u1 instead of t1 to estimate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2515,  2002,  5114,  1999,  8122,  2043,
         2002,  3594,  1057,  2487,  2612,  1997,  1056,  2487,  2000, 10197,
          102])"
2216,1,['estimator'], Exercises,seg_277,c. what kind of estimator would you choose for α1 if it is known that the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2054, 2785, 1997, 9765, 9581, 4263, 2052, 2017, 5454,
        2005, 1155, 2487, 2065, 2009, 2003, 2124, 2008, 1996,  102])"
2217,1,['probabilities'], Exercises,seg_277,"20.7 (exercise 19.7 continued.) leaves are divided into four different types: starchy-green, sugary-white, starchy-white, and sugary-green. according to genetic theory, the types occur with probabilities 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1021,  1006,  6912,  2539,  1012,  1021,  2506,
         1012,  1007,  3727,  2024,  4055,  2046,  2176,  2367,  4127,  1024,
         2732, 11714,  1011,  2665,  1010,  5699,  2100,  1011,  2317,  1010,
         2732, 11714,  1011,  2317,  1010,  1998,  5699,  2100,  1011,  2665,
         1012,  2429,  2000,  7403,  3399,  1010,  1996,  4127,  5258,  2007,
         4013,  3676, 14680,  1015,   102])"
2218,1,"['random variable', 'random', 'distribution', 'variable']", Exercises,seg_277,"4 (θ + 2), 1 4θ, 1 4 (1 − θ), and 1 4 (1 − θ), respectively, where 0 < θ < 1. suppose one has n leaves. then the number of starchy-green leaves is modeled by a random variable n1 with a bin(n, p1) distribution, where p1 = 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1006,  1162,  1009,  1016,  1007,  1010,  1015,  1018,
        29725,  1010,  1015,  1018,  1006,  1015,  1597,  1162,  1007,  1010,
         1998,  1015,  1018,  1006,  1015,  1597,  1162,  1007,  1010,  4414,
         1010,  2073,  1014,  1026,  1162,  1026,  1015,  1012,  6814,  2028,
         2038,  1050,  3727,  1012,  2059,  1996,  2193,  1997,  2732, 11714,
         1011,  2665,  3727,  2003, 14440,  2011,  1037,  6721,  8023,  1050,
         2487,  2007,  1037,  8026,  1006,  1050,  1010,  1052,  2487,  1007,
         4353,  1010,  2073,  1052,  2487,  1027,  1015,   102])"
2219,1,"['random variable', 'random', 'distribution', 'variable']", Exercises,seg_277,"4 (θ +2), and the number of sugary-white leaves is modeled by a random variable n2 with a bin(n, p2) distribution, where p2 = 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018,  1006,  1162,  1009,  1016,  1007,  1010,  1998,  1996,
         2193,  1997,  5699,  2100,  1011,  2317,  3727,  2003, 14440,  2011,
         1037,  6721,  8023,  1050,  2475,  2007,  1037,  8026,  1006,  1050,
         1010,  1052,  2475,  1007,  4353,  1010,  2073,  1052,  2475,  1027,
         1015,   102])"
2220,1,['estimators'], Exercises,seg_277,4θ. consider the following two estimators for θ:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1018, 29725,  1012,  5136,  1996,  2206,  2048,  9765,  9581,
         6591,  2005,  1162,  1024,   102])"
2221,1,"['estimators', 'unbiased', 'estimator', 'unbiased estimators']", Exercises,seg_277,in exercise 19.7 you showed that both t1 and t2 are unbiased estimators for θ. which estimator would you prefer? motivate your answer.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1999,  6912,  2539,  1012,  1021,  2017,  3662,  2008,  2119,
         1056,  2487,  1998,  1056,  2475,  2024,  4895, 11607,  6924,  9765,
         9581,  6591,  2005,  1162,  1012,  2029,  9765,  9581,  4263,  2052,
         2017,  9544,  1029,  9587, 29068,  3686,  2115,  3437,  1012,   102])"
2222,1,"['mean', 'random samples', 'estimators', 'sample', 'random', 'samples', 'estimator', 'distribution', 'sample means', 'independent']", Exercises,seg_277,20.8 let x̄n and ȳm be the sample means of two independent random samples of size n (resp. m) from the same distribution with mean µ. we combine these two estimators to a new estimator t by putting,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1022,  2292,  1060,  2078,  1998,  1061,  2213,
         2022,  1996,  7099,  2965,  1997,  2048,  2981,  6721,  8168,  1997,
         2946,  1050,  1006, 24501,  2361,  1012,  1049,  1007,  2013,  1996,
         2168,  4353,  2007,  2812,  1085,  1012,  2057, 11506,  2122,  2048,
         9765,  9581,  6591,  2000,  1037,  2047,  9765,  9581,  4263,  1056,
         2011,  5128,   102])"
2223,0,[], Exercises,seg_277,where r is some number between 0 and 1.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2073, 1054, 2003, 2070, 2193, 2090, 1014, 1998, 1015, 1012,  102])"
2224,1,"['unbiased estimator', 'mean', 'estimator', 'unbiased']", Exercises,seg_277,a. show that t is an unbiased estimator for the mean µ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2265,  2008,  1056,  2003,  2019,  4895, 11607,
         6924,  9765,  9581,  4263,  2005,  1996,  2812,  1085,  1012,   102])"
2225,1,['efficient'], Exercises,seg_277,b. show that t is most efficient when r = n/(n + m).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2265, 2008, 1056, 2003, 2087, 8114, 2043, 1054, 1027,
        1050, 1013, 1006, 1050, 1009, 1049, 1007, 1012,  102])"
2226,1,"['estimators', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_277,"20.9 given is a random sample x1, x2, . . . , xn from a ber(p) distribution. one considers the estimators",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0.])",tensor([11110]),"tensor([  101,  2322,  1012,  1023,  2445,  2003,  1037,  6721,  7099,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2013,  1037,  2022,  2099,  1006,  1052,  1007,  4353,  1012,
         2028, 10592,  1996,  9765,  9581,  6591,   102])"
2227,1,"['estimators', 'unbiased', 'unbiased estimators']", Exercises,seg_277,a. are t1 and t2 unbiased estimators for p?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2024,  1056,  2487,  1998,  1056,  2475,  4895,
        11607,  6924,  9765,  9581,  6591,  2005,  1052,  1029,   102])"
2228,0,[], Exercises,seg_277,"1 mse(t1) = p(1 − p), mse(t2) = pn − 2pn+1 + p2. n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1015, 5796, 2063, 1006, 1056, 2487, 1007, 1027, 1052, 1006, 1015,
        1597, 1052, 1007, 1010, 5796, 2063, 1006, 1056, 2475, 1007, 1027, 1052,
        2078, 1597, 1016, 2361, 2078, 1009, 1015, 1009, 1052, 2475, 1012, 1050,
         102])"
2229,1,"['efficient', 'estimator']", Exercises,seg_277,c. which estimator is more efficient when n = 2?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 2029, 9765, 9581, 4263, 2003, 2062, 8114, 2043, 1050,
        1027, 1016, 1029,  102])"
2230,1,"['estimate', 'random sample', 'sample', 'random', 'expectation']", Exercises,seg_277,"20.10 suppose we have a random sample x1, . . . , xn from an exp(λ) distribution. we want to estimate the expectation 1/λ. according to section 19.4,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  2184,  6814,  2057,  2031,  1037,  6721,  7099,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,
         2019,  4654,  2361,  1006,  1165,  1007,  4353,  1012,  2057,  2215,
         2000, 10197,  1996, 17626,  1015,  1013,  1165,  1012,  2429,  2000,
         2930,  2539,  1012,  1018,  1010,   102])"
2231,1,"['unbiased estimator', 'estimator', 'estimators', 'unbiased']", Exercises,seg_277,is an unbiased estimator of 1/λ. let us consider more generally estimators t of the form,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  1997,
         1015,  1013,  1165,  1012,  2292,  2149,  5136,  2062,  3227,  9765,
         9581,  6591,  1056,  1997,  1996,  2433,   102])"
2232,1,"['mse', 'estimators']", Exercises,seg_277,where c is a real number. we are interested in the mse of these estimators and would like to know whether there are choices for c that yield a smaller mse than the choice c = 1/n.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1039,  2003,  1037,  2613,  2193,  1012,  2057,  2024,
         4699,  1999,  1996,  5796,  2063,  1997,  2122,  9765,  9581,  6591,
         1998,  2052,  2066,  2000,  2113,  3251,  2045,  2024,  9804,  2005,
         1039,  2008, 10750,  1037,  3760,  5796,  2063,  2084,  1996,  3601,
         1039,  1027,  1015,  1013,  1050,  1012,   102])"
2233,0,[], Exercises,seg_277,a. compute mse(t ) for each c.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  5796,  2063,  1006,  1056,  1007,  2005,
         2169,  1039,  1012,   102])"
2234,1,"['mse', 'estimator']", Exercises,seg_277,b. for which c does the estimator perform best in the mse sense? compare,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2005,  2029,  1039,  2515,  1996,  9765,  9581,
         4263,  4685,  2190,  1999,  1996,  5796,  2063,  3168,  1029, 12826,
          102])"
2235,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_277,this to the unbiased estimator x̄n that one obtains for c = 1/n.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2023,  2000,  1996,  4895, 11607,  6924,  9765,  9581,  4263,
         1060,  2078,  2008,  2028,  6855,  2015,  2005,  1039,  1027,  1015,
         1013,  1050,  1012,   102])"
2236,1,"['regression', 'linear', 'intercept', 'regression model', 'linear regression', 'model', 'linear regression model']", Exercises,seg_277,20.11 in exercise 17.9 we modeled diameters of black cherry trees with the linear regression model (without intercept),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  2340,  1999,  6912,  2459,  1012,  1023,  2057,
        14440,  6705,  2015,  1997,  2304,  9115,  3628,  2007,  1996,  7399,
        26237,  2944,  1006,  2302, 19115,  1007,   102])"
2237,1,"['random', 'random variables', 'independent random variables', 'variables', 'independent']", Exercises,seg_277,"for i = 1, 2, . . . , n. as usual, the ui here are independent random variables with e[ui]=0, and var(ui) = σ2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2005,  1045,  1027,  1015,  1010,  1016,  1010,  1012,  1012,
         1012,  1010,  1050,  1012,  2004,  5156,  1010,  1996, 21318,  2182,
         2024,  2981,  6721, 10857,  2007,  1041,  1031, 21318,  1033,  1027,
         1014,  1010,  1998, 13075,  1006, 21318,  1007,  1027,  1173,  2475,
         1012,   102])"
2238,1,"['estimators', 'slope', 'estimator', 'least squares', 'average']", Exercises,seg_277,"we considered three estimators for the slope β of the line y = βx: the socalled least squares estimator t1 (which will be considered in chapter 22), the average slope estimator t2, and the slope of the averages estimator t3. these estimators are defined by:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2057,  2641,  2093,  9765,  9581,  6591,  2005,  1996,  9663,
         1156,  1997,  1996,  2240,  1061,  1027,  1156,  2595,  1024,  1996,
        27084, 24164,  2094,  2560, 14320,  9765,  9581,  4263,  1056,  2487,
         1006,  2029,  2097,  2022,  2641,  1999,  3127,  2570,  1007,  1010,
         1996,  2779,  9663,  9765,  9581,  4263,  1056,  2475,  1010,  1998,
         1996,  9663,  1997,  1996, 20185,  9765,  9581,  4263,  1056,  2509,
         1012,  2122,  9765,  9581,  6591,  2024,  4225,  2011,  1024,   102])"
2239,1,"['mse', 'estimators', 'unbiased']", Exercises,seg_277,in exercise 19.8 it was shown that all three estimators are unbiased. compute the mse of all three estimators.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1999,  6912,  2539,  1012,  1022,  2009,  2001,  3491,  2008,
         2035,  2093,  9765,  9581,  6591,  2024,  4895, 11607,  6924,  1012,
        24134,  1996,  5796,  2063,  1997,  2035,  2093,  9765,  9581,  6591,
         1012,   102])"
2240,1,"['inequality', 'efficient', 'cauchy']", Exercises,seg_277,"remark: it can be shown that t1 is always more efficient than t3, which in turn is more efficient than t2. to prove the first inequality one uses a famous inequality called the cauchy schwartz inequality; for the second inequality one uses jensen’s inequality (can you see how?).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 17674,  1024,  2009,  2064,  2022,  3491,  2008,  1056,  2487,
         2003,  2467,  2062,  8114,  2084,  1056,  2509,  1010,  2029,  1999,
         2735,  2003,  2062,  8114,  2084,  1056,  2475,  1012,  2000,  6011,
         1996,  2034, 16440,  2028,  3594,  1037,  3297, 16440,  2170,  1996,
         6187, 10875,  2100, 16756, 16440,  1025,  2005,  1996,  2117, 16440,
         2028,  3594, 14857,  1521,  1055, 16440,  1006,  2064,  2017,  2156,
         2129,  1029,  1007,  1012,   102])"
2241,1,"['probability', 'without replacement', 'replacement', 'distribution']", Exercises,seg_277,"20.12 let x1, x2, . . . , xn represent n draws without replacement from the numbers 1, 2, . . . , n with equal probability. the goal of this exercise is to compute the distribution of mn in a way other than by the combinatorial analysis we did in this chapter.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2322,  1012,  2260,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  5050,  1050,  9891,
         2302,  6110,  2013,  1996,  3616,  1015,  1010,  1016,  1010,  1012,
         1012,  1012,  1010,  1050,  2007,  5020,  9723,  1012,  1996,  3125,
         1997,  2023,  6912,  2003,  2000, 24134,  1996,  4353,  1997, 24098,
         1999,  1037,  2126,  2060,  2084,  2011,  1996, 22863, 23207,  4818,
         4106,  2057,  2106,  1999,  2023,  3127,  1012,   102])"
2242,1,"['mean', 'frequencies', 'estimators', 'maximum likelihood', 'probabilities', 'sample', 'maximum likelihood estimators', 'likelihood', 'expectation', 'relative frequencies', 'parameters', 'sample mean']", Maximum likelihood,seg_279,"in previous chapters we could easily construct estimators for various parameters of interest because these parameters had a natural sample analogue: expectation versus sample mean, probabilities versus relative frequencies, etc. however, in some situations such an analogue does not exist. in this chapter, a general principle to construct estimators is introduced, the so-called maximum likelihood principle. maximum likelihood estimators have certain attractive properties that are discussed in the last section.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4555, 16593])","tensor([  101,  1999,  3025,  9159,  2057,  2071,  4089,  9570,  9765,  9581,
         6591,  2005,  2536, 11709,  1997,  3037,  2138,  2122, 11709,  2018,
         1037,  3019,  7099, 21800,  1024, 17626,  6431,  7099,  2812,  1010,
         4013,  3676, 14680,  6431,  5816, 13139,  1010,  4385,  1012,  2174,
         1010,  1999,  2070,  8146,  2107,  2019, 21800,  2515,  2025,  4839,
         1012,  1999,  2023,  3127,  1010,  1037,  2236,  6958,  2000,  9570,
         9765,  9581,  6591,  2003,  3107,  1010,  1996,  2061,  1011,  2170,
         4555, 16593,  6958,  1012,  4555, 16593,  9765,  9581,  6591,  2031,
         3056,  8702,  5144,  2008,  2024,  6936,  1999,  1996,  2197,  2930,
         1012,   102])"
2243,1,"['parameter', 'geometric', 'geometric distribution', 'table', 'distribution', 'data', 'variable']", Why a general principle,seg_281,in section 4.4 we modeled the number of cycles up to pregnancy by a random variable x with a geometric distribution with (unknown) parameter p. weinberg and gladen studied the effect of smoking on the number of cycles and obtained the data in table 21.1 for 100 smokers and 486 nonsmokers.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2339, 1037, 2236, 6958])","tensor([  101,  1999,  2930,  1018,  1012,  1018,  2057, 14440,  1996,  2193,
         1997, 12709,  2039,  2000, 10032,  2011,  1037,  6721,  8023,  1060,
         2007,  1037, 14965,  4353,  2007,  1006,  4242,  1007, 16381,  1052,
         1012, 11417, 11144,  1998,  5580,  2368,  3273,  1996,  3466,  1997,
         9422,  2006,  1996,  2193,  1997, 12709,  1998,  4663,  1996,  2951,
         1999,  2795,  2538,  1012,  1015,  2005,  2531,  5610,  2869,  1998,
         4466,  2575,  2512, 25855, 11451,  1012,   102])"
2244,1,"['probability', 'cases', 'parameter']", Why a general principle,seg_281,"is the parameter p, which equals the probability of becoming pregnant after one cycle, different for smokers and nonsmokers? let us try to find out by estimating p in the two cases.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([2339, 1037, 2236, 6958])","tensor([  101,  2003,  1996, 16381,  1052,  1010,  2029, 19635,  1996,  9723,
         1997,  3352,  6875,  2044,  2028,  5402,  1010,  2367,  2005,  5610,
         2869,  1998,  2512, 25855, 11451,  1029,  2292,  2149,  3046,  2000,
         2424,  2041,  2011,  9765, 22835,  1052,  1999,  1996,  2048,  3572,
         1012,   102])"
2245,1,"['law of large numbers', 'estimate']", Why a general principle,seg_281,"what would be reasonable ways to estimate p? since p = p(x = 1), the law of large numbers (see section 13.3) motivates use of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2339, 1037, 2236, 6958])","tensor([  101,  2054,  2052,  2022,  9608,  3971,  2000, 10197,  1052,  1029,
         2144,  1052,  1027,  1052,  1006,  1060,  1027,  1015,  1007,  1010,
         1996,  2375,  1997,  2312,  3616,  1006,  2156,  2930,  2410,  1012,
         1017,  1007,  9587, 29068,  8520,  2224,  1997,   102])"
2246,1,"['cases', 'estimators', 'table', 'estimate', 'unbiased', 'estimates', 'information', 'estimator', 'unbiased estimator', 'average', 'data', 'case']", Why a general principle,seg_281,"as an estimator for p. this yields estimates p = 29/100 = 0.29 for smokers and p = 198/486 = 0.41 for nonsmokers. we know from section 19.4 that s is an unbiased estimator for p. however, one cannot escape the feeling that s is a “bad” estimator: s does not use all the information in the table, i.e., the way the women are distributed over the numbers 2, 3, . . . of observed numbers of cycles is not used. one would like to have an estimator that incorporates all the available information. due to the way the data are given, this seems to be difficult. for instance, estimators based on the average cannot be evaluated, because 7 smokers and 12 nonsmokers had an unknown number of cycles up to pregnancy (larger than 12). if one simply ignores the last column in table 21.1 as we did in exercise 17.5, the average can be computed and yields 1/x̄93 = 0.2809 as an estimate of p for smokers and 1/x̄474 = 0.3688 for nonsmokers. however, because we discard seven values larger than 12 in case of the smokers and twelve values larger than 12 in case of the nonsmokers, we overestimate p in both cases.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([2339, 1037, 2236, 6958])","tensor([  101,  2004,  2019,  9765,  9581,  4263,  2005,  1052,  1012,  2023,
        16189, 10035,  1052,  1027,  2756,  1013,  2531,  1027,  1014,  1012,
         2756,  2005,  5610,  2869,  1998,  1052,  1027, 20003,  1013,  4466,
         2575,  1027,  1014,  1012,  4601,  2005,  2512, 25855, 11451,  1012,
         2057,  2113,  2013,  2930,  2539,  1012,  1018,  2008,  1055,  2003,
         2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,  1052,  1012,
         2174,  1010,  2028,  3685,  4019,  1996,  3110,  2008,  1055,  2003,
         1037,  1523,  2919,  1524,  9765,  9581,  4263,  1024,  1055,  2515,
         2025,  2224,  2035,  1996,  2592,  1999,  1996,  2795,  1010,  1045,
         1012,  1041,  1012,  1010,  1996,  2126,  1996,  2308,  2024,  5500,
         2058,  1996,  3616,  1016,  1010,  1017,  1010,  1012,  1012,  1012,
         1997,  5159,  3616,  1997, 12709,  2003,  2025,  2109,  1012,  2028,
         2052,  2066,  2000,  2031,  2019,  9765,  9581,  4263,  2008, 12374,
         2035,  1996,  2800,  2592,  1012,  2349,  2000,  1996,  2126,  1996,
         2951,  2024,  2445,  1010,  2023,  3849,  2000,  2022,  3697,  1012,
         2005,  6013,  1010,  9765,  9581,  6591,  2241,  2006,  1996,  2779,
         3685,  2022, 16330,  1010,  2138,  1021,  5610,  2869,  1998,  2260,
         2512, 25855, 11451,  2018,  2019,  4242,  2193,  1997, 12709,  2039,
         2000, 10032,  1006,  3469,  2084,  2260,  1007,  1012,  2065,  2028,
         3432, 26663,  1996,  2197,  5930,  1999,  2795,  2538,  1012,  1015,
         2004,  2057,  2106,  1999,  6912,  2459,  1012,  1019,  1010,  1996,
         2779,  2064,  2022, 24806,  1998, 16189,  1015,  1013,  1060,  2683,
         2509,  1027,  1014,  1012, 13427,  2683,  2004,  2019, 10197,  1997,
         1052,  2005,  5610,  2869,  1998,  1015,  1013,  1060, 22610,  2549,
         1027,  1014,  1012,  4029,  2620,  2620,  2005,  2512, 25855, 11451,
         1012,  2174,  1010,  2138,  2057,  5860,  4232,  2698,  5300,  3469,
         2084,  2260,  1999,  2553,  1997,  1996,  5610,  2869,  1998,  4376,
         5300,  3469,  2084,  2260,  1999,  2553,  1997,  1996,  2512, 25855,
        11451,  1010,  2057,  2058,  4355, 21499,  1052,  1999,  2119,  3572,
         1012,   102])"
2247,1,"['parameter', 'estimators', 'parameter of interest', 'maximum likelihood', 'estimate', 'likelihood']", Why a general principle,seg_281,"in the next section we introduce a general principle to find an estimate for a parameter of interest, the maximum likelihood principle. this principle yields good estimators and will solve problems such as those stated earlier.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2339, 1037, 2236, 6958])","tensor([  101,  1999,  1996,  2279,  2930,  2057,  8970,  1037,  2236,  6958,
         2000,  2424,  2019, 10197,  2005,  1037, 16381,  1997,  3037,  1010,
         1996,  4555, 16593,  6958,  1012,  2023,  6958, 16189,  2204,  9765,
         9581,  6591,  1998,  2097,  9611,  3471,  2107,  2004,  2216,  3090,
         3041,  1012,   102])"
2248,1,"['percentage', 'test']", The maximum likelihood principle,seg_283,"suppose a dealer of computer chips is offered on the black market two batches of 10 000 chips each. according to the seller, in one batch about 50% of the chips are defective, while this percentage is about 10% in the other batch. our dealer is only interested in this last batch. unfortunately the seller cannot tell the two batches apart. to help him to make up his mind, the seller offers our dealer one batch, from which he is allowed to select and test 10 chips. after selecting 10 chips arbitrarily, it turns out that only the second one is defective. our dealer at once decides to buy this batch. is this a wise decision?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  6814,  1037, 11033,  1997,  3274, 11772,  2003,  3253,  2006,
         1996,  2304,  3006,  2048, 14108,  2229,  1997,  2184,  2199, 11772,
         2169,  1012,  2429,  2000,  1996, 14939,  1010,  1999,  2028, 14108,
         2055,  2753,  1003,  1997,  1996, 11772,  2024, 28829,  1010,  2096,
         2023,  7017,  2003,  2055,  2184,  1003,  1999,  1996,  2060, 14108,
         1012,  2256, 11033,  2003,  2069,  4699,  1999,  2023,  2197, 14108,
         1012,  6854,  1996, 14939,  3685,  2425,  1996,  2048, 14108,  2229,
         4237,  1012,  2000,  2393,  2032,  2000,  2191,  2039,  2010,  2568,
         1010,  1996, 14939,  4107,  2256, 11033,  2028, 14108,  1010,  2013,
         2029,  2002,  2003,  3039,  2000,  7276,  1998,  3231,  2184, 11772,
         1012,  2044, 17739,  2184, 11772, 12098, 16313, 19848,  6588,  1010,
         2009,  4332,  2041,  2008,  2069,  1996,  2117,  2028,  2003, 28829,
         1012,  2256, 11033,  2012,  2320,  7288,  2000,  4965,  2023, 14108,
         1012,  2003,  2023,  1037,  7968,  3247,  1029,   102])"
2249,1,"['maximum likelihood', 'likelihood']", The maximum likelihood principle,seg_283,"with the batch where 50% of the chips are defective it is more likely that defective chips will appear, whereas with the other batch one would expect hardly any defective chip. clearly, our dealer chooses the batch for which it is most likely that only one chip is defective. this is also the guiding idea behind the maximum likelihood principle.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2007,  1996, 14108,  2073,  2753,  1003,  1997,  1996, 11772,
         2024, 28829,  2009,  2003,  2062,  3497,  2008, 28829, 11772,  2097,
         3711,  1010,  6168,  2007,  1996,  2060, 14108,  2028,  2052,  5987,
         6684,  2151, 28829,  9090,  1012,  4415,  1010,  2256, 11033, 15867,
         1996, 14108,  2005,  2029,  2009,  2003,  2087,  3497,  2008,  2069,
         2028,  9090,  2003, 28829,  1012,  2023,  2003,  2036,  1996, 14669,
         2801,  2369,  1996,  4555, 16593,  6958,  1012,   102])"
2250,1,"['dataset', 'maximum likelihood', 'likelihood', 'data']", The maximum likelihood principle,seg_283,"the maximum likelihood principle. given a dataset, choose the parameter(s) of interest in such a way that the data are most likely.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  1996,  4555, 16593,  6958,  1012,  2445,  1037,  2951, 13462,
         1010,  5454,  1996, 16381,  1006,  1055,  1007,  1997,  3037,  1999,
         2107,  1037,  2126,  2008,  1996,  2951,  2024,  2087,  3497,  1012,
          102])"
2251,1,"['case', 'probability', 'random', 'random variables', 'independent', 'variables', 'data']", The maximum likelihood principle,seg_283,"set ri = 1 in case the ith tested chip was defective and ri = 0 in case it was operational, where i = 1, . . . , 10. then r1, . . . , r10 are ten independent ber(p) distributed random variables, where p is the probability that a randomly selected chip is defective. the probability that the observed data occur is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2275, 15544,  1027,  1015,  1999,  2553,  1996,  2009,  2232,
         7718,  9090,  2001, 28829,  1998, 15544,  1027,  1014,  1999,  2553,
         2009,  2001,  6515,  1010,  2073,  1045,  1027,  1015,  1010,  1012,
         1012,  1012,  1010,  2184,  1012,  2059,  1054,  2487,  1010,  1012,
         1012,  1012,  1010,  1054, 10790,  2024,  2702,  2981,  2022,  2099,
         1006,  1052,  1007,  5500,  6721, 10857,  1010,  2073,  1052,  2003,
         1996,  9723,  2008,  1037, 18154,  3479,  9090,  2003, 28829,  1012,
         1996,  9723,  2008,  1996,  5159,  2951,  5258,  2003,  5020,  2000,
          102])"
2252,0,[], The maximum likelihood principle,seg_283,for the batch where about 10% of the chips are defective we find that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2005,  1996, 14108,  2073,  2055,  2184,  1003,  1997,  1996,
        11772,  2024, 28829,  2057,  2424,  2008,   102])"
2253,0,[], The maximum likelihood principle,seg_283,whereas for the other batch,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  6168,  2005,  1996,  2060, 14108,   102])"
2254,1,"['probability', 'data']", The maximum likelihood principle,seg_283,"so the probability for the batch with only 10% defective chips is about 40 times larger than the probability for the other batch. given the data, our dealer made a sound decision.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2061,  1996,  9723,  2005,  1996, 14108,  2007,  2069,  2184,
         1003, 28829, 11772,  2003,  2055,  2871,  2335,  3469,  2084,  1996,
         9723,  2005,  1996,  2060, 14108,  1012,  2445,  1996,  2951,  1010,
         2256, 11033,  2081,  1037,  2614,  3247,  1012,   102])"
2255,0,[], The maximum likelihood principle,seg_283,quick exercise 21.1 which batch should the dealer choose if only the first three chips are defective?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  4248,  6912,  2538,  1012,  1015,  2029, 14108,  2323,  1996,
        11033,  5454,  2065,  2069,  1996,  2034,  2093, 11772,  2024, 28829,
         1029,   102])"
2256,0,[], The maximum likelihood principle,seg_283,"returning to the example of the number of cycles up to pregnancy, denoting xi as the number of cycles up to pregnancy of the ith smoker, recall that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  4192,  2000,  1996,  2742,  1997,  1996,  2193,  1997, 12709,
         2039,  2000, 10032,  1010,  7939, 20656,  8418,  2004,  1996,  2193,
         1997, 12709,  2039,  2000, 10032,  1997,  1996,  2009,  2232,  5610,
         2099,  1010,  9131,  2008,   102])"
2257,1,['success'], The maximum likelihood principle,seg_283,p(xi > 12) = p(no success in cycle 1 to 12) = (1 − p)12;,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([ 101, 1052, 1006, 8418, 1028, 2260, 1007, 1027, 1052, 1006, 2053, 3112,
        1999, 5402, 1015, 2000, 2260, 1007, 1027, 1006, 1015, 1597, 1052, 1007,
        2260, 1025,  102])"
2258,1,"['geometric', 'function', 'geometric distribution', 'table', 'probability', 'random sample', 'sample', 'random', 'distribution', 'model', 'data']", The maximum likelihood principle,seg_283,"cf. quick exercise 4.6. from table 21.1 we see that there are 29 smokers for which xi = 1, that there are 16 for which xi = 2, etc. since we model the data as a random sample from a geometric distribution, the probability of the data—as a function of p—is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101, 12935,  1012,  4248,  6912,  1018,  1012,  1020,  1012,  2013,
         2795,  2538,  1012,  1015,  2057,  2156,  2008,  2045,  2024,  2756,
         5610,  2869,  2005,  2029,  8418,  1027,  1015,  1010,  2008,  2045,
         2024,  2385,  2005,  2029,  8418,  1027,  1016,  1010,  4385,  1012,
         2144,  2057,  2944,  1996,  2951,  2004,  1037,  6721,  7099,  2013,
         1037, 14965,  4353,  1010,  1996,  9723,  1997,  1996,  2951,  1517,
         2004,  1037,  3853,  1997,  1052,  1517,  2003,  2445,  2011,   102])"
2259,1,"['maximum likelihood', 'likelihood']", The maximum likelihood principle,seg_283,"here c is the number of ways we can assign 29 ones, 16 twos, . . . , 3 twelves, and 7 numbers larger than 12 to 100 smokers.1 according to the maximum likelihood principle we now choose p, with 0 ≤ p ≤ 1, in such a way, that l(p)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2182,  1039,  2003,  1996,  2193,  1997,  3971,  2057,  2064,
        23911,  2756,  3924,  1010,  2385,  2048,  2015,  1010,  1012,  1012,
         1012,  1010,  1017,  4376,  2015,  1010,  1998,  1021,  3616,  3469,
         2084,  2260,  2000,  2531,  5610,  2869,  1012,  1015,  2429,  2000,
         1996,  4555, 16593,  6958,  2057,  2085,  5454,  1052,  1010,  2007,
         1014,  1608,  1052,  1608,  1015,  1010,  1999,  2107,  1037,  2126,
         1010,  2008,  1048,  1006,  1052,  1007,   102])"
2260,1,['function'], The maximum likelihood principle,seg_283,"is maximal. since c does not depend on p, we do not need to know the value of c explicitly to find for which p the function l(p) is maximal.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2003, 29160,  1012,  2144,  1039,  2515,  2025, 12530,  2006,
         1052,  1010,  2057,  2079,  2025,  2342,  2000,  2113,  1996,  3643,
         1997,  1039, 12045,  2000,  2424,  2005,  2029,  1052,  1996,  3853,
         1048,  1006,  1052,  1007,  2003, 29160,  1012,   102])"
2261,0,[], The maximum likelihood principle,seg_283,differentiating l(p) with respect to p yields that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2367, 15370,  1048,  1006,  1052,  1007,  2007,  4847,  2000,
         1052, 16189,  2008,   102])"
2262,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", The maximum likelihood principle,seg_283,"now l′(p) = 0 if p = 0, p = 1, or p = 93/415 = 0.224, and l(p) attains its unique maximum in this last point (check this!). we say that 93/415 = 0.224 is the maximum likelihood estimate of p for the smokers. note that this estimate is quite a lot smaller than the estimate 0.29 for the smokers we found in the previous section, and the estimate 0.2809 you obtained in exercise 17.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  2085,  1048,  1531,  1006,  1052,  1007,  1027,  1014,  2065,
         1052,  1027,  1014,  1010,  1052,  1027,  1015,  1010,  2030,  1052,
         1027,  6109,  1013, 24690,  1027,  1014,  1012, 19711,  1010,  1998,
         1048,  1006,  1052,  1007, 18759,  2015,  2049,  4310,  4555,  1999,
         2023,  2197,  2391,  1006,  4638,  2023,   999,  1007,  1012,  2057,
         2360,  2008,  6109,  1013, 24690,  1027,  1014,  1012, 19711,  2003,
         1996,  4555, 16593, 10197,  1997,  1052,  2005,  1996,  5610,  2869,
         1012,  3602,  2008,  2023, 10197,  2003,  3243,  1037,  2843,  3760,
         2084,  1996, 10197,  1014,  1012,  2756,  2005,  1996,  5610,  2869,
         2057,  2179,  1999,  1996,  3025,  2930,  1010,  1998,  1996, 10197,
         1014,  1012, 13427,  2683,  2017,  4663,  1999,  6912,  2459,  1012,
         1019,  1012,   102])"
2263,1,"['probability', 'data']", The maximum likelihood principle,seg_283,quick exercise 21.2 check that for the nonsmokers the probability of the data is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101,  4248,  6912,  2538,  1012,  1016,  4638,  2008,  2005,  1996,
         2512, 25855, 11451,  1996,  9723,  1997,  1996,  2951,  2003,  2445,
         2011,   102])"
2264,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", The maximum likelihood principle,seg_283,compute the maximum likelihood estimate for p.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996,  4555, 16593,  6958])","tensor([  101, 24134,  1996,  4555, 16593, 10197,  2005,  1052,  1012,   102])"
2265,1,"['dependence', 'parameter', 'dataset', 'realization', 'random sample', 'sample', 'random', 'distribution']", Likelihood and loglikelihood,seg_285,"suppose we have a dataset x1, x2, . . . , xn, modeled as a realization of a random sample from a distribution characterized by a parameter θ. to stress the dependence of the distribution on θ, we write",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  6814,  2057,  2031,  1037,  2951, 13462,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,
        14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,  2013,  1037,
         4353,  7356,  2011,  1037, 16381,  1162,  1012,  2000,  6911,  1996,
        18642,  1997,  1996,  4353,  2006,  1162,  1010,  2057,  4339,   102])"
2266,1,"['distribution', 'function', 'probability', 'sample', 'probability mass function', 'mass function', 'discrete distribution', 'discrete', 'case']", Likelihood and loglikelihood,seg_285,for the probability mass function in case we have a sample from a discrete distribution and,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2005,  1996,  9723,  3742,  3853,  1999,  2553,  2057,  2031,
         1037,  7099,  2013,  1037, 16246,  4353,  1998,   102])"
2267,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'sample', 'continuous distribution', 'distribution']", Likelihood and loglikelihood,seg_285,for the probability density function when we have a sample from a continuous distribution.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([ 101, 2005, 1996, 9723, 4304, 3853, 2043, 2057, 2031, 1037, 7099, 2013,
        1037, 7142, 4353, 1012,  102])"
2268,1,"['dataset', 'function', 'estimate', 'realization', 'maximum likelihood', 'random sample', 'sample', 'random', 'likelihood', 'distribution', 'discrete distribution', 'discrete']", Likelihood and loglikelihood,seg_285,"for a dataset x1, x2, . . . , xn modeled as the realization of a random sample x1, . . . , xn from a discrete distribution, the maximum likelihood principle now tells us to estimate θ by that value, for which the function l(θ), given by",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2005,  1037,  2951, 13462,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078, 14440,  2004,  1996,
        12393,  1997,  1037,  6721,  7099,  1060,  2487,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2013,  1037, 16246,  4353,  1010,  1996,
         4555, 16593,  6958,  2085,  4136,  2149,  2000, 10197,  1162,  2011,
         2008,  3643,  1010,  2005,  2029,  1996,  3853,  1048,  1006,  1162,
         1007,  1010,  2445,  2011,   102])"
2269,1,"['function', 'estimate', 'maximum likelihood', 'likelihood function', 'maximum likelihood estimate', 'likelihood']", Likelihood and loglikelihood,seg_285,"is maximal. this value is called the maximum likelihood estimate of θ. the function l(θ) is called the likelihood function. this is a function of θ, determined by the numbers x1, x2, . . . , xn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2003, 29160,  1012,  2023,  3643,  2003,  2170,  1996,  4555,
        16593, 10197,  1997,  1162,  1012,  1996,  3853,  1048,  1006,  1162,
         1007,  2003,  2170,  1996, 16593,  3853,  1012,  2023,  2003,  1037,
         3853,  1997,  1162,  1010,  4340,  2011,  1996,  3616,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1012,   102])"
2270,1,"['continuous', 'function', 'density function', 'probability', 'probability density function', 'likelihood function', 'sample', 'independent', 'likelihood', 'distribution', 'continuous distribution', 'discrete', 'case']", Likelihood and loglikelihood,seg_285,"in case the sample is from a continuous distribution we clearly need to define the likelihood function l(θ) in a way different from the discrete case (if we would define l(θ) as in the discrete case, one always would have that l(θ) = 0). for a reasonable definition of the likelihood function we have the following motivation. let fθ be the probability density function of x , and let ε > 0 be some fixed, small number. it is sensible to choose θ in such a way, that the probability p(x1 − ε ≤ x1 ≤ x1 + ε, . . . , xn − ε ≤ xn ≤ xn + ε) is maximal. since the xi are independent, we find that",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1999,  2553,  1996,  7099,  2003,  2013,  1037,  7142,  4353,
         2057,  4415,  2342,  2000,  9375,  1996, 16593,  3853,  1048,  1006,
         1162,  1007,  1999,  1037,  2126,  2367,  2013,  1996, 16246,  2553,
         1006,  2065,  2057,  2052,  9375,  1048,  1006,  1162,  1007,  2004,
         1999,  1996, 16246,  2553,  1010,  2028,  2467,  2052,  2031,  2008,
         1048,  1006,  1162,  1007,  1027,  1014,  1007,  1012,  2005,  1037,
         9608,  6210,  1997,  1996, 16593,  3853,  2057,  2031,  1996,  2206,
        14354,  1012,  2292,  1042, 29725,  2022,  1996,  9723,  4304,  3853,
         1997,  1060,  1010,  1998,  2292,  1159,  1028,  1014,  2022,  2070,
         4964,  1010,  2235,  2193,  1012,  2009,  2003, 21082,  2000,  5454,
         1162,  1999,  2107,  1037,  2126,  1010,  2008,  1996,  9723,  1052,
         1006,  1060,  2487,  1597,  1159,  1608,  1060,  2487,  1608,  1060,
         2487,  1009,  1159,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1597,  1159,  1608,  1060,  2078,  1608,  1060,  2078,  1009,  1159,
         1007,  2003, 29160,  1012,  2144,  1996,  8418,  2024,  2981,  1010,
         2057,  2424,  2008,   102])"
2271,0,[], Likelihood and loglikelihood,seg_285,where in the last step we used that (see also equation (5.1)),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([ 101, 2073, 1999, 1996, 2197, 3357, 2057, 2109, 2008, 1006, 2156, 2036,
        8522, 1006, 1019, 1012, 1015, 1007, 1007,  102])"
2272,1,"['dataset', 'function', 'likelihood function', 'likelihood']", Likelihood and loglikelihood,seg_285,"note that the right-hand side of (21.1) is maximal whenever the function fθ(x1)fθ(x2) · · · fθ(xn) is maximal, irrespective of the value of ε. in view of this, given a dataset x1, x2, . . . , xn, the likelihood function l(θ) is defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  3602,  2008,  1996,  2157,  1011,  2192,  2217,  1997,  1006,
         2538,  1012,  1015,  1007,  2003, 29160,  7188,  1996,  3853,  1042,
        29725,  1006,  1060,  2487,  1007,  1042, 29725,  1006,  1060,  2475,
         1007,  1087,  1087,  1087,  1042, 29725,  1006,  1060,  2078,  1007,
         2003, 29160,  1010, 20868,  6072,  5051, 15277,  1997,  1996,  3643,
         1997,  1159,  1012,  1999,  3193,  1997,  2023,  1010,  2445,  1037,
         2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  1010,  1996, 16593,  3853,  1048,  1006,
         1162,  1007,  2003,  4225,  2011,   102])"
2273,1,"['continuous', 'case']", Likelihood and loglikelihood,seg_285,in the continuous case.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([ 101, 1999, 1996, 7142, 2553, 1012,  102])"
2274,1,"['function', 'estimate', 'maximum likelihood', 'random variable', 'estimates', 'likelihood function', 'random', 'likelihood', 'variable']", Likelihood and loglikelihood,seg_285,"maximum likelihood estimates. the maximum likelihood estimate of θ is the value t = h(x1, x2, . . . , xn) that maximizes the likelihood function l(θ). the corresponding random variable",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  4555, 16593, 10035,  1012,  1996,  4555, 16593, 10197,  1997,
         1162,  2003,  1996,  3643,  1056,  1027,  1044,  1006,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         1007,  2008, 25845,  2015,  1996, 16593,  3853,  1048,  1006,  1162,
         1007,  1012,  1996,  7978,  6721,  8023,   102])"
2275,1,"['likelihood', 'estimator', 'maximum likelihood', 'maximum likelihood estimator']", Likelihood and loglikelihood,seg_285,is called the maximum likelihood estimator for θ.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2003,  2170,  1996,  4555, 16593,  9765,  9581,  4263,  2005,
         1162,  1012,   102])"
2276,1,"['dataset', 'function', 'density function', 'probability', 'probability density function', 'random sample', 'sample', 'random', 'distribution']", Likelihood and loglikelihood,seg_285,"as an example, suppose we have a dataset x1, x2, . . . , xn modeled as a realization of a random sample from an exp(λ) distribution, with probability density function given by fλ(x) = 0 if x < 0 and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2004,  2019,  2742,  1010,  6814,  2057,  2031,  1037,  2951,
        13462,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078, 14440,  2004,  1037, 12393,  1997,  1037,  6721,
         7099,  2013,  2019,  4654,  2361,  1006,  1165,  1007,  4353,  1010,
         2007,  9723,  4304,  3853,  2445,  2011,  1042, 29727,  1006,  1060,
         1007,  1027,  1014,  2065,  1060,  1026,  1014,  1998,   102])"
2277,1,['likelihood'], Likelihood and loglikelihood,seg_285,then the likelihood is given by,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2059,  1996, 16593,  2003,  2445,  2011,   102])"
2278,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Likelihood and loglikelihood,seg_285,"to obtain the maximum likelihood estimate of λ it is enough to find the maximum of l(λ). to do so, we determine the derivative of l(λ):",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2000,  6855,  1996,  4555, 16593, 10197,  1997,  1165,  2009,
         2003,  2438,  2000,  2424,  1996,  4555,  1997,  1048,  1006,  1165,
         1007,  1012,  2000,  2079,  2061,  1010,  2057,  5646,  1996, 13819,
         1997,  1048,  1006,  1165,  1007,  1024,   102])"
2279,1,"['function', 'maximum likelihood', 'maximum likelihood estimator', 'likelihood function', 'estimator', 'likelihood']", Likelihood and loglikelihood,seg_285,"i.e., if λ = 1/x̄n. check that for this value of λ the likelihood function l(λ) attains a maximum! so the maximum likelihood estimator for λ is 1/x̄n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1045,  1012,  1041,  1012,  1010,  2065,  1165,  1027,  1015,
         1013,  1060,  2078,  1012,  4638,  2008,  2005,  2023,  3643,  1997,
         1165,  1996, 16593,  3853,  1048,  1006,  1165,  1007, 18759,  2015,
         1037,  4555,   999,  2061,  1996,  4555, 16593,  9765,  9581,  4263,
         2005,  1165,  2003,  1015,  1013,  1060,  2078,  1012,   102])"
2280,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Likelihood and loglikelihood,seg_285,"in the example of the number of cycles up to pregnancy of smoking women, we have seen that l(p) = c ·p93 ·(1−p)322. the maximum likelihood estimate of p was found by differentiating l(p). differentiating is not always possible, as the following example shows.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1999,  1996,  2742,  1997,  1996,  2193,  1997, 12709,  2039,
         2000, 10032,  1997,  9422,  2308,  1010,  2057,  2031,  2464,  2008,
         1048,  1006,  1052,  1007,  1027,  1039,  1087,  1052,  2683,  2509,
         1087,  1006,  1015, 22543,  2361,  1007, 23768,  1012,  1996,  4555,
        16593, 10197,  1997,  1052,  2001,  2179,  2011,  2367, 15370,  1048,
         1006,  1052,  1007,  1012,  2367, 15370,  2003,  2025,  2467,  2825,
         1010,  2004,  1996,  2206,  2742,  3065,  1012,   102])"
2281,1,"['uniform distribution', 'distribution']", Likelihood and loglikelihood,seg_285,estimating the upper endpoint of a uniform distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  9765, 22835,  1996,  3356,  2203,  8400,  1997,  1037,  6375,
         4353,   102])"
2282,1,"['dataset', 'function', 'density function', 'probability', 'probability density function', 'realization', 'random sample', 'sample', 'random', 'distribution']", Likelihood and loglikelihood,seg_285,"suppose the dataset x1 = 0.98, x2 = 1.57, and x3 = 0.31 is the realization of a random sample from a u(0, θ) distribution with θ > 0 unknown. the probability density function of each xi is now given by fθ(x) = 0 if x is not",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  6814,  1996,  2951, 13462,  1060,  2487,  1027,  1014,  1012,
         5818,  1010,  1060,  2475,  1027,  1015,  1012,  5401,  1010,  1998,
         1060,  2509,  1027,  1014,  1012,  2861,  2003,  1996, 12393,  1997,
         1037,  6721,  7099,  2013,  1037,  1057,  1006,  1014,  1010,  1162,
         1007,  4353,  2007,  1162,  1028,  1014,  4242,  1012,  1996,  9723,
         4304,  3853,  1997,  2169,  8418,  2003,  2085,  2445,  2011,  1042,
        29725,  1006,  1060,  1007,  1027,  1014,  2065,  1060,  2003,  2025,
          102])"
2283,1,['likelihood'], Likelihood and loglikelihood,seg_285,"the likelihood l(θ) is zero if θ is smaller than at least one of the xi, and equals 1/θ3 if θ is greater than or equal to each of the three xi, i.e.,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1996, 16593,  1048,  1006,  1162,  1007,  2003,  5717,  2065,
         1162,  2003,  3760,  2084,  2012,  2560,  2028,  1997,  1996,  8418,
         1010,  1998, 19635,  1015,  1013,  1162,  2509,  2065,  1162,  2003,
         3618,  2084,  2030,  5020,  2000,  2169,  1997,  1996,  2093,  8418,
         1010,  1045,  1012,  1041,  1012,  1010,   102])"
2284,1,"['likelihood function', 'function', 'likelihood']", Likelihood and loglikelihood,seg_285,"figure 21.1 depicts this likelihood function. one glance at this figure is enough to realize that l(θ) attains its maximum at max (x1, x2, x3) = 1.57.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  3275,  2538,  1012,  1015, 11230,  2023, 16593,  3853,  1012,
         2028,  6054,  2012,  2023,  3275,  2003,  2438,  2000,  5382,  2008,
         1048,  1006,  1162,  1007, 18759,  2015,  2049,  4555,  2012,  4098,
         1006,  1060,  2487,  1010,  1060,  2475,  1010,  1060,  2509,  1007,
         1027,  1015,  1012,  5401,  1012,   102])"
2285,1,"['dataset', 'maximum likelihood', 'maximum likelihood estimator', 'estimator', 'likelihood']", Likelihood and loglikelihood,seg_285,"in general, given a dataset x1, x2, . . . , xn originating from a u(0, θ) distribution, we see that l(θ) = 0 if θ is smaller than at least one of the xi and that l(θ) = 1/θn if θ is greater than or equal to the largest of the xi. we conclude that the maximum likelihood estimator of θ is given by max {x1, x2, . . . , xn}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1999,  2236,  1010,  2445,  1037,  2951, 13462,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
        14802,  2013,  1037,  1057,  1006,  1014,  1010,  1162,  1007,  4353,
         1010,  2057,  2156,  2008,  1048,  1006,  1162,  1007,  1027,  1014,
         2065,  1162,  2003,  3760,  2084,  2012,  2560,  2028,  1997,  1996,
         8418,  1998,  2008,  1048,  1006,  1162,  1007,  1027,  1015,  1013,
         1162,  2078,  2065,  1162,  2003,  3618,  2084,  2030,  5020,  2000,
         1996,  2922,  1997,  1996,  8418,  1012,  2057, 16519,  2008,  1996,
         4555, 16593,  9765,  9581,  4263,  1997,  1162,  2003,  2445,  2011,
         4098,  1063,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  1065,  1012,   102])"
2286,1,"['parameter', 'function', 'product rule', 'likelihood function', 'likelihood', 'process', 'loglikelihood function']", Likelihood and loglikelihood,seg_285,"in the preceding example it was easy to find the value of the parameter for which the likelihood is maximal. usually one can find the maximum by differentiating the likelihood function l(θ). the calculation of the derivative of l(θ) may be tedious, because l(θ) is a product of terms, all involving θ (see also quick exercise 21.3). to differentiate l(θ) we have to apply the product rule from calculus. considering the logarithm of l(θ) changes the product of the terms involving θ into a sum of logarithms of these terms, which makes the process of differentiating easier. moreover, because the logarithm is an increasing function, the likelihood function l(θ) and the loglikelihood function (θ), defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1999,  1996, 11003,  2742,  2009,  2001,  3733,  2000,  2424,
         1996,  3643,  1997,  1996, 16381,  2005,  2029,  1996, 16593,  2003,
        29160,  1012,  2788,  2028,  2064,  2424,  1996,  4555,  2011,  2367,
        15370,  1996, 16593,  3853,  1048,  1006,  1162,  1007,  1012,  1996,
        17208,  1997,  1996, 13819,  1997,  1048,  1006,  1162,  1007,  2089,
         2022,  6945,  6313,  1010,  2138,  1048,  1006,  1162,  1007,  2003,
         1037,  4031,  1997,  3408,  1010,  2035,  5994,  1162,  1006,  2156,
         2036,  4248,  6912,  2538,  1012,  1017,  1007,  1012,  2000, 21032,
         1048,  1006,  1162,  1007,  2057,  2031,  2000,  6611,  1996,  4031,
         3627,  2013, 19276,  1012,  6195,  1996,  8833,  8486,  2705,  2213,
         1997,  1048,  1006,  1162,  1007,  3431,  1996,  4031,  1997,  1996,
         3408,  5994,  1162,  2046,  1037,  7680,  1997,  8833,  8486,  2705,
         5244,  1997,  2122,  3408,  1010,  2029,  3084,  1996,  2832,  1997,
         2367, 15370,  6082,  1012,  9308,  1010,  2138,  1996,  8833,  8486,
         2705,  2213,  2003,  2019,  4852,  3853,  1010,  1996, 16593,  3853,
         1048,  1006,  1162,  1007,  1998,  1996,  8833, 10359,  3669,  9021,
         3853,  1006,  1162,  1007,  1010,  4225,  2011,   102])"
2287,1,"['extreme values', 'function', 'likelihood function', 'likelihood', 'loglikelihood function']", Likelihood and loglikelihood,seg_285,"attain their extreme values for the same values of θ. in particular, l(θ) is maximal if and only if (θ) is maximal. this is illustrated in figure 21.2 by the likelihood function l(p) = cp93(1 − p)322 and the loglikelihood function (p) = ln(c) + 93 ln(p) + 322 ln(1 − p) for the smokers.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101, 18759,  2037,  6034,  5300,  2005,  1996,  2168,  5300,  1997,
         1162,  1012,  1999,  3327,  1010,  1048,  1006,  1162,  1007,  2003,
        29160,  2065,  1998,  2069,  2065,  1006,  1162,  1007,  2003, 29160,
         1012,  2023,  2003,  7203,  1999,  3275,  2538,  1012,  1016,  2011,
         1996, 16593,  3853,  1048,  1006,  1052,  1007,  1027, 18133,  2683,
         2509,  1006,  1015,  1597,  1052,  1007, 23768,  1998,  1996,  8833,
        10359,  3669,  9021,  3853,  1006,  1052,  1007,  1027,  1048,  2078,
         1006,  1039,  1007,  1009,  6109,  1048,  2078,  1006,  1052,  1007,
         1009, 23768,  1048,  2078,  1006,  1015,  1597,  1052,  1007,  2005,
         1996,  5610,  2869,  1012,   102])"
2288,1,"['dataset', 'function', 'likelihood function', 'random sample', 'sample', 'random', 'likelihood', 'distribution', 'loglikelihood function']", Likelihood and loglikelihood,seg_285,"in the situation that we have a dataset x1, x2, . . . , xn modeled as a realization of a random sample from an exp(λ) distribution, we found as likelihood function l(λ) = λn · e−λ(x1+x2+···+xn). therefore, the loglikelihood function is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1999,  1996,  3663,  2008,  2057,  2031,  1037,  2951, 13462,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078, 14440,  2004,  1037, 12393,  1997,  1037,  6721,  7099,
         2013,  2019,  4654,  2361,  1006,  1165,  1007,  4353,  1010,  2057,
         2179,  2004, 16593,  3853,  1048,  1006,  1165,  1007,  1027,  1165,
         2078,  1087,  1041, 22543, 29727,  1006,  1060,  2487,  1009,  1060,
         2475,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  1007,  1012,
         3568,  1010,  1996,  8833, 10359,  3669,  9021,  3853,  2003,  2445,
         2011,   102])"
2289,1,"['function', 'estimate', 'maximum likelihood', 'maximum likelihood estimate', 'likelihood', 'loglikelihood function']", Likelihood and loglikelihood,seg_285,"quick exercise 21.3 in this example, use the loglikelihood function (λ) to show that the maximum likelihood estimate of λ equals 1/x̄n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  4248,  6912,  2538,  1012,  1017,  1999,  2023,  2742,  1010,
         2224,  1996,  8833, 10359,  3669,  9021,  3853,  1006,  1165,  1007,
         2000,  2265,  2008,  1996,  4555, 16593, 10197,  1997,  1165, 19635,
         1015,  1013,  1060,  2078,  1012,   102])"
2290,1,"['normal distribution', 'normal', 'distribution', 'parameters']", Likelihood and loglikelihood,seg_285,estimating the parameters of the normal distribution,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  9765, 22835,  1996, 11709,  1997,  1996,  3671,  4353,   102])"
2291,1,"['maximum likelihood', 'maximum likelihood estimates', 'dataset', 'case', 'function', 'realization', 'random sample', 'likelihood function', 'estimates', 'sample', 'random', 'likelihood', 'distribution', 'variables']", Likelihood and loglikelihood,seg_285,"suppose that the dataset x1, x2, . . . , xn is a realization of a random sample from an n(µ, σ2) distribution, with µ and σ unknown. what are the maximum likelihood estimates for µ and σ? in this case θ is the vector (µ, σ), and therefore the likelihood function is a function of two variables:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 1., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  6814,  2008,  1996,  2951, 13462,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,  1037,
        12393,  1997,  1037,  6721,  7099,  2013,  2019,  1050,  1006,  1085,
         1010,  1173,  2475,  1007,  4353,  1010,  2007,  1085,  1998,  1173,
         4242,  1012,  2054,  2024,  1996,  4555, 16593, 10035,  2005,  1085,
         1998,  1173,  1029,  1999,  2023,  2553,  1162,  2003,  1996,  9207,
         1006,  1085,  1010,  1173,  1007,  1010,  1998,  3568,  1996, 16593,
         3853,  2003,  1037,  3853,  1997,  2048, 10857,  1024,   102])"
2292,1,"['function', 'density function', 'probability', 'probability density function']", Likelihood and loglikelihood,seg_285,"where each fµ,σ(x) is the n(µ, σ2) probability density function:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2073,  2169,  1042, 29659,  1010,  1173,  1006,  1060,  1007,
         2003,  1996,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  9723,
         4304,  3853,  1024,   102])"
2293,0,[], Likelihood and loglikelihood,seg_285,the partial derivatives of are,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  1996,  7704, 16942,  1997,  2024,   102])"
2294,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Likelihood and loglikelihood,seg_285,"it is not hard to show that for these values of µ and σ the likelihood function l(µ, σ) attains a maximum. we find that x̄n is the maximum likelihood estimate for µ and that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2009,  2003,  2025,  2524,  2000,  2265,  2008,  2005,  2122,
         5300,  1997,  1085,  1998,  1173,  1996, 16593,  3853,  1048,  1006,
         1085,  1010,  1173,  1007, 18759,  2015,  1037,  4555,  1012,  2057,
         2424,  2008,  1060,  2078,  2003,  1996,  4555, 16593, 10197,  2005,
         1085,  1998,  2008,   102])"
2295,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Likelihood and loglikelihood,seg_285,is the maximum likelihood estimate for σ.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([16593,  1998,  8833, 10359,  3669,  9021])","tensor([  101,  2003,  1996,  4555, 16593, 10197,  2005,  1173,  1012,   102])"
2296,1,"['estimators', 'maximum likelihood', 'maximum likelihood estimators', 'likelihood']", Properties of maximum likelihood estimators,seg_287,"apart from the fact that the maximum likelihood principle provides a general principle to construct estimators, one can also show that maximum likelihood estimators have several desirable properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  4237,  2013,  1996,  2755,  2008,  1996,  4555, 16593,  6958,
         3640,  1037,  2236,  6958,  2000,  9570,  9765,  9581,  6591,  1010,
         2028,  2064,  2036,  2265,  2008,  4555, 16593,  9765,  9581,  6591,
         2031,  2195, 16166,  5144,  1012,   102])"
2297,0,[], Properties of maximum likelihood estimators,seg_287,"in the previous example, we saw that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([ 101, 1999, 1996, 3025, 2742, 1010, 2057, 2387, 2008,  102])"
2298,1,"['parameter', 'maximum likelihood', 'maximum likelihood estimator', 'estimator', 'likelihood']", Properties of maximum likelihood estimators,seg_287,"is the maximum likelihood estimator for the parameter σ of an n(µ, σ2) distribution. does this imply that dn",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  2003,  1996,  4555, 16593,  9765,  9581,  4263,  2005,  1996,
        16381,  1173,  1997,  2019,  1050,  1006,  1085,  1010,  1173,  2475,
         1007,  4353,  1012,  2515,  2023, 19515,  2008,  1040,  2078,   102])"
2299,1,"['parameter', 'function', 'maximum likelihood', 'maximum likelihood estimator', 'estimator', 'likelihood', 'case']", Properties of maximum likelihood estimators,seg_287,"2 is the maximum likelihood estimator for σ2? this is indeed the case! in general one can show that if t is the maximum likelihood estimator of a parameter θ and g(θ) is an invertible function of θ, then g(t ) is the maximum likelihood estimator for g(θ).",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  1016,  2003,  1996,  4555, 16593,  9765,  9581,  4263,  2005,
         1173,  2475,  1029,  2023,  2003,  5262,  1996,  2553,   999,  1999,
         2236,  2028,  2064,  2265,  2008,  2065,  1056,  2003,  1996,  4555,
        16593,  9765,  9581,  4263,  1997,  1037, 16381,  1162,  1998,  1043,
         1006,  1162,  1007,  2003,  2019,  1999, 16874,  7028,  3853,  1997,
         1162,  1010,  2059,  1043,  1006,  1056,  1007,  2003,  1996,  4555,
        16593,  9765,  9581,  4263,  2005,  1043,  1006,  1162,  1007,  1012,
          102])"
2300,0,[], Properties of maximum likelihood estimators,seg_287,asymptotic unbiasedness,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  2004, 24335, 13876, 20214,  4895, 11607,  6924,  2791,   102])"
2301,1,"['maximum likelihood', 'maximum likelihood estimator', 'biased', 'estimator', 'likelihood']", Properties of maximum likelihood estimators,seg_287,"the maximum likelihood estimator t may be biased. for example, because dn",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  1996,  4555, 16593,  9765,  9581,  4263,  1056,  2089,  2022,
        25352,  1012,  2005,  2742,  1010,  2138,  1040,  2078,   102])"
2302,1,"['likelihood', 'estimator', 'maximum likelihood', 'maximum likelihood estimator']", Properties of maximum likelihood estimators,seg_287,"2 , for the previously mentioned maximum likelihood estimator dn",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  1016,  1010,  2005,  1996,  3130,  3855,  4555, 16593,  9765,
         9581,  4263,  1040,  2078,   102])"
2303,0,[], Properties of maximum likelihood estimators,seg_287,we see that dn,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([ 101, 2057, 2156, 2008, 1040, 2078,  102])"
2304,1,"['biased estimator', 'biased', 'estimator', 'expected value']", Properties of maximum likelihood estimators,seg_287,"2 is a biased estimator for σ2, but also that as n goes to infinity, the expected value of dn",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  1016,  2003,  1037, 25352,  9765,  9581,  4263,  2005,  1173,
         2475,  1010,  2021,  2036,  2008,  2004,  1050,  3632,  2000, 15579,
         1010,  1996,  3517,  3643,  1997,  1040,  2078,   102])"
2305,1,"['maximum likelihood', 'mean', 'dataset', 'estimators', 'parameter', 'unbiased', 'maximum likelihood estimator', 'estimator', 'random variables', 'maximum likelihood estimators', 'random', 'likelihood', 'distribution', 'variables']", Properties of maximum likelihood estimators,seg_287,"2 converges to σ2. this holds more generally. under mild conditions on the distribution of the random variables xi under consideration (see, e.g., [36]), one can show that asymptotically (that is, as the size n of the dataset goes to infinity) maximum likelihood estimators are unbiased. by this we mean that if tn = h(x1, x2, . . . , xn) is the maximum likelihood estimator for a parameter θ, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  1016, 28314,  2015,  2000,  1173,  2475,  1012,  2023,  4324,
         2062,  3227,  1012,  2104, 10256,  3785,  2006,  1996,  4353,  1997,
         1996,  6721, 10857,  8418,  2104,  9584,  1006,  2156,  1010,  1041,
         1012,  1043,  1012,  1010,  1031,  4029,  1033,  1007,  1010,  2028,
         2064,  2265,  2008,  2004, 24335, 13876, 20214,  3973,  1006,  2008,
         2003,  1010,  2004,  1996,  2946,  1050,  1997,  1996,  2951, 13462,
         3632,  2000, 15579,  1007,  4555, 16593,  9765,  9581,  6591,  2024,
         4895, 11607,  6924,  1012,  2011,  2023,  2057,  2812,  2008,  2065,
        28286,  1027,  1044,  1006,  1060,  2487,  1010,  1060,  2475,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1007,  2003,  1996,  4555,
        16593,  9765,  9581,  4263,  2005,  1037, 16381,  1162,  1010,  2059,
          102])"
2306,1,"['minimum variance', 'variance']", Properties of maximum likelihood estimators,seg_287,asymptotic minimum variance,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  2004, 24335, 13876, 20214,  6263, 23284,   102])"
2307,1,"['parameter', 'estimators', 'variance', 'maximum likelihood', 'unbiased', 'maximum likelihood estimator', 'estimator', 'unbiased estimators', 'likelihood', 'unbiased estimator']", Properties of maximum likelihood estimators,seg_287,"the variance of an unbiased estimator for a parameter θ is always larger than or equal to a certain positive number, known as the cramér-rao lower bound (see remark 20.2). again under mild conditions one can show that maximum likelihood estimators have asymptotically the smallest variance among unbiased estimators. that is, asymptotically the variance of the maximum likelihood estimator for a parameter θ attains the cramér-rao lower bound.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4555, 16593,  9765,  9581,  6591])","tensor([  101,  1996, 23284,  1997,  2019,  4895, 11607,  6924,  9765,  9581,
         4263,  2005,  1037, 16381,  1162,  2003,  2467,  3469,  2084,  2030,
         5020,  2000,  1037,  3056,  3893,  2193,  1010,  2124,  2004,  1996,
        29433,  1011, 10546,  2896,  5391,  1006,  2156, 17674,  2322,  1012,
         1016,  1007,  1012,  2153,  2104, 10256,  3785,  2028,  2064,  2265,
         2008,  4555, 16593,  9765,  9581,  6591,  2031,  2004, 24335, 13876,
        20214,  3973,  1996, 10479, 23284,  2426,  4895, 11607,  6924,  9765,
         9581,  6591,  1012,  2008,  2003,  1010,  2004, 24335, 13876, 20214,
         3973,  1996, 23284,  1997,  1996,  4555, 16593,  9765,  9581,  4263,
         2005,  1037, 16381,  1162, 18759,  2015,  1996, 29433,  1011, 10546,
         2896,  5391,  1012,   102])"
2308,1,"['probability', 'data', 'case']", Solutions to the quick exercises,seg_289,"21.1 in the case that only the first three chips are defective, the probability that the observed data occur is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2538,  1012,  1015,  1999,  1996,  2553,  2008,  2069,  1996,
         2034,  2093, 11772,  2024, 28829,  1010,  1996,  9723,  2008,  1996,
         5159,  2951,  5258,  2003,  5020,  2000,   102])"
2309,0,[], Solutions to the quick exercises,seg_289,for the batch where about 10% of the chips are defective we find that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2005,  1996, 14108,  2073,  2055,  2184,  1003,  1997,  1996,
        11772,  2024, 28829,  2057,  2424,  2008,   102])"
2310,1,['probability'], Solutions to the quick exercises,seg_289,whereas for the other batch this probability is equal to ( 2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  6168,  2005,  1996,  2060, 14108,  2023,  9723,  2003,  5020,
         2000,  1006,  1016,   102])"
2311,1,['probability'], Solutions to the quick exercises,seg_289,"so the probability for the batch with about 50% defective chips is about 2 times larger than the probability for the other batch. in view of this, it would be reasonable to choose the other batch, not the tested one.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2061,  1996,  9723,  2005,  1996, 14108,  2007,  2055,  2753,
         1003, 28829, 11772,  2003,  2055,  1016,  2335,  3469,  2084,  1996,
         9723,  2005,  1996,  2060, 14108,  1012,  1999,  3193,  1997,  2023,
         1010,  2009,  2052,  2022,  9608,  2000,  5454,  1996,  2060, 14108,
         1010,  2025,  1996,  7718,  2028,  1012,   102])"
2312,1,['table'], Solutions to the quick exercises,seg_289,21.2 from table 21.1 we derive,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2538,  1012,  1016,  2013,  2795,  2538,  1012,  1015,  2057,
        18547,   102])"
2313,0,[], Solutions to the quick exercises,seg_289,"here the constant is the number of ways we can assign 198 ones, 107 twos, . . . , 6 twelves, and 12 numbers larger than 12 to 486 nonsmokers. differentiating l(p) with respect to p yields that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2182,  1996,  5377,  2003,  1996,  2193,  1997,  3971,  2057,
         2064, 23911, 20003,  3924,  1010, 10550,  2048,  2015,  1010,  1012,
         1012,  1012,  1010,  1020,  4376,  2015,  1010,  1998,  2260,  3616,
         3469,  2084,  2260,  2000,  4466,  2575,  2512, 25855, 11451,  1012,
         2367, 15370,  1048,  1006,  1052,  1007,  2007,  4847,  2000,  1052,
        16189,  2008,   102])"
2314,1,"['function', 'loglikelihood function']", Solutions to the quick exercises,seg_289,21.3 the loglikelihood function l(λ) has derivative,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2538,  1012,  1017,  1996,  8833, 10359,  3669,  9021,  3853,
         1048,  1006,  1165,  1007,  2038, 13819,   102])"
2315,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Solutions to the quick exercises,seg_289,one finds that ′(λ) = 0 if and only if λ = 1/x̄n and that this is a maximum. the maximum likelihood estimate for λ is therefore 1/x̄n.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2028,  4858,  2008,  1531,  1006,  1165,  1007,  1027,  1014,
         2065,  1998,  2069,  2065,  1165,  1027,  1015,  1013,  1060,  2078,
         1998,  2008,  2023,  2003,  1037,  4555,  1012,  1996,  4555, 16593,
        10197,  2005,  1165,  2003,  3568,  1015,  1013,  1060,  2078,  1012,
          102])"
2316,1,['experiment'], Exercises,seg_291,"21.1 consider the following situation. suppose we have two fair dice, d1 with 5 red sides and 1 white side and d2 with 1 red side and 5 white sides. we pick one of the dice randomly, and throw it repeatedly until red comes up for the first time. with the same die this experiment is repeated two more times. suppose the following happens:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1015,  5136,  1996,  2206,  3663,  1012,  6814,
         2057,  2031,  2048,  4189, 18740,  1010,  1040,  2487,  2007,  1019,
         2417,  3903,  1998,  1015,  2317,  2217,  1998,  1040,  2475,  2007,
         1015,  2417,  2217,  1998,  1019,  2317,  3903,  1012,  2057,  4060,
         2028,  1997,  1996, 18740, 18154,  1010,  1998,  5466,  2009,  8385,
         2127,  2417,  3310,  2039,  2005,  1996,  2034,  2051,  1012,  2007,
         1996,  2168,  3280,  2023,  7551,  2003,  5567,  2048,  2062,  2335,
         1012,  6814,  1996,  2206,  6433,  1024,   102])"
2317,1,['experiment'], Exercises,seg_291,first experiment: first red appears in 3rd throw second experiment: first red appears in 5th throw third experiment: first red appears in 4th throw.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2034, 7551, 1024, 2034, 2417, 3544, 1999, 3822, 5466, 2117, 7551,
        1024, 2034, 2417, 3544, 1999, 4833, 5466, 2353, 7551, 1024, 2034, 2417,
        3544, 1999, 4343, 5466, 1012,  102])"
2318,1,"['probability', 'probabilities']", Exercises,seg_291,"show that for die d1 this happens with probability 5.7424 · 10−8, and for die d2 the probability with which this happens is 8.9725 · 10−4. given these probabilities, which die do you think we picked?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2265,  2008,  2005,  3280,  1040,  2487,  2023,  6433,  2007,
         9723,  1019,  1012,  6356, 18827,  1087,  2184, 22543,  2620,  1010,
         1998,  2005,  3280,  1040,  2475,  1996,  9723,  2007,  2029,  2023,
         6433,  2003,  1022,  1012,  5989, 17788,  1087,  2184, 22543,  2549,
         1012,  2445,  2122,  4013,  3676, 14680,  1010,  2029,  3280,  2079,
         2017,  2228,  2057,  3856,  1029,   102])"
2319,1,"['experiment', 'data']", Exercises,seg_291,21.2 we throw an unfair coin repeatedly until heads comes up for the first time. we repeat this experiment three times (with the same coin) and obtain the following data:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1016,  2057,  5466,  2019, 15571,  9226,  8385,
         2127,  4641,  3310,  2039,  2005,  1996,  2034,  2051,  1012,  2057,
         9377,  2023,  7551,  2093,  2335,  1006,  2007,  1996,  2168,  9226,
         1007,  1998,  6855,  1996,  2206,  2951,  1024,   102])"
2320,1,['experiment'], Exercises,seg_291,first experiment: heads first comes up in 3rd throw second experiment: heads first comes up in 5th throw third experiment: heads first comes up in 4th throw.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2034, 7551, 1024, 4641, 2034, 3310, 2039, 1999, 3822, 5466, 2117,
        7551, 1024, 4641, 2034, 3310, 2039, 1999, 4833, 5466, 2353, 7551, 1024,
        4641, 2034, 3310, 2039, 1999, 4343, 5466, 1012,  102])"
2321,1,"['probability', 'estimate', 'maximum likelihood', 'maximum likelihood estimate', 'likelihood']", Exercises,seg_291,let p be the probability that heads comes up in a throw with this coin. determine the maximum likelihood estimate p̂ of p.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2292,  1052,  2022,  1996,  9723,  2008,  4641,  3310,  2039,
         1999,  1037,  5466,  2007,  2023,  9226,  1012,  5646,  1996,  4555,
        16593, 10197,  1052,  1997,  1052,  1012,   102])"
2322,1,"['parameter', 'poisson', 'distribution', 'poisson distribution']", Exercises,seg_291,21.3 in exercise 17.4 we modeled the hits of london by flying bombs by a poisson distribution with parameter µ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1017,  1999,  6912,  2459,  1012,  1018,  2057,
        14440,  1996,  4978,  1997,  2414,  2011,  3909,  9767,  2011,  1037,
        13433, 24077,  4353,  2007, 16381,  1085,  1012,   102])"
2323,1,"['maximum likelihood', 'estimate', 'maximum likelihood estimate', 'likelihood', 'data']", Exercises,seg_291,a. use the data from exercise 17.4 to find the maximum likelihood estimate,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2224,  1996,  2951,  2013,  6912,  2459,  1012,
         1018,  2000,  2424,  1996,  4555, 16593, 10197,   102])"
2324,1,['data'], Exercises,seg_291,b. suppose the summarized data from exercise 17.4 got corrupted in the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  1996, 22539,  2951,  2013,  6912,  2459,
         1012,  1018,  2288, 27279,  1999,  1996,   102])"
2325,0,[], Exercises,seg_291,number of squares 440 93 35 7 0 0 1,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2193,  1997, 14320, 17422,  6109,  3486,  1021,  1014,  1014,
         1015,   102])"
2326,1,"['maximum likelihood', 'estimate', 'maximum likelihood estimate', 'likelihood', 'data']", Exercises,seg_291,"using this new data, what is the maximum likelihood estimate of µ?",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2478,  2023,  2047,  2951,  1010,  2054,  2003,  1996,  4555,
        16593, 10197,  1997,  1085,  1029,   102])"
2327,1,"['dataset', 'probability', 'estimate', 'realization', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_291,"21.4 in section 19.1, we considered the arrivals of packages at a network server, where we modeled the number of arrivals per minute by a pois(µ) distribution. let x1, x2, . . . , xn be a realization of a random sample from a pois(µ) distribution. we saw on page 286 that a natural estimate of the probability of zeros in the dataset is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1018,  1999,  2930,  2539,  1012,  1015,  1010,
         2057,  2641,  1996, 25470,  1997, 14555,  2012,  1037,  2897,  8241,
         1010,  2073,  2057, 14440,  1996,  2193,  1997, 25470,  2566,  3371,
         2011,  1037, 13433,  2483,  1006,  1085,  1007,  4353,  1012,  2292,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2022,  1037, 12393,  1997,  1037,  6721,  7099,  2013,
         1037, 13433,  2483,  1006,  1085,  1007,  4353,  1012,  2057,  2387,
         2006,  3931, 24921,  2008,  1037,  3019, 10197,  1997,  1996,  9723,
         1997,  5717,  2015,  1999,  1996,  2951, 13462,  2003,  2445,  2011,
          102])"
2328,0,[], Exercises,seg_291,number of xi equal to zero .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2193, 1997, 8418, 5020, 2000, 5717, 1012,  102])"
2329,1,['likelihood'], Exercises,seg_291,a. show that the likelihood l(µ) is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2265,  2008,  1996, 16593,  1048,  1006,  1085,
         1007,  2003,  2445,  2011,   102])"
2330,0,[], Exercises,seg_291,b. determine the loglikelihood (µ) and the formula of the maximum likeli-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996,  8833, 10359,  3669,  9021,  1006,
         1085,  1007,  1998,  1996,  5675,  1997,  1996,  4555,  2066,  3669,
         1011,   102])"
2331,1,"['probability', 'estimate', 'maximum likelihood', 'maximum likelihood estimate', 'likelihood']", Exercises,seg_291,hood estimate for µ. −µ c. what is the maximum likelihood estimate for the probability e of zero,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  7415, 10197,  2005,  1085,  1012,  1597, 29659,  1039,  1012,
         2054,  2003,  1996,  4555, 16593, 10197,  2005,  1996,  9723,  1041,
         1997,  5717,   102])"
2332,1,"['dataset', 'normal distribution', 'realization', 'random sample', 'sample', 'random', 'normal', 'distribution']", Exercises,seg_291,"21.5 suppose that x1, x2, . . . , xn is a dataset, which is a realization of a random sample from a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1019,  6814,  2008,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,  1037,
         2951, 13462,  1010,  2029,  2003,  1037, 12393,  1997,  1037,  6721,
         7099,  2013,  1037,  3671,  4353,  1012,   102])"
2333,1,"['probability', 'normal', 'normal distribution', 'distribution']", Exercises,seg_291,a. let the probability density of this normal distribution be given by,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2292, 1996, 9723, 4304, 1997, 2023, 3671, 4353, 2022,
        2445, 2011,  102])"
2334,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Exercises,seg_291,determine the maximum likelihood estimate for µ.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  5646,  1996,  4555, 16593, 10197,  2005,  1085,  1012,   102])"
2335,1,"['normal', 'normal distribution', 'distribution']", Exercises,seg_291,b. now suppose that the density of this normal distribution is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2085, 6814, 2008, 1996, 4304, 1997, 2023, 3671, 4353,
        2003, 2445, 2011,  102])"
2336,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Exercises,seg_291,determine the maximum likelihood estimate for σ.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  5646,  1996,  4555, 16593, 10197,  2005,  1173,  1012,   102])"
2337,1,"['dataset', 'probability', 'realization', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_291,"21.6 let x1, x2, . . . , xn be a dataset that is a realization of a random sample from a distribution with probability density fδ(x) given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1020,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,  1037,  2951,
        13462,  2008,  2003,  1037, 12393,  1997,  1037,  6721,  7099,  2013,
         1037,  4353,  2007,  9723,  4304,  1042, 29722,  1006,  1060,  1007,
         2445,  2011,   102])"
2338,1,['likelihood'], Exercises,seg_291,a. draw the likelihood l(δ).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4009,  1996, 16593,  1048,  1006,  1158,  1007,
         1012,   102])"
2339,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Exercises,seg_291,b. determine the maximum likelihood estimate for δ.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996,  4555, 16593, 10197,  2005,  1158,
         1012,   102])"
2340,1,"['continuous', 'dataset', 'function', 'density function', 'rayleigh distribution', 'probability', 'probability density function', 'realization', 'sample', 'continuous distribution', 'distribution']", Exercises,seg_291,"21.7 suppose that x1, x2, . . . , xn is a dataset, which is a realization of a random sample from a rayleigh distribution, which is a continuous distribution with probability density function given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1021,  6814,  2008,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,  1037,
         2951, 13462,  1010,  2029,  2003,  1037, 12393,  1997,  1037,  6721,
         7099,  2013,  1037,  4097, 13615,  4353,  1010,  2029,  2003,  1037,
         7142,  4353,  2007,  9723,  4304,  3853,  2445,  2011,   102])"
2341,1,"['maximum likelihood', 'estimate', 'maximum likelihood estimate', 'likelihood', 'case']", Exercises,seg_291,in this case what is the maximum likelihood estimate for θ?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1999,  2023,  2553,  2054,  2003,  1996,  4555, 16593, 10197,
         2005,  1162,  1029,   102])"
2342,1,['table'], Exercises,seg_291,"21.8 (exercises 19.7 and 20.7 continued) a certain type of plant can be divided into four types: starchy-green, starchy-white, sugary-green, and sugarywhite. the following table lists the counts of the various types among 3839 leaves.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1022,  1006, 11110,  2539,  1012,  1021,  1998,
         2322,  1012,  1021,  2506,  1007,  1037,  3056,  2828,  1997,  3269,
         2064,  2022,  4055,  2046,  2176,  4127,  1024,  2732, 11714,  1011,
         2665,  1010,  2732, 11714,  1011,  2317,  1010,  5699,  2100,  1011,
         2665,  1010,  1998,  5699,  2100,  2860, 16584,  2063,  1012,  1996,
         2206,  2795,  7201,  1996,  9294,  1997,  1996,  2536,  4127,  2426,
         4229, 23499,  3727,  1012,   102])"
2343,0,[], Exercises,seg_291,starchy-green 1997 sugary-white 32 starchy-white 906 sugary-green 904,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  2732, 11714,  1011,  2665,  2722,  5699,  2100,  1011,  2317,
         3590,  2732, 11714,  1011,  2317,  3938,  2575,  5699,  2100,  1011,
         2665,  3938,  2549,   102])"
2344,0,[], Exercises,seg_291,"⎧1 if the observed leave is of type starchy-green ⎪⎪⎪ 2 if the observed leave is of type sugary-white x = ⎪⎨3 if the observed leave is of type starchy-white ⎪ ⎩4 if the observed leave is of type sugary-green,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,   100,  2065,  1996,  5159,  2681,  2003,  1997,  2828,  2732,
        11714,  1011,  2665,   100,  1016,  2065,  1996,  5159,  2681,  2003,
         1997,  2828,  5699,  2100,  1011,  2317,  1060,  1027,   100,  2065,
         1996,  5159,  2681,  2003,  1997,  2828,  2732, 11714,  1011,  2317,
          100,   100,  2065,  1996,  5159,  2681,  2003,  1997,  2828,  5699,
         2100,  1011,  2665,  1010,   102])"
2345,1,"['function', 'probability', 'probability mass function', 'mass function']", Exercises,seg_291,the probability mass function p of x is given by,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1996, 9723, 3742, 3853, 1052, 1997, 1060, 2003, 2445, 2011,  102])"
2346,1,"['parameter', 'estimated', 'maximum likelihood', 'estimate', 'maximum likelihood estimate', 'likelihood']", Exercises,seg_291,"and p(a) = 0 for all other a. here 0 < θ < 1 is an unknown parameter, which was estimated in exercise 19.7. we want to find a maximum likelihood estimate of θ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1998,  1052,  1006,  1037,  1007,  1027,  1014,  2005,  2035,
         2060,  1037,  1012,  2182,  1014,  1026,  1162,  1026,  1015,  2003,
         2019,  4242, 16381,  1010,  2029,  2001,  4358,  1999,  6912,  2539,
         1012,  1021,  1012,  2057,  2215,  2000,  2424,  1037,  4555, 16593,
        10197,  1997,  1162,  1012,   102])"
2347,1,"['likelihood', 'data']", Exercises,seg_291,a. use the data to find the likelihood l(θ) and the loglikelihood (θ).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2224,  1996,  2951,  2000,  2424,  1996, 16593,
         1048,  1006,  1162,  1007,  1998,  1996,  8833, 10359,  3669,  9021,
         1006,  1162,  1007,  1012,   102])"
2348,1,"['maximum likelihood', 'estimate', 'maximum likelihood estimate', 'likelihood', 'data']", Exercises,seg_291,b. what is the maximum likelihood estimate of θ using the data from the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2003,  1996,  4555, 16593, 10197,  1997,
         1162,  2478,  1996,  2951,  2013,  1996,   102])"
2349,1,['table'], Exercises,seg_291,preceding table?,tensor(1),"tensor([0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101, 11003,  2795,  1029,   102])"
2350,0,['n'], Exercises,seg_291,c. suppose that we have the counts of n different leaves: n1 of type starchy-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  6814,  2008,  2057,  2031,  1996,  9294,  1997,
         1050,  2367,  3727,  1024,  1050,  2487,  1997,  2828,  2732, 11714,
         1011,   102])"
2351,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Exercises,seg_291,"green, n2 of type sugary-white, n3 of type starchy-white, and n4 of type sugary-green (so n = n1 + n2 + n3 + n4). determine the general formula for the maximum likelihood estimate of θ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2665,  1010,  1050,  2475,  1997,  2828,  5699,  2100,  1011,
         2317,  1010,  1050,  2509,  1997,  2828,  2732, 11714,  1011,  2317,
         1010,  1998,  1050,  2549,  1997,  2828,  5699,  2100,  1011,  2665,
         1006,  2061,  1050,  1027,  1050,  2487,  1009,  1050,  2475,  1009,
         1050,  2509,  1009,  1050,  2549,  1007,  1012,  5646,  1996,  2236,
         5675,  2005,  1996,  4555, 16593, 10197,  1997,  1162,  1012,   102])"
2352,1,"['dataset', 'realization', 'estimates', 'maximum likelihood', 'random sample', 'sample', 'random', 'likelihood', 'maximum likelihood estimates', 'distribution']", Exercises,seg_291,"21.9 let x1, x2, . . . , xn be a dataset that is a realization of a random sample from a u(α, β) distribution (with α and β unknown, α < β). determine the maximum likelihood estimates for α and β.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  1023,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,  1037,  2951,
        13462,  2008,  2003,  1037, 12393,  1997,  1037,  6721,  7099,  2013,
         1037,  1057,  1006,  1155,  1010,  1156,  1007,  4353,  1006,  2007,
         1155,  1998,  1156,  4242,  1010,  1155,  1026,  1156,  1007,  1012,
         5646,  1996,  4555, 16593, 10035,  2005,  1155,  1998,  1156,  1012,
          102])"
2353,1,"['dataset', 'estimate', 'realization', 'maximum likelihood', 'random sample', 'sample', 'random', 'maximum likelihood estimate', 'likelihood', 'distribution']", Exercises,seg_291,"21.10 let x1, x2, . . . , xn be a dataset, which is a realization of a random sample from a par(α) distribution. what is the maximum likelihood estimate for α?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  2184,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2022,  1037,  2951,
        13462,  1010,  2029,  2003,  1037, 12393,  1997,  1037,  6721,  7099,
         2013,  1037, 11968,  1006,  1155,  1007,  4353,  1012,  2054,  2003,
         1996,  4555, 16593, 10197,  2005,  1155,  1029,   102])"
2354,1,"['maximum likelihood', 'estimates', 'random', 'random variables', 'likelihood', 'maximum likelihood estimates', 'variables']", Exercises,seg_291,"21.11 in exercise 4.13 we considered the situation where we have a box containing an unknown number—say n—of identical bolts. in order to get an idea of the size of n we introduced three random variables x , y , and z. here we will use x and y , and in the next exercise z, to find maximum likelihood estimates of n .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  2340,  1999,  6912,  1018,  1012,  2410,  2057,
         2641,  1996,  3663,  2073,  2057,  2031,  1037,  3482,  4820,  2019,
         4242,  2193,  1517,  2360,  1050,  1517,  1997,  7235, 19947,  1012,
         1999,  2344,  2000,  2131,  2019,  2801,  1997,  1996,  2946,  1997,
         1050,  2057,  3107,  2093,  6721, 10857,  1060,  1010,  1061,  1010,
         1998,  1062,  1012,  2182,  2057,  2097,  2224,  1060,  1998,  1061,
         1010,  1998,  1999,  1996,  2279,  6912,  1062,  1010,  2000,  2424,
         4555, 16593, 10035,  1997,  1050,  1012,   102])"
2355,1,"['dataset', 'realization', 'random']", Exercises,seg_291,"a. suppose that x1, x2, . . . , xn is a dataset, which is a realization of a random",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  2008,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,  1037,  2951,
        13462,  1010,  2029,  2003,  1037, 12393,  1997,  1037,  6721,   102])"
2356,1,"['maximum likelihood', 'estimate', 'maximum likelihood estimate', 'likelihood', 'distribution']", Exercises,seg_291,sample from a geo(1/n) distribution. determine the maximum likelihood estimate for n .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  7099,  2013,  1037, 20248,  1006,  1015,  1013,  1050,  1007,
         4353,  1012,  5646,  1996,  4555, 16593, 10197,  2005,  1050,  1012,
          102])"
2357,1,"['dataset', 'realization', 'random']", Exercises,seg_291,"b. suppose that y1, y2, . . . , yn is a dataset, which is a realization of a random",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  6814,  2008,  1061,  2487,  1010,  1061,  2475,
         1010,  1012,  1012,  1012,  1010,  1061,  2078,  2003,  1037,  2951,
        13462,  1010,  2029,  2003,  1037, 12393,  1997,  1037,  6721,   102])"
2358,1,"['uniform distribution', 'estimate', 'maximum likelihood', 'maximum likelihood estimate', 'discrete uniform distribution', 'likelihood', 'distribution', 'discrete']", Exercises,seg_291,"sample from a discrete uniform distribution on 1, 2, . . . , n . determine the maximum likelihood estimate for n .",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  7099,  2013,  1037, 16246,  6375,  4353,  2006,  1015,  1010,
         1016,  1010,  1012,  1012,  1012,  1010,  1050,  1012,  5646,  1996,
         4555, 16593, 10197,  2005,  1050,  1012,   102])"
2359,1,"['hypergeometric distribution', 'hypergeometric', 'sample', 'likelihood', 'distribution', 'parameters']", Exercises,seg_291,"21.12 (exercise 21.11 continued.) suppose that m bolts in the box were marked and then r bolts were selected from the box; z is the number of marked bolts in the sample. (recall that it was shown in exercise 4.13 c that z has a hypergeometric distribution, with parameters m, n , and r.) suppose that k bolts in the sample were marked. show that the likelihood l(n) is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  2260,  1006,  6912,  2538,  1012,  2340,  2506,
         1012,  1007,  6814,  2008,  1049, 19947,  1999,  1996,  3482,  2020,
         4417,  1998,  2059,  1054, 19947,  2020,  3479,  2013,  1996,  3482,
         1025,  1062,  2003,  1996,  2193,  1997,  4417, 19947,  1999,  1996,
         7099,  1012,  1006,  9131,  2008,  2009,  2001,  3491,  1999,  6912,
         1018,  1012,  2410,  1039,  2008,  1062,  2038,  1037, 23760,  3351,
        28993,  4353,  1010,  2007, 11709,  1049,  1010,  1050,  1010,  1998,
         1054,  1012,  1007,  6814,  2008,  1047, 19947,  1999,  1996,  7099,
         2020,  4417,  1012,  2265,  2008,  1996, 16593,  1048,  1006,  1050,
         1007,  2003,  2445,  2011,   102])"
2360,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Exercises,seg_291,"l(n) = . (n r ) next show that l(n) increases for n < mr/k and decreases for n > mr/k, and conclude that mr/k is the maximum likelihood estimate for n .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1048,  1006,  1050,  1007,  1027,  1012,  1006,  1050,  1054,
         1007,  2279,  2265,  2008,  1048,  1006,  1050,  1007,  7457,  2005,
         1050,  1026,  2720,  1013,  1047,  1998, 17913,  2005,  1050,  1028,
         2720,  1013,  1047,  1010,  1998, 16519,  2008,  2720,  1013,  1047,
         2003,  1996,  4555, 16593, 10197,  2005,  1050,  1012,   102])"
2361,1,"['rate', 'poisson', 'poisson process', 'process', 'model']", Exercises,seg_291,"21.13 often one can model the times that customers arrive at a shop rather well by a poisson process with (unknown) rate λ (customers/hour). on a certain day, one of the attendants noticed that between noon and 12.45 p.m.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  2410,  2411,  2028,  2064,  2944,  1996,  2335,
         2008,  6304,  7180,  2012,  1037,  4497,  2738,  2092,  2011,  1037,
        13433, 24077,  2832,  2007,  1006,  4242,  1007,  3446,  1165,  1006,
         6304,  1013,  3178,  1007,  1012,  2006,  1037,  3056,  2154,  1010,
         2028,  1997,  1996, 26727,  4384,  2008,  2090, 11501,  1998,  2260,
         1012,  3429,  1052,  1012,  1049,  1012,   102])"
2362,1,"['observations', 'maximum likelihood', 'estimate', 'maximum likelihood estimate', 'likelihood']", Exercises,seg_291,"two customers arrived, and another attendant noticed that on the same day one customer arrived between 12.15 and 1 p.m. use the observations of the attendants to determine the maximum likelihood estimate of λ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2048,  6304,  3369,  1010,  1998,  2178, 16742,  4384,  2008,
         2006,  1996,  2168,  2154,  2028,  8013,  3369,  2090,  2260,  1012,
         2321,  1998,  1015,  1052,  1012,  1049,  1012,  2224,  1996,  9420,
         1997,  1996, 26727,  2000,  5646,  1996,  4555, 16593, 10197,  1997,
         1165,  1012,   102])"
2363,1,"['maximum likelihood', 'estimate', 'maximum likelihood estimate', 'random', 'likelihood']", Exercises,seg_291,"21.14 a very inexperienced archer shoots n times an arrow at a disc of (unknown) radius θ. the disc is hit every time, but at completely random places. let r1, r2, . . . , rn be the distances of the various hits to the center of the disc. determine the maximum likelihood estimate for θ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  2403,  1037,  2200, 26252, 11024, 11758,  1050,
         2335,  2019,  8612,  2012,  1037,  5860,  1997,  1006,  4242,  1007,
        12177,  1162,  1012,  1996,  5860,  2003,  2718,  2296,  2051,  1010,
         2021,  2012,  3294,  6721,  3182,  1012,  2292,  1054,  2487,  1010,
         1054,  2475,  1010,  1012,  1012,  1012,  1010, 29300,  2022,  1996,
        12103,  1997,  1996,  2536,  4978,  2000,  1996,  2415,  1997,  1996,
         5860,  1012,  5646,  1996,  4555, 16593, 10197,  2005,  1162,  1012,
          102])"
2364,1,"['probability of failure', 'probability', 'failure', 'space shuttle challenger']", Exercises,seg_291,"21.15 on january 28, 1986, the main fuel tank of the space shuttle challenger exploded shortly after takeoff. essential in this accident was the leakage of some of the six o-rings of the challenger. in section 1.4 the probability of failure of an o-ring is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  2321,  2006,  2254,  2654,  1010,  3069,  1010,
         1996,  2364,  4762,  4951,  1997,  1996,  2686, 10382, 12932,  9913,
         3859,  2044, 19744,  1012,  6827,  1999,  2023,  4926,  2001,  1996,
        17271,  4270,  1997,  2070,  1997,  1996,  2416,  1051,  1011,  7635,
         1997,  1996, 12932,  1012,  1999,  2930,  1015,  1012,  1018,  1996,
         9723,  1997,  4945,  1997,  2019,  1051,  1011,  3614,  2003,  2445,
         2011,   102])"
2365,1,"['table', 'failures', 'likelihood', 'data']", Exercises,seg_291,"where t is the temperature at launch in degrees fahrenheit. in table 21.2 the temperature t (in ◦f, rounded to the nearest integer) and the number of failures n for 23 missions are given, ordered according to increasing temperatures. (see also figure 1.3, where these data are graphically depicted.) give the likelihood l(a, b) and the loglikelihood (a, b).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1056,  2003,  1996,  4860,  2012,  4888,  1999,  5445,
         6904, 28362, 25311, 20175,  1012,  1999,  2795,  2538,  1012,  1016,
         1996,  4860,  1056,  1006,  1999,   100,  1010,  8352,  2000,  1996,
         7205, 16109,  1007,  1998,  1996,  2193,  1997, 15428,  1050,  2005,
         2603,  6416,  2024,  2445,  1010,  3641,  2429,  2000,  4852,  7715,
         1012,  1006,  2156,  2036,  3275,  1015,  1012,  1017,  1010,  2073,
         2122,  2951,  2024, 20477,  2135,  8212,  1012,  1007,  2507,  1996,
        16593,  1048,  1006,  1037,  1010,  1038,  1007,  1998,  1996,  8833,
        10359,  3669,  9021,  1006,  1037,  1010,  1038,  1007,  1012,   102])"
2366,1,"['probability', 'probability theory', 'realization', 'random variable', 'random', 'statistics', 'variable']", Exercises,seg_291,"21.16 in the 18th century georges-louis leclerc, comte de buffon (1707– 1788) found an amusing way to approximate the number π using probability theory and statistics. buffon had the following idea: take a needle and a large sheet of paper, and draw horizontal lines that are a needle-length apart. throw the needle a number of times (say n times) on the sheet, and count how often it hits one of the horizontal lines. say this number is sn, then sn is the realization of a bin(n, p) distributed random variable sn. here p is the probability that the needle hits one of the horizontal lines. in exercise 9.20 you found that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2538,  1012,  2385,  1999,  1996,  4985,  2301, 10870,  1011,
         3434,  3393, 14321, 11890,  1010, 19758,  2139, 23176,  2239,  1006,
        25029,  1516, 15622,  1007,  2179,  2019, 19142,  2126,  2000, 15796,
         1996,  2193,  1170,  2478,  9723,  3399,  1998,  6747,  1012, 23176,
         2239,  2018,  1996,  2206,  2801,  1024,  2202,  1037, 12201,  1998,
         1037,  2312,  7123,  1997,  3259,  1010,  1998,  4009,  9876,  3210,
         2008,  2024,  1037, 12201,  1011,  3091,  4237,  1012,  5466,  1996,
        12201,  1037,  2193,  1997,  2335,  1006,  2360,  1050,  2335,  1007,
         2006,  1996,  7123,  1010,  1998,  4175,  2129,  2411,  2009,  4978,
         2028,  1997,  1996,  9876,  3210,  1012,  2360,  2023,  2193,  2003,
         1055,  2078,  1010,  2059,  1055,  2078,  2003,  1996, 12393,  1997,
         1037,  8026,  1006,  1050,  1010,  1052,  1007,  5500,  6721,  8023,
         1055,  2078,  1012,  2182,  1052,  2003,  1996,  9723,  2008,  1996,
        12201,  4978,  2028,  1997,  1996,  9876,  3210,  1012,  1999,  6912,
         1023,  1012,  2322,  2017,  2179,  2008,   102])"
2367,1,"['likelihood', 'estimator', 'maximum likelihood', 'maximum likelihood estimator']", Exercises,seg_291,is the maximum likelihood estimator for π.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  1996,  4555, 16593,  9765,  9581,  4263,  2005,  1170,
         1012,   102])"
2368,1,"['regression', 'estimated', 'maximum likelihood', 'simple linear regression', 'method', 'linear regression', 'errors', 'regression model', 'maximum likelihood estimates', 'normally distributed', 'estimate', 'response', 'model', 'case', 'method of least squares', 'linear', 'parameters', 'linear regression model', 'response variable', 'estimates', 'likelihood', 'distribution', 'least squares', 'variable']", The method of least squares,seg_293,"the maximum likelihood principle provides a way to estimate parameters. the applicability of the method is quite general but not universal. for example, in the simple linear regression model, introduced in section 17.4, we need to know the distribution of the response variable in order to find the maximum likelihood estimates for the parameters involved. in this chapter we will see how these parameters can be estimated using the method of least squares. furthermore, the relation between least squares and maximum likelihood will be investigated in the case of normally distributed errors.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0.])","tensor([ 1996,  4118,  1997,  2560, 14320])","tensor([  101,  1996,  4555, 16593,  6958,  3640,  1037,  2126,  2000, 10197,
        11709,  1012,  1996, 10439, 19341,  8553,  1997,  1996,  4118,  2003,
         3243,  2236,  2021,  2025,  5415,  1012,  2005,  2742,  1010,  1999,
         1996,  3722,  7399, 26237,  2944,  1010,  3107,  1999,  2930,  2459,
         1012,  1018,  1010,  2057,  2342,  2000,  2113,  1996,  4353,  1997,
         1996,  3433,  8023,  1999,  2344,  2000,  2424,  1996,  4555, 16593,
        10035,  2005,  1996, 11709,  2920,  1012,  1999,  2023,  3127,  2057,
         2097,  2156,  2129,  2122, 11709,  2064,  2022,  4358,  2478,  1996,
         4118,  1997,  2560, 14320,  1012,  7297,  1010,  1996,  7189,  2090,
         2560, 14320,  1998,  4555, 16593,  2097,  2022, 10847,  1999,  1996,
         2553,  1997,  5373,  5500, 10697,  1012,   102])"
2369,1,"['dataset', 'regression', 'linear', 'bivariate dataset', 'simple linear regression', 'random', 'linear regression', 'random variables', 'bivariate', 'regression model', 'model', 'linear regression model', 'variables']", Least squares estimation and regression,seg_295,"recall from section 17.4 the simple linear regression model for a bivariate dataset (x1, y1), (x2, y2), . . . , (xn, yn). in this model x1, x2, . . . , xn are nonrandom and y1, y2, . . . , yn are realizations of random variables y1, y2, . . . , yn satisfying",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  9131,  2013,  2930,  2459,  1012,  1018,  1996,  3722,  7399,
        26237,  2944,  2005,  1037, 12170, 10755, 13143,  2951, 13462,  1006,
         1060,  2487,  1010,  1061,  2487,  1007,  1010,  1006,  1060,  2475,
         1010,  1061,  2475,  1007,  1010,  1012,  1012,  1012,  1010,  1006,
         1060,  2078,  1010,  1061,  2078,  1007,  1012,  1999,  2023,  2944,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2024,  2512, 13033,  5358,  1998,  1061,  2487,  1010,
         1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,  2078,  2024,
        12393,  2015,  1997,  6721, 10857,  1061,  2487,  1010,  1061,  2475,
         1010,  1012,  1012,  1012,  1010,  1061,  2078, 17087,   102])"
2370,1,"['variance', 'estimates', 'parameters', 'random', 'random variables', 'expectation', 'independent random variables', 'model', 'variables', 'independent']", Least squares estimation and regression,seg_295,"where u1, u2, . . . , un are independent random variables with zero expectation and variance σ2. how can one obtain estimates for the parameters α, β, and σ2 in this model?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2073,  1057,  2487,  1010, 23343,  1010,  1012,  1012,  1012,
         1010,  4895,  2024,  2981,  6721, 10857,  2007,  5717, 17626,  1998,
        23284,  1173,  2475,  1012,  2129,  2064,  2028,  6855, 10035,  2005,
         1996, 11709,  1155,  1010,  1156,  1010,  1998,  1173,  2475,  1999,
         2023,  2944,  1029,   102])"
2371,1,"['sum of squared', 'method of least squares', 'regression', 'regression line', 'data', 'maximum likelihood', 'estimates', 'method', 'likelihood', 'maximum likelihood estimates', 'distribution', 'least squares', 'parameters', 'sum of squares']", Least squares estimation and regression,seg_295,"note that we cannot find maximum likelihood estimates for these parameters, simply because we have no further knowledge about the distribution of the ui (and consequently of the yi). we want to choose α and β in such a way that we obtain a line that fits the data best. a classical approach to do this is to consider the sum of squared distances between the observed values yi and the values α+βxi on the regression line y = α+βx. see figure 22.1, where these distances are indicated. the method of least squares prescribes to choose α and β such that the sum of squares",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  3602,  2008,  2057,  3685,  2424,  4555, 16593, 10035,  2005,
         2122, 11709,  1010,  3432,  2138,  2057,  2031,  2053,  2582,  3716,
         2055,  1996,  4353,  1997,  1996, 21318,  1006,  1998,  8821,  1997,
         1996, 12316,  1007,  1012,  2057,  2215,  2000,  5454,  1155,  1998,
         1156,  1999,  2107,  1037,  2126,  2008,  2057,  6855,  1037,  2240,
         2008, 16142,  1996,  2951,  2190,  1012,  1037,  4556,  3921,  2000,
         2079,  2023,  2003,  2000,  5136,  1996,  7680,  1997, 19942, 12103,
         2090,  1996,  5159,  5300, 12316,  1998,  1996,  5300,  1155,  1009,
         1156,  9048,  2006,  1996, 26237,  2240,  1061,  1027,  1155,  1009,
         1156,  2595,  1012,  2156,  3275,  2570,  1012,  1015,  1010,  2073,
         2122, 12103,  2024,  5393,  1012,  1996,  4118,  1997,  2560, 14320,
         3653, 29234,  2015,  2000,  5454,  1155,  1998,  1156,  2107,  2008,
         1996,  7680,  1997, 14320,   102])"
2372,1,"['sum is the squared', 'set', 'estimates', 'least squares estimates', 'least squares']", Least squares estimation and regression,seg_295,"is minimal. the ith term in the sum is the squared distance in the vertical direction from (xi, yi) to the line y = α + βx. to find these so-called least squares estimates , we differentiate s(α, β) with respect to α and β, and we set the derivatives equal to 0:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2003, 10124,  1012,  1996,  2009,  2232,  2744,  1999,  1996,
         7680,  2003,  1996, 19942,  3292,  1999,  1996,  7471,  3257,  2013,
         1006,  8418,  1010, 12316,  1007,  2000,  1996,  2240,  1061,  1027,
         1155,  1009,  1156,  2595,  1012,  2000,  2424,  2122,  2061,  1011,
         2170,  2560, 14320, 10035,  1010,  2057, 21032,  1055,  1006,  1155,
         1010,  1156,  1007,  2007,  4847,  2000,  1155,  1998,  1156,  1010,
         1998,  2057,  2275,  1996, 16942,  5020,  2000,  1014,  1024,   102])"
2373,0,[], Least squares estimation and regression,seg_295,this is equivalent to,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([ 101, 2023, 2003, 5662, 2000,  102])"
2374,1,"['data', 'table']", Least squares estimation and regression,seg_295,"for example, for the timber data from table 15.5 we would obtain",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([ 101, 2005, 2742, 1010, 2005, 1996, 7227, 2951, 2013, 2795, 2321, 1012,
        1019, 2057, 2052, 6855,  102])"
2375,1,"['dataset', 'regression', 'estimated regression line', 'regression line', 'estimated', 'scatterplot']", Least squares estimation and regression,seg_295,"these are two equations with two unknowns α and β. solving for α and β yields the solutions α̂ = −1160.5 and β̂ = 57.51. in figure 22.2 a scatterplot of the timber dataset, together with the estimated regression line y = −1160.5+ 57.51x, is depicted.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2122,  2024,  2048, 11380,  2007,  2048,  4242,  2015,  1155,
         1998,  1156,  1012, 13729,  2005,  1155,  1998,  1156, 16189,  1996,
         7300,  1155,  1027,  1597, 14526, 16086,  1012,  1019,  1998,  1156,
         1027,  5401,  1012,  4868,  1012,  1999,  3275,  2570,  1012,  1016,
         1037,  8040, 20097, 24759,  4140,  1997,  1996,  7227,  2951, 13462,
         1010,  2362,  2007,  1996,  4358, 26237,  2240,  1061,  1027,  1597,
        14526, 16086,  1012,  1019,  1009,  5401,  1012,  4868,  2595,  1010,
         2003,  8212,  1012,   102])"
2376,1,['estimate'], Least squares estimation and regression,seg_295,quick exercise 22.1 suppose you are given a piece of australian timber with density 65. what would you choose as an estimate for the janka hardness?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  4248,  6912,  2570,  1012,  1015,  6814,  2017,  2024,  2445,
         1037,  3538,  1997,  2827,  7227,  2007,  4304,  3515,  1012,  2054,
         2052,  2017,  5454,  2004,  2019, 10197,  2005,  1996,  5553,  2912,
        23608,  1029,   102])"
2377,0,['n'], Least squares estimation and regression,seg_295,"n =1, we find the following formulas for the",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  1050,  1027,  1015,  1010,  2057,  2424,  1996,  2206, 25814,
         2005,  1996,   102])"
2378,1,"['slope', 'intercept']", Least squares estimation and regression,seg_295,estimates α̂ (the intercept) and β̂ (the slope):,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101, 10035,  1155,  1006,  1996, 19115,  1007,  1998,  1156,  1006,
         1996,  9663,  1007,  1024,   102])"
2379,1,"['estimators', 'unbiased']", Least squares estimation and regression,seg_295,least squares estimators are unbiased,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2560, 14320,  9765,  9581,  6591,  2024,  4895, 11607,  6924,
          102])"
2380,1,"['estimators', 'least squares estimators', 'estimates', 'least squares estimates', 'least squares']", Least squares estimation and regression,seg_295,we denote the least squares estimates by α̂ and β̂. it is quite common to also denote the least squares estimators by α̂ and β̂:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2057, 19090,  1996,  2560, 14320, 10035,  2011,  1155,  1998,
         1156,  1012,  2009,  2003,  3243,  2691,  2000,  2036, 19090,  1996,
         2560, 14320,  9765,  9581,  6591,  2011,  1155,  1998,  1156,  1024,
          102])"
2381,1,"['unbiased estimator', 'estimator', 'unbiased']", Least squares estimation and regression,seg_295,"in exercise 22.12 it is shown that β̂ is an unbiased estimator for β. using this and the fact that e[yi] = α + βxi (see page 258), we find for α̂:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  1999,  6912,  2570,  1012,  2260,  2009,  2003,  3491,  2008,
         1156,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1156,  1012,  2478,  2023,  1998,  1996,  2755,  2008,  1041,  1031,
        12316,  1033,  1027,  1155,  1009,  1156,  9048,  1006,  2156,  3931,
        24398,  1007,  1010,  2057,  2424,  2005,  1155,  1024,   102])"
2382,1,"['unbiased estimator', 'estimator', 'unbiased']", Least squares estimation and regression,seg_295,we see that α̂ is an unbiased estimator for α.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2057,  2156,  2008,  1155,  2003,  2019,  4895, 11607,  6924,
         9765,  9581,  4263,  2005,  1155,  1012,   102])"
2383,1,"['unbiased estimator', 'estimator', 'unbiased']", Least squares estimation and regression,seg_295,an unbiased estimator for σ2,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,  1173,
         2475,   102])"
2384,1,"['regression', 'linear', 'variance', 'simple linear regression', 'random', 'linear regression', 'random variables', 'regression model', 'model', 'linear regression model', 'variables', 'independent']", Least squares estimation and regression,seg_295,"in the simple linear regression model the assumptions imply that the random variables yi are independent with variance σ2. unfortunately, one cannot ap-",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  1999,  1996,  3722,  7399, 26237,  2944,  1996, 17568, 19515,
         2008,  1996,  6721, 10857, 12316,  2024,  2981,  2007, 23284,  1173,
         2475,  1012,  6854,  1010,  2028,  3685,  9706,  1011,   102])"
2385,1,['estimator'], Least squares estimation and regression,seg_295,ply the usual estimator (1/(n − 1))∑i,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101, 20228,  2100,  1996,  5156,  9765,  9581,  4263,  1006,  1015,
         1013,  1006,  1050,  1597,  1015,  1007,  1007,   100,   102])"
2386,1,"['expectations', 'estimator', 'variance']", Least squares estimation and regression,seg_295,"n =1 (yi − ȳi)2 for the variance of the yi (see section 19.4), because different yi have different expectations. what would be a reasonable estimator for σ2? the following quick exercise suggests a candidate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  1050,  1027,  1015,  1006, 12316,  1597, 12316,  1007,  1016,
         2005,  1996, 23284,  1997,  1996, 12316,  1006,  2156,  2930,  2539,
         1012,  1018,  1007,  1010,  2138,  2367, 12316,  2031,  2367, 10908,
         1012,  2054,  2052,  2022,  1037,  9608,  9765,  9581,  4263,  2005,
         1173,  2475,  1029,  1996,  2206,  4248,  6912,  6083,  1037,  4018,
         1012,   102])"
2387,1,"['variance', 'random', 'random variables', 'independent random variables', 'variables', 'expected value', 'independent']", Least squares estimation and regression,seg_295,"quick exercise 22.3 let u1, u2, . . . , un be independent random variables, each with expected value zero and variance σ2. show that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  4248,  6912,  2570,  1012,  1017,  2292,  1057,  2487,  1010,
        23343,  1010,  1012,  1012,  1012,  1010,  4895,  2022,  2981,  6721,
        10857,  1010,  2169,  2007,  3517,  3643,  5717,  1998, 23284,  1173,
         2475,  1012,  2265,  2008,   102])"
2388,1,"['unbiased estimator', 'estimator', 'unbiased']", Least squares estimation and regression,seg_295,is an unbiased estimator for σ2.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1173,  2475,  1012,   102])"
2389,1,"['unbiased estimator', 'estimator', 'estimate', 'unbiased']", Least squares estimation and regression,seg_295,"at first sight one might be tempted to think that the unbiased estimator t from this quick exercise is a useful tool to estimate σ2. unfortunately, we only observe the xi and yi, not the ui. however, from the fact that ui = yi−α−βxi, it seems reasonable to try",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2012,  2034,  4356,  2028,  2453,  2022, 16312,  2000,  2228,
         2008,  1996,  4895, 11607,  6924,  9765,  9581,  4263,  1056,  2013,
         2023,  4248,  6912,  2003,  1037,  6179,  6994,  2000, 10197,  1173,
         2475,  1012,  6854,  1010,  2057,  2069, 11949,  1996,  8418,  1998,
        12316,  1010,  2025,  1996, 21318,  1012,  2174,  1010,  2013,  1996,
         2755,  2008, 21318,  1027, 12316, 22543, 14608, 22543, 29720,  9048,
         1010,  2009,  3849,  9608,  2000,  3046,   102])"
2390,1,"['random variable', 'random', 'estimator', 'expected value', 'variable']", Least squares estimation and regression,seg_295,as an estimator for σ2. tedious calculations show that the expected value of this random variable equals n−2σ2. but then we can easily turn it into an,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2004,  2019,  9765,  9581,  4263,  2005,  1173,  2475,  1012,
         6945,  6313, 16268,  2265,  2008,  1996,  3517,  3643,  1997,  2023,
         6721,  8023, 19635,  1050, 22543,  2475, 29733,  2475,  1012,  2021,
         2059,  2057,  2064,  4089,  2735,  2009,  2046,  2019,   102])"
2391,1,"['unbiased estimator', 'estimator', 'unbiased']", Least squares estimation and regression,seg_295,n unbiased estimator for σ2.,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  1050,  4895, 11607,  6924,  9765,  9581,  4263,  2005,  1173,
         2475,  1012,   102])"
2392,1,"['regression', 'linear', 'unbiased estimator', 'unbiased', 'random variable', 'simple linear regression', 'random', 'linear regression', 'estimator', 'regression model', 'model', 'linear regression model', 'variable']", Least squares estimation and regression,seg_295,an unbiased estimator for σ2. in the simple linear regression model the random variable,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 1., 1., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,  1173,
         2475,  1012,  1999,  1996,  3722,  7399, 26237,  2944,  1996,  6721,
         8023,   102])"
2393,1,"['unbiased estimator', 'estimator', 'unbiased']", Least squares estimation and regression,seg_295,is an unbiased estimator for σ2.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 24155,  1998, 26237])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
         1173,  2475,  1012,   102])"
2394,1,"['regression', 'estimated', 'simple linear regression', 'regression model', 'linear regression', 'dataset', 'regression line', 'residuals', 'bivariate dataset', 'bivariate', 'model', 'residual', 'linear', 'linear regression model', 'estimated regression line', 'scatterplot']", Residuals,seg_297,a way to explore whether the simple linear regression model is appropriate to model a given bivariate dataset is to inspect a scatterplot of the so-called residuals ri against the xi. the ith residual ri is defined as the vertical distance between the ith point and the estimated regression line:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([21961,  2015])","tensor([  101,  1037,  2126,  2000,  8849,  3251,  1996,  3722,  7399, 26237,
         2944,  2003,  6413,  2000,  2944,  1037,  2445, 12170, 10755, 13143,
         2951, 13462,  2003,  2000, 22459,  1037,  8040, 20097, 24759,  4140,
         1997,  1996,  2061,  1011,  2170, 21961,  2015, 15544,  2114,  1996,
         8418,  1012,  1996,  2009,  2232, 21961, 15544,  2003,  4225,  2004,
         1996,  7471,  3292,  2090,  1996,  2009,  2232,  2391,  1998,  1996,
         4358, 26237,  2240,  1024,   102])"
2395,1,"['linear', 'linear model', 'residuals', 'random', 'model', 'scatterplot', 'data', 'case']", Residuals,seg_297,"when a linear model is appropriate, the scatterplot of the residuals ri against the xi should show truly random fluctuations around zero, in the sense that it should not exhibit any trend or pattern. this seems to be the case in figure 22.3, which shows the residuals for the black cherry tree data from exercise 17.9.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([21961,  2015])","tensor([  101,  2043,  1037,  7399,  2944,  2003,  6413,  1010,  1996,  8040,
        20097, 24759,  4140,  1997,  1996, 21961,  2015, 15544,  2114,  1996,
         8418,  2323,  2265,  5621,  6721, 28892,  2105,  5717,  1010,  1999,
         1996,  3168,  2008,  2009,  2323,  2025,  8327,  2151,  9874,  2030,
         5418,  1012,  2023,  3849,  2000,  2022,  1996,  2553,  1999,  3275,
         2570,  1012,  1017,  1010,  2029,  3065,  1996, 21961,  2015,  2005,
         1996,  2304,  9115,  3392,  2951,  2013,  6912,  2459,  1012,  1023,
         1012,   102])"
2396,1,['residuals'], Residuals,seg_297,"n =1 ri = 0, i.e., that the sum of the residuals is zero.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0.])","tensor([21961,  2015])","tensor([  101,  1050,  1027,  1015, 15544,  1027,  1014,  1010,  1045,  1012,
         1041,  1012,  1010,  2008,  1996,  7680,  1997,  1996, 21961,  2015,
         2003,  5717,  1012,   102])"
2397,1,"['dataset', 'case']", Residuals,seg_297,in figure 22.4 we depicted ri versus xi for the timber dataset. in this case a slight parabolic pattern can be observed. figures 22.2 and 22.4 suggest that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([21961,  2015])","tensor([  101,  1999,  3275,  2570,  1012,  1018,  2057,  8212, 15544,  6431,
         8418,  2005,  1996,  7227,  2951, 13462,  1012,  1999,  2023,  2553,
         1037,  7263, 11498, 18647,  5418,  2064,  2022,  5159,  1012,  4481,
         2570,  1012,  1016,  1998,  2570,  1012,  1018,  6592,  2008,   102])"
2398,1,"['model', 'dataset']", Residuals,seg_297,for the timber dataset a better model might be,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.])","tensor([21961,  2015])","tensor([  101,  2005,  1996,  7227,  2951, 13462,  1037,  2488,  2944,  2453,
         2022,   102])"
2399,1,"['model', 'residuals']", Residuals,seg_297,in this new model the residuals are,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0.])","tensor([21961,  2015])","tensor([  101,  1999,  2023,  2047,  2944,  1996, 21961,  2015,  2024,   102])"
2400,1,"['estimates', 'least squares estimates', 'least squares']", Residuals,seg_297,"where α̂, β̂, and γ̂ are the least squares estimates obtained by minimizing",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([21961,  2015])","tensor([  101,  2073,  1155,  1010,  1156,  1010,  1998,  1157,  2024,  1996,
         2560, 14320, 10035,  4663,  2011,  7163,  4328,  6774,   102])"
2401,1,"['heteroscedasticity', 'residuals']", Residuals,seg_297,"in figure 22.5 we depicted ri versus xi. the residuals display no trend or pattern, except that they “fan out”—an example of a phenomenon called heteroscedasticity.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0.])","tensor([21961,  2015])","tensor([  101,  1999,  3275,  2570,  1012,  1019,  2057,  8212, 15544,  6431,
         8418,  1012,  1996, 21961,  2015,  4653,  2053,  9874,  2030,  5418,
         1010,  3272,  2008,  2027,  1523,  5470,  2041,  1524,  1517,  2019,
         2742,  1997,  1037,  9575,  2170, 21770, 27360, 11788, 20875,  3012,
         1012,   102])"
2402,1,"['expected value', 'variance', 'heteroscedasticity', 'homoscedasticity', 'least squares', 'transformations', 'data', 'case']", Residuals,seg_297,"the assumption of equal variance of the ui (and therefore of the yi) is called homoscedasticity. in case the variance of yi depends on the value of xi, we speak of heteroscedasticity. for instance, heteroscedasticity occurs when yi with a large expected value have a larger variance than those with small expected values. this produces a “fanning out” effect, which can be observed in figure 22.5. this figure strongly suggests that the timber data are heteroscedastic. possible ways out of this problem are a technique called weighted least squares or the use of variance-stabilizing transformations.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([21961,  2015])","tensor([  101,  1996, 11213,  1997,  5020, 23284,  1997,  1996, 21318,  1006,
         1998,  3568,  1997,  1996, 12316,  1007,  2003,  2170, 24004, 11020,
        11960, 10074,  3012,  1012,  1999,  2553,  1996, 23284,  1997, 12316,
         9041,  2006,  1996,  3643,  1997,  8418,  1010,  2057,  3713,  1997,
        21770, 27360, 11788, 20875,  3012,  1012,  2005,  6013,  1010, 21770,
        27360, 11788, 20875,  3012,  5158,  2043, 12316,  2007,  1037,  2312,
         3517,  3643,  2031,  1037,  3469, 23284,  2084,  2216,  2007,  2235,
         3517,  5300,  1012,  2023,  7137,  1037,  1523,  5470,  5582,  2041,
         1524,  3466,  1010,  2029,  2064,  2022,  5159,  1999,  3275,  2570,
         1012,  1019,  1012,  2023,  3275,  6118,  6083,  2008,  1996,  7227,
         2951,  2024, 21770, 27360, 11788, 20875,  1012,  2825,  3971,  2041,
         1997,  2023,  3291,  2024,  1037,  6028,  2170, 18215,  2560, 14320,
         2030,  1996,  2224,  1997, 23284,  1011, 17079, 18622,  6774, 21865,
         1012,   102])"
2403,1,"['method of least squares', 'maximum likelihood', 'estimates', 'method', 'independent', 'likelihood', 'maximum likelihood estimates', 'distribution', 'least squares', 'case']", Relation with maximum likelihood,seg_299,"to apply the method of least squares no assumption is needed about the type of distribution of the ui. in case the type of distribution of the ui is known, the maximum likelihood principle can be applied. consider, for instance, the classical situation where the ui are independent with an n(0, σ2) distribution. what are the maximum likelihood estimates for α and β?",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  2000,  6611,  1996,  4118,  1997,  2560, 14320,  2053, 11213,
         2003,  2734,  2055,  1996,  2828,  1997,  4353,  1997,  1996, 21318,
         1012,  1999,  2553,  1996,  2828,  1997,  4353,  1997,  1996, 21318,
         2003,  2124,  1010,  1996,  4555, 16593,  6958,  2064,  2022,  4162,
         1012,  5136,  1010,  2005,  6013,  1010,  1996,  4556,  3663,  2073,
         1996, 21318,  2024,  2981,  2007,  2019,  1050,  1006,  1014,  1010,
         1173,  2475,  1007,  4353,  1012,  2054,  2024,  1996,  4555, 16593,
        10035,  2005,  1155,  1998,  1156,  1029,   102])"
2404,1,"['independent', 'dataset', 'normal distribution', 'residuals', 'bivariate dataset', 'histogram', 'normal', 'bivariate', 'model', 'data', 'case', 'linear', 'realization', 'random sample', 'linear model', 'sample', 'random', 'distribution']", Relation with maximum likelihood,seg_299,"in this case the yi are independent, and yi has an n(α+βxi, σ2) distribution. under these assumptions and assuming that the linear model is appropriate to model a given bivariate dataset, the ri should look like the realization of a random sample from a normal distribution. as an example a histogram of the residuals ri of the cherry tree data of exercise 17.9 is depicted in figure 22.6.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  1999,  2023,  2553,  1996, 12316,  2024,  2981,  1010,  1998,
        12316,  2038,  2019,  1050,  1006,  1155,  1009,  1156,  9048,  1010,
         1173,  2475,  1007,  4353,  1012,  2104,  2122, 17568,  1998, 10262,
         2008,  1996,  7399,  2944,  2003,  6413,  2000,  2944,  1037,  2445,
        12170, 10755, 13143,  2951, 13462,  1010,  1996, 15544,  2323,  2298,
         2066,  1996, 12393,  1997,  1037,  6721,  7099,  2013,  1037,  3671,
         4353,  1012,  2004,  2019,  2742,  1037,  2010,  3406, 13113,  1997,
         1996, 21961,  2015, 15544,  1997,  1996,  9115,  3392,  2951,  1997,
         6912,  2459,  1012,  1023,  2003,  8212,  1999,  3275,  2570,  1012,
         1020,  1012,   102])"
2405,1,"['data', 'normality']", Relation with maximum likelihood,seg_299,the data do not exhibit strong evidence against the assumption of normality.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  1996,  2951,  2079,  2025,  8327,  2844,  3350,  2114,  1996,
        11213,  1997,  3671,  3012,  1012,   102])"
2406,1,"['probability', 'distribution']", Relation with maximum likelihood,seg_299,"when yi has an n(α + βxi, σ2) distribution, the probability density of yi is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  2043, 12316,  2038,  2019,  1050,  1006,  1155,  1009,  1156,
         9048,  1010,  1173,  2475,  1007,  4353,  1010,  1996,  9723,  4304,
         1997, 12316,  2003,  2445,  2011,   102])"
2407,0,[], Relation with maximum likelihood,seg_299,the loglikelihood is:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  1996,  8833, 10359,  3669,  9021,  2003,  1024,   102])"
2408,1,"['estimators', 'maximum likelihood', 'method', 'independent', 'likelihood', 'least squares method', 'distribution', 'least squares', 'case']", Relation with maximum likelihood,seg_299,"n =1(yi − α − βxi)2 is minimal. hence, in case the ui are independent with an n(0, σ2) distribution, the maximum likelihood principle and the least squares method yield the same estimators.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  1050,  1027,  1015,  1006, 12316,  1597,  1155,  1597,  1156,
         9048,  1007,  1016,  2003, 10124,  1012,  6516,  1010,  1999,  2553,
         1996, 21318,  2024,  2981,  2007,  2019,  1050,  1006,  1014,  1010,
         1173,  2475,  1007,  4353,  1010,  1996,  4555, 16593,  6958,  1998,
         1996,  2560, 14320,  4118, 10750,  1996,  2168,  9765,  9581,  6591,
         1012,   102])"
2409,1,"['maximum likelihood', 'maximum likelihood estimate', 'estimate', 'likelihood']", Relation with maximum likelihood,seg_299,"to find the maximum likelihood estimate of σ we differentiate (α, β, σ) with respect to σ:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  2000,  2424,  1996,  4555, 16593, 10197,  1997,  1173,  2057,
        21032,  1006,  1155,  1010,  1156,  1010,  1173,  1007,  2007,  4847,
         2000,  1173,  1024,   102])"
2410,1,"['maximum likelihood', 'maximum likelihood estimator', 'invariance', 'estimator', 'likelihood', 'invariance principle']", Relation with maximum likelihood,seg_299,it follows (from the invariance principle on page 321) that the maximum likelihood estimator of σ2 is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([  101,  2009,  4076,  1006,  2013,  1996,  1999, 10755, 28335,  6958,
         2006,  3931, 24030,  1007,  2008,  1996,  4555, 16593,  9765,  9581,
         4263,  1997,  1173,  2475,  2003,  2445,  2011,   102])"
2411,1,['estimator'], Relation with maximum likelihood,seg_299,which is the estimator from (22.3).,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  4555, 16593])","tensor([ 101, 2029, 2003, 1996, 9765, 9581, 4263, 2013, 1006, 2570, 1012, 1017,
        1007, 1012,  102])"
2412,1,"['regression', 'estimated regression line', 'regression line', 'estimated', 'prediction']", Solutions to the quick exercises,seg_301,22.1 we can use the estimated regression line y = −1160.5+57.51x to predict the janka hardness. for density x = 65 we find as a prediction for the janka hardness y = 2577.65.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2570,  1012,  1015,  2057,  2064,  2224,  1996,  4358, 26237,
         2240,  1061,  1027,  1597, 14526, 16086,  1012,  1019,  1009,  5401,
         1012,  4868,  2595,  2000, 16014,  1996,  5553,  2912, 23608,  1012,
         2005,  4304,  1060,  1027,  3515,  2057,  2424,  2004,  1037, 17547,
         2005,  1996,  5553,  2912, 23608,  1061,  1027, 24368,  2581,  1012,
         3515,  1012,   102])"
2413,1,"['regression', 'estimated regression line', 'regression line', 'estimated']", Solutions to the quick exercises,seg_301,"22.2 rewriting α̂ = ȳn − β̂, it follows that ȳn = α̂ + β̂x̄n, which means that (x̄n, ȳn) is a point on the estimated regression line y = α̂ + β̂x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2570,  1012,  1016,  2128, 18560,  1155,  1027,  1061,  2078,
         1597,  1156,  1010,  2009,  4076,  2008,  1061,  2078,  1027,  1155,
         1009,  1156,  2595,  2078,  1010,  2029,  2965,  2008,  1006,  1060,
         2078,  1010,  1061,  2078,  1007,  2003,  1037,  2391,  2006,  1996,
         4358, 26237,  2240,  1061,  1027,  1155,  1009,  1156,  2595,  1012,
          102])"
2414,1,['residuals'], Solutions to the quick exercises,seg_301,"22.4 since ri = yi − (α̂ + β̂xi) for i = 1, 2, . . . , n, it follows that the sum of the residuals equals",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2570,  1012,  1018,  2144, 15544,  1027, 12316,  1597,  1006,
         1155,  1009,  1156,  9048,  1007,  2005,  1045,  1027,  1015,  1010,
         1016,  1010,  1012,  1012,  1012,  1010,  1050,  1010,  2009,  4076,
         2008,  1996,  7680,  1997,  1996, 21961,  2015, 19635,   102])"
2415,1,"['dataset', 'bivariate dataset', 'bivariate']", Exercises,seg_303,22.1 consider the following bivariate dataset:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1015,  5136,  1996,  2206, 12170, 10755, 13143,
         2951, 13462,  1024,   102])"
2416,1,"['estimates', 'least squares estimates', 'least squares', 'parameters']", Exercises,seg_303,a. determine the least squares estimates α̂ and β̂ of the parameters of the,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996,  2560, 14320, 10035,  1155,  1998,
         1156,  1997,  1996, 11709,  1997,  1996,   102])"
2417,1,['residuals'], Exercises,seg_303,"b. determine the residuals r1, r2, and r3 and check that they add up to 0.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  5646,  1996, 21961,  2015,  1054,  2487,  1010,
         1054,  2475,  1010,  1998,  1054,  2509,  1998,  4638,  2008,  2027,
         5587,  2039,  2000,  1014,  1012,   102])"
2418,1,"['regression', 'estimated', 'scatterplot', 'data']", Exercises,seg_303,c. draw in one figure the scatterplot of the data and the estimated regression,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1.,
        1., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  4009,  1999,  2028,  3275,  1996,  8040, 20097,
        24759,  4140,  1997,  1996,  2951,  1998,  1996,  4358, 26237,   102])"
2419,1,"['dataset', 'estimates']", Exercises,seg_303,22.2 adding one point may dramatically change the estimates of α and β. suppose one extra datapoint is added to the dataset of the previous exercise and that we have as dataset:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1016,  5815,  2028,  2391,  2089, 12099,  2689,
         1996, 10035,  1997,  1155,  1998,  1156,  1012,  6814,  2028,  4469,
         2951,  8400,  2003,  2794,  2000,  1996,  2951, 13462,  1997,  1996,
         3025,  6912,  1998,  2008,  2057,  2031,  2004,  2951, 13462,  1024,
          102])"
2420,1,"['leverage', 'estimate', 'estimates', 'least squares', 'least squares estimate', 'leverage point']", Exercises,seg_303,"determine the least squares estimate of β̂. a point such as (0, 0), which dramatically changes the estimates for α and β, is called a leverage point.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  5646,  1996,  2560, 14320, 10197,  1997,  1156,  1012,  1037,
         2391,  2107,  2004,  1006,  1014,  1010,  1014,  1007,  1010,  2029,
        12099,  3431,  1996, 10035,  2005,  1155,  1998,  1156,  1010,  2003,
         2170,  1037, 21155,  2391,  1012,   102])"
2421,1,"['dataset', 'bivariate dataset', 'bivariate']", Exercises,seg_303,22.3 suppose we have the following bivariate dataset:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1017,  6814,  2057,  2031,  1996,  2206, 12170,
        10755, 13143,  2951, 13462,  1024,   102])"
2422,1,"['estimates', 'least squares estimates', 'least squares', 'parameters']", Exercises,seg_303,a. determine the least squares estimates α̂ and β̂ of the parameters of the,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996,  2560, 14320, 10035,  1155,  1998,
         1156,  1997,  1996, 11709,  1997,  1996,   102])"
2423,1,"['regression', 'estimated', 'scatterplot', 'data']", Exercises,seg_303,b. draw in one figure the scatterplot of the data and the estimated regression,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1.,
        1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  4009,  1999,  2028,  3275,  1996,  8040, 20097,
        24759,  4140,  1997,  1996,  2951,  1998,  1996,  4358, 26237,   102])"
2424,1,"['dataset', 'bivariate dataset', 'bivariate']", Exercises,seg_303,"22.4 we are given a bivariate dataset (x1, y1), (x2, y2), . . . , (x100, y100). for this bivariate dataset it is known that ∑ xi = 231.7, ∑x2i = 2400.8, ∑ yi =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1018,  2057,  2024,  2445,  1037, 12170, 10755,
        13143,  2951, 13462,  1006,  1060,  2487,  1010,  1061,  2487,  1007,
         1010,  1006,  1060,  2475,  1010,  1061,  2475,  1007,  1010,  1012,
         1012,  1012,  1010,  1006,  1060, 18613,  1010,  1061, 18613,  1007,
         1012,  2005,  2023, 12170, 10755, 13143,  2951, 13462,  2009,  2003,
         2124,  2008,   100,  8418,  1027, 20304,  1012,  1021,  1010,   100,
         1027, 11212,  2692,  1012,  1022,  1010,   100, 12316,  1027,   102])"
2425,1,"['regression', 'regression line', 'estimates', 'least squares estimates', 'least squares', 'parameters']", Exercises,seg_303,"321, and ∑xiyi = 5189. what are the least squares estimates α̂ and β̂ of the parameters of the regression line y = α + βx?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 24030,  1010,  1998,   100,  1027,  4868,  2620,  2683,  1012,
         2054,  2024,  1996,  2560, 14320, 10035,  1155,  1998,  1156,  1997,
         1996, 11709,  1997,  1996, 26237,  2240,  1061,  1027,  1155,  1009,
         1156,  2595,  1029,   102])"
2426,1,"['model', 'dataset', 'intercept']", Exercises,seg_303,22.5 for the timber dataset it seems reasonable to leave out the intercept α (“no hardness without density”). the model then becomes,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1019,  2005,  1996,  7227,  2951, 13462,  2009,
         3849,  9608,  2000,  2681,  2041,  1996, 19115,  1155,  1006,  1523,
         2053, 23608,  2302,  4304,  1524,  1007,  1012,  1996,  2944,  2059,
         4150,   102])"
2427,1,"['least squares', 'estimator']", Exercises,seg_303,show that the least squares estimator β̂ of β is now given by,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2265,  2008,  1996,  2560, 14320,  9765,  9581,  4263,  1156,
         1997,  1156,  2003,  2085,  2445,  2011,   102])"
2428,1,['sum of squares'], Exercises,seg_303,by minimizing the appropriate sum of squares.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2011,  7163,  4328,  6774,  1996,  6413,  7680,  1997, 14320,
         1012,   102])"
2429,1,"['regression', 'estimate', 'intercept', 'regression model', 'model']", Exercises,seg_303,"22.6 (quick exercise 22.1 and exercise 22.5 continued). suppose we are given a piece of australian timber with density 65. what would you choose as an estimate for the janka hardness, based on the regression model with no intercept? recall that ∑ xiyi = 2790525 and ∑x2i = 81750.02 (see also section 22.1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1020,  1006,  4248,  6912,  2570,  1012,  1015,
         1998,  6912,  2570,  1012,  1019,  2506,  1007,  1012,  6814,  2057,
         2024,  2445,  1037,  3538,  1997,  2827,  7227,  2007,  4304,  3515,
         1012,  2054,  2052,  2017,  5454,  2004,  2019, 10197,  2005,  1996,
         5553,  2912, 23608,  1010,  2241,  2006,  1996, 26237,  2944,  2007,
         2053, 19115,  1029,  9131,  2008,   100,  8418, 10139,  1027, 25745,
         2692, 25746,  2629,  1998,   100,  1027,  6282, 23352,  2692,  1012,
         6185,  1006,  2156,  2036,  2930,  2570,  1012,  1015,  1007,  1012,
          102])"
2430,1,['dataset'], Exercises,seg_303,22.7 consider the dataset,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1021,  5136,  1996,  2951, 13462,   102])"
2431,1,['variables'], Exercises,seg_303,"where x1, x2, . . . , xn are nonrandom and y1, y2, . . . , yn are realizations of random variables y1, y2, . . . , yn, satisfying",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2073,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2024,  2512, 13033,  5358,  1998,  1061,
         2487,  1010,  1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,
         2078,  2024, 12393,  2015,  1997,  6721, 10857,  1061,  2487,  1010,
         1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,  2078,  1010,
        17087,   102])"
2432,1,"['variance', 'estimates', 'parameters', 'random', 'random variables', 'expectation', 'independent random variables', 'least squares estimates', 'model', 'least squares', 'variables', 'independent']", Exercises,seg_303,"here u1, u2, . . . , un are independent random variables with zero expectation and variance σ2. what are the least squares estimates for the parameters α and β in this model?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2182,  1057,  2487,  1010, 23343,  1010,  1012,  1012,  1012,
         1010,  4895,  2024,  2981,  6721, 10857,  2007,  5717, 17626,  1998,
        23284,  1173,  2475,  1012,  2054,  2024,  1996,  2560, 14320, 10035,
         2005,  1996, 11709,  1155,  1998,  1156,  1999,  2023,  2944,  1029,
          102])"
2433,1,"['residual', 'regression', 'regression model', 'model', 'sum of squares', 'residual sum of squares']", Exercises,seg_303,22.8 which simple regression model has the larger residual sum of squares,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1022,  2029,  3722, 26237,  2944,  2038,  1996,
         3469, 21961,  7680,  1997, 14320,   102])"
2434,1,"['model', 'intercept']", Exercises,seg_303,"n =1 ri2, the model with intercept or the one without?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1050,  1027,  1015, 15544,  2475,  1010,  1996,  2944,  2007,
        19115,  2030,  1996,  2028,  2302,  1029,   102])"
2435,1,"['slope', 'random variable', 'random', 'model', 'variable']", Exercises,seg_303,"22.9 for some datasets it seems reasonable to leave out the slope β. for example, in the jury example from section 6.3 it was assumed that the score that juror i assigns when the performance deserves a score g is yi = g + zi, where zi is a random variable with values around zero. in general, when the slope β is left out, the model becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  1023,  2005,  2070,  2951, 13462,  2015,  2009,
         3849,  9608,  2000,  2681,  2041,  1996,  9663,  1156,  1012,  2005,
         2742,  1010,  1999,  1996,  6467,  2742,  2013,  2930,  1020,  1012,
         1017,  2009,  2001,  5071,  2008,  1996,  3556,  2008, 18414, 29165,
         1045, 24022,  2043,  1996,  2836, 17210,  1037,  3556,  1043,  2003,
        12316,  1027,  1043,  1009,  1062,  2072,  1010,  2073,  1062,  2072,
         2003,  1037,  6721,  8023,  2007,  5300,  2105,  5717,  1012,  1999,
         2236,  1010,  2043,  1996,  9663,  1156,  2003,  2187,  2041,  1010,
         1996,  2944,  4150,   102])"
2436,1,"['least squares', 'estimator']", Exercises,seg_303,show that ȳn is the least squares estimator α̂ of α.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2265,  2008,  1061,  2078,  2003,  1996,  2560, 14320,  9765,
         9581,  4263,  1155,  1997,  1155,  1012,   102])"
2437,1,"['sum of squared', 'dataset', 'regression', 'method of least squares', 'sum is the squared', 'regression line', 'residuals', 'bivariate dataset', 'method', 'bivariate', 'least squares']", Exercises,seg_303,"22.10 in the method of least squares we choose α and β in such a way that the sum of squared residuals s(α, β) is minimal. since the ith term in this sum is the squared vertical distance from (xi, yi) to the regression line y = α + βx, one might also wonder whether it is a good idea to replace this squared distance simply by the distance. so, given a bivariate dataset",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  2184,  1999,  1996,  4118,  1997,  2560, 14320,
         2057,  5454,  1155,  1998,  1156,  1999,  2107,  1037,  2126,  2008,
         1996,  7680,  1997, 19942, 21961,  2015,  1055,  1006,  1155,  1010,
         1156,  1007,  2003, 10124,  1012,  2144,  1996,  2009,  2232,  2744,
         1999,  2023,  7680,  2003,  1996, 19942,  7471,  3292,  2013,  1006,
         8418,  1010, 12316,  1007,  2000,  1996, 26237,  2240,  1061,  1027,
         1155,  1009,  1156,  2595,  1010,  2028,  2453,  2036,  4687,  3251,
         2009,  2003,  1037,  2204,  2801,  2000,  5672,  2023, 19942,  3292,
         3432,  2011,  1996,  3292,  1012,  2061,  1010,  2445,  1037, 12170,
        10755, 13143,  2951, 13462,   102])"
2438,0,[], Exercises,seg_303,choose α and β in such a way that the sum,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 5454, 1155, 1998, 1156, 1999, 2107, 1037, 2126, 2008, 1996, 7680,
         102])"
2439,1,"['dataset', 'bivariate dataset', 'bivariate']", Exercises,seg_303,is minimal. we will investigate this by a simple example. consider the following bivariate dataset:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2003, 10124,  1012,  2057,  2097,  8556,  2023,  2011,  1037,
         3722,  2742,  1012,  5136,  1996,  2206, 12170, 10755, 13143,  2951,
        13462,  1024,   102])"
2440,1,"['estimates', 'least squares estimates', 'least squares']", Exercises,seg_303,"a. determine the least squares estimates α̂ and β̂, and draw in one figure",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5646,  1996,  2560, 14320, 10035,  1155,  1998,
         1156,  1010,  1998,  4009,  1999,  2028,  3275,   102])"
2441,1,"['regression', 'estimated regression line', 'regression line', 'estimated', 'scatterplot', 'data']", Exercises,seg_303,"the scatterplot of the data and the estimated regression line y = α̂ + β̂x. finally, determine a(α̂, β̂).",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  8040, 20097, 24759,  4140,  1997,  1996,  2951,  1998,
         1996,  4358, 26237,  2240,  1061,  1027,  1155,  1009,  1156,  2595,
         1012,  2633,  1010,  5646,  1037,  1006,  1155,  1010,  1156,  1007,
         1012,   102])"
2442,1,"['dataset', 'random', 'random variables', 'variables']", Exercises,seg_303,"22.11 consider the dataset (x1, y1), (x2, y2), . . . , (xn, yn), where the xi are nonrandom and the yi are realizations of random variables y1, y2, . . . , yn satisfying",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2570,  1012,  2340,  5136,  1996,  2951, 13462,  1006,  1060,
         2487,  1010,  1061,  2487,  1007,  1010,  1006,  1060,  2475,  1010,
         1061,  2475,  1007,  1010,  1012,  1012,  1012,  1010,  1006,  1060,
         2078,  1010,  1061,  2078,  1007,  1010,  2073,  1996,  8418,  2024,
         2512, 13033,  5358,  1998,  1996, 12316,  2024, 12393,  2015,  1997,
         6721, 10857,  1061,  2487,  1010,  1061,  2475,  1010,  1012,  1012,
         1012,  1010,  1061,  2078, 17087,   102])"
2443,1,"['dataset', 'variance', 'random', 'random variables', 'independent random variables', 'scatterplot', 'variables', 'independent']", Exercises,seg_303,"where u1, u2, . . . , un are independent random variables with zero expectation and variance σ2. visual inspection of the scatterplot of our dataset in",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  2073,  1057,  2487,  1010, 23343,  1010,  1012,  1012,  1012,
         1010,  4895,  2024,  2981,  6721, 10857,  2007,  5717, 17626,  1998,
        23284,  1173,  2475,  1012,  5107, 10569,  1997,  1996,  8040, 20097,
        24759,  4140,  1997,  2256,  2951, 13462,  1999,   102])"
2444,1,['model'], Exercises,seg_303,figure 22.7 suggests that we should model the yi by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  3275,  2570,  1012,  1021,  6083,  2008,  2057,  2323,  2944,
         1996, 12316,  2011,   102])"
2445,1,"['least squares', 'estimators', 'least squares estimators']", Exercises,seg_303,a. show that the least squares estimators β̂ and γ̂ satisfy,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2265,  2008,  1996,  2560, 14320,  9765,  9581,
         6591,  1156,  1998,  1157, 13225,   102])"
2446,1,"['estimators', 'linear']", Exercises,seg_303,"b. infer from a—for instance, by using linear algebra—that the estimators",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1999,  7512,  2013,  1037,  1517,  2005,  6013,
         1010,  2011,  2478,  7399, 11208,  1517,  2008,  1996,  9765,  9581,
         6591,   102])"
2447,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_303,22.12 the least square estimator β̂ from (22.1) is an unbiased estimator for β. you can show this in four steps.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2570,  1012,  2260,  1996,  2560,  2675,  9765,  9581,  4263,
         1156,  2013,  1006,  2570,  1012,  1015,  1007,  2003,  2019,  4895,
        11607,  6924,  9765,  9581,  4263,  2005,  1156,  1012,  2017,  2064,
         2265,  2023,  1999,  2176,  4084,  1012,   102])"
2448,0,[], Exercises,seg_303,a. first show that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 2034, 2265, 2008,  102])"
2449,0,[], Exercises,seg_303,c. simplify this last expression to find,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012, 21934, 28250,  2023,  2197,  3670,  2000,  2424,
          102])"
2450,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_303,"d. finally, conclude that β̂ is an unbiased estimator for β.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1040,  1012,  2633,  1010, 16519,  2008,  1156,  2003,  2019,
         4895, 11607,  6924,  9765,  9581,  4263,  2005,  1156,  1012,   102])"
2451,1,"['mean', 'parameter', 'range', 'confident', 'interval', 'estimate', 'level', 'intervals', 'distribution', 'model', 'confidence intervals', 'confidence', 'expected value', 'data']", Confidence intervals for the mean,seg_305,"sometimes, a range of plausible values for an unknown parameter is preferred to a single estimate. we shall discuss how to turn data into what are called confidence intervals and show that this can be done in such a manner that definite statements can be made about how confident we are that the true parameter value is in the reported interval. this level of confidence is something you can choose. we start this chapter with the general principle of confidence intervals. we continue with confidence intervals for the mean, the common way to refer to confidence intervals made for the expected value of the model distribution. depending on the situation, one of the four methods presented will apply.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7023, 14025,  2005,  1996,  2812])","tensor([  101,  2823,  1010,  1037,  2846,  1997, 24286,  5300,  2005,  2019,
         4242, 16381,  2003,  6871,  2000,  1037,  2309, 10197,  1012,  2057,
         4618,  6848,  2129,  2000,  2735,  2951,  2046,  2054,  2024,  2170,
         7023, 14025,  1998,  2265,  2008,  2023,  2064,  2022,  2589,  1999,
         2107,  1037,  5450,  2008, 15298,  8635,  2064,  2022,  2081,  2055,
         2129,  9657,  2057,  2024,  2008,  1996,  2995, 16381,  3643,  2003,
         1999,  1996,  2988, 13483,  1012,  2023,  2504,  1997,  7023,  2003,
         2242,  2017,  2064,  5454,  1012,  2057,  2707,  2023,  3127,  2007,
         1996,  2236,  6958,  1997,  7023, 14025,  1012,  2057,  3613,  2007,
         7023, 14025,  2005,  1996,  2812,  1010,  1996,  2691,  2126,  2000,
         6523,  2000,  7023, 14025,  2081,  2005,  1996,  3517,  3643,  1997,
         1996,  2944,  4353,  1012,  5834,  2006,  1996,  3663,  1010,  2028,
         1997,  1996,  2176,  4725,  3591,  2097,  6611,  1012,   102])"
2452,1,"['sample statistics', 'point estimate', 'confidence', 'mean', 'estimators', 'estimate', 'statistics', 'data', 'parameter', 'mse', 'realization', 'results', 'estimator', 'sample variance', 'bias', 'variance', 'sample', 'experiment', 'distribution', 'measurements', 'sample mean']", General principle,seg_307,"in previous chapters we have encountered sample statistics as estimators for distribution features. this started somewhat informally in chapter 17, where it was claimed, for example, that the sample mean and the sample variance are usually close to µ and σ2 of the underlying distribution. bias and mse of estimators, discussed in chapters 19 and 20, are used to judge the quality of estimators. if we have at our disposal an estimator t for an unknown parameter θ, we use its realization t as our estimate for θ. for example, when collecting data on the speed of light, as michelson did (see section 13.1), the unknown speed of light would be the parameter θ, our estimator t could be the sample mean, and michelson’s data then yield an estimate t for θ of 299 852.4 km/sec. we call this number a point estimate: if we are required to select one number, this is it. had the measurements started a day earlier, however, the whole experiment would in essence be the same, but the results might have been different. hence, we cannot say that the estimate equals the speed of light but rather that it is close to the true speed of light. for example, we could say something like: “we have great confidence that the true speed of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  1999,  3025,  9159,  2057,  2031,  8567,  7099,  6747,  2004,
         9765,  9581,  6591,  2005,  4353,  2838,  1012,  2023,  2318,  5399,
        21858,  1999,  3127,  2459,  1010,  2073,  2009,  2001,  3555,  1010,
         2005,  2742,  1010,  2008,  1996,  7099,  2812,  1998,  1996,  7099,
        23284,  2024,  2788,  2485,  2000,  1085,  1998,  1173,  2475,  1997,
         1996, 10318,  4353,  1012, 13827,  1998,  5796,  2063,  1997,  9765,
         9581,  6591,  1010,  6936,  1999,  9159,  2539,  1998,  2322,  1010,
         2024,  2109,  2000,  3648,  1996,  3737,  1997,  9765,  9581,  6591,
         1012,  2065,  2057,  2031,  2012,  2256, 13148,  2019,  9765,  9581,
         4263,  1056,  2005,  2019,  4242, 16381,  1162,  1010,  2057,  2224,
         2049, 12393,  1056,  2004,  2256, 10197,  2005,  1162,  1012,  2005,
         2742,  1010,  2043,  9334,  2951,  2006,  1996,  3177,  1997,  2422,
         1010,  2004,  8709,  3385,  2106,  1006,  2156,  2930,  2410,  1012,
         1015,  1007,  1010,  1996,  4242,  3177,  1997,  2422,  2052,  2022,
         1996, 16381,  1162,  1010,  2256,  9765,  9581,  4263,  1056,  2071,
         2022,  1996,  7099,  2812,  1010,  1998,  8709,  3385,  1521,  1055,
         2951,  2059, 10750,  2019, 10197,  1056,  2005,  1162,  1997, 25926,
         5594,  2475,  1012,  1018,  2463,  1013, 10819,  1012,  2057,  2655,
         2023,  2193,  1037,  2391, 10197,  1024,  2065,  2057,  2024,  3223,
         2000,  7276,  2028,  2193,  1010,  2023,  2003,  2009,  1012,  2018,
         1996, 11702,  2318,  1037,  2154,  3041,  1010,  2174,  1010,  1996,
         2878,  7551,  2052,  1999, 11305,  2022,  1996,  2168,  1010,  2021,
         1996,  3463,  2453,  2031,  2042,  2367,  1012,  6516,  1010,  2057,
         3685,  2360,  2008,  1996, 10197, 19635,  1996,  3177,  1997,  2422,
         2021,  2738,  2008,  2009,  2003,  2485,  2000,  1996,  2995,  3177,
         1997,  2422,  1012,  2005,  2742,  1010,  2057,  2071,  2360,  2242,
         2066,  1024,  1523,  2057,  2031,  2307,  7023,  2008,  1996,  2995,
         3177,  1997,   102])"
2453,1,"['interval', 'confident']", General principle,seg_307,light is somewhere between . . . and . . . .” in addition to providing an interval of plausible values for θ we would want to add a specific statement about how confident we are that the true θ is among them.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2422,  2003,  4873,  2090,  1012,  1012,  1012,  1998,  1012,
         1012,  1012,  1012,  1524,  1999,  2804,  2000,  4346,  2019, 13483,
         1997, 24286,  5300,  2005,  1162,  2057,  2052,  2215,  2000,  5587,
         1037,  3563,  4861,  2055,  2129,  9657,  2057,  2024,  2008,  1996,
         2995,  1162,  2003,  2426,  2068,  1012,   102])"
2454,1,"['confidence', 'estimators', 'standard deviation', 'sampling', 'confidence statements', 'sampling distributions', 'moment', 'deviation', 'unbiased', 'estimator', 'standard', 'parameters', 'distributions', 'inequality']", General principle,seg_307,"in this chapter we shall present methods to make confidence statements about unknown parameters, based on knowledge of the sampling distributions of corresponding estimators. to illustrate the main idea, suppose the estimator t is unbiased for the speed of light θ. for the moment, also suppose that t has standard deviation σt = 100 km/sec (we shall drop this unrealistic assumption shortly). then, applying formula (13.1), which was derived from chebyshev’s inequality (see section 13.2), we find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  1999,  2023,  3127,  2057,  4618,  2556,  4725,  2000,  2191,
         7023,  8635,  2055,  4242, 11709,  1010,  2241,  2006,  3716,  1997,
         1996, 16227, 20611,  1997,  7978,  9765,  9581,  6591,  1012,  2000,
        19141,  1996,  2364,  2801,  1010,  6814,  1996,  9765,  9581,  4263,
         1056,  2003,  4895, 11607,  6924,  2005,  1996,  3177,  1997,  2422,
         1162,  1012,  2005,  1996,  2617,  1010,  2036,  6814,  2008,  1056,
         2038,  3115, 24353,  1173,  2102,  1027,  2531,  2463,  1013, 10819,
         1006,  2057,  4618,  4530,  2023,  4895, 22852,  6553, 11213,  3859,
         1007,  1012,  2059,  1010, 11243,  5675,  1006,  2410,  1012,  1015,
         1007,  1010,  2029,  2001,  5173,  2013, 18178,  3762,  4095,  6777,
         1521,  1055, 16440,  1006,  2156,  2930,  2410,  1012,  1016,  1007,
         1010,  2057,  2424,   102])"
2455,1,"['probability', 'estimator']", General principle,seg_307,"in words this reads: with probability at least 75%, the estimator t is within 2σt = 200 of the true speed of light θ. we could rephrase this as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  1999,  2616,  2023,  9631,  1024,  2007,  9723,  2012,  2560,
         4293,  1003,  1010,  1996,  9765,  9581,  4263,  1056,  2003,  2306,
         1016, 29733,  2102,  1027,  3263,  1997,  1996,  2995,  3177,  1997,
         2422,  1162,  1012,  2057,  2071, 16360, 13492,  3366,  2023,  2004,
          102])"
2456,1,['probability'], General principle,seg_307,"t ∈ (θ − 200, θ + 200) with probability at least 75%.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([2236, 6958])","tensor([ 101, 1056, 1596, 1006, 1162, 1597, 3263, 1010, 1162, 1009, 3263, 1007,
        2007, 9723, 2012, 2560, 4293, 1003, 1012,  102])"
2457,0,[], General principle,seg_307,"however, if i am near the city of paris, then the city of paris is near me: the statement “t is within 200 of θ” is the same as “θ is within 200 of t ,” and we could equally well rephrase (23.1) as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2236, 6958])","tensor([  101,  2174,  1010,  2065,  1045,  2572,  2379,  1996,  2103,  1997,
         3000,  1010,  2059,  1996,  2103,  1997,  3000,  2003,  2379,  2033,
         1024,  1996,  4861,  1523,  1056,  2003,  2306,  3263,  1997,  1162,
         1524,  2003,  1996,  2168,  2004,  1523,  1162,  2003,  2306,  3263,
         1997,  1056,  1010,  1524,  1998,  2057,  2071,  8053,  2092, 16360,
        13492,  3366,  1006,  2603,  1012,  1015,  1007,  2004,   102])"
2458,1,['probability'], General principle,seg_307,"θ ∈ (t − 200, t + 200) with probability at least 75%.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([2236, 6958])","tensor([ 101, 1162, 1596, 1006, 1056, 1597, 3263, 1010, 1056, 1009, 3263, 1007,
        2007, 9723, 2012, 2560, 4293, 1003, 1012,  102])"
2459,1,"['probability', 'interval', 'estimate', 'realization', 'random variable', 'random interval', 'random', 'estimator', 'interval estimate', 'interval estimator', 'variable']", General principle,seg_307,"note that of the last two equations the first is a statement about a random variable t being in a fixed interval, whereas in the second equation the interval is random and the statement is about the probability that the random interval covers the fixed but unknown θ. the interval (t − 200, t + 200) is sometimes called an interval estimator, and its realization is an interval estimate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0.])","tensor([2236, 6958])","tensor([  101,  3602,  2008,  1997,  1996,  2197,  2048, 11380,  1996,  2034,
         2003,  1037,  4861,  2055,  1037,  6721,  8023,  1056,  2108,  1999,
         1037,  4964, 13483,  1010,  6168,  1999,  1996,  2117,  8522,  1996,
        13483,  2003,  6721,  1998,  1996,  4861,  2003,  2055,  1996,  9723,
         2008,  1996,  6721, 13483,  4472,  1996,  4964,  2021,  4242,  1162,
         1012,  1996, 13483,  1006,  1056,  1597,  3263,  1010,  1056,  1009,
         3263,  1007,  2003,  2823,  2170,  2019, 13483,  9765,  9581,  4263,
         1010,  1998,  2049, 12393,  2003,  2019, 13483, 10197,  1012,   102])"
2460,1,"['realization', 'data']", General principle,seg_307,"evaluating t for the michelson data we find as its realization t = 299 852.4, and this yields the statement",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101, 23208,  1056,  2005,  1996,  8709,  3385,  2951,  2057,  2424,
         2004,  2049, 12393,  1056,  1027, 25926,  5594,  2475,  1012,  1018,
         1010,  1998,  2023, 16189,  1996,  4861,   102])"
2461,1,"['probability', 'interval', 'realization', 'random variable', 'random', 'variable']", General principle,seg_307,"because we substituted the realization for the random variable, we cannot claim that (23.2) holds with probability at least 75%: either the true speed of light θ belongs to the interval or it does not; the statement we make is either true or false, we just do not know which. however, because the procedure guarantees a probability of at least 75% of getting a “right” statement, we say:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2138,  2057, 17316,  1996, 12393,  2005,  1996,  6721,  8023,
         1010,  2057,  3685,  4366,  2008,  1006,  2603,  1012,  1016,  1007,
         4324,  2007,  9723,  2012,  2560,  4293,  1003,  1024,  2593,  1996,
         2995,  3177,  1997,  2422,  1162,  7460,  2000,  1996, 13483,  2030,
         2009,  2515,  2025,  1025,  1996,  4861,  2057,  2191,  2003,  2593,
         2995,  2030,  6270,  1010,  2057,  2074,  2079,  2025,  2113,  2029,
         1012,  2174,  1010,  2138,  1996,  7709, 21586,  1037,  9723,  1997,
         2012,  2560,  4293,  1003,  1997,  2893,  1037,  1523,  2157,  1524,
         4861,  1010,  2057,  2360,  1024,   102])"
2462,1,['confidence'], General principle,seg_307,"θ ∈ (299 652.4, 300 052.4) with confidence at least 75%. (23.3)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  1162,  1596,  1006, 25926,  3515,  2475,  1012,  1018,  1010,
         3998,  5709,  2475,  1012,  1018,  1007,  2007,  7023,  2012,  2560,
         4293,  1003,  1012,  1006,  2603,  1012,  1017,  1007,   102])"
2463,1,"['distribution', 'confidence interval', 'deviation', 'interval', 'information', 'unbiased', 'estimator', 'standard deviation', 'sampling', 'standard', 'confidence', 'sampling distribution']", General principle,seg_307,"the construction of this confidence interval only involved an unbiased estimator and knowledge of its standard deviation. when more information on the sampling distribution of the estimator is available, more refined statements can be made, as we shall see shortly.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  1996,  2810,  1997,  2023,  7023, 13483,  2069,  2920,  2019,
         4895, 11607,  6924,  9765,  9581,  4263,  1998,  3716,  1997,  2049,
         3115, 24353,  1012,  2043,  2062,  2592,  2006,  1996, 16227,  4353,
         1997,  1996,  9765,  9581,  4263,  2003,  2800,  1010,  2062, 15514,
         8635,  2064,  2022,  2081,  1010,  2004,  2057,  4618,  2156,  3859,
         1012,   102])"
2464,1,"['inequality', 'confidence', 'confidence interval', 'interval']", General principle,seg_307,"quick exercise 23.1 repeat the preceding derivation, starting from the statement p(|t − θ| < 3σt ) ≥ 8/9 (check that this follows from chebyshev’s inequality). what is the resulting confidence interval for the speed of light, and what is the corresponding confidence?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2236, 6958])","tensor([  101,  4248,  6912,  2603,  1012,  1015,  9377,  1996, 11003, 29280,
         1010,  3225,  2013,  1996,  4861,  1052,  1006,  1064,  1056,  1597,
         1162,  1064,  1026,  1017, 29733,  2102,  1007,  1609,  1022,  1013,
         1023,  1006,  4638,  2008,  2023,  4076,  2013, 18178,  3762,  4095,
         6777,  1521,  1055, 16440,  1007,  1012,  2054,  2003,  1996,  4525,
         7023, 13483,  2005,  1996,  3177,  1997,  2422,  1010,  1998,  2054,
         2003,  1996,  7978,  7023,  1029,   102])"
2465,1,"['intervals', 'confidence intervals', 'confidence']", General principle,seg_307,many confidence intervals are of the form1,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2116,  7023, 14025,  2024,  1997,  1996,  2433,  2487,   102])"
2466,1,"['intervals', 'confidence intervals', 'confidence']", General principle,seg_307,"we just encountered, where c is a number near 2 or 3. the corresponding confidence is often much higher than in the preceding example. because there are many other ways confidence intervals can (or have to) be constructed, the general definition looks a bit different.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2057,  2074,  8567,  1010,  2073,  1039,  2003,  1037,  2193,
         2379,  1016,  2030,  1017,  1012,  1996,  7978,  7023,  2003,  2411,
         2172,  3020,  2084,  1999,  1996, 11003,  2742,  1012,  2138,  2045,
         2024,  2116,  2060,  3971,  7023, 14025,  2064,  1006,  2030,  2031,
         2000,  1007,  2022,  3833,  1010,  1996,  2236,  6210,  3504,  1037,
         2978,  2367,  1012,   102])"
2467,1,"['sample statistics', 'dataset', 'statistics', 'parameter', 'parameter of interest', 'realization', 'random variables', 'sample', 'random', 'intervals', 'variables']", General principle,seg_307,"confidence intervals. suppose a dataset x1, . . . , xn is given, modeled as realization of random variables x1, . . . , xn. let θ be the parameter of interest, and γ a number between 0 and 1. if there exist sample statistics ln = g(x1, . . . , xn) and un = h(x1, . . . , xn) such that p(ln < θ < un) = γ",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  7023, 14025,  1012,  6814,  1037,  2951, 13462,  1060,  2487,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,  2445,  1010,
        14440,  2004, 12393,  1997,  6721, 10857,  1060,  2487,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1012,  2292,  1162,  2022,  1996,
        16381,  1997,  3037,  1010,  1998,  1157,  1037,  2193,  2090,  1014,
         1998,  1015,  1012,  2065,  2045,  4839,  7099,  6747,  1048,  2078,
         1027,  1043,  1006,  1060,  2487,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1007,  1998,  4895,  1027,  1044,  1006,  1060,  2487,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1007,  2107,  2008,
         1052,  1006,  1048,  2078,  1026,  1162,  1026,  4895,  1007,  1027,
         1157,   102])"
2468,1,"['confidence level', 'confidence interval', 'interval', 'level', 'confidence']", General principle,seg_307,"where ln = g(x1, . . . , xn) and un = h(x1, . . . , xn), is called a 100γ% confidence interval for θ. the number γ is called the confidence level.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2073,  1048,  2078,  1027,  1043,  1006,  1060,  2487,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1007,  1998,  4895,  1027,
         1044,  1006,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  1007,  1010,  2003,  2170,  1037,  2531, 29721,  1003,  7023,
        13483,  2005,  1162,  1012,  1996,  2193,  1157,  2003,  2170,  1996,
         7023,  2504,  1012,   102])"
2469,1,"['sample statistics', 'sample', 'statistics']", General principle,seg_307,"sometimes sample statistics ln and un as required in the definition do not exist, but one can find ln and un that satisfy",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2823,  7099,  6747,  1048,  2078,  1998,  4895,  2004,  3223,
         1999,  1996,  6210,  2079,  2025,  4839,  1010,  2021,  2028,  2064,
         2424,  1048,  2078,  1998,  4895,  2008, 13225,   102])"
2470,1,"['confidence level', 'confidence interval', 'interval', 'level', 'confidence']", General principle,seg_307,"the resulting confidence interval (ln, un) is called a conservative 100γ% confidence interval for θ: the actual confidence level might be higher. for example, the interval in (23.2) is a conservative 75% confidence interval.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([2236, 6958])","tensor([  101,  1996,  4525,  7023, 13483,  1006,  1048,  2078,  1010,  4895,
         1007,  2003,  2170,  1037,  4603,  2531, 29721,  1003,  7023, 13483,
         2005,  1162,  1024,  1996,  5025,  7023,  2504,  2453,  2022,  3020,
         1012,  2005,  2742,  1010,  1996, 13483,  1999,  1006,  2603,  1012,
         1016,  1007,  2003,  1037,  4603,  4293,  1003,  7023, 13483,  1012,
          102])"
2471,1,['interval'], General principle,seg_307,quick exercise 23.2 why is the interval in (23.2) a conservative 75% confidence interval?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([2236, 6958])","tensor([  101,  4248,  6912,  2603,  1012,  1016,  2339,  2003,  1996, 13483,
         1999,  1006,  2603,  1012,  1016,  1007,  1037,  4603,  4293,  1003,
         7023, 13483,  1029,   102])"
2472,1,"['confidence interval', 'probability', 'interval', 'simulation', 'confidence']", General principle,seg_307,"there is no way of knowing whether an individual confidence interval is correct, in the sense that it indeed does cover θ. the procedure guarantees that each time we make a confidence interval we have probability γ of covering θ. what this means in practice can easily be illustrated with an example, using simulation:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2045,  2003,  2053,  2126,  1997,  4209,  3251,  2019,  3265,
         7023, 13483,  2003,  6149,  1010,  1999,  1996,  3168,  2008,  2009,
         5262,  2515,  3104,  1162,  1012,  1996,  7709, 21586,  2008,  2169,
         2051,  2057,  2191,  1037,  7023, 13483,  2057,  2031,  9723,  1157,
         1997,  5266,  1162,  1012,  2054,  2023,  2965,  1999,  3218,  2064,
         4089,  2022,  7203,  2007,  2019,  2742,  1010,  2478, 12504,  1024,
          102])"
2473,1,"['confidence interval', 'normal distribution', 'interval', 'method', 'normal', 'expectation', 'distribution', 'confidence', 'data']", General principle,seg_307,"generate x1, . . . , x20 from an n(0, 1) distribution. next, pretend that it is known that the data are from a normal distribution but that both µ and σ are unknown. construct the 90% confidence interval for the expectation µ using the method described in the next section, which says to use (ln, un) with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  9699,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,
        11387,  2013,  2019,  1050,  1006,  1014,  1010,  1015,  1007,  4353,
         1012,  2279,  1010,  9811,  2008,  2009,  2003,  2124,  2008,  1996,
         2951,  2024,  2013,  1037,  3671,  4353,  2021,  2008,  2119,  1085,
         1998,  1173,  2024,  4242,  1012,  9570,  1996,  3938,  1003,  7023,
        13483,  2005,  1996, 17626,  1085,  2478,  1996,  4118,  2649,  1999,
         1996,  2279,  2930,  1010,  2029,  2758,  2000,  2224,  1006,  1048,
         2078,  1010,  4895,  1007,  2007,   102])"
2474,1,"['mean', 'confidence interval', 'deviation', 'interval', 'sample', 'standard deviation', 'standard', 'confidence', 'sample mean', 'case']", General principle,seg_307,"where x̄20 and s20 are the sample mean and standard deviation. finally, check whether the “true µ,” in this case 0, is in the confidence interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([2236, 6958])","tensor([  101,  2073,  1060, 11387,  1998,  1055, 11387,  2024,  1996,  7099,
         2812,  1998,  3115, 24353,  1012,  2633,  1010,  4638,  3251,  1996,
         1523,  2995,  1085,  1010,  1524,  1999,  2023,  2553,  1014,  1010,
         2003,  1999,  1996,  7023, 13483,  1012,   102])"
2475,1,"['confidence interval', 'set', 'interval', 'confidence', 'intervals', 'confidence intervals', 'data']", General principle,seg_307,"we repeated the whole procedure 50 times, making 50 confidence intervals for µ. each confidence interval is based on a fresh independently generated set of data. the 50 intervals are plotted in figure 23.1 as horizontal line",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  2057,  5567,  1996,  2878,  7709,  2753,  2335,  1010,  2437,
         2753,  7023, 14025,  2005,  1085,  1012,  2169,  7023, 13483,  2003,
         2241,  2006,  1037,  4840,  9174,  7013,  2275,  1997,  2951,  1012,
         1996,  2753, 14025,  2024, 27347,  1999,  3275,  2603,  1012,  1015,
         2004,  9876,  2240,   102])"
2476,1,['intervals'], General principle,seg_307,"segments, and at µ (0!) a vertical line is drawn. we count 46 “hits”: only four intervals do not contain the true µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  9214,  1010,  1998,  2012,  1085,  1006,  1014,   999,  1007,
         1037,  7471,  2240,  2003,  4567,  1012,  2057,  4175,  4805,  1523,
         4978,  1524,  1024,  2069,  2176, 14025,  2079,  2025,  5383,  1996,
         2995,  1085,  1012,   102])"
2477,1,"['confidence level', 'level', 'intervals', 'confidence intervals', 'confidence']", General principle,seg_307,quick exercise 23.3 suppose you were to make 40 confidence intervals with confidence level 95%. about how many of them should you expect to be “wrong”? should you be surprised if 10 of them are wrong?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  4248,  6912,  2603,  1012,  1017,  6814,  2017,  2020,  2000,
         2191,  2871,  7023, 14025,  2007,  7023,  2504,  5345,  1003,  1012,
         2055,  2129,  2116,  1997,  2068,  2323,  2017,  5987,  2000,  2022,
         1523,  3308,  1524,  1029,  2323,  2017,  2022,  4527,  2065,  2184,
         1997,  2068,  2024,  3308,  1029,   102])"
2478,1,"['mean', 'normal distribution', 'confidence intervals', 'variance', 'central limit theorem', 'sample', 'samples', 'normal', 'limit', 'expectation', 'intervals', 'distribution', 'bootstrap', 'confidence', 'data']", General principle,seg_307,"in the remainder of this chapter we consider confidence intervals for the mean: confidence intervals for the unknown expectation µ of the distribution from which the sample originates. we start with the situation where it is known that the data originate from a normal distribution, first with known variance, then with unknown variance. then we drop the normal assumption, first use the bootstrap, and finally show how, for very large samples, confidence intervals based on the central limit theorem are made.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0.])","tensor([2236, 6958])","tensor([  101,  1999,  1996,  6893,  1997,  2023,  3127,  2057,  5136,  7023,
        14025,  2005,  1996,  2812,  1024,  7023, 14025,  2005,  1996,  4242,
        17626,  1085,  1997,  1996,  4353,  2013,  2029,  1996,  7099, 16896,
         1012,  2057,  2707,  2007,  1996,  3663,  2073,  2009,  2003,  2124,
         2008,  1996,  2951, 21754,  2013,  1037,  3671,  4353,  1010,  2034,
         2007,  2124, 23284,  1010,  2059,  2007,  4242, 23284,  1012,  2059,
         2057,  4530,  1996,  3671, 11213,  1010,  2034,  2224,  1996,  6879,
         6494,  2361,  1010,  1998,  2633,  2265,  2129,  1010,  2005,  2200,
         2312,  8168,  1010,  7023, 14025,  2241,  2006,  1996,  2430,  5787,
         9872,  2024,  2081,  1012,   102])"
2479,1,"['parameter', 'parameter of interest', 'variance', 'realization', 'sample', 'intervals', 'distribution', 'confidence intervals', 'confidence', 'data']", Normal data,seg_309,"suppose the data can be seen as the realization of a sample x1, . . . , xn from an n(µ, σ2) distribution and µ is the (unknown) parameter of interest. if the variance σ2 is known, confidence intervals are easily derived. before we do this, some preparation has to be done.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  6814,  1996,  2951,  2064,  2022,  2464,  2004,  1996, 12393,
         1997,  1037,  7099,  1060,  2487,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  2013,  2019,  1050,  1006,  1085,  1010,  1173,  2475,
         1007,  4353,  1998,  1085,  2003,  1996,  1006,  4242,  1007, 16381,
         1997,  3037,  1012,  2065,  1996, 23284,  1173,  2475,  2003,  2124,
         1010,  7023, 14025,  2024,  4089,  5173,  1012,  2077,  2057,  2079,
         2023,  1010,  2070,  7547,  2038,  2000,  2022,  2589,  1012,   102])"
2480,1,"['tail', 'normal distribution', 'critical values', 'standard normal distribution', 'probability', 'standard normal', 'tail probability', 'normal', 'standard', 'distribution', 'critical value', 'right tail probability']", Normal data,seg_309,"we shall need so-called critical values for the standard normal distribution. the critical value zp of an n(0, 1) distribution is the number that has right tail probability p. it is defined by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([ 101, 2057, 4618, 2342, 2061, 1011, 2170, 4187, 5300, 2005, 1996, 3115,
        3671, 4353, 1012, 1996, 4187, 3643, 1062, 2361, 1997, 2019, 1050, 1006,
        1014, 1010, 1015, 1007, 4353, 2003, 1996, 2193, 2008, 2038, 2157, 5725,
        9723, 1052, 1012, 2009, 2003, 4225, 2011,  102])"
2481,1,"['quantile', 'normal distribution', 'standard normal distribution', 'table', 'standard normal', 'random variable', 'random', 'normal', 'standard', 'distribution', 'variable']", Normal data,seg_309,"where z is an n(0, 1) random variable. for example, from table b.1 we read p(z ≥ 1.96) = 0.025, so z0.025 = 1.96. in fact, zp is the (1 − p)th quantile of the standard normal distribution:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2073,  1062,  2003,  2019,  1050,  1006,  1014,  1010,  1015,
         1007,  6721,  8023,  1012,  2005,  2742,  1010,  2013,  2795,  1038,
         1012,  1015,  2057,  3191,  1052,  1006,  1062,  1609,  1015,  1012,
         5986,  1007,  1027,  1014,  1012,  6185,  2629,  1010,  2061,  1062,
         2692,  1012,  6185,  2629,  1027,  1015,  1012,  5986,  1012,  1999,
         2755,  1010,  1062,  2361,  2003,  1996,  1006,  1015,  1597,  1052,
         1007, 16215, 24110, 15286,  1997,  1996,  3115,  3671,  4353,  1024,
          102])"
2482,1,"['standard normal', 'symmetry', 'normal', 'standard']", Normal data,seg_309,"by the symmetry of the standard normal density, p(z ≤ −zp) = p(z ≥ zp) = p, so p(z ≥ −zp) = 1 − p and therefore",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2011,  1996, 14991,  1997,  1996,  3115,  3671,  4304,  1010,
         1052,  1006,  1062,  1608,  1597,  2480,  2361,  1007,  1027,  1052,
         1006,  1062,  1609,  1062,  2361,  1007,  1027,  1052,  1010,  2061,
         1052,  1006,  1062,  1609,  1597,  2480,  2361,  1007,  1027,  1015,
         1597,  1052,  1998,  3568,   102])"
2483,1,['table'], Normal data,seg_309,quick exercise 23.4 determine z0.01 and z0.95 from table b.1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([ 101, 4248, 6912, 2603, 1012, 1018, 5646, 1062, 2692, 1012, 5890, 1998,
        1062, 2692, 1012, 5345, 2013, 2795, 1038, 1012, 1015, 1012,  102])"
2484,1,"['normal distribution', 'random sample', 'sample', 'random', 'normal', 'distribution']", Normal data,seg_309,"if x1, . . . , xn is a random sample from an n(µ, σ2) distribution, then x̄n has an n(µ, σ2/n) distribution, and from the properties of the normal distribution (see page 106), we know that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2065,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2003,  1037,  6721,  7099,  2013,  2019,  1050,  1006,  1085,
         1010,  1173,  2475,  1007,  4353,  1010,  2059,  1060,  2078,  2038,
         2019,  1050,  1006,  1085,  1010,  1173,  2475,  1013,  1050,  1007,
         4353,  1010,  1998,  2013,  1996,  5144,  1997,  1996,  3671,  4353,
         1006,  2156,  3931, 10114,  1007,  1010,  2057,  2113,  2008,   102])"
2485,1,['distribution'], Normal data,seg_309,"x̄n − µ has an n(0, 1) distribution. σ/√n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([3671, 2951])","tensor([ 101, 1060, 2078, 1597, 1085, 2038, 2019, 1050, 1006, 1014, 1010, 1015,
        1007, 4353, 1012, 1173, 1013, 1600, 2078,  102])"
2486,1,"['random', 'random variable', 'variable']", Normal data,seg_309,"if cl and cu are chosen such that p(cl < z < cu) = γ for an n(0, 1) distributed random variable z, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2065, 18856,  1998, 12731,  2024,  4217,  2107,  2008,  1052,
         1006, 18856,  1026,  1062,  1026, 12731,  1007,  1027,  1157,  2005,
         2019,  1050,  1006,  1014,  1010,  1015,  1007,  5500,  6721,  8023,
         1062,  1010,  2059,   102])"
2487,0,[], Normal data,seg_309,we have found that,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([3671, 2951])","tensor([ 101, 2057, 2031, 2179, 2008,  102])"
2488,1,"['probability', 'confidence', 'confidence interval', 'interval']", Normal data,seg_309,"satisfy the confidence interval definition: the interval (ln, un) covers µ with probability γ. therefore",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101, 13225,  1996,  7023, 13483,  6210,  1024,  1996, 13483,  1006,
         1048,  2078,  1010,  4895,  1007,  4472,  1085,  2007,  9723,  1157,
         1012,  3568,   102])"
2489,1,"['confidence interval', 'interval', 'confidence']", Normal data,seg_309,"is a 100γ% confidence interval for µ. a common choice is to divide α = 1− γ evenly between the tails,2 that is, solve cl and cu from",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([3671, 2951])","tensor([  101,  2003,  1037,  2531, 29721,  1003,  7023, 13483,  2005,  1085,
         1012,  1037,  2691,  3601,  2003,  2000, 11443,  1155,  1027,  1015,
        22543,  1157, 18030,  2090,  1996, 17448,  1010,  1016,  2008,  2003,
         1010,  9611, 18856,  1998, 12731,  2013,   102])"
2490,1,"['interval', 'confidence', 'confidence interval']", Normal data,seg_309,"so that cu = zα/2 and cl = z1−α/2 = −zα/2. summarizing, the 100(1 − α)% confidence interval for µ is:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2061,  2008, 12731,  1027,  1062, 14608,  1013,  1016,  1998,
        18856,  1027,  1062,  2487, 22543, 14608,  1013,  1016,  1027,  1597,
         2480, 14608,  1013,  1016,  1012,  7680,  7849,  6026,  1010,  1996,
         2531,  1006,  1015,  1597,  1155,  1007,  1003,  7023, 13483,  2005,
         1085,  2003,  1024,   102])"
2491,1,"['interval', 'confidence', 'confidence interval']", Normal data,seg_309,"for example, if α = 0.05, we use z0.025 = 1.96 and the 95% confidence interval",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([3671, 2951])","tensor([  101,  2005,  2742,  1010,  2065,  1155,  1027,  1014,  1012,  5709,
         1010,  2057,  2224,  1062,  2692,  1012,  6185,  2629,  1027,  1015,
         1012,  5986,  1998,  1996,  5345,  1003,  7023, 13483,   102])"
2492,0,[], Normal data,seg_309,example: gross calorific content of coal,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 2951])","tensor([  101,  2742,  1024,  7977, 10250, 10050,  8873,  2278,  4180,  1997,
         5317,   102])"
2493,1,"['deviation', 'table', 'standardization', 'method', 'standard deviation', 'normal', 'standard', 'measurement', 'errors', 'measurements', 'numerical']", Normal data,seg_309,"when a shipment of coal is traded, a number of its properties should be known accurately, because the value of the shipment is determined by them. an important example is the so-called gross calorific value, which characterizes the heat content and is a numerical value in megajoules per kilogram (mj/kg). the international organization of standardization (iso) issues standard procedures for the determination of these properties. for the gross calorific value, there is a method known as iso 1928. when the procedure is carried out properly, resulting measurement errors are known to be approximately normal, with a standard deviation of about 0.1 mj/kg. laboratories that operate according to standard procedures receive iso certificates. in table 23.1, a number of such iso 1928 measurements is given for a shipment of osterfeld coal coded 262de27.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2043,  1037, 22613,  1997,  5317,  2003,  7007,  1010,  1037,
         2193,  1997,  2049,  5144,  2323,  2022,  2124, 14125,  1010,  2138,
         1996,  3643,  1997,  1996, 22613,  2003,  4340,  2011,  2068,  1012,
         2019,  2590,  2742,  2003,  1996,  2061,  1011,  2170,  7977, 10250,
        10050,  8873,  2278,  3643,  1010,  2029,  2839, 10057,  1996,  3684,
         4180,  1998,  2003,  1037, 15973,  3643,  1999, 13164, 23099,  4244,
         2566, 11382, 24915,  1006,  1049,  3501,  1013,  4705,  1007,  1012,
         1996,  2248,  3029,  1997, 28648,  1006, 11163,  1007,  3314,  3115,
         8853,  2005,  1996,  9128,  1997,  2122,  5144,  1012,  2005,  1996,
         7977, 10250, 10050,  8873,  2278,  3643,  1010,  2045,  2003,  1037,
         4118,  2124,  2004, 11163,  4662,  1012,  2043,  1996,  7709,  2003,
         3344,  2041,  7919,  1010,  4525, 10903, 10697,  2024,  2124,  2000,
         2022,  3155,  3671,  1010,  2007,  1037,  3115, 24353,  1997,  2055,
         1014,  1012,  1015,  1049,  3501,  1013,  4705,  1012, 12030,  2008,
         5452,  2429,  2000,  3115,  8853,  4374, 11163, 17987,  1012,  1999,
         2795,  2603,  1012,  1015,  1010,  1037,  2193,  1997,  2107, 11163,
         4662, 11702,  2003,  2445,  2005,  1037, 22613,  1997,  9808,  3334,
         8151,  5317, 22402, 21950,  3207, 22907,  1012,   102])"
2494,1,"['interval', 'confidence', 'confidence interval', 'data']", Normal data,seg_309,"we want to combine these values into a confidence statement about the “true” gross calorific content of osterfeld 262de27. from the data, we compute x̄n = 23.788. using the given σ = 0.1 and α = 0.05, we find the 95% confidence interval",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([3671, 2951])","tensor([  101,  2057,  2215,  2000, 11506,  2122,  5300,  2046,  1037,  7023,
         4861,  2055,  1996,  1523,  2995,  1524,  7977, 10250, 10050,  8873,
         2278,  4180,  1997,  9808,  3334,  8151, 21950,  3207, 22907,  1012,
         2013,  1996,  2951,  1010,  2057, 24134,  1060,  2078,  1027,  2603,
         1012,  6275,  2620,  1012,  2478,  1996,  2445,  1173,  1027,  1014,
         1012,  1015,  1998,  1155,  1027,  1014,  1012,  5709,  1010,  2057,
         2424,  1996,  5345,  1003,  7023, 13483,   102])"
2495,0,[], Normal data,seg_309,"when σ is unknown, the fact that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 2951])","tensor([ 101, 2043, 1173, 2003, 4242, 1010, 1996, 2755, 2008,  102])"
2496,1,"['confidence interval', 'normal distribution', 'standard normal distribution', 'interval', 'standard normal', 'random variable', 'random', 'normal', 'estimator', 'standard', 'distribution', 'confidence', 'variable']", Normal data,seg_309,"has a standard normal distribution has become useless, as it involves this unknown σ, which would subsequently appear in the confidence interval. however, if we substitute the estimator sn for σ, the resulting random variable",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([3671, 2951])","tensor([  101,  2038,  1037,  3115,  3671,  4353,  2038,  2468, 11809,  1010,
         2004,  2009,  7336,  2023,  4242,  1173,  1010,  2029,  2052,  3525,
         3711,  1999,  1996,  7023, 13483,  1012,  2174,  1010,  2065,  2057,
         7681,  1996,  9765,  9581,  4263,  1055,  2078,  2005,  1173,  1010,
         1996,  4525,  6721,  8023,   102])"
2497,1,['distribution'], Normal data,seg_309,"has a distribution that only depends on n and not on µ or σ. moreover, its density can be given explicitly.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2038,  1037,  4353,  2008,  2069,  9041,  2006,  1050,  1998,
         2025,  2006,  1085,  2030,  1173,  1012,  9308,  1010,  2049,  4304,
         2064,  2022,  2445, 12045,  1012,   102])"
2498,1,"['continuous', 'parameter', 'continuous random variable', 'probability', 'random variable', 'random', 'variable']", Normal data,seg_309,"definition. a continuous random variable has a t-distribution with parameter m, where m ≥ 1 is an integer, if its probability density is given by",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  6210,  1012,  1037,  7142,  6721,  8023,  2038,  1037,  1056,
         1011,  4353,  2007, 16381,  1049,  1010,  2073,  1049,  1609,  1015,
         2003,  2019, 16109,  1010,  2065,  2049,  9723,  4304,  2003,  2445,
         2011,   102])"
2499,1,"['degrees of freedom', 'distribution']", Normal data,seg_309,+1) / (γ (m 2 )√mπ). this distribution is denoted by t(m) and is referred to as the t-distribution with m degrees of freedom.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0.])","tensor([3671, 2951])","tensor([  101,  1009,  1015,  1007,  1013,  1006,  1157,  1006,  1049,  1016,
         1007,  1600,  2213, 29731,  1007,  1012,  2023,  4353,  2003, 19537,
         2011,  1056,  1006,  1049,  1007,  1998,  2003,  3615,  2000,  2004,
         1996,  1056,  1011,  4353,  2007,  1049,  5445,  1997,  4071,  1012,
          102])"
2500,1,"['gamma function', 'functions', 'symmetric', 'normal distribution', 'tails', 'cauchy', 'normal', 'cauchy distribution', 'function', 'standard normal distribution', 'standard', 'gamma', 'standard normal', 'densities', 'limit', 'distribution']", Normal data,seg_309,"the normalizing constant km is given in terms of the gamma function, which was defined on page 157. for m = 1, it evaluates to k1 = 1/π, and the resulting density is that of the standard cauchy distribution (see page 161). if x has a t(m) distribution, then e[x ] = 0 for m ≥ 2 and var(x) = m/(m − 2) for m ≥ 3. densities of t-distributions look like that of the standard normal distribution: they are also symmetric around 0 and bell-shaped. as m goes to infinity the limit of the t(m) density is the standard normal density. the distinguishing feature is that densities of t-distributions have heavier tails: f(x) goes to zero as x goes to +∞ or −∞, but more slowly than the density φ(x) of the standard normal distribution. these properties are illustrated in figure 23.3, which shows the densities and distribution functions of the t(1), t(2), and t(5) distribution as well as those of the standard normal.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([3671, 2951])","tensor([  101,  1996,  3671,  6026,  5377,  2463,  2003,  2445,  1999,  3408,
         1997,  1996, 13091,  3853,  1010,  2029,  2001,  4225,  2006,  3931,
        17403,  1012,  2005,  1049,  1027,  1015,  1010,  2009, 16157,  2015,
         2000,  1047,  2487,  1027,  1015,  1013,  1170,  1010,  1998,  1996,
         4525,  4304,  2003,  2008,  1997,  1996,  3115,  6187, 10875,  2100,
         4353,  1006,  2156,  3931, 17365,  1007,  1012,  2065,  1060,  2038,
         1037,  1056,  1006,  1049,  1007,  4353,  1010,  2059,  1041,  1031,
         1060,  1033,  1027,  1014,  2005,  1049,  1609,  1016,  1998, 13075,
         1006,  1060,  1007,  1027,  1049,  1013,  1006,  1049,  1597,  1016,
         1007,  2005,  1049,  1609,  1017,  1012,  7939, 24279,  1997,  1056,
         1011, 20611,  2298,  2066,  2008,  1997,  1996,  3115,  3671,  4353,
         1024,  2027,  2024,  2036, 19490,  2105,  1014,  1998,  4330,  1011,
         5044,  1012,  2004,  1049,  3632,  2000, 15579,  1996,  5787,  1997,
         1996,  1056,  1006,  1049,  1007,  4304,  2003,  1996,  3115,  3671,
         4304,  1012,  1996, 20852,  3444,  2003,  2008,  7939, 24279,  1997,
         1056,  1011, 20611,  2031, 11907, 17448,  1024,  1042,  1006,  1060,
         1007,  3632,  2000,  5717,  2004,  1060,  3632,  2000,  1009,  1601,
         2030,  1597, 30128,  1010,  2021,  2062,  3254,  2084,  1996,  4304,
         1176,  1006,  1060,  1007,  1997,  1996,  3115,  3671,  4353,  1012,
         2122,  5144,  2024,  7203,  1999,  3275,  2603,  1012,  1017,  1010,
         2029,  3065,  1996,  7939, 24279,  1998,  4353,  4972,  1997,  1996,
         1056,  1006,  1015,  1007,  1010,  1056,  1006,  1016,  1007,  1010,
         1998,  1056,  1006,  1019,  1007,  4353,  2004,  2092,  2004,  2216,
         1997,  1996,  3115,  3671,  1012,   102])"
2501,1,"['critical value', 'critical values', 'distribution']", Normal data,seg_309,"we will also need critical values for the t(m) distribution: the critical value tm,p is the number satisfying",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2057,  2097,  2036,  2342,  4187,  5300,  2005,  1996,  1056,
         1006,  1049,  1007,  4353,  1024,  1996,  4187,  3643,  1056,  2213,
         1010,  1052,  2003,  1996,  2193, 17087,   102])"
2502,1,"['normal distribution', 'critical values', 'standard normal distribution', 'symmetric', 'standard normal', 'random variable', 'random', 'normal', 'standard', 'distribution', 'variable']", Normal data,seg_309,"where t is a t(m) distributed random variable. because the t-distribution is symmetric around zero, using the same reasoning as for the critical values of the standard normal distribution, we find:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2073,  1056,  2003,  1037,  1056,  1006,  1049,  1007,  5500,
         6721,  8023,  1012,  2138,  1996,  1056,  1011,  4353,  2003, 19490,
         2105,  5717,  1010,  2478,  1996,  2168, 13384,  2004,  2005,  1996,
         4187,  5300,  1997,  1996,  3115,  3671,  4353,  1010,  2057,  2424,
         1024,   102])"
2503,1,['table'], Normal data,seg_309,"for example, in table b.2 we read t10,0.01 = 2.764, and from this we deduce that t10,0.99 = −2.764.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2005,  2742,  1010,  1999,  2795,  1038,  1012,  1016,  2057,
         3191,  1056, 10790,  1010,  1014,  1012,  5890,  1027,  1016,  1012,
         6146,  2549,  1010,  1998,  2013,  2023,  2057,  2139,  8566,  3401,
         2008,  1056, 10790,  1010,  1014,  1012,  5585,  1027,  1597,  2475,
         1012,  6146,  2549,  1012,   102])"
2504,1,['table'], Normal data,seg_309,"quick exercise 23.5 determine t3,0.01 and t35,0.9975 from table b.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  4248,  6912,  2603,  1012,  1019,  5646,  1056,  2509,  1010,
         1014,  1012,  5890,  1998,  1056, 19481,  1010,  1014,  1012,  5585,
        23352,  2013,  2795,  1038,  1012,  1016,  1012,   102])"
2505,1,['distribution'], Normal data,seg_309,we now return to the distribution of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([3671, 2951])","tensor([ 101, 2057, 2085, 2709, 2000, 1996, 4353, 1997,  102])"
2506,1,"['interval', 'confidence', 'confidence interval']", Normal data,seg_309,and construct a confidence interval for µ.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  1998,  9570,  1037,  7023, 13483,  2005,  1085,  1012,   102])"
2507,1,"['mean', 'studentized mean', 'random sample', 'sample', 'random', 'normal', 'distribution']", Normal data,seg_309,"the studentized mean of a normal random sample. for a random sample x1, . . . , xn from an n(µ, σ2) distribution, the stu-",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  1996,  3076,  3550,  2812,  1997,  1037,  3671,  6721,  7099,
         1012,  2005,  1037,  6721,  7099,  1060,  2487,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2013,  2019,  1050,  1006,  1085,  1010,
         1173,  2475,  1007,  4353,  1010,  1996, 24646,  1011,   102])"
2508,1,['mean'], Normal data,seg_309,dentized mean x̄n − µ,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101, 21418,  3550,  2812,  1060,  2078,  1597,  1085,   102])"
2509,1,['distribution'], Normal data,seg_309,"has a t(n − 1) distribution, regardless of the values of µ and σ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([3671, 2951])","tensor([ 101, 2038, 1037, 1056, 1006, 1050, 1597, 1015, 1007, 4353, 1010, 7539,
        1997, 1996, 5300, 1997, 1085, 1998, 1173, 1012,  102])"
2510,1,['critical values'], Normal data,seg_309,"from this fact and using critical values of the t-distribution, we derive that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2013,  2023,  2755,  1998,  2478,  4187,  5300,  1997,  1996,
         1056,  1011,  4353,  1010,  2057, 18547,  2008,   102])"
2511,1,"['interval', 'confidence', 'confidence interval']", Normal data,seg_309,and in the same way as when σ is known it now follows that a 100(1 − α)% confidence interval for µ is given by:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  1998,  1999,  1996,  2168,  2126,  2004,  2043,  1173,  2003,
         2124,  2009,  2085,  4076,  2008,  1037,  2531,  1006,  1015,  1597,
         1155,  1007,  1003,  7023, 13483,  2005,  1085,  2003,  2445,  2011,
         1024,   102])"
2512,1,"['method', 'estimate', 'data', 'table']", Normal data,seg_309,"returning to the coal example, there was another shipment, of daw mill 258gb41 coal, where there were actually some doubts whether the stated accuracy of the iso 1928 method was attained. we therefore prefer to consider σ unknown and estimate it from the data, which are given in table 23.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  4192,  2000,  1996,  5317,  2742,  1010,  2045,  2001,  2178,
        22613,  1010,  1997,  4830,  2860,  4971, 24398, 18259, 23632,  5317,
         1010,  2073,  2045,  2020,  2941,  2070, 13579,  3251,  1996,  3090,
        10640,  1997,  1996, 11163,  4662,  4118,  2001, 12754,  1012,  2057,
         3568,  9544,  2000,  5136,  1173,  4242,  1998, 10197,  2009,  2013,
         1996,  2951,  1010,  2029,  2024,  2445,  1999,  2795,  2603,  1012,
         1016,  1012,   102])"
2513,1,"['interval', 'confidence', 'confidence interval']", Normal data,seg_309,"doing this, we find x̄n = 31.012 and sn = 0.1294. because n = 22, for a 95% confidence interval we use t21,0.025 = 2.080 and obtain",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 2951])","tensor([  101,  2725,  2023,  1010,  2057,  2424,  1060,  2078,  1027,  2861,
         1012,  5890,  2475,  1998,  1055,  2078,  1027,  1014,  1012, 14378,
         2549,  1012,  2138,  1050,  1027,  2570,  1010,  2005,  1037,  5345,
         1003,  7023, 13483,  2057,  2224,  1056, 17465,  1010,  1014,  1012,
         6185,  2629,  1027,  1016,  1012,  5511,  2692,  1998,  6855,   102])"
2514,1,"['confidence interval', 'interval', 'estimate', 'confidence', 'sample', 'method', 'sample size', 'samples', 'critical value']", Normal data,seg_309,"note that this confidence interval is (50%!) wider than the one we made for the osterfeld coal, with almost the same sample size. there are two reasons for this; one is that σ = 0.1 is replaced by the (larger) estimate sn = 0.1294, and the second is that the critical value z0.025 = 1.96 is replaced by the larger t21,0.025 = 2.080. the differences in the method and the ingredients seem minor, but they matter, especially for small samples.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([3671, 2951])","tensor([  101,  3602,  2008,  2023,  7023, 13483,  2003,  1006,  2753,  1003,
          999,  1007,  7289,  2084,  1996,  2028,  2057,  2081,  2005,  1996,
         9808,  3334,  8151,  5317,  1010,  2007,  2471,  1996,  2168,  7099,
         2946,  1012,  2045,  2024,  2048,  4436,  2005,  2023,  1025,  2028,
         2003,  2008,  1173,  1027,  1014,  1012,  1015,  2003,  2999,  2011,
         1996,  1006,  3469,  1007, 10197,  1055,  2078,  1027,  1014,  1012,
        14378,  2549,  1010,  1998,  1996,  2117,  2003,  2008,  1996,  4187,
         3643,  1062,  2692,  1012,  6185,  2629,  1027,  1015,  1012,  5986,
         2003,  2999,  2011,  1996,  3469,  1056, 17465,  1010,  1014,  1012,
         6185,  2629,  1027,  1016,  1012,  5511,  2692,  1012,  1996,  5966,
         1999,  1996,  4118,  1998,  1996, 12760,  4025,  3576,  1010,  2021,
         2027,  3043,  1010,  2926,  2005,  2235,  8168,  1012,   102])"
2515,1,"['cases', 'confidence level', 'confidence interval', 'method', 'confidence', 'normality', 'normal distribution', 'interval', 'normal', 'model', 'data', 'level', 'central limit theorem', 'confidence intervals', 'levels', 'limit', 'intervals', 'deviations', 'distribution', 'percent']", Bootstrap confidence intervals,seg_311,"it is not uncommon that the methods of the previous section are used even when the normal distribution is not a good model for the data. in some cases this is not a big problem: with small deviations from normality the actual confidence level of a constructed confidence interval may deviate only a few percent from the intended confidence level. for large datasets the central limit theorem in fact ensures that this method provides confidence intervals with approximately correct confidence levels, as we shall see in the next section.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2009,  2003,  2025, 13191,  2008,  1996,  4725,  1997,  1996,
         3025,  2930,  2024,  2109,  2130,  2043,  1996,  3671,  4353,  2003,
         2025,  1037,  2204,  2944,  2005,  1996,  2951,  1012,  1999,  2070,
         3572,  2023,  2003,  2025,  1037,  2502,  3291,  1024,  2007,  2235,
        24353,  2015,  2013,  3671,  3012,  1996,  5025,  7023,  2504,  1997,
         1037,  3833,  7023, 13483,  2089, 14386,  3686,  2069,  1037,  2261,
         3867,  2013,  1996,  3832,  7023,  2504,  1012,  2005,  2312,  2951,
        13462,  2015,  1996,  2430,  5787,  9872,  1999,  2755, 21312,  2008,
         2023,  4118,  3640,  7023, 14025,  2007,  3155,  6149,  7023,  3798,
         1010,  2004,  2057,  4618,  2156,  1999,  1996,  2279,  2930,  1012,
          102])"
2516,1,"['dataset', 'confidence interval', 'interval', 'realization', 'random sample', 'sample', 'random', 'bootstrap', 'expectation', 'distribution', 'confidence', 'data', 'normality']", Bootstrap confidence intervals,seg_311,"if we doubt the normality of the data and we do not have a large sample, usually the best thing to do is to bootstrap. suppose we have a dataset x1, . . . , xn, modeled as a realization of a random sample from some distribution f , and we want to construct a confidence interval for its (unknown) expectation µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2065,  2057,  4797,  1996,  3671,  3012,  1997,  1996,  2951,
         1998,  2057,  2079,  2025,  2031,  1037,  2312,  7099,  1010,  2788,
         1996,  2190,  2518,  2000,  2079,  2003,  2000,  6879,  6494,  2361,
         1012,  6814,  2057,  2031,  1037,  2951, 13462,  1060,  2487,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  1010, 14440,  2004,  1037,
        12393,  1997,  1037,  6721,  7099,  2013,  2070,  4353,  1042,  1010,
         1998,  2057,  2215,  2000,  9570,  1037,  7023, 13483,  2005,  2049,
         1006,  4242,  1007, 17626,  1085,  1012,   102])"
2517,0,[], Bootstrap confidence intervals,seg_311,in the previous section we saw that it suffices to find numbers cl and cu such,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  1999,  1996,  3025,  2930,  2057,  2387,  2008,  2009, 10514,
        26989,  9623,  2000,  2424,  3616, 18856,  1998, 12731,  2107,   102])"
2518,1,"['interval', 'confidence', 'confidence interval']", Bootstrap confidence intervals,seg_311,the 100(1− α)% confidence interval would then be,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  1996,  2531,  1006,  1015, 22543,  1155,  1007,  1003,  7023,
        13483,  2052,  2059,  2022,   102])"
2519,1,"['mean', 'deviation', 'sample', 'standard deviation', 'sample standard deviation', 'standard', 'distribution', 'sample mean']", Bootstrap confidence intervals,seg_311,"where, of course, x̄n and sn are the sample mean and the sample standard deviation. to find cl and cu we need to know the distribution of the studentized",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2073,  1010,  1997,  2607,  1010,  1060,  2078,  1998,  1055,
         2078,  2024,  1996,  7099,  2812,  1998,  1996,  7099,  3115, 24353,
         1012,  2000,  2424, 18856,  1998, 12731,  2057,  2342,  2000,  2113,
         1996,  4353,  1997,  1996,  3076,  3550,   102])"
2520,1,"['bootstrap', 'estimate', 'data']", Bootstrap confidence intervals,seg_311,"we apply the bootstrap principle. from the data x1, . . . , xn we determine an estimate f̂ of f . let x1∗, . . . , xn",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2057,  6611,  1996,  6879,  6494,  2361,  6958,  1012,  2013,
         1996,  2951,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2057,  5646,  2019, 10197,  1042,  1997,  1042,  1012,  2292,
         1060,  2487, 30125,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
          102])"
2521,1,"['sample', 'random', 'random sample']", Bootstrap confidence intervals,seg_311,"∗ be a random sample from f̂ , with µ∗ = e[xi∗], and consider",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  1598,  2022,  1037,  6721,  7099,  2013,  1042,  1010,  2007,
         1085, 30125,  1027,  1041,  1031,  8418, 30125,  1033,  1010,  1998,
         5136,   102])"
2522,1,"['approximation', 'distribution']", Bootstrap confidence intervals,seg_311,"the distribution of t ∗ is now used as an approximation to the distribution of t . if we use f̂ = fn, we get the following.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  1996,  4353,  1997,  1056,  1598,  2003,  2085,  2109,  2004,
         2019, 20167,  2000,  1996,  4353,  1997,  1056,  1012,  2065,  2057,
         2224,  1042,  1027,  1042,  2078,  1010,  2057,  2131,  1996,  2206,
         1012,   102])"
2523,1,"['mean', 'dataset', 'function', 'simulation', 'estimate', 'studentized mean', 'bootstrap', 'expectation', 'distribution', 'distribution function', 'empirical distribution function']", Bootstrap confidence intervals,seg_311,"empirical bootstrap simulation for the studentized mean. given a dataset x1, x2, . . . , xn, determine its empirical distribution function fn as an estimate of f . the expectation corresponding to fn is µ∗ = x̄n. 1. generate a bootstrap dataset x∗1, x∗2, . . . , x∗n from fn. 2. compute the studentized mean for the bootstrap dataset:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101, 17537,  6879,  6494,  2361, 12504,  2005,  1996,  3076,  3550,
         2812,  1012,  2445,  1037,  2951, 13462,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  5646,
         2049, 17537,  4353,  3853,  1042,  2078,  2004,  2019, 10197,  1997,
         1042,  1012,  1996, 17626,  7978,  2000,  1042,  2078,  2003,  1085,
        30125,  1027,  1060,  2078,  1012,  1015,  1012,  9699,  1037,  6879,
         6494,  2361,  2951, 13462,  1060, 30125,  2487,  1010,  1060, 30125,
         2475,  1010,  1012,  1012,  1012,  1010,  1060, 30125,  2078,  2013,
         1042,  2078,  1012,  1016,  1012, 24134,  1996,  3076,  3550,  2812,
         2005,  1996,  6879,  6494,  2361,  2951, 13462,  1024,   102])"
2524,1,"['mean', 'sample', 'standard', 'sample mean']", Bootstrap confidence intervals,seg_311,"where x̄∗n and s∗n are the sample mean and sample standard deviation of x∗1, x∗2, . . . , x∗n. repeat steps 1 and 2 many times.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2073,  1060, 30125,  2078,  1998,  1055, 30125,  2078,  2024,
         1996,  7099,  2812,  1998,  7099,  3115, 24353,  1997,  1060, 30125,
         2487,  1010,  1060, 30125,  2475,  1010,  1012,  1012,  1012,  1010,
         1060, 30125,  2078,  1012,  9377,  4084,  1015,  1998,  1016,  2116,
         2335,  1012,   102])"
2525,1,"['bootstrap', 'experiment']", Bootstrap confidence intervals,seg_311,from the bootstrap experiment we can determine c∗l and c∗u such that,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2013,  1996,  6879,  6494,  2361,  7551,  2057,  2064,  5646,
         1039, 30125,  2140,  1998,  1039, 30125,  2226,  2107,  2008,   102])"
2526,1,"['critical values', 'estimated', 'bootstrap', 'distribution']", Bootstrap confidence intervals,seg_311,"by the bootstrap principle we may transfer this statement about the distribution of t ∗ to the distribution of t . that is, we may use these estimated critical values as bootstrap approximations to cl and cu:",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2011,  1996,  6879,  6494,  2361,  6958,  2057,  2089,  4651,
         2023,  4861,  2055,  1996,  4353,  1997,  1056,  1598,  2000,  1996,
         4353,  1997,  1056,  1012,  2008,  2003,  1010,  2057,  2089,  2224,
         2122,  4358,  4187,  5300,  2004,  6879,  6494,  2361, 20167,  2015,
         2000, 18856,  1998, 12731,  1024,   102])"
2527,0,[], Bootstrap confidence intervals,seg_311,"therefore, we call",tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([ 101, 3568, 1010, 2057, 2655,  102])"
2528,1,"['interval', 'confidence', 'confidence interval', 'bootstrap']", Bootstrap confidence intervals,seg_311,a 100(1 − α)% bootstrap confidence interval for µ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  1037,  2531,  1006,  1015,  1597,  1155,  1007,  1003,  6879,
         6494,  2361,  7023, 13483,  2005,  1085,  1012,   102])"
2529,1,['data'], Bootstrap confidence intervals,seg_311,example: the software data,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([ 101, 2742, 1024, 1996, 4007, 2951,  102])"
2530,1,"['bootstrap', 'dataset', 'normal distribution', 'histogram', 'normal', 'data', 'statistic', 'empirical distribution function', 'function', 'random sample', 'estimates', 'sample', 'random', 'sample statistic', 'distribution', 'distribution function']", Bootstrap confidence intervals,seg_311,"recall the software data, a dataset of interfailure times (see section 17.3). from the nature of the data—failure times are positive numbers—and the histogram (figure 17.5), we know that they should not be modeled as a realization of a random sample from a normal distribution. from the data we know x̄n = 656.88, sn = 1037.3, and n = 135. we generate one thousand bootstrap datasets, and for each dataset we compute t∗ as in step 2 of the procedure. the histogram and empirical distribution function made from these one thousand values are estimates of the density and the distribution function, respectively, of the bootstrap sample statistic t ∗; see figure 23.4.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  9131,  1996,  4007,  2951,  1010,  1037,  2951, 13462,  1997,
         6970,  7011,  4014,  5397,  2335,  1006,  2156,  2930,  2459,  1012,
         1017,  1007,  1012,  2013,  1996,  3267,  1997,  1996,  2951,  1517,
         4945,  2335,  2024,  3893,  3616,  1517,  1998,  1996,  2010,  3406,
        13113,  1006,  3275,  2459,  1012,  1019,  1007,  1010,  2057,  2113,
         2008,  2027,  2323,  2025,  2022, 14440,  2004,  1037, 12393,  1997,
         1037,  6721,  7099,  2013,  1037,  3671,  4353,  1012,  2013,  1996,
         2951,  2057,  2113,  1060,  2078,  1027,  3515,  2575,  1012,  6070,
         1010,  1055,  2078,  1027,  9800,  2581,  1012,  1017,  1010,  1998,
         1050,  1027, 11502,  1012,  2057,  9699,  2028,  4595,  6879,  6494,
         2361,  2951, 13462,  2015,  1010,  1998,  2005,  2169,  2951, 13462,
         2057, 24134,  1056, 30125,  2004,  1999,  3357,  1016,  1997,  1996,
         7709,  1012,  1996,  2010,  3406, 13113,  1998, 17537,  4353,  3853,
         2081,  2013,  2122,  2028,  4595,  5300,  2024, 10035,  1997,  1996,
         4304,  1998,  1996,  4353,  3853,  1010,  4414,  1010,  1997,  1996,
         6879,  6494,  2361,  7099, 28093,  6553,  1056,  1598,  1025,  2156,
         3275,  2603,  1012,  1018,  1012,   102])"
2531,1,"['quantile', 'function', 'confidence interval', 'interval', 'order statistic', 'bootstrap', 'distribution', 'distribution function', 'confidence', 'statistic', 'empirical distribution function']", Bootstrap confidence intervals,seg_311,"we want to make a 90% bootstrap confidence interval, so we need c∗l and c∗u, or the 0.05th and 0.95th quantile from the empirical distribution function in figure 23.4. the 50th order statistic of the one thousand t∗ values is −2.107. this means that 50 out of the one thousand values, or 5%, are smaller than or equal to this value, and so c∗l = −2.107. similarly, from the 951st order statistic, 1.389, we obtain3 cu∗ = 1.389. inserting these values, we find the following 90% bootstrap confidence interval for µ:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  2057,  2215,  2000,  2191,  1037,  3938,  1003,  6879,  6494,
         2361,  7023, 13483,  1010,  2061,  2057,  2342,  1039, 30125,  2140,
         1998,  1039, 30125,  2226,  1010,  2030,  1996,  1014,  1012,  5709,
         2705,  1998,  1014,  1012,  5345,  2705, 24110, 15286,  2013,  1996,
        17537,  4353,  3853,  1999,  3275,  2603,  1012,  1018,  1012,  1996,
        12951,  2344, 28093,  6553,  1997,  1996,  2028,  4595,  1056, 30125,
         5300,  2003,  1597,  2475,  1012, 10550,  1012,  2023,  2965,  2008,
         2753,  2041,  1997,  1996,  2028,  4595,  5300,  1010,  2030,  1019,
         1003,  1010,  2024,  3760,  2084,  2030,  5020,  2000,  2023,  3643,
         1010,  1998,  2061,  1039, 30125,  2140,  1027,  1597,  2475,  1012,
        10550,  1012,  6660,  1010,  2013,  1996,  5345,  2487,  3367,  2344,
        28093,  6553,  1010,  1015,  1012,  4229,  2683,  1010,  2057,  6855,
         2509, 12731, 30125,  1027,  1015,  1012,  4229,  2683,  1012, 19274,
         2075,  2122,  5300,  1010,  2057,  2424,  1996,  2206,  3938,  1003,
         6879,  6494,  2361,  7023, 13483,  2005,  1085,  1024,   102])"
2532,1,"['confidence level', 'confidence interval', 'interval', 'order statistic', 'level', 'results', 'bootstrap', 'confidence', 'statistic']", Bootstrap confidence intervals,seg_311,"quick exercise 23.6 the 25th and 976th order statistic from the preceding bootstrap results are −2.443 and 1.713, respectively. use these numbers to construct a confidence interval for µ. what is the corresponding confidence level?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  4248,  6912,  2603,  1012,  1020,  1996, 10965,  1998,  5989,
        25994,  2344, 28093,  6553,  2013,  1996, 11003,  6879,  6494,  2361,
         3463,  2024,  1597,  2475,  1012,  4008,  2509,  1998,  1015,  1012,
         6390,  2509,  1010,  4414,  1012,  2224,  2122,  3616,  2000,  9570,
         1037,  7023, 13483,  2005,  1085,  1012,  2054,  2003,  1996,  7978,
         7023,  2504,  1029,   102])"
2533,1,['bootstrap'], Bootstrap confidence intervals,seg_311,why the bootstrap may be better,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([ 101, 2339, 1996, 6879, 6494, 2361, 2089, 2022, 2488,  102])"
2534,1,"['mean', 'critical values', 'approximation', 'studentized mean', 'bootstrap', 'normal', 'distribution', 'data', 'normality']", Bootstrap confidence intervals,seg_311,"the reason to use the bootstrap is that it should lead to a more accurate approximation of the distribution of the studentized mean than the t(n − 1) distribution that follows from assuming normality. if, in the previous example, we would think we had normal data, we would use critical values from the t(134) distribution: t134,0.05 = 1.656. the result would be",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101,  1996,  3114,  2000,  2224,  1996,  6879,  6494,  2361,  2003,
         2008,  2009,  2323,  2599,  2000,  1037,  2062,  8321, 20167,  1997,
         1996,  4353,  1997,  1996,  3076,  3550,  2812,  2084,  1996,  1056,
         1006,  1050,  1597,  1015,  1007,  4353,  2008,  4076,  2013, 10262,
         3671,  3012,  1012,  2065,  1010,  1999,  1996,  3025,  2742,  1010,
         2057,  2052,  2228,  2057,  2018,  3671,  2951,  1010,  2057,  2052,
         2224,  4187,  5300,  2013,  1996,  1056,  1006, 15170,  1007,  4353,
         1024,  1056, 17134,  2549,  1010,  1014,  1012,  5709,  1027,  1015,
         1012,  3515,  2575,  1012,  1996,  2765,  2052,  2022,   102])"
2535,1,"['confidence interval', 'long tail', 'method', 'bootstrap', 'confidence', 'mean', 'interval', 'skewness', 'histogram', 'normal', 'confidence statements', 'data', 'skewed', 'percentage', 'tail', 'sample', 'intervals', 'distribution', 'sample mean']", Bootstrap confidence intervals,seg_311,"comparing the intervals, we see that here the bootstrap interval is a little larger and, as opposed to the t-interval, not centered around the sample mean but skewed to the right side. this is one of the features of the bootstrap: if the distribution from which the data originate is skewed, this is reflected in the confidence interval. looking at the histogram of the software data (figure 17.5), we see that is it skewed to the right: it has a long tail on the right, but not on the left, so the same most likely holds for the distribution from which these data originate. the skewness is reflected in the confidence interval, which extends more to the right of x̄n than to the left. in some sense, the bootstrap adapts to the shape of the distribution, and in this way it leads to more accurate confidence statements than using the method for normal data. what we mean by this is that, for example, with the normal method only 90% of the 95% confidence statements would actually cover the true value, whereas for the bootstrap intervals this percentage would be close(r) to 95%.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6879,  6494,  2361,  7023, 14025])","tensor([  101, 13599,  1996, 14025,  1010,  2057,  2156,  2008,  2182,  1996,
         6879,  6494,  2361, 13483,  2003,  1037,  2210,  3469,  1998,  1010,
         2004,  4941,  2000,  1996,  1056,  1011, 13483,  1010,  2025,  8857,
         2105,  1996,  7099,  2812,  2021, 15315,  7974,  2098,  2000,  1996,
         2157,  2217,  1012,  2023,  2003,  2028,  1997,  1996,  2838,  1997,
         1996,  6879,  6494,  2361,  1024,  2065,  1996,  4353,  2013,  2029,
         1996,  2951, 21754,  2003, 15315,  7974,  2098,  1010,  2023,  2003,
         7686,  1999,  1996,  7023, 13483,  1012,  2559,  2012,  1996,  2010,
         3406, 13113,  1997,  1996,  4007,  2951,  1006,  3275,  2459,  1012,
         1019,  1007,  1010,  2057,  2156,  2008,  2003,  2009, 15315,  7974,
         2098,  2000,  1996,  2157,  1024,  2009,  2038,  1037,  2146,  5725,
         2006,  1996,  2157,  1010,  2021,  2025,  2006,  1996,  2187,  1010,
         2061,  1996,  2168,  2087,  3497,  4324,  2005,  1996,  4353,  2013,
         2029,  2122,  2951, 21754,  1012,  1996, 15315,  7974,  2791,  2003,
         7686,  1999,  1996,  7023, 13483,  1010,  2029,  8908,  2062,  2000,
         1996,  2157,  1997,  1060,  2078,  2084,  2000,  1996,  2187,  1012,
         1999,  2070,  3168,  1010,  1996,  6879,  6494,  2361, 15581,  2015,
         2000,  1996,  4338,  1997,  1996,  4353,  1010,  1998,  1999,  2023,
         2126,  2009,  5260,  2000,  2062,  8321,  7023,  8635,  2084,  2478,
         1996,  4118,  2005,  3671,  2951,  1012,  2054,  2057,  2812,  2011,
         2023,  2003,  2008,  1010,  2005,  2742,  1010,  2007,  1996,  3671,
         4118,  2069,  3938,  1003,  1997,  1996,  5345,  1003,  7023,  8635,
         2052,  2941,  3104,  1996,  2995,  3643,  1010,  6168,  2005,  1996,
         6879,  6494,  2361, 14025,  2023,  7017,  2052,  2022,  2485,  1006,
         1054,  1007,  2000,  5345,  1003,  1012,   102])"
2536,1,"['mean', 'states', 'studentized mean', 'limit', 'distribution', 'central limit theorem']", Large samples,seg_313,"a variant of the central limit theorem states that as n goes to infinity, the distribution of the studentized mean",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0.])","tensor([2312, 8168])","tensor([  101,  1037,  8349,  1997,  1996,  2430,  5787,  9872,  2163,  2008,
         2004,  1050,  3632,  2000, 15579,  1010,  1996,  4353,  1997,  1996,
         3076,  3550,  2812,   102])"
2537,1,"['normal distribution', 'standard normal distribution', 'standard normal', 'sample', 'random', 'normal', 'intervals', 'standard', 'distribution', 'confidence intervals', 'confidence']", Large samples,seg_313,"approaches the standard normal distribution. this fact is the basis for socalled large sample confidence intervals. suppose x1, . . . , xn is a random",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([2312, 8168])","tensor([  101,  8107,  1996,  3115,  3671,  4353,  1012,  2023,  2755,  2003,
         1996,  3978,  2005, 27084, 24164,  2094,  2312,  7099,  7023, 14025,
         1012,  6814,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,
         2078,  2003,  1037,  6721,   102])"
2538,1,"['expectation', 'distribution']", Large samples,seg_313,"sample from some distribution f with expectation µ. if n is large enough, we may use",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2312, 8168])","tensor([  101,  7099,  2013,  2070,  4353,  1042,  2007, 17626,  1085,  1012,
         2065,  1050,  2003,  2312,  2438,  1010,  2057,  2089,  2224,   102])"
2539,1,"['realization', 'random sample', 'sample', 'random', 'expectation', 'distribution']", Large samples,seg_313,"this implies that if x1, . . . , xn can be seen as a realization of a random sample from some unknown distribution with expectation µ and if n is large enough, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([2312, 8168])","tensor([  101,  2023, 12748,  2008,  2065,  1060,  2487,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2064,  2022,  2464,  2004,  1037, 12393,
         1997,  1037,  6721,  7099,  2013,  2070,  4242,  4353,  2007, 17626,
         1085,  1998,  2065,  1050,  2003,  2312,  2438,  1010,  2059,   102])"
2540,1,"['interval', 'confidence', 'confidence interval']", Large samples,seg_313,is an approximate 100(1− α)% confidence interval for µ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2312, 8168])","tensor([  101,  2003,  2019, 15796,  2531,  1006,  1015, 22543,  1155,  1007,
         1003,  7023, 13483,  2005,  1085,  1012,   102])"
2541,1,"['table', 'simulation', 'estimated', 'method', 'confidence', 'pareto', 'skewed', 'coverage probabilities', 'probabilities', 'results', 'central limit theorem', 'confidence intervals', 'pareto distribution', 'distributions', 'sample', 'levels', 'experiment', 'limit', 'distribution', 'exponential', 'intervals', 'percent']", Large samples,seg_313,"just as earlier with the central limit theorem, a key question is “how big should n be?” again, there is no easy answer. to give you some idea, we have listed in table 23.3 the results of a small simulation experiment. for each of the distributions, sample sizes, and confidence levels listed, we constructed 10 000 confidence intervals with the large sample method; the numbers listed in the table are the confidence levels as estimated from the simulation, the coverage probabilities. the chosen pareto distribution is very skewed, and this shows; the coverage probabilities for the exponential are just a few percent off.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 1.,
        0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([2312, 8168])","tensor([  101,  2074,  2004,  3041,  2007,  1996,  2430,  5787,  9872,  1010,
         1037,  3145,  3160,  2003,  1523,  2129,  2502,  2323,  1050,  2022,
         1029,  1524,  2153,  1010,  2045,  2003,  2053,  3733,  3437,  1012,
         2000,  2507,  2017,  2070,  2801,  1010,  2057,  2031,  3205,  1999,
         2795,  2603,  1012,  1017,  1996,  3463,  1997,  1037,  2235, 12504,
         7551,  1012,  2005,  2169,  1997,  1996, 20611,  1010,  7099, 10826,
         1010,  1998,  7023,  3798,  3205,  1010,  2057,  3833,  2184,  2199,
         7023, 14025,  2007,  1996,  2312,  7099,  4118,  1025,  1996,  3616,
         3205,  1999,  1996,  2795,  2024,  1996,  7023,  3798,  2004,  4358,
         2013,  1996, 12504,  1010,  1996,  6325,  4013,  3676, 14680,  1012,
         1996,  4217, 11968, 18903,  4353,  2003,  2200, 15315,  7974,  2098,
         1010,  1998,  2023,  3065,  1025,  1996,  6325,  4013,  3676, 14680,
         2005,  1996, 27258,  2024,  2074,  1037,  2261,  3867,  2125,  1012,
          102])"
2542,1,"['cases', 'dataset', 'case', 'simulation', 'independent']", Large samples,seg_313,"in the case of simulation one can often quite easily generate a very large number of independent repetitions, and then this question poses no problem. in other cases there may be nothing better to do than hope that the dataset is large enough. we give an example where (we believe!) this is definitely the case.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2312, 8168])","tensor([  101,  1999,  1996,  2553,  1997, 12504,  2028,  2064,  2411,  3243,
         4089,  9699,  1037,  2200,  2312,  2193,  1997,  2981, 23318,  2015,
         1010,  1998,  2059,  2023,  3160, 22382,  2053,  3291,  1012,  1999,
         2060,  3572,  2045,  2089,  2022,  2498,  2488,  2000,  2079,  2084,
         3246,  2008,  1996,  2951, 13462,  2003,  2312,  2438,  1012,  2057,
         2507,  2019,  2742,  2073,  1006,  2057,  2903,   999,  1007,  2023,
         2003,  5791,  1996,  2553,  1012,   102])"
2543,1,"['dataset', 'table', 'observations', 'intervals']", Large samples,seg_313,"in an article published in 1910 ([28]), rutherford and geiger reported their observations on the radioactive decay of the element polonium. using a small disk coated with polonium they counted the number of emitted alpha-particles during 2608 intervals of 7.5 seconds each. the dataset consists of the counted number of alpha-particles for each of the 2608 intervals and can be summarized as in table 23.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2312, 8168])","tensor([  101,  1999,  2019,  3720,  2405,  1999,  4976,  1006,  1031,  2654,
         1033,  1007,  1010, 18472,  1998, 16216, 17071,  2988,  2037,  9420,
         2006,  1996, 17669, 13121,  1997,  1996,  5783, 11037, 14907,  1012,
         2478,  1037,  2235,  9785, 15026,  2007, 11037, 14907,  2027,  8897,
         1996,  2193,  1997, 22627,  6541,  1011,  9309,  2076, 13539,  2620,
        14025,  1997,  1021,  1012,  1019,  3823,  2169,  1012,  1996,  2951,
        13462,  3774,  1997,  1996,  8897,  2193,  1997,  6541,  1011,  9309,
         2005,  2169,  1997,  1996, 13539,  2620, 14025,  1998,  2064,  2022,
        22539,  2004,  1999,  2795,  2603,  1012,  1018,  1012,   102])"
2544,1,"['confidence interval', 'deviation', 'table', 'interval', 'sample', 'results', 'sample standard deviation', 'standard deviation', 'standard', 'confidence', 'average', 'data']", Large samples,seg_313,"the total number of counted alpha-particles is 10 097, the average number per interval is therefore 3.8715. the sample standard deviation can also be computed from the table; it is 1.9225. so we know of the actual data x1, x2, . . . , x2608 (where the counts xi are between 0 and 14) that x̄n = 3.8715 and sn = 1.9225. we construct a 98% confidence interval for the expected number of particles per interval. as z0.01 = 2.33 this results in",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2312, 8168])","tensor([  101,  1996,  2561,  2193,  1997,  8897,  6541,  1011,  9309,  2003,
         2184,  5641,  2581,  1010,  1996,  2779,  2193,  2566, 13483,  2003,
         3568,  1017,  1012,  6584, 16068,  1012,  1996,  7099,  3115, 24353,
         2064,  2036,  2022, 24806,  2013,  1996,  2795,  1025,  2009,  2003,
         1015,  1012,  6227, 17788,  1012,  2061,  2057,  2113,  1997,  1996,
         5025,  2951,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060, 23833,  2692,  2620,  1006,  2073,  1996,  9294,
         8418,  2024,  2090,  1014,  1998,  2403,  1007,  2008,  1060,  2078,
         1027,  1017,  1012,  6584, 16068,  1998,  1055,  2078,  1027,  1015,
         1012,  6227, 17788,  1012,  2057,  9570,  1037,  5818,  1003,  7023,
        13483,  2005,  1996,  3517,  2193,  1997,  9309,  2566, 13483,  1012,
         2004,  1062,  2692,  1012,  5890,  1027,  1016,  1012,  3943,  2023,
         3463,  1999,   102])"
2545,1,['probability'], Solutions to the quick exercises,seg_315,"23.1 from the probability statement, we derive, using σt = 100 and 8/9 = 0.889:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2603,  1012,  1015,  2013,  1996,  9723,  4861,  1010,  2057,
        18547,  1010,  2478,  1173,  2102,  1027,  2531,  1998,  1022,  1013,
         1023,  1027,  1014,  1012,  6070,  2683,  1024,   102])"
2546,1,['probability'], Solutions to the quick exercises,seg_315,"θ ∈ (t − 300, t + 300) with probability at least 88%.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1162, 1596, 1006, 1056, 1597, 3998, 1010, 1056, 1009, 3998, 1007,
        2007, 9723, 2012, 2560, 6070, 1003, 1012,  102])"
2547,1,['confidence'], Solutions to the quick exercises,seg_315,"θ ∈ (299 552.4, 300 152.4) with confidence at least 88%.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1162,  1596,  1006, 25926,  4583,  2475,  1012,  1018,  1010,
         3998, 15017,  1012,  1018,  1007,  2007,  7023,  2012,  2560,  6070,
         1003,  1012,   102])"
2548,1,"['probability', 'distributions', 'distribution', 'inequality', 'case']", Solutions to the quick exercises,seg_315,"23.2 chebyshev’s inequality only gives an upper bound. the actual value of p(|t − θ| < 2σt ) could be higher than 3/4, depending on the distribution of t . for example, in quick exercise 13.2 we saw that in case of an exponential distribution this probability is 0.865. for other distributions, even higher values are attained; see exercise 13.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2603,  1012,  1016, 18178,  3762,  4095,  6777,  1521,  1055,
        16440,  2069,  3957,  2019,  3356,  5391,  1012,  1996,  5025,  3643,
         1997,  1052,  1006,  1064,  1056,  1597,  1162,  1064,  1026,  1016,
        29733,  2102,  1007,  2071,  2022,  3020,  2084,  1017,  1013,  1018,
         1010,  5834,  2006,  1996,  4353,  1997,  1056,  1012,  2005,  2742,
         1010,  1999,  4248,  6912,  2410,  1012,  1016,  2057,  2387,  2008,
         1999,  2553,  1997,  2019, 27258,  4353,  2023,  9723,  2003,  1014,
         1012,  6564,  2629,  1012,  2005,  2060, 20611,  1010,  2130,  3020,
         5300,  2024, 12754,  1025,  2156,  6912,  2410,  1012,  1015,  1012,
          102])"
2549,1,"['deviation', 'probability', 'outcome', 'standard deviation', 'intervals', 'expectation', 'standard', 'distribution', 'deviations', 'confidence intervals', 'confidence', 'standard deviations']", Solutions to the quick exercises,seg_315,"23.3 for each of the confidence intervals we have a 5% probability that it is wrong. therefore, the number of wrong confidence intervals has a bin(40, 0.05) distribution, and we would expect about 40 · 0.05 = 2 to be wrong. the standard deviation of this distribution is √40 · 0.05 · 0.95 = 1.38. the outcome “10 confidence intervals wrong” is (10− 2)/1.38 = 5.8 standard deviations from the expectation and would be a surprising outcome indeed. (the probability of 10 or more wrong is 0.00002.)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2603,  1012,  1017,  2005,  2169,  1997,  1996,  7023, 14025,
         2057,  2031,  1037,  1019,  1003,  9723,  2008,  2009,  2003,  3308,
         1012,  3568,  1010,  1996,  2193,  1997,  3308,  7023, 14025,  2038,
         1037,  8026,  1006,  2871,  1010,  1014,  1012,  5709,  1007,  4353,
         1010,  1998,  2057,  2052,  5987,  2055,  2871,  1087,  1014,  1012,
         5709,  1027,  1016,  2000,  2022,  3308,  1012,  1996,  3115, 24353,
         1997,  2023,  4353,  2003,  1600, 12740,  1087,  1014,  1012,  5709,
         1087,  1014,  1012,  5345,  1027,  1015,  1012,  4229,  1012,  1996,
         9560,  1523,  2184,  7023, 14025,  3308,  1524,  2003,  1006,  2184,
        22543,  1016,  1007,  1013,  1015,  1012,  4229,  1027,  1019,  1012,
         1022,  3115, 24353,  2015,  2013,  1996, 17626,  1998,  2052,  2022,
         1037, 11341,  9560,  5262,  1012,  1006,  1996,  9723,  1997,  2184,
         2030,  2062,  3308,  2003,  1014,  1012,  2199,  2692,  2475,  1012,
         1007,   102])"
2550,1,"['tail', 'table', 'distribution']", Solutions to the quick exercises,seg_315,"23.4 we need to solve p(z ≥ a) = 0.01. in table b.1 we find p(z ≥ 2.33) = 0.0099 ≈ 0.01, so z0.01 ≈ 2.33. for z0.95 we need to solve p(z ≥ a) = 0.95, and because this is in the left tail of the distribution, we use z0.95 = −z0.05. in the table we read p(z ≥ 1.64) = 0.0505 and p(z ≥ 1.65) = 0.0495, from which we conclude z0.05 ≈ (1.64 + 1.65)/2 = 1.645 and z0.95 ≈ −1.645.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2603,  1012,  1018,  2057,  2342,  2000,  9611,  1052,  1006,
         1062,  1609,  1037,  1007,  1027,  1014,  1012,  5890,  1012,  1999,
         2795,  1038,  1012,  1015,  2057,  2424,  1052,  1006,  1062,  1609,
         1016,  1012,  3943,  1007,  1027,  1014,  1012,  4002,  2683,  2683,
         1606,  1014,  1012,  5890,  1010,  2061,  1062,  2692,  1012,  5890,
         1606,  1016,  1012,  3943,  1012,  2005,  1062,  2692,  1012,  5345,
         2057,  2342,  2000,  9611,  1052,  1006,  1062,  1609,  1037,  1007,
         1027,  1014,  1012,  5345,  1010,  1998,  2138,  2023,  2003,  1999,
         1996,  2187,  5725,  1997,  1996,  4353,  1010,  2057,  2224,  1062,
         2692,  1012,  5345,  1027,  1597,  2480,  2692,  1012,  5709,  1012,
         1999,  1996,  2795,  2057,  3191,  1052,  1006,  1062,  1609,  1015,
         1012,  4185,  1007,  1027,  1014,  1012, 28714,  2629,  1998,  1052,
         1006,  1062,  1609,  1015,  1012,  3515,  1007,  1027,  1014,  1012,
         5840,  2683,  2629,  1010,  2013,  2029,  2057, 16519,  1062,  2692,
         1012,  5709,  1606,  1006,  1015,  1012,  4185,  1009,  1015,  1012,
         3515,  1007,  1013,  1016,  1027,  1015,  1012,  4185,  2629,  1998,
         1062,  2692,  1012,  5345,  1606,  1597,  2487,  1012,  4185,  2629,
         1012,   102])"
2551,1,['table'], Solutions to the quick exercises,seg_315,"23.5 in table b.1 we find p(t3 ≥ 4.541) = 0.01, so t3,0.01 = 4.541. for t35,0.9975, we need to use t35,0.9975 = −t35,0.0025. in the table we find t30,0.0025 = 3.030 and t40,0.0025 = 2.971, and by interpolation t35,0.0025 ≈ (3.030 + 2.971)/2 = 3.0005. hence, t35,0.9975 ≈ −3.000.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2603,  1012,  1019,  1999,  2795,  1038,  1012,  1015,  2057,
         2424,  1052,  1006,  1056,  2509,  1609,  1018,  1012,  5139,  2487,
         1007,  1027,  1014,  1012,  5890,  1010,  2061,  1056,  2509,  1010,
         1014,  1012,  5890,  1027,  1018,  1012,  5139,  2487,  1012,  2005,
         1056, 19481,  1010,  1014,  1012,  5585, 23352,  1010,  2057,  2342,
         2000,  2224,  1056, 19481,  1010,  1014,  1012,  5585, 23352,  1027,
         1597,  2102, 19481,  1010,  1014,  1012,  4002, 17788,  1012,  1999,
         1996,  2795,  2057,  2424,  1056, 14142,  1010,  1014,  1012,  4002,
        17788,  1027,  1017,  1012,  6021,  2692,  1998,  1056, 12740,  1010,
         1014,  1012,  4002, 17788,  1027,  1016,  1012,  5989,  2487,  1010,
         1998,  2011,  6970, 18155,  3370,  1056, 19481,  1010,  1014,  1012,
         4002, 17788,  1606,  1006,  1017,  1012,  6021,  2692,  1009,  1016,
         1012,  5989,  2487,  1007,  1013,  1016,  1027,  1017,  1012,  2199,
         2629,  1012,  6516,  1010,  1056, 19481,  1010,  1014,  1012,  5585,
        23352,  1606,  1597,  2509,  1012,  2199,  1012,   102])"
2552,1,"['confidence interval', 'order statistics', 'interval', 'estimates', 'bootstrap', 'statistics', 'confidence']", Solutions to the quick exercises,seg_315,"23.6 the order statistics are estimates for c∗0.025 and c∗0.975, respectively. so the corresponding α is 0.05, and the 95% bootstrap confidence interval for µ is:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2603,  1012,  1020,  1996,  2344,  6747,  2024, 10035,  2005,
         1039, 30125,  2692,  1012,  6185,  2629,  1998,  1039, 30125,  2692,
         1012,  5989,  2629,  1010,  4414,  1012,  2061,  1996,  7978,  1155,
         2003,  1014,  1012,  5709,  1010,  1998,  1996,  5345,  1003,  6879,
         6494,  2361,  7023, 13483,  2005,  1085,  2003,  1024,   102])"
2553,1,"['confidence interval', 'interval', 'sample', 'distribution', 'confidence']", Exercises,seg_317,"23.1 a bottling machine is known to fill wine bottles with amounts that follow an n(µ, σ2) distribution, with σ = 5 (ml). in a sample of 16 bottles, x̄ = 743 (ml) was found. construct a 95% confidence interval for µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1015,  1037, 28516, 15073,  3698,  2003,  2124,
         2000,  6039,  4511, 11015,  2007,  8310,  2008,  3582,  2019,  1050,
         1006,  1085,  1010,  1173,  2475,  1007,  4353,  1010,  2007,  1173,
         1027,  1019,  1006, 19875,  1007,  1012,  1999,  1037,  7099,  1997,
         2385, 11015,  1010,  1060,  1027,  6356,  2509,  1006, 19875,  1007,
         2001,  2179,  1012,  9570,  1037,  5345,  1003,  7023, 13483,  2005,
         1085,  1012,   102])"
2554,1,"['confidence interval', 'confidence', 'dataset', 'interval', 'standard deviation', 'normal', 'deviation', 'realization', 'random sample', 'standard', 'expectation', 'sample', 'random', 'sample standard deviation', 'average']", Exercises,seg_317,"23.2 you are given a dataset that may be considered a realization of a normal random sample. the size of the dataset is 34, the average is 3.54, and the sample standard deviation is 0.13. construct a 98% confidence interval for the unknown expectation µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1016,  2017,  2024,  2445,  1037,  2951, 13462,
         2008,  2089,  2022,  2641,  1037, 12393,  1997,  1037,  3671,  6721,
         7099,  1012,  1996,  2946,  1997,  1996,  2951, 13462,  2003,  4090,
         1010,  1996,  2779,  2003,  1017,  1012,  5139,  1010,  1998,  1996,
         7099,  3115, 24353,  2003,  1014,  1012,  2410,  1012,  9570,  1037,
         5818,  1003,  7023, 13483,  2005,  1996,  4242, 17626,  1085,  1012,
          102])"
2555,1,"['confidence interval', 'confidence', 'normal distribution', 'interval', 'normal', 'standard deviation', 'deviation', 'realization', 'random sample', 'standard', 'parameters', 'sample', 'random', 'sample standard deviation', 'distribution', 'average']", Exercises,seg_317,"23.3 you have ordered 10 bags of cement, which are supposed to weigh 94 kg each. the average weight of the 10 bags is 93.5 kg. assuming that the 10 weights can be viewed as a realization of a random sample from a normal distribution with unknown parameters, construct a 95% confidence interval for the expected weight of a bag. the sample standard deviation of the 10 weights is 0.75.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1017,  2017,  2031,  3641,  2184,  8641,  1997,
        11297,  1010,  2029,  2024,  4011,  2000, 17042,  6365,  4705,  2169,
         1012,  1996,  2779,  3635,  1997,  1996,  2184,  8641,  2003,  6109,
         1012,  1019,  4705,  1012, 10262,  2008,  1996,  2184, 15871,  2064,
         2022,  7021,  2004,  1037, 12393,  1997,  1037,  6721,  7099,  2013,
         1037,  3671,  4353,  2007,  4242, 11709,  1010,  9570,  1037,  5345,
         1003,  7023, 13483,  2005,  1996,  3517,  3635,  1997,  1037,  4524,
         1012,  1996,  7099,  3115, 24353,  1997,  1996,  2184, 15871,  2003,
         1014,  1012,  4293,  1012,   102])"
2556,1,"['confidence interval', 'association', 'interval', 'percentage', 'random sample', 'factors', 'sample', 'random', 'standard', 'distribution', 'confidence', 'average', 'test']", Exercises,seg_317,"23.4 a new type of car tire is launched by a tire manufacturer. the automobile association performs a durability test on a random sample of 18 of these tires. for each tire the durability is expressed as a percentage: a score of 100 (%) means that the tire lasted exactly as long as the average standard tire, an accepted comparison standard. from the multitude of factors that influence the durability of individual tires the assumption is warranted that the durability of an arbitrary tire follows an n(µ, σ2) distribution. the parameters µ and σ2 characterize the tire type, and µ could be called the durability index for this type of tire. the automobile association found for the tested tires: x̄18 = 195.3 and s18 = 16.7. construct a 95% confidence interval for µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1018,  1037,  2047,  2828,  1997,  2482, 12824,
         2003,  3390,  2011,  1037, 12824,  7751,  1012,  1996,  9935,  2523,
        10438,  1037,  4241,  2527,  8553,  3231,  2006,  1037,  6721,  7099,
         1997,  2324,  1997,  2122, 13310,  1012,  2005,  2169, 12824,  1996,
         4241,  2527,  8553,  2003,  5228,  2004,  1037,  7017,  1024,  1037,
         3556,  1997,  2531,  1006,  1003,  1007,  2965,  2008,  1996, 12824,
         6354,  3599,  2004,  2146,  2004,  1996,  2779,  3115, 12824,  1010,
         2019,  3970,  7831,  3115,  1012,  2013,  1996, 20889,  1997,  5876,
         2008,  3747,  1996,  4241,  2527,  8553,  1997,  3265, 13310,  1996,
        11213,  2003, 10943,  2098,  2008,  1996,  4241,  2527,  8553,  1997,
         2019, 15275, 12824,  4076,  2019,  1050,  1006,  1085,  1010,  1173,
         2475,  1007,  4353,  1012,  1996, 11709,  1085,  1998,  1173,  2475,
         2839,  4697,  1996, 12824,  2828,  1010,  1998,  1085,  2071,  2022,
         2170,  1996,  4241,  2527,  8553,  5950,  2005,  2023,  2828,  1997,
        12824,  1012,  1996,  9935,  2523,  2179,  2005,  1996,  7718, 13310,
         1024,  1060, 15136,  1027, 17317,  1012,  1017,  1998,  1055, 15136,
         1027,  2385,  1012,  1021,  1012,  9570,  1037,  5345,  1003,  7023,
        13483,  2005,  1085,  1012,   102])"
2557,1,"['results', 'table']", Exercises,seg_317,"23.5 during the 2002 winter olympic games in salt lake city a newspaper article mentioned the alleged advantage speed-skaters have in the 1500m race if they start in the outer lane. in the men’s 1500m, there were 24 races, but in race 13 (really!) someone fell and did not finish. the results in seconds of the remaining 23 races are listed in table 23.5. you should know that who races against whom, in which race, and who starts in the outer lane are all determined by a fair lottery.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1019,  2076,  1996,  2526,  3467,  4386,  2399,
         1999,  5474,  2697,  2103,  1037,  3780,  3720,  3855,  1996,  6884,
         5056,  3177,  1011, 24789,  2031,  1999,  1996, 10347,  2213,  2679,
         2065,  2027,  2707,  1999,  1996,  6058,  4644,  1012,  1999,  1996,
         2273,  1521,  1055, 10347,  2213,  1010,  2045,  2020,  2484,  3837,
         1010,  2021,  1999,  2679,  2410,  1006,  2428,   999,  1007,  2619,
         3062,  1998,  2106,  2025,  3926,  1012,  1996,  3463,  1999,  3823,
         1997,  1996,  3588,  2603,  3837,  2024,  3205,  1999,  2795,  2603,
         1012,  1019,  1012,  2017,  2323,  2113,  2008,  2040,  3837,  2114,
         3183,  1010,  1999,  2029,  2679,  1010,  1998,  2040,  4627,  1999,
         1996,  6058,  4644,  2024,  2035,  4340,  2011,  1037,  4189, 15213,
         1012,   102])"
2558,1,['factors'], Exercises,seg_317,a. as a consequence of the lottery and the fact that many different factors,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2004,  1037,  9509,  1997,  1996, 15213,  1998,
         1996,  2755,  2008,  2116,  2367,  5876,   102])"
2559,1,"['normal', 'normal distribution', 'distribution']", Exercises,seg_317,"contribute to the actual time difference “inner lane minus outer lane” the assumption of a normal distribution for the difference is warranted. the numbers in the last column can be seen as realizations from an n(δ, σ2)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9002,  2000,  1996,  5025,  2051,  4489,  1523,  5110,  4644,
        15718,  6058,  4644,  1524,  1996, 11213,  1997,  1037,  3671,  4353,
         2005,  1996,  4489,  2003, 10943,  2098,  1012,  1996,  3616,  1999,
         1996,  2197,  5930,  2064,  2022,  2464,  2004, 12393,  2015,  2013,
         2019,  1050,  1006,  1158,  1010,  1173,  2475,  1007,   102])"
2560,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_317,"distribution, where δ is the expected outer lane advantage. construct a 95% confidence interval for δ. n.b. n = 23, not 24!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  4353,  1010,  2073,  1158,  2003,  1996,  3517,  6058,  4644,
         5056,  1012,  9570,  1037,  5345,  1003,  7023, 13483,  2005,  1158,
         1012,  1050,  1012,  1038,  1012,  1050,  1027,  2603,  1010,  2025,
         2484,   999,   102])"
2561,1,"['interval', 'confidence', 'confidence interval', 'bootstrap']", Exercises,seg_317,b. you decide to make a bootstrap confidence interval instead. describe the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2017,  5630,  2000,  2191,  1037,  6879,  6494,
         2361,  7023, 13483,  2612,  1012,  6235,  1996,   102])"
2562,1,"['bootstrap', 'experiment']", Exercises,seg_317,appropriate bootstrap experiment.,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 6413, 6879, 6494, 2361, 7551, 1012,  102])"
2563,1,"['bootstrap', 'experiment']", Exercises,seg_317,c. the bootstrap experiment was performed with one thousand repetitions.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  1996,  6879,  6494,  2361,  7551,  2001,  2864,
         2007,  2028,  4595, 23318,  2015,  1012,   102])"
2564,1,"['confidence interval', 'table', 'interval', 'outcomes', 'results', 'bootstrap', 'confidence']", Exercises,seg_317,"part of the bootstrap outcomes are listed in the following table. from the ordered list of results, numbers 21 to 60 and 941 to 980 are given. use these to construct a 95% bootstrap confidence interval for δ.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2112,  1997,  1996,  6879,  6494,  2361, 13105,  2024,  3205,
         1999,  1996,  2206,  2795,  1012,  2013,  1996,  3641,  2862,  1997,
         3463,  1010,  3616,  2538,  2000,  3438,  1998,  6365,  2487,  2000,
        25195,  2024,  2445,  1012,  2224,  2122,  2000,  9570,  1037,  5345,
         1003,  6879,  6494,  2361,  7023, 13483,  2005,  1158,  1012,   102])"
2565,1,"['dataset', 'sample statistics', 'realization', 'sample', 'statistics', 'distribution']", Exercises,seg_317,"23.6 a dataset x1, x2, . . . , xn is given, modeled as realization of a sample x1, x2, . . . , xn from an n(µ, 1) distribution. suppose there are sample statistics ln = g(x1, . . . , xn) and un = h(x1, . . . , xn) such that",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1020,  1037,  2951, 13462,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,
         2445,  1010, 14440,  2004, 12393,  1997,  1037,  7099,  1060,  2487,
         1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,
         2013,  2019,  1050,  1006,  1085,  1010,  1015,  1007,  4353,  1012,
         6814,  2045,  2024,  7099,  6747,  1048,  2078,  1027,  1043,  1006,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1007,
         1998,  4895,  1027,  1044,  1006,  1060,  2487,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  1007,  2107,  2008,   102])"
2566,1,"['interval', 'confidence', 'confidence interval', 'data']", Exercises,seg_317,"for every value of µ. suppose that the corresponding 95% confidence interval derived from the data is (ln, un) = (−2, 5).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2005,  2296,  3643,  1997,  1085,  1012,  6814,  2008,  1996,
         7978,  5345,  1003,  7023, 13483,  5173,  2013,  1996,  2951,  2003,
         1006,  1048,  2078,  1010,  4895,  1007,  1027,  1006,  1597,  2475,
         1010,  1019,  1007,  1012,   102])"
2567,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_317,b. write the 95% confidence interval for θ in terms of ln and un.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  4339,  1996,  5345,  1003,  7023, 13483,  2005,
         1162,  1999,  3408,  1997,  1048,  2078,  1998,  4895,  1012,   102])"
2568,1,['confidence'], Exercises,seg_317,"c. suppose θ = 1 − µ. again, find l̃n and ũn, as well as the confidence",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([ 101, 1039, 1012, 6814, 1162, 1027, 1015, 1597, 1085, 1012, 2153, 1010,
        2424, 1048, 2078, 1998, 4895, 1010, 2004, 2092, 2004, 1996, 7023,  102])"
2569,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_317,d. suppose θ = µ2. can you construct a confidence interval for θ?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1040,  1012,  6814,  1162,  1027,  1085,  2475,  1012,  2064,
         2017,  9570,  1037,  7023, 13483,  2005,  1162,  1029,   102])"
2570,1,"['parameter', 'confidence interval', 'interval', 'random variable', 'random', 'distribution', 'confidence', 'variable']", Exercises,seg_317,"23.7 a 95% confidence interval for the parameter µ of a pois(µ) distribution is given: (2, 3). let x be a random variable with this distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1021,  1037,  5345,  1003,  7023, 13483,  2005,
         1996, 16381,  1085,  1997,  1037, 13433,  2483,  1006,  1085,  1007,
         4353,  2003,  2445,  1024,  1006,  1016,  1010,  1017,  1007,  1012,
         2292,  1060,  2022,  1037,  6721,  8023,  2007,  2023,  4353,  1012,
          102])"
2571,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_317,−µ construct a 95% confidence interval for p(x = 0) = e .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1597, 29659,  9570,  1037,  5345,  1003,  7023, 13483,  2005,
         1052,  1006,  1060,  1027,  1014,  1007,  1027,  1041,  1012,   102])"
2572,1,"['confidence interval', 'normal distribution', 'deviation', 'interval', 'sample', 'normal', 'standard deviation', 'standard', 'distribution', 'confidence', 'average', 'independent']", Exercises,seg_317,"23.8 suppose that in exercise 23.1 the content of the bottles has to be determined by weighing. it is known that the wine bottles involved weigh on average 250 grams, with a standard deviation of 15 grams, and the weights follow a normal distribution. for a sample of 16 bottles, an average weight of 998 grams was found. you may assume that 1 ml of wine weighs 1 gram, and that the filling amount is independent of the bottle weight. construct a 95% confidence interval for the expected amount of wine per bottle, µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1022,  6814,  2008,  1999,  6912,  2603,  1012,
         1015,  1996,  4180,  1997,  1996, 11015,  2038,  2000,  2022,  4340,
         2011, 15243,  1012,  2009,  2003,  2124,  2008,  1996,  4511, 11015,
         2920, 17042,  2006,  2779,  5539, 20372,  1010,  2007,  1037,  3115,
        24353,  1997,  2321, 20372,  1010,  1998,  1996, 15871,  3582,  1037,
         3671,  4353,  1012,  2005,  1037,  7099,  1997,  2385, 11015,  1010,
         2019,  2779,  3635,  1997,  5585,  2620, 20372,  2001,  2179,  1012,
         2017,  2089,  7868,  2008,  1015, 19875,  1997,  4511, 21094,  1015,
        13250,  1010,  1998,  2008,  1996,  8110,  3815,  2003,  2981,  1997,
         1996,  5835,  3635,  1012,  9570,  1037,  5345,  1003,  7023, 13483,
         2005,  1996,  3517,  3815,  1997,  4511,  2566,  5835,  1010,  1085,
         1012,   102])"
2573,1,"['confidence interval', 'table', 'interval', 'bootstrap', 'confidence', 'data']", Exercises,seg_317,23.9 consider the alpha-particle counts discussed in section 23.4; the data are given in table 23.4. we want to bootstrap in order to make a bootstrap confidence interval for the expected number of particles in a 7.5-second interval.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  1023,  5136,  1996,  6541,  1011, 10811,  9294,
         6936,  1999,  2930,  2603,  1012,  1018,  1025,  1996,  2951,  2024,
         2445,  1999,  2795,  2603,  1012,  1018,  1012,  2057,  2215,  2000,
         6879,  6494,  2361,  1999,  2344,  2000,  2191,  1037,  6879,  6494,
         2361,  7023, 13483,  2005,  1996,  3517,  2193,  1997,  9309,  1999,
         1037,  1021,  1012,  1019,  1011,  2117, 13483,  1012,   102])"
2574,1,"['simulation', 'bootstrap']", Exercises,seg_317,a. describe in detail how you would perform the bootstrap simulation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6235,  1999,  6987,  2129,  2017,  2052,  4685,
         1996,  6879,  6494,  2361, 12504,  1012,   102])"
2575,1,"['bootstrap', 'experiment']", Exercises,seg_317,b. the bootstrap experiment was performed with one thousand repetitions.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  6879,  6494,  2361,  7551,  2001,  2864,
         2007,  2028,  4595, 23318,  2015,  1012,   102])"
2576,1,"['confidence interval', 'table', 'interval', 'bootstrap', 'confidence']", Exercises,seg_317,part of the (ordered) bootstrap t∗’s are given in the following table. construct the 95% bootstrap confidence interval for the expected number of particles in a 7.5-second interval.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2112,  1997,  1996,  1006,  3641,  1007,  6879,  6494,  2361,
         1056, 30125,  1521,  1055,  2024,  2445,  1999,  1996,  2206,  2795,
         1012,  9570,  1996,  5345,  1003,  6879,  6494,  2361,  7023, 13483,
         2005,  1996,  3517,  2193,  1997,  9309,  1999,  1037,  1021,  1012,
         1019,  1011,  2117, 13483,  1012,   102])"
2577,0,[], Exercises,seg_317,c. answer this without doing any calculations: if we made the 98% boot-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012,  3437,  2023,  2302,  2725,  2151, 16268,  1024,
         2065,  2057,  2081,  1996,  5818,  1003,  9573,  1011,   102])"
2578,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_317,"strap confidence interval, would it be smaller or larger than the interval constructed in section 23.4?",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 16195,  7023, 13483,  1010,  2052,  2009,  2022,  3760,  2030,
         3469,  2084,  1996, 13483,  3833,  1999,  2930,  2603,  1012,  1018,
         1029,   102])"
2579,1,"['mean', 'parameter', 'confidence interval', 'interval', 'studentized mean', 'distribution', 'confidence']", Exercises,seg_317,"23.10 in a report you encounter a 95% confidence interval (1.6, 7.8) for the parameter µ of an n(µ, σ2) distribution. the interval is based on 16 observations, constructed according to the studentized mean procedure.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  2184,  1999,  1037,  3189,  2017,  8087,  1037,
         5345,  1003,  7023, 13483,  1006,  1015,  1012,  1020,  1010,  1021,
         1012,  1022,  1007,  2005,  1996, 16381,  1085,  1997,  2019,  1050,
         1006,  1085,  1010,  1173,  2475,  1007,  4353,  1012,  1996, 13483,
         2003,  2241,  2006,  2385,  9420,  1010,  3833,  2429,  2000,  1996,
         3076,  3550,  2812,  7709,  1012,   102])"
2580,1,"['mean', 'dataset']", Exercises,seg_317,a. what is the mean of the (unknown) dataset?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2003,  1996,  2812,  1997,  1996,  1006,
         4242,  1007,  2951, 13462,  1029,   102])"
2581,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_317,b. you prefer to have a 99% confidence interval for µ. construct it.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2017,  9544,  2000,  2031,  1037,  5585,  1003,
         7023, 13483,  2005,  1085,  1012,  9570,  2009,  1012,   102])"
2582,1,"['confidence interval', 'interval', 'expectation', 'distribution', 'confidence']", Exercises,seg_317,23.11 a 95% confidence interval for the unknown expectation of some distribution contains the number 0.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  2340,  1037,  5345,  1003,  7023, 13483,  2005,
         1996,  4242, 17626,  1997,  2070,  4353,  3397,  1996,  2193,  1014,
         1012,   102])"
2583,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_317,"a. we construct the corresponding 98% confidence interval, using the same",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2057,  9570,  1996,  7978,  5818,  1003,  7023,
        13483,  1010,  2478,  1996,  2168,   102])"
2584,0,[], Exercises,seg_317,data. will it contain the number 0?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2951, 1012, 2097, 2009, 5383, 1996, 2193, 1014, 1029,  102])"
2585,1,"['interval', 'confidence', 'confidence interval', 'bootstrap']", Exercises,seg_317,b. the confidence interval in fact is a bootstrap confidence interval. we re-,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  7023, 13483,  1999,  2755,  2003,  1037,
         6879,  6494,  2361,  7023, 13483,  1012,  2057,  2128,  1011,   102])"
2586,1,"['confidence interval', 'interval', 'results', 'bootstrap', 'experiment', 'confidence', 'data']", Exercises,seg_317,peat the bootstrap experiment (using the same data) and construct a new 95% confidence interval based on the results. will it contain the number 0?,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 23366,  1996,  6879,  6494,  2361,  7551,  1006,  2478,  1996,
         2168,  2951,  1007,  1998,  9570,  1037,  2047,  5345,  1003,  7023,
        13483,  2241,  2006,  1996,  3463,  1012,  2097,  2009,  5383,  1996,
         2193,  1014,  1029,   102])"
2587,1,"['dataset', 'data']", Exercises,seg_317,"c. we collect new data, resulting in a dataset of the same size. with this data,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2057,  8145,  2047,  2951,  1010,  4525,  1999,
         1037,  2951, 13462,  1997,  1996,  2168,  2946,  1012,  2007,  2023,
         2951,  1010,   102])"
2588,1,"['interval', 'confidence', 'confidence interval', 'expectation']", Exercises,seg_317,we construct a 95% confidence interval for the unknown expectation. will the interval contain 0?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2057,  9570,  1037,  5345,  1003,  7023, 13483,  2005,  1996,
         4242, 17626,  1012,  2097,  1996, 13483,  5383,  1014,  1029,   102])"
2589,1,"['sample standard deviations', 'random sample', 'sample', 'random', 'standard', 'distribution', 'deviations', 'standard deviations']", Exercises,seg_317,"23.12 let z1, . . . , zn be a random sample from an n(0, 1) distribution. define xi = µ+σzi for i = 1, . . . , n and σ > 0. let z̄, x̄ denote the sample averages and sz and sx the sample standard deviations, of the zi and xi, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2603,  1012,  2260,  2292,  1062,  2487,  1010,  1012,  1012,
         1012,  1010,  1062,  2078,  2022,  1037,  6721,  7099,  2013,  2019,
         1050,  1006,  1014,  1010,  1015,  1007,  4353,  1012,  9375,  8418,
         1027,  1085,  1009,  1173,  5831,  2005,  1045,  1027,  1015,  1010,
         1012,  1012,  1012,  1010,  1050,  1998,  1173,  1028,  1014,  1012,
         2292,  1062,  1010,  1060, 19090,  1996,  7099, 20185,  1998,  1055,
         2480,  1998,  1055,  2595,  1996,  7099,  3115, 24353,  2015,  1010,
         1997,  1996,  1062,  2072,  1998,  8418,  1010,  4414,  1012,   102])"
2590,1,"['random sample', 'sample', 'random', 'distribution']", Exercises,seg_317,"a. show that x1, . . . , xn is a random sample from an n(µ, σ2) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2265, 2008, 1060, 2487, 1010, 1012, 1012, 1012, 1010,
        1060, 2078, 2003, 1037, 6721, 7099, 2013, 2019, 1050, 1006, 1085, 1010,
        1173, 2475, 1007, 4353, 1012,  102])"
2591,0,[], Exercises,seg_317,c. verify that,tensor(0),"tensor([0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012, 20410,  2008,   102])"
2592,1,"['mean', 'studentized mean', 'distribution']", Exercises,seg_317,and explain why this shows that the distribution of the studentized mean does not depend on µ and σ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1998,  4863,  2339,  2023,  3065,  2008,  1996,  4353,  1997,
         1996,  3076,  3550,  2812,  2515,  2025, 12530,  2006,  1085,  1998,
         1173,  1012,   102])"
2593,1,"['parameter', 'confidence interval', 'expectations', 'interval', 'sample', 'method', 'sample size', 'intervals', 'distribution', 'confidence intervals', 'confidence', 'binomial', 'binomial distribution']", More on confidence intervals,seg_319,"while in chapter 23 we were solely concerned with confidence intervals for expectations, in this chapter we treat a variety of topics. first, we focus on confidence intervals for the parameter p of the binomial distribution. then, based on an example, we briefly discuss a general method to construct confidence intervals. one-sided confidence intervals, or upper and lower confidence bounds, are discussed next. at the end of the chapter we investigate the question of how to determine the sample size when a confidence interval of a certain width is desired.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2062,  2006,  7023, 14025])","tensor([  101,  2096,  1999,  3127,  2603,  2057,  2020,  9578,  4986,  2007,
         7023, 14025,  2005, 10908,  1010,  1999,  2023,  3127,  2057,  7438,
         1037,  3528,  1997,  7832,  1012,  2034,  1010,  2057,  3579,  2006,
         7023, 14025,  2005,  1996, 16381,  1052,  1997,  1996,  8026, 20936,
         2389,  4353,  1012,  2059,  1010,  2241,  2006,  2019,  2742,  1010,
         2057,  4780,  6848,  1037,  2236,  4118,  2000,  9570,  7023, 14025,
         1012,  2028,  1011, 11536,  7023, 14025,  1010,  2030,  3356,  1998,
         2896,  7023, 19202,  1010,  2024,  6936,  2279,  1012,  2012,  1996,
         2203,  1997,  1996,  3127,  2057,  8556,  1996,  3160,  1997,  2129,
         2000,  5646,  1996,  7099,  2946,  2043,  1037,  7023, 13483,  1997,
         1037,  3056,  9381,  2003,  9059,  1012,   102])"
2594,1,"['estimate', 'random variable', 'population', 'sample', 'random', 'estimator', 'distribution', 'variable']", The probability of success,seg_321,"a common situation is that we observe a random variable x with a bin(n, p) distribution and use x to estimate p. for example, if we want to estimate the proportion of voters that support candidate g in an election, we take a sample from the voter population and determine the proportion in the sample that supports g. if n individuals are selected at random from the population, where a proportion p supports candidate g, the number of supporters x in the sample is modeled by a bin(n, p) distribution; we count the supporters of candidate g as “successes.” usually, the sample proportion x/n is taken as an estimator for p.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  1037,  2691,  3663,  2003,  2008,  2057, 11949,  1037,  6721,
         8023,  1060,  2007,  1037,  8026,  1006,  1050,  1010,  1052,  1007,
         4353,  1998,  2224,  1060,  2000, 10197,  1052,  1012,  2005,  2742,
         1010,  2065,  2057,  2215,  2000, 10197,  1996, 10817,  1997,  7206,
         2008,  2490,  4018,  1043,  1999,  2019,  2602,  1010,  2057,  2202,
         1037,  7099,  2013,  1996, 14303,  2313,  1998,  5646,  1996, 10817,
         1999,  1996,  7099,  2008,  6753,  1043,  1012,  2065,  1050,  3633,
         2024,  3479,  2012,  6721,  2013,  1996,  2313,  1010,  2073,  1037,
        10817,  1052,  6753,  4018,  1043,  1010,  1996,  2193,  1997,  6793,
         1060,  1999,  1996,  7099,  2003, 14440,  2011,  1037,  8026,  1006,
         1050,  1010,  1052,  1007,  4353,  1025,  2057,  4175,  1996,  6793,
         1997,  4018,  1043,  2004,  1523, 14152,  1012,  1524,  2788,  1010,
         1996,  7099, 10817,  1060,  1013,  1050,  2003,  2579,  2004,  2019,
         9765,  9581,  4263,  2005,  1052,  1012,   102])"
2595,1,"['confidence interval', 'interval', 'sample', 'intervals', 'statistics', 'confidence intervals', 'confidence']", The probability of success,seg_321,"if we want to make a confidence interval for p, based on the number of successes x in the sample, we need to find statistics l and u (see the definition of confidence intervals on page 343) such that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  2065,  2057,  2215,  2000,  2191,  1037,  7023, 13483,  2005,
         1052,  1010,  2241,  2006,  1996,  2193,  1997, 14152,  1060,  1999,
         1996,  7099,  1010,  2057,  2342,  2000,  2424,  6747,  1048,  1998,
         1057,  1006,  2156,  1996,  6210,  1997,  7023, 14025,  2006,  3931,
        27810,  1007,  2107,  2008,   102])"
2596,1,"['method', 'intervals', 'confidence intervals', 'confidence']", The probability of success,seg_321,"where l and u are to be based on x only. in general, this problem does not have a solution. however, the method for large n described next, sometimes called “the wilson method” (see [40]), yields confidence intervals with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  2073,  1048,  1998,  1057,  2024,  2000,  2022,  2241,  2006,
         1060,  2069,  1012,  1999,  2236,  1010,  2023,  3291,  2515,  2025,
         2031,  1037,  5576,  1012,  2174,  1010,  1996,  4118,  2005,  2312,
         1050,  2649,  2279,  1010,  2823,  2170,  1523,  1996,  4267,  4118,
         1524,  1006,  2156,  1031,  2871,  1033,  1007,  1010, 16189,  7023,
        14025,  2007,   102])"
2597,1,"['confidence level', 'confidence', 'level']", The probability of success,seg_321,"confidence level approximately 100(1 − α)%. (how close the true confidence level is to 100(1−α)% depends on the (unknown) p, though it is known that for p near 0 and 1 it is too low. for some details and an alternative for this situation, see remark 24.1.)",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  7023,  2504,  3155,  2531,  1006,  1015,  1597,  1155,  1007,
         1003,  1012,  1006,  2129,  2485,  1996,  2995,  7023,  2504,  2003,
         2000,  2531,  1006,  1015, 22543, 14608,  1007,  1003,  9041,  2006,
         1996,  1006,  4242,  1007,  1052,  1010,  2295,  2009,  2003,  2124,
         2008,  2005,  1052,  2379,  1014,  1998,  1015,  2009,  2003,  2205,
         2659,  1012,  2005,  2070,  4751,  1998,  2019,  4522,  2005,  2023,
         3663,  1010,  2156, 17674,  2484,  1012,  1015,  1012,  1007,   102])"
2598,1,"['approximation', 'normal approximation', 'normal', 'limit', 'distribution', 'central limit theorem', 'binomial', 'binomial distribution']", The probability of success,seg_321,"recall the normal approximation to the binomial distribution, a consequence of the central limit theorem (see page 201 and exercise 14.5): for large n, the distribution of x is approximately normal and",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  9131,  1996,  3671, 20167,  2000,  1996,  8026, 20936,  2389,
         4353,  1010,  1037,  9509,  1997,  1996,  2430,  5787,  9872,  1006,
         2156,  3931, 16345,  1998,  6912,  2403,  1012,  1019,  1007,  1024,
         2005,  2312,  1050,  1010,  1996,  4353,  1997,  1060,  2003,  3155,
         3671,  1998,   102])"
2599,1,"['standard normal', 'normal', 'standard']", The probability of success,seg_321,"is approximately standard normal. by dividing by n in both the numerator and the denominator, we see that this equals:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  2003,  3155,  3115,  3671,  1012,  2011, 16023,  2011,  1050,
         1999,  2119,  1996, 16371,  5017,  8844,  1998,  1996,  7939, 20936,
        27413,  1010,  2057,  2156,  2008,  2023, 19635,  1024,   102])"
2600,0,['n'], The probability of success,seg_321,"therefore, for large n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([1996, 9723, 1997, 3112])","tensor([ 101, 3568, 1010, 2005, 2312, 1050,  102])"
2601,1,['event'], The probability of success,seg_321,note that the event x − p,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([ 101, 3602, 2008, 1996, 2724, 1060, 1597, 1052,  102])"
2602,0,[], The probability of success,seg_321,is the same as,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([1996, 9723, 1997, 3112])","tensor([ 101, 2003, 1996, 2168, 2004,  102])"
2603,1,"['confidence interval', 'interval', 'inequality', 'confidence', 'data']", The probability of success,seg_321,"to derive expressions for l and u we can rewrite the inequality in this statement to obtain the form l < p < u , but the resulting formulas are rather awkward. to obtain the confidence interval, we instead substitute the data values directly and then solve for p, which yields the desired result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  2000, 18547, 11423,  2005,  1048,  1998,  1057,  2057,  2064,
         2128, 26373,  1996, 16440,  1999,  2023,  4861,  2000,  6855,  1996,
         2433,  1048,  1026,  1052,  1026,  1057,  1010,  2021,  1996,  4525,
        25814,  2024,  2738,  9596,  1012,  2000,  6855,  1996,  7023, 13483,
         1010,  2057,  2612,  7681,  1996,  2951,  5300,  3495,  1998,  2059,
         9611,  2005,  1052,  1010,  2029, 16189,  1996,  9059,  2765,  1012,
          102])"
2604,1,"['confidence interval', 'interval', 'realization', 'sample', 'population', 'inequality', 'confidence']", The probability of success,seg_321,"suppose, in a sample of 125 voters, 78 support one candidate. what is the 95% confidence interval for the population proportion p supporting that candidate? the realization of x is x = 78 and n = 125. we substitute this, together with zα/2 = z0.025 = 1.96, in the last inequality:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  6814,  1010,  1999,  1037,  7099,  1997,  8732,  7206,  1010,
         6275,  2490,  2028,  4018,  1012,  2054,  2003,  1996,  5345,  1003,
         7023, 13483,  2005,  1996,  2313, 10817,  1052,  4637,  2008,  4018,
         1029,  1996, 12393,  1997,  1060,  2003,  1060,  1027,  6275,  1998,
         1050,  1027,  8732,  1012,  2057,  7681,  2023,  1010,  2362,  2007,
         1062, 14608,  1013,  1016,  1027,  1062,  2692,  1012,  6185,  2629,
         1027,  1015,  1012,  5986,  1010,  1999,  1996,  2197, 16440,  1024,
          102])"
2605,0,[], The probability of success,seg_321,"or, working out squares and products and grouping terms:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  2030,  1010,  2551,  2041, 14320,  1998,  3688,  1998, 19765,
         3408,  1024,   102])"
2606,1,"['confidence interval', 'interval', 'coefficient', 'results', 'inequality', 'confidence']", The probability of success,seg_321,"this quadratic form describes a parabola, which is depicted in figure 24.1. also, for other values of n and x there always results a quadratic inequality like this, with a positive coefficient for p2 and a similar picture. for the confidence interval we need to find the values where the parabola intersects the horizontal axis. the solutions we find are:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  2023, 17718, 23671,  2433,  5577,  1037, 11498, 24290,  1010,
         2029,  2003,  8212,  1999,  3275,  2484,  1012,  1015,  1012,  2036,
         1010,  2005,  2060,  5300,  1997,  1050,  1998,  1060,  2045,  2467,
         3463,  1037, 17718, 23671, 16440,  2066,  2023,  1010,  2007,  1037,
         3893, 19064,  2005,  1052,  2475,  1998,  1037,  2714,  3861,  1012,
         2005,  1996,  7023, 13483,  2057,  2342,  2000,  2424,  1996,  5300,
         2073,  1996, 11498, 24290, 17349,  1996,  9876,  8123,  1012,  1996,
         7300,  2057,  2424,  2024,  1024,   102])"
2607,1,"['interval', 'confidence', 'confidence interval']", The probability of success,seg_321,"hence, l = 0.54 and u = 0.70, so the resulting confidence interval is (0.54, 0.70).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  6516,  1010,  1048,  1027,  1014,  1012,  5139,  1998,  1057,
         1027,  1014,  1012,  3963,  1010,  2061,  1996,  4525,  7023, 13483,
         2003,  1006,  1014,  1012,  5139,  1010,  1014,  1012,  3963,  1007,
         1012,   102])"
2608,1,"['confidence interval', 'interval', 'sample', 'confidence']", The probability of success,seg_321,quick exercise 24.1 suppose in another election we find 80 supporters in a sample of 200. suppose we use α = 0.0456 for which zα/2 = 2. construct the corresponding confidence interval for p.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([1996, 9723, 1997, 3112])","tensor([  101,  4248,  6912,  2484,  1012,  1015,  6814,  1999,  2178,  2602,
         2057,  2424,  3770,  6793,  1999,  1037,  7099,  1997,  3263,  1012,
         6814,  2057,  2224,  1155,  1027,  1014,  1012,  5840, 26976,  2005,
         2029,  1062, 14608,  1013,  1016,  1027,  1016,  1012,  9570,  1996,
         7978,  7023, 13483,  2005,  1052,  1012,   102])"
2609,1,"['cases', 'method', 'intervals', 'confidence intervals', 'confidence']", Is there a general method,seg_323,"we have now seen a number of examples of confidence intervals, and while it should be clear to you that in each of these cases the resulting intervals are valid confidence intervals, you may wonder how we go about finding confidence intervals in new situations. one could ask: is there a general method? we first consider an example.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  2057,  2031,  2085,  2464,  1037,  2193,  1997,  4973,  1997,
         7023, 14025,  1010,  1998,  2096,  2009,  2323,  2022,  3154,  2000,
         2017,  2008,  1999,  2169,  1997,  2122,  3572,  1996,  4525, 14025,
         2024,  9398,  7023, 14025,  1010,  2017,  2089,  4687,  2129,  2057,
         2175,  2055,  4531,  7023, 14025,  1999,  2047,  8146,  1012,  2028,
         2071,  3198,  1024,  2003,  2045,  1037,  2236,  4118,  1029,  2057,
         2034,  5136,  2019,  2742,  1012,   102])"
2610,1,"['interval', 'confidence', 'confidence interval']", Is there a general method,seg_323,a confidence interval for the minimum lifetime,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  1037,  7023, 13483,  2005,  1996,  6263,  6480,   102])"
2611,1,"['parameter', 'probability', 'exponential distribution', 'random variable', 'random sample', 'sample', 'random', 'exponential', 'distribution', 'model', 'variable']", Is there a general method,seg_323,"suppose we have a random sample x1, . . . , xn from a shifted exponential distribution, that is, xi = δ +yi, where y1, . . . , yn are a random sample from an exp(1) distribution. this type of random variable is sometimes used to model lifetimes; a minimum lifetime is guaranteed, but otherwise the lifetime has an exponential distribution. the unknown parameter δ represents the minimum lifetime, and the probability density of the xi is positive only for values greater than δ.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  6814,  2057,  2031,  1037,  6721,  7099,  1060,  2487,  1010,
         1012,  1012,  1012,  1010,  1060,  2078,  2013,  1037,  5429, 27258,
         4353,  1010,  2008,  2003,  1010,  8418,  1027,  1158,  1009, 12316,
         1010,  2073,  1061,  2487,  1010,  1012,  1012,  1012,  1010,  1061,
         2078,  2024,  1037,  6721,  7099,  2013,  2019,  4654,  2361,  1006,
         1015,  1007,  4353,  1012,  2023,  2828,  1997,  6721,  8023,  2003,
         2823,  2109,  2000,  2944,  6480,  2015,  1025,  1037,  6263,  6480,
         2003, 12361,  1010,  2021,  4728,  1996,  6480,  2038,  2019, 27258,
         4353,  1012,  1996,  4242, 16381,  1158,  5836,  1996,  6263,  6480,
         1010,  1998,  1996,  9723,  4304,  1997,  1996,  8418,  2003,  3893,
         2069,  2005,  5300,  3618,  2084,  1158,  1012,   102])"
2612,1,"['maximum likelihood', 'maximum likelihood estimator', 'information', 'estimator', 'likelihood']", Is there a general method,seg_323,"to derive information about δ it is natural to use the smallest observed value t = min{x1, . . . , xn}. this is also the maximum likelihood estimator for δ; see exercise 21.6. writing",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  2000, 18547,  2592,  2055,  1158,  2009,  2003,  3019,  2000,
         2224,  1996, 10479,  5159,  3643,  1056,  1027,  8117,  1063,  1060,
         2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1065,  1012,
         2023,  2003,  2036,  1996,  4555, 16593,  9765,  9581,  4263,  2005,
         1158,  1025,  2156,  6912,  2538,  1012,  1020,  1012,  3015,   102])"
2613,1,"['distribution function', 'function', 'distribution']", Is there a general method,seg_323,"and observing that m = min{y1, . . . , yn} has an exp(n) distribution (see exercise 8.18), we find for the distribution function of t : ft (a) = 0 for a < δ and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  1998, 14158,  2008,  1049,  1027,  8117,  1063,  1061,  2487,
         1010,  1012,  1012,  1012,  1010,  1061,  2078,  1065,  2038,  2019,
         4654,  2361,  1006,  1050,  1007,  4353,  1006,  2156,  6912,  1022,
         1012,  2324,  1007,  1010,  2057,  2424,  2005,  1996,  4353,  3853,
         1997,  1056,  1024,  3027,  1006,  1037,  1007,  1027,  1014,  2005,
         1037,  1026,  1158,  1998,   102])"
2614,0,[], Is there a general method,seg_323,"next, we solve",tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([ 101, 2279, 1010, 2057, 9611,  102])"
2615,0,[], Is there a general method,seg_323,using (24.1) we find the following equations:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  2478,  1006,  2484,  1012,  1015,  1007,  2057,  2424,  1996,
         2206, 11380,  1024,   102])"
2616,0,[], Is there a general method,seg_323,"both cl and cu are values larger than δ, because the logarithms are negative. we have found that, whatever the value of δ:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  2119, 18856,  1998, 12731,  2024,  5300,  3469,  2084,  1158,
         1010,  2138,  1996,  8833,  8486,  2705,  5244,  2024,  4997,  1012,
         2057,  2031,  2179,  2008,  1010,  3649,  1996,  3643,  1997,  1158,
         1024,   102])"
2617,0,[], Is there a general method,seg_323,"by rearranging the inequalities, we see this is equivalent to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  2011,  4373, 24388,  2075,  1996,  1999,  2063, 26426,  6447,
         1010,  2057,  2156,  2023,  2003,  5662,  2000,   102])"
2618,1,"['interval', 'confidence', 'confidence interval']", Is there a general method,seg_323,and therefore a 100(1 − α)% confidence interval for δ is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  1998,  3568,  1037,  2531,  1006,  1015,  1597,  1155,  1007,
         1003,  7023, 13483,  2005,  1158,  2003,  2445,  2011,   102])"
2619,1,"['dataset', 'confidence interval', 'interval', 'distribution', 'confidence']", Is there a general method,seg_323,"quick exercise 24.2 suppose you have a dataset of size 15 from a shifted exp(1) distribution, whose minimum value is 23.5. what is the 99% confidence interval for δ?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  4248,  6912,  2484,  1012,  1016,  6814,  2017,  2031,  1037,
         2951, 13462,  1997,  2946,  2321,  2013,  1037,  5429,  4654,  2361,
         1006,  1015,  1007,  4353,  1010,  3005,  6263,  3643,  2003,  2603,
         1012,  1019,  1012,  2054,  2003,  1996,  5585,  1003,  7023, 13483,
         2005,  1158,  1029,   102])"
2620,1,"['parameter', 'function', 'confidence interval', 'interval', 'exponential distribution', 'sample', 'sample statistic', 'intervals', 'distribution', 'exponential', 'confidence intervals', 'confidence', 'statistic']", Is there a general method,seg_323,"looking back at the example, we see that the confidence interval could be constructed because we know that t −δ = m has an exponential distribution. there are many more examples of this type: some function g(t, θ) of a sample statistic t and the unknown parameter θ has a known distribution. however, this still does not cover all the ways to construct confidence intervals (see also the following remark).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2003, 2045, 1037, 2236, 4118])","tensor([  101,  2559,  2067,  2012,  1996,  2742,  1010,  2057,  2156,  2008,
         1996,  7023, 13483,  2071,  2022,  3833,  2138,  2057,  2113,  2008,
         1056,  1597, 29722,  1027,  1049,  2038,  2019, 27258,  4353,  1012,
         2045,  2024,  2116,  2062,  4973,  1997,  2023,  2828,  1024,  2070,
         3853,  1043,  1006,  1056,  1010,  1162,  1007,  1997,  1037,  7099,
        28093,  6553,  1056,  1998,  1996,  4242, 16381,  1162,  2038,  1037,
         2124,  4353,  1012,  2174,  1010,  2023,  2145,  2515,  2025,  3104,
         2035,  1996,  3971,  2000,  9570,  7023, 14025,  1006,  2156,  2036,
         1996,  2206, 17674,  1007,  1012,   102])"
2621,1,"['confidence interval', 'confident', 'interval', 'confidence', 'data']", Onesided confidence intervals,seg_325,"suppose you are in charge of a power plant that generates and sells electricity, and you are about to buy a shipment of coal, say a shipment of the daw mill coal identified as 258gb41 earlier. you plan to buy the shipment if you are confident that the gross calorific content exceeds 31.00 mj/kg. at the end of section 23.2 we obtained for the gross calorific content the 95% confidence interval (30.946, 31.067): based on the data we are 95% confident that the gross calorific content is higher than 30.946 and lower than 31.067.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  6814,  2017,  2024,  1999,  3715,  1997,  1037,  2373,  3269,
         2008, 19421,  1998, 15187,  6451,  1010,  1998,  2017,  2024,  2055,
         2000,  4965,  1037, 22613,  1997,  5317,  1010,  2360,  1037, 22613,
         1997,  1996,  4830,  2860,  4971,  5317,  4453,  2004, 24398, 18259,
        23632,  3041,  1012,  2017,  2933,  2000,  4965,  1996, 22613,  2065,
         2017,  2024,  9657,  2008,  1996,  7977, 10250, 10050,  8873,  2278,
         4180, 23651,  2861,  1012,  4002,  1049,  3501,  1013,  4705,  1012,
         2012,  1996,  2203,  1997,  2930,  2603,  1012,  1016,  2057,  4663,
         2005,  1996,  7977, 10250, 10050,  8873,  2278,  4180,  1996,  5345,
         1003,  7023, 13483,  1006,  2382,  1012,  6365,  2575,  1010,  2861,
         1012,  5757,  2581,  1007,  1024,  2241,  2006,  1996,  2951,  2057,
         2024,  5345,  1003,  9657,  2008,  1996,  7977, 10250, 10050,  8873,
         2278,  4180,  2003,  3020,  2084,  2382,  1012,  6365,  2575,  1998,
         2896,  2084,  2861,  1012,  5757,  2581,  1012,   102])"
2622,1,"['confidence', 'confident']", Onesided confidence intervals,seg_325,"in the present situation, however, we are only interested in the lower bound: we would prefer a confidence statement of the type “we are 95% confident that the gross calorific content exceeds 31.00.” modifying equation (23.4) we",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  1999,  1996,  2556,  3663,  1010,  2174,  1010,  2057,  2024,
         2069,  4699,  1999,  1996,  2896,  5391,  1024,  2057,  2052,  9544,
         1037,  7023,  4861,  1997,  1996,  2828,  1523,  2057,  2024,  5345,
         1003,  9657,  2008,  1996,  7977, 10250, 10050,  8873,  2278,  4180,
        23651,  2861,  1012,  4002,  1012,  1524, 29226,  8522,  1006,  2603,
         1012,  1018,  1007,  2057,   102])"
2623,0,[], Onesided confidence intervals,seg_325,which is equivalent to,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 3924, 14097,  7023, 14025])","tensor([ 101, 2029, 2003, 5662, 2000,  102])"
2624,0,[], Onesided confidence intervals,seg_325,we conclude that sn,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  2057, 16519,  2008,  1055,  2078,   102])"
2625,1,"['interval', 'results', 'confidence interval', 'confidence']", Onesided confidence intervals,seg_325,"is a 100(1 − α)% one-sided confidence interval for µ. for the daw mill coal, using α = 0.05, with t21,0.05 = 1.721 this results in:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  2003,  1037,  2531,  1006,  1015,  1597,  1155,  1007,  1003,
         2028,  1011, 11536,  7023, 13483,  2005,  1085,  1012,  2005,  1996,
         4830,  2860,  4971,  5317,  1010,  2478,  1155,  1027,  1014,  1012,
         5709,  1010,  2007,  1056, 17465,  1010,  1014,  1012,  5709,  1027,
         1015,  1012,  5824,  2487,  2023,  3463,  1999,  1024,   102])"
2626,1,"['interval', 'confidence', 'uncertainty']", Onesided confidence intervals,seg_325,"we see that because “all uncertainty may be put on one side,” the lower bound in the one-sided interval is higher than that in the two-sided one, though still below 31.00. other situations may require a confidence upper bound. for example, if the calorific value is below a certain number you can try to negotiate a lower the price.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  2057,  2156,  2008,  2138,  1523,  2035, 12503,  2089,  2022,
         2404,  2006,  2028,  2217,  1010,  1524,  1996,  2896,  5391,  1999,
         1996,  2028,  1011, 11536, 13483,  2003,  3020,  2084,  2008,  1999,
         1996,  2048,  1011, 11536,  2028,  1010,  2295,  2145,  2917,  2861,
         1012,  4002,  1012,  2060,  8146,  2089,  5478,  1037,  7023,  3356,
         5391,  1012,  2005,  2742,  1010,  2065,  1996, 10250, 10050,  8873,
         2278,  3643,  2003,  2917,  1037,  3056,  2193,  2017,  2064,  3046,
         2000, 13676,  1037,  2896,  1996,  3976,  1012,   102])"
2627,1,"['sample', 'sample statistic', 'intervals', 'confidence intervals', 'confidence', 'statistic']", Onesided confidence intervals,seg_325,the definition of confidence intervals (page 343) can be extended to include one-sided confidence intervals as well. if we have a sample statistic ln such that,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  1996,  6210,  1997,  7023, 14025,  1006,  3931, 27810,  1007,
         2064,  2022,  3668,  2000,  2421,  2028,  1011, 11536,  7023, 14025,
         2004,  2092,  1012,  2065,  2057,  2031,  1037,  7099, 28093,  6553,
         1048,  2078,  2107,  2008,   102])"
2628,1,"['parameter', 'parameter of interest']", Onesided confidence intervals,seg_325,"for every value of the parameter of interest θ, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  2005,  2296,  3643,  1997,  1996, 16381,  1997,  3037,  1162,
         1010,  2059,   102])"
2629,1,"['interval', 'confidence', 'confidence interval', 'confidence bound']", Onesided confidence intervals,seg_325,"is called a 100γ% one-sided confidence interval for θ. the number ln is sometimes called a 100γ% lower confidence bound for θ. similary, un with p(θ < un) = γ for every value of θ, yields the one-sided confidence interval (−∞, un), and un is called a 100γ% upper confidence bound.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  2003,  2170,  1037,  2531, 29721,  1003,  2028,  1011, 11536,
         7023, 13483,  2005,  1162,  1012,  1996,  2193,  1048,  2078,  2003,
         2823,  2170,  1037,  2531, 29721,  1003,  2896,  7023,  5391,  2005,
         1162,  1012,  2714,  2100,  1010,  4895,  2007,  1052,  1006,  1162,
         1026,  4895,  1007,  1027,  1157,  2005,  2296,  3643,  1997,  1162,
         1010, 16189,  1996,  2028,  1011, 11536,  7023, 13483,  1006,  1597,
        30128,  1010,  4895,  1007,  1010,  1998,  4895,  2003,  2170,  1037,
         2531, 29721,  1003,  3356,  7023,  5391,  1012,   102])"
2630,1,"['confidence', 'confidence bound']", Onesided confidence intervals,seg_325,quick exercise 24.3 determine the 99% upper confidence bound for the gross calorific value of the daw mill coal.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 14097,  7023, 14025])","tensor([  101,  4248,  6912,  2484,  1012,  1017,  5646,  1996,  5585,  1003,
         3356,  7023,  5391,  2005,  1996,  7977, 10250, 10050,  8873,  2278,
         3643,  1997,  1996,  4830,  2860,  4971,  5317,  1012,   102])"
2631,1,"['confidence interval', 'set', 'interval', 'sample', 'sample size', 'measurements', 'confidence', 'data']", Determining the sample size,seg_327,"the narrower the confidence interval the better (why?). as a general principle, we know that more accurate statements can be made if we have more measurements. sometimes, an accuracy requirement is set, even before data are collected, and the corresponding sample size is to be determined. we provide an example of how to do this and note that this generally can be done, but the actual computation varies with the type of confidence interval.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([12515,  1996,  7099,  2946])","tensor([  101,  1996, 22546,  1996,  7023, 13483,  1996,  2488,  1006,  2339,
         1029,  1007,  1012,  2004,  1037,  2236,  6958,  1010,  2057,  2113,
         2008,  2062,  8321,  8635,  2064,  2022,  2081,  2065,  2057,  2031,
         2062, 11702,  1012,  2823,  1010,  2019, 10640,  9095,  2003,  2275,
         1010,  2130,  2077,  2951,  2024,  5067,  1010,  1998,  1996,  7978,
         7099,  2946,  2003,  2000,  2022,  4340,  1012,  2057,  3073,  2019,
         2742,  1997,  2129,  2000,  2079,  2023,  1998,  3602,  2008,  2023,
         3227,  2064,  2022,  2589,  1010,  2021,  1996,  5025, 22334,  9783,
         2007,  1996,  2828,  1997,  7023, 13483,  1012,   102])"
2632,1,"['confidence interval', 'interval', 'measurements', 'confidence', 'test']", Determining the sample size,seg_327,"consider the question of the calorific content of coal once more. we have a shipment of coal to test and we want to obtain a 95% confidence interval, but it should not be wider than 0.05 mj/kg, i.e., the lower and upper bound should not differ more than 0.05. how many measurements do we need?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([12515,  1996,  7099,  2946])","tensor([  101,  5136,  1996,  3160,  1997,  1996, 10250, 10050,  8873,  2278,
         4180,  1997,  5317,  2320,  2062,  1012,  2057,  2031,  1037, 22613,
         1997,  5317,  2000,  3231,  1998,  2057,  2215,  2000,  6855,  1037,
         5345,  1003,  7023, 13483,  1010,  2021,  2009,  2323,  2025,  2022,
         7289,  2084,  1014,  1012,  5709,  1049,  3501,  1013,  4705,  1010,
         1045,  1012,  1041,  1012,  1010,  1996,  2896,  1998,  3356,  5391,
         2323,  2025, 11234,  2062,  2084,  1014,  1012,  5709,  1012,  2129,
         2116, 11702,  2079,  2057,  2342,  1029,   102])"
2633,1,"['confidence level', 'confidence interval', 'normally distributed', 'deviation', 'interval', 'level', 'method', 'standard deviation', 'standard', 'measurements', 'confidence', 'case']", Determining the sample size,seg_327,"we answer this question for the case when iso method 1928 is used, whence we may assume that measurements are normally distributed with standard deviation σ = 0.1. when the desired confidence level is 1 − α, the width of the confidence interval will be",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([12515,  1996,  7099,  2946])","tensor([  101,  2057,  3437,  2023,  3160,  2005,  1996,  2553,  2043, 11163,
         4118,  4662,  2003,  2109,  1010,  2043,  3401,  2057,  2089,  7868,
         2008, 11702,  2024,  5373,  5500,  2007,  3115, 24353,  1173,  1027,
         1014,  1012,  1015,  1012,  2043,  1996,  9059,  7023,  2504,  2003,
         1015,  1597,  1155,  1010,  1996,  9381,  1997,  1996,  7023, 13483,
         2097,  2022,   102])"
2634,0,[], Determining the sample size,seg_327,requiring that this is at most w means finding the smallest n that satisfies,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12515,  1996,  7099,  2946])","tensor([  101,  9034,  2008,  2023,  2003,  2012,  2087,  1059,  2965,  4531,
         1996, 10479,  1050,  2008,  2938,  2483, 14213,   102])"
2635,1,['measurements'], Determining the sample size,seg_327,"that is, we should perform at least 62 measurements.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12515,  1996,  7099,  2946])","tensor([  101,  2008,  2003,  1010,  2057,  2323,  4685,  2012,  2560,  5786,
        11702,  1012,   102])"
2636,1,"['confidence interval', 'deviation', 'interval', 'estimate', 'sample', 'method', 'standard deviation', 'sample size', 'standard', 'confidence', 'data', 'case']", Determining the sample size,seg_327,"in case σ is unknown, we somehow have to estimate it, and then the method can only give an indication of the required sample size. the standard deviation as we (afterwards) estimate it from the data may turn out to be quite different, and the obtained confidence interval may be smaller or larger than intended.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12515,  1996,  7099,  2946])","tensor([  101,  1999,  2553,  1173,  2003,  4242,  1010,  2057,  5064,  2031,
         2000, 10197,  2009,  1010,  1998,  2059,  1996,  4118,  2064,  2069,
         2507,  2019, 12407,  1997,  1996,  3223,  7099,  2946,  1012,  1996,
         3115, 24353,  2004,  2057,  1006,  5728,  1007, 10197,  2009,  2013,
         1996,  2951,  2089,  2735,  2041,  2000,  2022,  3243,  2367,  1010,
         1998,  1996,  4663,  7023, 13483,  2089,  2022,  3760,  2030,  3469,
         2084,  3832,  1012,   102])"
2637,1,"['confidence interval', 'interval', 'sample', 'sample size', 'confidence']", Determining the sample size,seg_327,quick exercise 24.4 what is the required sample size if we want the 99% confidence interval to be 0.05 mj/kg wide?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12515,  1996,  7099,  2946])","tensor([  101,  4248,  6912,  2484,  1012,  1018,  2054,  2003,  1996,  3223,
         7099,  2946,  2065,  2057,  2215,  1996,  5585,  1003,  7023, 13483,
         2000,  2022,  1014,  1012,  5709,  1049,  3501,  1013,  4705,  2898,
         1029,   102])"
2638,0,[], Solutions to the quick exercises,seg_329,the solutions are:,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1996, 7300, 2024, 1024,  102])"
2639,1,"['interval', 'confidence', 'confidence interval']", Solutions to the quick exercises,seg_329,"so the confidence interval is (0.33, 0.47).",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2061,  1996,  7023, 13483,  2003,  1006,  1014,  1012,  3943,
         1010,  1014,  1012,  4700,  1007,  1012,   102])"
2640,1,"['confidence', 'confidence bound']", Solutions to the quick exercises,seg_329,24.3 the upper confidence bound is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2484, 1012, 1017, 1996, 3356, 7023, 5391, 2003, 2445, 2011,  102])"
2641,1,"['confidence level', 'confidence', 'level']", Solutions to the quick exercises,seg_329,"24.4 the confidence level changes to 99%, so we use z0.005 = 2.576 instead of 1.96 in the computation:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2484,  1012,  1018,  1996,  7023,  2504,  3431,  2000,  5585,
         1003,  1010,  2061,  2057,  2224,  1062,  2692,  1012,  4002,  2629,
         1027,  1016,  1012,  5401,  2575,  2612,  1997,  1015,  1012,  5986,
         1999,  1996, 22334,  1024,   102])"
2642,1,['measurements'], Solutions to the quick exercises,seg_329,so we need at least 107 measurements.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2061,  2057,  2342,  2012,  2560, 10550, 11702,  1012,   102])"
2643,1,"['confidence interval', 'probability', 'interval', 'experiment', 'experiments', 'confidence', 'success', 'independent']", Exercises,seg_331,"24.1 of a series of 100 (independent and identical) chemical experiments, 70 were concluded succesfully. construct a 90% confidence interval for the success probability of this type of experiment.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1015,  1997,  1037,  2186,  1997,  2531,  1006,
         2981,  1998,  7235,  1007,  5072,  7885,  1010,  3963,  2020,  5531,
        10514,  9468,  2229,  7699,  1012,  9570,  1037,  3938,  1003,  7023,
        13483,  2005,  1996,  3112,  9723,  1997,  2023,  2828,  1997,  7551,
         1012,   102])"
2644,0,[], Exercises,seg_331,"24.2 in january 2002 the euro was introduced and soon after stories started to circulate that some of the euro coins would not be fair coins, because the “national side” of some coins would be too heavy or too light (see, for example, the new scientist of january 4, 2002, but also national newspapers of that date).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([11110]),"tensor([  101,  2484,  1012,  1016,  1999,  2254,  2526,  1996,  9944,  2001,
         3107,  1998,  2574,  2044,  3441,  2318,  2000, 25022, 11890,  9869,
         2008,  2070,  1997,  1996,  9944,  7824,  2052,  2025,  2022,  4189,
         7824,  1010,  2138,  1996,  1523,  2120,  2217,  1524,  1997,  2070,
         7824,  2052,  2022,  2205,  3082,  2030,  2205,  2422,  1006,  2156,
         1010,  2005,  2742,  1010,  1996,  2047,  7155,  1997,  2254,  1018,
         1010,  2526,  1010,  2021,  2036,  2120,  6399,  1997,  2008,  3058,
         1007,  1012,   102])"
2645,1,['tails'], Exercises,seg_331,"a. a french 1 euro coin was tossed six times, resulting in 1 heads and 5 tails.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  1037,  2413,  1015,  9944,  9226,  2001,  7463,
         2416,  2335,  1010,  4525,  1999,  1015,  4641,  1998,  1019, 17448,
         1012,   102])"
2646,1,"['confidence interval', 'interval', 'wilson method', 'method', 'confidence']", Exercises,seg_331,"is it reasonable to use the wilson method, introduced in section 24.1, to construct a confidence interval for p?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2003,  2009,  9608,  2000,  2224,  1996,  4267,  4118,  1010,
         3107,  1999,  2930,  2484,  1012,  1015,  1010,  2000,  9570,  1037,
         7023, 13483,  2005,  1052,  1029,   102])"
2647,1,['tails'], Exercises,seg_331,b. a belgian 1 euro coin was tossed 250 times: 140 heads and 110 tails.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1037,  6995,  1015,  9944,  9226,  2001,  7463,
         5539,  2335,  1024,  8574,  4641,  1998,  7287, 17448,  1012,   102])"
2648,1,"['probability', 'confidence', 'confidence interval', 'interval']", Exercises,seg_331,construct a 95% confidence interval for the probability of getting heads with this coin.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  9570,  1037,  5345,  1003,  7023, 13483,  2005,  1996,  9723,
         1997,  2893,  4641,  2007,  2023,  9226,  1012,   102])"
2649,1,"['confidence interval', 'interval', 'sample', 'sample size', 'confidence']", Exercises,seg_331,"24.3 in exercise 23.1, what sample size is needed if we want a 99% confidence interval for µ at most 1 ml wide?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1017,  1999,  6912,  2603,  1012,  1015,  1010,
         2054,  7099,  2946,  2003,  2734,  2065,  2057,  2215,  1037,  5585,
         1003,  7023, 13483,  2005,  1085,  2012,  2087,  1015, 19875,  2898,
         1029,   102])"
2650,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard', 'average']", Exercises,seg_331,"24.4 recall exercise 23.3 and the 10 bags of cement that should each weigh 94 kg. the average weight was 93.5 kg, with sample standard deviation 0.75.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1018,  9131,  6912,  2603,  1012,  1017,  1998,
         1996,  2184,  8641,  1997, 11297,  2008,  2323,  2169, 17042,  6365,
         4705,  1012,  1996,  2779,  3635,  2001,  6109,  1012,  1019,  4705,
         1010,  2007,  7099,  3115, 24353,  1014,  1012,  4293,  1012,   102])"
2651,1,"['sample', 'data']", Exercises,seg_331,"a. based on these data, how many bags would you need to sample to make",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2241, 2006, 2122, 2951, 1010, 2129, 2116, 8641, 2052,
        2017, 2342, 2000, 7099, 2000, 2191,  102])"
2652,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,a 90% confidence interval that is 0.1 kg wide?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  3938,  1003,  7023, 13483,  2008,  2003,  1014,  1012,
         1015,  4705,  2898,  1029,   102])"
2653,0,[], Exercises,seg_331,b. suppose you actually do measure the required number of bags and con-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1038, 1012, 6814, 2017, 2941, 2079, 5468, 1996, 3223, 2193, 1997,
        8641, 1998, 9530, 1011,  102])"
2654,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,struct a new confidence interval. is it guaranteed to be at most 0.1 kg wide?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2358,  6820,  6593,  1037,  2047,  7023, 13483,  1012,  2003,
         2009, 12361,  2000,  2022,  2012,  2087,  1014,  1012,  1015,  4705,
         2898,  1029,   102])"
2655,1,"['confidence interval', 'probability', 'interval', 'sample', 'sample size', 'distribution', 'confidence']", Exercises,seg_331,"24.5 suppose we want to make a 95% confidence interval for the probability of getting heads with a dutch 1 euro coin, and it should be at most 0.01 wide. to determine the required sample size, we note that the probability of getting heads is about 0.5. furthermore, if x has a bin(n, p) distribution, with n large and p ≈ 0.5, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1019,  6814,  2057,  2215,  2000,  2191,  1037,
         5345,  1003,  7023, 13483,  2005,  1996,  9723,  1997,  2893,  4641,
         2007,  1037,  3803,  1015,  9944,  9226,  1010,  1998,  2009,  2323,
         2022,  2012,  2087,  1014,  1012,  5890,  2898,  1012,  2000,  5646,
         1996,  3223,  7099,  2946,  1010,  2057,  3602,  2008,  1996,  9723,
         1997,  2893,  4641,  2003,  2055,  1014,  1012,  1019,  1012,  7297,
         1010,  2065,  1060,  2038,  1037,  8026,  1006,  1050,  1010,  1052,
         1007,  4353,  1010,  2007,  1050,  2312,  1998,  1052,  1606,  1014,
         1012,  1019,  1010,  2059,   102])"
2656,1,"['standard normal', 'normal', 'standard']", Exercises,seg_331,x − np is approximately standard normal.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1060,  1597, 27937,  2003,  3155,  3115,  3671,  1012,   102])"
2657,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,a. use this statement to derive that the width of the 95% confidence interval,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2224,  2023,  4861,  2000, 18547,  2008,  1996,
         9381,  1997,  1996,  5345,  1003,  7023, 13483,   102])"
2658,0,[], Exercises,seg_331,for p is approximately z0.025 .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2005, 1052, 2003, 3155, 1062, 2692, 1012, 6185, 2629, 1012,  102])"
2659,0,['n'], Exercises,seg_331,use this width to determine how large n should be.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 2224, 2023, 9381, 2000, 5646, 2129, 2312, 1050, 2323, 2022, 1012,
         102])"
2660,0,[], Exercises,seg_331,"b. the coin is thrown the number of times just computed, resulting in 19 477",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  9226,  2003,  6908,  1996,  2193,  1997,
         2335,  2074, 24806,  1010,  4525,  1999,  2539,  4700,  2581,   102])"
2661,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,times heads. construct the 95% confidence interval and check whether the required accuracy is attained.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2335,  4641,  1012,  9570,  1996,  5345,  1003,  7023, 13483,
         1998,  4638,  3251,  1996,  3223, 10640,  2003, 12754,  1012,   102])"
2662,1,"['realization', 'random sample', 'sample', 'random', 'normal', 'samples', 'data', 'concentration']", Exercises,seg_331,"24.6 environmentalists have taken 16 samples from the wastewater of a chemical plant and measured the concentration of a certain carcinogenic substance. they found x̄16 = 2.24 (ppm) and s216 = 1.12, and want to use these data in a lawsuit against the plant. it may be assumed that the data are a realization of a normal random sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1020,  4483,  5130,  2031,  2579,  2385,  8168,
         2013,  1996, 28269,  1997,  1037,  5072,  3269,  1998,  7594,  1996,
         6693,  1997,  1037,  3056,  2482, 21081, 16505,  9415,  1012,  2027,
         2179,  1060, 16048,  1027,  1016,  1012,  2484,  1006,  4903,  2213,
         1007,  1998,  1055, 17465,  2575,  1027,  1015,  1012,  2260,  1010,
         1998,  2215,  2000,  2224,  2122,  2951,  1999,  1037,  9870,  2114,
         1996,  3269,  1012,  2009,  2089,  2022,  5071,  2008,  1996,  2951,
         2024,  1037, 12393,  1997,  1037,  3671,  6721,  7099,  1012,   102])"
2663,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,a. construct the 97.5% one-sided confidence interval that the environmen-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  9570,  1996,  5989,  1012,  1019,  1003,  2028,
         1011, 11536,  7023, 13483,  2008,  1996,  4372, 21663,  2239,  3549,
         1011,   102])"
2664,1,['concentration'], Exercises,seg_331,talists made to convince the judge that the concentration exceeds legal limits.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101, 21368,  5130,  2081,  2000,  8054,  1996,  3648,  2008,  1996,
         6693, 23651,  3423,  6537,  1012,   102])"
2665,1,['data'], Exercises,seg_331,b. the plant management uses the same data to construct a 97.5% one-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 1996, 3269, 2968, 3594, 1996, 2168, 2951, 2000, 9570,
        1037, 5989, 1012, 1019, 1003, 2028, 1011,  102])"
2666,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,sided confidence interval to show that concentrations are not too high. construct this interval as well.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101, 11536,  7023, 13483,  2000,  2265,  2008, 14061,  2024,  2025,
         2205,  2152,  1012,  9570,  2023, 13483,  2004,  2092,  1012,   102])"
2667,1,"['normal distribution', 'interval', 'observations', 'poisson', 'normal', 'limit', 'distribution', 'poisson distribution', 'central limit theorem', 'average', 'data', 'independent']", Exercises,seg_331,"24.7 consider once more the rutherford-geiger data as given in section 23.4. knowing that the number of α-particle emissions during an interval has a poisson distribution, we may see the data as observations from a pois(µ) distribution. the central limit theorem tells us that the average x̄n of a large number of independent pois(µ) approximately has a normal distribution and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1021,  5136,  2320,  2062,  1996, 18472,  1011,
        16216, 17071,  2951,  2004,  2445,  1999,  2930,  2603,  1012,  1018,
         1012,  4209,  2008,  1996,  2193,  1997,  1155,  1011, 10811, 11768,
         2076,  2019, 13483,  2038,  1037, 13433, 24077,  4353,  1010,  2057,
         2089,  2156,  1996,  2951,  2004,  9420,  2013,  1037, 13433,  2483,
         1006,  1085,  1007,  4353,  1012,  1996,  2430,  5787,  9872,  4136,
         2149,  2008,  1996,  2779,  1060,  2078,  1997,  1037,  2312,  2193,
         1997,  2981, 13433,  2483,  1006,  1085,  1007,  3155,  2038,  1037,
         3671,  4353,  1998,   102])"
2668,1,['distribution'], Exercises,seg_331,"has a distribution that is approximately n(0, 1).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2038, 1037, 4353, 2008, 2003, 3155, 1050, 1006, 1014, 1010, 1015,
        1007, 1012,  102])"
2669,1,"['confidence interval', 'interval', 'sample', 'confidence']", Exercises,seg_331,a. show that the large sample 95% confidence interval contains those values,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2265,  2008,  1996,  2312,  7099,  5345,  1003,
         7023, 13483,  3397,  2216,  5300,   102])"
2670,1,"['confidence interval', 'interval', 'sample', 'confidence']", Exercises,seg_331,b. use the result from a to construct the large sample 95% confidence interval,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2224,  1996,  2765,  2013,  1037,  2000,  9570,
         1996,  2312,  7099,  5345,  1003,  7023, 13483,   102])"
2671,1,['data'], Exercises,seg_331,based on the rutherford-geiger data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2241,  2006,  1996, 18472,  1011, 16216, 17071,  2951,  1012,
          102])"
2672,0,[], Exercises,seg_331,c. compare the result with that of exercise 23.9 b. is this surprising?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1039,  1012, 12826,  1996,  2765,  2007,  2008,  1997,  6912,
         2603,  1012,  1023,  1038,  1012,  2003,  2023, 11341,  1029,   102])"
2673,1,['results'], Exercises,seg_331,"24.8 recall exercise 23.5 about the 1500m speed-skating results in the 2002 winter olympic games. if there were no outer lane advantage, the number",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1022,  9131,  6912,  2603,  1012,  1019,  2055,
         1996, 10347,  2213,  3177,  1011, 10080,  3463,  1999,  1996,  2526,
         3467,  4386,  2399,  1012,  2065,  2045,  2020,  2053,  6058,  4644,
         5056,  1010,  1996,  2193,   102])"
2674,1,['distribution'], Exercises,seg_331,"out of the 23 completed races won by skaters starting in the outer lane would have a bin(23, p) distribution with p = 1/2, because of the lane assignment by lottery.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2041,  1997,  1996,  2603,  2949,  3837,  2180,  2011, 24789,
         3225,  1999,  1996,  6058,  4644,  2052,  2031,  1037,  8026,  1006,
         2603,  1010,  1052,  1007,  4353,  2007,  1052,  1027,  1015,  1013,
         1016,  1010,  2138,  1997,  1996,  4644,  8775,  2011, 15213,  1012,
          102])"
2675,0,[], Exercises,seg_331,"a. of the 23 races, 15 were won by the skater starting in the outer lane. use",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012,  1997,  1996,  2603,  3837,  1010,  2321,  2020,
         2180,  2011,  1996, 18815,  3225,  1999,  1996,  6058,  4644,  1012,
         2224,   102])"
2676,1,"['confidence interval', 'interval', 'information', 'wilson method', 'method', 'limit', 'central limit theorem', 'confidence']", Exercises,seg_331,"this information to construct a 95% confidence interval for p by means of the wilson method. if you think that n = 23 is probably too small to use a method based on the central limit theorem, we agree. we should be careful with conclusions we draw from this confidence interval.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2023,  2592,  2000,  9570,  1037,  5345,  1003,  7023, 13483,
         2005,  1052,  2011,  2965,  1997,  1996,  4267,  4118,  1012,  2065,
         2017,  2228,  2008,  1050,  1027,  2603,  2003,  2763,  2205,  2235,
         2000,  2224,  1037,  4118,  2241,  2006,  1996,  2430,  5787,  9872,
         1010,  2057,  5993,  1012,  2057,  2323,  2022,  6176,  2007, 15306,
         2057,  4009,  2013,  2023,  7023, 13483,  1012,   102])"
2677,0,[], Exercises,seg_331,b. the question posed earlier “is there an outer lane advantage?” implies that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  3160, 13686,  3041,  1523,  2003,  2045,
         2019,  6058,  4644,  5056,  1029,  1524, 12748,  2008,   102])"
2678,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,a one-sided confidence interval is more suitable. construct the appropriate 95% one-sided confidence interval for p by first constructing a 90% twosided confidence interval.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  2028,  1011, 11536,  7023, 13483,  2003,  2062,  7218,
         1012,  9570,  1996,  6413,  5345,  1003,  2028,  1011, 11536,  7023,
        13483,  2005,  1052,  2011,  2034, 15696,  1037,  3938,  1003,  2048,
         7363,  2094,  7023, 13483,  1012,   102])"
2679,1,"['dataset', 'realization', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_331,"24.9 suppose we have a dataset x1, . . . , x12 that may be modeled as the realization of a random sample x1, . . . , x12 from a u(0, θ) distribution, with θ unknown. let m = max{x1, . . . , x12}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  1023,  6814,  2057,  2031,  1037,  2951, 13462,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060, 12521,  2008,
         2089,  2022, 14440,  2004,  1996, 12393,  1997,  1037,  6721,  7099,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060, 12521,  2013,
         1037,  1057,  1006,  1014,  1010,  1162,  1007,  4353,  1010,  2007,
         1162,  4242,  1012,  2292,  1049,  1027,  4098,  1063,  1060,  2487,
         1010,  1012,  1012,  1012,  1010,  1060, 12521,  1065,  1012,   102])"
2680,1,"['confidence', 'realization']", Exercises,seg_331,c. suppose the realization of m is m = 3. construct the 90% confidence,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0.])",tensor([11110]),"tensor([  101,  1039,  1012,  6814,  1996, 12393,  1997,  1049,  2003,  1049,
         1027,  1017,  1012,  9570,  1996,  3938,  1003,  7023,   102])"
2681,1,"['interval', 'confidence', 'confidence interval', 'level']", Exercises,seg_331,d. derive the general expression for a confidence interval of level 1−α based,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1040,  1012, 18547,  1996,  2236,  3670,  2005,  1037,  7023,
        13483,  1997,  2504,  1015, 22543, 14608,  2241,   102])"
2682,1,['sample'], Exercises,seg_331,on a sample of size n.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2006, 1037, 7099, 1997, 2946, 1050, 1012,  102])"
2683,1,"['dataset', 'realization', 'random sample', 'sample', 'random', 'distribution']", Exercises,seg_331,"24.10 suppose we have a dataset x1, . . . , xn that may be modeled as the realization of a random sample x1, . . . , xn from an exp(λ) distribution, where λ is unknown. let sn = x1 + · · · + xn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2484,  1012,  2184,  6814,  2057,  2031,  1037,  2951, 13462,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2008,
         2089,  2022, 14440,  2004,  1996, 12393,  1997,  1037,  6721,  7099,
         1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,
         2019,  4654,  2361,  1006,  1165,  1007,  4353,  1010,  2073,  1165,
         2003,  4242,  1012,  2292,  1055,  2078,  1027,  1060,  2487,  1009,
         1087,  1087,  1087,  1009,  1060,  2078,  1012,   102])"
2684,1,['distribution'], Exercises,seg_331,"a. check that λsn has a gam(n, 1) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4638,  2008,  1165,  2015,  2078,  2038,  1037,
        11721,  2213,  1006,  1050,  1010,  1015,  1007,  4353,  1012,   102])"
2685,1,"['quantiles', 'distribution']", Exercises,seg_331,"b. the following quantiles of the gam(20, 1) distribution are given: q0.05 =",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  1996,  2206, 24110, 15286,  2015,  1997,  1996,
        11721,  2213,  1006,  2322,  1010,  1015,  1007,  4353,  2024,  2445,
         1024,  1053,  2692,  1012,  5709,  1027,   102])"
2686,1,"['interval', 'confidence', 'confidence interval']", Exercises,seg_331,13.25 and q0.95 = 27.88. use these to construct a 90% confidence interval for λ when n = 20.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2410,  1012,  2423,  1998,  1053,  2692,  1012,  5345,  1027,
         2676,  1012,  6070,  1012,  2224,  2122,  2000,  9570,  1037,  3938,
         1003,  7023, 13483,  2005,  1165,  2043,  1050,  1027,  2322,  1012,
          102])"
2687,1,"['confidence', 'model', 'statistical', 'hypotheses', 'probability', 'hypothesis', 'process', 'hypothesis testing', 'confidence intervals', 'estimates', 'intervals', 'experiment', 'distribution', 'numerical']", Testing hypotheses essentials,seg_333,"the statistical methods that we have discussed until now have been developed to infer knowledge about certain features of the model distribution that represent our quantities of interest. these inferences often take the form of numerical estimates, as either single numbers or confidence intervals. however, sometimes the conclusion to be drawn is not expressed numerically, but is concerned with choosing between two conflicting theories, or hypotheses. for instance, one has to assess whether the lifetime of a certain type of ball bearing deviates or does not deviate from the lifetime guaranteed by the manufacturer of the bearings; an engineer wants to know whether dry drilling is faster or the same as wet drilling; a gynecologist wants to find out whether smoking affects or does not affect the probability of getting pregnant; the allied forces want to know whether the german war production is equal to or smaller than what allied intelligence agencies reported. the process of formulating the possible conclusions one can draw from an experiment and choosing between two alternatives is known as hypothesis testing. in this chapter we start to explore this statistical methodology.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 5604,  1044, 22571, 14573, 23072,  6827,  2015])","tensor([  101,  1996,  7778,  4725,  2008,  2057,  2031,  6936,  2127,  2085,
         2031,  2042,  2764,  2000,  1999,  7512,  3716,  2055,  3056,  2838,
         1997,  1996,  2944,  4353,  2008,  5050,  2256, 12450,  1997,  3037,
         1012,  2122, 28937,  2015,  2411,  2202,  1996,  2433,  1997, 15973,
        10035,  1010,  2004,  2593,  2309,  3616,  2030,  7023, 14025,  1012,
         2174,  1010,  2823,  1996,  7091,  2000,  2022,  4567,  2003,  2025,
         5228, 15973,  2135,  1010,  2021,  2003,  4986,  2007, 10549,  2090,
         2048, 19326,  8106,  1010,  2030,  1044, 22571, 14573, 23072,  1012,
         2005,  6013,  1010,  2028,  2038,  2000, 14358,  3251,  1996,  6480,
         1997,  1037,  3056,  2828,  1997,  3608,  7682, 14386,  8520,  2030,
         2515,  2025, 14386,  3686,  2013,  1996,  6480, 12361,  2011,  1996,
         7751,  1997,  1996, 21714,  1025,  2019,  3992,  4122,  2000,  2113,
         3251,  4318, 15827,  2003,  5514,  2030,  1996,  2168,  2004,  4954,
        15827,  1025,  1037,  1043,  9654, 25778, 22522,  4122,  2000,  2424,
         2041,  3251,  9422, 13531,  2030,  2515,  2025,  7461,  1996,  9723,
         1997,  2893,  6875,  1025,  1996,  6035,  2749,  2215,  2000,  2113,
         3251,  1996,  2446,  2162,  2537,  2003,  5020,  2000,  2030,  3760,
         2084,  2054,  6035,  4454,  6736,  2988,  1012,  1996,  2832,  1997,
         5675,  3436,  1996,  2825, 15306,  2028,  2064,  4009,  2013,  2019,
         7551,  1998, 10549,  2090,  2048, 15955,  2003,  2124,  2004, 10744,
         5604,  1012,  1999,  2023,  3127,  2057,  2707,  2000,  8849,  2023,
         7778, 16134,  1012,   102])"
2688,1,"['hypothesis testing', 'hypothesis']", Null hypothesis and test statistic,seg_335,"we will introduce the basic concepts of hypothesis testing with an example. let us return to the analysis of german war equipment. during world war ii the allied forces received reports by the allied intelligence agencies on german war production. the numbers of produced tires, tanks, and other equipment, as claimed in these reports, were a lot higher than indicated by the observed serial numbers. the objective was to decide whether the actual produced quantities were smaller than the ones reported.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  2057,  2097,  8970,  1996,  3937,  8474,  1997, 10744,  5604,
         2007,  2019,  2742,  1012,  2292,  2149,  2709,  2000,  1996,  4106,
         1997,  2446,  2162,  3941,  1012,  2076,  2088,  2162,  2462,  1996,
         6035,  2749,  2363,  4311,  2011,  1996,  6035,  4454,  6736,  2006,
         2446,  2162,  2537,  1012,  1996,  3616,  1997,  2550, 13310,  1010,
         7286,  1010,  1998,  2060,  3941,  1010,  2004,  3555,  1999,  2122,
         4311,  1010,  2020,  1037,  2843,  3020,  2084,  5393,  2011,  1996,
         5159,  7642,  3616,  1012,  1996,  7863,  2001,  2000,  5630,  3251,
         1996,  5025,  2550, 12450,  2020,  3760,  2084,  1996,  3924,  2988,
         1012,   102])"
2689,0,[], Null hypothesis and test statistic,seg_335,for simplicity suppose that we have observed tanks with (recoded) serial numbers,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  2005, 17839,  6814,  2008,  2057,  2031,  5159,  7286,  2007,
         1006, 28667, 10244,  2094,  1007,  7642,  3616,   102])"
2690,1,"['trial', 'hypothesis', 'alternative hypothesis', 'null hypothesis', 'data']", Null hypothesis and test statistic,seg_335,"furthermore, suppose that the allied intelligence agencies report a production of 350 tanks.1 this is a lot more than we would surmise from the observed data. we want to choose between the proposition that the total number of tanks is 350 and the proposition that the total number is smaller than 350. the two competing propositions are called null hypothesis, denoted by h0, and alternative hypothesis, denoted by h1. the way we go about choosing between h0 and h1 is conceptually similar to the way a jury deliberates in a court trial. the null hypothesis corresponds to the position of the defendant: just as he is presumed to be innocent until proven guilty, so is the null hypothesis presumed to be true until the data provide convincing evidence against it. the alternative hypothesis corresponds to the charges brought against the defendant.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  7297,  1010,  6814,  2008,  1996,  6035,  4454,  6736,  3189,
         1037,  2537,  1997,  8698,  7286,  1012,  1015,  2023,  2003,  1037,
         2843,  2062,  2084,  2057,  2052,  7505, 28732,  2013,  1996,  5159,
         2951,  1012,  2057,  2215,  2000,  5454,  2090,  1996, 14848,  2008,
         1996,  2561,  2193,  1997,  7286,  2003,  8698,  1998,  1996, 14848,
         2008,  1996,  2561,  2193,  2003,  3760,  2084,  8698,  1012,  1996,
         2048,  6637, 14848,  2015,  2024,  2170, 19701, 10744,  1010, 19537,
         2011,  1044,  2692,  1010,  1998,  4522, 10744,  1010, 19537,  2011,
         1044,  2487,  1012,  1996,  2126,  2057,  2175,  2055, 10549,  2090,
         1044,  2692,  1998,  1044,  2487,  2003, 17158,  2135,  2714,  2000,
         1996,  2126,  1037,  6467, 15063,  2015,  1999,  1037,  2457,  3979,
         1012,  1996, 19701, 10744, 14788,  2000,  1996,  2597,  1997,  1996,
        13474,  1024,  2074,  2004,  2002,  2003, 14609,  2000,  2022,  7036,
         2127, 10003,  5905,  1010,  2061,  2003,  1996, 19701, 10744, 14609,
         2000,  2022,  2995,  2127,  1996,  2951,  3073, 13359,  3350,  2114,
         2009,  1012,  1996,  4522, 10744, 14788,  2000,  1996,  5571,  2716,
         2114,  1996, 13474,  1012,   102])"
2691,1,"['parameter', 'hypotheses', 'without replacement', 'realization', 'random', 'random variables', 'statistical', 'model', 'variables', 'replacement', 'statistical model']", Null hypothesis and test statistic,seg_335,"to decide whether h0 is false we use a statistical model. as argued in chapter 20 the (recoded) serial numbers are modeled as a realization of random variables x1, x2, . . . , x5 representing five draws without replacement from the numbers 1, 2, . . . , n . the parameter n represents the total number of tanks. the two hypotheses in question are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  2000,  5630,  3251,  1044,  2692,  2003,  6270,  2057,  2224,
         1037,  7778,  2944,  1012,  2004,  5275,  1999,  3127,  2322,  1996,
         1006, 28667, 10244,  2094,  1007,  7642,  3616,  2024, 14440,  2004,
         1037, 12393,  1997,  6721, 10857,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2629,  5052,  2274,  9891,
         2302,  6110,  2013,  1996,  3616,  1015,  1010,  1016,  1010,  1012,
         1012,  1012,  1010,  1050,  1012,  1996, 16381,  1050,  5836,  1996,
         2561,  2193,  1997,  7286,  1012,  1996,  2048,  1044, 22571, 14573,
        23072,  1999,  3160,  2024,   102])"
2692,1,"['hypothesis', 'alternative hypothesis', 'null hypothesis', 'test']", Null hypothesis and test statistic,seg_335,"if we reject the null hypothesis we will accept h1; we speak of rejecting h0 in favor of h1. usually, the alternative hypothesis represents the theory or belief that we would like to accept if we do reject h0. this means that we must carefully choose h1 in relation with our interests in the problem at hand. in our example we are particularly interested in whether the number of tanks is less than 350; so we test the null hypothesis against h1 : n < 350. if we would be interested in whether the number of tanks differs from 350, or is greater than 350, we would test against h1 : n = 350 or h1 : n > 350.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  2065,  2057, 15454,  1996, 19701, 10744,  2057,  2097,  5138,
         1044,  2487,  1025,  2057,  3713,  1997, 21936,  1044,  2692,  1999,
         5684,  1997,  1044,  2487,  1012,  2788,  1010,  1996,  4522, 10744,
         5836,  1996,  3399,  2030,  6772,  2008,  2057,  2052,  2066,  2000,
         5138,  2065,  2057,  2079, 15454,  1044,  2692,  1012,  2023,  2965,
         2008,  2057,  2442,  5362,  5454,  1044,  2487,  1999,  7189,  2007,
         2256,  5426,  1999,  1996,  3291,  2012,  2192,  1012,  1999,  2256,
         2742,  2057,  2024,  3391,  4699,  1999,  3251,  1996,  2193,  1997,
         7286,  2003,  2625,  2084,  8698,  1025,  2061,  2057,  3231,  1996,
        19701, 10744,  2114,  1044,  2487,  1024,  1050,  1026,  8698,  1012,
         2065,  2057,  2052,  2022,  4699,  1999,  3251,  1996,  2193,  1997,
         7286, 12980,  2013,  8698,  1010,  2030,  2003,  3618,  2084,  8698,
         1010,  2057,  2052,  3231,  2114,  1044,  2487,  1024,  1050,  1027,
         8698,  2030,  1044,  2487,  1024,  1050,  1028,  8698,  1012,   102])"
2693,1,"['realization', 'hypothesis', 'random sample', 'sample', 'random', 'expectation', 'distribution', 'null hypothesis', 'data', 'test']", Null hypothesis and test statistic,seg_335,"quick exercise 25.1 in the drilling example from sections 15.5 and 16.4 the data on drill times for dry drilling are modeled as a realization of a random sample from a distribution with expectation µ1, and similarly the data for wet drilling correspond to a distribution with expectation µ2. we want to know whether dry drilling is faster than wet drilling. to this end we test the null hypothesis h0 : µ1 = µ2 (the drill time is the same for both methods). what would you choose for h1?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  4248,  6912,  2423,  1012,  1015,  1999,  1996, 15827,  2742,
         2013,  5433,  2321,  1012,  1019,  1998,  2385,  1012,  1018,  1996,
         2951,  2006, 12913,  2335,  2005,  4318, 15827,  2024, 14440,  2004,
         1037, 12393,  1997,  1037,  6721,  7099,  2013,  1037,  4353,  2007,
        17626,  1085,  2487,  1010,  1998,  6660,  1996,  2951,  2005,  4954,
        15827, 17254,  2000,  1037,  4353,  2007, 17626,  1085,  2475,  1012,
         2057,  2215,  2000,  2113,  3251,  4318, 15827,  2003,  5514,  2084,
         4954, 15827,  1012,  2000,  2023,  2203,  2057,  3231,  1996, 19701,
        10744,  1044,  2692,  1024,  1085,  2487,  1027,  1085,  2475,  1006,
         1996, 12913,  2051,  2003,  1996,  2168,  2005,  2119,  4725,  1007,
         1012,  2054,  2052,  2017,  5454,  2005,  1044,  2487,  1029,   102])"
2694,1,"['test statistic', 'statistic', 'test']", Null hypothesis and test statistic,seg_335,"the next step is to select a criterion based on x1, x2, . . . , x5 that provides an indication about whether h0 is false. such a criterion involves a test statistic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  1996,  2279,  3357,  2003,  2000,  7276,  1037, 19229,  2241,
         2006,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2629,  2008,  3640,  2019, 12407,  2055,  3251,  1044,
         2692,  2003,  6270,  1012,  2107,  1037, 19229,  7336,  1037,  3231,
        28093,  6553,  1012,   102])"
2695,1,"['dataset', 'test statistic', 'realization', 'sample', 'random', 'random variables', 'sample statistic', 'variables', 'numerical', 'statistic', 'test']", Null hypothesis and test statistic,seg_335,"test statistic. suppose the dataset is modeled as the realization of random variables x1, x2, . . . , xn. a test statistic is any sample statistic t = h(x1, x2, . . . , xn), whose numerical value is used to decide whether we reject h0.",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  3231, 28093,  6553,  1012,  6814,  1996,  2951, 13462,  2003,
        14440,  2004,  1996, 12393,  1997,  6721, 10857,  1060,  2487,  1010,
         1060,  2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  1012,
         1037,  3231, 28093,  6553,  2003,  2151,  7099, 28093,  6553,  1056,
         1027,  1044,  1006,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  1007,  1010,  3005, 15973,  3643,
         2003,  2109,  2000,  5630,  3251,  2057, 15454,  1044,  2692,  1012,
          102])"
2696,1,"['test statistic', 'statistic', 'test']", Null hypothesis and test statistic,seg_335,in the tank example we use the test statistic,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  1999,  1996,  4951,  2742,  2057,  2224,  1996,  3231, 28093,
         6553,   102])"
2697,1,"['test statistic', 'statistic', 'test']", Null hypothesis and test statistic,seg_335,"having chosen a test statistic t , we investigate what sort of values t can attain. these values can be viewed on a credibility scale for h0, and we must determine which of these values provide evidence in favor of h0, and which provide evidence in favor of h1. first of all note that if we find a value of t larger than 350, we immediately know that h0 as well as h1 is false. if this happens, we actually should be considering another testing problem, but for the current problem of testing h0 : n = 350 against h1 : n < 350 such values are irrelevant. hence the possible values of t that are of interest to us are the integers from 5 to 350.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  2383,  4217,  1037,  3231, 28093,  6553,  1056,  1010,  2057,
         8556,  2054,  4066,  1997,  5300,  1056,  2064, 18759,  1012,  2122,
         5300,  2064,  2022,  7021,  2006,  1037, 21553,  4094,  2005,  1044,
         2692,  1010,  1998,  2057,  2442,  5646,  2029,  1997,  2122,  5300,
         3073,  3350,  1999,  5684,  1997,  1044,  2692,  1010,  1998,  2029,
         3073,  3350,  1999,  5684,  1997,  1044,  2487,  1012,  2034,  1997,
         2035,  3602,  2008,  2065,  2057,  2424,  1037,  3643,  1997,  1056,
         3469,  2084,  8698,  1010,  2057,  3202,  2113,  2008,  1044,  2692,
         2004,  2092,  2004,  1044,  2487,  2003,  6270,  1012,  2065,  2023,
         6433,  1010,  2057,  2941,  2323,  2022,  6195,  2178,  5604,  3291,
         1010,  2021,  2005,  1996,  2783,  3291,  1997,  5604,  1044,  2692,
         1024,  1050,  1027,  8698,  2114,  1044,  2487,  1024,  1050,  1026,
         8698,  2107,  5300,  2024, 22537,  1012,  6516,  1996,  2825,  5300,
         1997,  1056,  2008,  2024,  1997,  3037,  2000,  2149,  2024,  1996,
        24028,  2013,  1019,  2000,  8698,  1012,   102])"
2698,1,['expectation'], Null hypothesis and test statistic,seg_335,"if h0 is true, then what is a typical value for t and what is not? remember from section 20.1 that, because n = 5, the expectation of t is e[t ] = 5",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  2065,  1044,  2692,  2003,  2995,  1010,  2059,  2054,  2003,
         1037,  5171,  3643,  2005,  1056,  1998,  2054,  2003,  2025,  1029,
         3342,  2013,  2930,  2322,  1012,  1015,  2008,  1010,  2138,  1050,
         1027,  1019,  1010,  1996, 17626,  1997,  1056,  2003,  1041,  1031,
         1056,  1033,  1027,  1019,   102])"
2699,1,['distribution'], Null hypothesis and test statistic,seg_335,6 (n+1). this means that the distribution of t is centered around 5,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([ 101, 1020, 1006, 1050, 1009, 1015, 1007, 1012, 2023, 2965, 2008, 1996,
        4353, 1997, 1056, 2003, 8857, 2105, 1019,  102])"
2700,1,"['null hypothesis', 'hypothesis']", Null hypothesis and test statistic,seg_335,"6 values of t that deviate a lot from 292.5 are evidence against h0. values that are much greater than 292.5 are evidence against h0 but provide even stronger evidence against h1. for such values we will not reject h0 in favor of h1. also values a little smaller than 292.5 are grounds not to reject h0, because we are committed to giving h0 the benefit of the doubt. on the other hand, values of t very close to 5 should be considered as strong evidence against the null hypothesis and are in favor of h1, hence they lead to a decision to reject h0. this is summarized in figure 25.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  1020,  5300,  1997,  1056,  2008, 14386,  3686,  1037,  2843,
         2013, 25797,  1012,  1019,  2024,  3350,  2114,  1044,  2692,  1012,
         5300,  2008,  2024,  2172,  3618,  2084, 25797,  1012,  1019,  2024,
         3350,  2114,  1044,  2692,  2021,  3073,  2130,  6428,  3350,  2114,
         1044,  2487,  1012,  2005,  2107,  5300,  2057,  2097,  2025, 15454,
         1044,  2692,  1999,  5684,  1997,  1044,  2487,  1012,  2036,  5300,
         1037,  2210,  3760,  2084, 25797,  1012,  1019,  2024,  5286,  2025,
         2000, 15454,  1044,  2692,  1010,  2138,  2057,  2024,  5462,  2000,
         3228,  1044,  2692,  1996,  5770,  1997,  1996,  4797,  1012,  2006,
         1996,  2060,  2192,  1010,  5300,  1997,  1056,  2200,  2485,  2000,
         1019,  2323,  2022,  2641,  2004,  2844,  3350,  2114,  1996, 19701,
        10744,  1998,  2024,  1999,  5684,  1997,  1044,  2487,  1010,  6516,
         2027,  2599,  2000,  1037,  3247,  2000, 15454,  1044,  2692,  1012,
         2023,  2003, 22539,  1999,  3275,  2423,  1012,  1015,  1012,   102])"
2701,1,"['test statistic', 'statistic', 'test']", Null hypothesis and test statistic,seg_335,"quick exercise 25.2 another possible test statistic would be x̄5. if we use its values as a credibility scale for h0, then what are the possible values of x̄5, which values of x̄5 are in favor of h1 : n < 350, and which values are in favor of h0 : n = 350?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  4248,  6912,  2423,  1012,  1016,  2178,  2825,  3231, 28093,
         6553,  2052,  2022,  1060,  2629,  1012,  2065,  2057,  2224,  2049,
         5300,  2004,  1037, 21553,  4094,  2005,  1044,  2692,  1010,  2059,
         2054,  2024,  1996,  2825,  5300,  1997,  1060,  2629,  1010,  2029,
         5300,  1997,  1060,  2629,  2024,  1999,  5684,  1997,  1044,  2487,
         1024,  1050,  1026,  8698,  1010,  1998,  2029,  5300,  2024,  1999,
         5684,  1997,  1044,  2692,  1024,  1050,  1027,  8698,  1029,   102])"
2702,1,['data'], Null hypothesis and test statistic,seg_335,for the data we find,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([ 101, 2005, 1996, 2951, 2057, 2424,  102])"
2703,1,"['test statistic', 'realization', 'statistic', 'test']", Null hypothesis and test statistic,seg_335,as the realization of the test statistic. how do we use this to decide on h0?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([19701, 10744,  1998,  3231, 28093,  6553])","tensor([  101,  2004,  1996, 12393,  1997,  1996,  3231, 28093,  6553,  1012,
         2129,  2079,  2057,  2224,  2023,  2000,  5630,  2006,  1044,  2692,
         1029,   102])"
2704,0,[], Tail probabilities,seg_337,"as we have just seen, if h0 is true, then typical values of t are in the neighbor-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2004,  2057,  2031,  2074,  2464,  1010,  2065,  1044,  2692,
         2003,  2995,  1010,  2059,  5171,  5300,  1997,  1056,  2024,  1999,
         1996, 11429,  1011,   102])"
2705,1,"['null hypothesis', 'hypothesis']", Tail probabilities,seg_337,"6 left, the stronger evidence it provides in favor of h1. the value 61 is in the left region of figure 25.1. can we now reject h0 and conclude that n is smaller than 350, or can the fact that we observe 61 as maximum be attributed to chance? in courtroom terminology: can we reach the conclusion that the null hypothesis is false beyond reasonable doubt? one way to investigate this is to examine how likely it is that one would observe a value of t that provides even stronger evidence against h0 than 61, in the situation that n = 350. if this is very unlikely, then 61 already bears strong evidence against h0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1020,  2187,  1010,  1996,  6428,  3350,  2009,  3640,  1999,
         5684,  1997,  1044,  2487,  1012,  1996,  3643,  6079,  2003,  1999,
         1996,  2187,  2555,  1997,  3275,  2423,  1012,  1015,  1012,  2064,
         2057,  2085, 15454,  1044,  2692,  1998, 16519,  2008,  1050,  2003,
         3760,  2084,  8698,  1010,  2030,  2064,  1996,  2755,  2008,  2057,
        11949,  6079,  2004,  4555,  2022,  7108,  2000,  3382,  1029,  1999,
        20747, 18444,  1024,  2064,  2057,  3362,  1996,  7091,  2008,  1996,
        19701, 10744,  2003,  6270,  3458,  9608,  4797,  1029,  2028,  2126,
         2000,  8556,  2023,  2003,  2000, 11628,  2129,  3497,  2009,  2003,
         2008,  2028,  2052, 11949,  1037,  3643,  1997,  1056,  2008,  3640,
         2130,  6428,  3350,  2114,  1044,  2692,  2084,  6079,  1010,  1999,
         1996,  3663,  2008,  1050,  1027,  8698,  1012,  2065,  2023,  2003,
         2200,  9832,  1010,  2059,  6079,  2525,  6468,  2844,  3350,  2114,
         1044,  2692,  1012,   102])"
2706,1,"['test statistic', 'without replacement', 'replacement', 'statistic', 'test']", Tail probabilities,seg_337,"values of t that provide stronger evidence against h0 than 61 are to the left of 61. therefore we compute p(t ≤ 61). in the situation that n = 350, the test statistic t is the maximum of 5 numbers drawn without replacement from 1, 2, . . . , 350. we find that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  5300,  1997,  1056,  2008,  3073,  6428,  3350,  2114,  1044,
         2692,  2084,  6079,  2024,  2000,  1996,  2187,  1997,  6079,  1012,
         3568,  2057, 24134,  1052,  1006,  1056,  1608,  6079,  1007,  1012,
         1999,  1996,  3663,  2008,  1050,  1027,  8698,  1010,  1996,  3231,
        28093,  6553,  1056,  2003,  1996,  4555,  1997,  1019,  3616,  4567,
         2302,  6110,  2013,  1015,  1010,  1016,  1010,  1012,  1012,  1012,
         1010,  8698,  1012,  2057,  2424,  2008,   102])"
2707,1,"['probability', 'null hypothesis', 'hypothesis', 'case']", Tail probabilities,seg_337,"this probability is so small that we view the value 61 as strong evidence against the null hypothesis. indeed, if the null hypothesis would be true, then values of t that would provide the same or even stronger evidence against h0 than 61 are very unlikely to occur, i.e., they occur with probability 0.00014! in other words, the observed value 61 is exceptionally small in case h0 is true.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2023,  9723,  2003,  2061,  2235,  2008,  2057,  3193,  1996,
         3643,  6079,  2004,  2844,  3350,  2114,  1996, 19701, 10744,  1012,
         5262,  1010,  2065,  1996, 19701, 10744,  2052,  2022,  2995,  1010,
         2059,  5300,  1997,  1056,  2008,  2052,  3073,  1996,  2168,  2030,
         2130,  6428,  3350,  2114,  1044,  2692,  2084,  6079,  2024,  2200,
         9832,  2000,  5258,  1010,  1045,  1012,  1041,  1012,  1010,  2027,
         5258,  2007,  9723,  1014,  1012,  2199, 16932,   999,  1999,  2060,
         2616,  1010,  1996,  5159,  3643,  6079,  2003, 17077,  2235,  1999,
         2553,  1044,  2692,  2003,  2995,  1012,   102])"
2708,1,"['probability', 'events', 'hypothesis', 'alternative hypothesis', 'null hypothesis']", Tail probabilities,seg_337,"at this point we can do two things: either we believe that h0 is true and that something very unlikely has happened, or we believe that events with such a small probability do not happen in practice, so that t ≤ 61 could only have occurred because h0 is false. we choose to believe that things happening with probability 0.00014 are so exceptional that we reject the null hypothesis h0 : n = 350 in favor of the alternative hypothesis h1 : n < 350. in courtroom terminology: we say that a value of t smaller than or equal to 61 implies that the null hypothesis is false beyond reasonable doubt.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2012,  2023,  2391,  2057,  2064,  2079,  2048,  2477,  1024,
         2593,  2057,  2903,  2008,  1044,  2692,  2003,  2995,  1998,  2008,
         2242,  2200,  9832,  2038,  3047,  1010,  2030,  2057,  2903,  2008,
         2824,  2007,  2107,  1037,  2235,  9723,  2079,  2025,  4148,  1999,
         3218,  1010,  2061,  2008,  1056,  1608,  6079,  2071,  2069,  2031,
         4158,  2138,  1044,  2692,  2003,  6270,  1012,  2057,  5454,  2000,
         2903,  2008,  2477,  6230,  2007,  9723,  1014,  1012,  2199, 16932,
         2024,  2061, 11813,  2008,  2057, 15454,  1996, 19701, 10744,  1044,
         2692,  1024,  1050,  1027,  8698,  1999,  5684,  1997,  1996,  4522,
        10744,  1044,  2487,  1024,  1050,  1026,  8698,  1012,  1999, 20747,
        18444,  1024,  2057,  2360,  2008,  1037,  3643,  1997,  1056,  3760,
         2084,  2030,  5020,  2000,  6079, 12748,  2008,  1996, 19701, 10744,
         2003,  6270,  3458,  9608,  4797,  1012,   102])"
2709,1,"['tail', 'tail probability', 'probability']", Tail probabilities,seg_337,"in our example, the more a value of t is to the left, the stronger evidence it provides against h0. for this reason we computed the left tail probability",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1999,  2256,  2742,  1010,  1996,  2062,  1037,  3643,  1997,
         1056,  2003,  2000,  1996,  2187,  1010,  1996,  6428,  3350,  2009,
         3640,  2114,  1044,  2692,  1012,  2005,  2023,  3114,  2057, 24806,
         1996,  2187,  5725,  9723,   102])"
2710,1,"['tail', 'cases', 'test statistic', 'case', 'probability', 'tail probability', 'statistic', 'right tail probability', 'data', 'test']", Tail probabilities,seg_337,"p(t ≤ 61). in other situations, the direction in which values of t provide stronger evidence against h0 may be to the right of the observed value t, in which case one would compute a right tail probability p(t ≥ t). in both cases the tail probability expresses how likely it is to obtain a value of the test statistic t at least as extreme as the value t observed for the data. such a probability is called a p-value. in a way, the size of the p-value reflects how much evidence the observed value t provides against h0. the smaller the p-value, the stronger evidence the observed value t bears against h0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1052,  1006,  1056,  1608,  6079,  1007,  1012,  1999,  2060,
         8146,  1010,  1996,  3257,  1999,  2029,  5300,  1997,  1056,  3073,
         6428,  3350,  2114,  1044,  2692,  2089,  2022,  2000,  1996,  2157,
         1997,  1996,  5159,  3643,  1056,  1010,  1999,  2029,  2553,  2028,
         2052, 24134,  1037,  2157,  5725,  9723,  1052,  1006,  1056,  1609,
         1056,  1007,  1012,  1999,  2119,  3572,  1996,  5725,  9723, 16783,
         2129,  3497,  2009,  2003,  2000,  6855,  1037,  3643,  1997,  1996,
         3231, 28093,  6553,  1056,  2012,  2560,  2004,  6034,  2004,  1996,
         3643,  1056,  5159,  2005,  1996,  2951,  1012,  2107,  1037,  9723,
         2003,  2170,  1037,  1052,  1011,  3643,  1012,  1999,  1037,  2126,
         1010,  1996,  2946,  1997,  1996,  1052,  1011,  3643, 11138,  2129,
         2172,  3350,  1996,  5159,  3643,  1056,  3640,  2114,  1044,  2692,
         1012,  1996,  3760,  1996,  1052,  1011,  3643,  1010,  1996,  6428,
         3350,  1996,  5159,  3643,  1056,  6468,  2114,  1044,  2692,  1012,
          102])"
2711,1,"['tail', 'cases', 'probability', 'tail probability', 'case']", Tail probabilities,seg_337,"the phrase “at least as extreme as the observed value t” refers to a particular direction, namely the direction in which values of t provide stronger evidence against h0 and in favor of h1. in our example, this was to the left of 61, and the p-value corresponding to 61 was p(t ≤ 61) = 0.00014. in this case it is clear what is meant by “at least as extreme as t” and which tail probability corresponds to the p-value. however, in some testing problems one can deviate from h0 in both directions. in such cases it may not be clear what values of t are at least as extreme as the observed value, and it may be unclear how the p-value should be computed. one approach to a solution in this case is to simply compute the one-tailed p-value that corresponds to the direction in which t deviates from h0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1996,  7655,  1523,  2012,  2560,  2004,  6034,  2004,  1996,
         5159,  3643,  1056,  1524,  5218,  2000,  1037,  3327,  3257,  1010,
         8419,  1996,  3257,  1999,  2029,  5300,  1997,  1056,  3073,  6428,
         3350,  2114,  1044,  2692,  1998,  1999,  5684,  1997,  1044,  2487,
         1012,  1999,  2256,  2742,  1010,  2023,  2001,  2000,  1996,  2187,
         1997,  6079,  1010,  1998,  1996,  1052,  1011,  3643,  7978,  2000,
         6079,  2001,  1052,  1006,  1056,  1608,  6079,  1007,  1027,  1014,
         1012,  2199, 16932,  1012,  1999,  2023,  2553,  2009,  2003,  3154,
         2054,  2003,  3214,  2011,  1523,  2012,  2560,  2004,  6034,  2004,
         1056,  1524,  1998,  2029,  5725,  9723, 14788,  2000,  1996,  1052,
         1011,  3643,  1012,  2174,  1010,  1999,  2070,  5604,  3471,  2028,
         2064, 14386,  3686,  2013,  1044,  2692,  1999,  2119,  7826,  1012,
         1999,  2107,  3572,  2009,  2089,  2025,  2022,  3154,  2054,  5300,
         1997,  1056,  2024,  2012,  2560,  2004,  6034,  2004,  1996,  5159,
         3643,  1010,  1998,  2009,  2089,  2022, 10599,  2129,  1996,  1052,
         1011,  3643,  2323,  2022, 24806,  1012,  2028,  3921,  2000,  1037,
         5576,  1999,  2023,  2553,  2003,  2000,  3432, 24134,  1996,  2028,
         1011, 14578,  1052,  1011,  3643,  2008, 14788,  2000,  1996,  3257,
         1999,  2029,  1056, 14386,  8520,  2013,  1044,  2692,  1012,   102])"
2712,1,['test'], Tail probabilities,seg_337,"quick exercise 25.3 suppose that the allied intelligence agencies had reported a production of 80 tanks, so that we would test h0 : n = 80 against h1 : n < 80. compute the p-value corresponding to 61. would you conclude h0 is false beyond reasonable doubt?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  4248,  6912,  2423,  1012,  1017,  6814,  2008,  1996,  6035,
         4454,  6736,  2018,  2988,  1037,  2537,  1997,  3770,  7286,  1010,
         2061,  2008,  2057,  2052,  3231,  1044,  2692,  1024,  1050,  1027,
         3770,  2114,  1044,  2487,  1024,  1050,  1026,  3770,  1012, 24134,
         1996,  1052,  1011,  3643,  7978,  2000,  6079,  1012,  2052,  2017,
        16519,  1044,  2692,  2003,  6270,  3458,  9608,  4797,  1029,   102])"
2713,1,"['hypothesis', 'null hypothesis', 'expected value', 'case']", Type I and type II errors,seg_339,suppose that the maximum is 200 instead of 61. this is also to the left of the expected value 292.5 of t . is it far enough to the left to reject the null hypothesis? in this case the p-value is equal to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  6814,  2008,  1996,  4555,  2003,  3263,  2612,  1997,  6079,
         1012,  2023,  2003,  2036,  2000,  1996,  2187,  1997,  1996,  3517,
         3643, 25797,  1012,  1019,  1997,  1056,  1012,  2003,  2009,  2521,
         2438,  2000,  1996,  2187,  2000, 15454,  1996, 19701, 10744,  1029,
         1999,  2023,  2553,  1996,  1052,  1011,  3643,  2003,  5020,  2000,
          102])"
2714,1,"['cases', 'probability', 'hypothesis', 'null hypothesis']", Type I and type II errors,seg_339,"this means that if the total number of produced tanks is 350, then in 5.96% of all cases we would observe a value of t that is at least as extreme as the value 200. before we decide whether 0.0596 is small enough to reject the null hypothesis let us explore in more detail what the preceding probability stands for.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  2023,  2965,  2008,  2065,  1996,  2561,  2193,  1997,  2550,
         7286,  2003,  8698,  1010,  2059,  1999,  1019,  1012,  5986,  1003,
         1997,  2035,  3572,  2057,  2052, 11949,  1037,  3643,  1997,  1056,
         2008,  2003,  2012,  2560,  2004,  6034,  2004,  1996,  3643,  3263,
         1012,  2077,  2057,  5630,  3251,  1014,  1012,  5709,  2683,  2575,
         2003,  2235,  2438,  2000, 15454,  1996, 19701, 10744,  2292,  2149,
         8849,  1999,  2062,  6987,  2054,  1996, 11003,  9723,  4832,  2005,
         1012,   102])"
2715,1,['data'], Type I and type II errors,seg_339,it is important to distinguish between (1) the true state of nature: h0 is true or h1 is true and (2) our decision: we reject or do not reject h0 on the basis of the data. in our example the possibilities for the true state of nature are:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  2009,  2003,  2590,  2000, 10782,  2090,  1006,  1015,  1007,
         1996,  2995,  2110,  1997,  3267,  1024,  1044,  2692,  2003,  2995,
         2030,  1044,  2487,  2003,  2995,  1998,  1006,  1016,  1007,  2256,
         3247,  1024,  2057, 15454,  2030,  2079,  2025, 15454,  1044,  2692,
         2006,  1996,  3978,  1997,  1996,  2951,  1012,  1999,  2256,  2742,
         1996, 12020,  2005,  1996,  2995,  2110,  1997,  3267,  2024,  1024,
          102])"
2716,0,[], Type I and type II errors,seg_339,"ĺ h1 is true, i.e., the number of tanks produced is less than 350.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([ 101, 1048, 1044, 2487, 2003, 2995, 1010, 1045, 1012, 1041, 1012, 1010,
        1996, 2193, 1997, 7286, 2550, 2003, 2625, 2084, 8698, 1012,  102])"
2717,0,[], Type I and type II errors,seg_339,we do not know in which situation we are. there are two possible decisions:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([ 101, 2057, 2079, 2025, 2113, 1999, 2029, 3663, 2057, 2024, 1012, 2045,
        2024, 2048, 2825, 6567, 1024,  102])"
2718,0,[], Type I and type II errors,seg_339,"this leads to four possible situations, which are summarized in figure 25.2.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  2023,  5260,  2000,  2176,  2825,  8146,  1010,  2029,  2024,
        22539,  1999,  3275,  2423,  1012,  1016,  1012,   102])"
2719,1,"['type ii errors', 'type ii', 'hypothesis', 'errors', 'alternative hypothesis', 'null hypothesis', 'data', 'type i and type ii errors']", Type I and type II errors,seg_339,"there are two situations in which the decision made on the basis of the data is wrong. the null hypothesis h0 may be true, whereas the data lead to rejection of h0. on the other hand, the alternative hypothesis h1 may be true, whereas we do not reject h0 on the basis of the data. these wrong decisions are called type i and type ii errors.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 1., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  2045,  2024,  2048,  8146,  1999,  2029,  1996,  3247,  2081,
         2006,  1996,  3978,  1997,  1996,  2951,  2003,  3308,  1012,  1996,
        19701, 10744,  1044,  2692,  2089,  2022,  2995,  1010,  6168,  1996,
         2951,  2599,  2000, 13893,  1997,  1044,  2692,  1012,  2006,  1996,
         2060,  2192,  1010,  1996,  4522, 10744,  1044,  2487,  2089,  2022,
         2995,  1010,  6168,  2057,  2079,  2025, 15454,  1044,  2692,  2006,
         1996,  3978,  1997,  1996,  2951,  1012,  2122,  3308,  6567,  2024,
         2170,  2828,  1045,  1998,  2828,  2462, 10697,  1012,   102])"
2720,1,"['type ii error', 'type ii', 'errors', 'type i error', 'error']", Type I and type II errors,seg_339,type i and ii errors. a type i error occurs if we falsely reject h0. a type ii error occurs if we falsely do not reject h0.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  2828,  1045,  1998,  2462, 10697,  1012,  1037,  2828,  1045,
         7561,  5158,  2065,  2057, 23123, 15454,  1044,  2692,  1012,  1037,
         2828,  2462,  7561,  5158,  2065,  2057, 23123,  2079,  2025, 15454,
         1044,  2692,  1012,   102])"
2721,1,"['type ii error', 'type ii', 'type i error', 'error']", Type I and type II errors,seg_339,"in courtroom terminology, a type i error corresponds to convicting an innocent defendant, whereas a type ii error corresponds to acquitting a criminal.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  1999, 20747, 18444,  1010,  1037,  2828,  1045,  7561, 14788,
         2000, 20462,  2075,  2019,  7036, 13474,  1010,  6168,  1037,  2828,
         2462,  7561, 14788,  2000,  9353, 15549, 13027,  1037,  4735,  1012,
          102])"
2722,1,"['mean', 'risk', 'probability', 'type i error', 'error']", Type I and type II errors,seg_339,"if h0 : n = 350 is true, then the decision to reject h0 is a type i error. we will never know whether we make a type i error. however, given a particular decision rule, we can say something about the probability of committing a type i error. suppose the decision rule would be “reject h0 : n = 350 whenever t ≤ 200.” with this decision rule the probability of committing a type i error is p(t ≤ 200) = 0.0596. if we are willing to run the risk of committing a type i error with probability 0.0596, we could adopt this decision rule. this would also mean that on the basis of an observed maximum of 200 we would reject h0 in favor of h1 : n < 350.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  2065,  1044,  2692,  1024,  1050,  1027,  8698,  2003,  2995,
         1010,  2059,  1996,  3247,  2000, 15454,  1044,  2692,  2003,  1037,
         2828,  1045,  7561,  1012,  2057,  2097,  2196,  2113,  3251,  2057,
         2191,  1037,  2828,  1045,  7561,  1012,  2174,  1010,  2445,  1037,
         3327,  3247,  3627,  1010,  2057,  2064,  2360,  2242,  2055,  1996,
         9723,  1997, 16873,  1037,  2828,  1045,  7561,  1012,  6814,  1996,
         3247,  3627,  2052,  2022,  1523, 15454,  1044,  2692,  1024,  1050,
         1027,  8698,  7188,  1056,  1608,  3263,  1012,  1524,  2007,  2023,
         3247,  3627,  1996,  9723,  1997, 16873,  1037,  2828,  1045,  7561,
         2003,  1052,  1006,  1056,  1608,  3263,  1007,  1027,  1014,  1012,
         5709,  2683,  2575,  1012,  2065,  2057,  2024,  5627,  2000,  2448,
         1996,  3891,  1997, 16873,  1037,  2828,  1045,  7561,  2007,  9723,
         1014,  1012,  5709,  2683,  2575,  1010,  2057,  2071, 11092,  2023,
         3247,  3627,  1012,  2023,  2052,  2036,  2812,  2008,  2006,  1996,
         3978,  1997,  2019,  5159,  4555,  1997,  3263,  2057,  2052, 15454,
         1044,  2692,  1999,  5684,  1997,  1044,  2487,  1024,  1050,  1026,
         8698,  1012,   102])"
2723,1,"['probability', 'hypothesis', 'type i error', 'null hypothesis', 'error']", Type I and type II errors,seg_339,"quick exercise 25.4 suppose we adopt the following decision rule about the null hypothesis: “reject h0 : n = 350 whenever t ≤ 250.” using this decision rule, what is the probability of committing a type i error?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  4248,  6912,  2423,  1012,  1018,  6814,  2057, 11092,  1996,
         2206,  3247,  3627,  2055,  1996, 19701, 10744,  1024,  1523, 15454,
         1044,  2692,  1024,  1050,  1027,  8698,  7188,  1056,  1608,  5539,
         1012,  1524,  2478,  2023,  3247,  3627,  1010,  2054,  2003,  1996,
         9723,  1997, 16873,  1037,  2828,  1045,  7561,  1029,   102])"
2724,1,"['probability', 'risk', 'level']", Type I and type II errors,seg_339,"the question remains what amount of risk one is willing to take to falsely reject h0, or in courtroom terminology: how small should the p-value be to reach a conclusion that is “beyond reasonable doubt”? in many situations, as a rule of thumb 0.05 is used as the level where reasonable doubt begins. something happening with probability less than or equal to 0.05 is then viewed as being too exceptional. however, there is no general rule that specifies how small the p-value must be to reject h0. there is no way to argue that this probability should be below 0.10 or 0.18 or 0.009—or anything else.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  1996,  3160,  3464,  2054,  3815,  1997,  3891,  2028,  2003,
         5627,  2000,  2202,  2000, 23123, 15454,  1044,  2692,  1010,  2030,
         1999, 20747, 18444,  1024,  2129,  2235,  2323,  1996,  1052,  1011,
         3643,  2022,  2000,  3362,  1037,  7091,  2008,  2003,  1523,  3458,
         9608,  4797,  1524,  1029,  1999,  2116,  8146,  1010,  2004,  1037,
         3627,  1997,  7639,  1014,  1012,  5709,  2003,  2109,  2004,  1996,
         2504,  2073,  9608,  4797,  4269,  1012,  2242,  6230,  2007,  9723,
         2625,  2084,  2030,  5020,  2000,  1014,  1012,  5709,  2003,  2059,
         7021,  2004,  2108,  2205, 11813,  1012,  2174,  1010,  2045,  2003,
         2053,  2236,  3627,  2008, 27171,  2129,  2235,  1996,  1052,  1011,
         3643,  2442,  2022,  2000, 15454,  1044,  2692,  1012,  2045,  2003,
         2053,  2126,  2000,  7475,  2008,  2023,  9723,  2323,  2022,  2917,
         1014,  1012,  2184,  2030,  1014,  1012,  2324,  2030,  1014,  1012,
         4002,  2683,  1517,  2030,  2505,  2842,  1012,   102])"
2725,1,"['dataset', 'test statistic', 'information', 'hypothesis', 'level', 'null hypothesis', 'statistic', 'test']", Type I and type II errors,seg_339,a possible solution is to solely report the p-value corresponding to the observed value of the test statistic. this is objective and does not have the arbitrariness of a preselected level such as 0.05. an investigator who reports the p-value conveys the maximum amount of information contained in the dataset and permits all decision makers to choose their own level and make their own decision about the null hypothesis. this is especially important when there is no justifiable reason for preselecting a particular value for such a level.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 2828,  1045,  1998,  2828,  2462, 10697])","tensor([  101,  1037,  2825,  5576,  2003,  2000,  9578,  3189,  1996,  1052,
         1011,  3643,  7978,  2000,  1996,  5159,  3643,  1997,  1996,  3231,
        28093,  6553,  1012,  2023,  2003,  7863,  1998,  2515,  2025,  2031,
         1996, 12098, 16313, 19848,  9961,  1997,  1037,  3653, 11246, 22471,
         2098,  2504,  2107,  2004,  1014,  1012,  5709,  1012,  2019, 14064,
         2040,  4311,  1996,  1052,  1011,  3643, 16636,  2015,  1996,  4555,
         3815,  1997,  2592,  4838,  1999,  1996,  2951, 13462,  1998, 14245,
         2035,  3247, 11153,  2000,  5454,  2037,  2219,  2504,  1998,  2191,
         2037,  2219,  3247,  2055,  1996, 19701, 10744,  1012,  2023,  2003,
         2926,  2590,  2043,  2045,  2003,  2053,  2074, 10128, 19210,  3114,
         2005,  3653, 11246, 22471,  2075,  1037,  3327,  3643,  2005,  2107,
         1037,  2504,  1012,   102])"
2726,0,[], Solutions to the quick exercises,seg_341,"25.1 one is interested in whether dry drilling is faster than wet drilling. hence if we reject h0 : µ1 = µ2, we would like to conclude that the drill time is smaller for dry drilling than for wet drilling. since µ1 and µ2 represent the drill time for dry and wet drilling, we should choose h1 : µ1 < µ2.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2423,  1012,  1015,  2028,  2003,  4699,  1999,  3251,  4318,
        15827,  2003,  5514,  2084,  4954, 15827,  1012,  6516,  2065,  2057,
        15454,  1044,  2692,  1024,  1085,  2487,  1027,  1085,  2475,  1010,
         2057,  2052,  2066,  2000, 16519,  2008,  1996, 12913,  2051,  2003,
         3760,  2005,  4318, 15827,  2084,  2005,  4954, 15827,  1012,  2144,
         1085,  2487,  1998,  1085,  2475,  5050,  1996, 12913,  2051,  2005,
         4318,  1998,  4954, 15827,  1010,  2057,  2323,  5454,  1044,  2487,
         1024,  1085,  2487,  1026,  1085,  2475,  1012,   102])"
2727,1,"['unbiased estimator', 'estimator', 'unbiased']", Solutions to the quick exercises,seg_341,"25.2 the value of x̄5 is at least 3 and if we find a value of x̄5 that is larger than 348, then at least one of the five numbers must be greater than 350, so that we immediately know that h0 as well as h1 is false. hence the possible values of x̄5 that are relevant for our testing problem are between 3 and 348. we know from section 20.1 that 2x̄5 − 1 is an unbiased estimator for n , no matter what the value of n is. this implies that values of x̄5 itself are centered around (n + 1)/2. hence values close to 351/2=175.5 are in favor of h0, whereas values close to 3 are in favor of h1. values close to 348 are against h0, but also against h1. see figure 25.3.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2423,  1012,  1016,  1996,  3643,  1997,  1060,  2629,  2003,
         2012,  2560,  1017,  1998,  2065,  2057,  2424,  1037,  3643,  1997,
         1060,  2629,  2008,  2003,  3469,  2084,  4090,  2620,  1010,  2059,
         2012,  2560,  2028,  1997,  1996,  2274,  3616,  2442,  2022,  3618,
         2084,  8698,  1010,  2061,  2008,  2057,  3202,  2113,  2008,  1044,
         2692,  2004,  2092,  2004,  1044,  2487,  2003,  6270,  1012,  6516,
         1996,  2825,  5300,  1997,  1060,  2629,  2008,  2024,  7882,  2005,
         2256,  5604,  3291,  2024,  2090,  1017,  1998,  4090,  2620,  1012,
         2057,  2113,  2013,  2930,  2322,  1012,  1015,  2008,  1016,  2595,
         2629,  1597,  1015,  2003,  2019,  4895, 11607,  6924,  9765,  9581,
         4263,  2005,  1050,  1010,  2053,  3043,  2054,  1996,  3643,  1997,
         1050,  2003,  1012,  2023, 12748,  2008,  5300,  1997,  1060,  2629,
         2993,  2024,  8857,  2105,  1006,  1050,  1009,  1015,  1007,  1013,
         1016,  1012,  6516,  5300,  2485,  2000, 28474,  1013,  1016,  1027,
        12862,  1012,  1019,  2024,  1999,  5684,  1997,  1044,  2692,  1010,
         6168,  5300,  2485,  2000,  1017,  2024,  1999,  5684,  1997,  1044,
         2487,  1012,  5300,  2485,  2000,  4090,  2620,  2024,  2114,  1044,
         2692,  1010,  2021,  2036,  2114,  1044,  2487,  1012,  2156,  3275,
         2423,  1012,  1017,  1012,   102])"
2728,0,[], Solutions to the quick exercises,seg_341,25.3 the p-value corresponding to 61 is now equal to,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2423, 1012, 1017, 1996, 1052, 1011, 3643, 7978, 2000, 6079, 2003,
        2085, 5020, 2000,  102])"
2729,0,[], Solutions to the quick exercises,seg_341,"if h0 is true, then in 24.75% of the time one will observe a value t less than or equal to 61. such values are not exceptionally small for t under h0, and therefore the evidence that the value 61 bears against h0 is pretty weak. we cannot reject h0 beyond reasonable doubt.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2065,  1044,  2692,  2003,  2995,  1010,  2059,  1999,  2484,
         1012,  4293,  1003,  1997,  1996,  2051,  2028,  2097, 11949,  1037,
         3643,  1056,  2625,  2084,  2030,  5020,  2000,  6079,  1012,  2107,
         5300,  2024,  2025, 17077,  2235,  2005,  1056,  2104,  1044,  2692,
         1010,  1998,  3568,  1996,  3350,  2008,  1996,  3643,  6079,  6468,
         2114,  1044,  2692,  2003,  3492,  5410,  1012,  2057,  3685, 15454,
         1044,  2692,  3458,  9608,  4797,  1012,   102])"
2730,1,"['probability', 'type i error', 'error', 'associated']", Solutions to the quick exercises,seg_341,25.4 the type i error associated with the decision rule occurs if n = 350 (h0 is true) and t ≤ 250 (reject h0). the probability that this happens is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2423,  1012,  1018,  1996,  2828,  1045,  7561,  3378,  2007,
         1996,  3247,  3627,  5158,  2065,  1050,  1027,  8698,  1006,  1044,
         2692,  2003,  2995,  1007,  1998,  1056,  1608,  5539,  1006, 15454,
         1044,  2692,  1007,  1012,  1996,  9723,  2008,  2023,  6433,  2003,
          102])"
2731,1,"['variance', 'variation', 'hypothesis', 'random sample', 'sample', 'random', 'tests', 'alternative hypothesis', 'distribution', 'null hypothesis']", Exercises,seg_343,"25.1 in a study about train delays in the netherlands one was interested in whether arrival delays of trains exhibit more variation during rush hours than during quiet hours. the observed arrival delays during rush hours are modeled as realizations of a random sample from a distribution with variance σ12, and similarly the observed arrival delays during quiet hours correspond to a distribution with variance σ22. one tests the null hypothesis h0 : σ1 = σ2. what do you choose as the alternative hypothesis?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1015,  1999,  1037,  2817,  2055,  3345, 14350,
         1999,  1996,  4549,  2028,  2001,  4699,  1999,  3251,  5508, 14350,
         1997,  4499,  8327,  2062,  8386,  2076,  5481,  2847,  2084,  2076,
         4251,  2847,  1012,  1996,  5159,  5508, 14350,  2076,  5481,  2847,
         2024, 14440,  2004, 12393,  2015,  1997,  1037,  6721,  7099,  2013,
         1037,  4353,  2007, 23284,  1173, 12521,  1010,  1998,  6660,  1996,
         5159,  5508, 14350,  2076,  4251,  2847, 17254,  2000,  1037,  4353,
         2007, 23284,  1173, 19317,  1012,  2028,  5852,  1996, 19701, 10744,
         1044,  2692,  1024,  1173,  2487,  1027,  1173,  2475,  1012,  2054,
         2079,  2017,  5454,  2004,  1996,  4522, 10744,  1029,   102])"
2732,1,"['parameter', 'poisson random variable', 'random variable', 'hypothesis', 'poisson', 'random', 'alternative hypothesis', 'average', 'variable', 'test']", Exercises,seg_343,"25.2 on average, the number of babies born in cleveland, ohio, in the month of september is 1472. on january 26, 1977, the city was immobilized by a blizzard. nine months later, in september 1977, the recorded number of births was 1718. can the increase of 246 be attributed to chance? to investigate this, the number of births in the month of september is modeled by a poisson random variable with parameter µ, and we test h0 : µ = 1472. what would you choose as the alternative hypothesis?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1016,  2006,  2779,  1010,  1996,  2193,  1997,
        10834,  2141,  1999,  6044,  1010,  4058,  1010,  1999,  1996,  3204,
         1997,  2244,  2003, 16471,  2475,  1012,  2006,  2254,  2656,  1010,
         3355,  1010,  1996,  2103,  2001, 10047,  5302, 14454,  3550,  2011,
         1037, 21689,  1012,  3157,  2706,  2101,  1010,  1999,  2244,  3355,
         1010,  1996,  2680,  2193,  1997, 18250,  2001, 26995,  1012,  2064,
         1996,  3623,  1997, 22376,  2022,  7108,  2000,  3382,  1029,  2000,
         8556,  2023,  1010,  1996,  2193,  1997, 18250,  1999,  1996,  3204,
         1997,  2244,  2003, 14440,  2011,  1037, 13433, 24077,  6721,  8023,
         2007, 16381,  1085,  1010,  1998,  2057,  3231,  1044,  2692,  1024,
         1085,  1027, 16471,  2475,  1012,  2054,  2052,  2017,  5454,  2004,
         1996,  4522, 10744,  1029,   102])"
2733,1,"['regression', 'null hypothesis', 'regression line', 'hypothesis', 'alternative hypothesis', 'scatterplot', 'parameters']", Exercises,seg_343,25.3 recall exercise 17.9 about black cherry trees. the scatterplot of y (volume) versus x = d2h (squared diameter times height) seems to indicate that the regression line y = α + βx runs through the origin. one wants to investigate whether this is true by means of a testing problem. formulate a null hypothesis and alternative hypothesis in terms of (one of) the parameters α and β.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1017,  9131,  6912,  2459,  1012,  1023,  2055,
         2304,  9115,  3628,  1012,  1996,  8040, 20097, 24759,  4140,  1997,
         1061,  1006,  3872,  1007,  6431,  1060,  1027,  1040,  2475,  2232,
         1006, 19942,  6705,  2335,  4578,  1007,  3849,  2000,  5769,  2008,
         1996, 26237,  2240,  1061,  1027,  1155,  1009,  1156,  2595,  3216,
         2083,  1996,  4761,  1012,  2028,  4122,  2000,  8556,  3251,  2023,
         2003,  2995,  2011,  2965,  1997,  1037,  5604,  3291,  1012,  5675,
         2618,  1037, 19701, 10744,  1998,  4522, 10744,  1999,  3408,  1997,
         1006,  2028,  1997,  1007,  1996, 11709,  1155,  1998,  1156,  1012,
          102])"
2734,1,"['parameter', 'geometric', 'random samples', 'geometric distribution', 'distributions', 'random', 'samples', 'distribution']", Exercises,seg_343,"25.4 consider the example from section 4.4 about the number of cycles up to pregnancy of smoking and nonsmoking women. suppose the observed number of cycles are modeled as realizations of random samples from geometric distributions. let p1 be the parameter of the geometric distribution corresponding to smoking women and p2 be the parameter for the nonsmoking women. we are interested in whether p1 is different from p2, and we investigate this by testing h0 : p1 = p2 against h1 : p1 = p2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1018,  5136,  1996,  2742,  2013,  2930,  1018,
         1012,  1018,  2055,  1996,  2193,  1997, 12709,  2039,  2000, 10032,
         1997,  9422,  1998,  2512, 25855,  6834,  2308,  1012,  6814,  1996,
         5159,  2193,  1997, 12709,  2024, 14440,  2004, 12393,  2015,  1997,
         6721,  8168,  2013, 14965, 20611,  1012,  2292,  1052,  2487,  2022,
         1996, 16381,  1997,  1996, 14965,  4353,  7978,  2000,  9422,  2308,
         1998,  1052,  2475,  2022,  1996, 16381,  2005,  1996,  2512, 25855,
         6834,  2308,  1012,  2057,  2024,  4699,  1999,  3251,  1052,  2487,
         2003,  2367,  2013,  1052,  2475,  1010,  1998,  2057,  8556,  2023,
         2011,  5604,  1044,  2692,  1024,  1052,  2487,  1027,  1052,  2475,
         2114,  1044,  2487,  1024,  1052,  2487,  1027,  1052,  2475,  1012,
          102])"
2735,1,"['data', 'test']", Exercises,seg_343,"a. if the data are as given in exercise 17.5, what would you choose as a test",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 2065, 1996, 2951, 2024, 2004, 2445, 1999, 6912, 2459,
        1012, 1019, 1010, 2054, 2052, 2017, 5454, 2004, 1037, 3231,  102])"
2736,1,"['test statistic', 'statistic', 'test']", Exercises,seg_343,"b. what would you choose as a test statistic, if you were given the extra",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2054,  2052,  2017,  5454,  2004,  1037,  3231,
        28093,  6553,  1010,  2065,  2017,  2020,  2445,  1996,  4469,   102])"
2737,1,['table'], Exercises,seg_343,knowledge as in table 21.1?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 3716, 2004, 1999, 2795, 2538, 1012, 1015, 1029,  102])"
2738,0,[], Exercises,seg_343,c. suppose we are interested in whether smoking women are less likely to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1039, 1012, 6814, 2057, 2024, 4699, 1999, 3251, 9422, 2308, 2024,
        2625, 3497, 2000, 2131,  102])"
2739,1,"['alternative hypothesis', 'hypothesis', 'case']", Exercises,seg_343,pregnant than nonsmoking women. what is the appropriate alternative hypothesis in this case?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  6875,  2084,  2512, 25855,  6834,  2308,  1012,  2054,  2003,
         1996,  6413,  4522, 10744,  1999,  2023,  2553,  1029,   102])"
2740,1,"['dataset', 'uniform distribution', 'realization', 'random sample', 'sample', 'random', 'distribution', 'test']", Exercises,seg_343,"25.5 suppose a dataset is a realization of a random sample x1, x2, . . . , xn from a uniform distribution on [0, θ], for some (unknown) θ > 0. we test h0 : θ = 5 versus h1 : θ = 5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1019,  6814,  1037,  2951, 13462,  2003,  1037,
        12393,  1997,  1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,  1037,  6375,
         4353,  2006,  1031,  1014,  1010,  1162,  1033,  1010,  2005,  2070,
         1006,  4242,  1007,  1162,  1028,  1014,  1012,  2057,  3231,  1044,
         2692,  1024,  1162,  1027,  1019,  6431,  1044,  2487,  1024,  1162,
         1027,  1019,  1012,   102])"
2741,1,"['test statistic', 'statistic', 'test']", Exercises,seg_343,"a. we take t1 = max{x1, x2, . . . , xn} as our test statistic. specify what",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2057,  2202,  1056,  2487,  1027,  4098,  1063,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,  1010,
         1060,  2078,  1065,  2004,  2256,  3231, 28093,  6553,  1012, 20648,
         2054,   102])"
2742,0,[], Exercises,seg_343,"the (relevant) possible values are for t and which are in favor of h0 and which are in favor of h1. for instance, make a picture like figure 25.1.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1996, 1006, 7882, 1007, 2825, 5300, 2024, 2005, 1056, 1998, 2029,
        2024, 1999, 5684, 1997, 1044, 2692, 1998, 2029, 2024, 1999, 5684, 1997,
        1044, 2487, 1012, 2005, 6013, 1010, 2191, 1037, 3861, 2066, 3275, 2423,
        1012, 1015, 1012,  102])"
2743,1,"['test statistic', 'statistic', 'test']", Exercises,seg_343,"b. same as a, but now for test statistic t2 = |2x̄n − 5|.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2168,  2004,  1037,  1010,  2021,  2085,  2005,
         3231, 28093,  6553,  1056,  2475,  1027,  1064,  1016,  2595,  2078,
         1597,  1019,  1064,  1012,   102])"
2744,1,"['continuous', 'tail', 'test statistic', 'case', 'probability', 'hypothesis', 'tail probability', 'sampling', 'distribution', 'null hypothesis', 'right tail probability', 'statistic', 'sampling distribution', 'test']", Exercises,seg_343,"25.6 to test a certain null hypothesis h0 one uses a test statistic t with a continuous sampling distribution. one agrees that h0 is rejected if one observes a value t of the test statistic for which (under h0) the right tail probability p(t ≥ t) is smaller than or equal to 0.05. given below are different values t and a corresponding left or right tail probability (under h0). specify for each case what the p-value is, if possible, and whether we should reject h0.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1020,  2000,  3231,  1037,  3056, 19701, 10744,
         1044,  2692,  2028,  3594,  1037,  3231, 28093,  6553,  1056,  2007,
         1037,  7142, 16227,  4353,  1012,  2028, 10217,  2008,  1044,  2692,
         2003,  5837,  2065,  2028, 24451,  1037,  3643,  1056,  1997,  1996,
         3231, 28093,  6553,  2005,  2029,  1006,  2104,  1044,  2692,  1007,
         1996,  2157,  5725,  9723,  1052,  1006,  1056,  1609,  1056,  1007,
         2003,  3760,  2084,  2030,  5020,  2000,  1014,  1012,  5709,  1012,
         2445,  2917,  2024,  2367,  5300,  1056,  1998,  1037,  7978,  2187,
         2030,  2157,  5725,  9723,  1006,  2104,  1044,  2692,  1007,  1012,
        20648,  2005,  2169,  2553,  2054,  1996,  1052,  1011,  3643,  2003,
         1010,  2065,  2825,  1010,  1998,  3251,  2057,  2323, 15454,  1044,
         2692,  1012,   102])"
2745,1,"['parameter', 'poisson random variable', 'random variable', 'poisson', 'random', 'variable', 'test']", Exercises,seg_343,"25.7 (exercise 25.2 continued). the number of births in september is modeled by a poisson random variable t with parameter µ, which represents the expected number of births. suppose that one uses t to test the null hypothesis h0 : µ = 1472 and that one decides to reject h0 on the basis of observing the value t = 1718.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1021,  1006,  6912,  2423,  1012,  1016,  2506,
         1007,  1012,  1996,  2193,  1997, 18250,  1999,  2244,  2003, 14440,
         2011,  1037, 13433, 24077,  6721,  8023,  1056,  2007, 16381,  1085,
         1010,  2029,  5836,  1996,  3517,  2193,  1997, 18250,  1012,  6814,
         2008,  2028,  3594,  1056,  2000,  3231,  1996, 19701, 10744,  1044,
         2692,  1024,  1085,  1027, 16471,  2475,  1998,  2008,  2028,  7288,
         2000, 15454,  1044,  2692,  2006,  1996,  3978,  1997, 14158,  1996,
         3643,  1056,  1027, 26995,  1012,   102])"
2746,0,[], Exercises,seg_343,a. in which direction do values of t provide evidence against h0 (and in,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 1037, 1012, 1999, 2029, 3257, 2079, 5300, 1997, 1056, 3073, 3350,
        2114, 1044, 2692, 1006, 1998, 1999,  102])"
2747,0,[], Exercises,seg_343,"b. compute the p-value corresponding to t = 1718, where you may use the",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  1052,  1011,  3643,  7978,  2000,
         1056,  1027, 26995,  1010,  2073,  2017,  2089,  2224,  1996,   102])"
2748,1,['distribution'], Exercises,seg_343,"fact that the distribution of t can be approximated by an n(µ, µ) distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2755,  2008,  1996,  4353,  1997,  1056,  2064,  2022, 15796,
         2094,  2011,  2019,  1050,  1006,  1085,  1010,  1085,  1007,  4353,
         1012,   102])"
2749,1,"['null hypothesis', 'dataset', 'normal distribution', 'normal', 'statistic', 'test', 'test statistic', 'standard normal distribution', 'hypothesis', 'random sample', 'standard', 'standard normal', 'sample', 'random', 'distribution']", Exercises,seg_343,25.8 suppose we want to test the null hypothesis that our dataset is a realization of a random sample from a standard normal distribution. as test statistic we use the kolmogorov-smirnov distance between the empirical distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1022,  6814,  2057,  2215,  2000,  3231,  1996,
        19701, 10744,  2008,  2256,  2951, 13462,  2003,  1037, 12393,  1997,
         1037,  6721,  7099,  2013,  1037,  3115,  3671,  4353,  1012,  2004,
         3231, 28093,  6553,  2057,  2224,  1996, 12849, 13728, 22844, 12298,
         1011, 15488,  4313, 16693,  3292,  2090,  1996, 17537,  4353,   102])"
2750,1,"['function', 'standard', 'distribution', 'distribution function', 'data']", Exercises,seg_343,function fn of the data and the distribution function φ of the standard normal:,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 3853, 1042, 2078, 1997, 1996, 2951, 1998, 1996, 4353, 3853, 1176,
        1997, 1996, 3115, 3671, 1024,  102])"
2751,1,"['null hypothesis', 'hypothesis']", Exercises,seg_343,what are the possible values of t and in which direction do values of t deviate from the null hypothesis?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2054,  2024,  1996,  2825,  5300,  1997,  1056,  1998,  1999,
         2029,  3257,  2079,  5300,  1997,  1056, 14386,  3686,  2013,  1996,
        19701, 10744,  1029,   102])"
2752,1,"['function', 'estimated', 'exponential distribution', 'distribution', 'exponential', 'distribution function', 'data', 'empirical distribution function']", Exercises,seg_343,"25.9 recall the example from section 18.3, where we investigated whether the software data are exponential by means of the kolmogorov-smirnov distance between the empirical distribution function fn of the data and the estimated exponential distribution function:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  1023,  9131,  1996,  2742,  2013,  2930,  2324,
         1012,  1017,  1010,  2073,  2057, 10847,  3251,  1996,  4007,  2951,
         2024, 27258,  2011,  2965,  1997,  1996, 12849, 13728, 22844, 12298,
         1011, 15488,  4313, 16693,  3292,  2090,  1996, 17537,  4353,  3853,
         1042,  2078,  1997,  1996,  2951,  1998,  1996,  4358, 27258,  4353,
         3853,  1024,   102])"
2753,1,"['parametric bootstrap', 'simulated', 'bootstrap', 'data']", Exercises,seg_343,for the data we found tks = 0.176. by means of a new parametric bootstrap we simulated 100 000 realizations of tks and found that all of them are smaller than 0.176. what can you say about the p-value corresponding to 0.176?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2005,  1996,  2951,  2057,  2179,  1056,  5705,  1027,  1014,
         1012, 18561,  1012,  2011,  2965,  1997,  1037,  2047, 11498, 12589,
         6879,  6494,  2361,  2057, 23599,  2531,  2199, 12393,  2015,  1997,
         1056,  5705,  1998,  2179,  2008,  2035,  1997,  2068,  2024,  3760,
         2084,  1014,  1012, 18561,  1012,  2054,  2064,  2017,  2360,  2055,
         1996,  1052,  1011,  3643,  7978,  2000,  1014,  1012, 18561,  1029,
          102])"
2754,1,"['table', 'null hypothesis', 'dataset', 'normal distribution', 'normal', 'standard deviation', 'data', 'statistic', 'test', 'test statistic', 'deviation', 'realization', 'hypothesis', 'random sample', 'standard', 'expectation', 'sample', 'random', 'distribution', 'measurements']", Exercises,seg_343,"25.10 consider the coal data from table 23.1, where 23 gross calorific value measurements are listed for osterfeld coal coded 262de27. we modeled this dataset as a realization of a random sample from a normal distribution with expectation µ unknown and standard deviation 0.1 mj/kg. we are planning to buy a shipment if the gross calorific value exceeds 23.75 mj/kg. in order to decide whether this is sensible, we test the null hypothesis h0 : µ = 23.75 with test statistic x̄n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  2184,  5136,  1996,  5317,  2951,  2013,  2795,
         2603,  1012,  1015,  1010,  2073,  2603,  7977, 10250, 10050,  8873,
         2278,  3643, 11702,  2024,  3205,  2005,  9808,  3334,  8151,  5317,
        22402, 21950,  3207, 22907,  1012,  2057, 14440,  2023,  2951, 13462,
         2004,  1037, 12393,  1997,  1037,  6721,  7099,  2013,  1037,  3671,
         4353,  2007, 17626,  1085,  4242,  1998,  3115, 24353,  1014,  1012,
         1015,  1049,  3501,  1013,  4705,  1012,  2057,  2024,  4041,  2000,
         4965,  1037, 22613,  2065,  1996,  7977, 10250, 10050,  8873,  2278,
         3643, 23651,  2603,  1012,  4293,  1049,  3501,  1013,  4705,  1012,
         1999,  2344,  2000,  5630,  3251,  2023,  2003, 21082,  1010,  2057,
         3231,  1996, 19701, 10744,  1044,  2692,  1024,  1085,  1027,  2603,
         1012,  4293,  2007,  3231, 28093,  6553,  1060,  2078,  1012,   102])"
2755,1,"['alternative hypothesis', 'hypothesis']", Exercises,seg_343,a. what would you choose as the alternative hypothesis?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2052,  2017,  5454,  2004,  1996,  4522,
        10744,  1029,   102])"
2756,1,['dataset'], Exercises,seg_343,"b. for the dataset x̄n is 23.788. compute the corresponding p-value, using",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2005,  1996,  2951, 13462,  1060,  2078,  2003,
         2603,  1012,  6275,  2620,  1012, 24134,  1996,  7978,  1052,  1011,
         3643,  1010,  2478,   102])"
2757,1,"['null hypothesis', 'hypothesis', 'distribution']", Exercises,seg_343,"that x̄n has an n(23.75, (0.1)2/23) distribution under the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2008,  1060,  2078,  2038,  2019,  1050,  1006,  2603,  1012,
         4293,  1010,  1006,  1014,  1012,  1015,  1007,  1016,  1013,  2603,
         1007,  4353,  2104,  1996, 19701, 10744,  1012,   102])"
2758,1,"['test statistic', 'probability', 'realization', 'random', 'type i error', 'distribution', 'statistic', 'error', 'test']", Exercises,seg_343,"25.11 one is given a number t, which is the realization of a random variable t with an n(µ, 1) distribution. to test h0 : µ = 0 against h1 : µ = 0, one uses t as the test statistic. one decides to reject h0 in favor of h1 if |t| ≥ 2. compute the probability of committing a type i error.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2423,  1012,  2340,  2028,  2003,  2445,  1037,  2193,  1056,
         1010,  2029,  2003,  1996, 12393,  1997,  1037,  6721,  8023,  1056,
         2007,  2019,  1050,  1006,  1085,  1010,  1015,  1007,  4353,  1012,
         2000,  3231,  1044,  2692,  1024,  1085,  1027,  1014,  2114,  1044,
         2487,  1024,  1085,  1027,  1014,  1010,  2028,  3594,  1056,  2004,
         1996,  3231, 28093,  6553,  1012,  2028,  7288,  2000, 15454,  1044,
         2692,  1999,  5684,  1997,  1044,  2487,  2065,  1064,  1056,  1064,
         1609,  1016,  1012, 24134,  1996,  9723,  1997, 16873,  1037,  2828,
         1045,  7561,  1012,   102])"
2759,1,"['test statistic', 'hypotheses', 'significance level', 'type ii error', 'probability', 'type ii', 'hypothesis', 'level', 'critical region', 'type i error', 'alternative hypothesis', 'null hypothesis', 'significance', 'statistic', 'error', 'test']", Testing hypotheses elaboration,seg_345,"in the previous chapter we introduced the setup for testing a null hypothesis against an alternative hypothesis using a test statistic t . the notions of type i error and type ii error were introduced. a type i error occurs when we falsely reject h0 on the basis of the observed value of t , whereas a type ii error occurs when we falsely do not reject h0. the decision to reject h0 or not was based on the size of the p-value. in this chapter we continue the introduction of basic concepts of testing hypotheses, such as significance level and critical region, and investigate the probability of committing a type ii error.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([ 5604,  1044, 22571, 14573, 23072,  3449,  7875, 21223])","tensor([  101,  1999,  1996,  3025,  3127,  2057,  3107,  1996, 16437,  2005,
         5604,  1037, 19701, 10744,  2114,  2019,  4522, 10744,  2478,  1037,
         3231, 28093,  6553,  1056,  1012,  1996, 21951,  1997,  2828,  1045,
         7561,  1998,  2828,  2462,  7561,  2020,  3107,  1012,  1037,  2828,
         1045,  7561,  5158,  2043,  2057, 23123, 15454,  1044,  2692,  2006,
         1996,  3978,  1997,  1996,  5159,  3643,  1997,  1056,  1010,  6168,
         1037,  2828,  2462,  7561,  5158,  2043,  2057, 23123,  2079,  2025,
        15454,  1044,  2692,  1012,  1996,  3247,  2000, 15454,  1044,  2692,
         2030,  2025,  2001,  2241,  2006,  1996,  2946,  1997,  1996,  1052,
         1011,  3643,  1012,  1999,  2023,  3127,  2057,  3613,  1996,  4955,
         1997,  3937,  8474,  1997,  5604,  1044, 22571, 14573, 23072,  1010,
         2107,  2004,  7784,  2504,  1998,  4187,  2555,  1010,  1998,  8556,
         1996,  9723,  1997, 16873,  1037,  2828,  2462,  7561,  1012,   102])"
2760,1,"['test statistic', 'set', 'random sample', 'level', 'sample', 'random', 'limit', 'measurements', 'average', 'statistic', 'test']", Significance level,seg_347,"as mentioned in the previous chapter, there is no general rule that specifies a level below which the p-value is considered exceptionally small. however, there are situations where this level is set a priori, and the question is: which values of the test statistic should then lead to rejection of h0? to illustrate this, consider the following example. the speed limit on freeways in the netherlands is 120 kilometers per hour. a device next to freeway a2 between amsterdam and utrecht measures the speed of passing vehicles. suppose that the device is designed in such a way that it conducts three measurements of the speed of a passing vehicle, modeled by a random sample x1, x2, x3. on the basis of the value of the average x̄3, the driver is either fined for speeding or not. for what values of x̄3 should we fine the driver, if we allow that 5% of the drivers are fined unjustly?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  2004,  3855,  1999,  1996,  3025,  3127,  1010,  2045,  2003,
         2053,  2236,  3627,  2008, 27171,  1037,  2504,  2917,  2029,  1996,
         1052,  1011,  3643,  2003,  2641, 17077,  2235,  1012,  2174,  1010,
         2045,  2024,  8146,  2073,  2023,  2504,  2003,  2275,  1037,  3188,
         2072,  1010,  1998,  1996,  3160,  2003,  1024,  2029,  5300,  1997,
         1996,  3231, 28093,  6553,  2323,  2059,  2599,  2000, 13893,  1997,
         1044,  2692,  1029,  2000, 19141,  2023,  1010,  5136,  1996,  2206,
         2742,  1012,  1996,  3177,  5787,  2006, 10846,  2015,  1999,  1996,
         4549,  2003,  6036,  7338,  2566,  3178,  1012,  1037,  5080,  2279,
         2000, 10846, 22441,  2090,  7598,  1998, 18361,  5761,  1996,  3177,
         1997,  4458,  4683,  1012,  6814,  2008,  1996,  5080,  2003,  2881,
         1999,  2107,  1037,  2126,  2008,  2009, 17976,  2093, 11702,  1997,
         1996,  3177,  1997,  1037,  4458,  4316,  1010, 14440,  2011,  1037,
         6721,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1060,  2509,
         1012,  2006,  1996,  3978,  1997,  1996,  3643,  1997,  1996,  2779,
         1060,  2509,  1010,  1996,  4062,  2003,  2593, 16981,  2005, 21485,
         2030,  2025,  1012,  2005,  2054,  5300,  1997,  1060,  2509,  2323,
         2057,  2986,  1996,  4062,  1010,  2065,  2057,  3499,  2008,  1019,
         1003,  1997,  1996,  6853,  2024, 16981,  4895, 29427,  2135,  1029,
          102])"
2761,1,['measurement'], Significance level,seg_347,let us rephrase things in terms of a testing problem. each measurement can be thought of as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  2292,  2149, 16360, 13492,  3366,  2477,  1999,  3408,  1997,
         1037,  5604,  3291,  1012,  2169, 10903,  2064,  2022,  2245,  1997,
         2004,   102])"
2762,1,"['error', 'measurement', 'measurement error']", Significance level,seg_347,measurement = true speed + measurement error.,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([7784, 2504])","tensor([  101, 10903,  1027,  2995,  3177,  1009, 10903,  7561,  1012,   102])"
2763,1,"['mean', 'error', 'moment', 'measurement error', 'random variable', 'random', 'measuring', 'measurement', 'variable']", Significance level,seg_347,"suppose for the moment that the measuring device is carefully calibrated, so that the measurement error is modeled by a random variable with mean zero",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0.])","tensor([7784, 2504])","tensor([  101,  6814,  2005,  1996,  2617,  2008,  1996,  9854,  5080,  2003,
         5362, 10250, 12322,  9250,  1010,  2061,  2008,  1996, 10903,  7561,
         2003, 14440,  2011,  1037,  6721,  8023,  2007,  2812,  5717,   102])"
2764,1,"['measurement error', 'experiments', 'error', 'normal distribution', 'random variable', 'normal', 'case', 'parameter', 'random sample', 'variance', 'sample', 'random', 'measurement', 'distribution', 'measurements', 'variable']", Significance level,seg_347,"and known variance σ2, say σ2 = 4. moreover, in physical experiments such as this one, the measurement error is often modeled by a random variable with a normal distribution. in that case, the measurements x1, x2, x3 are modeled by a random sample from an n(µ, 4) distribution, where the parameter µ represents the true speed of the passing vehicle. our testing problem can now be formulated as testing",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([7784, 2504])","tensor([  101,  1998,  2124, 23284,  1173,  2475,  1010,  2360,  1173,  2475,
         1027,  1018,  1012,  9308,  1010,  1999,  3558,  7885,  2107,  2004,
         2023,  2028,  1010,  1996, 10903,  7561,  2003,  2411, 14440,  2011,
         1037,  6721,  8023,  2007,  1037,  3671,  4353,  1012,  1999,  2008,
         2553,  1010,  1996, 11702,  1060,  2487,  1010,  1060,  2475,  1010,
         1060,  2509,  2024, 14440,  2011,  1037,  6721,  7099,  2013,  2019,
         1050,  1006,  1085,  1010,  1018,  1007,  4353,  1010,  2073,  1996,
        16381,  1085,  5836,  1996,  2995,  3177,  1997,  1996,  4458,  4316,
         1012,  2256,  5604,  3291,  2064,  2085,  2022, 19788,  2004,  5604,
          102])"
2765,1,"['test statistic', 'statistic', 'test']", Significance level,seg_347,with test statistic x1 + x2 + x3,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  2007,  3231, 28093,  6553,  1060,  2487,  1009,  1060,  2475,
         1009,  1060,  2509,   102])"
2766,1,"['random', 'normal', 'random variables', 'distribution', 'variables', 'independent']", Significance level,seg_347,"since sums of independent normal random variables again have a normal distribution (see remark 11.2), it follows that x̄3 has an n(µ, 4/3) distribution. in particular, the distribution of t = x̄3 is centered around µ no matter what the value of µ is. values of t close to 120 are therefore in favor of h0. values of t that are far from 120 are considered as strong evidence against h0. values much larger than 120 suggest that µ > 120 and are therefore in favor of h1. values much smaller than 120 suggest that µ < 120. they also constitute evidence against h0, but even stronger evidence against h1. thus we reject h0 in favor of h1 only for values of t larger than 120. see also figure 26.1.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  2144, 20571,  1997,  2981,  3671,  6721, 10857,  2153,  2031,
         1037,  3671,  4353,  1006,  2156, 17674,  2340,  1012,  1016,  1007,
         1010,  2009,  4076,  2008,  1060,  2509,  2038,  2019,  1050,  1006,
         1085,  1010,  1018,  1013,  1017,  1007,  4353,  1012,  1999,  3327,
         1010,  1996,  4353,  1997,  1056,  1027,  1060,  2509,  2003,  8857,
         2105,  1085,  2053,  3043,  2054,  1996,  3643,  1997,  1085,  2003,
         1012,  5300,  1997,  1056,  2485,  2000,  6036,  2024,  3568,  1999,
         5684,  1997,  1044,  2692,  1012,  5300,  1997,  1056,  2008,  2024,
         2521,  2013,  6036,  2024,  2641,  2004,  2844,  3350,  2114,  1044,
         2692,  1012,  5300,  2172,  3469,  2084,  6036,  6592,  2008,  1085,
         1028,  6036,  1998,  2024,  3568,  1999,  5684,  1997,  1044,  2487,
         1012,  5300,  2172,  3760,  2084,  6036,  6592,  2008,  1085,  1026,
         6036,  1012,  2027,  2036, 12346,  3350,  2114,  1044,  2692,  1010,
         2021,  2130,  6428,  3350,  2114,  1044,  2487,  1012,  2947,  2057,
        15454,  1044,  2692,  1999,  5684,  1997,  1044,  2487,  2069,  2005,
         5300,  1997,  1056,  3469,  2084,  6036,  1012,  2156,  2036,  3275,
         2656,  1012,  1015,  1012,   102])"
2767,1,"['significance level', 'set', 'probability', 'level', 'type i error', 'significance', 'error']", Significance level,seg_347,"rejection of h0 in favor of h1 corresponds to fining the driver for speeding. unjustly fining a driver corresponds to falsely rejecting h0, i.e., committing a type i error. since we allow 5% of the drivers to be fined unjustly, we are dealing with a testing problem where the probability of committing a type i error is set a priori at 0.05. the question is: for which values of t should we reject h0? the decision rule for rejecting h0 should be such that the corresponding probability of committing a type i error is 0.05. the value 0.05 is called the significance level.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([7784, 2504])","tensor([  101, 13893,  1997,  1044,  2692,  1999,  5684,  1997,  1044,  2487,
        14788,  2000, 10346,  2075,  1996,  4062,  2005, 21485,  1012,  4895,
        29427,  2135, 10346,  2075,  1037,  4062, 14788,  2000, 23123, 21936,
         1044,  2692,  1010,  1045,  1012,  1041,  1012,  1010, 16873,  1037,
         2828,  1045,  7561,  1012,  2144,  2057,  3499,  1019,  1003,  1997,
         1996,  6853,  2000,  2022, 16981,  4895, 29427,  2135,  1010,  2057,
         2024,  7149,  2007,  1037,  5604,  3291,  2073,  1996,  9723,  1997,
        16873,  1037,  2828,  1045,  7561,  2003,  2275,  1037,  3188,  2072,
         2012,  1014,  1012,  5709,  1012,  1996,  3160,  2003,  1024,  2005,
         2029,  5300,  1997,  1056,  2323,  2057, 15454,  1044,  2692,  1029,
         1996,  3247,  3627,  2005, 21936,  1044,  2692,  2323,  2022,  2107,
         2008,  1996,  7978,  9723,  1997, 16873,  1037,  2828,  1045,  7561,
         2003,  1014,  1012,  5709,  1012,  1996,  3643,  1014,  1012,  5709,
         2003,  2170,  1996,  7784,  2504,  1012,   102])"
2768,1,"['significance level', 'probability', 'level', 'type i error', 'significance', 'error']", Significance level,seg_347,"significance level. the significance level is the largest acceptable probability of committing a type i error and is denoted by α, where 0 < α < 1.",tensor(1),"tensor([0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  7784,  2504,  1012,  1996,  7784,  2504,  2003,  1996,  2922,
        11701,  9723,  1997, 16873,  1037,  2828,  1045,  7561,  1998,  2003,
        19537,  2011,  1155,  1010,  2073,  1014,  1026,  1155,  1026,  1015,
         1012,   102])"
2769,1,"['level', 'test']", Significance level,seg_347,"we speak of “performing the test at level α,” as well as “rejecting h0 in favor of h1 at level α.” in our example we are testing h0 : µ = 120 against h1 : µ > 120 at level 0.05.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([7784, 2504])","tensor([  101,  2057,  3713,  1997,  1523,  4488,  1996,  3231,  2012,  2504,
         1155,  1010,  1524,  2004,  2092,  2004,  1523, 21936,  1044,  2692,
         1999,  5684,  1997,  1044,  2487,  2012,  2504,  1155,  1012,  1524,
         1999,  2256,  2742,  2057,  2024,  5604,  1044,  2692,  1024,  1085,
         1027,  6036,  2114,  1044,  2487,  1024,  1085,  1028,  6036,  2012,
         2504,  1014,  1012,  5709,  1012,   102])"
2770,1,['level'], Significance level,seg_347,"quick exercise 26.1 suppose that in the freeway example h0 : µ = 120 is rejected in favor of h1 : µ > 120 at level α = 0.05. will it necessarily be rejected at level α = 0.01? on the other hand, suppose that h0 : µ = 120 is rejected in favor of h1 : µ > 120 at level α = 0.01. will it necessarily be rejected at level α = 0.05?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  4248,  6912,  2656,  1012,  1015,  6814,  2008,  1999,  1996,
        10846,  2742,  1044,  2692,  1024,  1085,  1027,  6036,  2003,  5837,
         1999,  5684,  1997,  1044,  2487,  1024,  1085,  1028,  6036,  2012,
         2504,  1155,  1027,  1014,  1012,  5709,  1012,  2097,  2009,  9352,
         2022,  5837,  2012,  2504,  1155,  1027,  1014,  1012,  5890,  1029,
         2006,  1996,  2060,  2192,  1010,  6814,  2008,  1044,  2692,  1024,
         1085,  1027,  6036,  2003,  5837,  1999,  5684,  1997,  1044,  2487,
         1024,  1085,  1028,  6036,  2012,  2504,  1155,  1027,  1014,  1012,
         5890,  1012,  2097,  2009,  9352,  2022,  5837,  2012,  2504,  1155,
         1027,  1014,  1012,  5709,  1029,   102])"
2771,1,"['error', 'normal distribution', 'probability', 'random variable', 'level', 'random', 'normal', 'type i error', 'distribution', 'average', 'variable']", Significance level,seg_347,"let us continue with our example and determine for which values of t = x̄3 we should reject h0 at level α = 0.05 in favor of h1 : µ > 120. suppose we decide to fine each driver whose recorded average speed is 121 or more, i.e., we reject h0 whenever t ≥ 121. then how large is the probability of a type i error p(t ≥ 121)? when h0 : µ = 120 is true, then t = x̄3 has an n(120, 4/3) distribution, so that by the change-of-units rule for the normal distribution (see page 106), the random variable",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([7784, 2504])","tensor([  101,  2292,  2149,  3613,  2007,  2256,  2742,  1998,  5646,  2005,
         2029,  5300,  1997,  1056,  1027,  1060,  2509,  2057,  2323, 15454,
         1044,  2692,  2012,  2504,  1155,  1027,  1014,  1012,  5709,  1999,
         5684,  1997,  1044,  2487,  1024,  1085,  1028,  6036,  1012,  6814,
         2057,  5630,  2000,  2986,  2169,  4062,  3005,  2680,  2779,  3177,
         2003, 12606,  2030,  2062,  1010,  1045,  1012,  1041,  1012,  1010,
         2057, 15454,  1044,  2692,  7188,  1056,  1609, 12606,  1012,  2059,
         2129,  2312,  2003,  1996,  9723,  1997,  1037,  2828,  1045,  7561,
         1052,  1006,  1056,  1609, 12606,  1007,  1029,  2043,  1044,  2692,
         1024,  1085,  1027,  6036,  2003,  2995,  1010,  2059,  1056,  1027,
         1060,  2509,  2038,  2019,  1050,  1006,  6036,  1010,  1018,  1013,
         1017,  1007,  4353,  1010,  2061,  2008,  2011,  1996,  2689,  1011,
         1997,  1011,  3197,  3627,  2005,  1996,  3671,  4353,  1006,  2156,
         3931, 10114,  1007,  1010,  1996,  6721,  8023,   102])"
2772,1,['distribution'], Significance level,seg_347,"has an n(0, 1) distribution. this implies that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  2038,  2019,  1050,  1006,  1014,  1010,  1015,  1007,  4353,
         1012,  2023, 12748,  2008,   102])"
2773,1,"['significance level', 'table', 'probability', 'level', 'type i error', 'significance', 'average', 'error', 'case']", Significance level,seg_347,"from table b.1, we find p(z ≥ 0.87) = 0.1922, which means that the probability of a type i error is greater than the significance level α = 0.05. since this level was defined as the largest acceptable probability of a type i error, we do not reject h0. similarly, if we decide to reject h0 whenever we record an average of 122 or more, the probability of a type i error equals 0.0416 (check this). this is smaller than α = 0.05, so in that case we reject h0. the boundary case is the value c that satisfies p(t ≥ c) = 0.05. to find c, we must",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  2013,  2795,  1038,  1012,  1015,  1010,  2057,  2424,  1052,
         1006,  1062,  1609,  1014,  1012,  6584,  1007,  1027,  1014,  1012,
         4798,  1010,  2029,  2965,  2008,  1996,  9723,  1997,  1037,  2828,
         1045,  7561,  2003,  3618,  2084,  1996,  7784,  2504,  1155,  1027,
         1014,  1012,  5709,  1012,  2144,  2023,  2504,  2001,  4225,  2004,
         1996,  2922, 11701,  9723,  1997,  1037,  2828,  1045,  7561,  1010,
         2057,  2079,  2025, 15454,  1044,  2692,  1012,  6660,  1010,  2065,
         2057,  5630,  2000, 15454,  1044,  2692,  7188,  2057,  2501,  2019,
         2779,  1997, 13092,  2030,  2062,  1010,  1996,  9723,  1997,  1037,
         2828,  1045,  7561, 19635,  1014,  1012,  5840, 16048,  1006,  4638,
         2023,  1007,  1012,  2023,  2003,  3760,  2084,  1155,  1027,  1014,
         1012,  5709,  1010,  2061,  1999,  2008,  2553,  2057, 15454,  1044,
         2692,  1012,  1996,  6192,  2553,  2003,  1996,  3643,  1039,  2008,
         2938,  2483, 14213,  1052,  1006,  1056,  1609,  1039,  1007,  1027,
         1014,  1012,  5709,  1012,  2000,  2424,  1039,  1010,  2057,  2442,
          102])"
2774,1,['table'], Significance level,seg_347,"from table b.2 we have that z0.05 = t∞,0.05 = 1.645, so that we find",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  2013,  2795,  1038,  1012,  1016,  2057,  2031,  2008,  1062,
         2692,  1012,  5709,  1027,  1056, 30128,  1010,  1014,  1012,  5709,
         1027,  1015,  1012,  4185,  2629,  1010,  2061,  2008,  2057,  2424,
          102])"
2775,0,[], Significance level,seg_347,which leads to 2,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([7784, 2504])","tensor([ 101, 2029, 5260, 2000, 1016,  102])"
2776,1,"['significance level', 'set', 'level', 'significance', 'average']", Significance level,seg_347,"hence, if we set the significance level α at 0.05, we should reject h0 : µ = 120 in favor of h1 : µ > 120 whenever t ≥ 121.9. for our freeway example this means that if the average recorded speed of a passing vehicle is greater than or equal to 121.9, then the driver is fined for speeding. with this decision rule, at most 5% of the drivers get fined unjustly.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  6516,  1010,  2065,  2057,  2275,  1996,  7784,  2504,  1155,
         2012,  1014,  1012,  5709,  1010,  2057,  2323, 15454,  1044,  2692,
         1024,  1085,  1027,  6036,  1999,  5684,  1997,  1044,  2487,  1024,
         1085,  1028,  6036,  7188,  1056,  1609, 12606,  1012,  1023,  1012,
         2005,  2256, 10846,  2742,  2023,  2965,  2008,  2065,  1996,  2779,
         2680,  3177,  1997,  1037,  4458,  4316,  2003,  3618,  2084,  2030,
         5020,  2000, 12606,  1012,  1023,  1010,  2059,  1996,  4062,  2003,
        16981,  2005, 21485,  1012,  2007,  2023,  3247,  3627,  1010,  2012,
         2087,  1019,  1003,  1997,  1996,  6853,  2131, 16981,  4895, 29427,
         2135,  1012,   102])"
2777,1,"['significance level', 'level', 'significance']", Significance level,seg_347,"in connection with p-values: the significance level is the level below which the p-value is sufficiently small to reject h0. indeed, for any observed value t ≥ 121.9 we reject h0, and the p-value for such a t is at most 0.05:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([7784, 2504])","tensor([  101,  1999,  4434,  2007,  1052,  1011,  5300,  1024,  1996,  7784,
         2504,  2003,  1996,  2504,  2917,  2029,  1996,  1052,  1011,  3643,
         2003, 12949,  2235,  2000, 15454,  1044,  2692,  1012,  5262,  1010,
         2005,  2151,  5159,  3643,  1056,  1609, 12606,  1012,  1023,  2057,
        15454,  1044,  2692,  1010,  1998,  1996,  1052,  1011,  3643,  2005,
         2107,  1037,  1056,  2003,  2012,  2087,  1014,  1012,  5709,  1024,
          102])"
2778,0,[], Significance level,seg_347,we will see more about this relation in the next section.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([7784, 2504])","tensor([ 101, 2057, 2097, 2156, 2062, 2055, 2023, 7189, 1999, 1996, 2279, 2930,
        1012,  102])"
2779,1,"['test statistic', 'significance level', 'case', 'set', 'critical value', 'level', 'critical region', 'significance', 'statistic', 'test']", Critical region and critical values,seg_349,"in the freeway example the significance level 0.05 corresponds to the decision rule “reject h0 : µ = 120 in favor h1 : µ > 120 whenever t ≥ 121.9.” the set k = [121.9, ∞) consisting of values of the test statistic t for which we reject h0 is called critical region. the value 121.9, which is the boundary case between rejecting and not rejecting h0, is called the critical value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1999,  1996, 10846,  2742,  1996,  7784,  2504,  1014,  1012,
         5709, 14788,  2000,  1996,  3247,  3627,  1523, 15454,  1044,  2692,
         1024,  1085,  1027,  6036,  1999,  5684,  1044,  2487,  1024,  1085,
         1028,  6036,  7188,  1056,  1609, 12606,  1012,  1023,  1012,  1524,
         1996,  2275,  1047,  1027,  1031, 12606,  1012,  1023,  1010,  1601,
         1007,  5398,  1997,  5300,  1997,  1996,  3231, 28093,  6553,  1056,
         2005,  2029,  2057, 15454,  1044,  2692,  2003,  2170,  4187,  2555,
         1012,  1996,  3643, 12606,  1012,  1023,  1010,  2029,  2003,  1996,
         6192,  2553,  2090, 21936,  1998,  2025, 21936,  1044,  2692,  1010,
         2003,  2170,  1996,  4187,  3643,  1012,   102])"
2780,1,"['significance level', 'test statistic', 'critical values', 'set', 'level', 'critical region', 'significance', 'statistic', 'test']", Critical region and critical values,seg_349,critical region and critical values. suppose we test h0 against h1 at significance level α by means of a test statistic t . the set k ⊂ r that corresponds to all values of t for which we reject h0 in favor of h1 is called the critical region. values on the boundary of the critical region are called critical values.,tensor(1),"tensor([0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  4187,  2555,  1998,  4187,  5300,  1012,  6814,  2057,  3231,
         1044,  2692,  2114,  1044,  2487,  2012,  7784,  2504,  1155,  2011,
         2965,  1997,  1037,  3231, 28093,  6553,  1056,  1012,  1996,  2275,
         1047,  1610,  1054,  2008, 14788,  2000,  2035,  5300,  1997,  1056,
         2005,  2029,  2057, 15454,  1044,  2692,  1999,  5684,  1997,  1044,
         2487,  2003,  2170,  1996,  4187,  2555,  1012,  5300,  2006,  1996,
         6192,  1997,  1996,  4187,  2555,  2024,  2170,  4187,  5300,  1012,
          102])"
2781,1,"['test statistic', 'significance level', 'probability', 'level', 'critical region', 'significance', 'statistic', 'test']", Critical region and critical values,seg_349,the precise shape of the critical region depends on both the chosen significance level α and the test statistic t that is used. but it will always be such that the probability that t ∈ k satisfies,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1996, 10480,  4338,  1997,  1996,  4187,  2555,  9041,  2006,
         2119,  1996,  4217,  7784,  2504,  1155,  1998,  1996,  3231, 28093,
         6553,  1056,  2008,  2003,  2109,  1012,  2021,  2009,  2097,  2467,
         2022,  2107,  2008,  1996,  9723,  2008,  1056,  1596,  1047,  2938,
         2483, 14213,   102])"
2782,1,['case'], Critical region and critical values,seg_349,p(t ∈ k) ≤ α in the case that h0 is true.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([ 101, 1052, 1006, 1056, 1596, 1047, 1007, 1608, 1155, 1999, 1996, 2553,
        2008, 1044, 2692, 2003, 2995, 1012,  102])"
2783,1,"['probability', 'probabilities']", Critical region and critical values,seg_349,"at this point it becomes important to emphasize whether probabilities are computed under the assumption that h0 is true. with a slight abuse of notation, we briefly write p(t ∈ k | h0) for the probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2012,  2023,  2391,  2009,  4150,  2590,  2000, 17902,  3251,
         4013,  3676, 14680,  2024, 24806,  2104,  1996, 11213,  2008,  1044,
         2692,  2003,  2995,  1012,  2007,  1037,  7263,  6905,  1997, 14869,
         1010,  2057,  4780,  4339,  1052,  1006,  1056,  1596,  1047,  1064,
         1044,  2692,  1007,  2005,  1996,  9723,  1012,   102])"
2784,0,[], Critical region and critical values,seg_349,relation with p-values,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([ 101, 7189, 2007, 1052, 1011, 5300,  102])"
2785,1,"['tail', 'probability', 'critical region', 'tail probability', 'average', 'right tail probability']", Critical region and critical values,seg_349,"if we record average speed t = 124, then this value falls in the critical region k = [121.9, ∞), so that h0 : µ = 120 is rejected in favor h1 : µ > 120. on the other hand we can also compute the p-value corresponding to the observed value 124. since values of t to the right provide stronger evidence against h0, the p-value is the following right tail probability",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2065,  2057,  2501,  2779,  3177,  1056,  1027, 13412,  1010,
         2059,  2023,  3643,  4212,  1999,  1996,  4187,  2555,  1047,  1027,
         1031, 12606,  1012,  1023,  1010,  1601,  1007,  1010,  2061,  2008,
         1044,  2692,  1024,  1085,  1027,  6036,  2003,  5837,  1999,  5684,
         1044,  2487,  1024,  1085,  1028,  6036,  1012,  2006,  1996,  2060,
         2192,  2057,  2064,  2036, 24134,  1996,  1052,  1011,  3643,  7978,
         2000,  1996,  5159,  3643, 13412,  1012,  2144,  5300,  1997,  1056,
         2000,  1996,  2157,  3073,  6428,  3350,  2114,  1044,  2692,  1010,
         1996,  1052,  1011,  3643,  2003,  1996,  2206,  2157,  5725,  9723,
          102])"
2786,1,"['significance', 'significance level', 'level']", Critical region and critical values,seg_349,which is smaller than the significance level 0.05. this is no coincidence.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2029,  2003,  3760,  2084,  1996,  7784,  2504,  1014,  1012,
         5709,  1012,  2023,  2003,  2053, 16507,  1012,   102])"
2787,1,"['test statistic', 'statistic', 'level', 'test']", Critical region and critical values,seg_349,"in general, suppose that we perform a test at level α using test statistic t and that we have observed t as the value of our test statistic. then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1999,  2236,  1010,  6814,  2008,  2057,  4685,  1037,  3231,
         2012,  2504,  1155,  2478,  3231, 28093,  6553,  1056,  1998,  2008,
         2057,  2031,  5159,  1056,  2004,  1996,  3643,  1997,  2256,  3231,
        28093,  6553,  1012,  2059,   102])"
2788,0,[], Critical region and critical values,seg_349,t ∈ k ⇔ the p-value corresponding to t is less than or equal to α.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([ 101, 1056, 1596, 1047,  100, 1996, 1052, 1011, 3643, 7978, 2000, 1056,
        2003, 2625, 2084, 2030, 5020, 2000, 1155, 1012,  102])"
2789,1,"['tail', 'significance level', 'probability', 'observed significance level', 'level', 'tail probability', 'significance', 'right tail probability', 'case']", Critical region and critical values,seg_349,"figure 26.2 illustrates this for a testing problem where values of t to the right provide evidence against h0 and in favor of h1. in that case, the p-value corresponds to the right tail probability p(t ≥ t | h0). the shaded area to the right of cα corresponds to α = p(t ≥ cα | h0), whereas the more intensely shaded area to the right of t represents the p-value. we see that deciding whether to reject h0 at a given significance level α can be done by comparing either t with cα or the p-value with α. for this reason the p-value is sometimes called the observed significance level.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  3275,  2656,  1012,  1016, 24899,  2023,  2005,  1037,  5604,
         3291,  2073,  5300,  1997,  1056,  2000,  1996,  2157,  3073,  3350,
         2114,  1044,  2692,  1998,  1999,  5684,  1997,  1044,  2487,  1012,
         1999,  2008,  2553,  1010,  1996,  1052,  1011,  3643, 14788,  2000,
         1996,  2157,  5725,  9723,  1052,  1006,  1056,  1609,  1056,  1064,
         1044,  2692,  1007,  1012,  1996, 25273,  2181,  2000,  1996,  2157,
         1997,  1039, 14608, 14788,  2000,  1155,  1027,  1052,  1006,  1056,
         1609,  1039, 14608,  1064,  1044,  2692,  1007,  1010,  6168,  1996,
         2062, 20531, 25273,  2181,  2000,  1996,  2157,  1997,  1056,  5836,
         1996,  1052,  1011,  3643,  1012,  2057,  2156,  2008, 10561,  3251,
         2000, 15454,  1044,  2692,  2012,  1037,  2445,  7784,  2504,  1155,
         2064,  2022,  2589,  2011, 13599,  2593,  1056,  2007,  1039, 14608,
         2030,  1996,  1052,  1011,  3643,  2007,  1155,  1012,  2005,  2023,
         3114,  1996,  1052,  1011,  3643,  2003,  2823,  2170,  1996,  5159,
         7784,  2504,  1012,   102])"
2790,1,"['dataset', 'test statistic', 'critical values', 'level', 'critical region', 'critical value', 'statistic', 'test']", Critical region and critical values,seg_349,"the concepts of critical value and p-value have their own merit. the critical region and the corresponding critical values specify exactly what values of t lead to rejection of h0 at a given level α. this can be done even without obtaining a dataset and computing the value t of the test statistic. the pvalue, on the other hand, represents the strength of the evidence the observed value t bears against h0. but it does not specify all values of t that lead to rejection of h0 at a given level α.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1996,  8474,  1997,  4187,  3643,  1998,  1052,  1011,  3643,
         2031,  2037,  2219,  7857,  1012,  1996,  4187,  2555,  1998,  1996,
         7978,  4187,  5300, 20648,  3599,  2054,  5300,  1997,  1056,  2599,
         2000, 13893,  1997,  1044,  2692,  2012,  1037,  2445,  2504,  1155,
         1012,  2023,  2064,  2022,  2589,  2130,  2302, 11381,  1037,  2951,
        13462,  1998,  9798,  1996,  3643,  1056,  1997,  1996,  3231, 28093,
         6553,  1012,  1996, 26189,  2389,  5657,  1010,  2006,  1996,  2060,
         2192,  1010,  5836,  1996,  3997,  1997,  1996,  3350,  1996,  5159,
         3643,  1056,  6468,  2114,  1044,  2692,  1012,  2021,  2009,  2515,
         2025, 20648,  2035,  5300,  1997,  1056,  2008,  2599,  2000, 13893,
         1997,  1044,  2692,  2012,  1037,  2445,  2504,  1155,  1012,   102])"
2791,1,"['tail', 'significance level', 'set', 'probability', 'level', 'critical region', 'tail probability', 'significance', 'average', 'case']", Critical region and critical values,seg_349,"quick exercise 26.2 in our freeway example, we have already computed the relevant tail probability to decide whether a person with recorded average speed t = 124 gets fined if we set the significance level at 0.05. suppose the significance level is set at α = 0.01 (we allow 1% of the drivers to get fined unjustly). determine whether a person with recorded average speed t = 124 gets fined (h0 : µ = 120 is rejected). furthermore, determine the critical region in this case.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  4248,  6912,  2656,  1012,  1016,  1999,  2256, 10846,  2742,
         1010,  2057,  2031,  2525, 24806,  1996,  7882,  5725,  9723,  2000,
         5630,  3251,  1037,  2711,  2007,  2680,  2779,  3177,  1056,  1027,
        13412,  4152, 16981,  2065,  2057,  2275,  1996,  7784,  2504,  2012,
         1014,  1012,  5709,  1012,  6814,  1996,  7784,  2504,  2003,  2275,
         2012,  1155,  1027,  1014,  1012,  5890,  1006,  2057,  3499,  1015,
         1003,  1997,  1996,  6853,  2000,  2131, 16981,  4895, 29427,  2135,
         1007,  1012,  5646,  3251,  1037,  2711,  2007,  2680,  2779,  3177,
         1056,  1027, 13412,  4152, 16981,  1006,  1044,  2692,  1024,  1085,
         1027,  6036,  2003,  5837,  1007,  1012,  7297,  1010,  5646,  1996,
         4187,  2555,  1999,  2023,  2553,  1012,   102])"
2792,1,"['critical region', 'discrete', 'distribution']", Critical region and critical values,seg_349,"sometimes the critical region k can be constructed such that p(t ∈ k | h0) is exactly equal to α, as in the freeway example. however, when the distribution of t is discrete, this is not always possible. this is illustrated by the next example.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2823,  1996,  4187,  2555,  1047,  2064,  2022,  3833,  2107,
         2008,  1052,  1006,  1056,  1596,  1047,  1064,  1044,  2692,  1007,
         2003,  3599,  5020,  2000,  1155,  1010,  2004,  1999,  1996, 10846,
         2742,  1012,  2174,  1010,  2043,  1996,  4353,  1997,  1056,  2003,
        16246,  1010,  2023,  2003,  2025,  2467,  2825,  1012,  2023,  2003,
         7203,  2011,  1996,  2279,  2742,  1012,   102])"
2793,1,"['probability', 'test', 'distribution']", Critical region and critical values,seg_349,"after the introduction of the euro, polish mathematicians claimed that the belgian 1 euro coin is not a fair coin (see, for instance, the new scientist, january 4, 2002). suppose we put a 1 euro coin to the test. we will throw it ten times and record x , the number of heads. then x has a bin(10, p) distribution, where p denotes the probability of heads. we like to find out whether p differs from 1/2. therefore we test",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2044,  1996,  4955,  1997,  1996,  9944,  1010,  3907, 29374,
         3555,  2008,  1996,  6995,  1015,  9944,  9226,  2003,  2025,  1037,
         4189,  9226,  1006,  2156,  1010,  2005,  6013,  1010,  1996,  2047,
         7155,  1010,  2254,  1018,  1010,  2526,  1007,  1012,  6814,  2057,
         2404,  1037,  1015,  9944,  9226,  2000,  1996,  3231,  1012,  2057,
         2097,  5466,  2009,  2702,  2335,  1998,  2501,  1060,  1010,  1996,
         2193,  1997,  4641,  1012,  2059,  1060,  2038,  1037,  8026,  1006,
         2184,  1010,  1052,  1007,  4353,  1010,  2073,  1052, 14796,  1996,
         9723,  1997,  4641,  1012,  2057,  2066,  2000,  2424,  2041,  3251,
         1052, 12980,  2013,  1015,  1013,  1016,  1012,  3568,  2057,  3231,
          102])"
2794,1,"['test statistic', 'significance level', 'set', 'level', 'significance', 'statistic', 'test']", Critical region and critical values,seg_349,"we use x as the test statistic. when we set the significance level α at 0.05, for what values of x will we reject h0 and conclude that the coin is not fair? let us first find out what values of x are in favor of h1. if h0 : p = 1/2 is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2057,  2224,  1060,  2004,  1996,  3231, 28093,  6553,  1012,
         2043,  2057,  2275,  1996,  7784,  2504,  1155,  2012,  1014,  1012,
         5709,  1010,  2005,  2054,  5300,  1997,  1060,  2097,  2057, 15454,
         1044,  2692,  1998, 16519,  2008,  1996,  9226,  2003,  2025,  4189,
         1029,  2292,  2149,  2034,  2424,  2041,  2054,  5300,  1997,  1060,
         2024,  1999,  5684,  1997,  1044,  2487,  1012,  2065,  1044,  2692,
         1024,  1052,  1027,  1015,  1013,  1016,  2003,   102])"
2795,0,[], Critical region and critical values,seg_349,"2 values close to 10 suggest that p > 1/2 and values close to 0 suggest that p < 1/2. hence, both values close to 0 and values close to 10 are in favor of h1 : p = 1/2.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([ 101, 1016, 5300, 2485, 2000, 2184, 6592, 2008, 1052, 1028, 1015, 1013,
        1016, 1998, 5300, 2485, 2000, 1014, 6592, 2008, 1052, 1026, 1015, 1013,
        1016, 1012, 6516, 1010, 2119, 5300, 2485, 2000, 1014, 1998, 5300, 2485,
        2000, 2184, 2024, 1999, 5684, 1997, 1044, 2487, 1024, 1052, 1027, 1015,
        1013, 1016, 1012,  102])"
2796,1,"['set', 'critical region']", Critical region and critical values,seg_349,"this means that we will reject h0 in favor of h1 whenever x ≤ cl or x ≥ cu. therefore, the critical region is the set",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2023,  2965,  2008,  2057,  2097, 15454,  1044,  2692,  1999,
         5684,  1997,  1044,  2487,  7188,  1060,  1608, 18856,  2030,  1060,
         1609, 12731,  1012,  3568,  1010,  1996,  4187,  2555,  2003,  1996,
         2275,   102])"
2797,1,"['critical values', 'critical region', 'right critical values']", Critical region and critical values,seg_349,the boundary values cl and cu are called left and right critical values. they must be chosen such that the critical region k is as large as possible and still satisfies,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1996,  6192,  5300, 18856,  1998, 12731,  2024,  2170,  2187,
         1998,  2157,  4187,  5300,  1012,  2027,  2442,  2022,  4217,  2107,
         2008,  1996,  4187,  2555,  1047,  2003,  2004,  2312,  2004,  2825,
         1998,  2145,  2938,  2483, 14213,   102])"
2798,1,['probability'], Critical region and critical values,seg_349,"1) denotes the probability p(x ≥ cu) computed with x having a bin(10, 1",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1015,  1007, 14796,  1996,  9723,  1052,  1006,  1060,  1609,
        12731,  1007, 24806,  2007,  1060,  2383,  1037,  8026,  1006,  2184,
         1010,  1015,   102])"
2799,1,['distribution'], Critical region and critical values,seg_349,"2 ) distribution. since we have no preference for rejecting h0 for values close to 0 or close to 10, we divide 0.05 over the two sides, and we choose cl as large as possible and cu as small as possible such that",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1016,  1007,  4353,  1012,  2144,  2057,  2031,  2053, 12157,
         2005, 21936,  1044,  2692,  2005,  5300,  2485,  2000,  1014,  2030,
         2485,  2000,  2184,  1010,  2057, 11443,  1014,  1012,  5709,  2058,
         1996,  2048,  3903,  1010,  1998,  2057,  5454, 18856,  2004,  2312,
         2004,  2825,  1998, 12731,  2004,  2235,  2004,  2825,  2107,  2008,
          102])"
2800,1,"['tail', 'tail probabilities', 'probabilities']", Critical region and critical values,seg_349,"the left tail probabilities of the bin(10, 1",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1996,  2187,  5725,  4013,  3676, 14680,  1997,  1996,  8026,
         1006,  2184,  1010,  1015,   102])"
2801,1,['distribution'], Critical region and critical values,seg_349,"2 ) distribution are listed in table 26.1. we immediately see that cl = 1 is the largest value such that p(x ≤ cl | p = 1/2) ≤ 0.025. similarly, cu = 9 is the smallest value such that p(x ≥ cu | p = 1/2) ≤ 0.025. indeed, when x has a bin(10, 1",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1016,  1007,  4353,  2024,  3205,  1999,  2795,  2656,  1012,
         1015,  1012,  2057,  3202,  2156,  2008, 18856,  1027,  1015,  2003,
         1996,  2922,  3643,  2107,  2008,  1052,  1006,  1060,  1608, 18856,
         1064,  1052,  1027,  1015,  1013,  1016,  1007,  1608,  1014,  1012,
         6185,  2629,  1012,  6660,  1010, 12731,  1027,  1023,  2003,  1996,
        10479,  3643,  2107,  2008,  1052,  1006,  1060,  1609, 12731,  1064,
         1052,  1027,  1015,  1013,  1016,  1007,  1608,  1014,  1012,  6185,
         2629,  1012,  5262,  1010,  2043,  1060,  2038,  1037,  8026,  1006,
         2184,  1010,  1015,   102])"
2802,1,['distribution'], Critical region and critical values,seg_349,"2 ) distribution,",tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([ 101, 1016, 1007, 4353, 1010,  102])"
2803,1,"['set', 'level', 'critical region', 'type i error', 'error', 'test']", Critical region and critical values,seg_349,"hence, if we test h0 : p = 1/2 against h1 : p = 1/2 at level α = 0.05, the critical region is the set k = {0, 1, 9, 10}. the corresponding type i error is",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([ 101, 6516, 1010, 2065, 2057, 3231, 1044, 2692, 1024, 1052, 1027, 1015,
        1013, 1016, 2114, 1044, 2487, 1024, 1052, 1027, 1015, 1013, 1016, 2012,
        2504, 1155, 1027, 1014, 1012, 5709, 1010, 1996, 4187, 2555, 2003, 1996,
        2275, 1047, 1027, 1063, 1014, 1010, 1015, 1010, 1023, 1010, 2184, 1065,
        1012, 1996, 7978, 2828, 1045, 7561, 2003,  102])"
2804,1,"['critical region', 'significance', 'significance level', 'level']", Critical region and critical values,seg_349,which is smaller than the significance level. you may perform ten throws with your favorite coin and see whether the number of heads falls in the critical region.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2029,  2003,  3760,  2084,  1996,  7784,  2504,  1012,  2017,
         2089,  4685,  2702, 11618,  2007,  2115,  5440,  9226,  1998,  2156,
         3251,  1996,  2193,  1997,  4641,  4212,  1999,  1996,  4187,  2555,
         1012,   102])"
2805,1,"['tail', 'test statistic', 'probabilities', 'level', 'critical region', 'tail probabilities', 'statistic', 'test']", Critical region and critical values,seg_349,quick exercise 26.3 recall the tank example where we tested h0 : n = 350 against h1 : n < 350 by means of the test statistic t = maxxi. suppose that we perform the test at level 0.05. deduce the critical region k corresponding to level 0.05 from the left tail probabilities given here:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  4248,  6912,  2656,  1012,  1017,  9131,  1996,  4951,  2742,
         2073,  2057,  7718,  1044,  2692,  1024,  1050,  1027,  8698,  2114,
         1044,  2487,  1024,  1050,  1026,  8698,  2011,  2965,  1997,  1996,
         3231, 28093,  6553,  1056,  1027,  4098,  9048,  1012,  6814,  2008,
         2057,  4685,  1996,  3231,  2012,  2504,  1014,  1012,  5709,  1012,
         2139,  8566,  3401,  1996,  4187,  2555,  1047,  7978,  2000,  2504,
         1014,  1012,  5709,  2013,  1996,  2187,  5725,  4013,  3676, 14680,
         2445,  2182,  1024,   102])"
2806,0,[], Critical region and critical values,seg_349,one- and two-tailed p-values,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2028,  1011,  1998,  2048,  1011, 14578,  1052,  1011,  5300,
          102])"
2807,0,[], Critical region and critical values,seg_349,"in the euro coin example, we deviate from h0 : p = 1/2 in two directions: values of x both far to the right and far to the left of 5 are evidence against h0. suppose that in ten throws with the 1 euro coin we recorded x heads. what would the p-value be corresponding to x? the problem is that the direction in which values of x are at least as extreme as the observed value x depends on whether x lies to the right or to the left of 5.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1999,  1996,  9944,  9226,  2742,  1010,  2057, 14386,  3686,
         2013,  1044,  2692,  1024,  1052,  1027,  1015,  1013,  1016,  1999,
         2048,  7826,  1024,  5300,  1997,  1060,  2119,  2521,  2000,  1996,
         2157,  1998,  2521,  2000,  1996,  2187,  1997,  1019,  2024,  3350,
         2114,  1044,  2692,  1012,  6814,  2008,  1999,  2702, 11618,  2007,
         1996,  1015,  9944,  9226,  2057,  2680,  1060,  4641,  1012,  2054,
         2052,  1996,  1052,  1011,  3643,  2022,  7978,  2000,  1060,  1029,
         1996,  3291,  2003,  2008,  1996,  3257,  1999,  2029,  5300,  1997,
         1060,  2024,  2012,  2560,  2004,  6034,  2004,  1996,  5159,  3643,
         1060,  9041,  2006,  3251,  1060,  3658,  2000,  1996,  2157,  2030,
         2000,  1996,  2187,  1997,  1019,  1012,   102])"
2808,1,"['tail', 'significance level', 'critical values', 'probability', 'level', 'tail probability', 'significance', 'right tail probability']", Critical region and critical values,seg_349,"at this point there are two natural solutions. one may report the appropriate left or right tail probability, which corresponds to the direction in which x deviates from h0. for instance, if x lies to the right of 5, we compute p(x ≥ x | h0). this is called a one-tailed p-value. the disadvantage of onetailed p-values is that they are somewhat misleading about how strong the evidence of the observed value x bears against h0. in view of the relation between rejection on the basis of critical values or on the basis of a p-value, the one-tailed p-value should be compared to α/2. on the other hand, since people are inclined to compare p-values with the significance level α itself, one could also double the one-tailed p-value and compare this with α. this double-tail probability is called a two-tailed p-value. it doesn’t make much of a difference, as long as one also reports whether the reported p-value is one-tailed or two-tailed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2012,  2023,  2391,  2045,  2024,  2048,  3019,  7300,  1012,
         2028,  2089,  3189,  1996,  6413,  2187,  2030,  2157,  5725,  9723,
         1010,  2029, 14788,  2000,  1996,  3257,  1999,  2029,  1060, 14386,
         8520,  2013,  1044,  2692,  1012,  2005,  6013,  1010,  2065,  1060,
         3658,  2000,  1996,  2157,  1997,  1019,  1010,  2057, 24134,  1052,
         1006,  1060,  1609,  1060,  1064,  1044,  2692,  1007,  1012,  2023,
         2003,  2170,  1037,  2028,  1011, 14578,  1052,  1011,  3643,  1012,
         1996, 20502,  1997,  2028, 14162,  2098,  1052,  1011,  5300,  2003,
         2008,  2027,  2024,  5399, 22369,  2055,  2129,  2844,  1996,  3350,
         1997,  1996,  5159,  3643,  1060,  6468,  2114,  1044,  2692,  1012,
         1999,  3193,  1997,  1996,  7189,  2090, 13893,  2006,  1996,  3978,
         1997,  4187,  5300,  2030,  2006,  1996,  3978,  1997,  1037,  1052,
         1011,  3643,  1010,  1996,  2028,  1011, 14578,  1052,  1011,  3643,
         2323,  2022,  4102,  2000,  1155,  1013,  1016,  1012,  2006,  1996,
         2060,  2192,  1010,  2144,  2111,  2024, 13050,  2000, 12826,  1052,
         1011,  5300,  2007,  1996,  7784,  2504,  1155,  2993,  1010,  2028,
         2071,  2036,  3313,  1996,  2028,  1011, 14578,  1052,  1011,  3643,
         1998, 12826,  2023,  2007,  1155,  1012,  2023,  3313,  1011,  5725,
         9723,  2003,  2170,  1037,  2048,  1011, 14578,  1052,  1011,  3643,
         1012,  2009,  2987,  1521,  1056,  2191,  2172,  1997,  1037,  4489,
         1010,  2004,  2146,  2004,  2028,  2036,  4311,  3251,  1996,  2988,
         1052,  1011,  3643,  2003,  2028,  1011, 14578,  2030,  2048,  1011,
        14578,  1012,   102])"
2809,0,[], Critical region and critical values,seg_349,"let us illustrate things by means of the findings by the polish mathematicians. they performed 250 throws with a belgian 1 euro coin and recorded heads 140 times (see also exercise 24.2). the question is whether this provides strong enough evidence against h0 : p = 1/2. the observed value 140 is to the right of 125, the value we would expect if h0 is true. hence the one-tailed p-value is p(x ≥ 140), where now x has a bin(250, 1",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  2292,  2149, 19141,  2477,  2011,  2965,  1997,  1996,  9556,
         2011,  1996,  3907, 29374,  1012,  2027,  2864,  5539, 11618,  2007,
         1037,  6995,  1015,  9944,  9226,  1998,  2680,  4641,  8574,  2335,
         1006,  2156,  2036,  6912,  2484,  1012,  1016,  1007,  1012,  1996,
         3160,  2003,  3251,  2023,  3640,  2844,  2438,  3350,  2114,  1044,
         2692,  1024,  1052,  1027,  1015,  1013,  1016,  1012,  1996,  5159,
         3643,  8574,  2003,  2000,  1996,  2157,  1997,  8732,  1010,  1996,
         3643,  2057,  2052,  5987,  2065,  1044,  2692,  2003,  2995,  1012,
         6516,  1996,  2028,  1011, 14578,  1052,  1011,  3643,  2003,  1052,
         1006,  1060,  1609,  8574,  1007,  1010,  2073,  2085,  1060,  2038,
         1037,  8026,  1006,  5539,  1010,  1015,   102])"
2810,1,"['approximation', 'normal approximation', 'normal', 'distribution']", Critical region and critical values,seg_349,"2 ) distribution. by means of the normal approximation (see page 201), we find",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  1016,  1007,  4353,  1012,  2011,  2965,  1997,  1996,  3671,
        20167,  1006,  2156,  3931, 16345,  1007,  1010,  2057,  2424,   102])"
2811,1,['statistical'], Critical region and critical values,seg_349,"therefore the two-tailed p-value is approximately 0.0574, which does not provide very strong evidence against h0. in fact, the exact two-tailed p-value, computed by means of statistical software, is 0.066, which is even larger.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  3568,  1996,  2048,  1011, 14578,  1052,  1011,  3643,  2003,
         3155,  1014,  1012,  5709,  2581,  2549,  1010,  2029,  2515,  2025,
         3073,  2200,  2844,  3350,  2114,  1044,  2692,  1012,  1999,  2755,
         1010,  1996,  6635,  2048,  1011, 14578,  1052,  1011,  3643,  1010,
        24806,  2011,  2965,  1997,  7778,  4007,  1010,  2003,  1014,  1012,
         5757,  2575,  1010,  2029,  2003,  2130,  3469,  1012,   102])"
2812,1,"['probabilities', 'case']", Critical region and critical values,seg_349,"quick exercise 26.4 in a dutch newspaper (de telegraaf, january 3, 2002) it was reported that the polish mathematicians recorded heads 150 times. what are the oneand two-tailed probabilities is this case? do they now have a case?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([4187, 2555, 1998, 4187, 5300])","tensor([  101,  4248,  6912,  2656,  1012,  1018,  1999,  1037,  3803,  3780,
         1006,  2139, 10093, 13910,  2527, 10354,  1010,  2254,  1017,  1010,
         2526,  1007,  2009,  2001,  2988,  2008,  1996,  3907, 29374,  2680,
         4641,  5018,  2335,  1012,  2054,  2024,  1996,  2028,  5685,  2048,
         1011, 14578,  4013,  3676, 14680,  2003,  2023,  2553,  1029,  2079,
         2027,  2085,  2031,  1037,  2553,  1029,   102])"
2813,1,"['significance level', 'probability', 'level', 'control', 'type i error', 'significance', 'average', 'error']", Type II error,seg_351,"as we have just seen, by setting a significance level α, we are able to control the probability of committing a type i error; it will at most be α. for instance, let us return to the freeway example and suppose that we adopt the decision rule to fine the driver for speeding if her average observed speed is at least 121.9, i.e.,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  2004,  2057,  2031,  2074,  2464,  1010,  2011,  4292,  1037,
         7784,  2504,  1155,  1010,  2057,  2024,  2583,  2000,  2491,  1996,
         9723,  1997, 16873,  1037,  2828,  1045,  7561,  1025,  2009,  2097,
         2012,  2087,  2022,  1155,  1012,  2005,  6013,  1010,  2292,  2149,
         2709,  2000,  1996, 10846,  2742,  1998,  6814,  2008,  2057, 11092,
         1996,  3247,  3627,  2000,  2986,  1996,  4062,  2005, 21485,  2065,
         2014,  2779,  5159,  3177,  2003,  2012,  2560, 12606,  1012,  1023,
         1010,  1045,  1012,  1041,  1012,  1010,   102])"
2814,1,"['type ii error', 'probability', 'percentage', 'type ii', 'type i error', 'average', 'error']", Type II error,seg_351,"from section 26.1 we know that with this decision rule, the probability of a type i error is 0.05. what is the probability of committing a type ii error? this corresponds to the percentage of drivers whose true speed is above 120 but who do not get fined because their recorded average speed is below 121.9.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  2013,  2930,  2656,  1012,  1015,  2057,  2113,  2008,  2007,
         2023,  3247,  3627,  1010,  1996,  9723,  1997,  1037,  2828,  1045,
         7561,  2003,  1014,  1012,  5709,  1012,  2054,  2003,  1996,  9723,
         1997, 16873,  1037,  2828,  2462,  7561,  1029,  2023, 14788,  2000,
         1996,  7017,  1997,  6853,  3005,  2995,  3177,  2003,  2682,  6036,
         2021,  2040,  2079,  2025,  2131, 16981,  2138,  2037,  2680,  2779,
         3177,  2003,  2917, 12606,  1012,  1023,  1012,   102])"
2815,1,"['type ii error', 'probability', 'type ii', 'distribution', 'error']", Type II error,seg_351,"for instance, suppose that a car passes at true speed µ = 125. a type ii error occurs when t < 121.9, and since t = x̄3 has an n(125, 4/3) distribution, the probability that this happens is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  2005,  6013,  1010,  6814,  2008,  1037,  2482,  5235,  2012,
         2995,  3177,  1085,  1027,  8732,  1012,  1037,  2828,  2462,  7561,
         5158,  2043,  1056,  1026, 12606,  1012,  1023,  1010,  1998,  2144,
         1056,  1027,  1060,  2509,  2038,  2019,  1050,  1006,  8732,  1010,
         1018,  1013,  1017,  1007,  4353,  1010,  1996,  9723,  2008,  2023,
         6433,  2003,   102])"
2816,1,"['type ii error', 'probability', 'type ii', 'error', 'case']", Type II error,seg_351,"this looks promising, but now consider a vehicle passing at true speed µ = 123. the probability of committing a type ii error in this case is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  2023,  3504, 10015,  1010,  2021,  2085,  5136,  1037,  4316,
         4458,  2012,  2995,  3177,  1085,  1027, 13138,  1012,  1996,  9723,
         1997, 16873,  1037,  2828,  2462,  7561,  1999,  2023,  2553,  2003,
          102])"
2817,1,"['curve', 'probability', 'hypothesis', 'type i error', 'distribution', 'null hypothesis', 'error']", Type II error,seg_351,"hence 17.11% of all drivers that pass at speed µ = 123 will not get fined. in figure 26.3 the last situation is illustrated. the curve on the left represents the probability density of the n(120, 4/3) distribution, which is the distribution of t under the null hypothesis. the shaded area on the right of 121.9 represents the probability of committing a type i error",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  6516,  2459,  1012,  2340,  1003,  1997,  2035,  6853,  2008,
         3413,  2012,  3177,  1085,  1027, 13138,  2097,  2025,  2131, 16981,
         1012,  1999,  3275,  2656,  1012,  1017,  1996,  2197,  3663,  2003,
         7203,  1012,  1996,  7774,  2006,  1996,  2187,  5836,  1996,  9723,
         4304,  1997,  1996,  1050,  1006,  6036,  1010,  1018,  1013,  1017,
         1007,  4353,  1010,  2029,  2003,  1996,  4353,  1997,  1056,  2104,
         1996, 19701, 10744,  1012,  1996, 25273,  2181,  2006,  1996,  2157,
         1997, 12606,  1012,  1023,  5836,  1996,  9723,  1997, 16873,  1037,
         2828,  1045,  7561,   102])"
2818,1,"['curve', 'type ii error', 'probability', 'type ii', 'distribution', 'error']", Type II error,seg_351,"the curve on the right is the probability density of the n(123, 4/3) distribution, which is the distribution of t under the alternative µ = 123. the shaded area on the left of 121.9 represents the probability of a type ii error",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  1996,  7774,  2006,  1996,  2157,  2003,  1996,  9723,  4304,
         1997,  1996,  1050,  1006, 13138,  1010,  1018,  1013,  1017,  1007,
         4353,  1010,  2029,  2003,  1996,  4353,  1997,  1056,  2104,  1996,
         4522,  1085,  1027, 13138,  1012,  1996, 25273,  2181,  2006,  1996,
         2187,  1997, 12606,  1012,  1023,  5836,  1996,  9723,  1997,  1037,
         2828,  2462,  7561,   102])"
2819,1,"['probability', 'type ii error', 'type ii', 'error']", Type II error,seg_351,"shifting µ further to the right will result in a smaller probability of a type ii error. however, shifting µ toward the value 120 leads to a larger probability of a type ii error. in fact it can be arbitrarily close to 0.95.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  9564,  1085,  2582,  2000,  1996,  2157,  2097,  2765,  1999,
         1037,  3760,  9723,  1997,  1037,  2828,  2462,  7561,  1012,  2174,
         1010,  9564,  1085,  2646,  1996,  3643,  6036,  5260,  2000,  1037,
         3469,  9723,  1997,  1037,  2828,  2462,  7561,  1012,  1999,  2755,
         2009,  2064,  2022, 12098, 16313, 19848,  6588,  2485,  2000,  1014,
         1012,  5345,  1012,   102])"
2820,1,"['type ii error', 'contrast', 'probability', 'type ii', 'hypothesis', 'alternative hypothesis', 'type i error', 'error']", Type II error,seg_351,"the previous example illustrates that the probability of committing a type ii error depends on the actual value of µ in the alternative hypothesis h1 : µ > 120. the closer µ is to 120, the higher the probability of a type ii error will be. in contrast with the probability of a type i error, which is always at most α, the probability of a type ii error may be arbitrarily close to 1− α. this is illustrated in the next quick exercise.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  1996,  3025,  2742, 24899,  2008,  1996,  9723,  1997, 16873,
         1037,  2828,  2462,  7561,  9041,  2006,  1996,  5025,  3643,  1997,
         1085,  1999,  1996,  4522, 10744,  1044,  2487,  1024,  1085,  1028,
         6036,  1012,  1996,  3553,  1085,  2003,  2000,  6036,  1010,  1996,
         3020,  1996,  9723,  1997,  1037,  2828,  2462,  7561,  2097,  2022,
         1012,  1999,  5688,  2007,  1996,  9723,  1997,  1037,  2828,  1045,
         7561,  1010,  2029,  2003,  2467,  2012,  2087,  1155,  1010,  1996,
         9723,  1997,  1037,  2828,  2462,  7561,  2089,  2022, 12098, 16313,
        19848,  6588,  2485,  2000,  1015, 22543,  1155,  1012,  2023,  2003,
         7203,  1999,  1996,  2279,  4248,  6912,  1012,   102])"
2821,1,"['probability', 'type ii error', 'type ii', 'error']", Type II error,seg_351,quick exercise 26.5 what is the probability of a type ii error in the freeway example if µ = 120.1?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2828, 2462, 7561])","tensor([  101,  4248,  6912,  2656,  1012,  1019,  2054,  2003,  1996,  9723,
         1997,  1037,  2828,  2462,  7561,  1999,  1996, 10846,  2742,  2065,
         1085,  1027,  6036,  1012,  1015,  1029,   102])"
2822,1,"['critical value', 'level']", Relation with confidence intervals,seg_353,"when testing h0 : µ = 120 against h1 : µ > 120 at level 0.05 in the freeway example, the critical value was obtained by the formula",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  2043,  5604,  1044,  2692,  1024,  1085,  1027,  6036,  2114,
         1044,  2487,  1024,  1085,  1028,  6036,  2012,  2504,  1014,  1012,
         5709,  1999,  1996, 10846,  2742,  1010,  1996,  4187,  3643,  2001,
         4663,  2011,  1996,  5675,   102])"
2823,1,"['confidence', 'case', 'confidence bound', 'distribution']", Relation with confidence intervals,seg_353,"on the other hand, using that x̄3 has an n(µ, 4/3) distribution, a 95% lower confidence bound for µ in this case can be derived from",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([ 101, 2006, 1996, 2060, 2192, 1010, 2478, 2008, 1060, 2509, 2038, 2019,
        1050, 1006, 1085, 1010, 1018, 1013, 1017, 1007, 4353, 1010, 1037, 5345,
        1003, 2896, 7023, 5391, 2005, 1085, 1999, 2023, 2553, 2064, 2022, 5173,
        2013,  102])"
2824,1,"['dataset', 'hypotheses', 'statistical', 'confidence']", Relation with confidence intervals,seg_353,"although, at first sight, testing hypotheses and constructing confidence intervals seem to be two separate statistical procedures, they are in fact intimately related. in the freeway example, observe that for a given dataset x1, x2, x3,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  2348,  1010,  2012,  2034,  4356,  1010,  5604,  1044, 22571,
        14573, 23072,  1998, 15696,  7023, 14025,  4025,  2000,  2022,  2048,
         3584,  7778,  8853,  1010,  2027,  2024,  1999,  2755, 29024,  3141,
         1012,  1999,  1996, 10846,  2742,  1010, 11949,  2008,  2005,  1037,
         2445,  2951, 13462,  1060,  2487,  1010,  1060,  2475,  1010,  1060,
         2509,  1010,   102])"
2825,1,['level'], Relation with confidence intervals,seg_353,we reject h0 : µ = 120 in favor of h1 : µ > 120 at level 0.05 2 ⇔ x̄3 ≥ 120 + 1.645 · √3,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  2057, 15454,  1044,  2692,  1024,  1085,  1027,  6036,  1999,
         5684,  1997,  1044,  2487,  1024,  1085,  1028,  6036,  2012,  2504,
         1014,  1012,  5709,  1016,   100,  1060,  2509,  1609,  6036,  1009,
         1015,  1012,  4185,  2629,  1087,  1600,  2509,   102])"
2826,1,"['interval', 'confidence', 'confidence interval']", Relation with confidence intervals,seg_353,2 ⇔ x̄3 − 1.645 · ≥ 120 √3 ⇔ 120 is not in the 95% one-sided confidence interval for µ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  1016,   100,  1060,  2509,  1597,  1015,  1012,  4185,  2629,
         1087,  1609,  6036,  1600,  2509,   100,  6036,  2003,  2025,  1999,
         1996,  5345,  1003,  2028,  1011, 11536,  7023, 13483,  2005,  1085,
         1012,   102])"
2827,1,"['parameter', 'test']", Relation with confidence intervals,seg_353,"this is not a coincidence. in general, the following applies. suppose that for some parameter θ we test h0 : θ = θ0. then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  2023,  2003,  2025,  1037, 16507,  1012,  1999,  2236,  1010,
         1996,  2206, 12033,  1012,  6814,  2008,  2005,  2070, 16381,  1162,
         2057,  3231,  1044,  2692,  1024,  1162,  1027,  1162,  2692,  1012,
         2059,   102])"
2828,1,['level'], Relation with confidence intervals,seg_353,we reject h0 : θ = θ0 in favor of h1 : θ > θ0 at level α,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  2057, 15454,  1044,  2692,  1024,  1162,  1027,  1162,  2692,
         1999,  5684,  1997,  1044,  2487,  1024,  1162,  1028,  1162,  2692,
         2012,  2504,  1155,   102])"
2829,0,[], Relation with confidence intervals,seg_353,if and only if,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 7189,  2007,  7023, 14025])","tensor([ 101, 2065, 1998, 2069, 2065,  102])"
2830,1,"['interval', 'confidence', 'confidence interval']", Relation with confidence intervals,seg_353,θ0 is not in the 100(1− α)% one-sided confidence interval for θ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  1162,  2692,  2003,  2025,  1999,  1996,  2531,  1006,  1015,
        22543,  1155,  1007,  1003,  2028,  1011, 11536,  7023, 13483,  2005,
         1162,  1012,   102])"
2831,1,"['intervals', 'confidence intervals', 'confidence']", Relation with confidence intervals,seg_353,"the same relation holds for testing against h1 : θ < θ0, and a similar relation holds between testing against h1 : θ = θ0 and two-sided confidence intervals:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  1996,  2168,  7189,  4324,  2005,  5604,  2114,  1044,  2487,
         1024,  1162,  1026,  1162,  2692,  1010,  1998,  1037,  2714,  7189,
         4324,  2090,  5604,  2114,  1044,  2487,  1024,  1162,  1027,  1162,
         2692,  1998,  2048,  1011, 11536,  7023, 14025,  1024,   102])"
2832,1,['level'], Relation with confidence intervals,seg_353,we reject h0 : θ = θ0 in favor of h1 : θ0 = θ0 at level α,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  2057, 15454,  1044,  2692,  1024,  1162,  1027,  1162,  2692,
         1999,  5684,  1997,  1044,  2487,  1024,  1162,  2692,  1027,  1162,
         2692,  2012,  2504,  1155,   102])"
2833,0,[], Relation with confidence intervals,seg_353,if and only if,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 7189,  2007,  7023, 14025])","tensor([ 101, 2065, 1998, 2069, 2065,  102])"
2834,1,['confidence'], Relation with confidence intervals,seg_353,θ0 is not in the 100(1− α)% two-sided confidence region for θ.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  1162,  2692,  2003,  2025,  1999,  1996,  2531,  1006,  1015,
        22543,  1155,  1007,  1003,  2048,  1011, 11536,  7023,  2555,  2005,
         1162,  1012,   102])"
2835,1,"['parameter', 'set', 'hypothesis', 'level', 'null hypothesis', 'confidence']", Relation with confidence intervals,seg_353,"in fact, one could use these facts to define the 100(1−α)% confidence region for a parameter θ as the set of values θ0 for which the null hypothesis h0 : θ = θ0 is not rejected at level α.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  1999,  2755,  1010,  2028,  2071,  2224,  2122,  8866,  2000,
         9375,  1996,  2531,  1006,  1015, 22543, 14608,  1007,  1003,  7023,
         2555,  2005,  1037, 16381,  1162,  2004,  1996,  2275,  1997,  5300,
         1162,  2692,  2005,  2029,  1996, 19701, 10744,  1044,  2692,  1024,
         1162,  1027,  1162,  2692,  2003,  2025,  5837,  2012,  2504,  1155,
         1012,   102])"
2836,1,"['confidence interval', 'studentized mean', 'null hypothesis', 'confidence', 'median', 'mean', 'interval', 'random variable', 'statistic', 'test', 'parameter', 'test statistic', 'hypothesis', 'sample median', 'sample', 'random', 'distribution', 'variable']", Relation with confidence intervals,seg_353,"it should be emphasized that these relations only hold if the random variable that is used to construct the confidence interval relates appropriately to the test statistic. for instance, the preceding relations do not hold if on the one hand, we construct a confidence interval for the parameter µ of an n(µ, σ2) distribution by means of the studentized mean (x̄n−µ)/(sn/√n), and on the other hand, use the sample median medn to test a null hypothesis for µ.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7189,  2007,  7023, 14025])","tensor([  101,  2009,  2323,  2022, 13155,  2008,  2122,  4262,  2069,  2907,
         2065,  1996,  6721,  8023,  2008,  2003,  2109,  2000,  9570,  1996,
         7023, 13483, 14623, 23263,  2000,  1996,  3231, 28093,  6553,  1012,
         2005,  6013,  1010,  1996, 11003,  4262,  2079,  2025,  2907,  2065,
         2006,  1996,  2028,  2192,  1010,  2057,  9570,  1037,  7023, 13483,
         2005,  1996, 16381,  1085,  1997,  2019,  1050,  1006,  1085,  1010,
         1173,  2475,  1007,  4353,  2011,  2965,  1997,  1996,  3076,  3550,
         2812,  1006,  1060,  2078, 22543, 29659,  1007,  1013,  1006,  1055,
         2078,  1013,  1600,  2078,  1007,  1010,  1998,  2006,  1996,  2060,
         2192,  1010,  2224,  1996,  7099,  3991, 19960,  2078,  2000,  3231,
         1037, 19701, 10744,  2005,  1085,  1012,   102])"
2837,1,"['mean', 'significance level', 'probability', 'information', 'level', 'type i error', 'significance', 'error']", Solutions to the quick exercises,seg_355,"26.1 in the first situation, we reject at significance level α = 0.05, which means that the probability of committing a type i error is at most 0.05. this does not necessarily mean that this probability will also be less than or equal to 0.01. therefore with this information we cannot know whether we also reject at level α = 0.01. in the reversed situation, if we reject at level α = 0.01, then the probability of committing a type i error is at most 0.01, and is therefore also smaller than 0.05. this means that we also reject at level α = 0.05.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2656,  1012,  1015,  1999,  1996,  2034,  3663,  1010,  2057,
        15454,  2012,  7784,  2504,  1155,  1027,  1014,  1012,  5709,  1010,
         2029,  2965,  2008,  1996,  9723,  1997, 16873,  1037,  2828,  1045,
         7561,  2003,  2012,  2087,  1014,  1012,  5709,  1012,  2023,  2515,
         2025,  9352,  2812,  2008,  2023,  9723,  2097,  2036,  2022,  2625,
         2084,  2030,  5020,  2000,  1014,  1012,  5890,  1012,  3568,  2007,
         2023,  2592,  2057,  3685,  2113,  3251,  2057,  2036, 15454,  2012,
         2504,  1155,  1027,  1014,  1012,  5890,  1012,  1999,  1996, 11674,
         3663,  1010,  2065,  2057, 15454,  2012,  2504,  1155,  1027,  1014,
         1012,  5890,  1010,  2059,  1996,  9723,  1997, 16873,  1037,  2828,
         1045,  7561,  2003,  2012,  2087,  1014,  1012,  5890,  1010,  1998,
         2003,  3568,  2036,  3760,  2084,  1014,  1012,  5709,  1012,  2023,
         2965,  2008,  2057,  2036, 15454,  2012,  2504,  1155,  1027,  1014,
         1012,  5709,  1012,   102])"
2838,1,"['significance', 'significance level', 'level']", Solutions to the quick exercises,seg_355,"26.2 to decide whether we should reject h0 : µ = 120 at level 0.01, we could compute p(t ≥ 124 | h0) and compare this with 0.01. we have already seen that p(t ≥ 124 | h0) = 0.0003. this is (much) smaller than the significance level α = 0.01, so we should reject.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2656,  1012,  1016,  2000,  5630,  3251,  2057,  2323, 15454,
         1044,  2692,  1024,  1085,  1027,  6036,  2012,  2504,  1014,  1012,
         5890,  1010,  2057,  2071, 24134,  1052,  1006,  1056,  1609, 13412,
         1064,  1044,  2692,  1007,  1998, 12826,  2023,  2007,  1014,  1012,
         5890,  1012,  2057,  2031,  2525,  2464,  2008,  1052,  1006,  1056,
         1609, 13412,  1064,  1044,  2692,  1007,  1027,  1014,  1012,  2199,
         2509,  1012,  2023,  2003,  1006,  2172,  1007,  3760,  2084,  1996,
         7784,  2504,  1155,  1027,  1014,  1012,  5890,  1010,  2061,  2057,
         2323, 15454,  1012,   102])"
2839,1,['critical region'], Solutions to the quick exercises,seg_355,"the critical region is k = [c,∞), where we must solve c from",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 1996, 4187, 2555, 2003, 1047, 1027, 1031, 1039, 1010, 1601, 1007,
        1010, 2073, 2057, 2442, 9611, 1039, 2013,  102])"
2840,0,[], Solutions to the quick exercises,seg_355,"since z0.01 = 2.326, this means that c = 120 + 2.326 · (2/√3) = 122.7.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2144,  1062,  2692,  1012,  5890,  1027,  1016,  1012, 28188,
         1010,  2023,  2965,  2008,  1039,  1027,  6036,  1009,  1016,  1012,
        28188,  1087,  1006,  1016,  1013,  1600,  2509,  1007,  1027, 13092,
         1012,  1021,  1012,   102])"
2841,1,"['critical region', 'table']", Solutions to the quick exercises,seg_355,"26.3 the critical region is of the form k = {5, 6, . . . , c}, where the critical value c is the largest value, for which p(t ≤ c | h0) is still less than or equal to 0.05. from the table we immediately see that c = 193 and that p(t ∈ k | h0) = p(t ≤ 193 | h0) = 0.0498, which is not equal to 0.05.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2656,  1012,  1017,  1996,  4187,  2555,  2003,  1997,  1996,
         2433,  1047,  1027,  1063,  1019,  1010,  1020,  1010,  1012,  1012,
         1012,  1010,  1039,  1065,  1010,  2073,  1996,  4187,  3643,  1039,
         2003,  1996,  2922,  3643,  1010,  2005,  2029,  1052,  1006,  1056,
         1608,  1039,  1064,  1044,  2692,  1007,  2003,  2145,  2625,  2084,
         2030,  5020,  2000,  1014,  1012,  5709,  1012,  2013,  1996,  2795,
         2057,  3202,  2156,  2008,  1039,  1027, 19984,  1998,  2008,  1052,
         1006,  1056,  1596,  1047,  1064,  1044,  2692,  1007,  1027,  1052,
         1006,  1056,  1608, 19984,  1064,  1044,  2692,  1007,  1027,  1014,
         1012,  5840,  2683,  2620,  1010,  2029,  2003,  2025,  5020,  2000,
         1014,  1012,  5709,  1012,   102])"
2842,1,"['approximation', 'normal approximation', 'normal']", Solutions to the quick exercises,seg_355,"26.4 by means of the normal approximation, for the one-tailed p-value we find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2656,  1012,  1018,  2011,  2965,  1997,  1996,  3671, 20167,
         1010,  2005,  1996,  2028,  1011, 14578,  1052,  1011,  3643,  2057,
         2424,   102])"
2843,1,['case'], Solutions to the quick exercises,seg_355,"the two-tailed p-value is 0.0016. this is a lot smaller than the two-tailed pvalue 0.0574, corresponding to 140 heads. it seems that with 150 heads the mathematicians would have a case; the belgian euro coin would then appear not to be fair.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1996,  2048,  1011, 14578,  1052,  1011,  3643,  2003,  1014,
         1012, 25604,  2575,  1012,  2023,  2003,  1037,  2843,  3760,  2084,
         1996,  2048,  1011, 14578, 26189,  2389,  5657,  1014,  1012,  5709,
         2581,  2549,  1010,  7978,  2000,  8574,  4641,  1012,  2009,  3849,
         2008,  2007,  5018,  4641,  1996, 29374,  2052,  2031,  1037,  2553,
         1025,  1996,  6995,  9944,  9226,  2052,  2059,  3711,  2025,  2000,
         2022,  4189,  1012,   102])"
2844,1,"['probability', 'type ii error', 'type ii', 'error']", Solutions to the quick exercises,seg_355,26.5 the probability of a type ii error is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([ 101, 2656, 1012, 1019, 1996, 9723, 1997, 1037, 2828, 2462, 7561, 2003,
         102])"
2845,1,"['type ii error', 'table', 'experienced', 'estimate', 'type ii', 'probabilities', 'hypothesis', 'results', 'method', 'type i error', 'alternative hypothesis', 'hypothesis testing', 'null hypothesis', 'error']", Exercises,seg_357,"26.1 polygraphs that are used in criminal investigations are supposed to indicate whether a person is lying or telling the truth. however the procedure is not infallible, as is illustrated by the following example. an experienced polygraph examiner was asked to make an overall judgment for each of a total 280 records, of which 140 were from guilty suspects and 140 from innocent suspects. the results are listed in table 26.2. we view each judgment as a problem of hypothesis testing, with the null hypothesis corresponding to “suspect is innocent” and the alternative hypothesis to “suspect is guilty.” estimate the probabilities of a type i error and a type ii error that apply to this polygraph method on the basis of table 26.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0.,
        1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1015, 26572, 27341,  2008,  2024,  2109,  1999,
         4735,  9751,  2024,  4011,  2000,  5769,  3251,  1037,  2711,  2003,
         4688,  2030,  4129,  1996,  3606,  1012,  2174,  1996,  7709,  2003,
         2025,  1999, 13976,  7028,  1010,  2004,  2003,  7203,  2011,  1996,
         2206,  2742,  1012,  2019,  5281, 26572, 14413, 19684,  2001,  2356,
         2000,  2191,  2019,  3452,  8689,  2005,  2169,  1997,  1037,  2561,
        13427,  2636,  1010,  1997,  2029,  8574,  2020,  2013,  5905, 13172,
         1998,  8574,  2013,  7036, 13172,  1012,  1996,  3463,  2024,  3205,
         1999,  2795,  2656,  1012,  1016,  1012,  2057,  3193,  2169,  8689,
         2004,  1037,  3291,  1997, 10744,  5604,  1010,  2007,  1996, 19701,
        10744,  7978,  2000,  1523,  8343,  2003,  7036,  1524,  1998,  1996,
         4522, 10744,  2000,  1523,  8343,  2003,  5905,  1012,  1524, 10197,
         1996,  4013,  3676, 14680,  1997,  1037,  2828,  1045,  7561,  1998,
         1037,  2828,  2462,  7561,  2008,  6611,  2000,  2023, 26572, 14413,
         4118,  2006,  1996,  3978,  1997,  2795,  2656,  1012,  1016,  1012,
          102])"
2846,1,"['type ii error', 'probability', 'type ii', 'error']", Exercises,seg_357,26.2 consider the testing problem in exercise 25.11. compute the probability of committing a type ii error if the true value of µ is 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1016,  5136,  1996,  5604,  3291,  1999,  6912,
         2423,  1012,  2340,  1012, 24134,  1996,  9723,  1997, 16873,  1037,
         2828,  2462,  7561,  2065,  1996,  2995,  3643,  1997,  1085,  2003,
         1015,  1012,   102])"
2847,1,"['interval', 'test', 'uniform distribution', 'distribution']", Exercises,seg_357,"26.3 one generates a number x from a uniform distribution on the interval [0, θ]. one decides to test h0 : θ = 2 against h1 : θ = 2 by rejecting h0 if x ≤ 0.1 or x ≥ 1.9.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1017,  2028, 19421,  1037,  2193,  1060,  2013,
         1037,  6375,  4353,  2006,  1996, 13483,  1031,  1014,  1010,  1162,
         1033,  1012,  2028,  7288,  2000,  3231,  1044,  2692,  1024,  1162,
         1027,  1016,  2114,  1044,  2487,  1024,  1162,  1027,  1016,  2011,
        21936,  1044,  2692,  2065,  1060,  1608,  1014,  1012,  1015,  2030,
         1060,  1609,  1015,  1012,  1023,  1012,   102])"
2848,1,"['probability', 'type i error', 'error']", Exercises,seg_357,a. compute the probability of committing a type i error.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  9723,  1997, 16873,  1037,  2828,
         1045,  7561,  1012,   102])"
2849,1,"['probability', 'type ii error', 'type ii', 'error']", Exercises,seg_357,b. compute the probability of committing a type ii error if the true value,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  9723,  1997, 16873,  1037,  2828,
         2462,  7561,  2065,  1996,  2995,  3643,   102])"
2850,1,['hypothesis'], Exercises,seg_357,"26.4 to investigate the hypothesis that a horse’s chances of winning an eighthorse race on a circular track are affected by its position in the starting lineup,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1018,  2000,  8556,  1996, 10744,  2008,  1037,
         3586,  1521,  1055,  9592,  1997,  3045,  2019,  5964,  5668,  2063,
         2679,  2006,  1037,  8206,  2650,  2024,  5360,  2011,  2049,  2597,
         1999,  1996,  3225, 10515,  1010,   102])"
2851,1,"['test statistic', 'random variable', 'hypothesis', 'level', 'random', 'distribution', 'model', 'statistic', 'variable', 'test']", Exercises,seg_357,"the starting position of each of 144 winners was recorded ([30]). it turned out that 29 of these winners had starting position one (closest to the rail on the inside track). we model the number of winners with starting position one by a random variable t with a bin(144, p) distribution. we test the hypothesis h0 : p = 1/8 against h1 : p > 1/8 at level α = 0.01 with t as test statistic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  3225,  2597,  1997,  2169,  1997, 14748,  4791,  2001,
         2680,  1006,  1031,  2382,  1033,  1007,  1012,  2009,  2357,  2041,
         2008,  2756,  1997,  2122,  4791,  2018,  3225,  2597,  2028,  1006,
         7541,  2000,  1996,  4334,  2006,  1996,  2503,  2650,  1007,  1012,
         2057,  2944,  1996,  2193,  1997,  4791,  2007,  3225,  2597,  2028,
         2011,  1037,  6721,  8023,  1056,  2007,  1037,  8026,  1006, 14748,
         1010,  1052,  1007,  4353,  1012,  2057,  3231,  1996, 10744,  1044,
         2692,  1024,  1052,  1027,  1015,  1013,  1022,  2114,  1044,  2487,
         1024,  1052,  1028,  1015,  1013,  1022,  2012,  2504,  1155,  1027,
         1014,  1012,  5890,  2007,  1056,  2004,  3231, 28093,  6553,  1012,
          102])"
2852,1,"['critical value', 'right critical value', 'test']", Exercises,seg_357,"a. argue whether the test procedure involves a right critical value, a left",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 7475, 3251, 1996, 3231, 7709, 7336, 1037, 2157, 4187,
        3643, 1010, 1037, 2187,  102])"
2853,0,[], Exercises,seg_357,"critical value, or both.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 4187, 3643, 1010, 2030, 2119, 1012,  102])"
2854,1,"['normal', 'approximation', 'normal approximation']", Exercises,seg_357,b. use the normal approximation to compute the critical value(s) correspond-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2224,  1996,  3671, 20167,  2000, 24134,  1996,
         4187,  3643,  1006,  1055,  1007, 17254,  1011,   102])"
2855,1,"['critical region', 'null hypothesis', 'hypothesis']", Exercises,seg_357,"ing to α = 0.01, determine the critical region, and report your conclusion about the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101, 13749,  2000,  1155,  1027,  1014,  1012,  5890,  1010,  5646,
         1996,  4187,  2555,  1010,  1998,  3189,  2115,  7091,  2055,  1996,
        19701, 10744,  1012,   102])"
2856,1,"['table', 'null hypothesis', 'confidence', 'random variable', 'normal', 'statistic', 'test', 'test statistic', 'approximation', 'normal approximation', 'hypothesis', 'results', 'confidence intervals', 'random', 'intervals', 'distribution', 'variable']", Exercises,seg_357,"26.5 recall exercises 23.5 and 24.8 about the 1500m speed-skating results in the 2002 winter olympic games. the number of races won by skaters starting in the outer lane is modeled by a random variable x with a bin(23, p) distribution. the question of whether there is an outer lane advantage was investigated in exercise 24.8 by means of constructing confidence intervals using the normal approximation. in this exercise we examine this question by testing the null hypothesis h0 : p = 1/2 against h1 : p > 1/2 using x as the test statistic. the distribution of x under h0 is given in table 26.3. out of 23 completed races, 15 were won by skaters starting in the outer lane.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1019,  9131, 11110,  2603,  1012,  1019,  1998,
         2484,  1012,  1022,  2055,  1996, 10347,  2213,  3177,  1011, 10080,
         3463,  1999,  1996,  2526,  3467,  4386,  2399,  1012,  1996,  2193,
         1997,  3837,  2180,  2011, 24789,  3225,  1999,  1996,  6058,  4644,
         2003, 14440,  2011,  1037,  6721,  8023,  1060,  2007,  1037,  8026,
         1006,  2603,  1010,  1052,  1007,  4353,  1012,  1996,  3160,  1997,
         3251,  2045,  2003,  2019,  6058,  4644,  5056,  2001, 10847,  1999,
         6912,  2484,  1012,  1022,  2011,  2965,  1997, 15696,  7023, 14025,
         2478,  1996,  3671, 20167,  1012,  1999,  2023,  6912,  2057, 11628,
         2023,  3160,  2011,  5604,  1996, 19701, 10744,  1044,  2692,  1024,
         1052,  1027,  1015,  1013,  1016,  2114,  1044,  2487,  1024,  1052,
         1028,  1015,  1013,  1016,  2478,  1060,  2004,  1996,  3231, 28093,
         6553,  1012,  1996,  4353,  1997,  1060,  2104,  1044,  2692,  2003,
         2445,  1999,  2795,  2656,  1012,  1017,  1012,  2041,  1997,  2603,
         2949,  3837,  1010,  2321,  2020,  2180,  2011, 24789,  3225,  1999,
         1996,  6058,  4644,  1012,   102])"
2857,0,[], Exercises,seg_357,a. compute the p-value corresponding to x = 15 and report your conclusion,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([  101,  1037,  1012, 24134,  1996,  1052,  1011,  3643,  7978,  2000,
         1060,  1027,  2321,  1998,  3189,  2115,  7091,   102])"
2858,1,"['confidence interval', 'interval', 'level', 'confidence', 'test']", Exercises,seg_357,if we perform the test at level 0.05. does your conclusion agree with the confidence interval you found for p in exercise 24.8b?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2065,  2057,  4685,  1996,  3231,  2012,  2504,  1014,  1012,
         5709,  1012,  2515,  2115,  7091,  5993,  2007,  1996,  7023, 13483,
         2017,  2179,  2005,  1052,  1999,  6912,  2484,  1012,  1022,  2497,
         1029,   102])"
2859,1,"['critical region', 'significance', 'significance level', 'level']", Exercises,seg_357,b. determine the critical region corresponding to significance level α = 0.05.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 5646, 1996, 4187, 2555, 7978, 2000, 7784, 2504, 1155,
        1027, 1014, 1012, 5709, 1012,  102])"
2860,1,"['probability', 'type i error', 'error']", Exercises,seg_357,c. compute the probability of committing a type i error if we base our,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012, 24134,  1996,  9723,  1997, 16873,  1037,  2828,
         1045,  7561,  2065,  2057,  2918,  2256,   102])"
2861,1,['critical region'], Exercises,seg_357,decision rule on the critical region determined in b.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 3247, 3627, 2006, 1996, 4187, 2555, 4340, 1999, 1038, 1012,  102])"
2862,1,"['probability', 'normal', 'approximation', 'normal approximation']", Exercises,seg_357,d. use the normal approximation to determine the probability of committing,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1040,  1012,  2224,  1996,  3671, 20167,  2000,  5646,  1996,
         9723,  1997, 16873,   102])"
2863,1,"['type ii error', 'type ii', 'critical region', 'error', 'case']", Exercises,seg_357,"a type ii error for the case p = 0.6, if we base our decision rule on the critical region determined in b.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 2828, 2462, 7561, 2005, 1996, 2553, 1052, 1027, 1014, 1012,
        1020, 1010, 2065, 2057, 2918, 2256, 3247, 3627, 2006, 1996, 4187, 2555,
        4340, 1999, 1038, 1012,  102])"
2864,1,"['test statistic', 'statistic', 'level', 'test']", Exercises,seg_357,26.6 consider exercises 25.2 and 25.7. one decides to test h0 : µ = 1472 against h1 : µ > 1472 at level α = 0.05 on the basis of the recorded value 1718 of the test statistic t .,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1020,  5136, 11110,  2423,  1012,  1016,  1998,
         2423,  1012,  1021,  1012,  2028,  7288,  2000,  3231,  1044,  2692,
         1024,  1085,  1027, 16471,  2475,  2114,  1044,  2487,  1024,  1085,
         1028, 16471,  2475,  2012,  2504,  1155,  1027,  1014,  1012,  5709,
         2006,  1996,  3978,  1997,  1996,  2680,  3643, 26995,  1997,  1996,
         3231, 28093,  6553,  1056,  1012,   102])"
2865,1,"['critical value', 'right critical value', 'test']", Exercises,seg_357,"a. argue whether the test procedure involves a right critical value, a left",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1037, 1012, 7475, 3251, 1996, 3231, 7709, 7336, 1037, 2157, 4187,
        3643, 1010, 1037, 2187,  102])"
2866,0,[], Exercises,seg_357,"critical value, or both.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([11110]),"tensor([ 101, 4187, 3643, 1010, 2030, 2119, 1012,  102])"
2867,1,['distribution'], Exercises,seg_357,"b. use the fact that the distribution of t can be approximated by an n(µ, µ)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2224,  1996,  2755,  2008,  1996,  4353,  1997,
         1056,  2064,  2022, 15796,  2094,  2011,  2019,  1050,  1006,  1085,
         1010,  1085,  1007,   102])"
2868,1,"['critical region', 'null hypothesis', 'hypothesis']", Exercises,seg_357,"distribution to determine the critical value(s) and the critical region, and report your conclusion about the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  4353,  2000,  5646,  1996,  4187,  3643,  1006,  1055,  1007,
         1998,  1996,  4187,  2555,  1010,  1998,  3189,  2115,  7091,  2055,
         1996, 19701, 10744,  1012,   102])"
2869,1,"['interval', 'level of significance', 'uniform distribution', 'random sample', 'level', 'sample', 'random', 'critical region', 'distribution', 'significance', 'test']", Exercises,seg_357,"26.7 a random sample x1, x2 is drawn from a uniform distribution on the interval [0, θ]. we wish to test h0 : θ = 1 against h1 : θ < 1 by rejecting if x1 + x2 ≤ c. find the value of c and the critical region that correspond to a level of significance 0.05. hint: use exercise 11.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1021,  1037,  6721,  7099,  1060,  2487,  1010,
         1060,  2475,  2003,  4567,  2013,  1037,  6375,  4353,  2006,  1996,
        13483,  1031,  1014,  1010,  1162,  1033,  1012,  2057,  4299,  2000,
         3231,  1044,  2692,  1024,  1162,  1027,  1015,  2114,  1044,  2487,
         1024,  1162,  1026,  1015,  2011, 21936,  2065,  1060,  2487,  1009,
         1060,  2475,  1608,  1039,  1012,  2424,  1996,  3643,  1997,  1039,
         1998,  1996,  4187,  2555,  2008, 17254,  2000,  1037,  2504,  1997,
         7784,  1014,  1012,  5709,  1012,  9374,  1024,  2224,  6912,  2340,
         1012,  1019,  1012,   102])"
2870,1,"['test statistic', 'hypothesis', 'critical region', 'alternative hypothesis', 'statistic', 'test']", Exercises,seg_357,26.8 this exercise is meant to illustrate that the shape of the critical region is not necessarily similar to the type of alternative hypothesis. the type of alternative hypothesis and the test statistic used determine the shape of the critical region.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2656,  1012,  1022,  2023,  6912,  2003,  3214,  2000, 19141,
         2008,  1996,  4338,  1997,  1996,  4187,  2555,  2003,  2025,  9352,
         2714,  2000,  1996,  2828,  1997,  4522, 10744,  1012,  1996,  2828,
         1997,  4522, 10744,  1998,  1996,  3231, 28093,  6553,  2109,  5646,
         1996,  4338,  1997,  1996,  4187,  2555,  1012,   102])"
2871,1,"['random sample', 'sample', 'random', 'statistics', 'test statistics', 'test']", Exercises,seg_357,"suppose that x1, x2, . . . , xn form a random sample from an exp(λ) distribution, and we test h0 : λ = 1 with test statistics t = x̄n and t ′ = e−x̄n .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  6814,  2008,  1060,  2487,  1010,  1060,  2475,  1010,  1012,
         1012,  1012,  1010,  1060,  2078,  2433,  1037,  6721,  7099,  2013,
         2019,  4654,  2361,  1006,  1165,  1007,  4353,  1010,  1998,  2057,
         3231,  1044,  2692,  1024,  1165,  1027,  1015,  2007,  3231,  6747,
         1056,  1027,  1060,  2078,  1998,  1056,  1531,  1027,  1041, 22543,
         2595,  2078,  1012,   102])"
2872,1,"['null hypothesis', 'hypothesis', 'test']", Exercises,seg_357,a. suppose we test the null hypothesis against h1 : λ > 1. determine for,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  2057,  3231,  1996, 19701, 10744,  2114,
         1044,  2487,  1024,  1165,  1028,  1015,  1012,  5646,  2005,   102])"
2873,1,"['left critical value', 'critical value', 'right critical value', 'test']", Exercises,seg_357,"both test procedures whether they involve a right critical value, a left critical value, or both.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([ 101, 2119, 3231, 8853, 3251, 2027, 9125, 1037, 2157, 4187, 3643, 1010,
        1037, 2187, 4187, 3643, 1010, 2030, 2119, 1012,  102])"
2874,1,['test'], Exercises,seg_357,"b. same question as in part a, but now test against h1 : λ = 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2168, 3160, 2004, 1999, 2112, 1037, 1010, 2021, 2085,
        3231, 2114, 1044, 2487, 1024, 1165, 1027, 1015, 1012,  102])"
2875,1,"['random sample', 'sample', 'random', 'statistics', 'distribution', 'test statistics', 'test']", Exercises,seg_357,"26.9 similar to exercise 26.8, but with a random sample x1, x2, . . . , xn from an n(µ, 1) distribution. we test h0 : µ = 0 with test statistics t = (x̄n)2 and t ′ = 1/x̄n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 2656, 1012, 1023, 2714, 2000, 6912, 2656, 1012, 1022, 1010, 2021,
        2007, 1037, 6721, 7099, 1060, 2487, 1010, 1060, 2475, 1010, 1012, 1012,
        1012, 1010, 1060, 2078, 2013, 2019, 1050, 1006, 1085, 1010, 1015, 1007,
        4353, 1012, 2057, 3231, 1044, 2692, 1024, 1085, 1027, 1014, 2007, 3231,
        6747, 1056, 1027, 1006, 1060, 2078, 1007, 1016, 1998, 1056, 1531, 1027,
        1015, 1013, 1060, 2078, 1012,  102])"
2876,1,"['null hypothesis', 'hypothesis', 'test']", Exercises,seg_357,a. suppose that we test the null hypothesis against h1 : µ = 0. determine,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  6814,  2008,  2057,  3231,  1996, 19701, 10744,
         2114,  1044,  2487,  1024,  1085,  1027,  1014,  1012,  5646,   102])"
2877,1,"['critical region', 'test']", Exercises,seg_357,the shape of the critical region for both test procedures.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1996, 4338, 1997, 1996, 4187, 2555, 2005, 2119, 3231, 8853, 1012,
         102])"
2878,1,['test'], Exercises,seg_357,"b. same question as in part a, but now test against h1 : µ > 0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2168, 3160, 2004, 1999, 2112, 1037, 1010, 2021, 2085,
        3231, 2114, 1044, 2487, 1024, 1085, 1028, 1014, 1012,  102])"
2879,1,"['regression', 'simple linear regression', 'regression model', 'linear regression', 'normality', 'normal', 'statistical', 'model', 'test', 'linear', 'slope', 'intercept', 'expectation', 'linear regression model', 'statistical test', 'distribution']", The ttest,seg_359,"in many applications the quantity of interest can be represented by the expectation of the model distribution. in some of these applications one wants to know whether this expectation deviates from some a priori specified value. this can be investigated by means of a statistical test, known as the t-test. we consider this test both under the assumption that the model distribution is normal and without the assumption of normality. furthermore, we discuss a similar test for the slope and the intercept in a simple linear regression model.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 1996, 23746,  4355])","tensor([  101,  1999,  2116,  5097,  1996, 11712,  1997,  3037,  2064,  2022,
         3421,  2011,  1996, 17626,  1997,  1996,  2944,  4353,  1012,  1999,
         2070,  1997,  2122,  5097,  2028,  4122,  2000,  2113,  3251,  2023,
        17626, 14386,  8520,  2013,  2070,  1037,  3188,  2072,  9675,  3643,
         1012,  2023,  2064,  2022, 10847,  2011,  2965,  1997,  1037,  7778,
         3231,  1010,  2124,  2004,  1996,  1056,  1011,  3231,  1012,  2057,
         5136,  2023,  3231,  2119,  2104,  1996, 11213,  2008,  1996,  2944,
         4353,  2003,  3671,  1998,  2302,  1996, 11213,  1997,  3671,  3012,
         1012,  7297,  1010,  2057,  6848,  1037,  2714,  3231,  2005,  1996,
         9663,  1998,  1996, 19115,  1999,  1037,  3722,  7399, 26237,  2944,
         1012,   102])"
2880,1,"['parameter', 'dataset', 'set', 'probability', 'table', 'realization', 'random sample', 'sample', 'random', 'distribution', 'model', 'average', 'expected value', 'probability distribution']", Monitoring the production of ball bearings,seg_361,"a production line in a large industrial corporation are set to produce a specific type of steel ball bearing with a diameter of 1 millimeter. in order to check the performance of the production lines, a number of ball bearings are picked at the end of the day and their diameters are measured. suppose we observe 20 diameters of ball bearings from the production lines, which are listed in table 27.1. the average diameter is x̄20 = 1.03 millimeter. this clearly deviates from the target value 1, but the question is whether the difference can be attributed to chance or whether it is large enough to conclude that the production line is producing ball bearings with a wrong diameter. to answer this question, we model the dataset as a realization of a random sample x1, x2, . . . , x20 from a probability distribution with expected value µ. the parameter µ represents the diameter of ball bearings produced by the produc-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  1037,  2537,  2240,  1999,  1037,  2312,  3919,  3840,  2024,
         2275,  2000,  3965,  1037,  3563,  2828,  1997,  3886,  3608,  7682,
         2007,  1037,  6705,  1997,  1015,  4971, 19198,  1012,  1999,  2344,
         2000,  4638,  1996,  2836,  1997,  1996,  2537,  3210,  1010,  1037,
         2193,  1997,  3608, 21714,  2024,  3856,  2012,  1996,  2203,  1997,
         1996,  2154,  1998,  2037,  6705,  2015,  2024,  7594,  1012,  6814,
         2057, 11949,  2322,  6705,  2015,  1997,  3608, 21714,  2013,  1996,
         2537,  3210,  1010,  2029,  2024,  3205,  1999,  2795,  2676,  1012,
         1015,  1012,  1996,  2779,  6705,  2003,  1060, 11387,  1027,  1015,
         1012,  6021,  4971, 19198,  1012,  2023,  4415, 14386,  8520,  2013,
         1996,  4539,  3643,  1015,  1010,  2021,  1996,  3160,  2003,  3251,
         1996,  4489,  2064,  2022,  7108,  2000,  3382,  2030,  3251,  2009,
         2003,  2312,  2438,  2000, 16519,  2008,  1996,  2537,  2240,  2003,
         5155,  3608, 21714,  2007,  1037,  3308,  6705,  1012,  2000,  3437,
         2023,  3160,  1010,  2057,  2944,  1996,  2951, 13462,  2004,  1037,
        12393,  1997,  1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060, 11387,  2013,  1037,  9723,
         4353,  2007,  3517,  3643,  1085,  1012,  1996, 16381,  1085,  5836,
         1996,  6705,  1997,  3608, 21714,  2550,  2011,  1996,  4013,  8566,
         2278,  1011,   102])"
2881,1,"['null hypothesis', 'hypothesis', 'test']", Monitoring the production of ball bearings,seg_361,"tion lines. in order to investigate whether this diameter deviates from 1, we test the null hypothesis h0 : µ = 1 against h1 : µ = 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101, 14841,  2239,  3210,  1012,  1999,  2344,  2000,  8556,  3251,
         2023,  6705, 14386,  8520,  2013,  1015,  1010,  2057,  3231,  1996,
        19701, 10744,  1044,  2692,  1024,  1085,  1027,  1015,  2114,  1044,
         2487,  1024,  1085,  1027,  1015,  1012,   102])"
2882,1,"['test statistic', 'data', 'realization', 'hypothesis', 'random sample', 'sample', 'random', 'expectation', 'distribution', 'null hypothesis', 'law of large numbers', 'statistic', 'test']", Monitoring the production of ball bearings,seg_361,"this example illustrates a situation that often occurs: the data x1, x2, . . . , xn are a realization of a random sample x1, x2, . . . , xn from a distribution with expectation µ, and we want to test whether µ equals an a priori specified value, say µ0. according to the law of large numbers, x̄n is close to µ for large n. this suggests a test statistic based on x̄n − µ0; realizations of x̄n − µ0 close to zero are in favor of the null hypothesis. does x̄n − µ0 suffice as a test statistic?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  2023,  2742, 24899,  1037,  3663,  2008,  2411,  5158,  1024,
         1996,  2951,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,
         1012,  1010,  1060,  2078,  2024,  1037, 12393,  1997,  1037,  6721,
         7099,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  2013,  1037,  4353,  2007, 17626,  1085,  1010,
         1998,  2057,  2215,  2000,  3231,  3251,  1085, 19635,  2019,  1037,
         3188,  2072,  9675,  3643,  1010,  2360,  1085,  2692,  1012,  2429,
         2000,  1996,  2375,  1997,  2312,  3616,  1010,  1060,  2078,  2003,
         2485,  2000,  1085,  2005,  2312,  1050,  1012,  2023,  6083,  1037,
         3231, 28093,  6553,  2241,  2006,  1060,  2078,  1597,  1085,  2692,
         1025, 12393,  2015,  1997,  1060,  2078,  1597,  1085,  2692,  2485,
         2000,  5717,  2024,  1999,  5684,  1997,  1996, 19701, 10744,  1012,
         2515,  1060,  2078,  1597,  1085,  2692, 10514, 26989,  3401,  2004,
         1037,  3231, 28093,  6553,  1029,   102])"
2883,1,"['deviation', 'hypothesis', 'standard deviation', 'deviations', 'standard', 'null hypothesis', 'standard deviations']", Monitoring the production of ball bearings,seg_361,"in our example, x̄n −µ0 = 1.03− 1 = 0.03. should we interpret this as small? first, note that under the null hypothesis e[x̄n − µ0] = µ − µ0 = 0. now, if x̄n − µ0 would have standard deviation 1, then the value 0.03 is within one standard deviation of e[x̄n − µ0]. the “µ ± a few σ” rule on page 185 then suggests that the value 0.03 is not exceptional; it must be seen as a small deviation. on the other hand, if x̄n − µ0 has standard deviation 0.001, then the value 0.03 is 30 standard deviations away from e[x̄n − µ0]. according to the “µ ± a few σ” rule this is very exceptional; the value 0.03 must be seen as a large deviation. the next quick exercise provides a concrete example.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  1999,  2256,  2742,  1010,  1060,  2078,  1597, 29659,  2692,
         1027,  1015,  1012,  6021, 22543,  1015,  1027,  1014,  1012,  6021,
         1012,  2323,  2057, 17841,  2023,  2004,  2235,  1029,  2034,  1010,
         3602,  2008,  2104,  1996, 19701, 10744,  1041,  1031,  1060,  2078,
         1597,  1085,  2692,  1033,  1027,  1085,  1597,  1085,  2692,  1027,
         1014,  1012,  2085,  1010,  2065,  1060,  2078,  1597,  1085,  2692,
         2052,  2031,  3115, 24353,  1015,  1010,  2059,  1996,  3643,  1014,
         1012,  6021,  2003,  2306,  2028,  3115, 24353,  1997,  1041,  1031,
         1060,  2078,  1597,  1085,  2692,  1033,  1012,  1996,  1523,  1085,
         1081,  1037,  2261,  1173,  1524,  3627,  2006,  3931, 15376,  2059,
         6083,  2008,  1996,  3643,  1014,  1012,  6021,  2003,  2025, 11813,
         1025,  2009,  2442,  2022,  2464,  2004,  1037,  2235, 24353,  1012,
         2006,  1996,  2060,  2192,  1010,  2065,  1060,  2078,  1597,  1085,
         2692,  2038,  3115, 24353,  1014,  1012, 25604,  1010,  2059,  1996,
         3643,  1014,  1012,  6021,  2003,  2382,  3115, 24353,  2015,  2185,
         2013,  1041,  1031,  1060,  2078,  1597,  1085,  2692,  1033,  1012,
         2429,  2000,  1996,  1523,  1085,  1081,  1037,  2261,  1173,  1524,
         3627,  2023,  2003,  2200, 11813,  1025,  1996,  3643,  1014,  1012,
         6021,  2442,  2022,  2464,  2004,  1037,  2312, 24353,  1012,  1996,
         2279,  4248,  6912,  3640,  1037,  5509,  2742,  1012,   102])"
2884,1,"['variance', 'probability', 'random variable', 'normal random variable', 'random', 'normal', 'expectation', 'variable', 'case']", Monitoring the production of ball bearings,seg_361,"quick exercise 27.1 suppose that x̄n is a normal random variable with expectation 1 and variance 1. determine p(x̄n − 1 ≥ 0.03). find the same probability, but for the case where the variance is (0.01)2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  4248,  6912,  2676,  1012,  1015,  6814,  2008,  1060,  2078,
         2003,  1037,  3671,  6721,  8023,  2007, 17626,  1015,  1998, 23284,
         1015,  1012,  5646,  1052,  1006,  1060,  2078,  1597,  1015,  1609,
         1014,  1012,  6021,  1007,  1012,  2424,  1996,  2168,  9723,  1010,
         2021,  2005,  1996,  2553,  2073,  1996, 23284,  2003,  1006,  1014,
         1012,  5890,  1007,  1016,  1012,   102])"
2885,1,['variation'], Monitoring the production of ball bearings,seg_361,this discussion illustrates that we must standardize x̄n − µ0 to incorporate its variation. recall that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  2023,  6594, 24899,  2008,  2057,  2442,  3115,  4697,  1060,
         2078,  1597,  1085,  2692,  2000, 13265,  2049,  8386,  1012,  9131,
         2008,   102])"
2886,1,"['test statistic', 'deviation', 'variance', 'hypothesis', 'sample', 'standard deviation', 'sample standard deviation', 'standard', 'null hypothesis', 'statistic', 'test']", Monitoring the production of ball bearings,seg_361,"where σ2 is the variance of each xi. hence, standardizing x̄n − µ0 means that we should divide by σ/√n. since σ is unknown, we substitute the sample standard deviation sn for σ. this leads to the following test statistic for the null hypothesis h0 : µ = µ0:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  2073,  1173,  2475,  2003,  1996, 23284,  1997,  2169,  8418,
         1012,  6516,  1010,  3115,  6026,  1060,  2078,  1597,  1085,  2692,
         2965,  2008,  2057,  2323, 11443,  2011,  1173,  1013,  1600,  2078,
         1012,  2144,  1173,  2003,  4242,  1010,  2057,  7681,  1996,  7099,
         3115, 24353,  1055,  2078,  2005,  1173,  1012,  2023,  5260,  2000,
         1996,  2206,  3231, 28093,  6553,  2005,  1996, 19701, 10744,  1044,
         2692,  1024,  1085,  1027,  1085,  2692,  1024,   102])"
2887,0,[], Monitoring the production of ball bearings,seg_361,values of t close to zero are in favor of h0 : µ = µ0. large positive values of t suggest that µ > µ0 and large negative values suggest that µ < µ0; both are evidence against h0.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([ 101, 5300, 1997, 1056, 2485, 2000, 5717, 2024, 1999, 5684, 1997, 1044,
        2692, 1024, 1085, 1027, 1085, 2692, 1012, 2312, 3893, 5300, 1997, 1056,
        6592, 2008, 1085, 1028, 1085, 2692, 1998, 2312, 4997, 5300, 6592, 2008,
        1085, 1026, 1085, 2692, 1025, 2119, 2024, 3350, 2114, 1044, 2692, 1012,
         102])"
2888,1,['data'], Monitoring the production of ball bearings,seg_361,"for the ball bearing data one finds that sn = 0.0372, so that",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([ 101, 2005, 1996, 3608, 7682, 2951, 2028, 4858, 2008, 1055, 2078, 1027,
        1014, 1012, 6021, 2581, 2475, 1010, 2061, 2008,  102])"
2889,0,[], Monitoring the production of ball bearings,seg_361,"this is clearly different from zero, but the question is whether this difference is large enough to reject h0 : µ = 1. to answer this question, we need to know",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  2023,  2003,  4415,  2367,  2013,  5717,  1010,  2021,  1996,
         3160,  2003,  3251,  2023,  4489,  2003,  2312,  2438,  2000, 15454,
         1044,  2692,  1024,  1085,  1027,  1015,  1012,  2000,  3437,  2023,
         3160,  1010,  2057,  2342,  2000,  2113,   102])"
2890,1,"['test statistic', 'probability', 'probability distribution', 'hypothesis', 'distribution', 'null hypothesis', 'statistic', 'test']", Monitoring the production of ball bearings,seg_361,"the probability distribution of t under the null hypothesis. note that under the null hypothesis h0 : µ = µ0, the test statistic",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  1996,  9723,  4353,  1997,  1056,  2104,  1996, 19701, 10744,
         1012,  3602,  2008,  2104,  1996, 19701, 10744,  1044,  2692,  1024,
         1085,  1027,  1085,  2692,  1010,  1996,  3231, 28093,  6553,   102])"
2891,1,"['mean', 'studentized mean']", Monitoring the production of ball bearings,seg_361,is the studentized mean (see also chapter 23),tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([ 101, 2003, 1996, 3076, 3550, 2812, 1006, 2156, 2036, 3127, 2603, 1007,
         102])"
2892,1,"['mean', 'probability', 'hypothesis', 'studentized mean', 'distribution', 'null hypothesis', 'probability distribution']", Monitoring the production of ball bearings,seg_361,"hence, under the null hypothesis, the probability distribution of t is the same as that of the studentized mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0.])","tensor([ 8822,  1996,  2537,  1997,  3608, 21714])","tensor([  101,  6516,  1010,  2104,  1996, 19701, 10744,  1010,  1996,  9723,
         4353,  1997,  1056,  2003,  1996,  2168,  2004,  2008,  1997,  1996,
         3076,  3550,  2812,  1012,   102])"
2893,1,"['bootstrap', 'null hypothesis', 'normality', 'dataset', 'statistic', 'case', 'test', 'test statistic', 'realization', 'hypothesis', 'random sample', 'central limit theorem', 'sample', 'random', 'limit', 'distribution']", The onesample ttest,seg_363,"the classical assumption is that the dataset is a realization of a random sample from an n(µ, σ2) distribution. in that case our test statistic t turns out to have a t-distribution under the null hypothesis, as we will see later. for this reason, the test for the null hypothesis h0 : µ = µ0 is called the (one-sample) t-test. without the assumption of normality, we will use the bootstrap to approximate the distribution of t . for large sample sizes, this distribution can be approximated by means of the central limit theorem. we start with the first case.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  1996,  4556, 11213,  2003,  2008,  1996,  2951, 13462,  2003,
         1037, 12393,  1997,  1037,  6721,  7099,  2013,  2019,  1050,  1006,
         1085,  1010,  1173,  2475,  1007,  4353,  1012,  1999,  2008,  2553,
         2256,  3231, 28093,  6553,  1056,  4332,  2041,  2000,  2031,  1037,
         1056,  1011,  4353,  2104,  1996, 19701, 10744,  1010,  2004,  2057,
         2097,  2156,  2101,  1012,  2005,  2023,  3114,  1010,  1996,  3231,
         2005,  1996, 19701, 10744,  1044,  2692,  1024,  1085,  1027,  1085,
         2692,  2003,  2170,  1996,  1006,  2028,  1011,  7099,  1007,  1056,
         1011,  3231,  1012,  2302,  1996, 11213,  1997,  3671,  3012,  1010,
         2057,  2097,  2224,  1996,  6879,  6494,  2361,  2000, 15796,  1996,
         4353,  1997,  1056,  1012,  2005,  2312,  7099, 10826,  1010,  2023,
         4353,  2064,  2022, 15796,  2094,  2011,  2965,  1997,  1996,  2430,
         5787,  9872,  1012,  2057,  2707,  2007,  1996,  2034,  2553,  1012,
          102])"
2894,1,['data'], The onesample ttest,seg_363,normal data,tensor(1),"tensor([0., 0., 1., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([ 101, 3671, 2951,  102])"
2895,1,"['mean', 'dataset', 'test statistic', 'realization', 'hypothesis', 'random sample', 'level', 'sample', 'random', 'studentized mean', 'distribution', 'null hypothesis', 'statistic', 'test']", The onesample ttest,seg_363,"suppose that the dataset x1, x2, . . . , xn is a realization of a random sample x1, x2, . . . , xn from an n(µ, σ2) distribution. then, according to the rule on page 349, the studentized mean has a t(n − 1) distribution. an immediate consequence is that, under the null hypothesis h0 : µ = µ0, also our test statistic t has a t(n − 1) distribution. therefore, if we test h0 : µ = µ0 against h1 : µ = µ0 at level α, then we must reject the null hypothesis in favor of h1 : µ = µ0, if",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  6814,  2008,  1996,  2951, 13462,  1060,  2487,  1010,  1060,
         2475,  1010,  1012,  1012,  1012,  1010,  1060,  2078,  2003,  1037,
        12393,  1997,  1037,  6721,  7099,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  2013,  2019,  1050,
         1006,  1085,  1010,  1173,  2475,  1007,  4353,  1012,  2059,  1010,
         2429,  2000,  1996,  3627,  2006,  3931,  4090,  2683,  1010,  1996,
         3076,  3550,  2812,  2038,  1037,  1056,  1006,  1050,  1597,  1015,
         1007,  4353,  1012,  2019,  6234,  9509,  2003,  2008,  1010,  2104,
         1996, 19701, 10744,  1044,  2692,  1024,  1085,  1027,  1085,  2692,
         1010,  2036,  2256,  3231, 28093,  6553,  1056,  2038,  1037,  1056,
         1006,  1050,  1597,  1015,  1007,  4353,  1012,  3568,  1010,  2065,
         2057,  3231,  1044,  2692,  1024,  1085,  1027,  1085,  2692,  2114,
         1044,  2487,  1024,  1085,  1027,  1085,  2692,  2012,  2504,  1155,
         1010,  2059,  2057,  2442, 15454,  1996, 19701, 10744,  1999,  5684,
         1997,  1044,  2487,  1024,  1085,  1027,  1085,  2692,  1010,  2065,
          102])"
2896,1,"['table', 'hypothesis', 'level', 'null hypothesis', 'data', 'test']", The onesample ttest,seg_363,"similar decision rules apply to alternatives h1 : µ > µ0 and h1 : µ < µ0. suppose that in the ball bearing example we test h0 : µ = 1 against h1 : µ = 1 at level α = 0.05. from table b.2 we find t19,0.025 = 2.093. hence, we must reject if t ≤ −2.093 or t ≥ 2.093. for the ball bearing data we found t = 3.607, which means we reject the null hypothesis at level α = 0.05.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  2714,  3247,  3513,  6611,  2000, 15955,  1044,  2487,  1024,
         1085,  1028,  1085,  2692,  1998,  1044,  2487,  1024,  1085,  1026,
         1085,  2692,  1012,  6814,  2008,  1999,  1996,  3608,  7682,  2742,
         2057,  3231,  1044,  2692,  1024,  1085,  1027,  1015,  2114,  1044,
         2487,  1024,  1085,  1027,  1015,  2012,  2504,  1155,  1027,  1014,
         1012,  5709,  1012,  2013,  2795,  1038,  1012,  1016,  2057,  2424,
         1056, 16147,  1010,  1014,  1012,  6185,  2629,  1027,  1016,  1012,
         5641,  2509,  1012,  6516,  1010,  2057,  2442, 15454,  2065,  1056,
         1608,  1597,  2475,  1012,  5641,  2509,  2030,  1056,  1609,  1016,
         1012,  5641,  2509,  1012,  2005,  1996,  3608,  7682,  2951,  2057,
         2179,  1056,  1027,  1017,  1012,  3438,  2581,  1010,  2029,  2965,
         2057, 15454,  1996, 19701, 10744,  2012,  2504,  1155,  1027,  1014,
         1012,  5709,  1012,   102])"
2897,1,"['tail', 'probability', 'tail probability']", The onesample ttest,seg_363,"alternatively, one might report the one-tailed p-value corresponding to the observed value t and compare this with α/2. the one-tailed p-value is either a right or a left tail probability, which must be computed by means",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101, 14084,  1010,  2028,  2453,  3189,  1996,  2028,  1011, 14578,
         1052,  1011,  3643,  7978,  2000,  1996,  5159,  3643,  1056,  1998,
        12826,  2023,  2007,  1155,  1013,  1016,  1012,  1996,  2028,  1011,
        14578,  1052,  1011,  3643,  2003,  2593,  1037,  2157,  2030,  1037,
         2187,  5725,  9723,  1010,  2029,  2442,  2022, 24806,  2011,  2965,
          102])"
2898,1,"['tail', 'data', 'probability', 'table', 'hypothesis', 'tail probability', 'distribution', 'statistical', 'null hypothesis', 'right tail probability']", The onesample ttest,seg_363,"of the t(n − 1) distribution. in our ball bearing example the one-tailed pvalue is the right tail probability p(t ≥ 3.607). from table b.2 we see that this probability is between 0.0005 and 0.0010, which is smaller than α/2 = 0.025 (to be precise, by means of a statistical software package we found p(t ≥ 3.607) = 0.00094). the data provide strong enough evidence against the null hypothesis, so that it seems sensible to adjust the settings of the production line.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  1997,  1996,  1056,  1006,  1050,  1597,  1015,  1007,  4353,
         1012,  1999,  2256,  3608,  7682,  2742,  1996,  2028,  1011, 14578,
        26189,  2389,  5657,  2003,  1996,  2157,  5725,  9723,  1052,  1006,
         1056,  1609,  1017,  1012,  3438,  2581,  1007,  1012,  2013,  2795,
         1038,  1012,  1016,  2057,  2156,  2008,  2023,  9723,  2003,  2090,
         1014,  1012,  2199,  2629,  1998,  1014,  1012, 25604,  2692,  1010,
         2029,  2003,  3760,  2084,  1155,  1013,  1016,  1027,  1014,  1012,
         6185,  2629,  1006,  2000,  2022, 10480,  1010,  2011,  2965,  1997,
         1037,  7778,  4007,  7427,  2057,  2179,  1052,  1006,  1056,  1609,
         1017,  1012,  3438,  2581,  1007,  1027,  1014,  1012,  2199,  2683,
         2549,  1007,  1012,  1996,  2951,  3073,  2844,  2438,  3350,  2114,
         1996, 19701, 10744,  1010,  2061,  2008,  2009,  3849, 21082,  2000,
        14171,  1996, 10906,  1997,  1996,  2537,  2240,  1012,   102])"
2899,1,"['deviation', 'table', 'level', 'standard deviation', 'standard', 'measurements', 'average', 'data', 'normality']", The onesample ttest,seg_363,"quick exercise 27.2 suppose that the data in table 27.1 are from two separate production lines. the first ten measurements have average 1.0194 and standard deviation 0.0290, whereas the last ten measurements have average 1.0406 and standard deviation 0.0428. perform the t-test h0 : µ = 1 against h1 : µ = 1 at level α = 0.01 for both datasets separately, assuming normality.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  4248,  6912,  2676,  1012,  1016,  6814,  2008,  1996,  2951,
         1999,  2795,  2676,  1012,  1015,  2024,  2013,  2048,  3584,  2537,
         3210,  1012,  1996,  2034,  2702, 11702,  2031,  2779,  1015,  1012,
         5890,  2683,  2549,  1998,  3115, 24353,  1014,  1012,  6185, 21057,
         1010,  6168,  1996,  2197,  2702, 11702,  2031,  2779,  1015,  1012,
         5840,  2692,  2575,  1998,  3115, 24353,  1014,  1012,  5840, 22407,
         1012,  4685,  1996,  1056,  1011,  3231,  1044,  2692,  1024,  1085,
         1027,  1015,  2114,  1044,  2487,  1024,  1085,  1027,  1015,  2012,
         2504,  1155,  1027,  1014,  1012,  5890,  2005,  2119,  2951, 13462,
         2015, 10329,  1010, 10262,  3671,  3012,  1012,   102])"
2900,1,['data'], The onesample ttest,seg_363,nonnormal data,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  2512, 12131,  9067,  2951,   102])"
2901,0,[], The onesample ttest,seg_363,"draw a rectangle with height h and width w (let us agree that w > h), and within this rectangle draw a square with sides of length h (see figure 27.1). this creates another (smaller) rectangle with horizontal and vertical sides of",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  4009,  1037, 28667, 23395,  2007,  4578,  1044,  1998,  9381,
         1059,  1006,  2292,  2149,  5993,  2008,  1059,  1028,  1044,  1007,
         1010,  1998,  2306,  2023, 28667, 23395,  4009,  1037,  2675,  2007,
         3903,  1997,  3091,  1044,  1006,  2156,  3275,  2676,  1012,  1015,
         1007,  1012,  2023,  9005,  2178,  1006,  3760,  1007, 28667, 23395,
         2007,  9876,  1998,  7471,  3903,  1997,   102])"
2902,0,[], The onesample ttest,seg_363,"lengths w−h and h. a large rectangle with a vertical-to-horizontal ratio that is equal to the horizontal-to-vertical ratio for the small rectangle, i.e.,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101, 10742,  1059, 22543,  2232,  1998,  1044,  1012,  1037,  2312,
        28667, 23395,  2007,  1037,  7471,  1011,  2000,  1011,  9876,  6463,
         2008,  2003,  5020,  2000,  1996,  9876,  1011,  2000,  1011,  7471,
         6463,  2005,  1996,  2235, 28667, 23395,  1010,  1045,  1012,  1041,
         1012,  1010,   102])"
2903,0,[], The onesample ttest,seg_363,"was called a “golden rectangle” by the ancient greeks, who often used these in their architecture. after solving for h/w, we obtain that the height-to-width",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  2001,  2170,  1037,  1523,  3585, 28667, 23395,  1524,  2011,
         1996,  3418, 13176,  1010,  2040,  2411,  2109,  2122,  1999,  2037,
         4294,  1012,  2044, 13729,  2005,  1044,  1013,  1059,  1010,  2057,
         6855,  2008,  1996,  4578,  1011,  2000,  1011,  9381,   102])"
2904,1,"['data', 'table']", The onesample ttest,seg_363,ratio h/w is equal to the “golden number” (√5 − 1)/2 ≈ 0.618. the data in table 27.2 represent corresponding h/w ratios for rectangles used by shoshoni indians to decorate their leather goods. is it reasonable to assume that they were also using golden rectangles? we examine this by means of a t-test.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  6463,  1044,  1013,  1059,  2003,  5020,  2000,  1996,  1523,
         3585,  2193,  1524,  1006,  1600,  2629,  1597,  1015,  1007,  1013,
         1016,  1606,  1014,  1012,  6079,  2620,  1012,  1996,  2951,  1999,
         2795,  2676,  1012,  1016,  5050,  7978,  1044,  1013,  1059, 21879,
         2005, 28667, 23395,  2015,  2109,  2011, 26822, 22231,  3490,  6505,
         2000, 29460,  2037,  5898,  5350,  1012,  2003,  2009,  9608,  2000,
         7868,  2008,  2027,  2020,  2036,  2478,  3585, 28667, 23395,  2015,
         1029,  2057, 11628,  2023,  2011,  2965,  1997,  1037,  1056,  1011,
         3231,  1012,   102])"
2905,1,"['parameter', 'realization', 'random sample', 'sample', 'random', 'expectation', 'distribution', 'test']", The onesample ttest,seg_363,"the observed ratios are modeled as a realization of a random sample from a distribution with expectation µ, where the parameter µ represents the true esthetic preference for height-to-width ratios of the shoshoni indians. we want to test",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  1996,  5159, 21879,  2024, 14440,  2004,  1037, 12393,  1997,
         1037,  6721,  7099,  2013,  1037,  4353,  2007, 17626,  1085,  1010,
         2073,  1996, 16381,  1085,  5836,  1996,  2995,  9765, 20086, 12157,
         2005,  4578,  1011,  2000,  1011,  9381, 21879,  1997,  1996, 26822,
        22231,  3490,  6505,  1012,  2057,  2215,  2000,  3231,   102])"
2906,1,"['test statistic', 'statistic', 'test']", The onesample ttest,seg_363,"for the shoshoni ratios, x̄n = 0.6605 and sn = 0.0925, so that the value of the test statistic is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  2005,  1996, 26822, 22231,  3490, 21879,  1010,  1060,  2078,
         1027,  1014,  1012, 20982,  2629,  1998,  1055,  2078,  1027,  1014,
         1012,  5641, 17788,  1010,  2061,  2008,  1996,  3643,  1997,  1996,
         3231, 28093,  6553,  2003,   102])"
2907,1,"['test statistic', 'normal distribution', 'data', 'hypothesis', 'normal', 'distribution', 'model', 'null hypothesis', 'statistic', 'test']", The onesample ttest,seg_363,"closer examination of the data indicates that the normal distribution is not the right model. for instance, by definition the height-to-width ratios h/w are always between 0 and 1. because some of the data points are also close to right boundary 1, the normal distribution is inappropriate. if we cannot assume a normal model distribution, we can no longer conclude that our test statistic has a t(n − 1) distribution under the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  3553,  7749,  1997,  1996,  2951,  7127,  2008,  1996,  3671,
         4353,  2003,  2025,  1996,  2157,  2944,  1012,  2005,  6013,  1010,
         2011,  6210,  1996,  4578,  1011,  2000,  1011,  9381, 21879,  1044,
         1013,  1059,  2024,  2467,  2090,  1014,  1998,  1015,  1012,  2138,
         2070,  1997,  1996,  2951,  2685,  2024,  2036,  2485,  2000,  2157,
         6192,  1015,  1010,  1996,  3671,  4353,  2003, 15884,  1012,  2065,
         2057,  3685,  7868,  1037,  3671,  2944,  4353,  1010,  2057,  2064,
         2053,  2936, 16519,  2008,  2256,  3231, 28093,  6553,  2038,  1037,
         1056,  1006,  1050,  1597,  1015,  1007,  4353,  2104,  1996, 19701,
        10744,  1012,   102])"
2908,1,"['mean', 'dataset', 'simulation', 'studentized mean', 'bootstrap', 'empirical bootstrap', 'distribution', 'model', 'data']", The onesample ttest,seg_363,"since there is no reason to assume any other particular type of distribution to model the data, we approximate the distribution of t under the null hypothesis. recall that this distribution is the same as that of the studentized mean (see the end of section 27.1). to approximate its distribution, we use the empirical bootstrap simulation for the studentized mean, as described on page 351. we generate 10 000 bootstrap datasets and for each bootstrap dataset x∗1, x∗2, . . . , x∗n, we compute",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  2144,  2045,  2003,  2053,  3114,  2000,  7868,  2151,  2060,
         3327,  2828,  1997,  4353,  2000,  2944,  1996,  2951,  1010,  2057,
        15796,  1996,  4353,  1997,  1056,  2104,  1996, 19701, 10744,  1012,
         9131,  2008,  2023,  4353,  2003,  1996,  2168,  2004,  2008,  1997,
         1996,  3076,  3550,  2812,  1006,  2156,  1996,  2203,  1997,  2930,
         2676,  1012,  1015,  1007,  1012,  2000, 15796,  2049,  4353,  1010,
         2057,  2224,  1996, 17537,  6879,  6494,  2361, 12504,  2005,  1996,
         3076,  3550,  2812,  1010,  2004,  2649,  2006,  3931, 28474,  1012,
         2057,  9699,  2184,  2199,  6879,  6494,  2361,  2951, 13462,  2015,
         1998,  2005,  2169,  6879,  6494,  2361,  2951, 13462,  1060, 30125,
         2487,  1010,  1060, 30125,  2475,  1010,  1012,  1012,  1012,  1010,
         1060, 30125,  2078,  1010,  2057, 24134,   102])"
2909,1,"['function', 'kernel', 'critical values', 'estimate', 'level', 'empirical distribution function', 'bootstrap', 'distribution', 'distribution function', 'kernel density estimate', 'test']", The onesample ttest,seg_363,"in figure 27.2 the kernel density estimate and empirical distribution function are displayed for 10 000 bootstrap values t∗. suppose we test h0 : µ = 0.618 against h1 : µ = 0.618 at level α = 0.05. in the same way as in section 23.3, we find the following bootstrap approximations for the critical values:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  1999,  3275,  2676,  1012,  1016,  1996, 16293,  4304, 10197,
         1998, 17537,  4353,  3853,  2024,  6913,  2005,  2184,  2199,  6879,
         6494,  2361,  5300,  1056, 30125,  1012,  6814,  2057,  3231,  1044,
         2692,  1024,  1085,  1027,  1014,  1012,  6079,  2620,  2114,  1044,
         2487,  1024,  1085,  1027,  1014,  1012,  6079,  2620,  2012,  2504,
         1155,  1027,  1014,  1012,  5709,  1012,  1999,  1996,  2168,  2126,
         2004,  1999,  2930,  2603,  1012,  1017,  1010,  2057,  2424,  1996,
         2206,  6879,  6494,  2361, 20167,  2015,  2005,  1996,  4187,  5300,
         1024,   102])"
2910,1,"['tail', 'test statistic', 'data', 'probability', 'approximation', 'hypothesis', 'level', 'tail probability', 'bootstrap', 'null hypothesis', 'right tail probability', 'statistic', 'test']", The onesample ttest,seg_363,"since for the shoshoni data the value 2.055 of the test statistic is greater than 1.644, we reject the null hypothesis at level 0.05. alternatively, we can also compute a bootstrap approximation of the one-tailed p-value corresponding to 2.055, which is the right tail probability p(t ≥ 2.055). the bootstrap approximation for this probability is:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  2144,  2005,  1996, 26822, 22231,  3490,  2951,  1996,  3643,
         1016,  1012,  5709,  2629,  1997,  1996,  3231, 28093,  6553,  2003,
         3618,  2084,  1015,  1012,  4185,  2549,  1010,  2057, 15454,  1996,
        19701, 10744,  2012,  2504,  1014,  1012,  5709,  1012, 14084,  1010,
         2057,  2064,  2036, 24134,  1037,  6879,  6494,  2361, 20167,  1997,
         1996,  2028,  1011, 14578,  1052,  1011,  3643,  7978,  2000,  1016,
         1012,  5709,  2629,  1010,  2029,  2003,  1996,  2157,  5725,  9723,
         1052,  1006,  1056,  1609,  1016,  1012,  5709,  2629,  1007,  1012,
         1996,  6879,  6494,  2361, 20167,  2005,  2023,  9723,  2003,  1024,
          102])"
2911,0,[], The onesample ttest,seg_363,"hence p(t ≥ 2.055) ≈ 0.0067, which is smaller than α/2 = 0.025. the value 2.055 should be considered as exceptionally large, and we reject the null hypothesis. the esthetic preference for height-to-width ratios of the shoshoni indians differs from that of the ancient greeks.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  6516,  1052,  1006,  1056,  1609,  1016,  1012,  5709,  2629,
         1007,  1606,  1014,  1012,  4002,  2575,  2581,  1010,  2029,  2003,
         3760,  2084,  1155,  1013,  1016,  1027,  1014,  1012,  6185,  2629,
         1012,  1996,  3643,  1016,  1012,  5709,  2629,  2323,  2022,  2641,
         2004, 17077,  2312,  1010,  1998,  2057, 15454,  1996, 19701, 10744,
         1012,  1996,  9765, 20086, 12157,  2005,  4578,  1011,  2000,  1011,
         9381, 21879,  1997,  1996, 26822, 22231,  3490,  6505, 12980,  2013,
         2008,  1997,  1996,  3418, 13176,  1012,   102])"
2912,1,['samples'], The onesample ttest,seg_363,large samples,tensor(1),"tensor([0., 0., 1., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([ 101, 2312, 8168,  102])"
2913,1,"['studentized mean', 'null hypothesis', 'mean', 'normal distribution', 'normal', 'model', 'data', 'statistic', 'test', 'test statistic', 'standard normal distribution', 'hypothesis', 'level', 'standard', 'expectation', 'standard normal', 'sample', 'distribution']", The onesample ttest,seg_363,"for large sample sizes the distribution of the studentized mean can be approximated by a standard normal distribution (see section 23.4). this means that for large sample sizes the distribution of the t-test statistic under the null hypothesis can also be approximated by a standard normal distribution. to illustrate this, recall the old faithful data. park rangers in yellowstone national park inform the public about the behavior of the geyser, such as the expected time between successive eruptions and the length of the duration of an eruption. suppose they claim that the expected length of an eruption is 4 minutes (240 seconds). does this seem likely on the basis of the data from section 15.1? we investigate this by testing h0 : µ = 240 against h1 : µ = 240 at level α = 0.001, where µ is the expectation of the model distribution. the value of the test statistic is",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  2005,  2312,  7099, 10826,  1996,  4353,  1997,  1996,  3076,
         3550,  2812,  2064,  2022, 15796,  2094,  2011,  1037,  3115,  3671,
         4353,  1006,  2156,  2930,  2603,  1012,  1018,  1007,  1012,  2023,
         2965,  2008,  2005,  2312,  7099, 10826,  1996,  4353,  1997,  1996,
         1056,  1011,  3231, 28093,  6553,  2104,  1996, 19701, 10744,  2064,
         2036,  2022, 15796,  2094,  2011,  1037,  3115,  3671,  4353,  1012,
         2000, 19141,  2023,  1010,  9131,  1996,  2214, 11633,  2951,  1012,
         2380,  7181,  1999, 29231,  2120,  2380, 12367,  1996,  2270,  2055,
         1996,  5248,  1997,  1996, 16216, 23274,  2099,  1010,  2107,  2004,
         1996,  3517,  2051,  2090, 11165, 28448,  1998,  1996,  3091,  1997,
         1996,  9367,  1997,  2019, 17259,  1012,  6814,  2027,  4366,  2008,
         1996,  3517,  3091,  1997,  2019, 17259,  2003,  1018,  2781,  1006,
        11212,  3823,  1007,  1012,  2515,  2023,  4025,  3497,  2006,  1996,
         3978,  1997,  1996,  2951,  2013,  2930,  2321,  1012,  1015,  1029,
         2057,  8556,  2023,  2011,  5604,  1044,  2692,  1024,  1085,  1027,
        11212,  2114,  1044,  2487,  1024,  1085,  1027, 11212,  2012,  2504,
         1155,  1027,  1014,  1012, 25604,  1010,  2073,  1085,  2003,  1996,
        17626,  1997,  1996,  2944,  4353,  1012,  1996,  3643,  1997,  1996,
         3231, 28093,  6553,  2003,   102])"
2914,1,"['table', 'hypothesis', 'level', 'distribution', 'statistical', 'null hypothesis', 'data']", The onesample ttest,seg_363,"the one-tailed p-value p(t ≤ −7.39) can be approximated by p(z ≤ −7.39), where z has an n(0, 1) distribution. from table b.1 we see that this probability is smaller than p(z ≤ −3.49) = 0.0002. this is smaller than α/2 = 0.0005, so we reject the null hypothesis at level 0.001. in fact the p-value is much smaller: a statistical software package gives p(z ≤ −7.39) = 7.5 · 10−14. the data provide overwhelming evidence against h0 : µ = 240, so that we conclude that the expected length of an eruption is different from 4 minutes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  1996,  2028,  1011, 14578,  1052,  1011,  3643,  1052,  1006,
         1056,  1608,  1597,  2581,  1012,  4464,  1007,  2064,  2022, 15796,
         2094,  2011,  1052,  1006,  1062,  1608,  1597,  2581,  1012,  4464,
         1007,  1010,  2073,  1062,  2038,  2019,  1050,  1006,  1014,  1010,
         1015,  1007,  4353,  1012,  2013,  2795,  1038,  1012,  1015,  2057,
         2156,  2008,  2023,  9723,  2003,  3760,  2084,  1052,  1006,  1062,
         1608,  1597,  2509,  1012,  4749,  1007,  1027,  1014,  1012,  2199,
         2475,  1012,  2023,  2003,  3760,  2084,  1155,  1013,  1016,  1027,
         1014,  1012,  2199,  2629,  1010,  2061,  2057, 15454,  1996, 19701,
        10744,  2012,  2504,  1014,  1012, 25604,  1012,  1999,  2755,  1996,
         1052,  1011,  3643,  2003,  2172,  3760,  1024,  1037,  7778,  4007,
         7427,  3957,  1052,  1006,  1062,  1608,  1597,  2581,  1012,  4464,
         1007,  1027,  1021,  1012,  1019,  1087,  2184, 27944,  2549,  1012,
         1996,  2951,  3073, 10827,  3350,  2114,  1044,  2692,  1024,  1085,
         1027, 11212,  1010,  2061,  2008,  2057, 16519,  2008,  1996,  3517,
         3091,  1997,  2019, 17259,  2003,  2367,  2013,  1018,  2781,  1012,
          102])"
2915,1,"['approximation', 'normal approximation', 'critical region', 'normal', 'test']", The onesample ttest,seg_363,"quick exercise 27.3 compute the critical region k for the test, using the normal approximation, and check that t = −7.39 falls in k.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  4248,  6912,  2676,  1012,  1017, 24134,  1996,  4187,  2555,
         1047,  2005,  1996,  3231,  1010,  2478,  1996,  3671, 20167,  1010,
         1998,  4638,  2008,  1056,  1027,  1597,  2581,  1012,  4464,  4212,
         1999,  1047,  1012,   102])"
2916,1,"['tail', 'probability', 'hypothesis', 'tail probability', 'null hypothesis', 'test']", The onesample ttest,seg_363,"in fact, if we would test h0 : µ = 240 against h1 : µ < 240, the p-value corresponding to t = −7.39 is the left tail probability p(t ≤ −7.39). this probability is very small, so that we also reject the null hypothesis in favor of this alternative and conclude that the expected length of an eruption is smaller than 4 minutes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  3924, 16613,  2571, 23746,  4355])","tensor([  101,  1999,  2755,  1010,  2065,  2057,  2052,  3231,  1044,  2692,
         1024,  1085,  1027, 11212,  2114,  1044,  2487,  1024,  1085,  1026,
        11212,  1010,  1996,  1052,  1011,  3643,  7978,  2000,  1056,  1027,
         1597,  2581,  1012,  4464,  2003,  1996,  2187,  5725,  9723,  1052,
         1006,  1056,  1608,  1597,  2581,  1012,  4464,  1007,  1012,  2023,
         9723,  2003,  2200,  2235,  1010,  2061,  2008,  2057,  2036, 15454,
         1996, 19701, 10744,  1999,  5684,  1997,  2023,  4522,  1998, 16519,
         2008,  1996,  3517,  3091,  1997,  2019, 17259,  2003,  3760,  2084,
         1018,  2781,  1012,   102])"
2917,1,"['paired', 'rate', 'table', 'concentration', 'percentage', 'scatterplot', 'rates', 'measurements', 'data', 'case']", The ttest in a regression setting,seg_365,"is calcium in your drinking water good for your health? in england and wales, an investigation of environmental causes of disease was conducted. the annual mortality rate (percentage of deaths) and the calcium concentration in the drinking water supply were recorded for 61 large towns. the data in table 27.3 represent the annual mortality rate averaged over the years 1958–1964, and the calcium concentration in parts per million. in figure 27.3 the 61 paired measurements are displayed in a scatterplot. the scatterplot shows a slight downward trend, which suggests that higher concentrations of calcium lead to lower mortality rates. the question is whether this is really the case or if the slight downward trend should be attributed to chance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2003, 13853,  1999,  2115,  5948,  2300,  2204,  2005,  2115,
         2740,  1029,  1999,  2563,  1998,  3575,  1010,  2019,  4812,  1997,
         4483,  5320,  1997,  4295,  2001,  4146,  1012,  1996,  3296, 13356,
         3446,  1006,  7017,  1997,  6677,  1007,  1998,  1996, 13853,  6693,
         1999,  1996,  5948,  2300,  4425,  2020,  2680,  2005,  6079,  2312,
         4865,  1012,  1996,  2951,  1999,  2795,  2676,  1012,  1017,  5050,
         1996,  3296, 13356,  3446, 11398,  2058,  1996,  2086,  3845,  1516,
         3546,  1010,  1998,  1996, 13853,  6693,  1999,  3033,  2566,  2454,
         1012,  1999,  3275,  2676,  1012,  1017,  1996,  6079, 12739, 11702,
         2024,  6913,  1999,  1037,  8040, 20097, 24759,  4140,  1012,  1996,
         8040, 20097, 24759,  4140,  3065,  1037,  7263, 14047,  9874,  1010,
         2029,  6083,  2008,  3020, 14061,  1997, 13853,  2599,  2000,  2896,
        13356,  6165,  1012,  1996,  3160,  2003,  3251,  2023,  2003,  2428,
         1996,  2553,  2030,  2065,  1996,  7263, 14047,  9874,  2323,  2022,
         7108,  2000,  3382,  1012,   102])"
2918,1,"['regression', 'simple linear regression', 'dependent', 'linear regression', 'errors', 'regression model', 'normally distributed', 'model', 'data', 'rate', 'dependent variable', 'linear', 'variable', 'linear regression model', 'concentration']", The ttest in a regression setting,seg_365,"to investigate this question we model the mortality data by means of a simple linear regression model with normally distributed errors, with the mortality rate as the dependent variable y and the calcium concentration as the independent variable x:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2000,  8556,  2023,  3160,  2057,  2944,  1996, 13356,  2951,
         2011,  2965,  1997,  1037,  3722,  7399, 26237,  2944,  2007,  5373,
         5500, 10697,  1010,  2007,  1996, 13356,  3446,  2004,  1996,  7790,
         8023,  1061,  1998,  1996, 13853,  6693,  2004,  1996,  2981,  8023,
         1060,  1024,   102])"
2919,1,"['parameter', 'rate', 'concentration', 'hypothesis', 'random sample', 'sample', 'random', 'distribution', 'null hypothesis', 'test']", The ttest in a regression setting,seg_365,"where u1, u2, . . . , u61 is a random sample from an n(0, σ2) distribution. the parameter β represents the change of the mortality rate if we increase the calcium concentration by one unit. we test the null hypothesis h0 : β = 0 (calcium has no effect on the mortality rate) against h1 : β < 0 (higher concentration of calcium reduces the mortality rate).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2073,  1057,  2487,  1010, 23343,  1010,  1012,  1012,  1012,
         1010,  1057,  2575,  2487,  2003,  1037,  6721,  7099,  2013,  2019,
         1050,  1006,  1014,  1010,  1173,  2475,  1007,  4353,  1012,  1996,
        16381,  1156,  5836,  1996,  2689,  1997,  1996, 13356,  3446,  2065,
         2057,  3623,  1996, 13853,  6693,  2011,  2028,  3131,  1012,  2057,
         3231,  1996, 19701, 10744,  1044,  2692,  1024,  1156,  1027,  1014,
         1006, 13853,  2038,  2053,  3466,  2006,  1996, 13356,  3446,  1007,
         2114,  1044,  2487,  1024,  1156,  1026,  1014,  1006,  3020,  6693,
         1997, 13853, 13416,  1996, 13356,  3446,  1007,  1012,   102])"
2920,1,['dataset'], The ttest in a regression setting,seg_365,"this example illustrates the general situation, where the dataset",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2023,  2742, 24899,  1996,  2236,  3663,  1010,  2073,  1996,
         2951, 13462,   102])"
2921,1,"['regression', 'simple linear regression', 'regression model', 'linear regression', 'errors', 'null hypothesis', 'normally distributed', 'statistics', 'model', 'statistic', 'test', 'test statistic', 'hypotheses', 'linear', 'hypothesis', 'linear regression model', 'test statistics']", The ttest in a regression setting,seg_365,"is modeled by a simple linear regression model, and one wants to test a null hypothesis of the form h0 : α = α0 or h0 : β = β0. similar to the one-sample t-test we will construct a test statistic for each of these null hypotheses. with normally distributed errors, these test statistics have a t-distribution under the null hypothesis. for this reason, for both null hypotheses the test is called a t-test.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2003, 14440,  2011,  1037,  3722,  7399, 26237,  2944,  1010,
         1998,  2028,  4122,  2000,  3231,  1037, 19701, 10744,  1997,  1996,
         2433,  1044,  2692,  1024,  1155,  1027,  1155,  2692,  2030,  1044,
         2692,  1024,  1156,  1027,  1156,  2692,  1012,  2714,  2000,  1996,
         2028,  1011,  7099,  1056,  1011,  3231,  2057,  2097,  9570,  1037,
         3231, 28093,  6553,  2005,  2169,  1997,  2122, 19701,  1044, 22571,
        14573, 23072,  1012,  2007,  5373,  5500, 10697,  1010,  2122,  3231,
         6747,  2031,  1037,  1056,  1011,  4353,  2104,  1996, 19701, 10744,
         1012,  2005,  2023,  3114,  1010,  2005,  2119, 19701,  1044, 22571,
        14573, 23072,  1996,  3231,  2003,  2170,  1037,  1056,  1011,  3231,
         1012,   102])"
2922,1,['slope'], The ttest in a regression setting,seg_365,the t-test for the slope,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([ 101, 1996, 1056, 1011, 3231, 2005, 1996, 9663,  102])"
2923,1,"['test statistic', 'hypothesis', 'null hypothesis', 'statistic', 'test']", The ttest in a regression setting,seg_365,"for the null hypothesis h0 : β = β0, we use as test statistic",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2005,  1996, 19701, 10744,  1044,  2692,  1024,  1156,  1027,
         1156,  2692,  1010,  2057,  2224,  2004,  3231, 28093,  6553,   102])"
2924,1,"['least squares', 'estimator']", The ttest in a regression setting,seg_365,where β̂ is the least squares estimator for β (see chapter 22) and,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2073,  1156,  2003,  1996,  2560, 14320,  9765,  9581,  4263,
         2005,  1156,  1006,  2156,  3127,  2570,  1007,  1998,   102])"
2925,0,['n'], The ttest in a regression setting,seg_365,"in this expression, n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([ 101, 1999, 2023, 3670, 1010, 1050,  102])"
2926,1,['estimator'], The ttest in a regression setting,seg_365,is the estimator for σ2 as introduced on page 332. it can be shown that,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2003,  1996,  9765,  9581,  4263,  2005,  1173,  2475,  2004,
         3107,  2006,  3931, 29327,  1012,  2009,  2064,  2022,  3491,  2008,
          102])"
2927,1,"['test statistic', 'deviation', 'variance', 'random variable', 'hypothesis', 'random', 'standard deviation', 'estimator', 'standard', 'null hypothesis', 'statistic', 'variable', 'test']", The ttest in a regression setting,seg_365,"so that the random variable sb2 is an estimator for the variance of β̂ − β0. hence, similar to the test statistic for the one-sample t-test, the test statistic tb compares the estimator β̂ with the value β0 and standardizes by dividing by an estimator for the standard deviation of β̂ − β0. values of tb close to zero are in favor of the null hypothesis h0 : β = β0. large positive values of tb suggest that β > β0, whereas large negative values of tb suggest that β < β0.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2061,  2008,  1996,  6721,  8023, 24829,  2475,  2003,  2019,
         9765,  9581,  4263,  2005,  1996, 23284,  1997,  1156,  1597,  1156,
         2692,  1012,  6516,  1010,  2714,  2000,  1996,  3231, 28093,  6553,
         2005,  1996,  2028,  1011,  7099,  1056,  1011,  3231,  1010,  1996,
         3231, 28093,  6553, 26419, 22963,  1996,  9765,  9581,  4263,  1156,
         2007,  1996,  3643,  1156,  2692,  1998,  3115, 10057,  2011, 16023,
         2011,  2019,  9765,  9581,  4263,  2005,  1996,  3115, 24353,  1997,
         1156,  1597,  1156,  2692,  1012,  5300,  1997, 26419,  2485,  2000,
         5717,  2024,  1999,  5684,  1997,  1996, 19701, 10744,  1044,  2692,
         1024,  1156,  1027,  1156,  2692,  1012,  2312,  3893,  5300,  1997,
        26419,  6592,  2008,  1156,  1028,  1156,  2692,  1010,  6168,  2312,
         4997,  5300,  1997, 26419,  6592,  2008,  1156,  1026,  1156,  2692,
         1012,   102])"
2928,1,"['random samples', 'normally distributed', 'hypothesis', 'random', 'normal', 'samples', 'errors', 'distribution', 'null hypothesis', 'case', 'test']", The ttest in a regression setting,seg_365,"recall that in the case of normal random samples the one-sample t-test statistic has a t(n − 1) distribution under the null hypothesis. for the same reason, it is also a fact that in the case of normally distributed errors the test statistic tb has a t(n − 2) distribution under the null hypothesis h0 : β = β0.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  9131,  2008,  1999,  1996,  2553,  1997,  3671,  6721,  8168,
         1996,  2028,  1011,  7099,  1056,  1011,  3231, 28093,  6553,  2038,
         1037,  1056,  1006,  1050,  1597,  1015,  1007,  4353,  2104,  1996,
        19701, 10744,  1012,  2005,  1996,  2168,  3114,  1010,  2009,  2003,
         2036,  1037,  2755,  2008,  1999,  1996,  2553,  1997,  5373,  5500,
        10697,  1996,  3231, 28093,  6553, 26419,  2038,  1037,  1056,  1006,
         1050,  1597,  1016,  1007,  4353,  2104,  1996, 19701, 10744,  1044,
         2692,  1024,  1156,  1027,  1156,  2692,  1012,   102])"
2929,1,"['data', 'test']", The ttest in a regression setting,seg_365,"in our mortality example we want to test h0 : β = 0 against h0 : β < 0. for the data we find β̂ = −3.2261 and sb = 0.4847, so that the value of tb is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  1999,  2256, 13356,  2742,  2057,  2215,  2000,  3231,  1044,
         2692,  1024,  1156,  1027,  1014,  2114,  1044,  2692,  1024,  1156,
         1026,  1014,  1012,  2005,  1996,  2951,  2057,  2424,  1156,  1027,
         1597,  2509,  1012, 21035,  2487,  1998, 24829,  1027,  1014,  1012,
         4466, 22610,  1010,  2061,  2008,  1996,  3643,  1997, 26419,  2003,
          102])"
2930,1,"['left critical value', 'table', 'level', 'critical value', 'test']", The ttest in a regression setting,seg_365,"if we test at level α = 0.05, then we must compare this value with the left critical value −t59,0.05. this value is not in table b.2, but we have that",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2065,  2057,  3231,  2012,  2504,  1155,  1027,  1014,  1012,
         5709,  1010,  2059,  2057,  2442, 12826,  2023,  3643,  2007,  1996,
         2187,  4187,  3643,  1597,  2102, 28154,  1010,  1014,  1012,  5709,
         1012,  2023,  3643,  2003,  2025,  1999,  2795,  1038,  1012,  1016,
         1010,  2021,  2057,  2031,  2008,   102])"
2931,1,"['data', 'probability', 'rates', 'table', 'hypothesis', 'level', 'statistical', 'null hypothesis']", The ttest in a regression setting,seg_365,"this means that tb is much smaller than −t59,0.05, so that we reject the null hypothesis at level 0.05. how much evidence the value tb = −6.656 bears against the null hypothesis is expressed by the one-tailed p-value p(tb ≤ −6.656). from table b.2 we can only see that this probability is smaller than 0.0005. by means of a statistical package we find p(tb ≤ −6.656) = 5.2 · 10−9. the data provide overwhelming evidence against the null hypothesis. we conclude that higher concentrations of calcium correspond to lower mortality rates.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2023,  2965,  2008, 26419,  2003,  2172,  3760,  2084,  1597,
         2102, 28154,  1010,  1014,  1012,  5709,  1010,  2061,  2008,  2057,
        15454,  1996, 19701, 10744,  2012,  2504,  1014,  1012,  5709,  1012,
         2129,  2172,  3350,  1996,  3643, 26419,  1027,  1597,  2575,  1012,
         3515,  2575,  6468,  2114,  1996, 19701, 10744,  2003,  5228,  2011,
         1996,  2028,  1011, 14578,  1052,  1011,  3643,  1052,  1006, 26419,
         1608,  1597,  2575,  1012,  3515,  2575,  1007,  1012,  2013,  2795,
         1038,  1012,  1016,  2057,  2064,  2069,  2156,  2008,  2023,  9723,
         2003,  3760,  2084,  1014,  1012,  2199,  2629,  1012,  2011,  2965,
         1997,  1037,  7778,  7427,  2057,  2424,  1052,  1006, 26419,  1608,
         1597,  2575,  1012,  3515,  2575,  1007,  1027,  1019,  1012,  1016,
         1087,  2184, 22543,  2683,  1012,  1996,  2951,  3073, 10827,  3350,
         2114,  1996, 19701, 10744,  1012,  2057, 16519,  2008,  3020, 14061,
         1997, 13853, 17254,  2000,  2896, 13356,  6165,  1012,   102])"
2932,1,"['test statistic', 'table', 'hypothesis', 'level', 'null hypothesis', 'statistic', 'data', 'test']", The ttest in a regression setting,seg_365,"quick exercise 27.4 the data in table 27.3 can be separated into measurements for towns at least as far north as derby and towns south of derby. for the data corresponding to 35 towns at least as far north as derby, one finds β̂ = −1.9313 and sb = 0.8479. test h0 : β = 0 against h0 : β < 0 at level 0.01, i.e., compute the value of the test statistic and report your conclusion about the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  4248,  6912,  2676,  1012,  1018,  1996,  2951,  1999,  2795,
         2676,  1012,  1017,  2064,  2022,  5459,  2046, 11702,  2005,  4865,
         2012,  2560,  2004,  2521,  2167,  2004,  7350,  1998,  4865,  2148,
         1997,  7350,  1012,  2005,  1996,  2951,  7978,  2000,  3486,  4865,
         2012,  2560,  2004,  2521,  2167,  2004,  7350,  1010,  2028,  4858,
         1156,  1027,  1597,  2487,  1012,  6109, 17134,  1998, 24829,  1027,
         1014,  1012,  6391,  2581,  2683,  1012,  3231,  1044,  2692,  1024,
         1156,  1027,  1014,  2114,  1044,  2692,  1024,  1156,  1026,  1014,
         2012,  2504,  1014,  1012,  5890,  1010,  1045,  1012,  1041,  1012,
         1010, 24134,  1996,  3643,  1997,  1996,  3231, 28093,  6553,  1998,
         3189,  2115,  7091,  2055,  1996, 19701, 10744,  1012,   102])"
2933,1,['intercept'], The ttest in a regression setting,seg_365,the t-test for the intercept,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  1996,  1056,  1011,  3231,  2005,  1996, 19115,   102])"
2934,1,"['test statistic', 'hypothesis', 'null hypothesis', 'statistic', 'test']", The ttest in a regression setting,seg_365,we test the null hypothesis h0 : α = α0 with test statistic,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2057,  3231,  1996, 19701, 10744,  1044,  2692,  1024,  1155,
         1027,  1155,  2692,  2007,  3231, 28093,  6553,   102])"
2935,1,"['least squares', 'estimator']", The ttest in a regression setting,seg_365,where α̂ is the least squares estimator for α and,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2073,  1155,  2003,  1996,  2560, 14320,  9765,  9581,  4263,
         2005,  1155,  1998,   102])"
2936,1,"['variance', 'random variable', 'random', 'estimator', 'variable']", The ttest in a regression setting,seg_365,with σ̂2 defined as before. the random variable sa2 is an estimator for the variance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2007,  1173,  2475,  4225,  2004,  2077,  1012,  1996,  6721,
         8023,  7842,  2475,  2003,  2019,  9765,  9581,  4263,  2005,  1996,
        23284,   102])"
2937,1,"['test statistic', 'deviation', 'case', 'hypothesis', 'estimator', 'standard deviation', 'normal', 'standard', 'errors', 'distribution', 'null hypothesis', 'statistic', 'test']", The ttest in a regression setting,seg_365,"again, we compare the estimator α̂ with the value α0 and standardize by dividing by an estimator for the standard deviation of α̂ − α0. values of ta close to zero are in favor of the null hypothesis h0 : α = α0. large positive values of ta suggest that α > α0, whereas large negative values of ta suggest that α < α0. like tb, in the case of normal errors, the test statistic ta has a t(n − 2) distribution under the null hypothesis h0 : α = α0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2153,  1010,  2057, 12826,  1996,  9765,  9581,  4263,  1155,
         2007,  1996,  3643,  1155,  2692,  1998,  3115,  4697,  2011, 16023,
         2011,  2019,  9765,  9581,  4263,  2005,  1996,  3115, 24353,  1997,
         1155,  1597,  1155,  2692,  1012,  5300,  1997, 11937,  2485,  2000,
         5717,  2024,  1999,  5684,  1997,  1996, 19701, 10744,  1044,  2692,
         1024,  1155,  1027,  1155,  2692,  1012,  2312,  3893,  5300,  1997,
        11937,  6592,  2008,  1155,  1028,  1155,  2692,  1010,  6168,  2312,
         4997,  5300,  1997, 11937,  6592,  2008,  1155,  1026,  1155,  2692,
         1012,  2066, 26419,  1010,  1999,  1996,  2553,  1997,  3671, 10697,
         1010,  1996,  3231, 28093,  6553, 11937,  2038,  1037,  1056,  1006,
         1050,  1597,  1016,  1007,  4353,  2104,  1996, 19701, 10744,  1044,
         2692,  1024,  1155,  1027,  1155,  2692,  1012,   102])"
2938,1,"['regression', 'linear', 'linear model', 'intercept', 'simple linear regression', 'regression model', 'linear regression', 'model', 'linear regression model', 'scatterplot', 'data', 'variable']", The ttest in a regression setting,seg_365,"as an illustration, recall exercise 17.9 where we modeled the volume y of black cherry trees by means of a linear model without intercept, with independent variable x = d2h, where d and h are the diameter and height of the trees. the scatterplot of the pairs (x1, y1), (x2, y2), . . . , (x31, y31) is displayed in figure 27.4. as mentioned in exercise 17.9, there are physical reasons to leave out the intercept. we want to investigate whether this is confirmed by the data. to this end, we model the data by a simple linear regression model with intercept",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2004,  2019, 14614,  1010,  9131,  6912,  2459,  1012,  1023,
         2073,  2057, 14440,  1996,  3872,  1061,  1997,  2304,  9115,  3628,
         2011,  2965,  1997,  1037,  7399,  2944,  2302, 19115,  1010,  2007,
         2981,  8023,  1060,  1027,  1040,  2475,  2232,  1010,  2073,  1040,
         1998,  1044,  2024,  1996,  6705,  1998,  4578,  1997,  1996,  3628,
         1012,  1996,  8040, 20097, 24759,  4140,  1997,  1996,  7689,  1006,
         1060,  2487,  1010,  1061,  2487,  1007,  1010,  1006,  1060,  2475,
         1010,  1061,  2475,  1007,  1010,  1012,  1012,  1012,  1010,  1006,
         1060, 21486,  1010,  1061, 21486,  1007,  2003,  6913,  1999,  3275,
         2676,  1012,  1018,  1012,  2004,  3855,  1999,  6912,  2459,  1012,
         1023,  1010,  2045,  2024,  3558,  4436,  2000,  2681,  2041,  1996,
        19115,  1012,  2057,  2215,  2000,  8556,  3251,  2023,  2003,  4484,
         2011,  1996,  2951,  1012,  2000,  2023,  2203,  1010,  2057,  2944,
         1996,  2951,  2011,  1037,  3722,  7399, 26237,  2944,  2007, 19115,
          102])"
2939,1,"['random sample', 'level', 'sample', 'random', 'distribution', 'test']", The ttest in a regression setting,seg_365,"where u1, u2, . . . , u31 are a random sample from an n(0, σ2) distribution, and we test h0 : α = 0 against h1 : α = 0 at level 0.10. the value of the test",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101,  2073,  1057,  2487,  1010, 23343,  1010,  1012,  1012,  1012,
         1010,  1057, 21486,  2024,  1037,  6721,  7099,  2013,  2019,  1050,
         1006,  1014,  1010,  1173,  2475,  1007,  4353,  1010,  1998,  2057,
         3231,  1044,  2692,  1024,  1155,  1027,  1014,  2114,  1044,  2487,
         1024,  1155,  1027,  1014,  2012,  2504,  1014,  1012,  2184,  1012,
         1996,  3643,  1997,  1996,  3231,   102])"
2940,1,"['left critical value', 'data', 'intercept', 'hypothesis', 'statistical', 'model', 'null hypothesis', 'critical value']", The ttest in a regression setting,seg_365,"ta = = −0.3089, 0.9636 and the left critical value is −t29,0.05 = −1.699. this means we cannot reject the null hypothesis. the data do not provide sufficient evidence against h0 : α = 0, which is confirmed by the one-tailed p-value p(ta ≤ −0.3089) = 0.3798 (computed by means of a statistical package). we conclude that the intercept does not contribute significantly to the model.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 1996, 23746,  4355,  1999,  1037, 26237,  4292])","tensor([  101, 11937,  1027,  1027,  1597,  2692,  1012, 24232,  2683,  1010,
         1014,  1012,  5986, 21619,  1998,  1996,  2187,  4187,  3643,  2003,
         1597,  2102, 24594,  1010,  1014,  1012,  5709,  1027,  1597,  2487,
         1012,  6353,  2683,  1012,  2023,  2965,  2057,  3685, 15454,  1996,
        19701, 10744,  1012,  1996,  2951,  2079,  2025,  3073,  7182,  3350,
         2114,  1044,  2692,  1024,  1155,  1027,  1014,  1010,  2029,  2003,
         4484,  2011,  1996,  2028,  1011, 14578,  1052,  1011,  3643,  1052,
         1006, 11937,  1608,  1597,  2692,  1012, 24232,  2683,  1007,  1027,
         1014,  1012,  4261,  2683,  2620,  1006, 24806,  2011,  2965,  1997,
         1037,  7778,  7427,  1007,  1012,  2057, 16519,  2008,  1996, 19115,
         2515,  2025,  9002,  6022,  2000,  1996,  2944,  1012,   102])"
2941,1,"['table', 'case', 'distribution']", Solutions to the quick exercises,seg_367,"27.1 if y has an n(1, 1) distribution, then y − 1 has an n(0, 1) distribution. therefore, from table b.1: p(y − 1 ≥ 0.03) = 0.4880. if y has an n(1, (0.01)2) distribution, then (y − 1)/0.01 has an n(0, 1) distribution. in that case,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2676,  1012,  1015,  2065,  1061,  2038,  2019,  1050,  1006,
         1015,  1010,  1015,  1007,  4353,  1010,  2059,  1061,  1597,  1015,
         2038,  2019,  1050,  1006,  1014,  1010,  1015,  1007,  4353,  1012,
         3568,  1010,  2013,  2795,  1038,  1012,  1015,  1024,  1052,  1006,
         1061,  1597,  1015,  1609,  1014,  1012,  6021,  1007,  1027,  1014,
         1012,  4466, 17914,  1012,  2065,  1061,  2038,  2019,  1050,  1006,
         1015,  1010,  1006,  1014,  1012,  5890,  1007,  1016,  1007,  4353,
         1010,  2059,  1006,  1061,  1597,  1015,  1007,  1013,  1014,  1012,
         5890,  2038,  2019,  1050,  1006,  1014,  1010,  1015,  1007,  4353,
         1012,  1999,  2008,  2553,  1010,   102])"
2942,1,"['test statistic', 'measurements', 'statistic', 'test']", Solutions to the quick exercises,seg_367,27.2 for the first and last ten measurements the values of the test statistic,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2676,  1012,  1016,  2005,  1996,  2034,  1998,  2197,  2702,
        11702,  1996,  5300,  1997,  1996,  3231, 28093,  6553,   102])"
2943,1,"['critical value', 'hypothesis', 'null hypothesis']", Solutions to the quick exercises,seg_367,"the critical value t9,0.025 = 2.262, which means we reject the null hypothesis for the second production line, but not for the first production line.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1996,  4187,  3643,  1056,  2683,  1010,  1014,  1012,  6185,
         2629,  1027,  1016,  1012, 21950,  1010,  2029,  2965,  2057, 15454,
         1996, 19701, 10744,  2005,  1996,  2117,  2537,  2240,  1010,  2021,
         2025,  2005,  1996,  2034,  2537,  2240,  1012,   102])"
2944,1,"['left critical value', 'right critical value', 'normal distribution', 'table', 'symmetry', 'critical region', 'normal', 'distribution', 'critical value']", Solutions to the quick exercises,seg_367,"27.3 the critical region is of the form k = (−∞, cl] ∪ [cu,∞). the right critical value cu is approximated by z0.0005 = t∞,0.0005 = 3.291, which can be found in table b.2. by symmetry of the normal distribution, the left critical value cl is approximated by −z0.0005 = −3.291. clearly, t = −7.39 < −3.291, so that it falls in k.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2676,  1012,  1017,  1996,  4187,  2555,  2003,  1997,  1996,
         2433,  1047,  1027,  1006,  1597, 30128,  1010, 18856,  1033,  1605,
         1031, 12731,  1010,  1601,  1007,  1012,  1996,  2157,  4187,  3643,
        12731,  2003, 15796,  2094,  2011,  1062,  2692,  1012,  2199,  2629,
         1027,  1056, 30128,  1010,  1014,  1012,  2199,  2629,  1027,  1017,
         1012, 27173,  1010,  2029,  2064,  2022,  2179,  1999,  2795,  1038,
         1012,  1016,  1012,  2011, 14991,  1997,  1996,  3671,  4353,  1010,
         1996,  2187,  4187,  3643, 18856,  2003, 15796,  2094,  2011,  1597,
         2480,  2692,  1012,  2199,  2629,  1027,  1597,  2509,  1012, 27173,
         1012,  4415,  1010,  1056,  1027,  1597,  2581,  1012,  4464,  1026,
         1597,  2509,  1012, 27173,  1010,  2061,  2008,  2009,  4212,  1999,
         1047,  1012,   102])"
2945,1,"['test statistic', 'statistic', 'test']", Solutions to the quick exercises,seg_367,27.4 the value of the test statistic is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2676,  1012,  1018,  1996,  3643,  1997,  1996,  3231, 28093,
         6553,  2003,   102])"
2946,1,"['left critical value', 'table', 'level', 'critical value']", Solutions to the quick exercises,seg_367,"the left critical value is equal to −t33,0.01, which is not in table b.2, but we see that −t33,0.01 < −t40,0.01 = −2.423. this means that −t33,0.01 < tb, so that we cannot reject h0 : β = 0 against h0 : β < 0 at level 0.01.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1996,  2187,  4187,  3643,  2003,  5020,  2000,  1597,  2102,
        22394,  1010,  1014,  1012,  5890,  1010,  2029,  2003,  2025,  1999,
         2795,  1038,  1012,  1016,  1010,  2021,  2057,  2156,  2008,  1597,
         2102, 22394,  1010,  1014,  1012,  5890,  1026,  1597,  2102, 12740,
         1010,  1014,  1012,  5890,  1027,  1597,  2475,  1012,  4413,  2509,
         1012,  2023,  2965,  2008,  1597,  2102, 22394,  1010,  1014,  1012,
         5890,  1026, 26419,  1010,  2061,  2008,  2057,  3685, 15454,  1044,
         2692,  1024,  1156,  1027,  1014,  2114,  1044,  2692,  1024,  1156,
         1026,  1014,  2012,  2504,  1014,  1012,  5890,  1012,   102])"
2947,1,"['mean', 'significance level', 'dataset', 'variance', 'hypothesis', 'level', 'sample', 'sample variance', 'null hypothesis', 'significance', 'sample mean']", Exercises,seg_369,27.1 we perform a t -test for the null hypothesis h0 : µ = 10 by means of a dataset consisting of n = 16 elements with sample mean 11 and sample variance 4. we use significance level 0.05.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2676,  1012,  1015,  2057,  4685,  1037,  1056,  1011,  3231,
         2005,  1996, 19701, 10744,  1044,  2692,  1024,  1085,  1027,  2184,
         2011,  2965,  1997,  1037,  2951, 13462,  5398,  1997,  1050,  1027,
         2385,  3787,  2007,  7099,  2812,  2340,  1998,  7099, 23284,  1018,
         1012,  2057,  2224,  7784,  2504,  1014,  1012,  5709,  1012,   102])"
2948,1,"['null hypothesis', 'hypothesis']", Exercises,seg_369,a. should we reject the null hypothesis in favor of h1 : µ = 10?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2323,  2057, 15454,  1996, 19701, 10744,  1999,
         5684,  1997,  1044,  2487,  1024,  1085,  1027,  2184,  1029,   102])"
2949,1,['test'], Exercises,seg_369,b. what if we test against h1 : µ > 10?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 1038, 1012, 2054, 2065, 2057, 3231, 2114, 1044, 2487, 1024, 1085,
        1028, 2184, 1029,  102])"
2950,1,"['table', 'set', 'level', 'process', 'variable', 'test']", Exercises,seg_369,27.2 the cleveland casting plant is a large highly automated producer of gray and nodular iron automotive castings for ford motor company. one process variable of interest to cleveland casting is the pouring temperature of molten iron. the pouring temperatures (in degrees fahrenheit) of ten crankshafts are given in table 27.4. the target setting for the pouring temperature is set at 2550 degrees. one wants to conduct a test at level α = 0.01 to determine whether the pouring temperature differs from the target setting.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2676,  1012,  1016,  1996,  6044,  9179,  3269,  2003,  1037,
         2312,  3811, 12978,  3135,  1997,  3897,  1998,  7293,  7934,  3707,
        12945,  9179,  2015,  2005,  4811,  5013,  2194,  1012,  2028,  2832,
         8023,  1997,  3037,  2000,  6044,  9179,  2003,  1996, 13053,  4860,
         1997, 23548,  3707,  1012,  1996, 13053,  7715,  1006,  1999,  5445,
         6904, 28362, 25311, 20175,  1007,  1997,  2702, 27987, 25679,  2015,
         2024,  2445,  1999,  2795,  2676,  1012,  1018,  1012,  1996,  4539,
         4292,  2005,  1996, 13053,  4860,  2003,  2275,  2012, 20637,  2692,
         5445,  1012,  2028,  4122,  2000,  6204,  1037,  3231,  2012,  2504,
         1155,  1027,  1014,  1012,  5890,  2000,  5646,  3251,  1996, 13053,
         4860, 12980,  2013,  1996,  4539,  4292,  1012,   102])"
2951,1,"['null hypothesis', 'alternative hypothesis', 'hypothesis']", Exercises,seg_369,a. formulate the appropriate null hypothesis and alternative hypothesis.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5675,  2618,  1996,  6413, 19701, 10744,  1998,
         4522, 10744,  1012,   102])"
2952,1,"['test statistic', 'statistic', 'test']", Exercises,seg_369,b. compute the value of the test statistic and report your conclusion. you,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  3643,  1997,  1996,  3231, 28093,
         6553,  1998,  3189,  2115,  7091,  1012,  2017,   102])"
2953,1,"['variance', 'sample', 'normal', 'sample variance', 'distribution', 'model']", Exercises,seg_369,may assume a normal model distribution and use that the sample variance is 517.34.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  2089,  7868,  1037,  3671,  2944,  4353,  1998,  2224,  2008,
         1996,  7099, 23284,  2003,  4868,  2581,  1012,  4090,  1012,   102])"
2954,1,"['table', 'tests', 'null hypothesis', 'mean', 'normal distribution', 'failure', 'normal', 'standard deviation', 'data', 'test', 'deviation', 'hypothesis', 'results', 'standard', 'expectation', 'sample', 'sample standard deviation', 'distribution', 'sample mean']", Exercises,seg_369,27.3 table 27.5 lists the results of tensile adhesion tests on 22 u-700 alloy specimens. the data are loads at failure in mpa. the sample mean is 13.71 and the sample standard deviation is 3.55. you may assume that the data originated from a normal distribution with expectation µ. one is interested in whether the load at failure exceeds 10 mpa. we investigate this by means of a t -test for the null hypothesis h0 : µ = 10.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2676,  1012,  1017,  2795,  2676,  1012,  1019,  7201,  1996,
         3463,  1997, 15295,  9463,  4748, 21471,  5852,  2006,  2570,  1057,
         1011,  6352, 17564,  9908,  1012,  1996,  2951,  2024, 15665,  2012,
         4945,  1999,  6131,  2050,  1012,  1996,  7099,  2812,  2003,  2410,
         1012,  6390,  1998,  1996,  7099,  3115, 24353,  2003,  1017,  1012,
         4583,  1012,  2017,  2089,  7868,  2008,  1996,  2951,  7940,  2013,
         1037,  3671,  4353,  2007, 17626,  1085,  1012,  2028,  2003,  4699,
         1999,  3251,  1996,  7170,  2012,  4945, 23651,  2184,  6131,  2050,
         1012,  2057,  8556,  2023,  2011,  2965,  1997,  1037,  1056,  1011,
         3231,  2005,  1996, 19701, 10744,  1044,  2692,  1024,  1085,  1027,
         2184,  1012,   102])"
2955,1,"['alternative hypothesis', 'hypothesis']", Exercises,seg_369,a. what do you choose as the alternative hypothesis?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2054,  2079,  2017,  5454,  2004,  1996,  4522,
        10744,  1029,   102])"
2956,1,"['test statistic', 'statistic', 'test']", Exercises,seg_369,"b. compute the value of the test statistic and report your conclusion, when",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  3643,  1997,  1996,  3231, 28093,
         6553,  1998,  3189,  2115,  7091,  1010,  2043,   102])"
2957,1,"['level', 'test']", Exercises,seg_369,performing the test at level 0.05.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([ 101, 4488, 1996, 3231, 2012, 2504, 1014, 1012, 5709, 1012,  102])"
2958,1,"['table', 'null hypothesis', 'critical value', 'mean', 'significance level', 'dataset', 'data', 'statistic', 'test', 'test statistic', 'realization', 'hypothesis', 'random sample', 'level', 'sample variance', 'significance', 'variance', 'sample', 'random', 'distribution', 'measurements', 'sample mean']", Exercises,seg_369,"27.4 consider the coal data from table 23.2, where 22 gross calorific value measurements are listed for daw mill coal coded 258gb41. we modeled this dataset as a realization of a random sample from an n(µ, σ2) distribution with µ and σ unknown. we are planning to buy a shipment if the gross calorific value exceeds 31.00 mj/kg. the sample mean and sample variance of the data are x̄n = 31.012 and sn = 0.1294. perform a t -test for the null hypothesis h0 : µ = 31.00 against h1 : µ > 31.00 using significance level 0.01, i.e., compute the value of the test statistic, the critical value of the test, and report your conclusion.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2676,  1012,  1018,  5136,  1996,  5317,  2951,  2013,  2795,
         2603,  1012,  1016,  1010,  2073,  2570,  7977, 10250, 10050,  8873,
         2278,  3643, 11702,  2024,  3205,  2005,  4830,  2860,  4971,  5317,
        22402, 24398, 18259, 23632,  1012,  2057, 14440,  2023,  2951, 13462,
         2004,  1037, 12393,  1997,  1037,  6721,  7099,  2013,  2019,  1050,
         1006,  1085,  1010,  1173,  2475,  1007,  4353,  2007,  1085,  1998,
         1173,  4242,  1012,  2057,  2024,  4041,  2000,  4965,  1037, 22613,
         2065,  1996,  7977, 10250, 10050,  8873,  2278,  3643, 23651,  2861,
         1012,  4002,  1049,  3501,  1013,  4705,  1012,  1996,  7099,  2812,
         1998,  7099, 23284,  1997,  1996,  2951,  2024,  1060,  2078,  1027,
         2861,  1012,  5890,  2475,  1998,  1055,  2078,  1027,  1014,  1012,
        14378,  2549,  1012,  4685,  1037,  1056,  1011,  3231,  2005,  1996,
        19701, 10744,  1044,  2692,  1024,  1085,  1027,  2861,  1012,  4002,
         2114,  1044,  2487,  1024,  1085,  1028,  2861,  1012,  4002,  2478,
         7784,  2504,  1014,  1012,  5890,  1010,  1045,  1012,  1041,  1012,
         1010, 24134,  1996,  3643,  1997,  1996,  3231, 28093,  6553,  1010,
         1996,  4187,  3643,  1997,  1996,  3231,  1010,  1998,  3189,  2115,
         7091,  1012,   102])"
2959,1,"['mean', 'deviation', 'coefficients', 'coefficient', 'sample', 'standard deviation', 'sample standard deviation', 'standard', 'tests', 'sample mean', 'test']", Exercises,seg_369,"27.5 in the november 1988 issue of science a study was reported on the inbreeding of tropical swarm-founding wasps. each member of a sample of 197 wasps was captured, frozen, and subjected to a series of genetic tests, from which an inbreeding coefficient was determined. the sample mean and the sample standard deviation of the coefficients are x̄197 = 0.044 and s197 = 0.884. if a species does not have the tendency to inbreed, their true inbreeding coefficient is 0. determine by means of a test whether the inbreeding coefficient for this species of wasp exceeds 0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2676,  1012,  1019,  1999,  1996,  2281,  2997,  3277,  1997,
         2671,  1037,  2817,  2001,  2988,  2006,  1996,  1999, 13578, 17819,
         1997,  5133, 21708,  1011,  4889, 23146,  1012,  2169,  2266,  1997,
         1037,  7099,  1997, 19975, 23146,  2001,  4110,  1010,  7708,  1010,
         1998, 13532,  2000,  1037,  2186,  1997,  7403,  5852,  1010,  2013,
         2029,  2019,  1999, 13578, 17819, 19064,  2001,  4340,  1012,  1996,
         7099,  2812,  1998,  1996,  7099,  3115, 24353,  1997,  1996, 21374,
         2024,  1060, 16147,  2581,  1027,  1014,  1012,  5840,  2549,  1998,
         1055, 16147,  2581,  1027,  1014,  1012,  6070,  2549,  1012,  2065,
         1037,  2427,  2515,  2025,  2031,  1996, 11765,  2000,  1999, 13578,
         2098,  1010,  2037,  2995,  1999, 13578, 17819, 19064,  2003,  1014,
         1012,  5646,  2011,  2965,  1997,  1037,  3231,  3251,  1996,  1999,
        13578, 17819, 19064,  2005,  2023,  2427,  1997, 19411, 23651,  1014,
         1012,   102])"
2960,1,"['null hypothesis', 'alternative hypothesis', 'hypothesis']", Exercises,seg_369,a. formulate the appropriate null hypothesis and alternative hypothesis and,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  5675,  2618,  1996,  6413, 19701, 10744,  1998,
         4522, 10744,  1998,   102])"
2961,1,"['test statistic', 'statistic', 'test']", Exercises,seg_369,compute the value of the test statistic.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101, 24134,  1996,  3643,  1997,  1996,  3231, 28093,  6553,  1012,
          102])"
2962,1,"['test statistic', 'statistic', 'test']", Exercises,seg_369,b. compute the p-value corresponding to the value of the test statistic and,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1038,  1012, 24134,  1996,  1052,  1011,  3643,  7978,  2000,
         1996,  3643,  1997,  1996,  3231, 28093,  6553,  1998,   102])"
2963,1,"['null hypothesis', 'hypothesis']", Exercises,seg_369,report your conclusion about the null hypothesis.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  3189,  2115,  7091,  2055,  1996, 19701, 10744,  1012,   102])"
2964,1,"['regression', 'independent variable', 'table', 'simple linear regression', 'dependent', 'linear regression', 'errors', 'regression model', 'independent', 'normally distributed', 'model', 'data', 'dependent variable', 'linear', 'variable', 'linear regression model']", Exercises,seg_369,"27.6 the stopping distance of an automobile is related to its speed. the data in table 27.6 give the stopping distance in feet and speed in miles per hour of an automobile. the data are modeled by means of simple linear regression model with normally distributed errors, with the square root of the stopping distance as dependent variable y and the speed as independent variable x:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2676,  1012,  1020,  1996,  7458,  3292,  1997,  2019,  9935,
         2003,  3141,  2000,  2049,  3177,  1012,  1996,  2951,  1999,  2795,
         2676,  1012,  1020,  2507,  1996,  7458,  3292,  1999,  2519,  1998,
         3177,  1999,  2661,  2566,  3178,  1997,  2019,  9935,  1012,  1996,
         2951,  2024, 14440,  2011,  2965,  1997,  3722,  7399, 26237,  2944,
         2007,  5373,  5500, 10697,  1010,  2007,  1996,  2675,  7117,  1997,
         1996,  7458,  3292,  2004,  7790,  8023,  1061,  1998,  1996,  3177,
         2004,  2981,  8023,  1060,  1024,   102])"
2965,1,['dataset'], Exercises,seg_369,for the dataset we find,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2005,  1996,  2951, 13462,  2057,  2424,   102])"
2966,1,"['test statistic', 'intercept', 'hypothesis', 'level', 'alternative hypothesis', 'statistic', 'data', 'test']", Exercises,seg_369,"one would expect that the intercept can be taken equal to 0, since zero speed would yield zero stopping distance. investigate whether this is confirmed by the data by performing the appropriate test at level 0.10. formulate the proper null and alternative hypothesis, compute the value of the test statistic, and report your conclusion.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2028,  2052,  5987,  2008,  1996, 19115,  2064,  2022,  2579,
         5020,  2000,  1014,  1010,  2144,  5717,  3177,  2052, 10750,  5717,
         7458,  3292,  1012,  8556,  3251,  2023,  2003,  4484,  2011,  1996,
         2951,  2011,  4488,  1996,  6413,  3231,  2012,  2504,  1014,  1012,
         2184,  1012,  5675,  2618,  1996,  5372, 19701,  1998,  4522, 10744,
         1010, 24134,  1996,  3643,  1997,  1996,  3231, 28093,  6553,  1010,
         1998,  3189,  2115,  7091,  1012,   102])"
2967,1,"['regression', 'normally distributed', 'table', 'set', 'response variable', 'response', 'regression model', 'errors', 'model', 'average', 'data', 'variable']", Exercises,seg_369,"27.7 in a study about the effect of wall insulation, the weekly gas consumption (in 1000 cubic feet) and the average outside temperature (in degrees celsius) was measured of a certain house in southeast england, for 26 weeks before and 30 weeks after cavity-wall insulation had been installed. the house thermostat was set at 20 degrees throughout. the data are listed in table 27.7. we model the data before insulation by means of a simple linear regression model with normally distributed errors and gas consumption as response variable. a similar model was used for the data after insulation. given are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2676,  1012,  1021,  1999,  1037,  2817,  2055,  1996,  3466,
         1997,  2813, 25710,  1010,  1996,  4882,  3806,  8381,  1006,  1999,
         6694, 11919,  2519,  1007,  1998,  1996,  2779,  2648,  4860,  1006,
         1999,  5445,  8292,  4877,  4173,  1007,  2001,  7594,  1997,  1037,
         3056,  2160,  1999,  4643,  2563,  1010,  2005,  2656,  3134,  2077,
         1998,  2382,  3134,  2044, 17790,  1011,  2813, 25710,  2018,  2042,
         5361,  1012,  1996,  2160,  1996, 10867, 28696,  2102,  2001,  2275,
         2012,  2322,  5445,  2802,  1012,  1996,  2951,  2024,  3205,  1999,
         2795,  2676,  1012,  1021,  1012,  2057,  2944,  1996,  2951,  2077,
        25710,  2011,  2965,  1997,  1037,  3722,  7399, 26237,  2944,  2007,
         5373,  5500, 10697,  1998,  3806,  8381,  2004,  3433,  8023,  1012,
         1037,  2714,  2944,  2001,  2109,  2005,  1996,  2951,  2044, 25710,
         1012,  2445,  2024,   102])"
2968,1,['data'], Exercises,seg_369,a. use the data before insulation to investigate whether smaller outside tem-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  2224,  1996,  2951,  2077, 25710,  2000,  8556,
         3251,  3760,  2648,  8915,  2213,  1011,   102])"
2969,1,"['test statistic', 'significance level', 'hypothesis', 'level', 'alternative hypothesis', 'significance', 'statistic', 'test']", Exercises,seg_369,"peratures lead to higher gas consumption. formulate the proper null and alternative hypothesis, compute the value of the test statistic, and report your conclusion, using significance level 0.05.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2566,  4017, 14900,  2599,  2000,  3020,  3806,  8381,  1012,
         5675,  2618,  1996,  5372, 19701,  1998,  4522, 10744,  1010, 24134,
         1996,  3643,  1997,  1996,  3231, 28093,  6553,  1010,  1998,  3189,
         2115,  7091,  1010,  2478,  7784,  2504,  1014,  1012,  5709,  1012,
          102])"
2970,1,['data'], Exercises,seg_369,b. do the same for the data after insulation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2079,  1996,  2168,  2005,  1996,  2951,  2044,
        25710,  1012,   102])"
2971,1,"['expectations', 'observations', 'variances', 'distributions', 'normal', 'model', 'test']", Comparing two samples,seg_371,"many applications are concerned with two groups of observations of the same kind that originate from two possibly different model distributions, and the question is whether these distributions have different expectations. we describe a test for equality of expectations, where we consider normal and nonnormal model distributions and equal and unequal variances of the model distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2048,  8168])","tensor([  101,  2116,  5097,  2024,  4986,  2007,  2048,  2967,  1997,  9420,
         1997,  1996,  2168,  2785,  2008, 21754,  2013,  2048,  4298,  2367,
         2944, 20611,  1010,  1998,  1996,  3160,  2003,  3251,  2122, 20611,
         2031,  2367, 10908,  1012,  2057,  6235,  1037,  3231,  2005,  9945,
         1997, 10908,  1010,  2073,  2057,  5136,  3671,  1998,  2512, 12131,
         9067,  2944, 20611,  1998,  5020,  1998, 16655, 26426, 23284,  2015,
         1997,  1996,  2944, 20611,  1012,   102])"
2972,1,"['mean', 'scatterplots']", Is dry drilling faster than wet drilling,seg_373,"recall the drilling example from sections 15.5 and 16.4. the question was whether dry drilling is faster than wet drilling. the scatterplots in figure 15.11 seem to suggest that up to a depth of 250 feet the drill time does not depend on depth. therefore, for a first investigation of a possible difference between dry and wet drilling we only consider the (mean) drill times up to this depth. a more thorough study can be found in [23].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  9131,  1996, 15827,  2742,  2013,  5433,  2321,  1012,  1019,
         1998,  2385,  1012,  1018,  1012,  1996,  3160,  2001,  3251,  4318,
        15827,  2003,  5514,  2084,  4954, 15827,  1012,  1996,  8040, 20097,
        24759, 12868,  1999,  3275,  2321,  1012,  2340,  4025,  2000,  6592,
         2008,  2039,  2000,  1037,  5995,  1997,  5539,  2519,  1996, 12913,
         2051,  2515,  2025, 12530,  2006,  5995,  1012,  3568,  1010,  2005,
         1037,  2034,  4812,  1997,  1037,  2825,  4489,  2090,  4318,  1998,
         4954, 15827,  2057,  2069,  5136,  1996,  1006,  2812,  1007, 12913,
         2335,  2039,  2000,  2023,  5995,  1012,  1037,  2062, 16030,  2817,
         2064,  2022,  2179,  1999,  1031,  2603,  1033,  1012,   102])"
2973,1,"['boxplots', 'boxplot']", Is dry drilling faster than wet drilling,seg_373,"the boxplots of the drill times for both types of drilling are displayed in figure 28.1. clearly, the boxplot for dry drilling is positioned lower than the",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  1996,  3482, 24759, 12868,  1997,  1996, 12913,  2335,  2005,
         2119,  4127,  1997, 15827,  2024,  6913,  1999,  3275,  2654,  1012,
         1015,  1012,  4415,  1010,  1996,  3482, 24759,  4140,  2005,  4318,
        15827,  2003, 10959,  2896,  2084,  1996,   102])"
2974,1,"['random samples', 'functions', 'random', 'samples', 'distribution', 'model', 'parameters', 'expected value', 'test']", Is dry drilling faster than wet drilling,seg_373,"one for wet drilling. however, the question is whether this difference can be attributed to chance or if it is large enough to conclude that the dry drill time is shorter than the wet drill time. to answer this question, we model the datasets of dry and wet drill times as realizations of random samples from two distribution functions f and g, one with expected value µ1 and the other with expected value µ2. the parameters µ1 and µ2 represent the drill times of dry drilling and wet drilling, respectively. we test h0 : µ1 = µ2 against h1 : µ1 < µ2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  2028,  2005,  4954, 15827,  1012,  2174,  1010,  1996,  3160,
         2003,  3251,  2023,  4489,  2064,  2022,  7108,  2000,  3382,  2030,
         2065,  2009,  2003,  2312,  2438,  2000, 16519,  2008,  1996,  4318,
        12913,  2051,  2003,  7820,  2084,  1996,  4954, 12913,  2051,  1012,
         2000,  3437,  2023,  3160,  1010,  2057,  2944,  1996,  2951, 13462,
         2015,  1997,  4318,  1998,  4954, 12913,  2335,  2004, 12393,  2015,
         1997,  6721,  8168,  2013,  2048,  4353,  4972,  1042,  1998,  1043,
         1010,  2028,  2007,  3517,  3643,  1085,  2487,  1998,  1996,  2060,
         2007,  3517,  3643,  1085,  2475,  1012,  1996, 11709,  1085,  2487,
         1998,  1085,  2475,  5050,  1996, 12913,  2335,  1997,  4318, 15827,
         1998,  4954, 15827,  1010,  4414,  1012,  2057,  3231,  1044,  2692,
         1024,  1085,  2487,  1027,  1085,  2475,  2114,  1044,  2487,  1024,
         1085,  2487,  1026,  1085,  2475,  1012,   102])"
2975,0,[], Is dry drilling faster than wet drilling,seg_373,this example illustrates a general situation where we compare two datasets,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  2023,  2742, 24899,  1037,  2236,  3663,  2073,  2057, 12826,
         2048,  2951, 13462,  2015,   102])"
2976,1,"['random samples', 'realization', 'random', 'samples', 'independent']", Is dry drilling faster than wet drilling,seg_373,which are the realization of independent random samples,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 1., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  2029,  2024,  1996, 12393,  1997,  2981,  6721,  8168,   102])"
2977,1,"['variance', 'expectations', 'distributions', 'test']", Is dry drilling faster than wet drilling,seg_373,"from two distributions, and we want to test whether the expectations of both distributions are the same. both the variance σx",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  2013,  2048, 20611,  1010,  1998,  2057,  2215,  2000,  3231,
         3251,  1996, 10908,  1997,  2119, 20611,  2024,  1996,  2168,  1012,
         2119,  1996, 23284,  1173,  2595,   102])"
2978,1,['variance'], Is dry drilling faster than wet drilling,seg_373,2 of the xi and the variance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  1016,  1997,  1996,  8418,  1998,  1996, 23284,   102])"
2979,0,[], Is dry drilling faster than wet drilling,seg_373,2 of the yj are unknown.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([ 101, 1016, 1997, 1996, 1061, 3501, 2024, 4242, 1012,  102])"
2980,1,"['test statistic', 'variance', 'hypothesis', 'estimator', 'null hypothesis', 'statistic', 'test']", Is dry drilling faster than wet drilling,seg_373,"note that the null hypothesis is equivalent to the statement µ1 − µ2 = 0. for this reason, similar to chapter 27, the test statistic for the null hypothesis h0 : µ1 = µ2 is based on an estimator x̄n − ȳm for the difference µ1 − µ2. as before, we standardize x̄n − ȳm by an estimator for its variance",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  3602,  2008,  1996, 19701, 10744,  2003,  5662,  2000,  1996,
         4861,  1085,  2487,  1597,  1085,  2475,  1027,  1014,  1012,  2005,
         2023,  3114,  1010,  2714,  2000,  3127,  2676,  1010,  1996,  3231,
        28093,  6553,  2005,  1996, 19701, 10744,  1044,  2692,  1024,  1085,
         2487,  1027,  1085,  2475,  2003,  2241,  2006,  2019,  9765,  9581,
         4263,  1060,  2078,  1597,  1061,  2213,  2005,  1996,  4489,  1085,
         2487,  1597,  1085,  2475,  1012,  2004,  2077,  1010,  2057,  3115,
         4697,  1060,  2078,  1597,  1061,  2213,  2011,  2019,  9765,  9581,
         4263,  2005,  2049, 23284,   102])"
2981,1,"['sample variances', 'variances', 'sample']", Is dry drilling faster than wet drilling,seg_373,recall that the sample variances sx,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  9131,  2008,  1996,  7099, 23284,  2015,  1055,  2595,   102])"
2982,1,"['estimators', 'unbiased', 'unbiased estimators']", Is dry drilling faster than wet drilling,seg_373,"2 and sy 2 of the xi and yj , are unbiased estimators for σx",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        1., 0., 0., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  1016,  1998, 25353,  1016,  1997,  1996,  8418,  1998,  1061,
         3501,  1010,  2024,  4895, 11607,  6924,  9765,  9581,  6591,  2005,
         1173,  2595,   102])"
2983,1,['combination'], Is dry drilling faster than wet drilling,seg_373,2 and σy 2 . we will use a combination of sx,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([ 101, 1016, 1998, 1173, 2100, 1016, 1012, 2057, 2097, 2224, 1037, 5257,
        1997, 1055, 2595,  102])"
2984,1,"['cases', 'standardization', 'variances', 'estimator']", Is dry drilling faster than wet drilling,seg_373,struct an estimator for var(x̄n − ȳm). the actual standardization of x̄n−ȳm depends on whether the variances of the xi and yj are the same. we distinguish between the two cases σx,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  2358,  6820,  6593,  2019,  9765,  9581,  4263,  2005, 13075,
         1006,  1060,  2078,  1597,  1061,  2213,  1007,  1012,  1996,  5025,
        28648,  1997,  1060,  2078, 22543, 24335,  9041,  2006,  3251,  1996,
        23284,  2015,  1997,  1996,  8418,  1998,  1061,  3501,  2024,  1996,
         2168,  1012,  2057, 10782,  2090,  1996,  2048,  3572,  1173,  2595,
          102])"
2985,1,"['variances', 'case']", Is dry drilling faster than wet drilling,seg_373,2 = σy 2 and σx 2 = σy 2 . in the next section we consider the case of equal variances.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  1016,  1027,  1173,  2100,  1016,  1998,  1173,  2595,  1016,
         1027,  1173,  2100,  1016,  1012,  1999,  1996,  2279,  2930,  2057,
         5136,  1996,  2553,  1997,  5020, 23284,  2015,  1012,   102])"
2986,1,['boxplots'], Is dry drilling faster than wet drilling,seg_373,"quick exercise 28.1 looking at the boxplots in figure 28.1, does the assumption σx",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  4248,  6912,  2654,  1012,  1015,  2559,  2012,  1996,  3482,
        24759, 12868,  1999,  3275,  2654,  1012,  1015,  1010,  2515,  1996,
        11213,  1173,  2595,   102])"
2987,0,[], Is dry drilling faster than wet drilling,seg_373,2 = σy 2 seem reasonable to you? can you think of a way to quantify your belief?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2003,  4318, 15827,  5514,  2084,  4954, 15827])","tensor([  101,  1016,  1027,  1173,  2100,  1016,  4025,  9608,  2000,  2017,
         1029,  2064,  2017,  2228,  1997,  1037,  2126,  2000, 24110, 27351,
         2115,  6772,  1029,   102])"
2988,1,"['variance', 'distributions', 'samples']", Two samples with equal variances,seg_375,suppose that the samples originate from distributions with the same (but unknown) variance:,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  6814,  2008,  1996,  8168, 21754,  2013, 20611,  2007,  1996,
         2168,  1006,  2021,  4242,  1007, 23284,  1024,   102])"
2989,1,"['sample variances', 'variances', 'sample', 'case']", Two samples with equal variances,seg_375,in this case we can pool the sample variances sx,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1999,  2023,  2553,  2057,  2064,  4770,  1996,  7099, 23284,
         2015,  1055,  2595,   102])"
2990,0,[], Two samples with equal variances,seg_375,2 and sy 2 by constructing,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1016,  1998, 25353,  1016,  2011, 15696,   102])"
2991,1,"['linear combination', 'combination', 'linear']", Two samples with equal variances,seg_375,a linear combination asx,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([ 101, 1037, 7399, 5257, 2004, 2595,  102])"
2992,1,"['weighted average', 'unbiased', 'estimator', 'unbiased estimator', 'average']", Two samples with equal variances,seg_375,2 + bsy 2 that is an unbiased estimator for σ2. one particular choice is the weighted average,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1016,  1009, 18667,  2100,  1016,  2008,  2003,  2019,  4895,
        11607,  6924,  9765,  9581,  4263,  2005,  1173,  2475,  1012,  2028,
         3327,  3601,  2003,  1996, 18215,  2779,   102])"
2993,1,"['normally distributed', 'linear', 'variance', 'unbiased', 'linear combinations', 'samples', 'combinations']", Two samples with equal variances,seg_375,it has the property that for normally distributed samples it has the smallest variance among all unbiased linear combinations of sx,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2009,  2038,  1996,  3200,  2008,  2005,  5373,  5500,  8168,
         2009,  2038,  1996, 10479, 23284,  2426,  2035,  4895, 11607,  6924,
         7399, 14930,  1997,  1055,  2595,   102])"
2994,1,"['sample', 'estimate']", Two samples with equal variances,seg_375,"cise 28.5). moreover, the weights depend on the sample sizes. this is appropriate, since if one sample is much larger than the other, the estimate of σ2 from that sample is more reliable and should receive greater weight.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101, 20199,  2063,  2654,  1012,  1019,  1007,  1012,  9308,  1010,
         1996, 15871, 12530,  2006,  1996,  7099, 10826,  1012,  2023,  2003,
         6413,  1010,  2144,  2065,  2028,  7099,  2003,  2172,  3469,  2084,
         1996,  2060,  1010,  1996, 10197,  1997,  1173,  2475,  2013,  2008,
         7099,  2003,  2062, 10539,  1998,  2323,  4374,  3618,  3635,  1012,
          102])"
2995,0,[], Two samples with equal variances,seg_375,we find that the pooled-variance:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2057,  2424,  2008,  1996, 19107,  2094,  1011, 23284,  1024,
          102])"
2996,1,"['unbiased estimator', 'estimator', 'unbiased']", Two samples with equal variances,seg_375,is an unbiased estimator for,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
          102])"
2997,1,"['test statistic', 'hypothesis', 'null hypothesis', 'statistic', 'test']", Two samples with equal variances,seg_375,this leads to the following test statistic for the null hypothesis h0 : µ1 = µ2:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2023,  5260,  2000,  1996,  2206,  3231, 28093,  6553,  2005,
         1996, 19701, 10744,  1044,  2692,  1024,  1085,  2487,  1027,  1085,
         2475,  1024,   102])"
2998,1,"['deviation', 'hypothesis', 'estimator', 'standard deviation', 'standard', 'null hypothesis']", Two samples with equal variances,seg_375,"as before, we compare the estimator x̄n − ȳm with 0 (the value of µ1 − µ2 under the null hypothesis), and we standardize by dividing by the estimator sp for the standard deviation of x̄n − ȳm. values of tp close to zero are in favor of the null hypothesis h0 : µ1 = µ2. large positive values of tp suggest that µ1 > µ2, whereas large negative values suggest that µ1 < µ2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2004,  2077,  1010,  2057, 12826,  1996,  9765,  9581,  4263,
         1060,  2078,  1597,  1061,  2213,  2007,  1014,  1006,  1996,  3643,
         1997,  1085,  2487,  1597,  1085,  2475,  2104,  1996, 19701, 10744,
         1007,  1010,  1998,  2057,  3115,  4697,  2011, 16023,  2011,  1996,
         9765,  9581,  4263, 11867,  2005,  1996,  3115, 24353,  1997,  1060,
         2078,  1597,  1061,  2213,  1012,  5300,  1997,  1056,  2361,  2485,
         2000,  5717,  2024,  1999,  5684,  1997,  1996, 19701, 10744,  1044,
         2692,  1024,  1085,  2487,  1027,  1085,  2475,  1012,  2312,  3893,
         5300,  1997,  1056,  2361,  6592,  2008,  1085,  2487,  1028,  1085,
         2475,  1010,  6168,  2312,  4997,  5300,  6592,  2008,  1085,  2487,
         1026,  1085,  2475,  1012,   102])"
2999,1,"['mean', 'test statistic', 'studentized mean difference', 'hypothesis', 'studentized mean', 'distribution', 'null hypothesis', 'statistic', 'test']", Two samples with equal variances,seg_375,"the next step is to determine the distribution of tp. note that under the null hypothesis h0 : µ1 = µ2, the test statistic tp is the pooled studentized mean difference",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1996,  2279,  3357,  2003,  2000,  5646,  1996,  4353,  1997,
         1056,  2361,  1012,  3602,  2008,  2104,  1996, 19701, 10744,  1044,
         2692,  1024,  1085,  2487,  1027,  1085,  2475,  1010,  1996,  3231,
        28093,  6553,  1056,  2361,  2003,  1996, 19107,  2094,  3076,  3550,
         2812,  4489,   102])"
3000,1,"['mean', 'studentized mean difference', 'probability', 'hypothesis', 'studentized mean', 'normal', 'distribution', 'null hypothesis', 'data', 'probability distribution']", Two samples with equal variances,seg_375,"hence, under the null hypothesis, the probability distribution of tp is the same as that of the pooled studentized mean difference. to determine its distribution, we distinguish between normal and nonnormal data.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  6516,  1010,  2104,  1996, 19701, 10744,  1010,  1996,  9723,
         4353,  1997,  1056,  2361,  2003,  1996,  2168,  2004,  2008,  1997,
         1996, 19107,  2094,  3076,  3550,  2812,  4489,  1012,  2000,  5646,
         2049,  4353,  1010,  2057, 10782,  2090,  3671,  1998,  2512, 12131,
         9067,  2951,  1012,   102])"
3001,1,['samples'], Two samples with equal variances,seg_375,normal samples,tensor(1),"tensor([0., 0., 1., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([ 101, 3671, 8168,  102])"
3002,1,"['mean', 'normal distributions', 'studentized mean', 'distributions', 'sample', 'samples', 'normal', 'distribution', 'independent']", Two samples with equal variances,seg_375,"in the same way as the studentized mean of a single normal sample has a t(n − 1) distribution (see page 349), it is also a fact that if two independent samples originate from normal distributions, i.e.,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1999,  1996,  2168,  2126,  2004,  1996,  3076,  3550,  2812,
         1997,  1037,  2309,  3671,  7099,  2038,  1037,  1056,  1006,  1050,
         1597,  1015,  1007,  4353,  1006,  2156,  3931,  4090,  2683,  1007,
         1010,  2009,  2003,  2036,  1037,  2755,  2008,  2065,  2048,  2981,
         8168, 21754,  2013,  3671, 20611,  1010,  1045,  1012,  1041,  1012,
         1010,   102])"
3003,1,"['sample', 'random', 'random sample']", Two samples with equal variances,seg_375,"x1, x2, . . . , xn random sample from n(µ1, σ2)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([ 101, 1060, 2487, 1010, 1060, 2475, 1010, 1012, 1012, 1012, 1010, 1060,
        2078, 6721, 7099, 2013, 1050, 1006, 1085, 2487, 1010, 1173, 2475, 1007,
         102])"
3004,1,"['sample', 'random', 'random sample']", Two samples with equal variances,seg_375,"y1, y2, . . . , ym random sample from n(µ2, σ2),",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([ 101, 1061, 2487, 1010, 1061, 2475, 1010, 1012, 1012, 1012, 1010, 1061,
        2213, 6721, 7099, 2013, 1050, 1006, 1085, 2475, 1010, 1173, 2475, 1007,
        1010,  102])"
3005,1,"['mean', 'test statistic', 'studentized mean difference', 'hypothesis', 'studentized mean', 'distribution', 'null hypothesis', 'statistic', 'test']", Two samples with equal variances,seg_375,"then the pooled studentized mean difference has a t(n + m − 2) distribution. hence, under the null hypothesis, the test statistic tp has a t(n + m − 2)",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2059,  1996, 19107,  2094,  3076,  3550,  2812,  4489,  2038,
         1037,  1056,  1006,  1050,  1009,  1049,  1597,  1016,  1007,  4353,
         1012,  6516,  1010,  2104,  1996, 19701, 10744,  1010,  1996,  3231,
        28093,  6553,  1056,  2361,  2038,  1037,  1056,  1006,  1050,  1009,
         1049,  1597,  1016,  1007,   102])"
3006,1,"['null hypothesis', 'hypothesis', 'test']", Two samples with equal variances,seg_375,"distribution. for this reason, a test for the null hypothesis h0 : µ1 = µ2 is called a two-sample t-test.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  4353,  1012,  2005,  2023,  3114,  1010,  1037,  3231,  2005,
         1996, 19701, 10744,  1044,  2692,  1024,  1085,  2487,  1027,  1085,
         2475,  2003,  2170,  1037,  2048,  1011,  7099,  1056,  1011,  3231,
         1012,   102])"
3007,1,"['random samples', 'normal distributions', 'variances', 'distributions', 'random', 'normal', 'samples', 'level', 'model', 'data', 'test']", Two samples with equal variances,seg_375,"suppose that in our drilling example we model our datasets as realizations of random samples of sizes n = m = 50 from two normal distributions with equal variances, and we test h0 : µ1 = µ2 against h1 : µ1 < µ2 at level 0.05. for the data we find x̄50 = 727.78, ȳ50 = 873.02, and sp = 13.62, so that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  6814,  2008,  1999,  2256, 15827,  2742,  2057,  2944,  2256,
         2951, 13462,  2015,  2004, 12393,  2015,  1997,  6721,  8168,  1997,
        10826,  1050,  1027,  1049,  1027,  2753,  2013,  2048,  3671, 20611,
         2007,  5020, 23284,  2015,  1010,  1998,  2057,  3231,  1044,  2692,
         1024,  1085,  2487,  1027,  1085,  2475,  2114,  1044,  2487,  1024,
         1085,  2487,  1026,  1085,  2475,  2012,  2504,  1014,  1012,  5709,
         1012,  2005,  1996,  2951,  2057,  2424,  1060, 12376,  1027,  5824,
         2581,  1012,  6275,  1010,  1061, 12376,  1027,  6584,  2509,  1012,
         6185,  1010,  1998, 11867,  1027,  2410,  1012,  5786,  1010,  2061,
         2008,   102])"
3008,1,"['tail', 'left critical value', 'data', 'probability', 'table', 'hypothesis', 'level', 'tail probability', 'statistical', 'null hypothesis', 'critical value']", Two samples with equal variances,seg_375,"we compare this with the left critical value −t98,0.05. this value is not in table b.2, but −1.676 = −t50,0.05 < −t98,0.05. this means that tp < −t98,0.05, so that we reject h0 : µ1 = µ2 in favor of h1 : µ1 < µ2 at level 0.05. the pvalue corresponding to tp = −10.66 is the left tail probability p(t ≤ −10.66). from table b.2 we can only see that this is smaller than 0.0005 (a statistical software package gives p(t ≤ −10.66) = 2.25 ·10−18). the data provide overwhelming evidence against the null hypothesis, so that we conclude that dry drilling is faster than wet drilling.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2057, 12826,  2023,  2007,  1996,  2187,  4187,  3643,  1597,
         2102,  2683,  2620,  1010,  1014,  1012,  5709,  1012,  2023,  3643,
         2003,  2025,  1999,  2795,  1038,  1012,  1016,  1010,  2021,  1597,
         2487,  1012,  6163,  2575,  1027,  1597,  2102, 12376,  1010,  1014,
         1012,  5709,  1026,  1597,  2102,  2683,  2620,  1010,  1014,  1012,
         5709,  1012,  2023,  2965,  2008,  1056,  2361,  1026,  1597,  2102,
         2683,  2620,  1010,  1014,  1012,  5709,  1010,  2061,  2008,  2057,
        15454,  1044,  2692,  1024,  1085,  2487,  1027,  1085,  2475,  1999,
         5684,  1997,  1044,  2487,  1024,  1085,  2487,  1026,  1085,  2475,
         2012,  2504,  1014,  1012,  5709,  1012,  1996, 26189,  2389,  5657,
         7978,  2000,  1056,  2361,  1027,  1597, 10790,  1012,  5764,  2003,
         1996,  2187,  5725,  9723,  1052,  1006,  1056,  1608,  1597, 10790,
         1012,  5764,  1007,  1012,  2013,  2795,  1038,  1012,  1016,  2057,
         2064,  2069,  2156,  2008,  2023,  2003,  3760,  2084,  1014,  1012,
         2199,  2629,  1006,  1037,  7778,  4007,  7427,  3957,  1052,  1006,
         1056,  1608,  1597, 10790,  1012,  5764,  1007,  1027,  1016,  1012,
         2423,  1087,  2184, 27944,  2620,  1007,  1012,  1996,  2951,  3073,
        10827,  3350,  2114,  1996, 19701, 10744,  1010,  2061,  2008,  2057,
        16519,  2008,  4318, 15827,  2003,  5514,  2084,  4954, 15827,  1012,
          102])"
3009,1,"['critical values', 'level', 'test']", Two samples with equal variances,seg_375,"quick exercise 28.2 suppose that in the ball bearing example of quick exercise 27.2, we test h0 : µ1 = µ2 against h1 : µ1 = µ2, where µ1 and µ2 represent the diameters of a ball bearing from the first and second production line. what are the critical values corresponding to level α = 0.01?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([ 101, 4248, 6912, 2654, 1012, 1016, 6814, 2008, 1999, 1996, 3608, 7682,
        2742, 1997, 4248, 6912, 2676, 1012, 1016, 1010, 2057, 3231, 1044, 2692,
        1024, 1085, 2487, 1027, 1085, 2475, 2114, 1044, 2487, 1024, 1085, 2487,
        1027, 1085, 2475, 1010, 2073, 1085, 2487, 1998, 1085, 2475, 5050, 1996,
        6705, 2015, 1997, 1037, 3608, 7682, 2013, 1996, 2034, 1998, 2117, 2537,
        2240, 1012, 2054, 2024, 1996, 4187, 5300, 7978, 2000, 2504, 1155, 1027,
        1014, 1012, 5890, 1029,  102])"
3010,1,['samples'], Two samples with equal variances,seg_375,nonnormal samples,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2512, 12131,  9067,  8168,   102])"
3011,1,"['mean', 'test statistic', 'hypothesis', 'normal', 'distribution', 'model', 'null hypothesis', 'statistic', 'test']", Two samples with equal variances,seg_375,"similar to the one-sample t -test, if we cannot assume normal model distributions, then we can no longer conclude that our test statistic has a t(n + m − 2) distribution under the null hypothesis. recall that under the null hypothesis, the distribution of our test statistic is the same as that of the pooled studentized mean difference (see page 417).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2714,  2000,  1996,  2028,  1011,  7099,  1056,  1011,  3231,
         1010,  2065,  2057,  3685,  7868,  3671,  2944, 20611,  1010,  2059,
         2057,  2064,  2053,  2936, 16519,  2008,  2256,  3231, 28093,  6553,
         2038,  1037,  1056,  1006,  1050,  1009,  1049,  1597,  1016,  1007,
         4353,  2104,  1996, 19701, 10744,  1012,  9131,  2008,  2104,  1996,
        19701, 10744,  1010,  1996,  4353,  1997,  2256,  3231, 28093,  6553,
         2003,  1996,  2168,  2004,  2008,  1997,  1996, 19107,  2094,  3076,
         3550,  2812,  4489,  1006,  2156,  3931, 27519,  1007,  1012,   102])"
3012,1,"['mean', 'studentized mean difference', 'simulation', 'studentized mean', 'bootstrap', 'distribution', 'empirical bootstrap']", Two samples with equal variances,seg_375,"to approximate its distribution, we use the empirical bootstrap simulation for the pooled studentized mean difference",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 1., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2000, 15796,  2049,  4353,  1010,  2057,  2224,  1996, 17537,
         6879,  6494,  2361, 12504,  2005,  1996, 19107,  2094,  3076,  3550,
         2812,  4489,   102])"
3013,1,"['expectations', 'functions', 'estimates']", Two samples with equal variances,seg_375,"given datasets x1, x2, . . . , xn and y1, y2, . . . , ym, determine their empirical distribution functions fn and gm as estimates for f and g. the expectations corresponding to fn and gm are µ∗1 = x̄n and µ∗2 = ȳm. then repeat the following two steps many times:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2445,  2951, 13462,  2015,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1998,  1061,  2487,
         1010,  1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,  2213,
         1010,  5646,  2037, 17537,  4353,  4972,  1042,  2078,  1998, 13938,
         2004, 10035,  2005,  1042,  1998,  1043,  1012,  1996, 10908,  7978,
         2000,  1042,  2078,  1998, 13938,  2024,  1085, 30125,  2487,  1027,
         1060,  2078,  1998,  1085, 30125,  2475,  1027,  1061,  2213,  1012,
         2059,  9377,  1996,  2206,  2048,  4084,  2116,  2335,  1024,   102])"
3014,1,"['dataset', 'bootstrap']", Two samples with equal variances,seg_375,"1. generate a bootstrap dataset x∗1, x∗2, . . . , x∗n from fn and a bootstrap",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1015,  1012,  9699,  1037,  6879,  6494,  2361,  2951, 13462,
         1060, 30125,  2487,  1010,  1060, 30125,  2475,  1010,  1012,  1012,
         1012,  1010,  1060, 30125,  2078,  2013,  1042,  2078,  1998,  1037,
         6879,  6494,  2361,   102])"
3015,1,"['mean', 'studentized mean difference', 'studentized mean', 'bootstrap', 'data']", Two samples with equal variances,seg_375,2. compute the pooled studentized mean difference for the bootstrap data:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0.,
        0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1016,  1012, 24134,  1996, 19107,  2094,  3076,  3550,  2812,
         4489,  2005,  1996,  6879,  6494,  2361,  2951,  1024,   102])"
3016,1,"['sample', 'bootstrap', 'sample means']", Two samples with equal variances,seg_375,"where x̄∗n and ȳm ∗ are the sample means of the bootstrap datasets, and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2073,  1060, 30125,  2078,  1998,  1061,  2213,  1598,  2024,
         1996,  7099,  2965,  1997,  1996,  6879,  6494,  2361,  2951, 13462,
         2015,  1010,  1998,   102])"
3017,1,"['sample variances', 'variances', 'sample', 'bootstrap']", Two samples with equal variances,seg_375,with (sx∗ )2 and (sy∗ )2 the sample variances of the bootstrap datasets.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2007,  1006,  1055,  2595, 30125,  1007,  1016,  1998,  1006,
        25353, 30125,  1007,  1016,  1996,  7099, 23284,  2015,  1997,  1996,
         6879,  6494,  2361,  2951, 13462,  2015,  1012,   102])"
3018,1,"['expectations', 'functions', 'distributions', 'bootstrap', 'empirical distribution functions', 'distribution', 'model']", Two samples with equal variances,seg_375,"the reason that in each iteration we subtract x̄n − ȳm is that µ1 − µ2 is the difference of the expectations of the two model distributions. therefore, according to the bootstrap principle we should replace this by the difference x̄n − ȳm of the expectations corresponding to the two empirical distribution functions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  1996,  3114,  2008,  1999,  2169, 27758,  2057,  4942,  6494,
         6593,  1060,  2078,  1597,  1061,  2213,  2003,  2008,  1085,  2487,
         1597,  1085,  2475,  2003,  1996,  4489,  1997,  1996, 10908,  1997,
         1996,  2048,  2944, 20611,  1012,  3568,  1010,  2429,  2000,  1996,
         6879,  6494,  2361,  6958,  2057,  2323,  5672,  2023,  2011,  1996,
         4489,  1060,  2078,  1597,  1061,  2213,  1997,  1996, 10908,  7978,
         2000,  1996,  2048, 17537,  4353,  4972,  1012,   102])"
3019,1,"['left critical value', 'function', 'simulation', 'distribution function', 'approximation', 'histogram', 'hypothesis', 'level', 'empirical distribution function', 'bootstrap', 'distribution', 'null hypothesis', 'critical value', 'data', 'test']", Two samples with equal variances,seg_375,"we carried out this bootstrap simulation for the drill times. the result of this simulation can be seen in figure 28.2, where a histogram and the empirical distribution function are displayed for one thousand bootstrap values of t∗p. suppose that we test h0 : µ1 = µ2 against h1 : µ1 < µ2 at level 0.05. the bootstrap approximation for the left critical value is c∗l = −1.659. the value of tp = −10.66, computed from the data, is much smaller. hence, also on the basis of the bootstrap simulation we reject the null hypothesis and conclude that the dry drill time is shorter than the wet drill time.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007,  5020, 23284,  2015])","tensor([  101,  2057,  3344,  2041,  2023,  6879,  6494,  2361, 12504,  2005,
         1996, 12913,  2335,  1012,  1996,  2765,  1997,  2023, 12504,  2064,
         2022,  2464,  1999,  3275,  2654,  1012,  1016,  1010,  2073,  1037,
         2010,  3406, 13113,  1998,  1996, 17537,  4353,  3853,  2024,  6913,
         2005,  2028,  4595,  6879,  6494,  2361,  5300,  1997,  1056, 30125,
         2361,  1012,  6814,  2008,  2057,  3231,  1044,  2692,  1024,  1085,
         2487,  1027,  1085,  2475,  2114,  1044,  2487,  1024,  1085,  2487,
         1026,  1085,  2475,  2012,  2504,  1014,  1012,  5709,  1012,  1996,
         6879,  6494,  2361, 20167,  2005,  1996,  2187,  4187,  3643,  2003,
         1039, 30125,  2140,  1027,  1597,  2487,  1012,  3515,  2683,  1012,
         1996,  3643,  1997,  1056,  2361,  1027,  1597, 10790,  1012,  5764,
         1010, 24806,  2013,  1996,  2951,  1010,  2003,  2172,  3760,  1012,
         6516,  1010,  2036,  2006,  1996,  3978,  1997,  1996,  6879,  6494,
         2361, 12504,  2057, 15454,  1996, 19701, 10744,  1998, 16519,  2008,
         1996,  4318, 12913,  2051,  2003,  7820,  2084,  1996,  4954, 12913,
         2051,  1012,   102])"
3020,1,['experiments'], Two samples with unequal variances,seg_377,"during an investigation about weather modification, a series of experiments was conducted in southern florida from 1968 to 1972. these experiments were designed to investigate the use of massive silver-iodide seeding. it was",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2076,  2019,  4812,  2055,  4633, 14080,  1010,  1037,  2186,
         1997,  7885,  2001,  4146,  1999,  2670,  3516,  2013,  3380,  2000,
         3285,  1012,  2122,  7885,  2020,  2881,  2000,  8556,  1996,  2224,
         1997,  5294,  3165,  1011, 22834,  4305,  3207,  6534,  2075,  1012,
         2009,  2001,   102])"
3021,1,"['table', 'random', 'experiments', 'test']", Two samples with unequal variances,seg_377,"hypothesized that under specified conditions, this leads to invigorated cumulus growth and prolonged lifetimes, thereby causing increased precipitation. in these experiments, 52 isolated cumulus clouds were observed, of which 26 were selected at random and injected with silver-iodide smoke. rainfall amounts (in acre-feet) were recorded for all clouds. they are listed in table 28.1. to investigate whether seeding leads to increased rainfall, we test h0 : µ1 = µ2 against h1 : µ1 < µ2, where µ1 and µ2 represent the rainfall for unseeded and seeded clouds.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  1044, 22571, 14573,  2229,  3550,  2008,  2104,  9675,  3785,
         1010,  2023,  5260,  2000,  1999,  5737, 20255,  4383, 13988, 11627,
         3930,  1998, 15330,  6480,  2015,  1010,  8558,  4786,  3445, 13511,
         1012,  1999,  2122,  7885,  1010,  4720,  7275, 13988, 11627,  8044,
         2020,  5159,  1010,  1997,  2029,  2656,  2020,  3479,  2012,  6721,
         1998, 19737,  2007,  3165,  1011, 22834,  4305,  3207,  5610,  1012,
        10101,  8310,  1006,  1999,  7456,  1011,  2519,  1007,  2020,  2680,
         2005,  2035,  8044,  1012,  2027,  2024,  3205,  1999,  2795,  2654,
         1012,  1015,  1012,  2000,  8556,  3251,  6534,  2075,  5260,  2000,
         3445, 10101,  1010,  2057,  3231,  1044,  2692,  1024,  1085,  2487,
         1027,  1085,  2475,  2114,  1044,  2487,  1024,  1085,  2487,  1026,
         1085,  2475,  1010,  2073,  1085,  2487,  1998,  1085,  2475,  5050,
         1996, 10101,  2005,  4895, 19763,  5732,  1998, 13916,  8044,  1012,
          102])"
3022,1,"['unbiased estimator', 'sample variances', 'standardized', 'statistic', 'test', 'test statistic', 'boxplots', 'unbiased', 'variances', 'estimator', 'sample']", Two samples with unequal variances,seg_377,"in figure 28.3 the boxplots of both datasets are displayed. from this we see that the assumption of equal variances may not be realistic. indeed, this is confirmed by the values s2x = 77 521 and s2y = 423 524 of the sample variances of the datasets. this means that we need to test h0 : µ1 = µ2 without the assumption of equal variances. as before, the test statistic will be a standardized version of x̄n − ȳm, but sp2 is no longer an unbiased estimator",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  1999,  3275,  2654,  1012,  1017,  1996,  3482, 24759, 12868,
         1997,  2119,  2951, 13462,  2015,  2024,  6913,  1012,  2013,  2023,
         2057,  2156,  2008,  1996, 11213,  1997,  5020, 23284,  2015,  2089,
         2025,  2022, 12689,  1012,  5262,  1010,  2023,  2003,  4484,  2011,
         1996,  5300,  1055,  2475,  2595,  1027,  6255, 26963,  1998,  1055,
         2475,  2100,  1027,  4413,  2509,  4720,  2549,  1997,  1996,  7099,
        23284,  2015,  1997,  1996,  2951, 13462,  2015,  1012,  2023,  2965,
         2008,  2057,  2342,  2000,  3231,  1044,  2692,  1024,  1085,  2487,
         1027,  1085,  2475,  2302,  1996, 11213,  1997,  5020, 23284,  2015,
         1012,  2004,  2077,  1010,  1996,  3231, 28093,  6553,  2097,  2022,
         1037, 16367,  2544,  1997,  1060,  2078,  1597,  1061,  2213,  1010,
         2021, 11867,  2475,  2003,  2053,  2936,  2019,  4895, 11607,  6924,
         9765,  9581,  4263,   102])"
3023,1,['estimate'], Two samples with unequal variances,seg_377,"however, if we estimate σx",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2174,  1010,  2065,  2057, 10197,  1173,  2595,   102])"
3024,1,"['nonpooled', 'nonpooled variance', 'variance']", Two samples with unequal variances,seg_377,"2 and σy 2 by sx 2 and sy 2 , then the nonpooled variance",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  1016,  1998,  1173,  2100,  1016,  2011,  1055,  2595,  1016,
         1998, 25353,  1016,  1010,  2059,  1996,  2512, 16869,  2098, 23284,
          102])"
3025,1,"['test statistic', 'unbiased', 'estimator', 'unbiased estimator', 'statistic', 'test']", Two samples with unequal variances,seg_377,is an unbiased estimator for var(x̄n − ȳm). this leads to test statistic,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
        13075,  1006,  1060,  2078,  1597,  1061,  2213,  1007,  1012,  2023,
         5260,  2000,  3231, 28093,  6553,   102])"
3026,1,"['deviation', 'hypothesis', 'estimator', 'standard deviation', 'standard', 'null hypothesis']", Two samples with unequal variances,seg_377,"again, we compare the estimator x̄n − ȳm with zero and standardize by dividing by an estimator for the standard deviation of x̄n − ȳm. values of td close to zero are in favor of the null hypothesis h0 : µ1 = µ2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2153,  1010,  2057, 12826,  1996,  9765,  9581,  4263,  1060,
         2078,  1597,  1061,  2213,  2007,  5717,  1998,  3115,  4697,  2011,
        16023,  2011,  2019,  9765,  9581,  4263,  2005,  1996,  3115, 24353,
         1997,  1060,  2078,  1597,  1061,  2213,  1012,  5300,  1997, 14595,
         2485,  2000,  5717,  2024,  1999,  5684,  1997,  1996, 19701, 10744,
         1044,  2692,  1024,  1085,  2487,  1027,  1085,  2475,  1012,   102])"
3027,0,[], Two samples with unequal variances,seg_377,quick exercise 28.3 consider the ball bearing example from quick exercise 27.2. compute the value of td for this example.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  4248,  6912,  2654,  1012,  1017,  5136,  1996,  3608,  7682,
         2742,  2013,  4248,  6912,  2676,  1012,  1016,  1012, 24134,  1996,
         3643,  1997, 14595,  2005,  2023,  2742,  1012,   102])"
3028,1,"['test statistic', 'hypothesis', 'null hypothesis', 'statistic', 'test']", Two samples with unequal variances,seg_377,"under the null hypothesis h0 : µ1 = µ2, the test statistic",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2104,  1996, 19701, 10744,  1044,  2692,  1024,  1085,  2487,
         1027,  1085,  2475,  1010,  1996,  3231, 28093,  6553,   102])"
3029,1,"['mean', 'nonpooled', 'studentized mean difference', 'studentized mean']", Two samples with unequal variances,seg_377,is equal to the nonpooled studentized mean difference,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2003,  5020,  2000,  1996,  2512, 16869,  2098,  3076,  3550,
         2812,  4489,   102])"
3030,1,"['mean', 'studentized mean difference', 'hypothesis', 'studentized mean', 'samples', 'normal', 'distribution', 'null hypothesis', 'nonpooled', 'case']", Two samples with unequal variances,seg_377,"therefore, the distribution of td under the null hypothesis is the same as that of the nonpooled studentized mean difference. unfortunately, its distribution is not a t-distribution, not even in the case of normal samples. this means that we have to approximate this distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  3568,  1010,  1996,  4353,  1997, 14595,  2104,  1996, 19701,
        10744,  2003,  1996,  2168,  2004,  2008,  1997,  1996,  2512, 16869,
         2098,  3076,  3550,  2812,  4489,  1012,  6854,  1010,  2049,  4353,
         2003,  2025,  1037,  1056,  1011,  4353,  1010,  2025,  2130,  1999,
         1996,  2553,  1997,  3671,  8168,  1012,  2023,  2965,  2008,  2057,
         2031,  2000, 15796,  2023,  4353,  1012,   102])"
3031,1,"['mean', 'studentized mean difference', 'simulation', 'studentized mean', 'bootstrap', 'empirical bootstrap', 'nonpooled']", Two samples with unequal variances,seg_377,"similar to the previous section, we use the empirical bootstrap simulation for the nonpooled studentized mean difference. the only difference with the procedure outlined in the previous section is that now in each iteration we compute the nonpooled studentized mean difference for the bootstrap datasets:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1.,
        1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2714,  2000,  1996,  3025,  2930,  1010,  2057,  2224,  1996,
        17537,  6879,  6494,  2361, 12504,  2005,  1996,  2512, 16869,  2098,
         3076,  3550,  2812,  4489,  1012,  1996,  2069,  4489,  2007,  1996,
         7709, 14801,  1999,  1996,  3025,  2930,  2003,  2008,  2085,  1999,
         2169, 27758,  2057, 24134,  1996,  2512, 16869,  2098,  3076,  3550,
         2812,  4489,  2005,  1996,  6879,  6494,  2361,  2951, 13462,  2015,
         1024,   102])"
3032,1,"['sample', 'bootstrap', 'sample means']", Two samples with unequal variances,seg_377,"∗ are the sample means of the bootstrap datasets, and",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  1598,  2024,  1996,  7099,  2965,  1997,  1996,  6879,  6494,
         2361,  2951, 13462,  2015,  1010,  1998,   102])"
3033,1,"['sample variances', 'variances', 'sample', 'bootstrap']", Two samples with unequal variances,seg_377,with (sx∗ )2 and (sy∗ )2 the sample variances of the bootstrap datasets.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2007,  1006,  1055,  2595, 30125,  1007,  1016,  1998,  1006,
        25353, 30125,  1007,  1016,  1996,  7099, 23284,  2015,  1997,  1996,
         6879,  6494,  2361,  2951, 13462,  2015,  1012,   102])"
3034,1,"['left critical value', 'function', 'simulation', 'approximation', 'histogram', 'level', 'bootstrap', 'distribution', 'distribution function', 'critical value', 'data', 'empirical distribution function']", Two samples with unequal variances,seg_377,"we carried out this bootstrap simulation for the cloud seeding data. the result of this simulation can be seen in figure 28.4, where a histogram and the empirical distribution function are displayed for one thousand values t∗d. the bootstrap approximation for the left critical value corresponding to level 0.05 is c∗l = −1.405. for the data we find the value",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2057,  3344,  2041,  2023,  6879,  6494,  2361, 12504,  2005,
         1996,  6112,  6534,  2075,  2951,  1012,  1996,  2765,  1997,  2023,
        12504,  2064,  2022,  2464,  1999,  3275,  2654,  1012,  1018,  1010,
         2073,  1037,  2010,  3406, 13113,  1998,  1996, 17537,  4353,  3853,
         2024,  6913,  2005,  2028,  4595,  5300,  1056, 30125,  2094,  1012,
         1996,  6879,  6494,  2361, 20167,  2005,  1996,  2187,  4187,  3643,
         7978,  2000,  2504,  1014,  1012,  5709,  2003,  1039, 30125,  2140,
         1027,  1597,  2487,  1012, 23988,  1012,  2005,  1996,  2951,  2057,
         2424,  1996,  3643,   102])"
3035,1,"['null hypothesis', 'hypothesis']", Two samples with unequal variances,seg_377,"this is smaller than c∗l , so we reject the null hypothesis. although the evidence against the null hypothesis is not overwhelming, there is some indication that seeding clouds leads to more rainfall.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2048,  8168,  2007, 16655, 26426, 23284,  2015])","tensor([  101,  2023,  2003,  3760,  2084,  1039, 30125,  2140,  1010,  2061,
         2057, 15454,  1996, 19701, 10744,  1012,  2348,  1996,  3350,  2114,
         1996, 19701, 10744,  2003,  2025, 10827,  1010,  2045,  2003,  2070,
        12407,  2008,  6534,  2075,  8044,  5260,  2000,  2062, 10101,  1012,
          102])"
3036,1,"['mean', 'studentized mean difference', 'studentized mean', 'distributions', 'limit', 'central limit theorem']", Large samples,seg_379,"variants of the central limit theorem state that as n and m both tend to infinity, the distributions of the pooled studentized mean difference",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([2312, 8168])","tensor([  101, 10176,  1997,  1996,  2430,  5787,  9872,  2110,  2008,  2004,
         1050,  1998,  1049,  2119,  7166,  2000, 15579,  1010,  1996, 20611,
         1997,  1996, 19107,  2094,  3076,  3550,  2812,  4489,   102])"
3037,1,"['mean', 'nonpooled', 'studentized mean difference', 'studentized mean']", Large samples,seg_379,and the nonpooled studentized mean difference,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0.])","tensor([2312, 8168])","tensor([  101,  1998,  1996,  2512, 16869,  2098,  3076,  3550,  2812,  4489,
          102])"
3038,1,"['normal distribution', 'standard normal distribution', 'standard normal', 'hypothesis', 'normal', 'standard', 'statistics', 'distribution', 'null hypothesis', 'test statistics', 'test']", Large samples,seg_379,both approach the standard normal distribution. this fact can be used to approximate the distribution of the test statistics tp and td under the null hypothesis by a standard normal distribution.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([2312, 8168])","tensor([  101,  2119,  3921,  1996,  3115,  3671,  4353,  1012,  2023,  2755,
         2064,  2022,  2109,  2000, 15796,  1996,  4353,  1997,  1996,  3231,
         6747,  1056,  2361,  1998, 14595,  2104,  1996, 19701, 10744,  2011,
         1037,  3115,  3671,  4353,  1012,   102])"
3039,1,"['table', 'average', 'data', 'test']", Large samples,seg_379,"we illustrate this by means of the following example. to investigate whether a restricted diet promotes longevity, two groups of randomly selected rats were put on the different diets. one group of n = 106 rats was put on a restricted diet, the other group of m = 89 rats on an ad libitum diet (i.e., unrestricted eating). the data in table 28.2 represent the remaining lifetime in days of two groups of rats after they were put on the different diets. the average lifetimes are x̄n = 968.75 and ȳm = 684.01 days. to investigate whether a restricted diet promotes longevity, we test h0 : µ1 = µ2 against h1 : µ1 > µ2, where µ1 and µ2 represent the lifetime of a rat on a restricted diet and on an ad libitum diet, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2312, 8168])","tensor([  101,  2057, 19141,  2023,  2011,  2965,  1997,  1996,  2206,  2742,
         1012,  2000,  8556,  3251,  1037,  7775,  8738, 14067, 26906,  1010,
         2048,  2967,  1997, 18154,  3479, 11432,  2020,  2404,  2006,  1996,
         2367,  8738,  2015,  1012,  2028,  2177,  1997,  1050,  1027, 10114,
        11432,  2001,  2404,  2006,  1037,  7775,  8738,  1010,  1996,  2060,
         2177,  1997,  1049,  1027,  6486, 11432,  2006,  2019,  4748,  5622,
        16313,  2819,  8738,  1006,  1045,  1012,  1041,  1012,  1010, 16591,
        20623,  5983,  1007,  1012,  1996,  2951,  1999,  2795,  2654,  1012,
         1016,  5050,  1996,  3588,  6480,  1999,  2420,  1997,  2048,  2967,
         1997, 11432,  2044,  2027,  2020,  2404,  2006,  1996,  2367,  8738,
         2015,  1012,  1996,  2779,  6480,  2015,  2024,  1060,  2078,  1027,
         5986,  2620,  1012,  4293,  1998,  1061,  2213,  1027,  6273,  2549,
         1012,  5890,  2420,  1012,  2000,  8556,  3251,  1037,  7775,  8738,
        14067, 26906,  1010,  2057,  3231,  1044,  2692,  1024,  1085,  2487,
         1027,  1085,  2475,  2114,  1044,  2487,  1024,  1085,  2487,  1028,
         1085,  2475,  1010,  2073,  1085,  2487,  1998,  1085,  2475,  5050,
         1996,  6480,  1997,  1037,  9350,  2006,  1037,  7775,  8738,  1998,
         2006,  2019,  4748,  5622, 16313,  2819,  8738,  1010,  4414,  1012,
          102])"
3040,1,['variances'], Large samples,seg_379,"if we may assume equal variances, we compute",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2312, 8168])","tensor([  101,  2065,  2057,  2089,  7868,  5020, 23284,  2015,  1010,  2057,
        24134,   102])"
3041,1,"['critical value', 'right critical value', 'level']", Large samples,seg_379,"this value is larger than the right critical value z0.0005 = 3.291, which means that we would reject h0 : µ1 = µ2 in favor of h1 : µ1 > µ2 at level α = 0.0005.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2312, 8168])","tensor([  101,  2023,  3643,  2003,  3469,  2084,  1996,  2157,  4187,  3643,
         1062,  2692,  1012,  2199,  2629,  1027,  1017,  1012, 27173,  1010,
         2029,  2965,  2008,  2057,  2052, 15454,  1044,  2692,  1024,  1085,
         2487,  1027,  1085,  2475,  1999,  5684,  1997,  1044,  2487,  1024,
         1085,  2487,  1028,  1085,  2475,  2012,  2504,  1155,  1027,  1014,
         1012,  2199,  2629,  1012,   102])"
3042,1,"['tail', 'table', 'probability', 'tail probability', 'distribution', 'statistical', 'right tail probability']", Large samples,seg_379,"the p-value is the right tail probability p(tp ≥ 8.66), which we approximate by p(z ≥ 8.66), where z has an n(0, 1) distribution. from table b.1 we see that this probability is smaller than p(z ≥ 3.49) = 0.0002. by means of a statistical package we find p(z ≥ 8.66) = 2.4 · 10−16.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2312, 8168])","tensor([  101,  1996,  1052,  1011,  3643,  2003,  1996,  2157,  5725,  9723,
         1052,  1006,  1056,  2361,  1609,  1022,  1012,  5764,  1007,  1010,
         2029,  2057, 15796,  2011,  1052,  1006,  1062,  1609,  1022,  1012,
         5764,  1007,  1010,  2073,  1062,  2038,  2019,  1050,  1006,  1014,
         1010,  1015,  1007,  4353,  1012,  2013,  2795,  1038,  1012,  1015,
         2057,  2156,  2008,  2023,  9723,  2003,  3760,  2084,  1052,  1006,
         1062,  1609,  1017,  1012,  4749,  1007,  1027,  1014,  1012,  2199,
         2475,  1012,  2011,  2965,  1997,  1037,  7778,  7427,  2057,  2424,
         1052,  1006,  1062,  1609,  1022,  1012,  5764,  1007,  1027,  1016,
         1012,  1018,  1087,  2184, 27944,  2575,  1012,   102])"
3043,1,"['variances', 'test']", Large samples,seg_379,"if we repeat the test without the assumption of equal variances, we compute",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2312, 8168])","tensor([  101,  2065,  2057,  9377,  1996,  3231,  2302,  1996, 11213,  1997,
         5020, 23284,  2015,  1010,  2057, 24134,   102])"
3044,1,"['data', 'hypothesis', 'statistical', 'null hypothesis', 'case']", Large samples,seg_379,"which also leads to rejection of the null hypothesis. in this case, the p-value p(td ≥ 9.16) ≈ p(z ≥ 9.16) is even smaller since 9.16 > 8.66 (a statistical package gives p(z ≥ 9.16) = 2.6 · 10−18). the data provide overwhelming evidence against the null hypothesis, and we conclude that a restricted diet promotes longevity.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2312, 8168])","tensor([  101,  2029,  2036,  5260,  2000, 13893,  1997,  1996, 19701, 10744,
         1012,  1999,  2023,  2553,  1010,  1996,  1052,  1011,  3643,  1052,
         1006, 14595,  1609,  1023,  1012,  2385,  1007,  1606,  1052,  1006,
         1062,  1609,  1023,  1012,  2385,  1007,  2003,  2130,  3760,  2144,
         1023,  1012,  2385,  1028,  1022,  1012,  5764,  1006,  1037,  7778,
         7427,  3957,  1052,  1006,  1062,  1609,  1023,  1012,  2385,  1007,
         1027,  1016,  1012,  1020,  1087,  2184, 27944,  2620,  1007,  1012,
         1996,  2951,  3073, 10827,  3350,  2114,  1996, 19701, 10744,  1010,
         1998,  2057, 16519,  2008,  1037,  7775,  8738, 14067, 26906,  1012,
          102])"
3045,1,['boxplots'], Solutions to the quick exercises,seg_381,"28.1 just by looking at the boxplots, the authors believe that the assumption σx",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2654,  1012,  1015,  2074,  2011,  2559,  2012,  1996,  3482,
        24759, 12868,  1010,  1996,  6048,  2903,  2008,  1996, 11213,  1173,
         2595,   102])"
3046,1,"['vary', 'dataset', 'case', 'sample variances', 'boxplots', 'variances', 'sample', 'normal', 'standard', 'samples', 'test']", Solutions to the quick exercises,seg_381,"2 is reasonable. the lengths of the boxplots and their iqrs are almost the same. however, the boxplots do not reveal how the elements of the dataset vary around the center. one way of quantifying our belief would be to compare the sample variances of the datasets. one possibility is to compare the ratio of both sample variances; a ratio close to one would support our belief of equal variances (in case of normal samples, this is a standard test called the f -test).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  1016,  2003,  9608,  1012,  1996, 10742,  1997,  1996,  3482,
        24759, 12868,  1998,  2037, 26264,  2869,  2024,  2471,  1996,  2168,
         1012,  2174,  1010,  1996,  3482, 24759, 12868,  2079,  2025,  7487,
         2129,  1996,  3787,  1997,  1996,  2951, 13462,  8137,  2105,  1996,
         2415,  1012,  2028,  2126,  1997, 24110, 27351,  2075,  2256,  6772,
         2052,  2022,  2000, 12826,  1996,  7099, 23284,  2015,  1997,  1996,
         2951, 13462,  2015,  1012,  2028,  6061,  2003,  2000, 12826,  1996,
         6463,  1997,  2119,  7099, 23284,  2015,  1025,  1037,  6463,  2485,
         2000,  2028,  2052,  2490,  2256,  6772,  1997,  5020, 23284,  2015,
         1006,  1999,  2553,  1997,  3671,  8168,  1010,  2023,  2003,  1037,
         3115,  3231,  2170,  1996,  1042,  1011,  3231,  1007,  1012,   102])"
3047,1,"['right critical value', 'left critical value', 'case', 'critical value']", Solutions to the quick exercises,seg_381,"28.2 in this case we have a right and left critical value. from quick exercise 27.2 we know that n = m = 10, so that the right critical value is t18,0.005 = 2.878 and the left critical value is −t18,0.005 = −2.878.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7300,  2000,  1996,  4248, 11110])","tensor([  101,  2654,  1012,  1016,  1999,  2023,  2553,  2057,  2031,  1037,
         2157,  1998,  2187,  4187,  3643,  1012,  2013,  4248,  6912,  2676,
         1012,  1016,  2057,  2113,  2008,  1050,  1027,  1049,  1027,  2184,
         1010,  2061,  2008,  1996,  2157,  4187,  3643,  2003,  1056, 15136,
         1010,  1014,  1012,  4002,  2629,  1027,  1016,  1012,  6584,  2620,
         1998,  1996,  2187,  4187,  3643,  2003,  1597,  2102, 15136,  1010,
         1014,  1012,  4002,  2629,  1027,  1597,  2475,  1012,  6584,  2620,
         1012,   102])"
3048,1,"['mean', 'range', 'variance', 'table', 'sample', 'sample variance', 'data', 'sample mean']", Exercises,seg_383,"28.1 the data in table 28.3 represent salaries (in pounds sterling) in 72 randomly selected advertisements in the the guardian (april 6, 1992). when a range was given in the advertisement, the midpoint of the range is reproduced in the table. the data are salaries corresponding to two kinds of occupations (n = m = 72): (1) creative, media, and marketing and (2) education. the sample mean and sample variance of the two datasets are, respectively:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2654,  1012,  1015,  1996,  2951,  1999,  2795,  2654,  1012,
         1017,  5050, 20566,  1006,  1999,  7038, 10933,  1007,  1999,  5824,
        18154,  3479, 14389,  1999,  1996,  1996,  6697,  1006,  2258,  1020,
         1010,  2826,  1007,  1012,  2043,  1037,  2846,  2001,  2445,  1999,
         1996, 15147,  1010,  1996,  3054,  8400,  1997,  1996,  2846,  2003,
        22296,  1999,  1996,  2795,  1012,  1996,  2951,  2024, 20566,  7978,
         2000,  2048,  7957,  1997, 23374,  1006,  1050,  1027,  1049,  1027,
         5824,  1007,  1024,  1006,  1015,  1007,  5541,  1010,  2865,  1010,
         1998,  5821,  1998,  1006,  1016,  1007,  2495,  1012,  1996,  7099,
         2812,  1998,  7099, 23284,  1997,  1996,  2048,  2951, 13462,  2015,
         2024,  1010,  4414,  1024,   102])"
3049,1,"['expectations', 'normal distributions', 'distributions', 'normal']", Exercises,seg_383,"suppose that the datasets are modeled as realizations of normal distributions with expectations µ1 and µ2, which represent the salaries for occupations (1) and (2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  6814,  2008,  1996,  2951, 13462,  2015,  2024, 14440,  2004,
        12393,  2015,  1997,  3671, 20611,  2007, 10908,  1085,  2487,  1998,
         1085,  2475,  1010,  2029,  5050,  1996, 20566,  2005, 23374,  1006,
         1015,  1007,  1998,  1006,  1016,  1007,  1012,   102])"
3050,1,"['null hypothesis', 'hypothesis', 'test']", Exercises,seg_383,a. test the null hypothesis that the salary for both occupations is the same,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1012,  3231,  1996, 19701, 10744,  2008,  1996, 10300,
         2005,  2119, 23374,  2003,  1996,  2168,   102])"
3051,1,"['null and alternative hypotheses', 'hypotheses', 'test statistic', 'alternative hypotheses', 'variances', 'level', 'statistic', 'test']", Exercises,seg_383,"at level α = 0.05 under the assumption of equal variances. formulate the proper null and alternative hypotheses, compute the value of the test statistic, and report your conclusion.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2012,  2504,  1155,  1027,  1014,  1012,  5709,  2104,  1996,
        11213,  1997,  5020, 23284,  2015,  1012,  5675,  2618,  1996,  5372,
        19701,  1998,  4522,  1044, 22571, 14573, 23072,  1010, 24134,  1996,
         3643,  1997,  1996,  3231, 28093,  6553,  1010,  1998,  3189,  2115,
         7091,  1012,   102])"
3052,1,['variances'], Exercises,seg_383,b. do the same without the assumption of equal variances.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2079,  1996,  2168,  2302,  1996, 11213,  1997,
         5020, 23284,  2015,  1012,   102])"
3053,1,"['empirical bootstrap', 'bootstrap', 'simulation']", Exercises,seg_383,"c. as a comparison, one carries out an empirical bootstrap simulation for the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2004,  1037,  7831,  1010,  2028,  7883,  2041,
         2019, 17537,  6879,  6494,  2361, 12504,  2005,  1996,   102])"
3054,1,"['mean', 'critical values', 'studentized mean difference', 'studentized mean', 'results', 'bootstrap']", Exercises,seg_383,nonpooled studentized mean difference. the bootstrap approximations for the critical values are c∗l = −2.004 and c∗u = 2.133. report your conclusion about the salaries on the basis of the bootstrap results.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  2512, 16869,  2098,  3076,  3550,  2812,  4489,  1012,  1996,
         6879,  6494,  2361, 20167,  2015,  2005,  1996,  4187,  5300,  2024,
         1039, 30125,  2140,  1027,  1597,  2475,  1012,  4002,  2549,  1998,
         1039, 30125,  2226,  1027,  1016,  1012, 14506,  1012,  3189,  2115,
         7091,  2055,  1996, 20566,  2006,  1996,  3978,  1997,  1996,  6879,
         6494,  2361,  3463,  1012,   102])"
3055,1,"['data', 'table']", Exercises,seg_383,"28.2 the data in table 28.4 represent the duration of pregnancy for 1669 women who gave birth in a maternity hospital in newcastle-upon-tyne, england, in 1954.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2654,  1012,  1016,  1996,  2951,  1999,  2795,  2654,  1012,
         1018,  5050,  1996,  9367,  1997, 10032,  2005, 18610,  2683,  2308,
         2040,  2435,  4182,  1999,  1037, 23676,  2902,  1999,  8142,  1011,
         2588,  1011, 17742,  1010,  2563,  1010,  1999,  4051,  1012,   102])"
3056,1,"['sample variances', 'variances', 'sample', 'sample means']", Exercises,seg_383,"the durations are measured in complete weeks from the beginning of the last menstrual period until delivery. the pregnancies are divided into those where an admission was booked for medical reasons, those booked for social reasons (such as poor housing), and unbooked emergency admissions. for the three groups the sample means and sample variances are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1996,  9367,  2015,  2024,  7594,  1999,  3143,  3134,  2013,
         1996,  2927,  1997,  1996,  2197,  2273,  3367,  6820,  2389,  2558,
         2127,  6959,  1012,  1996,  3653, 28207,  9243,  2024,  4055,  2046,
         2216,  2073,  2019,  9634,  2001, 17414,  2005,  2966,  4436,  1010,
         2216, 17414,  2005,  2591,  4436,  1006,  2107,  2004,  3532,  3847,
         1007,  1010,  1998,  4895,  8654,  2098,  5057, 20247,  1012,  2005,
         1996,  2093,  2967,  1996,  7099,  2965,  1998,  7099, 23284,  2015,
         2024,   102])"
3057,1,['observations'], Exercises,seg_383,"medical: 775 observations with x̄ = 39.08 and s2 = 7.77, emergency: 261 observations with x̄ = 37.59 and s2 = 25.33, social: 633 observations with x̄ = 39.60 and s2 = 4.95.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2966,  1024,  6255,  2629,  9420,  2007,  1060,  1027,  4464,
         1012,  5511,  1998,  1055,  2475,  1027,  1021,  1012,  6255,  1010,
         5057,  1024, 24441,  9420,  2007,  1060,  1027,  4261,  1012,  5354,
         1998,  1055,  2475,  1027,  2423,  1012,  3943,  1010,  2591,  1024,
         6191,  2509,  9420,  2007,  1060,  1027,  4464,  1012,  3438,  1998,
         1055,  2475,  1027,  1018,  1012,  5345,  1012,   102])"
3058,1,"['expectations', 'null hypothesis', 'normal', 'samples', 'statistic', 'test', 'test statistic', 'variances', 'hypothesis', 'combination', 'random samples', 'normal distributions', 'distributions', 'random']", Exercises,seg_383,"suppose we view the datasets as realizations of random samples from normal distributions with expectations µ1, µ2, and µ3 and variances σ12, σ22, and σ32, where µi represents the duration of pregnancy for the women from the ith group. we want to investigate whether the duration differs for the different groups. for each combination of two groups test the null hypothesis of equality of µi. compute the values of the test statistic and report your conclusions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  6814,  2057,  3193,  1996,  2951, 13462,  2015,  2004, 12393,
         2015,  1997,  6721,  8168,  2013,  3671, 20611,  2007, 10908,  1085,
         2487,  1010,  1085,  2475,  1010,  1998,  1085,  2509,  1998, 23284,
         2015,  1173, 12521,  1010,  1173, 19317,  1010,  1998,  1173, 16703,
         1010,  2073,  1085,  2072,  5836,  1996,  9367,  1997, 10032,  2005,
         1996,  2308,  2013,  1996,  2009,  2232,  2177,  1012,  2057,  2215,
         2000,  8556,  3251,  1996,  9367, 12980,  2005,  1996,  2367,  2967,
         1012,  2005,  2169,  5257,  1997,  2048,  2967,  3231,  1996, 19701,
        10744,  1997,  9945,  1997,  1085,  2072,  1012, 24134,  1996,  5300,
         1997,  1996,  3231, 28093,  6553,  1998,  3189,  2115, 15306,  1012,
          102])"
3059,1,"['table', 'sample', 'results', 'sample means']", Exercises,seg_383,"28.3 in a seven-day study on the effect of ozone, a group of 23 rats was kept in an ozone-free environment and a group of 22 rats in an ozone-rich environment. from each member in both groups the increase in weight (in grams) was recorded. the results are given in table 28.5. the interest is in whether ozone affects the increase of weight. we investigate this by testing h0 : µ1 = µ2 against h1 : µ1 = µ2, where µ1 and µ2 denote the increases of weight for a rat in the ozone-free and ozone-rich groups. the sample means",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0.])",tensor([11110]),"tensor([  101,  2654,  1012,  1017,  1999,  1037,  2698,  1011,  2154,  2817,
         2006,  1996,  3466,  1997, 26443,  1010,  1037,  2177,  1997,  2603,
        11432,  2001,  2921,  1999,  2019, 26443,  1011,  2489,  4044,  1998,
         1037,  2177,  1997,  2570, 11432,  1999,  2019, 26443,  1011,  4138,
         4044,  1012,  2013,  2169,  2266,  1999,  2119,  2967,  1996,  3623,
         1999,  3635,  1006,  1999, 20372,  1007,  2001,  2680,  1012,  1996,
         3463,  2024,  2445,  1999,  2795,  2654,  1012,  1019,  1012,  1996,
         3037,  2003,  1999,  3251, 26443, 13531,  1996,  3623,  1997,  3635,
         1012,  2057,  8556,  2023,  2011,  5604,  1044,  2692,  1024,  1085,
         2487,  1027,  1085,  2475,  2114,  1044,  2487,  1024,  1085,  2487,
         1027,  1085,  2475,  1010,  2073,  1085,  2487,  1998,  1085,  2475,
        19090,  1996,  7457,  1997,  3635,  2005,  1037,  9350,  1999,  1996,
        26443,  1011,  2489,  1998, 26443,  1011,  4138,  2967,  1012,  1996,
         7099,  2965,   102])"
3060,1,"['deviation', 'standard deviation', 'standard', 'pooled standard deviation', 'nonpooled']", Exercises,seg_383,"the pooled standard deviation is sp = 4.58, and the nonpooled standard deviation is sd = 4.64.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1996, 19107,  2094,  3115, 24353,  2003, 11867,  1027,  1018,
         1012,  5388,  1010,  1998,  1996,  2512, 16869,  2098,  3115, 24353,
         2003, 17371,  1027,  1018,  1012,  4185,  1012,   102])"
3061,1,"['normal', 'data', 'level', 'test']", Exercises,seg_383,a. perform the test at level 0.05 under the assumption of normal data with,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])",tensor([11110]),"tensor([  101,  1037,  1012,  4685,  1996,  3231,  2012,  2504,  1014,  1012,
         5709,  2104,  1996, 11213,  1997,  3671,  2951,  2007,   102])"
3062,1,"['test statistic', 'variances', 'statistic', 'test']", Exercises,seg_383,"equal variances, i.e., compute the test statistic and report your conclusion.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  5020, 23284,  2015,  1010,  1045,  1012,  1041,  1012,  1010,
        24134,  1996,  3231, 28093,  6553,  1998,  3189,  2115,  7091,  1012,
          102])"
3063,1,"['test statistic', 'simulation', 'bootstrap', 'statistic', 'test']", Exercises,seg_383,b. one also carries out a bootstrap simulation for the test statistic used in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2028,  2036,  7883,  2041,  1037,  6879,  6494,
         2361, 12504,  2005,  1996,  3231, 28093,  6553,  2109,  1999,   102])"
3064,1,"['simulation', 'bootstrap', 'critical values']", Exercises,seg_383,"a, and finds critical values c∗l = −1.912 and c∗u = 1.959. what is your conclusion on the basis of the bootstrap simulation?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  1037,  1010,  1998,  4858,  4187,  5300,  1039, 30125,  2140,
         1027,  1597,  2487,  1012,  6205,  2475,  1998,  1039, 30125,  2226,
         1027,  1015,  1012,  5345,  2683,  1012,  2054,  2003,  2115,  7091,
         2006,  1996,  3978,  1997,  1996,  6879,  6494,  2361, 12504,  1029,
          102])"
3065,1,"['level', 'test']", Exercises,seg_383,c. also perform the test at level 0.05 without the assumption of equal vari-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2036,  4685,  1996,  3231,  2012,  2504,  1014,
         1012,  5709,  2302,  1996, 11213,  1997,  5020, 13075,  2072,  1011,
          102])"
3066,1,"['test statistic', 'approximation', 'normal approximation', 'hypothesis', 'normal', 'distribution', 'null hypothesis', 'statistic', 'test']", Exercises,seg_383,"ances, where you may use the normal approximation for the distribution of the test statistic under the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  2019,  9623,  1010,  2073,  2017,  2089,  2224,  1996,  3671,
        20167,  2005,  1996,  4353,  1997,  1996,  3231, 28093,  6553,  2104,
         1996, 19701, 10744,  1012,   102])"
3067,1,"['tail', 'test statistic', 'simulation', 'bootstrap', 'statistic', 'test']", Exercises,seg_383,d. a bootstrap simulation for the test statistic in c yields that the right tail,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0.])",tensor([11110]),"tensor([  101,  1040,  1012,  1037,  6879,  6494,  2361, 12504,  2005,  1996,
         3231, 28093,  6553,  1999,  1039, 16189,  2008,  1996,  2157,  5725,
          102])"
3068,1,"['test statistic', 'simulation', 'test', 'bootstrap', 'statistic', 'case']", Exercises,seg_383,probability corresponding to the observed value of the test statistic in this case is 0.014. what is your conclusion on the basis of the bootstrap simulation?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([11110]),"tensor([  101,  9723,  7978,  2000,  1996,  5159,  3643,  1997,  1996,  3231,
        28093,  6553,  1999,  2023,  2553,  2003,  1014,  1012,  5890,  2549,
         1012,  2054,  2003,  2115,  7091,  2006,  1996,  3978,  1997,  1996,
         6879,  6494,  2361, 12504,  1029,   102])"
3069,1,"['random', 'random variables', 'variables', 'case']", Exercises,seg_383,"28.4 show that in the case when n = m, the random variables tp and td are the same.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2654,  1012,  1018,  2265,  2008,  1999,  1996,  2553,  2043,
         1050,  1027,  1049,  1010,  1996,  6721, 10857,  1056,  2361,  1998,
        14595,  2024,  1996,  2168,  1012,   102])"
3070,1,"['normal distributions', 'variances', 'distributions', 'random', 'normal', 'independent']", Exercises,seg_383,"28.5 let x1, x2, . . . , xn and y1, y2, . . . , ym be independent random samples from normal distributions with variances σ2. it can be shown that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2654,  1012,  1019,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1998,  1061,  2487,
         1010,  1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,  2213,
         2022,  2981,  6721,  8168,  2013,  3671, 20611,  2007, 23284,  2015,
         1173,  2475,  1012,  2009,  2064,  2022,  3491,  2008,   102])"
3071,1,"['linear', 'linear combinations', 'combinations']", Exercises,seg_383,consider linear combinations asx,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  5136,  7399, 14930,  2004,  2595,   102])"
3072,1,"['estimators', 'unbiased', 'unbiased estimators']", Exercises,seg_383,2 + bsy 2 that are unbiased estimators for σ2.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0.])",tensor([11110]),"tensor([  101,  1016,  1009, 18667,  2100,  1016,  2008,  2024,  4895, 11607,
         6924,  9765,  9581,  6591,  2005,  1173,  2475,  1012,   102])"
3073,1,"['random samples', 'variances', 'distributions', 'random', 'samples', 'independent']", Exercises,seg_383,"28.6 let x1, x2, . . . , xn and y1, y2, . . . , ym be independent random samples from distributions with (possibly unequal) variances σx",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  2654,  1012,  1020,  2292,  1060,  2487,  1010,  1060,  2475,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1998,  1061,  2487,
         1010,  1061,  2475,  1010,  1012,  1012,  1012,  1010,  1061,  2213,
         2022,  2981,  6721,  8168,  2013, 20611,  2007,  1006,  4298, 16655,
        26426,  1007, 23284,  2015,  1173,  2595,   102])"
3074,1,"['biased', 'pooled variance', 'variance']", Exercises,seg_383,"b. show that the pooled variance sp2, as defined on page 417, is a biased",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([11110]),"tensor([  101,  1038,  1012,  2265,  2008,  1996, 19107,  2094, 23284, 11867,
         2475,  1010,  2004,  4225,  2006,  3931, 27519,  1010,  2003,  1037,
        25352,   102])"
3075,1,"['nonpooled', 'nonpooled variance', 'variance']", Exercises,seg_383,"c. show that the nonpooled variance sd2, as defined on page 420, is the only",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1039,  1012,  2265,  2008,  1996,  2512, 16869,  2098, 23284,
        17371,  2475,  1010,  2004,  4225,  2006,  3931, 17442,  1010,  2003,
         1996,  2069,   102])"
3076,1,['estimator'], Exercises,seg_383,unbiased estimator for var(x̄n − ȳm) of the form asx,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  4895, 11607,  6924,  9765,  9581,  4263,  2005, 13075,  1006,
         1060,  2078,  1597,  1061,  2213,  1007,  1997,  1996,  2433,  2004,
         2595,   102])"
3077,1,"['unbiased estimator', 'estimator', 'unbiased']", Exercises,seg_383,"2 = σy 2 = σ2. show that sd2, as defined on page 417, is an unbiased estimator for var(x̄n − ȳm) = σ2(1/n + 1/m).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1016,  1027,  1173,  2100,  1016,  1027,  1173,  2475,  1012,
         2265,  2008, 17371,  2475,  1010,  2004,  4225,  2006,  3931, 27519,
         1010,  2003,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2005,
        13075,  1006,  1060,  2078,  1597,  1061,  2213,  1007,  1027,  1173,
         2475,  1006,  1015,  1013,  1050,  1009,  1015,  1013,  1049,  1007,
         1012,   102])"
3078,1,"['unbiased estimator', 'estimator', 'unbiased', 'case']", Exercises,seg_383,e. is sd2 also an unbiased estimator for var(x̄n − ȳm) in the case σx,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([11110]),"tensor([  101,  1041,  1012,  2003, 17371,  2475,  2036,  2019,  4895, 11607,
         6924,  9765,  9581,  4263,  2005, 13075,  1006,  1060,  2078,  1597,
         1061,  2213,  1007,  1999,  1996,  2553,  1173,  2595,   102])"
3079,1,['distributions'],A Summary of distributions,seg_385,discrete distributions,tensor(1),"tensor([0., 0., 1., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101, 16246, 20611,   102])"
3080,1,"['bernoulli', 'bernoulli distribution', 'distribution']",A Summary of distributions,seg_385,"1. bernoulli distribution: ber(p), where 0 ≤ p ≤ 1.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1015,  1012, 16595,  7140,  6894,  4353,  1024,  2022,  2099,
         1006,  1052,  1007,  1010,  2073,  1014,  1608,  1052,  1608,  1015,
         1012,   102])"
3081,1,"['binomial distribution', 'binomial', 'distribution']",A Summary of distributions,seg_385,"2. binomial distribution: bin(n, p), where 0 ≤ p ≤ 1.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1016,  1012,  8026, 20936,  2389,  4353,  1024,  8026,  1006,
         1050,  1010,  1052,  1007,  1010,  2073,  1014,  1608,  1052,  1608,
         1015,  1012,   102])"
3082,1,"['geometric', 'geometric distribution', 'distribution']",A Summary of distributions,seg_385,"3. geometric distribution: geo(p), where 0 < p ≤ 1.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1017,  1012, 14965,  4353,  1024, 20248,  1006,  1052,  1007,
         1010,  2073,  1014,  1026,  1052,  1608,  1015,  1012,   102])"
3083,1,"['poisson', 'poisson distribution', 'distribution']",A Summary of distributions,seg_385,"4. poisson distribution: pois(µ), where µ > 0.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1018,  1012, 13433, 24077,  4353,  1024, 13433,  2483,  1006,
         1085,  1007,  1010,  2073,  1085,  1028,  1014,  1012,   102])"
3084,1,['distributions'],A Summary of distributions,seg_385,continuous distributions,tensor(1),"tensor([0., 0., 1., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  7142, 20611,   102])"
3085,1,"['cauchy', 'cauchy distribution', 'distribution']",A Summary of distributions,seg_385,"1. cauchy distribution: cau(α, β), where −∞ < α < ∞ and β > 0.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1015,  1012,  6187, 10875,  2100,  4353,  1024,  6187,  2226,
         1006,  1155,  1010,  1156,  1007,  1010,  2073,  1597, 30128,  1026,
         1155,  1026,  1601,  1998,  1156,  1028,  1014,  1012,   102])"
3086,1,"['exponential', 'exponential distribution', 'distribution']",A Summary of distributions,seg_385,"2. exponential distribution: exp(λ), where λ > 0.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1016,  1012, 27258,  4353,  1024,  4654,  2361,  1006,  1165,
         1007,  1010,  2073,  1165,  1028,  1014,  1012,   102])"
3087,1,"['gamma', 'gamma distribution', 'distribution']",A Summary of distributions,seg_385,"3. gamma distribution: gam(α, λ), where α > 0 and λ > 0.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1017,  1012, 13091,  4353,  1024, 11721,  2213,  1006,  1155,
         1010,  1165,  1007,  1010,  2073,  1155,  1028,  1014,  1998,  1165,
         1028,  1014,  1012,   102])"
3088,1,"['normal', 'normal distribution', 'distribution']",A Summary of distributions,seg_385,"4. normal distribution: n(µ, σ2), where −∞ < µ < ∞ and σ > 0.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1018,  1012,  3671,  4353,  1024,  1050,  1006,  1085,  1010,
         1173,  2475,  1007,  1010,  2073,  1597, 30128,  1026,  1085,  1026,
         1601,  1998,  1173,  1028,  1014,  1012,   102])"
3089,1,"['pareto distribution', 'pareto', 'distribution']",A Summary of distributions,seg_385,"5. pareto distribution: par(α), where α > 0.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([  101,  1019,  1012, 11968, 18903,  4353,  1024, 11968,  1006,  1155,
         1007,  1010,  2073,  1155,  1028,  1014,  1012,   102])"
3090,1,"['uniform distribution', 'distribution']",A Summary of distributions,seg_385,"6. uniform distribution: u(a, b), where a < b.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 1037, 12654,  1997, 20611])","tensor([ 101, 1020, 1012, 6375, 4353, 1024, 1057, 1006, 1037, 1010, 1038, 1007,
        1010, 2073, 1037, 1026, 1038, 1012,  102])"
3091,1,['set'],List of symbols,seg_395,"∅ empty set, page 14",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1593, 4064, 2275, 1010, 3931, 2403,  102])"
3092,1,"['significance', 'significance level', 'level']",List of symbols,seg_395,"α significance level, page 384",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1155, 7784, 2504, 1010, 3931, 4229, 2549,  102])"
3093,1,"['complement', 'event']",List of symbols,seg_395,"ac complement of the event a, page 14",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  9353, 13711,  1997,  1996,  2724,  1037,  1010,  3931,  2403,
          102])"
3094,1,['intersection'],List of symbols,seg_395,"a ∩ b intersection of a and b, page 14",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1037, 1604, 1038, 6840, 1997, 1037, 1998, 1038, 1010, 3931, 2403,
         102])"
3095,1,['union'],List of symbols,seg_395,"a ∪ b union of a and b, page 14",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1037, 1605, 1038, 2586, 1997, 1037, 1998, 1038, 1010, 3931, 2403,
         102])"
3096,1,"['parameter', 'bernoulli', 'bernoulli distribution', 'distribution']",List of symbols,seg_395,"ber(p) bernoulli distribution with parameter p, page 45",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  2022,  2099,  1006,  1052,  1007, 16595,  7140,  6894,  4353,
         2007, 16381,  1052,  1010,  3931,  3429,   102])"
3097,1,"['distribution', 'parameters', 'binomial', 'binomial distribution']",List of symbols,seg_395,"bin(n, p) binomial distribution with parameters n and p, page 48",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  8026,  1006,  1050,  1010,  1052,  1007,  8026, 20936,  2389,
         4353,  2007, 11709,  1050,  1998,  1052,  1010,  3931,  4466,   102])"
3098,1,"['right critical values', 'critical values']",List of symbols,seg_395,"cl, cu left and right critical values, page 388",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101, 18856,  1010, 12731,  2187,  1998,  2157,  4187,  5300,  1010,
         3931,  4229,  2620,   102])"
3099,1,"['cauchy', 'cauchy distribution', 'distribution', 'parameters']",List of symbols,seg_395,"cau(α, β) cauchy distribution with parameters α en β, page 161",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  6187,  2226,  1006,  1155,  1010,  1156,  1007,  6187, 10875,
         2100,  4353,  2007, 11709,  1155,  4372,  1156,  1010,  3931, 17365,
          102])"
3100,1,['covariance'],List of symbols,seg_395,"cov(x, y ) covariance between x and y , page 139",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2862, 1997, 9255])","tensor([  101,  2522,  2615,  1006,  1060,  1010,  1061,  1007,  2522, 10755,
        28335,  2090,  1060,  1998,  1061,  1010,  3931, 16621,   102])"
3101,1,"['random variable', 'random', 'expectation', 'variable']",List of symbols,seg_395,"e[x ] expectation of the random variable x , page 90, 91",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1041,  1031,  1060,  1033, 17626,  1997,  1996,  6721,  8023,
         1060,  1010,  3931,  3938,  1010,  6205,   102])"
3102,1,"['exponential', 'parameter', 'exponential distribution', 'distribution']",List of symbols,seg_395,"exp(λ) exponential distribution with parameter λ, page 62",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  4654,  2361,  1006,  1165,  1007, 27258,  4353,  2007, 16381,
         1165,  1010,  3931,  5786,   102])"
3103,1,"['function', 'normal distribution', 'standard normal distribution', 'standard normal', 'normal', 'standard', 'distribution', 'distribution function']",List of symbols,seg_395,"φ distribution function of the standard normal distribution, page 65",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1176, 4353, 3853, 1997, 1996, 3115, 3671, 4353, 1010, 3931, 3515,
         102])"
3104,1,"['normal distribution', 'standard normal distribution', 'probability', 'standard normal', 'normal', 'standard', 'distribution']",List of symbols,seg_395,"φ probability density of the standard normal distribution, page 65",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1176, 9723, 4304, 1997, 1996, 3115, 3671, 4353, 1010, 3931, 3515,
         102])"
3105,1,"['function', 'density function', 'probability', 'probability density function']",List of symbols,seg_395,"f probability density function, page 57",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1042, 9723, 4304, 3853, 1010, 3931, 5401,  102])"
3106,1,"['joint probability', 'function', 'density function', 'probability', 'probability density function', 'joint probability density function', 'joint']",List of symbols,seg_395,"f joint probability density function, page 119",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1042,  4101,  9723,  4304,  3853,  1010,  3931, 13285,   102])"
3107,1,"['distribution function', 'function', 'distribution']",List of symbols,seg_395,"f distribution function, page 44",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1042, 4353, 3853, 1010, 3931, 4008,  102])"
3108,1,"['function', 'distribution', 'distribution function', 'joint']",List of symbols,seg_395,"f joint distribution function, page 118",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1042,  4101,  4353,  3853,  1010,  3931, 12963,   102])"
3109,1,"['distribution function', 'function', 'distribution']",List of symbols,seg_395,"f inv inverse function of distribution function f , page 73",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1042,  1999,  2615, 19262,  3853,  1997,  4353,  3853,  1042,
         1010,  3931,  6421,   102])"
3110,1,"['function', 'distribution', 'distribution function', 'empirical distribution function']",List of symbols,seg_395,"fn empirical distribution function, page 219",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1042,  2078, 17537,  4353,  3853,  1010,  3931, 20636,   102])"
3111,1,"['estimate', 'kernel', 'kernel density estimate']",List of symbols,seg_395,"fn,h kernel density estimate, page 213",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1042,  2078,  1010,  1044, 16293,  4304, 10197,  1010,  3931,
        19883,   102])"
3112,1,"['gamma', 'gamma distribution', 'distribution', 'parameters']",List of symbols,seg_395,"gam(α, λ) gamma distribution with parameters α en λ, page 157",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2862, 1997, 9255])","tensor([  101, 11721,  2213,  1006,  1155,  1010,  1165,  1007, 13091,  4353,
         2007, 11709,  1155,  4372,  1165,  1010,  3931, 17403,   102])"
3113,1,"['geometric', 'parameter', 'geometric distribution', 'distribution']",List of symbols,seg_395,"geo(p) geometric distribution with parameter p, page 49",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101, 20248,  1006,  1052,  1007, 14965,  4353,  2007, 16381,  1052,
         1010,  3931,  4749,   102])"
3114,1,"['null hypothesis', 'alternative hypothesis', 'hypothesis']",List of symbols,seg_395,"h0, h1 null hypothesis and alternative hypothesis, page 374",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1044,  2692,  1010,  1044,  2487, 19701, 10744,  1998,  4522,
        10744,  1010,  3931,  4261,  2549,   102])"
3115,1,"['likelihood function', 'function', 'likelihood']",List of symbols,seg_395,"l(θ) likelihood function, page 317",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1048,  1006,  1162,  1007, 16593,  3853,  1010,  3931, 26628,
          102])"
3116,1,"['function', 'loglikelihood function']",List of symbols,seg_395,"(θ) loglikelihood function, page 319",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1006,  1162,  1007,  8833, 10359,  3669,  9021,  3853,  1010,
         3931, 26499,   102])"
3117,1,"['dataset', 'sample median', 'sample', 'median']",List of symbols,seg_395,"medn sample median of a dataset, page 231",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101, 19960,  2078,  7099,  3991,  1997,  1037,  2951, 13462,  1010,
         3931, 20304,   102])"
3118,1,['factorial'],List of symbols,seg_395,"n! n factorial, page 14",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1050,  999, 1050, 5387, 4818, 1010, 3931, 2403,  102])"
3119,1,"['normal distribution', 'normal', 'distribution', 'parameters']",List of symbols,seg_395,"n(µ, σ2) normal distribution with parameters µ and σ2, page 64",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1050,  1006,  1085,  1010,  1173,  2475,  1007,  3671,  4353,
         2007, 11709,  1085,  1998,  1173,  2475,  1010,  3931,  4185,   102])"
3120,1,"['sample', 'sample space']",List of symbols,seg_395,"ω sample space, page 13",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1179, 7099, 2686, 1010, 3931, 2410,  102])"
3121,1,"['parameter', 'pareto distribution', 'pareto', 'distribution']",List of symbols,seg_395,"par(α) pareto distribution with parameter α, page 63",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101, 11968,  1006,  1155,  1007, 11968, 18903,  4353,  2007, 16381,
         1155,  1010,  3931,  6191,   102])"
3122,1,"['poisson', 'parameter', 'poisson distribution', 'distribution']",List of symbols,seg_395,"pois(µ) poisson distribution with parameter µ, page 170",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101, 13433,  2483,  1006,  1085,  1007, 13433, 24077,  4353,  2007,
        16381,  1085,  1010,  3931, 10894,   102])"
3123,1,"['probability', 'conditional probability', 'conditional']",List of symbols,seg_395,"p(a |c) conditional probability of a given c, page 26",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1052,  1006,  1037,  1064,  1039,  1007, 18462,  9723,  1997,
         1037,  2445,  1039,  1010,  3931,  2656,   102])"
3124,1,"['probability', 'probability of the event', 'event']",List of symbols,seg_395,"p(a) probability of the event a, page 16",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1052, 1006, 1037, 1007, 9723, 1997, 1996, 2724, 1037, 1010, 3931,
        2385,  102])"
3125,1,"['quantile', 'empirical quantile']",List of symbols,seg_395,"qn(p) pth empirical quantile, page 234",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1053,  2078,  1006,  1052,  1007, 13866,  2232, 17537, 24110,
        15286,  1010,  3931, 22018,   102])"
3126,1,"['quantile', 'percentile']",List of symbols,seg_395,"qp pth quantile or 100pth percentile, page 66",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1053,  2361, 13866,  2232, 24110, 15286,  2030,  2531, 13876,
         2232,  3867,  9463,  1010,  3931,  5764,   102])"
3127,1,"['correlation', 'coefficient', 'correlation coefficient']",List of symbols,seg_395,"ρ(x, y ) correlation coefficient between x and y , page 142",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1171,  1006,  1060,  1010,  1061,  1007, 16902, 19064,  2090,
         1060,  1998,  1061,  1010,  3931, 16087,   102])"
3128,1,"['dataset', 'variance', 'sample', 'sample variance']",List of symbols,seg_395,"s2n sample variance of a dataset, page 233",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1055,  2475,  2078,  7099, 23284,  1997,  1037,  2951, 13462,
         1010,  3931, 22115,   102])"
3129,1,"['variance', 'random sample', 'sample', 'random', 'sample variance']",List of symbols,seg_395,"sn 2 sample variance of random sample, page 292",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1055,  2078,  1016,  7099, 23284,  1997,  6721,  7099,  1010,
         3931, 25797,   102])"
3130,1,['degrees of freedom'],List of symbols,seg_395,"t(m) t-distribution with m degrees of freedom, page 348",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1056, 1006, 1049, 1007, 1056, 1011, 4353, 2007, 1049, 5445, 1997,
        4071, 1010, 3931, 4090, 2620,  102])"
3131,1,"['critical value', 'distribution']",List of symbols,seg_395,"tm,p critical value of the t(m) distribution, page 348",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([2862, 1997, 9255])","tensor([ 101, 1056, 2213, 1010, 1052, 4187, 3643, 1997, 1996, 1056, 1006, 1049,
        1007, 4353, 1010, 3931, 4090, 2620,  102])"
3132,1,"['uniform distribution', 'parameters', 'distribution']",List of symbols,seg_395,"u(α, β) uniform distribution with parameters α and β, page 60",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1057,  1006,  1155,  1010,  1156,  1007,  6375,  4353,  2007,
        11709,  1155,  1998,  1156,  1010,  3931,  3438,   102])"
3133,1,"['variance', 'random variable', 'random', 'variable']",List of symbols,seg_395,"var(x) variance of the random variable x , page 96",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101, 13075,  1006,  1060,  1007, 23284,  1997,  1996,  6721,  8023,
         1060,  1010,  3931,  5986,   102])"
3134,1,"['mean', 'dataset', 'sample', 'sample mean']",List of symbols,seg_395,"x̄n sample mean of a dataset, page 231",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1060,  2078,  7099,  2812,  1997,  1037,  2951, 13462,  1010,
         3931, 20304,   102])"
3135,1,"['random', 'random variables', 'variables', 'average']",List of symbols,seg_395,"x̄n average of the random variables x1, . . . , xn, page 182",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1060,  2078,  2779,  1997,  1996,  6721, 10857,  1060,  2487,
         1010,  1012,  1012,  1012,  1010,  1060,  2078,  1010,  3931, 17691,
          102])"
3136,1,"['critical value', 'distribution']",List of symbols,seg_395,"zp critical value of the n(0, 1) distribution, page 345",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([2862, 1997, 9255])","tensor([  101,  1062,  2361,  4187,  3643,  1997,  1996,  1050,  1006,  1014,
         1010,  1015,  1007,  4353,  1010,  3931, 23785,   102])"
