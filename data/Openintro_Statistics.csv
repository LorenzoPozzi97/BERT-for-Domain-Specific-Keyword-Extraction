,Relevance,Tags,Heading,Seg,Sentence,Enc Relevance,Enc Tags,Enc Heading,Enc Sentence
0,1,"['data', 'observations', 'sampling', 'experiments', 'statistics', 'statistical', 'case']",Chapter  Introduction to data,seg_1,"1.1 case study: using stents to prevent strokes 1.2 data basics 1.3 sampling principles and strategies 1.4 experiments scientists seek to answer questions using rigorous methods and careful observations. these observations – collected from the likes of field notes, surveys, and experiments – form the backbone of a statistical investigation and are called data. statistics is the study of how best to collect, analyze, and draw conclusions from data, and in this first chapter, we focus on both the properties of data and on the collection of data. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([3127, 4955, 2000, 2951])","tensor([  101,  1015,  1012,  1015,  2553,  2817,  1024,  2478, 26261,  7666,
         2000,  4652, 13692,  1015,  1012,  1016,  2951, 24078,  1015,  1012,
         1017, 16227,  6481,  1998,  9942,  1015,  1012,  1018,  7885,  6529,
         6148,  2000,  3437,  3980,  2478, 20001,  4725,  1998,  6176,  9420,
         1012,  2122,  9420,  1516,  5067,  2013,  1996,  7777,  1997,  2492,
         3964,  1010, 12265,  1010,  1998,  7885,  1516,  2433,  1996, 21505,
         1997,  1037,  7778,  4812,  1998,  2024,  2170,  2951,  1012,  6747,
         2003,  1996,  2817,  1997,  2129,  2190,  2000,  8145,  1010, 17908,
         1010,  1998,  4009, 15306,  2013,  2951,  1010,  1998,  1999,  2023,
         2034,  3127,  1010,  2057,  3579,  2006,  2119,  1996,  5144,  1997,
         2951,  1998,  2006,  1996,  3074,  1997,  2951,  1012,  2005,  6876,
         1010, 14816,  1010,  1998,  2060,  4219,  1010,  3531,  3942,  7479,
         1012,  2330, 18447,  3217,  1012,  8917,  1013,  9808,   102])"
1,1,"['evaluating', 'treatment', 'statistics']", Case study using stents to prevent strokes,seg_3,"section 1.1 introduces a classic challenge in statistics: evaluating the efficacy of a medical treatment. terms in this section, and indeed much of this chapter, will all be revisited later in the text. the plan for now is simply to get a sense of the role statistics can play in practice.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2930,  1015,  1012,  1015, 13999,  1037,  4438,  4119,  1999,
         6747,  1024, 23208,  1996, 21150,  1997,  1037,  2966,  3949,  1012,
         3408,  1999,  2023,  2930,  1010,  1998,  5262,  2172,  1997,  2023,
         3127,  1010,  2097,  2035,  2022, 24354,  2101,  1999,  1996,  3793,
         1012,  1996,  2933,  2005,  2085,  2003,  3432,  2000,  2131,  1037,
         3168,  1997,  1996,  2535,  6747,  2064,  2377,  1999,  3218,  1012,
          102])"
2,1,"['risk', 'events', 'experiment']", Case study using stents to prevent strokes,seg_3,in this section we will consider an experiment that studies effectiveness of stents in treating patients at risk of stroke. stents are devices put inside blood vessels that assist in patient recovery after cardiac events and reduce the risk of an additional heart attack or death. many doctors have hoped that there would be similar benefits for patients at risk of stroke. we start by writing the principal question the researchers hope to answer:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1999,  2023,  2930,  2057,  2097,  5136,  2019,  7551,  2008,
         2913, 12353,  1997, 26261,  7666,  1999, 12318,  5022,  2012,  3891,
         1997,  6909,  1012, 26261,  7666,  2024,  5733,  2404,  2503,  2668,
         6470,  2008,  6509,  1999,  5776,  7233,  2044, 15050,  2824,  1998,
         5547,  1996,  3891,  1997,  2019,  3176,  2540,  2886,  2030,  2331,
         1012,  2116,  7435,  2031,  5113,  2008,  2045,  2052,  2022,  2714,
         6666,  2005,  5022,  2012,  3891,  1997,  6909,  1012,  2057,  2707,
         2011,  3015,  1996,  4054,  3160,  1996,  6950,  3246,  2000,  3437,
         1024,   102])"
3,1,['risk'], Case study using stents to prevent strokes,seg_3,does the use of stents reduce the risk of stroke?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2515,  1996,  2224,  1997, 26261,  7666,  5547,  1996,  3891,
         1997,  6909,  1029,   102])"
4,1,['experiment'], Case study using stents to prevent strokes,seg_3,the researchers who asked this question conducted an experiment with 451 at-risk patients. each volunteer patient was randomly assigned to one of two groups:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1996,  6950,  2040,  2356,  2023,  3160,  4146,  2019,  7551,
         2007, 28161,  2012,  1011,  3891,  5022,  1012,  2169,  6951,  5776,
         2001, 18154,  4137,  2000,  2028,  1997,  2048,  2967,  1024,   102])"
5,1,"['risk', 'treatment group', 'treatment', 'factors']", Case study using stents to prevent strokes,seg_3,"treatment group. patients in the treatment group received a stent and medical management. the medical management included medications, management of risk factors, and help in lifestyle modification.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  3949,  2177,  1012,  5022,  1999,  1996,  3949,  2177,  2363,
         1037, 26261,  3372,  1998,  2966,  2968,  1012,  1996,  2966,  2968,
         2443, 20992,  1010,  2968,  1997,  3891,  5876,  1010,  1998,  2393,
         1999,  9580, 14080,  1012,   102])"
6,1,"['control group', 'treatment group', 'treatment', 'control']", Case study using stents to prevent strokes,seg_3,"control group. patients in the control group received the same medical management as the treatment group, but they did not receive stents.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2491,  2177,  1012,  5022,  1999,  1996,  2491,  2177,  2363,
         1996,  2168,  2966,  2968,  2004,  1996,  3949,  2177,  1010,  2021,
         2027,  2106,  2025,  4374, 26261,  7666,  1012,   102])"
7,1,"['control group', 'treatment group', 'treatment', 'control']", Case study using stents to prevent strokes,seg_3,"researchers randomly assigned 224 patients to the treatment group and 227 to the control group. in this study, the control group provides a reference point against which we can measure the medical impact of stents in the treatment group.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  6950, 18154,  4137, 19711,  5022,  2000,  1996,  3949,  2177,
         1998, 21489,  2000,  1996,  2491,  2177,  1012,  1999,  2023,  2817,
         1010,  1996,  2491,  2177,  3640,  1037,  4431,  2391,  2114,  2029,
         2057,  2064,  5468,  1996,  2966,  4254,  1997, 26261,  7666,  1999,
         1996,  3949,  2177,  1012,   102])"
8,1,"['results', 'outcomes']", Case study using stents to prevent strokes,seg_3,"researchers studied the effect of stents at two time points: 30 days after enrollment and 365 days after enrollment. the results of 5 patients are summarized in figure 1.1. patient outcomes are recorded as “stroke” or “no event”, representing whether or not the patient had a stroke at the end of a time period.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  6950,  3273,  1996,  3466,  1997, 26261,  7666,  2012,  2048,
         2051,  2685,  1024,  2382,  2420,  2044, 10316,  1998, 19342,  2420,
         2044, 10316,  1012,  1996,  3463,  1997,  1019,  5022,  2024, 22539,
         1999,  3275,  1015,  1012,  1015,  1012,  5776, 13105,  2024,  2680,
         2004,  1523,  6909,  1524,  2030,  1523,  2053,  2724,  1524,  1010,
         5052,  3251,  2030,  2025,  1996,  5776,  2018,  1037,  6909,  2012,
         1996,  2203,  1997,  1037,  2051,  2558,  1012,   102])"
9,1,"['event ', 'treatment', 'event', 'control']", Case study using stents to prevent strokes,seg_3,patient group 0-30 days 0-365 days 1 treatment no event no event 2 treatment stroke stroke 3 treatment no event no event . . . . . . . . . 450 control no event no event 451 control no event no event,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0.,
        1., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0., 1., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  5776,  2177,  1014,  1011,  2382,  2420,  1014,  1011, 19342,
         2420,  1015,  3949,  2053,  2724,  2053,  2724,  1016,  3949,  6909,
         6909,  1017,  3949,  2053,  2724,  2053,  2724,  1012,  1012,  1012,
         1012,  1012,  1012,  1012,  1012,  1012, 10332,  2491,  2053,  2724,
         2053,  2724, 28161,  2491,  2053,  2724,  2053,  2724,   102])"
10,1,['results'], Case study using stents to prevent strokes,seg_3,figure 1.1: results for five patients from the stent study.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  3275,  1015,  1012,  1015,  1024,  3463,  2005,  2274,  5022,
         2013,  1996, 26261,  3372,  2817,  1012,   102])"
11,1,"['table', 'treatment group', 'treatment', 'intersection', 'statistical', 'data']", Case study using stents to prevent strokes,seg_3,"considering data from each patient individually would be a long, cumbersome path towards answering the original research question. instead, performing a statistical data analysis allows us to consider all of the data at once. figure 1.2 summarizes the raw data in a more helpful way. in this table, we can quickly see what happened over the entire study. for instance, to identify the number of patients in the treatment group who had a stroke within 30 days, we look on the left-side of the table at the intersection of the treatment and stroke: 33.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  6195,  2951,  2013,  2169,  5776, 14258,  2052,  2022,  1037,
         2146,  1010, 13988, 17198,  8462,  4130,  2875, 10739,  1996,  2434,
         2470,  3160,  1012,  2612,  1010,  4488,  1037,  7778,  2951,  4106,
         4473,  2149,  2000,  5136,  2035,  1997,  1996,  2951,  2012,  2320,
         1012,  3275,  1015,  1012,  1016,  7680,  7849, 10057,  1996,  6315,
         2951,  1999,  1037,  2062, 14044,  2126,  1012,  1999,  2023,  2795,
         1010,  2057,  2064,  2855,  2156,  2054,  3047,  2058,  1996,  2972,
         2817,  1012,  2005,  6013,  1010,  2000,  6709,  1996,  2193,  1997,
         5022,  1999,  1996,  3949,  2177,  2040,  2018,  1037,  6909,  2306,
         2382,  2420,  1010,  2057,  2298,  2006,  1996,  2187,  1011,  2217,
         1997,  1996,  2795,  2012,  1996,  6840,  1997,  1996,  3949,  1998,
         6909,  1024,  3943,  1012,   102])"
12,1,"['treatment', 'event', 'control']", Case study using stents to prevent strokes,seg_3,0-30 days 0-365 days stroke no event stroke no event treatment 33 191 45 179 control 13 214 28 199 total 46 405 73 378,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1014,  1011,  2382,  2420,  1014,  1011, 19342,  2420,  6909,
         2053,  2724,  6909,  2053,  2724,  3949,  3943, 19871,  3429, 20311,
         2491,  2410, 19936,  2654, 20713,  2561,  4805, 23988,  6421,  4261,
         2620,   102])"
13,1,"['descriptive statistics', 'statistics']", Case study using stents to prevent strokes,seg_3,figure 1.2: descriptive statistics for the stent study.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  3275,  1015,  1012,  1016,  1024, 22726,  6747,  2005,  1996,
        26261,  3372,  2817,  1012,   102])"
14,1,"['treatment group', 'treatment']", Case study using stents to prevent strokes,seg_3,"of the 224 patients in the treatment group, 45 had a stroke by the end of the first year. using these two numbers, compute the proportion of patients in the treatment group who had a stroke by the end of their first year. (please note: answers to all guided practice exercises are provided using footnotes.)1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1997,  1996, 19711,  5022,  1999,  1996,  3949,  2177,  1010,
         3429,  2018,  1037,  6909,  2011,  1996,  2203,  1997,  1996,  2034,
         2095,  1012,  2478,  2122,  2048,  3616,  1010, 24134,  1996, 10817,
         1997,  5022,  1999,  1996,  3949,  2177,  2040,  2018,  1037,  6909,
         2011,  1996,  2203,  1997,  2037,  2034,  2095,  1012,  1006,  3531,
         3602,  1024,  6998,  2000,  2035,  8546,  3218, 11110,  2024,  3024,
         2478,  3329, 20564,  1012,  1007,  1015,   102])"
15,1,"['data', 'table', 'treatment', 'treatment and control groups', 'control', 'results', 'control groups', 'statistics', 'statistic']", Case study using stents to prevent strokes,seg_3,"we can compute summary statistics from the table. a summary statistic is a single number summarizing a large amount of data. for instance, the primary results of the study after 1 year could be described by two summary statistics: the proportion of people who had a stroke in the treatment and control groups.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2057,  2064, 24134, 12654,  6747,  2013,  1996,  2795,  1012,
         1037, 12654, 28093,  6553,  2003,  1037,  2309,  2193,  7680,  7849,
         6026,  1037,  2312,  3815,  1997,  2951,  1012,  2005,  6013,  1010,
         1996,  3078,  3463,  1997,  1996,  2817,  2044,  1015,  2095,  2071,
         2022,  2649,  2011,  2048, 12654,  6747,  1024,  1996, 10817,  1997,
         2111,  2040,  2018,  1037,  6909,  1999,  1996,  3949,  1998,  2491,
         2967,  1012,   102])"
16,1,['treatment'], Case study using stents to prevent strokes,seg_3,proportion who had a stroke in the treatment (stent) group: 45/224 = 0.20 = 20%.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 10817,  2040,  2018,  1037,  6909,  1999,  1996,  3949,  1006,
        26261,  3372,  1007,  2177,  1024,  3429,  1013, 19711,  1027,  1014,
         1012,  2322,  1027,  2322,  1003,  1012,   102])"
17,1,"['control group', 'control']", Case study using stents to prevent strokes,seg_3,proportion who had a stroke in the control group: 28/227 = 0.12 = 12%.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 10817,  2040,  2018,  1037,  6909,  1999,  1996,  2491,  2177,
         1024,  2654,  1013, 21489,  1027,  1014,  1012,  2260,  1027,  2260,
         1003,  1012,   102])"
18,1,"['rate', 'data', 'treatment group', 'treatment', 'statistics', 'statistical']", Case study using stents to prevent strokes,seg_3,"these two summary statistics are useful in looking for differences in the groups, and we are in for a surprise: an additional 8% of patients in the treatment group had a stroke! this is important for two reasons. first, it is contrary to what doctors expected, which was that stents would reduce the rate of strokes. second, it leads to a statistical question: do the data show a “real” difference between the groups?",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2122,  2048, 12654,  6747,  2024,  6179,  1999,  2559,  2005,
         5966,  1999,  1996,  2967,  1010,  1998,  2057,  2024,  1999,  2005,
         1037,  4474,  1024,  2019,  3176,  1022,  1003,  1997,  5022,  1999,
         1996,  3949,  2177,  2018,  1037,  6909,   999,  2023,  2003,  2590,
         2005,  2048,  4436,  1012,  2034,  1010,  2009,  2003, 10043,  2000,
         2054,  7435,  3517,  1010,  2029,  2001,  2008, 26261,  7666,  2052,
         5547,  1996,  3446,  1997, 13692,  1012,  2117,  1010,  2009,  5260,
         2000,  1037,  7778,  3160,  1024,  2079,  1996,  2951,  2265,  1037,
         1523,  2613,  1524,  4489,  2090,  1996,  2967,  1029,   102])"
19,1,"['variation', 'sample', 'sample size', 'process', 'data']", Case study using stents to prevent strokes,seg_3,"this second question is subtle. suppose you flip a coin 100 times. while the chance a coin lands heads in any given coin flip is 50%, we probably won’t observe exactly 50 heads. this type of fluctuation is part of almost any type of data generating process. it is possible that the 8% difference in the stent study is due to this natural variation. however, the larger the difference we observe (for a particular sample size), the less believable it is that the difference is due to chance. so what we are really asking is the following: is the difference so large that we should reject the notion that it was due to chance?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2023,  2117,  3160,  2003, 11259,  1012,  6814,  2017, 11238,
         1037,  9226,  2531,  2335,  1012,  2096,  1996,  3382,  1037,  9226,
         4915,  4641,  1999,  2151,  2445,  9226, 11238,  2003,  2753,  1003,
         1010,  2057,  2763,  2180,  1521,  1056, 11949,  3599,  2753,  4641,
         1012,  2023,  2828,  1997, 19857,  6593, 14505,  2003,  2112,  1997,
         2471,  2151,  2828,  1997,  2951, 11717,  2832,  1012,  2009,  2003,
         2825,  2008,  1996,  1022,  1003,  4489,  1999,  1996, 26261,  3372,
         2817,  2003,  2349,  2000,  2023,  3019,  8386,  1012,  2174,  1010,
         1996,  3469,  1996,  4489,  2057, 11949,  1006,  2005,  1037,  3327,
         7099,  2946,  1007,  1010,  1996,  2625, 19337,  2666, 12423,  2009,
         2003,  2008,  1996,  4489,  2003,  2349,  2000,  3382,  1012,  2061,
         2054,  2057,  2024,  2428,  4851,  2003,  1996,  2206,  1024,  2003,
         1996,  4489,  2061,  2312,  2008,  2057,  2323, 15454,  1996,  9366,
         2008,  2009,  2001,  2349,  2000,  3382,  1029,   102])"
20,1,['statistical'], Case study using stents to prevent strokes,seg_3,"while we don’t yet have our statistical tools to fully address this question on our own, we can comprehend the conclusions of the published analysis: there was compelling evidence of harm by stents in this study of stroke patients.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2096,  2057,  2123,  1521,  1056,  2664,  2031,  2256,  7778,
         5906,  2000,  3929,  4769,  2023,  3160,  2006,  2256,  2219,  1010,
         2057,  2064, 22346,  1996, 15306,  1997,  1996,  2405,  4106,  1024,
         2045,  2001, 17075,  3350,  1997,  7386,  2011, 26261,  7666,  1999,
         2023,  2817,  1997,  6909,  5022,  1012,   102])"
21,1,"['results', 'representative']", Case study using stents to prevent strokes,seg_3,"be careful: do not generalize the results of this study to all patients and all stents. this study looked at patients with very specific characteristics who volunteered to be a part of this study and who may not be representative of all stroke patients. in addition, there are many types of stents and this study only considered the self-expanding wingspan stent (boston scientific). however, this study does leave us with an important lesson: we should keep our eyes open for surprises.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2022,  6176,  1024,  2079,  2025,  2236,  4697,  1996,  3463,
         1997,  2023,  2817,  2000,  2035,  5022,  1998,  2035, 26261,  7666,
         1012,  2023,  2817,  2246,  2012,  5022,  2007,  2200,  3563,  6459,
         2040, 14382,  2000,  2022,  1037,  2112,  1997,  2023,  2817,  1998,
         2040,  2089,  2025,  2022,  4387,  1997,  2035,  6909,  5022,  1012,
         1999,  2804,  1010,  2045,  2024,  2116,  4127,  1997, 26261,  7666,
         1998,  2023,  2817,  2069,  2641,  1996,  2969,  1011,  9186,  9635,
        26261,  3372,  1006,  3731,  4045,  1007,  1012,  2174,  1010,  2023,
         2817,  2515,  2681,  2149,  2007,  2019,  2590, 10800,  1024,  2057,
         2323,  2562,  2256,  2159,  2330,  2005, 20096,  1012,   102])"
22,1,['treatment'], Case study using stents to prevent strokes,seg_3,"oluopf the t mr ige raait nempe ain nt , which10 33 43 appropriate area (s) used in occurred within 30 min and still persc isto en d t 2r 4o hl later. 2 44 46 the treatment of migraine atsince the most active site in contt roo llitnaglmigraine pain12 77 89 was the antero-internal part of the antitragus, the aim of tacks. this study was to verify the therapeutic value of this elective area (appropriate point) and to compare it with an area of the ear (representing the sciatic nerve) which is probably i m",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 19330, 19098, 14376,  1996,  1056,  2720,  1045,  3351, 10958,
         4886,  2102, 11265,  8737,  2063,  7110, 23961,  1010,  2029, 10790,
         3943,  4724,  6413,  2181,  1006,  1055,  1007,  2109,  1999,  4158,
         2306,  2382,  8117,  1998,  2145,  2566, 11020, 21541,  2080,  4372,
         1040,  1056,  1016,  2099,  1018,  2080,  1044,  2140,  2101,  1012,
         1016,  4008,  4805,  1996,  3949,  1997, 19117, 26456,  2012, 11493,
         3401,  1996,  2087,  3161,  2609,  1999,  9530,  4779, 20996,  2080,
         2222,  4183,  2532, 23296,  4328, 17643,  3170,  3255, 12521,  6255,
         6486,  2001,  1996, 14405, 10624,  1011,  4722,  2112,  1997,  1996,
         3424,  6494, 12349,  1010,  1996,  6614,  1997, 26997,  2015,  1012,
         2023,  2817,  2001,  2000, 20410,  1996, 17261,  3643,  1997,  2023,
        11322,  3512,  2181,  1006,  6413,  2391,  1007,  1998,  2000, 12826,
         2009,  2007,  2019,  2181,  1997,  1996,  4540,  1006,  5052,  1996,
        16596, 12070,  9113,  1007,  2029,  2003,  2763,  1045,  1049,   102])"
23,0,['n'], Case study using stents to prevent strokes,seg_3,n ients i inn gtrh,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1050, 29464,  7666,  1045,  7601, 14181, 25032,   102])"
24,0,[], Case study using stents to prevent strokes,seg_3,"ouep tbr,ea thtem",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 15068, 13699, 26419,  2099,  1010, 19413, 16215, 18532,   102])"
25,0,[], Case study using stents to prevent strokes,seg_3,loewnetr gbr raonu chpow,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  8840,  7974,  7159,  2099, 16351,  2099, 10546, 11231, 10381,
         6873,  2860,   102])"
26,0,['e'], Case study using stents to prevent strokes,seg_3,f e three ap nta heiln,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1042,  1041,  2093,  9706, 23961,  2050,  2002,  4014,  2078,
          102])"
27,0,[], Case study using stents to prevent strokes,seg_3,eee 24 hours after receiving acupuncture? materials and meth(od d) s your findings so far migh,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 25212,  2063,  2484,  2847,  2044,  4909,  9353,  6279,  4609,
        14890,  1029,  4475,  1998,  2777,  2232,  1006,  1051,  2094,  1040,
         1007,  1055,  2115,  9556,  2061,  2521, 19117,  2232,   102])"
28,1,['treatment'], Case study using stents to prevent strokes,seg_3,"eta di ,ve treatment for migraines for all people",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 27859,  4487,  1010,  2310,  3949,  2005, 19117, 26456,  2015,
         2005,  2035,  2111,   102])"
29,0,[], Case study using stents to prevent strokes,seg_3,the study enrolled 94 few mah,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([ 101, 1996, 2817, 8302, 6365, 2261, 5003, 2232,  102])"
30,0,[], Case study using stents to prevent strokes,seg_3,"leos, sdu iaff gneorsefdro asmmim graiignr eaintewso.foh r eo acw heev are",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  6688,  2015,  1010, 17371,  2226, 24264,  4246,  1043, 23585,
        22573,  2546, 22196,  2004,  7382,  5714, 24665,  4886, 23773,  2099,
        19413, 18447,  7974,  6499,  1012,  1042, 11631,  1054,  1041,  2080,
         9353,  2860, 18235,  2615,  2024,   102])"
31,0,"['o', 'n']", Case study using stents to prevent strokes,seg_3,". r this is not the only possible conclusion that can be drawn based without aura following theoinntey rnoau tiornafi lncd laisn sig ficsats ion foa f r. wih n aat ll ipsatio entse , o thteheear apcuopsusnicb tulre ewx asplaa lwnaa ystipoen rfor the observed difference between the headache disorders [5], whpoew rc",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1012,  1054,  2023,  2003,  2025,  1996,  2069,  2825,  7091,
         2008,  2064,  2022,  4567,  2241,  2302, 15240,  2206, 14833, 23111,
         2618,  2100, 29300, 10441,  2226, 14841,  9691, 10354,  2072,  1048,
        12273,  2094, 21110,  2015,  2078,  9033,  2290, 10882,  6169, 11149,
        10163,  1042, 10441,  1042,  1054,  1012, 15536,  2232,  1050,  9779,
         2102,  2222, 12997, 16846,  3695,  4372,  3215,  2063,  1010,  1051,
        16215,  2618, 21030,  2906,  9706, 10841, 11923,  2271,  8713,  2497,
        10722, 20974,  2063,  1041,  2860,  2595,  2004, 24759, 11057,  1048,
         7962, 11057,  1061, 16643,  6873,  2368, 21792,  2953,  1996,  5159,
         4489,  2090,  1996, 14978, 10840,  1031,  1019,  1033,  1010,  1059,
        22269,  8913,  2860, 22110,   102])"
32,0,[], Case study using stents to prevent strokes,seg_3,ereen sutbasg eqeuseno tlfy epxa am ti,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  9413, 12129, 10514,  2102, 22083,  2290,  1041,  4160, 10600,
        16515,  1056, 10270,  2100,  4958, 18684,  2572, 14841,   102])"
33,0,[], Case study using stents to prevent strokes,seg_3,perf ierneceed2a4 cuphuonu cturrs ista . fttheeranraelc,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2566,  2546, 29464, 12119,  3401,  2098,  2475,  2050,  2549,
         2452,  6979,  2239,  2226, 14931,  3126,  2869, 21541,  2050,  1012,
         3027, 10760, 23169, 16652, 15472,   102])"
34,1,['data'], Case study using stents to prevent strokes,seg_3,"yse isivoifng acupuncture in the two groups? at the women’s headache centre, department of gynaethe diaries collecting vas data was conducted by an cology and obstetrics of turin university. they were all impartial operator who did not know the group each patient included in the study1 du .2 ring asmiin",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1061,  3366,  2003, 20984, 10128,  3070,  9353,  6279,  4609,
        14890,  1999,  1996,  2048,  2967,  1029,  2012,  1996,  2308,  1521,
         1055, 14978,  2803,  1010,  2533,  1997,  1043, 18279, 11031,  2063,
        18707,  9334, 12436,  2015,  2951,  2001,  4146,  2011,  2019,  8902,
        15707,  1998, 27885, 13473, 29392,  1997, 13667,  2118,  1012,  2027,
         2020,  2035, 17727,  8445,  4818,  6872,  2040,  2106,  2025,  2113,
         1996,  2177,  2169,  5776,  2443,  1999,  1996,  2817,  2487,  4241,
         1012,  1016,  3614,  2004,  4328,  2378,   102])"
35,1,['treatment'], Case study using stents to prevent strokes,seg_3,"gru ais neitai tts ackapn rodvida ednthiab t iot w ic as i, n. part i. researchers studying the effect of antibiotic treatment for acute i p",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 24665,  2226,  9932,  2015, 11265,  6590,  2072, 23746,  2015,
         9353,  2912,  2361,  2078,  8473, 17258,  2050,  3968,  3372, 12995,
         2497,  1056, 22834,  2102,  1059, 24582,  2004,  1045,  1010,  1050,
         1012,  2112,  1045,  1012,  6950,  5702,  1996,  3466,  1997,  3424,
        26591,  3949,  2005, 11325,  1045,  1052,   102])"
36,0,['e'], Case study using stents to prevent strokes,seg_3,e -6 adults diagnosed with acute sinusitis to,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1041,  1011,  1020,  6001, 11441,  2007, 11325,  8254,  2271,
        13706,  2000,   102])"
37,0,[], Case study using stents to prevent strokes,seg_3,gible patients were ro,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 21025,  3468,  5022,  2020, 20996,   102])"
38,0,[], Case study using stents to prevent strokes,seg_3,ndobg linrdo lyup ass si:gnterdeta ottm heentticoar,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1050,  3527,  2497,  2290, 11409, 20683,  1048, 10513,  2361,
         4632,  9033,  1024,  1043, 10111, 25547,  2696, 27178, 21246, 18235,
         3372,  4588, 10441,  2099,   102])"
39,0,[], Case study using stents to prevent strokes,seg_3,l c evoan lutar tio on,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1048,  1039, 23408, 10441,  2078, 11320,  7559, 14841,  2080,
         2006,   102])"
40,0,[], Case study using stents to prevent strokes,seg_3,l. os f ttu hedy difp fea rerntciec sip bea twnetesnrtehc eev,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1048,  1012,  9808,  1042, 23746,  2226,  2002,  5149,  4487,
        22540, 10768,  2050,  2128,  6826, 13535, 23783, 10668, 26892,  1056,
         7962, 12870,  2015, 16118,  2618, 16257, 25212,  2615,   102])"
41,0,[], Case study using stents to prevent strokes,seg_3,s either a 10-day course of amoxicillin (an following two groupasn : tgirb,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1055,  2593,  1037,  2184,  1011,  2154,  2607,  1997,  2572,
        11636, 28775, 21202,  1006,  2019,  2206,  2048,  2177,  3022,  2078,
         1024,  1056,  5856, 15185,   102])"
42,1,['range'], Case study using stents to prevent strokes,seg_3,"ou io p ta ic) (no=r 4a 6)p (a la vecre agbeoagseimio la btrain in ed a inpp t0e ,atr1a ,ntc2e , ta3nadndtats4tien. tht eh tweopglra oucpesbo consisted of symptomatic treatments 35.93 years, range 15s–u6c 0h",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 15068, 22834,  1052, 11937, 24582,  1007,  1006,  2053,  1027,
         1054, 26424,  1020,  1007,  1052,  1006,  1037,  2474,  2310, 16748,
        12943,  4783, 10441,  5620, 12112,  3695,  2474, 18411, 21166,  1999,
         3968,  1037,  1999,  9397,  1056,  2692,  2063,  1010,  2012,  2099,
         2487,  2050,  1010, 23961,  2278,  2475,  2063,  1010, 11937,  2509,
        25389, 26379, 11149,  2549,  9515,  2078,  1012, 16215,  2102, 15501,
         1056,  8545,  7361, 23296,  2527, 15068, 21906,  2229,  5092,  5031,
         1997, 25353, 27718,  9626,  4588, 13441,  3486,  1012,  6109,  2086,
         1010,  2846,  2321,  2015,  1516,  1057,  2575,  2278,  1014,  2232,
          102])"
43,0,[], Case study using stents to prevent strokes,seg_3,stludd iee dcw on,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2358,  7630, 14141, 29464,  2063,  5887,  2860,  2006,   102])"
44,0,[], Case study using stents to prevent strokes,seg_3,"asge pesrt foarnmtes d, ue sitncg. anatanatlh yse is eon",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2004,  3351, 21877, 21338,  2102,  1042, 10441,  6826, 20492,
         2229,  1040,  1010,  1057,  2063,  4133, 12273,  2290,  1012,  9617,
        20496, 19646,  2232,  1061,  3366,  2003,  1041,  2239,   102])"
45,0,[], Case study using stents to prevent strokes,seg_3,"fdvao rifant cehe 10-day period, patients were asked if 3",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1042,  2094, 24682, 15544, 15143,  2102,  8292,  5369,  2184,
         1011,  2154,  2558,  1010,  5022,  2020,  2356,  2065,  1017,   102])"
46,0,[], Case study using stents to prevent strokes,seg_3,cyh epx atip enetrw,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 22330,  2232,  4958,  2595,  2012, 11514,  4372,  3388,  2099,
         2860,   102])"
47,0,[], Case study using stents to prevent strokes,seg_3,iean s cae skd edim,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 29464,  2319,  1055,  6187,  2063, 15315,  2094,  3968,  5714,
          102])"
48,0,[], Case study using stents to prevent strokes,seg_3,tiprle esponses is summarized below.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  5955, 20927,  9686, 26029,  8583,  2003, 22539,  2917,  1012,
          102])"
49,1,"['intensity', 't test', 'test']", Case study using stents to prevent strokes,seg_3,"informed consent to participation in the study. moreover, to evaluate the difference between group b migraine intensity was measured by means of a vas and group a, a t test for uns pae irlefd-rdeap taow",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  6727,  9619,  2000,  6577,  1999,  1996,  2817,  1012,  9308,
         1010,  2000, 16157,  1996,  4489,  2090,  2177,  1038, 19117, 26456,
         8015,  2001,  7594,  2011,  2965,  1997,  1037, 12436,  2015,  1998,
         2177,  1037,  1010,  1037,  1056,  3231,  2005,  4895,  2015,  6643,
         2063, 20868,  2571,  2546,  2094,  1011, 16428,  5243,  2361, 20216,
         2860,   102])"
50,0,[], Case study using stents to prevent strokes,seg_3,im ayspr po erv,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 10047,  1037,  7274, 18098, 13433,  9413,  2615,   102])"
51,1,"['variable', 'level']", Case study using stents to prevent strokes,seg_3,"- ement before applying nct (t0). formed for each level of the variable ‘‘tii mn e’’s .y inm thp et co asm e os f in group a, a specific algometer exerting a maximum proportions, a chi square tey st ewsas applied. all ann",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1011,  7861,  4765,  2077, 11243, 13316,  2102,  1006,  1056,
         2692,  1007,  1012,  2719,  2005,  2169,  2504,  1997,  1996,  8023,
         1520,  1520, 14841,  2072, 24098,  1041,  1521,  1521,  1055,  1012,
         1061,  1999,  2213, 16215,  2361,  3802,  2522,  2004,  2213,  1041,
         9808,  1042,  1999,  2177,  1037,  1010,  1037,  3563,  2632,  3995,
        22828,  4654,  8743,  2075,  1037,  4555, 19173,  1010,  1037,  9610,
         2675,  8915,  2100,  2358,  1041,  9333,  3022,  4162,  1012,  2035,
         5754,   102])"
52,1,"['statistical', 'test']", Case study using stents to prevent strokes,seg_3,"alo yses total pressure of 250 g (sedatelec, france) was chosen to were performed using the statistical package for the social identify the tender points with pain–pressure test (ppt).grosu cip",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2632,  2080,  1061,  8583,  2561,  3778,  1997,  5539,  1043,
         1006,  7367, 13701,  2571,  2278,  1010,  2605,  1007,  2001,  4217,
         2000,  2020,  2864,  2478,  1996,  7778,  7427,  2005,  1996,  2591,
         6709,  1996,  8616,  2685,  2007,  3255,  1516,  3778,  3231,  1006,
         4903,  2102,  1007,  1012, 24665,  2891,  2226, 25022,  2361,   102])"
53,1,['mean'], Case study using stents to prevent strokes,seg_3,"ences t (srpesa s)tsm oftewnat re prog6 ra6m. all values given1i9 n the 85 every tender point located within the identified area by the followingc teo xn t at rr eo rl eported as6 ar5 ithmetic mean (±se1 m 6). 81 pilot study (fig. 1, area m) was tested with nct for 10 s total 131 35 166 starting from the auricle, that was ipsilateral, to the side of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  4372,  9623,  1056,  1006,  5034, 10374,  2050,  1055,  1007,
        24529,  2213,  1997,  2618,  7962,  4017,  2128,  4013,  2290,  2575,
        10958,  2575,  2213,  1012,  2035,  5300,  2445,  2487,  2072,  2683,
         1050,  1996,  5594,  2296,  8616,  2391,  2284,  2306,  1996,  4453,
         2181,  2011,  1996,  2206,  2278,  8915,  2080,  1060,  2078,  1056,
         2012, 25269,  1041,  2080,  1054,  2140,  4958, 15613,  2004,  2575,
        12098,  2629,  2009, 14227, 16530,  2812,  1006,  1081,  3366,  2487,
         1049,  1020,  1007,  1012,  6282,  4405,  2817,  1006, 20965,  1012,
         1015,  1010,  2181,  1049,  1007,  2001,  7718,  2007, 13316,  2102,
         2005,  2184,  1055,  2561, 14677,  3486, 18610,  3225,  2013,  1996,
         8740,  7277,  2571,  1010,  2008,  2001, 12997, 27572, 24932,  2389,
         1010,  2000,  1996,  2217,  1997,   102])"
54,1,"['experienced', 'treatment group', 'treatment']", Case study using stents to prevent strokes,seg_3,ultsthe treatment group experienced improvement in symptoms? permanent needle ((b,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 17359,  3215, 10760,  3949,  2177,  5281,  7620,  1999,  8030,
         1029,  4568, 12201,  1006,  1006,  1038,   102])"
55,0,[], Case study using stents to prevent strokes,seg_3,"sehdaattepleercc,enft ranecx e)pewraisenceod nlyim 89p parto iev ne tsm oue tn oftthienensty iremgp rotuo pm of s94in",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  7367, 14945, 11057,  4674, 10814,  2121,  9468,  1010,  4372,
         6199,  2743,  8586,  2595,  1041,  1007, 29071, 14995,  5054,  3401,
         7716, 17953, 10139,  2213,  6486,  2361,  2112,  2080, 29464,  2615,
        11265, 24529,  2213, 15068,  2063, 28286,  1997,  4779,  4048,  8625,
        23808,  2100, 20868,  6633, 21600, 18672, 19098,  7610,  1997,  1055,
         2683,  2549,  2378,   102])"
56,1,['experiment'], Case study using stents to prevent strokes,seg_3,"(43tih negrocuopntrol group? inserted after 1 min. on the contrary, if pain did not lessen a, 46 in group b) completed the experiment. four patients after 1 min, a furthe( rc te)ndien",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1006,  4724,  3775,  2232, 12593, 10841,  7361,  3372, 13153,
         2177,  1029, 12889,  2044,  1015,  8117,  1012,  2006,  1996, 10043,
         1010,  2065,  3255,  2106,  2025,  2625,  2368,  1037,  1010,  4805,
         1999,  2177,  1038,  1007,  2949,  1996,  7551,  1012,  2176,  5022,
         2044,  1015,  8117,  1010,  1037,  6519, 10760,  1006, 22110,  8915,
         1007,  1050, 10265,  2078,   102])"
57,0,[], Case study using stents to prevent strokes,seg_3,"r pw oinh t iwch as g chrao llu enp ged ind thae higwh ite hdrrepwer frcoemntha egse tudoyf, p beact au ie senthseyex expperie ie ncnec deanimprovement in symptoms? same area and so on( .dw)hey",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1054,  1052,  2860,  1051,  2378,  2232,  1056,  1045, 16526,
         2232,  2004,  1043, 10381, 25667,  2222,  2226,  4372,  2361, 16216,
         2094, 27427, 22794,  2063,  7632,  2290,  2860,  2232,  2009,  2063,
        10751, 14343, 28400,  2121, 10424, 16288,  2213,  3372,  3270,  1041,
         5620,  2063, 10722,  3527,  2100,  2546,  1010,  1052, 26892,  6593,
         8740, 29464,  2741,  7898, 17683,  2595,  4654, 18620,  2666, 29464,
        13316,  2638,  2278,  4670,  5714, 21572,  3726,  3672,  1999,  8030,
         1029,  2168,  2181,  1998,  2061,  2006,  1006,  1012,  1040,  2860,
         1007,  4931,   102])"
58,0,[], Case study using stents to prevent strokes,seg_3,pau tirenfi tsnbd ecianmgesaw so,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 29025, 12824,  2078,  8873, 24529, 27698,  2094, 14925,  2937,
        24798, 22447,  2860,  2061,   102])"
59,0,['n'], Case study using stents to prevent strokes,seg_3,arefa ofram n igh,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([ 101, 2024, 7011, 1997, 6444, 1050, 1045, 5603,  102])"
60,0,[], Case study using stents to prevent strokes,seg_3,untbesau rag blgeeesxt acearbr ate ioanlod f p iff,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  4895,  2102, 12681,  4887, 17768,  1038, 28875, 10285, 18413,
         9078,  2906, 19892,  8823, 22834,  2319,  4135,  2094,  1042,  1052,
         2065,  2546,   102])"
61,0,[], Case study using stents to prevent strokes,seg_3,ainer inetn hece periin odepff ree cecdt in iv,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  7110,  2121,  1999,  3388,  2078,  2002,  3401,  2566,  6137,
         2078, 24040, 14376,  2546,  2128,  2063,  8292, 19797,  2102,  1999,
         4921,   102])"
62,1,['control'], Case study using stents to prevent strokes,seg_3,"ge thn eess of antibiotic and placebo treatments initial decrease in the pain in all the zones of the head last control at 24 h (two from group a and two from group affected, they were invitedfo toruism e apsrpo ecv ifi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 16216, 16215,  2078, 25212,  4757,  1997,  3424, 26591,  1998,
         2173,  5092, 13441,  3988,  9885,  1999,  1996,  3255,  1999,  2035,
         1996, 10019,  1997,  1996,  2132,  2197,  2491,  2012,  2484,  1044,
         1006,  2048,  2013,  2177,  1037,  1998,  2048,  2013,  2177,  5360,
         1010,  2027,  2020,  4778, 14876, 17153, 27020,  2213,  1041,  9706,
        21338,  6873, 14925,  2615,  2065,  2072,   102])"
63,0,[], Case study using stents to prevent strokes,seg_3,in c g diasrym carpdttomsbo,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1999,  1039,  1043, 22939, 21338, 24335, 29267, 11927, 20389,
        19022,  2080,   102])"
64,0,[], Case study using stents to prevent strokes,seg_3,inwues reiteixsc.luh deo dw fre,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1999, 16050,  2229, 24964,  2618,  7646, 11020,  1012, 11320,
         2232,  2139,  2080,  1040,  2860, 10424,  2063,   102])"
65,0,[], Case study using stents to prevent strokes,seg_3,"omvetrh,e t sth atiis stiicsalnao natlytsh isesio",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 18168, 19510, 25032,  1010,  1041,  1056,  2358,  2232,  2012,
         6137,  2015,  2358,  6137,  6169,  2389,  2532,  2080, 14085,  2135,
         3215,  2232,  2003,  2229,  3695,   102])"
66,1,['intensity'], Case study using stents to prevent strokes,seg_3,ncnely possible conclusion that can be drawn score the intensity of the pab ina w se,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 13316, 11877,  2100,  2825,  7091,  2008,  2064,  2022,  4567,
         3556,  1996,  8015,  1997,  1996,  6643,  2497, 27118,  1059,  7367,
          102])"
67,1,['intervals'], Case study using stents to prevent strokes,seg_3,thf ea yr r. eqw uesh tedat thi es ro emn oe vao lt oh fe tr hep no es es dli eb s.le oe nexpal ta ientation for the observed difference between intervals: after 10 min (t th,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 16215,  2546, 19413,  1061,  2099,  1054,  1012,  1041,  4160,
         2860,  1057,  9953,  6945,  4017, 16215,  2072,  9686, 20996,  7861,
         2078,  1051,  2063, 12436,  2080,  8318,  2821, 10768, 19817,  2002,
         2361,  2053,  9686,  9686, 21469,  2072,  1041,  2497,  1055,  1012,
         3393,  1051,  2063, 11265,  2595, 12952, 11937, 29464, 23436,  2005,
         1996,  5159,  4489,  2090, 14025,  1024,  2044,  2184,  8117,  1006,
         1056, 16215,   102])"
68,0,['e'], Case study using stents to prevent strokes,seg_3,"inge (ts2o ),f ap fta ertien frtosmign rot upha e dain d t",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101, 13749,  2063,  1006, 24529,  2475,  2080,  1007,  1010,  1042,
         9706,  3027,  2050,  9413,  9515,  2078, 10424, 13122,  4328, 16206,
        18672,  2039,  3270,  1041, 18765,  2078,  1040,  1056,   102])"
69,0,[], Case study using stents to prevent strokes,seg_3,t giiovt eihceracn ond senp tlta oc theeb im opt,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1056, 21025,  3695,  2615,  2102,  1041, 19190, 19357,  2278,
         2078,  2006,  2094, 12411,  2361,  1056, 24458,  1051,  2278, 14992,
         2497, 10047, 23569,   102])"
70,0,[], Case study using stents to prevent strokes,seg_3,"larne ta oftm theent groups that experience improvement 60 min (t3), after 120 minin (t4s)y , m",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  2474, 12119, 11937,  1997, 21246, 14992,  3372,  2967,  2008,
         3325,  7620,  3438,  8117,  1006,  1056,  2509,  1007,  1010,  2044,
         6036,  7163,  2078,  1006,  1056,  2549,  2015,  1007,  1061,  1010,
         1049,   102])"
71,1,['mean'], Case study using stents to prevent strokes,seg_3,"andpatfo tem r 2s4 hof(ts5i)n . usitiss?emi-permanent needles. in group a, the mean number of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 2553,  2817,  2478, 26261,  7666,  2000,  4652, 13692])","tensor([  101,  1998,  4502, 24475,  2080,  8915,  2213,  1054,  1016,  2015,
         2549,  7570,  2546,  1006, 24529,  2629,  2072,  1007,  1050,  1012,
         2149, 13706,  2015,  1029, 12495,  1011,  4568, 17044,  1012,  1999,
         2177,  1037,  1010,  1996,  2812,  2193,  1997,   102])"
72,1,"['data matrix', 'data']", Data basics,seg_5,effective organization and description of data is a first step in most analyses. this section introduces the data matrix for organizing data as well as some terminology about different forms of data that will be used throughout this book.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  4621,  3029,  1998,  6412,  1997,  2951,  2003,  1037,  2034,
         3357,  1999,  2087, 16478,  1012,  2023,  2930, 13999,  1996,  2951,
         8185,  2005, 10863,  2951,  2004,  2092,  2004,  2070, 18444,  2055,
         2367,  3596,  1997,  2951,  2008,  2097,  2022,  2109,  2802,  2023,
         2338,  1012,   102])"
73,1,"['data matrices', 'observations', 'variables', 'data']", Data basics,seg_5,"1.2.1 observations, variables, and data matrices",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0.])","tensor([ 2951, 24078])","tensor([  101,  1015,  1012,  1016,  1012,  1015,  9420,  1010, 10857,  1010,
         1998,  2951, 21520,   102])"
74,1,"['set', 'observations', 'data set', 'data']", Data basics,seg_5,"figure 1.3 displays rows 1, 2, 3, and 50 of a data set for 50 randomly sampled loans offered through lending club, which is a peer-to-peer lending company. these observations will be referred to as the loan50 data set.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  3275,  1015,  1012,  1017,  8834, 10281,  1015,  1010,  1016,
         1010,  1017,  1010,  1998,  2753,  1997,  1037,  2951,  2275,  2005,
         2753, 18154, 18925, 10940,  3253,  2083, 18435,  2252,  1010,  2029,
         2003,  1037,  8152,  1011,  2000,  1011,  8152, 18435,  2194,  1012,
         2122,  9420,  2097,  2022,  3615,  2000,  2004,  1996,  5414, 12376,
         2951,  2275,  1012,   102])"
75,1,"['rate', 'observational unit', 'table', 'variables', 'case']", Data basics,seg_5,"each row in the table represents a single loan. the formal name for a row is a case or observational unit. the columns represent characteristics, called variables, for each of the loans. for example, the first row represents a loan of $7,500 with an interest rate of 7.34%, where the borrower is based in maryland (md) and has an income of $70,000.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2169,  5216,  1999,  1996,  2795,  5836,  1037,  2309,  5414,
         1012,  1996,  5337,  2171,  2005,  1037,  5216,  2003,  1037,  2553,
         2030,  8089,  2389,  3131,  1012,  1996,  7753,  5050,  6459,  1010,
         2170, 10857,  1010,  2005,  2169,  1997,  1996, 10940,  1012,  2005,
         2742,  1010,  1996,  2034,  5216,  5836,  1037,  5414,  1997,  1002,
         1021,  1010,  3156,  2007,  2019,  3037,  3446,  1997,  1021,  1012,
         4090,  1003,  1010,  2073,  1996, 17781,  2121,  2003,  2241,  1999,
         5374,  1006,  9108,  1007,  1998,  2038,  2019,  3318,  1997,  1002,
         3963,  1010,  2199,  1012,   102])"
76,0,[], Data basics,seg_5,"what is the grade of the first loan in figure 1.3? and what is the home ownership status of the borrower for that first loan? for these guided practice questions, you can check your answer in the footnote.4",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 2951, 24078])","tensor([  101,  2054,  2003,  1996,  3694,  1997,  1996,  2034,  5414,  1999,
         3275,  1015,  1012,  1017,  1029,  1998,  2054,  2003,  1996,  2188,
         6095,  3570,  1997,  1996, 17781,  2121,  2005,  2008,  2034,  5414,
         1029,  2005,  2122,  8546,  3218,  3980,  1010,  2017,  2064,  4638,
         2115,  3437,  1999,  1996,  3329, 22074,  1012,  1018,   102])"
77,1,"['measurement', 'variables', 'data', 'variable']", Data basics,seg_5,"in practice, it is especially important to ask clarifying questions to ensure important aspects of the data are understood. for instance, it is always important to be sure we know what each variable means and the units of measurement. descriptions of the loan50 variables are given in figure 1.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1999,  3218,  1010,  2009,  2003,  2926,  2590,  2000,  3198,
        25037,  2075,  3980,  2000,  5676,  2590,  5919,  1997,  1996,  2951,
         2024,  5319,  1012,  2005,  6013,  1010,  2009,  2003,  2467,  2590,
         2000,  2022,  2469,  2057,  2113,  2054,  2169,  8023,  2965,  1998,
         1996,  3197,  1997, 10903,  1012, 13271,  1997,  1996,  5414, 12376,
        10857,  2024,  2445,  1999,  3275,  1015,  1012,  1018,  1012,   102])"
78,1,"['data matrix', 'data']", Data basics,seg_5,figure 1.3: four rows from the loan50 data matrix.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  3275,  1015,  1012,  1017,  1024,  2176, 10281,  2013,  1996,
         5414, 12376,  2951,  8185,  1012,   102])"
79,1,"['set', 'variables', 'data set', 'data']", Data basics,seg_5,figure 1.4: variables and their descriptions for the loan50 data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  3275,  1015,  1012,  1018,  1024, 10857,  1998,  2037, 13271,
         2005,  1996,  5414, 12376,  2951,  2275,  1012,   102])"
80,1,"['observational unit', 'data matrix', 'data', 'variable', 'case']", Data basics,seg_5,"the data in figure 1.3 represent a data matrix, which is a convenient and common way to organize data, especially if collecting data in a spreadsheet. each row of a data matrix corresponds to a unique case (observational unit), and each column corresponds to a variable.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  2951,  1999,  3275,  1015,  1012,  1017,  5050,  1037,
         2951,  8185,  1010,  2029,  2003,  1037, 14057,  1998,  2691,  2126,
         2000, 10939,  2951,  1010,  2926,  2065,  9334,  2951,  1999,  1037,
        20861, 21030,  2102,  1012,  2169,  5216,  1997,  1037,  2951,  8185,
        14788,  2000,  1037,  4310,  2553,  1006,  8089,  2389,  3131,  1007,
         1010,  1998,  2169,  5930, 14788,  2000,  1037,  8023,  1012,   102])"
81,1,"['cases', 'data matrix', 'variables', 'data']", Data basics,seg_5,"when recording data, use a data matrix unless you have a very good reason to use a different structure. this structure allows new cases to be added as rows or new variables as new columns.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2043,  3405,  2951,  1010,  2224,  1037,  2951,  8185,  4983,
         2017,  2031,  1037,  2200,  2204,  3114,  2000,  2224,  1037,  2367,
         3252,  1012,  2023,  3252,  4473,  2047,  3572,  2000,  2022,  2794,
         2004, 10281,  2030,  2047, 10857,  2004,  2047,  7753,  1012,   102])"
82,1,"['data matrix', 'data']", Data basics,seg_5,"the grades for assignments, quizzes, and exams in a course are often recorded in a gradebook that takes the form of a data matrix. how might you organize grade data using a data matrix?5",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  7022,  2005, 14799,  1010, 19461, 11254,  1010,  1998,
        13869,  1999,  1037,  2607,  2024,  2411,  2680,  1999,  1037,  3694,
         8654,  2008,  3138,  1996,  2433,  1997,  1037,  2951,  8185,  1012,
         2129,  2453,  2017, 10939,  3694,  2951,  2478,  1037,  2951,  8185,
         1029,  1019,   102])"
83,1,"['rate', 'states', 'population', 'data']", Data basics,seg_5,"we consider data for 3,142 counties in the united states, which includes each county’s name, the state where it resides, its population in 2017, how its population changed from 2010 to 2017, poverty rate, and six additional characteristics. how might these data be organized in a data matrix?6",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2057,  5136,  2951,  2005,  1017,  1010, 16087,  5721,  1999,
         1996,  2142,  2163,  1010,  2029,  2950,  2169,  2221,  1521,  1055,
         2171,  1010,  1996,  2110,  2073,  2009, 11665,  1010,  2049,  2313,
         1999,  2418,  1010,  2129,  2049,  2313,  2904,  2013,  2230,  2000,
         2418,  1010,  5635,  3446,  1010,  1998,  2416,  3176,  6459,  1012,
         2129,  2453,  2122,  2951,  2022,  4114,  1999,  1037,  2951,  8185,
         1029,  1020,   102])"
84,1,"['set', 'data matrix', 'county', 'variables', 'data set', 'data']", Data basics,seg_5,"the data described in guided practice 1.4 represents the county data set, which is shown as a data matrix in figure 1.5. the variables are summarized in figure 1.6.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  2951,  2649,  1999,  8546,  3218,  1015,  1012,  1018,
         5836,  1996,  2221,  2951,  2275,  1010,  2029,  2003,  3491,  2004,
         1037,  2951,  8185,  1999,  3275,  1015,  1012,  1019,  1012,  1996,
        10857,  2024, 22539,  1999,  3275,  1015,  1012,  1020,  1012,   102])"
85,1,['variables'], Data basics,seg_5,1.2.2 types of variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2951, 24078])","tensor([  101,  1015,  1012,  1016,  1012,  1016,  4127,  1997, 10857,   102])"
86,1,"['rate', 'set', 'county', 'variables', 'data set', 'data', 'median']", Data basics,seg_5,"examine the unemp rate, pop, state, and median edu variables in the county data set. each of these variables is inherently different from the other three, yet some share certain characteristics.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101, 11628,  1996, 16655,  8737,  3446,  1010,  3769,  1010,  2110,
         1010,  1998,  3991,  3968,  2226, 10857,  1999,  1996,  2221,  2951,
         2275,  1012,  2169,  1997,  2122, 10857,  2003, 26096,  2367,  2013,
         1996,  2060,  2093,  1010,  2664,  2070,  3745,  3056,  6459,  1012,
          102])"
87,1,"['range', 'rate', 'average', 'numerical', 'variable']", Data basics,seg_5,"first consider unemp rate, which is said to be a numerical variable since it can take a wide range of numerical values, and it is sensible to add, subtract, or take averages with those values. on the other hand, we would not classify a variable reporting telephone area codes as numerical since the average, sum, and difference of area codes doesn’t have any clear meaning.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2034,  5136, 16655,  8737,  3446,  1010,  2029,  2003,  2056,
         2000,  2022,  1037, 15973,  8023,  2144,  2009,  2064,  2202,  1037,
         2898,  2846,  1997, 15973,  5300,  1010,  1998,  2009,  2003, 21082,
         2000,  5587,  1010,  4942,  6494,  6593,  1010,  2030,  2202, 20185,
         2007,  2216,  5300,  1012,  2006,  1996,  2060,  2192,  1010,  2057,
         2052,  2025, 26268,  1037,  8023,  7316,  7026,  2181,  9537,  2004,
        15973,  2144,  1996,  2779,  1010,  7680,  1010,  1998,  4489,  1997,
         2181,  9537,  2987,  1521,  1056,  2031,  2151,  3154,  3574,  1012,
          102])"
88,1,"['continuous', 'rate', 'variable', 'population', 'numerical', 'discrete']", Data basics,seg_5,"the pop variable is also numerical, although it seems to be a little different than unemp rate. this variable of the population count can only take whole non-negative numbers (0, 1, 2, ...). for this reason, the population variable is said to be discrete since it can only take numerical values with jumps. on the other hand, the unemployment rate variable is said to be continuous.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  3769,  8023,  2003,  2036, 15973,  1010,  2348,  2009,
         3849,  2000,  2022,  1037,  2210,  2367,  2084, 16655,  8737,  3446,
         1012,  2023,  8023,  1997,  1996,  2313,  4175,  2064,  2069,  2202,
         2878,  2512,  1011,  4997,  3616,  1006,  1014,  1010,  1015,  1010,
         1016,  1010,  1012,  1012,  1012,  1007,  1012,  2005,  2023,  3114,
         1010,  1996,  2313,  8023,  2003,  2056,  2000,  2022, 16246,  2144,
         2009,  2064,  2069,  2202, 15973,  5300,  2007, 14523,  1012,  2006,
         1996,  2060,  2192,  1010,  1996, 12163,  3446,  8023,  2003,  2056,
         2000,  2022,  7142,  1012,   102])"
89,1,"['categories', 'categorical variable', 'levels', 'variable', 'categorical']", Data basics,seg_5,"the variable state can take up to 51 values after accounting for washington, dc: al, ak, ..., and wy. because the responses themselves are categories, state is called a categorical variable, and the possible values are called the variable’s levels.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  8023,  2110,  2064,  2202,  2039,  2000,  4868,  5300,
         2044,  9529,  2005,  2899,  1010,  5887,  1024,  2632,  1010, 17712,
         1010,  1012,  1012,  1012,  1010,  1998,  1059,  2100,  1012,  2138,
         1996, 10960,  3209,  2024,  7236,  1010,  2110,  2003,  2170,  1037,
         4937, 27203,  8023,  1010,  1998,  1996,  2825,  5300,  2024,  2170,
         1996,  8023,  1521,  1055,  3798,  1012,   102])"
90,1,"['variable', 'ordinal', 'categorical variable', 'level', 'nominal', 'levels', 'county', 'median', 'categorical']", Data basics,seg_5,"finally, consider the median edu variable, which describes the median education level of county residents and takes values below hs, hs diploma, some college, or bachelors in each county. this variable seems to be a hybrid: it is a categorical variable but the levels have a natural ordering. a variable with these properties is called an ordinal variable, while a regular categorical variable without this type of special ordering is called a nominal variable. to simplify analyses, any ordinal variable in this book will be treated as a nominal (unordered) categorical variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2633,  1010,  5136,  1996,  3991,  3968,  2226,  8023,  1010,
         2029,  5577,  1996,  3991,  2495,  2504,  1997,  2221,  3901,  1998,
         3138,  5300,  2917, 26236,  1010, 26236,  9827,  1010,  2070,  2267,
         1010,  2030,  5065,  2015,  1999,  2169,  2221,  1012,  2023,  8023,
         3849,  2000,  2022,  1037,  8893,  1024,  2009,  2003,  1037,  4937,
        27203,  8023,  2021,  1996,  3798,  2031,  1037,  3019, 13063,  1012,
         1037,  8023,  2007,  2122,  5144,  2003,  2170,  2019,  2030, 18979,
         2140,  8023,  1010,  2096,  1037,  3180,  4937, 27203,  8023,  2302,
         2023,  2828,  1997,  2569, 13063,  2003,  2170,  1037, 15087,  8023,
         1012,  2000, 21934, 28250, 16478,  1010,  2151,  2030, 18979,  2140,
         8023,  1999,  2023,  2338,  2097,  2022,  5845,  2004,  1037, 15087,
         1006, 27776, 26764,  2098,  1007,  4937, 27203,  8023,  1012,   102])"
91,1,"['variables', 'numerical', 'categorical']", Data basics,seg_5,all variables categorical numerical,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0.])","tensor([ 2951, 24078])","tensor([  101,  2035, 10857,  4937, 27203, 15973,   102])"
92,1,['variables'], Data basics,seg_5,figure 1.7: breakdown of variables into their respective types.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  3275,  1015,  1012,  1021,  1024, 12554,  1997, 10857,  2046,
         2037,  7972,  4127,  1012,   102])"
93,1,"['continuous', 'discrete', 'statistics', 'variables', 'numerical', 'categorical']", Data basics,seg_5,"data were collected about students in a statistics course. three variables were recorded for each student: number of siblings, student height, and whether the student had previously taken a statistics course. classify each of the variables as continuous numerical, discrete numerical, or categorical.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2951,  2020,  5067,  2055,  2493,  1999,  1037,  6747,  2607,
         1012,  2093, 10857,  2020,  2680,  2005,  2169,  3076,  1024,  2193,
         1997,  9504,  1010,  3076,  4578,  1010,  1998,  3251,  1996,  3076,
         2018,  3130,  2579,  1037,  6747,  2607,  1012, 26268,  2169,  1997,
         1996, 10857,  2004,  7142, 15973,  1010, 16246, 15973,  1010,  2030,
         4937, 27203,  1012,   102])"
94,1,"['continuous', 'categories', 'discrete', 'statistics', 'variables', 'numerical', 'variable', 'categorical']", Data basics,seg_5,"the number of siblings and student height represent numerical variables. because the number of siblings is a count, it is discrete. height varies continuously, so it is a continuous numerical variable. the last variable classifies students into two categories – those who have and those who have not taken a statistics course – which makes this variable categorical.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  2193,  1997,  9504,  1998,  3076,  4578,  5050, 15973,
        10857,  1012,  2138,  1996,  2193,  1997,  9504,  2003,  1037,  4175,
         1010,  2009,  2003, 16246,  1012,  4578,  9783, 10843,  1010,  2061,
         2009,  2003,  1037,  7142, 15973,  8023,  1012,  1996,  2197,  8023,
         2465, 14144,  2493,  2046,  2048,  7236,  1516,  2216,  2040,  2031,
         1998,  2216,  2040,  2031,  2025,  2579,  1037,  6747,  2607,  1516,
         2029,  3084,  2023,  8023,  4937, 27203,  1012,   102])"
95,1,"['experienced', 'treatment', 'control', 'experiment', 'evaluating', 'numerical', 'variable']", Data basics,seg_5,an experiment is evaluating the effectiveness of a new drug in treating migraines. a group variable is used to indicate the experiment group for each patient: treatment or control. the num migraines variable represents the number of migraines the patient experienced during a 3-month period. classify each variable as either numerical or categorical?7,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2019,  7551,  2003, 23208,  1996, 12353,  1997,  1037,  2047,
         4319,  1999, 12318, 19117, 26456,  2015,  1012,  1037,  2177,  8023,
         2003,  2109,  2000,  5769,  1996,  7551,  2177,  2005,  2169,  5776,
         1024,  3949,  2030,  2491,  1012,  1996, 16371,  2213, 19117, 26456,
         2015,  8023,  5836,  1996,  2193,  1997, 19117, 26456,  2015,  1996,
         5776,  5281,  2076,  1037,  1017,  1011,  3204,  2558,  1012, 26268,
         2169,  8023,  2004,  2593, 15973,  2030,  4937, 27203,  1029,  1021,
          102])"
96,1,['variables'], Data basics,seg_5,1.2.3 relationships between variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2951, 24078])","tensor([  101,  1015,  1012,  1016,  1012,  1017,  6550,  2090, 10857,   102])"
97,1,['variables'], Data basics,seg_5,many analyses are motivated by a researcher looking for a relationship between two or more variables. a social scientist may like to answer some of the following questions:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2116, 16478,  2024, 12774,  2011,  1037, 10753,  2559,  2005,
         1037,  3276,  2090,  2048,  2030,  2062, 10857,  1012,  1037,  2591,
         7155,  2089,  2066,  2000,  3437,  2070,  1997,  1996,  2206,  3980,
         1024,   102])"
98,1,"['county', 'average', 'percent']", Data basics,seg_5,"(1) if homeownership is lower than the national average in one county, will the percent of multi-unit",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1006,  1015,  1007,  2065,  2188, 12384,  2545,  5605,  2003,
         2896,  2084,  1996,  2120,  2779,  1999,  2028,  2221,  1010,  2097,
         1996,  3867,  1997,  4800,  1011,  3131,   102])"
99,1,"['county', 'average']", Data basics,seg_5,structures in that county tend to be above or below the national average?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([ 101, 5090, 1999, 2008, 2221, 7166, 2000, 2022, 2682, 2030, 2917, 1996,
        2120, 2779, 1029,  102])"
100,1,"['county', 'average', 'population']", Data basics,seg_5,(2) does a higher than average increase in county population tend to correspond to counties with,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1006,  1016,  1007,  2515,  1037,  3020,  2084,  2779,  3623,
         1999,  2221,  2313,  7166,  2000, 17254,  2000,  5721,  2007,   102])"
101,1,['median'], Data basics,seg_5,higher or lower median household incomes?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  3020,  2030,  2896,  3991,  4398, 29373,  1029,   102])"
102,1,"['predictor', 'median', 'level']", Data basics,seg_5,(3) how useful a predictor is median education level for the median household income for us,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1006,  1017,  1007,  2129,  6179,  1037, 16014,  2953,  2003,
         3991,  2495,  2504,  2005,  1996,  3991,  4398,  3318,  2005,  2149,
          102])"
103,1,"['data', 'set', 'statistics', 'county', 'data set']", Data basics,seg_5,"to answer these questions, data must be collected, such as the county data set shown in figure 1.5. examining summary statistics could provide insights for each of the three questions about counties. additionally, graphs can be used to visually explore data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2000,  3437,  2122,  3980,  1010,  2951,  2442,  2022,  5067,
         1010,  2107,  2004,  1996,  2221,  2951,  2275,  3491,  1999,  3275,
         1015,  1012,  1019,  1012, 12843, 12654,  6747,  2071,  3073, 20062,
         2005,  2169,  1997,  1996,  2093,  3980,  2055,  5721,  1012,  5678,
         1010, 19287,  2064,  2022,  2109,  2000, 17453,  8849,  2951,  1012,
          102])"
104,1,"['data set', 'rate', 'county', 'set', 'plot', 'numerical', 'rates', 'scatterplot', 'variables', 'percent', 'data']", Data basics,seg_5,"scatterplots are one type of graph used to study the relationship between two numerical variables. figure 1.8 compares the variables homeownership and multi unit, which is the percent of units in multi-unit structures (e.g. apartments, condos). each point on the plot represents a single county. for instance, the highlighted dot corresponds to county 413 in the county data set: chattahoochee county, georgia, which has 39.4% of units in multi-unit structures and a homeownership rate of 31.3%. the scatterplot suggests a relationship between the two variables: counties with a higher rate of multi-units tend to have lower homeownership rates. we might brainstorm as to why this relationship exists and investigate each idea to determine which are the most reasonable explanations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  8040, 20097, 24759, 12868,  2024,  2028,  2828,  1997, 10629,
         2109,  2000,  2817,  1996,  3276,  2090,  2048, 15973, 10857,  1012,
         3275,  1015,  1012,  1022, 22963,  1996, 10857,  2188, 12384,  2545,
         5605,  1998,  4800,  3131,  1010,  2029,  2003,  1996,  3867,  1997,
         3197,  1999,  4800,  1011,  3131,  5090,  1006,  1041,  1012,  1043,
         1012,  9620,  1010, 25805,  2015,  1007,  1012,  2169,  2391,  2006,
         1996,  5436,  5836,  1037,  2309,  2221,  1012,  2005,  6013,  1010,
         1996, 11548, 11089, 14788,  2000,  2221,  4601,  2509,  1999,  1996,
         2221,  2951,  2275,  1024, 11834,  2696,  6806, 23555,  2063,  2221,
         1010,  4108,  1010,  2029,  2038,  4464,  1012,  1018,  1003,  1997,
         3197,  1999,  4800,  1011,  3131,  5090,  1998,  1037,  2188, 12384,
         2545,  5605,  3446,  1997,  2861,  1012,  1017,  1003,  1012,  1996,
         8040, 20097, 24759,  4140,  6083,  1037,  3276,  2090,  1996,  2048,
        10857,  1024,  5721,  2007,  1037,  3020,  3446,  1997,  4800,  1011,
         3197,  7166,  2000,  2031,  2896,  2188, 12384,  2545,  5605,  6165,
         1012,  2057,  2453, 14332, 20654,  2004,  2000,  2339,  2023,  3276,
         6526,  1998,  8556,  2169,  2801,  2000,  5646,  2029,  2024,  1996,
         2087,  9608, 17959,  1012,   102])"
105,1,['percent'], Data basics,seg_5,80% etar 60% pihsren 40% woe ● mo 20% h 0% 0% 20% 40% 60% 80% 100% percent of units in multi−unit structures,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  3770,  1003, 27859,  2099,  3438,  1003, 14255,  7898,  7389,
         2871,  1003, 24185,  2063,  1619,  9587,  2322,  1003,  1044,  1014,
         1003,  1014,  1003,  2322,  1003,  2871,  1003,  3438,  1003,  3770,
         1003,  2531,  1003,  3867,  1997,  3197,  1999,  4800, 22543, 19496,
         2102,  5090,   102])"
106,1,"['rate', 'county', 'scatterplot', 'percent']", Data basics,seg_5,"figure 1.8: a scatterplot of homeownership versus the percent of units that are in multi-unit structures for us counties. the highlighted dot represents chattahoochee county, georgia, which has a multi-unit rate of 39.4% and a homeownership rate of 31.3%.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  3275,  1015,  1012,  1022,  1024,  1037,  8040, 20097, 24759,
         4140,  1997,  2188, 12384,  2545,  5605,  6431,  1996,  3867,  1997,
         3197,  2008,  2024,  1999,  4800,  1011,  3131,  5090,  2005,  2149,
         5721,  1012,  1996, 11548, 11089,  5836, 11834,  2696,  6806, 23555,
         2063,  2221,  1010,  4108,  1010,  2029,  2038,  1037,  4800,  1011,
         3131,  3446,  1997,  4464,  1012,  1018,  1003,  1998,  1037,  2188,
        12384,  2545,  5605,  3446,  1997,  2861,  1012,  1017,  1003,  1012,
          102])"
107,1,"['associated', 'dependent', 'rates', 'variables', 'plot', 'dependent variables']", Data basics,seg_5,"the multi-unit and homeownership rates are said to be associated because the plot shows a discernible pattern. when two variables show some connection with one another, they are called associated variables. associated variables can also be called dependent variables and vice-versa.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  4800,  1011,  3131,  1998,  2188, 12384,  2545,  5605,
         6165,  2024,  2056,  2000,  2022,  3378,  2138,  1996,  5436,  3065,
         1037,  5860, 11795,  7028,  5418,  1012,  2043,  2048, 10857,  2265,
         2070,  4434,  2007,  2028,  2178,  1010,  2027,  2024,  2170,  3378,
        10857,  1012,  3378, 10857,  2064,  2036,  2022,  2170,  7790, 10857,
         1998,  3580,  1011, 18601,  1012,   102])"
108,1,['median'], Data basics,seg_5,20% egn s a r 10% h a c e y n 7 oi t r a e l v 0% u o po ● p −10% $0 $20k $40k $60k $80k $100k $120k median household income,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2322,  1003,  1041, 16206,  1055,  1037,  1054,  2184,  1003,
         1044,  1037,  1039,  1041,  1061,  1050,  1021,  1051,  2072,  1056,
         1054,  1037,  1041,  1048,  1058,  1014,  1003,  1057,  1051, 13433,
         1619,  1052,  1597, 10790,  1003,  1002,  1014,  1002,  2322,  2243,
         1002,  2871,  2243,  1002,  3438,  2243,  1002,  3770,  2243,  1002,
         2531,  2243,  1002,  6036,  2243,  3991,  4398,  3318,   102])"
109,1,"['scatterplot', 'county', 'median', 'population']", Data basics,seg_5,"figure 1.9: a scatterplot showing pop change against median hh income. owsley county of kentucky, is highlighted, which lost 3.63% of its population from 2010 to 2017 and had median household income of $22,736.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2951, 24078])","tensor([  101,  3275,  1015,  1012,  1023,  1024,  1037,  8040, 20097, 24759,
         4140,  4760,  3769,  2689,  2114,  3991,  1044,  2232,  3318,  1012,
        27593,  8002,  2221,  1997,  5612,  1010,  2003, 11548,  1010,  2029,
         2439,  1017,  1012,  6191,  1003,  1997,  2049,  2313,  2013,  2230,
         2000,  2418,  1998,  2018,  3991,  4398,  3318,  1997,  1002,  2570,
         1010,  6421,  2575,  1012,   102])"
110,1,"['set', 'variables', 'data set', 'data']", Data basics,seg_5,"examine the variables in the loan50 data set, which are described in figure 1.4 on page 12. create",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101, 11628,  1996, 10857,  1999,  1996,  5414, 12376,  2951,  2275,
         1010,  2029,  2024,  2649,  1999,  3275,  1015,  1012,  1018,  2006,
         3931,  2260,  1012,  3443,   102])"
111,1,['variables'], Data basics,seg_5,8 two questions about possible relationships between variables in loan50 that are of interest to you.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1022,  2048,  3980,  2055,  2825,  6550,  2090, 10857,  1999,
         5414, 12376,  2008,  2024,  1997,  3037,  2000,  2017,  1012,   102])"
112,1,"['associated', 'population', 'scatterplot', 'variables', 'median']", Data basics,seg_5,"this example examines the relationship between a county’s population change from 2010 to 2017 and median household income, which is visualized as a scatterplot in figure 1.9. are these variables associated?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2023,  2742, 20798,  1996,  3276,  2090,  1037,  2221,  1521,
         1055,  2313,  2689,  2013,  2230,  2000,  2418,  1998,  3991,  4398,
         3318,  1010,  2029,  2003,  5107,  3550,  2004,  1037,  8040, 20097,
        24759,  4140,  1999,  3275,  1015,  1012,  1023,  1012,  2024,  2122,
        10857,  3378,  1029,   102])"
113,1,"['associated', 'population', 'county', 'variables', 'plot', 'median']", Data basics,seg_5,"the larger the median household income for a county, the higher the population growth observed for the county. while this trend isn’t true for every county, the trend in the plot is evident. since there is some relationship between the variables, they are associated.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1996,  3469,  1996,  3991,  4398,  3318,  2005,  1037,  2221,
         1010,  1996,  3020,  1996,  2313,  3930,  5159,  2005,  1996,  2221,
         1012,  2096,  2023,  9874,  3475,  1521,  1056,  2995,  2005,  2296,
         2221,  1010,  1996,  9874,  1999,  1996,  5436,  2003, 10358,  1012,
         2144,  2045,  2003,  2070,  3276,  2090,  1996, 10857,  1010,  2027,
         2024,  3378,  1012,   102])"
114,1,"['association', 'associated', 'population', 'rates', 'variables', 'positive association', 'median', 'negatively associated']", Data basics,seg_5,"because there is a downward trend in figure 1.8 – counties with more units in multi-unit structures are associated with lower homeownership – these variables are said to be negatively associated. a positive association is shown in the relationship between the median hh income and pop change in figure 1.9, where counties with higher median household income tend to have higher rates of population growth.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2138,  2045,  2003,  1037, 14047,  9874,  1999,  3275,  1015,
         1012,  1022,  1516,  5721,  2007,  2062,  3197,  1999,  4800,  1011,
         3131,  5090,  2024,  3378,  2007,  2896,  2188, 12384,  2545,  5605,
         1516,  2122, 10857,  2024,  2056,  2000,  2022, 19762,  3378,  1012,
         1037,  3893,  2523,  2003,  3491,  1999,  1996,  3276,  2090,  1996,
         3991,  1044,  2232,  3318,  1998,  3769,  2689,  1999,  3275,  1015,
         1012,  1023,  1010,  2073,  5721,  2007,  3020,  3991,  4398,  3318,
         7166,  2000,  2031,  3020,  6165,  1997,  2313,  3930,  1012,   102])"
115,1,"['variables', 'associated', 'independent']", Data basics,seg_5,"if two variables are not associated, then they are said to be independent. that is, two variables are independent if there is no evident relationship between the two.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2065,  2048, 10857,  2024,  2025,  3378,  1010,  2059,  2027,
         2024,  2056,  2000,  2022,  2981,  1012,  2008,  2003,  1010,  2048,
        10857,  2024,  2981,  2065,  2045,  2003,  2053, 10358,  3276,  2090,
         1996,  2048,  1012,   102])"
116,1,"['variables', 'associated', 'independent']", Data basics,seg_5,a pair of variables are either related in some way (associated) or not (independent). no pair of variables is both associated and independent.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1037,  3940,  1997, 10857,  2024,  2593,  3141,  1999,  2070,
         2126,  1006,  3378,  1007,  2030,  2025,  1006,  2981,  1007,  1012,
         2053,  3940,  1997, 10857,  2003,  2119,  3378,  1998,  2981,  1012,
          102])"
117,1,"['response variables', 'response', 'variables', 'explanatory']", Data basics,seg_5,1.2.4 explanatory and response variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0.])","tensor([ 2951, 24078])","tensor([  101,  1015,  1012,  1016,  1012,  1018,  4654, 24759,  5162,  7062,
         1998,  3433, 10857,   102])"
118,1,"['set', 'county', 'variables', 'data set', 'data', 'variable']", Data basics,seg_5,"when we ask questions about the relationship between two variables, we sometimes also want to determine if the change in one variable causes a change in the other. consider the following rephrasing of an earlier question about the county data set:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2043,  2057,  3198,  3980,  2055,  1996,  3276,  2090,  2048,
        10857,  1010,  2057,  2823,  2036,  2215,  2000,  5646,  2065,  1996,
         2689,  1999,  2028,  8023,  5320,  1037,  2689,  1999,  1996,  2060,
         1012,  5136,  1996,  2206, 16360, 13492,  7741,  1997,  2019,  3041,
         3160,  2055,  1996,  2221,  2951,  2275,  1024,   102])"
119,1,"['county', 'median', 'population']", Data basics,seg_5,"if there is an increase in the median household income in a county, does this drive an increase in its population?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([ 101, 2065, 2045, 2003, 2019, 3623, 1999, 1996, 3991, 4398, 3318, 1999,
        1037, 2221, 1010, 2515, 2023, 3298, 2019, 3623, 1999, 2049, 2313, 1029,
         102])"
120,1,"['explanatory variable', 'variable', 'population', 'explanatory', 'median']", Data basics,seg_5,"in this question, we are asking whether one variable affects another. if this is our underlying belief, then median household income is the explanatory variable and the population change is the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1999,  2023,  3160,  1010,  2057,  2024,  4851,  3251,  2028,
         8023, 13531,  2178,  1012,  2065,  2023,  2003,  2256, 10318,  6772,
         1010,  2059,  3991,  4398,  3318,  2003,  1996,  4654, 24759,  5162,
         7062,  8023,  1998,  1996,  2313,  2689,  2003,  1996,   102])"
121,1,"['response variable', 'response', 'variable']", Data basics,seg_5,9 response variable in the hypothesized relationship.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1023,  3433,  8023,  1999,  1996,  1044, 22571, 14573,  2229,
         3550,  3276,  1012,   102])"
122,1,"['explanatory variable', 'response variable', 'response', 'explanatory', 'variable']", Data basics,seg_5,"when we suspect one variable might causally affect another, we label the first variable the explanatory variable and the second the response variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2043,  2057,  8343,  2028,  8023,  2453, 28102,  2135,  7461,
         2178,  1010,  2057,  3830,  1996,  2034,  8023,  1996,  4654, 24759,
         5162,  7062,  8023,  1998,  1996,  2117,  1996,  3433,  8023,  1012,
          102])"
123,1,['response'], Data basics,seg_5,explanatory response,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0.])","tensor([ 2951, 24078])","tensor([  101,  4654, 24759,  5162,  7062,  3433,   102])"
124,1,['variable'], Data basics,seg_5,variable variable,tensor(1),"tensor([0., 1., 1., 0.])","tensor([ 2951, 24078])","tensor([ 101, 8023, 8023,  102])"
125,1,"['cases', 'variables', 'variable']", Data basics,seg_5,"for many pairs of variables, there is no hypothesized relationship, and these labels would not be applied to either variable in such cases.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2005,  2116,  7689,  1997, 10857,  1010,  2045,  2003,  2053,
         1044, 22571, 14573,  2229,  3550,  3276,  1010,  1998,  2122, 10873,
         2052,  2025,  2022,  4162,  2000,  2593,  8023,  1999,  2107,  3572,
         1012,   102])"
126,1,"['experiment', 'variables', 'variable']", Data basics,seg_5,bear in mind that the act of labeling the variables in this way does nothing to guarantee that a causal relationship exists. a formal evaluation to check whether one variable causes a change in another requires an experiment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  4562,  1999,  2568,  2008,  1996,  2552,  1997, 28847,  1996,
        10857,  1999,  2023,  2126,  2515,  2498,  2000, 11302,  2008,  1037,
        28102,  3276,  6526,  1012,  1037,  5337,  9312,  2000,  4638,  3251,
         2028,  8023,  5320,  1037,  2689,  1999,  2178,  5942,  2019,  7551,
         1012,   102])"
127,1,"['observational studies', 'experiments']", Data basics,seg_5,1.2.5 introducing observational studies and experiments,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0.])","tensor([ 2951, 24078])","tensor([  101,  1015,  1012,  1016,  1012,  1019, 10449,  8089,  2389,  2913,
         1998,  7885,   102])"
128,1,"['experiments', 'data collection', 'observational studies', 'data']", Data basics,seg_5,there are two primary types of data collection: observational studies and experiments.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([ 101, 2045, 2024, 2048, 3078, 4127, 1997, 2951, 3074, 1024, 8089, 2389,
        2913, 1998, 7885, 1012,  102])"
129,1,"['hypotheses', 'association', 'information', 'observational study', 'variables', 'observational studies', 'data']", Data basics,seg_5,"researchers perform an observational study when they collect data in a way that does not directly interfere with how the data arise. for instance, researchers may collect information via surveys, review medical or company records, or follow a cohort of many similar individuals to form hypotheses about why certain diseases might develop. in each of these situations, researchers merely observe the data that arise. in general, observational studies can provide evidence of a naturally occurring association between variables, but they cannot by themselves show a causal connection.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  6950,  4685,  2019,  8089,  2389,  2817,  2043,  2027,  8145,
         2951,  1999,  1037,  2126,  2008,  2515,  2025,  3495, 15115,  2007,
         2129,  1996,  2951, 13368,  1012,  2005,  6013,  1010,  6950,  2089,
         8145,  2592,  3081, 12265,  1010,  3319,  2966,  2030,  2194,  2636,
         1010,  2030,  3582,  1037,  2522, 27794,  1997,  2116,  2714,  3633,
         2000,  2433,  1044, 22571, 14573, 23072,  2055,  2339,  3056,  7870,
         2453,  4503,  1012,  1999,  2169,  1997,  2122,  8146,  1010,  6950,
         6414, 11949,  1996,  2951,  2008, 13368,  1012,  1999,  2236,  1010,
         8089,  2389,  2913,  2064,  3073,  3350,  1997,  1037,  8100, 10066,
         2523,  2090, 10857,  1010,  2021,  2027,  3685,  2011,  3209,  2265,
         1037, 28102,  4434,  1012,   102])"
130,1,"['trial', 'randomized experiment', 'explanatory variable', 'response variable', 'treatment', 'response', 'sample', 'experiment', 'explanatory', 'variable', 'case']", Data basics,seg_5,"when researchers want to investigate the possibility of a causal connection, they conduct an experiment. usually there will be both an explanatory and a response variable. for instance, we may suspect administering a drug will reduce mortality in heart attack patients over the following year. to check if there really is a causal connection between the explanatory variable and the response, researchers will collect a sample of individuals and split them into groups. the individuals in each group are assigned a treatment. when individuals are randomly assigned to a group, the experiment is called a randomized experiment. for example, each heart attack patient in the drug trial could be randomly assigned, perhaps by flipping a coin, into one of two groups: the first group receives a placebo (fake treatment) and the second group receives the drug. see the case study in section 1.1 for another example of an experiment, though that study did not employ a placebo.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  2043,  6950,  2215,  2000,  8556,  1996,  6061,  1997,  1037,
        28102,  4434,  1010,  2027,  6204,  2019,  7551,  1012,  2788,  2045,
         2097,  2022,  2119,  2019,  4654, 24759,  5162,  7062,  1998,  1037,
         3433,  8023,  1012,  2005,  6013,  1010,  2057,  2089,  8343, 28965,
         1037,  4319,  2097,  5547, 13356,  1999,  2540,  2886,  5022,  2058,
         1996,  2206,  2095,  1012,  2000,  4638,  2065,  2045,  2428,  2003,
         1037, 28102,  4434,  2090,  1996,  4654, 24759,  5162,  7062,  8023,
         1998,  1996,  3433,  1010,  6950,  2097,  8145,  1037,  7099,  1997,
         3633,  1998,  3975,  2068,  2046,  2967,  1012,  1996,  3633,  1999,
         2169,  2177,  2024,  4137,  1037,  3949,  1012,  2043,  3633,  2024,
        18154,  4137,  2000,  1037,  2177,  1010,  1996,  7551,  2003,  2170,
         1037,  6721,  3550,  7551,  1012,  2005,  2742,  1010,  2169,  2540,
         2886,  5776,  1999,  1996,  4319,  3979,  2071,  2022, 18154,  4137,
         1010,  3383,  2011, 18497,  1037,  9226,  1010,  2046,  2028,  1997,
         2048,  2967,  1024,  1996,  2034,  2177,  8267,  1037,  2173,  5092,
         1006,  8275,  3949,  1007,  1998,  1996,  2117,  2177,  8267,  1996,
         4319,  1012,  2156,  1996,  2553,  2817,  1999,  2930,  1015,  1012,
         1015,  2005,  2178,  2742,  1997,  2019,  7551,  1010,  2295,  2008,
         2817,  2106,  2025, 12666,  1037,  2173,  5092,  1012,   102])"
131,1,"['experiment', 'association', 'randomized experiment']", Data basics,seg_5,"in general, association does not imply causation, and causation can only be inferred from a randomized experiment.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2951, 24078])","tensor([  101,  1999,  2236,  1010,  2523,  2515,  2025, 19515,  6187, 10383,
         3508,  1010,  1998,  6187, 10383,  3508,  2064,  2069,  2022,  1999,
         7512,  5596,  2013,  1037,  6721,  3550,  7551,  1012,   102])"
132,1,"['cases', 'variables', 'data']", Sampling principles and strategies,seg_7,the first step in conducting research is to identify topics or questions that are to be investigated. a clearly laid out research question is helpful in identifying what subjects or cases should be studied and what variables are important. it is also important to consider how data are collected so that they are reliable and help achieve the research goals.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1996,  2034,  3357,  1999,  9283,  2470,  2003,  2000,  6709,
         7832,  2030,  3980,  2008,  2024,  2000,  2022, 10847,  1012,  1037,
         4415,  4201,  2041,  2470,  3160,  2003, 14044,  1999, 12151,  2054,
         5739,  2030,  3572,  2323,  2022,  3273,  1998,  2054, 10857,  2024,
         2590,  1012,  2009,  2003,  2036,  2590,  2000,  5136,  2129,  2951,
         2024,  5067,  2061,  2008,  2027,  2024, 10539,  1998,  2393,  6162,
         1996,  2470,  3289,  1012,   102])"
133,1,"['populations', 'samples']", Sampling principles and strategies,seg_7,1.3.1 populations and samples,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 1015, 1012, 1017, 1012, 1015, 7080, 1998, 8168,  102])"
134,0,[], Sampling principles and strategies,seg_7,consider the following three research questions:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 5136, 1996, 2206, 2093, 2470, 3980, 1024,  102])"
135,1,['average'], Sampling principles and strategies,seg_7,1. what is the average mercury content in swordfish in the atlantic ocean?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 1015, 1012, 2054, 2003, 1996, 2779, 8714, 4180, 1999, 4690, 7529,
        1999, 1996, 4448, 4153, 1029,  102])"
136,1,['average'], Sampling principles and strategies,seg_7,"2. over the last 5 years, what is the average time to complete a degree for duke undergrads?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1016,  1012,  2058,  1996,  2197,  1019,  2086,  1010,  2054,
         2003,  1996,  2779,  2051,  2000,  3143,  1037,  3014,  2005,  3804,
         2104, 16307,  2015,  1029,   102])"
137,0,[], Sampling principles and strategies,seg_7,3. does a new drug reduce the number of deaths in patients with severe heart disease?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 1017, 1012, 2515, 1037, 2047, 4319, 5547, 1996, 2193, 1997, 6677,
        1999, 5022, 2007, 5729, 2540, 4295, 1029,  102])"
138,1,"['cases', 'estimate', 'sample', 'population', 'average', 'data', 'case']", Sampling principles and strategies,seg_7,"each research question refers to a target population. in the first question, the target population is all swordfish in the atlantic ocean, and each fish represents a case. often times, it is too expensive to collect data for every case in a population. instead, a sample is taken. a sample represents a subset of the cases and is often a small fraction of the population. for instance, 60 swordfish (or some other number) in the population might be selected, and this sample data may be used to provide an estimate of the population average and answer the research question.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2169,  2470,  3160,  5218,  2000,  1037,  4539,  2313,  1012,
         1999,  1996,  2034,  3160,  1010,  1996,  4539,  2313,  2003,  2035,
         4690,  7529,  1999,  1996,  4448,  4153,  1010,  1998,  2169,  3869,
         5836,  1037,  2553,  1012,  2411,  2335,  1010,  2009,  2003,  2205,
         6450,  2000,  8145,  2951,  2005,  2296,  2553,  1999,  1037,  2313,
         1012,  2612,  1010,  1037,  7099,  2003,  2579,  1012,  1037,  7099,
         5836,  1037, 16745,  1997,  1996,  3572,  1998,  2003,  2411,  1037,
         2235, 12884,  1997,  1996,  2313,  1012,  2005,  6013,  1010,  3438,
         4690,  7529,  1006,  2030,  2070,  2060,  2193,  1007,  1999,  1996,
         2313,  2453,  2022,  3479,  1010,  1998,  2023,  7099,  2951,  2089,
         2022,  2109,  2000,  3073,  2019, 10197,  1997,  1996,  2313,  2779,
         1998,  3437,  1996,  2470,  3160,  1012,   102])"
139,1,['population'], Sampling principles and strategies,seg_7,"for the second and third questions above, identify the target population and what represents an",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 2005, 1996, 2117, 1998, 2353, 3980, 2682, 1010, 6709, 1996, 4539,
        2313, 1998, 2054, 5836, 2019,  102])"
140,1,['case'], Sampling principles and strategies,seg_7,18 individual case.,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 2324, 3265, 2553, 1012,  102])"
141,1,['anecdotal evidence'], Sampling principles and strategies,seg_7,1.3.2 anecdotal evidence,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1015,  1012,  1017,  1012,  1016,  2019,  8586, 27364,  2389,
         3350,   102])"
142,0,[], Sampling principles and strategies,seg_7,consider the following possible responses to the three research questions:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  5136,  1996,  2206,  2825, 10960,  2000,  1996,  2093,  2470,
         3980,  1024,   102])"
143,1,"['average', 'concentration']", Sampling principles and strategies,seg_7,"1. a man on the news got mercury poisoning from eating swordfish, so the average mercury concentration in swordfish must be dangerously high.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1015,  1012,  1037,  2158,  2006,  1996,  2739,  2288,  8714,
        16149,  2013,  5983,  4690,  7529,  1010,  2061,  1996,  2779,  8714,
         6693,  1999,  4690,  7529,  2442,  2022, 20754,  2152,  1012,   102])"
144,0,[], Sampling principles and strategies,seg_7,"2. i met two students who took more than 7 years to graduate from duke, so it must take longer to graduate at duke than at many other colleges.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 1016, 1012, 1045, 2777, 2048, 2493, 2040, 2165, 2062, 2084, 1021,
        2086, 2000, 4619, 2013, 3804, 1010, 2061, 2009, 2442, 2202, 2936, 2000,
        4619, 2012, 3804, 2084, 2012, 2116, 2060, 6667, 1012,  102])"
145,0,[], Sampling principles and strategies,seg_7,"3. my friend’s dad had a heart attack and died after they gave him a new heart disease drug, so the drug must not work.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 1017, 1012, 2026, 2767, 1521, 1055, 3611, 2018, 1037, 2540, 2886,
        1998, 2351, 2044, 2027, 2435, 2032, 1037, 2047, 2540, 4295, 4319, 1010,
        2061, 1996, 4319, 2442, 2025, 2147, 1012,  102])"
146,1,"['cases', 'population', 'anecdotal evidence', 'representative', 'data']", Sampling principles and strategies,seg_7,"each conclusion is based on data. however, there are two problems. first, the data only represent one or two cases. second, and more importantly, it is unclear whether these cases are actually representative of the population. data collected in this haphazard fashion are called anecdotal evidence.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2169,  7091,  2003,  2241,  2006,  2951,  1012,  2174,  1010,
         2045,  2024,  2048,  3471,  1012,  2034,  1010,  1996,  2951,  2069,
         5050,  2028,  2030,  2048,  3572,  1012,  2117,  1010,  1998,  2062,
        14780,  1010,  2009,  2003, 10599,  3251,  2122,  3572,  2024,  2941,
         4387,  1997,  1996,  2313,  1012,  2951,  5067,  1999,  2023,  5292,
        21890, 26154,  4827,  2024,  2170,  2019,  8586, 27364,  2389,  3350,
         1012,   102])"
147,1,"['cases', 'data']", Sampling principles and strategies,seg_7,"be careful of data collected in a haphazard fashion. such evidence may be true and verifiable, but it may only represent extraordinary cases.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2022,  6176,  1997,  2951,  5067,  1999,  1037,  5292, 21890,
        26154,  4827,  1012,  2107,  3350,  2089,  2022,  2995,  1998,  2310,
         3089, 22749,  3468,  1010,  2021,  2009,  2089,  2069,  5050,  9313,
         3572,  1012,   102])"
148,0,[], Sampling principles and strategies,seg_7,"figure 1.10: in february 2010, some media pundits cited one large snow storm as valid evidence against global warming. as comedian jon stewart pointed out, “it’s one storm, in one region, of one country.”",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3275,  1015,  1012,  2184,  1024,  1999,  2337,  2230,  1010,
         2070,  2865, 26136, 23194,  2015,  6563,  2028,  2312,  4586,  4040,
         2004,  9398,  3350,  2114,  3795, 12959,  1012,  2004,  9971,  6285,
         5954,  4197,  2041,  1010,  1523,  2009,  1521,  1055,  2028,  4040,
         1010,  1999,  2028,  2555,  1010,  1997,  2028,  2406,  1012,  1524,
          102])"
149,1,"['cases', 'sample', 'population']", Sampling principles and strategies,seg_7,"anecdotal evidence typically is composed of unusual cases that we recall based on their striking characteristics. for instance, we are more likely to remember the two people we met who took 7 years to graduate than the six others who graduated in four years. instead of looking at the most unusual cases, we should examine a sample of many cases that represent the population.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1.,
        0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2019,  8586, 27364,  2389,  3350,  4050,  2003,  3605,  1997,
         5866,  3572,  2008,  2057,  9131,  2241,  2006,  2037,  8478,  6459,
         1012,  2005,  6013,  1010,  2057,  2024,  2062,  3497,  2000,  3342,
         1996,  2048,  2111,  2057,  2777,  2040,  2165,  1021,  2086,  2000,
         4619,  2084,  1996,  2416,  2500,  2040,  3852,  1999,  2176,  2086,
         1012,  2612,  1997,  2559,  2012,  1996,  2087,  5866,  3572,  1010,
         2057,  2323, 11628,  1037,  7099,  1997,  2116,  3572,  2008,  5050,
         1996,  2313,  1012,   102])"
150,1,"['population', 'sampling']", Sampling principles and strategies,seg_7,1.3.3 sampling from a population,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1015,  1012,  1017,  1012,  1017, 16227,  2013,  1037,  2313,
          102])"
151,1,"['estimate', 'random sample', 'population', 'sample', 'random', 'biases', 'samples']", Sampling principles and strategies,seg_7,"we might try to estimate the time to graduation for duke undergraduates in the last 5 years by collecting a sample of students. all graduates in the last 5 years represent the population, and graduates who are selected for review are collectively called the sample. in general, we always seek to randomly select a sample from a population. the most basic type of random selection is equivalent to how raffles are conducted. for example, in selecting graduates, we could write each graduate’s name on a raffle ticket and draw 100 tickets. the selected names would represent a random sample of 100 graduates. we pick samples randomly to reduce the chance we introduce biases.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2057,  2453,  3046,  2000, 10197,  1996,  2051,  2000,  7665,
         2005,  3804,  8324,  2015,  1999,  1996,  2197,  1019,  2086,  2011,
         9334,  1037,  7099,  1997,  2493,  1012,  2035, 10845,  1999,  1996,
         2197,  1019,  2086,  5050,  1996,  2313,  1010,  1998, 10845,  2040,
         2024,  3479,  2005,  3319,  2024, 13643,  2170,  1996,  7099,  1012,
         1999,  2236,  1010,  2057,  2467,  6148,  2000, 18154,  7276,  1037,
         7099,  2013,  1037,  2313,  1012,  1996,  2087,  3937,  2828,  1997,
         6721,  4989,  2003,  5662,  2000,  2129,  7148, 28331,  2024,  4146,
         1012,  2005,  2742,  1010,  1999, 17739, 10845,  1010,  2057,  2071,
         4339,  2169,  4619,  1521,  1055,  2171,  2006,  1037,  7148, 21031,
         7281,  1998,  4009,  2531,  9735,  1012,  1996,  3479,  3415,  2052,
         5050,  1037,  6721,  7099,  1997,  2531, 10845,  1012,  2057,  4060,
         8168, 18154,  2000,  5547,  1996,  3382,  2057,  8970, 13827,  2229,
         1012,   102])"
152,1,['sample'], Sampling principles and strategies,seg_7,all graduates sample,tensor(1),"tensor([0., 0., 0., 1., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2035, 10845,  7099,   102])"
153,1,['sample'], Sampling principles and strategies,seg_7,"figure 1.11: in this graphic, five graduates are randomly selected from the population to be included in the sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3275,  1015,  1012,  2340,  1024,  1999,  2023,  8425,  1010,
         2274, 10845,  2024, 18154,  3479,  2013,  1996,  2313,  2000,  2022,
         2443,  1999,  1996,  7099,  1012,   102])"
154,1,"['sample', 'representative']", Sampling principles and strategies,seg_7,suppose we ask a student who happens to be majoring in nutrition to select several graduates for the study. what kind of students do you think she might collect? do you think her sample would be representative of all graduates?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  6814,  2057,  3198,  1037,  3076,  2040,  6433,  2000,  2022,
         2350,  2075,  1999, 14266,  2000,  7276,  2195, 10845,  2005,  1996,
         2817,  1012,  2054,  2785,  1997,  2493,  2079,  2017,  2228,  2016,
         2453,  8145,  1029,  2079,  2017,  2228,  2014,  7099,  2052,  2022,
         4387,  1997,  2035, 10845,  1029,   102])"
155,1,"['risk', 'biased', 'population', 'sample', 'samples', 'bias']", Sampling principles and strategies,seg_7,"perhaps she would pick a disproportionate number of graduates from health-related fields. or perhaps her selection would be a good representation of the population. when selecting samples by hand, we run the risk of picking a biased sample, even if their bias isn’t intended.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3383,  2016,  2052,  4060,  1037,  4487, 13102, 18981, 11589,
         3258,  3686,  2193,  1997, 10845,  2013,  2740,  1011,  3141,  4249,
         1012,  2030,  3383,  2014,  4989,  2052,  2022,  1037,  2204,  6630,
         1997,  1996,  2313,  1012,  2043, 17739,  8168,  2011,  2192,  1010,
         2057,  2448,  1996,  3891,  1997,  8130,  1037, 25352,  7099,  1010,
         2130,  2065,  2037, 13827,  3475,  1521,  1056,  3832,  1012,   102])"
156,1,['sample'], Sampling principles and strategies,seg_7,all graduates sample graduates from health−related fields,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2035, 10845,  7099, 10845,  2013,  2740, 22543, 16570,  4383,
         4249,   102])"
157,1,['sample'], Sampling principles and strategies,seg_7,"figure 1.12: asked to pick a sample of graduates, a nutrition major might inadvertently pick a disproportionate number of graduates from health-related majors.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3275,  1015,  1012,  2260,  1024,  2356,  2000,  4060,  1037,
         7099,  1997, 10845,  1010,  1037, 14266,  2350,  2453, 21089,  4060,
         1037,  4487, 13102, 18981, 11589,  3258,  3686,  2193,  1997, 10845,
         2013,  2740,  1011,  3141, 15279,  1012,   102])"
158,1,"['cases', 'skewed', 'random sample', 'population', 'sample', 'random', 'sampling', 'simple random sample', 'bias', 'case']", Sampling principles and strategies,seg_7,"if someone was permitted to pick and choose exactly which graduates were included in the sample, it is entirely possible that the sample could be skewed to that person’s interests, which may be entirely unintentional. this introduces bias into a sample. sampling randomly helps resolve this problem. the most basic random sample is called a simple random sample, and which is equivalent to using a raffle to select cases. this means that each case in the population has an equal chance of being included and there is no implied connection between the cases in the sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2065,  2619,  2001,  7936,  2000,  4060,  1998,  5454,  3599,
         2029, 10845,  2020,  2443,  1999,  1996,  7099,  1010,  2009,  2003,
         4498,  2825,  2008,  1996,  7099,  2071,  2022, 15315,  7974,  2098,
         2000,  2008,  2711,  1521,  1055,  5426,  1010,  2029,  2089,  2022,
         4498,  4895, 18447,  4765, 19301,  1012,  2023, 13999, 13827,  2046,
         1037,  7099,  1012, 16227, 18154,  7126, 10663,  2023,  3291,  1012,
         1996,  2087,  3937,  6721,  7099,  2003,  2170,  1037,  3722,  6721,
         7099,  1010,  1998,  2029,  2003,  5662,  2000,  2478,  1037,  7148,
        21031,  2000,  7276,  3572,  1012,  2023,  2965,  2008,  2169,  2553,
         1999,  1996,  2313,  2038,  2019,  5020,  3382,  1997,  2108,  2443,
         1998,  2045,  2003,  2053, 13339,  4434,  2090,  1996,  3572,  1999,
         1996,  7099,  1012,   102])"
159,1,"['rate', 'skew', 'random sample', 'sample', 'random', 'results', 'simple random sample', 'population', 'bias', 'representative']", Sampling principles and strategies,seg_7,"the act of taking a simple random sample helps minimize bias. however, bias can crop up in other ways. even when people are picked at random, e.g. for surveys, caution must be exercised if the non-response rate is high. for instance, if only 30% of the people randomly sampled for a survey actually respond, then it is unclear whether the results are representative of the entire population. this non-response bias can skew results.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1996,  2552,  1997,  2635,  1037,  3722,  6721,  7099,  7126,
        18478, 13827,  1012,  2174,  1010, 13827,  2064, 10416,  2039,  1999,
         2060,  3971,  1012,  2130,  2043,  2111,  2024,  3856,  2012,  6721,
         1010,  1041,  1012,  1043,  1012,  2005, 12265,  1010, 14046,  2442,
         2022, 17747,  2065,  1996,  2512,  1011,  3433,  3446,  2003,  2152,
         1012,  2005,  6013,  1010,  2065,  2069,  2382,  1003,  1997,  1996,
         2111, 18154, 18925,  2005,  1037,  5002,  2941,  6869,  1010,  2059,
         2009,  2003, 10599,  3251,  1996,  3463,  2024,  4387,  1997,  1996,
         2972,  2313,  1012,  2023,  2512,  1011,  3433, 13827,  2064, 15315,
         7974,  3463,  1012,   102])"
160,1,['sample'], Sampling principles and strategies,seg_7,population of interest sample,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 2313, 1997, 3037, 7099,  102])"
161,0,[], Sampling principles and strategies,seg_7,population actually sampled,tensor(0),"tensor([0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2313,  2941, 18925,   102])"
162,1,['population'], Sampling principles and strategies,seg_7,"figure 1.13: due to the possibility of non-response, surveys studies may only reach a certain group within the population. it is difficult, and often times impossible, to completely fix this problem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3275,  1015,  1012,  2410,  1024,  2349,  2000,  1996,  6061,
         1997,  2512,  1011,  3433,  1010, 12265,  2913,  2089,  2069,  3362,
         1037,  3056,  2177,  2306,  1996,  2313,  1012,  2009,  2003,  3697,
         1010,  1998,  2411,  2335,  5263,  1010,  2000,  3294,  8081,  2023,
         3291,  1012,   102])"
163,1,"['sample', 'convenience sample']", Sampling principles and strategies,seg_7,"another common downfall is a convenience sample, where individuals who are easily accessible are more likely to be included in the sample. for instance, if a political survey is done by stopping people walking in the bronx, this will not represent all of new york city. it is often difficult to discern what sub-population a convenience sample represents.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2178,  2691, 22252,  2003,  1037, 15106,  7099,  1010,  2073,
         3633,  2040,  2024,  4089,  7801,  2024,  2062,  3497,  2000,  2022,
         2443,  1999,  1996,  7099,  1012,  2005,  6013,  1010,  2065,  1037,
         2576,  5002,  2003,  2589,  2011,  7458,  2111,  3788,  1999,  1996,
        14487,  1010,  2023,  2097,  2025,  5050,  2035,  1997,  2047,  2259,
         2103,  1012,  2009,  2003,  2411,  3697,  2000,  5860, 11795,  2054,
         4942,  1011,  2313,  1037, 15106,  7099,  5836,  1012,   102])"
164,0,[], Sampling principles and strategies,seg_7,"we can easily access ratings for products, sellers, and companies through websites. these ratings are based only on those people who go out of their way to provide a rating. if 50% of online reviews for a product are negative, do you think this means that 50% of buyers are dissatisfied with the product?19",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2057,  2064,  4089,  3229,  8599,  2005,  3688,  1010, 19041,
         1010,  1998,  3316,  2083, 11744,  1012,  2122,  8599,  2024,  2241,
         2069,  2006,  2216,  2111,  2040,  2175,  2041,  1997,  2037,  2126,
         2000,  3073,  1037,  5790,  1012,  2065,  2753,  1003,  1997,  3784,
         4391,  2005,  1037,  4031,  2024,  4997,  1010,  2079,  2017,  2228,
         2023,  2965,  2008,  2753,  1003,  1997, 17394,  2024, 25956,  2007,
         1996,  4031,  1029,  2539,   102])"
165,1,['observational studies'], Sampling principles and strategies,seg_7,1.3.4 observational studies,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 1015, 1012, 1017, 1012, 1018, 8089, 2389, 2913,  102])"
166,1,"['hypotheses', 'treatment', 'experiments', 'county', 'observational studies', 'observational data', 'data']", Sampling principles and strategies,seg_7,"data where no treatment has been explicitly applied (or explicitly withheld) is called observational data. for instance, the loan data and county data described in section 1.2 are both examples of observational data. making causal conclusions based on experiments is often reasonable. however, making the same causal conclusions based on observational data can be treacherous and is not recommended. thus, observational studies are generally only sufficient to show associations or form hypotheses that we later check using experiments.",tensor(1),"tensor([0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2951,  2073,  2053,  3949,  2038,  2042, 12045,  4162,  1006,
         2030, 12045,  2007, 24850,  1007,  2003,  2170,  8089,  2389,  2951,
         1012,  2005,  6013,  1010,  1996,  5414,  2951,  1998,  2221,  2951,
         2649,  1999,  2930,  1015,  1012,  1016,  2024,  2119,  4973,  1997,
         8089,  2389,  2951,  1012,  2437, 28102, 15306,  2241,  2006,  7885,
         2003,  2411,  9608,  1012,  2174,  1010,  2437,  1996,  2168, 28102,
        15306,  2241,  2006,  8089,  2389,  2951,  2064,  2022, 26648,  1998,
         2003,  2025,  6749,  1012,  2947,  1010,  8089,  2389,  2913,  2024,
         3227,  2069,  7182,  2000,  2265,  8924,  2030,  2433,  1044, 22571,
        14573, 23072,  2008,  2057,  2101,  4638,  2478,  7885,  1012,   102])"
167,1,"['mean', 'observational study']", Sampling principles and strategies,seg_7,"suppose an observational study tracked sunscreen use and skin cancer, and it was found that the more sunscreen someone used, the more likely the person was to have skin cancer. does this mean sunscreen causes skin cancer?20",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  6814,  2019,  8089,  2389,  2817, 12808, 19352, 24410,  2224,
         1998,  3096,  4456,  1010,  1998,  2009,  2001,  2179,  2008,  1996,
         2062, 19352, 24410,  2619,  2109,  1010,  1996,  2062,  3497,  1996,
         2711,  2001,  2000,  2031,  3096,  4456,  1012,  2515,  2023,  2812,
        19352, 24410,  5320,  3096,  4456,  1029,  2322,   102])"
168,1,"['risk', 'information', 'association', 'variable']", Sampling principles and strategies,seg_7,"some previous research tells us that using sunscreen actually reduces skin cancer risk, so maybe there is another variable that can explain this hypothetical association between sunscreen usage and skin cancer. one important piece of information that is absent is sun exposure. if someone is out in the sun all day, she is more likely to use sunscreen and more likely to get skin cancer. exposure to the sun is unaccounted for in the simple investigation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2070,  3025,  2470,  4136,  2149,  2008,  2478, 19352, 24410,
         2941, 13416,  3096,  4456,  3891,  1010,  2061,  2672,  2045,  2003,
         2178,  8023,  2008,  2064,  4863,  2023, 25613,  2523,  2090, 19352,
        24410,  8192,  1998,  3096,  4456,  1012,  2028,  2590,  3538,  1997,
         2592,  2008,  2003,  9962,  2003,  3103,  7524,  1012,  2065,  2619,
         2003,  2041,  1999,  1996,  3103,  2035,  2154,  1010,  2016,  2003,
         2062,  3497,  2000,  2224, 19352, 24410,  1998,  2062,  3497,  2000,
         2131,  3096,  4456,  1012,  7524,  2000,  1996,  3103,  2003, 14477,
        21408, 16671,  2098,  2005,  1999,  1996,  3722,  4812,  1012,   102])"
169,0,[], Sampling principles and strategies,seg_7,use sunscreen skin cancer,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2224, 19352, 24410,  3096,  4456,   102])"
170,1,"['correlated', 'response variables', 'observational studies', 'response', 'method', 'confounding variables', 'variables', 'explanatory', 'confounding', 'variable']", Sampling principles and strategies,seg_7,"sun exposure is what is called a confounding variable,21 which is a variable that is correlated with both the explanatory and response variables. while one method to justify making causal conclusions from observational studies is to exhaust the search for confounding variables, there is no guarantee that all confounding variables can be examined or measured.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3103,  7524,  2003,  2054,  2003,  2170,  1037,  9530, 14876,
         8630,  2075,  8023,  1010,  2538,  2029,  2003,  1037,  8023,  2008,
         2003, 23900,  2007,  2119,  1996,  4654, 24759,  5162,  7062,  1998,
         3433, 10857,  1012,  2096,  2028,  4118,  2000, 16114,  2437, 28102,
        15306,  2013,  8089,  2389,  2913,  2003,  2000, 15095,  1996,  3945,
         2005,  9530, 14876,  8630,  2075, 10857,  1010,  2045,  2003,  2053,
        11302,  2008,  2035,  9530, 14876,  8630,  2075, 10857,  2064,  2022,
         8920,  2030,  7594,  1012,   102])"
171,1,"['association', 'rate', 'negative association', 'percentage', 'county', 'variables', 'variable']", Sampling principles and strategies,seg_7,"figure 1.8 shows a negative association between the homeownership rate and the percentage of multiunit structures in a county. however, it is unreasonable to conclude that there is a causal relationship between the two variables. suggest a variable that might explain the negative relationship.22",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3275,  1015,  1012,  1022,  3065,  1037,  4997,  2523,  2090,
         1996,  2188, 12384,  2545,  5605,  3446,  1998,  1996,  7017,  1997,
         4800, 19496,  2102,  5090,  1999,  1037,  2221,  1012,  2174,  1010,
         2009,  2003, 29205,  2000, 16519,  2008,  2045,  2003,  1037, 28102,
         3276,  2090,  1996,  2048, 10857,  1012,  6592,  1037,  8023,  2008,
         2453,  4863,  1996,  4997,  3276,  1012,  2570,   102])"
172,1,"['sets', 'risk', 'retrospective studies', 'events', 'information', 'prospective and retrospective studies', 'prospective study', 'data sets', 'variables', 'data']", Sampling principles and strategies,seg_7,"observational studies come in two forms: prospective and retrospective studies. a prospective study identifies individuals and collects information as events unfold. for instance, medical researchers may identify and follow a group of patients over many years to assess the possible influences of behavior on cancer risk. one example of such a study is the nurses’ health study, started in 1976 and expanded in 1989. this prospective study recruits registered nurses and then collects data from them using questionnaires. retrospective studies collect data after events have taken place, e.g. researchers may review past events in medical records. some data sets may contain both prospectivelyand retrospectively-collected variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  8089,  2389,  2913,  2272,  1999,  2048,  3596,  1024, 17464,
         1998, 15354,  2913,  1012,  1037, 17464,  2817, 14847,  3633,  1998,
        17427,  2592,  2004,  2824,  4895, 10371,  1012,  2005,  6013,  1010,
         2966,  6950,  2089,  6709,  1998,  3582,  1037,  2177,  1997,  5022,
         2058,  2116,  2086,  2000, 14358,  1996,  2825,  8092,  1997,  5248,
         2006,  4456,  3891,  1012,  2028,  2742,  1997,  2107,  1037,  2817,
         2003,  1996, 11500,  1521,  2740,  2817,  1010,  2318,  1999,  3299,
         1998,  4423,  1999,  2960,  1012,  2023, 17464,  2817, 15024,  5068,
        11500,  1998,  2059, 17427,  2951,  2013,  2068,  2478,  3160, 20589,
         2015,  1012, 15354,  2913,  8145,  2951,  2044,  2824,  2031,  2579,
         2173,  1010,  1041,  1012,  1043,  1012,  6950,  2089,  3319,  2627,
         2824,  1999,  2966,  2636,  1012,  2070,  2951,  4520,  2089,  5383,
         2119, 17464,  2135,  5685, 15354,  2135,  1011,  5067, 10857,  1012,
          102])"
173,1,['sampling'], Sampling principles and strategies,seg_7,1.3.5 four sampling methods,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1015,  1012,  1017,  1012,  1019,  2176, 16227,  4725,   102])"
174,1,"['representations', 'errors', 'population', 'associated', 'sampling', 'statistical', 'data', 'graphical representations', 'random sampling', 'graphical', 'estimates', 'random', 'observational data']", Sampling principles and strategies,seg_7,"almost all statistical methods are based on the notion of implied randomness. if observational data are not collected in a random framework from a population, these statistical methods – the estimates and errors associated with the estimates – are not reliable. here we consider four random sampling techniques: simple, stratified, cluster, and multistage sampling. figures 1.14 and 1.15 provide graphical representations of these techniques.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2471,  2035,  7778,  4725,  2024,  2241,  2006,  1996,  9366,
         1997, 13339,  6721,  2791,  1012,  2065,  8089,  2389,  2951,  2024,
         2025,  5067,  1999,  1037,  6721,  7705,  2013,  1037,  2313,  1010,
         2122,  7778,  4725,  1516,  1996, 10035,  1998, 10697,  3378,  2007,
         1996, 10035,  1516,  2024,  2025, 10539,  1012,  2182,  2057,  5136,
         2176,  6721, 16227,  5461,  1024,  3722,  1010,  2358,  8609,  7810,
         1010,  9324,  1010,  1998,  4800,  9153,  3351, 16227,  1012,  4481,
         1015,  1012,  2403,  1998,  1015,  1012,  2321,  3073, 20477, 15066,
         1997,  2122,  5461,  1012,   102])"
175,0,[], Sampling principles and strategies,seg_7,stratum 2 stratum 4 stratum 6,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 2358, 8609, 2819, 1016, 2358, 8609, 2819, 1018, 2358, 8609, 2819,
        1020,  102])"
176,1,"['cases', 'random sampling', 'simple random sampling', 'random', 'sampling', 'strata', 'stratified sampling']", Sampling principles and strategies,seg_7,"figure 1.14: examples of simple random and stratified sampling. in the top panel, simple random sampling was used to randomly select the 18 cases. in the bottom panel, stratified sampling was used: cases were grouped into strata, then simple random sampling was employed within each stratum.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3275,  1015,  1012,  2403,  1024,  4973,  1997,  3722,  6721,
         1998,  2358,  8609,  7810, 16227,  1012,  1999,  1996,  2327,  5997,
         1010,  3722,  6721, 16227,  2001,  2109,  2000, 18154,  7276,  1996,
         2324,  3572,  1012,  1999,  1996,  3953,  5997,  1010,  2358,  8609,
         7810, 16227,  2001,  2109,  1024,  3572,  2020, 15131,  2046, 22913,
         1010,  2059,  3722,  6721, 16227,  2001,  4846,  2306,  2169,  2358,
         8609,  2819,  1012,   102])"
177,1,"['cases', 'random sampling', 'information', 'random sample', 'population', 'sample', 'random', 'sampling', 'simple random sample', 'case']", Sampling principles and strategies,seg_7,"simple random sampling is probably the most intuitive form of random sampling. consider the salaries of major league baseball (mlb) players, where each player is a member of one of the league’s 30 teams. to take a simple random sample of 120 baseball players and their salaries, we could write the names of that season’s several hundreds of players onto slips of paper, drop the slips into a bucket, shake the bucket around until we are sure the names are all mixed up, then draw out slips until we have the sample of 120 players. in general, a sample is referred to as “simple random” if each case in the population has an equal chance of being included in the final sample and knowing that a case is included in a sample does not provide useful information about which other cases are included.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3722,  6721, 16227,  2003,  2763,  1996,  2087, 29202,  2433,
         1997,  6721, 16227,  1012,  5136,  1996, 20566,  1997,  2350,  2223,
         3598,  1006, 10901,  1007,  2867,  1010,  2073,  2169,  2447,  2003,
         1037,  2266,  1997,  2028,  1997,  1996,  2223,  1521,  1055,  2382,
         2780,  1012,  2000,  2202,  1037,  3722,  6721,  7099,  1997,  6036,
         3598,  2867,  1998,  2037, 20566,  1010,  2057,  2071,  4339,  1996,
         3415,  1997,  2008,  2161,  1521,  1055,  2195,  5606,  1997,  2867,
         3031, 17433,  1997,  3259,  1010,  4530,  1996, 17433,  2046,  1037,
        13610,  1010,  6073,  1996, 13610,  2105,  2127,  2057,  2024,  2469,
         1996,  3415,  2024,  2035,  3816,  2039,  1010,  2059,  4009,  2041,
        17433,  2127,  2057,  2031,  1996,  7099,  1997,  6036,  2867,  1012,
         1999,  2236,  1010,  1037,  7099,  2003,  3615,  2000,  2004,  1523,
         3722,  6721,  1524,  2065,  2169,  2553,  1999,  1996,  2313,  2038,
         2019,  5020,  3382,  1997,  2108,  2443,  1999,  1996,  2345,  7099,
         1998,  4209,  2008,  1037,  2553,  2003,  2443,  1999,  1037,  7099,
         2515,  2025,  3073,  6179,  2592,  2055,  2029,  2060,  3572,  2024,
         2443,  1012,   102])"
178,1,"['cases', 'random sampling', 'simple random sampling', 'population', 'sample', 'method', 'sampling', 'random', 'strata']", Sampling principles and strategies,seg_7,"stratified sampling is a divide-and-conquer sampling strategy. the population is divided into groups called strata. the strata are chosen so that similar cases are grouped together, then a second sampling method, usually simple random sampling, is employed within each stratum. in the baseball salary example, the teams could represent the strata, since some teams have a lot more money (up to 4 times as much!). then we might randomly sample 4 players from each team for a total of 120 players.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2358,  8609,  7810, 16227,  2003,  1037, 11443,  1011,  1998,
         1011, 16152, 16227,  5656,  1012,  1996,  2313,  2003,  4055,  2046,
         2967,  2170, 22913,  1012,  1996, 22913,  2024,  4217,  2061,  2008,
         2714,  3572,  2024, 15131,  2362,  1010,  2059,  1037,  2117, 16227,
         4118,  1010,  2788,  3722,  6721, 16227,  1010,  2003,  4846,  2306,
         2169,  2358,  8609,  2819,  1012,  1999,  1996,  3598, 10300,  2742,
         1010,  1996,  2780,  2071,  5050,  1996, 22913,  1010,  2144,  2070,
         2780,  2031,  1037,  2843,  2062,  2769,  1006,  2039,  2000,  1018,
         2335,  2004,  2172,   999,  1007,  1012,  2059,  2057,  2453, 18154,
         7099,  1018,  2867,  2013,  2169,  2136,  2005,  1037,  2561,  1997,
         6036,  2867,  1012,   102])"
179,1,"['cases', 'stratified sample', 'outcome', 'random sample', 'sample', 'sampling', 'random', 'simple random sample', 'outcome of interest', 'data', 'stratified sampling']", Sampling principles and strategies,seg_7,stratified sampling is especially useful when the cases in each stratum are very similar with respect to the outcome of interest. the downside is that analyzing data from a stratified sample is a more complex task than analyzing data from a simple random sample. the analysis methods introduced in this book would need to be extended to analyze data collected using stratified sampling.,tensor(1),"tensor([0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2358,  8609,  7810, 16227,  2003,  2926,  6179,  2043,  1996,
         3572,  1999,  2169,  2358,  8609,  2819,  2024,  2200,  2714,  2007,
         4847,  2000,  1996,  9560,  1997,  3037,  1012,  1996, 12482,  5178,
         2003,  2008, 20253,  2951,  2013,  1037,  2358,  8609,  7810,  7099,
         2003,  1037,  2062,  3375,  4708,  2084, 20253,  2951,  2013,  1037,
         3722,  6721,  7099,  1012,  1996,  4106,  4725,  3107,  1999,  2023,
         2338,  2052,  2342,  2000,  2022,  3668,  2000, 17908,  2951,  5067,
         2478,  2358,  8609,  7810, 16227,  1012,   102])"
180,1,['cases'], Sampling principles and strategies,seg_7,why would it be good for cases within each stratum to be very similar?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 2339, 2052, 2009, 2022, 2204, 2005, 3572, 2306, 2169, 2358, 8609,
        2819, 2000, 2022, 2200, 2714, 1029,  102])"
181,1,"['cases', 'estimate', 'estimates', 'population']", Sampling principles and strategies,seg_7,"we might get a more stable estimate for the subpopulation in a stratum if the cases are very similar, leading to more precise estimates within each group. when we combine these estimates into a single estimate for the full population, that population estimate will tend to be more precise since each individual group estimate is itself more precise.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2057,  2453,  2131,  1037,  2062,  6540, 10197,  2005,  1996,
         4942, 16340,  9513,  1999,  1037,  2358,  8609,  2819,  2065,  1996,
         3572,  2024,  2200,  2714,  1010,  2877,  2000,  2062, 10480, 10035,
         2306,  2169,  2177,  1012,  2043,  2057, 11506,  2122, 10035,  2046,
         1037,  2309, 10197,  2005,  1996,  2440,  2313,  1010,  2008,  2313,
        10197,  2097,  7166,  2000,  2022,  2062, 10480,  2144,  2169,  3265,
         2177, 10197,  2003,  2993,  2062, 10480,  1012,   102])"
182,1,"['observations', 'random sample', 'cluster sample', 'sample', 'random', 'population']", Sampling principles and strategies,seg_7,"in a cluster sample, we break up the population into many groups, called clusters. then we sample a fixed number of clusters and include all observations from each of those clusters in the sample. a multistage sample is like a cluster sample, but rather than keeping all observations in each cluster, we collect a random sample within each selected cluster.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1999,  1037,  9324,  7099,  1010,  2057,  3338,  2039,  1996,
         2313,  2046,  2116,  2967,  1010,  2170, 12906,  1012,  2059,  2057,
         7099,  1037,  4964,  2193,  1997, 12906,  1998,  2421,  2035,  9420,
         2013,  2169,  1997,  2216, 12906,  1999,  1996,  7099,  1012,  1037,
         4800,  9153,  3351,  7099,  2003,  2066,  1037,  9324,  7099,  1010,
         2021,  2738,  2084,  4363,  2035,  9420,  1999,  2169,  9324,  1010,
         2057,  8145,  1037,  6721,  7099,  2306,  2169,  3479,  9324,  1012,
          102])"
183,1,"['variability', 'cluster or multistage sampling', 'sampling', 'data', 'stratified sampling']", Sampling principles and strategies,seg_7,"sometimes cluster or multistage sampling can be more economical than the alternative sampling techniques. also, unlike stratified sampling, these approaches are most helpful when there is a lot of case-to-case variability within a cluster but the clusters themselves don’t look very different from one another. for example, if neighborhoods represented clusters, then cluster or multistage sampling work best when the neighborhoods are very diverse. a downside of these methods is that more advanced techniques are typically required to analyze the data, though the methods in this book can be extended to handle such data.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  2823,  9324,  2030,  4800,  9153,  3351, 16227,  2064,  2022,
         2062, 21791,  2084,  1996,  4522, 16227,  5461,  1012,  2036,  1010,
         4406,  2358,  8609,  7810, 16227,  1010,  2122,  8107,  2024,  2087,
        14044,  2043,  2045,  2003,  1037,  2843,  1997,  2553,  1011,  2000,
         1011,  2553, 28436,  2306,  1037,  9324,  2021,  1996, 12906,  3209,
         2123,  1521,  1056,  2298,  2200,  2367,  2013,  2028,  2178,  1012,
         2005,  2742,  1010,  2065, 11681,  3421, 12906,  1010,  2059,  9324,
         2030,  4800,  9153,  3351, 16227,  2147,  2190,  2043,  1996, 11681,
         2024,  2200,  7578,  1012,  1037, 12482,  5178,  1997,  2122,  4725,
         2003,  2008,  2062,  3935,  5461,  2024,  4050,  3223,  2000, 17908,
         1996,  2951,  1010,  2295,  1996,  4725,  1999,  2023,  2338,  2064,
         2022,  3668,  2000,  5047,  2107,  2951,  1012,   102])"
184,1,"['rate', 'method', 'sampling', 'test']", Sampling principles and strategies,seg_7,"suppose we are interested in estimating the malaria rate in a densely tropical portion of rural indonesia. we learn that there are 30 villages in that part of the indonesian jungle, each more or less similar to the next. our goal is to test 150 individuals for malaria. what sampling method should be employed?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  6814,  2057,  2024,  4699,  1999,  9765, 22835,  1996, 19132,
         3446,  1999,  1037, 19441,  5133,  4664,  1997,  3541,  6239,  1012,
         2057,  4553,  2008,  2045,  2024,  2382,  4731,  1999,  2008,  2112,
         1997,  1996,  9003,  8894,  1010,  2169,  2062,  2030,  2625,  2714,
         2000,  1996,  2279,  1012,  2256,  3125,  2003,  2000,  3231,  5018,
         3633,  2005, 19132,  1012,  2054, 16227,  4118,  2323,  2022,  4846,
         1029,   102])"
185,1,"['cluster sampling', 'information', 'random sample', 'cluster sample', 'sample', 'sampling', 'random', 'simple random sample', 'data collection', 'data', 'stratified sampling', 'strata']", Sampling principles and strategies,seg_7,"a simple random sample would likely draw individuals from all 30 villages, which could make data collection extremely expensive. stratified sampling would be a challenge since it is unclear how we would build strata of similar individuals. however, cluster sampling or multistage sampling seem like very good ideas. if we decided to use multistage sampling, we might randomly select half of the villages, then randomly select 10 people from each. this would probably reduce our data collection costs substantially in comparison to a simple random sample, and the cluster sample would still give us reliable information, even if we would need to analyze the data with slightly more advanced methods than we discuss in this book.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  1037,  3722,  6721,  7099,  2052,  3497,  4009,  3633,  2013,
         2035,  2382,  4731,  1010,  2029,  2071,  2191,  2951,  3074,  5186,
         6450,  1012,  2358,  8609,  7810, 16227,  2052,  2022,  1037,  4119,
         2144,  2009,  2003, 10599,  2129,  2057,  2052,  3857, 22913,  1997,
         2714,  3633,  1012,  2174,  1010,  9324, 16227,  2030,  4800,  9153,
         3351, 16227,  4025,  2066,  2200,  2204,  4784,  1012,  2065,  2057,
         2787,  2000,  2224,  4800,  9153,  3351, 16227,  1010,  2057,  2453,
        18154,  7276,  2431,  1997,  1996,  4731,  1010,  2059, 18154,  7276,
         2184,  2111,  2013,  2169,  1012,  2023,  2052,  2763,  5547,  2256,
         2951,  3074,  5366, 12381,  1999,  7831,  2000,  1037,  3722,  6721,
         7099,  1010,  1998,  1996,  9324,  7099,  2052,  2145,  2507,  2149,
        10539,  2592,  1010,  2130,  2065,  2057,  2052,  2342,  2000, 17908,
         1996,  2951,  2007,  3621,  2062,  3935,  4725,  2084,  2057,  6848,
         1999,  2023,  2338,  1012,   102])"
186,0,[], Sampling principles and strategies,seg_7,cluster 9 cluster 2 cluster 5 cluster 7 ●,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 9324, 1023, 9324, 1016, 9324, 1019, 9324, 1021, 1619,  102])"
187,0,[], Sampling principles and strategies,seg_7,cluster 1 cluster 9 cluster 2 cliunsdteexr 5,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  9324,  1015,  9324,  1023,  9324,  1016, 18856, 17922,  3619,
        11927,  4402,  2595,  2099,  1019,   102])"
188,1,"['cluster sampling', 'observations', 'sample', 'sampling', 'measuring', 'sampled cluster', 'data', 'case']", Sampling principles and strategies,seg_7,"figure 1.15: examples of cluster and multistage sampling. in the top panel, cluster sampling was used: data were binned into nine clusters, three of these clusters were sampled, and all observations within these three cluster were included in the sample. in the bottom panel, multistage sampling was used, which differs from cluster sampling only in that we randomly select a subset of each cluster to be included in the sample rather than measuring every case in each sampled cluster.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 1., 0., 0., 1., 1., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([  101,  3275,  1015,  1012,  2321,  1024,  4973,  1997,  9324,  1998,
         4800,  9153,  3351, 16227,  1012,  1999,  1996,  2327,  5997,  1010,
         9324, 16227,  2001,  2109,  1024,  2951,  2020,  8026,  7228,  2046,
         3157, 12906,  1010,  2093,  1997,  2122, 12906,  2020, 18925,  1010,
         1998,  2035,  9420,  2306,  2122,  2093,  9324,  2020,  2443,  1999,
         1996,  7099,  1012,  1999,  1996,  3953,  5997,  1010,  4800,  9153,
         3351, 16227,  2001,  2109,  1010,  2029, 12980,  2013,  9324, 16227,
         2069,  1999,  2008,  2057, 18154,  7276,  1037, 16745,  1997,  2169,
         9324,  2000,  2022,  2443,  1999,  1996,  7099,  2738,  2084,  9854,
         2296,  2553,  1999,  2169, 18925,  9324,  1012,   102])"
189,1,['percent'], Sampling principles and strategies,seg_7,x 60 e ef il 50 0% 20% 40% 60% 80% 100% percent internet users,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([16227,  6481,  1998,  9942])","tensor([ 101, 1060, 3438, 1041, 1041, 2546, 6335, 2753, 1014, 1003, 2322, 1003,
        2871, 1003, 3438, 1003, 3770, 1003, 2531, 1003, 3867, 4274, 5198,  102])"
190,1,"['cases', 'treatment', 'randomized experiments', 'experiment', 'experiments', 'randomization', 'variables', 'randomized experiment']", Experiments,seg_9,"studies where the researchers assign treatments to cases are called experiments. when this assignment includes randomization, e.g. using a coin flip to decide which treatment a patient receives, it is called a randomized experiment. randomized experiments are fundamentally important when trying to show a causal connection between two variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])",tensor([7885]),"tensor([  101,  2913,  2073,  1996,  6950, 23911, 13441,  2000,  3572,  2024,
         2170,  7885,  1012,  2043,  2023,  8775,  2950,  6721,  3989,  1010,
         1041,  1012,  1043,  1012,  2478,  1037,  9226, 11238,  2000,  5630,
         2029,  3949,  1037,  5776,  8267,  1010,  2009,  2003,  2170,  1037,
         6721,  3550,  7551,  1012,  6721,  3550,  7885,  2024, 24670,  2590,
         2043,  2667,  2000,  2265,  1037, 28102,  4434,  2090,  2048, 10857,
         1012,   102])"
191,1,"['experimental', 'design']", Experiments,seg_9,1.4.1 principles of experimental design,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([7885]),"tensor([ 101, 1015, 1012, 1018, 1012, 1015, 6481, 1997, 6388, 2640,  102])"
192,1,['experiments'], Experiments,seg_9,randomized experiments are generally built on four principles.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([ 101, 6721, 3550, 7885, 2024, 3227, 2328, 2006, 2176, 6481, 1012,  102])"
193,1,"['cases', 'control']", Experiments,seg_9,"controlling. researchers assign treatments to cases, and they do their best to control any other",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])",tensor([7885]),"tensor([  101,  9756,  1012,  6950, 23911, 13441,  2000,  3572,  1010,  1998,
         2027,  2079,  2037,  2190,  2000,  2491,  2151,  2060,   102])"
194,1,['control'], Experiments,seg_9,"differences in the groups.27 for example, when patients take a drug in pill form, some patients take the pill with only a sip of water while others may have it with an entire glass of water. to control for the effect of water consumption, a doctor may ask all patients to drink a 12 ounce glass of water with the pill.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  5966,  1999,  1996,  2967,  1012,  2676,  2005,  2742,  1010,
         2043,  5022,  2202,  1037,  4319,  1999, 17357,  2433,  1010,  2070,
         5022,  2202,  1996, 17357,  2007,  2069,  1037, 10668,  1997,  2300,
         2096,  2500,  2089,  2031,  2009,  2007,  2019,  2972,  3221,  1997,
         2300,  1012,  2000,  2491,  2005,  1996,  3466,  1997,  2300,  8381,
         1010,  1037,  3460,  2089,  3198,  2035,  5022,  2000,  4392,  1037,
         2260, 19471,  3221,  1997,  2300,  2007,  1996, 17357,  1012,   102])"
195,1,"['treatment', 'treatment groups', 'variables']", Experiments,seg_9,randomization. researchers randomize patients into treatment groups to account for variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.])",tensor([7885]),"tensor([  101,  6721,  3989,  1012,  6950,  6721,  4697,  5022,  2046,  3949,
         2967,  2000,  4070,  2005, 10857,   102])"
196,1,"['control group', 'treatment', 'control', 'treatment or control group', 'bias']", Experiments,seg_9,"that cannot be controlled. for example, some patients may be more susceptible to a disease than others due to their dietary habits. randomizing patients into the treatment or control group helps even out such differences, and it also prevents accidental bias from entering the study.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  2008,  3685,  2022,  4758,  1012,  2005,  2742,  1010,  2070,
         5022,  2089,  2022,  2062, 18002,  2000,  1037,  4295,  2084,  2500,
         2349,  2000,  2037, 23444, 14243,  1012,  6721,  6026,  5022,  2046,
         1996,  3949,  2030,  2491,  2177,  7126,  2130,  2041,  2107,  5966,
         1010,  1998,  2009,  2036, 16263, 17128, 13827,  2013,  5738,  1996,
         2817,  1012,   102])"
197,1,"['cases', 'estimate']", Experiments,seg_9,"replication. the more cases researchers observe, the more accurately they can estimate the effect",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([7885]),"tensor([  101, 21647,  1012,  1996,  2062,  3572,  6950, 11949,  1010,  1996,
         2062, 14125,  2027,  2064, 10197,  1996,  3466,   102])"
198,1,"['explanatory variable', 'replicate', 'response', 'sample', 'explanatory', 'variable']", Experiments,seg_9,"of the explanatory variable on the response. in a single study, we replicate by collecting a sufficiently large sample. additionally, a group of scientists may replicate an entire study to verify an earlier finding.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  1997,  1996,  4654, 24759,  5162,  7062,  8023,  2006,  1996,
         3433,  1012,  1999,  1037,  2309,  2817,  1010,  2057, 28024,  2011,
         9334,  1037, 12949,  2312,  7099,  1012,  5678,  1010,  1037,  2177,
         1997,  6529,  2089, 28024,  2019,  2972,  2817,  2000, 20410,  2019,
         3041,  4531,  1012,   102])"
199,1,"['variables', 'treatment']", Experiments,seg_9,"blocking. researchers sometimes know or suspect that variables, other than the treatment, influ-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])",tensor([7885]),"tensor([  101, 10851,  1012,  6950,  2823,  2113,  2030,  8343,  2008, 10857,
         1010,  2060,  2084,  1996,  3949,  1010,  1999, 10258,  2226,  1011,
          102])"
200,1,"['cases', 'control group', 'treatment group', 'treatment', 'response', 'control', 'treatment groups', 'variable']", Experiments,seg_9,"ence the response. under these circumstances, they may first group individuals based on this variable into blocks and then randomize cases within each block to the treatment groups. this strategy is often referred to as blocking. for instance, if we are looking at the effect of a drug on heart attacks, we might first split patients in the study into low-risk and high-risk blocks, then randomly assign half the patients from each block to the control group and the other half to the treatment group, as shown in figure 1.16. this strategy ensures each treatment group has an equal number of low-risk and high-risk patients.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([7885]),"tensor([  101,  4372,  3401,  1996,  3433,  1012,  2104,  2122,  6214,  1010,
         2027,  2089,  2034,  2177,  3633,  2241,  2006,  2023,  8023,  2046,
         5991,  1998,  2059,  6721,  4697,  3572,  2306,  2169,  3796,  2000,
         1996,  3949,  2967,  1012,  2023,  5656,  2003,  2411,  3615,  2000,
         2004, 10851,  1012,  2005,  6013,  1010,  2065,  2057,  2024,  2559,
         2012,  1996,  3466,  1997,  1037,  4319,  2006,  2540,  4491,  1010,
         2057,  2453,  2034,  3975,  5022,  1999,  1996,  2817,  2046,  2659,
         1011,  3891,  1998,  2152,  1011,  3891,  5991,  1010,  2059, 18154,
        23911,  2431,  1996,  5022,  2013,  2169,  3796,  2000,  1996,  2491,
         2177,  1998,  1996,  2060,  2431,  2000,  1996,  3949,  2177,  1010,
         2004,  3491,  1999,  3275,  1015,  1012,  2385,  1012,  2023,  5656,
        21312,  2169,  3949,  2177,  2038,  2019,  5020,  2193,  1997,  2659,
         1011,  3891,  1998,  2152,  1011,  3891,  5022,  1012,   102])"
201,1,"['data', 'design', 'experimental', 'experiments', 'statistical']", Experiments,seg_9,"it is important to incorporate the first three experimental design principles into any study, and this book describes applicable methods for analyzing data from such experiments. blocking is a slightly more advanced technique, and statistical methods in this book may be extended to analyze data collected using blocking.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  2009,  2003,  2590,  2000, 13265,  1996,  2034,  2093,  6388,
         2640,  6481,  2046,  2151,  2817,  1010,  1998,  2023,  2338,  5577,
        12711,  4725,  2005, 20253,  2951,  2013,  2107,  7885,  1012, 10851,
         2003,  1037,  3621,  2062,  3935,  6028,  1010,  1998,  7778,  4725,
         1999,  2023,  2338,  2089,  2022,  3668,  2000, 17908,  2951,  5067,
         2478, 10851,  1012,   102])"
202,1,"['bias', 'experiments']", Experiments,seg_9,1.4.2 reducing bias in human experiments,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.])",tensor([7885]),"tensor([  101,  1015,  1012,  1018,  1012,  1016,  8161, 13827,  1999,  2529,
         7885,   102])"
203,1,"['bias', 'cases', 'unbiased', 'standard', 'experiments', 'data collection', 'data']", Experiments,seg_9,"randomized experiments are the gold standard for data collection, but they do not ensure an unbiased perspective into the cause and effect relationship in all cases. human studies are perfect examples where bias can unintentionally arise. here we reconsider a study where a new drug was used to treat heart attack patients. in particular, researchers wanted to know if the drug reduced deaths in patients.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  6721,  3550,  7885,  2024,  1996,  2751,  3115,  2005,  2951,
         3074,  1010,  2021,  2027,  2079,  2025,  5676,  2019,  4895, 11607,
         6924,  7339,  2046,  1996,  3426,  1998,  3466,  3276,  1999,  2035,
         3572,  1012,  2529,  2913,  2024,  3819,  4973,  2073, 13827,  2064,
         4895, 18447,  4765, 19301,  2135, 13368,  1012,  2182,  2057, 28667,
         5644, 18688,  1037,  2817,  2073,  1037,  2047,  4319,  2001,  2109,
         2000,  7438,  2540,  2886,  5022,  1012,  1999,  3327,  1010,  6950,
         2359,  2000,  2113,  2065,  1996,  4319,  4359,  6677,  1999,  5022,
         1012,   102])"
204,1,"['control group', 'treatment group', 'treatment', 'control', 'experiment', 'randomized experiment']", Experiments,seg_9,"these researchers designed a randomized experiment because they wanted to draw causal conclusions about the drug’s effect. study volunteers28 were randomly placed into two study groups. one group, the treatment group, received the drug. the other group, called the control group, did not receive any drug treatment.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])",tensor([7885]),"tensor([  101,  2122,  6950,  2881,  1037,  6721,  3550,  7551,  2138,  2027,
         2359,  2000,  4009, 28102, 15306,  2055,  1996,  4319,  1521,  1055,
         3466,  1012,  2817,  7314, 22407,  2020, 18154,  2872,  2046,  2048,
         2817,  2967,  1012,  2028,  2177,  1010,  1996,  3949,  2177,  1010,
         2363,  1996,  4319,  1012,  1996,  2060,  2177,  1010,  2170,  1996,
         2491,  2177,  1010,  2106,  2025,  4374,  2151,  4319,  3949,  1012,
          102])"
205,1,"['categories', 'risk', 'treatment group', 'treatment', 'treatment groups', 'randomization', 'variable']", Experiments,seg_9,"figure 1.16: blocking using a variable depicting patient risk. patients are first divided into low-risk and high-risk blocks, then each block is evenly separated into the treatment groups using randomization. this strategy ensures an equal representation of patients in each treatment group from both the low-risk and high-risk categories.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])",tensor([7885]),"tensor([  101,  3275,  1015,  1012,  2385,  1024, 10851,  2478,  1037,  8023,
        10775,  5776,  3891,  1012,  5022,  2024,  2034,  4055,  2046,  2659,
         1011,  3891,  1998,  2152,  1011,  3891,  5991,  1010,  2059,  2169,
         3796,  2003, 18030,  5459,  2046,  1996,  3949,  2967,  2478,  6721,
         3989,  1012,  2023,  5656, 21312,  2019,  5020,  6630,  1997,  5022,
         1999,  2169,  3949,  2177,  2013,  2119,  1996,  2659,  1011,  3891,
         1998,  2152,  1011,  3891,  7236,  1012,   102])"
206,1,"['risk', 'treatment group', 'treatment']", Experiments,seg_9,"put yourself in the place of a person in the study. if you are in the treatment group, you are given a fancy new drug that you anticipate will help you. on the other hand, a person in the other group doesn’t receive the drug and sits idly, hoping her participation doesn’t increase her risk of death. these perspectives suggest there are actually two effects: the one of interest is the effectiveness of the drug, and the second is an emotional effect that is difficult to quantify.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  2404,  4426,  1999,  1996,  2173,  1997,  1037,  2711,  1999,
         1996,  2817,  1012,  2065,  2017,  2024,  1999,  1996,  3949,  2177,
         1010,  2017,  2024,  2445,  1037, 11281,  2047,  4319,  2008,  2017,
         3424,  6895, 17585,  2097,  2393,  2017,  1012,  2006,  1996,  2060,
         2192,  1010,  1037,  2711,  1999,  1996,  2060,  2177,  2987,  1521,
         1056,  4374,  1996,  4319,  1998,  7719,  8909,  2135,  1010,  5327,
         2014,  6577,  2987,  1521,  1056,  3623,  2014,  3891,  1997,  2331,
         1012,  2122, 15251,  6592,  2045,  2024,  2941,  2048,  3896,  1024,
         1996,  2028,  1997,  3037,  2003,  1996, 12353,  1997,  1996,  4319,
         1010,  1998,  1996,  2117,  2003,  2019,  6832,  3466,  2008,  2003,
         3697,  2000, 24110, 27351,  1012,   102])"
207,1,"['control group', 'treatment', 'control', 'results', 'bias']", Experiments,seg_9,"researchers aren’t usually interested in the emotional effect, which might bias the study. to circumvent this problem, researchers do not want patients to know which group they are in. when researchers keep the patients uninformed about their treatment, the study is said to be blind. but there is one problem: if a patient doesn’t receive a treatment, she will know she is in the control group. the solution to this problem is to give fake treatments to patients in the control group. a fake treatment is called a placebo, and an effective placebo is the key to making a study truly blind. a classic example of a placebo is a sugar pill that is made to look like the actual treatment pill. often times, a placebo results in a slight but real improvement in patients. this effect has been dubbed the placebo effect.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  6950,  4995,  1521,  1056,  2788,  4699,  1999,  1996,  6832,
         3466,  1010,  2029,  2453, 13827,  1996,  2817,  1012,  2000, 25022,
        11890,  2819, 15338,  2023,  3291,  1010,  6950,  2079,  2025,  2215,
         5022,  2000,  2113,  2029,  2177,  2027,  2024,  1999,  1012,  2043,
         6950,  2562,  1996,  5022,  4895,  2378, 29021,  2055,  2037,  3949,
         1010,  1996,  2817,  2003,  2056,  2000,  2022,  6397,  1012,  2021,
         2045,  2003,  2028,  3291,  1024,  2065,  1037,  5776,  2987,  1521,
         1056,  4374,  1037,  3949,  1010,  2016,  2097,  2113,  2016,  2003,
         1999,  1996,  2491,  2177,  1012,  1996,  5576,  2000,  2023,  3291,
         2003,  2000,  2507,  8275, 13441,  2000,  5022,  1999,  1996,  2491,
         2177,  1012,  1037,  8275,  3949,  2003,  2170,  1037,  2173,  5092,
         1010,  1998,  2019,  4621,  2173,  5092,  2003,  1996,  3145,  2000,
         2437,  1037,  2817,  5621,  6397,  1012,  1037,  4438,  2742,  1997,
         1037,  2173,  5092,  2003,  1037,  5699, 17357,  2008,  2003,  2081,
         2000,  2298,  2066,  1996,  5025,  3949, 17357,  1012,  2411,  2335,
         1010,  1037,  2173,  5092,  3463,  1999,  1037,  7263,  2021,  2613,
         7620,  1999,  5022,  1012,  2023,  3466,  2038,  2042,  9188,  1996,
         2173,  5092,  3466,  1012,   102])"
208,1,"['treatment', 'bias']", Experiments,seg_9,"the patients are not the only ones who should be blinded: doctors and researchers can accidentally bias a study. when a doctor knows a patient has been given the real treatment, she might inadvertently give that patient more attention or care than a patient that she knows is on the placebo. to guard against this bias, which again has been found to have a measurable effect in some instances, most modern studies employ a double-blind setup where doctors or researchers who interact with patients are, just like the patients, unaware of who is or is not receiving the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  1996,  5022,  2024,  2025,  1996,  2069,  3924,  2040,  2323,
         2022, 20641,  1024,  7435,  1998,  6950,  2064,  9554, 13827,  1037,
         2817,  1012,  2043,  1037,  3460,  4282,  1037,  5776,  2038,  2042,
         2445,  1996,  2613,  3949,  1010,  2016,  2453, 21089,  2507,  2008,
         5776,  2062,  3086,  2030,  2729,  2084,  1037,  5776,  2008,  2016,
         4282,  2003,  2006,  1996,  2173,  5092,  1012,  2000,  3457,  2114,
         2023, 13827,  1010,  2029,  2153,  2038,  2042,  2179,  2000,  2031,
         1037,  2033, 28329,  3466,  1999,  2070, 12107,  1010,  2087,  2715,
         2913, 12666,  1037,  3313,  1011,  6397, 16437,  2073,  7435,  2030,
         6950,  2040, 11835,  2007,  5022,  2024,  1010,  2074,  2066,  1996,
         5022,  1010, 11499,  1997,  2040,  2003,  2030,  2003,  2025,  4909,
         1996,   102])"
209,1,['treatment'], Experiments,seg_9,29 treatment.,tensor(1),"tensor([0., 0., 1., 0., 0.])",tensor([7885]),"tensor([ 101, 2756, 3949, 1012,  102])"
210,1,['experiment'], Experiments,seg_9,look back to the study in section 1.1 where researchers were testing whether stents were effective at reducing strokes in at-risk patients. is this an experiment? was the study blinded? was it double-blinded?30,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  2298,  2067,  2000,  1996,  2817,  1999,  2930,  1015,  1012,
         1015,  2073,  6950,  2020,  5604,  3251, 26261,  7666,  2020,  4621,
         2012,  8161, 13692,  1999,  2012,  1011,  3891,  5022,  1012,  2003,
         2023,  2019,  7551,  1029,  2001,  1996,  2817, 20641,  1029,  2001,
         2009,  3313,  1011, 20641,  1029,  2382,   102])"
211,0,[], Experiments,seg_9,"for the study in section 1.1, could the researchers have employed a placebo? if so, what would that placebo have looked like?31",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([7885]),"tensor([ 101, 2005, 1996, 2817, 1999, 2930, 1015, 1012, 1015, 1010, 2071, 1996,
        6950, 2031, 4846, 1037, 2173, 5092, 1029, 2065, 2061, 1010, 2054, 2052,
        2008, 2173, 5092, 2031, 2246, 2066, 1029, 2861,  102])"
212,1,"['risk', 'control group', 'treatment', 'control', 'experiment']", Experiments,seg_9,"you may have many questions about the ethics of sham surgeries to create a placebo after reading guided practice 1.17. these questions may have even arisen in your mind when in the general experiment context, where a possibly helpful treatment was withheld from individuals in the control group; the main difference is that a sham surgery tends to create additional risk, while withholding a treatment only maintains a person’s risk.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([7885]),"tensor([  101,  2017,  2089,  2031,  2116,  3980,  2055,  1996,  9615,  1997,
        25850, 12058,  5134,  2000,  3443,  1037,  2173,  5092,  2044,  3752,
         8546,  3218,  1015,  1012,  2459,  1012,  2122,  3980,  2089,  2031,
         2130, 13368,  2078,  1999,  2115,  2568,  2043,  1999,  1996,  2236,
         7551,  6123,  1010,  2073,  1037,  4298, 14044,  3949,  2001,  2007,
        24850,  2013,  3633,  1999,  1996,  2491,  2177,  1025,  1996,  2364,
         4489,  2003,  2008,  1037, 25850,  5970, 12102,  2000,  3443,  3176,
         3891,  1010,  2096,  2007, 23410,  1037,  3949,  2069,  9319,  1037,
         2711,  1521,  1055,  3891,  1012,   102])"
213,1,"['treatment', 'risk', 'experiments']", Experiments,seg_9,"there are always multiple viewpoints of experiments and placebos, and rarely is it obvious which is ethically “correct”. for instance, is it ethical to use a sham surgery when it creates a risk to the patient? however, if we don’t use sham surgeries, we may promote the use of a costly treatment that has no real effect; if this happens, money and other resources will be diverted away from other treatments that are known to be helpful. ultimately, this is a difficult situation where we cannot perfectly protect both the patients who have volunteered for the study and the patients who may benefit (or not) from the treatment in the future.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0.])",tensor([7885]),"tensor([  101,  2045,  2024,  2467,  3674, 21386,  2015,  1997,  7885,  1998,
         2173, 15853,  1010,  1998,  6524,  2003,  2009,  5793,  2029,  2003,
        12962,  2135,  1523,  6149,  1524,  1012,  2005,  6013,  1010,  2003,
         2009, 12962,  2000,  2224,  1037, 25850,  5970,  2043,  2009,  9005,
         1037,  3891,  2000,  1996,  5776,  1029,  2174,  1010,  2065,  2057,
         2123,  1521,  1056,  2224, 25850, 12058,  5134,  1010,  2057,  2089,
         5326,  1996,  2224,  1997,  1037, 17047,  3949,  2008,  2038,  2053,
         2613,  3466,  1025,  2065,  2023,  6433,  1010,  2769,  1998,  2060,
         4219,  2097,  2022, 18356,  2185,  2013,  2060, 13441,  2008,  2024,
         2124,  2000,  2022, 14044,  1012,  4821,  1010,  2023,  2003,  1037,
         3697,  3663,  2073,  2057,  3685,  6669,  4047,  2119,  1996,  5022,
         2040,  2031, 14382,  2005,  1996,  2817,  1998,  1996,  5022,  2040,
         2089,  5770,  1006,  2030,  2025,  1007,  2013,  1996,  3949,  1999,
         1996,  2925,  1012,   102])"
214,0,[], Experiments,seg_9,percent with bachelor's degree,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([7885]),"tensor([ 101, 3867, 2007, 5065, 1005, 1055, 3014,  102])"
215,1,"['case', 'categorical data', 'statistics', 'statistical', 'numerical', 'data', 'categorical']",Chapter  Summarizing data,seg_11,"2.1 examining numerical data 2.2 considering categorical data 2.3 case study: malaria vaccine this chapter focuses on the mechanics and construction of summary statistics and graphs. we use statistical software for generating the summaries and graphs presented in this chapter and book. however, since this might be your first exposure to these concepts, we take our time in this chapter to detail how to create them. mastery of the content presented in this chapter will be crucial for understanding the methods and techniques introduced in rest of the book. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([3127, 7680, 7849, 6026, 2951])","tensor([  101,  1016,  1012,  1015, 12843, 15973,  2951,  1016,  1012,  1016,
         6195,  4937, 27203,  2951,  1016,  1012,  1017,  2553,  2817,  1024,
        19132, 17404,  2023,  3127,  7679,  2006,  1996,  9760,  1998,  2810,
         1997, 12654,  6747,  1998, 19287,  1012,  2057,  2224,  7778,  4007,
         2005, 11717,  1996,  7680,  7849,  3111,  1998, 19287,  3591,  1999,
         2023,  3127,  1998,  2338,  1012,  2174,  1010,  2144,  2023,  2453,
         2022,  2115,  2034,  7524,  2000,  2122,  8474,  1010,  2057,  2202,
         2256,  2051,  1999,  2023,  3127,  2000,  6987,  2129,  2000,  3443,
         2068,  1012, 26364,  1997,  1996,  4180,  3591,  1999,  2023,  3127,
         2097,  2022, 10232,  2005,  4824,  1996,  4725,  1998,  5461,  3107,
         1999,  2717,  1997,  1996,  2338,  1012,  2005,  6876,  1010, 14816,
         1010,  1998,  2060,  4219,  1010,  3531,  3942,  7479,  1012,  2330,
        18447,  3217,  1012,  8917,  1013,  9808,   102])"
216,1,"['set', 'numerical', 'categorical variables', 'variables', 'data set', 'data', 'variable', 'categorical']", Examining numerical data,seg_13,"in this section we will explore techniques for summarizing numerical variables. for example, consider the loan amount variable from the loan50 data set, which represents the loan size for all 50 loans in the data set. this variable is numerical since we can sensibly discuss the numerical difference of the size of two loans. on the other hand, area codes and zip codes are not numerical, but rather they are categorical variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1999,  2023,  2930,  2057,  2097,  8849,  5461,  2005,  7680,
         7849,  6026, 15973, 10857,  1012,  2005,  2742,  1010,  5136,  1996,
         5414,  3815,  8023,  2013,  1996,  5414, 12376,  2951,  2275,  1010,
         2029,  5836,  1996,  5414,  2946,  2005,  2035,  2753, 10940,  1999,
         1996,  2951,  2275,  1012,  2023,  8023,  2003, 15973,  2144,  2057,
         2064, 12411,  5332,  6321,  6848,  1996, 15973,  4489,  1997,  1996,
         2946,  1997,  2048, 10940,  1012,  2006,  1996,  2060,  2192,  1010,
         2181,  9537,  1998, 14101,  9537,  2024,  2025, 15973,  1010,  2021,
         2738,  2027,  2024,  4937, 27203, 10857,  1012,   102])"
217,1,"['sets', 'set', 'data sets', 'county', 'variables', 'data set', 'data']", Examining numerical data,seg_13,"throughout this section and the next, we will apply these methods using the loan50 and county data sets, which were introduced in section 1.2. if you’d like to review the variables from either data set, see figures 1.3 and 1.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2802,  2023,  2930,  1998,  1996,  2279,  1010,  2057,  2097,
         6611,  2122,  4725,  2478,  1996,  5414, 12376,  1998,  2221,  2951,
         4520,  1010,  2029,  2020,  3107,  1999,  2930,  1015,  1012,  1016,
         1012,  2065,  2017,  1521,  1040,  2066,  2000,  3319,  1996, 10857,
         2013,  2593,  2951,  2275,  1010,  2156,  4481,  1015,  1012,  1017,
         1998,  1015,  1012,  1019,  1012,   102])"
218,1,"['paired', 'paired data', 'scatterplots', 'data']", Examining numerical data,seg_13,2.1.1 scatterplots for paired data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1015,  8040, 20097, 24759, 12868,
         2005, 12739,  2951,   102])"
219,1,"['cases', 'rate', 'county', 'set', 'numerical', 'scatterplot', 'variables', 'data set', 'data', 'case']", Examining numerical data,seg_13,"a scatterplot provides a case-by-case view of data for two numerical variables. in figure 1.8 on page 16, a scatterplot was used to examine the homeownership rate against the fraction of housing units that were part of multi-unit properties (e.g. apartments) in the county data set. another scatterplot is shown in figure 2.1, comparing the total income of a borrower (total income) and the amount they borrowed (loan amount) for the loan50 data set. in any scatterplot, each point represents a single case. since there are 50 cases in loan50, there are 50 points in figure 2.1.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1037,  8040, 20097, 24759,  4140,  3640,  1037,  2553,  1011,
         2011,  1011,  2553,  3193,  1997,  2951,  2005,  2048, 15973, 10857,
         1012,  1999,  3275,  1015,  1012,  1022,  2006,  3931,  2385,  1010,
         1037,  8040, 20097, 24759,  4140,  2001,  2109,  2000, 11628,  1996,
         2188, 12384,  2545,  5605,  3446,  2114,  1996, 12884,  1997,  3847,
         3197,  2008,  2020,  2112,  1997,  4800,  1011,  3131,  5144,  1006,
         1041,  1012,  1043,  1012,  9620,  1007,  1999,  1996,  2221,  2951,
         2275,  1012,  2178,  8040, 20097, 24759,  4140,  2003,  3491,  1999,
         3275,  1016,  1012,  1015,  1010, 13599,  1996,  2561,  3318,  1997,
         1037, 17781,  2121,  1006,  2561,  3318,  1007,  1998,  1996,  3815,
         2027, 11780,  1006,  5414,  3815,  1007,  2005,  1996,  5414, 12376,
         2951,  2275,  1012,  1999,  2151,  8040, 20097, 24759,  4140,  1010,
         2169,  2391,  5836,  1037,  2309,  2553,  1012,  2144,  2045,  2024,
         2753,  3572,  1999,  5414, 12376,  1010,  2045,  2024,  2753,  2685,
         1999,  3275,  1016,  1012,  1015,  1012,   102])"
220,1,"['set', 'scatterplot', 'data set', 'data']", Examining numerical data,seg_13,figure 2.1: a scatterplot of total income versus loan amount for the loan50 data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1015,  1024,  1037,  8040, 20097, 24759,
         4140,  1997,  2561,  3318,  6431,  5414,  3815,  2005,  1996,  5414,
        12376,  2951,  2275,  1012,   102])"
221,0,[], Examining numerical data,seg_13,"looking at figure 2.1, we see that there are many borrowers with an income below $100,000 on the left side of the graph, while there are a handful of borrowers with income above $250,000.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([12843, 15973,  2951])","tensor([  101,  2559,  2012,  3275,  1016,  1012,  1015,  1010,  2057,  2156,
         2008,  2045,  2024,  2116, 17781,  2545,  2007,  2019,  3318,  2917,
         1002,  2531,  1010,  2199,  2006,  1996,  2187,  2217,  1997,  1996,
        10629,  1010,  2096,  2045,  2024,  1037,  9210,  1997, 17781,  2545,
         2007,  3318,  2682,  1002,  5539,  1010,  2199,  1012,   102])"
222,1,"['rate', 'variables', 'plot', 'median']", Examining numerical data,seg_13,"figure 2.2 shows a plot of median household income against the poverty rate for 3,142 counties. what can be said about the relationship between these variables?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1016,  3065,  1037,  5436,  1997,  3991,
         4398,  3318,  2114,  1996,  5635,  3446,  2005,  1017,  1010, 16087,
         5721,  1012,  2054,  2064,  2022,  2056,  2055,  1996,  3276,  2090,
         2122, 10857,  1029,   102])"
223,1,"['scatterplots', 'nonlinear']", Examining numerical data,seg_13,"the relationship is evidently nonlinear, as highlighted by the dashed line. this is different from previous scatterplots we’ve seen, which show relationships that do not show much, if any, curvature in the trend.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  3276,  2003, 15329, 27400,  1010,  2004, 11548,  2011,
         1996, 18198,  2240,  1012,  2023,  2003,  2367,  2013,  3025,  8040,
        20097, 24759, 12868,  2057,  1521,  2310,  2464,  1010,  2029,  2265,
         6550,  2008,  2079,  2025,  2265,  2172,  1010,  2065,  2151,  1010,
        25045,  1999,  1996,  9874,  1012,   102])"
224,1,"['rate', 'percent']", Examining numerical data,seg_13,$120k e m o $100k cn i d l $80k o h es $60k u oh n $40k a i d e $20k m $0 0% 10% 20% 30% 40% 50% poverty rate (percent),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1002,  6036,  2243,  1041,  1049,  1051,  1002,  2531,  2243,
        27166,  1045,  1040,  1048,  1002,  3770,  2243,  1051,  1044,  9686,
         1002,  3438,  2243,  1057,  2821,  1050,  1002,  2871,  2243,  1037,
         1045,  1040,  1041,  1002,  2322,  2243,  1049,  1002,  1014,  1014,
         1003,  2184,  1003,  2322,  1003,  2382,  1003,  2871,  1003,  2753,
         1003,  5635,  3446,  1006,  3867,  1007,   102])"
225,1,"['rate', 'county', 'data', 'set', 'statistical', 'model', 'scatterplot', 'data set', 'median', 'statistical model']", Examining numerical data,seg_13,figure 2.2: a scatterplot of the median household income against the poverty rate for the county data set. a statistical model has also been fit to the data and is shown as a dashed line.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1016,  1024,  1037,  8040, 20097, 24759,
         4140,  1997,  1996,  3991,  4398,  3318,  2114,  1996,  5635,  3446,
         2005,  1996,  2221,  2951,  2275,  1012,  1037,  7778,  2944,  2038,
         2036,  2042,  4906,  2000,  1996,  2951,  1998,  2003,  3491,  2004,
         1037, 18198,  2240,  1012,   102])"
226,1,"['data', 'scatterplots']", Examining numerical data,seg_13,"what do scatterplots reveal about the data, and how are they useful?1",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2054,  2079,  8040, 20097, 24759, 12868,  7487,  2055,  1996,
         2951,  1010,  1998,  2129,  2024,  2027,  6179,  1029,  1015,   102])"
227,1,"['scatterplot', 'variables', 'association']", Examining numerical data,seg_13,describe two variables that would have a horseshoe-shaped association in a scatterplot (∩ or _).2,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  6235,  2048, 10857,  2008,  2052,  2031,  1037, 23449,  1011,
         5044,  2523,  1999,  1037,  8040, 20097, 24759,  4140,  1006,  1604,
         2030,  1035,  1007,  1012,  1016,   102])"
228,1,"['mean', 'plots', 'dot plots']", Examining numerical data,seg_13,2.1.2 dot plots and the mean,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1016, 11089, 14811,  1998,  1996,
         2812,   102])"
229,1,"['cases', 'rate', 'dot plot', 'scatterplot', 'variables', 'plot', 'variable']", Examining numerical data,seg_13,"sometimes two variables are one too many: only one variable may be of interest. in these cases, a dot plot provides the most basic of displays. a dot plot is a one-variable scatterplot; an example using the interest rate of 50 loans is shown in figure 2.3. a stacked version of this dot plot is shown in figure 2.4.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2823,  2048, 10857,  2024,  2028,  2205,  2116,  1024,  2069,
         2028,  8023,  2089,  2022,  1997,  3037,  1012,  1999,  2122,  3572,
         1010,  1037, 11089,  5436,  3640,  1996,  2087,  3937,  1997,  8834,
         1012,  1037, 11089,  5436,  2003,  1037,  2028,  1011,  8023,  8040,
        20097, 24759,  4140,  1025,  2019,  2742,  2478,  1996,  3037,  3446,
         1997,  2753, 10940,  2003,  3491,  1999,  3275,  1016,  1012,  1017,
         1012,  1037, 16934,  2544,  1997,  2023, 11089,  5436,  2003,  3491,
         1999,  3275,  1016,  1012,  1018,  1012,   102])"
230,1,['rate'], Examining numerical data,seg_13,5% 10% 15% 20% 25% interest rate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([12843, 15973,  2951])","tensor([ 101, 1019, 1003, 2184, 1003, 2321, 1003, 2322, 1003, 2423, 1003, 3037,
        3446,  102])"
231,1,"['mean', 'rate', 'set', 'dot plot', 'plot', 'data set', 'data']", Examining numerical data,seg_13,figure 2.3: a dot plot of interest rate for the loan50 data set. the distribution’s mean is shown as a red triangle.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1017,  1024,  1037, 11089,  5436,  1997,
         3037,  3446,  2005,  1996,  5414, 12376,  2951,  2275,  1012,  1996,
         4353,  1521,  1055,  2812,  2003,  3491,  2004,  1037,  2417,  9546,
         1012,   102])"
232,1,"['rate', 'percent']", Examining numerical data,seg_13,"5% 10% 15% 20% 25% interest rate, rounded to nearest percent",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0.])","tensor([12843, 15973,  2951])","tensor([ 101, 1019, 1003, 2184, 1003, 2321, 1003, 2322, 1003, 2423, 1003, 3037,
        3446, 1010, 8352, 2000, 7205, 3867,  102])"
233,1,"['data set', 'mean', 'rate', 'set', 'dot plot', 'rates', 'plot', 'percent', 'data']", Examining numerical data,seg_13,"figure 2.4: a stacked dot plot of interest rate for the loan50 data set. the rates have been rounded to the nearest percent in this plot, and the distribution’s mean is shown as a red triangle.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1018,  1024,  1037, 16934, 11089,  5436,
         1997,  3037,  3446,  2005,  1996,  5414, 12376,  2951,  2275,  1012,
         1996,  6165,  2031,  2042,  8352,  2000,  1996,  7205,  3867,  1999,
         2023,  5436,  1010,  1998,  1996,  4353,  1521,  1055,  2812,  2003,
         3491,  2004,  1037,  2417,  9546,  1012,   102])"
234,1,"['mean', 'rate', 'observations', 'number of observations', 'distribution', 'rates', 'average', 'data']", Examining numerical data,seg_13,"the mean, often called the average, is a common way to measure the center of a distribution of data. to compute the mean interest rate, we add up all the interest rates and divide by the number of observations:",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2812,  1010,  2411,  2170,  1996,  2779,  1010,  2003,
         1037,  2691,  2126,  2000,  5468,  1996,  2415,  1997,  1037,  4353,
         1997,  2951,  1012,  2000, 24134,  1996,  2812,  3037,  3446,  1010,
         2057,  5587,  2039,  2035,  1996,  3037,  6165,  1998, 11443,  2011,
         1996,  2193,  1997,  9420,  1024,   102])"
235,1,"['mean', 'rate', 'sample', 'sample mean', 'distribution', 'average', 'variable']", Examining numerical data,seg_13,"the sample mean is often labeled x̄. the letter x is being used as a generic placeholder for the variable of interest, interest rate, and the bar over the x communicates we’re looking at the average interest rate, which for these 50 loans was 11.57%. it is useful to think of the mean as the balancing point of the distribution, and it’s shown as a triangle in figures 2.3 and 2.4.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  7099,  2812,  2003,  2411, 12599,  1060,  1012,  1996,
         3661,  1060,  2003,  2108,  2109,  2004,  1037, 12391,  2173, 14528,
         2005,  1996,  8023,  1997,  3037,  1010,  3037,  3446,  1010,  1998,
         1996,  3347,  2058,  1996,  1060, 10639,  2015,  2057,  1521,  2128,
         2559,  2012,  1996,  2779,  3037,  3446,  1010,  2029,  2005,  2122,
         2753, 10940,  2001,  2340,  1012,  5401,  1003,  1012,  2009,  2003,
         6179,  2000,  2228,  1997,  1996,  2812,  2004,  1996, 20120,  2391,
         1997,  1996,  4353,  1010,  1998,  2009,  1521,  1055,  3491,  2004,
         1037,  9546,  1999,  4481,  1016,  1012,  1017,  1998,  1016,  1012,
         1018,  1012,   102])"
236,1,"['mean', 'observations', 'number of observations', 'sample', 'sample mean']", Examining numerical data,seg_13,the sample mean can be computed as the sum of the observed values divided by the number of observations:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  7099,  2812,  2064,  2022, 24806,  2004,  1996,  7680,
         1997,  1996,  5159,  5300,  4055,  2011,  1996,  2193,  1997,  9420,
         1024,   102])"
237,0,['n'], Examining numerical data,seg_13,"where x1, x2, . . . , xn represent the n observed values.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12843, 15973,  2951])","tensor([ 101, 2073, 1060, 2487, 1010, 1060, 2475, 1010, 1012, 1012, 1012, 1010,
        1060, 2078, 5050, 1996, 1050, 5159, 5300, 1012,  102])"
238,1,['mean'], Examining numerical data,seg_13,examine the equation for the mean. what does x1 correspond to? and x2? can you infer a general meaning to what xi might represent?3,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 11628,  1996,  8522,  2005,  1996,  2812,  1012,  2054,  2515,
         1060,  2487, 17254,  2000,  1029,  1998,  1060,  2475,  1029,  2064,
         2017,  1999,  7512,  1037,  2236,  3574,  2000,  2054,  8418,  2453,
         5050,  1029,  1017,   102])"
239,1,['sample'], Examining numerical data,seg_13,what was n in this sample of loans?4,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2054,  2001,  1050,  1999,  2023,  7099,  1997, 10940,  1029,
         1018,   102])"
240,1,"['data set', 'mean', 'set', 'observations', 'estimate', 'sample', 'sample mean', 'population', 'population mean', 'average', 'data', 'variable']", Examining numerical data,seg_13,"the loan50 data set represents a sample from a larger population of loans made through lending club. we could compute a mean for this population in the same way as the sample mean. however, the population mean has a special label: µ. the symbol µ is the greek letter mu and represents the average of all observations in the population. sometimes a subscript, such as x, is used to represent which variable the population mean refers to, e.g. µx. often times it is too expensive to measure the population mean precisely, so we often estimate µ using the sample mean, x̄.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  5414, 12376,  2951,  2275,  5836,  1037,  7099,  2013,
         1037,  3469,  2313,  1997, 10940,  2081,  2083, 18435,  2252,  1012,
         2057,  2071, 24134,  1037,  2812,  2005,  2023,  2313,  1999,  1996,
         2168,  2126,  2004,  1996,  7099,  2812,  1012,  2174,  1010,  1996,
         2313,  2812,  2038,  1037,  2569,  3830,  1024,  1085,  1012,  1996,
         6454,  1085,  2003,  1996,  3306,  3661, 14163,  1998,  5836,  1996,
         2779,  1997,  2035,  9420,  1999,  1996,  2313,  1012,  2823,  1037,
         4942, 22483,  1010,  2107,  2004,  1060,  1010,  2003,  2109,  2000,
         5050,  2029,  8023,  1996,  2313,  2812,  5218,  2000,  1010,  1041,
         1012,  1043,  1012,  1085,  2595,  1012,  2411,  2335,  2009,  2003,
         2205,  6450,  2000,  5468,  1996,  2313,  2812, 10785,  1010,  2061,
         2057,  2411, 10197,  1085,  2478,  1996,  7099,  2812,  1010,  1060,
         1012,   102])"
241,1,"['data set', 'mean', 'rate', 'set', 'estimated', 'estimate', 'sample', 'population', 'average', 'data']", Examining numerical data,seg_13,"the average interest rate across all loans in the population can be estimated using the sample data. based on the sample of 50 loans, what would be a reasonable estimate of µx, the mean interest rate for all loans in the full data set?",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2779,  3037,  3446,  2408,  2035, 10940,  1999,  1996,
         2313,  2064,  2022,  4358,  2478,  1996,  7099,  2951,  1012,  2241,
         2006,  1996,  7099,  1997,  2753, 10940,  1010,  2054,  2052,  2022,
         1037,  9608, 10197,  1997,  1085,  2595,  1010,  1996,  2812,  3037,
         3446,  2005,  2035, 10940,  1999,  1996,  2440,  2951,  2275,  1029,
          102])"
242,1,"['mean', 'rate', 'estimate', 'sample', 'population', 'average', 'sample mean']", Examining numerical data,seg_13,"the sample mean, 11.57%, provides a rough estimate of µx. while it’s not perfect, this is our single best guess of the average interest rate of all the loans in the population under study.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  7099,  2812,  1010,  2340,  1012,  5401,  1003,  1010,
         3640,  1037,  5931, 10197,  1997,  1085,  2595,  1012,  2096,  2009,
         1521,  1055,  2025,  3819,  1010,  2023,  2003,  2256,  2309,  2190,
         3984,  1997,  1996,  2779,  3037,  3446,  1997,  2035,  1996, 10940,
         1999,  1996,  2313,  2104,  2817,  1012,   102])"
243,1,"['mean', 'estimates', 'sample', 'samples', 'point estimates', 'sample mean']", Examining numerical data,seg_13,"in chapter 5 and beyond, we will develop tools to characterize the accuracy of point estimates like the sample mean. as you might have guessed, point estimates based on larger samples tend to be more accurate than those based on smaller samples.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1999,  3127,  1019,  1998,  3458,  1010,  2057,  2097,  4503,
         5906,  2000,  2839,  4697,  1996, 10640,  1997,  2391, 10035,  2066,
         1996,  7099,  2812,  1012,  2004,  2017,  2453,  2031, 11445,  1010,
         2391, 10035,  2241,  2006,  3469,  8168,  7166,  2000,  2022,  2062,
         8321,  2084,  2216,  2241,  2006,  3760,  8168,  1012,   102])"
244,1,['mean'], Examining numerical data,seg_13,the mean is useful because it allows us to rescale or standardize a metric into something more easily interpretable and comparable. provide 2 examples where the mean is useful for making comparisons.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2812,  2003,  6179,  2138,  2009,  4473,  2149,  2000,
        24501,  9289,  2063,  2030,  3115,  4697,  1037, 12046,  2046,  2242,
         2062,  4089, 17841,  3085,  1998, 12435,  1012,  3073,  1016,  4973,
         2073,  1996,  2812,  2003,  6179,  2005,  2437, 18539,  1012,   102])"
245,1,"['trial', 'set', 'control group', 'control', 'standard']", Examining numerical data,seg_13,"1. we would like to understand if a new drug is more effective at treating asthma attacks than the standard drug. a trial of 1500 adults is set up, where 500 receive the new drug, and 1000 receive a standard drug in the control group:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1015,  1012,  2057,  2052,  2066,  2000,  3305,  2065,  1037,
         2047,  4319,  2003,  2062,  4621,  2012, 12318, 26180,  4491,  2084,
         1996,  3115,  4319,  1012,  1037,  3979,  1997, 10347,  6001,  2003,
         2275,  2039,  1010,  2073,  3156,  4374,  1996,  2047,  4319,  1010,
         1998,  6694,  4374,  1037,  3115,  4319,  1999,  1996,  2491,  2177,
         1024,   102])"
246,1,['standard'], Examining numerical data,seg_13,new drug standard drug number of patients 500 1000 total asthma attacks 200 300,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2047,  4319,  3115,  4319,  2193,  1997,  5022,  3156,  6694,
         2561, 26180,  4491,  3263,  3998,   102])"
247,1,['average'], Examining numerical data,seg_13,"comparing the raw counts of 200 to 300 asthma attacks would make it appear that the new drug is better, but this is an artifact of the imbalanced group sizes. instead, we should look at the average number of asthma attacks per patient in each group:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 13599,  1996,  6315,  9294,  1997,  3263,  2000,  3998, 26180,
         4491,  2052,  2191,  2009,  3711,  2008,  1996,  2047,  4319,  2003,
         2488,  1010,  2021,  2023,  2003,  2019, 20785,  1997,  1996, 10047,
        26657,  2094,  2177, 10826,  1012,  2612,  1010,  2057,  2323,  2298,
         2012,  1996,  2779,  2193,  1997, 26180,  4491,  2566,  5776,  1999,
         2169,  2177,  1024,   102])"
248,1,['standard'], Examining numerical data,seg_13,new drug: 200/500 = 0.4 standard drug: 300/1000 = 0.3,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([ 101, 2047, 4319, 1024, 3263, 1013, 3156, 1027, 1014, 1012, 1018, 3115,
        4319, 1024, 3998, 1013, 6694, 1027, 1014, 1012, 1017,  102])"
249,1,"['treatment', 'average', 'treatment group', 'standard']", Examining numerical data,seg_13,the standard drug has a lower average number of asthma attacks per patient than the average in the treatment group.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  3115,  4319,  2038,  1037,  2896,  2779,  2193,  1997,
        26180,  4491,  2566,  5776,  2084,  1996,  2779,  1999,  1996,  3949,
         2177,  1012,   102])"
250,1,"['evaluating', 'average', 'statistic']", Examining numerical data,seg_13,"2. emilio opened a food truck last year where he sells burritos, and his business has stabilized over the last 3 months. over that 3 month period, he has made $11,000 while working 625 hours. emilio’s average hourly earnings provides a useful statistic for evaluating whether his venture is, at least from a financial perspective, worth it:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012, 18644,  2441,  1037,  2833,  4744,  2197,  2095,
         2073,  2002, 15187, 22715,  9956,  2015,  1010,  1998,  2010,  2449,
         2038, 27697,  2058,  1996,  2197,  1017,  2706,  1012,  2058,  2008,
         1017,  3204,  2558,  1010,  2002,  2038,  2081,  1002,  2340,  1010,
         2199,  2096,  2551, 22810,  2847,  1012, 18644,  1521,  1055,  2779,
        21462, 16565,  3640,  1037,  6179, 28093,  6553,  2005, 23208,  3251,
         2010,  6957,  2003,  1010,  2012,  2560,  2013,  1037,  3361,  7339,
         1010,  4276,  2009,  1024,   102])"
251,1,"['average', 'standard']", Examining numerical data,seg_13,"by knowing his average hourly wage, emilio now has put his earnings into a standard unit that is easier to compare with many other jobs that he might consider.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2011,  4209,  2010,  2779, 21462, 11897,  1010, 18644,  2085,
         2038,  2404,  2010, 16565,  2046,  1037,  3115,  3131,  2008,  2003,
         6082,  2000, 12826,  2007,  2116,  2060,  5841,  2008,  2002,  2453,
         5136,  1012,   102])"
252,1,"['data set', 'mean', 'set', 'county', 'average', 'data']", Examining numerical data,seg_13,"suppose we want to compute the average income per person in the us. to do so, we might first think to take the mean of the per capita incomes across the 3,142 counties in the county data set. what would be a better approach?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  6814,  2057,  2215,  2000, 24134,  1996,  2779,  3318,  2566,
         2711,  1999,  1996,  2149,  1012,  2000,  2079,  2061,  1010,  2057,
         2453,  2034,  2228,  2000,  2202,  1996,  2812,  1997,  1996,  2566,
         8353, 29373,  2408,  1996,  1017,  1010, 16087,  5721,  1999,  1996,
         2221,  2951,  2275,  1012,  2054,  2052,  2022,  1037,  2488,  3921,
         1029,   102])"
253,1,"['data set', 'mean', 'set', 'county', 'average', 'data', 'variable']", Examining numerical data,seg_13,"the county data set is special in that each county actually represents many individual people. if we were to simply average across the income variable, we would be treating counties with 5,000 and 5,000,000 residents equally in the calculations. instead, we should compute the total income for each county, add up all the counties’ totals, and then divide by the number of people in all the counties. if we completed these steps with the county data, we would find that the per capita income for the us is $30,861. had we computed the simple mean of per capita income across counties, the result would have been just $26,093!",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2221,  2951,  2275,  2003,  2569,  1999,  2008,  2169,
         2221,  2941,  5836,  2116,  3265,  2111,  1012,  2065,  2057,  2020,
         2000,  3432,  2779,  2408,  1996,  3318,  8023,  1010,  2057,  2052,
         2022, 12318,  5721,  2007,  1019,  1010,  2199,  1998,  1019,  1010,
         2199,  1010,  2199,  3901,  8053,  1999,  1996, 16268,  1012,  2612,
         1010,  2057,  2323, 24134,  1996,  2561,  3318,  2005,  2169,  2221,
         1010,  5587,  2039,  2035,  1996,  5721,  1521, 21948,  1010,  1998,
         2059, 11443,  2011,  1996,  2193,  1997,  2111,  1999,  2035,  1996,
         5721,  1012,  2065,  2057,  2949,  2122,  4084,  2007,  1996,  2221,
         2951,  1010,  2057,  2052,  2424,  2008,  1996,  2566,  8353,  3318,
         2005,  1996,  2149,  2003,  1002,  2382,  1010,  6564,  2487,  1012,
         2018,  2057, 24806,  1996,  3722,  2812,  1997,  2566,  8353,  3318,
         2408,  5721,  1010,  1996,  2765,  2052,  2031,  2042,  2074,  1002,
         2656,  1010,  5641,  2509,   999,   102])"
254,1,"['weighted means', 'mean', 'information', 'weighted mean']", Examining numerical data,seg_13,"this example used what is called a weighted mean. for more information on this topic, check out the following online supplement regarding weighted means openintro.org/d?file=stat wtd mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2023,  2742,  2109,  2054,  2003,  2170,  1037, 18215,  2812,
         1012,  2005,  2062,  2592,  2006,  2023,  8476,  1010,  4638,  2041,
         1996,  2206,  3784, 12448,  4953, 18215,  2965,  2330, 18447,  3217,
         1012,  8917,  1013,  1040,  1029,  5371,  1027, 28093,  1059,  2102,
         2094,  2812,  1012,   102])"
255,1,['histograms'], Examining numerical data,seg_13,2.1.3 histograms and shape,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1017,  2010,  3406, 13113,  2015,
         1998,  4338,   102])"
256,1,"['sets', 'table', 'dot plot', 'data set', 'observation', 'observations', 'histogram', 'plots', 'samples', 'plot', 'bin', 'data', 'rates', 'set', 'data sets']", Examining numerical data,seg_13,"dot plots show the exact value for each observation. this is useful for small data sets, but they can become hard to read with larger samples. rather than showing the value of each observation, we prefer to think of the value as belonging to a bin. for example, in the loan50 data set, we created a table of counts for the number of loans with interest rates between 5.0% and 7.5%, then the number of loans with rates between 7.5% and 10.0%, and so on. observations that fall on the boundary of a bin (e.g. 10.00%) are allocated to the lower bin. this tabulation is shown in figure 2.5. these binned counts are plotted as bars in figure 2.6 into what is called a histogram, which resembles a more heavily binned version of the stacked dot plot shown in figure 2.4.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 11089, 14811,  2265,  1996,  6635,  3643,  2005,  2169,  8089,
         1012,  2023,  2003,  6179,  2005,  2235,  2951,  4520,  1010,  2021,
         2027,  2064,  2468,  2524,  2000,  3191,  2007,  3469,  8168,  1012,
         2738,  2084,  4760,  1996,  3643,  1997,  2169,  8089,  1010,  2057,
         9544,  2000,  2228,  1997,  1996,  3643,  2004,  7495,  2000,  1037,
         8026,  1012,  2005,  2742,  1010,  1999,  1996,  5414, 12376,  2951,
         2275,  1010,  2057,  2580,  1037,  2795,  1997,  9294,  2005,  1996,
         2193,  1997, 10940,  2007,  3037,  6165,  2090,  1019,  1012,  1014,
         1003,  1998,  1021,  1012,  1019,  1003,  1010,  2059,  1996,  2193,
         1997, 10940,  2007,  6165,  2090,  1021,  1012,  1019,  1003,  1998,
         2184,  1012,  1014,  1003,  1010,  1998,  2061,  2006,  1012,  9420,
         2008,  2991,  2006,  1996,  6192,  1997,  1037,  8026,  1006,  1041,
         1012,  1043,  1012,  2184,  1012,  4002,  1003,  1007,  2024, 11095,
         2000,  1996,  2896,  8026,  1012,  2023, 21628,  9513,  2003,  3491,
         1999,  3275,  1016,  1012,  1019,  1012,  2122,  8026,  7228,  9294,
         2024, 27347,  2004,  6963,  1999,  3275,  1016,  1012,  1020,  2046,
         2054,  2003,  2170,  1037,  2010,  3406, 13113,  1010,  2029, 12950,
         1037,  2062,  4600,  8026,  7228,  2544,  1997,  1996, 16934, 11089,
         5436,  3491,  1999,  3275,  1016,  1012,  1018,  1012,   102])"
257,1,"['rate', 'data']", Examining numerical data,seg_13,figure 2.5: counts for the binned interest rate data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([ 101, 3275, 1016, 1012, 1019, 1024, 9294, 2005, 1996, 8026, 7228, 3037,
        3446, 2951, 1012,  102])"
258,1,['rate'], Examining numerical data,seg_13,15 y 10 cneuqerf 5 0 5% 10% 15% 20% 25% interest rate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2321,  1061,  2184, 27166, 13765,  4160,  2121,  2546,  1019,
         1014,  1019,  1003,  2184,  1003,  2321,  1003,  2322,  1003,  2423,
         1003,  3037,  3446,   102])"
259,1,"['rate', 'skewed', 'histogram', 'distribution']", Examining numerical data,seg_13,figure 2.6: a histogram of interest rate. this distribution is strongly skewed to the right.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1020,  1024,  1037,  2010,  3406, 13113,
         1997,  3037,  3446,  1012,  2023,  4353,  2003,  6118, 15315,  7974,
         2098,  2000,  1996,  2157,  1012,   102])"
260,1,"['rate', 'set', 'rates', 'data set', 'data', 'data density']", Examining numerical data,seg_13,"histograms provide a view of the data density. higher bars represent where the data are relatively more common. for instance, there are many more loans with rates between 5% and 10% than loans with rates between 20% and 25% in the data set. the bars make it easy to see how the density of the data changes relative to the interest rate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2010,  3406, 13113,  2015,  3073,  1037,  3193,  1997,  1996,
         2951,  4304,  1012,  3020,  6963,  5050,  2073,  1996,  2951,  2024,
         4659,  2062,  2691,  1012,  2005,  6013,  1010,  2045,  2024,  2116,
         2062, 10940,  2007,  6165,  2090,  1019,  1003,  1998,  2184,  1003,
         2084, 10940,  2007,  6165,  2090,  2322,  1003,  1998,  2423,  1003,
         1999,  1996,  2951,  2275,  1012,  1996,  6963,  2191,  2009,  3733,
         2000,  2156,  2129,  1996,  4304,  1997,  1996,  2951,  3431,  5816,
         2000,  1996,  3037,  3446,  1012,   102])"
261,1,"['tail', 'longer right tail', 'distribution', 'rates', 'data']", Examining numerical data,seg_13,"histograms are especially convenient for understanding the shape of the data distribution. figure 2.6 suggests that most loans have rates under 15%, while only a handful of loans have rates above 20%. when data trail off to the right in this way and has a longer right tail, the shape is said to be right skewed.5",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  2010,  3406, 13113,  2015,  2024,  2926, 14057,  2005,  4824,
         1996,  4338,  1997,  1996,  2951,  4353,  1012,  3275,  1016,  1012,
         1020,  6083,  2008,  2087, 10940,  2031,  6165,  2104,  2321,  1003,
         1010,  2096,  2069,  1037,  9210,  1997, 10940,  2031,  6165,  2682,
         2322,  1003,  1012,  2043,  2951,  4446,  2125,  2000,  1996,  2157,
         1999,  2023,  2126,  1998,  2038,  1037,  2936,  2157,  5725,  1010,
         1996,  4338,  2003,  2056,  2000,  2022,  2157, 15315,  7974,  2098,
         1012,  1019,   102])"
262,1,"['tail', 'sets', 'skewed', 'long left tail', 'data sets', 'distribution', 'data', 'symmetric']", Examining numerical data,seg_13,"data sets with the reverse characteristic – a long, thinner tail to the left – are said to be left skewed. we also say that such a distribution has a long left tail. data sets that show roughly equal trailing off in both directions are called symmetric.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  2951,  4520,  2007,  1996,  7901,  8281,  1516,  1037,  2146,
         1010, 23082,  5725,  2000,  1996,  2187,  1516,  2024,  2056,  2000,
         2022,  2187, 15315,  7974,  2098,  1012,  2057,  2036,  2360,  2008,
         2107,  1037,  4353,  2038,  1037,  2146,  2187,  5725,  1012,  2951,
         4520,  2008,  2265,  5560,  5020, 12542,  2125,  1999,  2119,  7826,
         2024,  2170, 19490,  1012,   102])"
263,1,"['tail', 'skewed', 'long left tail', 'long tail', 'distribution', 'data', 'long right tail']", Examining numerical data,seg_13,"when data trail off in one direction, the distribution has a long tail. if a distribution has a long left tail, it is left skewed. if a distribution has a long right tail, it is right skewed.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2043,  2951,  4446,  2125,  1999,  2028,  3257,  1010,  1996,
         4353,  2038,  1037,  2146,  5725,  1012,  2065,  1037,  4353,  2038,
         1037,  2146,  2187,  5725,  1010,  2009,  2003,  2187, 15315,  7974,
         2098,  1012,  2065,  1037,  4353,  2038,  1037,  2146,  2157,  5725,
         1010,  2009,  2003,  2157, 15315,  7974,  2098,  1012,   102])"
264,1,"['skew', 'histogram', 'plots', 'data', 'dot plots']", Examining numerical data,seg_13,take a look at the dot plots in figures 2.3 and 2.4. can you see the skew in the data? is it easier to see the skew in this histogram or the dot plots?6,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2202,  1037,  2298,  2012,  1996, 11089, 14811,  1999,  4481,
         1016,  1012,  1017,  1998,  1016,  1012,  1018,  1012,  2064,  2017,
         2156,  1996, 15315,  7974,  1999,  1996,  2951,  1029,  2003,  2009,
         6082,  2000,  2156,  1996, 15315,  7974,  1999,  2023,  2010,  3406,
        13113,  2030,  1996, 11089, 14811,  1029,  1020,   102])"
265,1,"['mean', 'plots', 'dot plots']", Examining numerical data,seg_13,"besides the mean (since it was labeled), what can you see in the dot plots that you cannot see in the histogram?7",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  4661,  1996,  2812,  1006,  2144,  2009,  2001, 12599,  1007,
         1010,  2054,  2064,  2017,  2156,  1999,  1996, 11089, 14811,  2008,
         2017,  3685,  2156,  1999,  1996,  2010,  3406, 13113,  1029,  1021,
          102])"
266,1,"['histograms', 'skewed', 'histogram', 'distribution', 'symmetric']", Examining numerical data,seg_13,"in addition to looking at whether a distribution is skewed or symmetric, histograms can be used to identify modes. a mode is represented by a prominent peak in the distribution. there is only one prominent peak in the histogram of loan amount.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 1., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  1999,  2804,  2000,  2559,  2012,  3251,  1037,  4353,  2003,
        15315,  7974,  2098,  2030, 19490,  1010,  2010,  3406, 13113,  2015,
         2064,  2022,  2109,  2000,  6709, 11583,  1012,  1037,  5549,  2003,
         3421,  2011,  1037,  4069,  4672,  1999,  1996,  4353,  1012,  2045,
         2003,  2069,  2028,  4069,  4672,  1999,  1996,  2010,  3406, 13113,
         1997,  5414,  3815,  1012,   102])"
267,1,"['sets', 'set', 'observations', 'data sets', 'data set', 'data']", Examining numerical data,seg_13,"a definition of mode sometimes taught in math classes is the value with the most occurrences in the data set. however, for many real-world data sets, it is common to have no observations with the same value in a data set, making this definition impractical in data analysis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1037,  6210,  1997,  5549,  2823,  4036,  1999,  8785,  4280,
         2003,  1996,  3643,  2007,  1996,  2087, 27247,  1999,  1996,  2951,
         2275,  1012,  2174,  1010,  2005,  2116,  2613,  1011,  2088,  2951,
         4520,  1010,  2009,  2003,  2691,  2000,  2031,  2053,  9420,  2007,
         1996,  2168,  3643,  1999,  1037,  2951,  2275,  1010,  2437,  2023,
         6210, 17727, 22648, 14656,  1999,  2951,  4106,  1012,   102])"
268,1,"['histograms', 'unimodal', 'observations', 'distributions', 'bins', 'distribution', 'bimodal', 'multimodal']", Examining numerical data,seg_13,"figure 2.7 shows histograms that have one, two, or three prominent peaks. such distributions are called unimodal, bimodal, and multimodal, respectively. any distribution with more than 2 prominent peaks is called multimodal. notice that there was one prominent peak in the unimodal distribution with a second less prominent peak that was not counted since it only differs from its neighboring bins by a few observations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1021,  3065,  2010,  3406, 13113,  2015,
         2008,  2031,  2028,  1010,  2048,  1010,  2030,  2093,  4069, 11373,
         1012,  2107, 20611,  2024,  2170,  4895, 16339,  9305,  1010, 12170,
         5302,  9305,  1010,  1998,  4800,  5302,  9305,  1010,  4414,  1012,
         2151,  4353,  2007,  2062,  2084,  1016,  4069, 11373,  2003,  2170,
         4800,  5302,  9305,  1012,  5060,  2008,  2045,  2001,  2028,  4069,
         4672,  1999,  1996,  4895, 16339,  9305,  4353,  2007,  1037,  2117,
         2625,  4069,  4672,  2008,  2001,  2025,  8897,  2144,  2009,  2069,
        12980,  2013,  2049,  8581,  8026,  2015,  2011,  1037,  2261,  9420,
         1012,   102])"
269,1,"['unimodal', 'distributions', 'bimodal', 'plot', 'multimodal']", Examining numerical data,seg_13,"figure 2.7: counting only prominent peaks, the distributions are (left to right) unimodal, bimodal, and multimodal. note that we’ve said the left plot is unimodal intentionally. this is because we are counting prominent peaks, not just any peak.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1021,  1024, 10320,  2069,  4069, 11373,
         1010,  1996, 20611,  2024,  1006,  2187,  2000,  2157,  1007,  4895,
        16339,  9305,  1010, 12170,  5302,  9305,  1010,  1998,  4800,  5302,
         9305,  1012,  3602,  2008,  2057,  1521,  2310,  2056,  1996,  2187,
         5436,  2003,  4895, 16339,  9305, 15734,  1012,  2023,  2003,  2138,
         2057,  2024, 10320,  4069, 11373,  1010,  2025,  2074,  2151,  4672,
         1012,   102])"
270,1,"['rate', 'unimodal', 'distribution', 'bimodal', 'multimodal']", Examining numerical data,seg_13,"figure 2.6 reveals only one prominent mode in the interest rate. is the distribution unimodal, bimodal, or multimodal?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1020,  7657,  2069,  2028,  4069,  5549,
         1999,  1996,  3037,  3446,  1012,  2003,  1996,  4353,  4895, 16339,
         9305,  1010, 12170,  5302,  9305,  1010,  2030,  4800,  5302,  9305,
         1029,   102])"
271,0,[], Examining numerical data,seg_13,"unimodal. remember that uni stands for 1 (think unicycles). similarly, bi stands for 2 (think bicycles). we’re hoping a multicycle will be invented to complete this analogy.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12843, 15973,  2951])","tensor([  101,  4895, 16339,  9305,  1012,  3342,  2008,  4895,  2072,  4832,
         2005,  1015,  1006,  2228,  4895,  2594,  2100, 18954,  1007,  1012,
         6660,  1010, 12170,  4832,  2005,  1016,  1006,  2228, 21066,  1007,
         1012,  2057,  1521,  2128,  5327,  1037,  4800, 23490,  2097,  2022,
         8826,  2000,  3143,  2023, 23323,  1012,   102])"
272,1,"['measurements', 'data']", Examining numerical data,seg_13,height measurements of young students and adult teachers at a k-3 elementary school were taken. how many modes would you expect in this height data set?8,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  4578, 11702,  1997,  2402,  2493,  1998,  4639,  5089,  2012,
         1037,  1047,  1011,  1017,  4732,  2082,  2020,  2579,  1012,  2129,
         2116, 11583,  2052,  2017,  5987,  1999,  2023,  4578,  2951,  2275,
         1029,  1022,   102])"
273,1,"['data', 'distribution']", Examining numerical data,seg_13,"looking for modes isn’t about finding a clear and correct answer about the number of modes in a distribution, which is why prominent is not rigorously defined in this book. the most important part of this examination is to better understand your data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2559,  2005, 11583,  3475,  1521,  1056,  2055,  4531,  1037,
         3154,  1998,  6149,  3437,  2055,  1996,  2193,  1997, 11583,  1999,
         1037,  4353,  1010,  2029,  2003,  2339,  4069,  2003,  2025, 20001,
         2135,  4225,  1999,  2023,  2338,  1012,  1996,  2087,  2590,  2112,
         1997,  2023,  7749,  2003,  2000,  2488,  3305,  2115,  2951,  1012,
          102])"
274,1,"['deviation', 'standard deviation', 'standard', 'variance']", Examining numerical data,seg_13,2.1.4 variance and standard deviation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1018, 23284,  1998,  3115, 24353,
          102])"
275,1,"['variability', 'mean', 'deviation', 'observation', 'variance', 'set', 'method', 'standard deviation', 'standard', 'data set', 'data']", Examining numerical data,seg_13,"the mean was introduced as a method to describe the center of a data set, and variability in the data is also important. here, we introduce two measures of variability: the variance and the standard deviation. both of these are very useful in data analysis, even though their formulas are a bit tedious to calculate by hand. the standard deviation is the easier of the two to comprehend, and it roughly describes how far away the typical observation is from the mean.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2812,  2001,  3107,  2004,  1037,  4118,  2000,  6235,
         1996,  2415,  1997,  1037,  2951,  2275,  1010,  1998, 28436,  1999,
         1996,  2951,  2003,  2036,  2590,  1012,  2182,  1010,  2057,  8970,
         2048,  5761,  1997, 28436,  1024,  1996, 23284,  1998,  1996,  3115,
        24353,  1012,  2119,  1997,  2122,  2024,  2200,  6179,  1999,  2951,
         4106,  1010,  2130,  2295,  2037, 25814,  2024,  1037,  2978,  6945,
         6313,  2000, 18422,  2011,  2192,  1012,  1996,  3115, 24353,  2003,
         1996,  6082,  1997,  1996,  2048,  2000, 22346,  1010,  1998,  2009,
         5560,  5577,  2129,  2521,  2185,  1996,  5171,  8089,  2003,  2013,
         1996,  2812,  1012,   102])"
276,1,"['mean', 'rate', 'deviation', 'observation', 'observations', 'deviations', 'variable']", Examining numerical data,seg_13,"we call the distance of an observation from its mean its deviation. below are the deviations for the 1st, 2nd, 3rd, and 50th observations in the interest rate variable:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  2057,  2655,  1996,  3292,  1997,  2019,  8089,  2013,  2049,
         2812,  2049, 24353,  1012,  2917,  2024,  1996, 24353,  2015,  2005,
         1996,  3083,  1010,  3416,  1010,  3822,  1010,  1998, 12951,  9420,
         1999,  1996,  3037,  3446,  8023,  1024,   102])"
277,1,"['variance', 'sample', 'deviations', 'sample variance', 'average']", Examining numerical data,seg_13,"if we square these deviations and then take an average, the result is equal to the sample variance, denoted by s2:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2065,  2057,  2675,  2122, 24353,  2015,  1998,  2059,  2202,
         2019,  2779,  1010,  1996,  2765,  2003,  5020,  2000,  1996,  7099,
        23284,  1010, 19537,  2011,  1055,  2475,  1024,   102])"
278,1,"['statistic', 'variance']", Examining numerical data,seg_13,"we divide by n − 1, rather than dividing by n, when computing a sample’s variance; there’s some mathematical nuance here, but the end result is that doing this makes this statistic slightly more reliable and useful.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2057, 11443,  2011,  1050,  1597,  1015,  1010,  2738,  2084,
        16023,  2011,  1050,  1010,  2043,  9798,  1037,  7099,  1521,  1055,
        23284,  1025,  2045,  1521,  1055,  2070,  8045, 16371,  6651,  2182,
         1010,  2021,  1996,  2203,  2765,  2003,  2008,  2725,  2023,  3084,
         2023, 28093,  6553,  3621,  2062, 10539,  1998,  6179,  1012,   102])"
279,1,['deviations'], Examining numerical data,seg_13,"notice that squaring the deviations does two things. first, it makes large values relatively much larger, seen by comparing (−0.67)2, (−1.65)2, (14.73)2, and (−5.49)2. second, it gets rid of any negative signs.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  5060,  2008,  5490,  6692,  4892,  1996, 24353,  2015,  2515,
         2048,  2477,  1012,  2034,  1010,  2009,  3084,  2312,  5300,  4659,
         2172,  3469,  1010,  2464,  2011, 13599,  1006,  1597,  2692,  1012,
         6163,  1007,  1016,  1010,  1006,  1597,  2487,  1012,  3515,  1007,
         1016,  1010,  1006,  2403,  1012,  6421,  1007,  1016,  1010,  1998,
         1006,  1597,  2629,  1012,  4749,  1007,  1016,  1012,  2117,  1010,
         2009,  4152,  9436,  1997,  2151,  4997,  5751,  1012,   102])"
280,1,"['deviation', 'variance', 'standard deviation', 'standard']", Examining numerical data,seg_13,the standard deviation is defined as the square root of the variance:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  3115, 24353,  2003,  4225,  2004,  1996,  2675,  7117,
         1997,  1996, 23284,  1024,   102])"
281,1,"['deviation', 'variance', 'observations', 'standard deviation', 'standard']", Examining numerical data,seg_13,"while often omitted, a subscript of x may be added to the variance and standard deviation, i.e. s2x and sx, if it is useful as a reminder that these are the variance and standard deviation of the observations represented by x1, x2, ..., xn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2096,  2411, 16647,  1010,  1037,  4942, 22483,  1997,  1060,
         2089,  2022,  2794,  2000,  1996, 23284,  1998,  3115, 24353,  1010,
         1045,  1012,  1041,  1012,  1055,  2475,  2595,  1998,  1055,  2595,
         1010,  2065,  2009,  2003,  6179,  2004,  1037, 14764,  2008,  2122,
         2024,  1996, 23284,  1998,  3115, 24353,  1997,  1996,  9420,  3421,
         2011,  1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1012,
         1010,  1060,  2078,  1012,   102])"
282,1,"['mean', 'deviation', 'variance', 'standard deviation', 'standard', 'average', 'data']", Examining numerical data,seg_13,the variance is the average squared distance from the mean. the standard deviation is the square root of the variance. the standard deviation is useful when considering how far the data are distributed from the mean.,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996, 23284,  2003,  1996,  2779, 19942,  3292,  2013,  1996,
         2812,  1012,  1996,  3115, 24353,  2003,  1996,  2675,  7117,  1997,
         1996, 23284,  1012,  1996,  3115, 24353,  2003,  6179,  2043,  6195,
         2129,  2521,  1996,  2951,  2024,  5500,  2013,  1996,  2812,  1012,
          102])"
283,1,"['mean', 'deviation', 'observations', 'standard deviation', 'deviations', 'standard', 'percentages', 'data', 'standard deviations']", Examining numerical data,seg_13,"the standard deviation represents the typical deviation of observations from the mean. usually about 70% of the data will be within one standard deviation of the mean and about 95% will be within two standard deviations. however, as seen in figures 2.8 and 2.9, these percentages are not strict rules.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  3115, 24353,  5836,  1996,  5171, 24353,  1997,  9420,
         2013,  1996,  2812,  1012,  2788,  2055,  3963,  1003,  1997,  1996,
         2951,  2097,  2022,  2306,  2028,  3115, 24353,  1997,  1996,  2812,
         1998,  2055,  5345,  1003,  2097,  2022,  2306,  2048,  3115, 24353,
         2015,  1012,  2174,  1010,  2004,  2464,  1999,  4481,  1016,  1012,
         1022,  1998,  1016,  1012,  1023,  1010,  2122,  7017,  2015,  2024,
         2025,  9384,  3513,  1012,   102])"
284,1,"['mean', 'deviation', 'variance', 'standard deviation', 'standard', 'population']", Examining numerical data,seg_13,"like the mean, the population values for variance and standard deviation have special symbols: σ2 for the variance and σ for the standard deviation. the symbol σ is the greek letter sigma.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2066,  1996,  2812,  1010,  1996,  2313,  5300,  2005, 23284,
         1998,  3115, 24353,  2031,  2569,  9255,  1024,  1173,  2475,  2005,
         1996, 23284,  1998,  1173,  2005,  1996,  3115, 24353,  1012,  1996,
         6454,  1173,  2003,  1996,  3306,  3661, 13201,  1012,   102])"
285,1,['rate'], Examining numerical data,seg_13,"6.5% 11.6% 16.7% 21.8% 26.9% interest rate, x = 11.57%, sx = 5.05%",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([ 101, 1020, 1012, 1019, 1003, 2340, 1012, 1020, 1003, 2385, 1012, 1021,
        1003, 2538, 1012, 1022, 1003, 2656, 1012, 1023, 1003, 3037, 3446, 1010,
        1060, 1027, 2340, 1012, 5401, 1003, 1010, 1055, 2595, 1027, 1019, 1012,
        5709, 1003,  102])"
286,1,"['mean', 'rate', 'deviation', 'standard deviation', 'deviations', 'standard', 'standard deviations', 'rates', 'data', 'variable']", Examining numerical data,seg_13,"figure 2.8: for the interest rate variable, 34 of the 50 loans (68%) had interest rates within 1 standard deviation of the mean, and 48 of the 50 loans (96%) had rates within 2 standard deviations. usually about 70% of the data are within 1 standard deviation of the mean and 95% within 2 standard deviations, though this is far from a hard rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1022,  1024,  2005,  1996,  3037,  3446,
         8023,  1010,  4090,  1997,  1996,  2753, 10940,  1006,  6273,  1003,
         1007,  2018,  3037,  6165,  2306,  1015,  3115, 24353,  1997,  1996,
         2812,  1010,  1998,  4466,  1997,  1996,  2753, 10940,  1006,  5986,
         1003,  1007,  2018,  6165,  2306,  1016,  3115, 24353,  2015,  1012,
         2788,  2055,  3963,  1003,  1997,  1996,  2951,  2024,  2306,  1015,
         3115, 24353,  1997,  1996,  2812,  1998,  5345,  1003,  2306,  1016,
         3115, 24353,  2015,  1010,  2295,  2023,  2003,  2521,  2013,  1037,
         2524,  3627,  1012,   102])"
287,1,"['mean', 'deviation', 'distributions', 'population', 'standard deviation', 'standard']", Examining numerical data,seg_13,figure 2.9: three very different population distributions with the same mean µ = 0 and standard deviation σ = 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  1023,  1024,  2093,  2200,  2367,  2313,
        20611,  2007,  1996,  2168,  2812,  1085,  1027,  1014,  1998,  3115,
        24353,  1173,  1027,  1015,  1012,   102])"
288,1,"['skewed', 'symmetric', 'distribution']", Examining numerical data,seg_13,"on page 45, the concept of shape of a distribution was introduced. a good description of the shape of a distribution should include modality and whether the distribution is symmetric or skewed to one side. using figure 2.9 as an example, explain why such a description is important.9",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2006,  3931,  3429,  1010,  1996,  4145,  1997,  4338,  1997,
         1037,  4353,  2001,  3107,  1012,  1037,  2204,  6412,  1997,  1996,
         4338,  1997,  1037,  4353,  2323,  2421, 16913, 23732,  1998,  3251,
         1996,  4353,  2003, 19490,  2030, 15315,  7974,  2098,  2000,  2028,
         2217,  1012,  2478,  3275,  1016,  1012,  1023,  2004,  2019,  2742,
         1010,  4863,  2339,  2107,  1037,  6412,  2003,  2590,  1012,  1023,
          102])"
289,1,"['variability', 'cases', 'rate', 'histogram', 'distribution', 'variable']", Examining numerical data,seg_13,"describe the distribution of the interest rate variable using the histogram in figure 2.6. the description should incorporate the center, variability, and shape of the distribution, and it should also be placed in context. also note any especially unusual cases.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  6235,  1996,  4353,  1997,  1996,  3037,  3446,  8023,  2478,
         1996,  2010,  3406, 13113,  1999,  3275,  1016,  1012,  1020,  1012,
         1996,  6412,  2323, 13265,  1996,  2415,  1010, 28436,  1010,  1998,
         4338,  1997,  1996,  4353,  1010,  1998,  2009,  2323,  2036,  2022,
         2872,  1999,  6123,  1012,  2036,  3602,  2151,  2926,  5866,  3572,
         1012,   102])"
290,1,"['mean', 'skewed', 'deviation', 'unimodal', 'sample', 'standard deviation', 'standard', 'distribution', 'rates']", Examining numerical data,seg_13,"the distribution of interest rates is unimodal and skewed to the high end. many of the rates fall near the mean at 11.57%, and most fall within one standard deviation (5.05%) of the mean. there are a few exceptionally large interest rates in the sample that are above 20%.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  4353,  1997,  3037,  6165,  2003,  4895, 16339,  9305,
         1998, 15315,  7974,  2098,  2000,  1996,  2152,  2203,  1012,  2116,
         1997,  1996,  6165,  2991,  2379,  1996,  2812,  2012,  2340,  1012,
         5401,  1003,  1010,  1998,  2087,  2991,  2306,  2028,  3115, 24353,
         1006,  1019,  1012,  5709,  1003,  1007,  1997,  1996,  2812,  1012,
         2045,  2024,  1037,  2261, 17077,  2312,  3037,  6165,  1999,  1996,
         7099,  2008,  2024,  2682,  2322,  1003,  1012,   102])"
291,1,"['mean', 'deviation', 'uncertainty', 'variance', 'associated', 'estimate', 'sample', 'standard deviation', 'sample statistic', 'standard', 'statistic', 'sample mean']", Examining numerical data,seg_13,"in practice, the variance and standard deviation are sometimes used as a means to an end, where the “end” is being able to accurately estimate the uncertainty associated with a sample statistic. for example, in chapter 5 the standard deviation is used in calculations that help us understand how much a sample mean varies from one sample to the next.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1999,  3218,  1010,  1996, 23284,  1998,  3115, 24353,  2024,
         2823,  2109,  2004,  1037,  2965,  2000,  2019,  2203,  1010,  2073,
         1996,  1523,  2203,  1524,  2003,  2108,  2583,  2000, 14125, 10197,
         1996, 12503,  3378,  2007,  1037,  7099, 28093,  6553,  1012,  2005,
         2742,  1010,  1999,  3127,  1019,  1996,  3115, 24353,  2003,  2109,
         1999, 16268,  2008,  2393,  2149,  3305,  2129,  2172,  1037,  7099,
         2812,  9783,  2013,  2028,  7099,  2000,  1996,  2279,  1012,   102])"
292,1,"['box plots', 'quartiles', 'plots', 'median']", Examining numerical data,seg_13,"2.1.5 box plots, quartiles, and the median",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1019,  3482, 14811,  1010, 24209,
         8445,  9463,  2015,  1010,  1998,  1996,  3991,   102])"
293,1,"['rate', 'data', 'set', 'plotting', 'observations', 'box plot', 'statistics', 'dot plot', 'plot', 'data set', 'variable']", Examining numerical data,seg_13,a box plot summarizes a data set using five statistics while also plotting unusual observations. figure 2.10 provides a vertical dot plot alongside a box plot of the interest rate variable from the loan50 data set.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1037,  3482,  5436,  7680,  7849, 10057,  1037,  2951,  2275,
         2478,  2274,  6747,  2096,  2036, 20699,  5866,  9420,  1012,  3275,
         1016,  1012,  2184,  3640,  1037,  7471, 11089,  5436,  4077,  1037,
         3482,  5436,  1997,  1996,  3037,  3446,  8023,  2013,  1996,  5414,
        12376,  2951,  2275,  1012,   102])"
294,1,"['third quartile', 'outliers', 'whisker', 'first quartile', 'quartile', 'median']", Examining numerical data,seg_13,suspected outliers 25% max whisker reach upper whisker 20% e tar t es 15% q3 (third quartile) r etni median 10% q1 (first quartile) lower whisker 5%,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  6878,  2041, 14355,  2015,  2423,  1003,  4098,  1059, 24158,
         5484,  3362,  3356,  1059, 24158,  5484,  2322,  1003,  1041, 16985,
         1056,  9686,  2321,  1003,  1053,  2509,  1006,  2353, 24209,  8445,
         9463,  1007,  1054,  3802,  3490,  3991,  2184,  1003,  1053,  2487,
         1006,  2034, 24209,  8445,  9463,  1007,  2896,  1059, 24158,  5484,
         1019,  1003,   102])"
295,1,"['box plot', 'dot plot', 'rates', 'plot']", Examining numerical data,seg_13,"figure 2.10: a vertical dot plot, where points have been horizontally stacked, next to a labeled box plot for the interest rates of the 50 loans.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  2184,  1024,  1037,  7471, 11089,  5436,
         1010,  2073,  2685,  2031,  2042, 23190, 16934,  1010,  2279,  2000,
         1037, 12599,  3482,  5436,  2005,  1996,  3037,  6165,  1997,  1996,
         2753, 10940,  1012,   102])"
296,1,"['data set', 'observation', 'set', 'observations', 'percentile', 'number of observations', 'box plot', 'plot', 'average', 'data', 'median', 'case']", Examining numerical data,seg_13,"the first step in building a box plot is drawing a dark line denoting the median, which splits the data in half. figure 2.10 shows 50% of the data falling below the median and other 50% falling above the median. there are 50 loans in the data set (an even number) so the data are perfectly split into two groups of 25. we take the median in this case to be the average of the two observations closest to the 50th percentile, which happen to be the same value in this data set: (9.93%+9.93%)/2 = 9.93%. when there are an odd number of observations, there will be exactly one observation that splits the data into two halves, and in such a case that observation is the median (no average needed).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2034,  3357,  1999,  2311,  1037,  3482,  5436,  2003,
         5059,  1037,  2601,  2240,  7939, 20656,  1996,  3991,  1010,  2029,
        19584,  1996,  2951,  1999,  2431,  1012,  3275,  1016,  1012,  2184,
         3065,  2753,  1003,  1997,  1996,  2951,  4634,  2917,  1996,  3991,
         1998,  2060,  2753,  1003,  4634,  2682,  1996,  3991,  1012,  2045,
         2024,  2753, 10940,  1999,  1996,  2951,  2275,  1006,  2019,  2130,
         2193,  1007,  2061,  1996,  2951,  2024,  6669,  3975,  2046,  2048,
         2967,  1997,  2423,  1012,  2057,  2202,  1996,  3991,  1999,  2023,
         2553,  2000,  2022,  1996,  2779,  1997,  1996,  2048,  9420,  7541,
         2000,  1996, 12951,  3867,  9463,  1010,  2029,  4148,  2000,  2022,
         1996,  2168,  3643,  1999,  2023,  2951,  2275,  1024,  1006,  1023,
         1012,  6109,  1003,  1009,  1023,  1012,  6109,  1003,  1007,  1013,
         1016,  1027,  1023,  1012,  6109,  1003,  1012,  2043,  2045,  2024,
         2019,  5976,  2193,  1997,  9420,  1010,  2045,  2097,  2022,  3599,
         2028,  8089,  2008, 19584,  1996,  2951,  2046,  2048, 23672,  1010,
         1998,  1999,  2107,  1037,  2553,  2008,  8089,  2003,  1996,  3991,
         1006,  2053,  2779,  2734,  1007,  1012,   102])"
297,1,"['observation', 'observations', 'number of observations', 'average', 'data', 'median']", Examining numerical data,seg_13,"if the data are ordered from smallest to largest, the median is the observation right in the middle. if there are an even number of observations, there will be two values in the middle, and the median is taken as their average.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2065,  1996,  2951,  2024,  3641,  2013, 10479,  2000,  2922,
         1010,  1996,  3991,  2003,  1996,  8089,  2157,  1999,  1996,  2690,
         1012,  2065,  2045,  2024,  2019,  2130,  2193,  1997,  9420,  1010,
         2045,  2097,  2022,  2048,  5300,  1999,  1996,  2690,  1010,  1998,
         1996,  3991,  2003,  2579,  2004,  2037,  2779,  1012,   102])"
298,1,"['variability', 'third quartile', 'box plot', 'interquartile range', 'standard deviation', 'quartile', 'plot', 'data', 'deviation', 'standard', 'first quartile', 'percentile', 'range', 'variable']", Examining numerical data,seg_13,"the second step in building a box plot is drawing a rectangle to represent the middle 50% of the data. the total length of the box, shown vertically in figure 2.10, is called the interquartile range (iqr, for short). it, like the standard deviation, is a measure of variability in data. the more variable the data, the larger the standard deviation and iqr tend to be. the two boundaries of the box are called the first quartile (the 25th percentile, i.e. 25% of the data fall below this value) and the third quartile (the 75th percentile), and these are often labeled q1 and q3, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2117,  3357,  1999,  2311,  1037,  3482,  5436,  2003,
         5059,  1037, 28667, 23395,  2000,  5050,  1996,  2690,  2753,  1003,
         1997,  1996,  2951,  1012,  1996,  2561,  3091,  1997,  1996,  3482,
         1010,  3491, 20018,  1999,  3275,  1016,  1012,  2184,  1010,  2003,
         2170,  1996,  6970, 16211, 28228,  2571,  2846,  1006, 26264,  2099,
         1010,  2005,  2460,  1007,  1012,  2009,  1010,  2066,  1996,  3115,
        24353,  1010,  2003,  1037,  5468,  1997, 28436,  1999,  2951,  1012,
         1996,  2062,  8023,  1996,  2951,  1010,  1996,  3469,  1996,  3115,
        24353,  1998, 26264,  2099,  7166,  2000,  2022,  1012,  1996,  2048,
         7372,  1997,  1996,  3482,  2024,  2170,  1996,  2034, 24209,  8445,
         9463,  1006,  1996, 10965,  3867,  9463,  1010,  1045,  1012,  1041,
         1012,  2423,  1003,  1997,  1996,  2951,  2991,  2917,  2023,  3643,
         1007,  1998,  1996,  2353, 24209,  8445,  9463,  1006,  1996, 25092,
         3867,  9463,  1007,  1010,  1998,  2122,  2024,  2411, 12599,  1053,
         2487,  1998,  1053,  2509,  1010,  4414,  1012,   102])"
299,1,"['plot', 'box plot']", Examining numerical data,seg_13,the iqr is the length of the box in a box plot. it is computed as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996, 26264,  2099,  2003,  1996,  3091,  1997,  1996,  3482,
         1999,  1037,  3482,  5436,  1012,  2009,  2003, 24806,  2004,   102])"
300,1,['percentiles'], Examining numerical data,seg_13,where q1 and q3 are the 25th and 75th percentiles.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2073,  1053,  2487,  1998,  1053,  2509,  2024,  1996, 10965,
         1998, 25092,  3867,  9463,  2015,  1012,   102])"
301,1,"['percent', 'data', 'median']", Examining numerical data,seg_13,what percent of the data fall between q1 and the median? what percent is between the median and q3?10,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([ 101, 2054, 3867, 1997, 1996, 2951, 2991, 2090, 1053, 2487, 1998, 1996,
        3991, 1029, 2054, 3867, 2003, 2090, 1996, 3991, 1998, 1053, 2509, 1029,
        2184,  102])"
302,1,"['whiskers', 'box plot', 'limit', 'whisker', 'plot', 'data']", Examining numerical data,seg_13,"extending out from the box, the whiskers attempt to capture the data outside of the box. however, their reach is never allowed to be more than 1.5× iqr. they capture everything within this reach. in figure 2.10, the upper whisker does not extend to the last two points, which is beyond q3 + 1.5× iqr, and so it extends only to the last point below this limit. the lower whisker stops at the lowest value, 5.31%, since there is no additional data to reach; the lower whisker’s limit is not shown in the figure because the plot does not extend down to q1−1.5× iqr. in a sense, the box is like the body of the box plot and the whiskers are like its arms trying to reach the rest of the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  8402,  2041,  2013,  1996,  3482,  1010,  1996,  1059, 24158,
        11451,  3535,  2000,  5425,  1996,  2951,  2648,  1997,  1996,  3482,
         1012,  2174,  1010,  2037,  3362,  2003,  2196,  3039,  2000,  2022,
         2062,  2084,  1015,  1012,  1019, 26306, 26264,  2099,  1012,  2027,
         5425,  2673,  2306,  2023,  3362,  1012,  1999,  3275,  1016,  1012,
         2184,  1010,  1996,  3356,  1059, 24158,  5484,  2515,  2025,  7949,
         2000,  1996,  2197,  2048,  2685,  1010,  2029,  2003,  3458,  1053,
         2509,  1009,  1015,  1012,  1019, 26306, 26264,  2099,  1010,  1998,
         2061,  2009,  8908,  2069,  2000,  1996,  2197,  2391,  2917,  2023,
         5787,  1012,  1996,  2896,  1059, 24158,  5484,  6762,  2012,  1996,
         7290,  3643,  1010,  1019,  1012,  2861,  1003,  1010,  2144,  2045,
         2003,  2053,  3176,  2951,  2000,  3362,  1025,  1996,  2896,  1059,
        24158,  5484,  1521,  1055,  5787,  2003,  2025,  3491,  1999,  1996,
         3275,  2138,  1996,  5436,  2515,  2025,  7949,  2091,  2000,  1053,
         2487, 27944,  1012,  1019, 26306, 26264,  2099,  1012,  1999,  1037,
         3168,  1010,  1996,  3482,  2003,  2066,  1996,  2303,  1997,  1996,
         3482,  5436,  1998,  1996,  1059, 24158, 11451,  2024,  2066,  2049,
         2608,  2667,  2000,  3362,  1996,  2717,  1997,  1996,  2951,  1012,
          102])"
303,1,"['observation', 'observations', 'whiskers', 'outliers', 'rates', 'data', 'case']", Examining numerical data,seg_13,"any observation lying beyond the whiskers is labeled with a dot. the purpose of labeling these points – instead of extending the whiskers to the minimum and maximum observed values – is to help identify any observations that appear to be unusually distant from the rest of the data. unusually distant observations are called outliers. in this case, it would be reasonable to classify the interest rates of 24.85% and 26.30% as outliers since they are numerically distant from most of the data.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2151,  8089,  4688,  3458,  1996,  1059, 24158, 11451,  2003,
        12599,  2007,  1037, 11089,  1012,  1996,  3800,  1997, 28847,  2122,
         2685,  1516,  2612,  1997,  8402,  1996,  1059, 24158, 11451,  2000,
         1996,  6263,  1998,  4555,  5159,  5300,  1516,  2003,  2000,  2393,
         6709,  2151,  9420,  2008,  3711,  2000,  2022, 12890,  6802,  2013,
         1996,  2717,  1997,  1996,  2951,  1012, 12890,  6802,  9420,  2024,
         2170,  2041, 14355,  2015,  1012,  1999,  2023,  2553,  1010,  2009,
         2052,  2022,  9608,  2000, 26268,  1996,  3037,  6165,  1997,  2484,
         1012,  5594,  1003,  1998,  2656,  1012,  2382,  1003,  2004,  2041,
        14355,  2015,  2144,  2027,  2024, 15973,  2135,  6802,  2013,  2087,
         1997,  1996,  2951,  1012,   102])"
304,1,"['outlier', 'observation', 'data']", Examining numerical data,seg_13,an outlier is an observation that appears extreme relative to the rest of the data.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  2019,  2041, 14355,  2003,  2019,  8089,  2008,  3544,  6034,
         5816,  2000,  1996,  2717,  1997,  1996,  2951,  1012,   102])"
305,1,"['outliers', 'data']", Examining numerical data,seg_13,"examining data for outliers serves many useful purposes, including",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 12843,  2951,  2005,  2041, 14355,  2015,  4240,  2116,  6179,
         5682,  1010,  2164,   102])"
306,1,"['skew', 'distribution']", Examining numerical data,seg_13,1. identifying strong skew in the distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1015,  1012, 12151,  2844, 15315,  7974,  1999,  1996,  4353,
         1012,   102])"
307,1,"['data collection', 'errors', 'data']", Examining numerical data,seg_13,2. identifying possible data collection or data entry errors.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012, 12151,  2825,  2951,  3074,  2030,  2951,  4443,
        10697,  1012,   102])"
308,1,['data'], Examining numerical data,seg_13,3. providing insight into interesting properties of the data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1017,  1012,  4346, 12369,  2046,  5875,  5144,  1997,  1996,
         2951,  1012,   102])"
309,1,"['rate', 'set', 'estimate', 'data set', 'data']", Examining numerical data,seg_13,"using figure 2.10, estimate the following values for interest rate in the loan50 data set: (a) q1, (b) q3, and (c) iqr.11",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2478,  3275,  1016,  1012,  2184,  1010, 10197,  1996,  2206,
         5300,  2005,  3037,  3446,  1999,  1996,  5414, 12376,  2951,  2275,
         1024,  1006,  1037,  1007,  1053,  2487,  1010,  1006,  1038,  1007,
         1053,  2509,  1010,  1998,  1006,  1039,  1007, 26264,  2099,  1012,
         2340,   102])"
310,1,"['statistics', 'robust statistics']", Examining numerical data,seg_13,2.1.6 robust statistics,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1020, 15873,  6747,   102])"
311,1,"['rate', 'observation', 'data', 'set', 'sample statistics', 'sample', 'statistics', 'data set']", Examining numerical data,seg_13,"how are the sample statistics of the interest rate data set affected by the observation, 26.3%? what would have happened if this loan had instead been only 15%? what would happen to these summary statistics if the observation at 26.3% had been even larger, say 35%? these scenarios are plotted alongside the original data in figure 2.11, and sample statistics are computed under each scenario in figure 2.12.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2129,  2024,  1996,  7099,  6747,  1997,  1996,  3037,  3446,
         2951,  2275,  5360,  2011,  1996,  8089,  1010,  2656,  1012,  1017,
         1003,  1029,  2054,  2052,  2031,  3047,  2065,  2023,  5414,  2018,
         2612,  2042,  2069,  2321,  1003,  1029,  2054,  2052,  4148,  2000,
         2122, 12654,  6747,  2065,  1996,  8089,  2012,  2656,  1012,  1017,
         1003,  2018,  2042,  2130,  3469,  1010,  2360,  3486,  1003,  1029,
         2122, 16820,  2024, 27347,  4077,  1996,  2434,  2951,  1999,  3275,
         1016,  1012,  2340,  1010,  1998,  7099,  6747,  2024, 24806,  2104,
         2169, 11967,  1999,  3275,  1016,  1012,  2260,  1012,   102])"
312,1,['rate'], Examining numerical data,seg_13,5% 10% 15% 20% 25% 30% 35% interest rate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([12843, 15973,  2951])","tensor([ 101, 1019, 1003, 2184, 1003, 2321, 1003, 2322, 1003, 2423, 1003, 2382,
        1003, 3486, 1003, 3037, 3446,  102])"
313,1,"['rate', 'sets', 'plots', 'data sets', 'data', 'dot plots']", Examining numerical data,seg_13,figure 2.11: dot plots of the original interest rate data and two modified data sets.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  2340,  1024, 11089, 14811,  1997,  1996,
         2434,  3037,  3446,  2951,  1998,  2048,  6310,  2951,  4520,  1012,
          102])"
314,1,"['rate', 'data', 'median']", Examining numerical data,seg_13,robust not robust scenario median iqr x̄ s original interest rate data 9.93% 5.76% 11.57% 5.05% move 26.3% → 15% 9.93% 5.76% 11.34% 4.61% move 26.3% → 35% 9.93% 5.76% 11.74% 5.68%,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 15873,  2025, 15873, 11967,  3991, 26264,  2099,  1060,  1055,
         2434,  3037,  3446,  2951,  1023,  1012,  6109,  1003,  1019,  1012,
         6146,  1003,  2340,  1012,  5401,  1003,  1019,  1012,  5709,  1003,
         2693,  2656,  1012,  1017,  1003,  1585,  2321,  1003,  1023,  1012,
         6109,  1003,  1019,  1012,  6146,  1003,  2340,  1012,  4090,  1003,
         1018,  1012,  6079,  1003,  2693,  2656,  1012,  1017,  1003,  1585,
         3486,  1003,  1023,  1012,  6109,  1003,  1019,  1012,  6146,  1003,
         2340,  1012,  6356,  1003,  1019,  1012,  6273,  1003,   102])"
315,1,"['mean', 'rate', 'deviation', 'observations', 'standard deviation', 'standard', 'median', 'variable']", Examining numerical data,seg_13,"figure 2.12: a comparison of how the median, iqr, mean (x̄), and standard deviation (s) change had an extreme observations from the interest rate variable been different.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  2260,  1024,  1037,  7831,  1997,  2129,
         1996,  3991,  1010, 26264,  2099,  1010,  2812,  1006,  1060,  1007,
         1010,  1998,  3115, 24353,  1006,  1055,  1007,  2689,  2018,  2019,
         6034,  9420,  2013,  1996,  3037,  3446,  8023,  2042,  2367,  1012,
          102])"
316,1,"['mean', 'deviation', 'observations', 'standard deviation', 'standard', 'median']", Examining numerical data,seg_13,"(a) which is more affected by extreme observations, the mean or median? figure 2.12 may be helpful. (b) is the standard deviation or iqr more affected by extreme observations?12",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1006,  1037,  1007,  2029,  2003,  2062,  5360,  2011,  6034,
         9420,  1010,  1996,  2812,  2030,  3991,  1029,  3275,  1016,  1012,
         2260,  2089,  2022, 14044,  1012,  1006,  1038,  1007,  2003,  1996,
         3115, 24353,  2030, 26264,  2099,  2062,  5360,  2011,  6034,  9420,
         1029,  2260,   102])"
317,1,"['mean', 'deviation', 'observations', 'standard deviation', 'standard', 'statistics', 'robust statistics', 'extreme value', 'median']", Examining numerical data,seg_13,"the median and iqr are called robust statistics because extreme observations have little effect on their values: moving the most extreme value generally has little influence on these statistics. on the other hand, the mean and standard deviation are more heavily influenced by changes in extreme observations, which can be important in some situations.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  3991,  1998, 26264,  2099,  2024,  2170, 15873,  6747,
         2138,  6034,  9420,  2031,  2210,  3466,  2006,  2037,  5300,  1024,
         3048,  1996,  2087,  6034,  3643,  3227,  2038,  2210,  3747,  2006,
         2122,  6747,  1012,  2006,  1996,  2060,  2192,  1010,  1996,  2812,
         1998,  3115, 24353,  2024,  2062,  4600,  5105,  2011,  3431,  1999,
         6034,  9420,  1010,  2029,  2064,  2022,  2590,  1999,  2070,  8146,
         1012,   102])"
318,1,"['median', 'case']", Examining numerical data,seg_13,the median and iqr did not change under the three scenarios in figure 2.12. why might this be the case?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  3991,  1998, 26264,  2099,  2106,  2025,  2689,  2104,
         1996,  2093, 16820,  1999,  3275,  1016,  1012,  2260,  1012,  2339,
         2453,  2023,  2022,  1996,  2553,  1029,   102])"
319,1,"['sets', 'estimates', 'data sets', 'data', 'median']", Examining numerical data,seg_13,"the median and iqr are only sensitive to numbers near q1, the median, and q3. since values in these regions are stable in the three data sets, the median and iqr estimates are also stable.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  3991,  1998, 26264,  2099,  2024,  2069,  7591,  2000,
         3616,  2379,  1053,  2487,  1010,  1996,  3991,  1010,  1998,  1053,
         2509,  1012,  2144,  5300,  1999,  2122,  4655,  2024,  6540,  1999,
         1996,  2093,  2951,  4520,  1010,  1996,  3991,  1998, 26264,  2099,
        10035,  2024,  2036,  6540,  1012,   102])"
320,1,"['tail', 'mean', 'skewed', 'set', 'distribution', 'data set', 'data']", Examining numerical data,seg_13,"the distribution of loan amounts in the loan50 data set is right skewed, with a few large loans lingering out into the right tail. if you were wanting to understand the typical loan size, should you be more interested in the mean or median?13",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  4353,  1997,  5414,  8310,  1999,  1996,  5414, 12376,
         2951,  2275,  2003,  2157, 15315,  7974,  2098,  1010,  2007,  1037,
         2261,  2312, 10940, 15304,  2041,  2046,  1996,  2157,  5725,  1012,
         2065,  2017,  2020,  5782,  2000,  3305,  1996,  5171,  5414,  2946,
         1010,  2323,  2017,  2022,  2062,  4699,  1999,  1996,  2812,  2030,
         3991,  1029,  2410,   102])"
321,1,"['transforming', 'data']", Examining numerical data,seg_13,2.1.7 transforming data (special topic),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1021, 17903,  2951,  1006,  2569,
         8476,  1007,   102])"
322,1,"['skewed', 'transform', 'model', 'data']", Examining numerical data,seg_13,"when data are very strongly skewed, we sometimes transform them so they are easier to model.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2043,  2951,  2024,  2200,  6118, 15315,  7974,  2098,  1010,
         2057,  2823, 10938,  2068,  2061,  2027,  2024,  6082,  2000,  2944,
         1012,   102])"
323,1,['population'], Examining numerical data,seg_13,3000 1000 2500 y 2000 y c c n n e e 1500 u u 500 q q e e fr 1000 fr 500 0 0 0m 2m 4m 6m 8m 10m 2 3 4 5 6 7 log10(population) population (m = millions),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 11910,  6694, 25108,  1061,  2456,  1061,  1039,  1039,  1050,
         1050,  1041,  1041, 10347,  1057,  1057,  3156,  1053,  1053,  1041,
         1041, 10424,  6694, 10424,  3156,  1014,  1014,  1014,  2213,  1016,
         2213,  1018,  2213,  1020,  2213,  1022,  2213,  2184,  2213,  1016,
         1017,  1018,  1019,  1020,  1021,  8833, 10790,  1006,  2313,  1007,
         2313,  1006,  1049,  1027,  8817,  1007,   102])"
324,1,"['populations', 'histogram', 'county', 'plot']", Examining numerical data,seg_13,"figure 2.13: (a) a histogram of the populations of all us counties. (b) a histogram of log10-transformed county populations. for this plot, the x-value corresponds to the power of 10, e.g. “4” on the x-axis corresponds to 104 = 10,000.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  2410,  1024,  1006,  1037,  1007,  1037,
         2010,  3406, 13113,  1997,  1996,  7080,  1997,  2035,  2149,  5721,
         1012,  1006,  1038,  1007,  1037,  2010,  3406, 13113,  1997,  8833,
        10790,  1011,  8590,  2221,  7080,  1012,  2005,  2023,  5436,  1010,
         1996,  1060,  1011,  3643, 14788,  2000,  1996,  2373,  1997,  2184,
         1010,  1041,  1012,  1043,  1012,  1523,  1018,  1524,  2006,  1996,
         1060,  1011,  8123, 14788,  2000,  9645,  1027,  2184,  1010,  2199,
         1012,   102])"
325,1,"['skew', 'populations', 'histogram', 'county', 'plot']", Examining numerical data,seg_13,"consider the histogram of county populations shown in figure 2.13(a), which shows extreme skew. what isn’t useful about this plot?",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  5136,  1996,  2010,  3406, 13113,  1997,  2221,  7080,  3491,
         1999,  3275,  1016,  1012,  2410,  1006,  1037,  1007,  1010,  2029,
         3065,  6034, 15315,  7974,  1012,  2054,  3475,  1521,  1056,  6179,
         2055,  2023,  5436,  1029,   102])"
326,1,"['skew', 'bin', 'data']", Examining numerical data,seg_13,"nearly all of the data fall into the left-most bin, and the extreme skew obscures many of the potentially interesting details in the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3053,  2035,  1997,  1996,  2951,  2991,  2046,  1996,  2187,
         1011,  2087,  8026,  1010,  1998,  1996,  6034, 15315,  7974, 14485,
         2015,  2116,  1997,  1996,  9280,  5875,  4751,  1999,  1996,  2951,
         1012,   102])"
327,1,"['transformations', 'data set', 'symmetric', 'skewed data', 'skew', 'populations', 'histogram', 'statistical', 'plot', 'data', 'function', 'skewed', 'results', 'standard', 'county', 'transformation', 'set', 'outliers']", Examining numerical data,seg_13,"there are some standard transformations that may be useful for strongly right skewed data where much of the data is positive but clustered near zero. a transformation is a rescaling of the data using a function. for instance, a plot of the logarithm (base 10) of county populations results in the new histogram in figure 2.13(b). this data is symmetric, and any potential outliers appear much less extreme than in the original data set. by reigning in the outliers and extreme skew, transformations like this often make it easier to build statistical models against the data.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  2045,  2024,  2070,  3115, 21865,  2008,  2089,  2022,  6179,
         2005,  6118,  2157, 15315,  7974,  2098,  2951,  2073,  2172,  1997,
         1996,  2951,  2003,  3893,  2021, 25221,  2379,  5717,  1012,  1037,
         8651,  2003,  1037, 24501,  9289,  2075,  1997,  1996,  2951,  2478,
         1037,  3853,  1012,  2005,  6013,  1010,  1037,  5436,  1997,  1996,
         8833,  8486,  2705,  2213,  1006,  2918,  2184,  1007,  1997,  2221,
         7080,  3463,  1999,  1996,  2047,  2010,  3406, 13113,  1999,  3275,
         1016,  1012,  2410,  1006,  1038,  1007,  1012,  2023,  2951,  2003,
        19490,  1010,  1998,  2151,  4022,  2041, 14355,  2015,  3711,  2172,
         2625,  6034,  2084,  1999,  1996,  2434,  2951,  2275,  1012,  2011,
        16323,  1999,  1996,  2041, 14355,  2015,  1998,  6034, 15315,  7974,
         1010, 21865,  2066,  2023,  2411,  2191,  2009,  6082,  2000,  3857,
         7778,  4275,  2114,  1996,  2951,  1012,   102])"
328,1,"['regression', 'skewed', 'transformation', 'association', 'population', 'scatterplot', 'variables', 'positive association', 'data', 'variable']", Examining numerical data,seg_13,"transformations can also be applied to one or both variables in a scatterplot. a scatterplot of the population change from 2010 to 2017 against the population in 2010 is shown in figure 2.14(a). in this first scatterplot, it’s hard to decipher any interesting patterns because the population variable is so strongly skewed. however, if we apply a log10 transformation to the population variable, as shown in figure 2.14(b), a positive association between the variables is revealed. in fact, we may be interested in fitting a trend line to the data when we explore methods around fitting regression lines in chapter 8.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0.,
        0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 21865,  2064,  2036,  2022,  4162,  2000,  2028,  2030,  2119,
        10857,  1999,  1037,  8040, 20097, 24759,  4140,  1012,  1037,  8040,
        20097, 24759,  4140,  1997,  1996,  2313,  2689,  2013,  2230,  2000,
         2418,  2114,  1996,  2313,  1999,  2230,  2003,  3491,  1999,  3275,
         1016,  1012,  2403,  1006,  1037,  1007,  1012,  1999,  2023,  2034,
         8040, 20097, 24759,  4140,  1010,  2009,  1521,  1055,  2524,  2000,
        11703, 11514,  5886,  2151,  5875,  7060,  2138,  1996,  2313,  8023,
         2003,  2061,  6118, 15315,  7974,  2098,  1012,  2174,  1010,  2065,
         2057,  6611,  1037,  8833, 10790,  8651,  2000,  1996,  2313,  8023,
         1010,  2004,  3491,  1999,  3275,  1016,  1012,  2403,  1006,  1038,
         1007,  1010,  1037,  3893,  2523,  2090,  1996, 10857,  2003,  3936,
         1012,  1999,  2755,  1010,  2057,  2089,  2022,  4699,  1999, 11414,
         1037,  9874,  2240,  2000,  1996,  2951,  2043,  2057,  8849,  4725,
         2105, 11414, 26237,  3210,  1999,  3127,  1022,  1012,   102])"
329,1,"['observation', 'transforming', 'skew', 'nonlinear', 'scatterplot', 'data']", Examining numerical data,seg_13,"transformations other than the logarithm can be useful, too. for instance, the square root 1 (√original observation) and inverse ( original observation ) are commonly used by data scientists. common goals in transforming data are to see the data structure differently, reduce skew, assist in modeling, or straighten a nonlinear relationship in a scatterplot.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101, 21865,  2060,  2084,  1996,  8833,  8486,  2705,  2213,  2064,
         2022,  6179,  1010,  2205,  1012,  2005,  6013,  1010,  1996,  2675,
         7117,  1015,  1006,  1600, 10050, 24965,  8089,  1007,  1998, 19262,
         1006,  2434,  8089,  1007,  2024,  4141,  2109,  2011,  2951,  6529,
         1012,  2691,  3289,  1999, 17903,  2951,  2024,  2000,  2156,  1996,
         2951,  3252, 11543,  1010,  5547, 15315,  7974,  1010,  6509,  1999,
        11643,  1010,  2030, 28568,  1037, 27400,  3276,  1999,  1037,  8040,
        20097, 24759,  4140,  1012,   102])"
330,1,['population'], Examining numerical data,seg_13,−20% −20% 0m 2m 4m 6m 8m 10m 2 3 4 5 6 7 population before change (m = millions) log10(population before change),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1597, 11387,  1003,  1597, 11387,  1003,  1014,  2213,  1016,
         2213,  1018,  2213,  1020,  2213,  1022,  2213,  2184,  2213,  1016,
         1017,  1018,  1019,  1020,  1021,  2313,  2077,  2689,  1006,  1049,
         1027,  8817,  1007,  8833, 10790,  1006,  2313,  2077,  2689,  1007,
          102])"
331,1,"['scatterplot', 'data', 'population']", Examining numerical data,seg_13,figure 2.14: (a) scatterplot of population change against the population before the change. (b) a scatterplot of the same data but where the population size has been log-transformed.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  2403,  1024,  1006,  1037,  1007,  8040,
        20097, 24759,  4140,  1997,  2313,  2689,  2114,  1996,  2313,  2077,
         1996,  2689,  1012,  1006,  1038,  1007,  1037,  8040, 20097, 24759,
         4140,  1997,  1996,  2168,  2951,  2021,  2073,  1996,  2313,  2946,
         2038,  2042,  8833,  1011,  8590,  1012,   102])"
332,1,['data'], Examining numerical data,seg_13,2.1.8 mapping data (special topic),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1016,  1012,  1015,  1012,  1022, 12375,  2951,  1006,  2569,
         8476,  1007,   102])"
333,1,"['box plots', 'intensity maps', 'intensity map', 'data set', 'median', 'intensity', 'plots', 'plot', 'data', 'hypotheses', 'rate', 'county', 'dot plots', 'set', 'numerical', 'variables', 'percent', 'variable']", Examining numerical data,seg_13,"the county data set offers many numerical variables that we could plot using dot plots, scatterplots, or box plots, but these miss the true nature of the data. rather, when we encounter geographic data, we should create an intensity map, where colors are used to show higher and lower values of a variable. figures 2.15 and 2.16 shows intensity maps for poverty rate in percent (poverty), unemployment rate (unemployment rate), homeownership rate in percent (homeownership), and median household income (median hh income). the color key indicates which colors correspond to which values. the intensity maps are not generally very helpful for getting precise values in any given county, but they are very helpful for seeing geographic trends and generating interesting research questions or hypotheses.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996,  2221,  2951,  2275,  4107,  2116, 15973, 10857,  2008,
         2057,  2071,  5436,  2478, 11089, 14811,  1010,  8040, 20097, 24759,
        12868,  1010,  2030,  3482, 14811,  1010,  2021,  2122,  3335,  1996,
         2995,  3267,  1997,  1996,  2951,  1012,  2738,  1010,  2043,  2057,
         8087,  9183,  2951,  1010,  2057,  2323,  3443,  2019,  8015,  4949,
         1010,  2073,  6087,  2024,  2109,  2000,  2265,  3020,  1998,  2896,
         5300,  1997,  1037,  8023,  1012,  4481,  1016,  1012,  2321,  1998,
         1016,  1012,  2385,  3065,  8015,  7341,  2005,  5635,  3446,  1999,
         3867,  1006,  5635,  1007,  1010, 12163,  3446,  1006, 12163,  3446,
         1007,  1010,  2188, 12384,  2545,  5605,  3446,  1999,  3867,  1006,
         2188, 12384,  2545,  5605,  1007,  1010,  1998,  3991,  4398,  3318,
         1006,  3991,  1044,  2232,  3318,  1007,  1012,  1996,  3609,  3145,
         7127,  2029,  6087, 17254,  2000,  2029,  5300,  1012,  1996,  8015,
         7341,  2024,  2025,  3227,  2200, 14044,  2005,  2893, 10480,  5300,
         1999,  2151,  2445,  2221,  1010,  2021,  2027,  2024,  2200, 14044,
         2005,  3773,  9183, 12878,  1998, 11717,  5875,  2470,  3980,  2030,
         1044, 22571, 14573, 23072,  1012,   102])"
334,1,"['rate', 'intensity maps', 'intensity']", Examining numerical data,seg_13,what interesting features are evident in the poverty and unemployment rate intensity maps?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2054,  5875,  2838,  2024, 10358,  1999,  1996,  5635,  1998,
        12163,  3446,  8015,  7341,  1029,   102])"
335,1,"['rates', 'locations']", Examining numerical data,seg_13,"poverty rates are evidently higher in a few locations. notably, the deep south shows higher poverty rates, as does much of arizona and new mexico. high poverty rates are evident in the mississippi flood plains a little north of new orleans and also in a large section of kentucky.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  5635,  6165,  2024, 15329,  3020,  1999,  1037,  2261,  5269,
         1012,  5546,  1010,  1996,  2784,  2148,  3065,  3020,  5635,  6165,
         1010,  2004,  2515,  2172,  1997,  5334,  1998,  2047,  3290,  1012,
         2152,  5635,  6165,  2024, 10358,  1999,  1996,  5900,  7186,  8575,
         1037,  2210,  2167,  1997,  2047,  5979,  1998,  2036,  1999,  1037,
         2312,  2930,  1997,  5612,  1012,   102])"
336,1,"['rate', 'observation', 'rates', 'variables']", Examining numerical data,seg_13,"the unemployment rate follows similar trends, and we can see correspondence between the two variables. in fact, it makes sense for higher rates of unemployment to be closely related to poverty rates. one observation that stand out when comparing the two maps: the poverty rate is much higher than the unemployment rate, meaning while many people may be working, they are not making enough to break out of poverty.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  1996, 12163,  3446,  4076,  2714, 12878,  1010,  1998,  2057,
         2064,  2156, 11061,  2090,  1996,  2048, 10857,  1012,  1999,  2755,
         1010,  2009,  3084,  3168,  2005,  3020,  6165,  1997, 12163,  2000,
         2022,  4876,  3141,  2000,  5635,  6165,  1012,  2028,  8089,  2008,
         3233,  2041,  2043, 13599,  1996,  2048,  7341,  1024,  1996,  5635,
         3446,  2003,  2172,  3020,  2084,  1996, 12163,  3446,  1010,  3574,
         2096,  2116,  2111,  2089,  2022,  2551,  1010,  2027,  2024,  2025,
         2437,  2438,  2000,  3338,  2041,  1997,  5635,  1012,   102])"
337,1,"['intensity map', 'intensity', 'median']", Examining numerical data,seg_13,what interesting features are evident in the median hh income intensity map in figure 2.16(b)?14,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  2054,  5875,  2838,  2024, 10358,  1999,  1996,  3991,  1044,
         2232,  3318,  8015,  4949,  1999,  3275,  1016,  1012,  2385,  1006,
         1038,  1007,  1029,  2403,   102])"
338,0,[], Examining numerical data,seg_13,etar tn em 4% yolpmenu,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12843, 15973,  2951])","tensor([  101, 27859,  2099, 28286,  7861,  1018,  1003, 10930, 14277,  3549,
         2226,   102])"
339,1,"['rate', 'intensity map', 'intensity', 'percent']", Examining numerical data,seg_13,figure 2.15: (a) intensity map of poverty rate (percent). (b) map of the unemployment rate (percent).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  2321,  1024,  1006,  1037,  1007,  8015,
         4949,  1997,  5635,  3446,  1006,  3867,  1007,  1012,  1006,  1038,
         1007,  4949,  1997,  1996, 12163,  3446,  1006,  3867,  1007,  1012,
          102])"
340,0,[], Examining numerical data,seg_13,emocni dloh $47 esuoh naidem,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12843, 15973,  2951])","tensor([  101,  7861, 10085,  3490, 21469, 11631,  1002,  4700,  9686, 19098,
         2232,  6583,  5178,  2213,   102])"
341,1,"['rate', 'intensity map', 'intensity', 'percent', 'median']", Examining numerical data,seg_13,figure 2.16: (a) intensity map of homeownership rate (percent). (b) intensity map of median household income ($1000s).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12843, 15973,  2951])","tensor([  101,  3275,  1016,  1012,  2385,  1024,  1006,  1037,  1007,  8015,
         4949,  1997,  2188, 12384,  2545,  5605,  3446,  1006,  3867,  1007,
         1012,  1006,  1038,  1007,  8015,  4949,  1997,  3991,  4398,  3318,
         1006,  1002,  6694,  2015,  1007,  1012,   102])"
342,0,[], Examining numerical data,seg_13,0 200 400 600 gestation (days),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12843, 15973,  2951])","tensor([  101,  1014,  3263,  4278,  5174, 16216, 20100,  1006,  2420,  1007,
          102])"
343,0,[], Examining numerical data,seg_13,to have an unusually low or high aqi? explain your reasoning. 0 10 20 30 40 50 60 daily aqi,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([12843, 15973,  2951])","tensor([  101,  2000,  2031,  2019, 12890,  2659,  2030,  2152,  1037, 14702,
         1029,  4863,  2115, 13384,  1012,  1014,  2184,  2322,  2382,  2871,
         2753,  3438,  3679,  1037, 14702,   102])"
344,1,['mean'], Examining numerical data,seg_13,10 20 30 40 mean work travel (in min),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12843, 15973,  2951])","tensor([ 101, 2184, 2322, 2382, 2871, 2812, 2147, 3604, 1006, 1999, 8117, 1007,
         102])"
345,1,"['set', 'information', 'categorical data', 'sample', 'tables', 'data set', 'data', 'categorical']", Considering categorical data,seg_15,"in this section, we will introduce tables and other basic tools for categorical data that are used throughout this book. the loan50 data set represents a sample from a larger loan data set called loans. this larger data set contains information on 10,000 loans made through lending club. we will examine the relationship between homeownership, which for the loans data can take a value of rent, mortgage (owns but has a mortgage), or own, and app type, which indicates whether the loan application was made with a partner or whether it was an individual application.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1999,  2023,  2930,  1010,  2057,  2097,  8970,  7251,  1998,
         2060,  3937,  5906,  2005,  4937, 27203,  2951,  2008,  2024,  2109,
         2802,  2023,  2338,  1012,  1996,  5414, 12376,  2951,  2275,  5836,
         1037,  7099,  2013,  1037,  3469,  5414,  2951,  2275,  2170, 10940,
         1012,  2023,  3469,  2951,  2275,  3397,  2592,  2006,  2184,  1010,
         2199, 10940,  2081,  2083, 18435,  2252,  1012,  2057,  2097, 11628,
         1996,  3276,  2090,  2188, 12384,  2545,  5605,  1010,  2029,  2005,
         1996, 10940,  2951,  2064,  2202,  1037,  3643,  1997,  9278,  1010,
        14344,  1006,  8617,  2021,  2038,  1037, 14344,  1007,  1010,  2030,
         2219,  1010,  1998, 10439,  2828,  1010,  2029,  7127,  3251,  1996,
         5414,  4646,  2001,  2081,  2007,  1037,  4256,  2030,  3251,  2009,
         2001,  2019,  3265,  4646,  1012,   102])"
346,1,"['bar plots', 'plots', 'tables', 'contingency tables']", Considering categorical data,seg_15,2.2.1 contingency tables and bar plots,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1016,  1012,  1016,  1012,  1015,  9530,  3436, 11916,  7251,
         1998,  3347, 14811,   102])"
347,1,"['categories', 'table', 'outcomes', 'categorical variables', 'data set', 'percentages', 'data', 'combination', 'categorical', 'row totals', 'row and column totals', 'contingency table', 'column totals', 'set', 'variables', 'variable']", Considering categorical data,seg_15,"figure 2.17 summarizes two variables: app type and homeownership. a table that summarizes data for two categorical variables in this way is called a contingency table. each value in the table represents the number of times a particular combination of variable outcomes occurred. for example, the value 3496 corresponds to the number of loans in the data set where the borrower rents their home and the application type was by an individual. row and column totals are also included. the row totals provide the total counts across each row (e.g. 3496 + 3839 + 1170 = 8505), and column totals are total counts down each column. we can also create a table that shows only the overall percentages or proportions for each combination of categories, or we can create a table for a single variable, such as the one shown in figure 2.18 for the homeownership variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2459,  7680,  7849, 10057,  2048, 10857,
         1024, 10439,  2828,  1998,  2188, 12384,  2545,  5605,  1012,  1037,
         2795,  2008,  7680,  7849, 10057,  2951,  2005,  2048,  4937, 27203,
        10857,  1999,  2023,  2126,  2003,  2170,  1037,  9530,  3436, 11916,
         2795,  1012,  2169,  3643,  1999,  1996,  2795,  5836,  1996,  2193,
         1997,  2335,  1037,  3327,  5257,  1997,  8023, 13105,  4158,  1012,
         2005,  2742,  1010,  1996,  3643,  4090,  2683,  2575, 14788,  2000,
         1996,  2193,  1997, 10940,  1999,  1996,  2951,  2275,  2073,  1996,
        17781,  2121, 28206,  2037,  2188,  1998,  1996,  4646,  2828,  2001,
         2011,  2019,  3265,  1012,  5216,  1998,  5930, 21948,  2024,  2036,
         2443,  1012,  1996,  5216, 21948,  3073,  1996,  2561,  9294,  2408,
         2169,  5216,  1006,  1041,  1012,  1043,  1012,  4090,  2683,  2575,
         1009,  4229, 23499,  1009, 12567,  2692,  1027, 15678,  2629,  1007,
         1010,  1998,  5930, 21948,  2024,  2561,  9294,  2091,  2169,  5930,
         1012,  2057,  2064,  2036,  3443,  1037,  2795,  2008,  3065,  2069,
         1996,  3452,  7017,  2015,  2030, 19173,  2005,  2169,  5257,  1997,
         7236,  1010,  2030,  2057,  2064,  3443,  1037,  2795,  2005,  1037,
         2309,  8023,  1010,  2107,  2004,  1996,  2028,  3491,  1999,  3275,
         1016,  1012,  2324,  2005,  1996,  2188, 12384,  2545,  5605,  8023,
         1012,   102])"
348,1,['joint'], Considering categorical data,seg_15,homeownership rent mortgage own total individual 3496 3839 1170 8505 app type joint 362 950 183 1495,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2188, 12384,  2545,  5605,  9278, 14344,  2219,  2561,  3265,
         4090,  2683,  2575,  4229, 23499, 12567,  2692, 15678,  2629, 10439,
         2828,  4101,  4029,  2475, 20317, 18677, 17332,  2629,   102])"
349,1,"['contingency table', 'table']", Considering categorical data,seg_15,figure 2.17: a contingency table for app type and homeownership.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2459,  1024,  1037,  9530,  3436, 11916,
         2795,  2005, 10439,  2828,  1998,  2188, 12384,  2545,  5605,  1012,
          102])"
350,0,[], Considering categorical data,seg_15,homeownership count rent 3858 mortgage 4789 own 1353 total 10000,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2188, 12384,  2545,  5605,  4175,  9278, 24429,  2620, 14344,
         4700,  2620,  2683,  2219, 11502,  2509,  2561,  6694,  2692,   102])"
351,1,"['frequencies', 'variable', 'table']", Considering categorical data,seg_15,figure 2.18: a table summarizing the frequencies of each value for the homeownership variable.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2324,  1024,  1037,  2795,  7680,  7849,
         6026,  1996, 13139,  1997,  2169,  3643,  2005,  1996,  2188, 12384,
         2545,  5605,  8023,  1012,   102])"
352,1,"['bar plot', 'observations', 'categorical variable', 'level', 'plot', 'variable', 'categorical']", Considering categorical data,seg_15,"a bar plot is a common way to display a single categorical variable. the left panel of figure 2.19 shows a bar plot for the homeownership variable. in the right panel, the counts are converted into proportions, showing the proportion of observations that are in each level (e.g. 3858/10000 = 0.3858 for rent).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1037,  3347,  5436,  2003,  1037,  2691,  2126,  2000,  4653,
         1037,  2309,  4937, 27203,  8023,  1012,  1996,  2187,  5997,  1997,
         3275,  1016,  1012,  2539,  3065,  1037,  3347,  5436,  2005,  1996,
         2188, 12384,  2545,  5605,  8023,  1012,  1999,  1996,  2157,  5997,
         1010,  1996,  9294,  2024,  4991,  2046, 19173,  1010,  4760,  1996,
        10817,  1997,  9420,  2008,  2024,  1999,  2169,  2504,  1006,  1041,
         1012,  1043,  1012, 24429,  2620,  1013,  6694,  2692,  1027,  1014,
         1012, 24429,  2620,  2005,  9278,  1007,  1012,   102])"
353,1,"['bar plots', 'plots']", Considering categorical data,seg_15,"figure 2.19: two bar plots of number. the left panel shows the counts, and the right panel shows the proportions in each group.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2539,  1024,  2048,  3347, 14811,  1997,
         2193,  1012,  1996,  2187,  5997,  3065,  1996,  9294,  1010,  1998,
         1996,  2157,  5997,  3065,  1996, 19173,  1999,  2169,  2177,  1012,
          102])"
354,0,[], Considering categorical data,seg_15,2.2.2 row and column proportions,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1016,  1012,  1016,  1012,  1016,  5216,  1998,  5930, 19173,
          102])"
355,1,"['row totals', 'contingency table', 'table', 'intersection', 'row total', 'variable']", Considering categorical data,seg_15,"sometimes it is useful to understand the fractional breakdown of one variable in another, and we can modify our contingency table to provide such a view. figure 2.20 shows the row proportions for figure 2.17, which are computed as the counts divided by their row totals. the value 3496 at the intersection of individual and rent is replaced by 3496/8505 = 0.411, i.e. 3496 divided by its row total, 8505. so what does 0.411 represent? it corresponds to the proportion of individual applicants who rent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2823,  2009,  2003,  6179,  2000,  3305,  1996, 12884,  2389,
        12554,  1997,  2028,  8023,  1999,  2178,  1010,  1998,  2057,  2064,
        19933,  2256,  9530,  3436, 11916,  2795,  2000,  3073,  2107,  1037,
         3193,  1012,  3275,  1016,  1012,  2322,  3065,  1996,  5216, 19173,
         2005,  3275,  1016,  1012,  2459,  1010,  2029,  2024, 24806,  2004,
         1996,  9294,  4055,  2011,  2037,  5216, 21948,  1012,  1996,  3643,
         4090,  2683,  2575,  2012,  1996,  6840,  1997,  3265,  1998,  9278,
         2003,  2999,  2011,  4090,  2683,  2575,  1013, 15678,  2629,  1027,
         1014,  1012, 27517,  1010,  1045,  1012,  1041,  1012,  4090,  2683,
         2575,  4055,  2011,  2049,  5216,  2561,  1010, 15678,  2629,  1012,
         2061,  2054,  2515,  1014,  1012, 27517,  5050,  1029,  2009, 14788,
         2000,  1996, 10817,  1997,  3265, 17362,  2040,  9278,  1012,   102])"
356,1,['joint'], Considering categorical data,seg_15,rent mortgage own total individual 0.411 0.451 0.138 1.000 joint 0.242 0.635 0.122 1.000 total 0.386 0.479 0.135 1.000,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  9278, 14344,  2219,  2561,  3265,  1014,  1012, 27517,  1014,
         1012, 28161,  1014,  1012, 15028,  1015,  1012,  2199,  4101,  1014,
         1012, 22431,  1014,  1012,  6191,  2629,  1014,  1012, 13092,  1015,
         1012,  2199,  2561,  1014,  1012,  4229,  2575,  1014,  1012,  4700,
         2683,  1014,  1012, 11502,  1015,  1012,  2199,   102])"
357,1,"['contingency table', 'table', 'row total', 'variables', 'joint', 'error']", Considering categorical data,seg_15,figure 2.20: a contingency table with row proportions for the app type and homeownership variables. the row total is off by 0.001 for the joint row due to a rounding error.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2322,  1024,  1037,  9530,  3436, 11916,
         2795,  2007,  5216, 19173,  2005,  1996, 10439,  2828,  1998,  2188,
        12384,  2545,  5605, 10857,  1012,  1996,  5216,  2561,  2003,  2125,
         2011,  1014,  1012, 25604,  2005,  1996,  4101,  5216,  2349,  2000,
         1037, 26939,  7561,  1012,   102])"
358,1,"['vary', 'column total', 'rate', 'associated', 'contingency table', 'table', 'levels', 'rates', 'variables']", Considering categorical data,seg_15,"a contingency table of the column proportions is computed in a similar way, where each column proportion is computed as the count divided by the corresponding column total. figure 2.21 shows such a table, and here the value 0.906 indicates that 90.6% of renters applied as individuals for the loan. this rate is higher compared to loans from people with mortgages (80.2%) or who own their home (86.5%). because these rates vary between the three levels of homeownership (rent, mortgage, own), this provides evidence that the app type and homeownership variables are associated.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1037,  9530,  3436, 11916,  2795,  1997,  1996,  5930, 19173,
         2003, 24806,  1999,  1037,  2714,  2126,  1010,  2073,  2169,  5930,
        10817,  2003, 24806,  2004,  1996,  4175,  4055,  2011,  1996,  7978,
         5930,  2561,  1012,  3275,  1016,  1012,  2538,  3065,  2107,  1037,
         2795,  1010,  1998,  2182,  1996,  3643,  1014,  1012,  3938,  2575,
         7127,  2008,  3938,  1012,  1020,  1003,  1997,  9278,  2545,  4162,
         2004,  3633,  2005,  1996,  5414,  1012,  2023,  3446,  2003,  3020,
         4102,  2000, 10940,  2013,  2111,  2007, 14344,  2015,  1006,  3770,
         1012,  1016,  1003,  1007,  2030,  2040,  2219,  2037,  2188,  1006,
         6564,  1012,  1019,  1003,  1007,  1012,  2138,  2122,  6165,  8137,
         2090,  1996,  2093,  3798,  1997,  2188, 12384,  2545,  5605,  1006,
         9278,  1010, 14344,  1010,  2219,  1007,  1010,  2023,  3640,  3350,
         2008,  1996, 10439,  2828,  1998,  2188, 12384,  2545,  5605, 10857,
         2024,  3378,  1012,   102])"
359,1,['joint'], Considering categorical data,seg_15,rent mortgage own total individual 0.906 0.802 0.865 0.851 joint 0.094 0.198 0.135 0.150 total 1.000 1.000 1.000 1.000,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  9278, 14344,  2219,  2561,  3265,  1014,  1012,  3938,  2575,
         1014,  1012, 23908,  1014,  1012,  6564,  2629,  1014,  1012,  5594,
         2487,  4101,  1014,  1012,  5641,  2549,  1014,  1012, 20003,  1014,
         1012, 11502,  1014,  1012,  5018,  2561,  1015,  1012,  2199,  1015,
         1012,  2199,  1015,  1012,  2199,  1015,  1012,  2199,   102])"
360,1,"['contingency table', 'table', 'variables', 'error']", Considering categorical data,seg_15,figure 2.21: a contingency table with column proportions for the app type and homeownership variables. the total for the last column is off by 0.001 due to a rounding error.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2538,  1024,  1037,  9530,  3436, 11916,
         2795,  2007,  5930, 19173,  2005,  1996, 10439,  2828,  1998,  2188,
        12384,  2545,  5605, 10857,  1012,  1996,  2561,  2005,  1996,  2197,
         5930,  2003,  2125,  2011,  1014,  1012, 25604,  2349,  2000,  1037,
        26939,  7561,  1012,   102])"
361,1,"['association', 'joint']", Considering categorical data,seg_15,"we could also have checked for an association between app type and homeownership in figure 2.20 using row proportions. when comparing these row proportions, we would look down columns to see if the fraction of loans where the borrower rents, has a mortgage, or owns varied across the individual to joint application types.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2057,  2071,  2036,  2031,  7039,  2005,  2019,  2523,  2090,
        10439,  2828,  1998,  2188, 12384,  2545,  5605,  1999,  3275,  1016,
         1012,  2322,  2478,  5216, 19173,  1012,  2043, 13599,  2122,  5216,
        19173,  1010,  2057,  2052,  2298,  2091,  7753,  2000,  2156,  2065,
         1996, 12884,  1997, 10940,  2073,  1996, 17781,  2121, 28206,  1010,
         2038,  1037, 14344,  1010,  2030,  8617,  9426,  2408,  1996,  3265,
         2000,  4101,  4646,  4127,  1012,   102])"
362,1,"['joint', 'intersection']", Considering categorical data,seg_15,(a) what does 0.122 at the intersection of joint and own represent in figure 2.20? (b) what does 0.135 represent in the figure 2.21?19,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1006,  1037,  1007,  2054,  2515,  1014,  1012, 13092,  2012,
         1996,  6840,  1997,  4101,  1998,  2219,  5050,  1999,  3275,  1016,
         1012,  2322,  1029,  1006,  1038,  1007,  2054,  2515,  1014,  1012,
        11502,  5050,  1999,  1996,  3275,  1016,  1012,  2538,  1029,  2539,
          102])"
363,1,"['contingency table', 'data', 'set', 'table', 'statistics', 'variables', 'data set']", Considering categorical data,seg_15,"data scientists use statistics to filter spam from incoming email messages. by noting specific characteristics of an email, a data scientist may be able to classify some emails as spam or not spam with high accuracy. one such characteristic is whether the email contains no numbers, small numbers, or big numbers. another characteristic is the email format, which indicates whether or not an email has any html content, such as bolded text. we’ll focus on email format and spam status using the email data set, and these variables are summarized in a contingency table in figure 2.22. which would be more helpful to someone hoping to classify email as spam or regular email for this table: row or column proportions?",tensor(1),"tensor([0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2951,  6529,  2224,  6747,  2000, 11307, 12403,  2213,  2013,
        14932, 10373,  7696,  1012,  2011,  9073,  3563,  6459,  1997,  2019,
        10373,  1010,  1037,  2951,  7155,  2089,  2022,  2583,  2000, 26268,
         2070, 22028,  2004, 12403,  2213,  2030,  2025, 12403,  2213,  2007,
         2152, 10640,  1012,  2028,  2107,  8281,  2003,  3251,  1996, 10373,
         3397,  2053,  3616,  1010,  2235,  3616,  1010,  2030,  2502,  3616,
         1012,  2178,  8281,  2003,  1996, 10373,  4289,  1010,  2029,  7127,
         3251,  2030,  2025,  2019, 10373,  2038,  2151, 16129,  4180,  1010,
         2107,  2004,  7782,  2098,  3793,  1012,  2057,  1521,  2222,  3579,
         2006, 10373,  4289,  1998, 12403,  2213,  3570,  2478,  1996, 10373,
         2951,  2275,  1010,  1998,  2122, 10857,  2024, 22539,  1999,  1037,
         9530,  3436, 11916,  2795,  1999,  3275,  1016,  1012,  2570,  1012,
         2029,  2052,  2022,  2062, 14044,  2000,  2619,  5327,  2000, 26268,
        10373,  2004, 12403,  2213,  2030,  3180, 10373,  2005,  2023,  2795,
         1024,  5216,  2030,  5930, 19173,  1029,   102])"
364,1,['data'], Considering categorical data,seg_15,a data scientist would be interested in how the proportion of spam changes within each email format. this corresponds to column proportions: the proportion of spam in plain text emails and the proportion of spam in html emails.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1037,  2951,  7155,  2052,  2022,  4699,  1999,  2129,  1996,
        10817,  1997, 12403,  2213,  3431,  2306,  2169, 10373,  4289,  1012,
         2023, 14788,  2000,  5930, 19173,  1024,  1996, 10817,  1997, 12403,
         2213,  1999,  5810,  3793, 22028,  1998,  1996, 10817,  1997, 12403,
         2213,  1999, 16129, 22028,  1012,   102])"
365,1,"['confidence', 'information']", Considering categorical data,seg_15,"if we generate the column proportions, we can see that a higher fraction of plain text emails are spam (209/1195 = 17.5%) than compared to html emails (158/2726 = 5.8%). this information on its own is insufficient to classify an email as spam or not spam, as over 80% of plain text emails are not spam. yet, when we carefully combine this information with many other characteristics, we stand a reasonable chance of being able to classify some emails as spam or not spam with confidence.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2065,  2057,  9699,  1996,  5930, 19173,  1010,  2057,  2064,
         2156,  2008,  1037,  3020, 12884,  1997,  5810,  3793, 22028,  2024,
        12403,  2213,  1006, 19348,  1013, 13285,  2629,  1027,  2459,  1012,
         1019,  1003,  1007,  2084,  4102,  2000, 16129, 22028,  1006, 17696,
         1013, 24231,  2575,  1027,  1019,  1012,  1022,  1003,  1007,  1012,
         2023,  2592,  2006,  2049,  2219,  2003, 13990,  2000, 26268,  2019,
        10373,  2004, 12403,  2213,  2030,  2025, 12403,  2213,  1010,  2004,
         2058,  3770,  1003,  1997,  5810,  3793, 22028,  2024,  2025, 12403,
         2213,  1012,  2664,  1010,  2043,  2057,  5362, 11506,  2023,  2592,
         2007,  2116,  2060,  6459,  1010,  2057,  3233,  1037,  9608,  3382,
         1997,  2108,  2583,  2000, 26268,  2070, 22028,  2004, 12403,  2213,
         2030,  2025, 12403,  2213,  2007,  7023,  1012,   102])"
366,1,"['contingency table', 'table']", Considering categorical data,seg_15,figure 2.22: a contingency table for spam and format.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2570,  1024,  1037,  9530,  3436, 11916,
         2795,  2005, 12403,  2213,  1998,  4289,  1012,   102])"
367,1,['table'], Considering categorical data,seg_15,"example 2.25 points out that row and column proportions are not equivalent. before settling on one form for a table, it is important to consider each to ensure that the most useful table is constructed. however, sometimes it simply isn’t clear which, if either, is more useful.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2742,  1016,  1012,  2423,  2685,  2041,  2008,  5216,  1998,
         5930, 19173,  2024,  2025,  5662,  1012,  2077,  9853,  2006,  2028,
         2433,  2005,  1037,  2795,  1010,  2009,  2003,  2590,  2000,  5136,
         2169,  2000,  5676,  2008,  1996,  2087,  6179,  2795,  2003,  3833,
         1012,  2174,  1010,  2823,  2009,  3432,  3475,  1521,  1056,  3154,
         2029,  1010,  2065,  2593,  1010,  2003,  2062,  6179,  1012,   102])"
368,1,['tables'], Considering categorical data,seg_15,look back to tables 2.20 and 2.21. are there any obvious scenarios where one might be more useful than the other?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2298,  2067,  2000,  7251,  1016,  1012,  2322,  1998,  1016,
         1012,  2538,  1012,  2024,  2045,  2151,  5793, 16820,  2073,  2028,
         2453,  2022,  2062,  6179,  2084,  1996,  2060,  1029,   102])"
369,1,"['frequencies', 'explanatory variable', 'relative frequencies', 'variables', 'explanatory', 'variable']", Considering categorical data,seg_15,"none that we thought were obvious! what is distinct about app type and homeownership vs the email example is that these two variables don’t have a clear explanatory-response variable relationship that we might hypothesize (see section 1.2.4 for these terms). usually it is most useful to “condition” on the explanatory variable. for instance, in the email example, the email format was seen as a possible explanatory variable of whether the message was spam, so we would find it more interesting to compute the relative frequencies (proportions) for each email format.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3904,  2008,  2057,  2245,  2020,  5793,   999,  2054,  2003,
         5664,  2055, 10439,  2828,  1998,  2188, 12384,  2545,  5605,  5443,
         1996, 10373,  2742,  2003,  2008,  2122,  2048, 10857,  2123,  1521,
         1056,  2031,  1037,  3154,  4654, 24759,  5162,  7062,  1011,  3433,
         8023,  3276,  2008,  2057,  2453,  1044, 22571, 14573,  2229,  4697,
         1006,  2156,  2930,  1015,  1012,  1016,  1012,  1018,  2005,  2122,
         3408,  1007,  1012,  2788,  2009,  2003,  2087,  6179,  2000,  1523,
         4650,  1524,  2006,  1996,  4654, 24759,  5162,  7062,  8023,  1012,
         2005,  6013,  1010,  1999,  1996, 10373,  2742,  1010,  1996, 10373,
         4289,  2001,  2464,  2004,  1037,  2825,  4654, 24759,  5162,  7062,
         8023,  1997,  3251,  1996,  4471,  2001, 12403,  2213,  1010,  2061,
         2057,  2052,  2424,  2009,  2062,  5875,  2000, 24134,  1996,  5816,
        13139,  1006, 19173,  1007,  2005,  2169, 10373,  4289,  1012,   102])"
370,1,"['bar plot', 'variables', 'plot']", Considering categorical data,seg_15,2.2.3 using a bar plot with two variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1016,  1012,  1016,  1012,  1017,  2478,  1037,  3347,  5436,
         2007,  2048, 10857,   102])"
371,1,"['bar plots', 'information', 'plots', 'tables', 'categorical variables', 'variables', 'categorical']", Considering categorical data,seg_15,contingency tables using row or column proportions are especially useful for examining how two categorical variables are related. stacked bar plots provide a way to visualize the information in these tables.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  9530,  3436, 11916,  7251,  2478,  5216,  2030,  5930, 19173,
         2024,  2926,  6179,  2005, 12843,  2129,  2048,  4937, 27203, 10857,
         2024,  3141,  1012, 16934,  3347, 14811,  3073,  1037,  2126,  2000,
         5107,  4697,  1996,  2592,  1999,  2122,  7251,  1012,   102])"
372,1,"['bar plot', 'contingency table', 'graphical', 'table', 'information', 'levels', 'plot', 'variable']", Considering categorical data,seg_15,"a stacked bar plot is a graphical display of contingency table information. for example, a stacked bar plot representing figure 2.21 is shown in figure 2.23(a), where we have first created a bar plot using the homeownership variable and then divided each group by the levels of app type.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1037, 16934,  3347,  5436,  2003,  1037, 20477,  4653,  1997,
         9530,  3436, 11916,  2795,  2592,  1012,  2005,  2742,  1010,  1037,
        16934,  3347,  5436,  5052,  3275,  1016,  1012,  2538,  2003,  3491,
         1999,  3275,  1016,  1012,  2603,  1006,  1037,  1007,  1010,  2073,
         2057,  2031,  2034,  2580,  1037,  3347,  5436,  2478,  1996,  2188,
        12384,  2545,  5605,  8023,  1998,  2059,  4055,  2169,  2177,  2011,
         1996,  3798,  1997, 10439,  2828,  1012,   102])"
373,1,"['bar plot', 'plot']", Considering categorical data,seg_15,"one related visualization to the stacked bar plot is the side-by-side bar plot, where an example is shown in figure 2.23(b).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2028,  3141,  5107,  3989,  2000,  1996, 16934,  3347,  5436,
         2003,  1996,  2217,  1011,  2011,  1011,  2217,  3347,  5436,  1010,
         2073,  2019,  2742,  2003,  3491,  1999,  3275,  1016,  1012,  2603,
         1006,  1038,  1007,  1012,   102])"
374,1,"['bar plot', 'vary', 'contingency table', 'associated', 'table', 'level', 'standardized', 'variables', 'joint', 'plot']", Considering categorical data,seg_15,"for the last type of bar plot we introduce, the column proportions for the app type and homeownership contingency table have been translated into a standardized stacked bar plot in figure 2.23(c). this type of visualization is helpful in understanding the fraction of individual or joint loan applications for borrowers in each level of homeownership. additionally, since the proportions of joint and individual vary across the groups, we can conclude that the two variables are associated.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2005,  1996,  2197,  2828,  1997,  3347,  5436,  2057,  8970,
         1010,  1996,  5930, 19173,  2005,  1996, 10439,  2828,  1998,  2188,
        12384,  2545,  5605,  9530,  3436, 11916,  2795,  2031,  2042,  5421,
         2046,  1037, 16367, 16934,  3347,  5436,  1999,  3275,  1016,  1012,
         2603,  1006,  1039,  1007,  1012,  2023,  2828,  1997,  5107,  3989,
         2003, 14044,  1999,  4824,  1996, 12884,  1997,  3265,  2030,  4101,
         5414,  5097,  2005, 17781,  2545,  1999,  2169,  2504,  1997,  2188,
        12384,  2545,  5605,  1012,  5678,  1010,  2144,  1996, 19173,  1997,
         4101,  1998,  3265,  8137,  2408,  1996,  2967,  1010,  2057,  2064,
        16519,  2008,  1996,  2048, 10857,  2024,  3378,  1012,   102])"
375,1,['joint'], Considering categorical data,seg_15,joint joint individual individual 4000 4000 y 3000 y 3000 c c n n e e u u q q e e r 2000 r 2000 f f,tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  4101,  4101,  3265,  3265, 20143, 20143,  1061, 11910,  1061,
        11910,  1039,  1039,  1050,  1050,  1041,  1041,  1057,  1057,  1053,
         1053,  1041,  1041,  1054,  2456,  1054,  2456,  1042,  1042,   102])"
376,0,[], Considering categorical data,seg_15,1000 1000 0 0 rent mortgage own rent mortgage own,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  6694,  6694,  1014,  1014,  9278, 14344,  2219,  9278, 14344,
         2219,   102])"
377,1,['joint'], Considering categorical data,seg_15,1.0 0.8 n 0.6 o it ropor 0.4 p joint 0.2 individual 0.0 rent mortgage own,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1015,  1012,  1014,  1014,  1012,  1022,  1050,  1014,  1012,
         1020,  1051,  2009, 20996, 17822,  1014,  1012,  1018,  1052,  4101,
         1014,  1012,  1016,  3265,  1014,  1012,  1014,  9278, 14344,  2219,
          102])"
378,1,"['bar plot', 'standardized', 'plot']", Considering categorical data,seg_15,"figure 2.23: (a) stacked bar plot for homeownership, where the counts have been further broken down by app type. (b) side-by-side bar plot for homeownership and app type. (c) standardized version of the stacked bar plot.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2603,  1024,  1006,  1037,  1007, 16934,
         3347,  5436,  2005,  2188, 12384,  2545,  5605,  1010,  2073,  1996,
         9294,  2031,  2042,  2582,  3714,  2091,  2011, 10439,  2828,  1012,
         1006,  1038,  1007,  2217,  1011,  2011,  1011,  2217,  3347,  5436,
         2005,  2188, 12384,  2545,  5605,  1998, 10439,  2828,  1012,  1006,
         1039,  1007, 16367,  2544,  1997,  1996, 16934,  3347,  5436,  1012,
          102])"
379,1,"['bar plot', 'bar plots', 'plots', 'standardized', 'plot']", Considering categorical data,seg_15,"examine the three bar plots in figure 2.23. when is the stacked, side-by-side, or standardized stacked bar plot the most useful?",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101, 11628,  1996,  2093,  3347, 14811,  1999,  3275,  1016,  1012,
         2603,  1012,  2043,  2003,  1996, 16934,  1010,  2217,  1011,  2011,
         1011,  2217,  1010,  2030, 16367, 16934,  3347,  5436,  1996,  2087,
         6179,  1029,   102])"
380,1,"['bar plot', 'explanatory variable', 'response', 'plot', 'explanatory', 'variable']", Considering categorical data,seg_15,"the stacked bar plot is most useful when it’s reasonable to assign one variable as the explanatory variable and the other variable as the response, since we are effectively grouping by one variable first and then breaking it down by the others.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1996, 16934,  3347,  5436,  2003,  2087,  6179,  2043,  2009,
         1521,  1055,  9608,  2000, 23911,  2028,  8023,  2004,  1996,  4654,
        24759,  5162,  7062,  8023,  1998,  1996,  2060,  8023,  2004,  1996,
         3433,  1010,  2144,  2057,  2024,  6464, 19765,  2011,  2028,  8023,
         2034,  1998,  2059,  4911,  2009,  2091,  2011,  1996,  2500,  1012,
          102])"
381,1,"['cases', 'association', 'bar plots', 'response variable', 'response', 'explanatory', 'plots', 'variables', 'combinations', 'plot', 'variable']", Considering categorical data,seg_15,"side-by-side bar plots are more agnostic in their display about which variable, if any, represents the explanatory and which the response variable. it is also easy to discern the number of cases in of the six different group combinations. however, one downside is that it tends to require more horizontal space; the narrowness of figure 2.23(b) makes the plot feel a bit cramped. additionally, when two groups are of very different sizes, as we see in the own group relative to either of the other two groups, it is difficult to discern if there is an association between the variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2217,  1011,  2011,  1011,  2217,  3347, 14811,  2024,  2062,
        12943, 28199,  1999,  2037,  4653,  2055,  2029,  8023,  1010,  2065,
         2151,  1010,  5836,  1996,  4654, 24759,  5162,  7062,  1998,  2029,
         1996,  3433,  8023,  1012,  2009,  2003,  2036,  3733,  2000,  5860,
        11795,  1996,  2193,  1997,  3572,  1999,  1997,  1996,  2416,  2367,
         2177, 14930,  1012,  2174,  1010,  2028, 12482,  5178,  2003,  2008,
         2009, 12102,  2000,  5478,  2062,  9876,  2686,  1025,  1996,  4867,
         2791,  1997,  3275,  1016,  1012,  2603,  1006,  1038,  1007,  3084,
         1996,  5436,  2514,  1037,  2978, 22766,  1012,  5678,  1010,  2043,
         2048,  2967,  2024,  1997,  2200,  2367, 10826,  1010,  2004,  2057,
         2156,  1999,  1996,  2219,  2177,  5816,  2000,  2593,  1997,  1996,
         2060,  2048,  2967,  1010,  2009,  2003,  3697,  2000,  5860, 11795,
         2065,  2045,  2003,  2019,  2523,  2090,  1996, 10857,  1012,   102])"
382,1,"['bar plot', 'cases', 'association', 'observations', 'standardized', 'plot', 'variable']", Considering categorical data,seg_15,"the standardized stacked bar plot is helpful if the primary variable in the stacked bar plot is relatively imbalanced, e.g. the own category has only a third of the observations in the mortgage category, making the simple stacked bar plot less useful for checking for an association. the major downside of the standardized version is that we lose all sense of how many cases each of the bars represents.",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1996, 16367, 16934,  3347,  5436,  2003, 14044,  2065,  1996,
         3078,  8023,  1999,  1996, 16934,  3347,  5436,  2003,  4659, 10047,
        26657,  2094,  1010,  1041,  1012,  1043,  1012,  1996,  2219,  4696,
         2038,  2069,  1037,  2353,  1997,  1996,  9420,  1999,  1996, 14344,
         4696,  1010,  2437,  1996,  3722, 16934,  3347,  5436,  2625,  6179,
         2005,  9361,  2005,  2019,  2523,  1012,  1996,  2350, 12482,  5178,
         1997,  1996, 16367,  2544,  2003,  2008,  2057,  4558,  2035,  3168,
         1997,  2129,  2116,  3572,  2169,  1997,  1996,  6963,  5836,  1012,
          102])"
383,1,"['plots', 'mosaic plots']", Considering categorical data,seg_15,2.2.4 mosaic plots,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1016,  1012,  1016,  1012,  1018, 16061, 14811,   102])"
384,1,"['bar plot', 'variable', 'standardized', 'tables', 'contingency tables', 'plot', 'mosaic plot']", Considering categorical data,seg_15,a mosaic plot is a visualization technique suitable for contingency tables that resembles a standardized stacked bar plot with the benefit that we still see the relative group sizes of the primary variable as well.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1037, 16061,  5436,  2003,  1037,  5107,  3989,  6028,  7218,
         2005,  9530,  3436, 11916,  7251,  2008, 12950,  1037, 16367, 16934,
         3347,  5436,  2007,  1996,  5770,  2008,  2057,  2145,  2156,  1996,
         5816,  2177, 10826,  1997,  1996,  3078,  8023,  2004,  2092,  1012,
          102])"
385,1,"['categories', 'cases', 'mosaic plots', 'variable', 'level', 'plots', 'plot', 'mosaic plot']", Considering categorical data,seg_15,"to get started in creating our first mosaic plot, we’ll break a square into columns for each category of the homeownership variable, with the result shown in figure 2.24(a). each column represents a level of homeownership, and the column widths correspond to the proportion of loans in each of those categories. for instance, there are fewer loans where the borrower is an owner than where the borrower has a mortgage. in general, mosaic plots use box areas to represent the number of cases in each category.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2000,  2131,  2318,  1999,  4526,  2256,  2034, 16061,  5436,
         1010,  2057,  1521,  2222,  3338,  1037,  2675,  2046,  7753,  2005,
         2169,  4696,  1997,  1996,  2188, 12384,  2545,  5605,  8023,  1010,
         2007,  1996,  2765,  3491,  1999,  3275,  1016,  1012,  2484,  1006,
         1037,  1007,  1012,  2169,  5930,  5836,  1037,  2504,  1997,  2188,
        12384,  2545,  5605,  1010,  1998,  1996,  5930,  9381,  2015, 17254,
         2000,  1996, 10817,  1997, 10940,  1999,  2169,  1997,  2216,  7236,
         1012,  2005,  6013,  1010,  2045,  2024,  8491, 10940,  2073,  1996,
        17781,  2121,  2003,  2019,  3954,  2084,  2073,  1996, 17781,  2121,
         2038,  1037, 14344,  1012,  1999,  2236,  1010, 16061, 14811,  2224,
         3482,  2752,  2000,  5050,  1996,  2193,  1997,  3572,  1999,  2169,
         4696,  1012,   102])"
386,1,"['plot', 'mosaic plot']", Considering categorical data,seg_15,figure 2.24: (a) the one-variable mosaic plot for homeownership. (b) two-variable mosaic plot for both homeownership and app type.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2484,  1024,  1006,  1037,  1007,  1996,
         2028,  1011,  8023, 16061,  5436,  2005,  2188, 12384,  2545,  5605,
         1012,  1006,  1038,  1007,  2048,  1011,  8023, 16061,  5436,  2005,
         2119,  2188, 12384,  2545,  5605,  1998, 10439,  2828,  1012,   102])"
387,1,"['associated', 'variable', 'jointly', 'variables', 'joint', 'plot', 'mosaic plot']", Considering categorical data,seg_15,"to create a completed mosaic plot, the single-variable mosaic plot is further divided into pieces in figure 2.24(b) using the app type variable. each column is split proportional to the number of loans from individual and joint borrowers. for example, the second column represents loans where the borrower has a mortgage, and it was divided into individual loans (upper) and joint loans (lower). as another example, the bottom segment of the third column represents loans where the borrower owns their home and applied jointly, while the upper segment of this column represents borrowers who are homeowners and filed individually. we can again use this plot to see that the homeownership and app type variables are associated, since some columns are divided in different",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2000,  3443,  1037,  2949, 16061,  5436,  1010,  1996,  2309,
         1011,  8023, 16061,  5436,  2003,  2582,  4055,  2046,  4109,  1999,
         3275,  1016,  1012,  2484,  1006,  1038,  1007,  2478,  1996, 10439,
         2828,  8023,  1012,  2169,  5930,  2003,  3975, 14267,  2000,  1996,
         2193,  1997, 10940,  2013,  3265,  1998,  4101, 17781,  2545,  1012,
         2005,  2742,  1010,  1996,  2117,  5930,  5836, 10940,  2073,  1996,
        17781,  2121,  2038,  1037, 14344,  1010,  1998,  2009,  2001,  4055,
         2046,  3265, 10940,  1006,  3356,  1007,  1998,  4101, 10940,  1006,
         2896,  1007,  1012,  2004,  2178,  2742,  1010,  1996,  3953,  6903,
         1997,  1996,  2353,  5930,  5836, 10940,  2073,  1996, 17781,  2121,
         8617,  2037,  2188,  1998,  4162, 10776,  1010,  2096,  1996,  3356,
         6903,  1997,  2023,  5930,  5836, 17781,  2545,  2040,  2024,  2188,
        12384,  2545,  1998,  6406, 14258,  1012,  2057,  2064,  2153,  2224,
         2023,  5436,  2000,  2156,  2008,  1996,  2188, 12384,  2545,  5605,
         1998, 10439,  2828, 10857,  2024,  3378,  1010,  2144,  2070,  7753,
         2024,  4055,  1999,  2367,   102])"
388,1,"['bar plot', 'association', 'locations', 'standardized', 'plot']", Considering categorical data,seg_15,"vertical locations than others, which was the same technique used for checking an association in the standardized stacked bar plot.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 1., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  7471,  5269,  2084,  2500,  1010,  2029,  2001,  1996,  2168,
         6028,  2109,  2005,  9361,  2019,  2523,  1999,  1996, 16367, 16934,
         3347,  5436,  1012,   102])"
389,1,"['bar plots', 'explanatory variable', 'response', 'level', 'explanatory', 'plots', 'mosaic plot', 'variables', 'plot', 'variable']", Considering categorical data,seg_15,"in figure 2.24, we chose to first split by the homeowner status of the borrower. however, we could have instead first split by the application type, as in figure 2.25. like with the bar plots, it’s common to use the explanatory variable to represent the first split in a mosaic plot, and then for the response to break up each level of the explanatory variable, if these labels are reasonable to attach to the variables under consideration.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1999,  3275,  1016,  1012,  2484,  1010,  2057,  4900,  2000,
         2034,  3975,  2011,  1996,  2188, 12384,  2121,  3570,  1997,  1996,
        17781,  2121,  1012,  2174,  1010,  2057,  2071,  2031,  2612,  2034,
         3975,  2011,  1996,  4646,  2828,  1010,  2004,  1999,  3275,  1016,
         1012,  2423,  1012,  2066,  2007,  1996,  3347, 14811,  1010,  2009,
         1521,  1055,  2691,  2000,  2224,  1996,  4654, 24759,  5162,  7062,
         8023,  2000,  5050,  1996,  2034,  3975,  1999,  1037, 16061,  5436,
         1010,  1998,  2059,  2005,  1996,  3433,  2000,  3338,  2039,  2169,
         2504,  1997,  1996,  4654, 24759,  5162,  7062,  8023,  1010,  2065,
         2122, 10873,  2024,  9608,  2000, 22476,  2000,  1996, 10857,  2104,
         9584,  1012,   102])"
390,1,"['variable', 'plot', 'joint', 'mosaic plot']", Considering categorical data,seg_15,figure 2.25: mosaic plot where loans are grouped by the homeownership variable after they’ve been divided into the individual and joint application types.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2423,  1024, 16061,  5436,  2073, 10940,
         2024, 15131,  2011,  1996,  2188, 12384,  2545,  5605,  8023,  2044,
         2027,  1521,  2310,  2042,  4055,  2046,  1996,  3265,  1998,  4101,
         4646,  4127,  1012,   102])"
391,1,"['pie chart', 'chart']", Considering categorical data,seg_15,2.2.5 the only pie chart you will see in this book,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1016,  1012,  1016,  1012,  1019,  1996,  2069, 11345,  3673,
         2017,  2097,  2156,  1999,  2023,  2338,   102])"
392,1,"['bar plot', 'cases', 'bar plots', 'set', 'pie charts', 'information', 'pie chart', 'plots', 'chart', 'charts', 'plot']", Considering categorical data,seg_15,"a pie chart is shown in figure 2.26 alongside a bar plot representing the same information. pie charts can be useful for giving a high-level overview to show how a set of cases break down. however, it is also difficult to decipher details in a pie chart. for example, it takes a couple seconds longer to recognize that there are more loans where the borrower has a mortgage than rent when looking at the pie chart, while this detail is very obvious in the bar plot. while pie charts can be useful, we prefer bar plots for their ease in comparing groups.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1037, 11345,  3673,  2003,  3491,  1999,  3275,  1016,  1012,
         2656,  4077,  1037,  3347,  5436,  5052,  1996,  2168,  2592,  1012,
        11345,  6093,  2064,  2022,  6179,  2005,  3228,  1037,  2152,  1011,
         2504, 19184,  2000,  2265,  2129,  1037,  2275,  1997,  3572,  3338,
         2091,  1012,  2174,  1010,  2009,  2003,  2036,  3697,  2000, 11703,
        11514,  5886,  4751,  1999,  1037, 11345,  3673,  1012,  2005,  2742,
         1010,  2009,  3138,  1037,  3232,  3823,  2936,  2000,  6807,  2008,
         2045,  2024,  2062, 10940,  2073,  1996, 17781,  2121,  2038,  1037,
        14344,  2084,  9278,  2043,  2559,  2012,  1996, 11345,  3673,  1010,
         2096,  2023,  6987,  2003,  2200,  5793,  1999,  1996,  3347,  5436,
         1012,  2096, 11345,  6093,  2064,  2022,  6179,  1010,  2057,  9544,
         3347, 14811,  2005,  2037,  7496,  1999, 13599,  2967,  1012,   102])"
393,0,[], Considering categorical data,seg_15,4000 rent 3000 yc neuq re 2000 f own 1000 mortgage 0 rent mortgage own homeownership,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101, 20143,  9278, 11910,  1061,  2278, 11265,  2226,  4160,  2128,
         2456,  1042,  2219,  6694, 14344,  1014,  9278, 14344,  2219,  2188,
        12384,  2545,  5605,   102])"
394,1,"['bar plot', 'pie chart', 'chart', 'plot']", Considering categorical data,seg_15,figure 2.26: a pie chart and bar plot of homeownership.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2656,  1024,  1037, 11345,  3673,  1998,
         3347,  5436,  1997,  2188, 12384,  2545,  5605,  1012,   102])"
395,1,"['numerical', 'data']", Considering categorical data,seg_15,2.2.6 comparing numerical data across groups,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1016,  1012,  1016,  1012,  1020, 13599, 15973,  2951,  2408,
         2967,   102])"
396,1,"['box plots', 'histograms', 'hollow histograms', 'plots', 'plot', 'numerical', 'data']", Considering categorical data,seg_15,some of the more interesting investigations can be considered by examining numerical data across groups. the methods required here aren’t really new: all that’s required is to make a numerical plot for each group in the same graph. here two convenient methods are introduced: side-by-side box plots and hollow histograms.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2070,  1997,  1996,  2062,  5875,  9751,  2064,  2022,  2641,
         2011, 12843, 15973,  2951,  2408,  2967,  1012,  1996,  4725,  3223,
         2182,  4995,  1521,  1056,  2428,  2047,  1024,  2035,  2008,  1521,
         1055,  3223,  2003,  2000,  2191,  1037, 15973,  5436,  2005,  2169,
         2177,  1999,  1996,  2168, 10629,  1012,  2182,  2048, 14057,  4725,
         2024,  3107,  1024,  2217,  1011,  2011,  1011,  2217,  3482, 14811,
         1998,  8892,  2010,  3406, 13113,  2015,  1012,   102])"
397,1,"['data set', 'set', 'population', 'county', 'observational data', 'data', 'median']", Considering categorical data,seg_15,"we will take a look again at the county data set and compare the median household income for counties that gained population from 2010 to 2017 versus counties that had no gain. while we might like to make a causal connection here, remember that these are observational data and so such an interpretation would be, at best, half-baked.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2057,  2097,  2202,  1037,  2298,  2153,  2012,  1996,  2221,
         2951,  2275,  1998, 12826,  1996,  3991,  4398,  3318,  2005,  5721,
         2008,  4227,  2313,  2013,  2230,  2000,  2418,  6431,  5721,  2008,
         2018,  2053,  5114,  1012,  2096,  2057,  2453,  2066,  2000,  2191,
         1037, 28102,  4434,  2182,  1010,  3342,  2008,  2122,  2024,  8089,
         2389,  2951,  1998,  2061,  2107,  2019,  7613,  2052,  2022,  1010,
         2012,  2190,  1010,  2431,  1011, 17776,  1012,   102])"
398,1,"['loss', 'random sample', 'sample', 'random', 'population', 'data', 'median']", Considering categorical data,seg_15,"there were 1,454 counties where the population increased from 2010 to 2017, and there were 1,672 counties with no gain (all but one were a loss). a random sample of 100 counties from the first group and 50 from the second group are shown in figure 2.27 to give a better sense of some of the raw median income data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([ 101, 2045, 2020, 1015, 1010, 3429, 2549, 5721, 2073, 1996, 2313, 3445,
        2013, 2230, 2000, 2418, 1010, 1998, 2045, 2020, 1015, 1010, 6163, 2475,
        5721, 2007, 2053, 5114, 1006, 2035, 2021, 2028, 2020, 1037, 3279, 1007,
        1012, 1037, 6721, 7099, 1997, 2531, 5721, 2013, 1996, 2034, 2177, 1998,
        2753, 2013, 1996, 2117, 2177, 2024, 3491, 1999, 3275, 1016, 1012, 2676,
        2000, 2507, 1037, 2488, 3168, 1997, 2070, 1997, 1996, 6315, 3991, 3318,
        2951, 1012,  102])"
399,0,[], Considering categorical data,seg_15,"median income for 150 counties, in $1000s",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([ 101, 3991, 3318, 2005, 5018, 5721, 1010, 1999, 1002, 6694, 2015,  102])"
400,1,['population'], Considering categorical data,seg_15,population gain no population gain 38.2 43.6 42.2 61.5 51.1 45.7 48.3 60.3 50.7 44.6 51.8 40.7 48.1 56.4 41.9 39.3 40.4 40.3 40.6 63.3 52.1 60.3 49.8 51.7 57 47.2 45.9 51.1 34.1 45.5 52.8 49.1 51 42.3 41.5 46.1 80.8 46.3 82.2 43.6 39.7 49.4 44.9 51.7 46.4 75.2 40.6 46.3 62.4 44.1 51.3 29.1 51.8 50.5 51.9 34.7 54 42.9 52.2 45.1 27 30.9 34.9 61 51.4 56.5 62 46 46.4 40.7 51.8 61.1 53.8 57.6 69.2 48.4 40.5 48.6 43.4 34.7 45.7 53.1 54.6 55 46.4 39.9 56.7 33.1 21 37 63 49.1 57.2 44.1 50 38.9 52 31.9 45.7 46.6 46.5 38.9 50.9 56 34.6 56.3 38.7 45.7 74.2 63 49.6 53.7 77.5 60 56.2 43 21.7 63.2 47.6 55.9 39.1 57.8 42.6 44.5 34.5 48.9 50.4 49 45.6 39 38.8 37.1 50.9 42.1 43.2 57.2 44.7 71.7 35.3 100.2 35.4 41.3 33.6 42.6 55.5 38.6 52.7 63 43.4 56.5,tensor(1),"tensor([0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([ 101, 2313, 5114, 2053, 2313, 5114, 4229, 1012, 1016, 4724, 1012, 1020,
        4413, 1012, 1016, 6079, 1012, 1019, 4868, 1012, 1015, 3429, 1012, 1021,
        4466, 1012, 1017, 3438, 1012, 1017, 2753, 1012, 1021, 4008, 1012, 1020,
        4868, 1012, 1022, 2871, 1012, 1021, 4466, 1012, 1015, 5179, 1012, 1018,
        4601, 1012, 1023, 4464, 1012, 1017, 2871, 1012, 1018, 2871, 1012, 1017,
        2871, 1012, 1020, 6191, 1012, 1017, 4720, 1012, 1015, 3438, 1012, 1017,
        4749, 1012, 1022, 4868, 1012, 1021, 5401, 4700, 1012, 1016, 3429, 1012,
        1023, 4868, 1012, 1015, 4090, 1012, 1015, 3429, 1012, 1019, 4720, 1012,
        1022, 4749, 1012, 1015, 4868, 4413, 1012, 1017, 4601, 1012, 1019, 4805,
        1012, 1015, 3770, 1012, 1022, 4805, 1012, 1017, 6445, 1012, 1016, 4724,
        1012, 1020, 4464, 1012, 1021, 4749, 1012, 1018, 4008, 1012, 1023, 4868,
        1012, 1021, 4805, 1012, 1018, 4293, 1012, 1016, 2871, 1012, 1020, 4805,
        1012, 1017, 5786, 1012, 1018, 4008, 1012, 1015, 4868, 1012, 1017, 2756,
        1012, 1015, 4868, 1012, 1022, 2753, 1012, 1019, 4868, 1012, 1023, 4090,
        1012, 1021, 5139, 4413, 1012, 1023, 4720, 1012, 1016, 3429, 1012, 1015,
        2676, 2382, 1012, 1023, 4090, 1012, 1023, 6079, 4868, 1012, 1018, 5179,
        1012, 1019, 5786, 4805, 4805, 1012, 1018, 2871, 1012, 1021, 4868, 1012,
        1022, 6079, 1012, 1015, 5187, 1012, 1022, 5401, 1012, 1020, 6353, 1012,
        1016, 4466, 1012, 1018, 2871, 1012, 1019, 4466, 1012, 1020, 4724, 1012,
        1018, 4090, 1012, 1021, 3429, 1012, 1021, 5187, 1012, 1015, 5139, 1012,
        1020, 4583, 4805, 1012, 1018, 4464, 1012, 1023, 5179, 1012, 1021, 3943,
        1012, 1015, 2538, 4261, 6191, 4749, 1012, 1015, 5401, 1012, 1016, 4008,
        1012, 1015, 2753, 4229, 1012, 1023, 4720, 2861, 1012, 1023, 3429, 1012,
        1021, 4805, 1012, 1020, 4805, 1012, 1019, 4229, 1012, 1023, 2753, 1012,
        1023, 5179, 4090, 1012, 1020, 5179, 1012, 1017, 4229, 1012, 1021, 3429,
        1012, 1021, 6356, 1012, 1016, 6191, 4749, 1012, 1020, 5187, 1012, 1021,
        6255, 1012, 1019, 3438, 5179, 1012, 1016, 4724, 2538, 1012, 1021, 6191,
        1012, 1016, 4700, 1012, 1020, 4583, 1012, 1023, 4464, 1012, 1015, 5401,
        1012, 1022, 4413, 1012, 1020, 4008, 1012, 1019, 4090, 1012, 1019, 4466,
        1012, 1023, 2753, 1012, 1018, 4749, 3429, 1012, 1020, 4464, 4229, 1012,
        1022, 4261, 1012, 1015, 2753, 1012, 1023, 4413, 1012, 1015, 4724, 1012,
        1016, 5401, 1012, 1016, 4008, 1012, 1021, 6390, 1012, 1021, 3486, 1012,
        1017, 2531, 1012, 1016, 3486, 1012, 1018, 4601, 1012, 1017, 3943, 1012,
        1020, 4413, 1012, 1020, 4583, 1012, 1019, 4229, 1012, 1020, 4720, 1012,
        1021, 6191, 4724, 1012, 1018, 5179, 1012, 1019,  102])"
401,1,"['table', 'random sample', 'sample', 'random', 'population', 'median']", Considering categorical data,seg_15,"figure 2.27: in this table, median household income (in $1000s) from a random sample of 100 counties that had population gains are shown on the left. median incomes from a random sample of 50 counties that had no population gain are shown on the right.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2676,  1024,  1999,  2023,  2795,  1010,
         3991,  4398,  3318,  1006,  1999,  1002,  6694,  2015,  1007,  2013,
         1037,  6721,  7099,  1997,  2531,  5721,  2008,  2018,  2313, 12154,
         2024,  3491,  2006,  1996,  2187,  1012,  3991, 29373,  2013,  1037,
         6721,  7099,  1997,  2753,  5721,  2008,  2018,  2053,  2313,  5114,
         2024,  3491,  2006,  1996,  2157,  1012,   102])"
402,1,"['median', 'population']", Considering categorical data,seg_15,$20k gain no gain $20k $40k $60k $80k $100k change in population median household income,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([ 101, 1002, 2322, 2243, 5114, 2053, 5114, 1002, 2322, 2243, 1002, 2871,
        2243, 1002, 3438, 2243, 1002, 3770, 2243, 1002, 2531, 2243, 2689, 1999,
        2313, 3991, 4398, 3318,  102])"
403,1,"['loss', 'histograms', 'hollow histograms', 'box plot', 'population', 'plot']", Considering categorical data,seg_15,"figure 2.28: side-by-side box plot (left panel) and hollow histograms (right panel) for med hh income, where the counties are split by whether there was a population gain or loss.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  3275,  1016,  1012,  2654,  1024,  2217,  1011,  2011,  1011,
         2217,  3482,  5436,  1006,  2187,  5997,  1007,  1998,  8892,  2010,
         3406, 13113,  2015,  1006,  2157,  5997,  1007,  2005, 19960,  1044,
         2232,  3318,  1010,  2073,  1996,  5721,  2024,  3975,  2011,  3251,
         2045,  2001,  1037,  2313,  5114,  2030,  3279,  1012,   102])"
404,1,"['box plots', 'plotting', 'box plot', 'plots', 'plot']", Considering categorical data,seg_15,"the side-by-side box plot is a traditional tool for comparing across groups. an example is shown in the left panel of figure 2.28, where there are two box plots, one for each group, placed into one plotting window and drawn on the same scale.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  1996,  2217,  1011,  2011,  1011,  2217,  3482,  5436,  2003,
         1037,  3151,  6994,  2005, 13599,  2408,  2967,  1012,  2019,  2742,
         2003,  3491,  1999,  1996,  2187,  5997,  1997,  3275,  1016,  1012,
         2654,  1010,  2073,  2045,  2024,  2048,  3482, 14811,  1010,  2028,
         2005,  2169,  2177,  1010,  2872,  2046,  2028, 20699,  3332,  1998,
         4567,  2006,  1996,  2168,  4094,  1012,   102])"
405,1,"['histograms', 'hollow histograms', 'plotting', 'method', 'plot', 'numerical', 'data']", Considering categorical data,seg_15,"another useful plotting method uses hollow histograms to compare numerical data across groups. these are just the outlines of histograms of each group put on the same plot, as shown in the right panel of figure 2.28.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2178,  6179, 20699,  4118,  3594,  8892,  2010,  3406, 13113,
         2015,  2000, 12826, 15973,  2951,  2408,  2967,  1012,  2122,  2024,
         2074,  1996, 22106,  1997,  2010,  3406, 13113,  2015,  1997,  2169,
         2177,  2404,  2006,  1996,  2168,  5436,  1010,  2004,  3491,  1999,
         1996,  2157,  5997,  1997,  3275,  1016,  1012,  2654,  1012,   102])"
406,1,"['variability', 'plots']", Considering categorical data,seg_15,use the plots in figure 2.28 to compare the incomes for counties across the two groups. what do you notice about the approximate center of each group? what do you notice about the variability between groups? is the shape relatively consistent between groups? how many prominent modes are there for each group?20,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  2224,  1996, 14811,  1999,  3275,  1016,  1012,  2654,  2000,
        12826,  1996, 29373,  2005,  5721,  2408,  1996,  2048,  2967,  1012,
         2054,  2079,  2017,  5060,  2055,  1996, 15796,  2415,  1997,  2169,
         2177,  1029,  2054,  2079,  2017,  5060,  2055,  1996, 28436,  2090,
         2967,  1029,  2003,  1996,  4338,  4659,  8335,  2090,  2967,  1029,
         2129,  2116,  4069, 11583,  2024,  2045,  2005,  2169,  2177,  1029,
         2322,   102])"
407,1,['plot'], Considering categorical data,seg_15,what components of each plot in figure 2.28 do you find most useful?21,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([ 101, 2054, 6177, 1997, 2169, 5436, 1999, 3275, 1016, 1012, 2654, 2079,
        2017, 2424, 2087, 6179, 1029, 2538,  102])"
408,0,[], Considering categorical data,seg_15,prematurity trauma cardiovascular neuromuscular respiratory respiratory genetic/metabolic,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101, 26563,  4017, 25137, 12603, 22935, 11265, 10976,  7606, 15431,
        16464, 16464,  7403,  1013, 21453,   102])"
409,1,"['relative frequency', 'frequency']", Considering categorical data,seg_15,genetic/metabolic immunocompromised cardiovascular gastrointestinal 0.00 0.10 0.20 0.30 prematurity relative frequency,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  7403,  1013, 21453, 10047, 23041, 24163,  8737, 21716,  5084,
        22935,  3806, 13181, 18447, 19126,  1014,  1012,  4002,  1014,  1012,
         2184,  1014,  1012,  2322,  1014,  1012,  2382, 26563,  4017, 25137,
         5816,  6075,   102])"
410,0,[], Considering categorical data,seg_15,conservative moderate liberal support not support not sure,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([ 101, 4603, 8777, 4314, 2490, 2025, 2490, 2025, 2469,  102])"
411,0,[], Considering categorical data,seg_15,democrat republican indep / other raise taxes on the rich raise taxes on the poor not sure,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6195,  4937, 27203,  2951])","tensor([  101,  7672,  3951, 27427, 13699,  1013,  2060,  5333,  7773,  2006,
         1996,  4138,  5333,  7773,  2006,  1996,  3532,  2025,  2469,   102])"
412,0,[], Case study malaria vaccine,seg_17,"suppose your professor splits the students in class into two groups: students on the left and students on the right. if p̂l and p̂r represent the proportion of students who own an apple product on the left and right, respectively, would you be surprised if p̂l did not exactly equal p̂r?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  6814,  2115,  2934, 19584,  1996,  2493,  1999,  2465,  2046,
         2048,  2967,  1024,  2493,  2006,  1996,  2187,  1998,  2493,  2006,
         1996,  2157,  1012,  2065, 20228,  1998, 10975,  5050,  1996, 10817,
         1997,  2493,  2040,  2219,  2019,  6207,  4031,  2006,  1996,  2187,
         1998,  2157,  1010,  4414,  1010,  2052,  2017,  2022,  4527,  2065,
        20228,  2106,  2025,  3599,  5020, 10975,  1029,   102])"
413,0,[], Case study malaria vaccine,seg_17,"while the proportions would probably be close to each other, it would be unusual for them to be exactly the same. we would probably observe a small difference due to chance.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2096,  1996, 19173,  2052,  2763,  2022,  2485,  2000,  2169,
         2060,  1010,  2009,  2052,  2022,  5866,  2005,  2068,  2000,  2022,
         3599,  1996,  2168,  1012,  2057,  2052,  2763, 11949,  1037,  2235,
         4489,  2349,  2000,  3382,  1012,   102])"
414,0,[], Case study malaria vaccine,seg_17,"if we don’t think the side of the room a person sits on in class is related to whether the person owns an apple product, what assumption are we making about the relationship between these two variables?25",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2065,  2057,  2123,  1521,  1056,  2228,  1996,  2217,  1997,
         1996,  2282,  1037,  2711,  7719,  2006,  1999,  2465,  2003,  3141,
         2000,  3251,  1996,  2711,  8617,  2019,  6207,  4031,  1010,  2054,
        11213,  2024,  2057,  2437,  2055,  1996,  3276,  2090,  2122,  2048,
        10857,  1029,  2423,   102])"
415,1,"['variability', 'data']", Case study malaria vaccine,seg_17,2.3.1 variability within data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1016,  1012,  1017,  1012,  1015, 28436,  2306,  2951,   102])"
416,1,"['control group', 'treatment', 'control', 'experimental', 'results', 'experiment']", Case study malaria vaccine,seg_17,"we consider a study on a new malaria vaccine called pfspz. in this study, volunteer patients were randomized into one of two experiment groups: 14 patients received an experimental vaccine or 6 patients received a placebo vaccine. nineteen weeks later, all 20 patients were exposed to a drug-sensitive malaria virus strain; the motivation of using a drug-sensitive strain of virus here is for ethical considerations, allowing any infections to be treated effectively. the results are summarized in figure 2.29, where 9 of the 14 treatment patients remained free of signs of infection while all of the 6 patients in the control group patients showed some baseline signs of infection.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2057,  5136,  1037,  2817,  2006,  1037,  2047, 19132, 17404,
         2170,  1052, 10343,  2361,  2480,  1012,  1999,  2023,  2817,  1010,
         6951,  5022,  2020,  6721,  3550,  2046,  2028,  1997,  2048,  7551,
         2967,  1024,  2403,  5022,  2363,  2019,  6388, 17404,  2030,  1020,
         5022,  2363,  1037,  2173,  5092, 17404,  1012, 11977,  3134,  2101,
         1010,  2035,  2322,  5022,  2020,  6086,  2000,  1037,  4319,  1011,
         7591, 19132,  7865, 10178,  1025,  1996, 14354,  1997,  2478,  1037,
         4319,  1011,  7591, 10178,  1997,  7865,  2182,  2003,  2005, 12962,
        16852,  1010,  4352,  2151, 15245,  2000,  2022,  5845,  6464,  1012,
         1996,  3463,  2024, 22539,  1999,  3275,  1016,  1012,  2756,  1010,
         2073,  1023,  1997,  1996,  2403,  3949,  5022,  2815,  2489,  1997,
         5751,  1997,  8985,  2096,  2035,  1997,  1996,  1020,  5022,  1999,
         1996,  2491,  2177,  5022,  3662,  2070, 26163,  5751,  1997,  8985,
         1012,   102])"
417,1,['treatment'], Case study malaria vaccine,seg_17,outcome infection no infection total vaccine 5 9 14 treatment placebo 6 0 6,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  9560,  8985,  2053,  8985,  2561, 17404,  1019,  1023,  2403,
         3949,  2173,  5092,  1020,  1014,  1020,   102])"
418,1,"['results', 'experiment']", Case study malaria vaccine,seg_17,figure 2.29: summary results for the malaria vaccine experiment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  3275,  1016,  1012,  2756,  1024, 12654,  3463,  2005,  1996,
        19132, 17404,  7551,  1012,   102])"
419,1,"['observational study', 'experiment']", Case study malaria vaccine,seg_17,is this an observational study or an experiment? what implications does the study type have on what can be inferred from the results?26,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2003,  2023,  2019,  8089,  2389,  2817,  2030,  2019,  7551,
         1029,  2054, 13494,  2515,  1996,  2817,  2828,  2031,  2006,  2054,
         2064,  2022,  1999,  7512,  5596,  2013,  1996,  3463,  1029,  2656,
          102])"
420,1,['sample'], Case study malaria vaccine,seg_17,"in this study, a smaller proportion of patients who received the vaccine showed signs of an infection (35.7% versus 100%). however, the sample is very small, and it is unclear whether the difference provides convincing evidence that the vaccine is effective.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1999,  2023,  2817,  1010,  1037,  3760, 10817,  1997,  5022,
         2040,  2363,  1996, 17404,  3662,  5751,  1997,  2019,  8985,  1006,
         3486,  1012,  1021,  1003,  6431,  2531,  1003,  1007,  1012,  2174,
         1010,  1996,  7099,  2003,  2200,  2235,  1010,  1998,  2009,  2003,
        10599,  3251,  1996,  4489,  3640, 13359,  3350,  2008,  1996, 17404,
         2003,  4621,  1012,   102])"
421,1,"['rates', 'data']", Case study malaria vaccine,seg_17,"data scientists are sometimes called upon to evaluate the strength of evidence. when looking at the rates of infection for patients in the two groups in this study, what comes to mind as we try to determine whether the data show convincing evidence of a real difference?",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2951,  6529,  2024,  2823,  2170,  2588,  2000, 16157,  1996,
         3997,  1997,  3350,  1012,  2043,  2559,  2012,  1996,  6165,  1997,
         8985,  2005,  5022,  1999,  1996,  2048,  2967,  1999,  2023,  2817,
         1010,  2054,  3310,  2000,  2568,  2004,  2057,  3046,  2000,  5646,
         3251,  1996,  2951,  2265, 13359,  3350,  1997,  1037,  2613,  4489,
         1029,   102])"
422,1,"['control group', 'treatment group', 'treatment', 'control', 'sample', 'random', 'samples', 'rates', 'data', 'independent']", Case study malaria vaccine,seg_17,"the observed infection rates (35.7% for the treatment group versus 100% for the control group) suggest the vaccine may be effective. however, we cannot be sure if the observed difference represents the vaccine’s efficacy or is just from random chance. generally there is a little bit of fluctuation in sample data, and we wouldn’t expect the sample proportions to be exactly equal, even if the truth was that the infection rates were independent of getting the vaccine. additionally, with such small samples, perhaps it’s common to observe such large differences when we randomly split a group due to chance alone!",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1996,  5159,  8985,  6165,  1006,  3486,  1012,  1021,  1003,
         2005,  1996,  3949,  2177,  6431,  2531,  1003,  2005,  1996,  2491,
         2177,  1007,  6592,  1996, 17404,  2089,  2022,  4621,  1012,  2174,
         1010,  2057,  3685,  2022,  2469,  2065,  1996,  5159,  4489,  5836,
         1996, 17404,  1521,  1055, 21150,  2030,  2003,  2074,  2013,  6721,
         3382,  1012,  3227,  2045,  2003,  1037,  2210,  2978,  1997, 19857,
         6593, 14505,  1999,  7099,  2951,  1010,  1998,  2057,  2876,  1521,
         1056,  5987,  1996,  7099, 19173,  2000,  2022,  3599,  5020,  1010,
         2130,  2065,  1996,  3606,  2001,  2008,  1996,  8985,  6165,  2020,
         2981,  1997,  2893,  1996, 17404,  1012,  5678,  1010,  2007,  2107,
         2235,  8168,  1010,  3383,  2009,  1521,  1055,  2691,  2000, 11949,
         2107,  2312,  5966,  2043,  2057, 18154,  3975,  1037,  2177,  2349,
         2000,  3382,  2894,   999,   102])"
423,1,"['data', 'outcomes', 'sample', 'random', 'sample size', 'rates', 'variables', 'random noise']", Case study malaria vaccine,seg_17,"example 2.33 is a reminder that the observed outcomes in the data sample may not perfectly reflect the true relationships between variables since there is random noise. while the observed difference in rates of infection is large, the sample size for the study is small, making it unclear if this observed difference represents efficacy of the vaccine or whether it is simply due to chance. we label these two competing claims, h0 and ha, which are spoken as “h-nought” and “h-a”:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2742,  1016,  1012,  3943,  2003,  1037, 14764,  2008,  1996,
         5159, 13105,  1999,  1996,  2951,  7099,  2089,  2025,  6669,  8339,
         1996,  2995,  6550,  2090, 10857,  2144,  2045,  2003,  6721,  5005,
         1012,  2096,  1996,  5159,  4489,  1999,  6165,  1997,  8985,  2003,
         2312,  1010,  1996,  7099,  2946,  2005,  1996,  2817,  2003,  2235,
         1010,  2437,  2009, 10599,  2065,  2023,  5159,  4489,  5836, 21150,
         1997,  1996, 17404,  2030,  3251,  2009,  2003,  3432,  2349,  2000,
         3382,  1012,  2057,  3830,  2122,  2048,  6637,  4447,  1010,  1044,
         2692,  1998,  5292,  1010,  2029,  2024,  5287,  2004,  1523,  1044,
         1011,  2053, 18533,  1524,  1998,  1523,  1044,  1011,  1037,  1524,
         1024,   102])"
424,1,"['treatment', 'outcome', 'independence', 'model', 'variables', 'independent']", Case study malaria vaccine,seg_17,h0: independence model. the variables treatment and outcome are independent. they have,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1044,  2692,  1024,  4336,  2944,  1012,  1996, 10857,  3949,
         1998,  9560,  2024,  2981,  1012,  2027,  2031,   102])"
425,0,[], Case study malaria vaccine,seg_17,"no relationship, and the observed difference between the proportion of patients who developed an infection in the two groups, 64.3%, was due to chance.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2053,  3276,  1010,  1998,  1996,  5159,  4489,  2090,  1996,
        10817,  1997,  5022,  2040,  2764,  2019,  8985,  1999,  1996,  2048,
         2967,  1010,  4185,  1012,  1017,  1003,  1010,  2001,  2349,  2000,
         3382,  1012,   102])"
426,1,"['model', 'rates', 'variables', 'independent']", Case study malaria vaccine,seg_17,ha: alternative model. the variables are not independent. the difference in infection rates of,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  5292,  1024,  4522,  2944,  1012,  1996, 10857,  2024,  2025,
         2981,  1012,  1996,  4489,  1999,  8985,  6165,  1997,   102])"
427,1,['rate'], Case study malaria vaccine,seg_17,"64.3% was not due to chance, and vaccine affected the rate of infection.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  4185,  1012,  1017,  1003,  2001,  2025,  2349,  2000,  3382,
         1010,  1998, 17404,  5360,  1996,  3446,  1997,  8985,  1012,   102])"
428,1,"['mean', 'rate', 'independence', 'model', 'rates']", Case study malaria vaccine,seg_17,"what would it mean if the independence model, which says the vaccine had no influence on the rate of infection, is true? it would mean 11 patients were going to develop an infection no matter which group they were randomized into, and 9 patients would not develop an infection no matter which group they were randomized into. that is, if the vaccine did not affect the rate of infection, the difference in the infection rates was due to chance alone in how the patients were randomized.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2054,  2052,  2009,  2812,  2065,  1996,  4336,  2944,  1010,
         2029,  2758,  1996, 17404,  2018,  2053,  3747,  2006,  1996,  3446,
         1997,  8985,  1010,  2003,  2995,  1029,  2009,  2052,  2812,  2340,
         5022,  2020,  2183,  2000,  4503,  2019,  8985,  2053,  3043,  2029,
         2177,  2027,  2020,  6721,  3550,  2046,  1010,  1998,  1023,  5022,
         2052,  2025,  4503,  2019,  8985,  2053,  3043,  2029,  2177,  2027,
         2020,  6721,  3550,  2046,  1012,  2008,  2003,  1010,  2065,  1996,
        17404,  2106,  2025,  7461,  1996,  3446,  1997,  8985,  1010,  1996,
         4489,  1999,  1996,  8985,  6165,  2001,  2349,  2000,  3382,  2894,
         1999,  2129,  1996,  5022,  2020,  6721,  3550,  1012,   102])"
429,1,"['model', 'rates']", Case study malaria vaccine,seg_17,"now consider the alternative model: infection rates were influenced by whether a patient received the vaccine or not. if this was true, and especially if this influence was substantial, we would expect to see some difference in the infection rates of patients in the groups.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2085,  5136,  1996,  4522,  2944,  1024,  8985,  6165,  2020,
         5105,  2011,  3251,  1037,  5776,  2363,  1996, 17404,  2030,  2025,
         1012,  2065,  2023,  2001,  2995,  1010,  1998,  2926,  2065,  2023,
         3747,  2001,  6937,  1010,  2057,  2052,  5987,  2000,  2156,  2070,
         4489,  1999,  1996,  8985,  6165,  1997,  5022,  1999,  1996,  2967,
         1012,   102])"
430,1,"['independence', 'model', 'data', 'case']", Case study malaria vaccine,seg_17,"we choose between these two competing claims by assessing if the data conflict so much with h0 that the independence model cannot be deemed reasonable. if this is the case, and the data support ha, then we will reject the notion of independence and conclude the vaccine was effective.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2057,  5454,  2090,  2122,  2048,  6637,  4447,  2011, 20077,
         2065,  1996,  2951,  4736,  2061,  2172,  2007,  1044,  2692,  2008,
         1996,  4336,  2944,  3685,  2022,  8357,  9608,  1012,  2065,  2023,
         2003,  1996,  2553,  1010,  1998,  1996,  2951,  2490,  5292,  1010,
         2059,  2057,  2097, 15454,  1996,  9366,  1997,  4336,  1998, 16519,
         1996, 17404,  2001,  4621,  1012,   102])"
431,1,['simulations'], Case study malaria vaccine,seg_17,"we’re going to implement simulations, where we will pretend we know that the malaria vaccine being tested does not work. ultimately, we want to understand if the large difference we observed is common in these simulations. if it is common, then maybe the difference we observed was purely due to chance. if it is very uncommon, then the possibility that the vaccine was helpful seems more plausible.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2057,  1521,  2128,  2183,  2000, 10408, 24710,  1010,  2073,
         2057,  2097,  9811,  2057,  2113,  2008,  1996, 19132, 17404,  2108,
         7718,  2515,  2025,  2147,  1012,  4821,  1010,  2057,  2215,  2000,
         3305,  2065,  1996,  2312,  4489,  2057,  5159,  2003,  2691,  1999,
         2122, 24710,  1012,  2065,  2009,  2003,  2691,  1010,  2059,  2672,
         1996,  4489,  2057,  5159,  2001, 11850,  2349,  2000,  3382,  1012,
         2065,  2009,  2003,  2200, 13191,  1010,  2059,  1996,  6061,  2008,
         1996, 17404,  2001, 14044,  3849,  2062, 24286,  1012,   102])"
432,1,"['simulation', 'randomization', 'independent']", Case study malaria vaccine,seg_17,"figure 2.29 shows that 11 patients developed infections and 9 did not. for our simulation, we will suppose the infections were independent of the vaccine and we were able to rewind back to when the researchers randomized the patients in the study. if we happened to randomize the patients differently, we may get a different result in this hypothetical world where the vaccine doesn’t influence the infection. let’s complete another randomization using a simulation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  3275,  1016,  1012,  2756,  3065,  2008,  2340,  5022,  2764,
        15245,  1998,  1023,  2106,  2025,  1012,  2005,  2256, 12504,  1010,
         2057,  2097,  6814,  1996, 15245,  2020,  2981,  1997,  1996, 17404,
         1998,  2057,  2020,  2583,  2000,  2128, 11101,  2067,  2000,  2043,
         1996,  6950,  6721,  3550,  1996,  5022,  1999,  1996,  2817,  1012,
         2065,  2057,  3047,  2000,  6721,  4697,  1996,  5022, 11543,  1010,
         2057,  2089,  2131,  1037,  2367,  2765,  1999,  2023, 25613,  2088,
         2073,  1996, 17404,  2987,  1521,  1056,  3747,  1996,  8985,  1012,
         2292,  1521,  1055,  3143,  2178,  6721,  3989,  2478,  1037, 12504,
         1012,   102])"
433,1,"['simulation', 'treatment', 'treatment and control groups', 'control', 'results', 'control groups']", Case study malaria vaccine,seg_17,"in this simulation, we take 20 notecards to represent the 20 patients, where we write down “infection” on 11 cards and “no infection” on 9 cards. in this hypothetical world, we believe each patient that got an infection was going to get it regardless of which group they were in, so let’s see what happens if we randomly assign the patients to the treatment and control groups again. we thoroughly shuffle the notecards and deal 14 into a vaccine pile and 6 into a placebo pile. finally, we tabulate the results, which are shown in figure 2.30.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1999,  2023, 12504,  1010,  2057,  2202,  2322,  3602, 17965,
         2000,  5050,  1996,  2322,  5022,  1010,  2073,  2057,  4339,  2091,
         1523,  8985,  1524,  2006,  2340,  5329,  1998,  1523,  2053,  8985,
         1524,  2006,  1023,  5329,  1012,  1999,  2023, 25613,  2088,  1010,
         2057,  2903,  2169,  5776,  2008,  2288,  2019,  8985,  2001,  2183,
         2000,  2131,  2009,  7539,  1997,  2029,  2177,  2027,  2020,  1999,
         1010,  2061,  2292,  1521,  1055,  2156,  2054,  6433,  2065,  2057,
        18154, 23911,  1996,  5022,  2000,  1996,  3949,  1998,  2491,  2967,
         2153,  1012,  2057, 12246, 23046,  1996,  3602, 17965,  1998,  3066,
         2403,  2046,  1037, 17404,  8632,  1998,  1020,  2046,  1037,  2173,
         5092,  8632,  1012,  2633,  1010,  2057, 21628,  9869,  1996,  3463,
         1010,  2029,  2024,  3491,  1999,  3275,  1016,  1012,  2382,  1012,
          102])"
434,1,"['treatment', 'simulated']", Case study malaria vaccine,seg_17,outcome infection no infection total treatment vaccine 7 7 14 (simulated) placebo 4 2 6 total 11 9 20,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  9560,  8985,  2053,  8985,  2561,  3949, 17404,  1021,  1021,
         2403,  1006, 23599,  1007,  2173,  5092,  1018,  1016,  1020,  2561,
         2340,  1023,  2322,   102])"
435,1,"['simulation', 'rates', 'results']", Case study malaria vaccine,seg_17,"figure 2.30: simulation results, where any difference in infection rates is purely due to chance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  3275,  1016,  1012,  2382,  1024, 12504,  3463,  1010,  2073,
         2151,  4489,  1999,  8985,  6165,  2003, 11850,  2349,  2000,  3382,
         1012,   102])"
436,1,"['rates', 'simulated']", Case study malaria vaccine,seg_17,what is the difference in infection rates between the two simulated groups in figure 2.30? how does this compare to the observed 64.3% difference in the actual data?27,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2054,  2003,  1996,  4489,  1999,  8985,  6165,  2090,  1996,
         2048, 23599,  2967,  1999,  3275,  1016,  1012,  2382,  1029,  2129,
         2515,  2023, 12826,  2000,  1996,  5159,  4185,  1012,  1017,  1003,
         4489,  1999,  1996,  5025,  2951,  1029,  2676,   102])"
437,1,['independence'], Case study malaria vaccine,seg_17,2.3.3 checking for independence,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([ 101, 1016, 1012, 1017, 1012, 1017, 9361, 2005, 4336,  102])"
438,1,"['simulation', 'independence', 'efficient', 'model']", Case study malaria vaccine,seg_17,"we computed one possible difference under the independence model in guided practice 2.34, which represents one difference due to chance. while in this first simulation, we physically dealt out notecards to represent the patients, it is more efficient to perform this simulation using a computer. repeating the simulation on a computer, we get another difference due to chance:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2057, 24806,  2028,  2825,  4489,  2104,  1996,  4336,  2944,
         1999,  8546,  3218,  1016,  1012,  4090,  1010,  2029,  5836,  2028,
         4489,  2349,  2000,  3382,  1012,  2096,  1999,  2023,  2034, 12504,
         1010,  2057,  8186,  9411,  2041,  3602, 17965,  2000,  5050,  1996,
         5022,  1010,  2009,  2003,  2062,  8114,  2000,  4685,  2023, 12504,
         2478,  1037,  3274,  1012, 15192,  1996, 12504,  2006,  1037,  3274,
         1010,  2057,  2131,  2178,  4489,  2349,  2000,  3382,  1024,   102])"
439,1,"['rate', 'simulation', 'treatment', 'simulations', 'control', 'simulated', 'distribution', 'rates', 'plot']", Case study malaria vaccine,seg_17,"and so on until we repeat the simulation enough times that we have a good idea of what represents the distribution of differences from chance alone. figure 2.31 shows a stacked plot of the differences found from 100 simulations, where each dot represents a simulated difference between the infection rates (control rate minus treatment rate).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 1., 1., 0., 1., 1., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1998,  2061,  2006,  2127,  2057,  9377,  1996, 12504,  2438,
         2335,  2008,  2057,  2031,  1037,  2204,  2801,  1997,  2054,  5836,
         1996,  4353,  1997,  5966,  2013,  3382,  2894,  1012,  3275,  1016,
         1012,  2861,  3065,  1037, 16934,  5436,  1997,  1996,  5966,  2179,
         2013,  2531, 24710,  1010,  2073,  2169, 11089,  5836,  1037, 23599,
         4489,  2090,  1996,  8985,  6165,  1006,  2491,  3446, 15718,  3949,
         3446,  1007,  1012,   102])"
440,1,"['simulated', 'independence', 'sample', 'random', 'condition', 'distribution', 'model', 'case']", Case study malaria vaccine,seg_17,"note that the distribution of these simulated differences is centered around 0. we simulated these differences assuming that the independence model was true, and under this condition, we expect the difference to be near zero with some random fluctuation, where near is pretty generous in this case since the sample sizes are so small in this study.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  3602,  2008,  1996,  4353,  1997,  2122, 23599,  5966,  2003,
         8857,  2105,  1014,  1012,  2057, 23599,  2122,  5966, 10262,  2008,
         1996,  4336,  2944,  2001,  2995,  1010,  1998,  2104,  2023,  4650,
         1010,  2057,  5987,  1996,  4489,  2000,  2022,  2379,  5717,  2007,
         2070,  6721, 19857,  6593, 14505,  1010,  2073,  2379,  2003,  3492,
        12382,  1999,  2023,  2553,  2144,  1996,  7099, 10826,  2024,  2061,
         2235,  1999,  2023,  2817,  1012,   102])"
441,0,[], Case study malaria vaccine,seg_17,"how often would you observe a difference of at least 64.3% (0.643) according to figure 2.31? often, sometimes, rarely, or never?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2129,  2411,  2052,  2017, 11949,  1037,  4489,  1997,  2012,
         2560,  4185,  1012,  1017,  1003,  1006,  1014,  1012,  4185,  2509,
         1007,  2429,  2000,  3275,  1016,  1012,  2861,  1029,  2411,  1010,
         2823,  1010,  6524,  1010,  2030,  2196,  1029,   102])"
442,1,"['probability', 'event']", Case study malaria vaccine,seg_17,it appears that a difference of at least 64.3% due to chance alone would only happen about 2% of the time according to figure 2.31. such a low probability indicates a rare event.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([ 101, 2009, 3544, 2008, 1037, 4489, 1997, 2012, 2560, 4185, 1012, 1017,
        1003, 2349, 2000, 3382, 2894, 2052, 2069, 4148, 2055, 1016, 1003, 1997,
        1996, 2051, 2429, 2000, 3275, 1016, 1012, 2861, 1012, 2107, 1037, 2659,
        9723, 7127, 1037, 4678, 2724, 1012,  102])"
443,1,['rates'], Case study malaria vaccine,seg_17,−0.6 −0.4 −0.2 0.0 0.2 0.4 0.6 0.8 difference in infection rates,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([ 101, 1597, 2692, 1012, 1020, 1597, 2692, 1012, 1018, 1597, 2692, 1012,
        1016, 1014, 1012, 1014, 1014, 1012, 1016, 1014, 1012, 1018, 1014, 1012,
        1020, 1014, 1012, 1022, 4489, 1999, 8985, 6165,  102])"
444,1,"['simulations', 'independence', 'dot plot', 'model', 'plot']", Case study malaria vaccine,seg_17,"figure 2.31: a stacked dot plot of differences from 100 simulations produced under the independence model, h0, where in these simulations infections are unaffected by the vaccine. two of the 100 simulations had a difference of at least 64.3%, the difference observed in the study.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  3275,  1016,  1012,  2861,  1024,  1037, 16934, 11089,  5436,
         1997,  5966,  2013,  2531, 24710,  2550,  2104,  1996,  4336,  2944,
         1010,  1044,  2692,  1010,  2073,  1999,  2122, 24710, 15245,  2024,
        24720,  2011,  1996, 17404,  1012,  2048,  1997,  1996,  2531, 24710,
         2018,  1037,  4489,  1997,  2012,  2560,  4185,  1012,  1017,  1003,
         1010,  1996,  4489,  5159,  1999,  1996,  2817,  1012,   102])"
445,1,"['results', 'event']", Case study malaria vaccine,seg_17,the difference of 64.3% being a rare event suggests two possible interpretations of the results of the study:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1996,  4489,  1997,  4185,  1012,  1017,  1003,  2108,  1037,
         4678,  2724,  6083,  2048,  2825, 15931,  1997,  1996,  3463,  1997,
         1996,  2817,  1024,   102])"
446,1,"['rate', 'independence', 'model']", Case study malaria vaccine,seg_17,"h0 independence model. the vaccine has no effect on infection rate, and we just happened to",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  1044,  2692,  4336,  2944,  1012,  1996, 17404,  2038,  2053,
         3466,  2006,  8985,  3446,  1010,  1998,  2057,  2074,  3047,  2000,
          102])"
447,0,[], Case study malaria vaccine,seg_17,observe a difference that would only occur on a rare occasion.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101, 11949,  1037,  4489,  2008,  2052,  2069,  5258,  2006,  1037,
         4678,  6686,  1012,   102])"
448,1,"['model', 'rate']", Case study malaria vaccine,seg_17,"ha alternative model. the vaccine has an effect on infection rate, and the difference we",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  5292,  4522,  2944,  1012,  1996, 17404,  2038,  2019,  3466,
         2006,  8985,  3446,  1010,  1998,  1996,  4489,  2057,   102])"
449,0,[], Case study malaria vaccine,seg_17,"observed was actually due to the vaccine being effective at combatting malaria, which explains the large difference of 64.3%.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  5159,  2001,  2941,  2349,  2000,  1996, 17404,  2108,  4621,
         2012,  4337,  3436, 19132,  1010,  2029,  7607,  1996,  2312,  4489,
         1997,  4185,  1012,  1017,  1003,  1012,   102])"
450,1,"['independence', 'simulations', 'results', 'model', 'data', 'case']", Case study malaria vaccine,seg_17,"based on the simulations, we have two options. (1) we conclude that the study results do not provide strong evidence against the independence model. that is, we do not have sufficiently strong evidence to conclude the vaccine had an effect in this clinical setting. (2) we conclude the evidence is sufficiently strong to reject h0 and assert that the vaccine was useful. when we conduct formal studies, usually we reject the notion that we just happened to observe a rare event.28 so in this case, we reject the independence model in favor of the alternative. that is, we are concluding the data provide strong evidence that the vaccine provides some protection against malaria in this clinical setting.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2241,  2006,  1996, 24710,  1010,  2057,  2031,  2048,  7047,
         1012,  1006,  1015,  1007,  2057, 16519,  2008,  1996,  2817,  3463,
         2079,  2025,  3073,  2844,  3350,  2114,  1996,  4336,  2944,  1012,
         2008,  2003,  1010,  2057,  2079,  2025,  2031, 12949,  2844,  3350,
         2000, 16519,  1996, 17404,  2018,  2019,  3466,  1999,  2023,  6612,
         4292,  1012,  1006,  1016,  1007,  2057, 16519,  1996,  3350,  2003,
        12949,  2844,  2000, 15454,  1044,  2692,  1998, 20865,  2008,  1996,
        17404,  2001,  6179,  1012,  2043,  2057,  6204,  5337,  2913,  1010,
         2788,  2057, 15454,  1996,  9366,  2008,  2057,  2074,  3047,  2000,
        11949,  1037,  4678,  2724,  1012,  2654,  2061,  1999,  2023,  2553,
         1010,  2057, 15454,  1996,  4336,  2944,  1999,  5684,  1997,  1996,
         4522,  1012,  2008,  2003,  1010,  2057,  2024, 16228,  1996,  2951,
         3073,  2844,  3350,  2008,  1996, 17404,  3640,  2070,  3860,  2114,
        19132,  1999,  2023,  6612,  4292,  1012,   102])"
451,1,"['evaluating', 'data', 'probability', 'events', 'control', 'statistical inference', 'errors', 'statistics', 'statistical', 'model', 'model selection']", Case study malaria vaccine,seg_17,"one field of statistics, statistical inference, is built on evaluating whether such differences are due to chance. in statistical inference, data scientists evaluate which model is most reasonable given the data. errors do occur, just like rare events, and we might choose the wrong model. while we do not always choose correctly, statistical inference gives us tools to control and evaluate how often these errors occur. in chapter 5, we give a formal introduction to the problem of model selection. we spend the next two chapters building a foundation of probability and theory necessary to make that discussion rigorous.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2028,  2492,  1997,  6747,  1010,  7778, 28937,  1010,  2003,
         2328,  2006, 23208,  3251,  2107,  5966,  2024,  2349,  2000,  3382,
         1012,  1999,  7778, 28937,  1010,  2951,  6529, 16157,  2029,  2944,
         2003,  2087,  9608,  2445,  1996,  2951,  1012, 10697,  2079,  5258,
         1010,  2074,  2066,  4678,  2824,  1010,  1998,  2057,  2453,  5454,
         1996,  3308,  2944,  1012,  2096,  2057,  2079,  2025,  2467,  5454,
        11178,  1010,  7778, 28937,  3957,  2149,  5906,  2000,  2491,  1998,
        16157,  2129,  2411,  2122, 10697,  5258,  1012,  1999,  3127,  1019,
         1010,  2057,  2507,  1037,  5337,  4955,  2000,  1996,  3291,  1997,
         2944,  4989,  1012,  2057,  5247,  1996,  2279,  2048,  9159,  2311,
         1037,  3192,  1997,  9723,  1998,  3399,  4072,  2000,  2191,  2008,
         6594, 20001,  1012,   102])"
452,1,['events'], Case study malaria vaccine,seg_17,simulated rosiglitazone cardiovascular events,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101, 23599, 20996,  5332, 25394,  2696, 15975, 22935,  2824,   102])"
453,1,['treatment'], Case study malaria vaccine,seg_17,control treatment alive 1500,tensor(1),"tensor([0., 0., 1., 0., 0., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101,  2491,  3949,  4142, 10347,   102])"
454,1,"['treatment', 'control']", Case study malaria vaccine,seg_17,0 control treatment,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([ 2553,  2817, 19132, 17404])","tensor([ 101, 1014, 2491, 3949,  102])"
455,0,[], Case study malaria vaccine,seg_17,simulated differences in proportions,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101, 23599,  5966,  1999, 19173,   102])"
456,0,[], Case study malaria vaccine,seg_17,ra 0 f 0 20 40 60 80 100 120 infant mortality (per 1000 live births),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([  101, 10958,  1014,  1042,  1014,  2322,  2871,  3438,  3770,  2531,
         6036, 10527, 13356,  1006,  2566,  6694,  2444, 18250,  1007,   102])"
457,0,[], Case study malaria vaccine,seg_17,best actor 50 40,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 2553,  2817, 19132, 17404])","tensor([ 101, 2190, 3364, 2753, 2871,  102])"
458,1,"['population', 'conditional', 'conditional probability', 'continuous distributions', 'sampling', 'statistics', 'continuous', 'probability', 'random variables', 'distributions', 'random', 'variables']",Chapter  Probability,seg_19,"3.1 defining probability 3.2 conditional probability 3.3 sampling from a small population 3.4 random variables 3.5 continuous distributions probability forms the foundation of statistics, and you’re probably already aware of many of the ideas presented in this chapter. however, formalization of probability concepts is likely new for most readers. while this chapter provides a theoretical foundation for the ideas in later chapters and provides a path to a deeper understanding, mastery of the concepts introduced in this chapter is not required for applying the methods introduced in the rest of this book. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3127, 9723])","tensor([  101,  1017,  1012,  1015, 12854,  9723,  1017,  1012,  1016, 18462,
         9723,  1017,  1012,  1017, 16227,  2013,  1037,  2235,  2313,  1017,
         1012,  1018,  6721, 10857,  1017,  1012,  1019,  7142, 20611,  9723,
         3596,  1996,  3192,  1997,  6747,  1010,  1998,  2017,  1521,  2128,
         2763,  2525,  5204,  1997,  2116,  1997,  1996,  4784,  3591,  1999,
         2023,  3127,  1012,  2174,  1010,  5337,  3989,  1997,  9723,  8474,
         2003,  3497,  2047,  2005,  2087,  8141,  1012,  2096,  2023,  3127,
         3640,  1037,  9373,  3192,  2005,  1996,  4784,  1999,  2101,  9159,
         1998,  3640,  1037,  4130,  2000,  1037,  6748,  4824,  1010, 26364,
         1997,  1996,  8474,  3107,  1999,  2023,  3127,  2003,  2025,  3223,
         2005, 11243,  1996,  4725,  3107,  1999,  1996,  2717,  1997,  2023,
         2338,  1012,  2005,  6876,  1010, 14816,  1010,  1998,  2060,  4219,
         1010,  3531,  3942,  7479,  1012,  2330, 18447,  3217,  1012,  8917,
         1013,  9808,   102])"
459,1,"['set', 'probability']", Defining probability,seg_21,"statistics is based on probability, and while probability is not required for the applied techniques in this book, it may help you gain a deeper understanding of the methods and set a better foundation for future courses.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 6747, 2003, 2241, 2006, 9723, 1010, 1998, 2096, 9723, 2003, 2025,
        3223, 2005, 1996, 4162, 5461, 1999, 2023, 2338, 1010, 2009, 2089, 2393,
        2017, 5114, 1037, 6748, 4824, 1997, 1996, 4725, 1998, 2275, 1037, 2488,
        3192, 2005, 2925, 5352, 1012,  102])"
460,0,[], Defining probability,seg_21,3.1.1 introductory examples,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([  101,  1017,  1012,  1015,  1012,  1015, 23889,  4973,   102])"
461,0,[], Defining probability,seg_21,"before we get into technical ideas, let’s walk through some basic examples that may feel more familiar.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([ 101, 2077, 2057, 2131, 2046, 4087, 4784, 1010, 2292, 1521, 1055, 3328,
        2083, 2070, 3937, 4973, 2008, 2089, 2514, 2062, 5220, 1012,  102])"
462,0,[], Defining probability,seg_21,"a “die”, the singular of dice, is a cube with six faces numbered 1, 2, 3, 4, 5, and 6. what is the chance of getting 1 when rolling a die?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([  101,  1037,  1523,  3280,  1524,  1010,  1996, 13048,  1997, 18740,
         1010,  2003,  1037, 14291,  2007,  2416,  5344,  8597,  1015,  1010,
         1016,  1010,  1017,  1010,  1018,  1010,  1019,  1010,  1998,  1020,
         1012,  2054,  2003,  1996,  3382,  1997,  2893,  1015,  2043,  5291,
         1037,  3280,  1029,   102])"
463,1,['outcomes'], Defining probability,seg_21,"if the die is fair, then the chance of a 1 is as good as the chance of any other number. since there are six outcomes, the chance must be 1-in-6 or, equivalently, 1/6.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2065,  1996,  3280,  2003,  4189,  1010,  2059,  1996,  3382,
         1997,  1037,  1015,  2003,  2004,  2204,  2004,  1996,  3382,  1997,
         2151,  2060,  2193,  1012,  2144,  2045,  2024,  2416, 13105,  1010,
         1996,  3382,  2442,  2022,  1015,  1011,  1999,  1011,  1020,  2030,
         1010,  5662,  2135,  1010,  1015,  1013,  1020,  1012,   102])"
464,0,[], Defining probability,seg_21,what is the chance of getting a 1 or 2 in the next roll?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([ 101, 2054, 2003, 1996, 3382, 1997, 2893, 1037, 1015, 2030, 1016, 1999,
        1996, 2279, 4897, 1029,  102])"
465,1,['outcomes'], Defining probability,seg_21,"1 and 2 constitute two of the six equally likely possible outcomes, so the chance of getting one of these two outcomes must be 2/6 = 1/3.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1015,  1998,  1016, 12346,  2048,  1997,  1996,  2416,  8053,
         3497,  2825, 13105,  1010,  2061,  1996,  3382,  1997,  2893,  2028,
         1997,  2122,  2048, 13105,  2442,  2022,  1016,  1013,  1020,  1027,
         1015,  1013,  1017,  1012,   102])"
466,1,['outcome'], Defining probability,seg_21,100%. the outcome must be one of these numbers.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 2531, 1003, 1012, 1996, 9560, 2442, 2022, 2028, 1997, 2122, 3616,
        1012,  102])"
467,0,[], Defining probability,seg_21,what is the chance of not rolling a 2?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([ 101, 2054, 2003, 1996, 3382, 1997, 2025, 5291, 1037, 1016, 1029,  102])"
468,1,"['probability', 'outcomes']", Defining probability,seg_21,"alternatively, we could have noticed that not rolling a 2 is the same as getting a 1, 3, 4, 5, or 6, which makes up five of the six equally likely outcomes and has probability 5/6.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101, 14084,  1010,  2057,  2071,  2031,  4384,  2008,  2025,  5291,
         1037,  1016,  2003,  1996,  2168,  2004,  2893,  1037,  1015,  1010,
         1017,  1010,  1018,  1010,  1019,  1010,  2030,  1020,  1010,  2029,
         3084,  2039,  2274,  1997,  1996,  2416,  8053,  3497, 13105,  1998,
         2038,  9723,  1019,  1013,  1020,  1012,   102])"
469,0,[], Defining probability,seg_21,"consider rolling two dice. if 1/6 of the time the first die is a 1 and 1/6 of those times the second die is a 1, what is the chance of getting two 1s?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([  101,  5136,  5291,  2048, 18740,  1012,  2065,  1015,  1013,  1020,
         1997,  1996,  2051,  1996,  2034,  3280,  2003,  1037,  1015,  1998,
         1015,  1013,  1020,  1997,  2216,  2335,  1996,  2117,  3280,  2003,
         1037,  1015,  1010,  2054,  2003,  1996,  3382,  1997,  2893,  2048,
         1015,  2015,  1029,   102])"
470,1,['probability'], Defining probability,seg_21,3.1.2 probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])","tensor([12854,  9723])","tensor([ 101, 1017, 1012, 1015, 1012, 1016, 9723,  102])"
471,1,"['probability', 'outcome', 'random process', 'random', 'process']", Defining probability,seg_21,we use probability to build tools to describe and understand apparent randomness. we often frame probability in terms of a random process giving rise to an outcome.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 2057, 2224, 9723, 2000, 3857, 5906, 2000, 6235, 1998, 3305, 6835,
        6721, 2791, 1012, 2057, 2411, 4853, 9723, 1999, 3408, 1997, 1037, 6721,
        2832, 3228, 4125, 2000, 2019, 9560, 1012,  102])"
472,1,"['outcome', 'random process', 'random', 'process']", Defining probability,seg_21,rolling a die or flipping a coin is a seemingly random process and each gives rise to an outcome.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  5291,  1037,  3280,  2030, 18497,  1037,  9226,  2003,  1037,
         9428,  6721,  2832,  1998,  2169,  3957,  4125,  2000,  2019,  9560,
         1012,   102])"
473,1,"['probability', 'outcome', 'random process', 'random', 'process']", Defining probability,seg_21,the probability of an outcome is the proportion of times the outcome would occur if we observed the random process an infinite number of times.,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1996,  9723,  1997,  2019,  9560,  2003,  1996, 10817,  1997,
         2335,  1996,  9560,  2052,  5258,  2065,  2057,  5159,  1996,  6721,
         2832,  2019, 10709,  2193,  1997,  2335,  1012,   102])"
474,1,['percentage'], Defining probability,seg_21,"probability is defined as a proportion, and it always takes values between 0 and 1 (inclusively). it may also be displayed as a percentage between 0% and 100%.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12854,  9723])","tensor([  101,  9723,  2003,  4225,  2004,  1037, 10817,  1010,  1998,  2009,
         2467,  3138,  5300,  2090,  1014,  1998,  1015,  1006, 18678,  2135,
         1007,  1012,  2009,  2089,  2036,  2022,  6913,  2004,  1037,  7017,
         2090,  1014,  1003,  1998,  2531,  1003,  1012,   102])"
475,1,"['probability', 'outcomes', 'convergence', 'law of large numbers']", Defining probability,seg_21,"probability can be illustrated by rolling a die many times. let p̂n be the proportion of outcomes that are 1 after the first n rolls. as the number of rolls increases, p̂n will converge to the probability of rolling a 1, p = 1/6. figure 3.1 shows this convergence for 100,000 die rolls. the tendency of p̂n to stabilize around p is described by the law of large numbers.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  9723,  2064,  2022,  7203,  2011,  5291,  1037,  3280,  2116,
         2335,  1012,  2292,  1052,  2078,  2022,  1996, 10817,  1997, 13105,
         2008,  2024,  1015,  2044,  1996,  2034,  1050,  9372,  1012,  2004,
         1996,  2193,  1997,  9372,  7457,  1010,  1052,  2078,  2097, 28314,
         2000,  1996,  9723,  1997,  5291,  1037,  1015,  1010,  1052,  1027,
         1015,  1013,  1020,  1012,  3275,  1017,  1012,  1015,  3065,  2023,
        19143,  2005,  2531,  1010,  2199,  3280,  9372,  1012,  1996, 11765,
         1997,  1052,  2078,  2000, 27790,  2105,  1052,  2003,  2649,  2011,
         1996,  2375,  1997,  2312,  3616,  1012,   102])"
476,1,"['probability', 'simulation']", Defining probability,seg_21,figure 3.1: the fraction of die rolls that are 1 at each stage in a simulation. the proportion tends to get closer to the probability 1/6 ≈ 0.167 as the number of rolls increases.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1015,  1024,  1996, 12884,  1997,  3280,
         9372,  2008,  2024,  1015,  2012,  2169,  2754,  1999,  1037, 12504,
         1012,  1996, 10817, 12102,  2000,  2131,  3553,  2000,  1996,  9723,
         1015,  1013,  1020,  1606,  1014,  1012, 16785,  2004,  1996,  2193,
         1997,  9372,  7457,  1012,   102])"
477,1,"['probability', 'observations', 'outcome']", Defining probability,seg_21,"as more observations are collected, the proportion p̂n of occurrences with a particular outcome converges to the probability p of that outcome.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2004,  2062,  9420,  2024,  5067,  1010,  1996, 10817,  1052,
         2078,  1997, 27247,  2007,  1037,  3327,  9560, 28314,  2015,  2000,
         1996,  9723,  1052,  1997,  2008,  9560,  1012,   102])"
478,1,"['probability', 'law of large numbers', 'deviations']", Defining probability,seg_21,"occasionally the proportion will veer off from the probability and appear to defy the law of large numbers, as p̂n does many times in figure 3.1. however, these deviations become smaller as the number of rolls increases.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  5681,  1996, 10817,  2097,  2310,  2121,  2125,  2013,  1996,
         9723,  1998,  3711,  2000, 13366,  2100,  1996,  2375,  1997,  2312,
         3616,  1010,  2004,  1052,  2078,  2515,  2116,  2335,  1999,  3275,
         1017,  1012,  1015,  1012,  2174,  1010,  2122, 24353,  2015,  2468,
         3760,  2004,  1996,  2193,  1997,  9372,  7457,  1012,   102])"
479,1,['probability'], Defining probability,seg_21,above we write p as the probability of rolling a 1. we can also write this probability as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 2682, 2057, 4339, 1052, 2004, 1996, 9723, 1997, 5291, 1037, 1015,
        1012, 2057, 2064, 2036, 4339, 2023, 9723, 2004,  102])"
480,1,['process'], Defining probability,seg_21,"as we become more comfortable with this notation, we will abbreviate it further. for instance, if it is clear that the process is “rolling a die”, we could abbreviate p (rolling a 1) as p (1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  2004,  2057,  2468,  2062,  6625,  2007,  2023, 14869,  1010,
         2057,  2097, 11113, 13578,  9035,  2618,  2009,  2582,  1012,  2005,
         6013,  1010,  2065,  2009,  2003,  3154,  2008,  1996,  2832,  2003,
         1523,  5291,  1037,  3280,  1524,  1010,  2057,  2071, 11113, 13578,
         9035,  2618,  1052,  1006,  5291,  1037,  1015,  1007,  2004,  1052,
         1006,  1015,  1007,  1012,   102])"
481,1,"['processes', 'outcomes', 'random process', 'random', 'process']", Defining probability,seg_21,"random processes include rolling a die and flipping a coin. (a) think of another random process. (b) describe all the possible outcomes of that process. for instance, rolling a die is a random process with possible outcomes 1, 2, ..., 6.1",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  6721,  6194,  2421,  5291,  1037,  3280,  1998, 18497,  1037,
         9226,  1012,  1006,  1037,  1007,  2228,  1997,  2178,  6721,  2832,
         1012,  1006,  1038,  1007,  6235,  2035,  1996,  2825, 13105,  1997,
         2008,  2832,  1012,  2005,  6013,  1010,  5291,  1037,  3280,  2003,
         1037,  6721,  2832,  2007,  2825, 13105,  1015,  1010,  1016,  1010,
         1012,  1012,  1012,  1010,  1020,  1012,  1015,   102])"
482,1,"['random processes', 'processes', 'random process', 'random', 'process']", Defining probability,seg_21,"what we think of as random processes are not necessarily random, but they may just be too difficult to understand exactly. the fourth example in the footnote solution to guided practice 3.6 suggests a roommate’s behavior is a random process. however, even if a roommate’s behavior is not truly random, modeling her behavior as a random process can still be useful.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2054,  2057,  2228,  1997,  2004,  6721,  6194,  2024,  2025,
         9352,  6721,  1010,  2021,  2027,  2089,  2074,  2022,  2205,  3697,
         2000,  3305,  3599,  1012,  1996,  2959,  2742,  1999,  1996,  3329,
        22074,  5576,  2000,  8546,  3218,  1017,  1012,  1020,  6083,  1037,
        18328,  1521,  1055,  5248,  2003,  1037,  6721,  2832,  1012,  2174,
         1010,  2130,  2065,  1037, 18328,  1521,  1055,  5248,  2003,  2025,
         5621,  6721,  1010, 11643,  2014,  5248,  2004,  1037,  6721,  2832,
         2064,  2145,  2022,  6179,  1012,   102])"
483,1,"['disjoint', 'outcomes', 'mutually exclusive']", Defining probability,seg_21,3.1.3 disjoint or mutually exclusive outcomes,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 0.])","tensor([12854,  9723])","tensor([  101,  1017,  1012,  1015,  1012,  1017,  4487,  2015,  5558, 18447,
         2030, 20271,  7262, 13105,   102])"
484,1,"['disjoint', 'outcomes', 'outcome', 'mutually exclusive']", Defining probability,seg_21,"two outcomes are called disjoint or mutually exclusive if they cannot both happen. for instance, if we roll a die, the outcomes 1 and 2 are disjoint since they cannot both occur. on the other hand, the outcomes 1 and “rolling an odd number” are not disjoint since both occur if the outcome of the roll is a 1. the terms disjoint and mutually exclusive are equivalent and interchangeable.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2048, 13105,  2024,  2170,  4487,  2015,  5558, 18447,  2030,
        20271,  7262,  2065,  2027,  3685,  2119,  4148,  1012,  2005,  6013,
         1010,  2065,  2057,  4897,  1037,  3280,  1010,  1996, 13105,  1015,
         1998,  1016,  2024,  4487,  2015,  5558, 18447,  2144,  2027,  3685,
         2119,  5258,  1012,  2006,  1996,  2060,  2192,  1010,  1996, 13105,
         1015,  1998,  1523,  5291,  2019,  5976,  2193,  1524,  2024,  2025,
         4487,  2015,  5558, 18447,  2144,  2119,  5258,  2065,  1996,  9560,
         1997,  1996,  4897,  2003,  1037,  1015,  1012,  1996,  3408,  4487,
         2015,  5558, 18447,  1998, 20271,  7262,  2024,  5662,  1998,  8989,
         3085,  1012,   102])"
485,1,"['probability', 'disjoint', 'outcomes', 'probabilities']", Defining probability,seg_21,"calculating the probability of disjoint outcomes is easy. when rolling a die, the outcomes 1 and 2 are disjoint, and we compute the probability that one of these outcomes will occur by adding their separate probabilities:",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101, 20177,  1996,  9723,  1997,  4487,  2015,  5558, 18447, 13105,
         2003,  3733,  1012,  2043,  5291,  1037,  3280,  1010,  1996, 13105,
         1015,  1998,  1016,  2024,  4487,  2015,  5558, 18447,  1010,  1998,
         2057, 24134,  1996,  9723,  2008,  2028,  1997,  2122, 13105,  2097,
         5258,  2011,  5815,  2037,  3584,  4013,  3676, 14680,  1024,   102])"
486,1,"['probability', 'disjoint', 'outcomes', 'probabilities']", Defining probability,seg_21,"what about the probability of rolling a 1, 2, 3, 4, 5, or 6? here again, all of the outcomes are disjoint so we add the probabilities:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2054,  2055,  1996,  9723,  1997,  5291,  1037,  1015,  1010,
         1016,  1010,  1017,  1010,  1018,  1010,  1019,  1010,  2030,  1020,
         1029,  2182,  2153,  1010,  2035,  1997,  1996, 13105,  2024,  4487,
         2015,  5558, 18447,  2061,  2057,  5587,  1996,  4013,  3676, 14680,
         1024,   102])"
487,1,"['disjoint', 'outcomes', 'addition rule']", Defining probability,seg_21,the addition rule guarantees the accuracy of this approach when the outcomes are disjoint.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1.,
        0., 0.])","tensor([12854,  9723])","tensor([  101,  1996,  2804,  3627, 21586,  1996, 10640,  1997,  2023,  3921,
         2043,  1996, 13105,  2024,  4487,  2015,  5558, 18447,  1012,   102])"
488,1,"['probability', 'disjoint', 'outcomes']", Defining probability,seg_21,"if a1 and a2 represent two disjoint outcomes, then the probability that one of them occurs is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2065, 17350,  1998, 22441,  5050,  2048,  4487,  2015,  5558,
        18447, 13105,  1010,  2059,  1996,  9723,  2008,  2028,  1997,  2068,
         5158,  2003,  2445,  2011,   102])"
489,1,"['probability', 'disjoint', 'outcomes']", Defining probability,seg_21,"if there are many disjoint outcomes a1, ..., ak, then the probability that one of these outcomes will occur is",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2065,  2045,  2024,  2116,  4487,  2015,  5558, 18447, 13105,
        17350,  1010,  1012,  1012,  1012,  1010, 17712,  1010,  2059,  1996,
         9723,  2008,  2028,  1997,  2122, 13105,  2097,  5258,  2003,   102])"
490,1,"['addition rule', 'probability', 'disjoint', 'outcomes']", Defining probability,seg_21,"we are interested in the probability of rolling a 1, 4, or 5. (a) explain why the outcomes 1, 4, and 5 are disjoint. (b) apply the addition rule for disjoint outcomes to determine p (1 or 4 or 5).2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2057,  2024,  4699,  1999,  1996,  9723,  1997,  5291,  1037,
         1015,  1010,  1018,  1010,  2030,  1019,  1012,  1006,  1037,  1007,
         4863,  2339,  1996, 13105,  1015,  1010,  1018,  1010,  1998,  1019,
         2024,  4487,  2015,  5558, 18447,  1012,  1006,  1038,  1007,  6611,
         1996,  2804,  3627,  2005,  4487,  2015,  5558, 18447, 13105,  2000,
         5646,  1052,  1006,  1015,  2030,  1018,  2030,  1019,  1007,  1012,
         1016,   102])"
491,1,"['set', 'data set', 'data', 'variable']", Defining probability,seg_21,"in the loans data set in chapter 2, the homeownership variable described whether the borrower rents, has a mortgage, or owns her property. of the 10,000 borrowers, 3858 rented, 4789 had a mortgage, and 1353 owned their home.3",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1999,  1996, 10940,  2951,  2275,  1999,  3127,  1016,  1010,
         1996,  2188, 12384,  2545,  5605,  8023,  2649,  3251,  1996, 17781,
         2121, 28206,  1010,  2038,  1037, 14344,  1010,  2030,  8617,  2014,
         3200,  1012,  1997,  1996,  2184,  1010,  2199, 17781,  2545,  1010,
        24429,  2620, 12524,  1010,  4700,  2620,  2683,  2018,  1037, 14344,
         1010,  1998, 11502,  2509,  3079,  2037,  2188,  1012,  1017,   102])"
492,1,"['disjoint', 'outcomes']", Defining probability,seg_21,"(a) are the outcomes rent, mortgage, and own disjoint?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  1006,  1037,  1007,  2024,  1996, 13105,  9278,  1010, 14344,
         1010,  1998,  2219,  4487,  2015,  5558, 18447,  1029,   102])"
493,0,[], Defining probability,seg_21,(b) determine the proportion of loans with value mortgage and own separately.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([  101,  1006,  1038,  1007,  5646,  1996, 10817,  1997, 10940,  2007,
         3643, 14344,  1998,  2219, 10329,  1012,   102])"
494,1,"['addition rule', 'probability', 'disjoint', 'outcomes']", Defining probability,seg_21,(c) use the addition rule for disjoint outcomes to compute the probability a randomly selected,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1006,  1039,  1007,  2224,  1996,  2804,  3627,  2005,  4487,
         2015,  5558, 18447, 13105,  2000, 24134,  1996,  9723,  1037, 18154,
         3479,   102])"
495,1,"['set', 'data set', 'data']", Defining probability,seg_21,loan from the data set is for someone who has a mortgage or owns her home.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  5414,  2013,  1996,  2951,  2275,  2003,  2005,  2619,  2040,
         2038,  1037, 14344,  2030,  8617,  2014,  2188,  1012,   102])"
496,1,"['sets', 'set', 'disjoint', 'events', 'outcomes', 'event', 'disjoint events', 'results']", Defining probability,seg_21,"data scientists rarely work with individual outcomes and instead consider sets or collections of outcomes. let a represent the event where a die roll results in 1 or 2 and b represent the event that the die roll is a 4 or a 6. we write a as the set of outcomes {1, 2} and b = {4, 6}. these sets are commonly called events. because a and b have no elements in common, they are disjoint events. a and b are represented in figure 3.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2951,  6529,  6524,  2147,  2007,  3265, 13105,  1998,  2612,
         5136,  4520,  2030,  6407,  1997, 13105,  1012,  2292,  1037,  5050,
         1996,  2724,  2073,  1037,  3280,  4897,  3463,  1999,  1015,  2030,
         1016,  1998,  1038,  5050,  1996,  2724,  2008,  1996,  3280,  4897,
         2003,  1037,  1018,  2030,  1037,  1020,  1012,  2057,  4339,  1037,
         2004,  1996,  2275,  1997, 13105,  1063,  1015,  1010,  1016,  1065,
         1998,  1038,  1027,  1063,  1018,  1010,  1020,  1065,  1012,  2122,
         4520,  2024,  4141,  2170,  2824,  1012,  2138,  1037,  1998,  1038,
         2031,  2053,  3787,  1999,  2691,  1010,  2027,  2024,  4487,  2015,
         5558, 18447,  2824,  1012,  1037,  1998,  1038,  2024,  3421,  1999,
         3275,  1017,  1012,  1016,  1012,   102])"
497,1,"['disjoint', 'events', 'outcomes']", Defining probability,seg_21,"figure 3.2: three events, a, b, and d, consist of outcomes from rolling a die. a and b are disjoint since they do not have any outcomes in common.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1016,  1024,  2093,  2824,  1010,  1037,
         1010,  1038,  1010,  1998,  1040,  1010,  8676,  1997, 13105,  2013,
         5291,  1037,  3280,  1012,  1037,  1998,  1038,  2024,  4487,  2015,
         5558, 18447,  2144,  2027,  2079,  2025,  2031,  2151, 13105,  1999,
         2691,  1012,   102])"
498,1,"['addition rule', 'probability', 'disjoint', 'events', 'outcomes', 'probabilities', 'disjoint events']", Defining probability,seg_21,the addition rule applies to both disjoint outcomes and disjoint events. the probability that one of the disjoint events a or b occurs is the sum of the separate probabilities:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 1., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1996,  2804,  3627, 12033,  2000,  2119,  4487,  2015,  5558,
        18447, 13105,  1998,  4487,  2015,  5558, 18447,  2824,  1012,  1996,
         9723,  2008,  2028,  1997,  1996,  4487,  2015,  5558, 18447,  2824,
         1037,  2030,  1038,  5158,  2003,  1996,  7680,  1997,  1996,  3584,
         4013,  3676, 14680,  1024,   102])"
499,1,"['addition rule', 'probability', 'event', 'probability of event']", Defining probability,seg_21,"(a) verify the probability of event a, p (a), is 1/3 using the addition rule. (b) do the same for event b.4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  1006,  1037,  1007, 20410,  1996,  9723,  1997,  2724,  1037,
         1010,  1052,  1006,  1037,  1007,  1010,  2003,  1015,  1013,  1017,
         2478,  1996,  2804,  3627,  1012,  1006,  1038,  1007,  2079,  1996,
         2168,  2005,  2724,  1038,  1012,  1018,   102])"
500,1,"['disjoint', 'events', 'outcomes', 'event']", Defining probability,seg_21,"(a) using figure 3.2 as a reference, what outcomes are represented by event d? (b) are events b and d disjoint? (c) are events a and d disjoint?5",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1006,  1037,  1007,  2478,  3275,  1017,  1012,  1016,  2004,
         1037,  4431,  1010,  2054, 13105,  2024,  3421,  2011,  2724,  1040,
         1029,  1006,  1038,  1007,  2024,  2824,  1038,  1998,  1040,  4487,
         2015,  5558, 18447,  1029,  1006,  1039,  1007,  2024,  2824,  1037,
         1998,  1040,  4487,  2015,  5558, 18447,  1029,  1019,   102])"
501,1,"['disjoint', 'event']", Defining probability,seg_21,"in guided practice 3.10, you confirmed b and d from figure 3.2 are disjoint. compute the probability that event b or event d occurs.6",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  1999,  8546,  3218,  1017,  1012,  2184,  1010,  2017,  4484,
         1038,  1998,  1040,  2013,  3275,  1017,  1012,  1016,  2024,  4487,
         2015,  5558, 18447,  1012, 24134,  1996,  9723,  2008,  2724,  1038,
         2030,  2724,  1040,  5158,  1012,  1020,   102])"
502,1,"['disjoint', 'events', 'probabilities']", Defining probability,seg_21,3.1.4 probabilities when events are not disjoint,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([12854,  9723])","tensor([  101,  1017,  1012,  1015,  1012,  1018,  4013,  3676, 14680,  2043,
         2824,  2024,  2025,  4487,  2015,  5558, 18447,   102])"
503,1,"['disjoint', 'events']", Defining probability,seg_21,"let’s consider calculations for two events that are not disjoint in the context of a regular deck of 52 cards, represented in figure 3.3. if you are unfamiliar with the cards in a regular deck, please",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2292,  1521,  1055,  5136, 16268,  2005,  2048,  2824,  2008,
         2024,  2025,  4487,  2015,  5558, 18447,  1999,  1996,  6123,  1997,
         1037,  3180,  5877,  1997,  4720,  5329,  1010,  3421,  1999,  3275,
         1017,  1012,  1017,  1012,  2065,  2017,  2024, 16261,  2007,  1996,
         5329,  1999,  1037,  3180,  5877,  1010,  3531,   102])"
504,0,[], Defining probability,seg_21,7 see the footnote.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([  101,  1021,  2156,  1996,  3329, 22074,  1012,   102])"
505,1,['representations'], Defining probability,seg_21,figure 3.3: representations of the 52 unique cards in a deck.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1017,  1024, 15066,  1997,  1996,  4720,
         4310,  5329,  1999,  1037,  5877,  1012,   102])"
506,1,['probability'], Defining probability,seg_21,(a) what is the probability that a randomly selected card is a diamond? (b) what is the probability that a randomly selected card is a face card?8,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1006,  1037,  1007,  2054,  2003,  1996,  9723,  2008,  1037,
        18154,  3479,  4003,  2003,  1037,  6323,  1029,  1006,  1038,  1007,
         2054,  2003,  1996,  9723,  2008,  1037, 18154,  3479,  4003,  2003,
         1037,  2227,  4003,  1029,  1022,   102])"
507,1,"['random processes', 'processes', 'outcomes', 'probabilities', 'intersection', 'random', 'venn', 'variables', 'venn diagram']", Defining probability,seg_21,"venn diagrams are useful when outcomes can be categorized as “in” or “out” for two or three variables, attributes, or random processes. the venn diagram in figure 3.4 uses a circle to represent diamonds and another to represent face cards. if a card is both a diamond and a face card, it falls into the intersection of the circles. if it is a diamond but not a face card, it will be in part of the left circle that is not in the right circle (and so on). the total number of cards that are diamonds is given by the total number of cards in the diamonds circle: 10 + 3 = 13. the probabilities are also shown (e.g. 10/52 = 0.1923).",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2310, 10695, 26309,  2024,  6179,  2043, 13105,  2064,  2022,
        20427,  2004,  1523,  1999,  1524,  2030,  1523,  2041,  1524,  2005,
         2048,  2030,  2093, 10857,  1010, 12332,  1010,  2030,  6721,  6194,
         1012,  1996,  2310, 10695, 16403,  1999,  3275,  1017,  1012,  1018,
         3594,  1037,  4418,  2000,  5050, 11719,  1998,  2178,  2000,  5050,
         2227,  5329,  1012,  2065,  1037,  4003,  2003,  2119,  1037,  6323,
         1998,  1037,  2227,  4003,  1010,  2009,  4212,  2046,  1996,  6840,
         1997,  1996,  7925,  1012,  2065,  2009,  2003,  1037,  6323,  2021,
         2025,  1037,  2227,  4003,  1010,  2009,  2097,  2022,  1999,  2112,
         1997,  1996,  2187,  4418,  2008,  2003,  2025,  1999,  1996,  2157,
         4418,  1006,  1998,  2061,  2006,  1007,  1012,  1996,  2561,  2193,
         1997,  5329,  2008,  2024, 11719,  2003,  2445,  2011,  1996,  2561,
         2193,  1997,  5329,  1999,  1996, 11719,  4418,  1024,  2184,  1009,
         1017,  1027,  2410,  1012,  1996,  4013,  3676, 14680,  2024,  2036,
         3491,  1006,  1041,  1012,  1043,  1012,  2184,  1013,  4720,  1027,
         1014,  1012,  4927,  1007,  1012,   102])"
508,0,[], Defining probability,seg_21,there are also 30 cards that are 10 3 9 neither diamonds,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([  101,  2045,  2024,  2036,  2382,  5329,  2008,  2024,  2184,  1017,
         1023,  4445, 11719,   102])"
509,1,"['venn', 'venn diagram']", Defining probability,seg_21,figure 3.4: a venn diagram for diamonds and face cards.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1018,  1024,  1037,  2310, 10695, 16403,
         2005, 11719,  1998,  2227,  5329,  1012,   102])"
510,1,"['categories', 'addition rule', 'disjoint', 'events', 'probabilities', 'event', 'disjoint events', 'venn', 'venn diagram']", Defining probability,seg_21,"let a represent the event that a randomly selected card is a diamond and b represent the event that it is a face card. how do we compute p (a or b)? events a and b are not disjoint – the cards j♦, q♦, and k♦ fall into both categories – so we cannot use the addition rule for disjoint events. instead we use the venn diagram. we start by adding the probabilities of the two events:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2292,  1037,  5050,  1996,  2724,  2008,  1037, 18154,  3479,
         4003,  2003,  1037,  6323,  1998,  1038,  5050,  1996,  2724,  2008,
         2009,  2003,  1037,  2227,  4003,  1012,  2129,  2079,  2057, 24134,
         1052,  1006,  1037,  2030,  1038,  1007,  1029,  2824,  1037,  1998,
         1038,  2024,  2025,  4487,  2015,  5558, 18447,  1516,  1996,  5329,
         1046, 30153,  1010,  1053, 30153,  1010,  1998,  1047, 30153,  2991,
         2046,  2119,  7236,  1516,  2061,  2057,  3685,  2224,  1996,  2804,
         3627,  2005,  4487,  2015,  5558, 18447,  2824,  1012,  2612,  2057,
         2224,  1996,  2310, 10695, 16403,  1012,  2057,  2707,  2011,  5815,
         1996,  4013,  3676, 14680,  1997,  1996,  2048,  2824,  1024,   102])"
511,1,"['probability', 'events']", Defining probability,seg_21,"however, the three cards that are in both events were counted twice, once in each probability. we must correct this double counting:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2174,  1010,  1996,  2093,  5329,  2008,  2024,  1999,  2119,
         2824,  2020,  8897,  3807,  1010,  2320,  1999,  2169,  9723,  1012,
         2057,  2442,  6149,  2023,  3313, 10320,  1024,   102])"
512,1,"['addition rule', 'general addition rule']", Defining probability,seg_21,this equation is an example of the general addition rule.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 2023, 8522, 2003, 2019, 2742, 1997, 1996, 2236, 2804, 3627, 1012,
         102])"
513,1,"['probability', 'events', 'disjoint']", Defining probability,seg_21,"if a and b are any two events, disjoint or not, then the probability that at least one of them will occur is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2065,  1037,  1998,  1038,  2024,  2151,  2048,  2824,  1010,
         4487,  2015,  5558, 18447,  2030,  2025,  1010,  2059,  1996,  9723,
         2008,  2012,  2560,  2028,  1997,  2068,  2097,  5258,  2003,   102])"
514,1,"['probability', 'events']", Defining probability,seg_21,where p (a and b) is the probability that both events occur.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 2073, 1052, 1006, 1037, 1998, 1038, 1007, 2003, 1996, 9723, 2008,
        2119, 2824, 5258, 1012,  102])"
515,1,"['mean', 'statistics']", Defining probability,seg_21,"when we write “or” in statistics, we mean “and/or” unless we explicitly state otherwise. thus, a or b occurs means a, b, or both a and b occur.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2043,  2057,  4339,  1523,  2030,  1524,  1999,  6747,  1010,
         2057,  2812,  1523,  1998,  1013,  2030,  1524,  4983,  2057, 12045,
         2110,  4728,  1012,  2947,  1010,  1037,  2030,  1038,  5158,  2965,
         1037,  1010,  1038,  1010,  2030,  2119,  1037,  1998,  1038,  5258,
         1012,   102])"
516,1,"['addition rule', 'disjoint', 'events', 'general addition rule', 'disjoint events']", Defining probability,seg_21,"(a) if a and b are disjoint, describe why this implies p (a and b) = 0. (b) using part (a), verify that the general addition rule simplifies to the simpler addition rule for disjoint events if a and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1006,  1037,  1007,  2065,  1037,  1998,  1038,  2024,  4487,
         2015,  5558, 18447,  1010,  6235,  2339,  2023, 12748,  1052,  1006,
         1037,  1998,  1038,  1007,  1027,  1014,  1012,  1006,  1038,  1007,
         2478,  2112,  1006,  1037,  1007,  1010, 20410,  2008,  1996,  2236,
         2804,  3627, 21934, 24759, 14144,  2000,  1996, 16325,  2804,  3627,
         2005,  4487,  2015,  5558, 18447,  2824,  2065,  1037,  1998,   102])"
517,1,['disjoint'], Defining probability,seg_21,9 b are disjoint.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1023,  1038,  2024,  4487,  2015,  5558, 18447,  1012,   102])"
518,1,"['set', 'joint', 'data set', 'data']", Defining probability,seg_21,"in the loans data set describing 10,000 loans, 1495 loans were from joint applications (e.g. a couple applied together), 4789 applicants had a mortgage, and 950 had both of these characteristics. create",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1999,  1996, 10940,  2951,  2275,  7851,  2184,  1010,  2199,
        10940,  1010, 17332,  2629, 10940,  2020,  2013,  4101,  5097,  1006,
         1041,  1012,  1043,  1012,  1037,  3232,  4162,  2362,  1007,  1010,
         4700,  2620,  2683, 17362,  2018,  1037, 14344,  1010,  1998, 20317,
         2018,  2119,  1997,  2122,  6459,  1012,  3443,   102])"
519,1,"['venn', 'venn diagram']", Defining probability,seg_21,10 a venn diagram for this setup.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2184,  1037,  2310, 10695, 16403,  2005,  2023, 16437,  1012,
          102])"
520,1,"['data set', 'data', 'set', 'probability', 'venn', 'joint', 'venn diagram']", Defining probability,seg_21,(a) use your venn diagram from guided practice 3.14 to determine the probability a randomly drawn loan from the loans data set is from a joint application where the couple had a mortgage. (b) what is the probability that the loan had either of these attributes?11,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1006,  1037,  1007,  2224,  2115,  2310, 10695, 16403,  2013,
         8546,  3218,  1017,  1012,  2403,  2000,  5646,  1996,  9723,  1037,
        18154,  4567,  5414,  2013,  1996, 10940,  2951,  2275,  2003,  2013,
         1037,  4101,  4646,  2073,  1996,  3232,  2018,  1037, 14344,  1012,
         1006,  1038,  1007,  2054,  2003,  1996,  9723,  2008,  1996,  5414,
         2018,  2593,  1997,  2122, 12332,  1029,  2340,   102])"
521,1,"['probability distributions', 'probability', 'distributions']", Defining probability,seg_21,3.1.5 probability distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([12854,  9723])","tensor([  101,  1017,  1012,  1015,  1012,  1019,  9723, 20611,   102])"
522,1,"['associated', 'table', 'probability', 'disjoint', 'outcomes', 'distribution', 'probability distribution']", Defining probability,seg_21,a probability distribution is a table of all disjoint outcomes and their associated probabilities. figure 3.5 shows the probability distribution for the sum of two dice.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  1037,  9723,  4353,  2003,  1037,  2795,  1997,  2035,  4487,
         2015,  5558, 18447, 13105,  1998,  2037,  3378,  4013,  3676, 14680,
         1012,  3275,  1017,  1012,  1019,  3065,  1996,  9723,  4353,  2005,
         1996,  7680,  1997,  2048, 18740,  1012,   102])"
523,1,"['probability', 'probability distribution', 'distribution']", Defining probability,seg_21,figure 3.5: probability distribution for the sum of two dice.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1019,  1024,  9723,  4353,  2005,  1996,
         7680,  1997,  2048, 18740,  1012,   102])"
524,1,"['probability', 'outcomes', 'probabilities', 'distribution', 'probability distribution']", Defining probability,seg_21,a probability distribution is a list of the possible outcomes with corresponding probabilities that satisfies three rules:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1037,  9723,  4353,  2003,  1037,  2862,  1997,  1996,  2825,
        13105,  2007,  7978,  4013,  3676, 14680,  2008,  2938,  2483, 14213,
         2093,  3513,  1024,   102])"
525,1,"['disjoint', 'outcomes']", Defining probability,seg_21,1. the outcomes listed must be disjoint.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1015,  1012,  1996, 13105,  3205,  2442,  2022,  4487,  2015,
         5558, 18447,  1012,   102])"
526,1,['probability'], Defining probability,seg_21,2. each probability must be between 0 and 1.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1016, 1012, 2169, 9723, 2442, 2022, 2090, 1014, 1998, 1015, 1012,
         102])"
527,1,['probabilities'], Defining probability,seg_21,3. the probabilities must total 1.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1017,  1012,  1996,  4013,  3676, 14680,  2442,  2561,  1015,
         1012,   102])"
528,1,"['states', 'distributions']", Defining probability,seg_21,figure 3.6 suggests three distributions for household income in the united states. only one is correct. which one must it be? what is wrong with the other two?12,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1020,  6083,  2093, 20611,  2005,  4398,
         3318,  1999,  1996,  2142,  2163,  1012,  2069,  2028,  2003,  6149,
         1012,  2029,  2028,  2442,  2009,  2022,  1029,  2054,  2003,  3308,
         2007,  1996,  2060,  2048,  1029,  2260,   102])"
529,1,['range'], Defining probability,seg_21,income range $0-25k $25k-50k $50k-100k $100k+ (a) 0.18 0.39 0.33 0.16 (b) 0.38 -0.27 0.52 0.37 (c) 0.28 0.27 0.29 0.16,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 3318, 2846, 1002, 1014, 1011, 2423, 2243, 1002, 2423, 2243, 1011,
        2753, 2243, 1002, 2753, 2243, 1011, 2531, 2243, 1002, 2531, 2243, 1009,
        1006, 1037, 1007, 1014, 1012, 2324, 1014, 1012, 4464, 1014, 1012, 3943,
        1014, 1012, 2385, 1006, 1038, 1007, 1014, 1012, 4229, 1011, 1014, 1012,
        2676, 1014, 1012, 4720, 1014, 1012, 4261, 1006, 1039, 1007, 1014, 1012,
        2654, 1014, 1012, 2676, 1014, 1012, 2756, 1014, 1012, 2385,  102])"
530,1,['distributions'], Defining probability,seg_21,figure 3.6: proposed distributions of us household incomes (guided practice 3.16).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1020,  1024,  3818, 20611,  1997,  2149,
         4398, 29373,  1006,  8546,  3218,  1017,  1012,  2385,  1007,  1012,
          102])"
531,1,"['bar plot', 'probability distributions', 'probability', 'plotting', 'distributions', 'distribution', 'plot', 'data', 'probability distribution']", Defining probability,seg_21,"chapter 1 emphasized the importance of plotting data to provide quick summaries. probability distributions can also be summarized in a bar plot. for instance, the distribution of us household incomes is shown in figure 3.7 as a bar plot. the probability distribution for the sum of two dice is shown in figure 3.5 and plotted in figure 3.8.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  3127,  1015, 13155,  1996,  5197,  1997, 20699,  2951,  2000,
         3073,  4248,  7680,  7849,  3111,  1012,  9723, 20611,  2064,  2036,
         2022, 22539,  1999,  1037,  3347,  5436,  1012,  2005,  6013,  1010,
         1996,  4353,  1997,  2149,  4398, 29373,  2003,  3491,  1999,  3275,
         1017,  1012,  1021,  2004,  1037,  3347,  5436,  1012,  1996,  9723,
         4353,  2005,  1996,  7680,  1997,  2048, 18740,  2003,  3491,  1999,
         3275,  1017,  1012,  1019,  1998, 27347,  1999,  3275,  1017,  1012,
         1022,  1012,   102])"
532,1,"['probability', 'probability distribution', 'distribution']", Defining probability,seg_21,figure 3.7: the probability distribution of us household income.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 3275, 1017, 1012, 1021, 1024, 1996, 9723, 4353, 1997, 2149, 4398,
        3318, 1012,  102])"
533,1,"['probability', 'probability distribution', 'distribution']", Defining probability,seg_21,figure 3.8: the probability distribution of the sum of two dice.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1022,  1024,  1996,  9723,  4353,  1997,
         1996,  7680,  1997,  2048, 18740,  1012,   102])"
534,1,"['bar plot', 'bar plots', 'locations', 'plotting', 'outcomes', 'probabilities', 'histogram', 'plots', 'plot', 'numerical', 'discrete', 'case']", Defining probability,seg_21,"in these bar plots, the bar heights represent the probabilities of outcomes. if the outcomes are numerical and discrete, it is usually (visually) convenient to make a bar plot that resembles a histogram, as in the case of the sum of two dice. another example of plotting the bars at their respective locations is shown in figure 3.18 on page 115.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1999,  2122,  3347, 14811,  1010,  1996,  3347,  7535,  5050,
         1996,  4013,  3676, 14680,  1997, 13105,  1012,  2065,  1996, 13105,
         2024, 15973,  1998, 16246,  1010,  2009,  2003,  2788,  1006, 17453,
         1007, 14057,  2000,  2191,  1037,  3347,  5436,  2008, 12950,  1037,
         2010,  3406, 13113,  1010,  2004,  1999,  1996,  2553,  1997,  1996,
         7680,  1997,  2048, 18740,  1012,  2178,  2742,  1997, 20699,  1996,
         6963,  2012,  2037,  7972,  5269,  2003,  3491,  1999,  3275,  1017,
         1012,  2324,  2006,  3931, 10630,  1012,   102])"
535,1,"['complement', 'event', 'complement of an event']", Defining probability,seg_21,3.1.6 complement of an event,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([12854,  9723])","tensor([  101,  1017,  1012,  1015,  1012,  1020, 13711,  1997,  2019,  2724,
          102])"
536,1,"['sample space', 'set', 'outcomes', 'event', 'sample']", Defining probability,seg_21,"rolling a die produces a value in the set {1, 2, 3, 4, 5, 6}. this set of all possible outcomes is called the sample space (s) for rolling a die. we often use the sample space to examine the scenario where an event does not occur.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  5291,  1037,  3280,  7137,  1037,  3643,  1999,  1996,  2275,
         1063,  1015,  1010,  1016,  1010,  1017,  1010,  1018,  1010,  1019,
         1010,  1020,  1065,  1012,  2023,  2275,  1997,  2035,  2825, 13105,
         2003,  2170,  1996,  7099,  2686,  1006,  1055,  1007,  2005,  5291,
         1037,  3280,  1012,  2057,  2411,  2224,  1996,  7099,  2686,  2000,
        11628,  1996, 11967,  2073,  2019,  2724,  2515,  2025,  5258,  1012,
          102])"
537,1,"['sample space', 'set', 'outcomes', 'event', 'outcome', 'sample']", Defining probability,seg_21,"let d = {2, 3} represent the event that the outcome of a die roll is 2 or 3. then the complement of d represents all outcomes in our sample space that are not in d, which is denoted by dc = {1, 4, 5, 6}. that is, dc is the set of all possible outcomes not already included in d. figure 3.9 shows the relationship between d, dc, and the sample space s.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2292,  1040,  1027,  1063,  1016,  1010,  1017,  1065,  5050,
         1996,  2724,  2008,  1996,  9560,  1997,  1037,  3280,  4897,  2003,
         1016,  2030,  1017,  1012,  2059,  1996, 13711,  1997,  1040,  5836,
         2035, 13105,  1999,  2256,  7099,  2686,  2008,  2024,  2025,  1999,
         1040,  1010,  2029,  2003, 19537,  2011,  5887,  1027,  1063,  1015,
         1010,  1018,  1010,  1019,  1010,  1020,  1065,  1012,  2008,  2003,
         1010,  5887,  2003,  1996,  2275,  1997,  2035,  2825, 13105,  2025,
         2525,  2443,  1999,  1040,  1012,  3275,  1017,  1012,  1023,  3065,
         1996,  3276,  2090,  1040,  1010,  5887,  1010,  1998,  1996,  7099,
         2686,  1055,  1012,   102])"
538,1,"['complement', 'sample space', 'set', 'outcomes', 'event', 'sample']", Defining probability,seg_21,"figure 3.9: event d = {2, 3} and its complement, dc = {1, 4, 5, 6}. s represents the sample space, which is the set of all possible outcomes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  3275,  1017,  1012,  1023,  1024,  2724,  1040,  1027,  1063,
         1016,  1010,  1017,  1065,  1998,  2049, 13711,  1010,  5887,  1027,
         1063,  1015,  1010,  1018,  1010,  1019,  1010,  1020,  1065,  1012,
         1055,  5836,  1996,  7099,  2686,  1010,  2029,  2003,  1996,  2275,
         1997,  2035,  2825, 13105,  1012,   102])"
539,1,"['complement', 'disjoint', 'event', 'outcome', 'complement of an event']", Defining probability,seg_21,"a complement of an event a is constructed to have two very important properties: (i) every possible outcome not in a is in ac, and (ii) a and ac are disjoint. property (i) implies",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1037, 13711,  1997,  2019,  2724,  1037,  2003,  3833,  2000,
         2031,  2048,  2200,  2590,  5144,  1024,  1006,  1045,  1007,  2296,
         2825,  9560,  2025,  1999,  1037,  2003,  1999,  9353,  1010,  1998,
         1006,  2462,  1007,  1037,  1998,  9353,  2024,  4487,  2015,  5558,
        18447,  1012,  3200,  1006,  1045,  1007, 12748,   102])"
540,1,"['addition rule', 'disjoint', 'events', 'disjoint events', 'outcome']", Defining probability,seg_21,"that is, if the outcome is not in a, it must be represented in ac. we use the addition rule for disjoint events to apply property (ii):",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12854,  9723])","tensor([  101,  2008,  2003,  1010,  2065,  1996,  9560,  2003,  2025,  1999,
         1037,  1010,  2009,  2442,  2022,  3421,  1999,  9353,  1012,  2057,
         2224,  1996,  2804,  3627,  2005,  4487,  2015,  5558, 18447,  2824,
         2000,  6611,  3200,  1006,  2462,  1007,  1024,   102])"
541,1,"['complement', 'probability', 'event', 'probability of an event']", Defining probability,seg_21,combining the last two equations yields a very useful relationship between the probability of an event and its complement.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101, 11566,  1996,  2197,  2048, 11380, 16189,  1037,  2200,  6179,
         3276,  2090,  1996,  9723,  1997,  2019,  2724,  1998,  2049, 13711,
         1012,   102])"
542,1,"['complement', 'outcomes', 'event']", Defining probability,seg_21,"the complement of event a is denoted ac, and ac represents all outcomes not in a. a and ac are mathematically related:",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1996, 13711,  1997,  2724,  1037,  2003, 19537,  9353,  1010,
         1998,  9353,  5836,  2035, 13105,  2025,  1999,  1037,  1012,  1037,
         1998,  9353,  2024,  8045,  2135,  3141,  1024,   102])"
543,1,['complement'], Defining probability,seg_21,"in simple examples, computinga orac is feasible in a few steps. however, using the complement can save a lot of time as problems grow in complexity.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  1999,  3722,  4973,  1010,  9798,  2050,  2030,  6305,  2003,
        22945,  1999,  1037,  2261,  4084,  1012,  2174,  1010,  2478,  1996,
        13711,  2064,  3828,  1037,  2843,  1997,  2051,  2004,  3471,  4982,
         1999, 11619,  1012,   102])"
544,1,['event'], Defining probability,seg_21,let a represent the event where we roll two dice and their total is less than 12. (a) what does the event ac represent? (b) determine p (ac) from figure 3.5 on page 87. (c) determine p (a).15,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2292,  1037,  5050,  1996,  2724,  2073,  2057,  4897,  2048,
        18740,  1998,  2037,  2561,  2003,  2625,  2084,  2260,  1012,  1006,
         1037,  1007,  2054,  2515,  1996,  2724,  9353,  5050,  1029,  1006,
         1038,  1007,  5646,  1052,  1006,  9353,  1007,  2013,  3275,  1017,
         1012,  1019,  2006,  3931,  6584,  1012,  1006,  1039,  1007,  5646,
         1052,  1006,  1037,  1007,  1012,  2321,   102])"
545,1,['probabilities'], Defining probability,seg_21,find the following probabilities for rolling two dice:16,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2424,  1996,  2206,  4013,  3676, 14680,  2005,  5291,  2048,
        18740,  1024,  2385,   102])"
546,1,"['probability', 'probability of the event', 'event']", Defining probability,seg_21,"(b) the sum is at least 4. that is, determine the probability of the event b = {4, 5, ..., 12}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1038, 1007, 1996, 7680, 2003, 2012, 2560, 1018, 1012, 2008,
        2003, 1010, 5646, 1996, 9723, 1997, 1996, 2724, 1038, 1027, 1063, 1018,
        1010, 1019, 1010, 1012, 1012, 1012, 1010, 2260, 1065, 1012,  102])"
547,1,"['probability', 'probability of the event', 'event']", Defining probability,seg_21,"(c) the sum is no more than 10. that is, determine the probability of the event d = {2, 3, ..., 10}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1039, 1007, 1996, 7680, 2003, 2053, 2062, 2084, 2184, 1012,
        2008, 2003, 1010, 5646, 1996, 9723, 1997, 1996, 2724, 1040, 1027, 1063,
        1016, 1010, 1017, 1010, 1012, 1012, 1012, 1010, 2184, 1065, 1012,  102])"
548,1,['independence'], Defining probability,seg_21,3.1.7 independence,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])","tensor([12854,  9723])","tensor([ 101, 1017, 1012, 1015, 1012, 1021, 4336,  102])"
549,1,"['random processes', 'processes', 'observations', 'information', 'outcome', 'random', 'variables', 'independent']", Defining probability,seg_21,"just as variables and observations can be independent, random processes can be independent, too. two processes are independent if knowing the outcome of one provides no useful information about the outcome of the other. for instance, flipping a coin and rolling a die are two independent processes – knowing the coin was heads does not help determine the outcome of a die roll. on the other hand, stock prices usually move up or down together, so they are not independent.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  2074,  2004, 10857,  1998,  9420,  2064,  2022,  2981,  1010,
         6721,  6194,  2064,  2022,  2981,  1010,  2205,  1012,  2048,  6194,
         2024,  2981,  2065,  4209,  1996,  9560,  1997,  2028,  3640,  2053,
         6179,  2592,  2055,  1996,  9560,  1997,  1996,  2060,  1012,  2005,
         6013,  1010, 18497,  1037,  9226,  1998,  5291,  1037,  3280,  2024,
         2048,  2981,  6194,  1516,  4209,  1996,  9226,  2001,  4641,  2515,
         2025,  2393,  5646,  1996,  9560,  1997,  1037,  3280,  4897,  1012,
         2006,  1996,  2060,  2192,  1010,  4518,  7597,  2788,  2693,  2039,
         2030,  2091,  2362,  1010,  2061,  2027,  2024,  2025,  2981,  1012,
          102])"
550,1,"['probability', 'processes', 'information', 'outcome', 'independent']", Defining probability,seg_21,"example 3.5 provides a basic example of two independent processes: rolling two dice. we want to determine the probability that both will be 1. suppose one of the dice is red and the other white. if the outcome of the red die is a 1, it provides no information about the outcome of the white die. we first encountered this same question in example 3.5 (page 81), where we calculated the probability using the following reasoning: 1/6 of the time the red die is a 1, and 1/6 of those times the white die",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2742,  1017,  1012,  1019,  3640,  1037,  3937,  2742,  1997,
         2048,  2981,  6194,  1024,  5291,  2048, 18740,  1012,  2057,  2215,
         2000,  5646,  1996,  9723,  2008,  2119,  2097,  2022,  1015,  1012,
         6814,  2028,  1997,  1996, 18740,  2003,  2417,  1998,  1996,  2060,
         2317,  1012,  2065,  1996,  9560,  1997,  1996,  2417,  3280,  2003,
         1037,  1015,  1010,  2009,  3640,  2053,  2592,  2055,  1996,  9560,
         1997,  1996,  2317,  3280,  1012,  2057,  2034,  8567,  2023,  2168,
         3160,  1999,  2742,  1017,  1012,  1019,  1006,  3931,  6282,  1007,
         1010,  2073,  2057, 10174,  1996,  9723,  2478,  1996,  2206, 13384,
         1024,  1015,  1013,  1020,  1997,  1996,  2051,  1996,  2417,  3280,
         2003,  1037,  1015,  1010,  1998,  1015,  1013,  1020,  1997,  2216,
         2335,  1996,  2317,  3280,   102])"
551,1,"['processes', 'outcomes', 'probabilities', 'independent']", Defining probability,seg_21,"will also be 1. this is illustrated in figure 3.10. because the rolls are independent, the probabilities of the corresponding outcomes can be multiplied to get the final answer: (1/6)× (1/6) = 1/36. this can be generalized to many independent processes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2097,  2036,  2022,  1015,  1012,  2023,  2003,  7203,  1999,
         3275,  1017,  1012,  2184,  1012,  2138,  1996,  9372,  2024,  2981,
         1010,  1996,  4013,  3676, 14680,  1997,  1996,  7978, 13105,  2064,
         2022, 28608,  2000,  2131,  1996,  2345,  3437,  1024,  1006,  1015,
         1013,  1020,  1007,  1095,  1006,  1015,  1013,  1020,  1007,  1027,
         1015,  1013,  4029,  1012,  2023,  2064,  2022, 18960,  2000,  2116,
         2981,  6194,  1012,   102])"
552,0,[], Defining probability,seg_21,all rolls 1/6th of the first rolls are a 1. 1/6th of those times where the first roll is a 1 the second roll is also a 1.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([ 101, 2035, 9372, 1015, 1013, 5351, 1997, 1996, 2034, 9372, 2024, 1037,
        1015, 1012, 1015, 1013, 5351, 1997, 2216, 2335, 2073, 1996, 2034, 4897,
        2003, 1037, 1015, 1996, 2117, 4897, 2003, 2036, 1037, 1015, 1012,  102])"
553,1,"['probability', 'independent']", Defining probability,seg_21,what if there was also a blue die independent of the other two? what is the probability of rolling the three dice and getting all 1s?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2054,  2065,  2045,  2001,  2036,  1037,  2630,  3280,  2981,
         1997,  1996,  2060,  2048,  1029,  2054,  2003,  1996,  9723,  1997,
         5291,  1996,  2093, 18740,  1998,  2893,  2035,  1015,  2015,  1029,
          102])"
554,0,[], Defining probability,seg_21,"the same logic applies from example 3.5. if 1/36 of the time the white and red dice are both 1, then 1/6 of those times the blue die will also be 1, so multiply:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([  101,  1996,  2168,  7961, 12033,  2013,  2742,  1017,  1012,  1019,
         1012,  2065,  1015,  1013,  4029,  1997,  1996,  2051,  1996,  2317,
         1998,  2417, 18740,  2024,  2119,  1015,  1010,  2059,  1015,  1013,
         1020,  1997,  2216,  2335,  1996,  2630,  3280,  2097,  2036,  2022,
         1015,  1010,  2061,  4800, 22086,  1024,   102])"
555,1,"['processes', 'multiplication rule', 'independent']", Defining probability,seg_21,example 3.21 illustrates what is called the multiplication rule for independent processes.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2742,  1017,  1012,  2538, 24899,  2054,  2003,  2170,  1996,
        24856,  3627,  2005,  2981,  6194,  1012,   102])"
556,1,"['probability', 'processes', 'events', 'probabilities', 'independent']", Defining probability,seg_21,"if a and b represent events from two different and independent processes, then the probability that both a and b occur can be calculated as the product of their separate probabilities:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  2065,  1037,  1998,  1038,  5050,  2824,  2013,  2048,  2367,
         1998,  2981,  6194,  1010,  2059,  1996,  9723,  2008,  2119,  1037,
         1998,  1038,  5258,  2064,  2022, 10174,  2004,  1996,  4031,  1997,
         2037,  3584,  4013,  3676, 14680,  1024,   102])"
557,1,"['probability', 'processes', 'events', 'independent']", Defining probability,seg_21,"similarly, if there are k events a1, ..., ak from k independent processes, then the probability they all occur is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  6660,  1010,  2065,  2045,  2024,  1047,  2824, 17350,  1010,
         1012,  1012,  1012,  1010, 17712,  2013,  1047,  2981,  6194,  1010,
         2059,  1996,  9723,  2027,  2035,  5258,  2003,   102])"
558,1,"['probability', 'sample', 'random', 'sample size', 'population', 'independent']", Defining probability,seg_21,"about 9% of people are left-handed. suppose 2 people are selected at random from the u.s. population. because the sample size of 2 is very small relative to the population, it is reasonable to assume these two people are independent. (a) what is the probability that both are left-handed? (b) what is the probability that both are right-handed?17",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 2055, 1023, 1003, 1997, 2111, 2024, 2187, 1011, 4375, 1012, 6814,
        1016, 2111, 2024, 3479, 2012, 6721, 2013, 1996, 1057, 1012, 1055, 1012,
        2313, 1012, 2138, 1996, 7099, 2946, 1997, 1016, 2003, 2200, 2235, 5816,
        2000, 1996, 2313, 1010, 2009, 2003, 9608, 2000, 7868, 2122, 2048, 2111,
        2024, 2981, 1012, 1006, 1037, 1007, 2054, 2003, 1996, 9723, 2008, 2119,
        2024, 2187, 1011, 4375, 1029, 1006, 1038, 1007, 2054, 2003, 1996, 9723,
        2008, 2119, 2024, 2157, 1011, 4375, 1029, 2459,  102])"
559,0,[], Defining probability,seg_21,suppose 5 people are selected at random.18,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([ 101, 6814, 1019, 2111, 2024, 3479, 2012, 6721, 1012, 2324,  102])"
560,1,['probability'], Defining probability,seg_21,(a) what is the probability that all are right-handed?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1037, 1007, 2054, 2003, 1996, 9723, 2008, 2035, 2024, 2157,
        1011, 4375, 1029,  102])"
561,1,['probability'], Defining probability,seg_21,(b) what is the probability that all are left-handed?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1038, 1007, 2054, 2003, 1996, 9723, 2008, 2035, 2024, 2187,
        1011, 4375, 1029,  102])"
562,1,['probability'], Defining probability,seg_21,(c) what is the probability that not all of the people are right-handed?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1039, 1007, 2054, 2003, 1996, 9723, 2008, 2025, 2035, 1997,
        1996, 2111, 2024, 2157, 1011, 4375, 1029,  102])"
563,1,"['information', 'multiplication rule', 'variables', 'independent']", Defining probability,seg_21,"suppose the variables handedness and sex are independent, i.e. knowing someone’s sex provides no useful information about their handedness and vice-versa. then we can compute whether a randomly selected person is right-handed and female19 using the multiplication rule:",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([12854,  9723])","tensor([  101,  6814,  1996, 10857,  4375,  2791,  1998,  3348,  2024,  2981,
         1010,  1045,  1012,  1041,  1012,  4209,  2619,  1521,  1055,  3348,
         3640,  2053,  6179,  2592,  2055,  2037,  4375,  2791,  1998,  3580,
         1011, 18601,  1012,  2059,  2057,  2064, 24134,  3251,  1037, 18154,
         3479,  2711,  2003,  2157,  1011,  4375,  1998,  2931, 16147,  2478,
         1996, 24856,  3627,  1024,   102])"
564,0,[], Defining probability,seg_21,three people are selected at random.20,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([ 101, 2093, 2111, 2024, 3479, 2012, 6721, 1012, 2322,  102])"
565,1,['probability'], Defining probability,seg_21,(a) what is the probability that the first person is male and right-handed?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1037, 1007, 2054, 2003, 1996, 9723, 2008, 1996, 2034, 2711,
        2003, 3287, 1998, 2157, 1011, 4375, 1029,  102])"
566,1,['probability'], Defining probability,seg_21,(b) what is the probability that the first two people are male and right-handed?.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1038, 1007, 2054, 2003, 1996, 9723, 2008, 1996, 2034, 2048,
        2111, 2024, 3287, 1998, 2157, 1011, 4375, 1029, 1012,  102])"
567,1,['probability'], Defining probability,seg_21,(c) what is the probability that the third person is female and left-handed?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1039, 1007, 2054, 2003, 1996, 9723, 2008, 1996, 2353, 2711,
        2003, 2931, 1998, 2187, 1011, 4375, 1029,  102])"
568,1,['probability'], Defining probability,seg_21,(d) what is the probability that the first two people are male and right-handed and the third,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1006, 1040, 1007, 2054, 2003, 1996, 9723, 2008, 1996, 2034, 2048,
        2111, 2024, 3287, 1998, 2157, 1011, 4375, 1998, 1996, 2353,  102])"
569,0,[], Defining probability,seg_21,person is female and left-handed?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12854,  9723])","tensor([ 101, 2711, 2003, 2931, 1998, 2187, 1011, 4375, 1029,  102])"
570,1,"['events independent', 'events', 'information', 'outcome', 'independent']", Defining probability,seg_21,"sometimes we wonder if one outcome provides useful information about another outcome. the question we are asking is, are the occurrences of the two events independent? we say that two events a and b are independent if they satisfy p (a and b) = p (a)× p (b).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2823,  2057,  4687,  2065,  2028,  9560,  3640,  6179,  2592,
         2055,  2178,  9560,  1012,  1996,  3160,  2057,  2024,  4851,  2003,
         1010,  2024,  1996, 27247,  1997,  1996,  2048,  2824,  2981,  1029,
         2057,  2360,  2008,  2048,  2824,  1037,  1998,  1038,  2024,  2981,
         2065,  2027, 13225,  1052,  1006,  1037,  1998,  1038,  1007,  1027,
         1052,  1006,  1037,  1007,  1095,  1052,  1006,  1038,  1007,  1012,
          102])"
571,1,"['event', 'independent']", Defining probability,seg_21,"if we shuffle up a deck of cards and draw one, is the event that the card is a heart independent of the event that the card is an ace?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([  101,  2065,  2057, 23046,  2039,  1037,  5877,  1997,  5329,  1998,
         4009,  2028,  1010,  2003,  1996,  2724,  2008,  1996,  4003,  2003,
         1037,  2540,  2981,  1997,  1996,  2724,  2008,  1996,  4003,  2003,
         2019,  9078,  1029,   102])"
572,1,['probability'], Defining probability,seg_21,the probability the card is a heart is 1/4 and the probability that it is an ace is 1/13. the probability the card is the ace of hearts is 1/52. we check whether p (a and b) = p (a)× p (b) is satisfied:,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 1996, 9723, 1996, 4003, 2003, 1037, 2540, 2003, 1015, 1013, 1018,
        1998, 1996, 9723, 2008, 2009, 2003, 2019, 9078, 2003, 1015, 1013, 2410,
        1012, 1996, 9723, 1996, 4003, 2003, 1996, 9078, 1997, 8072, 2003, 1015,
        1013, 4720, 1012, 2057, 4638, 3251, 1052, 1006, 1037, 1998, 1038, 1007,
        1027, 1052, 1006, 1037, 1007, 1095, 1052, 1006, 1038, 1007, 2003, 8510,
        1024,  102])"
573,1,"['events', 'independent events', 'event', 'independent']", Defining probability,seg_21,"because the equation holds, the event that the card is a heart and the event that the card is an ace are independent events.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([12854,  9723])","tensor([ 101, 2138, 1996, 8522, 4324, 1010, 1996, 2724, 2008, 1996, 4003, 2003,
        1037, 2540, 1998, 1996, 2724, 2008, 1996, 4003, 2003, 2019, 9078, 2024,
        2981, 2824, 1012,  102])"
574,1,"['risk', 'information', 'probabilities', 'conditional probabilities', 'variables', 'conditional']", Conditional probability,seg_23,there can be rich relationships between two or more variables that are useful to understand. for example a car insurance company will consider information about a person’s driving history to assess the risk that they will be responsible for an accident. these types of relationships are the realm of conditional probabilities.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2045,  2064,  2022,  4138,  6550,  2090,  2048,  2030,  2062,
        10857,  2008,  2024,  6179,  2000,  3305,  1012,  2005,  2742,  1037,
         2482,  5427,  2194,  2097,  5136,  2592,  2055,  1037,  2711,  1521,
         1055,  4439,  2381,  2000, 14358,  1996,  3891,  2008,  2027,  2097,
         2022,  3625,  2005,  2019,  4926,  1012,  2122,  4127,  1997,  6550,
         2024,  1996,  8391,  1997, 18462,  4013,  3676, 14680,  1012,   102])"
575,1,"['contingency table', 'probabilities', 'table']", Conditional probability,seg_23,3.2.1 exploring probabilities with a contingency table,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([18462,  9723])","tensor([  101,  1017,  1012,  1016,  1012,  1015, 11131,  4013,  3676, 14680,
         2007,  1037,  9530,  3436, 11916,  2795,   102])"
576,1,"['set', 'machine learning', 'sample', 'results', 'data set', 'data', 'variable', 'test']", Conditional probability,seg_23,"the photo classify data set represents a classifier a sample of 1822 photos from a photo sharing website. data scientists have been working to improve a classifier for whether the photo is about fashion or not, and these 1822 photos represent a test for their classifier. each photo gets two classifications: the first is called mach learn and gives a classification from a machine learning (ml) system of either pred fashion or pred not. each of these 1822 photos have also been classified carefully by a team of people, which we take to be the source of truth; this variable is called truth and takes values fashion and not. figure 3.11 summarizes the results.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  6302, 26268,  2951,  2275,  5836,  1037,  2465, 18095,
         1037,  7099,  1997, 12307,  7760,  2013,  1037,  6302,  6631,  4037,
         1012,  2951,  6529,  2031,  2042,  2551,  2000,  5335,  1037,  2465,
        18095,  2005,  3251,  1996,  6302,  2003,  2055,  4827,  2030,  2025,
         1010,  1998,  2122, 12307,  7760,  5050,  1037,  3231,  2005,  2037,
         2465, 18095,  1012,  2169,  6302,  4152,  2048, 26739,  1024,  1996,
         2034,  2003,  2170, 24532,  4553,  1998,  3957,  1037,  5579,  2013,
         1037,  3698,  4083,  1006, 19875,  1007,  2291,  1997,  2593,  3653,
         2094,  4827,  2030,  3653,  2094,  2025,  1012,  2169,  1997,  2122,
        12307,  7760,  2031,  2036,  2042,  6219,  5362,  2011,  1037,  2136,
         1997,  2111,  1010,  2029,  2057,  2202,  2000,  2022,  1996,  3120,
         1997,  3606,  1025,  2023,  8023,  2003,  2170,  3606,  1998,  3138,
         5300,  4827,  1998,  2025,  1012,  3275,  1017,  1012,  2340,  7680,
         7849, 10057,  1996,  3463,  1012,   102])"
577,0,[], Conditional probability,seg_23,truth fashion not total pred fashion 197 22 219 mach learn pred not 112 1491 1603,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  3606,  4827,  2025,  2561,  3653,  2094,  4827, 19975,  2570,
        20636, 24532,  4553,  3653,  2094,  2025, 11176, 17332,  2487, 25625,
          102])"
578,1,"['contingency table', 'table', 'set', 'data set', 'data']", Conditional probability,seg_23,figure 3.11: contingency table summarizing the photo classify data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2340,  1024,  9530,  3436, 11916,  2795,
         7680,  7849,  6026,  1996,  6302, 26268,  2951,  2275,  1012,   102])"
579,0,[], Conditional probability,seg_23,fashion photos 0.06,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([ 101, 4827, 7760, 1014, 1012, 5757,  102])"
580,0,[], Conditional probability,seg_23,ml predicts fashion neither: 0.82,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101, 19875, 16014,  2015,  4827,  4445,  1024,  1014,  1012,  6445,
          102])"
581,1,"['data', 'set', 'venn', 'data set', 'venn diagram']", Conditional probability,seg_23,figure 3.12: a venn diagram using boxes for the photo classify data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2260,  1024,  1037,  2310, 10695, 16403,
         2478,  8378,  2005,  1996,  6302, 26268,  2951,  2275,  1012,   102])"
582,0,[], Conditional probability,seg_23,"if a photo is actually about fashion, what is the chance the ml classifier correctly identified the photo as being about fashion?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([18462,  9723])","tensor([  101,  2065,  1037,  6302,  2003,  2941,  2055,  4827,  1010,  2054,
         2003,  1996,  3382,  1996, 19875,  2465, 18095, 11178,  4453,  1996,
         6302,  2004,  2108,  2055,  4827,  1029,   102])"
583,1,"['probability', 'estimate', 'algorithm', 'data']", Conditional probability,seg_23,"we can estimate this probability using the data. of the 309 fashion photos, the ml algorithm correctly classified 197 of the photos:",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2064, 10197,  2023,  9723,  2478,  1996,  2951,  1012,
         1997,  1996, 25048,  4827,  7760,  1010,  1996, 19875,  9896, 11178,
         6219, 19975,  1997,  1996,  7760,  1024,   102])"
584,0,[], Conditional probability,seg_23,197 p (mach learn is pred fashion given truth is fashion) = = 0.638 309,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101, 19975,  1052,  1006, 24532,  4553,  2003,  3653,  2094,  4827,
         2445,  3606,  2003,  4827,  1007,  1027,  1027,  1014,  1012,  6191,
         2620, 25048,   102])"
585,1,"['set', 'probability', 'algorithm', 'sample', 'predicted', 'data set', 'data']", Conditional probability,seg_23,we sample a photo from the data set and learn the ml algorithm predicted this photo was not about fashion. what is the probability that it was incorrect and the photo is about fashion?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  7099,  1037,  6302,  2013,  1996,  2951,  2275,  1998,
         4553,  1996, 19875,  9896, 10173,  2023,  6302,  2001,  2025,  2055,
         4827,  1012,  2054,  2003,  1996,  9723,  2008,  2009,  2001, 16542,
         1998,  1996,  6302,  2003,  2055,  4827,  1029,   102])"
586,1,"['set', 'data set', 'data']", Conditional probability,seg_23,"if the ml classifier suggests a photo is not about fashion, then it comes from the second row in the data set. of these 1603 photos, 112 were actually about fashion:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  2065,  1996, 19875,  2465, 18095,  6083,  1037,  6302,  2003,
         2025,  2055,  4827,  1010,  2059,  2009,  3310,  2013,  1996,  2117,
         5216,  1999,  1996,  2951,  2275,  1012,  1997,  2122, 25625,  7760,
         1010, 11176,  2020,  2941,  2055,  4827,  1024,   102])"
587,0,[], Conditional probability,seg_23,112 p (truth is fashion given mach learn is pred not) = = 0.070 1603,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101, 11176,  1052,  1006,  3606,  2003,  4827,  2445, 24532,  4553,
         2003,  3653,  2094,  2025,  1007,  1027,  1027,  1014,  1012,  5718,
         2692, 25625,   102])"
588,1,"['joint probabilities', 'marginal', 'probabilities', 'marginal and joint probabilities', 'joint']", Conditional probability,seg_23,3.2.2 marginal and joint probabilities,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.])","tensor([18462,  9723])","tensor([  101,  1017,  1012,  1016,  1012,  1016, 14785,  1998,  4101,  4013,
         3676, 14680,   102])"
589,1,"['marginal probabilities', 'row and column totals', 'marginal', 'column totals', 'set', 'probability', 'probabilities', 'sample', 'marginal probability', 'variables', 'data set', 'data', 'variable']", Conditional probability,seg_23,"figure 3.11 includes row and column totals for each variable separately in the photo classify data set. these totals represent marginal probabilities for the sample, which are the probabilities based on a single variable without regard to any other variables. for instance, a probability based solely on the mach learn variable is a marginal probability:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2340,  2950,  5216,  1998,  5930, 21948,
         2005,  2169,  8023, 10329,  1999,  1996,  6302, 26268,  2951,  2275,
         1012,  2122, 21948,  5050, 14785,  4013,  3676, 14680,  2005,  1996,
         7099,  1010,  2029,  2024,  1996,  4013,  3676, 14680,  2241,  2006,
         1037,  2309,  8023,  2302,  7634,  2000,  2151,  2060, 10857,  1012,
         2005,  6013,  1010,  1037,  9723,  2241,  9578,  2006,  1996, 24532,
         4553,  8023,  2003,  1037, 14785,  9723,  1024,   102])"
590,1,"['joint probability', 'probability', 'processes', 'outcomes', 'variables', 'joint']", Conditional probability,seg_23,a probability of outcomes for two or more variables or processes is called a joint probability:,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([18462,  9723])","tensor([  101,  1037,  9723,  1997, 13105,  2005,  2048,  2030,  2062, 10857,
         2030,  6194,  2003,  2170,  1037,  4101,  9723,  1024,   102])"
591,0,[], Conditional probability,seg_23,197 p (mach learn is pred fashion and truth is fashion) = = 0.11 1822,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101, 19975,  1052,  1006, 24532,  4553,  2003,  3653,  2094,  4827,
         1998,  3606,  2003,  4827,  1007,  1027,  1027,  1014,  1012,  2340,
        12307,   102])"
592,1,"['joint probability', 'joint', 'probability']", Conditional probability,seg_23,"it is common to substitute a comma for “and” in a joint probability, although using either the word “and” or a comma is acceptable:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2009,  2003,  2691,  2000,  7681,  1037,  4012,  2863,  2005,
         1523,  1998,  1524,  1999,  1037,  4101,  9723,  1010,  2348,  2478,
         2593,  1996,  2773,  1523,  1998,  1524,  2030,  1037,  4012,  2863,
         2003, 11701,  1024,   102])"
593,0,[], Conditional probability,seg_23,"p (mach learn is pred fashion, truth is fashion)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006, 24532,  4553,  2003,  3653,  2094,  4827,  1010,
         3606,  2003,  4827,  1007,   102])"
594,0,[], Conditional probability,seg_23,means the same thing as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([ 101, 2965, 1996, 2168, 2518, 2004,  102])"
595,0,[], Conditional probability,seg_23,p (mach learn is pred fashion and truth is fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006, 24532,  4553,  2003,  3653,  2094,  4827,  1998,
         3606,  2003,  4827,  1007,   102])"
596,1,"['joint probability', 'marginal', 'probability', 'processes', 'outcomes', 'marginal probability', 'variables', 'joint', 'variable']", Conditional probability,seg_23,"if a probability is based on a single variable, it is a marginal probability. the probability of outcomes for two or more variables or processes is called a joint probability.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2065,  1037,  9723,  2003,  2241,  2006,  1037,  2309,  8023,
         1010,  2009,  2003,  1037, 14785,  9723,  1012,  1996,  9723,  1997,
        13105,  2005,  2048,  2030,  2062, 10857,  2030,  6194,  2003,  2170,
         1037,  4101,  9723,  1012,   102])"
597,1,"['joint probability', 'joint probabilities', 'joint probability distribution', 'table', 'probability', 'table proportions', 'probabilities', 'sample', 'distribution', 'variables', 'joint', 'probability distribution']", Conditional probability,seg_23,"we use table proportions to summarize joint probabilities for the photo classify sample. these proportions are computed by dividing each count in figure 3.11 by the table’s total, 1822, to obtain the proportions in figure 3.13. the joint probability distribution of the mach learn and truth variables is shown in figure 3.14.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2224,  2795, 19173,  2000,  7680,  7849,  4697,  4101,
         4013,  3676, 14680,  2005,  1996,  6302, 26268,  7099,  1012,  2122,
        19173,  2024, 24806,  2011, 16023,  2169,  4175,  1999,  3275,  1017,
         1012,  2340,  2011,  1996,  2795,  1521,  1055,  2561,  1010, 12307,
         1010,  2000,  6855,  1996, 19173,  1999,  3275,  1017,  1012,  2410,
         1012,  1996,  4101,  9723,  4353,  1997,  1996, 24532,  4553,  1998,
         3606, 10857,  2003,  3491,  1999,  3275,  1017,  1012,  2403,  1012,
          102])"
598,1,"['table', 'set', 'probability', 'data set', 'data', 'probability table']", Conditional probability,seg_23,figure 3.13: probability table summarizing the photo classify data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2410,  1024,  9723,  2795,  7680,  7849,
         6026,  1996,  6302, 26268,  2951,  2275,  1012,   102])"
599,1,"['probability', 'outcome']", Conditional probability,seg_23,joint outcome probability mach learn is pred fashion and truth is fashion 0.1081 mach learn is pred fashion and truth is not 0.0121 mach learn is pred not and truth is fashion 0.0615 mach learn is pred not and truth is not 0.8183 total 1.0000,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  4101,  9560,  9723, 24532,  4553,  2003,  3653,  2094,  4827,
         1998,  3606,  2003,  4827,  1014,  1012, 10715,  2487, 24532,  4553,
         2003,  3653,  2094,  4827,  1998,  3606,  2003,  2025,  1014,  1012,
         5890, 17465, 24532,  4553,  2003,  3653,  2094,  2025,  1998,  3606,
         2003,  4827,  1014,  1012,  5757, 16068, 24532,  4553,  2003,  3653,
         2094,  2025,  1998,  3606,  2003,  2025,  1014,  1012,  6282,  2620,
         2509,  2561,  1015,  1012,  2199,  2692,   102])"
600,1,"['joint probability', 'data set', 'joint probability distribution', 'set', 'probability', 'distribution', 'joint', 'data', 'probability distribution']", Conditional probability,seg_23,figure 3.14: joint probability distribution for the photo classify data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2403,  1024,  4101,  9723,  4353,  2005,
         1996,  6302, 26268,  2951,  2275,  1012,   102])"
601,1,"['probability', 'disjoint', 'events', 'probabilities', 'distribution', 'probability distribution']", Conditional probability,seg_23,"verify figure 3.14 represents a probability distribution: events are disjoint, all probabilities are non-negative, and the probabilities sum to 1.25",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 1., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101, 20410,  3275,  1017,  1012,  2403,  5836,  1037,  9723,  4353,
         1024,  2824,  2024,  4487,  2015,  5558, 18447,  1010,  2035,  4013,
         3676, 14680,  2024,  2512,  1011,  4997,  1010,  1998,  1996,  4013,
         3676, 14680,  7680,  2000,  1015,  1012,  2423,   102])"
602,1,"['cases', 'marginal probabilities', 'data set', 'joint probabilities', 'marginal', 'set', 'probability', 'outcomes', 'probabilities', 'joint', 'data']", Conditional probability,seg_23,"we can compute marginal probabilities using joint probabilities in simple cases. for example, the probability a randomly selected photo from the data set is about fashion is found by summing the outcomes where truth takes value fashion:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2064, 24134, 14785,  4013,  3676, 14680,  2478,  4101,
         4013,  3676, 14680,  1999,  3722,  3572,  1012,  2005,  2742,  1010,
         1996,  9723,  1037, 18154,  3479,  6302,  2013,  1996,  2951,  2275,
         2003,  2055,  4827,  2003,  2179,  2011,  7680,  6562,  1996, 13105,
         2073,  3606,  3138,  3643,  4827,  1024,   102])"
603,0,[], Conditional probability,seg_23,p (truth is fashion) = p (mach learn is pred fashion and truth is fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  3606,  2003,  4827,  1007,  1027,  1052,  1006,
        24532,  4553,  2003,  3653,  2094,  4827,  1998,  3606,  2003,  4827,
         1007,   102])"
604,0,[], Conditional probability,seg_23,+ p (mach learn is pred not and truth is fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1009,  1052,  1006, 24532,  4553,  2003,  3653,  2094,  2025,
         1998,  3606,  2003,  4827,  1007,   102])"
605,1,"['probability', 'conditional probability', 'conditional']", Conditional probability,seg_23,3.2.3 defining conditional probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([18462,  9723])","tensor([  101,  1017,  1012,  1016,  1012,  1017, 12854, 18462,  9723,   102])"
606,1,"['estimation', 'probability', 'information', 'variable']", Conditional probability,seg_23,"the ml classifier predicts whether a photo is about fashion, even if it is not perfect. we would like to better understand how to use information from a variable like mach learn to improve our probability estimation of a second variable, which in this example is truth.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([18462,  9723])","tensor([  101,  1996, 19875,  2465, 18095, 16014,  2015,  3251,  1037,  6302,
         2003,  2055,  4827,  1010,  2130,  2065,  2009,  2003,  2025,  3819,
         1012,  2057,  2052,  2066,  2000,  2488,  3305,  2129,  2000,  2224,
         2592,  2013,  1037,  8023,  2066, 24532,  4553,  2000,  5335,  2256,
         9723, 24155,  1997,  1037,  2117,  8023,  1010,  2029,  1999,  2023,
         2742,  2003,  3606,  1012,   102])"
607,1,"['cases', 'set', 'probability', 'estimate', 'machine learning', 'random', 'limit', 'predicted', 'data set', 'data']", Conditional probability,seg_23,"the probability that a random photo from the data set is about fashion is about 0.17. if we knew the machine learning classifier predicted the photo was about fashion, could we get a better estimate of the probability the photo is actually about fashion? absolutely. to do so, we limit our view to only those 219 cases where the ml classifier predicted that the photo was about fashion and look at the fraction where the photo was actually about fashion:",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  9723,  2008,  1037,  6721,  6302,  2013,  1996,  2951,
         2275,  2003,  2055,  4827,  2003,  2055,  1014,  1012,  2459,  1012,
         2065,  2057,  2354,  1996,  3698,  4083,  2465, 18095, 10173,  1996,
         6302,  2001,  2055,  4827,  1010,  2071,  2057,  2131,  1037,  2488,
        10197,  1997,  1996,  9723,  1996,  6302,  2003,  2941,  2055,  4827,
         1029,  7078,  1012,  2000,  2079,  2061,  1010,  2057,  5787,  2256,
         3193,  2000,  2069,  2216, 20636,  3572,  2073,  1996, 19875,  2465,
        18095, 10173,  2008,  1996,  6302,  2001,  2055,  4827,  1998,  2298,
         2012,  1996, 12884,  2073,  1996,  6302,  2001,  2941,  2055,  4827,
         1024,   102])"
608,0,[], Conditional probability,seg_23,197 p (truth is fashion given mach learn is pred fashion) = = 0.900 219,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101, 19975,  1052,  1006,  3606,  2003,  4827,  2445, 24532,  4553,
         2003,  3653,  2094,  4827,  1007,  1027,  1027,  1014,  1012,  7706,
        20636,   102])"
609,1,"['conditional probability', 'probability', 'prediction', 'condition', 'conditional']", Conditional probability,seg_23,we call this a conditional probability because we computed the probability under a condition: the ml classifier prediction said the photo was about fashion.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2655,  2023,  1037, 18462,  9723,  2138,  2057, 24806,
         1996,  9723,  2104,  1037,  4650,  1024,  1996, 19875,  2465, 18095,
        17547,  2056,  1996,  6302,  2001,  2055,  4827,  1012,   102])"
610,1,"['conditional probability', 'probability', 'information', 'event', 'outcome', 'condition', 'outcome of interest', 'conditional']", Conditional probability,seg_23,"there are two parts to a conditional probability, the outcome of interest and the condition. it is useful to think of the condition as information we know to be true, and this information usually can be described as a known outcome or event. we generally separate the text inside our probability notation into the outcome of interest and the condition with a vertical bar:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2045,  2024,  2048,  3033,  2000,  1037, 18462,  9723,  1010,
         1996,  9560,  1997,  3037,  1998,  1996,  4650,  1012,  2009,  2003,
         6179,  2000,  2228,  1997,  1996,  4650,  2004,  2592,  2057,  2113,
         2000,  2022,  2995,  1010,  1998,  2023,  2592,  2788,  2064,  2022,
         2649,  2004,  1037,  2124,  9560,  2030,  2724,  1012,  2057,  3227,
         3584,  1996,  3793,  2503,  2256,  9723, 14869,  2046,  1996,  9560,
         1997,  3037,  1998,  1996,  4650,  2007,  1037,  7471,  3347,  1024,
          102])"
611,0,[], Conditional probability,seg_23,p (truth is fashion given mach learn is pred fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  3606,  2003,  4827,  2445, 24532,  4553,  2003,
         3653,  2094,  4827,  1007,   102])"
612,0,[], Conditional probability,seg_23,197 = p (truth is fashion | mach learn is pred fashion) = = 0.900 219,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101, 19975,  1027,  1052,  1006,  3606,  2003,  4827,  1064, 24532,
         4553,  2003,  3653,  2094,  4827,  1007,  1027,  1027,  1014,  1012,
         7706, 20636,   102])"
613,1,"['probability', 'algorithm', 'condition', 'predicted']", Conditional probability,seg_23,"in the last equation, we computed the probability a photo was about fashion based on the condition that the ml algorithm predicted it was about fashion as a fraction:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1999,  1996,  2197,  8522,  1010,  2057, 24806,  1996,  9723,
         1037,  6302,  2001,  2055,  4827,  2241,  2006,  1996,  4650,  2008,
         1996, 19875,  9896, 10173,  2009,  2001,  2055,  4827,  2004,  1037,
        12884,  1024,   102])"
614,0,[], Conditional probability,seg_23,p (truth is fashion | mach learn is pred fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  3606,  2003,  4827,  1064, 24532,  4553,  2003,
         3653,  2094,  4827,  1007,   102])"
615,1,['cases'], Conditional probability,seg_23,# cases where truth is fashion and mach learn is pred fashion,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1001,  3572,  2073,  3606,  2003,  4827,  1998, 24532,  4553,
         2003,  3653,  2094,  4827,   102])"
616,1,['cases'], Conditional probability,seg_23,= # cases where mach learn is pred fashion,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1027,  1001,  3572,  2073, 24532,  4553,  2003,  3653,  2094,
         4827,   102])"
617,1,"['cases', 'outcome', 'condition', 'outcome of interest']", Conditional probability,seg_23,"we considered only those cases that met the condition, mach learn is pred fashion, and then we computed the ratio of those cases that satisfied our outcome of interest, photo was actually about fashion.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2641,  2069,  2216,  3572,  2008,  2777,  1996,  4650,
         1010, 24532,  4553,  2003,  3653,  2094,  4827,  1010,  1998,  2059,
         2057, 24806,  1996,  6463,  1997,  2216,  3572,  2008,  8510,  2256,
         9560,  1997,  3037,  1010,  6302,  2001,  2941,  2055,  4827,  1012,
          102])"
618,1,"['joint probabilities', 'marginal', 'probabilities', 'marginal and joint probabilities', 'conditional probabilities', 'joint', 'rates', 'conditional', 'data', 'percentages']", Conditional probability,seg_23,"frequently, marginal and joint probabilities are provided instead of count data. for example, disease rates are commonly listed in percentages rather than in a count format. we would like to be able to compute conditional probabilities even when no counts are available, and we use the last equation as a template to understand this technique.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  4703,  1010, 14785,  1998,  4101,  4013,  3676, 14680,  2024,
         3024,  2612,  1997,  4175,  2951,  1012,  2005,  2742,  1010,  4295,
         6165,  2024,  4141,  3205,  1999,  7017,  2015,  2738,  2084,  1999,
         1037,  4175,  4289,  1012,  2057,  2052,  2066,  2000,  2022,  2583,
         2000, 24134, 18462,  4013,  3676, 14680,  2130,  2043,  2053,  9294,
         2024,  2800,  1010,  1998,  2057,  2224,  1996,  2197,  8522,  2004,
         1037, 23561,  2000,  3305,  2023,  6028,  1012,   102])"
619,1,"['cases', 'conditional probability', 'probability', 'information', 'outcome', 'sample', 'condition', 'outcome of interest', 'predicted', 'conditional', 'algorithm', 'data']", Conditional probability,seg_23,"we considered only those cases that satisfied the condition, where the ml algorithm predicted fashion. of these cases, the conditional probability was the fraction representing the outcome of interest, that the photo was about fashion. suppose we were provided only the information in figure 3.13, i.e. only probability data. then if we took a sample of 1000 photos, we would anticipate about 12.0% or 0.120 × 1000 = 120 would be predicted to be about fashion (mach learn is pred fashion). similarly, we would expect about 10.8% or 0.108 × 1000 = 108 to meet both the information criteria and represent our outcome of interest. then the conditional probability can be computed as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2641,  2069,  2216,  3572,  2008,  8510,  1996,  4650,
         1010,  2073,  1996, 19875,  9896, 10173,  4827,  1012,  1997,  2122,
         3572,  1010,  1996, 18462,  9723,  2001,  1996, 12884,  5052,  1996,
         9560,  1997,  3037,  1010,  2008,  1996,  6302,  2001,  2055,  4827,
         1012,  6814,  2057,  2020,  3024,  2069,  1996,  2592,  1999,  3275,
         1017,  1012,  2410,  1010,  1045,  1012,  1041,  1012,  2069,  9723,
         2951,  1012,  2059,  2065,  2057,  2165,  1037,  7099,  1997,  6694,
         7760,  1010,  2057,  2052,  3424,  6895, 17585,  2055,  2260,  1012,
         1014,  1003,  2030,  1014,  1012,  6036,  1095,  6694,  1027,  6036,
         2052,  2022, 10173,  2000,  2022,  2055,  4827,  1006, 24532,  4553,
         2003,  3653,  2094,  4827,  1007,  1012,  6660,  1010,  2057,  2052,
         5987,  2055,  2184,  1012,  1022,  1003,  2030,  1014,  1012, 10715,
         1095,  6694,  1027, 10715,  2000,  3113,  2119,  1996,  2592,  9181,
         1998,  5050,  2256,  9560,  1997,  3037,  1012,  2059,  1996, 18462,
         9723,  2064,  2022, 24806,  2004,   102])"
620,0,[], Conditional probability,seg_23,p (truth is fashion | mach learn is pred fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  3606,  2003,  4827,  1064, 24532,  4553,  2003,
         3653,  2094,  4827,  1007,   102])"
621,0,[], Conditional probability,seg_23,# (truth is fashion and mach learn is pred fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1001,  1006,  3606,  2003,  4827,  1998, 24532,  4553,  2003,
         3653,  2094,  4827,  1007,   102])"
622,0,[], Conditional probability,seg_23,= # (mach learn is pred fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1027,  1001,  1006, 24532,  4553,  2003,  3653,  2094,  4827,
         1007,   102])"
623,1,['probabilities'], Conditional probability,seg_23,"here we are examining exactly the fraction of two probabilities, 0.108 and 0.120, which we can write as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2182,  2057,  2024, 12843,  3599,  1996, 12884,  1997,  2048,
         4013,  3676, 14680,  1010,  1014,  1012, 10715,  1998,  1014,  1012,
         6036,  1010,  2029,  2057,  2064,  4339,  2004,   102])"
624,0,[], Conditional probability,seg_23,p (truth is fashion and mach learn is pred fashion) and p (mach learn is pred fashion).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  3606,  2003,  4827,  1998, 24532,  4553,  2003,
         3653,  2094,  4827,  1007,  1998,  1052,  1006, 24532,  4553,  2003,
         3653,  2094,  4827,  1007,  1012,   102])"
625,1,"['conditional probability', 'probability', 'probabilities', 'conditional']", Conditional probability,seg_23,the fraction of these probabilities is an example of the general formula for conditional probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  1996, 12884,  1997,  2122,  4013,  3676, 14680,  2003,  2019,
         2742,  1997,  1996,  2236,  5675,  2005, 18462,  9723,  1012,   102])"
626,1,"['conditional probability', 'probability', 'outcome', 'condition', 'conditional']", Conditional probability,seg_23,the conditional probability of outcome a given condition b is computed as the following:,tensor(1),"tensor([0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996, 18462,  9723,  1997,  9560,  1037,  2445,  4650,  1038,
         2003, 24806,  2004,  1996,  2206,  1024,   102])"
627,1,"['conditional probability', 'probability', 'prediction', 'condition', 'conditional', 'algorithm']", Conditional probability,seg_23,"(a) write out the following statement in conditional probability notation: “the probability that the ml prediction was correct, if the photo was about fashion”. here the condition is now based on the photo’s truth status, not the ml algorithm.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1006,  1037,  1007,  4339,  2041,  1996,  2206,  4861,  1999,
        18462,  9723, 14869,  1024,  1523,  1996,  9723,  2008,  1996, 19875,
        17547,  2001,  6149,  1010,  2065,  1996,  6302,  2001,  2055,  4827,
         1524,  1012,  2182,  1996,  4650,  2003,  2085,  2241,  2006,  1996,
         6302,  1521,  1055,  3606,  3570,  1010,  2025,  1996, 19875,  9896,
         1012,   102])"
628,1,"['probability', 'table']", Conditional probability,seg_23,26 (b) determine the probability from part (a). table 3.13 on page 96 may be helpful.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2656,  1006,  1038,  1007,  5646,  1996,  9723,  2013,  2112,
         1006,  1037,  1007,  1012,  2795,  1017,  1012,  2410,  2006,  3931,
         5986,  2089,  2022, 14044,  1012,   102])"
629,1,"['probability', 'algorithm']", Conditional probability,seg_23,(a) determine the probability that the algorithm is incorrect if it is known the photo is about fashion.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1006,  1037,  1007,  5646,  1996,  9723,  2008,  1996,  9896,
         2003, 16542,  2065,  2009,  2003,  2124,  1996,  6302,  2003,  2055,
         4827,  1012,   102])"
630,0,[], Conditional probability,seg_23,"(b) using the answers from part (a) and guided practice 3.29(b), compute",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1006,  1038,  1007,  2478,  1996,  6998,  2013,  2112,  1006,
         1037,  1007,  1998,  8546,  3218,  1017,  1012,  2756,  1006,  1038,
         1007,  1010, 24134,   102])"
631,0,[], Conditional probability,seg_23,p (mach learn is pred fashion | truth is fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006, 24532,  4553,  2003,  3653,  2094,  4827,  1064,
         3606,  2003,  4827,  1007,   102])"
632,0,[], Conditional probability,seg_23,+ p (mach learn is pred not | truth is fashion),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1009,  1052,  1006, 24532,  4553,  2003,  3653,  2094,  2025,
         1064,  3606,  2003,  4827,  1007,   102])"
633,0,[], Conditional probability,seg_23,(c) provide an intuitive argument to explain why the sum in (b) is 1.27,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1006,  1039,  1007,  3073,  2019, 29202,  6685,  2000,  4863,
         2339,  1996,  7680,  1999,  1006,  1038,  1007,  2003,  1015,  1012,
         2676,   102])"
634,1,"['set', 'sample', 'likelihood', 'data set', 'data']", Conditional probability,seg_23,"the smallpox data set provides a sample of 6,224 individuals from the year 1721 who were exposed to smallpox in boston. doctors at the time believed that inoculation, which involves exposing a person to the disease in a controlled form, could reduce the likelihood of death.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  1996, 25765,  2951,  2275,  3640,  1037,  7099,  1997,  1020,
         1010, 19711,  3633,  2013,  1996,  2095, 27689,  2040,  2020,  6086,
         2000, 25765,  1999,  3731,  1012,  7435,  2012,  1996,  2051,  3373,
         2008,  1999, 10085,  9513,  1010,  2029,  7336, 14944,  1037,  2711,
         2000,  1996,  4295,  1999,  1037,  4758,  2433,  1010,  2071,  5547,
         1996, 16593,  1997,  2331,  1012,   102])"
635,1,"['outcomes', 'levels', 'tables', 'variables', 'data', 'variable', 'case']", Conditional probability,seg_23,"each case represents one person with two variables: inoculated and result. the variable inoculated takes two levels: yes or no, indicating whether the person was inoculated or not. the variable result has outcomes lived or died. these data are summarized in tables 3.15 and 3.16.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2169,  2553,  5836,  2028,  2711,  2007,  2048, 10857,  1024,
         1999, 10085,  8898,  1998,  2765,  1012,  1996,  8023,  1999, 10085,
         8898,  3138,  2048,  3798,  1024,  2748,  2030,  2053,  1010,  8131,
         3251,  1996,  2711,  2001,  1999, 10085,  8898,  2030,  2025,  1012,
         1996,  8023,  2765,  2038, 13105,  2973,  2030,  2351,  1012,  2122,
         2951,  2024, 22539,  1999,  7251,  1017,  1012,  2321,  1998,  1017,
         1012,  2385,  1012,   102])"
636,0,[], Conditional probability,seg_23,inoculated yes no total lived 238 5136 5374 result died 6 844 850,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1999, 10085,  8898,  2748,  2053,  2561,  2973, 22030,  4868,
        21619,  5187,  2581,  2549,  2765,  2351,  1020,  6391,  2549, 15678,
          102])"
637,1,"['contingency table', 'table', 'set', 'data set', 'data']", Conditional probability,seg_23,figure 3.15: contingency table for the smallpox data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2321,  1024,  9530,  3436, 11916,  2795,
         2005,  1996, 25765,  2951,  2275,  1012,   102])"
638,1,"['table', 'table proportions', 'data']", Conditional probability,seg_23,"figure 3.16: table proportions for the smallpox data, computed by dividing each count by the table total, 6224.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2385,  1024,  2795, 19173,  2005,  1996,
        25765,  2951,  1010, 24806,  2011, 16023,  2169,  4175,  2011,  1996,
         2795,  2561,  1010,  5786, 18827,  1012,   102])"
639,1,['probability'], Conditional probability,seg_23,"write out, in formal notation, the probability a randomly selected person who was not inoculated died from smallpox, and find this probability.28",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  4339,  2041,  1010,  1999,  5337, 14869,  1010,  1996,  9723,
         1037, 18154,  3479,  2711,  2040,  2001,  2025,  1999, 10085,  8898,
         2351,  2013, 25765,  1010,  1998,  2424,  2023,  9723,  1012,  2654,
          102])"
640,1,['probability'], Conditional probability,seg_23,determine the probability that an inoculated person died from smallpox. how does this result compare with the result of guided practice 3.31?29,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  5646,  1996,  9723,  2008,  2019,  1999, 10085,  8898,  2711,
         2351,  2013, 25765,  1012,  2129,  2515,  2023,  2765, 12826,  2007,
         1996,  2765,  1997,  8546,  3218,  1017,  1012,  2861,  1029,  2756,
          102])"
641,1,"['data', 'experiment', 'confounding variables', 'variables', 'confounding']", Conditional probability,seg_23,the people of boston self-selected whether or not to be inoculated. (a) is this study observational or was this an experiment? (b) can we infer any causal connection using these data? (c) what are some potential confounding variables that might influence whether someone lived or died and also affect whether that person was inoculated?30,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  2111,  1997,  3731,  2969,  1011,  3479,  3251,  2030,
         2025,  2000,  2022,  1999, 10085,  8898,  1012,  1006,  1037,  1007,
         2003,  2023,  2817,  8089,  2389,  2030,  2001,  2023,  2019,  7551,
         1029,  1006,  1038,  1007,  2064,  2057,  1999,  7512,  2151, 28102,
         4434,  2478,  2122,  2951,  1029,  1006,  1039,  1007,  2054,  2024,
         2070,  4022,  9530, 14876,  8630,  2075, 10857,  2008,  2453,  3747,
         3251,  2619,  2973,  2030,  2351,  1998,  2036,  7461,  3251,  2008,
         2711,  2001,  1999, 10085,  8898,  1029,  2382,   102])"
642,1,"['multiplication rule', 'general multiplication rule']", Conditional probability,seg_23,3.2.5 general multiplication rule,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([18462,  9723])","tensor([  101,  1017,  1012,  1016,  1012,  1019,  2236, 24856,  3627,   102])"
643,1,"['processes', 'events', 'general multiplication rule', 'multiplication rule', 'independent']", Conditional probability,seg_23,section 3.1.7 introduced the multiplication rule for independent processes. here we provide the general multiplication rule for events that might not be independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2930,  1017,  1012,  1015,  1012,  1021,  3107,  1996, 24856,
         3627,  2005,  2981,  6194,  1012,  2182,  2057,  3073,  1996,  2236,
        24856,  3627,  2005,  2824,  2008,  2453,  2025,  2022,  2981,  1012,
          102])"
644,1,"['events', 'outcomes']", Conditional probability,seg_23,"if a and b represent two outcomes or events, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2065,  1037,  1998,  1038,  5050,  2048, 13105,  2030,  2824,
         1010,  2059,   102])"
645,1,"['outcome', 'condition', 'outcome of interest']", Conditional probability,seg_23,it is useful to think of a as the outcome of interest and b as the condition.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([18462,  9723])","tensor([ 101, 2009, 2003, 6179, 2000, 2228, 1997, 1037, 2004, 1996, 9560, 1997,
        3037, 1998, 1038, 2004, 1996, 4650, 1012,  102])"
646,1,"['conditional probability', 'probability', 'general multiplication rule', 'multiplication rule', 'conditional']", Conditional probability,seg_23,this general multiplication rule is simply a rearrangement of the conditional probability equation.,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2023,  2236, 24856,  3627,  2003,  3432,  1037,  4373, 24388,
        13665,  1997,  1996, 18462,  9723,  8522,  1012,   102])"
647,1,"['set', 'probability', 'information', 'data set', 'data']", Conditional probability,seg_23,"consider the smallpox data set. suppose we are given only two pieces of information: 96.08% of residents were not inoculated, and 85.88% of the residents who were not inoculated ended up surviving. how could we compute the probability that a resident was not inoculated and lived?",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  5136,  1996, 25765,  2951,  2275,  1012,  6814,  2057,  2024,
         2445,  2069,  2048,  4109,  1997,  2592,  1024,  5986,  1012,  5511,
         1003,  1997,  3901,  2020,  2025,  1999, 10085,  8898,  1010,  1998,
         5594,  1012,  6070,  1003,  1997,  1996,  3901,  2040,  2020,  2025,
         1999, 10085,  8898,  3092,  2039,  6405,  1012,  2129,  2071,  2057,
        24134,  1996,  9723,  2008,  1037,  6319,  2001,  2025,  1999, 10085,
         8898,  1998,  2973,  1029,   102])"
648,1,"['multiplication rule', 'general multiplication rule']", Conditional probability,seg_23,we will compute our answer using the general multiplication rule and then verify it using figure 3.16. we want to determine,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2097, 24134,  2256,  3437,  2478,  1996,  2236, 24856,
         3627,  1998,  2059, 20410,  2009,  2478,  3275,  1017,  1012,  2385,
         1012,  2057,  2215,  2000,  5646,   102])"
649,0,[], Conditional probability,seg_23,p (result = lived and inoculated = no),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  2765,  1027,  2973,  1998,  1999, 10085,  8898,
         1027,  2053,  1007,   102])"
650,0,[], Conditional probability,seg_23,and we are given that,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([ 101, 1998, 2057, 2024, 2445, 2008,  102])"
651,0,[], Conditional probability,seg_23,"among the 96.08% of people who were not inoculated, 85.88% survived:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  2426,  1996,  5986,  1012,  5511,  1003,  1997,  2111,  2040,
         2020,  2025,  1999, 10085,  8898,  1010,  5594,  1012,  6070,  1003,
         5175,  1024,   102])"
652,1,"['probability', 'general multiplication rule', 'intersection', 'multiplication rule', 'error']", Conditional probability,seg_23,this is equivalent to the general multiplication rule. we can confirm this probability in figure 3.16 at the intersection of no and lived (with a small rounding error).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2023,  2003,  5662,  2000,  1996,  2236, 24856,  3627,  1012,
         2057,  2064, 12210,  2023,  9723,  1999,  3275,  1017,  1012,  2385,
         2012,  1996,  6840,  1997,  2053,  1998,  2973,  1006,  2007,  1037,
         2235, 26939,  7561,  1007,  1012,   102])"
653,1,['probability'], Conditional probability,seg_23,use p (inoculated = yes) = 0.0392 and p (result = lived | inoculated = yes) = 0.9754 to determine the probability that a person was both inoculated and lived.31,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2224,  1052,  1006,  1999, 10085,  8898,  1027,  2748,  1007,
         1027,  1014,  1012,  6021,  2683,  2475,  1998,  1052,  1006,  2765,
         1027,  2973,  1064,  1999, 10085,  8898,  1027,  2748,  1007,  1027,
         1014,  1012,  5989, 27009,  2000,  5646,  1996,  9723,  2008,  1037,
         2711,  2001,  2119,  1999, 10085,  8898,  1998,  2973,  1012,  2861,
          102])"
654,0,[], Conditional probability,seg_23,"if 97.54% of the inoculated people lived, what proportion of inoculated people must have died?32",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([18462,  9723])","tensor([  101,  2065,  5989,  1012,  5139,  1003,  1997,  1996,  1999, 10085,
         8898,  2111,  2973,  1010,  2054, 10817,  1997,  1999, 10085,  8898,
         2111,  2442,  2031,  2351,  1029,  3590,   102])"
655,1,"['disjoint', 'outcomes', 'event', 'process', 'variable']", Conditional probability,seg_23,"let a1, ..., ak represent all the disjoint outcomes for a variable or process. then if b is an event, possibly for another variable or process, we have:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2292, 17350,  1010,  1012,  1012,  1012,  1010, 17712,  5050,
         2035,  1996,  4487,  2015,  5558, 18447, 13105,  2005,  1037,  8023,
         2030,  2832,  1012,  2059,  2065,  1038,  2003,  2019,  2724,  1010,
         4298,  2005,  2178,  8023,  2030,  2832,  1010,  2057,  2031,  1024,
          102])"
656,1,"['complement', 'information', 'event']", Conditional probability,seg_23,the rule for complements also holds when an event and its complement are conditioned on the same information:,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  3627,  2005, 13711,  2015,  2036,  4324,  2043,  2019,
         2724,  1998,  2049, 13711,  2024, 22442,  2006,  1996,  2168,  2592,
         1024,   102])"
657,1,"['risk', 'probabilities']", Conditional probability,seg_23,"based on the probabilities computed above, does it appear that inoculation is effective at reducing the risk of death from smallpox?33",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2241,  2006,  1996,  4013,  3676, 14680, 24806,  2682,  1010,
         2515,  2009,  3711,  2008,  1999, 10085,  9513,  2003,  4621,  2012,
         8161,  1996,  3891,  1997,  2331,  2013, 25765,  1029,  3943,   102])"
658,1,"['conditional probability', 'probability', 'independence', 'conditional']", Conditional probability,seg_23,3.2.6 independence considerations in conditional probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.])","tensor([18462,  9723])","tensor([  101,  1017,  1012,  1016,  1012,  1020,  4336, 16852,  1999, 18462,
         9723,   102])"
659,1,"['events', 'information', 'probabilities', 'outcome', 'conditional probabilities', 'conditional', 'independent']", Conditional probability,seg_23,"if two events are independent, then knowing the outcome of one should provide no information about the other. we can show this is mathematically true using conditional probabilities.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2065,  2048,  2824,  2024,  2981,  1010,  2059,  4209,  1996,
         9560,  1997,  2028,  2323,  3073,  2053,  2592,  2055,  1996,  2060,
         1012,  2057,  2064,  2265,  2023,  2003,  8045,  2135,  2995,  2478,
        18462,  4013,  3676, 14680,  1012,   102])"
660,1,['outcomes'], Conditional probability,seg_23,let x and y represent the outcomes of rolling two dice.34,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2292,  1060,  1998,  1061,  5050,  1996, 13105,  1997,  5291,
         2048, 18740,  1012,  4090,   102])"
661,1,['probability'], Conditional probability,seg_23,"(a) what is the probability that the first die, x, is 1?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([18462,  9723])","tensor([ 101, 1006, 1037, 1007, 2054, 2003, 1996, 9723, 2008, 1996, 2034, 3280,
        1010, 1060, 1010, 2003, 1015, 1029,  102])"
662,1,['probability'], Conditional probability,seg_23,(b) what is the probability that both x and y are 1?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([ 101, 1006, 1038, 1007, 2054, 2003, 1996, 9723, 2008, 2119, 1060, 1998,
        1061, 2024, 1015, 1029,  102])"
663,1,"['probability', 'conditional probability', 'conditional']", Conditional probability,seg_23,(c) use the formula for conditional probability to compute p (y = 1 | x = 1).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1006,  1039,  1007,  2224,  1996,  5675,  2005, 18462,  9723,
         2000, 24134,  1052,  1006,  1061,  1027,  1015,  1064,  1060,  1027,
         1015,  1007,  1012,   102])"
664,1,"['processes', 'information', 'independence', 'multiplication rule']", Conditional probability,seg_23,we can show in guided practice 3.38(c) that the conditioning information has no influence by using the multiplication rule for independence processes:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2064,  2265,  1999,  8546,  3218,  1017,  1012,  4229,
         1006,  1039,  1007,  2008,  1996, 14372,  2592,  2038,  2053,  3747,
         2011,  2478,  1996, 24856,  3627,  2005,  4336,  6194,  1024,   102])"
665,1,"['outcomes', 'table']", Conditional probability,seg_23,ron is watching a roulette table in a casino and notices that the last five outcomes were black. he figures that the chances of getting black six times in a row is very small (about 1/64) and puts his paycheck on red. what is wrong with his reasoning?35,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  6902,  2003,  3666,  1037, 20996,  9307,  4674,  2795,  1999,
         1037,  9270,  1998, 14444,  2008,  1996,  2197,  2274, 13105,  2020,
         2304,  1012,  2002,  4481,  2008,  1996,  9592,  1997,  2893,  2304,
         2416,  2335,  1999,  1037,  5216,  2003,  2200,  2235,  1006,  2055,
         1015,  1013,  4185,  1007,  1998,  8509,  2010,  3477,  5403,  3600,
         2006,  2417,  1012,  2054,  2003,  3308,  2007,  2010, 13384,  1029,
         3486,   102])"
666,1,['tree diagrams'], Conditional probability,seg_23,3.2.7 tree diagrams,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([18462,  9723])","tensor([  101,  1017,  1012,  1016,  1012,  1021,  3392, 26309,   102])"
667,1,"['processes', 'outcomes', 'probabilities', 'process', 'data']", Conditional probability,seg_23,tree diagrams are a tool to organize outcomes and probabilities around the structure of the data. they are most useful when two or more processes occur in a sequence and each process is conditioned on its predecessors.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3392, 26309,  2024,  1037,  6994,  2000, 10939, 13105,  1998,
         4013,  3676, 14680,  2105,  1996,  3252,  1997,  1996,  2951,  1012,
         2027,  2024,  2087,  6179,  2043,  2048,  2030,  2062,  6194,  5258,
         1999,  1037,  5537,  1998,  2169,  2832,  2003, 22442,  2006,  2049,
        16372,  1012,   102])"
668,1,"['tree diagram', 'population', 'rates', 'data']", Conditional probability,seg_23,"the smallpox data fit this description. we see the population as split by inoculation: yes and no. following this split, survival rates were observed for each group. this structure is reflected in the tree diagram shown in figure 3.17. the first branch for inoculation is said to be the primary branch while the other branches are secondary.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996, 25765,  2951,  4906,  2023,  6412,  1012,  2057,  2156,
         1996,  2313,  2004,  3975,  2011,  1999, 10085,  9513,  1024,  2748,
         1998,  2053,  1012,  2206,  2023,  3975,  1010,  7691,  6165,  2020,
         5159,  2005,  2169,  2177,  1012,  2023,  3252,  2003,  7686,  1999,
         1996,  3392, 16403,  3491,  1999,  3275,  1017,  1012,  2459,  1012,
         1996,  2034,  3589,  2005,  1999, 10085,  9513,  2003,  2056,  2000,
         2022,  1996,  3078,  3589,  2096,  1996,  2060,  5628,  2024,  3905,
         1012,   102])"
669,1,"['set', 'tree diagram', 'data set', 'data']", Conditional probability,seg_23,figure 3.17: a tree diagram of the smallpox data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3275,  1017,  1012,  2459,  1024,  1037,  3392, 16403,  1997,
         1996, 25765,  2951,  2275,  1012,   102])"
670,1,"['marginal probabilities', 'joint probabilities', 'marginal', 'probability', 'information', 'probabilities', 'general multiplication rule', 'tree diagram', 'multiplication rule', 'conditional probabilities', 'joint', 'conditional', 'data']", Conditional probability,seg_23,"tree diagrams are annotated with marginal and conditional probabilities, as shown in figure 3.17. this tree diagram splits the smallpox data by inoculation into the yes and no groups with respective marginal probabilities 0.0392 and 0.9608. the secondary branches are conditioned on the first, so we assign conditional probabilities to these branches. for example, the top branch in figure 3.17 is the probability that result = lived conditioned on the information that inoculated = yes. we may (and usually do) construct joint probabilities at the end of each branch in our tree by multiplying the numbers we come across as we move from left to right. these joint probabilities are computed using the general multiplication rule:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3392, 26309,  2024,  5754, 17287,  3064,  2007, 14785,  1998,
        18462,  4013,  3676, 14680,  1010,  2004,  3491,  1999,  3275,  1017,
         1012,  2459,  1012,  2023,  3392, 16403, 19584,  1996, 25765,  2951,
         2011,  1999, 10085,  9513,  2046,  1996,  2748,  1998,  2053,  2967,
         2007,  7972, 14785,  4013,  3676, 14680,  1014,  1012,  6021,  2683,
         2475,  1998,  1014,  1012, 26637,  2620,  1012,  1996,  3905,  5628,
         2024, 22442,  2006,  1996,  2034,  1010,  2061,  2057, 23911, 18462,
         4013,  3676, 14680,  2000,  2122,  5628,  1012,  2005,  2742,  1010,
         1996,  2327,  3589,  1999,  3275,  1017,  1012,  2459,  2003,  1996,
         9723,  2008,  2765,  1027,  2973, 22442,  2006,  1996,  2592,  2008,
         1999, 10085,  8898,  1027,  2748,  1012,  2057,  2089,  1006,  1998,
         2788,  2079,  1007,  9570,  4101,  4013,  3676, 14680,  2012,  1996,
         2203,  1997,  2169,  3589,  1999,  2256,  3392,  2011,  4800, 22086,
         2075,  1996,  3616,  2057,  2272,  2408,  2004,  2057,  2693,  2013,
         2187,  2000,  2157,  1012,  2122,  4101,  4013,  3676, 14680,  2024,
        24806,  2478,  1996,  2236, 24856,  3627,  1024,   102])"
671,0,[], Conditional probability,seg_23,p (inoculated = yes and result = lived),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  1999, 10085,  8898,  1027,  2748,  1998,  2765,
         1027,  2973,  1007,   102])"
672,0,[], Conditional probability,seg_23,= p (inoculated = yes)× p (result = lived|inoculated = yes),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  1027,  1052,  1006,  1999, 10085,  8898,  1027,  2748,  1007,
         1095,  1052,  1006,  2765,  1027,  2973,  1064,  1999, 10085,  8898,
         1027,  2748,  1007,   102])"
673,1,"['probability', 'statistics']", Conditional probability,seg_23,"consider the midterm and final for a statistics class. suppose 13% of students earned an a on the midterm. of those students who earned an a on the midterm, 47% received an a on the final, and 11% of the students who earned lower than an a on the midterm received an a on the final. you randomly pick up a final exam and notice the student received an a. what is the probability that this student earned an a on the midterm?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  5136,  1996,  3054,  3334,  2213,  1998,  2345,  2005,  1037,
         6747,  2465,  1012,  6814,  2410,  1003,  1997,  2493,  3687,  2019,
         1037,  2006,  1996,  3054,  3334,  2213,  1012,  1997,  2216,  2493,
         2040,  3687,  2019,  1037,  2006,  1996,  3054,  3334,  2213,  1010,
         4700,  1003,  2363,  2019,  1037,  2006,  1996,  2345,  1010,  1998,
         2340,  1003,  1997,  1996,  2493,  2040,  3687,  2896,  2084,  2019,
         1037,  2006,  1996,  3054,  3334,  2213,  2363,  2019,  1037,  2006,
         1996,  2345,  1012,  2017, 18154,  4060,  2039,  1037,  2345, 11360,
         1998,  5060,  1996,  3076,  2363,  2019,  1037,  1012,  2054,  2003,
         1996,  9723,  2008,  2023,  3076,  3687,  2019,  1037,  2006,  1996,
         3054,  3334,  2213,  1029,   102])"
674,1,"['conditional probability', 'probability', 'probabilities', 'conditional']", Conditional probability,seg_23,"the end-goal is to find p (midterm = a|final = a). to calculate this conditional probability, we need the following probabilities:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  2203,  1011,  3125,  2003,  2000,  2424,  1052,  1006,
         3054,  3334,  2213,  1027,  1037,  1064,  2345,  1027,  1037,  1007,
         1012,  2000, 18422,  2023, 18462,  9723,  1010,  2057,  2342,  1996,
         2206,  4013,  3676, 14680,  1024,   102])"
675,1,"['tree diagram', 'information', 'probabilities']", Conditional probability,seg_23,"however, this information is not provided, and it is not obvious how to calculate these probabilities. since we aren’t sure how to proceed, it is useful to organize the information into a tree diagram:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2174,  1010,  2023,  2592,  2003,  2025,  3024,  1010,  1998,
         2009,  2003,  2025,  5793,  2129,  2000, 18422,  2122,  4013,  3676,
        14680,  1012,  2144,  2057,  4995,  1521,  1056,  2469,  2129,  2000,
        10838,  1010,  2009,  2003,  6179,  2000, 10939,  1996,  2592,  2046,
         1037,  3392, 16403,  1024,   102])"
676,1,"['marginal probabilities', 'marginal', 'probabilities', 'tree diagram', 'conditional probabilities', 'variables', 'conditional', 'case']", Conditional probability,seg_23,"when constructing a tree diagram, variables provided with marginal probabilities are often used to create the tree’s primary branches; in this case, the marginal probabilities are provided for midterm grades. the final grades, which correspond to the conditional probabilities provided, will be shown on the secondary branches.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2043, 15696,  1037,  3392, 16403,  1010, 10857,  3024,  2007,
        14785,  4013,  3676, 14680,  2024,  2411,  2109,  2000,  3443,  1996,
         3392,  1521,  1055,  3078,  5628,  1025,  1999,  2023,  2553,  1010,
         1996, 14785,  4013,  3676, 14680,  2024,  3024,  2005,  3054,  3334,
         2213,  7022,  1012,  1996,  2345,  7022,  1010,  2029, 17254,  2000,
         1996, 18462,  4013,  3676, 14680,  3024,  1010,  2097,  2022,  3491,
         2006,  1996,  3905,  5628,  1012,   102])"
677,1,"['tree diagram', 'probabilities']", Conditional probability,seg_23,"with the tree diagram constructed, we may compute the required probabilities:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2007,  1996,  3392, 16403,  3833,  1010,  2057,  2089, 24134,
         1996,  3223,  4013,  3676, 14680,  1024,   102])"
678,1,"['joint probabilities', 'marginal', 'probability', 'probabilities', 'marginal probability', 'joint']", Conditional probability,seg_23,"the marginal probability, p (final = a), was calculated by adding up all the joint probabilities on the right side of the tree that correspond to final = a. we may now finally take the ratio of the two probabilities:",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996, 14785,  9723,  1010,  1052,  1006,  2345,  1027,  1037,
         1007,  1010,  2001, 10174,  2011,  5815,  2039,  2035,  1996,  4101,
         4013,  3676, 14680,  2006,  1996,  2157,  2217,  1997,  1996,  3392,
         2008, 17254,  2000,  2345,  1027,  1037,  1012,  2057,  2089,  2085,
         2633,  2202,  1996,  6463,  1997,  1996,  2048,  4013,  3676, 14680,
         1024,   102])"
679,1,['probability'], Conditional probability,seg_23,the probability the student also earned an a on the midterm is about 0.39.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([18462,  9723])","tensor([ 101, 1996, 9723, 1996, 3076, 2036, 3687, 2019, 1037, 2006, 1996, 3054,
        3334, 2213, 2003, 2055, 1014, 1012, 4464, 1012,  102])"
680,1,"['probability', 'information', 'tree diagrams', 'tree diagram', 'statistics']", Conditional probability,seg_23,"after an introductory statistics course, 78% of students can successfully construct tree diagrams. of those who can construct tree diagrams, 97% passed, while only 57% of those students who could not construct tree diagrams passed. (a) organize this information into a tree diagram. (b) what is the probability that a randomly selected student passed? (c) compute the probability a student is",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2044,  2019, 23889,  6747,  2607,  1010,  6275,  1003,  1997,
         2493,  2064,  5147,  9570,  3392, 26309,  1012,  1997,  2216,  2040,
         2064,  9570,  3392, 26309,  1010,  5989,  1003,  2979,  1010,  2096,
         2069,  5401,  1003,  1997,  2216,  2493,  2040,  2071,  2025,  9570,
         3392, 26309,  2979,  1012,  1006,  1037,  1007, 10939,  2023,  2592,
         2046,  1037,  3392, 16403,  1012,  1006,  1038,  1007,  2054,  2003,
         1996,  9723,  2008,  1037, 18154,  3479,  3076,  2979,  1029,  1006,
         1039,  1007, 24134,  1996,  9723,  1037,  3076,  2003,   102])"
681,1,['tree diagram'], Conditional probability,seg_23,36 able to construct a tree diagram if it is known that she passed.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  4029,  2583,  2000,  9570,  1037,  3392, 16403,  2065,  2009,
         2003,  2124,  2008,  2016,  2979,  1012,   102])"
682,0,[], Conditional probability,seg_23,3.2.8 bayes’ theorem,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([ 101, 1017, 1012, 1016, 1012, 1022, 3016, 2229, 1521, 9872,  102])"
683,1,"['probability', 'conditional probability', 'conditional']", Conditional probability,seg_23,"in many instances, we are given a conditional probability of the form",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1999,  2116, 12107,  1010,  2057,  2024,  2445,  1037, 18462,
         9723,  1997,  1996,  2433,   102])"
684,1,['variable'], Conditional probability,seg_23,p (statement about variable 1 | statement about variable 2),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([ 101, 1052, 1006, 4861, 2055, 8023, 1015, 1064, 4861, 2055, 8023, 1016,
        1007,  102])"
685,1,"['probability', 'conditional probability', 'conditional']", Conditional probability,seg_23,but we would really like to know the inverted conditional probability:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2021,  2057,  2052,  2428,  2066,  2000,  2113,  1996, 20037,
        18462,  9723,  1024,   102])"
686,1,['variable'], Conditional probability,seg_23,p (statement about variable 2 | statement about variable 1),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([ 101, 1052, 1006, 4861, 2055, 8023, 1016, 1064, 4861, 2055, 8023, 1015,
        1007,  102])"
687,1,"['cases', 'conditional probability', 'probability', 'tree diagram', 'conditional']", Conditional probability,seg_23,"tree diagrams can be used to find the second conditional probability when given the first. however, sometimes it is not possible to draw the scenario in a tree diagram. in these cases, we can apply a very useful and general formula: bayes’ theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3392, 26309,  2064,  2022,  2109,  2000,  2424,  1996,  2117,
        18462,  9723,  2043,  2445,  1996,  2034,  1012,  2174,  1010,  2823,
         2009,  2003,  2025,  2825,  2000,  4009,  1996, 11967,  1999,  1037,
         3392, 16403,  1012,  1999,  2122,  3572,  1010,  2057,  2064,  6611,
         1037,  2200,  6179,  1998,  2236,  5675,  1024,  3016,  2229,  1521,
         9872,  1012,   102])"
688,1,"['probabilities', 'tree diagram', 'conditional probabilities', 'conditional']", Conditional probability,seg_23,we first take a critical look at an example of inverting conditional probabilities where we still apply a tree diagram.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2034,  2202,  1037,  4187,  2298,  2012,  2019,  2742,
         1997,  1999, 16874,  2075, 18462,  4013,  3676, 14680,  2073,  2057,
         2145,  6611,  1037,  3392, 16403,  1012,   102])"
689,0,[], Conditional probability,seg_23,able to construct pass class,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([ 101, 2583, 2000, 9570, 3413, 2465,  102])"
690,1,"['probability', 'random', 'false negative', 'false positive', 'test']", Conditional probability,seg_23,"in canada, about 0.35% of women over 40 will develop breast cancer in any given year. a common screening test for cancer is the mammogram, but this test is not perfect. in about 11% of patients with breast cancer, the test gives a false negative: it indicates a woman does not have breast cancer when she does have breast cancer. similarly, the test gives a false positive in 7% of patients who do not have breast cancer: it indicates these patients have breast cancer when they actually do not. if we tested a random woman over 40 for breast cancer using a mammogram and the test came back positive – that is, the test suggested the patient has cancer – what is the probability that the patient actually has breast cancer?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1999,  2710,  1010,  2055,  1014,  1012,  3486,  1003,  1997,
         2308,  2058,  2871,  2097,  4503,  7388,  4456,  1999,  2151,  2445,
         2095,  1012,  1037,  2691, 11326,  3231,  2005,  4456,  2003,  1996,
         5003,  7382,  8649,  6444,  1010,  2021,  2023,  3231,  2003,  2025,
         3819,  1012,  1999,  2055,  2340,  1003,  1997,  5022,  2007,  7388,
         4456,  1010,  1996,  3231,  3957,  1037,  6270,  4997,  1024,  2009,
         7127,  1037,  2450,  2515,  2025,  2031,  7388,  4456,  2043,  2016,
         2515,  2031,  7388,  4456,  1012,  6660,  1010,  1996,  3231,  3957,
         1037,  6270,  3893,  1999,  1021,  1003,  1997,  5022,  2040,  2079,
         2025,  2031,  7388,  4456,  1024,  2009,  7127,  2122,  5022,  2031,
         7388,  4456,  2043,  2027,  2941,  2079,  2025,  1012,  2065,  2057,
         7718,  1037,  6721,  2450,  2058,  2871,  2005,  7388,  4456,  2478,
         1037,  5003,  7382,  8649,  6444,  1998,  1996,  3231,  2234,  2067,
         3893,  1516,  2008,  2003,  1010,  1996,  3231,  4081,  1996,  5776,
         2038,  4456,  1516,  2054,  2003,  1996,  9723,  2008,  1996,  5776,
         2941,  2038,  7388,  4456,  1029,   102])"
691,1,"['probability', 'information', 'test']", Conditional probability,seg_23,"notice that we are given sufficient information to quickly compute the probability of testing positive if a woman has breast cancer (1.00 − 0.11 = 0.89). however, we seek the inverted probability of cancer given a positive test result. (watch out for the non-intuitive medical language: a positive test result suggests the possible presence of cancer in a mammogram screening.) this inverted probability may be broken into two pieces:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  5060,  2008,  2057,  2024,  2445,  7182,  2592,  2000,  2855,
        24134,  1996,  9723,  1997,  5604,  3893,  2065,  1037,  2450,  2038,
         7388,  4456,  1006,  1015,  1012,  4002,  1597,  1014,  1012,  2340,
         1027,  1014,  1012,  6486,  1007,  1012,  2174,  1010,  2057,  6148,
         1996, 20037,  9723,  1997,  4456,  2445,  1037,  3893,  3231,  2765,
         1012,  1006,  3422,  2041,  2005,  1996,  2512,  1011, 29202,  2966,
         2653,  1024,  1037,  3893,  3231,  2765,  6083,  1996,  2825,  3739,
         1997,  4456,  1999,  1037,  5003,  7382,  8649,  6444, 11326,  1012,
         1007,  2023, 20037,  9723,  2089,  2022,  3714,  2046,  2048,  4109,
         1024,   102])"
692,0,[], Conditional probability,seg_23,p (has bc and mammogram+) p (has bc | mammogram+) = p (mammogram+),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([ 101, 1052, 1006, 2038, 4647, 1998, 5003, 7382, 8649, 6444, 1009, 1007,
        1052, 1006, 2038, 4647, 1064, 5003, 7382, 8649, 6444, 1009, 1007, 1027,
        1052, 1006, 5003, 7382, 8649, 6444, 1009, 1007,  102])"
693,1,"['tree diagram', 'probabilities']", Conditional probability,seg_23,where “has bc” is an abbreviation for the patient having breast cancer and “mammogram+” means the mammogram screening was positive. we can construct a tree diagram for these probabilities:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2073,  1523,  2038,  4647,  1524,  2003,  2019, 22498,  2005,
         1996,  5776,  2383,  7388,  4456,  1998,  1523,  5003,  7382,  8649,
         6444,  1009,  1524,  2965,  1996,  5003,  7382,  8649,  6444, 11326,
         2001,  3893,  1012,  2057,  2064,  9570,  1037,  3392, 16403,  2005,
         2122,  4013,  3676, 14680,  1024,   102])"
694,1,['probability'], Conditional probability,seg_23,the probability the patient has breast cancer and the mammogram is positive is,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([ 101, 1996, 9723, 1996, 5776, 2038, 7388, 4456, 1998, 1996, 5003, 7382,
        8649, 6444, 2003, 3893, 2003,  102])"
695,1,"['probability', 'test']", Conditional probability,seg_23,the probability of a positive test result is the sum of the two corresponding scenarios:,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  9723,  1997,  1037,  3893,  3231,  2765,  2003,  1996,
         7680,  1997,  1996,  2048,  7978, 16820,  1024,   102])"
696,1,['probability'], Conditional probability,seg_23,"then if the mammogram screening is positive for a patient, the probability the patient has breast cancer is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2059,  2065,  1996,  5003,  7382,  8649,  6444, 11326,  2003,
         3893,  2005,  1037,  5776,  1010,  1996,  9723,  1996,  5776,  2038,
         7388,  4456,  2003,   102])"
697,0,[], Conditional probability,seg_23,p (has bc and mammogram+) p (has bc | mammogram+) = p (mammogram+),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([ 101, 1052, 1006, 2038, 4647, 1998, 5003, 7382, 8649, 6444, 1009, 1007,
        1052, 1006, 2038, 4647, 1064, 5003, 7382, 8649, 6444, 1009, 1007, 1027,
        1052, 1006, 5003, 7382, 8649, 6444, 1009, 1007,  102])"
698,0,[], Conditional probability,seg_23,"that is, even if a patient has a positive mammogram screening, there is still only a 4% chance that she has breast cancer.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462,  9723])","tensor([  101,  2008,  2003,  1010,  2130,  2065,  1037,  5776,  2038,  1037,
         3893,  5003,  7382,  8649,  6444, 11326,  1010,  2045,  2003,  2145,
         2069,  1037,  1018,  1003,  3382,  2008,  2016,  2038,  7388,  4456,
         1012,   102])"
699,1,"['tests', 'condition', 'test']", Conditional probability,seg_23,"example 3.42 highlights why doctors often run more tests regardless of a first positive test result. when a medical condition is rare, a single positive test isn’t generally definitive.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([18462,  9723])","tensor([  101,  2742,  1017,  1012,  4413, 11637,  2339,  7435,  2411,  2448,
         2062,  5852,  7539,  1997,  1037,  2034,  3893,  3231,  2765,  1012,
         2043,  1037,  2966,  4650,  2003,  4678,  1010,  1037,  2309,  3893,
         3231,  3475,  1521,  1056,  3227, 15764,  1012,   102])"
700,1,['tree diagram'], Conditional probability,seg_23,"consider again the last equation of example 3.42. using the tree diagram, we can see that the numerator (the top of the fraction) is equal to the following product:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  5136,  2153,  1996,  2197,  8522,  1997,  2742,  1017,  1012,
         4413,  1012,  2478,  1996,  3392, 16403,  1010,  2057,  2064,  2156,
         2008,  1996, 16371,  5017,  8844,  1006,  1996,  2327,  1997,  1996,
        12884,  1007,  2003,  5020,  2000,  1996,  2206,  4031,  1024,   102])"
701,1,"['probability', 'probabilities']", Conditional probability,seg_23,the denominator – the probability the screening was positive – is equal to the sum of probabilities for each positive screening scenario:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  7939, 20936, 27413,  1516,  1996,  9723,  1996, 11326,
         2001,  3893,  1516,  2003,  5020,  2000,  1996,  7680,  1997,  4013,
         3676, 14680,  2005,  2169,  3893, 11326, 11967,  1024,   102])"
702,1,"['conditional probability', 'marginal', 'probability', 'probabilities', 'tree diagram', 'marginal probability', 'conditional']", Conditional probability,seg_23,"in the example, each of the probabilities on the right side was broken down into a product of a conditional probability and marginal probability using the tree diagram.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1999,  1996,  2742,  1010,  2169,  1997,  1996,  4013,  3676,
        14680,  2006,  1996,  2157,  2217,  2001,  3714,  2091,  2046,  1037,
         4031,  1997,  1037, 18462,  9723,  1998, 14785,  9723,  2478,  1996,
         3392, 16403,  1012,   102])"
703,1,"['conditional probability', 'probability', 'conditional']", Conditional probability,seg_23,we can see an application of bayes’ theorem by substituting the resulting probability expressions into the numerator and denominator of the original conditional probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2057,  2064,  2156,  2019,  4646,  1997,  3016,  2229,  1521,
         9872,  2011,  4942, 21532,  1996,  4525,  9723, 11423,  2046,  1996,
        16371,  5017,  8844,  1998,  7939, 20936, 27413,  1997,  1996,  2434,
        18462,  9723,  1012,   102])"
704,1,"['conditional probability', 'probability', 'conditional', 'variable']", Conditional probability,seg_23,consider the following conditional probability for variable 1 and variable 2:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  5136,  1996,  2206, 18462,  9723,  2005,  8023,  1015,  1998,
         8023,  1016,  1024,   102])"
705,1,"['outcome', 'variable']", Conditional probability,seg_23,p (outcome a1 of variable 1 | outcome b of variable 2),tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1052,  1006,  9560, 17350,  1997,  8023,  1015,  1064,  9560,
         1038,  1997,  8023,  1016,  1007,   102])"
706,1,"['conditional probability', 'probability', 'states', 'conditional']", Conditional probability,seg_23,bayes’ theorem states that this conditional probability can be identified as the following fraction:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([18462,  9723])","tensor([  101,  3016,  2229,  1521,  9872,  2163,  2008,  2023, 18462,  9723,
         2064,  2022,  4453,  2004,  1996,  2206, 12884,  1024,   102])"
707,1,"['outcomes', 'variable']", Conditional probability,seg_23,"where a2, a3, ..., and ak represent all other possible outcomes of the first variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2073, 22441,  1010,  1037,  2509,  1010,  1012,  1012,  1012,
         1010,  1998, 17712,  5050,  2035,  2060,  2825, 13105,  1997,  1996,
         2034,  8023,  1012,   102])"
708,1,"['marginal', 'probability', 'tree diagrams', 'probabilities', 'marginal probability']", Conditional probability,seg_23,"bayes’ theorem is a generalization of what we have done using tree diagrams. the numerator identifies the probability of getting both a1 and b. the denominator is the marginal probability of getting b. this bottom component of the fraction appears long and complicated since we have to add up probabilities from all of the different ways to get b. we always completed this step when using tree diagrams. however, we usually did it in a separate step so it didn’t seem as complex. to apply bayes’ theorem correctly, there are two preparatory steps:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3016,  2229,  1521,  9872,  2003,  1037,  2236,  3989,  1997,
         2054,  2057,  2031,  2589,  2478,  3392, 26309,  1012,  1996, 16371,
         5017,  8844, 14847,  1996,  9723,  1997,  2893,  2119, 17350,  1998,
         1038,  1012,  1996,  7939, 20936, 27413,  2003,  1996, 14785,  9723,
         1997,  2893,  1038,  1012,  2023,  3953,  6922,  1997,  1996, 12884,
         3544,  2146,  1998,  8552,  2144,  2057,  2031,  2000,  5587,  2039,
         4013,  3676, 14680,  2013,  2035,  1997,  1996,  2367,  3971,  2000,
         2131,  1038,  1012,  2057,  2467,  2949,  2023,  3357,  2043,  2478,
         3392, 26309,  1012,  2174,  1010,  2057,  2788,  2106,  2009,  1999,
         1037,  3584,  3357,  2061,  2009,  2134,  1521,  1056,  4025,  2004,
         3375,  1012,  2000,  6611,  3016,  2229,  1521,  9872, 11178,  1010,
         2045,  2024,  2048, 13485,  4084,  1024,   102])"
709,1,"['marginal probabilities', 'marginal', 'probabilities', 'outcome', 'variable']", Conditional probability,seg_23,"(1) first identify the marginal probabilities of each possible outcome of the first variable: p (a1),",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1006,  1015,  1007,  2034,  6709,  1996, 14785,  4013,  3676,
        14680,  1997,  2169,  2825,  9560,  1997,  1996,  2034,  8023,  1024,
         1052,  1006, 17350,  1007,  1010,   102])"
710,1,"['probability', 'outcome']", Conditional probability,seg_23,"(2) then identify the probability of the outcome b, conditioned on each possible scenario for the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1006,  1016,  1007,  2059,  6709,  1996,  9723,  1997,  1996,
         9560,  1038,  1010, 22442,  2006,  2169,  2825, 11967,  2005,  1996,
          102])"
711,1,['variable'], Conditional probability,seg_23,"first variable: p (b|a1), p (b|a2), ..., p (b|ak).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2034,  8023,  1024,  1052,  1006,  1038,  1064, 17350,  1007,
         1010,  1052,  1006,  1038,  1064, 22441,  1007,  1010,  1012,  1012,
         1012,  1010,  1052,  1006,  1038,  1064, 17712,  1007,  1012,   102])"
712,1,"['tree diagram', 'probabilities']", Conditional probability,seg_23,"once each of these probabilities are identified, they can be applied directly within the formula. bayes’ theorem tends to be a good option when there are so many scenarios that drawing a tree diagram would be complex.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  2320,  2169,  1997,  2122,  4013,  3676, 14680,  2024,  4453,
         1010,  2027,  2064,  2022,  4162,  3495,  2306,  1996,  5675,  1012,
         3016,  2229,  1521,  9872, 12102,  2000,  2022,  1037,  2204,  5724,
         2043,  2045,  2024,  2061,  2116, 16820,  2008,  5059,  1037,  3392,
        16403,  2052,  2022,  3375,  1012,   102])"
713,1,"['probability', 'events', 'event', 'tree diagram']", Conditional probability,seg_23,"jose visits campus every thursday evening. however, some days the parking garage is full, often due to college events. there are academic events on 35% of evenings, sporting events on 20% of evenings, and no events on 45% of evenings. when there is an academic event, the garage fills up about 25% of the time, and it fills up 70% of evenings with sporting events. on evenings when there are no events, it only fills up about 5% of the time. if jose comes to campus and finds the garage full, what is the probability that there is a sporting event? use a tree diagram to solve this problem.37",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  4560,  7879,  3721,  2296,  9432,  3944,  1012,  2174,  1010,
         2070,  2420,  1996,  5581,  7381,  2003,  2440,  1010,  2411,  2349,
         2000,  2267,  2824,  1012,  2045,  2024,  3834,  2824,  2006,  3486,
         1003,  1997, 16241,  1010,  7419,  2824,  2006,  2322,  1003,  1997,
        16241,  1010,  1998,  2053,  2824,  2006,  3429,  1003,  1997, 16241,
         1012,  2043,  2045,  2003,  2019,  3834,  2724,  1010,  1996,  7381,
        17469,  2039,  2055,  2423,  1003,  1997,  1996,  2051,  1010,  1998,
         2009, 17469,  2039,  3963,  1003,  1997, 16241,  2007,  7419,  2824,
         1012,  2006, 16241,  2043,  2045,  2024,  2053,  2824,  1010,  2009,
         2069, 17469,  2039,  2055,  1019,  1003,  1997,  1996,  2051,  1012,
         2065,  4560,  3310,  2000,  3721,  1998,  4858,  1996,  7381,  2440,
         1010,  2054,  2003,  1996,  9723,  2008,  2045,  2003,  1037,  7419,
         2724,  1029,  2224,  1037,  3392, 16403,  2000,  9611,  2023,  3291,
         1012,  4261,   102])"
714,0,[], Conditional probability,seg_23,"here we solve the same problem presented in guided practice 3.43, except this time we use bayes’ theorem.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([18462,  9723])","tensor([ 101, 2182, 2057, 9611, 1996, 2168, 3291, 3591, 1999, 8546, 3218, 1017,
        1012, 4724, 1010, 3272, 2023, 2051, 2057, 2224, 3016, 2229, 1521, 9872,
        1012,  102])"
715,1,"['probabilities', 'event', 'outcome', 'condition', 'outcome of interest']", Conditional probability,seg_23,"the outcome of interest is whether there is a sporting event (call this a1), and the condition is that the lot is full (b). let a2 represent an academic event and a3 represent there being no event on campus. then the given probabilities can be written as",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  9560,  1997,  3037,  2003,  3251,  2045,  2003,  1037,
         7419,  2724,  1006,  2655,  2023, 17350,  1007,  1010,  1998,  1996,
         4650,  2003,  2008,  1996,  2843,  2003,  2440,  1006,  1038,  1007,
         1012,  2292, 22441,  5050,  2019,  3834,  2724,  1998,  1037,  2509,
         5050,  2045,  2108,  2053,  2724,  2006,  3721,  1012,  2059,  1996,
         2445,  4013,  3676, 14680,  2064,  2022,  2517,  2004,   102])"
716,1,"['probability', 'condition', 'event']", Conditional probability,seg_23,bayes’ theorem can be used to compute the probability of a sporting event (a1) under the condition that the parking lot is full (b):,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  3016,  2229,  1521,  9872,  2064,  2022,  2109,  2000, 24134,
         1996,  9723,  1997,  1037,  7419,  2724,  1006, 17350,  1007,  2104,
         1996,  4650,  2008,  1996,  5581,  2843,  2003,  2440,  1006,  1038,
         1007,  1024,   102])"
717,1,"['probability', 'information', 'event']", Conditional probability,seg_23,"based on the information that the garage is full, there is a 56% probability that a sporting event is being held on campus that evening.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([ 101, 2241, 2006, 1996, 2592, 2008, 1996, 7381, 2003, 2440, 1010, 2045,
        2003, 1037, 5179, 1003, 9723, 2008, 1037, 7419, 2724, 2003, 2108, 2218,
        2006, 3721, 2008, 3944, 1012,  102])"
718,1,"['probability', 'information']", Conditional probability,seg_23,use the information in the previous exercise and example to verify the probability that there is an,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([18462,  9723])","tensor([  101,  2224,  1996,  2592,  1999,  1996,  3025,  6912,  1998,  2742,
         2000, 20410,  1996,  9723,  2008,  2045,  2003,  2019,   102])"
719,1,['event'], Conditional probability,seg_23,38 academic event conditioned on the parking lot being full is 0.35.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  4229,  3834,  2724, 22442,  2006,  1996,  5581,  2843,  2108,
         2440,  2003,  1014,  1012,  3486,  1012,   102])"
720,1,"['probability', 'event ', 'information', 'event']", Conditional probability,seg_23,"in guided practice 3.43 and 3.45, you found that if the parking lot is full, the probability there is a sporting event is 0.56 and the probability there is an academic event is 0.35. using this information, compute p (no event | the lot is full).39",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1999,  8546,  3218,  1017,  1012,  4724,  1998,  1017,  1012,
         3429,  1010,  2017,  2179,  2008,  2065,  1996,  5581,  2843,  2003,
         2440,  1010,  1996,  9723,  2045,  2003,  1037,  7419,  2724,  2003,
         1014,  1012,  5179,  1998,  1996,  9723,  2045,  2003,  2019,  3834,
         2724,  2003,  1014,  1012,  3486,  1012,  2478,  2023,  2592,  1010,
        24134,  1052,  1006,  2053,  2724,  1064,  1996,  2843,  2003,  2440,
         1007,  1012,  4464,   102])"
721,1,"['bayesian', 'information', 'event', 'bayesian statistics', 'statistics']", Conditional probability,seg_23,"the last several exercises offered a way to update our belief about whether there is a sporting event, academic event, or no event going on at the school based on the information that the parking lot was full. this strategy of updating beliefs using bayes’ theorem is actually the foundation of an entire section of statistics called bayesian statistics. while bayesian statistics is very important and useful, we will not have time to cover much more of it in this book.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([18462,  9723])","tensor([  101,  1996,  2197,  2195, 11110,  3253,  1037,  2126,  2000, 10651,
         2256,  6772,  2055,  3251,  2045,  2003,  1037,  7419,  2724,  1010,
         3834,  2724,  1010,  2030,  2053,  2724,  2183,  2006,  2012,  1996,
         2082,  2241,  2006,  1996,  2592,  2008,  1996,  5581,  2843,  2001,
         2440,  1012,  2023,  5656,  1997,  2039, 16616,  9029,  2478,  3016,
         2229,  1521,  9872,  2003,  2941,  1996,  3192,  1997,  2019,  2972,
         2930,  1997,  6747,  2170,  3016, 25253,  6747,  1012,  2096,  3016,
        25253,  6747,  2003,  2200,  2590,  1998,  6179,  1010,  2057,  2097,
         2025,  2031,  2051,  2000,  3104,  2172,  2062,  1997,  2009,  1999,
         2023,  2338,  1012,   102])"
722,1,"['cases', 'without replacement', 'observations', 'population', 'sample', 'sampling', 'sample size', 'replacement']", Sampling from a small population,seg_25,"when we sample observations from a population, usually we’re only sampling a small fraction of the possible individuals or cases. however, sometimes our sample size is large enough or the population is small enough that we sample more than 10% of a population44 without replacement (meaning we do not have a chance of sampling the same cases twice). sampling such a notable fraction of a population can be important for how we analyze the sample.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2043,  2057,  7099,  9420,  2013,  1037,  2313,  1010,  2788,
         2057,  1521,  2128,  2069, 16227,  1037,  2235, 12884,  1997,  1996,
         2825,  3633,  2030,  3572,  1012,  2174,  1010,  2823,  2256,  7099,
         2946,  2003,  2312,  2438,  2030,  1996,  2313,  2003,  2235,  2438,
         2008,  2057,  7099,  2062,  2084,  2184,  1003,  1997,  1037,  2313,
        22932,  2302,  6110,  1006,  3574,  2057,  2079,  2025,  2031,  1037,
         3382,  1997, 16227,  1996,  2168,  3572,  3807,  1007,  1012, 16227,
         2107,  1037,  3862, 12884,  1997,  1037,  2313,  2064,  2022,  2590,
         2005,  2129,  2057, 17908,  1996,  7099,  1012,   102])"
723,1,['random'], Sampling from a small population,seg_25,"professors sometimes select a student at random to answer a question. if each student has an equal chance of being selected and there are 15 people in your class, what is the chance that she will pick you for the next question?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101, 12655,  2823,  7276,  1037,  3076,  2012,  6721,  2000,  3437,
         1037,  3160,  1012,  2065,  2169,  3076,  2038,  2019,  5020,  3382,
         1997,  2108,  3479,  1998,  2045,  2024,  2321,  2111,  1999,  2115,
         2465,  1010,  2054,  2003,  1996,  3382,  2008,  2016,  2097,  4060,
         2017,  2005,  1996,  2279,  3160,  1029,   102])"
724,1,['probability'], Sampling from a small population,seg_25,"if there are 15 people to ask and none are skipping class, then the probability is 1/15, or about 0.067.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2065,  2045,  2024,  2321,  2111,  2000,  3198,  1998,  3904,
         2024, 25978,  2465,  1010,  2059,  1996,  9723,  2003,  1015,  1013,
         2321,  1010,  2030,  2055,  1014,  1012,  5757,  2581,  1012,   102])"
725,1,['probability'], Sampling from a small population,seg_25,"if the professor asks 3 questions, what is the probability that you will not be selected? assume that she will not pick the same person twice in a given lecture.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([ 101, 2065, 1996, 2934, 5176, 1017, 3980, 1010, 2054, 2003, 1996, 9723,
        2008, 2017, 2097, 2025, 2022, 3479, 1029, 7868, 2008, 2016, 2097, 2025,
        4060, 1996, 2168, 2711, 3807, 1999, 1037, 2445, 8835, 1012,  102])"
726,1,['probability'], Sampling from a small population,seg_25,"for the first question, she will pick someone else with probability 14/15. when she asks the second question, she only has 14 people who have not yet been asked. thus, if you were not picked on the first question, the probability you are again not picked is 13/14. similarly, the probability you are again not picked on the third question is 12/13, and the probability of not being picked for any of the three questions is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([ 101, 2005, 1996, 2034, 3160, 1010, 2016, 2097, 4060, 2619, 2842, 2007,
        9723, 2403, 1013, 2321, 1012, 2043, 2016, 5176, 1996, 2117, 3160, 1010,
        2016, 2069, 2038, 2403, 2111, 2040, 2031, 2025, 2664, 2042, 2356, 1012,
        2947, 1010, 2065, 2017, 2020, 2025, 3856, 2006, 1996, 2034, 3160, 1010,
        1996, 9723, 2017, 2024, 2153, 2025, 3856, 2003, 2410, 1013, 2403, 1012,
        6660, 1010, 1996, 9723, 2017, 2024, 2153, 2025, 3856, 2006, 1996, 2353,
        3160, 2003, 2260, 1013, 2410, 1010, 1998, 1996, 9723, 1997, 2025, 2108,
        3856, 2005, 2151, 1997, 1996, 2093, 3980, 2003,  102])"
727,0,[], Sampling from a small population,seg_25,p (not picked in 3 questions),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([ 101, 1052, 1006, 2025, 3856, 1999, 1017, 3980, 1007,  102])"
728,1,['probabilities'], Sampling from a small population,seg_25,what rule permitted us to multiply the probabilities in example 3.48?45,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2054,  3627,  7936,  2149,  2000,  4800, 22086,  1996,  4013,
         3676, 14680,  1999,  2742,  1017,  1012,  4466,  1029,  3429,   102])"
729,1,['probability'], Sampling from a small population,seg_25,"suppose the professor randomly picks without regard to who she already selected, i.e. students can be picked more than once. what is the probability that you will not be picked for any of the three questions?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  6814,  1996,  2934, 18154, 11214,  2302,  7634,  2000,  2040,
         2016,  2525,  3479,  1010,  1045,  1012,  1041,  1012,  2493,  2064,
         2022,  3856,  2062,  2084,  2320,  1012,  2054,  2003,  1996,  9723,
         2008,  2017,  2097,  2025,  2022,  3856,  2005,  2151,  1997,  1996,
         2093,  3980,  1029,   102])"
730,1,"['probability', 'processes', 'multiplication rule', 'independent']", Sampling from a small population,seg_25,"each pick is independent, and the probability of not being picked for any individual question is 14/15. thus, we can use the multiplication rule for independent processes.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2169,  4060,  2003,  2981,  1010,  1998,  1996,  9723,  1997,
         2025,  2108,  3856,  2005,  2151,  3265,  3160,  2003,  2403,  1013,
         2321,  1012,  2947,  1010,  2057,  2064,  2224,  1996, 24856,  3627,
         2005,  2981,  6194,  1012,   102])"
731,0,[], Sampling from a small population,seg_25,p (not picked in 3 questions),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([ 101, 1052, 1006, 2025, 3856, 1999, 1017, 3980, 1007,  102])"
732,0,[], Sampling from a small population,seg_25,"you have a slightly higher chance of not being picked compared to when she picked a new person for each question. however, you now may be picked more than once.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([ 101, 2017, 2031, 1037, 3621, 3020, 3382, 1997, 2025, 2108, 3856, 4102,
        2000, 2043, 2016, 3856, 1037, 2047, 2711, 2005, 2169, 3160, 1012, 2174,
        1010, 2017, 2085, 2089, 2022, 3856, 2062, 2084, 2320, 1012,  102])"
733,1,['probability'], Sampling from a small population,seg_25,"under the setup of example 3.50, what is the probability of being picked to answer all three questions?46",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2104,  1996, 16437,  1997,  2742,  1017,  1012,  2753,  1010,
         2054,  2003,  1996,  9723,  1997,  2108,  3856,  2000,  3437,  2035,
         2093,  3980,  1029,  4805,   102])"
734,1,"['with replacement', 'probability', 'without replacement', 'observations', 'event', 'independence', 'sample', 'population', 'replacement']", Sampling from a small population,seg_25,"if we sample from a small population without replacement, we no longer have independence between our observations. in example 3.48, the probability of not being picked for the second question was conditioned on the event that you were not picked for the first question. in example 3.50, the professor sampled her students with replacement: she repeatedly sampled the entire class without regard to who she already picked.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2065,  2057,  7099,  2013,  1037,  2235,  2313,  2302,  6110,
         1010,  2057,  2053,  2936,  2031,  4336,  2090,  2256,  9420,  1012,
         1999,  2742,  1017,  1012,  4466,  1010,  1996,  9723,  1997,  2025,
         2108,  3856,  2005,  1996,  2117,  3160,  2001, 22442,  2006,  1996,
         2724,  2008,  2017,  2020,  2025,  3856,  2005,  1996,  2034,  3160,
         1012,  1999,  2742,  1017,  1012,  2753,  1010,  1996,  2934, 18925,
         2014,  2493,  2007,  6110,  1024,  2016,  8385, 18925,  1996,  2972,
         2465,  2302,  7634,  2000,  2040,  2016,  2525,  3856,  1012,   102])"
735,1,"['probability', 'without replacement', 'replacement']", Sampling from a small population,seg_25,"your department is holding a raffle. they sell 30 tickets and offer seven prizes. (a) they place the tickets in a hat and draw one for each prize. the tickets are sampled without replacement, i.e. the selected tickets are not placed back in the hat. what is the probability of winning a prize if you buy one ticket? (b) what if the tickets are sampled with replacement?47",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2115,  2533,  2003,  3173,  1037,  7148, 21031,  1012,  2027,
         5271,  2382,  9735,  1998,  3749,  2698, 11580,  1012,  1006,  1037,
         1007,  2027,  2173,  1996,  9735,  1999,  1037,  6045,  1998,  4009,
         2028,  2005,  2169,  3396,  1012,  1996,  9735,  2024, 18925,  2302,
         6110,  1010,  1045,  1012,  1041,  1012,  1996,  3479,  9735,  2024,
         2025,  2872,  2067,  1999,  1996,  6045,  1012,  2054,  2003,  1996,
         9723,  1997,  3045,  1037,  3396,  2065,  2017,  4965,  2028,  7281,
         1029,  1006,  1038,  1007,  2054,  2065,  1996,  9735,  2024, 18925,
         2007,  6110,  1029,  4700,   102])"
736,1,"['method', 'sampling']", Sampling from a small population,seg_25,compare your answers in guided practice 3.52. how much influence does the sampling method have on your chances of winning a prize?48,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101, 12826,  2115,  6998,  1999,  8546,  3218,  1017,  1012,  4720,
         1012,  2129,  2172,  3747,  2515,  1996, 16227,  4118,  2031,  2006,
         2115,  9592,  1997,  3045,  1037,  3396,  1029,  4466,   102])"
737,1,"['with replacement', 'probability', 'without replacement', 'observations', 'population', 'sample', 'results', 'sampling', 'sample size', 'replacement', 'independent']", Sampling from a small population,seg_25,"had we repeated guided practice 3.52 with 300 tickets instead of 30, we would have found something interesting: the results would be nearly identical. the probability would be 0.0233 without replacement and 0.0231 with replacement. when the sample size is only a small fraction of the population (under 10%), observations are nearly independent even when sampling without replacement.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0.])","tensor([16227,  2013,  1037,  2235,  2313])","tensor([  101,  2018,  2057,  5567,  8546,  3218,  1017,  1012,  4720,  2007,
         3998,  9735,  2612,  1997,  2382,  1010,  2057,  2052,  2031,  2179,
         2242,  5875,  1024,  1996,  3463,  2052,  2022,  3053,  7235,  1012,
         1996,  9723,  2052,  2022,  1014,  1012,  6185, 22394,  2302,  6110,
         1998,  1014,  1012,  6185, 21486,  2007,  6110,  1012,  2043,  1996,
         7099,  2946,  2003,  2069,  1037,  2235, 12884,  1997,  1996,  2313,
         1006,  2104,  2184,  1003,  1007,  1010,  9420,  2024,  3053,  2981,
         2130,  2043, 16227,  2302,  6110,  1012,   102])"
738,1,"['outcomes', 'random variable', 'random', 'process', 'statistical', 'model', 'variable']", Random variables,seg_27,it’s often useful to model a process using what’s called a random variable. such a model allows us to apply a mathematical framework and statistical principles for better understanding and predicting outcomes in the real world.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2009,  1521,  1055,  2411,  6179,  2000,  2944,  1037,  2832,
         2478,  2054,  1521,  1055,  2170,  1037,  6721,  8023,  1012,  2107,
         1037,  2944,  4473,  2149,  2000,  6611,  1037,  8045,  7705,  1998,
         7778,  6481,  2005,  2488,  4824,  1998, 29458, 13105,  1999,  1996,
         2613,  2088,  1012,   102])"
739,1,"['statistics', 'percentages']", Random variables,seg_27,"two books are assigned for a statistics class: a textbook and its corresponding study guide. the university bookstore determined 20% of enrolled students do not buy either book, 55% buy the textbook only, and 25% buy both books, and these percentages are relatively constant from one term to another. if there are 100 students enrolled, how many books should the bookstore expect to sell to this class?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2048,  2808,  2024,  4137,  2005,  1037,  6747,  2465,  1024,
         1037, 16432,  1998,  2049,  7978,  2817,  5009,  1012,  1996,  2118,
        21785,  4340,  2322,  1003,  1997,  8302,  2493,  2079,  2025,  4965,
         2593,  2338,  1010,  4583,  1003,  4965,  1996, 16432,  2069,  1010,
         1998,  2423,  1003,  4965,  2119,  2808,  1010,  1998,  2122,  7017,
         2015,  2024,  4659,  5377,  2013,  2028,  2744,  2000,  2178,  1012,
         2065,  2045,  2024,  2531,  2493,  8302,  1010,  2129,  2116,  2808,
         2323,  1996, 21785,  5987,  2000,  5271,  2000,  2023,  2465,  1029,
          102])"
740,0,[], Random variables,seg_27,"around 20 students will not buy either book (0 books total), about 55 will buy one book (55 books total), and approximately 25 will buy two books (totaling 50 books for these 25 students). the bookstore should expect to sell about 105 books for this class.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  2105,  2322,  2493,  2097,  2025,  4965,  2593,  2338,  1006,
         1014,  2808,  2561,  1007,  1010,  2055,  4583,  2097,  4965,  2028,
         2338,  1006,  4583,  2808,  2561,  1007,  1010,  1998,  3155,  2423,
         2097,  4965,  2048,  2808,  1006, 21798,  2753,  2808,  2005,  2122,
         2423,  2493,  1007,  1012,  1996, 21785,  2323,  5987,  2000,  5271,
         2055,  8746,  2808,  2005,  2023,  2465,  1012,   102])"
741,0,[], Random variables,seg_27,would you be surprised if the bookstore sold slightly more or less than 105 books?49,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  2052,  2017,  2022,  4527,  2065,  1996, 21785,  2853,  3621,
         2062,  2030,  2625,  2084,  8746,  2808,  1029,  4749,   102])"
742,0,[], Random variables,seg_27,the textbook costs $137 and the study guide $33. how much revenue should the bookstore expect from this class of 100 students?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1996, 16432,  5366,  1002, 14989,  1998,  1996,  2817,  5009,
         1002,  3943,  1012,  2129,  2172,  6599,  2323,  1996, 21785,  5987,
         2013,  2023,  2465,  1997,  2531,  2493,  1029,   102])"
743,0,[], Random variables,seg_27,"about 55 students will just buy a textbook, providing revenue of",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  2055,  4583,  2493,  2097,  2074,  4965,  1037, 16432,  1010,
         4346,  6599,  1997,   102])"
744,0,[], Random variables,seg_27,the roughly 25 students who buy both the textbook and the study guide would pay a total of,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1996,  5560,  2423,  2493,  2040,  4965,  2119,  1996, 16432,
         1998,  1996,  2817,  5009,  2052,  3477,  1037,  2561,  1997,   102])"
745,1,"['variability', 'sampling']", Random variables,seg_27,"thus, the bookstore should expect to generate about $7, 535 + $4, 250 = $11, 785 from these 100 students for this one class. however, there might be some sampling variability so the actual amount may differ by a little bit.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  2947,  1010,  1996, 21785,  2323,  5987,  2000,  9699,  2055,
         1002,  1021,  1010,  5187,  2629,  1009,  1002,  1018,  1010,  5539,
         1027,  1002,  2340,  1010,  6275,  2629,  2013,  2122,  2531,  2493,
         2005,  2023,  2028,  2465,  1012,  2174,  1010,  2045,  2453,  2022,
         2070, 16227, 28436,  2061,  1996,  5025,  3815,  2089, 11234,  2011,
         1037,  2210,  2978,  1012,   102])"
746,1,"['probability', 'average', 'probability distribution', 'distribution']", Random variables,seg_27,figure 3.18: probability distribution for the bookstore’s revenue from one student. the triangle represents the average revenue per student.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  3275,  1017,  1012,  2324,  1024,  9723,  4353,  2005,  1996,
        21785,  1521,  1055,  6599,  2013,  2028,  3076,  1012,  1996,  9546,
         5836,  1996,  2779,  6599,  2566,  3076,  1012,   102])"
747,1,['average'], Random variables,seg_27,what is the average revenue per student for this course?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([ 101, 2054, 2003, 1996, 2779, 6599, 2566, 3076, 2005, 2023, 2607, 1029,
         102])"
748,0,[], Random variables,seg_27,"the expected total revenue is $11,785, and there are 100 students. therefore the expected revenue per student is $11, 785/100 = $117.85.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1996,  3517,  2561,  6599,  2003,  1002,  2340,  1010,  6275,
         2629,  1010,  1998,  2045,  2024,  2531,  2493,  1012,  3568,  1996,
         3517,  6599,  2566,  3076,  2003,  1002,  2340,  1010,  6275,  2629,
         1013,  2531,  1027,  1002, 12567,  1012,  5594,  1012,   102])"
749,1,['expectation'], Random variables,seg_27,3.4.1 expectation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 6721, 10857])","tensor([  101,  1017,  1012,  1018,  1012,  1015, 17626,   102])"
750,1,"['random variable', 'outcome', 'random', 'process', 'statistics', 'numerical', 'variable']", Random variables,seg_27,"we call a variable or process with a numerical outcome a random variable, and we usually represent this random variable with a capital letter such as x, y , or z. the amount of money a single student will spend on her statistics books is a random variable, and we represent it by x.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2057,  2655,  1037,  8023,  2030,  2832,  2007,  1037, 15973,
         9560,  1037,  6721,  8023,  1010,  1998,  2057,  2788,  5050,  2023,
         6721,  8023,  2007,  1037,  3007,  3661,  2107,  2004,  1060,  1010,
         1061,  1010,  2030,  1062,  1012,  1996,  3815,  1997,  2769,  1037,
         2309,  3076,  2097,  5247,  2006,  2014,  6747,  2808,  2003,  1037,
         6721,  8023,  1010,  1998,  2057,  5050,  2009,  2011,  1060,  1012,
          102])"
751,1,"['random process', 'outcome', 'random', 'process', 'numerical', 'variable']", Random variables,seg_27,a random process or variable with a numerical outcome.,tensor(1),"tensor([0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1037,  6721,  2832,  2030,  8023,  2007,  1037, 15973,  9560,
         1012,   102])"
752,1,"['outcomes', 'probabilities', 'distribution', 'case']", Random variables,seg_27,"the possible outcomes of x are labeled with a corresponding lower case letter x and subscripts. for example, we write x1 = $0, x2 = $137, and x3 = $170, which occur with probabilities 0.20, 0.55, and 0.25. the distribution of x is summarized in figure 3.18 and figure 3.19.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996,  2825, 13105,  1997,  1060,  2024, 12599,  2007,  1037,
         7978,  2896,  2553,  3661,  1060,  1998,  4942, 22483,  2015,  1012,
         2005,  2742,  1010,  2057,  4339,  1060,  2487,  1027,  1002,  1014,
         1010,  1060,  2475,  1027,  1002, 14989,  1010,  1998,  1060,  2509,
         1027,  1002, 10894,  1010,  2029,  5258,  2007,  4013,  3676, 14680,
         1014,  1012,  2322,  1010,  1014,  1012,  4583,  1010,  1998,  1014,
         1012,  2423,  1012,  1996,  4353,  1997,  1060,  2003, 22539,  1999,
         3275,  1017,  1012,  2324,  1998,  3275,  1017,  1012,  2539,  1012,
          102])"
753,1,"['probability', 'random variable', 'random', 'distribution', 'variable', 'probability distribution']", Random variables,seg_27,"figure 3.19: the probability distribution for the random variable x, representing the bookstore’s revenue from a single student.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  3275,  1017,  1012,  2539,  1024,  1996,  9723,  4353,  2005,
         1996,  6721,  8023,  1060,  1010,  5052,  1996, 21785,  1521,  1055,
         6599,  2013,  1037,  2309,  3076,  1012,   102])"
754,1,"['probability', 'random variable', 'outcome', 'random', 'average', 'expected value', 'variable']", Random variables,seg_27,"we computed the average outcome of x as $117.85 in example 3.57. we call this average the expected value of x, denoted by e(x). the expected value of a random variable is computed by adding each outcome weighted by its probability:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  2057, 24806,  1996,  2779,  9560,  1997,  1060,  2004,  1002,
        12567,  1012,  5594,  1999,  2742,  1017,  1012,  5401,  1012,  2057,
         2655,  2023,  2779,  1996,  3517,  3643,  1997,  1060,  1010, 19537,
         2011,  1041,  1006,  1060,  1007,  1012,  1996,  3517,  3643,  1997,
         1037,  6721,  8023,  2003, 24806,  2011,  5815,  2169,  9560, 18215,
         2011,  2049,  9723,  1024,   102])"
755,1,"['probability', 'outcomes', 'probabilities', 'outcome', 'expected value']", Random variables,seg_27,"if x takes outcomes x1, ..., xk with probabilities p (x = x1), ..., p (x = xk), the expected value of x is the sum of each outcome multiplied by its corresponding probability:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2065,  1060,  3138, 13105,  1060,  2487,  1010,  1012,  1012,
         1012,  1010,  1060,  2243,  2007,  4013,  3676, 14680,  1052,  1006,
         1060,  1027,  1060,  2487,  1007,  1010,  1012,  1012,  1012,  1010,
         1052,  1006,  1060,  1027,  1060,  2243,  1007,  1010,  1996,  3517,
         3643,  1997,  1060,  2003,  1996,  7680,  1997,  2169,  9560, 28608,
         2011,  2049,  7978,  9723,  1024,   102])"
756,0,[], Random variables,seg_27,the greek letter µ may be used in place of the notation e(x).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1996,  3306,  3661,  1085,  2089,  2022,  2109,  1999,  2173,
         1997,  1996, 14869,  1041,  1006,  1060,  1007,  1012,   102])"
757,1,"['probability', 'mean', 'probability distribution', 'distribution']", Random variables,seg_27,figure 3.20: a weight system representing the probability distribution for x. the string holds the distribution at the mean to keep the system balanced.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  3275,  1017,  1012,  2322,  1024,  1037,  3635,  2291,  5052,
         1996,  9723,  4353,  2005,  1060,  1012,  1996,  5164,  4324,  1996,
         4353,  2012,  1996,  2812,  2000,  2562,  1996,  2291, 12042,  1012,
          102])"
758,1,"['continuous', 'mean', 'continuous distribution', 'distribution']", Random variables,seg_27,figure 3.21: a continuous distribution can also be balanced at its mean.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  3275,  1017,  1012,  2538,  1024,  1037,  7142,  4353,  2064,
         2036,  2022, 12042,  2012,  2049,  2812,  1012,   102])"
759,1,"['random variable', 'outcome', 'random', 'average', 'expected value', 'variable']", Random variables,seg_27,"the expected value for a random variable represents the average outcome. for example, e(x) = 117.85 represents the average amount the bookstore expects to make from a single student, which we could also write as µ = 117.85.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996,  3517,  3643,  2005,  1037,  6721,  8023,  5836,  1996,
         2779,  9560,  1012,  2005,  2742,  1010,  1041,  1006,  1060,  1007,
         1027, 12567,  1012,  5594,  5836,  1996,  2779,  3815,  1996, 21785,
        24273,  2000,  2191,  2013,  1037,  2309,  3076,  1010,  2029,  2057,
         2071,  2036,  4339,  2004,  1085,  1027, 12567,  1012,  5594,  1012,
          102])"
760,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'expected value', 'variable']", Random variables,seg_27,"it is also possible to compute the expected value of a continuous random variable (see sec50 tion 3.5). however, it requires a little calculus and we save it for a later class.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2009,  2003,  2036,  2825,  2000, 24134,  1996,  3517,  3643,
         1997,  1037,  7142,  6721,  8023,  1006,  2156, 10819, 12376, 14841,
         2239,  1017,  1012,  1019,  1007,  1012,  2174,  1010,  2009,  5942,
         1037,  2210, 19276,  1998,  2057,  3828,  2009,  2005,  1037,  2101,
         2465,  1012,   102])"
761,1,"['continuous', 'mean', 'probability distributions', 'probability', 'outcome', 'distributions', 'continuous probability distributions', 'expectation', 'distribution', 'continuous probability distribution', 'probability distribution']", Random variables,seg_27,"in physics, the expectation holds the same meaning as the center of gravity. the distribution can be represented by a series of weights at each outcome, and the mean represents the balancing point. this is represented in figures 3.18 and 3.20. the idea of a center of gravity also expands to continuous probability distributions. figure 3.21 shows a continuous probability distribution balanced atop a wedge placed at the mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1999,  5584,  1010,  1996, 17626,  4324,  1996,  2168,  3574,
         2004,  1996,  2415,  1997,  8992,  1012,  1996,  4353,  2064,  2022,
         3421,  2011,  1037,  2186,  1997, 15871,  2012,  2169,  9560,  1010,
         1998,  1996,  2812,  5836,  1996, 20120,  2391,  1012,  2023,  2003,
         3421,  1999,  4481,  1017,  1012,  2324,  1998,  1017,  1012,  2322,
         1012,  1996,  2801,  1997,  1037,  2415,  1997,  8992,  2036, 24545,
         2000,  7142,  9723, 20611,  1012,  3275,  1017,  1012,  2538,  3065,
         1037,  7142,  9723,  4353, 12042, 10234,  1037, 17632,  2872,  2012,
         1996,  2812,  1012,   102])"
762,1,"['variability', 'random', 'random variables', 'variables']", Random variables,seg_27,3.4.2 variability in random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 6721, 10857])","tensor([  101,  1017,  1012,  1018,  1012,  1016, 28436,  1999,  6721, 10857,
          102])"
763,1,['variability'], Random variables,seg_27,"suppose you ran the university bookstore. besides how much revenue you expect to generate, you might also want to know the volatility (variability) in your revenue.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  6814,  2017,  2743,  1996,  2118, 21785,  1012,  4661,  2129,
         2172,  6599,  2017,  5987,  2000,  9699,  1010,  2017,  2453,  2036,
         2215,  2000,  2113,  1996,  5285, 10450, 18605,  1006, 28436,  1007,
         1999,  2115,  6599,  1012,   102])"
764,1,"['variability', 'method', 'data set', 'sum of squared', 'mean', 'random variable', 'standard deviation', 'data', 'case', 'deviation', 'probabilities', 'standard', 'expectation', 'variance', 'set', 'random', 'deviations', 'average', 'variable']", Random variables,seg_27,"the variance and standard deviation can be used to describe the variability of a random variable. section 2.1.4 introduced a method for finding the variance and standard deviation for a data set. we first computed deviations from the mean (xi−µ), squared those deviations, and took an average to get the variance. in the case of a random variable, we again compute squared deviations. however, we take their sum weighted by their corresponding probabilities, just like we did for the expectation. this weighted sum of squared deviations equals the variance, and we calculate the standard deviation by taking the square root of the variance, just as we did in section 2.1.4.",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996, 23284,  1998,  3115, 24353,  2064,  2022,  2109,  2000,
         6235,  1996, 28436,  1997,  1037,  6721,  8023,  1012,  2930,  1016,
         1012,  1015,  1012,  1018,  3107,  1037,  4118,  2005,  4531,  1996,
        23284,  1998,  3115, 24353,  2005,  1037,  2951,  2275,  1012,  2057,
         2034, 24806, 24353,  2015,  2013,  1996,  2812,  1006,  8418, 22543,
        29659,  1007,  1010, 19942,  2216, 24353,  2015,  1010,  1998,  2165,
         2019,  2779,  2000,  2131,  1996, 23284,  1012,  1999,  1996,  2553,
         1997,  1037,  6721,  8023,  1010,  2057,  2153, 24134, 19942, 24353,
         2015,  1012,  2174,  1010,  2057,  2202,  2037,  7680, 18215,  2011,
         2037,  7978,  4013,  3676, 14680,  1010,  2074,  2066,  2057,  2106,
         2005,  1996, 17626,  1012,  2023, 18215,  7680,  1997, 19942, 24353,
         2015, 19635,  1996, 23284,  1010,  1998,  2057, 18422,  1996,  3115,
        24353,  2011,  2635,  1996,  2675,  7117,  1997,  1996, 23284,  1010,
         2074,  2004,  2057,  2106,  1999,  2930,  1016,  1012,  1015,  1012,
         1018,  1012,   102])"
765,1,"['variance', 'outcomes', 'probabilities', 'expected value']", Random variables,seg_27,"if x takes outcomes x1, ..., xk with probabilities p (x = x1), ..., p (x = xk) and expected value µ = e(x), then the variance of x, denoted by v ar(x) or the symbol σ2, is",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2065,  1060,  3138, 13105,  1060,  2487,  1010,  1012,  1012,
         1012,  1010,  1060,  2243,  2007,  4013,  3676, 14680,  1052,  1006,
         1060,  1027,  1060,  2487,  1007,  1010,  1012,  1012,  1012,  1010,
         1052,  1006,  1060,  1027,  1060,  2243,  1007,  1998,  3517,  3643,
         1085,  1027,  1041,  1006,  1060,  1007,  1010,  2059,  1996, 23284,
         1997,  1060,  1010, 19537,  2011,  1058, 12098,  1006,  1060,  1007,
         2030,  1996,  6454,  1173,  2475,  1010,  2003,   102])"
766,1,"['deviation', 'variance', 'standard deviation', 'standard']", Random variables,seg_27,"the standard deviation of x, labeled σ, is the square root of the variance.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  1996,  3115, 24353,  1997,  1060,  1010, 12599,  1173,  1010,
         2003,  1996,  2675,  7117,  1997,  1996, 23284,  1012,   102])"
767,1,"['deviation', 'variance', 'standard deviation', 'standard', 'statistics', 'expected value']", Random variables,seg_27,"compute the expected value, variance, and standard deviation of x, the revenue of a single statistics student for the bookstore.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101, 24134,  1996,  3517,  3643,  1010, 23284,  1010,  1998,  3115,
        24353,  1997,  1060,  1010,  1996,  6599,  1997,  1037,  2309,  6747,
         3076,  2005,  1996, 21785,  1012,   102])"
768,1,"['results', 'outcome', 'table']", Random variables,seg_27,"it is useful to construct a table that holds computations for each outcome separately, then add up the results.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2009,  2003,  6179,  2000,  9570,  1037,  2795,  2008,  4324,
        22334,  2015,  2005,  2169,  9560, 10329,  1010,  2059,  5587,  2039,
         1996,  3463,  1012,   102])"
769,1,"['expected value', 'variance', 'table']", Random variables,seg_27,"thus, the expected value is µ = 117.85, which we computed earlier. the variance can be constructed by extending this table:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2947,  1010,  1996,  3517,  3643,  2003,  1085,  1027, 12567,
         1012,  5594,  1010,  2029,  2057, 24806,  3041,  1012,  1996, 23284,
         2064,  2022,  3833,  2011,  8402,  2023,  2795,  1024,   102])"
770,1,"['deviation', 'variance', 'standard deviation', 'standard']", Random variables,seg_27,"the variance of x is σ2 = 3659.3, which means the standard deviation is σ = √3659.3 = $60.49.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996, 23284,  1997,  1060,  2003,  1173,  2475,  1027, 19342,
         2683,  1012,  1017,  1010,  2029,  2965,  1996,  3115, 24353,  2003,
         1173,  1027,  1600, 21619, 28154,  1012,  1017,  1027,  1002,  3438,
         1012,  4749,  1012,   102])"
771,0,[], Random variables,seg_27,"the bookstore also offers a chemistry textbook for $159 and a book supplement for $41. from past experience, they know about 25% of chemistry students just buy the textbook while 60% buy both the textbook and supplement.51",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1996, 21785,  2036,  4107,  1037,  6370, 16432,  2005,  1002,
        18914,  1998,  1037,  2338, 12448,  2005,  1002,  4601,  1012,  2013,
         2627,  3325,  1010,  2027,  2113,  2055,  2423,  1003,  1997,  6370,
         2493,  2074,  4965,  1996, 16432,  2096,  3438,  1003,  4965,  2119,
         1996, 16432,  1998, 12448,  1012,  4868,   102])"
772,0,[], Random variables,seg_27,(a) what proportion of students don’t buy either book? assume no students buy the supplement,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1006,  1037,  1007,  2054, 10817,  1997,  2493,  2123,  1521,
         1056,  4965,  2593,  2338,  1029,  7868,  2053,  2493,  4965,  1996,
        12448,   102])"
773,0,[], Random variables,seg_27,without the textbook.,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  2302,  1996, 16432,  1012,   102])"
774,1,"['probability', 'probability distribution', 'distribution']", Random variables,seg_27,(b) let y represent the revenue from a single student. write out the probability distribution of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 6721, 10857])","tensor([ 101, 1006, 1038, 1007, 2292, 1061, 5050, 1996, 6599, 2013, 1037, 2309,
        3076, 1012, 4339, 2041, 1996, 9723, 4353, 1997,  102])"
775,1,"['associated', 'table', 'probability', 'outcome']", Random variables,seg_27,"y , i.e. a table for each outcome and its associated probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([ 101, 1061, 1010, 1045, 1012, 1041, 1012, 1037, 2795, 2005, 2169, 9560,
        1998, 2049, 3378, 9723, 1012,  102])"
776,0,[], Random variables,seg_27,(c) compute the expected revenue from a single chemistry student.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1006,  1039,  1007, 24134,  1996,  3517,  6599,  2013,  1037,
         2309,  6370,  3076,  1012,   102])"
777,1,"['variability', 'deviation', 'associated', 'standard deviation', 'standard']", Random variables,seg_27,(d) find the standard deviation to describe the variability associated with the revenue from a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  1006,  1040,  1007,  2424,  1996,  3115, 24353,  2000,  6235,
         1996, 28436,  3378,  2007,  1996,  6599,  2013,  1037,   102])"
778,1,"['linear', 'random', 'linear combinations', 'random variables', 'variables', 'combinations']", Random variables,seg_27,3.4.3 linear combinations of random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 6721, 10857])","tensor([  101,  1017,  1012,  1018,  1012,  1017,  7399, 14930,  1997,  6721,
        10857,   102])"
779,1,"['loss', 'variables', 'combination', 'variable']", Random variables,seg_27,"so far, we have thought of each variable as being a complete story in and of itself. sometimes it is more appropriate to use a combination of variables. for instance, the amount of time a person spends commuting to work each week can be broken down into several daily commutes. similarly, the total gain or loss in a stock portfolio is the sum of the gains and losses in its components.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2061,  2521,  1010,  2057,  2031,  2245,  1997,  2169,  8023,
         2004,  2108,  1037,  3143,  2466,  1999,  1998,  1997,  2993,  1012,
         2823,  2009,  2003,  2062,  6413,  2000,  2224,  1037,  5257,  1997,
        10857,  1012,  2005,  6013,  1010,  1996,  3815,  1997,  2051,  1037,
         2711, 15970,  4012, 28120,  2075,  2000,  2147,  2169,  2733,  2064,
         2022,  3714,  2091,  2046,  2195,  3679,  4012, 26746,  2015,  1012,
         6660,  1010,  1996,  2561,  5114,  2030,  3279,  1999,  1037,  4518,
        11103,  2003,  1996,  7680,  1997,  1996, 12154,  1998,  6409,  1999,
         2049,  6177,  1012,   102])"
780,0,[], Random variables,seg_27,"john travels to work five days a week. we will use x1 to represent his travel time on monday, x2 to represent his travel time on tuesday, and so on. write an equation using x1, ..., x5 that represents his travel time for the week, denoted by w .",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  2198,  7930,  2000,  2147,  2274,  2420,  1037,  2733,  1012,
         2057,  2097,  2224,  1060,  2487,  2000,  5050,  2010,  3604,  2051,
         2006,  6928,  1010,  1060,  2475,  2000,  5050,  2010,  3604,  2051,
         2006,  9857,  1010,  1998,  2061,  2006,  1012,  4339,  2019,  8522,
         2478,  1060,  2487,  1010,  1012,  1012,  1012,  1010,  1060,  2629,
         2008,  5836,  2010,  3604,  2051,  2005,  1996,  2733,  1010, 19537,
         2011,  1059,  1012,   102])"
781,0,[], Random variables,seg_27,his total weekly travel time is the sum of the five daily values:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([ 101, 2010, 2561, 4882, 3604, 2051, 2003, 1996, 7680, 1997, 1996, 2274,
        3679, 5300, 1024,  102])"
782,0,[], Random variables,seg_27,breaking the weekly travel time w into pieces provides a framework for understanding each source of randomness and is useful for modeling w .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  4911,  1996,  4882,  3604,  2051,  1059,  2046,  4109,  3640,
         1037,  7705,  2005,  4824,  2169,  3120,  1997,  6721,  2791,  1998,
         2003,  6179,  2005, 11643,  1059,  1012,   102])"
783,1,['average'], Random variables,seg_27,it takes john an average of 18 minutes each day to commute to work. what would you expect his average commute time to be for the week?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2009,  3138,  2198,  2019,  2779,  1997,  2324,  2781,  2169,
         2154,  2000,  4012, 26746,  2000,  2147,  1012,  2054,  2052,  2017,
         5987,  2010,  2779,  4012, 26746,  2051,  2000,  2022,  2005,  1996,
         2733,  1029,   102])"
784,1,"['average', 'expected value']", Random variables,seg_27,"we were told that the average (i.e. expected value) of the commute time is 18 minutes per day: e(xi) = 18. to get the expected time for the sum of the five days, we can add up the expected time for each individual day:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2057,  2020,  2409,  2008,  1996,  2779,  1006,  1045,  1012,
         1041,  1012,  3517,  3643,  1007,  1997,  1996,  4012, 26746,  2051,
         2003,  2324,  2781,  2566,  2154,  1024,  1041,  1006,  8418,  1007,
         1027,  2324,  1012,  2000,  2131,  1996,  3517,  2051,  2005,  1996,
         7680,  1997,  1996,  2274,  2420,  1010,  2057,  2064,  5587,  2039,
         1996,  3517,  2051,  2005,  2169,  3265,  2154,  1024,   102])"
785,1,"['random variable', 'random', 'random variables', 'expectation', 'variables', 'variable']", Random variables,seg_27,"the expectation of the total time is equal to the sum of the expected individual times. more generally, the expectation of a sum of random variables is always the sum of the expectation for each random variable.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996, 17626,  1997,  1996,  2561,  2051,  2003,  5020,  2000,
         1996,  7680,  1997,  1996,  3517,  3265,  2335,  1012,  2062,  3227,
         1010,  1996, 17626,  1997,  1037,  7680,  1997,  6721, 10857,  2003,
         2467,  1996,  7680,  1997,  1996, 17626,  2005,  2169,  6721,  8023,
         1012,   102])"
786,0,[], Random variables,seg_27,"elena is selling a tv at a cash auction and also intends to buy a toaster oven in the auction. if x represents the profit for selling the tv and y represents the cost of the toaster oven, write an equation that represents the net change in elena’s cash.52",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  9060,  2003,  4855,  1037,  2694,  2012,  1037,  5356, 10470,
         1998,  2036, 18754,  2000,  4965,  1037, 15174,  2121, 17428,  1999,
         1996, 10470,  1012,  2065,  1060,  5836,  1996,  5618,  2005,  4855,
         1996,  2694,  1998,  1061,  5836,  1996,  3465,  1997,  1996, 15174,
         2121, 17428,  1010,  4339,  2019,  8522,  2008,  5836,  1996,  5658,
         2689,  1999,  9060,  1521,  1055,  5356,  1012,  4720,   102])"
787,0,[], Random variables,seg_27,"based on past auctions, elena figures she should expect to make about $175 on the tv and pay about $23 for the toaster oven. in total, how much should she expect to make or spend?53",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  2241,  2006,  2627, 10470,  2015,  1010,  9060,  4481,  2016,
         2323,  5987,  2000,  2191,  2055,  1002, 12862,  2006,  1996,  2694,
         1998,  3477,  2055,  1002,  2603,  2005,  1996, 15174,  2121, 17428,
         1012,  1999,  2561,  1010,  2129,  2172,  2323,  2016,  5987,  2000,
         2191,  2030,  5247,  1029,  5187,   102])"
788,0,[], Random variables,seg_27,would you be surprised if john’s weekly commute wasn’t exactly 90 minutes or if elena didn’t make,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 6721, 10857])","tensor([  101,  2052,  2017,  2022,  4527,  2065,  2198,  1521,  1055,  4882,
         4012, 26746,  2347,  1521,  1056,  3599,  3938,  2781,  2030,  2065,
         9060,  2134,  1521,  1056,  2191,   102])"
789,0,[], Random variables,seg_27,54 exactly $152? explain.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  5139,  3599,  1002, 15017,  1029,  4863,  1012,   102])"
790,1,"['linear', 'combinations', 'random', 'linear combinations', 'random variables', 'variables', 'average']", Random variables,seg_27,"two important concepts concerning combinations of random variables have so far been introduced. first, a final value can sometimes be described as the sum of its parts in an equation. second, intuition suggests that putting the individual average values into this equation gives the average value we would expect in total. this second point needs clarification – it is guaranteed to be true in what are called linear combinations of random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2048,  2590,  8474,  7175, 14930,  1997,  6721, 10857,  2031,
         2061,  2521,  2042,  3107,  1012,  2034,  1010,  1037,  2345,  3643,
         2064,  2823,  2022,  2649,  2004,  1996,  7680,  1997,  2049,  3033,
         1999,  2019,  8522,  1012,  2117,  1010, 26406,  6083,  2008,  5128,
         1996,  3265,  2779,  5300,  2046,  2023,  8522,  3957,  1996,  2779,
         3643,  2057,  2052,  5987,  1999,  2561,  1012,  2023,  2117,  2391,
         3791, 18856,  8486, 10803,  1516,  2009,  2003, 12361,  2000,  2022,
         2995,  1999,  2054,  2024,  2170,  7399, 14930,  1997,  6721, 10857,
         1012,   102])"
791,1,"['linear combination', 'linear', 'random', 'random variables', 'variables', 'combination']", Random variables,seg_27,a linear combination of two random variables x and y is a fancy phrase to describe a combination,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0.])","tensor([ 6721, 10857])","tensor([  101,  1037,  7399,  5257,  1997,  2048,  6721, 10857,  1060,  1998,
         1061,  2003,  1037, 11281,  7655,  2000,  6235,  1037,  5257,   102])"
792,1,"['coefficient', 'random variable', 'random', 'random variables', 'variables', 'variable']", Random variables,seg_27,"where a and b are some fixed and known numbers. for john’s commute time, there were five random variables – one for each work day – and each random variable could be written as having a fixed coefficient of 1:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2073,  1037,  1998,  1038,  2024,  2070,  4964,  1998,  2124,
         3616,  1012,  2005,  2198,  1521,  1055,  4012, 26746,  2051,  1010,
         2045,  2020,  2274,  6721, 10857,  1516,  2028,  2005,  2169,  2147,
         2154,  1516,  1998,  2169,  6721,  8023,  2071,  2022,  2517,  2004,
         2383,  1037,  4964, 19064,  1997,  1015,  1024,   102])"
793,1,"['loss', 'coefficient', 'random variable', 'random', 'variable']", Random variables,seg_27,"for elena’s net gain or loss, the x random variable had a coefficient of +1 and the y random variable had a coefficient of -1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2005,  9060,  1521,  1055,  5658,  5114,  2030,  3279,  1010,
         1996,  1060,  6721,  8023,  2018,  1037, 19064,  1997,  1009,  1015,
         1998,  1996,  1061,  6721,  8023,  2018,  1037, 19064,  1997,  1011,
         1015,  1012,   102])"
794,1,"['cases', 'mean', 'linear combination', 'linear', 'combinations', 'random variable', 'nonlinear', 'random', 'random variables', 'variables', 'average', 'combination', 'variable']", Random variables,seg_27,"when considering the average of a linear combination of random variables, it is safe to plug in the mean of each random variable and then compute the final result. for a few examples of nonlinear combinations of random variables – cases where we cannot simply plug in the means – see",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  2043,  6195,  1996,  2779,  1997,  1037,  7399,  5257,  1997,
         6721, 10857,  1010,  2009,  2003,  3647,  2000, 13354,  1999,  1996,
         2812,  1997,  2169,  6721,  8023,  1998,  2059, 24134,  1996,  2345,
         2765,  1012,  2005,  1037,  2261,  4973,  1997, 27400, 14930,  1997,
         6721, 10857,  1516,  3572,  2073,  2057,  3685,  3432, 13354,  1999,
         1996,  2965,  1516,  2156,   102])"
795,0,[], Random variables,seg_27,55 the footnote.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  4583,  1996,  3329, 22074,  1012,   102])"
796,1,"['linear combination', 'linear', 'random', 'random variables', 'variables', 'combination']", Random variables,seg_27,"if x and y are random variables, then a linear combination of the random variables is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  6721, 10857,  1010,  2059,
         1037,  7399,  5257,  1997,  1996,  6721, 10857,  2003,  2445,  2011,
          102])"
797,1,"['linear combination', 'linear', 'random variable', 'random', 'random variables', 'variables', 'average', 'combination', 'variable']", Random variables,seg_27,"where a and b are some fixed numbers. to compute the average value of a linear combination of random variables, plug in the average of each individual random variable and compute the result:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2073,  1037,  1998,  1038,  2024,  2070,  4964,  3616,  1012,
         2000, 24134,  1996,  2779,  3643,  1997,  1037,  7399,  5257,  1997,
         6721, 10857,  1010, 13354,  1999,  1996,  2779,  1997,  2169,  3265,
         6721,  8023,  1998, 24134,  1996,  2765,  1024,   102])"
798,1,"['mean', 'expected value']", Random variables,seg_27,"recall that the expected value is the same as the mean, e.g. e(x) = µx .",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([ 101, 9131, 2008, 1996, 3517, 3643, 2003, 1996, 2168, 2004, 1996, 2812,
        1010, 1041, 1012, 1043, 1012, 1041, 1006, 1060, 1007, 1027, 1085, 2595,
        1012,  102])"
799,0,[], Random variables,seg_27,"leonard has invested $6000 in caterpillar inc (stock ticker: cat) and $2000 in exxon mobil corp (xom). if x represents the change in caterpillar’s stock next month and y represents the change in exxon mobil’s stock next month, write an equation that describes how much money will be made or lost in leonard’s stocks for the month.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  7723,  2038, 11241,  1002, 25961,  1999, 23488,  8197, 17305,
         4297,  1006,  4518, 16356,  2121,  1024,  4937,  1007,  1998,  1002,
         2456,  1999,  4654, 22500, 11240,  4014, 13058,  1006,  1060,  5358,
         1007,  1012,  2065,  1060,  5836,  1996,  2689,  1999, 23488,  8197,
        17305,  1521,  1055,  4518,  2279,  3204,  1998,  1061,  5836,  1996,
         2689,  1999,  4654, 22500, 11240,  4014,  1521,  1055,  4518,  2279,
         3204,  1010,  4339,  2019,  8522,  2008,  5577,  2129,  2172,  2769,
         2097,  2022,  2081,  2030,  2439,  1999,  7723,  1521,  1055, 15768,
         2005,  1996,  3204,  1012,   102])"
800,0,[], Random variables,seg_27,"for simplicity, we will suppose x and y are not in percents but are in decimal form (e.g. if caterpillar’s stock increases 1%, then x = 0.01; or if it loses 1%, then x = −0.01). then we can write an equation for leonard’s gain as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  2005, 17839,  1010,  2057,  2097,  6814,  1060,  1998,  1061,
         2024,  2025,  1999,  3867,  2015,  2021,  2024,  1999, 26066,  2433,
         1006,  1041,  1012,  1043,  1012,  2065, 23488,  8197, 17305,  1521,
         1055,  4518,  7457,  1015,  1003,  1010,  2059,  1060,  1027,  1014,
         1012,  5890,  1025,  2030,  2065,  2009, 12386,  1015,  1003,  1010,
         2059,  1060,  1027,  1597,  2692,  1012,  5890,  1007,  1012,  2059,
         2057,  2064,  4339,  2019,  8522,  2005,  7723,  1521,  1055,  5114,
         2004,   102])"
801,1,['loss'], Random variables,seg_27,"if we plug in the change in the stock value for x and y , this equation gives the change in value of leonard’s stock portfolio for the month. a positive value represents a gain, and a negative value represents a loss.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2065,  2057, 13354,  1999,  1996,  2689,  1999,  1996,  4518,
         3643,  2005,  1060,  1998,  1061,  1010,  2023,  8522,  3957,  1996,
         2689,  1999,  3643,  1997,  7723,  1521,  1055,  4518, 11103,  2005,
         1996,  3204,  1012,  1037,  3893,  3643,  5836,  1037,  5114,  1010,
         1998,  1037,  4997,  3643,  5836,  1037,  3279,  1012,   102])"
802,0,[], Random variables,seg_27,"caterpillar stock has recently been rising at 2.0% and exxon mobil’s at 0.2% per month, respectively.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101, 23488,  8197, 17305,  4518,  2038,  3728,  2042,  4803,  2012,
         1016,  1012,  1014,  1003,  1998,  4654, 22500, 11240,  4014,  1521,
         1055,  2012,  1014,  1012,  1016,  1003,  2566,  3204,  1010,  4414,
         1012,   102])"
803,0,[], Random variables,seg_27,56 compute the expected change in leonard’s stock portfolio for next month.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  5179, 24134,  1996,  3517,  2689,  1999,  7723,  1521,  1055,
         4518, 11103,  2005,  2279,  3204,  1012,   102])"
804,1,['loss'], Random variables,seg_27,"you should have found that leonard expects a positive gain in guided practice 3.66. however, would you be surprised if he actually had a loss this month?57",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2017,  2323,  2031,  2179,  2008,  7723, 24273,  1037,  3893,
         5114,  1999,  8546,  3218,  1017,  1012,  5764,  1012,  2174,  1010,
         2052,  2017,  2022,  4527,  2065,  2002,  2941,  2018,  1037,  3279,
         2023,  3204,  1029,  5401,   102])"
805,1,"['variability', 'linear', 'random', 'linear combinations', 'random variables', 'variables', 'combinations']", Random variables,seg_27,3.4.4 variability in linear combinations of random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 6721, 10857])","tensor([  101,  1017,  1012,  1018,  1012,  1018, 28436,  1999,  7399, 14930,
         1997,  6721, 10857,   102])"
806,1,"['loss', 'vary', 'linear combination', 'uncertainty', 'linear', 'associated', 'outcome', 'random', 'random variables', 'quantitative', 'variables', 'average', 'combination', 'data']", Random variables,seg_27,"quantifying the average outcome from a linear combination of random variables is helpful, but it is also important to have some sense of the uncertainty associated with the total outcome of that combination of random variables. the expected net gain or loss of leonard’s stock portfolio was considered in guided practice 3.66. however, there was no quantitative discussion of the volatility of this portfolio. for instance, while the average monthly gain might be about $124 according to the data, that gain is not guaranteed. figure 3.22 shows the monthly changes in a portfolio like leonard’s during a three year period. the gains and losses vary widely, and quantifying these fluctuations is important when investing in stocks.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101, 24110, 27351,  2075,  1996,  2779,  9560,  2013,  1037,  7399,
         5257,  1997,  6721, 10857,  2003, 14044,  1010,  2021,  2009,  2003,
         2036,  2590,  2000,  2031,  2070,  3168,  1997,  1996, 12503,  3378,
         2007,  1996,  2561,  9560,  1997,  2008,  5257,  1997,  6721, 10857,
         1012,  1996,  3517,  5658,  5114,  2030,  3279,  1997,  7723,  1521,
         1055,  4518, 11103,  2001,  2641,  1999,  8546,  3218,  1017,  1012,
         5764,  1012,  2174,  1010,  2045,  2001,  2053, 20155,  6594,  1997,
         1996,  5285, 10450, 18605,  1997,  2023, 11103,  1012,  2005,  6013,
         1010,  2096,  1996,  2779,  7058,  5114,  2453,  2022,  2055,  1002,
        13412,  2429,  2000,  1996,  2951,  1010,  2008,  5114,  2003,  2025,
        12361,  1012,  3275,  1017,  1012,  2570,  3065,  1996,  7058,  3431,
         1999,  1037, 11103,  2066,  7723,  1521,  1055,  2076,  1037,  2093,
         2095,  2558,  1012,  1996, 12154,  1998,  6409,  8137,  4235,  1010,
         1998, 24110, 27351,  2075,  2122, 28892,  2003,  2590,  2043, 19920,
         1999, 15768,  1012,   102])"
807,0,[], Random variables,seg_27,−1000 −500 0 500 1000 monthly returns over 3 years,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1597, 18613,  2692,  1597, 29345,  1014,  3156,  6694,  7058,
         5651,  2058,  1017,  2086,   102])"
808,0,[], Random variables,seg_27,"figure 3.22: the change in a portfolio like leonard’s for 36 months, where $6000 is in caterpillar’s stock and $2000 is in exxon mobil’s.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  3275,  1017,  1012,  2570,  1024,  1996,  2689,  1999,  1037,
        11103,  2066,  7723,  1521,  1055,  2005,  4029,  2706,  1010,  2073,
         1002, 25961,  2003,  1999, 23488,  8197, 17305,  1521,  1055,  4518,
         1998,  1002,  2456,  2003,  1999,  4654, 22500, 11240,  4014,  1521,
         1055,  1012,   102])"
809,1,"['cases', 'deviation', 'uncertainty', 'variance', 'associated', 'variances', 'standard deviation', 'independent', 'standard']", Random variables,seg_27,"just as we have done in many previous cases, we use the variance and standard deviation to describe the uncertainty associated with leonard’s monthly returns. to do so, the variances of each stock’s monthly return will be useful, and these are shown in figure 3.23. the stocks’ returns are nearly independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2074,  2004,  2057,  2031,  2589,  1999,  2116,  3025,  3572,
         1010,  2057,  2224,  1996, 23284,  1998,  3115, 24353,  2000,  6235,
         1996, 12503,  3378,  2007,  7723,  1521,  1055,  7058,  5651,  1012,
         2000,  2079,  2061,  1010,  1996, 23284,  2015,  1997,  2169,  4518,
         1521,  1055,  7058,  2709,  2097,  2022,  6179,  1010,  1998,  2122,
         2024,  3491,  1999,  3275,  1017,  1012,  2603,  1012,  1996, 15768,
         1521,  5651,  2024,  3053,  2981,  1012,   102])"
810,1,"['linear combination', 'uncertainty', 'variance', 'linear', 'probability', 'probability theory', 'coefficients', 'variances', 'method', 'random', 'random variables', 'variables', 'combination']", Random variables,seg_27,here we use an equation from probability theory to describe the uncertainty of leonard’s monthly returns; we leave the proof of this method to a dedicated probability course. the variance of a linear combination of random variables can be computed by plugging in the variances of the individual random variables and squaring the coefficients of the random variables:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2182,  2057,  2224,  2019,  8522,  2013,  9723,  3399,  2000,
         6235,  1996, 12503,  1997,  7723,  1521,  1055,  7058,  5651,  1025,
         2057,  2681,  1996,  6947,  1997,  2023,  4118,  2000,  1037,  4056,
         9723,  2607,  1012,  1996, 23284,  1997,  1037,  7399,  5257,  1997,
         6721, 10857,  2064,  2022, 24806,  2011, 13354,  4726,  1999,  1996,
        23284,  2015,  1997,  1996,  3265,  6721, 10857,  1998,  5490,  6692,
         4892,  1996, 21374,  1997,  1996,  6721, 10857,  1024,   102])"
811,1,"['variance', 'random', 'random variables', 'variables', 'independent']", Random variables,seg_27,"it is important to note that this equality assumes the random variables are independent; if independence doesn’t hold, then a modification to this equation would be required that we leave as a topic for a future course to cover. this equation can be used to compute the variance of leonard’s monthly return:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2009,  2003,  2590,  2000,  3602,  2008,  2023,  9945, 15980,
         1996,  6721, 10857,  2024,  2981,  1025,  2065,  4336,  2987,  1521,
         1056,  2907,  1010,  2059,  1037, 14080,  2000,  2023,  8522,  2052,
         2022,  3223,  2008,  2057,  2681,  2004,  1037,  8476,  2005,  1037,
         2925,  2607,  2000,  3104,  1012,  2023,  8522,  2064,  2022,  2109,
         2000, 24134,  1996, 23284,  1997,  7723,  1521,  1055,  7058,  2709,
         1024,   102])"
812,1,"['deviation', 'variance', 'standard deviation', 'standard', 'average']", Random variables,seg_27,"the standard deviation is computed as the square root of the variance: √213, 600 = $463. while an average monthly return of $124 on an $8000 investment is nothing to scoff at, the monthly returns are so volatile that leonard should not expect this income to be very stable.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996,  3115, 24353,  2003, 24806,  2004,  1996,  2675,  7117,
         1997,  1996, 23284,  1024,  1600, 17465,  2509,  1010,  5174,  1027,
         1002,  4805,  2509,  1012,  2096,  2019,  2779,  7058,  2709,  1997,
         1002, 13412,  2006,  2019,  1002,  5385,  2692,  5211,  2003,  2498,
         2000,  8040,  7245,  2012,  1010,  1996,  7058,  5651,  2024,  2061,
        20606,  2008,  7723,  2323,  2025,  5987,  2023,  3318,  2000,  2022,
         2200,  6540,  1012,   102])"
813,1,"['deviation', 'variance', 'standard deviation', 'standard']", Random variables,seg_27,mean (x̄) standard deviation (s) variance (s2) cat 0.0204 0.0757 0.0057 xom 0.0025 0.0455 0.0021,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2812,  1006,  1060,  1007,  3115, 24353,  1006,  1055,  1007,
        23284,  1006,  1055,  2475,  1007,  4937,  1014,  1012,  6185,  2692,
         2549,  1014,  1012,  5718, 28311,  1014,  1012,  4002, 28311,  1060,
         5358,  1014,  1012,  4002, 17788,  1014,  1012,  5840, 24087,  1014,
         1012,  4002, 17465,   102])"
814,1,"['mean', 'deviation', 'variance', 'data', 'sample statistics', 'estimated', 'sample', 'standard deviation', 'standard', 'statistics']", Random variables,seg_27,"figure 3.23: the mean, standard deviation, and variance of the cat and xom stocks. these statistics were estimated from historical stock data, so notation used for sample statistics has been used.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  3275,  1017,  1012,  2603,  1024,  1996,  2812,  1010,  3115,
        24353,  1010,  1998, 23284,  1997,  1996,  4937,  1998,  1060,  5358,
        15768,  1012,  2122,  6747,  2020,  4358,  2013,  3439,  4518,  2951,
         1010,  2061, 14869,  2109,  2005,  7099,  6747,  2038,  2042,  2109,
         1012,   102])"
815,1,"['linear combination', 'linear', 'variance', 'variances', 'random', 'random variables', 'variables', 'combination']", Random variables,seg_27,"the variance of a linear combination of random variables may be computed by squaring the constants, substituting in the variances for the random variables, and computing the result:",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996, 23284,  1997,  1037,  7399,  5257,  1997,  6721, 10857,
         2089,  2022, 24806,  2011,  5490,  6692,  4892,  1996,  5377,  2015,
         1010,  4942, 21532,  1999,  1996, 23284,  2015,  2005,  1996,  6721,
        10857,  1010,  1998,  9798,  1996,  2765,  1024,   102])"
816,1,"['linear combination', 'deviation', 'linear', 'variance', 'random', 'standard deviation', 'random variables', 'standard', 'variables', 'combination', 'independent']", Random variables,seg_27,this equation is valid as long as the random variables are independent of each other. the standard deviation of the linear combination may be found by taking the square root of the variance.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  2023,  8522,  2003,  9398,  2004,  2146,  2004,  1996,  6721,
        10857,  2024,  2981,  1997,  2169,  2060,  1012,  1996,  3115, 24353,
         1997,  1996,  7399,  5257,  2089,  2022,  2179,  2011,  2635,  1996,
         2675,  7117,  1997,  1996, 23284,  1012,   102])"
817,1,"['deviation', 'uncertainty', 'standard deviation', 'standard']", Random variables,seg_27,suppose john’s daily commute has a standard deviation of 4 minutes. what is the uncertainty in his total commute time for the week?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  6814,  2198,  1521,  1055,  3679,  4012, 26746,  2038,  1037,
         3115, 24353,  1997,  1018,  2781,  1012,  2054,  2003,  1996, 12503,
         1999,  2010,  2561,  4012, 26746,  2051,  2005,  1996,  2733,  1029,
          102])"
818,0,[], Random variables,seg_27,the expression for john’s commute time was,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6721, 10857])","tensor([  101,  1996,  3670,  2005,  2198,  1521,  1055,  4012, 26746,  2051,
         2001,   102])"
819,1,"['coefficient', 'variance']", Random variables,seg_27,"each coefficient is 1, and the variance of each day’s time is 42 = 16. thus, the variance of the total weekly commute time is",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  2169, 19064,  2003,  1015,  1010,  1998,  1996, 23284,  1997,
         2169,  2154,  1521,  1055,  2051,  2003,  4413,  1027,  2385,  1012,
         2947,  1010,  1996, 23284,  1997,  1996,  2561,  4882,  4012, 26746,
         2051,  2003,   102])"
820,1,"['deviation', 'deviation ']", Random variables,seg_27,standard deviation = √variance = √80 = 8.94,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  3115, 24353,  1027,  1600, 10755, 28335,  1027,  1600, 17914,
         1027,  1022,  1012,  6365,   102])"
821,1,"['deviation', 'standard deviation', 'standard']", Random variables,seg_27,the standard deviation for john’s weekly work commute time is about 9 minutes.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6721, 10857])","tensor([  101,  1996,  3115, 24353,  2005,  2198,  1521,  1055,  4882,  2147,
         4012, 26746,  2051,  2003,  2055,  1023,  2781,  1012,   102])"
822,1,['independent'], Random variables,seg_27,the computation in example 3.68 relied on an important assumption: the commute time for each day is independent of the time on other days of that week. do you think this is valid? explain.58,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  1996, 22334,  1999,  2742,  1017,  1012,  6273, 13538,  2006,
         2019,  2590, 11213,  1024,  1996,  4012, 26746,  2051,  2005,  2169,
         2154,  2003,  2981,  1997,  1996,  2051,  2006,  2060,  2420,  1997,
         2008,  2733,  1012,  2079,  2017,  2228,  2023,  2003,  9398,  1029,
         4863,  1012,  5388,   102])"
823,1,"['variability', 'deviation', 'associated', 'standard deviation', 'deviations', 'standard', 'standard deviations', 'independent']", Random variables,seg_27,consider elena’s two auctions from guided practice 3.62 on page 120. suppose these auctions are approximately independent and the variability in auction prices associated with the tv and toaster oven can be described using standard deviations of $25 and $8. compute the standard deviation of elena’s net gain.59,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  5136,  9060,  1521,  1055,  2048, 10470,  2015,  2013,  8546,
         3218,  1017,  1012,  5786,  2006,  3931,  6036,  1012,  6814,  2122,
        10470,  2015,  2024,  3155,  2981,  1998,  1996, 28436,  1999, 10470,
         7597,  3378,  2007,  1996,  2694,  1998, 15174,  2121, 17428,  2064,
         2022,  2649,  2478,  3115, 24353,  2015,  1997,  1002,  2423,  1998,
         1002,  1022,  1012, 24134,  1996,  3115, 24353,  1997,  9060,  1521,
         1055,  5658,  5114,  1012,  5354,   102])"
824,1,"['variability', 'linear combination', 'linear', 'coefficients', 'coefficient', 'expected value', 'combination']", Random variables,seg_27,"consider again guided practice 3.70. the negative coefficient for y in the linear combination was eliminated when we squared the coefficients. this generally holds true: negatives in a linear combination will have no impact on the variability computed for a linear combination, but they do impact the expected value computations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([ 6721, 10857])","tensor([  101,  5136,  2153,  8546,  3218,  1017,  1012,  3963,  1012,  1996,
         4997, 19064,  2005,  1061,  1999,  1996,  7399,  5257,  2001,  5892,
         2043,  2057, 19942,  1996, 21374,  1012,  2023,  3227,  4324,  2995,
         1024,  4997,  2015,  1999,  1037,  7399,  5257,  2097,  2031,  2053,
         4254,  2006,  1996, 28436, 24806,  2005,  1037,  7399,  5257,  1010,
         2021,  2027,  2079,  4254,  1996,  3517,  3643, 22334,  2015,  1012,
          102])"
825,1,"['continuous', 'cases', 'discrete', 'outcome', 'numerical', 'variable']", Continuous distributions,seg_29,"so far in this chapter we’ve discussed cases where the outcome of a variable is discrete. in this section, we consider a context where the outcome is a continuous numerical variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2061,  2521,  1999,  2023,  3127,  2057,  1521,  2310,  6936,
         3572,  2073,  1996,  9560,  1997,  1037,  8023,  2003, 16246,  1012,
         1999,  2023,  2930,  1010,  2057,  5136,  1037,  6123,  2073,  1996,
         9560,  2003,  1037,  7142, 15973,  8023,  1012,   102])"
826,1,"['histograms', 'hollow histograms', 'bins', 'data']", Continuous distributions,seg_29,figure 3.24 shows a few different hollow histograms for the heights of us adults. how does changing the number of bins allow you to make different interpretations of the data?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  3275,  1017,  1012,  2484,  3065,  1037,  2261,  2367,  8892,
         2010,  3406, 13113,  2015,  2005,  1996,  7535,  1997,  2149,  6001,
         1012,  2129,  2515,  5278,  1996,  2193,  1997,  8026,  2015,  3499,
         2017,  2000,  2191,  2367, 15931,  1997,  1996,  2951,  1029,   102])"
827,1,"['mean', 'bins', 'sample', 'bin']", Continuous distributions,seg_29,"adding more bins provides greater detail. this sample is extremely large, which is why much smaller bins still work well. usually we do not use so many bins with smaller sample sizes since small counts per bin mean the bin heights are very volatile.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  5815,  2062,  8026,  2015,  3640,  3618,  6987,  1012,  2023,
         7099,  2003,  5186,  2312,  1010,  2029,  2003,  2339,  2172,  3760,
         8026,  2015,  2145,  2147,  2092,  1012,  2788,  2057,  2079,  2025,
         2224,  2061,  2116,  8026,  2015,  2007,  3760,  7099, 10826,  2144,
         2235,  9294,  2566,  8026,  2812,  1996,  8026,  7535,  2024,  2200,
        20606,  1012,   102])"
828,0,[], Continuous distributions,seg_29,height (cm) height (cm) ycneuqerf,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7142, 20611])","tensor([ 101, 4578, 1006, 4642, 1007, 4578, 1006, 4642, 1007, 1061, 2278, 2638,
        2226, 4160, 2121, 2546,  102])"
829,1,"['histograms', 'bin widths', 'hollow histograms', 'varying', 'bin']", Continuous distributions,seg_29,figure 3.24: four hollow histograms of us adults heights with varying bin widths.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  3275,  1017,  1012,  2484,  1024,  2176,  8892,  2010,  3406,
        13113,  2015,  1997,  2149,  6001,  7535,  2007,  9671,  8026,  9381,
         2015,  1012,   102])"
830,1,['sample'], Continuous distributions,seg_29,what proportion of the sample is between 180 cm and 185 cm tall (about 5’11” to 6’1”)?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2054, 10817,  1997,  1996,  7099,  2003,  2090,  8380,  4642,
         1998, 15376,  4642,  4206,  1006,  2055,  1019,  1521,  2340,  1524,
         2000,  1020,  1521,  1015,  1524,  1007,  1029,   102])"
831,1,"['range', 'probability', 'estimate', 'bins', 'sample', 'sample size']", Continuous distributions,seg_29,"we can add up the heights of the bins in the range 180 cm and 185 and divide by the sample size. for instance, this can be done with the two shaded bins shown in figure 3.25. the two bins in this region have counts of 195,307 and 156,239 people, resulting in the following estimate of the probability:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2057,  2064,  5587,  2039,  1996,  7535,  1997,  1996,  8026,
         2015,  1999,  1996,  2846,  8380,  4642,  1998, 15376,  1998, 11443,
         2011,  1996,  7099,  2946,  1012,  2005,  6013,  1010,  2023,  2064,
         2022,  2589,  2007,  1996,  2048, 25273,  8026,  2015,  3491,  1999,
         3275,  1017,  1012,  2423,  1012,  1996,  2048,  8026,  2015,  1999,
         2023,  2555,  2031,  9294,  1997, 17317,  1010, 24559,  1998, 16734,
         1010, 23688,  2111,  1010,  4525,  1999,  1996,  2206, 10197,  1997,
         1996,  9723,  1024,   102])"
832,1,['range'], Continuous distributions,seg_29,this fraction is the same as the proportion of the histogram’s area that falls in the range 180 to 185 cm.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2023, 12884,  2003,  1996,  2168,  2004,  1996, 10817,  1997,
         1996,  2010,  3406, 13113,  1521,  1055,  2181,  2008,  4212,  1999,
         1996,  2846,  8380,  2000, 15376,  4642,  1012,   102])"
833,1,"['bin', 'histogram']", Continuous distributions,seg_29,figure 3.25: a histogram with bin sizes of 2.5 cm. the shaded region represents individuals with heights between 180 and 185 cm.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  3275,  1017,  1012,  2423,  1024,  1037,  2010,  3406, 13113,
         2007,  8026, 10826,  1997,  1016,  1012,  1019,  4642,  1012,  1996,
        25273,  2555,  5836,  3633,  2007,  7535,  2090,  8380,  1998, 15376,
         4642,  1012,   102])"
834,1,"['continuous', 'histograms', 'continuous distributions', 'distributions']", Continuous distributions,seg_29,3.5.1 from histograms to continuous distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,  1017,  1012,  1019,  1012,  1015,  2013,  2010,  3406, 13113,
         2015,  2000,  7142, 20611,   102])"
835,1,"['continuous', 'curve', 'hollow histogram', 'numerical', 'histogram', 'bins', 'population', 'plot', 'variable']", Continuous distributions,seg_29,"examine the transition from a boxy hollow histogram in the top-left of figure 3.24 to the much smoother plot in the lower-right. in this last plot, the bins are so slim that the hollow histogram is starting to resemble a smooth curve. this suggests the population height as a continuous numerical variable might best be explained by a curve that represents the outline of extremely slim bins.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7142, 20611])","tensor([  101, 11628,  1996,  6653,  2013,  1037,  3482,  2100,  8892,  2010,
         3406, 13113,  1999,  1996,  2327,  1011,  2187,  1997,  3275,  1017,
         1012,  2484,  2000,  1996,  2172,  5744,  2121,  5436,  1999,  1996,
         2896,  1011,  2157,  1012,  1999,  2023,  2197,  5436,  1010,  1996,
         8026,  2015,  2024,  2061, 11754,  2008,  1996,  8892,  2010,  3406,
        13113,  2003,  3225,  2000, 13014,  1037,  5744,  7774,  1012,  2023,
         6083,  1996,  2313,  4578,  2004,  1037,  7142, 15973,  8023,  2453,
         2190,  2022,  4541,  2011,  1037,  7774,  2008,  5836,  1996, 12685,
         1997,  5186, 11754,  8026,  2015,  1012,   102])"
836,1,"['curve', 'function', 'density function', 'probability', 'probability density function', 'histogram', 'sample', 'distribution']", Continuous distributions,seg_29,"this smooth curve represents a probability density function (also called a density or distribution), and such a curve is shown in figure 3.26 overlaid on a histogram of the sample. a density has a special property: the total area under the density’s curve is 1.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2023,  5744,  7774,  5836,  1037,  9723,  4304,  3853,  1006,
         2036,  2170,  1037,  4304,  2030,  4353,  1007,  1010,  1998,  2107,
         1037,  7774,  2003,  3491,  1999,  3275,  1017,  1012,  2656,  2058,
        24393,  2006,  1037,  2010,  3406, 13113,  1997,  1996,  7099,  1012,
         1037,  4304,  2038,  1037,  2569,  3200,  1024,  1996,  2561,  2181,
         2104,  1996,  4304,  1521,  1055,  7774,  2003,  1015,  1012,   102])"
837,1,"['continuous', 'probability', 'distribution', 'continuous probability distribution', 'probability distribution']", Continuous distributions,seg_29,figure 3.26: the continuous probability distribution of heights for us adults.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([ 101, 3275, 1017, 1012, 2656, 1024, 1996, 7142, 9723, 4353, 1997, 7535,
        2005, 2149, 6001, 1012,  102])"
838,1,"['continuous', 'continuous distributions', 'probabilities', 'distributions']", Continuous distributions,seg_29,3.5.2 probabilities from continuous distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,  1017,  1012,  1019,  1012,  1016,  4013,  3676, 14680,  2013,
         7142, 20611,   102])"
839,0,[], Continuous distributions,seg_29,we computed the proportion of individuals with heights 180 to 185 cm in example 3.72 as a fraction:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7142, 20611])","tensor([  101,  2057, 24806,  1996, 10817,  1997,  3633,  2007,  7535,  8380,
         2000, 15376,  4642,  1999,  2742,  1017,  1012,  5824,  2004,  1037,
        12884,  1024,   102])"
840,0,[], Continuous distributions,seg_29,number of people between 180 and 185,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7142, 20611])","tensor([  101,  2193,  1997,  2111,  2090,  8380,  1998, 15376,   102])"
841,1,"['sample', 'sample size']", Continuous distributions,seg_29,total sample size,tensor(1),"tensor([0., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([ 101, 2561, 7099, 2946,  102])"
842,1,"['curve', 'probability']", Continuous distributions,seg_29,"we found the number of people with heights between 180 and 185 cm by determining the fraction of the histogram’s area in this region. similarly, we can use the area in the shaded region under the curve to find a probability (with the help of a computer):",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2057,  2179,  1996,  2193,  1997,  2111,  2007,  7535,  2090,
         8380,  1998, 15376,  4642,  2011, 12515,  1996, 12884,  1997,  1996,
         2010,  3406, 13113,  1521,  1055,  2181,  1999,  2023,  2555,  1012,
         6660,  1010,  2057,  2064,  2224,  1996,  2181,  1999,  1996, 25273,
         2555,  2104,  1996,  7774,  2000,  2424,  1037,  9723,  1006,  2007,
         1996,  2393,  1997,  1037,  3274,  1007,  1024,   102])"
843,0,[], Continuous distributions,seg_29,p (height between 180 and 185) = area between 180 and 185 = 0.1157,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7142, 20611])","tensor([  101,  1052,  1006,  4578,  2090,  8380,  1998, 15376,  1007,  1027,
         2181,  2090,  8380,  1998, 15376,  1027,  1014,  1012, 10630,  2581,
          102])"
844,1,"['probability', 'estimate']", Continuous distributions,seg_29,the probability that a randomly selected person is between 180 and 185 cm is 0.1157. this is very close to the estimate from example 3.72: 0.1172.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  1996,  9723,  2008,  1037, 18154,  3479,  2711,  2003,  2090,
         8380,  1998, 15376,  4642,  2003,  1014,  1012, 10630,  2581,  1012,
         2023,  2003,  2200,  2485,  2000,  1996, 10197,  2013,  2742,  1017,
         1012,  5824,  1024,  1014,  1012, 12567,  2475,  1012,   102])"
845,1,"['plot', 'population']", Continuous distributions,seg_29,figure 3.27: density for heights in the us adult population with the area between 180 and 185 cm shaded. compare this plot with figure 3.25.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  3275,  1017,  1012,  2676,  1024,  4304,  2005,  7535,  1999,
         1996,  2149,  4639,  2313,  2007,  1996,  2181,  2090,  8380,  1998,
        15376,  4642, 25273,  1012, 12826,  2023,  5436,  2007,  3275,  1017,
         1012,  2423,  1012,   102])"
846,1,['probability'], Continuous distributions,seg_29,three us adults are randomly selected. the probability a single adult is between 180 and 185 cm,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2093,  2149,  6001,  2024, 18154,  3479,  1012,  1996,  9723,
         1037,  2309,  4639,  2003,  2090,  8380,  1998, 15376,  4642,   102])"
847,1,['probability'], Continuous distributions,seg_29,(a) what is the probability that all three are between 180 and 185 cm tall?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7142, 20611])","tensor([  101,  1006,  1037,  1007,  2054,  2003,  1996,  9723,  2008,  2035,
         2093,  2024,  2090,  8380,  1998, 15376,  4642,  4206,  1029,   102])"
848,1,['probability'], Continuous distributions,seg_29,(b) what is the probability that none are between 180 and 185 cm?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  1006,  1038,  1007,  2054,  2003,  1996,  9723,  2008,  3904,
         2024,  2090,  8380,  1998, 15376,  4642,  1029,   102])"
849,1,['probability'], Continuous distributions,seg_29,what is the probability that a randomly selected person is exactly 180 cm? assume you can measure perfectly.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  2054,  2003,  1996,  9723,  2008,  1037, 18154,  3479,  2711,
         2003,  3599,  8380,  4642,  1029,  7868,  2017,  2064,  5468,  6669,
         1012,   102])"
850,1,['probability'], Continuous distributions,seg_29,"this probability is zero. a person might be close to 180 cm, but not exactly 180 cm tall. this also makes sense with the definition of probability as area; there is no area captured between 180 cm and 180 cm.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([ 101, 2023, 9723, 2003, 5717, 1012, 1037, 2711, 2453, 2022, 2485, 2000,
        8380, 4642, 1010, 2021, 2025, 3599, 8380, 4642, 4206, 1012, 2023, 2036,
        3084, 3168, 2007, 1996, 6210, 1997, 9723, 2004, 2181, 1025, 2045, 2003,
        2053, 2181, 4110, 2090, 8380, 4642, 1998, 8380, 4642, 1012,  102])"
851,1,['random'], Continuous distributions,seg_29,suppose a person’s height is rounded to the nearest centimeter. is there a chance that a random person’s measured height will be 180 cm?61,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,  6814,  1037,  2711,  1521,  1055,  4578,  2003,  8352,  2000,
         1996,  7205,  9358, 19198,  1012,  2003,  2045,  1037,  3382,  2008,
         1037,  6721,  2711,  1521,  1055,  7594,  4578,  2097,  2022,  8380,
         4642,  1029,  6079,   102])"
852,1,"['negative binomial distribution', 'geometric', 'normal distribution', 'data', 'geometric distribution', 'negative binomial', 'distributions', 'poisson', 'statistical inference', 'normal', 'statistical', 'distribution', 'poisson distribution', 'binomial', 'binomial distribution']",Chapter  Distributions of random variables,seg_31,"4.1 normal distribution 4.2 geometric distribution 4.3 binomial distribution 4.4 negative binomial distribution 4.5 poisson distribution in this chapter, we discuss statistical distributions that frequently arise in the context of data analysis or statistical inference. we start with the normal distribution in the first section, which is used frequently in later chapters of this book. the remaining sections will occasionally be referenced but may be considered optional for the content in this book. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3127, 20611,  1997,  6721, 10857])","tensor([  101,  1018,  1012,  1015,  3671,  4353,  1018,  1012,  1016, 14965,
         4353,  1018,  1012,  1017,  8026, 20936,  2389,  4353,  1018,  1012,
         1018,  4997,  8026, 20936,  2389,  4353,  1018,  1012,  1019, 13433,
        24077,  4353,  1999,  2023,  3127,  1010,  2057,  6848,  7778, 20611,
         2008,  4703, 13368,  1999,  1996,  6123,  1997,  2951,  4106,  2030,
         7778, 28937,  1012,  2057,  2707,  2007,  1996,  3671,  4353,  1999,
         1996,  2034,  2930,  1010,  2029,  2003,  2109,  4703,  1999,  2101,
         9159,  1997,  2023,  2338,  1012,  1996,  3588,  5433,  2097,  5681,
         2022, 14964,  2021,  2089,  2022,  2641, 11887,  2005,  1996,  4180,
         1999,  2023,  2338,  1012,  2005,  6876,  1010, 14816,  1010,  1998,
         2060,  4219,  1010,  3531,  3942,  7479,  1012,  2330, 18447,  3217,
         1012,  8917,  1013,  9808,   102])"
853,1,"['curve', 'scores', 'normal distribution', 'symmetric', 'unimodal', 'distributions', 'normal', 'statistics', 'distribution', 'variables']", Normal distribution,seg_33,"among all the distributions we see in practice, one is overwhelmingly the most common. the symmetric, unimodal, bell curve is ubiquitous throughout statistics. indeed it is so common, that people often know it as the normal curve or normal distribution,1 shown in figure 4.1. variables such as sat scores and heights of us adult males closely follow the normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2426,  2035,  1996, 20611,  2057,  2156,  1999,  3218,  1010,
         2028,  2003, 24783,  1996,  2087,  2691,  1012,  1996, 19490,  1010,
         4895, 16339,  9305,  1010,  4330,  7774,  2003, 28498,  2802,  6747,
         1012,  5262,  2009,  2003,  2061,  2691,  1010,  2008,  2111,  2411,
         2113,  2009,  2004,  1996,  3671,  7774,  2030,  3671,  4353,  1010,
         1015,  3491,  1999,  3275,  1018,  1012,  1015,  1012, 10857,  2107,
         2004,  2938,  7644,  1998,  7535,  1997,  2149,  4639,  3767,  4876,
         3582,  1996,  3671,  4353,  1012,   102])"
854,1,"['curve', 'normal']", Normal distribution,seg_33,figure 4.1: a normal curve.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 3275, 1018, 1012, 1015, 1024, 1037, 3671, 7774, 1012,  102])"
855,1,"['normal distribution', 'data', 'normal', 'statistics', 'distribution', 'variables']", Normal distribution,seg_33,"many variables are nearly normal, but none are exactly normal. thus the normal distribution, while not perfect for any single problem, is very useful for a variety of problems. we will use it in data exploration and to solve important problems in statistics.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2116, 10857,  2024,  3053,  3671,  1010,  2021,  3904,  2024,
         3599,  3671,  1012,  2947,  1996,  3671,  4353,  1010,  2096,  2025,
         3819,  2005,  2151,  2309,  3291,  1010,  2003,  2200,  6179,  2005,
         1037,  3528,  1997,  3471,  1012,  2057,  2097,  2224,  2009,  1999,
         2951,  8993,  1998,  2000,  9611,  2590,  3471,  1999,  6747,  1012,
          102])"
856,1,"['model', 'normal', 'normal distribution', 'distribution']", Normal distribution,seg_33,4.1.1 normal distribution model,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([3671, 4353])","tensor([ 101, 1018, 1012, 1015, 1012, 1015, 3671, 4353, 2944,  102])"
857,1,"['curve', 'mean', 'deviation', 'normal distribution', 'normal distributions', 'unimodal', 'distributions', 'normal', 'standard deviation', 'standard', 'adjusted', 'distribution', 'model', 'parameters', 'symmetric']", Normal distribution,seg_33,"the normal distribution always describes a symmetric, unimodal, bell-shaped curve. however, these curves can look different depending on the details of the model. specifically, the normal distribution model can be adjusted using two parameters: mean and standard deviation. as you can probably guess, changing the mean shifts the bell curve to the left or right, while changing the standard deviation stretches or constricts the curve. figure 4.2 shows the normal distribution with mean 0 and standard deviation 1 in the left panel and the normal distributions with mean 19 and standard deviation 4 in the right panel. figure 4.3 shows these distributions on the same axis.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1996,  3671,  4353,  2467,  5577,  1037, 19490,  1010,  4895,
        16339,  9305,  1010,  4330,  1011,  5044,  7774,  1012,  2174,  1010,
         2122, 10543,  2064,  2298,  2367,  5834,  2006,  1996,  4751,  1997,
         1996,  2944,  1012,  4919,  1010,  1996,  3671,  4353,  2944,  2064,
         2022, 10426,  2478,  2048, 11709,  1024,  2812,  1998,  3115, 24353,
         1012,  2004,  2017,  2064,  2763,  3984,  1010,  5278,  1996,  2812,
        12363,  1996,  4330,  7774,  2000,  1996,  2187,  2030,  2157,  1010,
         2096,  5278,  1996,  3115, 24353, 14082,  2030,  9530,  3367,  7277,
         3215,  1996,  7774,  1012,  3275,  1018,  1012,  1016,  3065,  1996,
         3671,  4353,  2007,  2812,  1014,  1998,  3115, 24353,  1015,  1999,
         1996,  2187,  5997,  1998,  1996,  3671, 20611,  2007,  2812,  2539,
         1998,  3115, 24353,  1018,  1999,  1996,  2157,  5997,  1012,  3275,
         1018,  1012,  1017,  3065,  2122, 20611,  2006,  1996,  2168,  8123,
         1012,   102])"
858,1,"['normal', 'normal distribution', 'distribution']", Normal distribution,seg_33,"figure 4.2: both curves represent the normal distribution. however, they differ in their center and spread.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  3275,  1018,  1012,  1016,  1024,  2119, 10543,  5050,  1996,
         3671,  4353,  1012,  2174,  1010,  2027, 11234,  1999,  2037,  2415,
         1998,  3659,  1012,   102])"
859,1,"['mean', 'deviation', 'normal distribution', 'distributions', 'normal', 'standard deviation', 'standard', 'distribution']", Normal distribution,seg_33,"if a normal distribution has mean µ and standard deviation σ, we may write the distribution as n(µ, σ). the two distributions in figure 4.3 may be written as",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2065,  1037,  3671,  4353,  2038,  2812,  1085,  1998,  3115,
        24353,  1173,  1010,  2057,  2089,  4339,  1996,  4353,  2004,  1050,
         1006,  1085,  1010,  1173,  1007,  1012,  1996,  2048, 20611,  1999,
         3275,  1018,  1012,  1017,  2089,  2022,  2517,  2004,   102])"
860,1,"['mean', 'deviation', 'normal distribution', 'standard normal distribution', 'standard normal', 'normal', 'standard deviation', 'standard', 'distribution', 'parameters']", Normal distribution,seg_33,"because the mean and standard deviation describe a normal distribution exactly, they are called the distribution’s parameters. the normal distribution with mean µ = 0 and standard deviation σ = 1 is called the standard normal distribution.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2138,  1996,  2812,  1998,  3115, 24353,  6235,  1037,  3671,
         4353,  3599,  1010,  2027,  2024,  2170,  1996,  4353,  1521,  1055,
        11709,  1012,  1996,  3671,  4353,  2007,  2812,  1085,  1027,  1014,
         1998,  3115, 24353,  1173,  1027,  1015,  2003,  2170,  1996,  3115,
         3671,  4353,  1012,   102])"
861,1,"['normal distributions', 'distributions', 'normal']", Normal distribution,seg_33,figure 4.3: the normal distributions shown in figure 4.2 but plotted together and on the same scale.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  3275,  1018,  1012,  1017,  1024,  1996,  3671, 20611,  3491,
         1999,  3275,  1018,  1012,  1016,  2021, 27347,  2362,  1998,  2006,
         1996,  2168,  4094,  1012,   102])"
862,1,"['mean', 'deviation', 'normal distribution', 'normal', 'standard deviation', 'standard', 'distribution']", Normal distribution,seg_33,"write down the short-hand for a normal distribution with2 (a) mean 5 and standard deviation 3, (b) mean -100 and standard deviation 10, and (c) mean 2 and standard deviation 9.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  4339,  2091,  1996,  2460,  1011,  2192,  2005,  1037,  3671,
         4353,  2007,  2475,  1006,  1037,  1007,  2812,  1019,  1998,  3115,
        24353,  1017,  1010,  1006,  1038,  1007,  2812,  1011,  2531,  1998,
         3115, 24353,  2184,  1010,  1998,  1006,  1039,  1007,  2812,  1016,
         1998,  3115, 24353,  1023,  1012,   102])"
863,0,[], Normal distribution,seg_33,4.1.2 standardizing with z-scores,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([ 101, 1018, 1012, 1015, 1012, 1016, 3115, 6026, 2007, 1062, 1011, 7644,
         102])"
864,1,"['standardized', 'data']", Normal distribution,seg_33,"we often want to put data onto a standardized scale, which can make comparisons more reasonable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3671, 4353])","tensor([  101,  2057,  2411,  2215,  2000,  2404,  2951,  3031,  1037, 16367,
         4094,  1010,  2029,  2064,  2191, 18539,  2062,  9608,  1012,   102])"
865,1,"['mean', 'deviation', 'scores', 'normal', 'standard deviation', 'standard', 'distribution']", Normal distribution,seg_33,table 4.4 shows the mean and standard deviation for total scores on the sat and act. the distribution of sat and act scores are both nearly normal. suppose ann scored 1300 on her sat and tom scored 24 on his act. who performed better?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2795,  1018,  1012,  1018,  3065,  1996,  2812,  1998,  3115,
        24353,  2005,  2561,  7644,  2006,  1996,  2938,  1998,  2552,  1012,
         1996,  4353,  1997,  2938,  1998,  2552,  7644,  2024,  2119,  3053,
         3671,  1012,  6814,  5754,  3195, 19527,  2006,  2014,  2938,  1998,
         3419,  3195,  2484,  2006,  2010,  2552,  1012,  2040,  2864,  2488,
         1029,   102])"
866,1,"['mean', 'deviation', 'standard deviation', 'deviations', 'standard', 'average', 'standard deviations']", Normal distribution,seg_33,"we use the standard deviation as a guide. ann is 1 standard deviation above average on the sat: 1100 + 200 = 1300. tom is 0.5 standard deviations above the mean on the act: 21 + 0.5× 6 = 24. in figure 4.5, we can see that ann tends to do better with respect to everyone else than tom did, so her score was better.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2057,  2224,  1996,  3115, 24353,  2004,  1037,  5009,  1012,
         5754,  2003,  1015,  3115, 24353,  2682,  2779,  2006,  1996,  2938,
         1024, 22096,  1009,  3263,  1027, 19527,  1012,  3419,  2003,  1014,
         1012,  1019,  3115, 24353,  2015,  2682,  1996,  2812,  2006,  1996,
         2552,  1024,  2538,  1009,  1014,  1012,  1019, 26306,  1020,  1027,
         2484,  1012,  1999,  3275,  1018,  1012,  1019,  1010,  2057,  2064,
         2156,  2008,  5754, 12102,  2000,  2079,  2488,  2007,  4847,  2000,
         3071,  2842,  2084,  3419,  2106,  1010,  2061,  2014,  3556,  2001,
         2488,  1012,   102])"
867,1,['mean'], Normal distribution,seg_33,sat act mean 1100 21 sd 200 6,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2938,  2552,  2812, 22096,  2538, 17371,  3263,  1020,   102])"
868,1,"['mean', 'deviation', 'standard deviation', 'standard']", Normal distribution,seg_33,figure 4.4: mean and standard deviation for the sat and act.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  3275,  1018,  1012,  1018,  1024,  2812,  1998,  3115, 24353,
         2005,  1996,  2938,  1998,  2552,  1012,   102])"
869,1,"['mean', 'deviation', 'observation', 'standardization', 'observations', 'method', 'normal', 'standard deviation', 'standard', 'deviations', 'distribution', 'standard deviations']", Normal distribution,seg_33,"example 4.2 used a standardization technique called a z-score, a method most commonly employed for nearly normal observations but that may be used with any distribution. the z-score of an observation is defined as the number of standard deviations it falls above or below the mean. if the observation is one standard deviation above the mean, its z-score is 1. if it is 1.5 standard deviations below the mean, then its z-score is -1.5. if x is an observation from a distribution n(µ, σ), we define the z-score mathematically as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2742,  1018,  1012,  1016,  2109,  1037, 28648,  6028,  2170,
         1037,  1062,  1011,  3556,  1010,  1037,  4118,  2087,  4141,  4846,
         2005,  3053,  3671,  9420,  2021,  2008,  2089,  2022,  2109,  2007,
         2151,  4353,  1012,  1996,  1062,  1011,  3556,  1997,  2019,  8089,
         2003,  4225,  2004,  1996,  2193,  1997,  3115, 24353,  2015,  2009,
         4212,  2682,  2030,  2917,  1996,  2812,  1012,  2065,  1996,  8089,
         2003,  2028,  3115, 24353,  2682,  1996,  2812,  1010,  2049,  1062,
         1011,  3556,  2003,  1015,  1012,  2065,  2009,  2003,  1015,  1012,
         1019,  3115, 24353,  2015,  2917,  1996,  2812,  1010,  2059,  2049,
         1062,  1011,  3556,  2003,  1011,  1015,  1012,  1019,  1012,  2065,
         1060,  2003,  2019,  8089,  2013,  1037,  4353,  1050,  1006,  1085,
         1010,  1173,  1007,  1010,  2057,  9375,  1996,  1062,  1011,  3556,
         8045,  2135,  2004,   102])"
870,0,[], Normal distribution,seg_33,"using µsat = 1100, σsat = 200, and xann = 1300, we find ann’s z-score:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([3671, 4353])","tensor([  101,  2478,  1085, 16846,  1027, 22096,  1010,  1173, 16846,  1027,
         3263,  1010,  1998,  1060, 11639,  1027, 19527,  1010,  2057,  2424,
         5754,  1521,  1055,  1062,  1011,  3556,  1024,   102])"
871,1,"['scores', 'distributions']", Normal distribution,seg_33,figure 4.5: ann’s and tom’s scores shown against the sat and act distributions.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  3275,  1018,  1012,  1019,  1024,  5754,  1521,  1055,  1998,
         3419,  1521,  1055,  7644,  3491,  2114,  1996,  2938,  1998,  2552,
        20611,  1012,   102])"
872,1,"['mean', 'deviation', 'observation', 'standard deviation', 'deviations', 'standard', 'distribution', 'standard deviations']", Normal distribution,seg_33,the z-score of an observation is the number of standard deviations it falls above or below the mean. we compute the z-score for an observation x that follows a distribution with mean µ and standard deviation σ using,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1996,  1062,  1011,  3556,  1997,  2019,  8089,  2003,  1996,
         2193,  1997,  3115, 24353,  2015,  2009,  4212,  2682,  2030,  2917,
         1996,  2812,  1012,  2057, 24134,  1996,  1062,  1011,  3556,  2005,
         2019,  8089,  1060,  2008,  4076,  1037,  4353,  2007,  2812,  1085,
         1998,  3115, 24353,  1173,  2478,   102])"
873,1,"['mean', 'deviation', 'standard deviation', 'standard']", Normal distribution,seg_33,"3 use tom’s act score, 24, along with the act mean and standard deviation to find his z-score.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1017,  2224,  3419,  1521,  1055,  2552,  3556,  1010,  2484,
         1010,  2247,  2007,  1996,  2552,  2812,  1998,  3115, 24353,  2000,
         2424,  2010,  1062,  1011,  3556,  1012,   102])"
874,1,"['mean', 'observation']", Normal distribution,seg_33,"observations above the mean always have positive z-scores, while those below the mean always have negative z-scores. if an observation is equal to the mean, such as an sat score of 1100, then the z-score is 0.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  9420,  2682,  1996,  2812,  2467,  2031,  3893,  1062,  1011,
         7644,  1010,  2096,  2216,  2917,  1996,  2812,  2467,  2031,  4997,
         1062,  1011,  7644,  1012,  2065,  2019,  8089,  2003,  5020,  2000,
         1996,  2812,  1010,  2107,  2004,  2019,  2938,  3556,  1997, 22096,
         1010,  2059,  1996,  1062,  1011,  3556,  2003,  1014,  1012,   102])"
875,1,"['mean', 'random variable', 'random', 'deviations', 'standard', 'standard deviations', 'variable']", Normal distribution,seg_33,"let x represent a random variable from n(µ = 3, σ = 2), and suppose we observe x = 5.19. (a) find the z-score of x. (b) use the z-score to determine how many standard deviations above or below the mean x falls.4",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2292,  1060,  5050,  1037,  6721,  8023,  2013,  1050,  1006,
         1085,  1027,  1017,  1010,  1173,  1027,  1016,  1007,  1010,  1998,
         6814,  2057, 11949,  1060,  1027,  1019,  1012,  2539,  1012,  1006,
         1037,  1007,  2424,  1996,  1062,  1011,  3556,  1997,  1060,  1012,
         1006,  1038,  1007,  2224,  1996,  1062,  1011,  3556,  2000,  5646,
         2129,  2116,  3115, 24353,  2015,  2682,  2030,  2917,  1996,  2812,
         1060,  4212,  1012,  1018,   102])"
876,1,"['mean', 'normal distribution', 'normal', 'standard', 'distribution']", Normal distribution,seg_33,head lengths of brushtail possums follow a normal distribution with mean 92.6 mm and standard,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 1., 0.])","tensor([3671, 4353])","tensor([  101,  2132, 10742,  1997,  8248, 14162, 13433,  4757, 18163,  3582,
         1037,  3671,  4353,  2007,  2812,  6227,  1012,  1020,  3461,  1998,
         3115,   102])"
877,1,['deviation'], Normal distribution,seg_33,5 deviation 3.6 mm. compute the z-scores for possums with head lengths of 95.4 mm and 85.8 mm.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1019, 24353,  1017,  1012,  1020,  3461,  1012, 24134,  1996,
         1062,  1011,  7644,  2005, 13433,  4757, 18163,  2007,  2132, 10742,
         1997,  5345,  1012,  1018,  3461,  1998,  5594,  1012,  1022,  3461,
         1012,   102])"
878,1,"['observation', 'absolute value', 'observations', 'distribution', 'symmetric']", Normal distribution,seg_33,we can use z-scores to roughly identify which observations are more unusual than others. an observation x1 is said to be more unusual than another observation x2 if the absolute value of its zscore is larger than the absolute value of the other observation’s z-score: |z1| > |z2|. this technique is especially insightful when a distribution is symmetric.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2057,  2064,  2224,  1062,  1011,  7644,  2000,  5560,  6709,
         2029,  9420,  2024,  2062,  5866,  2084,  2500,  1012,  2019,  8089,
         1060,  2487,  2003,  2056,  2000,  2022,  2062,  5866,  2084,  2178,
         8089,  1060,  2475,  2065,  1996,  7619,  3643,  1997,  2049,  1062,
         9363,  2890,  2003,  3469,  2084,  1996,  7619,  3643,  1997,  1996,
         2060,  8089,  1521,  1055,  1062,  1011,  3556,  1024,  1064,  1062,
         2487,  1064,  1028,  1064,  1062,  2475,  1064,  1012,  2023,  6028,
         2003,  2926, 12369,  3993,  2043,  1037,  4353,  2003, 19490,  1012,
          102])"
879,1,['observations'], Normal distribution,seg_33,which of the observations in guided practice 4.5 is more unusual?6,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 2029, 1997, 1996, 9420, 1999, 8546, 3218, 1018, 1012, 1019, 2003,
        2062, 5866, 1029, 1020,  102])"
880,1,"['tail', 'tail areas']", Normal distribution,seg_33,4.1.3 finding tail areas,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([3671, 4353])","tensor([ 101, 1018, 1012, 1015, 1012, 1017, 4531, 5725, 2752,  102])"
881,1,"['curve', 'tail', 'cases', 'scores', 'percentage', 'tail areas', 'distributions', 'statistics', 'percentile']", Normal distribution,seg_33,"it’s very useful in statistics to be able to identify tail areas of distributions. for instance, what fraction of people have an sat score below ann’s score of 1300? this is the same as the percentile ann is at, which is the percentage of cases that have lower scores than ann. we can visualize such a tail area like the curve and shading shown in figure 4.6.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2009,  1521,  1055,  2200,  6179,  1999,  6747,  2000,  2022,
         2583,  2000,  6709,  5725,  2752,  1997, 20611,  1012,  2005,  6013,
         1010,  2054, 12884,  1997,  2111,  2031,  2019,  2938,  3556,  2917,
         5754,  1521,  1055,  3556,  1997, 19527,  1029,  2023,  2003,  1996,
         2168,  2004,  1996,  3867,  9463,  5754,  2003,  2012,  1010,  2029,
         2003,  1996,  7017,  1997,  3572,  2008,  2031,  2896,  7644,  2084,
         5754,  1012,  2057,  2064,  5107,  4697,  2107,  1037,  5725,  2181,
         2066,  1996,  7774,  1998, 21146,  4667,  3491,  1999,  3275,  1018,
         1012,  1020,  1012,   102])"
882,0,[], Normal distribution,seg_33,figure 4.6: the area to the left of z represents the fraction of people who scored lower than ann.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([3671, 4353])","tensor([  101,  3275,  1018,  1012,  1020,  1024,  1996,  2181,  2000,  1996,
         2187,  1997,  1062,  5836,  1996, 12884,  1997,  2111,  2040,  3195,
         2896,  2084,  5754,  1012,   102])"
883,0,[], Normal distribution,seg_33,"there are many techniques for doing this, and we’ll discuss three of the options.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([ 101, 2045, 2024, 2116, 5461, 2005, 2725, 2023, 1010, 1998, 2057, 1521,
        2222, 6848, 2093, 1997, 1996, 7047, 1012,  102])"
884,1,"['tail', 'mean', 'deviation', 'test', 'deviation ', 'standard deviation', 'standard', 'statistical']", Normal distribution,seg_33,"1. the most common approach in practice is to use statistical software. for example, in the program r, we could find the area shown in figure 4.6 using the following command, which takes in the z-score and returns the lower tail area: .....> pnorm(1) .....[1] 0.8413447 according to this calculation, the region shaded that is below 1300 represents the proportion 0.841 (84.1%) of sat test takers who had z-scores below z = 1. more generally, we can also specify the cutoff explicitly if we also note the mean and standard deviation: .....> pnorm(1300, mean = 1100, sd = 200) .....[1] 0.8413447",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1015,  1012,  1996,  2087,  2691,  3921,  1999,  3218,  2003,
         2000,  2224,  7778,  4007,  1012,  2005,  2742,  1010,  1999,  1996,
         2565,  1054,  1010,  2057,  2071,  2424,  1996,  2181,  3491,  1999,
         3275,  1018,  1012,  1020,  2478,  1996,  2206,  3094,  1010,  2029,
         3138,  1999,  1996,  1062,  1011,  3556,  1998,  5651,  1996,  2896,
         5725,  2181,  1024,  1012,  1012,  1012,  1012,  1012,  1028,  1052,
        12131,  2213,  1006,  1015,  1007,  1012,  1012,  1012,  1012,  1012,
         1031,  1015,  1033,  1014,  1012,  6391, 17134, 22932,  2581,  2429,
         2000,  2023, 17208,  1010,  1996,  2555, 25273,  2008,  2003,  2917,
        19527,  5836,  1996, 10817,  1014,  1012,  6391,  2487,  1006,  6391,
         1012,  1015,  1003,  1007,  1997,  2938,  3231,  2202,  2869,  2040,
         2018,  1062,  1011,  7644,  2917,  1062,  1027,  1015,  1012,  2062,
         3227,  1010,  2057,  2064,  2036, 20648,  1996,  3013,  7245, 12045,
         2065,  2057,  2036,  3602,  1996,  2812,  1998,  3115, 24353,  1024,
         1012,  1012,  1012,  1012,  1012,  1028,  1052, 12131,  2213,  1006,
        19527,  1010,  2812,  1027, 22096,  1010, 17371,  1027,  3263,  1007,
         1012,  1012,  1012,  1012,  1012,  1031,  1015,  1033,  1014,  1012,
         6391, 17134, 22932,  2581,   102])"
885,0,[], Normal distribution,seg_33,"there are many other software options, such as python or sas; even spreadsheet programs such as excel and google sheets support these calculations.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([  101,  2045,  2024,  2116,  2060,  4007,  7047,  1010,  2107,  2004,
        18750,  2030, 21871,  1025,  2130, 20861, 21030,  2102,  3454,  2107,
         2004, 24970,  1998,  8224,  8697,  2490,  2122, 16268,  1012,   102])"
886,1,"['tail', 'normal distribution', 'tail areas', 'normal', 'distribution']", Normal distribution,seg_33,"2. a common strategy in classrooms is to use a graphing calculator, such as a ti or casio calculator. these calculators require a series of button presses that are less concisely described. you can find instructions on using these calculators for finding tail areas of a normal distribution in the openintro video library:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3671, 4353])","tensor([  101,  1016,  1012,  1037,  2691,  5656,  1999, 12463,  2003,  2000,
         2224,  1037, 10629,  2075, 10250, 19879,  4263,  1010,  2107,  2004,
         1037, 14841,  2030, 25222,  3695, 10250, 19879,  4263,  1012,  2122,
        10250, 19879,  6591,  5478,  1037,  2186,  1997,  6462, 14616,  2008,
         2024,  2625,  9530, 18380,  2135,  2649,  1012,  2017,  2064,  2424,
         8128,  2006,  2478,  2122, 10250, 19879,  6591,  2005,  4531,  5725,
         2752,  1997,  1037,  3671,  4353,  1999,  1996,  2330, 18447,  3217,
         2678,  3075,  1024,   102])"
887,0,[], Normal distribution,seg_33,www.openintro.org/videos,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([  101,  7479,  1012,  2330, 18447,  3217,  1012,  8917,  1013,  6876,
          102])"
888,1,"['tail', 'table', 'probability', 'tail areas', 'probability table']", Normal distribution,seg_33,3. the last option for finding tail areas is to use what’s called a probability table; these are occasionally used in classrooms but rarely in practice. appendix c.1 contains such a table and a guide for how to use it.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1017,  1012,  1996,  2197,  5724,  2005,  4531,  5725,  2752,
         2003,  2000,  2224,  2054,  1521,  1055,  2170,  1037,  9723,  2795,
         1025,  2122,  2024,  5681,  2109,  1999, 12463,  2021,  6524,  1999,
         3218,  1012, 22524,  1039,  1012,  1015,  3397,  2107,  1037,  2795,
         1998,  1037,  5009,  2005,  2129,  2000,  2224,  2009,  1012,   102])"
889,1,"['normal distribution', 'normal', 'statistics', 'distribution', 'test statistics', 'test']", Normal distribution,seg_33,"we will solve normal distribution problems in this section by always first finding the z-score. the reason is that we will encounter close parallels called test statistics beginning in chapter 5; these are, in many instances, an equivalent of a z-score.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2057,  2097,  9611,  3671,  4353,  3471,  1999,  2023,  2930,
         2011,  2467,  2034,  4531,  1996,  1062,  1011,  3556,  1012,  1996,
         3114,  2003,  2008,  2057,  2097,  8087,  2485, 18588,  2170,  3231,
         6747,  2927,  1999,  3127,  1019,  1025,  2122,  2024,  1010,  1999,
         2116, 12107,  1010,  2019,  5662,  1997,  1037,  1062,  1011,  3556,
         1012,   102])"
890,1,"['probability', 'normal']", Normal distribution,seg_33,4.1.4 normal probability examples,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 1018, 1012, 1015, 1012, 1018, 3671, 9723, 4973,  102])"
891,1,"['model', 'normal', 'scores']", Normal distribution,seg_33,"cumulative sat scores are approximated well by a normal model, n(µ = 1100, σ = 200).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101, 23260,  2938,  7644,  2024, 15796,  2094,  2092,  2011,  1037,
         3671,  2944,  1010,  1050,  1006,  1085,  1027, 22096,  1010,  1173,
         1027,  3263,  1007,  1012,   102])"
892,1,"['probability', 'scores']", Normal distribution,seg_33,"shannon is a randomly selected sat taker, and nothing is known about shannon’s sat aptitude. what is the probability shannon scores at least 1190 on her sats?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3671, 4353])","tensor([  101, 10881,  2003,  1037, 18154,  3479,  2938,  2202,  2099,  1010,
         1998,  2498,  2003,  2124,  2055, 10881,  1521,  1055,  2938, 26794,
        18679,  1012,  2054,  2003,  1996,  9723, 10881,  7644,  2012,  2560,
        13285,  2692,  2006,  2014,  2938,  2015,  1029,   102])"
893,1,"['tail', 'scores', 'normal distribution', 'normal', 'distribution']", Normal distribution,seg_33,"first, always draw and label a picture of the normal distribution. (drawings need not be exact to be useful.) we are interested in the chance she scores above 1190, so we shade this upper tail:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2034,  1010,  2467,  4009,  1998,  3830,  1037,  3861,  1997,
         1996,  3671,  4353,  1012,  1006,  9254,  2342,  2025,  2022,  6635,
         2000,  2022,  6179,  1012,  1007,  2057,  2024,  4699,  1999,  1996,
         3382,  2016,  7644,  2682, 13285,  2692,  1010,  2061,  2057,  8703,
         2023,  3356,  5725,  1024,   102])"
894,1,"['curve', 'mean', 'deviations', 'standard', 'standard deviations']", Normal distribution,seg_33,"the picture shows the mean and the values at 2 standard deviations above and below the mean. the simplest way to find the shaded area under the curve makes use of the z-score of the cutoff value. with µ = 1100, σ = 200, and the cutoff value x = 1190, the z-score is computed as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1996,  3861,  3065,  1996,  2812,  1998,  1996,  5300,  2012,
         1016,  3115, 24353,  2015,  2682,  1998,  2917,  1996,  2812,  1012,
         1996, 21304,  2126,  2000,  2424,  1996, 25273,  2181,  2104,  1996,
         7774,  3084,  2224,  1997,  1996,  1062,  1011,  3556,  1997,  1996,
         3013,  7245,  3643,  1012,  2007,  1085,  1027, 22096,  1010,  1173,
         1027,  3263,  1010,  1998,  1996,  3013,  7245,  3643,  1060,  1027,
        13285,  2692,  1010,  1996,  1062,  1011,  3556,  2003, 24806,  2004,
          102])"
895,1,"['tail', 'method', 'statistical']", Normal distribution,seg_33,"using statistical software (or another preferred method), we can area left of z = 0.45 as 0.6736. to find the area above z = 0.45, we compute one minus the area of the lower tail:",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2478,  7778,  4007,  1006,  2030,  2178,  6871,  4118,  1007,
         1010,  2057,  2064,  2181,  2187,  1997,  1062,  1027,  1014,  1012,
         3429,  2004,  1014,  1012,  6163, 21619,  1012,  2000,  2424,  1996,
         2181,  2682,  1062,  1027,  1014,  1012,  3429,  1010,  2057, 24134,
         2028, 15718,  1996,  2181,  1997,  1996,  2896,  5725,  1024,   102])"
896,1,"['probability', 'scores']", Normal distribution,seg_33,the probability shannon scores at least 1190 on the sat is 0.3264.,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([3671, 4353])","tensor([  101,  1996,  9723, 10881,  7644,  2012,  2560, 13285,  2692,  2006,
         1996,  2938,  2003,  1014,  1012, 28188,  2549,  1012,   102])"
897,1,"['curve', 'probability', 'estimate', 'normal']", Normal distribution,seg_33,"for any normal probability situation, always always always draw and label the normal curve and shade the area of interest first. the picture will provide an estimate of the probability. after drawing a figure to represent the situation, identify the z-score for the value of interest.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([3671, 4353])","tensor([  101,  2005,  2151,  3671,  9723,  3663,  1010,  2467,  2467,  2467,
         4009,  1998,  3830,  1996,  3671,  7774,  1998,  8703,  1996,  2181,
         1997,  3037,  2034,  1012,  1996,  3861,  2097,  3073,  2019, 10197,
         1997,  1996,  9723,  1012,  2044,  5059,  1037,  3275,  2000,  5050,
         1996,  3663,  1010,  6709,  1996,  1062,  1011,  3556,  2005,  1996,
         3643,  1997,  3037,  1012,   102])"
898,1,"['curve', 'normal', 'scores', 'probability']", Normal distribution,seg_33,"if the probability of shannon scoring at least 1190 is 0.3264, then what is the probability she scores less than 1190? draw the normal curve representing this exercise, shading the lower region instead of the upper one.7",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2065,  1996,  9723,  1997, 10881,  4577,  2012,  2560, 13285,
         2692,  2003,  1014,  1012, 28188,  2549,  1010,  2059,  2054,  2003,
         1996,  9723,  2016,  7644,  2625,  2084, 13285,  2692,  1029,  4009,
         1996,  3671,  7774,  5052,  2023,  6912,  1010, 21146,  4667,  1996,
         2896,  2555,  2612,  1997,  1996,  3356,  2028,  1012,  1021,   102])"
899,1,['percentile'], Normal distribution,seg_33,edward earned a 1030 on his sat. what is his percentile?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 3487, 3687, 1037, 9800, 2692, 2006, 2010, 2938, 1012, 2054, 2003,
        2010, 3867, 9463, 1029,  102])"
900,1,"['scores', 'percentile']", Normal distribution,seg_33,"first, a picture is needed. edward’s percentile is the proportion of people who do not get as high as a 1030. these are the scores to the left of 1030.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2034,  1010,  1037,  3861,  2003,  2734,  1012,  3487,  1521,
         1055,  3867,  9463,  2003,  1996, 10817,  1997,  2111,  2040,  2079,
         2025,  2131,  2004,  2152,  2004,  1037,  9800,  2692,  1012,  2122,
         2024,  1996,  7644,  2000,  1996,  2187,  1997,  9800,  2692,  1012,
          102])"
901,1,"['tail', 'mean', 'deviation', 'standard deviation', 'standard']", Normal distribution,seg_33,"identifying the mean µ = 1100, the standard deviation σ = 200, and the cutoff for the tail area x = 1030 makes it easy to compute the z-score:",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3671, 4353])","tensor([  101, 12151,  1996,  2812,  1085,  1027, 22096,  1010,  1996,  3115,
        24353,  1173,  1027,  3263,  1010,  1998,  1996,  3013,  7245,  2005,
         1996,  5725,  2181,  1060,  1027,  9800,  2692,  3084,  2009,  3733,
         2000, 24134,  1996,  1062,  1011,  3556,  1024,   102])"
902,1,"['tail', 'statistical', 'percentile']", Normal distribution,seg_33,"using statistical software, we get a tail area of 0.3632. edward is at the 36th percentile.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2478,  7778,  4007,  1010,  2057,  2131,  1037,  5725,  2181,
         1997,  1014,  1012,  4029, 16703,  1012,  3487,  2003,  2012,  1996,
        21460,  3867,  9463,  1012,   102])"
903,1,['results'], Normal distribution,seg_33,use the results of example 4.9 to compute the proportion of sat takers who did better than edward.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2224,  1996,  3463,  1997,  2742,  1018,  1012,  1023,  2000,
        24134,  1996, 10817,  1997,  2938,  2202,  2869,  2040,  2106,  2488,
         2084,  3487,  1012,   102])"
904,0,[], Normal distribution,seg_33,8 also draw a new picture.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([ 101, 1022, 2036, 4009, 1037, 2047, 3861, 1012,  102])"
905,0,[], Normal distribution,seg_33,"many software programs return the area to the left when given a z-score. if you would like the area to the right, first find the area to the left and then subtract this amount from one.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([ 101, 2116, 4007, 3454, 2709, 1996, 2181, 2000, 1996, 2187, 2043, 2445,
        1037, 1062, 1011, 3556, 1012, 2065, 2017, 2052, 2066, 1996, 2181, 2000,
        1996, 2157, 1010, 2034, 2424, 1996, 2181, 2000, 1996, 2187, 1998, 2059,
        4942, 6494, 6593, 2023, 3815, 2013, 2028, 1012,  102])"
906,1,"['percent', 'percentile']", Normal distribution,seg_33,stuart earned an sat score of 1500. draw a picture for each part. (a) what is his percentile? (b) what percent of sat takers did better than stuart?9,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  6990,  3687,  2019,  2938,  3556,  1997, 10347,  1012,  4009,
         1037,  3861,  2005,  2169,  2112,  1012,  1006,  1037,  1007,  2054,
         2003,  2010,  3867,  9463,  1029,  1006,  1038,  1007,  2054,  3867,
         1997,  2938,  2202,  2869,  2106,  2488,  2084,  6990,  1029,  1023,
          102])"
907,1,"['mean', 'deviation', 'sample', 'normal', 'standard deviation', 'standard']", Normal distribution,seg_33,"based on a sample of 100 men, the heights of male adults in the us is nearly normal with mean 70.0” and standard deviation 3.3”.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2241,  2006,  1037,  7099,  1997,  2531,  2273,  1010,  1996,
         7535,  1997,  3287,  6001,  1999,  1996,  2149,  2003,  3053,  3671,
         2007,  2812,  3963,  1012,  1014,  1524,  1998,  3115, 24353,  1017,
         1012,  1017,  1524,  1012,   102])"
908,1,['percentile'], Normal distribution,seg_33,"mike is 5’7” and jose is 6’4”, and they both live in the us. (a) what is mike’s height percentile? (b) what is jose’s height percentile?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 3505, 2003, 1019, 1521, 1021, 1524, 1998, 4560, 2003, 1020, 1521,
        1018, 1524, 1010, 1998, 2027, 2119, 2444, 1999, 1996, 2149, 1012, 1006,
        1037, 1007, 2054, 2003, 3505, 1521, 1055, 4578, 3867, 9463, 1029, 1006,
        1038, 1007, 2054, 2003, 4560, 1521, 1055, 4578, 3867, 9463, 1029,  102])"
909,0,[], Normal distribution,seg_33,10 also draw one picture for each part.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([ 101, 2184, 2036, 4009, 2028, 3861, 2005, 2169, 2112, 1012,  102])"
910,1,"['tail', 'observation', 'percentile']", Normal distribution,seg_33,the last several problems have focused on finding the percentile (or upper tail) for a particular observation. what if you would like to know the observation corresponding to a particular percentile?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 1996, 2197, 2195, 3471, 2031, 4208, 2006, 4531, 1996, 3867, 9463,
        1006, 2030, 3356, 5725, 1007, 2005, 1037, 3327, 8089, 1012, 2054, 2065,
        2017, 2052, 2066, 2000, 2113, 1996, 8089, 7978, 2000, 1037, 3327, 3867,
        9463, 1029,  102])"
911,1,['percentile'], Normal distribution,seg_33,erik’s height is at the 40th percentile. how tall is he?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101, 10240,  1521,  1055,  4578,  2003,  2012,  1996, 16541,  3867,
         9463,  1012,  2129,  4206,  2003,  2002,  1029,   102])"
912,0,[], Normal distribution,seg_33,"as always, first draw the picture.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([ 101, 2004, 2467, 1010, 2034, 4009, 1996, 3861, 1012,  102])"
913,1,"['tail', 'observation', 'associated', 'probability', 'tail probability', 'percentile', 'case']", Normal distribution,seg_33,"in this case, the lower tail probability is known (0.40), which can be shaded on the diagram. we want to find the observation that corresponds to this value. as a first step in this direction, we determine the z-score associated with the 40th percentile. using software, we can obtain the corresponding z-score of about -0.25.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1999,  2023,  2553,  1010,  1996,  2896,  5725,  9723,  2003,
         2124,  1006,  1014,  1012,  2871,  1007,  1010,  2029,  2064,  2022,
        25273,  2006,  1996, 16403,  1012,  2057,  2215,  2000,  2424,  1996,
         8089,  2008, 14788,  2000,  2023,  3643,  1012,  2004,  1037,  2034,
         3357,  1999,  2023,  3257,  1010,  2057,  5646,  1996,  1062,  1011,
         3556,  3378,  2007,  1996, 16541,  3867,  9463,  1012,  2478,  4007,
         1010,  2057,  2064,  6855,  1996,  7978,  1062,  1011,  3556,  1997,
         2055,  1011,  1014,  1012,  2423,  1012,   102])"
914,1,"['set', 'population', 'parameters']", Normal distribution,seg_33,"knowing zerik = −0.25 and the population parameters µ = 70 and σ = 3.3 inches, the z-score formula can be set up to determine erik’s unknown height, labeled xerik :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  4209, 27838, 15564,  1027,  1597,  2692,  1012,  2423,  1998,
         1996,  2313, 11709,  1085,  1027,  3963,  1998,  1173,  1027,  1017,
         1012,  1017,  5282,  1010,  1996,  1062,  1011,  3556,  5675,  2064,
         2022,  2275,  2039,  2000,  5646, 10240,  1521,  1055,  4242,  4578,
         1010, 12599,  1060, 27350,  1024,   102])"
915,0,[], Normal distribution,seg_33,"solving for xerik yields a height of 69.18 inches. that is, erik is about 5’9”.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([3671, 4353])","tensor([  101, 13729,  2005,  1060, 27350, 16189,  1037,  4578,  1997,  6353,
         1012,  2324,  5282,  1012,  2008,  2003,  1010, 10240,  2003,  2055,
         1019,  1521,  1023,  1524,  1012,   102])"
916,1,['percentile'], Normal distribution,seg_33,what is the adult male height at the 82nd percentile?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 2054, 2003, 1996, 4639, 3287, 4578, 2012, 1996, 6445, 4859, 3867,
        9463, 1029,  102])"
917,0,[], Normal distribution,seg_33,"again, we draw the figure first.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3671, 4353])","tensor([ 101, 2153, 1010, 2057, 4009, 1996, 3275, 2034, 1012,  102])"
918,1,"['mean', 'deviation', 'standard deviation', 'standard', 'percentile']", Normal distribution,seg_33,"next, we want to find the z-score at the 82nd percentile, which will be a positive value and can be found using software as z = 0.92. finally, the height x is found using the z-score formula with the known mean µ, standard deviation σ, and z-score z = 0.92:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2279,  1010,  2057,  2215,  2000,  2424,  1996,  1062,  1011,
         3556,  2012,  1996,  6445,  4859,  3867,  9463,  1010,  2029,  2097,
         2022,  1037,  3893,  3643,  1998,  2064,  2022,  2179,  2478,  4007,
         2004,  1062,  1027,  1014,  1012,  6227,  1012,  2633,  1010,  1996,
         4578,  1060,  2003,  2179,  2478,  1996,  1062,  1011,  3556,  5675,
         2007,  1996,  2124,  2812,  1085,  1010,  3115, 24353,  1173,  1010,
         1998,  1062,  1011,  3556,  1062,  1027,  1014,  1012,  6227,  1024,
          102])"
919,1,['percentile'], Normal distribution,seg_33,this yields 73.04 inches or about 6’1” as the height at the 82nd percentile.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2023, 16189,  6421,  1012,  5840,  5282,  2030,  2055,  1020,
         1521,  1015,  1524,  2004,  1996,  4578,  2012,  1996,  6445,  4859,
         3867,  9463,  1012,   102])"
920,1,"['scores', 'percentile']", Normal distribution,seg_33,"11 the sat scores follow n(1100, 200). (a) what is the 95th percentile for sat scores? (b) what is the 97.5th percentile for sat scores?",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2340,  1996,  2938,  7644,  3582,  1050,  1006, 22096,  1010,
         3263,  1007,  1012,  1006,  1037,  1007,  2054,  2003,  1996,  5345,
         2705,  3867,  9463,  2005,  2938,  7644,  1029,  1006,  1038,  1007,
         2054,  2003,  1996,  5989,  1012,  4833,  3867,  9463,  2005,  2938,
         7644,  1029,   102])"
921,1,['probability'], Normal distribution,seg_33,"adult male heights follow n(70.0”, 3.3”).12 (a) what is the probability that a randomly selected male adult is at least 6’2” (74 inches)? (b) what is the probability that a male adult is shorter than 5’9” (69 inches)?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  4639,  3287,  7535,  3582,  1050,  1006,  3963,  1012,  1014,
         1524,  1010,  1017,  1012,  1017,  1524,  1007,  1012,  2260,  1006,
         1037,  1007,  2054,  2003,  1996,  9723,  2008,  1037, 18154,  3479,
         3287,  4639,  2003,  2012,  2560,  1020,  1521,  1016,  1524,  1006,
         6356,  5282,  1007,  1029,  1006,  1038,  1007,  2054,  2003,  1996,
         9723,  2008,  1037,  3287,  4639,  2003,  7820,  2084,  1019,  1521,
         1023,  1524,  1006,  6353,  5282,  1007,  1029,   102])"
922,1,"['probability', 'random']", Normal distribution,seg_33,what is the probability that a random adult male is between 5’9” and 6’2”?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([ 101, 2054, 2003, 1996, 9723, 2008, 1037, 6721, 4639, 3287, 2003, 2090,
        1019, 1521, 1023, 1524, 1998, 1020, 1521, 1016, 1524, 1029,  102])"
923,1,['tail'], Normal distribution,seg_33,"these heights correspond to 69 inches and 74 inches. first, draw the figure. the area of interest is no longer an upper or lower tail.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2122,  7535, 17254,  2000,  6353,  5282,  1998,  6356,  5282,
         1012,  2034,  1010,  4009,  1996,  3275,  1012,  1996,  2181,  1997,
         3037,  2003,  2053,  2936,  2019,  3356,  2030,  2896,  5725,  1012,
          102])"
924,1,"['curve', 'tails']", Normal distribution,seg_33,"the total area under the curve is 1. if we find the area of the two tails that are not shaded (from guided practice 4.16, these areas are 0.3821 and 0.1131), then we can find the middle area:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  1996,  2561,  2181,  2104,  1996,  7774,  2003,  1015,  1012,
         2065,  2057,  2424,  1996,  2181,  1997,  1996,  2048, 17448,  2008,
         2024,  2025, 25273,  1006,  2013,  8546,  3218,  1018,  1012,  2385,
         1010,  2122,  2752,  2024,  1014,  1012,  4229, 17465,  1998,  1014,
         1012, 12104,  2487,  1007,  1010,  2059,  2057,  2064,  2424,  1996,
         2690,  2181,  1024,   102])"
925,1,['probability'], Normal distribution,seg_33,"that is, the probability of being between 5’9” and 6’2” is 0.5048.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2008,  2003,  1010,  1996,  9723,  1997,  2108,  2090,  1019,
         1521,  1023,  1524,  1998,  1020,  1521,  1016,  1524,  2003,  1014,
         1012,  2753, 18139,  1012,   102])"
926,1,"['percent', 'scores']", Normal distribution,seg_33,"sat scores follow n(1100, 200). what percent of sat takers get between 1100 and 1400?13",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2938,  7644,  3582,  1050,  1006, 22096,  1010,  3263,  1007,
         1012,  2054,  3867,  1997,  2938,  2202,  2869,  2131,  2090, 22096,
         1998, 20652,  1029,  2410,   102])"
927,1,['percent'], Normal distribution,seg_33,"adult male heights follow n(70.0”, 3.3”). what percent of adult males are between 5’5” and 5’7”?14",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([3671, 4353])","tensor([ 101, 4639, 3287, 7535, 3582, 1050, 1006, 3963, 1012, 1014, 1524, 1010,
        1017, 1012, 1017, 1524, 1007, 1012, 2054, 3867, 1997, 4639, 3767, 2024,
        2090, 1019, 1521, 1019, 1524, 1998, 1019, 1521, 1021, 1524, 1029, 2403,
         102])"
928,1,"['mean', 'normal distribution', 'range', 'probability', 'estimate', 'normal', 'standard', 'deviations', 'distribution', 'standard deviations']", Normal distribution,seg_33,"here, we present a useful rule of thumb for the probability of falling within 1, 2, and 3 standard deviations of the mean in the normal distribution. this will be useful in a wide range of practical settings, especially when trying to make a quick estimate without a calculator or z-table.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2182,  1010,  2057,  2556,  1037,  6179,  3627,  1997,  7639,
         2005,  1996,  9723,  1997,  4634,  2306,  1015,  1010,  1016,  1010,
         1998,  1017,  3115, 24353,  2015,  1997,  1996,  2812,  1999,  1996,
         3671,  4353,  1012,  2023,  2097,  2022,  6179,  1999,  1037,  2898,
         2846,  1997,  6742, 10906,  1010,  2926,  2043,  2667,  2000,  2191,
         1037,  4248, 10197,  2302,  1037, 10250, 19879,  4263,  2030,  1062,
         1011,  2795,  1012,   102])"
929,1,"['mean', 'normal distribution', 'probabilities', 'normal', 'standard', 'deviations', 'distribution', 'standard deviations']", Normal distribution,seg_33,"figure 4.7: probabilities for falling within 1, 2, and 3 standard deviations of the mean in a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([3671, 4353])","tensor([  101,  3275,  1018,  1012,  1021,  1024,  4013,  3676, 14680,  2005,
         4634,  2306,  1015,  1010,  1016,  1010,  1998,  1017,  3115, 24353,
         2015,  1997,  1996,  2812,  1999,  1037,  3671,  4353,  1012,   102])"
930,1,"['mean', 'normal distribution', 'table', 'probability', 'observations', 'normal', 'standard', 'deviations', 'distribution', 'probability table', 'standard deviations']", Normal distribution,seg_33,"use software, a calculator, or a probability table to confirm that about 68%, 95%, and 99.7% of observations fall within 1, 2, and 3, standard deviations of the mean in the normal distribution, respectively. for instance, first find the area that falls between z = −1 and z = 1, which should have an area of about 0.68. similarly there should be an area of about 0.95 between z = −2 and z = 2.15",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2224,  4007,  1010,  1037, 10250, 19879,  4263,  1010,  2030,
         1037,  9723,  2795,  2000, 12210,  2008,  2055,  6273,  1003,  1010,
         5345,  1003,  1010,  1998,  5585,  1012,  1021,  1003,  1997,  9420,
         2991,  2306,  1015,  1010,  1016,  1010,  1998,  1017,  1010,  3115,
        24353,  2015,  1997,  1996,  2812,  1999,  1996,  3671,  4353,  1010,
         4414,  1012,  2005,  6013,  1010,  2034,  2424,  1996,  2181,  2008,
         4212,  2090,  1062,  1027,  1597,  2487,  1998,  1062,  1027,  1015,
         1010,  2029,  2323,  2031,  2019,  2181,  1997,  2055,  1014,  1012,
         6273,  1012,  6660,  2045,  2323,  2022,  2019,  2181,  1997,  2055,
         1014,  1012,  5345,  2090,  1062,  1027,  1597,  2475,  1998,  1062,
         1027,  1016,  1012,  2321,   102])"
931,1,"['mean', 'probability', 'random variable', 'normal random variable', 'random', 'normal', 'standard', 'deviations', 'standard deviations', 'data', 'variable']", Normal distribution,seg_33,"it is possible for a normal random variable to fall 4, 5, or even more standard deviations from the mean. however, these occurrences are very rare if the data are nearly normal. the probability of being further than 4 standard deviations from the mean is about 1-in-15,000. for 5 and 6 standard deviations, it is about 1-in-2 million and 1-in-500 million, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2009,  2003,  2825,  2005,  1037,  3671,  6721,  8023,  2000,
         2991,  1018,  1010,  1019,  1010,  2030,  2130,  2062,  3115, 24353,
         2015,  2013,  1996,  2812,  1012,  2174,  1010,  2122, 27247,  2024,
         2200,  4678,  2065,  1996,  2951,  2024,  3053,  3671,  1012,  1996,
         9723,  1997,  2108,  2582,  2084,  1018,  3115, 24353,  2015,  2013,
         1996,  2812,  2003,  2055,  1015,  1011,  1999,  1011,  2321,  1010,
         2199,  1012,  2005,  1019,  1998,  1020,  3115, 24353,  2015,  1010,
         2009,  2003,  2055,  1015,  1011,  1999,  1011,  1016,  2454,  1998,
         1015,  1011,  1999,  1011,  3156,  2454,  1010,  4414,  1012,   102])"
932,1,"['mean', 'deviation', 'scores', 'normal', 'standard deviation', 'standard', 'model', 'percent', 'test']", Normal distribution,seg_33,sat scores closely follow the normal model with mean µ = 1100 and standard deviation σ = 200.16 (a) about what percent of test takers score 700 to 1500? (b) what percent score between 1100 and 1500?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([3671, 4353])","tensor([  101,  2938,  7644,  4876,  3582,  1996,  3671,  2944,  2007,  2812,
         1085,  1027, 22096,  1998,  3115, 24353,  1173,  1027,  3263,  1012,
         2385,  1006,  1037,  1007,  2055,  2054,  3867,  1997,  3231,  2202,
         2869,  3556,  6352,  2000, 10347,  1029,  1006,  1038,  1007,  2054,
         3867,  3556,  2090, 22096,  1998, 10347,  1029,   102])"
933,1,"['trial', 'distribution', 'geometric distribution', 'bernoulli', 'probability', 'bernoulli distribution', 'geometric']", Geometric distribution,seg_35,"how long should we expect to flip a coin until it turns up heads? or how many times should we expect to roll a die until we get a 1? these questions can be answered using the geometric distribution. we first formalize each trial – such as a single coin flip or die toss – using the bernoulli distribution, and then we combine these with our tools from probability (chapter 3) to construct the geometric distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2129,  2146,  2323,  2057,  5987,  2000, 11238,  1037,  9226,
         2127,  2009,  4332,  2039,  4641,  1029,  2030,  2129,  2116,  2335,
         2323,  2057,  5987,  2000,  4897,  1037,  3280,  2127,  2057,  2131,
         1037,  1015,  1029,  2122,  3980,  2064,  2022,  4660,  2478,  1996,
        14965,  4353,  1012,  2057,  2034,  5337,  4697,  2169,  3979,  1516,
         2107,  2004,  1037,  2309,  9226, 11238,  2030,  3280, 10055,  1516,
         2478,  1996, 16595,  7140,  6894,  4353,  1010,  1998,  2059,  2057,
        11506,  2122,  2007,  2256,  5906,  2013,  9723,  1006,  3127,  1017,
         1007,  2000,  9570,  1996, 14965,  4353,  1012,   102])"
934,1,"['bernoulli', 'bernoulli distribution', 'distribution']", Geometric distribution,seg_35,4.2.1 bernoulli distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  1018,  1012,  1016,  1012,  1015, 16595,  7140,  6894,  4353,
          102])"
935,1,['states'], Geometric distribution,seg_35,"many health insurance plans in the united states have a deductible, where the insured individual is responsible for costs up to the deductible, and then the costs above the deductible are shared between the individual and insurance company for the remainder of the year.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2116,  2740,  5427,  3488,  1999,  1996,  2142,  2163,  2031,
         1037,  2139,  8566,  6593,  7028,  1010,  2073,  1996, 16021, 12165,
         3265,  2003,  3625,  2005,  5366,  2039,  2000,  1996,  2139,  8566,
         6593,  7028,  1010,  1998,  2059,  1996,  5366,  2682,  1996,  2139,
         8566,  6593,  7028,  2024,  4207,  2090,  1996,  3265,  1998,  5427,
         2194,  2005,  1996,  6893,  1997,  1996,  2095,  1012,   102])"
936,1,"['trial', 'probability', 'failure', 'probability of a success', 'success']", Geometric distribution,seg_35,"suppose a health insurance company found that 70% of the people they insure stay below their deductible in any given year. each of these people can be thought of as a trial. we label a person a success if her healthcare costs do not exceed the deductible. we label a person a failure if she does exceed her deductible in the year. because 70% of the individuals will not hit their deductible, we denote the probability of a success as p = 0.7. the probability of a failure is sometimes denoted with q = 1− p, which would be 0.3 for the insurance example.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  6814,  1037,  2740,  5427,  2194,  2179,  2008,  3963,  1003,
         1997,  1996,  2111,  2027, 16021,  5397,  2994,  2917,  2037,  2139,
         8566,  6593,  7028,  1999,  2151,  2445,  2095,  1012,  2169,  1997,
         2122,  2111,  2064,  2022,  2245,  1997,  2004,  1037,  3979,  1012,
         2057,  3830,  1037,  2711,  1037,  3112,  2065,  2014,  9871,  5366,
         2079,  2025, 13467,  1996,  2139,  8566,  6593,  7028,  1012,  2057,
         3830,  1037,  2711,  1037,  4945,  2065,  2016,  2515, 13467,  2014,
         2139,  8566,  6593,  7028,  1999,  1996,  2095,  1012,  2138,  3963,
         1003,  1997,  1996,  3633,  2097,  2025,  2718,  2037,  2139,  8566,
         6593,  7028,  1010,  2057, 19090,  1996,  9723,  1997,  1037,  3112,
         2004,  1052,  1027,  1014,  1012,  1021,  1012,  1996,  9723,  1997,
         1037,  4945,  2003,  2823, 19537,  2007,  1053,  1027,  1015, 22543,
         1052,  1010,  2029,  2052,  2022,  1014,  1012,  1017,  2005,  1996,
         5427,  2742,  1012,   102])"
937,1,"['trial', 'success', 'bernoulli', 'bernoulli random variable', 'failure', 'outcomes', 'random variable', 'outcome', 'random', 'variable']", Geometric distribution,seg_35,"when an individual trial only has two possible outcomes, often labeled as success or failure, it is called a bernoulli random variable. we chose to label a person who does not hit her deductible as a “success” and all others as “failures”. however, we could just as easily have reversed these labels. the mathematical framework we will build does not depend on which outcome is labeled a success and which a failure, as long as we are consistent.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2043,  2019,  3265,  3979,  2069,  2038,  2048,  2825, 13105,
         1010,  2411, 12599,  2004,  3112,  2030,  4945,  1010,  2009,  2003,
         2170,  1037, 16595,  7140,  6894,  6721,  8023,  1012,  2057,  4900,
         2000,  3830,  1037,  2711,  2040,  2515,  2025,  2718,  2014,  2139,
         8566,  6593,  7028,  2004,  1037,  1523,  3112,  1524,  1998,  2035,
         2500,  2004,  1523, 15428,  1524,  1012,  2174,  1010,  2057,  2071,
         2074,  2004,  4089,  2031, 11674,  2122, 10873,  1012,  1996,  8045,
         7705,  2057,  2097,  3857,  2515,  2025, 12530,  2006,  2029,  9560,
         2003, 12599,  1037,  3112,  1998,  2029,  1037,  4945,  1010,  2004,
         2146,  2004,  2057,  2024,  8335,  1012,   102])"
938,1,"['success', 'failure', 'trials', 'random', 'random variables', 'variables', 'data']", Geometric distribution,seg_35,"bernoulli random variables are often denoted as 1 for a success and 0 for a failure. in addition to being convenient in entering data, it is also mathematically handy. suppose we observe ten trials:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101, 16595,  7140,  6894,  6721, 10857,  2024,  2411, 19537,  2004,
         1015,  2005,  1037,  3112,  1998,  1014,  2005,  1037,  4945,  1012,
         1999,  2804,  2000,  2108, 14057,  1999,  5738,  2951,  1010,  2009,
         2003,  2036,  8045,  2135, 18801,  1012,  6814,  2057, 11949,  2702,
         7012,  1024,   102])"
939,1,"['mean', 'observations', 'sample', 'sample mean']", Geometric distribution,seg_35,"then the sample proportion, p̂, is the sample mean of these observations:",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2059,  1996,  7099, 10817,  1010,  1052,  1010,  2003,  1996,
         7099,  2812,  1997,  2122,  9420,  1024,   102])"
940,1,"['successes', 'trials']", Geometric distribution,seg_35,# of successes 1 + 1 + 1 + 0 + 1 + 0 + 0 + 1 + 1 + 0 p̂ = = = 0.6 # of trials 10,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1001,  1997, 14152,  1015,  1009,  1015,  1009,  1015,  1009,
         1014,  1009,  1015,  1009,  1014,  1009,  1014,  1009,  1015,  1009,
         1015,  1009,  1014,  1052,  1027,  1027,  1027,  1014,  1012,  1020,
         1001,  1997,  7012,  2184,   102])"
941,1,"['mean', 'deviation', 'bernoulli', 'bernoulli random variable', 'outcomes', 'random variable', 'random', 'standard deviation', 'random variables', 'standard', 'variables', 'numerical', 'variable']", Geometric distribution,seg_35,"this mathematical inquiry of bernoulli random variables can be extended even further. because 0 and 1 are numerical outcomes, we can define the mean and standard deviation of a bernoulli random variable. (see exercises 4.15 and 4.16.)",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2023,  8045,  9934,  1997, 16595,  7140,  6894,  6721, 10857,
         2064,  2022,  3668,  2130,  2582,  1012,  2138,  1014,  1998,  1015,
         2024, 15973, 13105,  1010,  2057,  2064,  9375,  1996,  2812,  1998,
         3115, 24353,  1997,  1037, 16595,  7140,  6894,  6721,  8023,  1012,
         1006,  2156, 11110,  1018,  1012,  2321,  1998,  1018,  1012,  2385,
         1012,  1007,   102])"
942,1,"['mean', 'success', 'deviation', 'bernoulli', 'probability', 'bernoulli random variable', 'random variable', 'probability of success', 'random', 'standard deviation', 'standard', 'variable']", Geometric distribution,seg_35,"if x is a random variable that takes value 1 with probability of success p and 0 with probability 1− p, then x is a bernoulli random variable with mean and standard deviation",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0.,
        1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  2065,  1060,  2003,  1037,  6721,  8023,  2008,  3138,  3643,
         1015,  2007,  9723,  1997,  3112,  1052,  1998,  1014,  2007,  9723,
         1015, 22543,  1052,  1010,  2059,  1060,  2003,  1037, 16595,  7140,
         6894,  6721,  8023,  2007,  2812,  1998,  3115, 24353,   102])"
943,1,"['success', 'bernoulli', 'bernoulli random variable', 'failure', 'numerical', 'random variable', 'failures', 'random process', 'outcomes', 'random', 'process', 'successes', 'variable']", Geometric distribution,seg_35,"in general, it is useful to think about a bernoulli random variable as a random process with only two outcomes: a success or failure. then we build our mathematical framework using the numerical labels 1 and 0 for successes and failures, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1999,  2236,  1010,  2009,  2003,  6179,  2000,  2228,  2055,
         1037, 16595,  7140,  6894,  6721,  8023,  2004,  1037,  6721,  2832,
         2007,  2069,  2048, 13105,  1024,  1037,  3112,  2030,  4945,  1012,
         2059,  2057,  3857,  2256,  8045,  7705,  2478,  1996, 15973, 10873,
         1015,  1998,  1014,  2005, 14152,  1998, 15428,  1010,  4414,  1012,
          102])"
944,1,"['geometric', 'geometric distribution', 'distribution']", Geometric distribution,seg_35,4.2.2 geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  1018,  1012,  1016,  1012,  1016, 14965,  4353,   102])"
945,1,"['geometric distribution', 'trials', 'distribution', 'geometric', 'success']", Geometric distribution,seg_35,the geometric distribution is used to describe how many trials it takes to observe a success. let’s first look at an example.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1996, 14965,  4353,  2003,  2109,  2000,  6235,  2129,  2116,
         7012,  2009,  3138,  2000, 11949,  1037,  3112,  1012,  2292,  1521,
         1055,  2034,  2298,  2012,  2019,  2742,  1012,   102])"
946,1,"['cases', 'probability', 'random', 'success', 'case']", Geometric distribution,seg_35,"suppose we are working at the insurance company and need to find a case where the person did not exceed her (or his) deductible as a case study. if the probability a person will not exceed her deductible is 0.7 and we are drawing people at random, what are the chances that the first person will not have exceeded her deductible, i.e. be a success? the second person? the third? what about we pull n− 1 cases before we find the first success, i.e. the first success is the nth person? (if the first success is the fifth person, then we say n = 5.)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  6814,  2057,  2024,  2551,  2012,  1996,  5427,  2194,  1998,
         2342,  2000,  2424,  1037,  2553,  2073,  1996,  2711,  2106,  2025,
        13467,  2014,  1006,  2030,  2010,  1007,  2139,  8566,  6593,  7028,
         2004,  1037,  2553,  2817,  1012,  2065,  1996,  9723,  1037,  2711,
         2097,  2025, 13467,  2014,  2139,  8566,  6593,  7028,  2003,  1014,
         1012,  1021,  1998,  2057,  2024,  5059,  2111,  2012,  6721,  1010,
         2054,  2024,  1996,  9592,  2008,  1996,  2034,  2711,  2097,  2025,
         2031, 14872,  2014,  2139,  8566,  6593,  7028,  1010,  1045,  1012,
         1041,  1012,  2022,  1037,  3112,  1029,  1996,  2117,  2711,  1029,
         1996,  2353,  1029,  2054,  2055,  2057,  4139,  1050, 22543,  1015,
         3572,  2077,  2057,  2424,  1996,  2034,  3112,  1010,  1045,  1012,
         1041,  1012,  1996,  2034,  3112,  2003,  1996, 23961,  2232,  2711,
         1029,  1006,  2065,  1996,  2034,  3112,  2003,  1996,  3587,  2711,
         1010,  2059,  2057,  2360,  1050,  1027,  1019,  1012,  1007,   102])"
947,1,['probability'], Geometric distribution,seg_35,the probability of stopping after the first person is just the chance the first person will not hit her (or his) deductible: 0.7. the probability the second person is the first to hit her deductible is,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([ 101, 1996, 9723, 1997, 7458, 2044, 1996, 2034, 2711, 2003, 2074, 1996,
        3382, 1996, 2034, 2711, 2097, 2025, 2718, 2014, 1006, 2030, 2010, 1007,
        2139, 8566, 6593, 7028, 1024, 1014, 1012, 1021, 1012, 1996, 9723, 1996,
        2117, 2711, 2003, 1996, 2034, 2000, 2718, 2014, 2139, 8566, 6593, 7028,
        2003,  102])"
948,0,[], Geometric distribution,seg_35,p (second person is the first to hit deductible),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([ 101, 1052, 1006, 2117, 2711, 2003, 1996, 2034, 2000, 2718, 2139, 8566,
        6593, 7028, 1007,  102])"
949,1,"['probability', 'case']", Geometric distribution,seg_35,"likewise, the probability it will be the third case is (0.3)(0.3)(0.7) = 0.063.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101, 10655,  1010,  1996,  9723,  2009,  2097,  2022,  1996,  2353,
         2553,  2003,  1006,  1014,  1012,  1017,  1007,  1006,  1014,  1012,
         1017,  1007,  1006,  1014,  1012,  1021,  1007,  1027,  1014,  1012,
         5757,  2509,  1012,   102])"
950,1,"['probability', 'success', 'failures']", Geometric distribution,seg_35,"if the first success is on the nth person, then there are n − 1 failures and finally 1 success, which corresponds to the probability (0.3)n−1(0.7). this is the same as (1− 0.7)n−1(0.7).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2065,  1996,  2034,  3112,  2003,  2006,  1996, 23961,  2232,
         2711,  1010,  2059,  2045,  2024,  1050,  1597,  1015, 15428,  1998,
         2633,  1015,  3112,  1010,  2029, 14788,  2000,  1996,  9723,  1006,
         1014,  1012,  1017,  1007,  1050, 27944,  1006,  1014,  1012,  1021,
         1007,  1012,  2023,  2003,  1996,  2168,  2004,  1006,  1015, 22543,
         1014,  1012,  1021,  1007,  1050, 27944,  1006,  1014,  1012,  1021,
         1007,  1012,   102])"
951,1,"['independent', 'geometric distribution', 'bernoulli', 'geometric', 'case', 'probability', 'probability of success', 'independence', 'random variables', 'success', 'random', 'distribution', 'variables']", Geometric distribution,seg_35,"example 4.22 illustrates what the geometric distribution, which describes the waiting time until a success for independent and identically distributed (iid) bernoulli random variables. in this case, the independence aspect just means the individuals in the example don’t affect each other, and identical means they each have the same probability of success.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2742,  1018,  1012,  2570, 24899,  2054,  1996, 14965,  4353,
         1010,  2029,  5577,  1996,  3403,  2051,  2127,  1037,  3112,  2005,
         2981,  1998,  7235,  2135,  5500,  1006,  2462,  2094,  1007, 16595,
         7140,  6894,  6721, 10857,  1012,  1999,  2023,  2553,  1010,  1996,
         4336,  7814,  2074,  2965,  1996,  3633,  1999,  1996,  2742,  2123,
         1521,  1056,  7461,  2169,  2060,  1010,  1998,  7235,  2965,  2027,
         2169,  2031,  1996,  2168,  9723,  1997,  3112,  1012,   102])"
952,1,"['geometric', 'geometric distribution', 'exponentially', 'distribution']", Geometric distribution,seg_35,"the geometric distribution from example 4.22 is shown in figure 4.8. in general, the probabilities for a geometric distribution decrease exponentially fast.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1996, 14965,  4353,  2013,  2742,  1018,  1012,  2570,  2003,
         3491,  1999,  3275,  1018,  1012,  1022,  1012,  1999,  2236,  1010,
         1996,  4013,  3676, 14680,  2005,  1037, 14965,  4353,  9885, 27258,
         2135,  3435,  1012,   102])"
953,1,"['success', 'trials']", Geometric distribution,seg_35,0.6 ytili 0.4 baborp 0.2 0.0 1 2 3 4 5 6 7 8 number of trials until a success for p = 0.7,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1014,  1012,  1020,  1061,  3775,  3669,  1014,  1012,  1018,
         8670, 12821,  2361,  1014,  1012,  1016,  1014,  1012,  1014,  1015,
         1016,  1017,  1018,  1019,  1020,  1021,  1022,  2193,  1997,  7012,
         2127,  1037,  3112,  2005,  1052,  1027,  1014,  1012,  1021,   102])"
954,1,"['geometric distribution', 'probability', 'probability of success', 'distribution', 'geometric', 'success']", Geometric distribution,seg_35,figure 4.8: the geometric distribution when the probability of success is p = 0.7.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  3275,  1018,  1012,  1022,  1024,  1996, 14965,  4353,  2043,
         1996,  9723,  1997,  3112,  2003,  1052,  1027,  1014,  1012,  1021,
         1012,   102])"
955,1,"['mean', 'deviation', 'variance', 'trials', 'standard deviation', 'standard', 'distribution', 'success']", Geometric distribution,seg_35,"while this text will not derive the formulas for the mean (expected) number of trials needed to find the first success or the standard deviation or variance of this distribution, we present general formulas for each.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2096,  2023,  3793,  2097,  2025, 18547,  1996, 25814,  2005,
         1996,  2812,  1006,  3517,  1007,  2193,  1997,  7012,  2734,  2000,
         2424,  1996,  2034,  3112,  2030,  1996,  3115, 24353,  2030, 23284,
         1997,  2023,  4353,  1010,  2057,  2556,  2236, 25814,  2005,  2169,
         1012,   102])"
956,1,"['trial', 'probability', 'failure', 'probability of a success', 'success']", Geometric distribution,seg_35,"if the probability of a success in one trial is p and the probability of a failure is 1− p, then the probability of finding the first success in the nth trial is given by",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2065,  1996,  9723,  1997,  1037,  3112,  1999,  2028,  3979,
         2003,  1052,  1998,  1996,  9723,  1997,  1037,  4945,  2003,  1015,
        22543,  1052,  1010,  2059,  1996,  9723,  1997,  4531,  1996,  2034,
         3112,  1999,  1996, 23961,  2232,  3979,  2003,  2445,  2011,   102])"
957,1,"['mean', 'deviation', 'variance', 'standard deviation', 'standard', 'expected value']", Geometric distribution,seg_35,"the mean (i.e. expected value), variance, and standard deviation of this wait time are given by",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1996,  2812,  1006,  1045,  1012,  1041,  1012,  3517,  3643,
         1007,  1010, 23284,  1010,  1998,  3115, 24353,  1997,  2023,  3524,
         2051,  2024,  2445,  2011,   102])"
958,1,"['mean', 'expected value']", Geometric distribution,seg_35,it is no accident that we use the symbol µ for both the mean and expected value. the mean and the expected value are one and the same.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([ 101, 2009, 2003, 2053, 4926, 2008, 2057, 2224, 1996, 6454, 1085, 2005,
        2119, 1996, 2812, 1998, 3517, 3643, 1012, 1996, 2812, 1998, 1996, 3517,
        3643, 2024, 2028, 1998, 1996, 2168, 1012,  102])"
959,1,"['geometric distribution', 'probability', 'trials', 'probability of a success', 'distribution', 'geometric', 'average', 'success']", Geometric distribution,seg_35,"it takes, on average, 1/p trials to get a success under the geometric distribution. this mathematical result is consistent with what we would expect intuitively. if the probability of a success is high (e.g. 0.8), then we don’t usually wait very long for a success: 1/0.8 = 1.25 trials on average. if the probability of a success is low (e.g. 0.1), then we would expect to view many trials before we see a success: 1/0.1 = 10 trials.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2009,  3138,  1010,  2006,  2779,  1010,  1015,  1013,  1052,
         7012,  2000,  2131,  1037,  3112,  2104,  1996, 14965,  4353,  1012,
         2023,  8045,  2765,  2003,  8335,  2007,  2054,  2057,  2052,  5987,
        29202,  2135,  1012,  2065,  1996,  9723,  1997,  1037,  3112,  2003,
         2152,  1006,  1041,  1012,  1043,  1012,  1014,  1012,  1022,  1007,
         1010,  2059,  2057,  2123,  1521,  1056,  2788,  3524,  2200,  2146,
         2005,  1037,  3112,  1024,  1015,  1013,  1014,  1012,  1022,  1027,
         1015,  1012,  2423,  7012,  2006,  2779,  1012,  2065,  1996,  9723,
         1997,  1037,  3112,  2003,  2659,  1006,  1041,  1012,  1043,  1012,
         1014,  1012,  1015,  1007,  1010,  2059,  2057,  2052,  5987,  2000,
         3193,  2116,  7012,  2077,  2057,  2156,  1037,  3112,  1024,  1015,
         1013,  1014,  1012,  1015,  1027,  2184,  7012,  1012,   102])"
960,1,"['probability', 'cases', 'case']", Geometric distribution,seg_35,"the probability that a particular case would not exceed their deductible is said to be 0.7. if we were to examine cases until we found one that where the person did not hit her deductible, how many cases should we expect to check?17",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1996,  9723,  2008,  1037,  3327,  2553,  2052,  2025, 13467,
         2037,  2139,  8566,  6593,  7028,  2003,  2056,  2000,  2022,  1014,
         1012,  1021,  1012,  2065,  2057,  2020,  2000, 11628,  3572,  2127,
         2057,  2179,  2028,  2008,  2073,  1996,  2711,  2106,  2025,  2718,
         2014,  2139,  8566,  6593,  7028,  1010,  2129,  2116,  3572,  2323,
         2057,  5987,  2000,  4638,  1029,  2459,   102])"
961,1,"['cases', 'success']", Geometric distribution,seg_35,what is the chance that we would find the first success within the first 3 cases?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([14965,  4353])","tensor([ 101, 2054, 2003, 1996, 3382, 2008, 2057, 2052, 2424, 1996, 2034, 3112,
        2306, 1996, 2034, 1017, 3572, 1029,  102])"
962,1,"['probability', 'disjoint', 'outcomes', 'sample', 'results', 'independent', 'population', 'success', 'case']", Geometric distribution,seg_35,"this is the chance it is the first (n = 1), second (n = 2), or third (n = 3) case is the first success, which are three disjoint outcomes. because the individuals in the sample are randomly sampled from a large population, they are independent. we compute the probability of each case and add the separate results:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2023,  2003,  1996,  3382,  2009,  2003,  1996,  2034,  1006,
         1050,  1027,  1015,  1007,  1010,  2117,  1006,  1050,  1027,  1016,
         1007,  1010,  2030,  2353,  1006,  1050,  1027,  1017,  1007,  2553,
         2003,  1996,  2034,  3112,  1010,  2029,  2024,  2093,  4487,  2015,
         5558, 18447, 13105,  1012,  2138,  1996,  3633,  1999,  1996,  7099,
         2024, 18154, 18925,  2013,  1037,  2312,  2313,  1010,  2027,  2024,
         2981,  1012,  2057, 24134,  1996,  9723,  1997,  2169,  2553,  1998,
         5587,  1996,  3584,  3463,  1024,   102])"
963,1,"['cases', 'probability', 'case', 'successful']", Geometric distribution,seg_35,there is a probability of 0.973 that we would find a successful case within 3 cases.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0.])","tensor([14965,  4353])","tensor([ 101, 2045, 2003, 1037, 9723, 1997, 1014, 1012, 5989, 2509, 2008, 2057,
        2052, 2424, 1037, 3144, 2553, 2306, 1017, 3572, 1012,  102])"
964,0,[], Geometric distribution,seg_35,determine a more clever way to solve example 4.24. show that you get the same result.18,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101,  5646,  1037,  2062, 12266,  2126,  2000,  9611,  2742,  1018,
         1012,  2484,  1012,  2265,  2008,  2017,  2131,  1996,  2168,  2765,
         1012,  2324,   102])"
965,1,"['deviation', 'standard deviation', 'standard']", Geometric distribution,seg_35,"suppose a car insurer has determined that 88% of its drivers will not exceed their deductible in a given year. if someone at the company were to randomly draw driver files until they found one that had not exceeded their deductible, what is the expected number of drivers the insurance employee must check? what is the standard deviation of the number of driver files that must be drawn?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  6814,  1037,  2482, 16021, 27595,  2038,  4340,  2008,  6070,
         1003,  1997,  2049,  6853,  2097,  2025, 13467,  2037,  2139,  8566,
         6593,  7028,  1999,  1037,  2445,  2095,  1012,  2065,  2619,  2012,
         1996,  2194,  2020,  2000, 18154,  4009,  4062,  6764,  2127,  2027,
         2179,  2028,  2008,  2018,  2025, 14872,  2037,  2139,  8566,  6593,
         7028,  1010,  2054,  2003,  1996,  3517,  2193,  1997,  6853,  1996,
         5427,  7904,  2442,  4638,  1029,  2054,  2003,  1996,  3115, 24353,
         1997,  1996,  2193,  1997,  4062,  6764,  2008,  2442,  2022,  4567,
         1029,   102])"
966,1,"['deviation', 'probability', 'standard deviation', 'standard', 'success']", Geometric distribution,seg_35,"in this example, a success is again when someone will not exceed the insurance deductible, which has probability p = 0.88. the expected number of people to be checked is 1/p = 1/0.88 = 1.14 and the standard deviation is √(1− p)/p",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1999,  2023,  2742,  1010,  1037,  3112,  2003,  2153,  2043,
         2619,  2097,  2025, 13467,  1996,  5427,  2139,  8566,  6593,  7028,
         1010,  2029,  2038,  9723,  1052,  1027,  1014,  1012,  6070,  1012,
         1996,  3517,  2193,  1997,  2111,  2000,  2022,  7039,  2003,  1015,
         1013,  1052,  1027,  1015,  1013,  1014,  1012,  6070,  1027,  1015,
         1012,  2403,  1998,  1996,  3115, 24353,  2003,  1600,  1006,  1015,
        22543,  1052,  1007,  1013,  1052,   102])"
967,1,"['results', 'normal', 'experiments', 'model']", Geometric distribution,seg_35,"using the results from example 4.26, µ = 1.14 and σ = 0.39, would it be appropriate to use the normal model to find what proportion of experiments would end in 3 or fewer trials?19",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2478,  1996,  3463,  2013,  2742,  1018,  1012,  2656,  1010,
         1085,  1027,  1015,  1012,  2403,  1998,  1173,  1027,  1014,  1012,
         4464,  1010,  2052,  2009,  2022,  6413,  2000,  2224,  1996,  3671,
         2944,  2000,  2424,  2054, 10817,  1997,  7885,  2052,  2203,  1999,
         1017,  2030,  8491,  7012,  1029,  2539,   102])"
968,1,"['trial', 'geometric', 'probability', 'processes', 'independence', 'trials', 'dependent', 'multiplication rule', 'model', 'success', 'independent']", Geometric distribution,seg_35,"the independence assumption is crucial to the geometric distribution’s accurate description of a scenario. mathematically, we can see that to construct the probability of the success on the nth trial, we had to use the multiplication rule for independent processes. it is no simple task to generalize the geometric model for dependent trials.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1996,  4336, 11213,  2003, 10232,  2000,  1996, 14965,  4353,
         1521,  1055,  8321,  6412,  1997,  1037, 11967,  1012,  8045,  2135,
         1010,  2057,  2064,  2156,  2008,  2000,  9570,  1996,  9723,  1997,
         1996,  3112,  2006,  1996, 23961,  2232,  3979,  1010,  2057,  2018,
         2000,  2224,  1996, 24856,  3627,  2005,  2981,  6194,  1012,  2009,
         2003,  2053,  3722,  4708,  2000,  2236,  4697,  1996, 14965,  2944,
         2005,  7790,  7012,  1012,   102])"
969,1,"['successes', 'geometric distribution', 'trials', 'distribution', 'geometric', 'binomial', 'success', 'binomial distribution']", Binomial distribution,seg_37,"the binomial distribution is used to describe the number of successes in a fixed number of trials. this is different from the geometric distribution, which described the number of trials we must wait before we observe a success.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  8026, 20936,  2389,  4353,  2003,  2109,  2000,  6235,
         1996,  2193,  1997, 14152,  1999,  1037,  4964,  2193,  1997,  7012,
         1012,  2023,  2003,  2367,  2013,  1996, 14965,  4353,  1010,  2029,
         2649,  1996,  2193,  1997,  7012,  2057,  2442,  3524,  2077,  2057,
        11949,  1037,  3112,  1012,   102])"
970,1,"['binomial distribution', 'binomial', 'distribution']", Binomial distribution,seg_37,4.3.1 the binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1018,  1012,  1017,  1012,  1015,  1996,  8026, 20936,  2389,
         4353,   102])"
971,0,[], Binomial distribution,seg_37,let’s again imagine ourselves back at the insurance agency where 70% of individuals do not exceed their deductible.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2292,  1521,  1055,  2153,  5674,  9731,  2067,  2012,  1996,
         5427,  4034,  2073,  3963,  1003,  1997,  3633,  2079,  2025, 13467,
         2037,  2139,  8566,  6593,  7028,  1012,   102])"
972,1,"['sample', 'random', 'random sample']", Binomial distribution,seg_37,"suppose the insurance agency is considering a random sample of four individuals they insure. what is the chance exactly one of them will exceed the deductible and the other three will not? let’s call the four people ariana (a), brittany (b), carlton (c), and damian (d) for convenience.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  6814,  1996,  5427,  4034,  2003,  6195,  1037,  6721,  7099,
         1997,  2176,  3633,  2027, 16021,  5397,  1012,  2054,  2003,  1996,
         3382,  3599,  2028,  1997,  2068,  2097, 13467,  1996,  2139,  8566,
         6593,  7028,  1998,  1996,  2060,  2093,  2097,  2025,  1029,  2292,
         1521,  1055,  2655,  1996,  2176,  2111,  9342,  2532,  1006,  1037,
         1007,  1010, 12686,  1006,  1038,  1007,  1010, 12989,  1006,  1039,
         1007,  1010,  1998, 19507,  1006,  1040,  1007,  2005, 15106,  1012,
          102])"
973,0,[], Binomial distribution,seg_37,let’s consider a scenario where one person exceeds the deductible:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2292,  1521,  1055,  5136,  1037, 11967,  2073,  2028,  2711,
        23651,  1996,  2139,  8566,  6593,  7028,  1024,   102])"
974,1,"['probability', 'cases', 'total probability']", Binomial distribution,seg_37,"but there are three other scenarios: brittany, carlton, or damian could have been the one to exceed the deductible. in each of these cases, the probability is again (0.7)3(0.3)1. these four scenarios exhaust all the possible ways that exactly one of these four people could have exceeded the deductible, so the total probability is 4× (0.7)3(0.3)1 = 0.412.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2021,  2045,  2024,  2093,  2060, 16820,  1024, 12686,  1010,
        12989,  1010,  2030, 19507,  2071,  2031,  2042,  1996,  2028,  2000,
        13467,  1996,  2139,  8566,  6593,  7028,  1012,  1999,  2169,  1997,
         2122,  3572,  1010,  1996,  9723,  2003,  2153,  1006,  1014,  1012,
         1021,  1007,  1017,  1006,  1014,  1012,  1017,  1007,  1015,  1012,
         2122,  2176, 16820, 15095,  2035,  1996,  2825,  3971,  2008,  3599,
         2028,  1997,  2122,  2176,  2111,  2071,  2031, 14872,  1996,  2139,
         8566,  6593,  7028,  1010,  2061,  1996,  2561,  9723,  2003,  1018,
        26306,  1006,  1014,  1012,  1021,  1007,  1017,  1006,  1014,  1012,
         1017,  1007,  1015,  1027,  1014,  1012, 25873,  1012,   102])"
975,1,['probability'], Binomial distribution,seg_37,verify that the scenario where brittany is the only one exceed the deductible has probability (0.7)3(0.3)1. 20,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101, 20410,  2008,  1996, 11967,  2073, 12686,  2003,  1996,  2069,
         2028, 13467,  1996,  2139,  8566,  6593,  7028,  2038,  9723,  1006,
         1014,  1012,  1021,  1007,  1017,  1006,  1014,  1012,  1017,  1007,
         1015,  1012,  2322,   102])"
976,1,"['successes', 'bernoulli', 'probability', 'associated', 'probabilities', 'trials', 'probability of a success', 'bernoulli trials', 'independent', 'distribution', 'binomial', 'success', 'binomial distribution']", Binomial distribution,seg_37,"the scenario outlined in example 4.28 is an example of a binomial distribution scenario. the binomial distribution describes the probability of having exactly k successes in n independent bernoulli trials with probability of a success p (in example 4.28, n = 4, k = 3, p = 0.7). we would like to determine the probabilities associated with the binomial distribution more generally, i.e. we want a formula where we can use n, k, and p to obtain the probability. to do this, we reexamine each part of example 4.28.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996, 11967, 14801,  1999,  2742,  1018,  1012,  2654,  2003,
         2019,  2742,  1997,  1037,  8026, 20936,  2389,  4353, 11967,  1012,
         1996,  8026, 20936,  2389,  4353,  5577,  1996,  9723,  1997,  2383,
         3599,  1047, 14152,  1999,  1050,  2981, 16595,  7140,  6894,  7012,
         2007,  9723,  1997,  1037,  3112,  1052,  1006,  1999,  2742,  1018,
         1012,  2654,  1010,  1050,  1027,  1018,  1010,  1047,  1027,  1017,
         1010,  1052,  1027,  1014,  1012,  1021,  1007,  1012,  2057,  2052,
         2066,  2000,  5646,  1996,  4013,  3676, 14680,  3378,  2007,  1996,
         8026, 20936,  2389,  4353,  2062,  3227,  1010,  1045,  1012,  1041,
         1012,  2057,  2215,  1037,  5675,  2073,  2057,  2064,  2224,  1050,
         1010,  1047,  1010,  1998,  1052,  2000,  6855,  1996,  9723,  1012,
         2000,  2079,  2023,  1010,  2057,  2128, 10288, 19915,  2169,  2112,
         1997,  2742,  1018,  1012,  2654,  1012,   102])"
977,1,['probability'], Binomial distribution,seg_37,"there were four individuals who could have been the one to exceed the deductible, and each of these four scenarios had the same probability. thus, we could identify the final probability as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2045,  2020,  2176,  3633,  2040,  2071,  2031,  2042,  1996,
         2028,  2000, 13467,  1996,  2139,  8566,  6593,  7028,  1010,  1998,
         2169,  1997,  2122,  2176, 16820,  2018,  1996,  2168,  9723,  1012,
         2947,  1010,  2057,  2071,  6709,  1996,  2345,  9723,  2004,   102])"
978,0,[], Binomial distribution,seg_37,[# of scenarios]× p (single scenario),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1031,  1001,  1997, 16820,  1033,  1095,  1052,  1006,  2309,
        11967,  1007,   102])"
979,1,"['probability', 'trials', 'successes']", Binomial distribution,seg_37,the first component of this equation is the number of ways to arrange the k = 3 successes among the n = 4 trials. the second component is the probability of any of the four (equally probable) scenarios.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  2034,  6922,  1997,  2023,  8522,  2003,  1996,  2193,
         1997,  3971,  2000, 13621,  1996,  1047,  1027,  1017, 14152,  2426,
         1996,  1050,  1027,  1018,  7012,  1012,  1996,  2117,  6922,  2003,
         1996,  9723,  1997,  2151,  1997,  1996,  2176,  1006,  8053, 15596,
         1007, 16820,  1012,   102])"
980,1,"['events', 'independent events', 'failures', 'trials', 'multiplication rule', 'independent', 'successes', 'case']", Binomial distribution,seg_37,"consider p (single scenario) under the general case of k successes and n − k failures in the n trials. in any such scenario, we apply the multiplication rule for independent events:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  5136,  1052,  1006,  2309, 11967,  1007,  2104,  1996,  2236,
         2553,  1997,  1047, 14152,  1998,  1050,  1597,  1047, 15428,  1999,
         1996,  1050,  7012,  1012,  1999,  2151,  2107, 11967,  1010,  2057,
         6611,  1996, 24856,  3627,  2005,  2981,  2824,  1024,   102])"
981,0,[], Binomial distribution,seg_37,this is our general formula for p (single scenario).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2023,  2003,  2256,  2236,  5675,  2005,  1052,  1006,  2309,
        11967,  1007,  1012,   102])"
982,1,"['failures', 'trials', 'successes']", Binomial distribution,seg_37,"secondly, we introduce a general formula for the number of ways to choose k successes in n trials, i.e. arrange k successes and n− k failures:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101, 16378,  1010,  2057,  8970,  1037,  2236,  5675,  2005,  1996,
         2193,  1997,  3971,  2000,  5454,  1047, 14152,  1999,  1050,  7012,
         1010,  1045,  1012,  1041,  1012, 13621,  1047, 14152,  1998,  1050,
        22543,  1047, 15428,  1024,   102])"
983,0,['n'], Binomial distribution,seg_37,the quantity (n,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996, 11712,  1006,  1050,   102])"
984,1,['factorial'], Binomial distribution,seg_37,k) is read n choose k.21 the exclamation point notation (e.g. k!) denotes a factorial expression.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1047,  1007,  2003,  3191,  1050,  5454,  1047,  1012,  2538,
         1996,  4654, 20464,  8067,  3508,  2391, 14869,  1006,  1041,  1012,
         1043,  1012,  1047,   999,  1007, 14796,  1037,  5387,  4818,  3670,
         1012,   102])"
985,1,"['successes', 'trials']", Binomial distribution,seg_37,"using the formula, we can compute the number of ways to choose k = 3 successes in n = 4 trials:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2478,  1996,  5675,  1010,  2057,  2064, 24134,  1996,  2193,
         1997,  3971,  2000,  5454,  1047,  1027,  1017, 14152,  1999,  1050,
         1027,  1018,  7012,  1024,   102])"
986,0,[], Binomial distribution,seg_37,this result is exactly what we found by carefully thinking of each possible scenario in example 4.28.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2023,  2765,  2003,  3599,  2054,  2057,  2179,  2011,  5362,
         3241,  1997,  2169,  2825, 11967,  1999,  2742,  1018,  1012,  2654,
         1012,   102])"
987,1,"['probability', 'n choose k', 'binomial']", Binomial distribution,seg_37,substituting n choose k for the number of scenarios and pk(1 − p)n−k for the single scenario probability yields the general binomial formula.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  4942, 21532,  1050,  5454,  1047,  2005,  1996,  2193,  1997,
        16820,  1998,  1052,  2243,  1006,  1015,  1597,  1052,  1007,  1050,
        22543,  2243,  2005,  1996,  2309, 11967,  9723, 16189,  1996,  2236,
         8026, 20936,  2389,  5675,  1012,   102])"
988,1,"['trial', 'probability', 'trials', 'successes', 'success', 'independent']", Binomial distribution,seg_37,suppose the probability of a single trial being a success is p. then the probability of observing exactly k successes in n independent trials is given by,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  6814,  1996,  9723,  1997,  1037,  2309,  3979,  2108,  1037,
         3112,  2003,  1052,  1012,  2059,  1996,  9723,  1997, 14158,  3599,
         1047, 14152,  1999,  1050,  2981,  7012,  2003,  2445,  2011,   102])"
989,1,"['mean', 'deviation', 'variance', 'standard deviation', 'standard', 'successes']", Binomial distribution,seg_37,"the mean, variance, and standard deviation of the number of observed successes are",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  2812,  1010, 23284,  1010,  1998,  3115, 24353,  1997,
         1996,  2193,  1997,  5159, 14152,  2024,   102])"
990,1,"['trial', 'probability', 'failure', 'outcome', 'trials', 'probability of a success', 'success', 'independent']", Binomial distribution,seg_37,"(1) the trials are independent. (2) the number of trials, n, is fixed. (3) each trial outcome can be classified as a success or failure. (4) the probability of a success, p, is the same for each trial.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([ 101, 1006, 1015, 1007, 1996, 7012, 2024, 2981, 1012, 1006, 1016, 1007,
        1996, 2193, 1997, 7012, 1010, 1050, 1010, 2003, 4964, 1012, 1006, 1017,
        1007, 2169, 3979, 9560, 2064, 2022, 6219, 2004, 1037, 3112, 2030, 4945,
        1012, 1006, 1018, 1007, 1996, 9723, 1997, 1037, 3112, 1010, 1052, 1010,
        2003, 1996, 2168, 2005, 2169, 3979, 1012,  102])"
991,1,['probability'], Binomial distribution,seg_37,"what is the probability that 3 of 8 randomly selected individuals will have exceeded the insurance deductible, i.e. that 5 of 8 will not exceed the deductible? recall that 70% of individuals will not exceed the deductible.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2054,  2003,  1996,  9723,  2008,  1017,  1997,  1022, 18154,
         3479,  3633,  2097,  2031, 14872,  1996,  5427,  2139,  8566,  6593,
         7028,  1010,  1045,  1012,  1041,  1012,  2008,  1019,  1997,  1022,
         2097,  2025, 13467,  1996,  2139,  8566,  6593,  7028,  1029,  9131,
         2008,  3963,  1003,  1997,  3633,  2097,  2025, 13467,  1996,  2139,
         8566,  6593,  7028,  1012,   102])"
992,1,"['trial', 'probability', 'failure', 'outcome', 'trials', 'sample', 'random', 'probability of a success', 'condition', 'model', 'binomial', 'success', 'independent']", Binomial distribution,seg_37,"we would like to apply the binomial model, so we check the conditions. the number of trials is fixed (n = 8) (condition 2) and each trial outcome can be classified as a success or failure (condition 3). because the sample is random, the trials are independent (condition 1) and the probability of a success is the same for each trial (condition 4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2057,  2052,  2066,  2000,  6611,  1996,  8026, 20936,  2389,
         2944,  1010,  2061,  2057,  4638,  1996,  3785,  1012,  1996,  2193,
         1997,  7012,  2003,  4964,  1006,  1050,  1027,  1022,  1007,  1006,
         4650,  1016,  1007,  1998,  2169,  3979,  9560,  2064,  2022,  6219,
         2004,  1037,  3112,  2030,  4945,  1006,  4650,  1017,  1007,  1012,
         2138,  1996,  7099,  2003,  6721,  1010,  1996,  7012,  2024,  2981,
         1006,  4650,  1015,  1007,  1998,  1996,  9723,  1997,  1037,  3112,
         2003,  1996,  2168,  2005,  2169,  3979,  1006,  4650,  1018,  1007,
         1012,   102])"
993,1,"['probability', 'outcome', 'trials', 'probability of a success', 'outcome of interest', 'successes', 'success']", Binomial distribution,seg_37,"in the outcome of interest, there are k = 5 successes in n = 8 trials (recall that a success is an individual who does not exceed the deductible, and the probability of a success is p = 0.7. so the probability that 5 of 8 will not exceed the deductible and 3 will exceed the deductible is given by",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1999,  1996,  9560,  1997,  3037,  1010,  2045,  2024,  1047,
         1027,  1019, 14152,  1999,  1050,  1027,  1022,  7012,  1006,  9131,
         2008,  1037,  3112,  2003,  2019,  3265,  2040,  2515,  2025, 13467,
         1996,  2139,  8566,  6593,  7028,  1010,  1998,  1996,  9723,  1997,
         1037,  3112,  2003,  1052,  1027,  1014,  1012,  1021,  1012,  2061,
         1996,  9723,  2008,  1019,  1997,  1022,  2097,  2025, 13467,  1996,
         2139,  8566,  6593,  7028,  1998,  1017,  2097, 13467,  1996,  2139,
         8566,  6593,  7028,  2003,  2445,  2011,   102])"
994,1,['factorial'], Binomial distribution,seg_37,dealing with the factorial part:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([ 101, 7149, 2007, 1996, 5387, 4818, 2112, 1024,  102])"
995,1,['probability'], Binomial distribution,seg_37,"using (0.7)5(0.3)3 ≈ 0.00454, the final probability is about 56× 0.00454 ≈ 0.254.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2478,  1006,  1014,  1012,  1021,  1007,  1019,  1006,  1014,
         1012,  1017,  1007,  1017,  1606,  1014,  1012,  4002, 19961,  2549,
         1010,  1996,  2345,  9723,  2003,  2055,  5179, 26306,  1014,  1012,
         4002, 19961,  2549,  1606,  1014,  1012, 22234,  1012,   102])"
996,1,"['probability', 'results', 'model', 'binomial']", Binomial distribution,seg_37,"the first step in using the binomial model is to check that the model is appropriate. the second step is to identify n, p, and k. as the last stage use software or the formulas to determine the probability, then interpret the results.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  2034,  3357,  1999,  2478,  1996,  8026, 20936,  2389,
         2944,  2003,  2000,  4638,  2008,  1996,  2944,  2003,  6413,  1012,
         1996,  2117,  3357,  2003,  2000,  6709,  1050,  1010,  1052,  1010,
         1998,  1047,  1012,  2004,  1996,  2197,  2754,  2224,  4007,  2030,
         1996, 25814,  2000,  5646,  1996,  9723,  1010,  2059, 17841,  1996,
         3463,  1012,   102])"
997,1,"['binomial coefficient', 'binomial', 'coefficient']", Binomial distribution,seg_37,"if you must do calculations by hand, it’s often useful to cancel out as many terms as possible in the top and bottom of the binomial coefficient.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2065,  2017,  2442,  2079, 16268,  2011,  2192,  1010,  2009,
         1521,  1055,  2411,  6179,  2000, 17542,  2041,  2004,  2116,  3408,
         2004,  2825,  1999,  1996,  2327,  1998,  3953,  1997,  1996,  8026,
        20936,  2389, 19064,  1012,   102])"
998,1,"['cases', 'deviation', 'standard deviation', 'standard', 'case']", Binomial distribution,seg_37,"if we randomly sampled 40 case files from the insurance agency discussed earlier, how many of the cases would you expect to not have exceeded the deductible in a given year? what is the standard deviation of the number that would not have exceeded the deductible?22",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2065,  2057, 18154, 18925,  2871,  2553,  6764,  2013,  1996,
         5427,  4034,  6936,  3041,  1010,  2129,  2116,  1997,  1996,  3572,
         2052,  2017,  5987,  2000,  2025,  2031, 14872,  1996,  2139,  8566,
         6593,  7028,  1999,  1037,  2445,  2095,  1029,  2054,  2003,  1996,
         3115, 24353,  1997,  1996,  2193,  2008,  2052,  2025,  2031, 14872,
         1996,  2139,  8566,  6593,  7028,  1029,  2570,   102])"
999,1,"['probability', 'random', 'condition', 'model', 'binomial']", Binomial distribution,seg_37,"the probability that a random smoker will develop a severe lung condition in his or her lifetime is about 0.3. if you have 4 friends who smoke, are the conditions for the binomial model satisfied?23",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  9723,  2008,  1037,  6721,  5610,  2099,  2097,  4503,
         1037,  5729, 11192,  4650,  1999,  2010,  2030,  2014,  6480,  2003,
         2055,  1014,  1012,  1017,  1012,  2065,  2017,  2031,  1018,  2814,
         2040,  5610,  1010,  2024,  1996,  3785,  2005,  1996,  8026, 20936,
         2389,  2944,  8510,  1029,  2603,   102])"
1000,1,"['probability', 'random sample', 'sample', 'random', 'population', 'model', 'binomial']", Binomial distribution,seg_37,suppose these four friends do not know each other and we can treat them as if they were a random sample from the population. is the binomial model appropriate? what is the probability that24,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  6814,  2122,  2176,  2814,  2079,  2025,  2113,  2169,  2060,
         1998,  2057,  2064,  7438,  2068,  2004,  2065,  2027,  2020,  1037,
         6721,  7099,  2013,  1996,  2313,  1012,  2003,  1996,  8026, 20936,
         2389,  2944,  6413,  1029,  2054,  2003,  1996,  9723,  2008, 18827,
          102])"
1001,1,['condition'], Binomial distribution,seg_37,(a) none of them will develop a severe lung condition?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1006,  1037,  1007,  3904,  1997,  2068,  2097,  4503,  1037,
         5729, 11192,  4650,  1029,   102])"
1002,1,['condition'], Binomial distribution,seg_37,(b) one will develop a severe lung condition?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1006,  1038,  1007,  2028,  2097,  4503,  1037,  5729, 11192,
         4650,  1029,   102])"
1003,1,['condition'], Binomial distribution,seg_37,(c) that no more than one will develop a severe lung condition?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1006,  1039,  1007,  2008,  2053,  2062,  2084,  2028,  2097,
         4503,  1037,  5729, 11192,  4650,  1029,   102])"
1004,1,"['probability', 'condition']", Binomial distribution,seg_37,what is the probability that at least 2 of your 4 smoking friends will develop a severe lung condition in their lifetimes?25,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2054,  2003,  1996,  9723,  2008,  2012,  2560,  1016,  1997,
         2115,  1018,  9422,  2814,  2097,  4503,  1037,  5729, 11192,  4650,
         1999,  2037,  6480,  2015,  1029,  2423,   102])"
1005,1,"['sample', 'random', 'random sample']", Binomial distribution,seg_37,suppose you have 7 friends who are smokers and they can be treated as a random sample of smok-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  6814,  2017,  2031,  1021,  2814,  2040,  2024,  5610,  2869,
         1998,  2027,  2064,  2022,  5845,  2004,  1037,  6721,  7099,  1997,
        15488,  6559,  1011,   102])"
1006,1,"['mean', 'condition']", Binomial distribution,seg_37,"(a) how many would you expect to develop a severe lung condition, i.e. what is the mean?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1006,  1037,  1007,  2129,  2116,  2052,  2017,  5987,  2000,
         4503,  1037,  5729, 11192,  4650,  1010,  1045,  1012,  1041,  1012,
         2054,  2003,  1996,  2812,  1029,   102])"
1007,1,"['probability', 'condition']", Binomial distribution,seg_37,(b) what is the probability that at most 2 of your 7 friends will develop a severe lung condition.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1006,  1038,  1007,  2054,  2003,  1996,  9723,  2008,  2012,
         2087,  1016,  1997,  2115,  1021,  2814,  2097,  4503,  1037,  5729,
        11192,  4650,  1012,   102])"
1008,1,"['probability', 'n choose k', 'binomial']", Binomial distribution,seg_37,"next we consider the first term in the binomial probability, n choose k under some special scenarios.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2279,  2057,  5136,  1996,  2034,  2744,  1999,  1996,  8026,
        20936,  2389,  9723,  1010,  1050,  5454,  1047,  2104,  2070,  2569,
        16820,  1012,   102])"
1009,1,"['failure', 'failures', 'trials', 'successes', 'success']", Binomial distribution,seg_37,how many ways can you arrange one success and n−1 failures in n trials? how many ways can you arrange n− 1 successes and one failure in n trials?28,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2129,  2116,  3971,  2064,  2017, 13621,  2028,  3112,  1998,
         1050, 27944, 15428,  1999,  1050,  7012,  1029,  2129,  2116,  3971,
         2064,  2017, 13621,  1050, 22543,  1015, 14152,  1998,  2028,  4945,
         1999,  1050,  7012,  1029,  2654,   102])"
1010,1,"['approximation', 'normal approximation', 'normal', 'distribution', 'binomial', 'binomial distribution']", Binomial distribution,seg_37,4.3.2 normal approximation to the binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1018,  1012,  1017,  1012,  1016,  3671, 20167,  2000,  1996,
         8026, 20936,  2389,  4353,   102])"
1011,1,"['cases', 'normal distribution', 'range', 'observations', 'estimate', 'probabilities', 'sample', 'normal', 'sample size', 'distribution', 'binomial']", Binomial distribution,seg_37,"the binomial formula is cumbersome when the sample size (n) is large, particularly when we consider a range of observations. in some cases we may use the normal distribution as an easier and faster way to estimate binomial probabilities.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  8026, 20936,  2389,  5675,  2003, 13988, 17198,  8462,
         2043,  1996,  7099,  2946,  1006,  1050,  1007,  2003,  2312,  1010,
         3391,  2043,  2057,  5136,  1037,  2846,  1997,  9420,  1012,  1999,
         2070,  3572,  2057,  2089,  2224,  1996,  3671,  4353,  2004,  2019,
         6082,  1998,  5514,  2126,  2000, 10197,  8026, 20936,  2389,  4013,
         3676, 14680,  1012,   102])"
1012,1,"['rate', 'probability', 'sample', 'population']", Binomial distribution,seg_37,"approximately 15% of the us population smokes cigarettes. a local government believed their community had a lower smoker rate and commissioned a survey of 400 randomly selected individuals. the survey found that only 42 of the 400 participants smoke cigarettes. if the true proportion of smokers in the community was really 15%, what is the probability of observing 42 or fewer smokers in a sample of 400 people?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  3155,  2321,  1003,  1997,  1996,  2149,  2313,  5610,  2015,
        15001,  1012,  1037,  2334,  2231,  3373,  2037,  2451,  2018,  1037,
         2896,  5610,  2099,  3446,  1998,  4837,  1037,  5002,  1997,  4278,
        18154,  3479,  3633,  1012,  1996,  5002,  2179,  2008,  2069,  4413,
         1997,  1996,  4278,  6818,  5610, 15001,  1012,  2065,  1996,  2995,
        10817,  1997,  5610,  2869,  1999,  1996,  2451,  2001,  2428,  2321,
         1003,  1010,  2054,  2003,  1996,  9723,  1997, 14158,  4413,  2030,
         8491,  5610,  2869,  1999,  1037,  7099,  1997,  4278,  2111,  1029,
          102])"
1013,1,"['model', 'binomial']", Binomial distribution,seg_37,we leave the usual verification that the four conditions for the binomial model are valid as an exercise.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2057,  2681,  1996,  5156, 22616,  2008,  1996,  2176,  3785,
         2005,  1996,  8026, 20936,  2389,  2944,  2024,  9398,  2004,  2019,
         6912,  1012,   102])"
1014,1,"['probability', 'sample', 'probabilities']", Binomial distribution,seg_37,"the question posed is equivalent to asking, what is the probability of observing k = 0, 1, 2, ..., or 42 smokers in a sample of n = 400 when p = 0.15? we can compute these 43 different probabilities and add them together to find the answer:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  3160, 13686,  2003,  5662,  2000,  4851,  1010,  2054,
         2003,  1996,  9723,  1997, 14158,  1047,  1027,  1014,  1010,  1015,
         1010,  1016,  1010,  1012,  1012,  1012,  1010,  2030,  4413,  5610,
         2869,  1999,  1037,  7099,  1997,  1050,  1027,  4278,  2043,  1052,
         1027,  1014,  1012,  2321,  1029,  2057,  2064, 24134,  2122,  4724,
         2367,  4013,  3676, 14680,  1998,  5587,  2068,  2362,  2000,  2424,
         1996,  3437,  1024,   102])"
1015,1,"['probability', 'sample']", Binomial distribution,seg_37,"if the true proportion of smokers in the community is p = 0.15, then the probability of observing 42 or fewer smokers in a sample of n = 400 is 0.0054.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2065,  1996,  2995, 10817,  1997,  5610,  2869,  1999,  1996,
         2451,  2003,  1052,  1027,  1014,  1012,  2321,  1010,  2059,  1996,
         9723,  1997, 14158,  4413,  2030,  8491,  5610,  2869,  1999,  1037,
         7099,  1997,  1050,  1027,  4278,  2003,  1014,  1012,  4002, 27009,
         1012,   102])"
1016,1,"['range', 'probabilities', 'method', 'normal', 'distribution', 'model', 'binomial', 'binomial distribution']", Binomial distribution,seg_37,"the computations in example 4.38 are tedious and long. in general, we should avoid such work if an alternative method exists that is faster, easier, and still accurate. recall that calculating probabilities of a range of values is much easier in the normal model. we might wonder, is it reasonable to use the normal model in place of the binomial distribution? surprisingly, yes, if certain conditions are met.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996, 22334,  2015,  1999,  2742,  1018,  1012,  4229,  2024,
         6945,  6313,  1998,  2146,  1012,  1999,  2236,  1010,  2057,  2323,
         4468,  2107,  2147,  2065,  2019,  4522,  4118,  6526,  2008,  2003,
         5514,  1010,  6082,  1010,  1998,  2145,  8321,  1012,  9131,  2008,
        20177,  4013,  3676, 14680,  1997,  1037,  2846,  1997,  5300,  2003,
         2172,  6082,  1999,  1996,  3671,  2944,  1012,  2057,  2453,  4687,
         1010,  2003,  2009,  9608,  2000,  2224,  1996,  3671,  2944,  1999,
         2173,  1997,  1996,  8026, 20936,  2389,  4353,  1029, 10889,  1010,
         2748,  1010,  2065,  3056,  3785,  2024,  2777,  1012,   102])"
1017,1,"['histograms', 'hollow histogram', 'probability', 'hollow histograms', 'histogram', 'simulated', 'distributions', 'sample', 'samples', 'sample size', 'probability of a success', 'distribution', 'model', 'binomial', 'success', 'binomial distribution']", Binomial distribution,seg_37,"here we consider the binomial model when the probability of a success is p = 0.10. figure 4.9 shows four hollow histograms for simulated samples from the binomial distribution using four different sample sizes: n = 10, 30, 100, 300. what happens to the shape of the distributions as the sample size increases? what distribution does the last hollow histogram resemble?29",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 1.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2182,  2057,  5136,  1996,  8026, 20936,  2389,  2944,  2043,
         1996,  9723,  1997,  1037,  3112,  2003,  1052,  1027,  1014,  1012,
         2184,  1012,  3275,  1018,  1012,  1023,  3065,  2176,  8892,  2010,
         3406, 13113,  2015,  2005, 23599,  8168,  2013,  1996,  8026, 20936,
         2389,  4353,  2478,  2176,  2367,  7099, 10826,  1024,  1050,  1027,
         2184,  1010,  2382,  1010,  2531,  1010,  3998,  1012,  2054,  6433,
         2000,  1996,  4338,  1997,  1996, 20611,  2004,  1996,  7099,  2946,
         7457,  1029,  2054,  4353,  2515,  1996,  2197,  8892,  2010,  3406,
        13113, 13014,  1029,  2756,   102])"
1018,1,"['binomial distribution', 'mean', 'normal distribution', 'normal', 'standard deviation', 'binomial', 'deviation', 'probability', 'probability of success', 'standard', 'parameters', 'success', 'sample', 'sample size', 'distribution']", Binomial distribution,seg_37,the binomial distribution with probability of success p is nearly normal when the sample size n is sufficiently large that np and n(1 − p) are both at least 10. the approximate normal distribution has parameters corresponding to the mean and standard deviation of the binomial distribution:,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 1.,
        1., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  8026, 20936,  2389,  4353,  2007,  9723,  1997,  3112,
         1052,  2003,  3053,  3671,  2043,  1996,  7099,  2946,  1050,  2003,
        12949,  2312,  2008, 27937,  1998,  1050,  1006,  1015,  1597,  1052,
         1007,  2024,  2119,  2012,  2560,  2184,  1012,  1996, 15796,  3671,
         4353,  2038, 11709,  7978,  2000,  1996,  2812,  1998,  3115, 24353,
         1997,  1996,  8026, 20936,  2389,  4353,  1024,   102])"
1019,1,"['normal distribution', 'range', 'approximation', 'normal approximation', 'normal', 'distribution', 'successes']", Binomial distribution,seg_37,"the normal approximation may be used when computing the range of many possible successes. for instance, we may apply the normal distribution to the setting of example 4.38.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  3671, 20167,  2089,  2022,  2109,  2043,  9798,  1996,
         2846,  1997,  2116,  2825, 14152,  1012,  2005,  6013,  1010,  2057,
         2089,  6611,  1996,  3671,  4353,  2000,  1996,  4292,  1997,  2742,
         1018,  1012,  4229,  1012,   102])"
1020,1,"['histograms', 'hollow histograms', 'sample', 'plots', 'samples', 'model', 'binomial']", Binomial distribution,seg_37,"figure 4.9: hollow histograms of samples from the binomial model when p = 0.10. the sample sizes for the four plots are n = 10, 30, 100, and 300, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  3275,  1018,  1012,  1023,  1024,  8892,  2010,  3406, 13113,
         2015,  1997,  8168,  2013,  1996,  8026, 20936,  2389,  2944,  2043,
         1052,  1027,  1014,  1012,  2184,  1012,  1996,  7099, 10826,  2005,
         1996,  2176, 14811,  2024,  1050,  1027,  2184,  1010,  2382,  1010,
         2531,  1010,  1998,  3998,  1010,  4414,  1012,   102])"
1021,1,"['probability', 'estimate', 'approximation', 'normal approximation', 'sample', 'normal']", Binomial distribution,seg_37,"how can we use the normal approximation to estimate the probability of observing 42 or fewer smokers in a sample of 400, if the true proportion of smokers is p = 0.15?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2129,  2064,  2057,  2224,  1996,  3671, 20167,  2000, 10197,
         1996,  9723,  1997, 14158,  4413,  2030,  8491,  5610,  2869,  1999,
         1037,  7099,  1997,  4278,  1010,  2065,  1996,  2995, 10817,  1997,
         5610,  2869,  2003,  1052,  1027,  1014,  1012,  2321,  1029,   102])"
1022,1,"['model', 'binomial']", Binomial distribution,seg_37,showing that the binomial model is reasonable was a suggested exercise in example 4.38. we also verify that both np and n(1− p) are at least 10:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  4760,  2008,  1996,  8026, 20936,  2389,  2944,  2003,  9608,
         2001,  1037,  4081,  6912,  1999,  2742,  1018,  1012,  4229,  1012,
         2057,  2036, 20410,  2008,  2119, 27937,  1998,  1050,  1006,  1015,
        22543,  1052,  1007,  2024,  2012,  2560,  2184,  1024,   102])"
1023,1,"['mean', 'deviation', 'approximation', 'normal approximation', 'normal', 'standard deviation', 'standard', 'distribution', 'model', 'binomial', 'binomial distribution']", Binomial distribution,seg_37,"with these conditions checked, we may use the normal approximation in place of the binomial distribution using the mean and standard deviation from the binomial model:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2007,  2122,  3785,  7039,  1010,  2057,  2089,  2224,  1996,
         3671, 20167,  1999,  2173,  1997,  1996,  8026, 20936,  2389,  4353,
         2478,  1996,  2812,  1998,  3115, 24353,  2013,  1996,  8026, 20936,
         2389,  2944,  1024,   102])"
1024,1,"['model', 'probability']", Binomial distribution,seg_37,we want to find the probability of observing 42 or fewer smokers using this model.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2057,  2215,  2000,  2424,  1996,  9723,  1997, 14158,  4413,
         2030,  8491,  5610,  2869,  2478,  2023,  2944,  1012,   102])"
1025,1,"['model', 'estimate', 'normal', 'probability']", Binomial distribution,seg_37,"use the normal model n(µ = 60, σ = 7.14) to estimate the probability of observing 42 or fewer",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2224,  1996,  3671,  2944,  1050,  1006,  1085,  1027,  3438,
         1010,  1173,  1027,  1021,  1012,  2403,  1007,  2000, 10197,  1996,
         9723,  1997, 14158,  4413,  2030,  8491,   102])"
1026,0,[], Binomial distribution,seg_37,30 smokers. your answer should be approximately equal to the solution of example 4.38: 0.0054.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2382,  5610,  2869,  1012,  2115,  3437,  2323,  2022,  3155,
         5020,  2000,  1996,  5576,  1997,  2742,  1018,  1012,  4229,  1024,
         1014,  1012,  4002, 27009,  1012,   102])"
1027,1,"['approximation', 'normal approximation', 'normal', 'intervals']", Binomial distribution,seg_37,4.3.3 the normal approximation breaks down on small intervals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1018,  1012,  1017,  1012,  1017,  1996,  3671, 20167,  7807,
         2091,  2006,  2235, 14025,   102])"
1028,1,"['range', 'probability', 'approximation', 'normal approximation', 'normal', 'distribution', 'binomial', 'binomial distribution']", Binomial distribution,seg_37,"the normal approximation to the binomial distribution tends to perform poorly when estimating the probability of a small range of counts, even when the conditions are met.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  3671, 20167,  2000,  1996,  8026, 20936,  2389,  4353,
        12102,  2000,  4685,  9996,  2043,  9765, 22835,  1996,  9723,  1997,
         1037,  2235,  2846,  1997,  9294,  1010,  2130,  2043,  1996,  3785,
         2024,  2777,  1012,   102])"
1029,1,"['range', 'probability', 'approximation', 'normal approximation', 'sample', 'normal', 'binomial']", Binomial distribution,seg_37,"suppose we wanted to compute the probability of observing 49, 50, or 51 smokers in 400 when p = 0.15. with such a large sample, we might be tempted to apply the normal approximation and use the range 49 to 51. however, we would find that the binomial solution and the normal approximation notably differ:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  6814,  2057,  2359,  2000, 24134,  1996,  9723,  1997, 14158,
         4749,  1010,  2753,  1010,  2030,  4868,  5610,  2869,  1999,  4278,
         2043,  1052,  1027,  1014,  1012,  2321,  1012,  2007,  2107,  1037,
         2312,  7099,  1010,  2057,  2453,  2022, 16312,  2000,  6611,  1996,
         3671, 20167,  1998,  2224,  1996,  2846,  4749,  2000,  4868,  1012,
         2174,  1010,  2057,  2052,  2424,  2008,  1996,  8026, 20936,  2389,
         5576,  1998,  1996,  3671, 20167,  5546, 11234,  1024,   102])"
1030,1,['normal'], Binomial distribution,seg_37,binomial: 0.0649 normal: 0.0421,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  8026, 20936,  2389,  1024,  1014,  1012,  5757, 26224,  3671,
         1024,  1014,  1012,  5840, 17465,   102])"
1031,1,"['normal distribution', 'probability', 'interval', 'approximation', 'normal approximation', 'normal', 'distribution', 'binomial']", Binomial distribution,seg_37,"we can identify the cause of this discrepancy using figure 4.10, which shows the areas representing the binomial probability (outlined) and normal approximation (shaded). notice that the width of the area under the normal distribution is 0.5 units too slim on both sides of the interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2057,  2064,  6709,  1996,  3426,  1997,  2023,  5860,  2890,
         9739,  5666,  2478,  3275,  1018,  1012,  2184,  1010,  2029,  3065,
         1996,  2752,  5052,  1996,  8026, 20936,  2389,  9723,  1006, 14801,
         1007,  1998,  3671, 20167,  1006, 25273,  1007,  1012,  5060,  2008,
         1996,  9381,  1997,  1996,  2181,  2104,  1996,  3671,  4353,  2003,
         1014,  1012,  1019,  3197,  2205, 11754,  2006,  2119,  3903,  1997,
         1996, 13483,  1012,   102])"
1032,1,"['curve', 'probability', 'normal', 'binomial']", Binomial distribution,seg_37,figure 4.10: a normal curve with the area between 49 and 51 shaded. the outlined area represents the exact binomial probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  3275,  1018,  1012,  2184,  1024,  1037,  3671,  7774,  2007,
         1996,  2181,  2090,  4749,  1998,  4868, 25273,  1012,  1996, 14801,
         2181,  5836,  1996,  6635,  8026, 20936,  2389,  9723,  1012,   102])"
1033,1,"['approximation', 'normal approximation', 'normal', 'intervals', 'distribution', 'binomial', 'binomial distribution']", Binomial distribution,seg_37,"the normal approximation to the binomial distribution for intervals of values is usually improved if cutoff values are modified slightly. the cutoff values for the lower end of a shaded region should be reduced by 0.5, and the cutoff value for the upper end should be increased by 0.5.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  3671, 20167,  2000,  1996,  8026, 20936,  2389,  4353,
         2005, 14025,  1997,  5300,  2003,  2788,  5301,  2065,  3013,  7245,
         5300,  2024,  6310,  3621,  1012,  1996,  3013,  7245,  5300,  2005,
         1996,  2896,  2203,  1997,  1037, 25273,  2555,  2323,  2022,  4359,
         2011,  1014,  1012,  1019,  1010,  1998,  1996,  3013,  7245,  3643,
         2005,  1996,  3356,  2203,  2323,  2022,  3445,  2011,  1014,  1012,
         1019,  1012,   102])"
1034,1,"['tail', 'normal distribution', 'range', 'interval', 'observations', 'estimate', 'approximation', 'normal approximation', 'normal', 'distribution']", Binomial distribution,seg_37,"the tip to add extra area when applying the normal approximation is most often useful when examining a range of observations. in the example above, the revised normal distribution estimate is 0.0633, much closer to the exact value of 0.0649. while it is possible to also apply this correction when computing a tail area, the benefit of the modification usually disappears since the total interval is typically quite wide.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  5955,  2000,  5587,  4469,  2181,  2043, 11243,  1996,
         3671, 20167,  2003,  2087,  2411,  6179,  2043, 12843,  1037,  2846,
         1997,  9420,  1012,  1999,  1996,  2742,  2682,  1010,  1996,  8001,
         3671,  4353, 10197,  2003,  1014,  1012,  5757, 22394,  1010,  2172,
         3553,  2000,  1996,  6635,  3643,  1997,  1014,  1012,  5757, 26224,
         1012,  2096,  2009,  2003,  2825,  2000,  2036,  6611,  2023, 18140,
         2043,  9798,  1037,  5725,  2181,  1010,  1996,  5770,  1997,  1996,
        14080,  2788, 17144,  2144,  1996,  2561, 13483,  2003,  4050,  3243,
         2898,  1012,   102])"
1035,1,"['negative binomial distribution', 'trial', 'geometric distribution', 'probability', 'negative binomial', 'distribution', 'geometric', 'binomial', 'success', 'binomial distribution']", Negative binomial distribution,seg_39,the geometric distribution describes the probability of observing the first success on the nth trial. the negative binomial distribution is more general: it describes the probability of observing the kth success on the nth trial.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996, 14965,  4353,  5577,  1996,  9723,  1997, 14158,  1996,
         2034,  3112,  2006,  1996, 23961,  2232,  3979,  1012,  1996,  4997,
         8026, 20936,  2389,  4353,  2003,  2062,  2236,  1024,  2009,  5577,
         1996,  9723,  1997, 14158,  1996,  1047,  2705,  3112,  2006,  1996,
        23961,  2232,  3979,  1012,   102])"
1036,1,"['probability', 'successful']", Negative binomial distribution,seg_39,"each day a high school football coach tells his star kicker, brian, that he can go home after he successfully kicks four 35 yard field goals. suppose we say each kick has a probability p of being successful. if p is small – e.g. close to 0.1 – would we expect brian to need many attempts before he successfully kicks his fourth field goal?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2169,  2154,  1037,  2152,  2082,  2374,  2873,  4136,  2010,
         2732, 22652,  1010,  4422,  1010,  2008,  2002,  2064,  2175,  2188,
         2044,  2002,  5147, 14590,  2176,  3486,  4220,  2492,  3289,  1012,
         6814,  2057,  2360,  2169,  5926,  2038,  1037,  9723,  1052,  1997,
         2108,  3144,  1012,  2065,  1052,  2003,  2235,  1516,  1041,  1012,
         1043,  1012,  2485,  2000,  1014,  1012,  1015,  1516,  2052,  2057,
         5987,  4422,  2000,  2342,  2116,  4740,  2077,  2002,  5147, 14590,
         2010,  2959,  2492,  3125,  1029,   102])"
1037,1,"['probability', 'probability of a success', 'successes', 'success']", Negative binomial distribution,seg_39,"we are waiting for the fourth success (k = 4). if the probability of a success (p) is small, then the number of attempts (n) will probably be large. this means that brian is more likely to need many attempts before he gets k = 4 successes. to put this another way, the probability of n being small is low.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2057,  2024,  3403,  2005,  1996,  2959,  3112,  1006,  1047,
         1027,  1018,  1007,  1012,  2065,  1996,  9723,  1997,  1037,  3112,
         1006,  1052,  1007,  2003,  2235,  1010,  2059,  1996,  2193,  1997,
         4740,  1006,  1050,  1007,  2097,  2763,  2022,  2312,  1012,  2023,
         2965,  2008,  4422,  2003,  2062,  3497,  2000,  2342,  2116,  4740,
         2077,  2002,  4152,  1047,  1027,  1018, 14152,  1012,  2000,  2404,
         2023,  2178,  2126,  1010,  1996,  9723,  1997,  1050,  2108,  2235,
         2003,  2659,  1012,   102])"
1038,1,"['binomial', 'negative binomial', 'distribution', 'case', 'binomial distribution']", Negative binomial distribution,seg_39,"to identify a negative binomial case, we check 4 conditions. the first three are common to the binomial distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2000,  6709,  1037,  4997,  8026, 20936,  2389,  2553,  1010,
         2057,  4638,  1018,  3785,  1012,  1996,  2034,  2093,  2024,  2691,
         2000,  1996,  8026, 20936,  2389,  4353,  1012,   102])"
1039,1,"['trial', 'probability', 'failure', 'outcome', 'trials', 'probability of a success', 'success', 'independent']", Negative binomial distribution,seg_39,(1) the trials are independent. (2) each trial outcome can be classified as a success or failure. (3) the probability of a success (p) is the same for each trial. (4) the last trial must be a success.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 1006, 1015, 1007, 1996, 7012, 2024, 2981, 1012, 1006, 1016, 1007,
        2169, 3979, 9560, 2064, 2022, 6219, 2004, 1037, 3112, 2030, 4945, 1012,
        1006, 1017, 1007, 1996, 9723, 1997, 1037, 3112, 1006, 1052, 1007, 2003,
        1996, 2168, 2005, 2169, 3979, 1012, 1006, 1018, 1007, 1996, 2197, 3979,
        2442, 2022, 1037, 3112, 1012,  102])"
1040,1,['probability'], Negative binomial distribution,seg_39,suppose brian is very diligent in his attempts and he makes each 35 yard field goal with probability p = 0.8. take a guess at how many attempts he would need before making his fourth kick.34,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  6814,  4422,  2003,  2200, 29454, 29206,  2102,  1999,  2010,
         4740,  1998,  2002,  3084,  2169,  3486,  4220,  2492,  3125,  2007,
         9723,  1052,  1027,  1014,  1012,  1022,  1012,  2202,  1037,  3984,
         2012,  2129,  2116,  4740,  2002,  2052,  2342,  2077,  2437,  2010,
         2959,  5926,  1012,  4090,   102])"
1041,0,[], Negative binomial distribution,seg_39,"in yesterday’s practice, it took brian only 6 tries to get his fourth field goal. write out each of the possible sequence of kicks.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1999,  7483,  1521,  1055,  3218,  1010,  2009,  2165,  4422,
         2069,  1020,  5363,  2000,  2131,  2010,  2959,  2492,  3125,  1012,
         4339,  2041,  2169,  1997,  1996,  2825,  5537,  1997, 14590,  1012,
          102])"
1042,1,"['failures', 'successes', 'success', 'successful']", Negative binomial distribution,seg_39,"because it took brian six tries to get the fourth success, we know the last kick must have been a success. that leaves three successful kicks and two unsuccessful kicks (we label these as failures) that make up the first five attempts. there are ten possible sequences of these first five kicks, which are shown in figure 4.11. if brian achieved his fourth success (k = 4) on his sixth attempt (n = 6), then his order of successes and failures must be one of these ten possible sequences.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2138,  2009,  2165,  4422,  2416,  5363,  2000,  2131,  1996,
         2959,  3112,  1010,  2057,  2113,  1996,  2197,  5926,  2442,  2031,
         2042,  1037,  3112,  1012,  2008,  3727,  2093,  3144, 14590,  1998,
         2048,  7736, 14590,  1006,  2057,  3830,  2122,  2004, 15428,  1007,
         2008,  2191,  2039,  1996,  2034,  2274,  4740,  1012,  2045,  2024,
         2702,  2825, 10071,  1997,  2122,  2034,  2274, 14590,  1010,  2029,
         2024,  3491,  1999,  3275,  1018,  1012,  2340,  1012,  2065,  4422,
         4719,  2010,  2959,  3112,  1006,  1047,  1027,  1018,  1007,  2006,
         2010,  4369,  3535,  1006,  1050,  1027,  1020,  1007,  1010,  2059,
         2010,  2344,  1997, 14152,  1998, 15428,  2442,  2022,  2028,  1997,
         2122,  2702,  2825, 10071,  1012,   102])"
1043,1,"['probability', 'failures', 'probability of a success', 'successes', 'success']", Negative binomial distribution,seg_39,"each sequence in figure 4.11 has exactly two failures and four successes with the last attempt always being a success. if the probability of a success is p = 0.8, find the probability of the first sequence.35",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2169,  5537,  1999,  3275,  1018,  1012,  2340,  2038,  3599,
         2048, 15428,  1998,  2176, 14152,  2007,  1996,  2197,  3535,  2467,
         2108,  1037,  3112,  1012,  2065,  1996,  9723,  1997,  1037,  3112,
         2003,  1052,  1027,  1014,  1012,  1022,  1010,  2424,  1996,  9723,
         1997,  1996,  2034,  5537,  1012,  3486,   102])"
1044,1,['successful'], Negative binomial distribution,seg_39,figure 4.11: the ten possible sequences when the fourth successful kick is on the sixth attempt.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  3275,  1018,  1012,  2340,  1024,  1996,  2702,  2825, 10071,
         2043,  1996,  2959,  3144,  5926,  2003,  2006,  1996,  4369,  3535,
         1012,   102])"
1045,1,"['probability', 'successful']", Negative binomial distribution,seg_39,"if the probability brian kicks a 35 yard field goal is p = 0.8, what is the probability it takes brian exactly six tries to get his fourth successful kick? we can write this as",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2065,  1996,  9723,  4422, 14590,  1037,  3486,  4220,  2492,
         3125,  2003,  1052,  1027,  1014,  1012,  1022,  1010,  2054,  2003,
         1996,  9723,  2009,  3138,  4422,  3599,  2416,  5363,  2000,  2131,
         2010,  2959,  3144,  5926,  1029,  2057,  2064,  4339,  2023,  2004,
          102])"
1046,1,"['probability', 'disjoint']", Negative binomial distribution,seg_39,where the sequences are from figure 4.11. we can break down this last probability into the sum of ten disjoint possibilities:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2073,  1996, 10071,  2024,  2013,  3275,  1018,  1012,  2340,
         1012,  2057,  2064,  3338,  2091,  2023,  2197,  9723,  2046,  1996,
         7680,  1997,  2702,  4487,  2015,  5558, 18447, 12020,  1024,   102])"
1047,1,"['probability', 'total probability']", Negative binomial distribution,seg_39,"the probability of the first sequence was identified in guided practice 4.45 as 0.0164, and each of the other sequences have the same probability. since each of the ten sequence has the same probability, the total probability is ten times that of any individual sequence.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  9723,  1997,  1996,  2034,  5537,  2001,  4453,  1999,
         8546,  3218,  1018,  1012,  3429,  2004,  1014,  1012,  5890, 21084,
         1010,  1998,  2169,  1997,  1996,  2060, 10071,  2031,  1996,  2168,
         9723,  1012,  2144,  2169,  1997,  1996,  2702,  5537,  2038,  1996,
         2168,  9723,  1010,  1996,  2561,  9723,  2003,  2702,  2335,  2008,
         1997,  2151,  3265,  5537,  1012,   102])"
1048,1,"['probability', 'binomial', 'negative binomial']", Negative binomial distribution,seg_39,the way to compute this negative binomial probability is similar to how the binomial problems were solved in section 4.3. the probability is broken into two pieces:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  2126,  2000, 24134,  2023,  4997,  8026, 20936,  2389,
         9723,  2003,  2714,  2000,  2129,  1996,  8026, 20936,  2389,  3471,
         2020, 13332,  1999,  2930,  1018,  1012,  1017,  1012,  1996,  9723,
         2003,  3714,  2046,  2048,  4109,  1024,   102])"
1049,0,[], Negative binomial distribution,seg_39,p (it takes brian six tries to make four field goals),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 1052, 1006, 2009, 3138, 4422, 2416, 5363, 2000, 2191, 2176, 2492,
        3289, 1007,  102])"
1050,0,[], Negative binomial distribution,seg_39,= [number of possible sequences]× p (single sequence),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1027,  1031,  2193,  1997,  2825, 10071,  1033,  1095,  1052,
         1006,  2309,  5537,  1007,   102])"
1051,0,[], Negative binomial distribution,seg_39,"each part is examined separately, then we multiply to get the final result.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2169,  2112,  2003,  8920, 10329,  1010,  2059,  2057,  4800,
        22086,  2000,  2131,  1996,  2345,  2765,  1012,   102])"
1052,1,"['probability', 'failures', 'successes', 'case']", Negative binomial distribution,seg_39,we first identify the probability of a single sequence. one particular case is to first observe all the failures (n− k of them) followed by the k successes:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2057,  2034,  6709,  1996,  9723,  1997,  1037,  2309,  5537,
         1012,  2028,  3327,  2553,  2003,  2000,  2034, 11949,  2035,  1996,
        15428,  1006,  1050, 22543,  1047,  1997,  2068,  1007,  2628,  2011,
         1996,  1047, 14152,  1024,   102])"
1053,0,[], Negative binomial distribution,seg_39,p (single sequence),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 1052, 1006, 2309, 5537, 1007,  102])"
1054,1,"['successes', 'failures']", Negative binomial distribution,seg_39,= p (n− k failures and then k successes),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1027,  1052,  1006,  1050, 22543,  1047, 15428,  1998,  2059,
         1047, 14152,  1007,   102])"
1055,1,"['observation', 'observations', 'n choose k', 'coefficient', 'trials', 'successes', 'success', 'case']", Negative binomial distribution,seg_39,"we must also identify the number of sequences for the general case. above, ten sequences were identified where the fourth success came on the sixth attempt. these sequences were identified by fixing the last observation as a success and looking for all the ways to arrange the other observations. in other words, how many ways could we arrange k− 1 successes in n− 1 trials? this can be found using the n choose k coefficient but for n− 1 and k − 1 instead:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2057,  2442,  2036,  6709,  1996,  2193,  1997, 10071,  2005,
         1996,  2236,  2553,  1012,  2682,  1010,  2702, 10071,  2020,  4453,
         2073,  1996,  2959,  3112,  2234,  2006,  1996,  4369,  3535,  1012,
         2122, 10071,  2020,  4453,  2011, 15887,  1996,  2197,  8089,  2004,
         1037,  3112,  1998,  2559,  2005,  2035,  1996,  3971,  2000, 13621,
         1996,  2060,  9420,  1012,  1999,  2060,  2616,  1010,  2129,  2116,
         3971,  2071,  2057, 13621,  1047, 22543,  1015, 14152,  1999,  1050,
        22543,  1015,  7012,  1029,  2023,  2064,  2022,  2179,  2478,  1996,
         1050,  5454,  1047, 19064,  2021,  2005,  1050, 22543,  1015,  1998,
         1047,  1597,  1015,  2612,  1024,   102])"
1056,1,"['failures', 'trials', 'factorial', 'successes', 'factorial notation']", Negative binomial distribution,seg_39,"this is the number of different ways we can order k − 1 successes and n− k failures in n− 1 trials. if the factorial notation (the exclamation point) is unfamiliar, see page 150.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2023,  2003,  1996,  2193,  1997,  2367,  3971,  2057,  2064,
         2344,  1047,  1597,  1015, 14152,  1998,  1050, 22543,  1047, 15428,
         1999,  1050, 22543,  1015,  7012,  1012,  2065,  1996,  5387,  4818,
        14869,  1006,  1996,  4654, 20464,  8067,  3508,  2391,  1007,  2003,
        16261,  1010,  2156,  3931,  5018,  1012,   102])"
1057,1,"['negative binomial distribution', 'trial', 'probability', 'negative binomial', 'trials', 'independent', 'distribution', 'binomial', 'success', 'binomial distribution']", Negative binomial distribution,seg_39,"the negative binomial distribution describes the probability of observing the kth success on the nth trial, where all trials are independent:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  4997,  8026, 20936,  2389,  4353,  5577,  1996,  9723,
         1997, 14158,  1996,  1047,  2705,  3112,  2006,  1996, 23961,  2232,
         3979,  1010,  2073,  2035,  7012,  2024,  2981,  1024,   102])"
1058,1,"['trial', 'success']", Negative binomial distribution,seg_39,n− 1 p (the kth success on the nth trial) = (k − 1),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1050, 22543,  1015,  1052,  1006,  1996,  1047,  2705,  3112,
         2006,  1996, 23961,  2232,  3979,  1007,  1027,  1006,  1047,  1597,
         1015,  1007,   102])"
1059,1,"['probability', 'success', 'trial']", Negative binomial distribution,seg_39,the value p represents the probability that an individual trial is a success.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 1996, 3643, 1052, 5836, 1996, 9723, 2008, 2019, 3265, 3979, 2003,
        1037, 3112, 1012,  102])"
1060,1,"['negative binomial distribution', 'probability', 'successful', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", Negative binomial distribution,seg_39,show using the formula for the negative binomial distribution that the probability brian kicks his fourth successful field goal on the sixth attempt is 0.164.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2265,  2478,  1996,  5675,  2005,  1996,  4997,  8026, 20936,
         2389,  4353,  2008,  1996,  9723,  4422, 14590,  2010,  2959,  3144,
         2492,  3125,  2006,  1996,  4369,  3535,  2003,  1014,  1012, 17943,
         1012,   102])"
1061,1,"['probability', 'successes', 'success']", Negative binomial distribution,seg_39,"the probability of a single success is p = 0.8, the number of successes is k = 4, and the number of necessary attempts under this scenario is n = 6.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  9723,  1997,  1037,  2309,  3112,  2003,  1052,  1027,
         1014,  1012,  1022,  1010,  1996,  2193,  1997, 14152,  2003,  1047,
         1027,  1018,  1010,  1998,  1996,  2193,  1997,  4072,  4740,  2104,
         2023, 11967,  2003,  1050,  1027,  1020,  1012,   102])"
1062,1,"['negative binomial distribution', 'negative binomial', 'independent', 'distribution', 'binomial', 'binomial distribution']", Negative binomial distribution,seg_39,the negative binomial distribution requires that each kick attempt by brian is independent. do you think it is reasonable to suggest that each of brian’s kick attempts are independent?36,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  4997,  8026, 20936,  2389,  4353,  5942,  2008,  2169,
         5926,  3535,  2011,  4422,  2003,  2981,  1012,  2079,  2017,  2228,
         2009,  2003,  9608,  2000,  6592,  2008,  2169,  1997,  4422,  1521,
         1055,  5926,  4740,  2024,  2981,  1029,  4029,   102])"
1063,1,"['probability', 'independent']", Negative binomial distribution,seg_39,assume brian’s kick attempts are independent. what is the probability that brian will kick his fourth field goal within 5 attempts?37,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 7868, 4422, 1521, 1055, 5926, 4740, 2024, 2981, 1012, 2054, 2003,
        1996, 9723, 2008, 4422, 2097, 5926, 2010, 2959, 2492, 3125, 2306, 1019,
        4740, 1029, 4261,  102])"
1064,1,"['binomial', 'observation', 'negative binomial', 'trials', 'successes', 'success', 'case']", Negative binomial distribution,seg_39,"in the binomial case, we typically have a fixed number of trials and instead consider the number of successes. in the negative binomial case, we examine how many trials it takes to observe a fixed number of successes and require that the last observation be a success.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1999,  1996,  8026, 20936,  2389,  2553,  1010,  2057,  4050,
         2031,  1037,  4964,  2193,  1997,  7012,  1998,  2612,  5136,  1996,
         2193,  1997, 14152,  1012,  1999,  1996,  4997,  8026, 20936,  2389,
         2553,  1010,  2057, 11628,  2129,  2116,  7012,  2009,  3138,  2000,
        11949,  1037,  4964,  2193,  1997, 14152,  1998,  5478,  2008,  1996,
         2197,  8089,  2022,  1037,  3112,  1012,   102])"
1065,1,"['negative binomial', 'binomial', 'case']", Negative binomial distribution,seg_39,"on 70% of days, a hospital admits at least one heart attack patient. on 30% of the days, no heart attack patients are admitted. identify each case below as a binomial or negative binomial case, and compute the probability.38",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2006,  3963,  1003,  1997,  2420,  1010,  1037,  2902, 14456,
         2012,  2560,  2028,  2540,  2886,  5776,  1012,  2006,  2382,  1003,
         1997,  1996,  2420,  1010,  2053,  2540,  2886,  5022,  2024,  4914,
         1012,  6709,  2169,  2553,  2917,  2004,  1037,  8026, 20936,  2389,
         2030,  4997,  8026, 20936,  2389,  2553,  1010,  1998, 24134,  1996,
         9723,  1012,  4229,   102])"
1066,1,['probability'], Negative binomial distribution,seg_39,(a) what is the probability the hospital will admit a heart attack patient on exactly three days this,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 1006, 1037, 1007, 2054, 2003, 1996, 9723, 1996, 2902, 2097, 6449,
        1037, 2540, 2886, 5776, 2006, 3599, 2093, 2420, 2023,  102])"
1067,1,['probability'], Negative binomial distribution,seg_39,(b) what is the probability the second day with a heart attack patient will be the fourth day of the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 1006, 1038, 1007, 2054, 2003, 1996, 9723, 1996, 2117, 2154, 2007,
        1037, 2540, 2886, 5776, 2097, 2022, 1996, 2959, 2154, 1997, 1996,  102])"
1068,1,['probability'], Negative binomial distribution,seg_39,(c) what is the probability the fifth day of next month will be the first day with a heart attack,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([ 101, 1006, 1039, 1007, 2054, 2003, 1996, 9723, 1996, 3587, 2154, 1997,
        2279, 3204, 2097, 2022, 1996, 2034, 2154, 2007, 1037, 2540, 2886,  102])"
1069,1,"['average', 'histogram', 'distribution']", Poisson distribution,seg_41,"there are about 8 million individuals in new york city. how many individuals might we expect to be hospitalized for acute myocardial infarction (ami), i.e. a heart attack, each day? according to historical records, the average number is about 4.4 individuals. however, we would also like to know the approximate distribution of counts. what would a histogram of the number of ami occurrences each day look like if we recorded the daily counts over an entire year?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  2045,  2024,  2055,  1022,  2454,  3633,  1999,  2047,  2259,
         2103,  1012,  2129,  2116,  3633,  2453,  2057,  5987,  2000,  2022,
        24735,  2005, 11325,  2026, 24755, 25070,  1999, 14971,  7542,  1006,
        26445,  1007,  1010,  1045,  1012,  1041,  1012,  1037,  2540,  2886,
         1010,  2169,  2154,  1029,  2429,  2000,  3439,  2636,  1010,  1996,
         2779,  2193,  2003,  2055,  1018,  1012,  1018,  3633,  1012,  2174,
         1010,  2057,  2052,  2036,  2066,  2000,  2113,  1996, 15796,  4353,
         1997,  9294,  1012,  2054,  2052,  1037,  2010,  3406, 13113,  1997,
         1996,  2193,  1997, 26445, 27247,  2169,  2154,  2298,  2066,  2065,
         2057,  2680,  1996,  3679,  9294,  2058,  2019,  2972,  2095,  1029,
          102])"
1070,1,"['mean', 'deviation', 'skewed', 'unimodal', 'histogram', 'sample', 'standard deviation', 'sample standard deviation', 'standard', 'average', 'data', 'sample mean']", Poisson distribution,seg_41,"39 a histogram of the number of occurrences of ami on 365 days for nyc is shown in figure 4.12. the sample mean (4.38) is similar to the historical average of 4.4. the sample standard deviation is about 2, and the histogram indicates that about 70% of the data fall between 2.4 and 6.4. the distribution’s shape is unimodal and skewed to the right.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  4464,  1037,  2010,  3406, 13113,  1997,  1996,  2193,  1997,
        27247,  1997, 26445,  2006, 19342,  2420,  2005, 16392,  2003,  3491,
         1999,  3275,  1018,  1012,  2260,  1012,  1996,  7099,  2812,  1006,
         1018,  1012,  4229,  1007,  2003,  2714,  2000,  1996,  3439,  2779,
         1997,  1018,  1012,  1018,  1012,  1996,  7099,  3115, 24353,  2003,
         2055,  1016,  1010,  1998,  1996,  2010,  3406, 13113,  7127,  2008,
         2055,  3963,  1003,  1997,  1996,  2951,  2991,  2090,  1016,  1012,
         1018,  1998,  1020,  1012,  1018,  1012,  1996,  4353,  1521,  1055,
         4338,  2003,  4895, 16339,  9305,  1998, 15315,  7974,  2098,  2000,
         1996,  2157,  1012,   102])"
1071,1,['events'], Poisson distribution,seg_41,80 y 60 cneu 40 qer f 20 0 0 5 10 ami events (by day),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  3770,  1061,  3438, 27166, 13765,  2871,  1053,  2121,  1042,
         2322,  1014,  1014,  1019,  2184, 26445,  2824,  1006,  2011,  2154,
         1007,   102])"
1072,1,['histogram'], Poisson distribution,seg_41,figure 4.12: a histogram of the number of occurrences of ami on 365 separate days in nyc.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  3275,  1018,  1012,  2260,  1024,  1037,  2010,  3406, 13113,
         1997,  1996,  2193,  1997, 27247,  1997, 26445,  2006, 19342,  3584,
         2420,  1999, 16392,  1012,   102])"
1073,1,"['events', 'poisson', 'population', 'distribution', 'poisson distribution']", Poisson distribution,seg_41,"the poisson distribution is often useful for estimating the number of events in a large population over a unit of time. for instance, consider each of the following events:",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  1996, 13433, 24077,  4353,  2003,  2411,  6179,  2005,  9765,
        22835,  1996,  2193,  1997,  2824,  1999,  1037,  2312,  2313,  2058,
         1037,  3131,  1997,  2051,  1012,  2005,  6013,  1010,  5136,  2169,
         1997,  1996,  2206,  2824,  1024,   102])"
1074,0,[], Poisson distribution,seg_41,"• having a heart attack,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([13433, 24077,  4353])","tensor([ 101, 1528, 2383, 1037, 2540, 2886, 1010,  102])"
1075,0,[], Poisson distribution,seg_41,"• getting married, and",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([13433, 24077,  4353])","tensor([ 101, 1528, 2893, 2496, 1010, 1998,  102])"
1076,0,[], Poisson distribution,seg_41,• getting struck by lightning.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([13433, 24077,  4353])","tensor([ 101, 1528, 2893, 4930, 2011, 7407, 1012,  102])"
1077,1,"['events', 'poisson', 'population', 'distribution', 'poisson distribution', 'independent']", Poisson distribution,seg_41,"the poisson distribution helps us describe the number of such events that will occur in a day for a fixed population if the individuals within the population are independent. the poisson distribution could also be used over another unit of time, such as an hour or a week.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([13433, 24077,  4353])","tensor([  101,  1996, 13433, 24077,  4353,  7126,  2149,  6235,  1996,  2193,
         1997,  2107,  2824,  2008,  2097,  5258,  1999,  1037,  2154,  2005,
         1037,  4964,  2313,  2065,  1996,  3633,  2306,  1996,  2313,  2024,
         2981,  1012,  1996, 13433, 24077,  4353,  2071,  2036,  2022,  2109,
         2058,  2178,  3131,  1997,  2051,  1010,  2107,  2004,  2019,  3178,
         2030,  1037,  2733,  1012,   102])"
1078,1,"['parameter', 'rate', 'probability', 'events', 'histogram', 'poisson', 'population', 'distribution', 'poisson distribution', 'average']", Poisson distribution,seg_41,"the histogram in figure 4.12 approximates a poisson distribution with rate equal to 4.4. the rate for a poisson distribution is the average number of occurrences in a mostly-fixed population per unit of time. in example 4.50, the time unit is a day, the population is all new york city residents, and the historical rate is 4.4. the parameter in the poisson distribution is the rate – or how many events we expect to observe – and it is typically denoted by λ (the greek letter lambda) or µ. using the rate, we can describe the probability of observing exactly k events in a single unit of time.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  1996,  2010,  3406, 13113,  1999,  3275,  1018,  1012,  2260,
        15796,  2015,  1037, 13433, 24077,  4353,  2007,  3446,  5020,  2000,
         1018,  1012,  1018,  1012,  1996,  3446,  2005,  1037, 13433, 24077,
         4353,  2003,  1996,  2779,  2193,  1997, 27247,  1999,  1037,  3262,
         1011,  4964,  2313,  2566,  3131,  1997,  2051,  1012,  1999,  2742,
         1018,  1012,  2753,  1010,  1996,  2051,  3131,  2003,  1037,  2154,
         1010,  1996,  2313,  2003,  2035,  2047,  2259,  2103,  3901,  1010,
         1998,  1996,  3439,  3446,  2003,  1018,  1012,  1018,  1012,  1996,
        16381,  1999,  1996, 13433, 24077,  4353,  2003,  1996,  3446,  1516,
         2030,  2129,  2116,  2824,  2057,  5987,  2000, 11949,  1516,  1998,
         2009,  2003,  4050, 19537,  2011,  1165,  1006,  1996,  3306,  3661,
        23375,  1007,  2030,  1085,  1012,  2478,  1996,  3446,  1010,  2057,
         2064,  6235,  1996,  9723,  1997, 14158,  3599,  1047,  2824,  1999,
         1037,  2309,  3131,  1997,  2051,  1012,   102])"
1079,1,"['rate', 'events', 'poisson']", Poisson distribution,seg_41,suppose we are watching for events and the number of observed events follows a poisson distribution with rate λ. then,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  6814,  2057,  2024,  3666,  2005,  2824,  1998,  1996,  2193,
         1997,  5159,  2824,  4076,  1037, 13433, 24077,  4353,  2007,  3446,
         1165,  1012,  2059,   102])"
1080,1,['events'], Poisson distribution,seg_41,λke−λ p (observe k events) = k!,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  1165,  3489, 22543, 29727,  1052,  1006, 11949,  1047,  2824,
         1007,  1027,  1047,   999,   102])"
1081,1,"['mean', 'deviation', 'standard deviation', 'standard', 'distribution']", Poisson distribution,seg_41,"where k may take a value 0, 1, 2, and so on, and k! represents k-factorial, as described on page 150. the letter e ≈ 2.718 is the base of the natural logarithm. the mean and standard deviation of this distribution are λ and √λ, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  2073,  1047,  2089,  2202,  1037,  3643,  1014,  1010,  1015,
         1010,  1016,  1010,  1998,  2061,  2006,  1010,  1998,  1047,   999,
         5836,  1047,  1011,  5387,  4818,  1010,  2004,  2649,  2006,  3931,
         5018,  1012,  1996,  3661,  1041,  1606,  1016,  1012,  6390,  2620,
         2003,  1996,  2918,  1997,  1996,  3019,  8833,  8486,  2705,  2213,
         1012,  1996,  2812,  1998,  3115, 24353,  1997,  2023,  4353,  2024,
         1165,  1998,  1600, 29727,  1010,  4414,  1012,   102])"
1082,1,"['set', 'poisson', 'model', 'distribution', 'poisson distribution']", Poisson distribution,seg_41,"we will leave a rigorous set of conditions for the poisson distribution to a later course. however, we offer a few simple guidelines that can be used for an initial evaluation of whether the poisson model would be appropriate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  2057,  2097,  2681,  1037, 20001,  2275,  1997,  3785,  2005,
         1996, 13433, 24077,  4353,  2000,  1037,  2101,  2607,  1012,  2174,
         1010,  2057,  3749,  1037,  2261,  3722, 11594,  2008,  2064,  2022,
         2109,  2005,  2019,  3988,  9312,  1997,  3251,  1996, 13433, 24077,
         2944,  2052,  2022,  6413,  1012,   102])"
1083,1,"['events', 'random variable', 'poisson', 'population', 'random', 'distribution', 'poisson distribution', 'variable']", Poisson distribution,seg_41,"a random variable may follow a poisson distribution if we are looking for the number of events, the population that generates such events is large, and the events occur independently of each other.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  1037,  6721,  8023,  2089,  3582,  1037, 13433, 24077,  4353,
         2065,  2057,  2024,  2559,  2005,  1996,  2193,  1997,  2824,  1010,
         1996,  2313,  2008, 19421,  2107,  2824,  2003,  2312,  1010,  1998,
         1996,  2824,  5258,  9174,  1997,  2169,  2060,  1012,   102])"
1084,1,"['rate', 'linear', 'rates', 'events', 'generalized linear models', 'poisson', 'model', 'distribution', 'poisson distribution', 'variable', 'independent']", Poisson distribution,seg_41,"even when events are not really independent – for instance, saturdays and sundays are especially popular for weddings – a poisson model may sometimes still be reasonable if we allow it to have a different rate for different times. in the wedding example, the rate would be modeled as higher on weekends than on weekdays. the idea of modeling rates for a poisson distribution against a second variable such as the day of week forms the foundation of some more advanced methods that fall in the realm of generalized linear models. in chapters 8 and 9, we will discuss a foundation of linear models.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  2130,  2043,  2824,  2024,  2025,  2428,  2981,  1516,  2005,
         6013,  1010, 18860,  1998, 14803,  2024,  2926,  2759,  2005, 20429,
         1516,  1037, 13433, 24077,  2944,  2089,  2823,  2145,  2022,  9608,
         2065,  2057,  3499,  2009,  2000,  2031,  1037,  2367,  3446,  2005,
         2367,  2335,  1012,  1999,  1996,  5030,  2742,  1010,  1996,  3446,
         2052,  2022, 14440,  2004,  3020,  2006, 13499,  2084,  2006, 19759,
         1012,  1996,  2801,  1997, 11643,  6165,  2005,  1037, 13433, 24077,
         4353,  2114,  1037,  2117,  8023,  2107,  2004,  1996,  2154,  1997,
         2733,  3596,  1996,  3192,  1997,  2070,  2062,  3935,  4725,  2008,
         2991,  1999,  1996,  8391,  1997, 18960,  7399,  4275,  1012,  1999,
         9159,  1022,  1998,  1023,  1010,  2057,  2097,  6848,  1037,  3192,
         1997,  7399,  4275,  1012,   102])"
1085,1,"['variability', 'confidence interval', 'population', 'confidence', 'interval', 'estimate', 'sampling', 'statistics', 'statistical', 'point estimates', 'parameter', 'uncertainty', 'hypothesis', 'hypothesis testing', 'confidence intervals', 'range', 'estimates', 'sample', 'statistical inference', 'intervals']",Chapter  Foundations for inference,seg_43,"5.1 point estimates and sampling variability 5.2 confidence intervals for a proportion 5.3 hypothesis testing for a proportion statistical inference is primarily concerned with understanding and quantifying the uncertainty of parameter estimates. while the equations and details change depending on the setting, the foundations for inference are the same throughout all of statistics. we start with a familiar topic: the idea of using a sample proportion to estimate a population proportion. next, we create what’s called a confidence interval, which is a range of plausible values where we may find the true population value. finally, we introduce the hypothesis testing framework, which allows us to formally evaluate claims about the population, such as whether a survey provides strong evidence that a candidate has the support of a majority of the voting population. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3127, 10100,  2005, 28937])","tensor([  101,  1019,  1012,  1015,  2391, 10035,  1998, 16227, 28436,  1019,
         1012,  1016,  7023, 14025,  2005,  1037, 10817,  1019,  1012,  1017,
        10744,  5604,  2005,  1037, 10817,  7778, 28937,  2003,  3952,  4986,
         2007,  4824,  1998, 24110, 27351,  2075,  1996, 12503,  1997, 16381,
        10035,  1012,  2096,  1996, 11380,  1998,  4751,  2689,  5834,  2006,
         1996,  4292,  1010,  1996, 10100,  2005, 28937,  2024,  1996,  2168,
         2802,  2035,  1997,  6747,  1012,  2057,  2707,  2007,  1037,  5220,
         8476,  1024,  1996,  2801,  1997,  2478,  1037,  7099, 10817,  2000,
        10197,  1037,  2313, 10817,  1012,  2279,  1010,  2057,  3443,  2054,
         1521,  1055,  2170,  1037,  7023, 13483,  1010,  2029,  2003,  1037,
         2846,  1997, 24286,  5300,  2073,  2057,  2089,  2424,  1996,  2995,
         2313,  3643,  1012,  2633,  1010,  2057,  8970,  1996, 10744,  5604,
         7705,  1010,  2029,  4473,  2149,  2000,  6246, 16157,  4447,  2055,
         1996,  2313,  1010,  2107,  2004,  3251,  1037,  5002,  3640,  2844,
         3350,  2008,  1037,  4018,  2038,  1996,  2490,  1997,  1037,  3484,
         1997,  1996,  6830,  2313,  1012,  2005,  6876,  1010, 14816,  1010,
         1998,  2060,  4219,  1010,  3531,  3942,  7479,  1012,  2330, 18447,
         3217,  1012,  8917,  1013,  9808,   102])"
1086,1,"['estimate', 'population']", Point estimates and sampling variability,seg_45,"companies such as pew research frequently conduct polls as a way to understand the state of public opinion or knowledge on many topics, including politics, scientific understanding, brand recognition, and more. the ultimate goal in taking a poll is generally to use the responses to estimate the opinion or knowledge of the broader population.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3316,  2107,  2004, 29071,  2470,  4703,  6204, 14592,  2004,
         1037,  2126,  2000,  3305,  1996,  2110,  1997,  2270,  5448,  2030,
         3716,  2006,  2116,  7832,  1010,  2164,  4331,  1010,  4045,  4824,
         1010,  4435,  5038,  1010,  1998,  2062,  1012,  1996,  7209,  3125,
         1999,  2635,  1037,  8554,  2003,  3227,  2000,  2224,  1996, 10960,
         2000, 10197,  1996,  5448,  2030,  3716,  1997,  1996, 12368,  2313,
         1012,   102])"
1087,1,"['estimates', 'point estimates', 'error']", Point estimates and sampling variability,seg_45,5.1.1 point estimates and error,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1019,  1012,  1015,  1012,  1015,  2391, 10035,  1998,  7561,
          102])"
1088,1,"['parameter', 'parameter of interest', 'estimate', 'point estimate', 'response', 'population', 'sample', 'sampling', 'sampling error', 'bias', 'error']", Point estimates and sampling variability,seg_45,"suppose a poll suggested the us president’s approval rating is 45%. we would consider 45% to be a point estimate of the approval rating we might see if we collected responses from the entire population. this entire-population response proportion is generally referred to as the parameter of interest. when the parameter is a proportion, it is often denoted by p, and we often refer to the sample proportion as p̂ (pronounced p-hat1). unless we collect responses from every individual in the population, p remains unknown, and we use p̂ as our estimate of p. the difference we observe from the poll versus the parameter is called the error in the estimate. generally, the error consists of two aspects: sampling error and bias.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  6814,  1037,  8554,  4081,  1996,  2149,  2343,  1521,  1055,
         6226,  5790,  2003,  3429,  1003,  1012,  2057,  2052,  5136,  3429,
         1003,  2000,  2022,  1037,  2391, 10197,  1997,  1996,  6226,  5790,
         2057,  2453,  2156,  2065,  2057,  5067, 10960,  2013,  1996,  2972,
         2313,  1012,  2023,  2972,  1011,  2313,  3433, 10817,  2003,  3227,
         3615,  2000,  2004,  1996, 16381,  1997,  3037,  1012,  2043,  1996,
        16381,  2003,  1037, 10817,  1010,  2009,  2003,  2411, 19537,  2011,
         1052,  1010,  1998,  2057,  2411,  6523,  2000,  1996,  7099, 10817,
         2004,  1052,  1006,  8793,  1052,  1011,  6045,  2487,  1007,  1012,
         4983,  2057,  8145, 10960,  2013,  2296,  3265,  1999,  1996,  2313,
         1010,  1052,  3464,  4242,  1010,  1998,  2057,  2224,  1052,  2004,
         2256, 10197,  1997,  1052,  1012,  1996,  4489,  2057, 11949,  2013,
         1996,  8554,  6431,  1996, 16381,  2003,  2170,  1996,  7561,  1999,
         1996, 10197,  1012,  3227,  1010,  1996,  7561,  3774,  1997,  2048,
         5919,  1024, 16227,  7561,  1998, 13827,  1012,   102])"
1089,1,"['vary', 'uncertainty', 'estimate', 'sample’s size', 'sample', 'sampling', 'sample size', 'statistics', 'sampling error', 'sampling uncertainty', 'error']", Point estimates and sampling variability,seg_45,"sampling error, sometimes called sampling uncertainty, describes how much an estimate will tend to vary from one sample to the next. for instance, the estimate from one sample might be 1% too low while in another it may be 3% too high. much of statistics, including much of this book, is focused on understanding and quantifying sampling error, and we will find it useful to consider a sample’s size to help us quantify this error; the sample size is often represented by the letter n.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101, 16227,  7561,  1010,  2823,  2170, 16227, 12503,  1010,  5577,
         2129,  2172,  2019, 10197,  2097,  7166,  2000,  8137,  2013,  2028,
         7099,  2000,  1996,  2279,  1012,  2005,  6013,  1010,  1996, 10197,
         2013,  2028,  7099,  2453,  2022,  1015,  1003,  2205,  2659,  2096,
         1999,  2178,  2009,  2089,  2022,  1017,  1003,  2205,  2152,  1012,
         2172,  1997,  6747,  1010,  2164,  2172,  1997,  2023,  2338,  1010,
         2003,  4208,  2006,  4824,  1998, 24110, 27351,  2075, 16227,  7561,
         1010,  1998,  2057,  2097,  2424,  2009,  6179,  2000,  5136,  1037,
         7099,  1521,  1055,  2946,  2000,  2393,  2149, 24110, 27351,  2023,
         7561,  1025,  1996,  7099,  2946,  2003,  2411,  3421,  2011,  1996,
         3661,  1050,  1012,   102])"
1090,1,"['data', 'estimate', 'biased', 'level', 'population', 'data collection', 'bias']", Point estimates and sampling variability,seg_45,"bias describes a systematic tendency to overor under-estimate the true population value. for example, if we were taking a student poll asking about support for a new college stadium, we’d probably get a biased estimate of the stadium’s level of student support by wording the question as, do you support your school by supporting funding for the new stadium? we try to minimize bias through thoughtful data collection procedures, which were discussed in chapter 1 and are the topic of many other books.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101, 13827,  5577,  1037, 11778, 11765,  2000,  2058,  2953,  2104,
         1011, 10197,  1996,  2995,  2313,  3643,  1012,  2005,  2742,  1010,
         2065,  2057,  2020,  2635,  1037,  3076,  8554,  4851,  2055,  2490,
         2005,  1037,  2047,  2267,  3346,  1010,  2057,  1521,  1040,  2763,
         2131,  1037, 25352, 10197,  1997,  1996,  3346,  1521,  1055,  2504,
         1997,  3076,  2490,  2011,  2773,  2075,  1996,  3160,  2004,  1010,
         2079,  2017,  2490,  2115,  2082,  2011,  4637,  4804,  2005,  1996,
         2047,  3346,  1029,  2057,  3046,  2000, 18478, 13827,  2083, 16465,
         2951,  3074,  8853,  1010,  2029,  2020,  6936,  1999,  3127,  1015,
         1998,  2024,  1996,  8476,  1997,  2116,  2060,  2808,  1012,   102])"
1091,1,"['variability', 'estimate', 'point estimate']", Point estimates and sampling variability,seg_45,5.1.2 understanding the variability of a point estimate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1019,  1012,  1015,  1012,  1016,  4824,  1996, 28436,  1997,
         1037,  2391, 10197,   102])"
1092,1,"['parameter', 'estimate', 'sample']", Point estimates and sampling variability,seg_45,"suppose the proportion of american adults who support the expansion of solar energy is p = 0.88, which is our parameter of interest.2 if we were to take a poll of 1000 american adults on this topic, the estimate would not be perfect, but how close might we expect the sample proportion in the poll would be to 88%? we want to understand, how does the sample proportion p̂ behave when",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  6814,  1996, 10817,  1997,  2137,  6001,  2040,  2490,  1996,
         4935,  1997,  5943,  2943,  2003,  1052,  1027,  1014,  1012,  6070,
         1010,  2029,  2003,  2256, 16381,  1997,  3037,  1012,  1016,  2065,
         2057,  2020,  2000,  2202,  1037,  8554,  1997,  6694,  2137,  6001,
         2006,  2023,  8476,  1010,  1996, 10197,  2052,  2025,  2022,  3819,
         1010,  2021,  2129,  2485,  2453,  2057,  5987,  1996,  7099, 10817,
         1999,  1996,  8554,  2052,  2022,  2000,  6070,  1003,  1029,  2057,
         2215,  2000,  3305,  1010,  2129,  2515,  1996,  7099, 10817,  1052,
        16582,  2043,   102])"
1093,1,"['simulation', 'random sample', 'sample', 'random', 'simple random sample', 'population']", Point estimates and sampling variability,seg_45,"3 the true population proportion is 0.88. let’s find out! we can simulate responses we would get from a simple random sample of 1000 american adults, which is only possible because we know the actual support for expanding solar energy is 0.88. here’s how we might go about constructing such a simulation:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1017,  1996,  2995,  2313, 10817,  2003,  1014,  1012,  6070,
         1012,  2292,  1521,  1055,  2424,  2041,   999,  2057,  2064, 26633,
        10960,  2057,  2052,  2131,  2013,  1037,  3722,  6721,  7099,  1997,
         6694,  2137,  6001,  1010,  2029,  2003,  2069,  2825,  2138,  2057,
         2113,  1996,  5025,  2490,  2005,  9186,  5943,  2943,  2003,  1014,
         1012,  6070,  1012,  2182,  1521,  1055,  2129,  2057,  2453,  2175,
         2055, 15696,  2107,  1037, 12504,  1024,   102])"
1094,0,[], Point estimates and sampling variability,seg_45,"1. there were about 250 million american adults in 2018. on 250 million pieces of paper, write “support” on 88% of them and “not” on the other 12%.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 1015, 1012, 2045, 2020, 2055, 5539, 2454, 2137, 6001, 1999, 2760,
        1012, 2006, 5539, 2454, 4109, 1997, 3259, 1010, 4339, 1523, 2490, 1524,
        2006, 6070, 1003, 1997, 2068, 1998, 1523, 2025, 1524, 2006, 1996, 2060,
        2260, 1003, 1012,  102])"
1095,1,['sample'], Point estimates and sampling variability,seg_45,2. mix up the pieces of paper and pull out 1000 pieces to represent our sample of 1000 american adults.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 1016, 1012, 4666, 2039, 1996, 4109, 1997, 3259, 1998, 4139, 2041,
        6694, 4109, 2000, 5050, 2256, 7099, 1997, 6694, 2137, 6001, 1012,  102])"
1096,1,['sample'], Point estimates and sampling variability,seg_45,3. compute the fraction of the sample that say “support”.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1017,  1012, 24134,  1996, 12884,  1997,  1996,  7099,  2008,
         2360,  1523,  2490,  1524,  1012,   102])"
1097,1,['simulation'], Point estimates and sampling variability,seg_45,"any volunteers to conduct this simulation? probably not. running this simulation with 250 million pieces of paper would be time-consuming and very costly, but we can simulate it using computer",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2151,  7314,  2000,  6204,  2023, 12504,  1029,  2763,  2025,
         1012,  2770,  2023, 12504,  2007,  5539,  2454,  4109,  1997,  3259,
         2052,  2022,  2051,  1011, 15077,  1998,  2200, 17047,  1010,  2021,
         2057,  2064, 26633,  2009,  2478,  3274,   102])"
1098,1,"['simulation', 'estimate', 'point estimate', 'sample', 'population', 'error', 'case']", Point estimates and sampling variability,seg_45,"code; we’ve written a short program in figure 5.1 in case you are curious what the computer code looks like. in this simulation, the sample gave a point estimate of p̂1 = 0.894. we know the population proportion for the simulation was p = 0.88, so we know the estimate had an error of 0.894− 0.88 = +0.014.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3642,  1025,  2057,  1521,  2310,  2517,  1037,  2460,  2565,
         1999,  3275,  1019,  1012,  1015,  1999,  2553,  2017,  2024,  8025,
         2054,  1996,  3274,  3642,  3504,  2066,  1012,  1999,  2023, 12504,
         1010,  1996,  7099,  2435,  1037,  2391, 10197,  1997,  1052,  2487,
         1027,  1014,  1012,  6486,  2549,  1012,  2057,  2113,  1996,  2313,
        10817,  2005,  1996, 12504,  2001,  1052,  1027,  1014,  1012,  6070,
         1010,  2061,  2057,  2113,  1996, 10197,  2018,  2019,  7561,  1997,
         1014,  1012,  6486,  2549, 22543,  1014,  1012,  6070,  1027,  1009,
         1014,  1012,  5890,  2549,  1012,   102])"
1099,1,['set'], Point estimates and sampling variability,seg_45,"# 1. create a set of 250 million entries, where 88% of them are ""support"" # and 12% are ""not"". pop size <- 250000000 possible entries <- c(rep(""support"", 0.88 * pop size), rep(""not"", 0.12 * pop size))",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1001,  1015,  1012,  3443,  1037,  2275,  1997,  5539,  2454,
        10445,  1010,  2073,  6070,  1003,  1997,  2068,  2024,  1000,  2490,
         1000,  1001,  1998,  2260,  1003,  2024,  1000,  2025,  1000,  1012,
         3769,  2946,  1026,  1011, 25108,  8889,  8889,  2692,  2825, 10445,
         1026,  1011,  1039,  1006, 16360,  1006,  1000,  2490,  1000,  1010,
         1014,  1012,  6070,  1008,  3769,  2946,  1007,  1010, 16360,  1006,
         1000,  2025,  1000,  1010,  1014,  1012,  2260,  1008,  3769,  2946,
         1007,  1007,   102])"
1100,1,"['sample', 'without replacement', 'replacement']", Point estimates and sampling variability,seg_45,"# 2. sample 1000 entries without replacement. sampled entries <- sample(possible entries, size = 1000)",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1001,  1016,  1012,  7099,  6694, 10445,  2302,  6110,  1012,
        18925, 10445,  1026,  1011,  7099,  1006,  2825, 10445,  1010,  2946,
         1027,  6694,  1007,   102])"
1101,1,"['sample', 'sample size']", Point estimates and sampling variability,seg_45,"# 3. compute p-hat: count the number that are ""support"", then divide by # the sample size. sum(sampled entries == ""support"") / 1000",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1001,  1017,  1012, 24134,  1052,  1011,  6045,  1024,  4175,
         1996,  2193,  2008,  2024,  1000,  2490,  1000,  1010,  2059, 11443,
         2011,  1001,  1996,  7099,  2946,  1012,  7680,  1006, 18925, 10445,
         1027,  1027,  1000,  2490,  1000,  1007,  1013,  6694,   102])"
1102,1,['simulation'], Point estimates and sampling variability,seg_45,"figure 5.1: for those curious, this is code for a single p̂ simulation using the statistical software called r. each line that starts with # is a code comment, which is used to describe in regular language what the code is doing. we’ve provided software labs in r at openintro.org/stat/labs for anyone interested in learning more.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3275,  1019,  1012,  1015,  1024,  2005,  2216,  8025,  1010,
         2023,  2003,  3642,  2005,  1037,  2309,  1052, 12504,  2478,  1996,
         7778,  4007,  2170,  1054,  1012,  2169,  2240,  2008,  4627,  2007,
         1001,  2003,  1037,  3642,  7615,  1010,  2029,  2003,  2109,  2000,
         6235,  1999,  3180,  2653,  2054,  1996,  3642,  2003,  2725,  1012,
         2057,  1521,  2310,  3024,  4007, 13625,  1999,  1054,  2012,  2330,
        18447,  3217,  1012,  8917,  1013, 28093,  1013, 13625,  2005,  3087,
         4699,  1999,  4083,  2062,  1012,   102])"
1103,1,"['distribution', 'simulation', 'estimate', 'estimates', 'histogram', 'simulations', 'sample', 'results', 'sampling', 'sampling distribution', 'error']", Point estimates and sampling variability,seg_45,"one simulation isn’t enough to get a great sense of the distribution of estimates we might expect in the simulation, so we should run more simulations. in a second simulation, we get p̂2 = 0.885, which has an error of +0.005. in another, p̂3 = 0.878 for an error of -0.002. and in another, an estimate of p̂4 = 0.859 with an error of -0.021. with the help of a computer, we’ve run the simulation 10,000 times and created a histogram of the results from all 10,000 simulations in figure 5.2. this distribution of sample proportions is called a sampling distribution. we can characterize this sampling distribution as follows:",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2028, 12504,  3475,  1521,  1056,  2438,  2000,  2131,  1037,
         2307,  3168,  1997,  1996,  4353,  1997, 10035,  2057,  2453,  5987,
         1999,  1996, 12504,  1010,  2061,  2057,  2323,  2448,  2062, 24710,
         1012,  1999,  1037,  2117, 12504,  1010,  2057,  2131,  1052,  2475,
         1027,  1014,  1012,  6070,  2629,  1010,  2029,  2038,  2019,  7561,
         1997,  1009,  1014,  1012,  4002,  2629,  1012,  1999,  2178,  1010,
         1052,  2509,  1027,  1014,  1012,  6584,  2620,  2005,  2019,  7561,
         1997,  1011,  1014,  1012,  4002,  2475,  1012,  1998,  1999,  2178,
         1010,  2019, 10197,  1997,  1052,  2549,  1027,  1014,  1012,  5594,
         2683,  2007,  2019,  7561,  1997,  1011,  1014,  1012,  6185,  2487,
         1012,  2007,  1996,  2393,  1997,  1037,  3274,  1010,  2057,  1521,
         2310,  2448,  1996, 12504,  2184,  1010,  2199,  2335,  1998,  2580,
         1037,  2010,  3406, 13113,  1997,  1996,  3463,  2013,  2035,  2184,
         1010,  2199, 24710,  1999,  3275,  1019,  1012,  1016,  1012,  2023,
         4353,  1997,  7099, 19173,  2003,  2170,  1037, 16227,  4353,  1012,
         2057,  2064,  2839,  4697,  2023, 16227,  4353,  2004,  4076,  1024,
          102])"
1104,1,"['parameter', 'distribution']", Point estimates and sampling variability,seg_45,"center. the center of the distribution is x̄p̂ = 0.880, which is the same as the parameter. notice",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2415,  1012,  1996,  2415,  1997,  1996,  4353,  2003, 26726,
         1027,  1014,  1012, 26839,  1010,  2029,  2003,  1996,  2168,  2004,
         1996, 16381,  1012,  5060,   102])"
1105,1,"['simulation', 'random sample', 'population', 'sample', 'random', 'sampling', 'simple random sample', 'bias']", Point estimates and sampling variability,seg_45,"that the simulation mimicked a simple random sample of the population, which is a straightforward sampling strategy that helps avoid sampling bias.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2008,  1996, 12504, 23150,  8126,  1037,  3722,  6721,  7099,
         1997,  1996,  2313,  1010,  2029,  2003,  1037, 19647, 16227,  5656,
         2008,  7126,  4468, 16227, 13827,  1012,   102])"
1106,1,"['deviation', 'standard deviation', 'standard', 'distribution']", Point estimates and sampling variability,seg_45,spread. the standard deviation of the distribution is sp̂ = 0.010. when we’re talking about a,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3659,  1012,  1996,  3115, 24353,  1997,  1996,  4353,  2003,
        11867,  1027,  1014,  1012,  5890,  2692,  1012,  2043,  2057,  1521,
         2128,  3331,  2055,  1037,   102])"
1107,1,"['variability', 'deviation', 'associated', 'estimate', 'point estimate', 'sample', 'standard deviation', 'standard', 'distribution', 'standard error', 'error']", Point estimates and sampling variability,seg_45,"sampling distribution or the variability of a point estimate, we typically use the term standard error rather than standard deviation, and the notation sep̂ is used for the standard error associated with the sample proportion.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101, 16227,  4353,  2030,  1996, 28436,  1997,  1037,  2391, 10197,
         1010,  2057,  4050,  2224,  1996,  2744,  3115,  7561,  2738,  2084,
         3115, 24353,  1010,  1998,  1996, 14869, 19802,  2003,  2109,  2005,
         1996,  3115,  7561,  3378,  2007,  1996,  7099, 10817,  1012,   102])"
1108,1,"['normal', 'normal distribution', 'symmetric', 'distribution']", Point estimates and sampling variability,seg_45,"shape. the distribution is symmetric and bell-shaped, and it resembles a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  4338,  1012,  1996,  4353,  2003, 19490,  1998,  4330,  1011,
         5044,  1010,  1998,  2009, 12950,  1037,  3671,  4353,  1012,   102])"
1109,1,"['normal distribution', 'observation', 'estimate', 'histogram', 'population', 'sample', 'normal', 'sample size', 'distribution']", Point estimates and sampling variability,seg_45,"these findings are encouraging! when the population proportion is p = 0.88 and the sample size is n = 1000, the sample proportion p̂ tends to give a pretty good estimate of the population proportion. we also have the interesting observation that the histogram resembles a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2122,  9556,  2024, 11434,   999,  2043,  1996,  2313, 10817,
         2003,  1052,  1027,  1014,  1012,  6070,  1998,  1996,  7099,  2946,
         2003,  1050,  1027,  6694,  1010,  1996,  7099, 10817,  1052, 12102,
         2000,  2507,  1037,  3492,  2204, 10197,  1997,  1996,  2313, 10817,
         1012,  2057,  2036,  2031,  1996,  5875,  8089,  2008,  1996,  2010,
         3406, 13113, 12950,  1037,  3671,  4353,  1012,   102])"
1110,1,"['distribution', 'estimate', 'estimates', 'point estimate', 'sampling', 'point estimates', 'sampling distribution']", Point estimates and sampling variability,seg_45,"in real-world applications, we never actually observe the sampling distribution, yet it is useful to always think of a point estimate as coming from such a hypothetical distribution. understanding the sampling distribution will help us characterize and make sense of the point estimates that we do observe.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1999,  2613,  1011,  2088,  5097,  1010,  2057,  2196,  2941,
        11949,  1996, 16227,  4353,  1010,  2664,  2009,  2003,  6179,  2000,
         2467,  2228,  1997,  1037,  2391, 10197,  2004,  2746,  2013,  2107,
         1037, 25613,  4353,  1012,  4824,  1996, 16227,  4353,  2097,  2393,
         2149,  2839,  4697,  1998,  2191,  3168,  1997,  1996,  2391, 10035,
         2008,  2057,  2079, 11949,  1012,   102])"
1111,1,"['sample', 'sample size', 'standard', 'standard error', 'error']", Point estimates and sampling variability,seg_45,"if we used a much smaller sample size of n = 50, would you guess that the standard error for p̂ would be larger or smaller than when we used n = 1000?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 2065, 2057, 2109, 1037, 2172, 3760, 7099, 2946, 1997, 1050, 1027,
        2753, 1010, 2052, 2017, 3984, 2008, 1996, 3115, 7561, 2005, 1052, 2052,
        2022, 3469, 2030, 3760, 2084, 2043, 2057, 2109, 1050, 1027, 6694, 1029,
         102])"
1112,1,"['data', 'error']", Point estimates and sampling variability,seg_45,"intuitively, it seems like more data is better than less data, and generally that is correct! the typical error when p = 0.88 and n = 50 would be larger than the error we would expect when n = 1000.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101, 29202,  2135,  1010,  2009,  3849,  2066,  2062,  2951,  2003,
         2488,  2084,  2625,  2951,  1010,  1998,  3227,  2008,  2003,  6149,
          999,  1996,  5171,  7561,  2043,  1052,  1027,  1014,  1012,  6070,
         1998,  1050,  1027,  2753,  2052,  2022,  3469,  2084,  1996,  7561,
         2057,  2052,  5987,  2043,  1050,  1027,  6694,  1012,   102])"
1113,1,"['sample', 'estimate', 'point estimate']", Point estimates and sampling variability,seg_45,example 5.1 highlights an important property we will see again and again: a bigger sample tends to provide a more precise point estimate than a smaller sample.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2742,  1019,  1012,  1015, 11637,  2019,  2590,  3200,  2057,
         2097,  2156,  2153,  1998,  2153,  1024,  1037,  7046,  7099, 12102,
         2000,  3073,  1037,  2062, 10480,  2391, 10197,  2084,  1037,  3760,
         7099,  1012,   102])"
1114,1,['sample'], Point estimates and sampling variability,seg_45,750 y 500 cne uqerf 250 0 0.84 0.86 0.88 0.90 0.92 sample proportions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  9683,  1061,  3156, 27166,  2063,  1057,  4160,  2121,  2546,
         5539,  1014,  1014,  1012,  6391,  1014,  1012,  6564,  1014,  1012,
         6070,  1014,  1012,  3938,  1014,  1012,  6227,  7099, 19173,   102])"
1115,1,"['histogram', 'sample', 'sample size', 'population']", Point estimates and sampling variability,seg_45,"figure 5.2: a histogram of 10,000 sample proportions, where each sample is taken from a population where the population proportion is 0.88 and the sample size is n = 1000.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3275,  1019,  1012,  1016,  1024,  1037,  2010,  3406, 13113,
         1997,  2184,  1010,  2199,  7099, 19173,  1010,  2073,  2169,  7099,
         2003,  2579,  2013,  1037,  2313,  2073,  1996,  2313, 10817,  2003,
         1014,  1012,  6070,  1998,  1996,  7099,  2946,  2003,  1050,  1027,
         6694,  1012,   102])"
1116,1,"['central limit theorem', 'limit']", Point estimates and sampling variability,seg_45,5.1.3 central limit theorem,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 1019, 1012, 1015, 1012, 1017, 2430, 5787, 9872,  102])"
1117,1,"['normal distribution', 'normal', 'limit', 'distribution', 'central limit theorem']", Point estimates and sampling variability,seg_45,the distribution in figure 5.2 looks an awful lot like a normal distribution. that is no anomaly; it is the result of a general principle called the central limit theorem.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996,  4353,  1999,  3275,  1019,  1012,  1016,  3504,  2019,
         9643,  2843,  2066,  1037,  3671,  4353,  1012,  2008,  2003,  2053,
        28685,  1025,  2009,  2003,  1996,  2765,  1997,  1037,  2236,  6958,
         2170,  1996,  2430,  5787,  9872,  1012,   102])"
1118,1,"['mean', 'normal distribution', 'observations', 'sample', 'normal', 'sample size', 'standard', 'distribution', 'standard error', 'error', 'independent']", Point estimates and sampling variability,seg_45,"when observations are independent and the sample size is sufficiently large, the sample proportion p̂ will tend to follow a normal distribution with the following mean and standard error:",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2043,  9420,  2024,  2981,  1998,  1996,  7099,  2946,  2003,
        12949,  2312,  1010,  1996,  7099, 10817,  1052,  2097,  7166,  2000,
         3582,  1037,  3671,  4353,  2007,  1996,  2206,  2812,  1998,  3115,
         7561,  1024,   102])"
1119,1,"['sample', 'sample size', 'limit', 'condition', 'central limit theorem']", Point estimates and sampling variability,seg_45,"in order for the central limit theorem to hold, the sample size is typically considered sufficiently large when np ≥ 10 and n(1− p) ≥ 10, which is called the success-failure condition.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1999,  2344,  2005,  1996,  2430,  5787,  9872,  2000,  2907,
         1010,  1996,  7099,  2946,  2003,  4050,  2641, 12949,  2312,  2043,
        27937,  1609,  2184,  1998,  1050,  1006,  1015, 22543,  1052,  1007,
         1609,  2184,  1010,  2029,  2003,  2170,  1996,  3112,  1011,  4945,
         4650,  1012,   102])"
1120,1,"['observations', 'sample', 'sample size', 'limit', 'statistics', 'central limit theorem', 'independent']", Point estimates and sampling variability,seg_45,"the central limit theorem is incredibly important, and it provides a foundation for much of statistics. as we begin applying the central limit theorem, be mindful of the two technical conditions: the observations must be independent, and the sample size must be sufficiently large such that np ≥ 10 and n(1− p) ≥ 10.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996,  2430,  5787,  9872,  2003, 11757,  2590,  1010,  1998,
         2009,  3640,  1037,  3192,  2005,  2172,  1997,  6747,  1012,  2004,
         2057,  4088, 11243,  1996,  2430,  5787,  9872,  1010,  2022,  2568,
         3993,  1997,  1996,  2048,  4087,  3785,  1024,  1996,  9420,  2442,
         2022,  2981,  1010,  1998,  1996,  7099,  2946,  2442,  2022, 12949,
         2312,  2107,  2008, 27937,  1609,  2184,  1998,  1050,  1006,  1015,
        22543,  1052,  1007,  1609,  2184,  1012,   102])"
1121,1,"['mean', 'estimated', 'simulated', 'central limit theorem', 'sampling', 'normal', 'standard', 'distribution', 'limit', 'standard error', 'sampling distribution', 'data', 'error']", Point estimates and sampling variability,seg_45,earlier we estimated the mean and standard error of p̂ using simulated data when p = 0.88 and n = 1000. confirm that the central limit theorem applies and the sampling distribution is approximately normal.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3041,  2057,  4358,  1996,  2812,  1998,  3115,  7561,  1997,
         1052,  2478, 23599,  2951,  2043,  1052,  1027,  1014,  1012,  6070,
         1998,  1050,  1027,  6694,  1012, 12210,  2008,  1996,  2430,  5787,
         9872, 12033,  1998,  1996, 16227,  4353,  2003,  3155,  3671,  1012,
          102])"
1122,1,"['sample', 'observations']", Point estimates and sampling variability,seg_45,"independence. there are n = 1000 observations for each sample proportion p̂, and each of those",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  4336,  1012,  2045,  2024,  1050,  1027,  6694,  9420,  2005,
         2169,  7099, 10817,  1052,  1010,  1998,  2169,  1997,  2216,   102])"
1123,1,"['observations', 'random sample', 'sample', 'random', 'simple random sample', 'independent']", Point estimates and sampling variability,seg_45,observations are independent draws. the most common way for observations to be considered independent is if they are from a simple random sample.,tensor(1),"tensor([0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 9420, 2024, 2981, 9891, 1012, 1996, 2087, 2691, 2126, 2005, 9420,
        2000, 2022, 2641, 2981, 2003, 2065, 2027, 2024, 2013, 1037, 3722, 6721,
        7099, 1012,  102])"
1124,1,"['sample', 'sample size', 'condition']", Point estimates and sampling variability,seg_45,success-failure condition. we can confirm the sample size is sufficiently large by checking the,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3112,  1011,  4945,  4650,  1012,  2057,  2064, 12210,  1996,
         7099,  2946,  2003, 12949,  2312,  2011,  9361,  1996,   102])"
1125,1,['condition'], Point estimates and sampling variability,seg_45,success-failure condition and confirming the two calculated values are greater than 10:,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3112,  1011,  4945,  4650,  1998, 19195,  1996,  2048, 10174,
         5300,  2024,  3618,  2084,  2184,  1024,   102])"
1126,1,"['normal distribution', 'independence', 'normal', 'limit', 'distribution', 'model', 'central limit theorem']", Point estimates and sampling variability,seg_45,"the independence and success-failure conditions are both satisfied, so the central limit theorem applies, and it’s reasonable to model p̂ using a normal distribution.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996,  4336,  1998,  3112,  1011,  4945,  3785,  2024,  2119,
         8510,  1010,  2061,  1996,  2430,  5787,  9872, 12033,  1010,  1998,
         2009,  1521,  1055,  9608,  2000,  2944,  1052,  2478,  1037,  3671,
         4353,  1012,   102])"
1127,1,"['treatment', 'random', 'treatment groups', 'experiment', 'independent']", Point estimates and sampling variability,seg_45,subjects in an experiment are considered independent if they undergo random assignment to the treatment groups.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  5739,  1999,  2019,  7551,  2024,  2641,  2981,  2065,  2027,
        13595,  6721,  8775,  2000,  1996,  3949,  2967,  1012,   102])"
1128,1,"['observations', 'random sample', 'sample', 'random', 'simple random sample', 'independent']", Point estimates and sampling variability,seg_45,"if the observations are from a simple random sample, then they are independent.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 2065, 1996, 9420, 2024, 2013, 1037, 3722, 6721, 7099, 1010, 2059,
        2027, 2024, 2981, 1012,  102])"
1129,1,"['random process', 'independence', 'sample', 'random', 'process', 'error', 'case']", Point estimates and sampling variability,seg_45,"if a sample is from a seemingly random process, e.g. an occasional error on an assembly line, checking independence is more difficult. in this case, use your best judgement.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2065,  1037,  7099,  2003,  2013,  1037,  9428,  6721,  2832,
         1010,  1041,  1012,  1043,  1012,  2019,  8138,  7561,  2006,  2019,
         3320,  2240,  1010,  9361,  4336,  2003,  2062,  3697,  1012,  1999,
         2023,  2553,  1010,  2224,  2115,  2190, 16646,  1012,   102])"
1130,1,"['population', 'sample', 'sampling', 'condition', 'samples', 'sampling error', 'error']", Point estimates and sampling variability,seg_45,"an additional condition that is sometimes added for samples from a population is that they are no larger than 10% of the population. when the sample exceeds 10% of the population size, the methods we discuss tend to overestimate the sampling error slightly versus what we would get using more advanced methods.4 this is very rarely an issue, and when it is an issue, our methods tend to be conservative, so we consider this additional check as optional.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2019,  3176,  4650,  2008,  2003,  2823,  2794,  2005,  8168,
         2013,  1037,  2313,  2003,  2008,  2027,  2024,  2053,  3469,  2084,
         2184,  1003,  1997,  1996,  2313,  1012,  2043,  1996,  7099, 23651,
         2184,  1003,  1997,  1996,  2313,  2946,  1010,  1996,  4725,  2057,
         6848,  7166,  2000,  2058,  4355, 21499,  1996, 16227,  7561,  3621,
         6431,  2054,  2057,  2052,  2131,  2478,  2062,  3935,  4725,  1012,
         1018,  2023,  2003,  2200,  6524,  2019,  3277,  1010,  1998,  2043,
         2009,  2003,  2019,  3277,  1010,  2256,  4725,  7166,  2000,  2022,
         4603,  1010,  2061,  2057,  5136,  2023,  3176,  4638,  2004, 11887,
         1012,   102])"
1131,1,"['mean', 'central limit theorem', 'limit', 'standard', 'standard error', 'error']", Point estimates and sampling variability,seg_45,"compute the theoretical mean and standard error of p̂ when p = 0.88 and n = 1000, according to the central limit theorem.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101, 24134,  1996,  9373,  2812,  1998,  3115,  7561,  1997,  1052,
         2043,  1052,  1027,  1014,  1012,  6070,  1998,  1050,  1027,  6694,
         1010,  2429,  2000,  1996,  2430,  5787,  9872,  1012,   102])"
1132,1,"['mean', 'population']", Point estimates and sampling variability,seg_45,the mean of the p̂’s is simply the population proportion: µp̂ = 0.88.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996,  2812,  1997,  1996,  1052,  1521,  1055,  2003,  3432,
         1996,  2313, 10817,  1024,  1085,  2361,  1027,  1014,  1012,  6070,
         1012,   102])"
1133,1,"['standard error', 'standard', 'error']", Point estimates and sampling variability,seg_45,the calculation of the standard error of p̂ uses the following formula:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996, 17208,  1997,  1996,  3115,  7561,  1997,  1052,  3594,
         1996,  2206,  5675,  1024,   102])"
1134,1,"['population', 'sample', 'distribution']", Point estimates and sampling variability,seg_45,"estimate how frequently the sample proportion p̂ should be within 0.02 (2%) of the population value, p = 0.88. based on examples 5.2 and 5.3, we know that the distribution is approximately n(µp̂ = 0.88, sep̂ = 0.010).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101, 10197,  2129,  4703,  1996,  7099, 10817,  1052,  2323,  2022,
         2306,  1014,  1012,  6185,  1006,  1016,  1003,  1007,  1997,  1996,
         2313,  3643,  1010,  1052,  1027,  1014,  1012,  6070,  1012,  2241,
         2006,  4973,  1019,  1012,  1016,  1998,  1019,  1012,  1017,  1010,
         2057,  2113,  2008,  1996,  4353,  2003,  3155,  1050,  1006,  1085,
         2361,  1027,  1014,  1012,  6070,  1010, 19802,  1027,  1014,  1012,
         5890,  2692,  1007,  1012,   102])"
1135,1,"['normal', 'normal distribution', 'distribution']", Point estimates and sampling variability,seg_45,"after so much practice in section 4.1, this normal distribution example will hopefully feel familiar! we would like to understand the fraction of p̂’s between 0.86 and 0.90:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2044,  2061,  2172,  3218,  1999,  2930,  1018,  1012,  1015,
         1010,  2023,  3671,  4353,  2742,  2097, 11504,  2514,  5220,   999,
         2057,  2052,  2066,  2000,  3305,  1996, 12884,  1997,  1052,  1521,
         1055,  2090,  1014,  1012,  6564,  1998,  1014,  1012,  3938,  1024,
          102])"
1136,0,[], Point estimates and sampling variability,seg_45,"with µp̂ = 0.88 and sep̂ = 0.010, we can compute the z-score for both the left and right cutoffs:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2007,  1085,  2361,  1027,  1014,  1012,  6070,  1998, 19802,
         1027,  1014,  1012,  5890,  2692,  1010,  2057,  2064, 24134,  1996,
         1062,  1011,  3556,  2005,  2119,  1996,  2187,  1998,  2157,  3013,
        27475,  1024,   102])"
1137,1,"['tail', 'distribution', 'table', 'tails', 'tail areas', 'population', 'sampling', 'statistical', 'sampling distribution', 'case']", Point estimates and sampling variability,seg_45,"we can use either statistical software, a graphing calculator, or a table to find the areas to the tails, and in any case we will find that they are each 0.0228. the total tail areas are 2× 0.0228 = 0.0456, which leaves the shaded area of 0.9544. that is, about 95.44% of the sampling distribution in figure 5.2 is within ±0.02 of the population proportion, p = 0.88.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2057,  2064,  2224,  2593,  7778,  4007,  1010,  1037, 10629,
         2075, 10250, 19879,  4263,  1010,  2030,  1037,  2795,  2000,  2424,
         1996,  2752,  2000,  1996, 17448,  1010,  1998,  1999,  2151,  2553,
         2057,  2097,  2424,  2008,  2027,  2024,  2169,  1014,  1012,  6185,
        22407,  1012,  1996,  2561,  5725,  2752,  2024,  1016, 26306,  1014,
         1012,  6185, 22407,  1027,  1014,  1012,  5840, 26976,  1010,  2029,
         3727,  1996, 25273,  2181,  1997,  1014,  1012,  5345, 22932,  1012,
         2008,  2003,  1010,  2055,  5345,  1012,  4008,  1003,  1997,  1996,
        16227,  4353,  1999,  3275,  1019,  1012,  1016,  2003,  2306,  1081,
         2692,  1012,  6185,  1997,  1996,  2313, 10817,  1010,  1052,  1027,
         1014,  1012,  6070,  1012,   102])"
1138,1,"['sample', 'estimate']", Point estimates and sampling variability,seg_45,in example 5.1 we discussed how a smaller sample would tend to produce a less reliable estimate.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1999,  2742,  1019,  1012,  1015,  2057,  6936,  2129,  1037,
         3760,  7099,  2052,  7166,  2000,  3965,  1037,  2625, 10539, 10197,
         1012,   102])"
1139,0,['n'], Point estimates and sampling variability,seg_45,p(1−p) 5 explain how this intuition is reflected in the formula for sep̂ = √ n .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1052,  1006,  1015, 22543,  2361,  1007,  1019,  4863,  2129,
         2023, 26406,  2003,  7686,  1999,  1996,  5675,  2005, 19802,  1027,
         1600,  1050,  1012,   102])"
1140,1,"['central limit theorem', 'limit']", Point estimates and sampling variability,seg_45,5.1.4 applying the central limit theorem to a real-world setting,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1019,  1012,  1015,  1012,  1018, 11243,  1996,  2430,  5787,
         9872,  2000,  1037,  2613,  1011,  2088,  4292,   102])"
1141,1,"['normal distribution', 'population', 'sample', 'normal', 'limit', 'distribution', 'central limit theorem']", Point estimates and sampling variability,seg_45,we do not actually know the population proportion unless we conduct an expensive poll of all individuals in the population. our earlier value of p = 0.88 was based on a pew research conducted a poll of 1000 american adults that found p̂ = 0.887 of them favored expanding solar energy. the researchers might have wondered: does the sample proportion from the poll approximately follow a normal distribution? we can check the conditions from the central limit theorem:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2057,  2079,  2025,  2941,  2113,  1996,  2313, 10817,  4983,
         2057,  6204,  2019,  6450,  8554,  1997,  2035,  3633,  1999,  1996,
         2313,  1012,  2256,  3041,  3643,  1997,  1052,  1027,  1014,  1012,
         6070,  2001,  2241,  2006,  1037, 29071,  2470,  4146,  1037,  8554,
         1997,  6694,  2137,  6001,  2008,  2179,  1052,  1027,  1014,  1012,
         6070,  2581,  1997,  2068, 12287,  9186,  5943,  2943,  1012,  1996,
         6950,  2453,  2031,  4999,  1024,  2515,  1996,  7099, 10817,  2013,
         1996,  8554,  3155,  3582,  1037,  3671,  4353,  1029,  2057,  2064,
         4638,  1996,  3785,  2013,  1996,  2430,  5787,  9872,  1024,   102])"
1142,1,"['random sample', 'sample', 'random', 'simple random sample']", Point estimates and sampling variability,seg_45,"independence. the poll is a simple random sample of american adults, which means that the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 4336, 1012, 1996, 8554, 2003, 1037, 3722, 6721, 7099, 1997, 2137,
        6001, 1010, 2029, 2965, 2008, 1996,  102])"
1143,1,['independent'], Point estimates and sampling variability,seg_45,observations are independent.,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 9420, 2024, 2981, 1012,  102])"
1144,1,"['condition', 'population']", Point estimates and sampling variability,seg_45,"success-failure condition. to check this condition, we need the population proportion, p, to",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3112,  1011,  4945,  4650,  1012,  2000,  4638,  2023,  4650,
         1010,  2057,  2342,  1996,  2313, 10817,  1010,  1052,  1010,  2000,
          102])"
1145,1,"['cases', 'sample', 'condition']", Point estimates and sampling variability,seg_45,"check if both np and n(1− p) are greater than 10. however, we do not actually know p, which is exactly why the pollsters would take a sample! in cases like these, we often use p̂ as our next best way to check the success-failure condition:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  4638,  2065,  2119, 27937,  1998,  1050,  1006,  1015, 22543,
         1052,  1007,  2024,  3618,  2084,  2184,  1012,  2174,  1010,  2057,
         2079,  2025,  2941,  2113,  1052,  1010,  2029,  2003,  3599,  2339,
         1996, 14592,  7747,  2052,  2202,  1037,  7099,   999,  1999,  3572,
         2066,  2122,  1010,  2057,  2411,  2224,  1052,  2004,  2256,  2279,
         2190,  2126,  2000,  4638,  1996,  3112,  1011,  4945,  4650,  1024,
          102])"
1146,1,"['sample', 'case']", Point estimates and sampling variability,seg_45,"the sample proportion p̂ acts as a reasonable substitute for p during this check, and each value in this case is well above the minimum of 10.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996,  7099, 10817,  1052,  4490,  2004,  1037,  9608,  7681,
         2005,  1052,  2076,  2023,  4638,  1010,  1998,  2169,  3643,  1999,
         2023,  2553,  2003,  2092,  2682,  1996,  6263,  1997,  2184,  1012,
          102])"
1147,1,"['approximation', 'sample', 'standard', 'standard error', 'substitution approximation', 'error']", Point estimates and sampling variability,seg_45,this substitution approximation of using p̂ in place of p is also useful when computing the standard error of the sample proportion:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2023, 20885, 20167,  1997,  2478,  1052,  1999,  2173,  1997,
         1052,  2003,  2036,  6179,  2043,  9798,  1996,  3115,  7561,  1997,
         1996,  7099, 10817,  1024,   102])"
1148,1,"['sample', 'standard', 'standard error', 'error', 'case']", Point estimates and sampling variability,seg_45,"this substitution technique is sometimes referred to as the “plug-in principle”. in this case, sep̂ didn’t change enough to be detected using only 3 decimal places versus when we completed the calculation with 0.88 earlier. the computed standard error tends to be reasonably stable even when observing slightly different proportions in one sample or another.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2023, 20885,  6028,  2003,  2823,  3615,  2000,  2004,  1996,
         1523, 13354,  1011,  1999,  6958,  1524,  1012,  1999,  2023,  2553,
         1010, 19802,  2134,  1521,  1056,  2689,  2438,  2000,  2022, 11156,
         2478,  2069,  1017, 26066,  3182,  6431,  2043,  2057,  2949,  1996,
        17208,  2007,  1014,  1012,  6070,  3041,  1012,  1996, 24806,  3115,
         7561, 12102,  2000,  2022, 16286,  6540,  2130,  2043, 14158,  3621,
         2367, 19173,  1999,  2028,  7099,  2030,  2178,  1012,   102])"
1149,1,"['central limit theorem', 'limit']", Point estimates and sampling variability,seg_45,5.1.5 more details regarding the central limit theorem,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 1019, 1012, 1015, 1012, 1019, 2062, 4751, 4953, 1996, 2430, 5787,
        9872,  102])"
1150,1,"['central limit theorem', 'limit']", Point estimates and sampling variability,seg_45,we’ve applied the central limit theorem in numerous examples so far this chapter:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 2057, 1521, 2310, 4162, 1996, 2430, 5787, 9872, 1999, 3365, 4973,
        2061, 2521, 2023, 3127, 1024,  102])"
1151,1,"['normal distribution', 'observations', 'sample', 'normal', 'sample size', 'distribution', 'independent']", Point estimates and sampling variability,seg_45,"when observations are independent and the sample size is sufficiently large, the distribution of p̂ resembles a normal distribution with",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2043,  9420,  2024,  2981,  1998,  1996,  7099,  2946,  2003,
        12949,  2312,  1010,  1996,  4353,  1997,  1052, 12950,  1037,  3671,
         4353,  2007,   102])"
1152,1,"['sample', 'sample size']", Point estimates and sampling variability,seg_45,the sample size is considered sufficiently large when np ≥ 10 and n(1− p) ≥ 10.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996,  7099,  2946,  2003,  2641, 12949,  2312,  2043, 27937,
         1609,  2184,  1998,  1050,  1006,  1015, 22543,  1052,  1007,  1609,
         2184,  1012,   102])"
1153,1,"['limit', 'condition', 'central limit theorem']", Point estimates and sampling variability,seg_45,"in this section, we’ll explore the success-failure condition and seek to better understand the central limit theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 1999, 2023, 2930, 1010, 2057, 1521, 2222, 8849, 1996, 3112, 1011,
        4945, 4650, 1998, 6148, 2000, 2488, 3305, 1996, 2430, 5787, 9872, 1012,
         102])"
1154,1,"['sample', 'samples']", Point estimates and sampling variability,seg_45,"an interesting question to answer is, what happens when np < 10 or n(1− p) < 10? as we did in section 5.1.2, we can simulate drawing samples of different sizes where, say, the true proportion is p = 0.25. here’s a sample of size 10:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2019,  5875,  3160,  2000,  3437,  2003,  1010,  2054,  6433,
         2043, 27937,  1026,  2184,  2030,  1050,  1006,  1015, 22543,  1052,
         1007,  1026,  2184,  1029,  2004,  2057,  2106,  1999,  2930,  1019,
         1012,  1015,  1012,  1016,  1010,  2057,  2064, 26633,  5059,  8168,
         1997,  2367, 10826,  2073,  1010,  2360,  1010,  1996,  2995, 10817,
         2003,  1052,  1027,  1014,  1012,  2423,  1012,  2182,  1521,  1055,
         1037,  7099,  1997,  2946,  2184,  1024,   102])"
1155,1,['sample'], Point estimates and sampling variability,seg_45,"2 in this sample, we observe a sample proportion of yeses of p̂ = = 0.2. we can simulate many such",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1016,  1999,  2023,  7099,  1010,  2057, 11949,  1037,  7099,
        10817,  1997,  2748,  2229,  1997,  1052,  1027,  1027,  1014,  1012,
         1016,  1012,  2057,  2064, 26633,  2116,  2107,   102])"
1156,1,"['variability', 'mean', 'normal distribution', 'distributions', 'sampling', 'normal', 'distribution', 'sampling distribution']", Point estimates and sampling variability,seg_45,"10 proportions to understand the sampling distribution of p̂ when n = 10 and p = 0.25, which we’ve plotted in figure 5.3 alongside a normal distribution with the same mean and variability. these distributions have a number of important differences.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2184, 19173,  2000,  3305,  1996, 16227,  4353,  1997,  1052,
         2043,  1050,  1027,  2184,  1998,  1052,  1027,  1014,  1012,  2423,
         1010,  2029,  2057,  1521,  2310, 27347,  1999,  3275,  1019,  1012,
         1017,  4077,  1037,  3671,  4353,  2007,  1996,  2168,  2812,  1998,
        28436,  1012,  2122, 20611,  2031,  1037,  2193,  1997,  2590,  5966,
         1012,   102])"
1157,1,['sample'], Point estimates and sampling variability,seg_45,0 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 −0.2 0.0 0.2 0.4 0.6 sample proportions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1014,  1014,  1012,  1014,  1014,  1012,  1015,  1014,  1012,
         1016,  1014,  1012,  1017,  1014,  1012,  1018,  1014,  1012,  1019,
         1014,  1012,  1020,  1014,  1012,  1021,  1014,  1012,  1022,  1597,
         2692,  1012,  1016,  1014,  1012,  1014,  1014,  1012,  1016,  1014,
         1012,  1018,  1014,  1012,  1020,  7099, 19173,   102])"
1158,1,"['mean', 'deviation', 'normal distribution', 'simulations', 'population', 'sample', 'normal', 'standard deviation', 'standard', 'sample size', 'distribution']", Point estimates and sampling variability,seg_45,figure 5.3: left: simulations of p̂ when the sample size is n = 10 and the population proportion is p = 0.25. right: a normal distribution with the same mean (0.25) and standard deviation (0.137).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3275,  1019,  1012,  1017,  1024,  2187,  1024, 24710,  1997,
         1052,  2043,  1996,  7099,  2946,  2003,  1050,  1027,  2184,  1998,
         1996,  2313, 10817,  2003,  1052,  1027,  1014,  1012,  2423,  1012,
         2157,  1024,  1037,  3671,  4353,  2007,  1996,  2168,  2812,  1006,
         1014,  1012,  2423,  1007,  1998,  3115, 24353,  1006,  1014,  1012,
        14989,  1007,  1012,   102])"
1159,1,"['normal', 'symmetric']", Point estimates and sampling variability,seg_45,"unimodal? smooth? symmetric? normal: n(0.25, 0.14) yes yes yes n = 10, p = 0.25 yes no no",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  4895, 16339,  9305,  1029,  5744,  1029, 19490,  1029,  3671,
         1024,  1050,  1006,  1014,  1012,  2423,  1010,  1014,  1012,  2403,
         1007,  2748,  2748,  2748,  1050,  1027,  2184,  1010,  1052,  1027,
         1014,  1012,  2423,  2748,  2053,  2053,   102])"
1160,1,['condition'], Point estimates and sampling variability,seg_45,notice that the success-failure condition was not satisfied when n = 10 and p = 0.25:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 5060, 2008, 1996, 3112, 1011, 4945, 4650, 2001, 2025, 8510, 2043,
        1050, 1027, 2184, 1998, 1052, 1027, 1014, 1012, 2423, 1024,  102])"
1161,1,"['normal distribution', 'sampling distribution', 'sampling', 'normal', 'condition', 'distribution']", Point estimates and sampling variability,seg_45,"this single sampling distribution does not show that the success-failure condition is the perfect guideline, but we have found that the guideline did correctly identify that a normal distribution might not be appropriate.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2023,  2309, 16227,  4353,  2515,  2025,  2265,  2008,  1996,
         3112,  1011,  4945,  4650,  2003,  1996,  3819,  5009,  4179,  1010,
         2021,  2057,  2031,  2179,  2008,  1996,  5009,  4179,  2106, 11178,
         6709,  2008,  1037,  3671,  4353,  2453,  2025,  2022,  6413,  1012,
          102])"
1162,1,['simulations'], Point estimates and sampling variability,seg_45,"we can complete several additional simulations, shown in figures 5.4 and 5.5, and we can see some trends:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2057,  2064,  3143,  2195,  3176, 24710,  1010,  3491,  1999,
         4481,  1019,  1012,  1018,  1998,  1019,  1012,  1019,  1010,  1998,
         2057,  2064,  2156,  2070, 12878,  1024,   102])"
1163,1,"['continuous', 'discrete', 'distribution']", Point estimates and sampling variability,seg_45,"1. when either np or n(1− p) is small, the distribution is more discrete, i.e. not continuous.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1015,  1012,  2043,  2593, 27937,  2030,  1050,  1006,  1015,
        22543,  1052,  1007,  2003,  2235,  1010,  1996,  4353,  2003,  2062,
        16246,  1010,  1045,  1012,  1041,  1012,  2025,  7142,  1012,   102])"
1164,1,"['skew', 'distribution']", Point estimates and sampling variability,seg_45,"2. when np or n(1− p) is smaller than 10, the skew in the distribution is more noteworthy.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1016,  1012,  2043, 27937,  2030,  1050,  1006,  1015, 22543,
         1052,  1007,  2003,  3760,  2084,  2184,  1010,  1996, 15315,  7974,
         1999,  1996,  4353,  2003,  2062, 19144,  1012,   102])"
1165,1,"['variability', 'sample', 'normal', 'sample size', 'plots', 'distribution']", Point estimates and sampling variability,seg_45,"3. the larger both np and n(1−p), the more normal the distribution. this may be a little harder to see for the larger sample size in these plots as the variability also becomes much smaller.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1017,  1012,  1996,  3469,  2119, 27937,  1998,  1050,  1006,
         1015, 22543,  2361,  1007,  1010,  1996,  2062,  3671,  1996,  4353,
         1012,  2023,  2089,  2022,  1037,  2210,  6211,  2000,  2156,  2005,
         1996,  3469,  7099,  2946,  1999,  2122, 14811,  2004,  1996, 28436,
         2036,  4150,  2172,  3760,  1012,   102])"
1166,1,"['normal distribution', 'discreteness', 'normal', 'distribution']", Point estimates and sampling variability,seg_45,"4. when np and n(1 − p) are both very large, the distribution’s discreteness is hardly evident, and the distribution looks much more like a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1018,  1012,  2043, 27937,  1998,  1050,  1006,  1015,  1597,
         1052,  1007,  2024,  2119,  2200,  2312,  1010,  1996,  4353,  1521,
         1055, 16246,  2791,  2003,  6684, 10358,  1010,  1998,  1996,  4353,
         3504,  2172,  2062,  2066,  1037,  3671,  4353,  1012,   102])"
1167,1,"['distributions', 'sampling', 'sampling distributions']", Point estimates and sampling variability,seg_45,"figure 5.4: sampling distributions for several scenarios of p and n. rows: p = 0.10, p = 0.20, p = 0.50, p = 0.80, and p = 0.90. columns: n = 10 and n = 25.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3275,  1019,  1012,  1018,  1024, 16227, 20611,  2005,  2195,
        16820,  1997,  1052,  1998,  1050,  1012, 10281,  1024,  1052,  1027,
         1014,  1012,  2184,  1010,  1052,  1027,  1014,  1012,  2322,  1010,
         1052,  1027,  1014,  1012,  2753,  1010,  1052,  1027,  1014,  1012,
         3770,  1010,  1998,  1052,  1027,  1014,  1012,  3938,  1012,  7753,
         1024,  1050,  1027,  2184,  1998,  1050,  1027,  2423,  1012,   102])"
1168,1,"['distributions', 'sampling', 'sampling distributions']", Point estimates and sampling variability,seg_45,"figure 5.5: sampling distributions for several scenarios of p and n. rows: p = 0.10, p = 0.20, p = 0.50, p = 0.80, and p = 0.90. columns: n = 50, n = 100, and n = 250.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  3275,  1019,  1012,  1019,  1024, 16227, 20611,  2005,  2195,
        16820,  1997,  1052,  1998,  1050,  1012, 10281,  1024,  1052,  1027,
         1014,  1012,  2184,  1010,  1052,  1027,  1014,  1012,  2322,  1010,
         1052,  1027,  1014,  1012,  2753,  1010,  1052,  1027,  1014,  1012,
         3770,  1010,  1998,  1052,  1027,  1014,  1012,  3938,  1012,  7753,
         1024,  1050,  1027,  2753,  1010,  1050,  1027,  2531,  1010,  1998,
         1050,  1027,  5539,  1012,   102])"
1169,1,"['mean', 'error', 'moment', 'skew', 'distributions', 'discreteness', 'standard', 'standard error']", Point estimates and sampling variability,seg_45,"so far we’ve only focused on the skew and discreteness of the distributions. we haven’t considered how the mean and standard error of the distributions change. take a moment to look back at the graphs, and pay attention to three things:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2061,  2521,  2057,  1521,  2310,  2069,  4208,  2006,  1996,
        15315,  7974,  1998, 16246,  2791,  1997,  1996, 20611,  1012,  2057,
         4033,  1521,  1056,  2641,  2129,  1996,  2812,  1998,  3115,  7561,
         1997,  1996, 20611,  2689,  1012,  2202,  1037,  2617,  2000,  2298,
         2067,  2012,  1996, 19287,  1010,  1998,  3477,  3086,  2000,  2093,
         2477,  1024,   102])"
1170,1,"['parameter', 'distribution', 'simulation', 'unbiased', 'population', 'sample', 'sampling', 'sampling distribution', 'data', 'independent']", Point estimates and sampling variability,seg_45,"1. the centers of the distribution are always at the population proportion, p, that was used to generate the simulation. because the sampling distribution of p̂ is always centered at the population parameter p, it means the sample proportion p̂ is unbiased when the data are independent and drawn from such a population.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1015,  1012,  1996,  6401,  1997,  1996,  4353,  2024,  2467,
         2012,  1996,  2313, 10817,  1010,  1052,  1010,  2008,  2001,  2109,
         2000,  9699,  1996, 12504,  1012,  2138,  1996, 16227,  4353,  1997,
         1052,  2003,  2467,  8857,  2012,  1996,  2313, 16381,  1052,  1010,
         2009,  2965,  1996,  7099, 10817,  1052,  2003,  4895, 11607,  6924,
         2043,  1996,  2951,  2024,  2981,  1998,  4567,  2013,  2107,  1037,
         2313,  1012,   102])"
1171,1,"['variability', 'distribution', 'estimate', 'population', 'sample', 'sampling', 'sample size', 'sampling distribution']", Point estimates and sampling variability,seg_45,"2. for a particular population proportion p, the variability in the sampling distribution decreases as the sample size n becomes larger. this will likely align with your intuition: an estimate based on a larger sample size will tend to be more accurate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1016,  1012,  2005,  1037,  3327,  2313, 10817,  1052,  1010,
         1996, 28436,  1999,  1996, 16227,  4353, 17913,  2004,  1996,  7099,
         2946,  1050,  4150,  3469,  1012,  2023,  2097,  3497, 25705,  2007,
         2115, 26406,  1024,  2019, 10197,  2241,  2006,  1037,  3469,  7099,
         2946,  2097,  7166,  2000,  2022,  2062,  8321,  1012,   102])"
1172,1,"['variability', 'sample', 'sample size', 'standard', 'standard error', 'error']", Point estimates and sampling variability,seg_45,"3. for a particular sample size, the variability will be largest when p = 0.5. the differences may be a little subtle, so take a close look. this reflects the role of the proportion p in the standard p(1−p) error formula: se = √ n . the standard error is largest when p = 0.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1017,  1012,  2005,  1037,  3327,  7099,  2946,  1010,  1996,
        28436,  2097,  2022,  2922,  2043,  1052,  1027,  1014,  1012,  1019,
         1012,  1996,  5966,  2089,  2022,  1037,  2210, 11259,  1010,  2061,
         2202,  1037,  2485,  2298,  1012,  2023, 11138,  1996,  2535,  1997,
         1996, 10817,  1052,  1999,  1996,  3115,  1052,  1006,  1015, 22543,
         2361,  1007,  7561,  5675,  1024,  7367,  1027,  1600,  1050,  1012,
         1996,  3115,  7561,  2003,  2922,  2043,  1052,  1027,  1014,  1012,
         1019,  1012,   102])"
1173,1,"['discrete', 'normal', 'condition', 'standard', 'distribution']", Point estimates and sampling variability,seg_45,"at no point will the distribution of p̂ look perfectly normal, since p̂ will always be take discrete values (x/n). it is always a matter of degree, and we will use the standard success-failure condition with minimums of 10 for np and n(1− p) as our guideline within this book.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2012,  2053,  2391,  2097,  1996,  4353,  1997,  1052,  2298,
         6669,  3671,  1010,  2144,  1052,  2097,  2467,  2022,  2202, 16246,
         5300,  1006,  1060,  1013,  1050,  1007,  1012,  2009,  2003,  2467,
         1037,  3043,  1997,  3014,  1010,  1998,  2057,  2097,  2224,  1996,
         3115,  3112,  1011,  4945,  4650,  2007,  6263,  2015,  1997,  2184,
         2005, 27937,  1998,  1050,  1006,  1015, 22543,  1052,  1007,  2004,
         2256,  5009,  4179,  2306,  2023,  2338,  1012,   102])"
1174,1,['statistics'], Point estimates and sampling variability,seg_45,5.1.6 extending the framework for other statistics,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([ 101, 1019, 1012, 1015, 1012, 1020, 8402, 1996, 7705, 2005, 2060, 6747,
         102])"
1175,1,"['mean', 'parameter', 'estimate', 'point estimate', 'random sample', 'sample', 'random', 'sample statistic', 'statistics', 'population', 'population mean', 'average', 'statistic', 'sample mean']", Point estimates and sampling variability,seg_45,"the strategy of using a sample statistic to estimate a parameter is quite common, and it’s a strategy that we can apply to other statistics besides a proportion. for instance, if we want to estimate the average salary for graduates from a particular college, we could survey a random sample of recent graduates; in that example, we’d be using a sample mean x̄ to estimate the population mean µ for all graduates. as another example, if we want to estimate the difference in product prices for two websites, we might take a random sample of products available on both sites, check the prices on each, and use then compute the average difference; this strategy certainly would give us some idea of the actual difference through a point estimate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  1996,  5656,  1997,  2478,  1037,  7099, 28093,  6553,  2000,
        10197,  1037, 16381,  2003,  3243,  2691,  1010,  1998,  2009,  1521,
         1055,  1037,  5656,  2008,  2057,  2064,  6611,  2000,  2060,  6747,
         4661,  1037, 10817,  1012,  2005,  6013,  1010,  2065,  2057,  2215,
         2000, 10197,  1996,  2779, 10300,  2005, 10845,  2013,  1037,  3327,
         2267,  1010,  2057,  2071,  5002,  1037,  6721,  7099,  1997,  3522,
        10845,  1025,  1999,  2008,  2742,  1010,  2057,  1521,  1040,  2022,
         2478,  1037,  7099,  2812,  1060,  2000, 10197,  1996,  2313,  2812,
         1085,  2005,  2035, 10845,  1012,  2004,  2178,  2742,  1010,  2065,
         2057,  2215,  2000, 10197,  1996,  4489,  1999,  4031,  7597,  2005,
         2048, 11744,  1010,  2057,  2453,  2202,  1037,  6721,  7099,  1997,
         3688,  2800,  2006,  2119,  4573,  1010,  4638,  1996,  7597,  2006,
         2169,  1010,  1998,  2224,  2059, 24134,  1996,  2779,  4489,  1025,
         2023,  5656,  5121,  2052,  2507,  2149,  2070,  2801,  1997,  1996,
         5025,  4489,  2083,  1037,  2391, 10197,  1012,   102])"
1176,0,[], Point estimates and sampling variability,seg_45,"while this chapter emphases a single proportion context, we’ll encounter many different contexts throughout this book where these methods will be applied. the principles and general ideas are the same, even if the details change a little. we’ve also sprinkled some other contexts into the exercises to help you start thinking about how the ideas generalize.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2391, 10035,  1998, 16227, 28436])","tensor([  101,  2096,  2023,  3127,  7861, 21890,  8583,  1037,  2309, 10817,
         6123,  1010,  2057,  1521,  2222,  8087,  2116,  2367, 18046,  2802,
         2023,  2338,  2073,  2122,  4725,  2097,  2022,  4162,  1012,  1996,
         6481,  1998,  2236,  4784,  2024,  1996,  2168,  1010,  2130,  2065,
         1996,  4751,  2689,  1037,  2210,  1012,  2057,  1521,  2310,  2036,
        11867,  6657, 19859,  2070,  2060, 18046,  2046,  1996, 11110,  2000,
         2393,  2017,  2707,  3241,  2055,  2129,  1996,  4784,  2236,  4697,
         1012,   102])"
1177,1,"['range', 'associated', 'estimate', 'point estimate', 'sample', 'standard', 'population', 'standard error', 'error']", Confidence intervals for a proportion,seg_47,"the sample proportion p̂ provides a single plausible value for the population proportion p. however, the sample proportion isn’t perfect and will have some standard error associated with it. when stating an estimate for the population proportion, it is better practice to provide a plausible range of values instead of supplying just the point estimate.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1996,  7099, 10817,  1052,  3640,  1037,  2309, 24286,  3643,
         2005,  1996,  2313, 10817,  1052,  1012,  2174,  1010,  1996,  7099,
        10817,  3475,  1521,  1056,  3819,  1998,  2097,  2031,  2070,  3115,
         7561,  3378,  2007,  2009,  1012,  2043,  5517,  2019, 10197,  2005,
         1996,  2313, 10817,  1010,  2009,  2003,  2488,  3218,  2000,  3073,
         1037, 24286,  2846,  1997,  5300,  2612,  1997, 17731,  2074,  1996,
         2391, 10197,  1012,   102])"
1178,1,"['parameter', 'population']", Confidence intervals for a proportion,seg_47,5.2.1 capturing the population parameter,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1016,  1012,  1015, 11847,  1996,  2313, 16381,
          102])"
1179,1,"['parameter', 'confidence interval', 'range', 'interval', 'estimate', 'point estimate', 'population', 'confidence']", Confidence intervals for a proportion,seg_47,"using only a point estimate is like fishing in a murky lake with a spear. we can throw a spear where we saw a fish, but we will probably miss. on the other hand, if we toss a net in that area, we have a good chance of catching the fish. a confidence interval is like fishing with a net, and it represents a range of plausible values where we are likely to find the population parameter.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2478,  2069,  1037,  2391, 10197,  2003,  2066,  5645,  1999,
         1037, 14163, 15952,  2697,  2007,  1037, 12341,  1012,  2057,  2064,
         5466,  1037, 12341,  2073,  2057,  2387,  1037,  3869,  1010,  2021,
         2057,  2097,  2763,  3335,  1012,  2006,  1996,  2060,  2192,  1010,
         2065,  2057, 10055,  1037,  5658,  1999,  2008,  2181,  1010,  2057,
         2031,  1037,  2204,  3382,  1997,  9105,  1996,  3869,  1012,  1037,
         7023, 13483,  2003,  2066,  5645,  2007,  1037,  5658,  1010,  1998,
         2009,  5836,  1037,  2846,  1997, 24286,  5300,  2073,  2057,  2024,
         3497,  2000,  2424,  1996,  2313, 16381,  1012,   102])"
1180,1,"['parameter', 'confidence interval', 'range', 'interval', 'estimate', 'point estimate', 'population', 'confidence']", Confidence intervals for a proportion,seg_47,"if we report a point estimate p̂, we probably will not hit the exact population proportion. on the other hand, if we report a range of plausible values, representing a confidence interval, we have a good shot at capturing the parameter.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2065,  2057,  3189,  1037,  2391, 10197,  1052,  1010,  2057,
         2763,  2097,  2025,  2718,  1996,  6635,  2313, 10817,  1012,  2006,
         1996,  2060,  2192,  1010,  2065,  2057,  3189,  1037,  2846,  1997,
        24286,  5300,  1010,  5052,  1037,  7023, 13483,  1010,  2057,  2031,
         1037,  2204,  2915,  2012, 11847,  1996, 16381,  1012,   102])"
1181,1,"['interval', 'population']", Confidence intervals for a proportion,seg_47,"if we want to be very certain we capture the population proportion in an interval, should we use a wider interval or a smaller interval?6",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2065,  2057,  2215,  2000,  2022,  2200,  3056,  2057,  5425,
         1996,  2313, 10817,  1999,  2019, 13483,  1010,  2323,  2057,  2224,
         1037,  7289, 13483,  2030,  1037,  3760, 13483,  1029,  1020,   102])"
1182,1,"['interval', 'confidence', 'confidence interval']", Confidence intervals for a proportion,seg_47,5.2.2 constructing a 95% confidence interval,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1016,  1012,  1016, 15696,  1037,  5345,  1003,
         7023, 13483,   102])"
1183,1,"['confidence interval', 'interval', 'estimate', 'point estimate', 'sample', 'standard', 'population', 'standard error', 'confidence', 'error']", Confidence intervals for a proportion,seg_47,"our sample proportion p̂ is the most plausible value of the population proportion, so it makes sense to build a confidence interval around this point estimate. the standard error provides a guide for how large we should make the confidence interval.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2256,  7099, 10817,  1052,  2003,  1996,  2087, 24286,  3643,
         1997,  1996,  2313, 10817,  1010,  2061,  2009,  3084,  3168,  2000,
         3857,  1037,  7023, 13483,  2105,  2023,  2391, 10197,  1012,  1996,
         3115,  7561,  3640,  1037,  5009,  2005,  2129,  2312,  2057,  2323,
         2191,  1996,  7023, 13483,  1012,   102])"
1184,1,"['confidence interval', 'confident', 'point estimate', 'standard errors', 'errors', 'population', 'confidence', 'mean', 'normal distribution', 'interval', 'estimate', 'normal', 'standard deviation', 'standard error', 'data', 'standard deviations', 'deviation', 'standard', 'sample', 'limit', 'deviations', 'distribution', 'error']", Confidence intervals for a proportion,seg_47,"the standard error represents the standard deviation of the point estimate, and when the central limit theorem conditions are satisfied, the point estimate closely follows a normal distribution. in a normal distribution, 95% of the data is within 1.96 standard deviations of the mean. using this principle, we can construct a confidence interval that extends 1.96 standard errors from the sample proportion to be 95% confident that the interval captures the population proportion:",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1996,  3115,  7561,  5836,  1996,  3115, 24353,  1997,  1996,
         2391, 10197,  1010,  1998,  2043,  1996,  2430,  5787,  9872,  3785,
         2024,  8510,  1010,  1996,  2391, 10197,  4876,  4076,  1037,  3671,
         4353,  1012,  1999,  1037,  3671,  4353,  1010,  5345,  1003,  1997,
         1996,  2951,  2003,  2306,  1015,  1012,  5986,  3115, 24353,  2015,
         1997,  1996,  2812,  1012,  2478,  2023,  6958,  1010,  2057,  2064,
         9570,  1037,  7023, 13483,  2008,  8908,  1015,  1012,  5986,  3115,
        10697,  2013,  1996,  7099, 10817,  2000,  2022,  5345,  1003,  9657,
         2008,  1996, 13483, 19566,  1996,  2313, 10817,  1024,   102])"
1185,1,['estimate'], Confidence intervals for a proportion,seg_47,point estimate ± 1.96× se,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2391, 10197,  1081,  1015,  1012,  5986, 26306,  7367,   102])"
1186,1,"['mean', 'parameter', 'confidence interval', 'interval', 'simulation', 'population', 'intervals', 'process', 'samples', 'confidence intervals', 'confidence']", Confidence intervals for a proportion,seg_47,"but what does “95% confident” mean? suppose we took many samples and built a 95% confidence interval from each. then about 95% of those intervals would contain the parameter, p. figure 5.6 shows the process of creating 25 intervals from 25 samples from the simulation in section 5.1.2, where 24 of the resulting confidence intervals contain the simulation’s population proportion of p = 0.88, and one interval does not.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2021,  2054,  2515,  1523,  5345,  1003,  9657,  1524,  2812,
         1029,  6814,  2057,  2165,  2116,  8168,  1998,  2328,  1037,  5345,
         1003,  7023, 13483,  2013,  2169,  1012,  2059,  2055,  5345,  1003,
         1997,  2216, 14025,  2052,  5383,  1996, 16381,  1010,  1052,  1012,
         3275,  1019,  1012,  1020,  3065,  1996,  2832,  1997,  4526,  2423,
        14025,  2013,  2423,  8168,  2013,  1996, 12504,  1999,  2930,  1019,
         1012,  1015,  1012,  1016,  1010,  2073,  2484,  1997,  1996,  4525,
         7023, 14025,  5383,  1996, 12504,  1521,  1055,  2313, 10817,  1997,
         1052,  1027,  1014,  1012,  6070,  1010,  1998,  2028, 13483,  2515,
         2025,  1012,   102])"
1187,1,"['interval', 'estimates', 'confidence intervals', 'intervals', 'population', 'point estimates', 'confidence']", Confidence intervals for a proportion,seg_47,"figure 5.6: twenty-five point estimates and confidence intervals from the simulations in section 5.1.2. these intervals are shown relative to the population proportion p = 0.88. only 1 of these 25 intervals did not capture the population proportion, and this interval has been bolded.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  3275,  1019,  1012,  1020,  1024,  3174,  1011,  2274,  2391,
        10035,  1998,  7023, 14025,  2013,  1996, 24710,  1999,  2930,  1019,
         1012,  1015,  1012,  1016,  1012,  2122, 14025,  2024,  3491,  5816,
         2000,  1996,  2313, 10817,  1052,  1027,  1014,  1012,  6070,  1012,
         2069,  1015,  1997,  2122,  2423, 14025,  2106,  2025,  5425,  1996,
         2313, 10817,  1010,  1998,  2023, 13483,  2038,  2042,  7782,  2098,
         1012,   102])"
1188,1,"['interval', 'simulation', 'population']", Confidence intervals for a proportion,seg_47,"in figure 5.6, one interval does not contain p = 0.88. does this imply that the population proportion used in the simulation could not have been p = 0.88?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1999,  3275,  1019,  1012,  1020,  1010,  2028, 13483,  2515,
         2025,  5383,  1052,  1027,  1014,  1012,  6070,  1012,  2515,  2023,
        19515,  2008,  1996,  2313, 10817,  2109,  1999,  1996, 12504,  2071,
         2025,  2031,  2042,  1052,  1027,  1014,  1012,  6070,  1029,   102])"
1189,1,"['confidence interval', 'standard errors', 'errors', 'confidence', 'mean', 'interval', 'observations', 'point estimates', 'data', 'standard deviations', 'parameter', 'parameter of interest', 'standard', 'range', 'estimates', 'deviations']", Confidence intervals for a proportion,seg_47,"just as some observations naturally occur more than 1.96 standard deviations from the mean, some point estimates will be more than 1.96 standard errors from the parameter of interest. a confidence interval only provides a plausible range of values. while we might say other values are implausible based on the data, this does not mean they are impossible.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2074,  2004,  2070,  9420,  8100,  5258,  2062,  2084,  1015,
         1012,  5986,  3115, 24353,  2015,  2013,  1996,  2812,  1010,  2070,
         2391, 10035,  2097,  2022,  2062,  2084,  1015,  1012,  5986,  3115,
        10697,  2013,  1996, 16381,  1997,  3037,  1012,  1037,  7023, 13483,
         2069,  3640,  1037, 24286,  2846,  1997,  5300,  1012,  2096,  2057,
         2453,  2360,  2060,  5300,  2024, 17727, 28128,  7028,  2241,  2006,
         1996,  2951,  1010,  2023,  2515,  2025,  2812,  2027,  2024,  5263,
         1012,   102])"
1190,1,"['confidence interval', 'normal distribution', 'interval', 'estimate', 'point estimate', 'normal', 'limit', 'distribution', 'central limit theorem', 'confidence']", Confidence intervals for a proportion,seg_47,"when the distribution of a point estimate qualifies for the central limit theorem and therefore closely follows a normal distribution, we can construct a 95% confidence interval as",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2043,  1996,  4353,  1997,  1037,  2391, 10197, 24209, 11475,
        14213,  2005,  1996,  2430,  5787,  9872,  1998,  3568,  4876,  4076,
         1037,  3671,  4353,  1010,  2057,  2064,  9570,  1037,  5345,  1003,
         7023, 13483,  2004,   102])"
1191,0,[], Confidence intervals for a proportion,seg_47,point estimate± 1.96× se,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2391, 10197, 29657,  1015,  1012,  5986, 26306,  7367,   102])"
1192,1,"['confidence interval', 'interval', 'random sample', 'sample', 'random', 'population', 'confidence']", Confidence intervals for a proportion,seg_47,in section 5.1 we learned about a pew research poll where 88.7% of a random sample of 1000 american adults supported expanding the role of solar power. compute and interpret a 95% confidence interval for the population proportion.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1999,  2930,  1019,  1012,  1015,  2057,  4342,  2055,  1037,
        29071,  2470,  8554,  2073,  6070,  1012,  1021,  1003,  1997,  1037,
         6721,  7099,  1997,  6694,  2137,  6001,  3569,  9186,  1996,  2535,
         1997,  5943,  2373,  1012, 24134,  1998, 17841,  1037,  5345,  1003,
         7023, 13483,  2005,  1996,  2313, 10817,  1012,   102])"
1193,1,"['confidence interval', 'normal distribution', 'interval', 'estimate', 'point estimate', 'normal', 'standard', 'distribution', 'standard error', 'confidence', 'error']", Confidence intervals for a proportion,seg_47,"we earlier confirmed that p̂ follows a normal distribution and has a standard error of sep̂ = 0.010. to compute the 95% confidence interval, plug the point estimate p̂ = 0.887 and standard error into the 95% confidence interval formula:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2057,  3041,  4484,  2008,  1052,  4076,  1037,  3671,  4353,
         1998,  2038,  1037,  3115,  7561,  1997, 19802,  1027,  1014,  1012,
         5890,  2692,  1012,  2000, 24134,  1996,  5345,  1003,  7023, 13483,
         1010, 13354,  1996,  2391, 10197,  1052,  1027,  1014,  1012,  6070,
         2581,  1998,  3115,  7561,  2046,  1996,  5345,  1003,  7023, 13483,
         5675,  1024,   102])"
1194,1,"['confidence interval', 'confident', 'interval', 'percentage', 'confidence']", Confidence intervals for a proportion,seg_47,we are 95% confident that the actual proportion of american adults who support expanding solar power is between 86.7% and 90.7%. (it’s common to round to the nearest percentage point or nearest tenth of a percentage point when reporting a confidence interval.),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2057,  2024,  5345,  1003,  9657,  2008,  1996,  5025, 10817,
         1997,  2137,  6001,  2040,  2490,  9186,  5943,  2373,  2003,  2090,
         6564,  1012,  1021,  1003,  1998,  3938,  1012,  1021,  1003,  1012,
         1006,  2009,  1521,  1055,  2691,  2000,  2461,  2000,  1996,  7205,
         7017,  2391,  2030,  7205,  7891,  1997,  1037,  7017,  2391,  2043,
         7316,  1037,  7023, 13483,  1012,  1007,   102])"
1195,1,"['confidence level', 'confidence', 'level']", Confidence intervals for a proportion,seg_47,5.2.3 changing the confidence level,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 1019, 1012, 1016, 1012, 1017, 5278, 1996, 7023, 2504,  102])"
1196,1,"['confidence level', 'interval', 'level', 'intervals', 'confidence intervals', 'confidence']", Confidence intervals for a proportion,seg_47,"suppose we want to consider confidence intervals where the confidence level is higher than 95%, such as a confidence level of 99%. think back to the analogy about trying to catch a fish: if we want to be more sure that we will catch the fish, we should use a wider net. to create a 99% confidence level, we must also widen our 95% interval. on the other hand, if we want an interval with lower confidence, such as 90%, we could use a slightly narrower interval than our original 95% interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  6814,  2057,  2215,  2000,  5136,  7023, 14025,  2073,  1996,
         7023,  2504,  2003,  3020,  2084,  5345,  1003,  1010,  2107,  2004,
         1037,  7023,  2504,  1997,  5585,  1003,  1012,  2228,  2067,  2000,
         1996, 23323,  2055,  2667,  2000,  4608,  1037,  3869,  1024,  2065,
         2057,  2215,  2000,  2022,  2062,  2469,  2008,  2057,  2097,  4608,
         1996,  3869,  1010,  2057,  2323,  2224,  1037,  7289,  5658,  1012,
         2000,  3443,  1037,  5585,  1003,  7023,  2504,  1010,  2057,  2442,
         2036, 21255,  2256,  5345,  1003, 13483,  1012,  2006,  1996,  2060,
         2192,  1010,  2065,  2057,  2215,  2019, 13483,  2007,  2896,  7023,
         1010,  2107,  2004,  3938,  1003,  1010,  2057,  2071,  2224,  1037,
         3621, 22546, 13483,  2084,  2256,  2434,  5345,  1003, 13483,  1012,
          102])"
1197,1,"['confidence interval', 'normal distribution', 'interval', 'estimate', 'point estimate', 'normal', 'levels', 'intervals', 'distribution', 'confidence']", Confidence intervals for a proportion,seg_47,the 95% confidence interval structure provides guidance in how to make intervals with different confidence levels. the general 95% confidence interval for a point estimate that follows a normal distribution is,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1996,  5345,  1003,  7023, 13483,  3252,  3640,  8606,  1999,
         2129,  2000,  2191, 14025,  2007,  2367,  7023,  3798,  1012,  1996,
         2236,  5345,  1003,  7023, 13483,  2005,  1037,  2391, 10197,  2008,
         4076,  1037,  3671,  4353,  2003,   102])"
1198,1,['estimate'], Confidence intervals for a proportion,seg_47,point estimate ± 1.96× se,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2391, 10197,  1081,  1015,  1012,  5986, 26306,  7367,   102])"
1199,1,"['confidence level', 'parameter', 'interval', 'estimate', 'point estimate', 'level', 'standard errors', 'errors', 'standard', 'standard error', 'confidence', 'data', 'error']", Confidence intervals for a proportion,seg_47,"there are three components to this interval: the point estimate, “1.96”, and the standard error. the choice of 1.96 × se was based on capturing 95% of the data since the estimate is within 1.96 standard errors of the parameter about 95% of the time. the choice of 1.96 corresponds to a 95% confidence level.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2045,  2024,  2093,  6177,  2000,  2023, 13483,  1024,  1996,
         2391, 10197,  1010,  1523,  1015,  1012,  5986,  1524,  1010,  1998,
         1996,  3115,  7561,  1012,  1996,  3601,  1997,  1015,  1012,  5986,
         1095,  7367,  2001,  2241,  2006, 11847,  5345,  1003,  1997,  1996,
         2951,  2144,  1996, 10197,  2003,  2306,  1015,  1012,  5986,  3115,
        10697,  1997,  1996, 16381,  2055,  5345,  1003,  1997,  1996,  2051,
         1012,  1996,  3601,  1997,  1015,  1012,  5986, 14788,  2000,  1037,
         5345,  1003,  7023,  2504,  1012,   102])"
1200,1,"['normally distributed', 'probability', 'random variable', 'random', 'standard', 'deviations', 'standard deviations', 'variable']", Confidence intervals for a proportion,seg_47,"if x is a normally distributed random variable, what is the probability of the value x being within 2.58 standard deviations of the mean?7",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2065,  1060,  2003,  1037,  5373,  5500,  6721,  8023,  1010,
         2054,  2003,  1996,  9723,  1997,  1996,  3643,  1060,  2108,  2306,
         1016,  1012,  5388,  3115, 24353,  2015,  1997,  1996,  2812,  1029,
         1021,   102])"
1201,1,"['mean', 'confidence interval', 'interval', 'random variable', 'normal random variable', 'random', 'normal', 'standard', 'deviations', 'standard deviations', 'confidence', 'variable']", Confidence intervals for a proportion,seg_47,"guided practice 5.9 highlights that 99% of the time a normal random variable will be within 2.58 standard deviations of the mean. to create a 99% confidence interval, change 1.96 in the 95% confidence interval formula to be 2.58. that is, the formula for a 99% confidence interval is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  8546,  3218,  1019,  1012,  1023, 11637,  2008,  5585,  1003,
         1997,  1996,  2051,  1037,  3671,  6721,  8023,  2097,  2022,  2306,
         1016,  1012,  5388,  3115, 24353,  2015,  1997,  1996,  2812,  1012,
         2000,  3443,  1037,  5585,  1003,  7023, 13483,  1010,  2689,  1015,
         1012,  5986,  1999,  1996,  5345,  1003,  7023, 13483,  5675,  2000,
         2022,  1016,  1012,  5388,  1012,  2008,  2003,  1010,  1996,  5675,
         2005,  1037,  5585,  1003,  7023, 13483,  2003,   102])"
1202,1,['estimate'], Confidence intervals for a proportion,seg_47,point estimate ± 2.58× se,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2391, 10197,  1081,  1016,  1012,  5388, 26306,  7367,   102])"
1203,1,"['mean', 'deviations', 'standard', 'standard deviations']", Confidence intervals for a proportion,seg_47,"99%, extends −2.58 to 2.58 95%, extends −1.96 to 1.96 −3 −2 −1 0 1 2 3 standard deviations from the mean",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 1., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  5585,  1003,  1010,  8908,  1597,  2475,  1012,  5388,  2000,
         1016,  1012,  5388,  5345,  1003,  1010,  8908,  1597,  2487,  1012,
         5986,  2000,  1015,  1012,  5986,  1597,  2509,  1597,  2475,  1597,
         2487,  1014,  1015,  1016,  1017,  3115, 24353,  2015,  2013,  1996,
         2812,   102])"
1204,1,"['tail', 'confidence level', 'normal distribution', 'level', 'normal', 'distribution', 'confidence']", Confidence intervals for a proportion,seg_47,"figure 5.7: the area between -z? and z? increases as z? becomes larger. if the confidence level is 99%, we choose z? such that 99% of a normal normal distribution is between -z? and z?, which corresponds to 0.5% in the lower tail and 0.5% in the upper tail: z? = 2.58.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  3275,  1019,  1012,  1021,  1024,  1996,  2181,  2090,  1011,
         1062,  1029,  1998,  1062,  1029,  7457,  2004,  1062,  1029,  4150,
         3469,  1012,  2065,  1996,  7023,  2504,  2003,  5585,  1003,  1010,
         2057,  5454,  1062,  1029,  2107,  2008,  5585,  1003,  1997,  1037,
         3671,  3671,  4353,  2003,  2090,  1011,  1062,  1029,  1998,  1062,
         1029,  1010,  2029, 14788,  2000,  1014,  1012,  1019,  1003,  1999,
         1996,  2896,  5725,  1998,  1014,  1012,  1019,  1003,  1999,  1996,
         3356,  5725,  1024,  1062,  1029,  1027,  1016,  1012,  5388,  1012,
          102])"
1205,1,"['cases', 'point estimate', 'sampling distribution', 'confidence', 'normal distribution', 'associated', 'estimate', 'sampling', 'normal', 'model', 'point estimates', 'estimates', 'distributions', 'levels', 'distribution']", Confidence intervals for a proportion,seg_47,"this approach – using the z-scores in the normal model to compute confidence levels – is appropriate when a point estimate such as p̂ is associated with a normal distribution. for some other point estimates, a normal model is not a good fit; in these cases, we’ll use alternative distributions that better represent the sampling distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2023,  3921,  1516,  2478,  1996,  1062,  1011,  7644,  1999,
         1996,  3671,  2944,  2000, 24134,  7023,  3798,  1516,  2003,  6413,
         2043,  1037,  2391, 10197,  2107,  2004,  1052,  2003,  3378,  2007,
         1037,  3671,  4353,  1012,  2005,  2070,  2060,  2391, 10035,  1010,
         1037,  3671,  2944,  2003,  2025,  1037,  2204,  4906,  1025,  1999,
         2122,  3572,  1010,  2057,  1521,  2222,  2224,  4522, 20611,  2008,
         2488,  5050,  1996, 16227,  4353,  1012,   102])"
1206,1,"['parameter', 'confidence interval', 'interval', 'estimate', 'point estimate', 'normal', 'standard', 'population', 'model', 'standard error', 'confidence', 'error']", Confidence intervals for a proportion,seg_47,"if a point estimate closely follows a normal model with standard error se, then a confidence interval for the population parameter is",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2065,  1037,  2391, 10197,  4876,  4076,  1037,  3671,  2944,
         2007,  3115,  7561,  7367,  1010,  2059,  1037,  7023, 13483,  2005,
         1996,  2313, 16381,  2003,   102])"
1207,1,['estimate'], Confidence intervals for a proportion,seg_47,point estimate ± z? × se,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2391, 10197,  1081,  1062,  1029,  1095,  7367,   102])"
1208,1,"['confidence level', 'confidence', 'level']", Confidence intervals for a proportion,seg_47,where z? corresponds to the confidence level selected.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2073,  1062,  1029, 14788,  2000,  1996,  7023,  2504,  3479,
         1012,   102])"
1209,1,"['confidence level', 'normal distribution', 'standard normal distribution', 'standard normal', 'level', 'normal', 'standard', 'distribution', 'confidence']", Confidence intervals for a proportion,seg_47,"figure 5.7 provides a picture of how to identify z? based on a confidence level. we select z? so that the area between -z? and z? in the standard normal distribution, n(0, 1), corresponds to the confidence level.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  3275,  1019,  1012,  1021,  3640,  1037,  3861,  1997,  2129,
         2000,  6709,  1062,  1029,  2241,  2006,  1037,  7023,  2504,  1012,
         2057,  7276,  1062,  1029,  2061,  2008,  1996,  2181,  2090,  1011,
         1062,  1029,  1998,  1062,  1029,  1999,  1996,  3115,  3671,  4353,
         1010,  1050,  1006,  1014,  1010,  1015,  1007,  1010, 14788,  2000,
         1996,  7023,  2504,  1012,   102])"
1210,1,"['confidence interval', 'interval', 'confidence', 'margin of error', 'error']", Confidence intervals for a proportion,seg_47,"in a confidence interval, z? × se is called the margin of error.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1999,  1037,  7023, 13483,  1010,  1062,  1029,  1095,  7367,
         2003,  2170,  1996,  7785,  1997,  7561,  1012,   102])"
1211,1,"['confidence interval', 'interval', 'confidence', 'data', 'normality']", Confidence intervals for a proportion,seg_47,use the data in example 5.8 to create a 90% confidence interval for the proportion of american adults that support expanding the use of solar power. we have already verified conditions for normality.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2224,  1996,  2951,  1999,  2742,  1019,  1012,  1022,  2000,
         3443,  1037,  3938,  1003,  7023, 13483,  2005,  1996, 10817,  1997,
         2137,  6001,  2008,  2490,  9186,  1996,  2224,  1997,  5943,  2373,
         1012,  2057,  2031,  2525, 20119,  3785,  2005,  3671,  3012,  1012,
          102])"
1212,1,"['tail', 'confidence interval', 'normal distribution', 'standard normal distribution', 'table', 'probability', 'interval', 'standard normal', 'normal', 'standard', 'distribution', 'statistical', 'confidence', 'probability table']", Confidence intervals for a proportion,seg_47,"we first find z? such that 90% of the distribution falls between -z? and z? in the standard normal distribution, n(µ = 0, σ = 1). we can do this using a graphing calculator, statistical software, or a probability table by looking for an upper tail of 5% (the other 5% is in the lower tail): z? = 1.65. the 90% confidence interval can then be computed as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2057,  2034,  2424,  1062,  1029,  2107,  2008,  3938,  1003,
         1997,  1996,  4353,  4212,  2090,  1011,  1062,  1029,  1998,  1062,
         1029,  1999,  1996,  3115,  3671,  4353,  1010,  1050,  1006,  1085,
         1027,  1014,  1010,  1173,  1027,  1015,  1007,  1012,  2057,  2064,
         2079,  2023,  2478,  1037, 10629,  2075, 10250, 19879,  4263,  1010,
         7778,  4007,  1010,  2030,  1037,  9723,  2795,  2011,  2559,  2005,
         2019,  3356,  5725,  1997,  1019,  1003,  1006,  1996,  2060,  1019,
         1003,  2003,  1999,  1996,  2896,  5725,  1007,  1024,  1062,  1029,
         1027,  1015,  1012,  3515,  1012,  1996,  3938,  1003,  7023, 13483,
         2064,  2059,  2022, 24806,  2004,   102])"
1213,1,['confident'], Confidence intervals for a proportion,seg_47,"that is, we are 90% confident that 87.1% to 90.4% of american adults supported the expansion of solar power in 2018.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 2008, 2003, 1010, 2057, 2024, 3938, 1003, 9657, 2008, 6584, 1012,
        1015, 1003, 2000, 3938, 1012, 1018, 1003, 1997, 2137, 6001, 3569, 1996,
        4935, 1997, 5943, 2373, 1999, 2760, 1012,  102])"
1214,1,"['interval', 'confidence', 'confidence interval']", Confidence intervals for a proportion,seg_47,"once you’ve determined a one-proportion confidence interval would be helpful for an application, there are four steps to constructing the interval:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2320,  2017,  1521,  2310,  4340,  1037,  2028,  1011, 10817,
         7023, 13483,  2052,  2022, 14044,  2005,  2019,  4646,  1010,  2045,
         2024,  2176,  4084,  2000, 15696,  1996, 13483,  1024,   102])"
1215,1,"['confidence level', 'confidence', 'level']", Confidence intervals for a proportion,seg_47,"prepare. identify p̂ and n, and determine what confidence level you wish to use.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 7374, 1012, 6709, 1052, 1998, 1050, 1010, 1998, 5646, 2054, 7023,
        2504, 2017, 4299, 2000, 2224, 1012,  102])"
1216,1,"['normal', 'intervals', 'condition', 'confidence intervals', 'confidence']", Confidence intervals for a proportion,seg_47,"check. verify the conditions to ensure p̂ is nearly normal. for one-proportion confidence intervals, use p̂ in place of p to check the success-failure condition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  4638,  1012, 20410,  1996,  3785,  2000,  5676,  1052,  2003,
         3053,  3671,  1012,  2005,  2028,  1011, 10817,  7023, 14025,  1010,
         2224,  1052,  1999,  2173,  1997,  1052,  2000,  4638,  1996,  3112,
         1011,  4945,  4650,  1012,   102])"
1217,1,['interval'], Confidence intervals for a proportion,seg_47,"calculate. if the conditions hold, compute se using p̂, find z?, and construct the interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101, 18422,  1012,  2065,  1996,  3785,  2907,  1010, 24134,  7367,
         2478,  1052,  1010,  2424,  1062,  1029,  1010,  1998,  9570,  1996,
        13483,  1012,   102])"
1218,1,"['interval', 'confidence', 'confidence interval']", Confidence intervals for a proportion,seg_47,conclude. interpret the confidence interval in the context of the problem.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101, 16519,  1012, 17841,  1996,  7023, 13483,  1999,  1996,  6123,
         1997,  1996,  3291,  1012,   102])"
1219,1,['case'], Confidence intervals for a proportion,seg_47,5.2.4 more case studies,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 1019, 1012, 1016, 1012, 1018, 2062, 2553, 2913,  102])"
1220,0,[], Confidence intervals for a proportion,seg_47,"in new york city on october 23rd, 2014, a doctor who had recently been treating ebola patients in guinea went to the hospital with a slight fever and was subsequently diagnosed with ebola. soon thereafter, an nbc 4 new york/the wall street journal/marist poll found that 82% of new yorkers favored a “mandatory 21-day quarantine for anyone who has come in contact with an ebola patient”. this poll included responses of 1,042 new york adults between oct 26th and 28th, 2014.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1999,  2047,  2259,  2103,  2006,  2255, 13928,  1010,  2297,
         1010,  1037,  3460,  2040,  2018,  3728,  2042, 12318,  1041, 24290,
         5022,  1999,  7102,  2253,  2000,  1996,  2902,  2007,  1037,  7263,
         9016,  1998,  2001,  3525, 11441,  2007,  1041, 24290,  1012,  2574,
         6920,  1010,  2019,  6788,  1018,  2047,  2259,  1013,  1996,  2813,
         2395,  3485,  1013, 23787,  2102,  8554,  2179,  2008,  6445,  1003,
         1997,  2047, 19095,  2015, 12287,  1037,  1523, 10915,  2538,  1011,
         2154, 24209, 20486, 10196,  2005,  3087,  2040,  2038,  2272,  1999,
         3967,  2007,  2019,  1041, 24290,  5776,  1524,  1012,  2023,  8554,
         2443, 10960,  1997,  1015,  1010,  5840,  2475,  2047,  2259,  6001,
         2090, 13323, 14935,  1998, 15538,  1010,  2297,  1012,   102])"
1221,1,"['normal distribution', 'estimate', 'point estimate', 'normal', 'distribution', 'model', 'case']", Confidence intervals for a proportion,seg_47,"what is the point estimate in this case, and is it reasonable to use a normal distribution to model that point estimate?",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2054,  2003,  1996,  2391, 10197,  1999,  2023,  2553,  1010,
         1998,  2003,  2009,  9608,  2000,  2224,  1037,  3671,  4353,  2000,
         2944,  2008,  2391, 10197,  1029,   102])"
1222,1,"['point estimate', 'condition', 'sampling distribution', 'normal distribution', 'estimate', 'sampling', 'normal', 'random sample', 'independence', 'sample', 'random', 'simple random sample', 'distribution']", Confidence intervals for a proportion,seg_47,"the point estimate, based on a sample of size n = 1042, is p̂ = 0.82. to check whether p̂ can be reasonably modeled using a normal distribution, we check independence (the poll is based on a simple random sample) and the success-failure condition (1042× p̂ ≈ 854 and 1042× (1− p̂) ≈ 188, both easily greater than 10). with the conditions met, we are assured that the sampling distribution of p̂ can be reasonably modeled using a normal distribution.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1996,  2391, 10197,  1010,  2241,  2006,  1037,  7099,  1997,
         2946,  1050,  1027,  9645,  2475,  1010,  2003,  1052,  1027,  1014,
         1012,  6445,  1012,  2000,  4638,  3251,  1052,  2064,  2022, 16286,
        14440,  2478,  1037,  3671,  4353,  1010,  2057,  4638,  4336,  1006,
         1996,  8554,  2003,  2241,  2006,  1037,  3722,  6721,  7099,  1007,
         1998,  1996,  3112,  1011,  4945,  4650,  1006,  9645,  2475, 26306,
         1052,  1606,  5594,  2549,  1998,  9645,  2475, 26306,  1006,  1015,
        22543,  1052,  1007,  1606, 19121,  1010,  2119,  4089,  3618,  2084,
         2184,  1007,  1012,  2007,  1996,  3785,  2777,  1010,  2057,  2024,
         8916,  2008,  1996, 16227,  4353,  1997,  1052,  2064,  2022, 16286,
        14440,  2478,  1037,  3671,  4353,  1012,   102])"
1223,1,"['standard error', 'standard', 'error']", Confidence intervals for a proportion,seg_47,estimate the standard error of p̂ = 0.82 from the ebola survey.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101, 10197,  1996,  3115,  7561,  1997,  1052,  1027,  1014,  1012,
         6445,  2013,  1996,  1041, 24290,  5002,  1012,   102])"
1224,1,"['approximation', 'standard', 'standard error', 'substitution approximation', 'error']", Confidence intervals for a proportion,seg_47,we’ll use the substitution approximation of p ≈ p̂ = 0.82 to compute the standard error:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2057,  1521,  2222,  2224,  1996, 20885, 20167,  1997,  1052,
         1606,  1052,  1027,  1014,  1012,  6445,  2000, 24134,  1996,  3115,
         7561,  1024,   102])"
1225,1,"['interval', 'confidence', 'confidence interval']", Confidence intervals for a proportion,seg_47,"construct a 95% confidence interval for p, the proportion of new york adults who supported a quarantine for anyone who has come into contact with an ebola patient.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  9570,  1037,  5345,  1003,  7023, 13483,  2005,  1052,  1010,
         1996, 10817,  1997,  2047,  2259,  6001,  2040,  3569,  1037, 24209,
        20486, 10196,  2005,  3087,  2040,  2038,  2272,  2046,  3967,  2007,
         2019,  1041, 24290,  5776,  1012,   102])"
1226,1,"['confidence level', 'confidence interval', 'interval', 'estimate', 'point estimate', 'level', 'standard', 'standard error', 'confidence', 'error']", Confidence intervals for a proportion,seg_47,"using the standard error se = 0.012 from example 5.12, the point estimate 0.82, and z? = 1.96 for a 95% confidence level, the confidence interval is",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2478,  1996,  3115,  7561,  7367,  1027,  1014,  1012,  5890,
         2475,  2013,  2742,  1019,  1012,  2260,  1010,  1996,  2391, 10197,
         1014,  1012,  6445,  1010,  1998,  1062,  1029,  1027,  1015,  1012,
         5986,  2005,  1037,  5345,  1003,  7023,  2504,  1010,  1996,  7023,
        13483,  2003,   102])"
1227,1,['estimate'], Confidence intervals for a proportion,seg_47,"point estimate ± z? × se → 0.82 ± 1.96× 0.012 → (0.796, 0.844)",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2391, 10197,  1081,  1062,  1029,  1095,  7367,  1585,  1014,
         1012,  6445,  1081,  1015,  1012,  5986, 26306,  1014,  1012,  5890,
         2475,  1585,  1006,  1014,  1012,  6535,  2575,  1010,  1014,  1012,
         6391,  2549,  1007,   102])"
1228,1,['confident'], Confidence intervals for a proportion,seg_47,we are 95% confident that the proportion of new york adults in october 2014 who supported a quarantine for anyone who had come into contact with an ebola patient was between 0.796 and 0.844.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2057,  2024,  5345,  1003,  9657,  2008,  1996, 10817,  1997,
         2047,  2259,  6001,  1999,  2255,  2297,  2040,  3569,  1037, 24209,
        20486, 10196,  2005,  3087,  2040,  2018,  2272,  2046,  3967,  2007,
         2019,  1041, 24290,  5776,  2001,  2090,  1014,  1012,  6535,  2575,
         1998,  1014,  1012,  6391,  2549,  1012,   102])"
1229,1,"['interval', 'confidence', 'confidence interval']", Confidence intervals for a proportion,seg_47,answer the following two questions about the confidence interval from example 5.13:8,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  3437,  1996,  2206,  2048,  3980,  2055,  1996,  7023, 13483,
         2013,  2742,  1019,  1012,  2410,  1024,  1022,   102])"
1230,1,"['mean', 'confident']", Confidence intervals for a proportion,seg_47,(a) what does 95% confident mean in this context?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 1006, 1037, 1007, 2054, 2515, 5345, 1003, 9657, 2812, 1999, 2023,
        6123, 1029,  102])"
1231,1,"['interval', 'confidence', 'confidence interval']", Confidence intervals for a proportion,seg_47,(b) do you think the confidence interval is still valid for the opinions of new yorkers today?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1006,  1038,  1007,  2079,  2017,  2228,  1996,  7023, 13483,
         2003,  2145,  9398,  2005,  1996, 10740,  1997,  2047, 19095,  2015,
         2651,  1029,   102])"
1232,0,[], Confidence intervals for a proportion,seg_47,"in the pew research poll about solar energy, they also inquired about other forms of energy, and",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1999,  1996, 29071,  2470,  8554,  2055,  5943,  2943,  1010,
         2027,  2036, 24849,  2055,  2060,  3596,  1997,  2943,  1010,  1998,
          102])"
1233,0,[], Confidence intervals for a proportion,seg_47,9 84.8% of the 1000 respondents supported expanding the use of wind turbines.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1023,  6391,  1012,  1022,  1003,  1997,  1996,  6694, 25094,
         3569,  9186,  1996,  2224,  1997,  3612, 17396,  1012,   102])"
1234,1,['model'], Confidence intervals for a proportion,seg_47,(a) is it reasonable to model the proportion of us adults who support expanding wind turbines,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1006,  1037,  1007,  2003,  2009,  9608,  2000,  2944,  1996,
        10817,  1997,  2149,  6001,  2040,  2490,  9186,  3612, 17396,   102])"
1235,1,"['normal', 'normal distribution', 'distribution']", Confidence intervals for a proportion,seg_47,using a normal distribution?,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 2478, 1037, 3671, 4353, 1029,  102])"
1236,1,"['interval', 'confidence', 'confidence interval', 'level']", Confidence intervals for a proportion,seg_47,(b) create a 99% confidence interval for the level of american support for expanding the use of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1006,  1038,  1007,  3443,  1037,  5585,  1003,  7023, 13483,
         2005,  1996,  2504,  1997,  2137,  2490,  2005,  9186,  1996,  2224,
         1997,   102])"
1237,0,[], Confidence intervals for a proportion,seg_47,wind turbines for power generation.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  3612, 17396,  2005,  2373,  4245,  1012,   102])"
1238,1,"['cases', 'mean', 'confidence interval', 'interval', 'estimate', 'point estimate', 'confidence intervals', 'parameters', 'intervals', 'population', 'population mean', 'confidence', 'margin of error', 'error']", Confidence intervals for a proportion,seg_47,"we can also construct confidence intervals for other parameters, such as a population mean. in these cases, a confidence interval would be computed in a similar way to that of a single proportion: a point estimate plus/minus some margin of error. we’ll dive into these details in later chapters.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2057,  2064,  2036,  9570,  7023, 14025,  2005,  2060, 11709,
         1010,  2107,  2004,  1037,  2313,  2812,  1012,  1999,  2122,  3572,
         1010,  1037,  7023, 13483,  2052,  2022, 24806,  1999,  1037,  2714,
         2126,  2000,  2008,  1997,  1037,  2309, 10817,  1024,  1037,  2391,
        10197,  4606,  1013, 15718,  2070,  7785,  1997,  7561,  1012,  2057,
         1521,  2222, 11529,  2046,  2122,  4751,  1999,  2101,  9159,  1012,
          102])"
1239,1,"['intervals', 'confidence intervals', 'confidence']", Confidence intervals for a proportion,seg_47,5.2.5 interpreting confidence intervals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1016,  1012,  1019, 25455,  7023, 14025,   102])"
1240,1,"['intervals', 'confidence intervals', 'confidence', 'data']", Confidence intervals for a proportion,seg_47,"in each of the examples, we described the confidence intervals by putting them into the context of the data and also using somewhat formal language:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1999,  2169,  1997,  1996,  4973,  1010,  2057,  2649,  1996,
         7023, 14025,  2011,  5128,  2068,  2046,  1996,  6123,  1997,  1996,
         2951,  1998,  2036,  2478,  5399,  5337,  2653,  1024,   102])"
1241,1,['confident'], Confidence intervals for a proportion,seg_47,solar. we are 90% confident that 87.1% to 90.4% of american adults support the expansion of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 5943, 1012, 2057, 2024, 3938, 1003, 9657, 2008, 6584, 1012, 1015,
        1003, 2000, 3938, 1012, 1018, 1003, 1997, 2137, 6001, 2490, 1996, 4935,
        1997,  102])"
1242,0,[], Confidence intervals for a proportion,seg_47,solar power in 2018.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([ 101, 5943, 2373, 1999, 2760, 1012,  102])"
1243,1,['confident'], Confidence intervals for a proportion,seg_47,ebola. we are 95% confident that the proportion of new york adults in october 2014 who sup-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  1041, 24290,  1012,  2057,  2024,  5345,  1003,  9657,  2008,
         1996, 10817,  1997,  2047,  2259,  6001,  1999,  2255,  2297,  2040,
        10514,  2361,  1011,   102])"
1244,0,[], Confidence intervals for a proportion,seg_47,ported a quarantine for anyone who had come into contact with an ebola patient was between 0.796 and 0.844.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101, 27650,  1037, 24209, 20486, 10196,  2005,  3087,  2040,  2018,
         2272,  2046,  3967,  2007,  2019,  1041, 24290,  5776,  2001,  2090,
         1014,  1012,  6535,  2575,  1998,  1014,  1012,  6391,  2549,  1012,
          102])"
1245,1,['confident'], Confidence intervals for a proportion,seg_47,wind turbine. we are 99% confident the proportion of americans adults that support expanding,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  3612, 14027,  1012,  2057,  2024,  5585,  1003,  9657,  1996,
        10817,  1997,  4841,  6001,  2008,  2490,  9186,   102])"
1246,1,"['parameter', 'population']", Confidence intervals for a proportion,seg_47,"first, notice that the statements are always about the population parameter, which considers all american adults for the energy polls or all new york adults for the quarantine poll.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2034,  1010,  5060,  2008,  1996,  8635,  2024,  2467,  2055,
         1996,  2313, 16381,  1010,  2029, 10592,  2035,  2137,  6001,  2005,
         1996,  2943, 14592,  2030,  2035,  2047,  2259,  6001,  2005,  1996,
        24209, 20486, 10196,  8554,  1012,   102])"
1247,1,"['confidence level', 'parameter', 'probability', 'interval', 'level', 'population', 'confidence', 'error']", Confidence intervals for a proportion,seg_47,"we also avoided another common mistake: incorrect language might try to describe the confidence interval as capturing the population parameter with a certain probability. making a probability interpretation is a common error: while it might be useful to think of it as a probability, the confidence level only quantifies how plausible it is that the parameter is in the given interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2057,  2036,  9511,  2178,  2691,  6707,  1024, 16542,  2653,
         2453,  3046,  2000,  6235,  1996,  7023, 13483,  2004, 11847,  1996,
         2313, 16381,  2007,  1037,  3056,  9723,  1012,  2437,  1037,  9723,
         7613,  2003,  1037,  2691,  7561,  1024,  2096,  2009,  2453,  2022,
         6179,  2000,  2228,  1997,  2009,  2004,  1037,  9723,  1010,  1996,
         7023,  2504,  2069, 24110,  3775, 14213,  2129, 24286,  2009,  2003,
         2008,  1996, 16381,  2003,  1999,  1996,  2445, 13483,  1012,   102])"
1248,1,"['parameter', 'range', 'confidence interval', 'interval', 'observations', 'estimates', 'confidence intervals', 'parameters', 'intervals', 'population', 'point estimates', 'confidence']", Confidence intervals for a proportion,seg_47,another important consideration of confidence intervals is that they are only about the population parameter. a confidence interval says nothing about individual observations or point estimates. confidence intervals only provide a plausible range for population parameters.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  2178,  2590,  9584,  1997,  7023, 14025,  2003,  2008,  2027,
         2024,  2069,  2055,  1996,  2313, 16381,  1012,  1037,  7023, 13483,
         2758,  2498,  2055,  3265,  9420,  2030,  2391, 10035,  1012,  7023,
        14025,  2069,  3073,  1037, 24286,  2846,  2005,  2313, 11709,  1012,
          102])"
1249,1,"['bias', 'parameter', 'data set', 'set', 'population', 'sampling', 'data collection', 'sampling error', 'data', 'error']", Confidence intervals for a proportion,seg_47,"lastly, keep in mind the methods we discussed only apply to sampling error, not to bias. if a data set is collected in a way that will tend to systematically under-estimate (or over-estimate) the population parameter, the techniques we have discussed will not address that problem. instead, we rely on careful data collection procedures to help protect against bias in the examples we have considered, which is a common practice employed by data scientists to combat bias.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101, 22267,  1010,  2562,  1999,  2568,  1996,  4725,  2057,  6936,
         2069,  6611,  2000, 16227,  7561,  1010,  2025,  2000, 13827,  1012,
         2065,  1037,  2951,  2275,  2003,  5067,  1999,  1037,  2126,  2008,
         2097,  7166,  2000, 23087,  2104,  1011, 10197,  1006,  2030,  2058,
         1011, 10197,  1007,  1996,  2313, 16381,  1010,  1996,  5461,  2057,
         2031,  6936,  2097,  2025,  4769,  2008,  3291,  1012,  2612,  1010,
         2057, 11160,  2006,  6176,  2951,  3074,  8853,  2000,  2393,  4047,
         2114, 13827,  1999,  1996,  4973,  2057,  2031,  2641,  1010,  2029,
         2003,  1037,  2691,  3218,  4846,  2011,  2951,  6529,  2000,  4337,
        13827,  1012,   102])"
1250,1,"['interval', 'confidence', 'confidence interval', 'confident']", Confidence intervals for a proportion,seg_47,"consider the 90% confidence interval for the solar energy survey: 87.1% to 90.4%. if we ran the survey again, can we say that we’re 90% confident that the new survey’s proportion will be between 87.1% and 90.4%?10",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7023, 14025,  2005,  1037, 10817])","tensor([  101,  5136,  1996,  3938,  1003,  7023, 13483,  2005,  1996,  5943,
         2943,  5002,  1024,  6584,  1012,  1015,  1003,  2000,  3938,  1012,
         1018,  1003,  1012,  2065,  2057,  2743,  1996,  5002,  2153,  1010,
         2064,  2057,  2360,  2008,  2057,  1521,  2128,  3938,  1003,  9657,
         2008,  1996,  2047,  5002,  1521,  1055, 10817,  2097,  2022,  2090,
         6584,  1012,  1015,  1003,  1998,  3938,  1012,  1018,  1003,  1029,
         2184,   102])"
1251,0,[], Hypothesis testing for a proportion,seg_49,"the following question comes from a book written by hans rosling, anna rosling rönnlund, and ola rosling called factfulness:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  2206,  3160,  3310,  2013,  1037,  2338,  2517,  2011,
         7003, 20996, 28886,  1010,  4698, 20996, 28886,  6902, 20554,  8630,
         1010,  1998, 19330,  2050, 20996, 28886,  2170,  2755, 20938,  1024,
          102])"
1252,0,[], Hypothesis testing for a proportion,seg_49,how many of the world’s 1 year old children today have been vaccinated against some disease:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2129,  2116,  1997,  1996,  2088,  1521,  1055,  1015,  2095,
         2214,  2336,  2651,  2031,  2042, 12436, 14693, 23854,  2114,  2070,
         4295,  1024,   102])"
1253,0,[], Hypothesis testing for a proportion,seg_49,"write down what your answer (or guess), and when you’re ready, find the answer in the footnote.13",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  4339,  2091,  2054,  2115,  3437,  1006,  2030,  3984,  1007,
         1010,  1998,  2043,  2017,  1521,  2128,  3201,  1010,  2424,  1996,
         3437,  1999,  1996,  3329, 22074,  1012,  2410,   102])"
1254,1,"['hypothesis', 'tests', 'hypothesis tests']", Hypothesis testing for a proportion,seg_49,"in this section, we’ll be exploring how people with a 4-year college degree perform on this and other world health questions as we learn about hypothesis tests, which are a framework used to rigorously evaluate competing ideas and claims.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  2023,  2930,  1010,  2057,  1521,  2222,  2022, 11131,
         2129,  2111,  2007,  1037,  1018,  1011,  2095,  2267,  3014,  4685,
         2006,  2023,  1998,  2060,  2088,  2740,  3980,  2004,  2057,  4553,
         2055, 10744,  5852,  1010,  2029,  2024,  1037,  7705,  2109,  2000,
        20001,  2135, 16157,  6637,  4784,  1998,  4447,  1012,   102])"
1255,1,"['hypothesis testing', 'hypothesis']", Hypothesis testing for a proportion,seg_49,5.3.1 hypothesis testing framework,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1017,  1012,  1015, 10744,  5604,  7705,   102])"
1256,0,[], Hypothesis testing for a proportion,seg_49,"we’re interested in understanding how much people know about world health and development. if we take a multiple choice world health question, then we might like to understand if",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 2057, 1521, 2128, 4699, 1999, 4824, 2129, 2172, 2111, 2113, 2055,
        2088, 2740, 1998, 2458, 1012, 2065, 2057, 2202, 1037, 3674, 3601, 2088,
        2740, 3160, 1010, 2059, 2057, 2453, 2066, 2000, 3305, 2065,  102])"
1257,1,['random'], Hypothesis testing for a proportion,seg_49,h0: people never learn these particular topics and their responses are simply equivalent to random,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1044,  2692,  1024,  2111,  2196,  4553,  2122,  3327,  7832,
         1998,  2037, 10960,  2024,  3432,  5662,  2000,  6721,   102])"
1258,1,['random'], Hypothesis testing for a proportion,seg_49,"ha: people have knowledge that helps them do better than random guessing, or perhaps, they have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  5292,  1024,  2111,  2031,  3716,  2008,  7126,  2068,  2079,
         2488,  2084,  6721, 16986,  1010,  2030,  3383,  1010,  2027,  2031,
          102])"
1259,1,['random'], Hypothesis testing for a proportion,seg_49,false knowledge that leads them to actually do worse than random guessing.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  6270,  3716,  2008,  5260,  2068,  2000,  2941,  2079,  4788,
         2084,  6721, 16986,  1012,   102])"
1260,1,"['hypotheses', 'hypothesis', 'alternative hypothesis', 'null hypothesis', 'data']", Hypothesis testing for a proportion,seg_49,"these competing ideas are called hypotheses. we callh0 the null hypothesis andha the alternative hypothesis. when there is a subscript 0 like in h0, data scientists pronounce it as “nought” (e.g. h0 is pronounced “h-nought”).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2122,  6637,  4784,  2024,  2170,  1044, 22571, 14573, 23072,
         1012,  2057,  2655,  2232,  2692,  1996, 19701, 10744,  1998,  3270,
         1996,  4522, 10744,  1012,  2043,  2045,  2003,  1037,  4942, 22483,
         1014,  2066,  1999,  1044,  2692,  1010,  2951,  6529,  4013,  3630,
        17457,  2009,  2004,  1523,  2053, 18533,  1524,  1006,  1041,  1012,
         1043,  1012,  1044,  2692,  2003,  8793,  1523,  1044,  1011,  2053,
        18533,  1524,  1007,  1012,   102])"
1261,1,"['parameter', 'range', 'hypothesis', 'alternative hypothesis', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,the null hypothesis (h0) often represents a skeptical perspective or a claim to be tested. the alternative hypothesis (ha) represents an alternative claim under consideration and is often represented by a range of possible parameter values.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996, 19701, 10744,  1006,  1044,  2692,  1007,  2411,  5836,
         1037, 18386,  7339,  2030,  1037,  4366,  2000,  2022,  7718,  1012,
         1996,  4522, 10744,  1006,  5292,  1007,  5836,  2019,  4522,  4366,
         2104,  9584,  1998,  2003,  2411,  3421,  2011,  1037,  2846,  1997,
         2825, 16381,  5300,  1012,   102])"
1262,1,"['alternative hypothesis', 'hypothesis', 'data']", Hypothesis testing for a proportion,seg_49,"our job as data scientists is to play the role of a skeptic: before we buy into the alternative hypothesis, we need to see strong supporting evidence.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2256,  3105,  2004,  2951,  6529,  2003,  2000,  2377,  1996,
         2535,  1997,  1037, 15315, 23606,  2594,  1024,  2077,  2057,  4965,
         2046,  1996,  4522, 10744,  1010,  2057,  2342,  2000,  2156,  2844,
         4637,  3350,  1012,   102])"
1263,1,"['null hypothesis', 'random', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"the null hypothesis often represents a skeptical position or a perspective of “no difference”. in our first example, we’ll consider whether the typical person does any different than random guessing on roslings’ question about infant vaccinations.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996, 19701, 10744,  2411,  5836,  1037, 18386,  2597,  2030,
         1037,  7339,  1997,  1523,  2053,  4489,  1524,  1012,  1999,  2256,
         2034,  2742,  1010,  2057,  1521,  2222,  5136,  3251,  1996,  5171,
         2711,  2515,  2151,  2367,  2084,  6721, 16986,  2006, 20996, 28886,
         2015,  1521,  3160,  2055, 10527, 12436, 14693,  9323,  2015,  1012,
          102])"
1264,1,"['mean', 'information', 'hypothesis', 'random', 'alternative hypothesis', 'statistics', 'case']", Hypothesis testing for a proportion,seg_49,"the alternative hypothesis generally represents a new or stronger perspective. in the case of the question about infant vaccinations, it would certainly be interesting to learn whether people do better than random guessing, since that would mean that the typical person knows something about world health statistics. it would also be very interesting if we learned that people do worse than random guessing, which would suggest people believe incorrect information about world health.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  4522, 10744,  3227,  5836,  1037,  2047,  2030,  6428,
         7339,  1012,  1999,  1996,  2553,  1997,  1996,  3160,  2055, 10527,
        12436, 14693,  9323,  2015,  1010,  2009,  2052,  5121,  2022,  5875,
         2000,  4553,  3251,  2111,  2079,  2488,  2084,  6721, 16986,  1010,
         2144,  2008,  2052,  2812,  2008,  1996,  5171,  2711,  4282,  2242,
         2055,  2088,  2740,  6747,  1012,  2009,  2052,  2036,  2022,  2200,
         5875,  2065,  2057,  4342,  2008,  2111,  2079,  4788,  2084,  6721,
        16986,  1010,  2029,  2052,  6592,  2111,  2903, 16542,  2592,  2055,
         2088,  2740,  1012,   102])"
1265,1,"['set', 'hypothesis', 'hypothesis testing', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"the hypothesis testing framework is a very general tool, and we often use it without a second thought. if a person makes a somewhat unbelievable claim, we are initially skeptical. however, if there is sufficient evidence that supports the claim, we set aside our skepticism and reject the null hypothesis in favor of the alternative. the hallmarks of hypothesis testing are also found in the us court system.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996, 10744,  5604,  7705,  2003,  1037,  2200,  2236,  6994,
         1010,  1998,  2057,  2411,  2224,  2009,  2302,  1037,  2117,  2245,
         1012,  2065,  1037,  2711,  3084,  1037,  5399, 23653,  4366,  1010,
         2057,  2024,  3322, 18386,  1012,  2174,  1010,  2065,  2045,  2003,
         7182,  3350,  2008,  6753,  1996,  4366,  1010,  2057,  2275,  4998,
         2256, 27936,  1998, 15454,  1996, 19701, 10744,  1999,  5684,  1997,
         1996,  4522,  1012,  1996, 25812,  2015,  1997, 10744,  5604,  2024,
         2036,  2179,  1999,  1996,  2149,  2457,  2291,  1012,   102])"
1266,1,"['set', 'null hypothesis', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"a us court considers two possible claims about a defendant: she is either innocent or guilty. if we set these claims up in a hypothesis framework, which would be the null hypothesis and which the alternative?14",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1037,  2149,  2457, 10592,  2048,  2825,  4447,  2055,  1037,
        13474,  1024,  2016,  2003,  2593,  7036,  2030,  5905,  1012,  2065,
         2057,  2275,  2122,  4447,  2039,  1999,  1037, 10744,  7705,  1010,
         2029,  2052,  2022,  1996, 19701, 10744,  1998,  2029,  1996,  4522,
         1029,  2403,   102])"
1267,1,"['mean', 'hypothesis', 'alternative hypothesis', 'hypothesis testing', 'null hypothesis', 'case']", Hypothesis testing for a proportion,seg_49,"jurors examine the evidence to see whether it convincingly shows a defendant is guilty. even if the jurors leave unconvinced of guilt beyond a reasonable doubt, this does not mean they believe the defendant is innocent. this is also the case with hypothesis testing: even if we fail to reject the null hypothesis, we typically do not accept the null hypothesis as true. failing to find strong evidence for the alternative hypothesis is not equivalent to accepting the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 18414, 29165,  2015, 11628,  1996,  3350,  2000,  2156,  3251,
         2009, 13359,  2135,  3065,  1037, 13474,  2003,  5905,  1012,  2130,
         2065,  1996, 18414, 29165,  2015,  2681,  4895,  8663,  6371, 11788,
         1997,  8056,  3458,  1037,  9608,  4797,  1010,  2023,  2515,  2025,
         2812,  2027,  2903,  1996, 13474,  2003,  7036,  1012,  2023,  2003,
         2036,  1996,  2553,  2007, 10744,  5604,  1024,  2130,  2065,  2057,
         8246,  2000, 15454,  1996, 19701, 10744,  1010,  2057,  4050,  2079,
         2025,  5138,  1996, 19701, 10744,  2004,  2995,  1012,  7989,  2000,
         2424,  2844,  3350,  2005,  1996,  4522, 10744,  2003,  2025,  5662,
         2000, 10564,  1996, 19701, 10744,  1012,   102])"
1268,1,"['hypotheses', 'hypothesis', 'random', 'alternative hypothesis', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"when considering roslings’ question about infant vaccination, the null hypothesis represents the notion that the people we will be considering – college-educated adults – are as accurate as random guessing. that is, the proportion p of respondents who pick the correct answer, that 80% of 1 year olds have been vaccinated against some disease, is about 33.3% (or 1-in-3 if wanting to be perfectly precise). the alternative hypothesis is that this proportion is something other than 33.3%. while it’s helpful to write these hypotheses in words, it can be useful to write them using mathematical notation:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043,  6195, 20996, 28886,  2015,  1521,  3160,  2055, 10527,
        12436, 14693,  9323,  1010,  1996, 19701, 10744,  5836,  1996,  9366,
         2008,  1996,  2111,  2057,  2097,  2022,  6195,  1516,  2267,  1011,
         5161,  6001,  1516,  2024,  2004,  8321,  2004,  6721, 16986,  1012,
         2008,  2003,  1010,  1996, 10817,  1052,  1997, 25094,  2040,  4060,
         1996,  6149,  3437,  1010,  2008,  3770,  1003,  1997,  1015,  2095,
        19457,  2031,  2042, 12436, 14693, 23854,  2114,  2070,  4295,  1010,
         2003,  2055,  3943,  1012,  1017,  1003,  1006,  2030,  1015,  1011,
         1999,  1011,  1017,  2065,  5782,  2000,  2022,  6669, 10480,  1007,
         1012,  1996,  4522, 10744,  2003,  2008,  2023, 10817,  2003,  2242,
         2060,  2084,  3943,  1012,  1017,  1003,  1012,  2096,  2009,  1521,
         1055, 14044,  2000,  4339,  2122,  1044, 22571, 14573, 23072,  1999,
         2616,  1010,  2009,  2064,  2022,  6179,  2000,  4339,  2068,  2478,
         8045, 14869,  1024,   102])"
1269,1,"['parameter', 'null value', 'hypothesis', 'population', 'case']", Hypothesis testing for a proportion,seg_49,"in this hypothesis setup, we want to make a conclusion about the population parameter p. the value we are comparing the parameter to is called the null value, which in this case is 0.333. it’s common to label the null value with the same symbol as the parameter but with a subscript ‘0’. that is, in this case, the null value is p0 = 0.333 (pronounced “p-nought equals 0.333”).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  2023, 10744, 16437,  1010,  2057,  2215,  2000,  2191,
         1037,  7091,  2055,  1996,  2313, 16381,  1052,  1012,  1996,  3643,
         2057,  2024, 13599,  1996, 16381,  2000,  2003,  2170,  1996, 19701,
         3643,  1010,  2029,  1999,  2023,  2553,  2003,  1014,  1012, 21211,
         1012,  2009,  1521,  1055,  2691,  2000,  3830,  1996, 19701,  3643,
         2007,  1996,  2168,  6454,  2004,  1996, 16381,  2021,  2007,  1037,
         4942, 22483,  1520,  1014,  1521,  1012,  2008,  2003,  1010,  1999,
         2023,  2553,  1010,  1996, 19701,  3643,  2003,  1052,  2692,  1027,
         1014,  1012, 21211,  1006,  8793,  1523,  1052,  1011,  2053, 18533,
        19635,  1014,  1012, 21211,  1524,  1007,  1012,   102])"
1270,1,"['null hypothesis', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"it may seem impossible that the proportion of people who get the correct answer is exactly 33.3%. if we don’t believe the null hypothesis, should we simply reject it?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2009,  2089,  4025,  5263,  2008,  1996, 10817,  1997,  2111,
         2040,  2131,  1996,  6149,  3437,  2003,  3599,  3943,  1012,  1017,
         1003,  1012,  2065,  2057,  2123,  1521,  1056,  2903,  1996, 19701,
        10744,  1010,  2323,  2057,  3432, 15454,  2009,  1029,   102])"
1271,1,"['hypothesis', 'hypothesis testing', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"no. while we may not buy into the notion that the proportion is exactly 33.3%, the hypothesis testing framework requires that there be strong evidence before we reject the null hypothesis and conclude something more interesting.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2053,  1012,  2096,  2057,  2089,  2025,  4965,  2046,  1996,
         9366,  2008,  1996, 10817,  2003,  3599,  3943,  1012,  1017,  1003,
         1010,  1996, 10744,  5604,  7705,  5942,  2008,  2045,  2022,  2844,
         3350,  2077,  2057, 15454,  1996, 19701, 10744,  1998, 16519,  2242,
         2062,  5875,  1012,   102])"
1272,1,"['random', 'data']", Hypothesis testing for a proportion,seg_49,"after all, even if we don’t believe the proportion is exactly 33.3%, that doesn’t really tell us anything useful! we would still be stuck with the original question: do people do better or worse than random guessing on roslings’ question? without data that strongly points in one direction or the other, it is both uninteresting and pointless to reject h0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2044,  2035,  1010,  2130,  2065,  2057,  2123,  1521,  1056,
         2903,  1996, 10817,  2003,  3599,  3943,  1012,  1017,  1003,  1010,
         2008,  2987,  1521,  1056,  2428,  2425,  2149,  2505,  6179,   999,
         2057,  2052,  2145,  2022,  5881,  2007,  1996,  2434,  3160,  1024,
         2079,  2111,  2079,  2488,  2030,  4788,  2084,  6721, 16986,  2006,
        20996, 28886,  2015,  1521,  3160,  1029,  2302,  2951,  2008,  6118,
         2685,  1999,  2028,  3257,  2030,  1996,  2060,  1010,  2009,  2003,
         2119,  4895, 18447, 18702,  3436,  1998, 23100,  2000, 15454,  1044,
         2692,  1012,   102])"
1273,1,"['null and alternative hypotheses', 'hypotheses', 'alternative hypotheses', 'hypothesis', 'hypothesis testing', 'evaluating']", Hypothesis testing for a proportion,seg_49,another example of a real-world hypothesis testing situation is evaluating whether a new drug is better or worse than an existing drug at treating a particular disease. what should we use for the null and alternative hypotheses in this case?15,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2178,  2742,  1997,  1037,  2613,  1011,  2088, 10744,  5604,
         3663,  2003, 23208,  3251,  1037,  2047,  4319,  2003,  2488,  2030,
         4788,  2084,  2019,  4493,  4319,  2012, 12318,  1037,  3327,  4295,
         1012,  2054,  2323,  2057,  2224,  2005,  1996, 19701,  1998,  4522,
         1044, 22571, 14573, 23072,  1999,  2023,  2553,  1029,  2321,   102])"
1274,1,"['hypotheses', 'intervals', 'confidence intervals', 'confidence']", Hypothesis testing for a proportion,seg_49,5.3.2 testing hypotheses using confidence intervals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1017,  1012,  1016,  5604,  1044, 22571, 14573,
        23072,  2478,  7023, 14025,   102])"
1275,1,"['set', 'hypothesis', 'hypothesis test', 'evaluating', 'data set', 'data', 'test']", Hypothesis testing for a proportion,seg_49,"we will use the rosling responses data set to evaluate the hypothesis test evaluating whether college-educated adults who get the question about infant vaccination correct is different from 33.3%. this data set summarizes the answers of 50 college-educated adults. of these 50 adults, 24% of respondents got the question correct that 80% of 1 year olds have been vaccinated against some disease.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2057,  2097,  2224,  1996, 20996, 28886, 10960,  2951,  2275,
         2000, 16157,  1996, 10744,  3231, 23208,  3251,  2267,  1011,  5161,
         6001,  2040,  2131,  1996,  3160,  2055, 10527, 12436, 14693,  9323,
         6149,  2003,  2367,  2013,  3943,  1012,  1017,  1003,  1012,  2023,
         2951,  2275,  7680,  7849, 10057,  1996,  6998,  1997,  2753,  2267,
         1011,  5161,  6001,  1012,  1997,  2122,  2753,  6001,  1010,  2484,
         1003,  1997, 25094,  2288,  1996,  3160,  6149,  2008,  3770,  1003,
         1997,  1015,  2095, 19457,  2031,  2042, 12436, 14693, 23854,  2114,
         2070,  4295,  1012,   102])"
1276,1,['data'], Hypothesis testing for a proportion,seg_49,"up until now, our discussion has been philosophical. however, now that we have data, we might ask ourselves: does the data provide strong evidence that the proportion of all college-educated adults who would answer this question correctly is different than 33.3%?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2039,  2127,  2085,  1010,  2256,  6594,  2038,  2042,  9569,
         1012,  2174,  1010,  2085,  2008,  2057,  2031,  2951,  1010,  2057,
         2453,  3198,  9731,  1024,  2515,  1996,  2951,  3073,  2844,  3350,
         2008,  1996, 10817,  1997,  2035,  2267,  1011,  5161,  6001,  2040,
         2052,  3437,  2023,  3160, 11178,  2003,  2367,  2084,  3943,  1012,
         1017,  1003,  1029,   102])"
1277,1,"['deviation', 'sample', 'population', 'data']", Hypothesis testing for a proportion,seg_49,"we learned in section 5.1 that there is fluctuation from one sample to another, and it is unlikely that our sample proportion, p̂, will exactly equal p, but we want to make a conclusion about p. we have a nagging concern: is this deviation of 24% from 33.3% simply due to chance, or does the data provide strong evidence that the population proportion is different from 33.3%?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2057,  4342,  1999,  2930,  1019,  1012,  1015,  2008,  2045,
         2003, 19857,  6593, 14505,  2013,  2028,  7099,  2000,  2178,  1010,
         1998,  2009,  2003,  9832,  2008,  2256,  7099, 10817,  1010,  1052,
         1010,  2097,  3599,  5020,  1052,  1010,  2021,  2057,  2215,  2000,
         2191,  1037,  7091,  2055,  1052,  1012,  2057,  2031,  1037,  6583,
        12588,  5142,  1024,  2003,  2023, 24353,  1997,  2484,  1003,  2013,
         3943,  1012,  1017,  1003,  3432,  2349,  2000,  3382,  1010,  2030,
         2515,  1996,  2951,  3073,  2844,  3350,  2008,  1996,  2313, 10817,
         2003,  2367,  2013,  3943,  1012,  1017,  1003,  1029,   102])"
1278,1,"['variability', 'uncertainty', 'estimate', 'hypothesis', 'method', 'measuring', 'intervals', 'hypothesis test', 'confidence intervals', 'confidence', 'test']", Hypothesis testing for a proportion,seg_49,"in section 5.2, we learned how to quantify the uncertainty in our estimate using confidence intervals. the same method for measuring variability can be useful for the hypothesis test.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  2930,  1019,  1012,  1016,  1010,  2057,  4342,  2129,
         2000, 24110, 27351,  1996, 12503,  1999,  2256, 10197,  2478,  7023,
        14025,  1012,  1996,  2168,  4118,  2005,  9854, 28436,  2064,  2022,
         6179,  2005,  1996, 10744,  3231,  1012,   102])"
1279,1,"['confidence interval', 'interval', 'sample', 'confidence', 'data']", Hypothesis testing for a proportion,seg_49,"check whether it is reasonable to construct a confidence interval for p using the sample data, and if so, construct a 95% confidence interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  4638,  3251,  2009,  2003,  9608,  2000,  9570,  1037,  7023,
        13483,  2005,  1052,  2478,  1996,  7099,  2951,  1010,  1998,  2065,
         2061,  1010,  9570,  1037,  5345,  1003,  7023, 13483,  1012,   102])"
1280,1,"['random sample', 'independence', 'sample', 'random', 'normal', 'condition', 'simple random sample', 'data']", Hypothesis testing for a proportion,seg_49,"the conditions are met for p̂ to be approximately normal: the data come from a simple random sample (satisfies independence), and np̂ = 12 and n(1− p̂) = 38 are both at least 10 (success-failure condition).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  3785,  2024,  2777,  2005,  1052,  2000,  2022,  3155,
         3671,  1024,  1996,  2951,  2272,  2013,  1037,  3722,  6721,  7099,
         1006,  2938,  2483, 14213,  4336,  1007,  1010,  1998, 27937,  1027,
         2260,  1998,  1050,  1006,  1015, 22543,  1052,  1007,  1027,  4229,
         2024,  2119,  2012,  2560,  2184,  1006,  3112,  1011,  4945,  4650,
         1007,  1012,   102])"
1281,1,"['confidence level', 'confidence interval', 'interval', 'estimate', 'point estimate', 'level', 'confidence', 'standard', 'standard error', 'critical value', 'error']", Hypothesis testing for a proportion,seg_49,"to construct the confidence interval, we will need to identify the point estimate (p̂ = 0.24), the critical value for the 95% confidence level (z? = 1.96), and the standard error of p̂ (sep̂ = √p̂(1− p̂)/n = 0.060). with those pieces, the confidence interval for p can be constructed:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2000,  9570,  1996,  7023, 13483,  1010,  2057,  2097,  2342,
         2000,  6709,  1996,  2391, 10197,  1006,  1052,  1027,  1014,  1012,
         2484,  1007,  1010,  1996,  4187,  3643,  2005,  1996,  5345,  1003,
         7023,  2504,  1006,  1062,  1029,  1027,  1015,  1012,  5986,  1007,
         1010,  1998,  1996,  3115,  7561,  1997,  1052,  1006, 19802,  1027,
         1600,  2361,  1006,  1015, 22543,  1052,  1007,  1013,  1050,  1027,
         1014,  1012,  5757,  2692,  1007,  1012,  2007,  2216,  4109,  1010,
         1996,  7023, 13483,  2005,  1052,  2064,  2022,  3833,  1024,   102])"
1282,1,['confident'], Hypothesis testing for a proportion,seg_49,we are 95% confident that the proportion of all college-educated adults to correctly answer this particular question about infant vaccination is between 12.2% and 35.8%.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2057,  2024,  5345,  1003,  9657,  2008,  1996, 10817,  1997,
         2035,  2267,  1011,  5161,  6001,  2000, 11178,  3437,  2023,  3327,
         3160,  2055, 10527, 12436, 14693,  9323,  2003,  2090,  2260,  1012,
         1016,  1003,  1998,  3486,  1012,  1022,  1003,  1012,   102])"
1283,1,"['range', 'confidence interval', 'interval', 'null value', 'hypothesis', 'random', 'hypothesis test', 'null hypothesis', 'confidence', 'data', 'test']", Hypothesis testing for a proportion,seg_49,"because the null value in the hypothesis test is p0 = 0.333, which falls within the range of plausible values from the confidence interval, we cannot say the null value is implausible.16 that is, the data do not provide sufficient evidence to reject the notion that the performance of collegeeducated adults was different than random guessing, and we do not reject the null hypothesis, h0.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2138,  1996, 19701,  3643,  1999,  1996, 10744,  3231,  2003,
         1052,  2692,  1027,  1014,  1012, 21211,  1010,  2029,  4212,  2306,
         1996,  2846,  1997, 24286,  5300,  2013,  1996,  7023, 13483,  1010,
         2057,  3685,  2360,  1996, 19701,  3643,  2003, 17727, 28128,  7028,
         1012,  2385,  2008,  2003,  1010,  1996,  2951,  2079,  2025,  3073,
         7182,  3350,  2000, 15454,  1996,  9366,  2008,  1996,  2836,  1997,
         2267,  2098, 18100,  3064,  6001,  2001,  2367,  2084,  6721, 16986,
         1010,  1998,  2057,  2079,  2025, 15454,  1996, 19701, 10744,  1010,
         1044,  2692,  1012,   102])"
1284,0,[], Hypothesis testing for a proportion,seg_49,explain why we cannot conclude that college-educated adults simply guessed on the infant vaccination question.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  4863,  2339,  2057,  3685, 16519,  2008,  2267,  1011,  5161,
         6001,  3432, 11445,  2006,  1996, 10527, 12436, 14693,  9323,  3160,
         1012,   102])"
1285,1,"['mean', 'hypothesis', 'sample', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"while we failed to reject h0, that does not necessarily mean the null hypothesis is true. perhaps there was an actual difference, but we were not able to detect it with the relatively small sample of 50.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2096,  2057,  3478,  2000, 15454,  1044,  2692,  1010,  2008,
         2515,  2025,  9352,  2812,  1996, 19701, 10744,  2003,  2995,  1012,
         3383,  2045,  2001,  2019,  5025,  4489,  1010,  2021,  2057,  2020,
         2025,  2583,  2000, 11487,  2009,  2007,  1996,  4659,  2235,  7099,
         1997,  2753,  1012,   102])"
1286,1,"['statistical', 'null hypothesis', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"in many statistical explanations, we use double negatives. for instance, we might say that the null hypothesis is not implausible or we failed to reject the null hypothesis. double negatives are used to communicate that while we are not rejecting a position, we are also not saying it is correct.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  2116,  7778, 17959,  1010,  2057,  2224,  3313,  4997,
         2015,  1012,  2005,  6013,  1010,  2057,  2453,  2360,  2008,  1996,
        19701, 10744,  2003,  2025, 17727, 28128,  7028,  2030,  2057,  3478,
         2000, 15454,  1996, 19701, 10744,  1012,  3313,  4997,  2015,  2024,
         2109,  2000, 10639,  2008,  2096,  2057,  2024,  2025, 21936,  1037,
         2597,  1010,  2057,  2024,  2036,  2025,  3038,  2009,  2003,  6149,
         1012,   102])"
1287,0,[], Hypothesis testing for a proportion,seg_49,let’s move onto a second question posed by the roslings:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2292,  1521,  1055,  2693,  3031,  1037,  2117,  3160, 13686,
         2011,  1996, 20996, 28886,  2015,  1024,   102])"
1288,0,[], Hypothesis testing for a proportion,seg_49,"there are 2 billion children in the world today aged 0-15 years old, how many children will there be in year 2100 according to the united nations?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2045,  2024,  1016,  4551,  2336,  1999,  1996,  2088,  2651,
         4793,  1014,  1011,  2321,  2086,  2214,  1010,  2129,  2116,  2336,
         2097,  2045,  2022,  1999,  2095, 12875,  2692,  2429,  2000,  1996,
         2142,  3741,  1029,   102])"
1289,1,"['random', 'hypotheses']", Hypothesis testing for a proportion,seg_49,"set up appropriate hypotheses to evaluate whether college-educated adults are better than random guessing on this question. also, see if you can guess the correct answer before checking the answer in the footnote!17",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2275,  2039,  6413,  1044, 22571, 14573, 23072,  2000, 16157,
         3251,  2267,  1011,  5161,  6001,  2024,  2488,  2084,  6721, 16986,
         2006,  2023,  3160,  1012,  2036,  1010,  2156,  2065,  2017,  2064,
         3984,  1996,  6149,  3437,  2077,  9361,  1996,  3437,  1999,  1996,
         3329, 22074,   999,  2459,   102])"
1290,1,"['normal distribution', 'sample', 'normal', 'distribution', 'model', 'confidence']", Hypothesis testing for a proportion,seg_49,"this time we took a larger sample of 228 college-educated adults, 34 (14.9%) selected the correct answer to the question in guided practice 5.22: 2 billion. can we model the sample proportion using a normal distribution and construct a confidence interval?18",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2023,  2051,  2057,  2165,  1037,  3469,  7099,  1997, 22238,
         2267,  1011,  5161,  6001,  1010,  4090,  1006,  2403,  1012,  1023,
         1003,  1007,  3479,  1996,  6149,  3437,  2000,  1996,  3160,  1999,
         8546,  3218,  1019,  1012,  2570,  1024,  1016,  4551,  1012,  2064,
         2057,  2944,  1996,  7099, 10817,  2478,  1037,  3671,  4353,  1998,
         9570,  1037,  7023, 13483,  1029,  2324,   102])"
1291,1,"['interval', 'hypotheses', 'confidence interval', 'confidence']", Hypothesis testing for a proportion,seg_49,"compute a 95% confidence interval for the fraction of college-educated adults who answered the children-in-2100 question correctly, and evaluate the hypotheses in guided practice 5.22.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 24134,  1037,  5345,  1003,  7023, 13483,  2005,  1996, 12884,
         1997,  2267,  1011,  5161,  6001,  2040,  4660,  1996,  2336,  1011,
         1999,  1011, 12875,  2692,  3160, 11178,  1010,  1998, 16157,  1996,
         1044, 22571, 14573, 23072,  1999,  8546,  3218,  1019,  1012,  2570,
         1012,   102])"
1292,1,"['standard error', 'standard', 'error']", Hypothesis testing for a proportion,seg_49,"to compute the standard error, we’ll again use p̂ in place of p for the calculation:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2000, 24134,  1996,  3115,  7561,  1010,  2057,  1521,  2222,
         2153,  2224,  1052,  1999,  2173,  1997,  1052,  2005,  1996, 17208,
         1024,   102])"
1293,1,"['confidence interval', 'normal distribution', 'interval', 'normal', 'distribution', 'confidence']", Hypothesis testing for a proportion,seg_49,"in guided practice 5.23, we found that p̂ can be modeled using a normal distribution, which ensures a 95% confidence interval may be accurately constructed as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  8546,  3218,  1019,  1012,  2603,  1010,  2057,  2179,
         2008,  1052,  2064,  2022, 14440,  2478,  1037,  3671,  4353,  1010,
         2029, 21312,  1037,  5345,  1003,  7023, 13483,  2089,  2022, 14125,
         3833,  2004,   102])"
1294,1,"['confidence interval', 'data', 'interval', 'null value', 'hypothesis', 'random', 'statistically significant', 'population', 'null hypothesis', 'confidence']", Hypothesis testing for a proportion,seg_49,"because the null value, p0 = 0.333, is not in the confidence interval, a population proportion of 0.333 is implausible and we reject the null hypothesis. that is, the data provide statistically significant evidence that the actual proportion of college adults who get the children-in-2100 question correct is different from random guessing. because the entire 95% confidence interval is below 0.333, we can conclude college-educated adults do worse than random guessing on this question.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2138,  1996, 19701,  3643,  1010,  1052,  2692,  1027,  1014,
         1012, 21211,  1010,  2003,  2025,  1999,  1996,  7023, 13483,  1010,
         1037,  2313, 10817,  1997,  1014,  1012, 21211,  2003, 17727, 28128,
         7028,  1998,  2057, 15454,  1996, 19701, 10744,  1012,  2008,  2003,
         1010,  1996,  2951,  3073,  7778,  2135,  3278,  3350,  2008,  1996,
         5025, 10817,  1997,  2267,  6001,  2040,  2131,  1996,  2336,  1011,
         1999,  1011, 12875,  2692,  3160,  6149,  2003,  2367,  2013,  6721,
        16986,  1012,  2138,  1996,  2972,  5345,  1003,  7023, 13483,  2003,
         2917,  1014,  1012, 21211,  1010,  2057,  2064, 16519,  2267,  1011,
         5161,  6001,  2079,  4788,  2084,  6721, 16986,  2006,  2023,  3160,
         1012,   102])"
1295,1,"['confidence level', 'confidence interval', 'interval', 'level', 'confidence']", Hypothesis testing for a proportion,seg_49,"one subtle consideration is that we used a 95% confidence interval. what if we had used a 99% confidence level? or even a 99.9% confidence level? it’s possible to come to a different conclusion if using a different confidence level. therefore, when we make a conclusion based on confidence interval, we should also be sure it is clear what confidence level we used.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2028, 11259,  9584,  2003,  2008,  2057,  2109,  1037,  5345,
         1003,  7023, 13483,  1012,  2054,  2065,  2057,  2018,  2109,  1037,
         5585,  1003,  7023,  2504,  1029,  2030,  2130,  1037,  5585,  1012,
         1023,  1003,  7023,  2504,  1029,  2009,  1521,  1055,  2825,  2000,
         2272,  2000,  1037,  2367,  7091,  2065,  2478,  1037,  2367,  7023,
         2504,  1012,  3568,  1010,  2043,  2057,  2191,  1037,  7091,  2241,
         2006,  7023, 13483,  1010,  2057,  2323,  2036,  2022,  2469,  2009,
         2003,  3154,  2054,  7023,  2504,  2057,  2109,  1012,   102])"
1296,1,['random'], Hypothesis testing for a proportion,seg_49,"the worse-than-random performance on this last question is not a fluke: there are many such world health questions where people do worse than random guessing. in general, the answers suggest that people tend to be more pessimistic about progress than reality suggests. this topic is discussed in much greater detail in the roslings’ book, factfulness.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  4788,  1011,  2084,  1011,  6721,  2836,  2006,  2023,
         2197,  3160,  2003,  2025,  1037, 19857,  3489,  1024,  2045,  2024,
         2116,  2107,  2088,  2740,  3980,  2073,  2111,  2079,  4788,  2084,
         6721, 16986,  1012,  1999,  2236,  1010,  1996,  6998,  6592,  2008,
         2111,  7166,  2000,  2022,  2062, 21877, 18719, 23738,  2594,  2055,
         5082,  2084,  4507,  6083,  1012,  2023,  8476,  2003,  6936,  1999,
         2172,  3618,  6987,  1999,  1996, 20996, 28886,  2015,  1521,  2338,
         1010,  2755, 20938,  1012,   102])"
1297,1,['errors'], Hypothesis testing for a proportion,seg_49,5.3.3 decision errors,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1017,  1012,  1017,  3247, 10697,   102])"
1298,1,"['statistical hypothesis', 'hypothesis tests', 'hypothesis', 'tests', 'errors', 'hypothesis test', 'statistical', 'data', 'test']", Hypothesis testing for a proportion,seg_49,"hypothesis tests are not flawless: we can make an incorrect decision in a statistical hypothesis test based on the data. for example, in the court system innocent people are sometimes wrongly convicted and the guilty sometimes walk free. one key distinction with statistical hypothesis tests is that we have the tools necessary to probabilistically quantify how often we make errors in our conclusions.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 10744,  5852,  2024,  2025, 27503,  1024,  2057,  2064,  2191,
         2019, 16542,  3247,  1999,  1037,  7778, 10744,  3231,  2241,  2006,
         1996,  2951,  1012,  2005,  2742,  1010,  1999,  1996,  2457,  2291,
         7036,  2111,  2024,  2823, 29116,  7979,  1998,  1996,  5905,  2823,
         3328,  2489,  1012,  2028,  3145,  7835,  2007,  7778, 10744,  5852,
         2003,  2008,  2057,  2031,  1996,  5906,  4072,  2000,  4013,  3676,
        27965, 25084, 24110, 27351,  2129,  2411,  2057,  2191, 10697,  1999,
         2256, 15306,  1012,   102])"
1299,1,"['hypotheses', 'hypothesis test', 'hypothesis', 'test']", Hypothesis testing for a proportion,seg_49,"recall that there are two competing hypotheses: the null and the alternative. in a hypothesis test, we make a statement about which one might be true, but we might choose incorrectly. there are four possible scenarios, which are summarized in figure 5.8.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  9131,  2008,  2045,  2024,  2048,  6637,  1044, 22571, 14573,
        23072,  1024,  1996, 19701,  1998,  1996,  4522,  1012,  1999,  1037,
        10744,  3231,  1010,  2057,  2191,  1037,  4861,  2055,  2029,  2028,
         2453,  2022,  2995,  1010,  2021,  2057,  2453,  5454, 19721,  1012,
         2045,  2024,  2176,  2825, 16820,  1010,  2029,  2024, 22539,  1999,
         3275,  1019,  1012,  1022,  1012,   102])"
1300,0,[], Hypothesis testing for a proportion,seg_49,do not reject h0 reject h0 in favor of ha,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2079,  2025, 15454,  1044,  2692, 15454,  1044,  2692,  1999,
         5684,  1997,  5292,   102])"
1301,1,"['type 1 error', 'error']", Hypothesis testing for a proportion,seg_49,h0 true okay type 1 error,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 1044, 2692, 2995, 3100, 2828, 1015, 7561,  102])"
1302,1,"['type 2 error', 'error']", Hypothesis testing for a proportion,seg_49,truth ha true type 2 error okay,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 3606, 5292, 2995, 2828, 1016, 7561, 3100,  102])"
1303,1,"['hypothesis', 'tests', 'hypothesis tests']", Hypothesis testing for a proportion,seg_49,figure 5.8: four different scenarios for hypothesis tests.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  3275,  1019,  1012,  1022,  1024,  2176,  2367, 16820,  2005,
        10744,  5852,  1012,   102])"
1304,1,"['null hypothesis', 'type 2 error', 'hypothesis', 'type 1 error', 'error']", Hypothesis testing for a proportion,seg_49,a type 1 error is rejecting the null hypothesis when h0 is actually true. a type 2 error is failing to reject the null hypothesis when the alternative is actually true.,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1037,  2828,  1015,  7561,  2003, 21936,  1996, 19701, 10744,
         2043,  1044,  2692,  2003,  2941,  2995,  1012,  1037,  2828,  1016,
         7561,  2003,  7989,  2000, 15454,  1996, 19701, 10744,  2043,  1996,
         4522,  2003,  2941,  2995,  1012,   102])"
1305,1,"['type 1 error', 'error']", Hypothesis testing for a proportion,seg_49,"in a us court, the defendant is either innocent (h0) or guilty (ha). what does a type 1 error",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  1037,  2149,  2457,  1010,  1996, 13474,  2003,  2593,
         7036,  1006,  1044,  2692,  1007,  2030,  5905,  1006,  5292,  1007,
         1012,  2054,  2515,  1037,  2828,  1015,  7561,   102])"
1306,1,"['type 2 error', 'error']", Hypothesis testing for a proportion,seg_49,19 represent in this context? what does a type 2 error represent? figure 5.8 may be useful.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 2539, 5050, 1999, 2023, 6123, 1029, 2054, 2515, 1037, 2828, 1016,
        7561, 5050, 1029, 3275, 1019, 1012, 1022, 2089, 2022, 6179, 1012,  102])"
1307,1,"['rate', 'type 2 error', 'type 1 error', 'error']", Hypothesis testing for a proportion,seg_49,how could we reduce the type 1 error rate in us courts? what influence would this have on the type 2 error rate?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 2129, 2071, 2057, 5547, 1996, 2828, 1015, 7561, 3446, 1999, 2149,
        5434, 1029, 2054, 3747, 2052, 2023, 2031, 2006, 1996, 2828, 1016, 7561,
        3446, 1029,  102])"
1308,1,"['rate', 'type 2 errors', 'errors', 'standard', 'type 1 error', 'error']", Hypothesis testing for a proportion,seg_49,"to lower the type 1 error rate, we might raise our standard for conviction from “beyond a reasonable doubt” to “beyond a conceivable doubt” so fewer people would be wrongly convicted. however, this would also make it more difficult to convict the people who are actually guilty, so we would make more type 2 errors.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2000,  2896,  1996,  2828,  1015,  7561,  3446,  1010,  2057,
         2453,  5333,  2256,  3115,  2005, 10652,  2013,  1523,  3458,  1037,
         9608,  4797,  1524,  2000,  1523,  3458,  1037,  9530,  3401, 11444,
         3468,  4797,  1524,  2061,  8491,  2111,  2052,  2022, 29116,  7979,
         1012,  2174,  1010,  2023,  2052,  2036,  2191,  2009,  2062,  3697,
         2000, 20462,  1996,  2111,  2040,  2024,  2941,  5905,  1010,  2061,
         2057,  2052,  2191,  2062,  2828,  1016, 10697,  1012,   102])"
1309,1,"['rate', 'type 2 error', 'type 1 error', 'error']", Hypothesis testing for a proportion,seg_49,how could we reduce the type 2 error rate in us courts? what influence would this have on the type 1 error rate?20,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 2129, 2071, 2057, 5547, 1996, 2828, 1016, 7561, 3446, 1999, 2149,
        5434, 1029, 2054, 3747, 2052, 2023, 2031, 2006, 1996, 2828, 1015, 7561,
        3446, 1029, 2322,  102])"
1310,1,['error'], Hypothesis testing for a proportion,seg_49,"exercises 5.25-5.27 provide an important lesson: if we reduce how often we make one type of error, we generally make more of the other type.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 11110,  1019,  1012,  2423,  1011,  1019,  1012,  2676,  3073,
         2019,  2590, 10800,  1024,  2065,  2057,  5547,  2129,  2411,  2057,
         2191,  2028,  2828,  1997,  7561,  1010,  2057,  3227,  2191,  2062,
         1997,  1996,  2060,  2828,  1012,   102])"
1311,1,"['cases', 'mean', 'significance level', 'hypothesis', 'level', 'levels', 'null hypothesis', 'significance', 'data', 'significance levels']", Hypothesis testing for a proportion,seg_49,"hypothesis testing is built around rejecting or failing to reject the null hypothesis. that is, we do not reject h0 unless we have strong evidence. but what precisely does strong evidence mean? as a general rule of thumb, for those cases where the null hypothesis is actually true, we do not want to incorrectly reject h0 more than 5% of the time. this corresponds to a significance level of 0.05. that is, if the null hypothesis is true, the significance level indicates how often the data lead us to incorrectly reject h0. we often write the significance level using α (the greek letter alpha): α = 0.05. we discuss the appropriateness of different significance levels in section 5.3.5.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 10744,  5604,  2003,  2328,  2105, 21936,  2030,  7989,  2000,
        15454,  1996, 19701, 10744,  1012,  2008,  2003,  1010,  2057,  2079,
         2025, 15454,  1044,  2692,  4983,  2057,  2031,  2844,  3350,  1012,
         2021,  2054, 10785,  2515,  2844,  3350,  2812,  1029,  2004,  1037,
         2236,  3627,  1997,  7639,  1010,  2005,  2216,  3572,  2073,  1996,
        19701, 10744,  2003,  2941,  2995,  1010,  2057,  2079,  2025,  2215,
         2000, 19721, 15454,  1044,  2692,  2062,  2084,  1019,  1003,  1997,
         1996,  2051,  1012,  2023, 14788,  2000,  1037,  7784,  2504,  1997,
         1014,  1012,  5709,  1012,  2008,  2003,  1010,  2065,  1996, 19701,
        10744,  2003,  2995,  1010,  1996,  7784,  2504,  7127,  2129,  2411,
         1996,  2951,  2599,  2149,  2000, 19721, 15454,  1044,  2692,  1012,
         2057,  2411,  4339,  1996,  7784,  2504,  2478,  1155,  1006,  1996,
         3306,  3661,  6541,  1007,  1024,  1155,  1027,  1014,  1012,  5709,
         1012,  2057,  6848,  1996,  6413,  2791,  1997,  2367,  7784,  3798,
         1999,  2930,  1019,  1012,  1017,  1012,  1019,  1012,   102])"
1312,1,"['confidence interval', 'point estimate', 'standard errors', 'errors', 'hypothesis test', 'population', 'null hypothesis', 'confidence', 'significance level', 'interval', 'estimate', 'test', 'parameter', 'hypothesis', 'level', 'standard', 'significance', 'tail', 'error']", Hypothesis testing for a proportion,seg_49,"if we use a 95% confidence interval to evaluate a hypothesis test and the null hypothesis happens to be true, we will make an error whenever the point estimate is at least 1.96 standard errors away from the population parameter. this happens about 5% of the time (2.5% in each tail). similarly, using a 99% confidence interval to evaluate a hypothesis is equivalent to a significance level of α = 0.01.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  2057,  2224,  1037,  5345,  1003,  7023, 13483,  2000,
        16157,  1037, 10744,  3231,  1998,  1996, 19701, 10744,  6433,  2000,
         2022,  2995,  1010,  2057,  2097,  2191,  2019,  7561,  7188,  1996,
         2391, 10197,  2003,  2012,  2560,  1015,  1012,  5986,  3115, 10697,
         2185,  2013,  1996,  2313, 16381,  1012,  2023,  6433,  2055,  1019,
         1003,  1997,  1996,  2051,  1006,  1016,  1012,  1019,  1003,  1999,
         2169,  5725,  1007,  1012,  6660,  1010,  2478,  1037,  5585,  1003,
         7023, 13483,  2000, 16157,  1037, 10744,  2003,  5662,  2000,  1037,
         7784,  2504,  1997,  1155,  1027,  1014,  1012,  5890,  1012,   102])"
1313,1,"['confidence interval', 'interval', 'hypothesis', 'confidence intervals', 'intervals', 'null hypothesis', 'confidence', 'sustainable']", Hypothesis testing for a proportion,seg_49,"a confidence interval is very helpful in determining whether or not to reject the null hypothesis. however, the confidence interval approach isn’t always sustainable. in several sections, we will encounter situations where a confidence interval cannot be constructed. for example, if we wanted to evaluate the hypothesis that several proportions are equal, it isn’t clear how to construct and compare many confidence intervals altogether.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1037,  7023, 13483,  2003,  2200, 14044,  1999, 12515,  3251,
         2030,  2025,  2000, 15454,  1996, 19701, 10744,  1012,  2174,  1010,
         1996,  7023, 13483,  3921,  3475,  1521,  1056,  2467,  9084,  1012,
         1999,  2195,  5433,  1010,  2057,  2097,  8087,  8146,  2073,  1037,
         7023, 13483,  3685,  2022,  3833,  1012,  2005,  2742,  1010,  2065,
         2057,  2359,  2000, 16157,  1996, 10744,  2008,  2195, 19173,  2024,
         5020,  1010,  2009,  3475,  1521,  1056,  3154,  2129,  2000,  9570,
         1998, 12826,  2116,  7023, 14025, 10462,  1012,   102])"
1314,1,"['statistical', 'statistic', 'data']", Hypothesis testing for a proportion,seg_49,"next we will introduce a statistic called the p-value to help us expand our statistical toolkit, which will enable us to both better understand the strength of evidence and work in more complex data scenarios in later sections.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2279,  2057,  2097,  8970,  1037, 28093,  6553,  2170,  1996,
         1052,  1011,  3643,  2000,  2393,  2149,  7818,  2256,  7778,  6994,
        23615,  1010,  2029,  2097,  9585,  2149,  2000,  2119,  2488,  3305,
         1996,  3997,  1997,  3350,  1998,  2147,  1999,  2062,  3375,  2951,
        16820,  1999,  2101,  5433,  1012,   102])"
1315,0,[], Hypothesis testing for a proportion,seg_49,5.3.4 formal testing using p-values,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 1019, 1012, 1017, 1012, 1018, 5337, 5604, 2478, 1052, 1011, 5300,
         102])"
1316,1,"['statistical hypothesis', 'hypothesis', 'confidence intervals', 'method', 'statistical hypothesis testing', 'alternative hypothesis', 'hypothesis testing', 'statistical', 'null hypothesis', 'confidence', 'intervals']", Hypothesis testing for a proportion,seg_49,the p-value is a way of quantifying the strength of the evidence against the null hypothesis and in favor of the alternative hypothesis. statistical hypothesis testing typically uses the p-value method rather than making a decision based on confidence intervals.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  1052,  1011,  3643,  2003,  1037,  2126,  1997, 24110,
        27351,  2075,  1996,  3997,  1997,  1996,  3350,  2114,  1996, 19701,
        10744,  1998,  1999,  5684,  1997,  1996,  4522, 10744,  1012,  7778,
        10744,  5604,  4050,  3594,  1996,  1052,  1011,  3643,  4118,  2738,
         2084,  2437,  1037,  3247,  2241,  2006,  7023, 14025,  1012,   102])"
1317,1,"['hypotheses', 'data', 'set', 'probability', 'hypothesis', 'sample', 'null hypothesis', 'data set', 'statistic']", Hypothesis testing for a proportion,seg_49,"the p-value is the probability of observing data at least as favorable to the alternative hypothesis as our current data set, if the null hypothesis were true. we typically use a summary statistic of the data, in this section the sample proportion, to help compute the p-value and evaluate the hypotheses.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  1052,  1011,  3643,  2003,  1996,  9723,  1997, 14158,
         2951,  2012,  2560,  2004, 11119,  2000,  1996,  4522, 10744,  2004,
         2256,  2783,  2951,  2275,  1010,  2065,  1996, 19701, 10744,  2020,
         2995,  1012,  2057,  4050,  2224,  1037, 12654, 28093,  6553,  1997,
         1996,  2951,  1010,  1999,  2023,  2930,  1996,  7099, 10817,  1010,
         2000,  2393, 24134,  1996,  1052,  1011,  3643,  1998, 16157,  1996,
         1044, 22571, 14573, 23072,  1012,   102])"
1318,1,"['hypotheses', 'set', 'random sample', 'sample', 'random']", Hypothesis testing for a proportion,seg_49,pew research asked a random sample of 1000 american adults whether they supported the increased usage of coal to produce energy. set up hypotheses to evaluate whether a majority of american adults support or oppose the increased usage of coal.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 29071,  2470,  2356,  1037,  6721,  7099,  1997,  6694,  2137,
         6001,  3251,  2027,  3569,  1996,  3445,  8192,  1997,  5317,  2000,
         3965,  2943,  1012,  2275,  2039,  1044, 22571, 14573, 23072,  2000,
        16157,  3251,  1037,  3484,  1997,  2137,  6001,  2490,  2030, 15391,
         1996,  3445,  8192,  1997,  5317,  1012,   102])"
1319,1,"['hypotheses', 'alternative hypothesis', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"the uninteresting result is that there is no majority either way: half of americans support and the other half oppose expanding the use of coal to produce energy. the alternative hypothesis would be that there is a majority support or oppose (though we do not known which one!) expanding the use of coal. if p represents the proportion supporting, then we can write the hypotheses as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  4895, 18447, 18702,  3436,  2765,  2003,  2008,  2045,
         2003,  2053,  3484,  2593,  2126,  1024,  2431,  1997,  4841,  2490,
         1998,  1996,  2060,  2431, 15391,  9186,  1996,  2224,  1997,  5317,
         2000,  3965,  2943,  1012,  1996,  4522, 10744,  2052,  2022,  2008,
         2045,  2003,  1037,  3484,  2490,  2030, 15391,  1006,  2295,  2057,
         2079,  2025,  2124,  2029,  2028,   999,  1007,  9186,  1996,  2224,
         1997,  5317,  1012,  2065,  1052,  5836,  1996, 10817,  4637,  1010,
         2059,  2057,  2064,  4339,  1996,  1044, 22571, 14573, 23072,  2004,
          102])"
1320,1,"['null value', 'case']", Hypothesis testing for a proportion,seg_49,"in this case, the null value is p0 = 0.5.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  2023,  2553,  1010,  1996, 19701,  3643,  2003,  1052,
         2692,  1027,  1014,  1012,  1019,  1012,   102])"
1321,1,"['hypotheses', 'error', 'null value', 'method', 'standard', 'condition', 'evaluating', 'standard error', 'case']", Hypothesis testing for a proportion,seg_49,"when evaluating hypotheses for proportions using the p-value method, we will slightly modify how we check the success-failure condition and compute the standard error for the single proportion case. these changes aren’t dramatic, but pay close attention to how we use the null value, p0.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043, 23208,  1044, 22571, 14573, 23072,  2005, 19173,  2478,
         1996,  1052,  1011,  3643,  4118,  1010,  2057,  2097,  3621, 19933,
         2129,  2057,  4638,  1996,  3112,  1011,  4945,  4650,  1998, 24134,
         1996,  3115,  7561,  2005,  1996,  2309, 10817,  2553,  1012,  2122,
         3431,  4995,  1521,  1056,  6918,  1010,  2021,  3477,  2485,  3086,
         2000,  2129,  2057,  2224,  1996, 19701,  3643,  1010,  1052,  2692,
         1012,   102])"
1322,1,"['distribution', 'hypothesis', 'sample', 'sampling', 'null hypothesis', 'sampling distribution']", Hypothesis testing for a proportion,seg_49,"pew research’s sample show that 37% of american adults support increased usage of coal. we now wonder, does 37% represent a real difference from the null hypothesis of 50%? what would the sampling distribution of p̂ look like if the null hypothesis were true?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 29071,  2470,  1521,  1055,  7099,  2265,  2008,  4261,  1003,
         1997,  2137,  6001,  2490,  3445,  8192,  1997,  5317,  1012,  2057,
         2085,  4687,  1010,  2515,  4261,  1003,  5050,  1037,  2613,  4489,
         2013,  1996, 19701, 10744,  1997,  2753,  1003,  1029,  2054,  2052,
         1996, 16227,  4353,  1997,  1052,  2298,  2066,  2065,  1996, 19701,
        10744,  2020,  2995,  1029,   102])"
1323,1,"['null value', 'hypothesis', 'population', 'sampling', 'normal', 'distribution', 'null hypothesis', 'sampling distribution']", Hypothesis testing for a proportion,seg_49,"if the null hypothesis were true, the population proportion would be the null value, 0.5. we previously learned that the sampling distribution of p̂ will be normal when two conditions are met:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  1996, 19701, 10744,  2020,  2995,  1010,  1996,  2313,
        10817,  2052,  2022,  1996, 19701,  3643,  1010,  1014,  1012,  1019,
         1012,  2057,  3130,  4342,  2008,  1996, 16227,  4353,  1997,  1052,
         2097,  2022,  3671,  2043,  2048,  3785,  2024,  2777,  1024,   102])"
1324,1,"['random sample', 'independence', 'sample', 'random', 'simple random sample']", Hypothesis testing for a proportion,seg_49,"independence. the poll was based on a simple random sample, so independence is satisfied.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 4336, 1012, 1996, 8554, 2001, 2241, 2006, 1037, 3722, 6721, 7099,
        1010, 2061, 4336, 2003, 8510, 1012,  102])"
1325,1,"['sample', 'sample size', 'condition']", Hypothesis testing for a proportion,seg_49,"success-failure. based on the poll’s sample size of n = 1000, the success-failure condition is met,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 3112, 1011, 4945, 1012, 2241, 2006, 1996, 8554, 1521, 1055, 7099,
        2946, 1997, 1050, 1027, 6694, 1010, 1996, 3112, 1011, 4945, 4650, 2003,
        2777, 1010,  102])"
1326,1,"['null value', 'intervals', 'condition', 'confidence intervals', 'confidence']", Hypothesis testing for a proportion,seg_49,"are both at least 10. note that the success-failure condition was checked using the null value, p0 = 0.5; this is the first procedural difference from confidence intervals.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2024,  2119,  2012,  2560,  2184,  1012,  3602,  2008,  1996,
         3112,  1011,  4945,  4650,  2001,  7039,  2478,  1996, 19701,  3643,
         1010,  1052,  2692,  1027,  1014,  1012,  1019,  1025,  2023,  2003,
         1996,  2034, 24508,  4489,  2013,  7023, 14025,  1012,   102])"
1327,1,"['normally distributed', 'null hypothesis', 'observations', 'null value', 'hypothesis', 'sample', 'sampling', 'standard', 'distribution', 'standard error', 'sampling distribution', 'error']", Hypothesis testing for a proportion,seg_49,"if the null hypothesis were true, the sampling distribution indicates that a sample proportion based on n = 1000 observations would be normally distributed. next, we can compute the standard error, where we will again use the null value p0 = 0.5 in the calculation:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  1996, 19701, 10744,  2020,  2995,  1010,  1996, 16227,
         4353,  7127,  2008,  1037,  7099, 10817,  2241,  2006,  1050,  1027,
         6694,  9420,  2052,  2022,  5373,  5500,  1012,  2279,  1010,  2057,
         2064, 24134,  1996,  3115,  7561,  1010,  2073,  2057,  2097,  2153,
         2224,  1996, 19701,  3643,  1052,  2692,  1027,  1014,  1012,  1019,
         1999,  1996, 17208,  1024,   102])"
1328,1,"['null value', 'sampling', 'intervals', 'confidence intervals', 'confidence']", Hypothesis testing for a proportion,seg_49,"this marks the other procedural difference from confidence intervals: since the sampling distribution is determined under the null proportion, the null value p0 was used for the proportion in the calculation rather than p̂.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2023,  6017,  1996,  2060, 24508,  4489,  2013,  7023, 14025,
         1024,  2144,  1996, 16227,  4353,  2003,  4340,  2104,  1996, 19701,
        10817,  1010,  1996, 19701,  3643,  1052,  2692,  2001,  2109,  2005,
         1996, 10817,  1999,  1996, 17208,  2738,  2084,  1052,  1012,   102])"
1329,1,"['mean', 'normal distribution', 'null hypothesis', 'hypothesis', 'sample', 'normal', 'standard', 'distribution', 'standard error', 'error']", Hypothesis testing for a proportion,seg_49,"ultimately, if the null hypothesis were true, then the sample proportion should follow a normal distribution with mean 0.5 and a standard error of 0.016. this distribution is shown in figure 5.9.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  4821,  1010,  2065,  1996, 19701, 10744,  2020,  2995,  1010,
         2059,  1996,  7099, 10817,  2323,  3582,  1037,  3671,  4353,  2007,
         2812,  1014,  1012,  1019,  1998,  1037,  3115,  7561,  1997,  1014,
         1012,  5890,  2575,  1012,  2023,  4353,  2003,  3491,  1999,  3275,
         1019,  1012,  1023,  1012,   102])"
1330,1,"['normal distribution', 'hypothesis', 'normal', 'distribution', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"figure 5.9: if the null hypothesis were true, this normal distribution describes the distribution of p̂.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  3275,  1019,  1012,  1023,  1024,  2065,  1996, 19701, 10744,
         2020,  2995,  1010,  2023,  3671,  4353,  5577,  1996,  4353,  1997,
         1052,  1012,   102])"
1331,1,"['null value', 'hypothesis', 'sample', 'method', 'standard', 'hypothesis test', 'standard error', 'error', 'test']", Hypothesis testing for a proportion,seg_49,"when using the p-value method to evaluate a hypothesis test, we check the conditions for p̂ and construct the standard error using the null value, p0, instead of using the sample proportion.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043,  2478,  1996,  1052,  1011,  3643,  4118,  2000, 16157,
         1037, 10744,  3231,  1010,  2057,  4638,  1996,  3785,  2005,  1052,
         1998,  9570,  1996,  3115,  7561,  2478,  1996, 19701,  3643,  1010,
         1052,  2692,  1010,  2612,  1997,  2478,  1996,  7099, 10817,  1012,
          102])"
1332,1,"['confidence interval', 'null hypothesis', 'interval', 'hypothesis', 'standard', 'hypothesis test', 'standard error', 'confidence', 'error', 'test']", Hypothesis testing for a proportion,seg_49,"in a hypothesis test with a p-value, we are supposing the null hypothesis is true, which is a different mindset than when we compute a confidence interval. this is why we use p0 instead of p̂ when we check conditions and compute the standard error in this context.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  1037, 10744,  3231,  2007,  1037,  1052,  1011,  3643,
         1010,  2057,  2024, 10514,  9397, 18606,  1996, 19701, 10744,  2003,
         2995,  1010,  2029,  2003,  1037,  2367,  9273,  3388,  2084,  2043,
         2057, 24134,  1037,  7023, 13483,  1012,  2023,  2003,  2339,  2057,
         2224,  1052,  2692,  2612,  1997,  1052,  2043,  2057,  4638,  3785,
         1998, 24134,  1996,  3115,  7561,  1999,  2023,  6123,  1012,   102])"
1333,1,"['tail', 'distribution', 'null distribution', 'probability', 'estimate', 'point estimate', 'hypothesis', 'sampling', 'null hypothesis', 'sampling distribution']", Hypothesis testing for a proportion,seg_49,"when we identify the sampling distribution under the null hypothesis, it has a special name: the null distribution. the p-value represents the probability of the observed p̂, or a p̂ that is more extreme, if the null hypothesis were true. to find the p-value, we generally find the null distribution, and then we find a tail area in that distribution corresponding to our point estimate.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043,  2057,  6709,  1996, 16227,  4353,  2104,  1996, 19701,
        10744,  1010,  2009,  2038,  1037,  2569,  2171,  1024,  1996, 19701,
         4353,  1012,  1996,  1052,  1011,  3643,  5836,  1996,  9723,  1997,
         1996,  5159,  1052,  1010,  2030,  1037,  1052,  2008,  2003,  2062,
         6034,  1010,  2065,  1996, 19701, 10744,  2020,  2995,  1012,  2000,
         2424,  1996,  1052,  1011,  3643,  1010,  2057,  3227,  2424,  1996,
        19701,  4353,  1010,  1998,  2059,  2057,  2424,  1037,  5725,  2181,
         1999,  2008,  4353,  7978,  2000,  2256,  2391, 10197,  1012,   102])"
1334,1,"['mean', 'null distribution', 'normal distribution', 'tails', 'hypothesis', 'normal', 'distribution', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"if the null hypothesis were true, determine the chance of finding p̂ at least as far into the tails as 0.37 under the null distribution, which is a normal distribution with mean µ = 0.5 and se = 0.016.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  1996, 19701, 10744,  2020,  2995,  1010,  5646,  1996,
         3382,  1997,  4531,  1052,  2012,  2560,  2004,  2521,  2046,  1996,
        17448,  2004,  1014,  1012,  4261,  2104,  1996, 19701,  4353,  1010,
         2029,  2003,  1037,  3671,  4353,  2007,  2812,  1085,  1027,  1014,
         1012,  1019,  1998,  7367,  1027,  1014,  1012,  5890,  2575,  1012,
          102])"
1335,1,"['tail', 'mean', 'probability', 'normal', 'standard', 'standard error', 'error']", Hypothesis testing for a proportion,seg_49,"this is a normal probability problem where x = 0.37. first, we draw a simple graph to represent the situation, similar to what is shown in figure 5.9. since p̂ is so far out in the tail, we know the tail area is going to be very small. to find it, we start by computing the z-score using the mean of 0.5 and the standard error of 0.016:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2023,  2003,  1037,  3671,  9723,  3291,  2073,  1060,  1027,
         1014,  1012,  4261,  1012,  2034,  1010,  2057,  4009,  1037,  3722,
        10629,  2000,  5050,  1996,  3663,  1010,  2714,  2000,  2054,  2003,
         3491,  1999,  3275,  1019,  1012,  1023,  1012,  2144,  1052,  2003,
         2061,  2521,  2041,  1999,  1996,  5725,  1010,  2057,  2113,  1996,
         5725,  2181,  2003,  2183,  2000,  2022,  2200,  2235,  1012,  2000,
         2424,  2009,  1010,  2057,  2707,  2011,  9798,  1996,  1062,  1011,
         3556,  2478,  1996,  2812,  1997,  1014,  1012,  1019,  1998,  1996,
         3115,  7561,  1997,  1014,  1012,  5890,  2575,  1024,   102])"
1336,1,"['tail', 'normal probability table', 'table', 'probability', 'normal', 'probability table']", Hypothesis testing for a proportion,seg_49,"we can use software to find the tail area: 2.2 × 10−16 (0.00000000000000022). if using the normal probability table in appendix c.1, we’d find that z = −8.125 is off the table, so we would use the smallest area listed: 0.0002.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2057,  2064,  2224,  4007,  2000,  2424,  1996,  5725,  2181,
         1024,  1016,  1012,  1016,  1095,  2184, 27944,  2575,  1006,  1014,
         1012,  2199,  8889,  8889,  8889,  8889,  8889,  8889, 19317,  1007,
         1012,  2065,  2478,  1996,  3671,  9723,  2795,  1999, 22524,  1039,
         1012,  1015,  1010,  2057,  1521,  1040,  2424,  2008,  1062,  1027,
         1597,  2620,  1012,  8732,  2003,  2125,  1996,  2795,  1010,  2061,
         2057,  2052,  2224,  1996, 10479,  2181,  3205,  1024,  1014,  1012,
         2199,  2475,  1012,   102])"
1337,1,"['tail', 'table', 'observations', 'estimate', 'hypothesis', 'method']", Hypothesis testing for a proportion,seg_49,"the potential p̂’s in the upper tail beyond 0.63, which are shown in figure 5.10, also represent observations at least as extreme as the observed value of 0.37. to account for these values that are also more extreme under the hypothesis setup, we double the lower tail to get an estimate of the p-value: 4.4× 10−16 (or if using the table method, 0.0004).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  4022,  1052,  1521,  1055,  1999,  1996,  3356,  5725,
         3458,  1014,  1012,  6191,  1010,  2029,  2024,  3491,  1999,  3275,
         1019,  1012,  2184,  1010,  2036,  5050,  9420,  2012,  2560,  2004,
         6034,  2004,  1996,  5159,  3643,  1997,  1014,  1012,  4261,  1012,
         2000,  4070,  2005,  2122,  5300,  2008,  2024,  2036,  2062,  6034,
         2104,  1996, 10744, 16437,  1010,  2057,  3313,  1996,  2896,  5725,
         2000,  2131,  2019, 10197,  1997,  1996,  1052,  1011,  3643,  1024,
         1018,  1012,  1018, 26306,  2184, 27944,  2575,  1006,  2030,  2065,
         2478,  1996,  2795,  4118,  1010,  1014,  1012,  2199,  2549,  1007,
         1012,   102])"
1338,1,"['probability', 'hypothesis', 'sample', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"the p-value represents the probability of observing such an extreme sample proportion by chance, if the null hypothesis were true.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  1052,  1011,  3643,  5836,  1996,  9723,  1997, 14158,
         2107,  2019,  6034,  7099, 10817,  2011,  3382,  1010,  2065,  1996,
        19701, 10744,  2020,  2995,  1012,   102])"
1339,0,[], Hypothesis testing for a proportion,seg_49,tail area for p̂ equally unlikely if h0 is true,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 5725, 2181, 2005, 1052, 8053, 9832, 2065, 1044, 2692, 2003, 2995,
         102])"
1340,0,[], Hypothesis testing for a proportion,seg_49,"figure 5.10: if h0 were true, then the values above 0.63 are just as unlikely as values below 0.37.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 3275, 1019, 1012, 2184, 1024, 2065, 1044, 2692, 2020, 2995, 1010,
        2059, 1996, 5300, 2682, 1014, 1012, 6191, 2024, 2074, 2004, 9832, 2004,
        5300, 2917, 1014, 1012, 4261, 1012,  102])"
1341,1,"['hypotheses', 'significance level', 'level', 'standard', 'significance']", Hypothesis testing for a proportion,seg_49,how should we evaluate the hypotheses using the p-value of 4.4×10−16? use the standard significance level of α = 0.05.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2129,  2323,  2057, 16157,  1996,  1044, 22571, 14573, 23072,
         2478,  1996,  1052,  1011,  3643,  1997,  1018,  1012,  1018, 26306,
        10790, 27944,  2575,  1029,  2224,  1996,  3115,  7784,  2504,  1997,
         1155,  1027,  1014,  1012,  5709,  1012,   102])"
1342,1,"['deviation', 'hypothesis', 'null hypothesis']", Hypothesis testing for a proportion,seg_49,"if the null hypothesis were true, there’s only an incredibly small chance of observing such an extreme deviation of p̂ from 0.5. this means one of the following must be true:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  1996, 19701, 10744,  2020,  2995,  1010,  2045,  1521,
         1055,  2069,  2019, 11757,  2235,  3382,  1997, 14158,  2107,  2019,
         6034, 24353,  1997,  1052,  2013,  1014,  1012,  1019,  1012,  2023,
         2965,  2028,  1997,  1996,  2206,  2442,  2022,  2995,  1024,   102])"
1343,1,"['null hypothesis', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"1. the null hypothesis is true, and we just happened to get observe something so extreme that only happens about once in every 23 quadrillion times (1 quadrillion = 1 million × 1 billion).",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1015,  1012,  1996, 19701, 10744,  2003,  2995,  1010,  1998,
         2057,  2074,  3047,  2000,  2131, 11949,  2242,  2061,  6034,  2008,
         2069,  6433,  2055,  2320,  1999,  2296,  2603, 17718, 24714,  3258,
         2335,  1006,  1015, 17718, 24714,  3258,  1027,  1015,  2454,  1095,
         1015,  4551,  1007,  1012,   102])"
1344,1,"['sample', 'alternative hypothesis', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"2. the alternative hypothesis is true, which would be consistent with observing a sample proportion far from 0.5.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1016,  1012,  1996,  4522, 10744,  2003,  2995,  1010,  2029,
         2052,  2022,  8335,  2007, 14158,  1037,  7099, 10817,  2521,  2013,
         1014,  1012,  1019,  1012,   102])"
1345,0,[], Hypothesis testing for a proportion,seg_49,"the first scenario is laughably improbable, while the second scenario seems much more plausible.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  2034, 11967,  2003,  4756,  8231, 17727,  3217,  3676,
         3468,  1010,  2096,  1996,  2117, 11967,  3849,  2172,  2062, 24286,
         1012,   102])"
1346,1,"['significance level', 'case', 'hypothesis', 'level', 'hypothesis test', 'null hypothesis', 'significance', 'data', 'test']", Hypothesis testing for a proportion,seg_49,"formally, when we evaluate a hypothesis test, we compare the p-value to the significance level, which in this case is α = 0.05. since the p-value is less than α, we reject the null hypothesis. that is, the data provide strong evidence against h0. the data indicate the direction of the difference: a majority of americans do not support expanding the use of coal-powered energy.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  6246,  1010,  2043,  2057, 16157,  1037, 10744,  3231,  1010,
         2057, 12826,  1996,  1052,  1011,  3643,  2000,  1996,  7784,  2504,
         1010,  2029,  1999,  2023,  2553,  2003,  1155,  1027,  1014,  1012,
         5709,  1012,  2144,  1996,  1052,  1011,  3643,  2003,  2625,  2084,
         1155,  1010,  2057, 15454,  1996, 19701, 10744,  1012,  2008,  2003,
         1010,  1996,  2951,  3073,  2844,  3350,  2114,  1044,  2692,  1012,
         1996,  2951,  5769,  1996,  3257,  1997,  1996,  4489,  1024,  1037,
         3484,  1997,  4841,  2079,  2025,  2490,  9186,  1996,  2224,  1997,
         5317,  1011,  6113,  2943,  1012,   102])"
1347,1,"['significance level', 'hypothesis', 'level', 'alternative hypothesis', 'significance', 'data']", Hypothesis testing for a proportion,seg_49,"when the p-value is less than the significance level, α, reject h0. we would report a conclusion that the data provide strong evidence supporting the alternative hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043,  1996,  1052,  1011,  3643,  2003,  2625,  2084,  1996,
         7784,  2504,  1010,  1155,  1010, 15454,  1044,  2692,  1012,  2057,
         2052,  3189,  1037,  7091,  2008,  1996,  2951,  3073,  2844,  3350,
         4637,  1996,  4522, 10744,  1012,   102])"
1348,1,"['null hypothesis', 'hypothesis']", Hypothesis testing for a proportion,seg_49,"when the p-value is greater than α, do not reject h0, and report that we do not have sufficient evidence to reject the null hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043,  1996,  1052,  1011,  3643,  2003,  3618,  2084,  1155,
         1010,  2079,  2025, 15454,  1044,  2692,  1010,  1998,  3189,  2008,
         2057,  2079,  2025,  2031,  7182,  3350,  2000, 15454,  1996, 19701,
        10744,  1012,   102])"
1349,1,"['data', 'case']", Hypothesis testing for a proportion,seg_49,"in either case, it is important to describe the conclusion in the context of the data.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 1999, 2593, 2553, 1010, 2009, 2003, 2590, 2000, 6235, 1996, 7091,
        1999, 1996, 6123, 1997, 1996, 2951, 1012,  102])"
1350,1,"['set', 'hypotheses']", Hypothesis testing for a proportion,seg_49,do a majority of americans support or oppose nuclear arms reduction? set up hypotheses to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1.,
        1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2079,  1037,  3484,  1997,  4841,  2490,  2030, 15391,  4517,
         2608,  7312,  1029,  2275,  2039,  1044, 22571, 14573, 23072,  2000,
          102])"
1351,0,[], Hypothesis testing for a proportion,seg_49,21 evaluate this question.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2538, 16157,  2023,  3160,  1012,   102])"
1352,1,"['significance level', 'random sample', 'level', 'sample', 'random', 'simple random sample', 'significance']", Hypothesis testing for a proportion,seg_49,a simple random sample of 1028 us adults in march 2013 show that 56% support nuclear arms reduction. does this provide convincing evidence that a majority of americans supported nuclear arms reduction at the 5% significance level?,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1037,  3722,  6721,  7099,  1997,  9402,  2620,  2149,  6001,
         1999,  2233,  2286,  2265,  2008,  5179,  1003,  2490,  4517,  2608,
         7312,  1012,  2515,  2023,  3073, 13359,  3350,  2008,  1037,  3484,
         1997,  4841,  3569,  4517,  2608,  7312,  2012,  1996,  1019,  1003,
         7784,  2504,  1029,   102])"
1353,0,[], Hypothesis testing for a proportion,seg_49,"first, check conditions:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 2034, 1010, 4638, 3785, 1024,  102])"
1354,1,"['observations', 'random sample', 'sample', 'random', 'simple random sample']", Hypothesis testing for a proportion,seg_49,"independence. the poll was of a simple random sample of us adults, meaning the observations",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 4336, 1012, 1996, 8554, 2001, 1997, 1037, 3722, 6721, 7099, 1997,
        2149, 6001, 1010, 3574, 1996, 9420,  102])"
1355,1,['independent'], Hypothesis testing for a proportion,seg_49,are independent.,tensor(1),"tensor([0., 0., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 2024, 2981, 1012,  102])"
1356,1,"['hypothesis test', 'condition', 'hypothesis', 'test']", Hypothesis testing for a proportion,seg_49,"success-failure. in a one-proportion hypothesis test, this condition is checked using the null pro-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  3112,  1011,  4945,  1012,  1999,  1037,  2028,  1011, 10817,
        10744,  3231,  1010,  2023,  4650,  2003,  7039,  2478,  1996, 19701,
         4013,  1011,   102])"
1357,1,"['model', 'normal']", Hypothesis testing for a proportion,seg_49,"with these conditions verified, we can model p̂ using a normal model.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2007,  2122,  3785, 20119,  1010,  2057,  2064,  2944,  1052,
         2478,  1037,  3671,  2944,  1012,   102])"
1358,1,"['null value', 'hypothesis', 'standard', 'hypothesis test', 'standard error', 'error', 'test']", Hypothesis testing for a proportion,seg_49,"next the standard error can be computed. the null value p0 is used again here, because this is a hypothesis test for a single proportion.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2279,  1996,  3115,  7561,  2064,  2022, 24806,  1012,  1996,
        19701,  3643,  1052,  2692,  2003,  2109,  2153,  2182,  1010,  2138,
         2023,  2003,  1037, 10744,  3231,  2005,  1037,  2309, 10817,  1012,
          102])"
1359,1,"['test statistic', 'estimate', 'point estimate', 'normal', 'model', 'statistic', 'test']", Hypothesis testing for a proportion,seg_49,"based on the normal model, the test statistic can be computed as the z-score of the point estimate:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2241,  2006,  1996,  3671,  2944,  1010,  1996,  3231, 28093,
         6553,  2064,  2022, 24806,  2004,  1996,  1062,  1011,  3556,  1997,
         1996,  2391, 10197,  1024,   102])"
1360,1,['null value'], Hypothesis testing for a proportion,seg_49,point estimate− null value 0.56− 0.50 z = = = 3.85 se 0.0156,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2391, 10197, 22543, 19701,  3643,  1014,  1012,  5179, 22543,
         1014,  1012,  2753,  1062,  1027,  1027,  1027,  1017,  1012,  5594,
         7367,  1014,  1012,  5890, 26976,   102])"
1361,1,"['tail', 'null distribution', 'tail areas', 'distribution']", Hypothesis testing for a proportion,seg_49,it’s generally helpful to draw null distribution and the tail areas of interest for computing the p-value:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2009,  1521,  1055,  3227, 14044,  2000,  4009, 19701,  4353,
         1998,  1996,  5725,  2752,  1997,  3037,  2005,  9798,  1996,  1052,
         1011,  3643,  1024,   102])"
1362,1,['tail'], Hypothesis testing for a proportion,seg_49,lower tail upper tail,tensor(1),"tensor([0., 0., 1., 0., 1., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 2896, 5725, 3356, 5725,  102])"
1363,1,['tail'], Hypothesis testing for a proportion,seg_49,"the upper tail area is about 0.0001, and we double this tail area to get the p-value: 0.0002. because the p-value is smaller than 0.05, we reject h0. the poll provides convincing evidence that a majority of americans supported nuclear arms reduction efforts in march 2013.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  3356,  5725,  2181,  2003,  2055,  1014,  1012,  2199,
         2487,  1010,  1998,  2057,  3313,  2023,  5725,  2181,  2000,  2131,
         1996,  1052,  1011,  3643,  1024,  1014,  1012,  2199,  2475,  1012,
         2138,  1996,  1052,  1011,  3643,  2003,  3760,  2084,  1014,  1012,
         5709,  1010,  2057, 15454,  1044,  2692,  1012,  1996,  8554,  3640,
        13359,  3350,  2008,  1037,  3484,  1997,  4841,  3569,  4517,  2608,
         7312,  4073,  1999,  2233,  2286,  1012,   102])"
1364,1,"['hypothesis test', 'hypothesis', 'test']", Hypothesis testing for a proportion,seg_49,"once you’ve determined a one-proportion hypothesis test is the correct procedure, there are four steps to completing the test:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2320,  2017,  1521,  2310,  4340,  1037,  2028,  1011, 10817,
        10744,  3231,  2003,  1996,  6149,  7709,  1010,  2045,  2024,  2176,
         4084,  2000,  7678,  1996,  3231,  1024,   102])"
1365,1,"['parameter', 'hypotheses', 'significance level', 'parameter of interest', 'level', 'significance']", Hypothesis testing for a proportion,seg_49,"prepare. identify the parameter of interest, list hypotheses, identify the significance level, and identify p̂ and n.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  7374,  1012,  6709,  1996, 16381,  1997,  3037,  1010,  2862,
         1044, 22571, 14573, 23072,  1010,  6709,  1996,  7784,  2504,  1010,
         1998,  6709,  1052,  1998,  1050,  1012,   102])"
1366,1,"['hypothesis tests', 'null value', 'hypothesis', 'tests', 'normal', 'condition']", Hypothesis testing for a proportion,seg_49,"check. verify conditions to ensure p̂ is nearly normal under h0. for one-proportion hypothesis tests, use the null value to check the success-failure condition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  4638,  1012, 20410,  3785,  2000,  5676,  1052,  2003,  3053,
         3671,  2104,  1044,  2692,  1012,  2005,  2028,  1011, 10817, 10744,
         5852,  1010,  2224,  1996, 19701,  3643,  2000,  4638,  1996,  3112,
         1011,  4945,  4650,  1012,   102])"
1367,1,"['standard', 'standard error', 'error']", Hypothesis testing for a proportion,seg_49,"calculate. if the conditions hold, compute the standard error, again using p0, compute the z-score, and identify the p-value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 18422,  1012,  2065,  1996,  3785,  2907,  1010, 24134,  1996,
         3115,  7561,  1010,  2153,  2478,  1052,  2692,  1010, 24134,  1996,
         1062,  1011,  3556,  1010,  1998,  6709,  1996,  1052,  1011,  3643,
         1012,   102])"
1368,1,"['hypothesis test', 'hypothesis', 'test']", Hypothesis testing for a proportion,seg_49,"conclude. evaluate the hypothesis test by comparing the p-value to α, and provide a conclusion in the context of the problem.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 16519,  1012, 16157,  1996, 10744,  3231,  2011, 13599,  1996,
         1052,  1011,  3643,  2000,  1155,  1010,  1998,  3073,  1037,  7091,
         1999,  1996,  6123,  1997,  1996,  3291,  1012,   102])"
1369,1,"['significance', 'significance level', 'level']", Hypothesis testing for a proportion,seg_49,5.3.5 choosing a significance level,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1017,  1012,  1019, 10549,  1037,  7784,  2504,
          102])"
1370,1,"['significance level', 'consequences', 'level', 'significance', 'test']", Hypothesis testing for a proportion,seg_49,"choosing a significance level for a test is important in many contexts, and the traditional level is α = 0.05. however, it can be helpful to adjust the significance level based on the application. we may select a level that is smaller or larger than 0.05 depending on the consequences of any conclusions reached from the test.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101, 10549,  1037,  7784,  2504,  2005,  1037,  3231,  2003,  2590,
         1999,  2116, 18046,  1010,  1998,  1996,  3151,  2504,  2003,  1155,
         1027,  1014,  1012,  5709,  1012,  2174,  1010,  2009,  2064,  2022,
        14044,  2000, 14171,  1996,  7784,  2504,  2241,  2006,  1996,  4646,
         1012,  2057,  2089,  7276,  1037,  2504,  2008,  2003,  3760,  2030,
         3469,  2084,  1014,  1012,  5709,  5834,  2006,  1996,  8465,  1997,
         2151, 15306,  2584,  2013,  1996,  3231,  1012,   102])"
1371,1,"['significance level', 'null hypothesis', 'hypothesis', 'level', 'type 1 error', 'significance', 'error']", Hypothesis testing for a proportion,seg_49,"if making a type 1 error is dangerous or especially costly, we should choose a small significance level (e.g. 0.01). under this scenario we want to be very cautious about rejecting the null hypothesis, so we demand very strong evidence favoring ha before we would reject h0.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  2437,  1037,  2828,  1015,  7561,  2003,  4795,  2030,
         2926, 17047,  1010,  2057,  2323,  5454,  1037,  2235,  7784,  2504,
         1006,  1041,  1012,  1043,  1012,  1014,  1012,  5890,  1007,  1012,
         2104,  2023, 11967,  2057,  2215,  2000,  2022,  2200, 17145,  2055,
        21936,  1996, 19701, 10744,  1010,  2061,  2057,  5157,  2200,  2844,
         3350,  5684,  2075,  5292,  2077,  2057,  2052, 15454,  1044,  2692,
         1012,   102])"
1372,1,"['significance level', 'type 2 error', 'hypothesis', 'level', 'alternative hypothesis', 'type 1 error', 'significance', 'error']", Hypothesis testing for a proportion,seg_49,"if a type 2 error is relatively more dangerous or much more costly than a type 1 error, then we might choose a higher significance level (e.g. 0.10). here we want to be cautious about failing to reject h0 when the alternative hypothesis is actually true.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  1037,  2828,  1016,  7561,  2003,  4659,  2062,  4795,
         2030,  2172,  2062, 17047,  2084,  1037,  2828,  1015,  7561,  1010,
         2059,  2057,  2453,  5454,  1037,  3020,  7784,  2504,  1006,  1041,
         1012,  1043,  1012,  1014,  1012,  2184,  1007,  1012,  2182,  2057,
         2215,  2000,  2022, 17145,  2055,  7989,  2000, 15454,  1044,  2692,
         2043,  1996,  4522, 10744,  2003,  2941,  2995,  1012,   102])"
1373,1,"['rate', 'type 2 error', 'type 1 error', 'data', 'error']", Hypothesis testing for a proportion,seg_49,"additionally, if the cost of collecting data is small relative to the cost of a type 2 error, then it may also be a good strategy to collect more data. under this strategy, the type 2 error can be reduced while not affecting the type 1 error rate. of course, collecting extra data is often costly, so there is typically a cost-benefit analysis to be considered.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  5678,  1010,  2065,  1996,  3465,  1997,  9334,  2951,  2003,
         2235,  5816,  2000,  1996,  3465,  1997,  1037,  2828,  1016,  7561,
         1010,  2059,  2009,  2089,  2036,  2022,  1037,  2204,  5656,  2000,
         8145,  2062,  2951,  1012,  2104,  2023,  5656,  1010,  1996,  2828,
         1016,  7561,  2064,  2022,  4359,  2096,  2025, 12473,  1996,  2828,
         1015,  7561,  3446,  1012,  1997,  2607,  1010,  9334,  4469,  2951,
         2003,  2411, 17047,  1010,  2061,  2045,  2003,  4050,  1037,  3465,
         1011,  5770,  4106,  2000,  2022,  2641,  1012,   102])"
1374,1,"['significance level', 'hypothesis', 'level', 'hypothesis test', 'significance', 'test']", Hypothesis testing for a proportion,seg_49,"a car manufacturer is considering switching to a new, higher quality piece of equipment that constructs vehicle door hinges. they figure that they will save money in the long run if this new machine produces hinges that have flaws less than 0.2% of the time. however, if the hinges are flawed more than 0.2% of the time, they wouldn’t get a good enough return-on-investment from the new piece of equipment, and they would lose money. is there good reason to modify the significance level in such a hypothesis test?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1037,  2482,  7751,  2003,  6195, 11991,  2000,  1037,  2047,
         1010,  3020,  3737,  3538,  1997,  3941,  2008,  9570,  2015,  4316,
         2341, 25484,  1012,  2027,  3275,  2008,  2027,  2097,  3828,  2769,
         1999,  1996,  2146,  2448,  2065,  2023,  2047,  3698,  7137, 25484,
         2008,  2031, 21407,  2625,  2084,  1014,  1012,  1016,  1003,  1997,
         1996,  2051,  1012,  2174,  1010,  2065,  1996, 25484,  2024, 25077,
         2062,  2084,  1014,  1012,  1016,  1003,  1997,  1996,  2051,  1010,
         2027,  2876,  1521,  1056,  2131,  1037,  2204,  2438,  2709,  1011,
         2006,  1011,  5211,  2013,  1996,  2047,  3538,  1997,  3941,  1010,
         1998,  2027,  2052,  4558,  2769,  1012,  2003,  2045,  2204,  3114,
         2000, 19933,  1996,  7784,  2504,  1999,  2107,  1037, 10744,  3231,
         1029,   102])"
1375,1,"['significance level', 'rate', 'marginal', 'type 2 error', 'hypothesis', 'level', 'null hypothesis', 'significance', 'error']", Hypothesis testing for a proportion,seg_49,"the null hypothesis would be that the rate of flawed hinges is 0.2%, while the alternative is that it the rate is different than 0.2%. this decision is just one of many that have a marginal impact on the car and company. a significance level of 0.05 seems reasonable since neither a type 1 or type 2 error should be dangerous or (relatively) much more expensive.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996, 19701, 10744,  2052,  2022,  2008,  1996,  3446,  1997,
        25077, 25484,  2003,  1014,  1012,  1016,  1003,  1010,  2096,  1996,
         4522,  2003,  2008,  2009,  1996,  3446,  2003,  2367,  2084,  1014,
         1012,  1016,  1003,  1012,  2023,  3247,  2003,  2074,  2028,  1997,
         2116,  2008,  2031,  1037, 14785,  4254,  2006,  1996,  2482,  1998,
         2194,  1012,  1037,  7784,  2504,  1997,  1014,  1012,  5709,  3849,
         9608,  2144,  4445,  1037,  2828,  1015,  2030,  2828,  1016,  7561,
         2323,  2022,  4795,  2030,  1006,  4659,  1007,  2172,  2062,  6450,
         1012,   102])"
1376,1,"['significance', 'significance level', 'level']", Hypothesis testing for a proportion,seg_49,"the same car manufacturer is considering a slightly more expensive supplier for parts related to safety, not door hinges. if the durability of these safety components is shown to be better than the current supplier, they will switch manufacturers. is there good reason to modify the significance level in such an evaluation?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  2168,  2482,  7751,  2003,  6195,  1037,  3621,  2062,
         6450, 17024,  2005,  3033,  3141,  2000,  3808,  1010,  2025,  2341,
        25484,  1012,  2065,  1996,  4241,  2527,  8553,  1997,  2122,  3808,
         6177,  2003,  3491,  2000,  2022,  2488,  2084,  1996,  2783, 17024,
         1010,  2027,  2097,  6942,  8712,  1012,  2003,  2045,  2204,  3114,
         2000, 19933,  1996,  7784,  2504,  1999,  2107,  2019,  9312,  1029,
          102])"
1377,1,"['significance level', 'hypothesis', 'level', 'null hypothesis', 'significance']", Hypothesis testing for a proportion,seg_49,"the null hypothesis would be that the suppliers’ parts are equally reliable. because safety is involved, the car company should be eager to switch to the slightly more expensive manufacturer (reject h0), even if the evidence of increased safety is only moderately strong. a slightly larger significance level, such as α = 0.10, might be appropriate.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996, 19701, 10744,  2052,  2022,  2008,  1996, 20141,  1521,
         3033,  2024,  8053, 10539,  1012,  2138,  3808,  2003,  2920,  1010,
         1996,  2482,  2194,  2323,  2022,  9461,  2000,  6942,  2000,  1996,
         3621,  2062,  6450,  7751,  1006, 15454,  1044,  2692,  1007,  1010,
         2130,  2065,  1996,  3350,  1997,  3445,  3808,  2003,  2069, 17844,
         2844,  1012,  1037,  3621,  3469,  7784,  2504,  1010,  2107,  2004,
         1155,  1027,  1014,  1012,  2184,  1010,  2453,  2022,  6413,  1012,
          102])"
1378,1,"['hypotheses', 'functions', 'measurements', 'significance', 'test']", Hypothesis testing for a proportion,seg_49,"a part inside of a machine is very expensive to replace. however, the machine usually functions properly even if this part is broken, so the part is replaced only if we are extremely certain it is broken based on a series of measurements. identify appropriate hypotheses for this test (in plain language) and suggest an appropriate significance level.22",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1037,  2112,  2503,  1997,  1037,  3698,  2003,  2200,  6450,
         2000,  5672,  1012,  2174,  1010,  1996,  3698,  2788,  4972,  7919,
         2130,  2065,  2023,  2112,  2003,  3714,  1010,  2061,  1996,  2112,
         2003,  2999,  2069,  2065,  2057,  2024,  5186,  3056,  2009,  2003,
         3714,  2241,  2006,  1037,  2186,  1997, 11702,  1012,  6709,  6413,
         1044, 22571, 14573, 23072,  2005,  2023,  3231,  1006,  1999,  5810,
         2653,  1007,  1998,  6592,  2019,  6413,  7784,  2504,  1012,  2570,
          102])"
1379,1,"['standard', 'level']", Hypothesis testing for a proportion,seg_49,"the α = 0.05 threshold is most common. but why? maybe the standard level should be smaller, or perhaps larger. if you’re a little puzzled, you’re reading with an extra critical eye – good job! we’ve made a 5-minute task to help clarify why 0.05 :",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1996,  1155,  1027,  1014,  1012,  5709, 11207,  2003,  2087,
         2691,  1012,  2021,  2339,  1029,  2672,  1996,  3115,  2504,  2323,
         2022,  3760,  1010,  2030,  3383,  3469,  1012,  2065,  2017,  1521,
         2128,  1037,  2210, 14909,  1010,  2017,  1521,  2128,  3752,  2007,
         2019,  4469,  4187,  3239,  1516,  2204,  3105,   999,  2057,  1521,
         2310,  2081,  1037,  1019,  1011,  3371,  4708,  2000,  2393, 25037,
         2339,  1014,  1012,  5709,  1024,   102])"
1380,1,"['statistical', 'significance', 'statistical significance']", Hypothesis testing for a proportion,seg_49,5.3.6 statistical significance versus practical significance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([ 101, 1019, 1012, 1017, 1012, 1020, 7778, 7784, 6431, 6742, 7784,  102])"
1381,1,"['cases', 'mean', 'estimates', 'null value', 'sample', 'sample size', 'experiment', 'statistically significant', 'samples', 'point estimates']", Hypothesis testing for a proportion,seg_49,"when the sample size becomes larger, point estimates become more precise and any real differences in the mean and null value become easier to detect and recognize. even a very small difference would likely be detected if we took a large enough sample. sometimes researchers will take such large samples that even the slightest difference is detected, even differences where there is no practical value. in such cases, we still say the difference is statistically significant, but it is not practically significant. for example, an online experiment might identify that placing additional ads on a movie review website statistically significantly increases viewership of a tv show by 0.001%, but this increase might not have any practical value.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043,  1996,  7099,  2946,  4150,  3469,  1010,  2391, 10035,
         2468,  2062, 10480,  1998,  2151,  2613,  5966,  1999,  1996,  2812,
         1998, 19701,  3643,  2468,  6082,  2000, 11487,  1998,  6807,  1012,
         2130,  1037,  2200,  2235,  4489,  2052,  3497,  2022, 11156,  2065,
         2057,  2165,  1037,  2312,  2438,  7099,  1012,  2823,  6950,  2097,
         2202,  2107,  2312,  8168,  2008,  2130,  1996, 15989,  4489,  2003,
        11156,  1010,  2130,  5966,  2073,  2045,  2003,  2053,  6742,  3643,
         1012,  1999,  2107,  3572,  1010,  2057,  2145,  2360,  1996,  4489,
         2003,  7778,  2135,  3278,  1010,  2021,  2009,  2003,  2025,  8134,
         3278,  1012,  2005,  2742,  1010,  2019,  3784,  7551,  2453,  6709,
         2008,  6885,  3176, 14997,  2006,  1037,  3185,  3319,  4037,  7778,
         2135,  6022,  7457,  7193,  5605,  1997,  1037,  2694,  2265,  2011,
         1014,  1012, 25604,  1003,  1010,  2021,  2023,  3623,  2453,  2025,
         2031,  2151,  6742,  3643,  1012,   102])"
1382,1,"['estimate', 'information', 'null value', 'sample', 'sample size', 'risks', 'standard', 'standard error', 'data', 'error']", Hypothesis testing for a proportion,seg_49,"one role of a data scientist in conducting a study often includes planning the size of the study. the data scientist might first consult experts or scientific literature to learn what would be the smallest meaningful difference from the null value. she also would obtain other information, such as a very rough estimate of the true proportion p, so that she could roughly estimate the standard error. from here, she can suggest a sample size that is sufficiently large that, if there is a real difference that is meaningful, we could detect it. while larger sample sizes may still be used, these calculations are especially helpful when considering costs or potential risks, such as possible health impacts to volunteers in a medical study.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2028,  2535,  1997,  1037,  2951,  7155,  1999,  9283,  1037,
         2817,  2411,  2950,  4041,  1996,  2946,  1997,  1996,  2817,  1012,
         1996,  2951,  7155,  2453,  2034, 23363,  8519,  2030,  4045,  3906,
         2000,  4553,  2054,  2052,  2022,  1996, 10479, 15902,  4489,  2013,
         1996, 19701,  3643,  1012,  2016,  2036,  2052,  6855,  2060,  2592,
         1010,  2107,  2004,  1037,  2200,  5931, 10197,  1997,  1996,  2995,
        10817,  1052,  1010,  2061,  2008,  2016,  2071,  5560, 10197,  1996,
         3115,  7561,  1012,  2013,  2182,  1010,  2016,  2064,  6592,  1037,
         7099,  2946,  2008,  2003, 12949,  2312,  2008,  1010,  2065,  2045,
         2003,  1037,  2613,  4489,  2008,  2003, 15902,  1010,  2057,  2071,
        11487,  2009,  1012,  2096,  3469,  7099, 10826,  2089,  2145,  2022,
         2109,  1010,  2122, 16268,  2024,  2926, 14044,  2043,  6195,  5366,
         2030,  4022, 10831,  1010,  2107,  2004,  2825,  2740, 14670,  2000,
         7314,  1999,  1037,  2966,  2817,  1012,   102])"
1383,1,"['hypothesis', 'tests', 'hypothesis tests']", Hypothesis testing for a proportion,seg_49,5.3.7 one-sided hypothesis tests (special topic),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1019,  1012,  1017,  1012,  1021,  2028,  1011, 11536, 10744,
         5852,  1006,  2569,  8476,  1007,   102])"
1384,1,"['hypotheses', 'hypothesis test', 'null value', 'hypothesis', 'tests', 'hypothesis tests', 'test']", Hypothesis testing for a proportion,seg_49,"so far we’ve only considered what are called two-sided hypothesis tests, where we care about detecting whether p is either above or below some null value p0. there is a second type of hypothesis test called a one-sided hypothesis test. for a one-sided hypothesis test, the hypotheses take one of the following forms:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2061,  2521,  2057,  1521,  2310,  2069,  2641,  2054,  2024,
         2170,  2048,  1011, 11536, 10744,  5852,  1010,  2073,  2057,  2729,
         2055, 25952,  3251,  1052,  2003,  2593,  2682,  2030,  2917,  2070,
        19701,  3643,  1052,  2692,  1012,  2045,  2003,  1037,  2117,  2828,
         1997, 10744,  3231,  2170,  1037,  2028,  1011, 11536, 10744,  3231,
         1012,  2005,  1037,  2028,  1011, 11536, 10744,  3231,  1010,  1996,
         1044, 22571, 14573, 23072,  2202,  2028,  1997,  1996,  2206,  3596,
         1024,   102])"
1385,1,"['parameter', 'null value', 'hypothesis', 'alternative hypothesis', 'population', 'case']", Hypothesis testing for a proportion,seg_49,"1. there’s only value in detecting if the population parameter is less than some value p0. in this case, the alternative hypothesis is written as p < p0 for some null value p0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1015,  1012,  2045,  1521,  1055,  2069,  3643,  1999, 25952,
         2065,  1996,  2313, 16381,  2003,  2625,  2084,  2070,  3643,  1052,
         2692,  1012,  1999,  2023,  2553,  1010,  1996,  4522, 10744,  2003,
         2517,  2004,  1052,  1026,  1052,  2692,  2005,  2070, 19701,  3643,
         1052,  2692,  1012,   102])"
1386,1,"['parameter', 'hypothesis', 'alternative hypothesis', 'population', 'case']", Hypothesis testing for a proportion,seg_49,"2. there’s only value in detecting if the population parameter is more than some value p0: in this case, the alternative hypothesis is written as p > p0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1016,  1012,  2045,  1521,  1055,  2069,  3643,  1999, 25952,
         2065,  1996,  2313, 16381,  2003,  2062,  2084,  2070,  3643,  1052,
         2692,  1024,  1999,  2023,  2553,  1010,  1996,  4522, 10744,  2003,
         2517,  2004,  1052,  1028,  1052,  2692,  1012,   102])"
1387,1,"['test', 'hypothesis', 'alternative hypothesis', 'hypothesis test', 'null hypothesis', 'case']", Hypothesis testing for a proportion,seg_49,"while we adjust the form of the alternative hypothesis, we continue to write the null hypothesis using an equals-sign in the one-sided hypothesis test case.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2096,  2057, 14171,  1996,  2433,  1997,  1996,  4522, 10744,
         1010,  2057,  3613,  2000,  4339,  1996, 19701, 10744,  2478,  2019,
        19635,  1011,  3696,  1999,  1996,  2028,  1011, 11536, 10744,  3231,
         2553,  1012,   102])"
1388,1,"['tail', 'hypothesis', 'level', 'tests', 'alternative hypothesis', 'hypothesis testing', 'hypothesis test', 'evaluating', 'test']", Hypothesis testing for a proportion,seg_49,"in the entire hypothesis testing procedure, there is only one difference in evaluating a onesided hypothesis test vs a two-sided hypothesis test: how to compute the p-value. in a one-sided hypothesis test, we compute the p-value as the tail area in the direction of the alternative hypothesis only, meaning it is represented by a single tail area. herein lies the reason why one-sided tests are sometimes interesting: if we don’t have to double the tail area to get the p-value, then the p-value is smaller and the level of evidence required to identify an interesting finding in the direction of the alternative hypothesis goes down. however, one-sided tests aren’t all sunshine and rainbows: the heavy price paid is that any interesting findings in the opposite direction must be disregarded.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  1996,  2972, 10744,  5604,  7709,  1010,  2045,  2003,
         2069,  2028,  4489,  1999, 23208,  1037,  3924, 14097, 10744,  3231,
         5443,  1037,  2048,  1011, 11536, 10744,  3231,  1024,  2129,  2000,
        24134,  1996,  1052,  1011,  3643,  1012,  1999,  1037,  2028,  1011,
        11536, 10744,  3231,  1010,  2057, 24134,  1996,  1052,  1011,  3643,
         2004,  1996,  5725,  2181,  1999,  1996,  3257,  1997,  1996,  4522,
        10744,  2069,  1010,  3574,  2009,  2003,  3421,  2011,  1037,  2309,
         5725,  2181,  1012,  2182,  2378,  3658,  1996,  3114,  2339,  2028,
         1011, 11536,  5852,  2024,  2823,  5875,  1024,  2065,  2057,  2123,
         1521,  1056,  2031,  2000,  3313,  1996,  5725,  2181,  2000,  2131,
         1996,  1052,  1011,  3643,  1010,  2059,  1996,  1052,  1011,  3643,
         2003,  3760,  1998,  1996,  2504,  1997,  3350,  3223,  2000,  6709,
         2019,  5875,  4531,  1999,  1996,  3257,  1997,  1996,  4522, 10744,
         3632,  2091,  1012,  2174,  1010,  2028,  1011, 11536,  5852,  4995,
         1521,  1056,  2035,  9609,  1998, 10098,  2015,  1024,  1996,  3082,
         3976,  3825,  2003,  2008,  2151,  5875,  9556,  1999,  1996,  4500,
         3257,  2442,  2022, 27770,  2098,  1012,   102])"
1389,1,"['risk', 'data', 'test']", Hypothesis testing for a proportion,seg_49,"in section 1.1, we encountered an example where doctors were interested in determining whether stents would help people who had a high risk of stroke. the researchers believed the stents would help. unfortunately, the data showed the opposite: patients who received stents actually did worse. why was using a two-sided test so important in this context?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1999,  2930,  1015,  1012,  1015,  1010,  2057,  8567,  2019,
         2742,  2073,  7435,  2020,  4699,  1999, 12515,  3251, 26261,  7666,
         2052,  2393,  2111,  2040,  2018,  1037,  2152,  3891,  1997,  6909,
         1012,  1996,  6950,  3373,  1996, 26261,  7666,  2052,  2393,  1012,
         6854,  1010,  1996,  2951,  3662,  1996,  4500,  1024,  5022,  2040,
         2363, 26261,  7666,  2941,  2106,  4788,  1012,  2339,  2001,  2478,
         1037,  2048,  1011, 11536,  3231,  2061,  2590,  1999,  2023,  6123,
         1029,   102])"
1390,1,['test'], Hypothesis testing for a proportion,seg_49,"before the study, researchers had reason to believe that stents would help patients since existing research suggested stents helped in patients with heart attacks. it would surely have been tempting to use a one-sided test in this situation, and had they done this, they would have limited their ability to identify potential harm to patients.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2077,  1996,  2817,  1010,  6950,  2018,  3114,  2000,  2903,
         2008, 26261,  7666,  2052,  2393,  5022,  2144,  4493,  2470,  4081,
        26261,  7666,  3271,  1999,  5022,  2007,  2540,  4491,  1012,  2009,
         2052,  7543,  2031,  2042, 23421,  2000,  2224,  1037,  2028,  1011,
        11536,  3231,  1999,  2023,  3663,  1010,  1998,  2018,  2027,  2589,
         2023,  1010,  2027,  2052,  2031,  3132,  2037,  3754,  2000,  6709,
         4022,  7386,  2000,  5022,  1012,   102])"
1391,1,"['risk', 'hypothesis', 'random', 'data', 'error', 'test']", Hypothesis testing for a proportion,seg_49,"example 5.37 highlights that using a one-sided hypothesis creates a risk of overlooking data supporting the opposite conclusion. we could have made a similar error when reviewing the roslings’ question data this section; if we had a pre-conceived notion that college-educated people wouldn’t do worse than random guessing and so used a one-sided test, we would have missed the really interesting finding that many people have incorrect knowledge about global public health.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2742,  1019,  1012,  4261, 11637,  2008,  2478,  1037,  2028,
         1011, 11536, 10744,  9005,  1037,  3891,  1997, 12549,  2951,  4637,
         1996,  4500,  7091,  1012,  2057,  2071,  2031,  2081,  1037,  2714,
         7561,  2043, 15252,  1996, 20996, 28886,  2015,  1521,  3160,  2951,
         2023,  2930,  1025,  2065,  2057,  2018,  1037,  3653,  1011, 10141,
         9366,  2008,  2267,  1011,  5161,  2111,  2876,  1521,  1056,  2079,
         4788,  2084,  6721, 16986,  1998,  2061,  2109,  1037,  2028,  1011,
        11536,  3231,  1010,  2057,  2052,  2031,  4771,  1996,  2428,  5875,
         4531,  2008,  2116,  2111,  2031, 16542,  3716,  2055,  3795,  2270,
         2740,  1012,   102])"
1392,1,['test'], Hypothesis testing for a proportion,seg_49,"when might a one-sided test be appropriate to use? very rarely. should you ever find yourself considering using a one-sided test, carefully answer the following question:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2043,  2453,  1037,  2028,  1011, 11536,  3231,  2022,  6413,
         2000,  2224,  1029,  2200,  6524,  1012,  2323,  2017,  2412,  2424,
         4426,  6195,  2478,  1037,  2028,  1011, 11536,  3231,  1010,  5362,
         3437,  1996,  2206,  3160,  1024,   102])"
1393,1,"['alternative hypothesis', 'hypothesis', 'data']", Hypothesis testing for a proportion,seg_49,"what would i, or others, conclude if the data happens to go clearly in the opposite direction than my alternative hypothesis?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2054,  2052,  1045,  1010,  2030,  2500,  1010, 16519,  2065,
         1996,  2951,  6433,  2000,  2175,  4415,  1999,  1996,  4500,  3257,
         2084,  2026,  4522, 10744,  1029,   102])"
1394,1,"['hypothesis', 'tests', 'hypothesis test', 'data', 'test']", Hypothesis testing for a proportion,seg_49,"if you or others would find any value in making a conclusion about the data that goes in the opposite direction of a one-sided test, then a two-sided hypothesis test should actually be used. these considerations can be subtle, so exercise caution. we will only apply two-sided tests in the rest of this book.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2065,  2017,  2030,  2500,  2052,  2424,  2151,  3643,  1999,
         2437,  1037,  7091,  2055,  1996,  2951,  2008,  3632,  1999,  1996,
         4500,  3257,  1997,  1037,  2028,  1011, 11536,  3231,  1010,  2059,
         1037,  2048,  1011, 11536, 10744,  3231,  2323,  2941,  2022,  2109,
         1012,  2122, 16852,  2064,  2022, 11259,  1010,  2061,  6912, 14046,
         1012,  2057,  2097,  2069,  6611,  2048,  1011, 11536,  5852,  1999,
         1996,  2717,  1997,  2023,  2338,  1012,   102])"
1395,1,"['data', 'test']", Hypothesis testing for a proportion,seg_49,why can’t we simply run a one-sided test that goes in the direction of the data?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2339,  2064,  1521,  1056,  2057,  3432,  2448,  1037,  2028,
         1011, 11536,  3231,  2008,  3632,  1999,  1996,  3257,  1997,  1996,
         2951,  1029,   102])"
1396,1,"['significance level', 'hypothesis', 'level', 'hypothesis test', 'type 1 error', 'significance', 'error', 'test']", Hypothesis testing for a proportion,seg_49,"we’ve been building a careful framework that controls for the type 1 error, which is the significance level α in a hypothesis test. we’ll use the α = 0.05 below to keep things simple.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2057,  1521,  2310,  2042,  2311,  1037,  6176,  7705,  2008,
         7711,  2005,  1996,  2828,  1015,  7561,  1010,  2029,  2003,  1996,
         7784,  2504,  1155,  1999,  1037, 10744,  3231,  1012,  2057,  1521,
         2222,  2224,  1996,  1155,  1027,  1014,  1012,  5709,  2917,  2000,
         2562,  2477,  3722,  1012,   102])"
1397,1,"['data', 'test']", Hypothesis testing for a proportion,seg_49,imagine we could pick the one-sided test after we saw the data. what will go wrong?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  5674,  2057,  2071,  4060,  1996,  2028,  1011, 11536,  3231,
         2044,  2057,  2387,  1996,  2951,  1012,  2054,  2097,  2175,  3308,
         1029,   102])"
1398,1,"['tail', 'mean', 'null distribution', 'observation', 'null value', 'distribution', 'test']", Hypothesis testing for a proportion,seg_49,"• if p̂ is smaller than the null value, then a one-sided test where p < p0 would mean that any observation in the lower 5% tail of the null distribution would lead to us rejecting h0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1528,  2065,  1052,  2003,  3760,  2084,  1996, 19701,  3643,
         1010,  2059,  1037,  2028,  1011, 11536,  3231,  2073,  1052,  1026,
         1052,  2692,  2052,  2812,  2008,  2151,  8089,  1999,  1996,  2896,
         1019,  1003,  5725,  1997,  1996, 19701,  4353,  2052,  2599,  2000,
         2149, 21936,  1044,  2692,  1012,   102])"
1399,1,"['tail', 'mean', 'null distribution', 'observation', 'null value', 'distribution', 'test']", Hypothesis testing for a proportion,seg_49,"• if p̂ is larger than the null value, then a one-sided test where p > p0 would mean that any observation in the upper 5% tail of the null distribution would lead to us rejecting h0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  1528,  2065,  1052,  2003,  3469,  2084,  1996, 19701,  3643,
         1010,  2059,  1037,  2028,  1011, 11536,  3231,  2073,  1052,  1028,
         1052,  2692,  2052,  2812,  2008,  2151,  8089,  1999,  1996,  3356,
         1019,  1003,  5725,  1997,  1996, 19701,  4353,  2052,  2599,  2000,
         2149, 21936,  1044,  2692,  1012,   102])"
1400,1,"['tails', 'tests', 'error']", Hypothesis testing for a proportion,seg_49,"then if h0 were true, there’s a 10% chance of being in one of the two tails, so our testing error is actually α = 0.10, not 0.05. that is, not being careful about when to use one-sided tests effectively undermines the methods we’re working so hard to develop and utilize.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10744,  5604,  2005,  1037, 10817])","tensor([  101,  2059,  2065,  1044,  2692,  2020,  2995,  1010,  2045,  1521,
         1055,  1037,  2184,  1003,  3382,  1997,  2108,  1999,  2028,  1997,
         1996,  2048, 17448,  1010,  2061,  2256,  5604,  7561,  2003,  2941,
         1155,  1027,  1014,  1012,  2184,  1010,  2025,  1014,  1012,  5709,
         1012,  2008,  2003,  1010,  2025,  2108,  6176,  2055,  2043,  2000,
         2224,  2028,  1011, 11536,  5852,  6464, 25174,  2015,  1996,  4725,
         2057,  1521,  2128,  2551,  2061,  2524,  2000,  4503,  1998, 16462,
         1012,   102])"
1401,1,"['goodness of fit', 'normal distribution', 'normal', 'contingency tables', 'model', 'data', 'uncertainty', 'hypothesis', 'independence', 'tables', 'hypothesis testing', 'categorical', 'categorical data', 'sample', 'distribution']",Chapter  Inference for categorical data,seg_51,"6.1 inference for a single proportion 6.2 difference of two proportions 6.3 testing for goodness of fit using chi-square 6.4 testing for independence in two-way tables in this chapter, we apply the methods and ideas from chapter 5 in several contexts for categorical data. we’ll start by revisiting what we learned for a single proportion, where the normal distribution can be used to model the uncertainty in the sample proportion. next, we apply these same ideas to analyze the difference of two proportions using the normal model. later in the chapter, we apply inference techniques to contingency tables; while we will use a different distribution in this context, the core ideas of hypothesis testing remain the same. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3127, 28937,  2005,  4937, 27203,  2951])","tensor([  101,  1020,  1012,  1015, 28937,  2005,  1037,  2309, 10817,  1020,
         1012,  1016,  4489,  1997,  2048, 19173,  1020,  1012,  1017,  5604,
         2005, 15003,  1997,  4906,  2478,  9610,  1011,  2675,  1020,  1012,
         1018,  5604,  2005,  4336,  1999,  2048,  1011,  2126,  7251,  1999,
         2023,  3127,  1010,  2057,  6611,  1996,  4725,  1998,  4784,  2013,
         3127,  1019,  1999,  2195, 18046,  2005,  4937, 27203,  2951,  1012,
         2057,  1521,  2222,  2707,  2011,  7065, 17417,  3436,  2054,  2057,
         4342,  2005,  1037,  2309, 10817,  1010,  2073,  1996,  3671,  4353,
         2064,  2022,  2109,  2000,  2944,  1996, 12503,  1999,  1996,  7099,
        10817,  1012,  2279,  1010,  2057,  6611,  2122,  2168,  4784,  2000,
        17908,  1996,  4489,  1997,  2048, 19173,  2478,  1996,  3671,  2944,
         1012,  2101,  1999,  1996,  3127,  1010,  2057,  6611, 28937,  5461,
         2000,  9530,  3436, 11916,  7251,  1025,  2096,  2057,  2097,  2224,
         1037,  2367,  4353,  1999,  2023,  6123,  1010,  1996,  4563,  4784,
         1997, 10744,  5604,  3961,  1996,  2168,  1012,  2005,  6876,  1010,
        14816,  1010,  1998,  2060,  4219,  1010,  3531,  3942,  7479,  1012,
         2330, 18447,  3217,  1012,  8917,  1013,  9808,   102])"
1402,1,"['hypothesis tests', 'hypothesis', 'sample', 'sample size', 'tests', 'intervals', 'confidence intervals', 'confidence', 'data']", Inference for a single proportion,seg_53,"we encountered inference methods for a single proportion in chapter 5, exploring point estimates, confidence intervals, and hypothesis tests. in this section, we’ll do a review of these topics and also how to choose an appropriate sample size when collecting data for single proportion contexts.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2057,  8567, 28937,  4725,  2005,  1037,  2309, 10817,  1999,
         3127,  1019,  1010, 11131,  2391, 10035,  1010,  7023, 14025,  1010,
         1998, 10744,  5852,  1012,  1999,  2023,  2930,  1010,  2057,  1521,
         2222,  2079,  1037,  3319,  1997,  2122,  7832,  1998,  2036,  2129,
         2000,  5454,  2019,  6413,  7099,  2946,  2043,  9334,  2951,  2005,
         2309, 10817, 18046,  1012,   102])"
1403,1,"['sample', 'normal']", Inference for a single proportion,seg_53,6.1.1 identifying when the sample proportion is nearly normal,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1020,  1012,  1015,  1012,  1015, 12151,  2043,  1996,  7099,
        10817,  2003,  3053,  3671,   102])"
1404,1,"['normal distribution', 'observations', 'sample', 'normal', 'sample size', 'distribution', 'independent']", Inference for a single proportion,seg_53,a sample proportion p̂ can be modeled using a normal distribution when the sample observations are independent and the sample size is sufficiently large.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1037,  7099, 10817,  1052,  2064,  2022, 14440,  2478,  1037,
         3671,  4353,  2043,  1996,  7099,  9420,  2024,  2981,  1998,  1996,
         7099,  2946,  2003, 12949,  2312,  1012,   102])"
1405,1,"['distribution', 'population', 'sample', 'sampling', 'normal', 'sampling distribution']", Inference for a single proportion,seg_53,the sampling distribution for p̂ based on a sample of size n from a population with a true proportion p is nearly normal when:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1996, 16227,  4353,  2005,  1052,  2241,  2006,  1037,  7099,
         1997,  2946,  1050,  2013,  1037,  2313,  2007,  1037,  2995, 10817,
         1052,  2003,  3053,  3671,  2043,  1024,   102])"
1406,1,"['observations', 'random sample', 'sample', 'random', 'simple random sample', 'independent']", Inference for a single proportion,seg_53,"1. the sample’s observations are independent, e.g. are from a simple random sample.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([ 101, 1015, 1012, 1996, 7099, 1521, 1055, 9420, 2024, 2981, 1010, 1041,
        1012, 1043, 1012, 2024, 2013, 1037, 3722, 6721, 7099, 1012,  102])"
1407,1,"['failures', 'sample', 'condition', 'successes']", Inference for a single proportion,seg_53,"2. we expected to see at least 10 successes and 10 failures in the sample, i.e. np ≥ 10 and n(1− p) ≥ 10. this is called the success-failure condition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1016,  1012,  2057,  3517,  2000,  2156,  2012,  2560,  2184,
        14152,  1998,  2184, 15428,  1999,  1996,  7099,  1010,  1045,  1012,
         1041,  1012, 27937,  1609,  2184,  1998,  1050,  1006,  1015, 22543,
         1052,  1007,  1609,  2184,  1012,  2023,  2003,  2170,  1996,  3112,
         1011,  4945,  4650,  1012,   102])"
1408,1,"['mean', 'sampling', 'normal', 'standard', 'distribution', 'standard error', 'sampling distribution', 'error']", Inference for a single proportion,seg_53,"when these conditions are met, then the sampling distribution of p̂ is nearly normal with mean p(1−p) p and standard error se = √ n .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2043,  2122,  3785,  2024,  2777,  1010,  2059,  1996, 16227,
         4353,  1997,  1052,  2003,  3053,  3671,  2007,  2812,  1052,  1006,
         1015, 22543,  2361,  1007,  1052,  1998,  3115,  7561,  7367,  1027,
         1600,  1050,  1012,   102])"
1409,1,"['tests', 'condition', 'null hypothesis', 'confidence', 'estimate', 'standard error', 'null value', 'hypothesis', 'standard', 'confidence intervals', 'sample', 'intervals', 'hypothesis tests', 'error']", Inference for a single proportion,seg_53,"typically we don’t know the true proportion p, so we substitute some value to check conditions and estimate the standard error. for confidence intervals, the sample proportion p̂ is used to check the success-failure condition and compute the standard error. for hypothesis tests, typically the null value – that is, the proportion claimed in the null hypothesis – is used in place of p.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  4050,  2057,  2123,  1521,  1056,  2113,  1996,  2995, 10817,
         1052,  1010,  2061,  2057,  7681,  2070,  3643,  2000,  4638,  3785,
         1998, 10197,  1996,  3115,  7561,  1012,  2005,  7023, 14025,  1010,
         1996,  7099, 10817,  1052,  2003,  2109,  2000,  4638,  1996,  3112,
         1011,  4945,  4650,  1998, 24134,  1996,  3115,  7561,  1012,  2005,
        10744,  5852,  1010,  4050,  1996, 19701,  3643,  1516,  2008,  2003,
         1010,  1996, 10817,  3555,  1999,  1996, 19701, 10744,  1516,  2003,
         2109,  1999,  2173,  1997,  1052,  1012,   102])"
1410,1,"['intervals', 'confidence intervals', 'confidence']", Inference for a single proportion,seg_53,6.1.2 confidence intervals for a proportion,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1020,  1012,  1015,  1012,  1016,  7023, 14025,  2005,  1037,
        10817,   102])"
1411,1,"['parameter', 'normal distribution', 'range', 'confidence interval', 'interval', 'normal', 'distribution', 'confidence']", Inference for a single proportion,seg_53,"a confidence interval provides a range of plausible values for the parameter p, and when p̂ can be modeled using a normal distribution, the confidence interval for p takes the form",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1037,  7023, 13483,  3640,  1037,  2846,  1997, 24286,  5300,
         2005,  1996, 16381,  1052,  1010,  1998,  2043,  1052,  2064,  2022,
        14440,  2478,  1037,  3671,  4353,  1010,  1996,  7023, 13483,  2005,
         1052,  3138,  1996,  2433,   102])"
1412,1,"['normal distribution', 'random sample', 'sample', 'random', 'normal', 'simple random sample', 'distribution', 'model']", Inference for a single proportion,seg_53,a simple random sample of 826 payday loan borrowers was surveyed to better understand their interests around regulation and costs. 70% of the responses supported new regulations on payday lenders. is it reasonable to model p̂ = 0.70 using a normal distribution?,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1037,  3722,  6721,  7099,  1997,  6445,  2575,  3477, 10259,
         5414, 17781,  2545,  2001, 12876,  2000,  2488,  3305,  2037,  5426,
         2105,  7816,  1998,  5366,  1012,  3963,  1003,  1997,  1996, 10960,
         3569,  2047,  7040,  2006,  3477, 10259, 18496,  2545,  1012,  2003,
         2009,  9608,  2000,  2944,  1052,  1027,  1014,  1012,  3963,  2478,
         1037,  3671,  4353,  1029,   102])"
1413,1,"['observations', 'random sample', 'sample', 'random', 'population', 'data', 'representative', 'independent']", Inference for a single proportion,seg_53,"the data are a random sample, so the observations are independent and representative of the population of interest.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([ 101, 1996, 2951, 2024, 1037, 6721, 7099, 1010, 2061, 1996, 9420, 2024,
        2981, 1998, 4387, 1997, 1996, 2313, 1997, 3037, 1012,  102])"
1414,1,"['confidence interval', 'interval', 'condition', 'confidence']", Inference for a single proportion,seg_53,"we also must check the success-failure condition, which we do using p̂ in place of p when computing a confidence interval:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2057,  2036,  2442,  4638,  1996,  3112,  1011,  4945,  4650,
         1010,  2029,  2057,  2079,  2478,  1052,  1999,  2173,  1997,  1052,
         2043,  9798,  1037,  7023, 13483,  1024,   102])"
1415,1,"['model', 'normal', 'normal distribution', 'distribution']", Inference for a single proportion,seg_53,"since both values are at least 10, we can use the normal distribution to model p̂.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0.,
        0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([ 101, 2144, 2119, 5300, 2024, 2012, 2560, 2184, 1010, 2057, 2064, 2224,
        1996, 3671, 4353, 2000, 2944, 1052, 1012,  102])"
1416,1,"['confidence interval', 'interval', 'standard', 'standard error', 'confidence', 'error']", Inference for a single proportion,seg_53,"estimate the standard error of p̂ = 0.70. because p is unknown and the standard error is for a confidence interval, use p̂ in place of p in the formula.1",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101, 10197,  1996,  3115,  7561,  1997,  1052,  1027,  1014,  1012,
         3963,  1012,  2138,  1052,  2003,  4242,  1998,  1996,  3115,  7561,
         2003,  2005,  1037,  7023, 13483,  1010,  2224,  1052,  1999,  2173,
         1997,  1052,  1999,  1996,  5675,  1012,  1015,   102])"
1417,1,"['interval', 'confidence', 'confidence interval']", Inference for a single proportion,seg_53,"construct a 95% confidence interval for p, the proportion of payday borrowers who support increased regulation for payday lenders.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  9570,  1037,  5345,  1003,  7023, 13483,  2005,  1052,  1010,
         1996, 10817,  1997,  3477, 10259, 17781,  2545,  2040,  2490,  3445,
         7816,  2005,  3477, 10259, 18496,  2545,  1012,   102])"
1418,1,"['confidence interval', 'interval', 'estimate', 'point estimate', 'standard', 'standard error', 'confidence', 'error']", Inference for a single proportion,seg_53,"using the point estimate 0.70, z? = 1.96 for a 95% confidence interval, and the standard error se = 0.016 from guided practice 6.2, the confidence interval is",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2478,  1996,  2391, 10197,  1014,  1012,  3963,  1010,  1062,
         1029,  1027,  1015,  1012,  5986,  2005,  1037,  5345,  1003,  7023,
        13483,  1010,  1998,  1996,  3115,  7561,  7367,  1027,  1014,  1012,
         5890,  2575,  2013,  8546,  3218,  1020,  1012,  1016,  1010,  1996,
         7023, 13483,  2003,   102])"
1419,1,['estimate'], Inference for a single proportion,seg_53,"point estimate ± z? × se → 0.70 ± 1.96× 0.016 → (0.669, 0.731)",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2391, 10197,  1081,  1062,  1029,  1095,  7367,  1585,  1014,
         1012,  3963,  1081,  1015,  1012,  5986, 26306,  1014,  1012,  5890,
         2575,  1585,  1006,  1014,  1012,  5764,  2683,  1010,  1014,  1012,
         6421,  2487,  1007,   102])"
1420,1,['confident'], Inference for a single proportion,seg_53,we are 95% confident that the true proportion of payday borrowers who supported regulation at the time of the poll was between 0.669 and 0.731.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2057,  2024,  5345,  1003,  9657,  2008,  1996,  2995, 10817,
         1997,  3477, 10259, 17781,  2545,  2040,  3569,  7816,  2012,  1996,
         2051,  1997,  1996,  8554,  2001,  2090,  1014,  1012,  5764,  2683,
         1998,  1014,  1012,  6421,  2487,  1012,   102])"
1421,1,"['interval', 'confidence', 'confidence interval']", Inference for a single proportion,seg_53,"once you’ve determined a one-proportion confidence interval would be helpful for an application, there are four steps to constructing the interval:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2320,  2017,  1521,  2310,  4340,  1037,  2028,  1011, 10817,
         7023, 13483,  2052,  2022, 14044,  2005,  2019,  4646,  1010,  2045,
         2024,  2176,  4084,  2000, 15696,  1996, 13483,  1024,   102])"
1422,1,"['confidence level', 'confidence', 'level']", Inference for a single proportion,seg_53,"prepare. identify p̂ and n, and determine what confidence level you wish to use.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([ 101, 7374, 1012, 6709, 1052, 1998, 1050, 1010, 1998, 5646, 2054, 7023,
        2504, 2017, 4299, 2000, 2224, 1012,  102])"
1423,1,"['normal', 'intervals', 'condition', 'confidence intervals', 'confidence']", Inference for a single proportion,seg_53,"check. verify the conditions to ensure p̂ is nearly normal. for one-proportion confidence intervals, use p̂ in place of p to check the success-failure condition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  4638,  1012, 20410,  1996,  3785,  2000,  5676,  1052,  2003,
         3053,  3671,  1012,  2005,  2028,  1011, 10817,  7023, 14025,  1010,
         2224,  1052,  1999,  2173,  1997,  1052,  2000,  4638,  1996,  3112,
         1011,  4945,  4650,  1012,   102])"
1424,1,['interval'], Inference for a single proportion,seg_53,"calculate. if the conditions hold, compute se using p̂, find z?, and construct the interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101, 18422,  1012,  2065,  1996,  3785,  2907,  1010, 24134,  7367,
         2478,  1052,  1010,  2424,  1062,  1029,  1010,  1998,  9570,  1996,
        13483,  1012,   102])"
1425,1,"['interval', 'confidence', 'confidence interval']", Inference for a single proportion,seg_53,conclude. interpret the confidence interval in the context of the problem.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101, 16519,  1012, 17841,  1996,  7023, 13483,  1999,  1996,  6123,
         1997,  1996,  3291,  1012,   102])"
1426,1,"['interval', 'confidence', 'confidence interval']", Inference for a single proportion,seg_53,"for additional one-proportion confidence interval examples, see section 5.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2005,  3176,  2028,  1011, 10817,  7023, 13483,  4973,  1010,
         2156,  2930,  1019,  1012,  1016,  1012,   102])"
1427,1,"['hypothesis testing', 'hypothesis']", Inference for a single proportion,seg_53,6.1.3 hypothesis testing for a proportion,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1020,  1012,  1015,  1012,  1017, 10744,  5604,  2005,  1037,
        10817,   102])"
1428,0,[], Inference for a single proportion,seg_53,one possible regulation for payday lenders is that they would be required to do a credit check and evaluate debt payments against the borrower’s finances. we would like to know: would borrowers support this form of regulation?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2028,  2825,  7816,  2005,  3477, 10259, 18496,  2545,  2003,
         2008,  2027,  2052,  2022,  3223,  2000,  2079,  1037,  4923,  4638,
         1998, 16157,  7016, 10504,  2114,  1996, 17781,  2121,  1521,  1055,
        16156,  1012,  2057,  2052,  2066,  2000,  2113,  1024,  2052, 17781,
         2545,  2490,  2023,  2433,  1997,  7816,  1029,   102])"
1429,1,['hypotheses'], Inference for a single proportion,seg_53,set up hypotheses to evaluate whether borrowers have a majority support or majority opposition,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2275,  2039,  1044, 22571, 14573, 23072,  2000, 16157,  3251,
        17781,  2545,  2031,  1037,  3484,  2490,  2030,  3484,  4559,   102])"
1430,0,[], Inference for a single proportion,seg_53,2 for this type of regulation.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([ 101, 1016, 2005, 2023, 2828, 1997, 7816, 1012,  102])"
1431,1,"['normal distribution', 'hypothesis test', 'null value', 'hypothesis', 'independence', 'normal', 'condition', 'distribution', 'test']", Inference for a single proportion,seg_53,"to apply the normal distribution framework in the context of a hypothesis test for a proportion, the independence and success-failure conditions must be satisfied. in a hypothesis test, the successfailure condition is checked using the null proportion: we verify np0 and n(1 − p0) are at least 10, where p0 is the null value.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2000,  6611,  1996,  3671,  4353,  7705,  1999,  1996,  6123,
         1997,  1037, 10744,  3231,  2005,  1037, 10817,  1010,  1996,  4336,
         1998,  3112,  1011,  4945,  3785,  2442,  2022,  8510,  1012,  1999,
         1037, 10744,  3231,  1010,  1996,  3112,  7011,  4014,  5397,  4650,
         2003,  7039,  2478,  1996, 19701, 10817,  1024,  2057, 20410, 27937,
         2692,  1998,  1050,  1006,  1015,  1597,  1052,  2692,  1007,  2024,
         2012,  2560,  2184,  1010,  2073,  1052,  2692,  2003,  1996, 19701,
         3643,  1012,   102])"
1432,1,"['normal distribution', 'hypothesis test', 'hypothesis', 'random sample', 'sample', 'random', 'normal', 'distribution', 'model', 'test']", Inference for a single proportion,seg_53,"do payday loan borrowers support a regulation that would require lenders to pull their credit report and evaluate their debt payments? from a random sample of 826 borrowers, 51% said they would support such a regulation. is it reasonable to model p̂ = 0.51 using a normal distribution for a hypothesis test here?3",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2079,  3477, 10259,  5414, 17781,  2545,  2490,  1037,  7816,
         2008,  2052,  5478, 18496,  2545,  2000,  4139,  2037,  4923,  3189,
         1998, 16157,  2037,  7016, 10504,  1029,  2013,  1037,  6721,  7099,
         1997,  6445,  2575, 17781,  2545,  1010,  4868,  1003,  2056,  2027,
         2052,  2490,  2107,  1037,  7816,  1012,  2003,  2009,  9608,  2000,
         2944,  1052,  1027,  1014,  1012,  4868,  2478,  1037,  3671,  4353,
         2005,  1037, 10744,  3231,  2182,  1029,  1017,   102])"
1433,1,"['hypotheses', 'data']", Inference for a single proportion,seg_53,"using the hypotheses and data from guided practice 6.4 and 6.5, evaluate whether the poll provides convincing evidence that a majority of payday loan borrowers support a new regulation that would require lenders to pull credit reports and evaluate debt payments.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2478,  1996,  1044, 22571, 14573, 23072,  1998,  2951,  2013,
         8546,  3218,  1020,  1012,  1018,  1998,  1020,  1012,  1019,  1010,
        16157,  3251,  1996,  8554,  3640, 13359,  3350,  2008,  1037,  3484,
         1997,  3477, 10259,  5414, 17781,  2545,  2490,  1037,  2047,  7816,
         2008,  2052,  5478, 18496,  2545,  2000,  4139,  4923,  4311,  1998,
        16157,  7016, 10504,  1012,   102])"
1434,1,"['hypotheses', 'set', 'null value', 'hypothesis', 'standard', 'hypothesis test', 'standard error', 'error', 'test']", Inference for a single proportion,seg_53,"with hypotheses already set up and conditions checked, we can move onto calculations. the standard error in the context of a one-proportion hypothesis test is computed using the null value, p0:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2007,  1044, 22571, 14573, 23072,  2525,  2275,  2039,  1998,
         3785,  7039,  1010,  2057,  2064,  2693,  3031, 16268,  1012,  1996,
         3115,  7561,  1999,  1996,  6123,  1997,  1037,  2028,  1011, 10817,
        10744,  3231,  2003, 24806,  2478,  1996, 19701,  3643,  1010,  1052,
         2692,  1024,   102])"
1435,1,"['model', 'normal']", Inference for a single proportion,seg_53,a picture of the normal model is shown below with the p-value represented by the shaded region.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1037,  3861,  1997,  1996,  3671,  2944,  2003,  3491,  2917,
         2007,  1996,  1052,  1011,  3643,  3421,  2011,  1996, 25273,  2555,
         1012,   102])"
1436,1,"['test statistic', 'estimate', 'point estimate', 'normal', 'model', 'statistic', 'test']", Inference for a single proportion,seg_53,"based on the normal model, the test statistic can be computed as the z-score of the point estimate:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2241,  2006,  1996,  3671,  2944,  1010,  1996,  3231, 28093,
         6553,  2064,  2022, 24806,  2004,  1996,  1062,  1011,  3556,  1997,
         1996,  2391, 10197,  1024,   102])"
1437,1,['null value'], Inference for a single proportion,seg_53,point estimate− null value 0.51− 0.50 z = = = 0.59 se 0.017,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2391, 10197, 22543, 19701,  3643,  1014,  1012,  4868, 22543,
         1014,  1012,  2753,  1062,  1027,  1027,  1027,  1014,  1012,  5354,
         7367,  1014,  1012,  5890,  2581,   102])"
1438,1,"['tail', 'tail areas']", Inference for a single proportion,seg_53,"the single tail area is 0.2776, and the p-value, represented by both tail areas together, is 0.5552. because the p-value is larger than 0.05, we do not reject h0. the poll does not provide convincing evidence that a majority of payday loan borrowers support or oppose regulations around credit checks and evaluation of debt payments.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1996,  2309,  5725,  2181,  2003,  1014,  1012, 25578,  2575,
         1010,  1998,  1996,  1052,  1011,  3643,  1010,  3421,  2011,  2119,
         5725,  2752,  2362,  1010,  2003,  1014,  1012, 29541,  2475,  1012,
         2138,  1996,  1052,  1011,  3643,  2003,  3469,  2084,  1014,  1012,
         5709,  1010,  2057,  2079,  2025, 15454,  1044,  2692,  1012,  1996,
         8554,  2515,  2025,  3073, 13359,  3350,  2008,  1037,  3484,  1997,
         3477, 10259,  5414, 17781,  2545,  2490,  2030, 15391,  7040,  2105,
         4923, 14148,  1998,  9312,  1997,  7016, 10504,  1012,   102])"
1439,1,"['hypothesis test', 'hypothesis', 'test']", Inference for a single proportion,seg_53,"once you’ve determined a one-proportion hypothesis test is the correct procedure, there are four steps to completing the test:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2320,  2017,  1521,  2310,  4340,  1037,  2028,  1011, 10817,
        10744,  3231,  2003,  1996,  6149,  7709,  1010,  2045,  2024,  2176,
         4084,  2000,  7678,  1996,  3231,  1024,   102])"
1440,1,"['parameter', 'hypotheses', 'significance level', 'parameter of interest', 'level', 'significance']", Inference for a single proportion,seg_53,"prepare. identify the parameter of interest, list hypotheses, identify the significance level, and identify p̂ and n.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  7374,  1012,  6709,  1996, 16381,  1997,  3037,  1010,  2862,
         1044, 22571, 14573, 23072,  1010,  6709,  1996,  7784,  2504,  1010,
         1998,  6709,  1052,  1998,  1050,  1012,   102])"
1441,1,"['hypothesis tests', 'null value', 'hypothesis', 'tests', 'normal', 'condition']", Inference for a single proportion,seg_53,"check. verify conditions to ensure p̂ is nearly normal under h0. for one-proportion hypothesis tests, use the null value to check the success-failure condition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  4638,  1012, 20410,  3785,  2000,  5676,  1052,  2003,  3053,
         3671,  2104,  1044,  2692,  1012,  2005,  2028,  1011, 10817, 10744,
         5852,  1010,  2224,  1996, 19701,  3643,  2000,  4638,  1996,  3112,
         1011,  4945,  4650,  1012,   102])"
1442,1,"['standard', 'standard error', 'error']", Inference for a single proportion,seg_53,"calculate. if the conditions hold, compute the standard error, again using p0, compute the z-score, and identify the p-value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101, 18422,  1012,  2065,  1996,  3785,  2907,  1010, 24134,  1996,
         3115,  7561,  1010,  2153,  2478,  1052,  2692,  1010, 24134,  1996,
         1062,  1011,  3556,  1010,  1998,  6709,  1996,  1052,  1011,  3643,
         1012,   102])"
1443,1,"['hypothesis test', 'hypothesis', 'test']", Inference for a single proportion,seg_53,"conclude. evaluate the hypothesis test by comparing the p-value to α, and provide a conclusion in the context of the problem.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101, 16519,  1012, 16157,  1996, 10744,  3231,  2011, 13599,  1996,
         1052,  1011,  3643,  2000,  1155,  1010,  1998,  3073,  1037,  7091,
         1999,  1996,  6123,  1997,  1996,  3291,  1012,   102])"
1444,1,"['hypothesis test', 'hypothesis', 'test']", Inference for a single proportion,seg_53,"for additional one-proportion hypothesis test examples, see section 5.3.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2005,  3176,  2028,  1011, 10817, 10744,  3231,  4973,  1010,
         2156,  2930,  1019,  1012,  1017,  1012,   102])"
1445,0,[], Inference for a single proportion,seg_53,6.1.4 when one or more conditions aren’t met,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([ 101, 1020, 1012, 1015, 1012, 1018, 2043, 2028, 2030, 2062, 3785, 4995,
        1521, 1056, 2777,  102])"
1446,1,"['tests', 'condition', 'confidence', 'distribution', 'normal distribution', 'interval', 'normal', 'case', 'hypothesis', 'independence', 'confidence intervals', 'intervals', 'hypothesis tests']", Inference for a single proportion,seg_53,"we’ve spent a lot of time discussing conditions for when p̂ can be reasonably modeled by a normal distribution. what happens when the success-failure condition fails? what about when the independence condition fails? in either case, the general ideas of confidence intervals and hypothesis tests remain the same, but the strategy or technique used to generate the interval or p-value change.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2057,  1521,  2310,  2985,  1037,  2843,  1997,  2051, 10537,
         3785,  2005,  2043,  1052,  2064,  2022, 16286, 14440,  2011,  1037,
         3671,  4353,  1012,  2054,  6433,  2043,  1996,  3112,  1011,  4945,
         4650, 11896,  1029,  2054,  2055,  2043,  1996,  4336,  4650, 11896,
         1029,  1999,  2593,  2553,  1010,  1996,  2236,  4784,  1997,  7023,
        14025,  1998, 10744,  5852,  3961,  1996,  2168,  1010,  2021,  1996,
         5656,  2030,  6028,  2109,  2000,  9699,  1996, 13483,  2030,  1052,
         1011,  3643,  2689,  1012,   102])"
1447,1,"['null distribution', 'hypothesis test', 'simulation', 'null value', 'hypothesis', 'condition', 'distribution', 'case', 'test']", Inference for a single proportion,seg_53,"when the success-failure condition isn’t met for a hypothesis test, we can simulate the null distribution of p̂ using the null value, p0. the simulation concept is similar to the ideas used in the malaria case study presented in section 2.3, and an online section outlines this strategy:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2043,  1996,  3112,  1011,  4945,  4650,  3475,  1521,  1056,
         2777,  2005,  1037, 10744,  3231,  1010,  2057,  2064, 26633,  1996,
        19701,  4353,  1997,  1052,  2478,  1996, 19701,  3643,  1010,  1052,
         2692,  1012,  1996, 12504,  4145,  2003,  2714,  2000,  1996,  4784,
         2109,  1999,  1996, 19132,  2553,  2817,  3591,  1999,  2930,  1016,
         1012,  1017,  1010,  1998,  2019,  3784,  2930, 22106,  2023,  5656,
         1024,   102])"
1448,1,"['confidence interval', 'interval', 'condition', 'confidence']", Inference for a single proportion,seg_53,"for a confidence interval when the success-failure condition isn’t met, we can use what’s called the clopper-pearson interval. the details are beyond the scope of this book. however, there are many internet resources covering this topic.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2005,  1037,  7023, 13483,  2043,  1996,  3112,  1011,  4945,
         4650,  3475,  1521,  1056,  2777,  1010,  2057,  2064,  2224,  2054,
         1521,  1055,  2170,  1996, 18856,  7361,  4842,  1011, 12874, 13483,
         1012,  1996,  4751,  2024,  3458,  1996,  9531,  1997,  2023,  2338,
         1012,  2174,  1010,  2045,  2024,  2116,  4274,  4219,  5266,  2023,
         8476,  1012,   102])"
1449,1,"['convenience sample', 'data', 'independence', 'cluster sample', 'sample', 'method', 'condition', 'biases', 'statistics', 'statistical']", Inference for a single proportion,seg_53,"the independence condition is a more nuanced requirement. when it isn’t met, it is important to understand how and why it isn’t met. for example, if we took a cluster sample (see section 1.3), suitable statistical methods are available but would be beyond the scope of even most second or third courses in statistics. on the other hand, we’d be stretched to find any method that we could confidently apply to correct the inherent biases of data from a convenience sample.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1996,  4336,  4650,  2003,  1037,  2062, 16371,  6651,  2094,
         9095,  1012,  2043,  2009,  3475,  1521,  1056,  2777,  1010,  2009,
         2003,  2590,  2000,  3305,  2129,  1998,  2339,  2009,  3475,  1521,
         1056,  2777,  1012,  2005,  2742,  1010,  2065,  2057,  2165,  1037,
         9324,  7099,  1006,  2156,  2930,  1015,  1012,  1017,  1007,  1010,
         7218,  7778,  4725,  2024,  2800,  2021,  2052,  2022,  3458,  1996,
         9531,  1997,  2130,  2087,  2117,  2030,  2353,  5352,  1999,  6747,
         1012,  2006,  1996,  2060,  2192,  1010,  2057,  1521,  1040,  2022,
         7121,  2000,  2424,  2151,  4118,  2008,  2057,  2071, 28415,  6611,
         2000,  6149,  1996, 16112, 13827,  2229,  1997,  2951,  2013,  1037,
        15106,  7099,  1012,   102])"
1450,1,"['range', 'statistical', 'data']", Inference for a single proportion,seg_53,"while this book is scoped to well-constrained statistical problems, do remember that this is just the first book in what is a large library of statistical methods that are suitable for a very wide range of data and contexts.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2096,  2023,  2338,  2003,  9531,  2094,  2000,  2092,  1011,
        27570,  7778,  3471,  1010,  2079,  3342,  2008,  2023,  2003,  2074,
         1996,  2034,  2338,  1999,  2054,  2003,  1037,  2312,  3075,  1997,
         7778,  4725,  2008,  2024,  7218,  2005,  1037,  2200,  2898,  2846,
         1997,  2951,  1998, 18046,  1012,   102])"
1451,1,"['sample', 'sample size']", Inference for a single proportion,seg_53,6.1.5 choosing a sample size when estimating a proportion,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1020,  1012,  1015,  1012,  1019, 10549,  1037,  7099,  2946,
         2043,  9765, 22835,  1037, 10817,   102])"
1452,1,"['confidence interval', 'interval', 'estimate', 'point estimate', 'sample', 'sample size', 'confidence', 'margin of error', 'data', 'error']", Inference for a single proportion,seg_53,"when collecting data, we choose a sample size suitable for the purpose of the study. often times this means choosing a sample size large enough that the margin of error – which is the part we add and subtract from the point estimate in a confidence interval – is sufficiently small that the sample is useful. for example, our task might be to find a sample size n so that the sample proportion is within ±0.04 of the actual proportion in a 95% confidence interval.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2043,  9334,  2951,  1010,  2057,  5454,  1037,  7099,  2946,
         7218,  2005,  1996,  3800,  1997,  1996,  2817,  1012,  2411,  2335,
         2023,  2965, 10549,  1037,  7099,  2946,  2312,  2438,  2008,  1996,
         7785,  1997,  7561,  1516,  2029,  2003,  1996,  2112,  2057,  5587,
         1998,  4942,  6494,  6593,  2013,  1996,  2391, 10197,  1999,  1037,
         7023, 13483,  1516,  2003, 12949,  2235,  2008,  1996,  7099,  2003,
         6179,  1012,  2005,  2742,  1010,  2256,  4708,  2453,  2022,  2000,
         2424,  1037,  7099,  2946,  1050,  2061,  2008,  1996,  7099, 10817,
         2003,  2306,  1081,  2692,  1012,  5840,  1997,  1996,  5025, 10817,
         1999,  1037,  5345,  1003,  7023, 13483,  1012,   102])"
1453,1,"['confidence level', 'level', 'sample', 'confidence', 'margin of error', 'error']", Inference for a single proportion,seg_53,a university newspaper is conducting a survey to determine what fraction of students support a $200 per year increase in fees to pay for a new football stadium. how big of a sample is required to ensure the margin of error is smaller than 0.04 using a 95% confidence level?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1037,  2118,  3780,  2003,  9283,  1037,  5002,  2000,  5646,
         2054, 12884,  1997,  2493,  2490,  1037,  1002,  3263,  2566,  2095,
         3623,  1999,  9883,  2000,  3477,  2005,  1037,  2047,  2374,  3346,
         1012,  2129,  2502,  1997,  1037,  7099,  2003,  3223,  2000,  5676,
         1996,  7785,  1997,  7561,  2003,  3760,  2084,  1014,  1012,  5840,
         2478,  1037,  5345,  1003,  7023,  2504,  1029,   102])"
1454,1,"['sample', 'margin of error', 'error']", Inference for a single proportion,seg_53,the margin of error for a sample proportion is,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1996,  7785,  1997,  7561,  2005,  1037,  7099, 10817,  2003,
          102])"
1455,1,"['confidence level', 'level', 'sample', 'sample size', 'confidence', 'margin of error', 'error']", Inference for a single proportion,seg_53,"our goal is to find the smallest sample size n so that this margin of error is smaller than 0.04. for a 95% confidence level, the value z? corresponds to 1.96:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2256,  3125,  2003,  2000,  2424,  1996, 10479,  7099,  2946,
         1050,  2061,  2008,  2023,  7785,  1997,  7561,  2003,  3760,  2084,
         1014,  1012,  5840,  1012,  2005,  1037,  5345,  1003,  7023,  2504,
         1010,  1996,  3643,  1062,  1029, 14788,  2000,  1015,  1012,  5986,
         1024,   102])"
1456,1,"['estimate', 'margin of error', 'error', 'case']", Inference for a single proportion,seg_53,"there are two unknowns in the equation: p and n. if we have an estimate of p, perhaps from a prior survey, we could enter in that value and solve for n. if we have no such estimate, we must use some other value for p. it turns out that the margin of error is largest when p is 0.5, so we typically use this worst case value if no estimate of the proportion is available:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2045,  2024,  2048,  4242,  2015,  1999,  1996,  8522,  1024,
         1052,  1998,  1050,  1012,  2065,  2057,  2031,  2019, 10197,  1997,
         1052,  1010,  3383,  2013,  1037,  3188,  5002,  1010,  2057,  2071,
         4607,  1999,  2008,  3643,  1998,  9611,  2005,  1050,  1012,  2065,
         2057,  2031,  2053,  2107, 10197,  1010,  2057,  2442,  2224,  2070,
         2060,  3643,  2005,  1052,  1012,  2009,  4332,  2041,  2008,  1996,
         7785,  1997,  7561,  2003,  2922,  2043,  1052,  2003,  1014,  1012,
         1019,  1010,  2061,  2057,  4050,  2224,  2023,  5409,  2553,  3643,
         2065,  2053, 10197,  1997,  1996, 10817,  2003,  2800,  1024,   102])"
1457,1,"['sample', 'confidence']", Inference for a single proportion,seg_53,"we would need over 600.25 participants, which means we need 601 participants or more, to ensure the sample proportion is within 0.04 of the true proportion with 95% confidence.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2057,  2052,  2342,  2058,  5174,  1012,  2423,  6818,  1010,
         2029,  2965,  2057,  2342,  3438,  2487,  6818,  2030,  2062,  1010,
         2000,  5676,  1996,  7099, 10817,  2003,  2306,  1014,  1012,  5840,
         1997,  1996,  2995, 10817,  2007,  5345,  1003,  7023,  1012,   102])"
1458,1,"['estimate', 'case']", Inference for a single proportion,seg_53,"when an estimate of the proportion is available, we use it in place of the worst case proportion value, 0.5.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2043,  2019, 10197,  1997,  1996, 10817,  2003,  2800,  1010,
         2057,  2224,  2009,  1999,  2173,  1997,  1996,  5409,  2553, 10817,
         3643,  1010,  1014,  1012,  1019,  1012,   102])"
1459,1,"['confidence level', 'failure rate', 'rate', 'failure', 'estimate', 'level', 'quality control', 'sample', 'control', 'sample size', 'model', 'rates', 'confidence']", Inference for a single proportion,seg_53,"a manager is about to oversee the mass production of a new tire model in her factory, and she would like to estimate what proportion of these tires will be rejected through quality control. the quality control team has monitored the last three tire models produced by the factory, failing 1.7% of tires in the first model, 6.2% of the second model, and 1.3% of the third model. the manager would like to examine enough tires to estimate the failure rate of the new tire model to within about 1% with a 90% confidence level. there are three different failure rates to choose from. perform the sample size computation for each separately, and identify three sample sizes to consider.4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1037,  3208,  2003,  2055,  2000, 17467,  1996,  3742,  2537,
         1997,  1037,  2047, 12824,  2944,  1999,  2014,  4713,  1010,  1998,
         2016,  2052,  2066,  2000, 10197,  2054, 10817,  1997,  2122, 13310,
         2097,  2022,  5837,  2083,  3737,  2491,  1012,  1996,  3737,  2491,
         2136,  2038, 17785,  1996,  2197,  2093, 12824,  4275,  2550,  2011,
         1996,  4713,  1010,  7989,  1015,  1012,  1021,  1003,  1997, 13310,
         1999,  1996,  2034,  2944,  1010,  1020,  1012,  1016,  1003,  1997,
         1996,  2117,  2944,  1010,  1998,  1015,  1012,  1017,  1003,  1997,
         1996,  2353,  2944,  1012,  1996,  3208,  2052,  2066,  2000, 11628,
         2438, 13310,  2000, 10197,  1996,  4945,  3446,  1997,  1996,  2047,
        12824,  2944,  2000,  2306,  2055,  1015,  1003,  2007,  1037,  3938,
         1003,  7023,  2504,  1012,  2045,  2024,  2093,  2367,  4945,  6165,
         2000,  5454,  2013,  1012,  4685,  1996,  7099,  2946, 22334,  2005,
         2169, 10329,  1010,  1998,  6709,  2093,  7099, 10826,  2000,  5136,
         1012,  1018,   102])"
1460,1,"['sample', 'vary']", Inference for a single proportion,seg_53,the sample sizes vary widely in guided practice 6.8. which of the three would you suggest using? what would influence your choice?,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  1996,  7099, 10826,  8137,  4235,  1999,  8546,  3218,  1020,
         1012,  1022,  1012,  2029,  1997,  1996,  2093,  2052,  2017,  6592,
         2478,  1029,  2054,  2052,  3747,  2115,  3601,  1029,   102])"
1461,1,"['estimates', 'sample', 'sample size', 'samples', 'model']", Inference for a single proportion,seg_53,"we could examine which of the old models is most like the new model, then choose the corresponding sample size. or if two of the previous estimates are based on small samples while the other is based on a larger sample, we might consider the value corresponding to the larger sample. there are also other reasonable approaches.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2057,  2071, 11628,  2029,  1997,  1996,  2214,  4275,  2003,
         2087,  2066,  1996,  2047,  2944,  1010,  2059,  5454,  1996,  7978,
         7099,  2946,  1012,  2030,  2065,  2048,  1997,  1996,  3025, 10035,
         2024,  2241,  2006,  2235,  8168,  2096,  1996,  2060,  2003,  2241,
         2006,  1037,  3469,  7099,  1010,  2057,  2453,  5136,  1996,  3643,
         7978,  2000,  1996,  3469,  7099,  1012,  2045,  2024,  2036,  2060,
         9608,  8107,  1012,   102])"
1462,1,"['failure rate', 'confidence interval', 'rate', 'interval', 'failure', 'approximation', 'normal approximation', 'sample', 'normal', 'condition', 'statistical', 'confidence']", Inference for a single proportion,seg_53,"also observe that the success-failure condition would need to be checked in the final sample. for instance, if we sampled n = 1584 tires and found a failure rate of 0.5%, the normal approximation would not be reasonable, and we would require more advanced statistical methods for creating the confidence interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  2036, 11949,  2008,  1996,  3112,  1011,  4945,  4650,  2052,
         2342,  2000,  2022,  7039,  1999,  1996,  2345,  7099,  1012,  2005,
         6013,  1010,  2065,  2057, 18925,  1050,  1027, 17696,  2549, 13310,
         1998,  2179,  1037,  4945,  3446,  1997,  1014,  1012,  1019,  1003,
         1010,  1996,  3671, 20167,  2052,  2025,  2022,  9608,  1010,  1998,
         2057,  2052,  5478,  2062,  3935,  7778,  4725,  2005,  4526,  1996,
         7023, 13483,  1012,   102])"
1463,1,"['sample', 'margin of error', 'error']", Inference for a single proportion,seg_53,"suppose we want to continually track the support of payday borrowers for regulation on lenders, where we would conduct a new poll every month. running such frequent polls is expensive, so we decide a wider margin of error of 5% for each individual survey would be acceptable. based on the original sample of borrowers where 70% supported some form of regulation, how big should our monthly sample be for a margin of error of 0.05 with 95% confidence?5",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  1037,  2309, 10817])","tensor([  101,  6814,  2057,  2215,  2000, 14678,  2650,  1996,  2490,  1997,
         3477, 10259, 17781,  2545,  2005,  7816,  2006, 18496,  2545,  1010,
         2073,  2057,  2052,  6204,  1037,  2047,  8554,  2296,  3204,  1012,
         2770,  2107,  6976, 14592,  2003,  6450,  1010,  2061,  2057,  5630,
         1037,  7289,  7785,  1997,  7561,  1997,  1019,  1003,  2005,  2169,
         3265,  5002,  2052,  2022, 11701,  1012,  2241,  2006,  1996,  2434,
         7099,  1997, 17781,  2545,  2073,  3963,  1003,  3569,  2070,  2433,
         1997,  7816,  1010,  2129,  2502,  2323,  2256,  7058,  7099,  2022,
         2005,  1037,  7785,  1997,  7561,  1997,  1014,  1012,  5709,  2007,
         5345,  1003,  7023,  1029,  1019,   102])"
1464,1,"['point estimate', 'tests', 'population', 'confidence', 'normal distribution', 'estimate', 'normal', 'standard error', 'standard', 'confidence intervals', 'processes', 'sample', 'intervals', 'distribution', 'error']", Difference of two proportions,seg_55,"we would like to extend the methods from section 6.1 to apply confidence intervals and hypothesis tests to differences in population proportions: p1 − p2. in our investigations, we’ll identify a reasonable point estimate of p1 − p2 based on the sample, and you may have already guessed its form: p̂1 − p̂2. next, we’ll apply the same processes we used in the single-proportion context: we verify that the point estimate can be modeled using a normal distribution, we compute the estimate’s standard error, and we apply our inferential framework.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2057,  2052,  2066,  2000,  7949,  1996,  4725,  2013,  2930,
         1020,  1012,  1015,  2000,  6611,  7023, 14025,  1998, 10744,  5852,
         2000,  5966,  1999,  2313, 19173,  1024,  1052,  2487,  1597,  1052,
         2475,  1012,  1999,  2256,  9751,  1010,  2057,  1521,  2222,  6709,
         1037,  9608,  2391, 10197,  1997,  1052,  2487,  1597,  1052,  2475,
         2241,  2006,  1996,  7099,  1010,  1998,  2017,  2089,  2031,  2525,
        11445,  2049,  2433,  1024,  1052,  2487,  1597,  1052,  2475,  1012,
         2279,  1010,  2057,  1521,  2222,  6611,  1996,  2168,  6194,  2057,
         2109,  1999,  1996,  2309,  1011, 10817,  6123,  1024,  2057, 20410,
         2008,  1996,  2391, 10197,  2064,  2022, 14440,  2478,  1037,  3671,
         4353,  1010,  2057, 24134,  1996, 10197,  1521,  1055,  3115,  7561,
         1010,  1998,  2057,  6611,  2256,  1999,  7512, 24271,  7705,  1012,
          102])"
1465,1,"['sampling', 'sampling distribution', 'distribution']", Difference of two proportions,seg_55,6.2.1 sampling distribution of the difference of two proportions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1020,  1012,  1016,  1012,  1015, 16227,  4353,  1997,  1996,
         4489,  1997,  2048, 19173,   102])"
1466,1,"['normal distribution', 'independence', 'sample', 'normal', 'condition', 'distribution']", Difference of two proportions,seg_55,"like with p̂, the difference of two sample proportions p̂1 − p̂2 can be modeled using a normal distribution when certain conditions are met. first, we require a broader independence condition, and secondly, the success-failure condition must be met by both groups.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2066,  2007,  1052,  1010,  1996,  4489,  1997,  2048,  7099,
        19173,  1052,  2487,  1597,  1052,  2475,  2064,  2022, 14440,  2478,
         1037,  3671,  4353,  2043,  3056,  3785,  2024,  2777,  1012,  2034,
         1010,  2057,  5478,  1037, 12368,  4336,  4650,  1010,  1998, 16378,
         1010,  1996,  3112,  1011,  4945,  4650,  2442,  2022,  2777,  2011,
         2119,  2967,  1012,   102])"
1467,1,"['normal', 'normal distribution', 'distribution']", Difference of two proportions,seg_55,the difference p̂1 − p̂2 can be modeled using a normal distribution when,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  4489,  1052,  2487,  1597,  1052,  2475,  2064,  2022,
        14440,  2478,  1037,  3671,  4353,  2043,   102])"
1468,1,"['random samples', 'independence', 'random', 'experiment', 'samples', 'randomized experiment', 'data', 'independent']", Difference of two proportions,seg_55,"• independence, extended. the data are independent within and between the two groups. generally this is satisfied if the data come from two independent random samples or if the data come from a randomized experiment.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([ 101, 1528, 4336, 1010, 3668, 1012, 1996, 2951, 2024, 2981, 2306, 1998,
        2090, 1996, 2048, 2967, 1012, 3227, 2023, 2003, 8510, 2065, 1996, 2951,
        2272, 2013, 2048, 2981, 6721, 8168, 2030, 2065, 1996, 2951, 2272, 2013,
        1037, 6721, 3550, 7551, 1012,  102])"
1469,1,"['failures', 'condition', 'successes']", Difference of two proportions,seg_55,"• success-failure condition. the success-failure condition holds for both groups, where we check successes and failures in each group separately.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1528,  3112,  1011,  4945,  4650,  1012,  1996,  3112,  1011,
         4945,  4650,  4324,  2005,  2119,  2967,  1010,  2073,  2057,  4638,
        14152,  1998, 15428,  1999,  2169,  2177, 10329,  1012,   102])"
1470,1,"['standard error', 'standard', 'error']", Difference of two proportions,seg_55,"when these conditions are satisfied, the standard error of p̂1 − p̂2 is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([ 101, 2043, 2122, 3785, 2024, 8510, 1010, 1996, 3115, 7561, 1997, 1052,
        2487, 1597, 1052, 2475, 2003,  102])"
1471,1,"['sample', 'population']", Difference of two proportions,seg_55,"where p1 and p2 represent the population proportions, and n1 and n2 represent the sample sizes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2073,  1052,  2487,  1998,  1052,  2475,  5050,  1996,  2313,
        19173,  1010,  1998,  1050,  2487,  1998,  1050,  2475,  5050,  1996,
         7099, 10826,  1012,   102])"
1472,1,"['intervals', 'confidence intervals', 'confidence']", Difference of two proportions,seg_55,6.2.2 confidence intervals for p1 − p2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1020,  1012,  1016,  1012,  1016,  7023, 14025,  2005,  1052,
         2487,  1597,  1052,  2475,   102])"
1473,1,"['confidence interval', 'interval', 'estimate', 'point estimate', 'confidence']", Difference of two proportions,seg_55,"we can apply the generic confidence interval formula for a difference of two proportions, where we use p̂1 − p̂2 as the point estimate and substitute the se formula:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2057,  2064,  6611,  1996, 12391,  7023, 13483,  5675,  2005,
         1037,  4489,  1997,  2048, 19173,  1010,  2073,  2057,  2224,  1052,
         2487,  1597,  1052,  2475,  2004,  1996,  2391, 10197,  1998,  7681,
         1996,  7367,  5675,  1024,   102])"
1474,1,"['estimate', 'point estimate']", Difference of two proportions,seg_55,p (1− p ) p (1− p ) point estimate ± z? × se → p̂1 − p̂2 ± z? ×√ 1 n1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1052,  1006,  1015, 22543,  1052,  1007,  1052,  1006,  1015,
        22543,  1052,  1007,  2391, 10197,  1081,  1062,  1029,  1095,  7367,
         1585,  1052,  2487,  1597,  1052,  2475,  1081,  1062,  1029,  1095,
        30127,  1015,  1050,  2487,   102])"
1475,1,"['confidence interval', 'interval', 'hypothesis', 'hypothesis test', 'statistical', 'confidence', 'test']", Difference of two proportions,seg_55,"we can also follow the same prepare, check, calculate, conclude steps for computing a confidence interval or completing a hypothesis test. the details change a little, but the general approach remain the same. think about these steps when you apply statistical methods.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2057,  2064,  2036,  3582,  1996,  2168,  7374,  1010,  4638,
         1010, 18422,  1010, 16519,  4084,  2005,  9798,  1037,  7023, 13483,
         2030,  7678,  1037, 10744,  3231,  1012,  1996,  4751,  2689,  1037,
         2210,  1010,  2021,  1996,  2236,  3921,  3961,  1996,  2168,  1012,
         2228,  2055,  2122,  4084,  2043,  2017,  6611,  7778,  4725,  1012,
          102])"
1476,1,"['normal distribution', 'control group', 'treatment group', 'treatment', 'outcome', 'control', 'sample', 'normal', 'experiment', 'distribution', 'model', 'results', 'variable']", Difference of two proportions,seg_55,we consider an experiment for patients who underwent cardiopulmonary resuscitation (cpr) for a heart attack and were subsequently admitted to a hospital. these patients were randomly divided into a treatment group where they received a blood thinner or the control group where they did not receive a blood thinner. the outcome variable of interest was whether the patients survived for at least 24 hours. the results are shown in figure 6.1. check whether we can model the difference in sample proportions using the normal distribution.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2057,  5136,  2019,  7551,  2005,  5022,  2040,  9601,  4003,
         3695, 14289, 13728,  7856,  2854, 24501,  2271, 26243,  3370,  1006,
        18133,  2099,  1007,  2005,  1037,  2540,  2886,  1998,  2020,  3525,
         4914,  2000,  1037,  2902,  1012,  2122,  5022,  2020, 18154,  4055,
         2046,  1037,  3949,  2177,  2073,  2027,  2363,  1037,  2668, 23082,
         2030,  1996,  2491,  2177,  2073,  2027,  2106,  2025,  4374,  1037,
         2668, 23082,  1012,  1996,  9560,  8023,  1997,  3037,  2001,  3251,
         1996,  5022,  5175,  2005,  2012,  2560,  2484,  2847,  1012,  1996,
         3463,  2024,  3491,  1999,  3275,  1020,  1012,  1015,  1012,  4638,
         3251,  2057,  2064,  2944,  1996,  4489,  1999,  7099, 19173,  2478,
         1996,  3671,  4353,  1012,   102])"
1477,1,"['independence', 'condition', 'experiment', 'randomized experiment']", Difference of two proportions,seg_55,"we first check for independence: since this is a randomized experiment, this condition is satisfied.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([ 101, 2057, 2034, 4638, 2005, 4336, 1024, 2144, 2023, 2003, 1037, 6721,
        3550, 7551, 1010, 2023, 4650, 2003, 8510, 1012,  102])"
1478,1,"['failures', 'condition', 'experiment', 'successes']", Difference of two proportions,seg_55,"next, we check the success-failure condition for each group. we have at least 10 successes and 10 failures in each experiment arm (11, 14, 39, 26), so this condition is also satisfied.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2279,  1010,  2057,  4638,  1996,  3112,  1011,  4945,  4650,
         2005,  2169,  2177,  1012,  2057,  2031,  2012,  2560,  2184, 14152,
         1998,  2184, 15428,  1999,  2169,  7551,  2849,  1006,  2340,  1010,
         2403,  1010,  4464,  1010,  2656,  1007,  1010,  2061,  2023,  4650,
         2003,  2036,  8510,  1012,   102])"
1479,1,"['normal distribution', 'sample', 'normal', 'distribution', 'data']", Difference of two proportions,seg_55,"with both conditions satisfied, the difference in sample proportions can be reasonably modeled using a normal distribution for these data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2007,  2119,  3785,  8510,  1010,  1996,  4489,  1999,  7099,
        19173,  2064,  2022, 16286, 14440,  2478,  1037,  3671,  4353,  2005,
         2122,  2951,  1012,   102])"
1480,1,"['treatment', 'control']", Difference of two proportions,seg_55,survived died total control 11 39 50 treatment 14 26 40 total 25 65 90,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([ 101, 5175, 2351, 2561, 2491, 2340, 4464, 2753, 3949, 2403, 2656, 2871,
        2561, 2423, 3515, 3938,  102])"
1481,1,"['control group', 'treatment group', 'treatment', 'control', 'results']", Difference of two proportions,seg_55,"figure 6.1: results for the cpr study. patients in the treatment group were given a blood thinner, and patients in the control group were not.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  3275,  1020,  1012,  1015,  1024,  3463,  2005,  1996, 18133,
         2099,  2817,  1012,  5022,  1999,  1996,  3949,  2177,  2020,  2445,
         1037,  2668, 23082,  1010,  1998,  5022,  1999,  1996,  2491,  2177,
         2020,  2025,  1012,   102])"
1482,1,"['confidence interval', 'interval', 'rates', 'confidence']", Difference of two proportions,seg_55,create and interpret a 90% confidence interval of the difference for the survival rates in the cpr study.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  3443,  1998, 17841,  1037,  3938,  1003,  7023, 13483,  1997,
         1996,  4489,  2005,  1996,  7691,  6165,  1999,  1996, 18133,  2099,
         2817,  1012,   102])"
1483,1,"['rate', 'control group', 'treatment group', 'treatment', 'control']", Difference of two proportions,seg_55,we’ll use pt for the survival rate in the treatment group and pc for the control group:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2057,  1521,  2222,  2224, 13866,  2005,  1996,  7691,  3446,
         1999,  1996,  3949,  2177,  1998,  7473,  2005,  1996,  2491,  2177,
         1024,   102])"
1484,1,"['confidence interval', 'interval', 'estimates', 'sample', 'standard', 'standard error', 'confidence', 'error', 'case']", Difference of two proportions,seg_55,"we use the standard error formula provided on page 217. as with the one-sample proportion case, we use the sample estimates of each proportion in the formula in the confidence interval context:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2057,  2224,  1996,  3115,  7561,  5675,  3024,  2006,  3931,
        20335,  1012,  2004,  2007,  1996,  2028,  1011,  7099, 10817,  2553,
         1010,  2057,  2224,  1996,  7099, 10035,  1997,  2169, 10817,  1999,
         1996,  5675,  1999,  1996,  7023, 13483,  6123,  1024,   102])"
1485,1,"['interval', 'confidence', 'confidence interval']", Difference of two proportions,seg_55,"for a 90% confidence interval, we use z? = 1.65:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2005,  1037,  3938,  1003,  7023, 13483,  1010,  2057,  2224,
         1062,  1029,  1027,  1015,  1012,  3515,  1024,   102])"
1486,1,['estimate'], Difference of two proportions,seg_55,"point estimate ± z? × se → 0.13 ± 1.65× 0.095 → (−0.027, 0.287)",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2391, 10197,  1081,  1062,  1029,  1095,  7367,  1585,  1014,
         1012,  2410,  1081,  1015,  1012,  3515, 26306,  1014,  1012,  5641,
         2629,  1585,  1006,  1597,  2692,  1012,  6185,  2581,  1010,  1014,
         1012, 23090,  1007,   102])"
1487,1,"['rate', 'confident', 'interval', 'information', 'percentage']", Difference of two proportions,seg_55,"we are 90% confident that blood thinners have a difference of -2.7% to +28.7% percentage point impact on survival rate for patients who are like those in the study. because 0% is contained in the interval, we do not have enough information to say whether blood thinners help or harm heart attack patients who have been admitted after they have undergone cpr.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2057,  2024,  3938,  1003,  9657,  2008,  2668, 23082,  2015,
         2031,  1037,  4489,  1997,  1011,  1016,  1012,  1021,  1003,  2000,
         1009,  2654,  1012,  1021,  1003,  7017,  2391,  4254,  2006,  7691,
         3446,  2005,  5022,  2040,  2024,  2066,  2216,  1999,  1996,  2817,
         1012,  2138,  1014,  1003,  2003,  4838,  1999,  1996, 13483,  1010,
         2057,  2079,  2025,  2031,  2438,  2592,  2000,  2360,  3251,  2668,
        23082,  2015,  2393,  2030,  7386,  2540,  2886,  5022,  2040,  2031,
         2042,  4914,  2044,  2027,  2031, 17215, 18133,  2099,  1012,   102])"
1488,1,"['events', 'outcomes', 'treatment', 'treatment groups', 'experiment']", Difference of two proportions,seg_55,"a 5-year experiment was conducted to evaluate the effectiveness of fish oils on reducing cardiovascular events, where each subject was randomized into one of two treatment groups. we’ll consider heart attack outcomes in these patients:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1037,  1019,  1011,  2095,  7551,  2001,  4146,  2000, 16157,
         1996, 12353,  1997,  3869, 20631,  2006,  8161, 22935,  2824,  1010,
         2073,  2169,  3395,  2001,  6721,  3550,  2046,  2028,  1997,  2048,
         3949,  2967,  1012,  2057,  1521,  2222,  5136,  2540,  2886, 13105,
         1999,  2122,  5022,  1024,   102])"
1489,1,['event'], Difference of two proportions,seg_55,heart attack no event total fish oil 145 12788 12933 placebo 200 12738 12938,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2540,  2886,  2053,  2724,  2561,  3869,  3514, 13741, 13029,
         2620,  2620, 14378, 22394,  2173,  5092,  3263, 13029, 22025, 14378,
        22025,   102])"
1490,1,"['interval', 'confidence', 'confidence interval']", Difference of two proportions,seg_55,create a 95% confidence interval for the effect of fish oils on heart attacks for patients who are well-represented by those in the study. also interpret the interval in the context of the study.16,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  3443,  1037,  5345,  1003,  7023, 13483,  2005,  1996,  3466,
         1997,  3869, 20631,  2006,  2540,  4491,  2005,  5022,  2040,  2024,
         2092,  1011,  3421,  2011,  2216,  1999,  1996,  2817,  1012,  2036,
        17841,  1996, 13483,  1999,  1996,  6123,  1997,  1996,  2817,  1012,
         2385,   102])"
1491,1,"['hypothesis', 'tests', 'hypothesis tests']", Difference of two proportions,seg_55,6.2.3 hypothesis tests for the difference of two proportions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1020,  1012,  1016,  1012,  1017, 10744,  5852,  2005,  1996,
         4489,  1997,  2048, 19173,   102])"
1492,1,"['hypothesis', 'tests', 'hypothesis tests']", Difference of two proportions,seg_55,"a mammogram is an x-ray procedure used to check for breast cancer. whether mammograms should be used is part of a controversial discussion, and it’s the topic of our next example where we learn about 2-proportion hypothesis tests when h0 is p1 − p2 = 0 (or equivalently, p1 = p2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1037,  5003,  7382,  8649,  6444,  2003,  2019,  1060,  1011,
         4097,  7709,  2109,  2000,  4638,  2005,  7388,  4456,  1012,  3251,
         5003,  7382,  8649,  6444,  2015,  2323,  2022,  2109,  2003,  2112,
         1997,  1037,  6801,  6594,  1010,  1998,  2009,  1521,  1055,  1996,
         8476,  1997,  2256,  2279,  2742,  2073,  2057,  4553,  2055,  1016,
         1011, 10817, 10744,  5852,  2043,  1044,  2692,  2003,  1052,  2487,
         1597,  1052,  2475,  1027,  1014,  1006,  2030,  5662,  2135,  1010,
         1052,  2487,  1027,  1052,  2475,  1007,  1012,   102])"
1493,1,['results'], Difference of two proportions,seg_55,"a 30-year study was conducted with nearly 90,000 female participants. during a 5-year screening period, each woman was randomized to one of two groups: in the first group, women received regular mammograms to screen for breast cancer, and in the second group, women received regular non-mammogram breast cancer exams. no intervention was made during the following 25 years of the study, and we’ll consider death resulting from breast cancer over the full 30-year period. results from the study are summarized in figure 6.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1037,  2382,  1011,  2095,  2817,  2001,  4146,  2007,  3053,
         3938,  1010,  2199,  2931,  6818,  1012,  2076,  1037,  1019,  1011,
         2095, 11326,  2558,  1010,  2169,  2450,  2001,  6721,  3550,  2000,
         2028,  1997,  2048,  2967,  1024,  1999,  1996,  2034,  2177,  1010,
         2308,  2363,  3180,  5003,  7382,  8649,  6444,  2015,  2000,  3898,
         2005,  7388,  4456,  1010,  1998,  1999,  1996,  2117,  2177,  1010,
         2308,  2363,  3180,  2512,  1011,  5003,  7382,  8649,  6444,  7388,
         4456, 13869,  1012,  2053,  8830,  2001,  2081,  2076,  1996,  2206,
         2423,  2086,  1997,  1996,  2817,  1010,  1998,  2057,  1521,  2222,
         5136,  2331,  4525,  2013,  7388,  4456,  2058,  1996,  2440,  2382,
         1011,  2095,  2558,  1012,  3463,  2013,  1996,  2817,  2024, 22539,
         1999,  3275,  1020,  1012,  1016,  1012,   102])"
1494,1,"['control group', 'control']", Difference of two proportions,seg_55,"if mammograms are much more effective than non-mammogram breast cancer exams, then we would expect to see additional deaths from breast cancer in the control group. on the other hand, if mammograms are not as effective as regular breast cancer exams, we would expect to see an increase in breast cancer deaths in the mammogram group.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2065,  5003,  7382,  8649,  6444,  2015,  2024,  2172,  2062,
         4621,  2084,  2512,  1011,  5003,  7382,  8649,  6444,  7388,  4456,
        13869,  1010,  2059,  2057,  2052,  5987,  2000,  2156,  3176,  6677,
         2013,  7388,  4456,  1999,  1996,  2491,  2177,  1012,  2006,  1996,
         2060,  2192,  1010,  2065,  5003,  7382,  8649,  6444,  2015,  2024,
         2025,  2004,  4621,  2004,  3180,  7388,  4456, 13869,  1010,  2057,
         2052,  5987,  2000,  2156,  2019,  3623,  1999,  7388,  4456,  6677,
         1999,  1996,  5003,  7382,  8649,  6444,  2177,  1012,   102])"
1495,1,['control'], Difference of two proportions,seg_55,"death from breast cancer? yes no mammogram 500 44,425 control 505 44,405",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2331,  2013,  7388,  4456,  1029,  2748,  2053,  5003,  7382,
         8649,  6444,  3156,  4008,  1010, 23285,  2491, 28952,  4008,  1010,
        23988,   102])"
1496,1,['results'], Difference of two proportions,seg_55,figure 6.2: summary results for breast cancer study.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  3275,  1020,  1012,  1016,  1024, 12654,  3463,  2005,  7388,
         4456,  2817,  1012,   102])"
1497,1,['experiment'], Difference of two proportions,seg_55,is this study an experiment or an observational study?17,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([ 101, 2003, 2023, 2817, 2019, 7551, 2030, 2019, 8089, 2389, 2817, 1029,
        2459,  102])"
1498,1,"['hypotheses', 'control', 'test']", Difference of two proportions,seg_55,set up hypotheses to test whether there was a difference in breast cancer deaths in the mammogram and control groups.18,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2275,  2039,  1044, 22571, 14573, 23072,  2000,  3231,  3251,
         2045,  2001,  1037,  4489,  1999,  7388,  4456,  6677,  1999,  1996,
         5003,  7382,  8649,  6444,  1998,  2491,  2967,  1012,  2324,   102])"
1499,1,"['normal distribution', 'pooled proportion', 'hypothesis', 'confidence intervals', 'results', 'normal', 'intervals', 'condition', 'distribution', 'null hypothesis', 'confidence']", Difference of two proportions,seg_55,"in example 6.16, we will check the conditions for using a normal distribution to analyze the results of the study. the details are very similar to that of confidence intervals. however, when the null hypothesis is that p1 − p2 = 0, we use a special proportion called the pooled proportion to check the success-failure condition:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1999,  2742,  1020,  1012,  2385,  1010,  2057,  2097,  4638,
         1996,  3785,  2005,  2478,  1037,  3671,  4353,  2000, 17908,  1996,
         3463,  1997,  1996,  2817,  1012,  1996,  4751,  2024,  2200,  2714,
         2000,  2008,  1997,  7023, 14025,  1012,  2174,  1010,  2043,  1996,
        19701, 10744,  2003,  2008,  1052,  2487,  1597,  1052,  2475,  1027,
         1014,  1010,  2057,  2224,  1037,  2569, 10817,  2170,  1996, 19107,
         2094, 10817,  2000,  4638,  1996,  3112,  1011,  4945,  4650,  1024,
          102])"
1500,0,[], Difference of two proportions,seg_55,# of patients who died from breast cancer in the entire study p̂pooled = # of patients in the entire study,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1001,  1997,  5022,  2040,  2351,  2013,  7388,  4456,  1999,
         1996,  2972,  2817,  4903, 13669,  2098,  1027,  1001,  1997,  5022,
         1999,  1996,  2972,  2817,   102])"
1501,1,"['rate', 'pooled proportion', 'null hypothesis', 'estimate', 'hypothesis', 'standard', 'standard error', 'error']", Difference of two proportions,seg_55,"this proportion is an estimate of the breast cancer death rate across the entire study, and it’s our best estimate of the proportions pmgm and pctrl if the null hypothesis is true that pmgm = pctrl. we will also use this pooled proportion when computing the standard error.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2023, 10817,  2003,  2019, 10197,  1997,  1996,  7388,  4456,
         2331,  3446,  2408,  1996,  2972,  2817,  1010,  1998,  2009,  1521,
         1055,  2256,  2190, 10197,  1997,  1996, 19173,  7610, 21693,  1998,
         7473, 16344,  2140,  2065,  1996, 19701, 10744,  2003,  2995,  2008,
         7610, 21693,  1027,  7473, 16344,  2140,  1012,  2057,  2097,  2036,
         2224,  2023, 19107,  2094, 10817,  2043,  9798,  1996,  3115,  7561,
         1012,   102])"
1502,1,"['model', 'normal', 'normal distribution', 'distribution']", Difference of two proportions,seg_55,is it reasonable to model the difference in proportions using a normal distribution in this study?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2003,  2009,  9608,  2000,  2944,  1996,  4489,  1999, 19173,
         2478,  1037,  3671,  4353,  1999,  2023,  2817,  1029,   102])"
1503,1,"['pooled proportion', 'estimate', 'hypothesis', 'condition', 'samples', 'null hypothesis', 'independent']", Difference of two proportions,seg_55,"because the patients are randomized, they can be treated as independent, both within and between groups. we also must check the success-failure condition for each group. under the null hypothesis, the proportions pmgm and pctrl are equal, so we check the success-failure condition with our best estimate of these values under h0, the pooled proportion from the two samples, p̂pooled = 0.0112:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2138,  1996,  5022,  2024,  6721,  3550,  1010,  2027,  2064,
         2022,  5845,  2004,  2981,  1010,  2119,  2306,  1998,  2090,  2967,
         1012,  2057,  2036,  2442,  4638,  1996,  3112,  1011,  4945,  4650,
         2005,  2169,  2177,  1012,  2104,  1996, 19701, 10744,  1010,  1996,
        19173,  7610, 21693,  1998,  7473, 16344,  2140,  2024,  5020,  1010,
         2061,  2057,  4638,  1996,  3112,  1011,  4945,  4650,  2007,  2256,
         2190, 10197,  1997,  2122,  5300,  2104,  1044,  2692,  1010,  1996,
        19107,  2094, 10817,  2013,  1996,  2048,  8168,  1010,  4903, 13669,
         2098,  1027,  1014,  1012,  5890, 12521,  1024,   102])"
1504,1,"['normal distribution', 'normal', 'condition', 'distribution', 'model']", Difference of two proportions,seg_55,"the success-failure condition is satisfied since all values are at least 10. with both conditions satisfied, we can safely model the difference in proportions using a normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  3112,  1011,  4945,  4650,  2003,  8510,  2144,  2035,
         5300,  2024,  2012,  2560,  2184,  1012,  2007,  2119,  3785,  8510,
         1010,  2057,  2064,  9689,  2944,  1996,  4489,  1999, 19173,  2478,
         1037,  3671,  4353,  1012,   102])"
1505,1,"['error', 'pooled proportion', 'null hypothesis', 'estimate', 'hypothesis', 'condition', 'standard', 'standard error']", Difference of two proportions,seg_55,"when the null hypothesis is that the proportions are equal, use the pooled proportion (p̂pooled) to verify the success-failure condition and estimate the standard error:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2043,  1996, 19701, 10744,  2003,  2008,  1996, 19173,  2024,
         5020,  1010,  2224,  1996, 19107,  2094, 10817,  1006,  4903, 13669,
         2098,  1007,  2000, 20410,  1996,  3112,  1011,  4945,  4650,  1998,
        10197,  1996,  3115,  7561,  1024,   102])"
1506,1,['cases'], Difference of two proportions,seg_55,number of “successes” p̂1n1 + p̂2n2 p̂pooled = = number of cases n1 + n2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2193,  1997,  1523, 14152,  1524,  1052,  2487,  2078,  2487,
         1009,  1052,  2475,  2078,  2475,  4903, 13669,  2098,  1027,  1027,
         2193,  1997,  3572,  1050,  2487,  1009,  1050,  2475,   102])"
1507,1,"['sample', 'successes']", Difference of two proportions,seg_55,here p̂1n1 represents the number of successes in sample 1 since,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2182,  1052,  2487,  2078,  2487,  5836,  1996,  2193,  1997,
        14152,  1999,  7099,  1015,  2144,   102])"
1508,1,"['sample', 'successes']", Difference of two proportions,seg_55,number of successes in sample 1 p̂1 = n1,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2193,  1997, 14152,  1999,  7099,  1015,  1052,  2487,  1027,
         1050,  2487,   102])"
1509,1,"['sample', 'successes']", Difference of two proportions,seg_55,"similarly, p̂2n2 represents the number of successes in sample 2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  6660,  1010,  1052,  2475,  2078,  2475,  5836,  1996,  2193,
         1997, 14152,  1999,  7099,  1016,  1012,   102])"
1510,1,"['error', 'pooled proportion', 'standard', 'standard error']", Difference of two proportions,seg_55,"in example 6.16, the pooled proportion was used to check the success-failure condition.19 in the next example, we see the second place where the pooled proportion comes into play: the standard error calculation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1999,  2742,  1020,  1012,  2385,  1010,  1996, 19107,  2094,
        10817,  2001,  2109,  2000,  4638,  1996,  3112,  1011,  4945,  4650,
         1012,  2539,  1999,  1996,  2279,  2742,  1010,  2057,  2156,  1996,
         2117,  2173,  2073,  1996, 19107,  2094, 10817,  3310,  2046,  2377,
         1024,  1996,  3115,  7561, 17208,  1012,   102])"
1511,1,"['pooled proportion', 'estimate', 'point estimate', 'standard', 'rates', 'standard error', 'error']", Difference of two proportions,seg_55,"compute the point estimate of the difference in breast cancer death rates in the two groups, and use the pooled proportion p̂pooled = 0.0112 to calculate the standard error.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101, 24134,  1996,  2391, 10197,  1997,  1996,  4489,  1999,  7388,
         4456,  2331,  6165,  1999,  1996,  2048,  2967,  1010,  1998,  2224,
         1996, 19107,  2094, 10817,  4903, 13669,  2098,  1027,  1014,  1012,
         5890, 12521,  2000, 18422,  1996,  3115,  7561,  1012,   102])"
1512,1,"['rates', 'estimate', 'point estimate']", Difference of two proportions,seg_55,the point estimate of the difference in breast cancer death rates is,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  2391, 10197,  1997,  1996,  4489,  1999,  7388,  4456,
         2331,  6165,  2003,   102])"
1513,1,"['rate', 'pooled proportion', 'control group', 'control', 'standard', 'standard error', 'error']", Difference of two proportions,seg_55,"the breast cancer death rate in the mammogram group was 0.012% less than in the control group. next, the standard error is calculated using the pooled proportion, p̂pooled:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  7388,  4456,  2331,  3446,  1999,  1996,  5003,  7382,
         8649,  6444,  2177,  2001,  1014,  1012,  5890,  2475,  1003,  2625,
         2084,  1999,  1996,  2491,  2177,  1012,  2279,  1010,  1996,  3115,
         7561,  2003, 10174,  2478,  1996, 19107,  2094, 10817,  1010,  4903,
        13669,  2098,  1024,   102])"
1514,1,"['estimate', 'point estimate', 'hypothesis', 'standard', 'hypothesis test', 'standard error', 'error', 'test']", Difference of two proportions,seg_55,"using the point estimate p̂mgm − p̂ctrl = −0.00012 and standard error se = 0.00070, calculate a p-value for the hypothesis test and write a conclusion.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2478,  1996,  2391, 10197,  7610, 21693,  1597,  7473, 16344,
         2140,  1027,  1597,  2692,  1012,  2199, 12521,  1998,  3115,  7561,
         7367,  1027,  1014,  1012,  2199, 19841,  1010, 18422,  1037,  1052,
         1011,  3643,  2005,  1996, 10744,  3231,  1998,  4339,  1037,  7091,
         1012,   102])"
1515,1,"['test statistic', 'tests', 'statistic', 'test']", Difference of two proportions,seg_55,"just like in past tests, we first compute a test statistic and draw a picture:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2074,  2066,  1999,  2627,  5852,  1010,  2057,  2034, 24134,
         1037,  3231, 28093,  6553,  1998,  4009,  1037,  3861,  1024,   102])"
1516,1,['null value'], Difference of two proportions,seg_55,point estimate− null value −0.00012− 0 z = = = −0.17 se 0.00070,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2391, 10197, 22543, 19701,  3643,  1597,  2692,  1012,  2199,
        12521, 22543,  1014,  1062,  1027,  1027,  1027,  1597,  2692,  1012,
         2459,  7367,  1014,  1012,  2199, 19841,   102])"
1517,1,"['tail', 'hypothesis', 'rates', 'null hypothesis']", Difference of two proportions,seg_55,"the lower tail area is 0.4325, which we double to get the p-value: 0.8650. because this p-value is larger than 0.05, we do not reject the null hypothesis. that is, the difference in breast cancer death rates is reasonably explained by chance, and we do not observe benefits or harm from mammograms relative to a regular breast exam.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  2896,  5725,  2181,  2003,  1014,  1012,  4724, 17788,
         1010,  2029,  2057,  3313,  2000,  2131,  1996,  1052,  1011,  3643,
         1024,  1014,  1012,  6564, 12376,  1012,  2138,  2023,  1052,  1011,
         3643,  2003,  3469,  2084,  1014,  1012,  5709,  1010,  2057,  2079,
         2025, 15454,  1996, 19701, 10744,  1012,  2008,  2003,  1010,  1996,
         4489,  1999,  7388,  4456,  2331,  6165,  2003, 16286,  4541,  2011,
         3382,  1010,  1998,  2057,  2079,  2025, 11949,  6666,  2030,  7386,
         2013,  5003,  7382,  8649,  6444,  2015,  5816,  2000,  1037,  3180,
         7388, 11360,  1012,   102])"
1518,0,[], Difference of two proportions,seg_55,can we conclude that mammograms have no benefits or harm? here are a few considerations to keep in mind when reviewing the mammogram study as well as any other medical study:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2064,  2057, 16519,  2008,  5003,  7382,  8649,  6444,  2015,
         2031,  2053,  6666,  2030,  7386,  1029,  2182,  2024,  1037,  2261,
        16852,  2000,  2562,  1999,  2568,  2043, 15252,  1996,  5003,  7382,
         8649,  6444,  2817,  2004,  2092,  2004,  2151,  2060,  2966,  2817,
         1024,   102])"
1519,1,"['hypothesis', 'null hypothesis']", Difference of two proportions,seg_55,"• we do not accept the null hypothesis, which means we don’t have sufficient evidence to conclude that mammograms reduce or increase breast cancer deaths.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1528,  2057,  2079,  2025,  5138,  1996, 19701, 10744,  1010,
         2029,  2965,  2057,  2123,  1521,  1056,  2031,  7182,  3350,  2000,
        16519,  2008,  5003,  7382,  8649,  6444,  2015,  5547,  2030,  3623,
         7388,  4456,  6677,  1012,   102])"
1520,1,['data'], Difference of two proportions,seg_55,"• if mammograms are helpful or harmful, the data suggest the effect isn’t very large.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1528,  2065,  5003,  7382,  8649,  6444,  2015,  2024, 14044,
         2030, 17631,  1010,  1996,  2951,  6592,  1996,  3466,  3475,  1521,
         1056,  2200,  2312,  1012,   102])"
1521,0,[], Difference of two proportions,seg_55,"• are mammograms more or less expensive than a non-mammogram breast exam? if one option is much more expensive than the other and doesn’t offer clear benefits, then we should lean towards the less expensive option.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1528,  2024,  5003,  7382,  8649,  6444,  2015,  2062,  2030,
         2625,  6450,  2084,  1037,  2512,  1011,  5003,  7382,  8649,  6444,
         7388, 11360,  1029,  2065,  2028,  5724,  2003,  2172,  2062,  6450,
         2084,  1996,  2060,  1998,  2987,  1521,  1056,  3749,  3154,  6666,
         1010,  2059,  2057,  2323,  8155,  2875,  1996,  2625,  6450,  5724,
         1012,   102])"
1522,1,['treatment'], Difference of two proportions,seg_55,"• the study’s authors also found that mammograms led to overdiagnosis of breast cancer, which means some breast cancers were found (or thought to be found) but that these cancers would not cause symptoms during patients’ lifetimes. that is, something else would kill the patient before breast cancer symptoms appeared. this means some patients may have been treated for breast cancer unnecessarily, and this treatment is another cost to consider. it is also important to recognize that overdiagnosis can cause unnecessary physical or emotional harm to patients.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1528,  1996,  2817,  1521,  1055,  6048,  2036,  2179,  2008,
         5003,  7382,  8649,  6444,  2015,  2419,  2000,  2058,  9032, 26745,
         6190,  1997,  7388,  4456,  1010,  2029,  2965,  2070,  7388, 25409,
         2020,  2179,  1006,  2030,  2245,  2000,  2022,  2179,  1007,  2021,
         2008,  2122, 25409,  2052,  2025,  3426,  8030,  2076,  5022,  1521,
         6480,  2015,  1012,  2008,  2003,  1010,  2242,  2842,  2052,  3102,
         1996,  5776,  2077,  7388,  4456,  8030,  2596,  1012,  2023,  2965,
         2070,  5022,  2089,  2031,  2042,  5845,  2005,  7388,  4456,  4895,
         2638,  9623, 22740,  2135,  1010,  1998,  2023,  3949,  2003,  2178,
         3465,  2000,  5136,  1012,  2009,  2003,  2036,  2590,  2000,  6807,
         2008,  2058,  9032, 26745,  6190,  2064,  3426, 14203,  3558,  2030,
         6832,  7386,  2000,  5022,  1012,   102])"
1523,1,['treatment'], Difference of two proportions,seg_55,these considerations highlight the complexity around medical care and treatment recommendations. experts and medical boards who study medical treatments use considerations like those above to provide their best recommendation based on the current evidence.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2122, 16852, 12944,  1996, 11619,  2105,  2966,  2729,  1998,
         3949, 11433,  1012,  8519,  1998,  2966,  7923,  2040,  2817,  2966,
        13441,  2224, 16852,  2066,  2216,  2682,  2000,  3073,  2037,  2190,
        12832,  2241,  2006,  1996,  2783,  3350,  1012,   102])"
1524,1,"['hypothesis', 'tests', 'hypothesis tests']", Difference of two proportions,seg_55,6.2.4 more on 2-proportion hypothesis tests (special topic),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1020,  1012,  1016,  1012,  1018,  2062,  2006,  1016,  1011,
        10817, 10744,  5852,  1006,  2569,  8476,  1007,   102])"
1525,1,"['error', 'null hypothesis', 'hypothesis', 'condition', 'standard', 'hypothesis test', 'standard error', 'test']", Difference of two proportions,seg_55,"when we conduct a 2-proportion hypothesis test, usually h0 is p1 − p2 = 0. however, there are rare situations where we want to check for some difference in p1 and p2 that is some value other than 0. for example, maybe we care about checking a null hypothesis where p1 − p2 = 0.1. in contexts like these, we generally use p̂1 and p̂2 to check the success-failure condition and construct the standard error.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2043,  2057,  6204,  1037,  1016,  1011, 10817, 10744,  3231,
         1010,  2788,  1044,  2692,  2003,  1052,  2487,  1597,  1052,  2475,
         1027,  1014,  1012,  2174,  1010,  2045,  2024,  4678,  8146,  2073,
         2057,  2215,  2000,  4638,  2005,  2070,  4489,  1999,  1052,  2487,
         1998,  1052,  2475,  2008,  2003,  2070,  3643,  2060,  2084,  1014,
         1012,  2005,  2742,  1010,  2672,  2057,  2729,  2055,  9361,  1037,
        19701, 10744,  2073,  1052,  2487,  1597,  1052,  2475,  1027,  1014,
         1012,  1015,  1012,  1999, 18046,  2066,  2122,  1010,  2057,  3227,
         2224,  1052,  2487,  1998,  1052,  2475,  2000,  4638,  1996,  3112,
         1011,  4945,  4650,  1998,  9570,  1996,  3115,  7561,  1012,   102])"
1526,0,[], Difference of two proportions,seg_55,"a quadcopter company is considering a new manufacturer for rotor blades. the new manufacturer would be more expensive, but they claim their higher-quality blades are more reliable, with 3% more",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1037, 17718,  3597, 13876,  2121,  2194,  2003,  6195,  1037,
         2047,  7751,  2005, 18929, 10491,  1012,  1996,  2047,  7751,  2052,
         2022,  2062,  6450,  1010,  2021,  2027,  4366,  2037,  3020,  1011,
         3737, 10491,  2024,  2062, 10539,  1010,  2007,  1017,  1003,  2062,
          102])"
1527,1,"['set', 'hypotheses', 'test']", Difference of two proportions,seg_55,20 blades passing inspection than their competitor. set up appropriate hypotheses for the test.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0.,
        1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2322, 10491,  4458, 10569,  2084,  2037, 12692,  1012,  2275,
         2039,  6413,  1044, 22571, 14573, 23072,  2005,  1996,  3231,  1012,
          102])"
1528,1,"['hypotheses', 'significance level', 'level', 'quality control', 'sample', 'control', 'significance', 'data']", Difference of two proportions,seg_55,"the quality control engineer from guided practice 6.19 collects a sample of blades, examining 1000 blades from each company, and she finds that 899 blades pass inspection from the current supplier and 958 pass inspection from the prospective supplier. using these data, evaluate the hypotheses from guided practice 6.19 with a significance level of 5%.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  3737,  2491,  3992,  2013,  8546,  3218,  1020,  1012,
         2539, 17427,  1037,  7099,  1997, 10491,  1010, 12843,  6694, 10491,
         2013,  2169,  2194,  1010,  1998,  2016,  4858,  2008,  6486,  2683,
        10491,  3413, 10569,  2013,  1996,  2783, 17024,  1998,  5345,  2620,
         3413, 10569,  2013,  1996, 17464, 17024,  1012,  2478,  2122,  2951,
         1010, 16157,  1996,  1044, 22571, 14573, 23072,  2013,  8546,  3218,
         1020,  1012,  2539,  2007,  1037,  7784,  2504,  1997,  1019,  1003,
         1012,   102])"
1529,1,"['normal distribution', 'sample', 'random', 'normal', 'condition', 'distribution', 'independent']", Difference of two proportions,seg_55,"first, we check the conditions. the sample is not necessarily random, so to proceed we must assume the blades are all independent; for this sample we will suppose this assumption is reasonable, but the engineer would be more knowledgeable as to whether this assumption is appropriate. the success-failure condition also holds for each sample. thus, the difference in sample proportions, 0.958− 0.899 = 0.059, can be said to come from a nearly normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2034,  1010,  2057,  4638,  1996,  3785,  1012,  1996,  7099,
         2003,  2025,  9352,  6721,  1010,  2061,  2000, 10838,  2057,  2442,
         7868,  1996, 10491,  2024,  2035,  2981,  1025,  2005,  2023,  7099,
         2057,  2097,  6814,  2023, 11213,  2003,  9608,  1010,  2021,  1996,
         3992,  2052,  2022,  2062,  3716,  3085,  2004,  2000,  3251,  2023,
        11213,  2003,  6413,  1012,  1996,  3112,  1011,  4945,  4650,  2036,
         4324,  2005,  2169,  7099,  1012,  2947,  1010,  1996,  4489,  1999,
         7099, 19173,  1010,  1014,  1012,  5345,  2620, 22543,  1014,  1012,
         6486,  2683,  1027,  1014,  1012,  5709,  2683,  1010,  2064,  2022,
         2056,  2000,  2272,  2013,  1037,  3053,  3671,  4353,  1012,   102])"
1530,1,"['pooled proportion', 'sample', 'standard', 'standard error', 'error']", Difference of two proportions,seg_55,the standard error is computed using the two sample proportions since we do not use a pooled proportion for this context:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  3115,  7561,  2003, 24806,  2478,  1996,  2048,  7099,
        19173,  2144,  2057,  2079,  2025,  2224,  1037, 19107,  2094, 10817,
         2005,  2023,  6123,  1024,   102])"
1531,1,"['pooled proportion', 'hypothesis', 'sample', 'standard', 'hypothesis test', 'standard error', 'error', 'test']", Difference of two proportions,seg_55,"in this hypothesis test, because the null is that p1 − p2 = 0.03, the sample proportions were used for the standard error calculation rather than a pooled proportion.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1999,  2023, 10744,  3231,  1010,  2138,  1996, 19701,  2003,
         2008,  1052,  2487,  1597,  1052,  2475,  1027,  1014,  1012,  6021,
         1010,  1996,  7099, 19173,  2020,  2109,  2005,  1996,  3115,  7561,
        17208,  2738,  2084,  1037, 19107,  2094, 10817,  1012,   102])"
1532,1,"['test statistic', 'statistic', 'test']", Difference of two proportions,seg_55,"next, we compute the test statistic and use it to find the p-value, which is depicted in figure 6.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2279,  1010,  2057, 24134,  1996,  3231, 28093,  6553,  1998,
         2224,  2009,  2000,  2424,  1996,  1052,  1011,  3643,  1010,  2029,
         2003,  8212,  1999,  3275,  1020,  1012,  1018,  1012,   102])"
1533,1,['null value'], Difference of two proportions,seg_55,point estimate− null value 0.059− 0.03 z = = = 2.54 se 0.0114,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2391, 10197, 22543, 19701,  3643,  1014,  1012,  5709,  2683,
        22543,  1014,  1012,  6021,  1062,  1027,  1027,  1027,  1016,  1012,
         5139,  7367,  1014,  1012,  5890, 16932,   102])"
1534,1,"['tail', 'test statistic', 'normal distribution', 'standard normal distribution', 'standard normal', 'hypothesis', 'normal', 'standard', 'statistically significant', 'distribution', 'null hypothesis', 'statistic', 'test']", Difference of two proportions,seg_55,"using a standard normal distribution for this test statistic, we identify the right tail area as 0.006, and we double it to get the p-value: 0.012. we reject the null hypothesis because 0.012 is less than 0.05. since we observed a larger-than-3% increase in blades that pass inspection, we have statistically significant evidence that the higher-quality blades pass inspection more than 3% as often as the currently used blades, exceeding the company’s claims.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2478,  1037,  3115,  3671,  4353,  2005,  2023,  3231, 28093,
         6553,  1010,  2057,  6709,  1996,  2157,  5725,  2181,  2004,  1014,
         1012,  4002,  2575,  1010,  1998,  2057,  3313,  2009,  2000,  2131,
         1996,  1052,  1011,  3643,  1024,  1014,  1012,  5890,  2475,  1012,
         2057, 15454,  1996, 19701, 10744,  2138,  1014,  1012,  5890,  2475,
         2003,  2625,  2084,  1014,  1012,  5709,  1012,  2144,  2057,  5159,
         1037,  3469,  1011,  2084,  1011,  1017,  1003,  3623,  1999, 10491,
         2008,  3413, 10569,  1010,  2057,  2031,  7778,  2135,  3278,  3350,
         2008,  1996,  3020,  1011,  3737, 10491,  3413, 10569,  2062,  2084,
         1017,  1003,  2004,  2411,  2004,  1996,  2747,  2109, 10491,  1010,
        17003,  1996,  2194,  1521,  1055,  4447,  1012,   102])"
1535,1,"['test statistic', 'hypothesis', 'distribution', 'null hypothesis', 'statistic', 'test']", Difference of two proportions,seg_55,figure 6.4: distribution of the test statistic if the null hypothesis was true. the p-value is represented by the shaded areas.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  3275,  1020,  1012,  1018,  1024,  4353,  1997,  1996,  3231,
        28093,  6553,  2065,  1996, 19701, 10744,  2001,  2995,  1012,  1996,
         1052,  1011,  3643,  2003,  3421,  2011,  1996, 25273,  2752,  1012,
          102])"
1536,1,"['standard error', 'standard', 'error']", Difference of two proportions,seg_55,6.2.5 examining the standard error formula (special topic),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1020,  1012,  1016,  1012,  1019, 12843,  1996,  3115,  7561,
         5675,  1006,  2569,  8476,  1007,   102])"
1537,1,"['probability', 'standard error', 'standard', 'error']", Difference of two proportions,seg_55,"this subsection covers more theoretical topics that offer deeper insights into the origins of the standard error formula for the difference of two proportions. ultimately, all of the standard error formulas we encounter in this chapter and in chapter 7 can be derived from the probability principles of section 3.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2023,  4942, 29015,  4472,  2062,  9373,  7832,  2008,  3749,
         6748, 20062,  2046,  1996,  7321,  1997,  1996,  3115,  7561,  5675,
         2005,  1996,  4489,  1997,  2048, 19173,  1012,  4821,  1010,  2035,
         1997,  1996,  3115,  7561, 25814,  2057,  8087,  1999,  2023,  3127,
         1998,  1999,  3127,  1021,  2064,  2022,  5173,  2013,  1996,  9723,
         6481,  1997,  2930,  1017,  1012,  1018,  1012,   102])"
1538,1,"['sample', 'standard errors', 'errors', 'standard', 'standard error', 'error']", Difference of two proportions,seg_55,the formula for the standard error of the difference in two proportions can be deconstructed into the formulas for the standard errors of the individual sample proportions. recall that the standard error of the individual sample proportions p̂1 and p̂2 are,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  5675,  2005,  1996,  3115,  7561,  1997,  1996,  4489,
         1999,  2048, 19173,  2064,  2022, 21933, 23808,  6820, 10985,  2046,
         1996, 25814,  2005,  1996,  3115, 10697,  1997,  1996,  3265,  7099,
        19173,  1012,  9131,  2008,  1996,  3115,  7561,  1997,  1996,  3265,
         7099, 19173,  1052,  2487,  1998,  1052,  2475,  2024,   102])"
1539,1,"['sample', 'standard errors', 'errors', 'standard', 'standard error', 'error']", Difference of two proportions,seg_55,the standard error of the difference of two sample proportions can be deconstructed from the standard errors of the separate sample proportions:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  1996,  3115,  7561,  1997,  1996,  4489,  1997,  2048,  7099,
        19173,  2064,  2022, 21933, 23808,  6820, 10985,  2013,  1996,  3115,
        10697,  1997,  1996,  3584,  7099, 19173,  1024,   102])"
1540,1,"['probability', 'probability theory']", Difference of two proportions,seg_55,this special relationship follows from probability theory.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([ 101, 2023, 2569, 3276, 4076, 2013, 9723, 3399, 1012,  102])"
1541,0,[], Difference of two proportions,seg_55,prerequisite: section 3.4. we can rewrite the equation above in a different way:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  3653,  2890, 24871,  1024,  2930,  1017,  1012,  1018,  1012,
         2057,  2064,  2128, 26373,  1996,  8522,  2682,  1999,  1037,  2367,
         2126,  1024,   102])"
1542,1,"['variability', 'random']", Difference of two proportions,seg_55,explain where this formula comes from using the formula for the variability of the sum of two random,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  4863,  2073,  2023,  5675,  3310,  2013,  2478,  1996,  5675,
         2005,  1996, 28436,  1997,  1996,  7680,  1997,  2048,  6721,   102])"
1543,1,['variables'], Difference of two proportions,seg_55,21 variables.,tensor(1),"tensor([0., 0., 1., 0., 0.])","tensor([ 4489,  1997,  2048, 19173])","tensor([  101,  2538, 10857,  1012,   102])"
1544,1,"['model', 'method', 'data']", Testing for goodness of fit using chisquare,seg_57,"in this section, we develop a method for assessing a null model when the data are binned. this technique is commonly used in two circumstances:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1999,  2023,  2930,  1010,  2057,  4503,  1037,  4118,  2005,
        20077,  1037, 19701,  2944,  2043,  1996,  2951,  2024,  8026,  7228,
         1012,  2023,  6028,  2003,  4141,  2109,  1999,  2048,  6214,  1024,
          102])"
1545,1,"['cases', 'sample', 'population', 'representative']", Testing for goodness of fit using chisquare,seg_57,"• given a sample of cases that can be classified into several groups, determine if the sample is representative of the general population.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 1528, 2445, 1037, 7099, 1997, 3572, 2008, 2064, 2022, 6219, 2046,
        2195, 2967, 1010, 5646, 2065, 1996, 7099, 2003, 4387, 1997, 1996, 2236,
        2313, 1012,  102])"
1546,1,"['normal distribution', 'geometric distribution', 'normal', 'distribution', 'geometric', 'data']", Testing for goodness of fit using chisquare,seg_57,"• evaluate whether data resemble a particular distribution, such as a normal distribution or a geometric distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1528, 16157,  3251,  2951, 13014,  1037,  3327,  4353,  1010,
         2107,  2004,  1037,  3671,  4353,  2030,  1037, 14965,  4353,  1012,
          102])"
1547,1,"['statistical test', 'statistical', 'test']", Testing for goodness of fit using chisquare,seg_57,each of these scenarios can be addressed using the same statistical test: a chi-square test.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2169,  1997,  2122, 16820,  2064,  2022,  8280,  2478,  1996,
         2168,  7778,  3231,  1024,  1037,  9610,  1011,  2675,  3231,  1012,
          102])"
1548,1,"['random sample', 'sample', 'random', 'population', 'county', 'data', 'representative', 'case']", Testing for goodness of fit using chisquare,seg_57,"in the first case, we consider data from a random sample of 275 jurors in a small county. jurors identified their racial group, as shown in figure 6.5, and we would like to determine if these jurors are racially representative of the population. if the jury is representative of the population, then the proportions in the sample should roughly reflect the population of eligible jurors, i.e. registered voters.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1999,  1996,  2034,  2553,  1010,  2057,  5136,  2951,  2013,
         1037,  6721,  7099,  1997, 17528, 18414, 29165,  2015,  1999,  1037,
         2235,  2221,  1012, 18414, 29165,  2015,  4453,  2037,  5762,  2177,
         1010,  2004,  3491,  1999,  3275,  1020,  1012,  1019,  1010,  1998,
         2057,  2052,  2066,  2000,  5646,  2065,  2122, 18414, 29165,  2015,
         2024,  5762,  2135,  4387,  1997,  1996,  2313,  1012,  2065,  1996,
         6467,  2003,  4387,  1997,  1996,  2313,  1010,  2059,  1996, 19173,
         1999,  1996,  7099,  2323,  5560,  8339,  1996,  2313,  1997,  7792,
        18414, 29165,  2015,  1010,  1045,  1012,  1041,  1012,  5068,  7206,
         1012,   102])"
1549,0,[], Testing for goodness of fit using chisquare,seg_57,race white black hispanic other total representation in juries 205 26 25 19 275 registered voters 0.72 0.07 0.12 0.09 1.00,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2679,  2317,  2304,  6696,  2060,  2561,  6630,  1999, 18414,
         5134, 16327,  2656,  2423,  2539, 17528,  5068,  7206,  1014,  1012,
         5824,  1014,  1012,  5718,  1014,  1012,  2260,  1014,  1012,  5641,
         1015,  1012,  4002,   102])"
1550,1,['population'], Testing for goodness of fit using chisquare,seg_57,figure 6.5: representation by race in a city’s juries and population.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1019,  1024,  6630,  2011,  2679,  1999,
         1037,  2103,  1521,  1055, 18414,  5134,  1998,  2313,  1012,   102])"
1551,1,"['sample', 'population', 'data', 'representative']", Testing for goodness of fit using chisquare,seg_57,"while the proportions in the juries do not precisely represent the population proportions, it is unclear whether these data provide convincing evidence that the sample is not representative. if the jurors really were randomly sampled from the registered voters, we might expect small differences due to chance. however, unusually large differences may provide convincing evidence that the juries were not representative.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2096,  1996, 19173,  1999,  1996, 18414,  5134,  2079,  2025,
        10785,  5050,  1996,  2313, 19173,  1010,  2009,  2003, 10599,  3251,
         2122,  2951,  3073, 13359,  3350,  2008,  1996,  7099,  2003,  2025,
         4387,  1012,  2065,  1996, 18414, 29165,  2015,  2428,  2020, 18154,
        18925,  2013,  1996,  5068,  7206,  1010,  2057,  2453,  5987,  2235,
         5966,  2349,  2000,  3382,  1012,  2174,  1010, 12890,  2312,  5966,
         2089,  3073, 13359,  3350,  2008,  1996, 18414,  5134,  2020,  2025,
         4387,  1012,   102])"
1552,1,"['independent', 'distribution']", Testing for goodness of fit using chisquare,seg_57,"a second application, assessing the fit of a distribution, is presented at the end of this section. daily stock returns from the s&p500 for 25 years are used to assess whether stock activity each day is independent of the stock’s behavior on previous days.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1037,  2117,  4646,  1010, 20077,  1996,  4906,  1997,  1037,
         4353,  1010,  2003,  3591,  2012,  1996,  2203,  1997,  2023,  2930,
         1012,  3679,  4518,  5651,  2013,  1996,  1055,  1004,  1052, 29345,
         2005,  2423,  2086,  2024,  2109,  2000, 14358,  3251,  4518,  4023,
         2169,  2154,  2003,  2981,  1997,  1996,  4518,  1521,  1055,  5248,
         2006,  3025,  2420,  1012,   102])"
1553,1,"['test statistic', 'bins', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"in these problems, we would like to examine all bins simultaneously, not simply compare one or two bins at a time, which will require us to develop a new test statistic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1999,  2122,  3471,  1010,  2057,  2052,  2066,  2000, 11628,
         2035,  8026,  2015,  7453,  1010,  2025,  3432, 12826,  2028,  2030,
         2048,  8026,  2015,  2012,  1037,  2051,  1010,  2029,  2097,  5478,
         2149,  2000,  4503,  1037,  2047,  3231, 28093,  6553,  1012,   102])"
1554,1,"['test statistic', 'tables', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,6.3.1 creating a test statistic for one-way tables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1020,  1012,  1017,  1012,  1015,  4526,  1037,  3231, 28093,
         6553,  2005,  2028,  1011,  2126,  7251,   102])"
1555,0,[], Testing for goodness of fit using chisquare,seg_57,"of the people in the city, 275 served on a jury. if the individuals are randomly selected to serve on a jury, about how many of the 275 people would we expect to be white? how many would we expect to be black?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1997,  1996,  2111,  1999,  1996,  2103,  1010, 17528,  2366,
         2006,  1037,  6467,  1012,  2065,  1996,  3633,  2024, 18154,  3479,
         2000,  3710,  2006,  1037,  6467,  1010,  2055,  2129,  2116,  1997,
         1996, 17528,  2111,  2052,  2057,  5987,  2000,  2022,  2317,  1029,
         2129,  2116,  2052,  2057,  5987,  2000,  2022,  2304,  1029,   102])"
1556,1,['population'], Testing for goodness of fit using chisquare,seg_57,"about 72% of the population is white, so we would expect about 72% of the jurors to be white: 0.72× 275 = 198.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2055,  5824,  1003,  1997,  1996,  2313,  2003,  2317,  1010,
         2061,  2057,  2052,  5987,  2055,  5824,  1003,  1997,  1996, 18414,
        29165,  2015,  2000,  2022,  2317,  1024,  1014,  1012,  5824, 26306,
        17528,  1027, 20003,  1012,   102])"
1557,0,[], Testing for goodness of fit using chisquare,seg_57,"similarly, we would expect about 7% of the jurors to be black, which would correspond to about 0.07× 275 = 19.25 black jurors.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  6660,  1010,  2057,  2052,  5987,  2055,  1021,  1003,  1997,
         1996, 18414, 29165,  2015,  2000,  2022,  2304,  1010,  2029,  2052,
        17254,  2000,  2055,  1014,  1012,  5718, 26306, 17528,  1027,  2539,
         1012,  2423,  2304, 18414, 29165,  2015,  1012,   102])"
1558,1,"['percent', 'population']", Testing for goodness of fit using chisquare,seg_57,twelve percent of the population is hispanic and 9% represent other races. how many of the 275 jurors would we expect to be hispanic or from another race? answers can be found in figure 6.6.,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  4376,  3867,  1997,  1996,  2313,  2003,  6696,  1998,  1023,
         1003,  5050,  2060,  3837,  1012,  2129,  2116,  1997,  1996, 17528,
        18414, 29165,  2015,  2052,  2057,  5987,  2000,  2022,  6696,  2030,
         2013,  2178,  2679,  1029,  6998,  2064,  2022,  2179,  1999,  3275,
         1020,  1012,  1020,  1012,   102])"
1559,1,"['variation', 'sample', 'sampling']", Testing for goodness of fit using chisquare,seg_57,"the sample proportion represented from each race among the 275 jurors was not a precise match for any ethnic group. while some sampling variation is expected, we would expect the",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996,  7099, 10817,  3421,  2013,  2169,  2679,  2426,  1996,
        17528, 18414, 29165,  2015,  2001,  2025,  1037, 10480,  2674,  2005,
         2151,  5636,  2177,  1012,  2096,  2070, 16227,  8386,  2003,  3517,
         1010,  2057,  2052,  5987,  1996,   102])"
1560,1,['data'], Testing for goodness of fit using chisquare,seg_57,race white black hispanic other total observed data 205 26 25 19 275 expected counts 198 19.25 33 24.75 275,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2679,  2317,  2304,  6696,  2060,  2561,  5159,  2951, 16327,
         2656,  2423,  2539, 17528,  3517,  9294, 20003,  2539,  1012,  2423,
         3943,  2484,  1012,  4293, 17528,   102])"
1561,0,[], Testing for goodness of fit using chisquare,seg_57,figure 6.6: actual and expected make-up of the jurors.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1020,  1024,  5025,  1998,  3517,  2191,
         1011,  2039,  1997,  1996, 18414, 29165,  2015,  1012,   102])"
1562,1,"['hypotheses', 'random sample', 'sample', 'random', 'population', 'bias', 'test']", Testing for goodness of fit using chisquare,seg_57,sample proportions to be fairly similar to the population proportions if there is no bias on juries. we need to test whether the differences are strong enough to provide convincing evidence that the jurors are not a random sample. these ideas can be organized into hypotheses:,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  7099, 19173,  2000,  2022,  7199,  2714,  2000,  1996,  2313,
        19173,  2065,  2045,  2003,  2053, 13827,  2006, 18414,  5134,  1012,
         2057,  2342,  2000,  3231,  3251,  1996,  5966,  2024,  2844,  2438,
         2000,  3073, 13359,  3350,  2008,  1996, 18414, 29165,  2015,  2024,
         2025,  1037,  6721,  7099,  1012,  2122,  4784,  2064,  2022,  4114,
         2046,  1044, 22571, 14573, 23072,  1024,   102])"
1563,1,"['random sample', 'sample', 'random', 'bias']", Testing for goodness of fit using chisquare,seg_57,"h0: the jurors are a random sample, i.e. there is no racial bias in who serves on a jury, and the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1044,  2692,  1024,  1996, 18414, 29165,  2015,  2024,  1037,
         6721,  7099,  1010,  1045,  1012,  1041,  1012,  2045,  2003,  2053,
         5762, 13827,  1999,  2040,  4240,  2006,  1037,  6467,  1010,  1998,
         1996,   102])"
1564,1,['sampling'], Testing for goodness of fit using chisquare,seg_57,observed counts reflect natural sampling fluctuation.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  5159,  9294,  8339,  3019, 16227, 19857,  6593, 14505,  1012,
          102])"
1565,1,['bias'], Testing for goodness of fit using chisquare,seg_57,"ha: the jurors are not randomly sampled, i.e. there is racial bias in juror selection.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  5292,  1024,  1996, 18414, 29165,  2015,  2024,  2025, 18154,
        18925,  1010,  1045,  1012,  1041,  1012,  2045,  2003,  5762, 13827,
         1999, 18414, 29165,  4989,  1012,   102])"
1566,1,"['hypotheses', 'variation', 'hypothesis', 'sampling', 'deviations', 'alternative hypothesis']", Testing for goodness of fit using chisquare,seg_57,"to evaluate these hypotheses, we quantify how different the observed counts are from the expected counts. strong evidence for the alternative hypothesis would come in the form of unusually large deviations in the groups from what would be expected based on sampling variation alone.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2000, 16157,  2122,  1044, 22571, 14573, 23072,  1010,  2057,
        24110, 27351,  2129,  2367,  1996,  5159,  9294,  2024,  2013,  1996,
         3517,  9294,  1012,  2844,  3350,  2005,  1996,  4522, 10744,  2052,
         2272,  1999,  1996,  2433,  1997, 12890,  2312, 24353,  2015,  1999,
         1996,  2967,  2013,  2054,  2052,  2022,  3517,  2241,  2006, 16227,
         8386,  2894,  1012,   102])"
1567,1,"['test statistic', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,6.3.2 the chi-square test statistic,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1020,  1012,  1017,  1012,  1016,  1996,  9610,  1011,  2675,
         3231, 28093,  6553,   102])"
1568,1,"['test statistic', 'hypothesis', 'tests', 'hypothesis tests', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"in previous hypothesis tests, we constructed a test statistic of the following form:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1999,  3025, 10744,  5852,  1010,  2057,  3833,  1037,  3231,
        28093,  6553,  1997,  1996,  2206,  2433,  1024,   102])"
1569,1,['null value'], Testing for goodness of fit using chisquare,seg_57,point estimate− null value,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2391, 10197, 22543, 19701,  3643,   102])"
1570,1,"['estimate', 'point estimate']", Testing for goodness of fit using chisquare,seg_57,se of point estimate,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  7367,  1997,  2391, 10197,   102])"
1571,1,"['test statistic', 'null hypothesis', 'data', 'estimate', 'point estimate', 'hypothesis', 'standard', 'standard error', 'expected value', 'statistic', 'error', 'test']", Testing for goodness of fit using chisquare,seg_57,"this construction was based on (1) identifying the difference between a point estimate and an expected value if the null hypothesis was true, and (2) standardizing that difference using the standard error of the point estimate. these two ideas will help in the construction of an appropriate test statistic for count data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2023,  2810,  2001,  2241,  2006,  1006,  1015,  1007, 12151,
         1996,  4489,  2090,  1037,  2391, 10197,  1998,  2019,  3517,  3643,
         2065,  1996, 19701, 10744,  2001,  2995,  1010,  1998,  1006,  1016,
         1007,  3115,  6026,  2008,  4489,  2478,  1996,  3115,  7561,  1997,
         1996,  2391, 10197,  1012,  2122,  2048,  4784,  2097,  2393,  1999,
         1996,  2810,  1997,  2019,  6413,  3231, 28093,  6553,  2005,  4175,
         2951,  1012,   102])"
1572,1,"['null hypothesis', 'hypothesis']", Testing for goodness of fit using chisquare,seg_57,"our strategy will be to first compute the difference between the observed counts and the counts we would expect if the null hypothesis was true, then we will standardize the difference:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2256,  5656,  2097,  2022,  2000,  2034, 24134,  1996,  4489,
         2090,  1996,  5159,  9294,  1998,  1996,  9294,  2057,  2052,  5987,
         2065,  1996, 19701, 10744,  2001,  2995,  1010,  2059,  2057,  2097,
         3115,  4697,  1996,  4489,  1024,   102])"
1573,0,[], Testing for goodness of fit using chisquare,seg_57,observed white count− null white count z1 = se of observed white count,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  5159,  2317,  4175, 22543, 19701,  2317,  4175,  1062,  2487,
         1027,  7367,  1997,  5159,  2317,  4175,   102])"
1574,1,"['estimate', 'point estimate', 'standard', 'standard error', 'data', 'error']", Testing for goodness of fit using chisquare,seg_57,the standard error for the point estimate of the count in binned data is the square root of the count under the null.32 therefore:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996,  3115,  7561,  2005,  1996,  2391, 10197,  1997,  1996,
         4175,  1999,  8026,  7228,  2951,  2003,  1996,  2675,  7117,  1997,
         1996,  4175,  2104,  1996, 19701,  1012,  3590,  3568,  1024,   102])"
1575,1,"['statistics', 'test statistics', 'test']", Testing for goodness of fit using chisquare,seg_57,"the fraction is very similar to previous test statistics: first compute a difference, then standardize it. these computations should also be completed for the black, hispanic, and other groups:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996, 12884,  2003,  2200,  2714,  2000,  3025,  3231,  6747,
         1024,  2034, 24134,  1037,  4489,  1010,  2059,  3115,  4697,  2009,
         1012,  2122, 22334,  2015,  2323,  2036,  2022,  2949,  2005,  1996,
         2304,  1010,  6696,  1010,  1998,  2060,  2967,  1024,   102])"
1576,1,"['test statistic', 'absolute value', 'standardized', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"we would like to use a single test statistic to determine if these four standardized differences are irregularly far from zero. that is, z1, z2, z3, and z4 must be combined somehow to help determine if they – as a group – tend to be unusually far from zero. a first thought might be to take the absolute value of these four standardized differences and add them up:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2057,  2052,  2066,  2000,  2224,  1037,  2309,  3231, 28093,
         6553,  2000,  5646,  2065,  2122,  2176, 16367,  5966,  2024, 12052,
         2135,  2521,  2013,  5717,  1012,  2008,  2003,  1010,  1062,  2487,
         1010,  1062,  2475,  1010,  1062,  2509,  1010,  1998,  1062,  2549,
         2442,  2022,  4117,  5064,  2000,  2393,  5646,  2065,  2027,  1516,
         2004,  1037,  2177,  1516,  7166,  2000,  2022, 12890,  2521,  2013,
         5717,  1012,  1037,  2034,  2245,  2453,  2022,  2000,  2202,  1996,
         7619,  3643,  1997,  2122,  2176, 16367,  5966,  1998,  5587,  2068,
         2039,  1024,   102])"
1577,0,[], Testing for goodness of fit using chisquare,seg_57,"indeed, this does give one number summarizing how far the actual counts are from what was expected. however, it is more common to add the squared values:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  5262,  1010,  2023,  2515,  2507,  2028,  2193,  7680,  7849,
         6026,  2129,  2521,  1996,  5025,  9294,  2024,  2013,  2054,  2001,
         3517,  1012,  2174,  1010,  2009,  2003,  2062,  2691,  2000,  5587,
         1996, 19942,  5300,  1024,   102])"
1578,1,['standardized'], Testing for goodness of fit using chisquare,seg_57,squaring each standardized difference before adding them together does two things:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  5490,  6692,  4892,  2169, 16367,  4489,  2077,  5815,  2068,
         2362,  2515,  2048,  2477,  1024,   102])"
1579,1,['standardized'], Testing for goodness of fit using chisquare,seg_57,• any standardized difference that is squared will now be positive.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1528,  2151, 16367,  4489,  2008,  2003, 19942,  2097,  2085,
         2022,  3893,  1012,   102])"
1580,1,['standardized'], Testing for goodness of fit using chisquare,seg_57,• differences that already look unusual – e.g. a standardized difference of 2.5 – will become much larger after being squared.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1528,  5966,  2008,  2525,  2298,  5866,  1516,  1041,  1012,
         1043,  1012,  1037, 16367,  4489,  1997,  1016,  1012,  1019,  1516,
         2097,  2468,  2172,  3469,  2044,  2108, 19942,  1012,   102])"
1581,1,"['test statistic', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"the test statistic x2, which is the sum of the z2 values, is generally used for these reasons. we can also write an equation for x2 using the observed counts and null counts:",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996,  3231, 28093,  6553,  1060,  2475,  1010,  2029,  2003,
         1996,  7680,  1997,  1996,  1062,  2475,  5300,  1010,  2003,  3227,
         2109,  2005,  2122,  4436,  1012,  2057,  2064,  2036,  4339,  2019,
         8522,  2005,  1060,  2475,  2478,  1996,  5159,  9294,  1998, 19701,
         9294,  1024,   102])"
1582,1,"['hypotheses', 'hypothesis', 'distribution', 'null hypothesis']", Testing for goodness of fit using chisquare,seg_57,"the final number x2 summarizes how strongly the observed counts tend to deviate from the null counts. in section 6.3.4, we will see that if the null hypothesis is true, then x2 follows a new distribution called a chi-square distribution. using this distribution, we will be able to obtain a p-value to evaluate the hypotheses.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996,  2345,  2193,  1060,  2475,  7680,  7849, 10057,  2129,
         6118,  1996,  5159,  9294,  7166,  2000, 14386,  3686,  2013,  1996,
        19701,  9294,  1012,  1999,  2930,  1020,  1012,  1017,  1012,  1018,
         1010,  2057,  2097,  2156,  2008,  2065,  1996, 19701, 10744,  2003,
         2995,  1010,  2059,  1060,  2475,  4076,  1037,  2047,  4353,  2170,
         1037,  9610,  1011,  2675,  4353,  1012,  2478,  2023,  4353,  1010,
         2057,  2097,  2022,  2583,  2000,  6855,  1037,  1052,  1011,  3643,
         2000, 16157,  1996,  1044, 22571, 14573, 23072,  1012,   102])"
1583,1,['distribution'], Testing for goodness of fit using chisquare,seg_57,6.3.3 the chi-square distribution and finding areas,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 1020, 1012, 1017, 1012, 1017, 1996, 9610, 1011, 2675, 4353, 1998,
        4531, 2752,  102])"
1584,1,"['sets', 'degrees of freedom', 'mean', 'normal distribution', 'normal', 'standard deviation', 'statistics', 'data', 'parameter', 'deviation', 'skewed', 'standard', 'parameters', 'distribution', 'data sets']", Testing for goodness of fit using chisquare,seg_57,"the chi-square distribution is sometimes used to characterize data sets and statistics that are always positive and typically right skewed. recall a normal distribution had two parameters – mean and standard deviation – that could be used to describe its exact characteristics. the chisquare distribution has just one parameter called degrees of freedom (df), which influences the shape, center, and spread of the distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996,  9610,  1011,  2675,  4353,  2003,  2823,  2109,  2000,
         2839,  4697,  2951,  4520,  1998,  6747,  2008,  2024,  2467,  3893,
         1998,  4050,  2157, 15315,  7974,  2098,  1012,  9131,  1037,  3671,
         4353,  2018,  2048, 11709,  1516,  2812,  1998,  3115, 24353,  1516,
         2008,  2071,  2022,  2109,  2000,  6235,  2049,  6635,  6459,  1012,
         1996,  9610,  2015, 16211,  2890,  4353,  2038,  2074,  2028, 16381,
         2170,  5445,  1997,  4071,  1006,  1040,  2546,  1007,  1010,  2029,
         8092,  1996,  4338,  1010,  2415,  1010,  1998,  3659,  1997,  1996,
         4353,  1012,   102])"
1585,1,"['variability', 'degrees of freedom', 'distributions', 'distribution']", Testing for goodness of fit using chisquare,seg_57,figure 6.7 shows three chi-square distributions. (a) how does the center of the distribution change when the degrees of freedom is larger? (b) what about the variability (spread)? (c) how does the shape change?33,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1021,  3065,  2093,  9610,  1011,  2675,
        20611,  1012,  1006,  1037,  1007,  2129,  2515,  1996,  2415,  1997,
         1996,  4353,  2689,  2043,  1996,  5445,  1997,  4071,  2003,  3469,
         1029,  1006,  1038,  1007,  2054,  2055,  1996, 28436,  1006,  3659,
         1007,  1029,  1006,  1039,  1007,  2129,  2515,  1996,  4338,  2689,
         1029,  3943,   102])"
1586,1,"['degrees of freedom', 'distributions', 'varying']", Testing for goodness of fit using chisquare,seg_57,figure 6.7: three chi-square distributions with varying degrees of freedom.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1021,  1024,  2093,  9610,  1011,  2675,
        20611,  2007,  9671,  5445,  1997,  4071,  1012,   102])"
1587,1,"['variability', 'distribution', 'degrees of freedom', 'symmetric']", Testing for goodness of fit using chisquare,seg_57,"figure 6.7 and guided practice 6.24 demonstrate three general properties of chi-square distributions as the degrees of freedom increases: the distribution becomes more symmetric, the center moves to the right, and the variability inflates.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1021,  1998,  8546,  3218,  1020,  1012,
         2484, 10580,  2093,  2236,  5144,  1997,  9610,  1011,  2675, 20611,
         2004,  1996,  5445,  1997,  4071,  7457,  1024,  1996,  4353,  4150,
         2062, 19490,  1010,  1996,  2415,  5829,  2000,  1996,  2157,  1010,
         1998,  1996, 28436,  1999, 10258,  8520,  1012,   102])"
1588,1,"['tail', 'table', 'distribution']", Testing for goodness of fit using chisquare,seg_57,"our principal interest in the chi-square distribution is the calculation of p-values, which (as we have seen before) is related to finding the relevant area in the tail of a distribution. the most common ways to do this are using computer software, using a graphing calculator, or using a table. for folks wanting to use the table option, we provide an outline of how to read the chi-square table in appendix c.3, which is also where you may find the table. for the examples below, use your preferred approach to confirm you get the same answers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2256,  4054,  3037,  1999,  1996,  9610,  1011,  2675,  4353,
         2003,  1996, 17208,  1997,  1052,  1011,  5300,  1010,  2029,  1006,
         2004,  2057,  2031,  2464,  2077,  1007,  2003,  3141,  2000,  4531,
         1996,  7882,  2181,  1999,  1996,  5725,  1997,  1037,  4353,  1012,
         1996,  2087,  2691,  3971,  2000,  2079,  2023,  2024,  2478,  3274,
         4007,  1010,  2478,  1037, 10629,  2075, 10250, 19879,  4263,  1010,
         2030,  2478,  1037,  2795,  1012,  2005, 12455,  5782,  2000,  2224,
         1996,  2795,  5724,  1010,  2057,  3073,  2019, 12685,  1997,  2129,
         2000,  3191,  1996,  9610,  1011,  2675,  2795,  1999, 22524,  1039,
         1012,  1017,  1010,  2029,  2003,  2036,  2073,  2017,  2089,  2424,
         1996,  2795,  1012,  2005,  1996,  4973,  2917,  1010,  2224,  2115,
         6871,  3921,  2000, 12210,  2017,  2131,  1996,  2168,  6998,  1012,
          102])"
1589,1,"['tail', 'distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,figure 6.8(a) shows a chi-square distribution with 3 degrees of freedom and an upper shaded tail starting at 6.25. find the shaded area.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1022,  1006,  1037,  1007,  3065,  1037,
         9610,  1011,  2675,  4353,  2007,  1017,  5445,  1997,  4071,  1998,
         2019,  3356, 25273,  5725,  3225,  2012,  1020,  1012,  2423,  1012,
         2424,  1996, 25273,  2181,  1012,   102])"
1590,1,"['tail', 'degrees of freedom', 'distribution', 'statistical']", Testing for goodness of fit using chisquare,seg_57,"using statistical software or a graphing calculator, we can find that the upper tail area for a chisquare distribution with 3 degrees of freedom (df) and a cutoff of 6.25 is 0.1001. that is, the shaded upper tail of figure 6.8(a) has area 0.1.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2478,  7778,  4007,  2030,  1037, 10629,  2075, 10250, 19879,
         4263,  1010,  2057,  2064,  2424,  2008,  1996,  3356,  5725,  2181,
         2005,  1037,  9610,  2015, 16211,  2890,  4353,  2007,  1017,  5445,
         1997,  4071,  1006,  1040,  2546,  1007,  1998,  1037,  3013,  7245,
         1997,  1020,  1012,  2423,  2003,  1014,  1012,  2531,  2487,  1012,
         2008,  2003,  1010,  1996, 25273,  3356,  5725,  1997,  3275,  1020,
         1012,  1022,  1006,  1037,  1007,  2038,  2181,  1014,  1012,  1015,
         1012,   102])"
1591,1,"['tail', 'distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,figure 6.8(b) shows the upper tail of a chi-square distribution with 2 degrees of freedom. the bound for this upper tail is at 4.3. find the tail area.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 3275, 1020, 1012, 1022, 1006, 1038, 1007, 3065, 1996, 3356, 5725,
        1997, 1037, 9610, 1011, 2675, 4353, 2007, 1016, 5445, 1997, 4071, 1012,
        1996, 5391, 2005, 2023, 3356, 5725, 2003, 2012, 1018, 1012, 1017, 1012,
        2424, 1996, 5725, 2181, 1012,  102])"
1592,1,"['tail', 'table', 'range']", Testing for goodness of fit using chisquare,seg_57,"using software, we can find that the tail area shaded in figure 6.8(b) to be 0.1165. if using a table, we would only be able to find a range of values for the tail area: between 0.1 and 0.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2478,  4007,  1010,  2057,  2064,  2424,  2008,  1996,  5725,
         2181, 25273,  1999,  3275,  1020,  1012,  1022,  1006,  1038,  1007,
         2000,  2022,  1014,  1012, 12904,  2629,  1012,  2065,  2478,  1037,
         2795,  1010,  2057,  2052,  2069,  2022,  2583,  2000,  2424,  1037,
         2846,  1997,  5300,  2005,  1996,  5725,  2181,  1024,  2090,  1014,
         1012,  1015,  1998,  1014,  1012,  1016,  1012,   102])"
1593,1,"['tail', 'distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,figure 6.8(c) shows an upper tail for a chi-square distribution with 5 degrees of freedom and a cutoff of 5.1. find the tail area.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 3275, 1020, 1012, 1022, 1006, 1039, 1007, 3065, 2019, 3356, 5725,
        2005, 1037, 9610, 1011, 2675, 4353, 2007, 1019, 5445, 1997, 4071, 1998,
        1037, 3013, 7245, 1997, 1019, 1012, 1015, 1012, 2424, 1996, 5725, 2181,
        1012,  102])"
1594,1,"['tail', 'table']", Testing for goodness of fit using chisquare,seg_57,"using software, we would obtain a tail area of 0.4038. if using the table in appendix c.3, we would have identified that the tail area is larger than 0.3 but not be able to give the precise value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2478,  4007,  1010,  2057,  2052,  6855,  1037,  5725,  2181,
         1997,  1014,  1012, 28203,  2620,  1012,  2065,  2478,  1996,  2795,
         1999, 22524,  1039,  1012,  1017,  1010,  2057,  2052,  2031,  4453,
         2008,  1996,  5725,  2181,  2003,  3469,  2084,  1014,  1012,  1017,
         2021,  2025,  2022,  2583,  2000,  2507,  1996, 10480,  3643,  1012,
          102])"
1595,1,"['distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,figure 6.8(d) shows a cutoff of 11.7 on a chi-square distribution with 7 degrees of freedom. find the area of the upper tail.34,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 3275, 1020, 1012, 1022, 1006, 1040, 1007, 3065, 1037, 3013, 7245,
        1997, 2340, 1012, 1021, 2006, 1037, 9610, 1011, 2675, 4353, 2007, 1021,
        5445, 1997, 4071, 1012, 2424, 1996, 2181, 1997, 1996, 3356, 5725, 1012,
        4090,  102])"
1596,1,"['distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,figure 6.8(e) shows a cutoff of 10 on a chi-square distribution with 4 degrees of freedom. find the area of the upper tail.35,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 3275, 1020, 1012, 1022, 1006, 1041, 1007, 3065, 1037, 3013, 7245,
        1997, 2184, 2006, 1037, 9610, 1011, 2675, 4353, 2007, 1018, 5445, 1997,
        4071, 1012, 2424, 1996, 2181, 1997, 1996, 3356, 5725, 1012, 3486,  102])"
1597,1,['distribution'], Testing for goodness of fit using chisquare,seg_57,figure 6.8(f) shows a cutoff of 9.21 with a chi-square distribution with 3 df. find the area of the upper tail.36,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 3275, 1020, 1012, 1022, 1006, 1042, 1007, 3065, 1037, 3013, 7245,
        1997, 1023, 1012, 2538, 2007, 1037, 9610, 1011, 2675, 4353, 2007, 1017,
        1040, 2546, 1012, 2424, 1996, 2181, 1997, 1996, 3356, 5725, 1012, 4029,
         102])"
1598,1,"['distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,"figure 6.8: (a) chi-square distribution with 3 degrees of freedom, area above 6.25 shaded. (b) 2 degrees of freedom, area above 4.3 shaded. (c) 5 degrees of freedom, area above 5.1 shaded. (d) 7 degrees of freedom, area above 11.7 shaded. (e) 4 degrees of freedom, area above 10 shaded. (f) 3 degrees of freedom, area above 9.21 shaded.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1022,  1024,  1006,  1037,  1007,  9610,
         1011,  2675,  4353,  2007,  1017,  5445,  1997,  4071,  1010,  2181,
         2682,  1020,  1012,  2423, 25273,  1012,  1006,  1038,  1007,  1016,
         5445,  1997,  4071,  1010,  2181,  2682,  1018,  1012,  1017, 25273,
         1012,  1006,  1039,  1007,  1019,  5445,  1997,  4071,  1010,  2181,
         2682,  1019,  1012,  1015, 25273,  1012,  1006,  1040,  1007,  1021,
         5445,  1997,  4071,  1010,  2181,  2682,  2340,  1012,  1021, 25273,
         1012,  1006,  1041,  1007,  1018,  5445,  1997,  4071,  1010,  2181,
         2682,  2184, 25273,  1012,  1006,  1042,  1007,  1017,  5445,  1997,
         4071,  1010,  2181,  2682,  1023,  1012,  2538, 25273,  1012,   102])"
1599,1,['distribution'], Testing for goodness of fit using chisquare,seg_57,6.3.4 finding a p-value for a chi-square distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 1020, 1012, 1017, 1012, 1018, 4531, 1037, 1052, 1011, 3643, 2005,
        1037, 9610, 1011, 2675, 4353,  102])"
1600,1,"['bias', 'test statistic', 'hypothesis', 'alternative hypothesis', 'null hypothesis', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"in section 6.3.2, we identified a new test statistic (x2) within the context of assessing whether there was evidence of racial bias in how jurors were sampled. the null hypothesis represented the claim that jurors were randomly sampled and there was no racial bias. the alternative hypothesis was that there was racial bias in how the jurors were sampled.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1999,  2930,  1020,  1012,  1017,  1012,  1016,  1010,  2057,
         4453,  1037,  2047,  3231, 28093,  6553,  1006,  1060,  2475,  1007,
         2306,  1996,  6123,  1997, 20077,  3251,  2045,  2001,  3350,  1997,
         5762, 13827,  1999,  2129, 18414, 29165,  2015,  2020, 18925,  1012,
         1996, 19701, 10744,  3421,  1996,  4366,  2008, 18414, 29165,  2015,
         2020, 18154, 18925,  1998,  2045,  2001,  2053,  5762, 13827,  1012,
         1996,  4522, 10744,  2001,  2008,  2045,  2001,  5762, 13827,  1999,
         2129,  1996, 18414, 29165,  2015,  2020, 18925,  1012,   102])"
1601,1,"['bias', 'test statistic', 'case', 'degrees of freedom', 'hypothesis', 'bins', 'alternative hypothesis', 'distribution', 'null hypothesis', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"we determined that a large x2 value would suggest strong evidence favoring the alternative hypothesis: that there was racial bias. however, we could not quantify what the chance was of observing such a large test statistic (x2 = 5.89) if the null hypothesis actually was true. this is where the chi-square distribution becomes useful. if the null hypothesis was true and there was no racial bias, then x2 would follow a chi-square distribution, with three degrees of freedom in this case. under certain conditions, the statistic x2 follows a chi-square distribution with k − 1 degrees of freedom, where k is the number of bins.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2057,  4340,  2008,  1037,  2312,  1060,  2475,  3643,  2052,
         6592,  2844,  3350,  5684,  2075,  1996,  4522, 10744,  1024,  2008,
         2045,  2001,  5762, 13827,  1012,  2174,  1010,  2057,  2071,  2025,
        24110, 27351,  2054,  1996,  3382,  2001,  1997, 14158,  2107,  1037,
         2312,  3231, 28093,  6553,  1006,  1060,  2475,  1027,  1019,  1012,
         6486,  1007,  2065,  1996, 19701, 10744,  2941,  2001,  2995,  1012,
         2023,  2003,  2073,  1996,  9610,  1011,  2675,  4353,  4150,  6179,
         1012,  2065,  1996, 19701, 10744,  2001,  2995,  1998,  2045,  2001,
         2053,  5762, 13827,  1010,  2059,  1060,  2475,  2052,  3582,  1037,
         9610,  1011,  2675,  4353,  1010,  2007,  2093,  5445,  1997,  4071,
         1999,  2023,  2553,  1012,  2104,  3056,  3785,  1010,  1996, 28093,
         6553,  1060,  2475,  4076,  1037,  9610,  1011,  2675,  4353,  2007,
         1047,  1597,  1015,  5445,  1997,  4071,  1010,  2073,  1047,  2003,
         1996,  2193,  1997,  8026,  2015,  1012,   102])"
1602,1,"['categories', 'distribution', 'associated', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,how many categories were there in the juror example? how many degrees of freedom should be associated with the chi-square distribution used for x2?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2129,  2116,  7236,  2020,  2045,  1999,  1996, 18414, 29165,
         2742,  1029,  2129,  2116,  5445,  1997,  4071,  2323,  2022,  3378,
         2007,  1996,  9610,  1011,  2675,  4353,  2109,  2005,  1060,  2475,
         1029,   102])"
1603,1,"['categories', 'test statistic', 'degrees of freedom', 'distribution', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"in the jurors example, there were k = 4 categories: white, black, hispanic, and other. according to the rule above, the test statistic x2 should then follow a chi-square distribution with k − 1 = 3 degrees of freedom if h0 is true.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1999,  1996, 18414, 29165,  2015,  2742,  1010,  2045,  2020,
         1047,  1027,  1018,  7236,  1024,  2317,  1010,  2304,  1010,  6696,
         1010,  1998,  2060,  1012,  2429,  2000,  1996,  3627,  2682,  1010,
         1996,  3231, 28093,  6553,  1060,  2475,  2323,  2059,  3582,  1037,
         9610,  1011,  2675,  4353,  2007,  1047,  1597,  1015,  1027,  1017,
         5445,  1997,  4071,  2065,  1044,  2692,  2003,  2995,  1012,   102])"
1604,1,"['test statistic', 'normal distribution', 'sample', 'normal', 'sample size', 'condition', 'distribution', 'model', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"just like we checked sample size conditions to use a normal distribution in earlier sections, we must also check a sample size condition to safely apply the chi-square distribution for x2. each expected count must be at least 5. in the juror example, the expected counts were 198, 19.25, 33, and 24.75, all easily above 5, so we can apply the chi-square model to the test statistic, x2 = 5.89.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2074,  2066,  2057,  7039,  7099,  2946,  3785,  2000,  2224,
         1037,  3671,  4353,  1999,  3041,  5433,  1010,  2057,  2442,  2036,
         4638,  1037,  7099,  2946,  4650,  2000,  9689,  6611,  1996,  9610,
         1011,  2675,  4353,  2005,  1060,  2475,  1012,  2169,  3517,  4175,
         2442,  2022,  2012,  2560,  1019,  1012,  1999,  1996, 18414, 29165,
         2742,  1010,  1996,  3517,  9294,  2020, 20003,  1010,  2539,  1012,
         2423,  1010,  3943,  1010,  1998,  2484,  1012,  4293,  1010,  2035,
         4089,  2682,  1019,  1010,  2061,  2057,  2064,  6611,  1996,  9610,
         1011,  2675,  2944,  2000,  1996,  3231, 28093,  6553,  1010,  1060,
         2475,  1027,  1019,  1012,  6486,  1012,   102])"
1605,1,"['test statistic', 'associated', 'degrees of freedom', 'hypothesis', 'distribution', 'null hypothesis', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"if the null hypothesis is true, the test statistic x2 = 5.89 would be closely associated with a chisquare distribution with three degrees of freedom. using this distribution and test statistic, identify the p-value.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2065,  1996, 19701, 10744,  2003,  2995,  1010,  1996,  3231,
        28093,  6553,  1060,  2475,  1027,  1019,  1012,  6486,  2052,  2022,
         4876,  3378,  2007,  1037,  9610,  2015, 16211,  2890,  4353,  2007,
         2093,  5445,  1997,  4071,  1012,  2478,  2023,  4353,  1998,  3231,
        28093,  6553,  1010,  6709,  1996,  1052,  1011,  3643,  1012,   102])"
1606,1,"['bias', 'tail', 'data', 'table', 'hypothesis', 'statistical', 'distribution', 'null hypothesis']", Testing for goodness of fit using chisquare,seg_57,"the chi-square distribution and p-value are shown in figure 6.9. because larger chi-square values correspond to stronger evidence against the null hypothesis, we shade the upper tail to represent the p-value. using statistical software (or the table in appendix c.3), we can determine that the area is 0.1171. generally we do not reject the null hypothesis with such a large p-value. in other words, the data do not provide convincing evidence of racial bias in the juror selection.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996,  9610,  1011,  2675,  4353,  1998,  1052,  1011,  3643,
         2024,  3491,  1999,  3275,  1020,  1012,  1023,  1012,  2138,  3469,
         9610,  1011,  2675,  5300, 17254,  2000,  6428,  3350,  2114,  1996,
        19701, 10744,  1010,  2057,  8703,  1996,  3356,  5725,  2000,  5050,
         1996,  1052,  1011,  3643,  1012,  2478,  7778,  4007,  1006,  2030,
         1996,  2795,  1999, 22524,  1039,  1012,  1017,  1007,  1010,  2057,
         2064,  5646,  2008,  1996,  2181,  2003,  1014,  1012, 12567,  2487,
         1012,  3227,  2057,  2079,  2025, 15454,  1996, 19701, 10744,  2007,
         2107,  1037,  2312,  1052,  1011,  3643,  1012,  1999,  2060,  2616,
         1010,  1996,  2951,  2079,  2025,  3073, 13359,  3350,  1997,  5762,
        13827,  1999,  1996, 18414, 29165,  4989,  1012,   102])"
1607,1,"['hypothesis test', 'hypothesis', 'distribution', 'test']", Testing for goodness of fit using chisquare,seg_57,figure 6.9: the p-value for the juror hypothesis test is shaded in the chi-square distribution with df = 3.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  1023,  1024,  1996,  1052,  1011,  3643,
         2005,  1996, 18414, 29165, 10744,  3231,  2003, 25273,  1999,  1996,
         9610,  1011,  2675,  4353,  2007,  1040,  2546,  1027,  1017,  1012,
          102])"
1608,1,"['categories', 'test statistic', 'set', 'degrees of freedom', 'hypothesis', 'distribution', 'null hypothesis', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"suppose we are to evaluate whether there is convincing evidence that a set of observed counts o1, o2, ..., ok in k categories are unusually different from what might be expected under a null hypothesis. call the expected counts that are based on the null hypothesis e1, e2, ..., ek. if each expected count is at least 5 and the null hypothesis is true, then the test statistic below follows a chi-square distribution with k − 1 degrees of freedom:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  6814,  2057,  2024,  2000, 16157,  3251,  2045,  2003, 13359,
         3350,  2008,  1037,  2275,  1997,  5159,  9294,  1051,  2487,  1010,
         1051,  2475,  1010,  1012,  1012,  1012,  1010,  7929,  1999,  1047,
         7236,  2024, 12890,  2367,  2013,  2054,  2453,  2022,  3517,  2104,
         1037, 19701, 10744,  1012,  2655,  1996,  3517,  9294,  2008,  2024,
         2241,  2006,  1996, 19701, 10744,  1041,  2487,  1010,  1041,  2475,
         1010,  1012,  1012,  1012,  1010, 23969,  1012,  2065,  2169,  3517,
         4175,  2003,  2012,  2560,  1019,  1998,  1996, 19701, 10744,  2003,
         2995,  1010,  2059,  1996,  3231, 28093,  6553,  2917,  4076,  1037,
         9610,  1011,  2675,  4353,  2007,  1047,  1597,  1015,  5445,  1997,
         4071,  1024,   102])"
1609,1,"['tail', 'test statistic', 'hypothesis', 'null hypothesis', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,the p-value for this test statistic is found by looking at the upper tail of this chi-square distribution. we consider the upper tail because larger values of x2 would provide greater evidence against the null hypothesis.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1996,  1052,  1011,  3643,  2005,  2023,  3231, 28093,  6553,
         2003,  2179,  2011,  2559,  2012,  1996,  3356,  5725,  1997,  2023,
         9610,  1011,  2675,  4353,  1012,  2057,  5136,  1996,  3356,  5725,
         2138,  3469,  5300,  1997,  1060,  2475,  2052,  3073,  3618,  3350,
         2114,  1996, 19701, 10744,  1012,   102])"
1610,1,['test'], Testing for goodness of fit using chisquare,seg_57,there are two conditions that must be checked before performing a chi-square test:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 2045, 2024, 2048, 3785, 2008, 2442, 2022, 7039, 2077, 4488, 1037,
        9610, 1011, 2675, 3231, 1024,  102])"
1611,1,"['cases', 'table', 'independent', 'case']", Testing for goodness of fit using chisquare,seg_57,independence. each case that contributes a count to the table must be independent of all the other cases in the table.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  4336,  1012,  2169,  2553,  2008, 16605,  1037,  4175,  2000,
         1996,  2795,  2442,  2022,  2981,  1997,  2035,  1996,  2060,  3572,
         1999,  1996,  2795,  1012,   102])"
1612,1,"['cases', 'distribution']", Testing for goodness of fit using chisquare,seg_57,sample size / distribution. each particular scenario (i.e. cell count) must have at least 5 expected cases.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  7099,  2946,  1013,  4353,  1012,  2169,  3327, 11967,  1006,
         1045,  1012,  1041,  1012,  3526,  4175,  1007,  2442,  2031,  2012,
         2560,  1019,  3517,  3572,  1012,   102])"
1613,1,"['rates', 'error']", Testing for goodness of fit using chisquare,seg_57,failing to check conditions may affect the test’s error rates.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 7989, 2000, 4638, 3785, 2089, 7461, 1996, 3231, 1521, 1055, 7561,
        6165, 1012,  102])"
1614,1,"['bins', 'bin', 'table']", Testing for goodness of fit using chisquare,seg_57,"when examining a table with just two bins, pick a single bin and use the one-proportion methods introduced in section 6.1.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2043, 12843,  1037,  2795,  2007,  2074,  2048,  8026,  2015,
         1010,  4060,  1037,  2309,  8026,  1998,  2224,  1996,  2028,  1011,
        10817,  4725,  3107,  1999,  2930,  1020,  1012,  1015,  1012,   102])"
1615,1,"['evaluating', 'goodness of fit', 'distribution']", Testing for goodness of fit using chisquare,seg_57,6.3.5 evaluating goodness of fit for a distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1020,  1012,  1017,  1012,  1019, 23208, 15003,  1997,  4906,
         2005,  1037,  4353,   102])"
1616,1,"['evaluating', 'data', 'set', 'statistical model', 'independent', 'statistical', 'model', 'data set', 'test']", Testing for goodness of fit using chisquare,seg_57,"section 4.2 would be useful background reading for this example, but it is not a prerequisite. we can apply the chi-square testing framework to the second problem in this section: evaluating whether a certain statistical model fits a data set. daily stock returns from the s&p500 for 10 can be used to assess whether stock activity each day is independent of the stock’s behavior on previous days. this sounds like a very complex question, and it is, but a chi-square test can be used to study the problem. we will label each day as up or down (d) depending on whether the market was up or down that day. for example, consider the following changes in price, their new labels of up and down, and then the number of days that must be observed before each up day:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2930,  1018,  1012,  1016,  2052,  2022,  6179,  4281,  3752,
         2005,  2023,  2742,  1010,  2021,  2009,  2003,  2025,  1037,  3653,
         2890, 24871,  1012,  2057,  2064,  6611,  1996,  9610,  1011,  2675,
         5604,  7705,  2000,  1996,  2117,  3291,  1999,  2023,  2930,  1024,
        23208,  3251,  1037,  3056,  7778,  2944, 16142,  1037,  2951,  2275,
         1012,  3679,  4518,  5651,  2013,  1996,  1055,  1004,  1052, 29345,
         2005,  2184,  2064,  2022,  2109,  2000, 14358,  3251,  4518,  4023,
         2169,  2154,  2003,  2981,  1997,  1996,  4518,  1521,  1055,  5248,
         2006,  3025,  2420,  1012,  2023,  4165,  2066,  1037,  2200,  3375,
         3160,  1010,  1998,  2009,  2003,  1010,  2021,  1037,  9610,  1011,
         2675,  3231,  2064,  2022,  2109,  2000,  2817,  1996,  3291,  1012,
         2057,  2097,  3830,  2169,  2154,  2004,  2039,  2030,  2091,  1006,
         1040,  1007,  5834,  2006,  3251,  1996,  3006,  2001,  2039,  2030,
         2091,  2008,  2154,  1012,  2005,  2742,  1010,  5136,  1996,  2206,
         3431,  1999,  3976,  1010,  2037,  2047, 10873,  1997,  2039,  1998,
         2091,  1010,  1998,  2059,  1996,  2193,  1997,  2420,  2008,  2442,
         2022,  5159,  2077,  2169,  2039,  2154,  1024,   102])"
1617,1,"['trial', 'geometric distribution', 'probability', 'failures', 'distribution', 'geometric', 'data', 'success', 'independent']", Testing for goodness of fit using chisquare,seg_57,"if the days really are independent, then the number of days until a positive trading day should follow a geometric distribution. the geometric distribution describes the probability of waiting for the kth trial to observe the first success. here each up day (up) represents a success, and down (d) days represent failures. in the data above, it took only one day until the market was up, so the first wait time was 1 day. it took two more days before we observed our next up trading day, and two more for the third up day. we would like to determine if these counts (1, 2, 2, 1, 4, and so on) follow the geometric distribution. figure 6.10 shows the number of waiting days for a positive trading day during 10 years for the s&p500.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2065,  1996,  2420,  2428,  2024,  2981,  1010,  2059,  1996,
         2193,  1997,  2420,  2127,  1037,  3893,  6202,  2154,  2323,  3582,
         1037, 14965,  4353,  1012,  1996, 14965,  4353,  5577,  1996,  9723,
         1997,  3403,  2005,  1996,  1047,  2705,  3979,  2000, 11949,  1996,
         2034,  3112,  1012,  2182,  2169,  2039,  2154,  1006,  2039,  1007,
         5836,  1037,  3112,  1010,  1998,  2091,  1006,  1040,  1007,  2420,
         5050, 15428,  1012,  1999,  1996,  2951,  2682,  1010,  2009,  2165,
         2069,  2028,  2154,  2127,  1996,  3006,  2001,  2039,  1010,  2061,
         1996,  2034,  3524,  2051,  2001,  1015,  2154,  1012,  2009,  2165,
         2048,  2062,  2420,  2077,  2057,  5159,  2256,  2279,  2039,  6202,
         2154,  1010,  1998,  2048,  2062,  2005,  1996,  2353,  2039,  2154,
         1012,  2057,  2052,  2066,  2000,  5646,  2065,  2122,  9294,  1006,
         1015,  1010,  1016,  1010,  1016,  1010,  1015,  1010,  1018,  1010,
         1998,  2061,  2006,  1007,  3582,  1996, 14965,  4353,  1012,  3275,
         1020,  1012,  2184,  3065,  1996,  2193,  1997,  3403,  2420,  2005,
         1037,  3893,  6202,  2154,  2076,  2184,  2086,  2005,  1996,  1055,
         1004,  1052, 29345,  1012,   102])"
1618,1,['distribution'], Testing for goodness of fit using chisquare,seg_57,figure 6.10: observed distribution of the waiting time until a positive trading day for the s&p500.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  2184,  1024,  5159,  4353,  1997,  1996,
         3403,  2051,  2127,  1037,  3893,  6202,  2154,  2005,  1996,  1055,
         1004,  1052, 29345,  1012,   102])"
1619,1,"['geometric distribution', 'probability', 'hypothesis', 'distribution', 'geometric', 'independent']", Testing for goodness of fit using chisquare,seg_57,"we consider how many days one must wait until observing an up day on the s&p500 stock index. if the stock activity was independent from one day to the next and the probability of a positive trading day was constant, then we would expect this waiting time to follow a geometric distribution. we can organize this into a hypothesis framework:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2057,  5136,  2129,  2116,  2420,  2028,  2442,  3524,  2127,
        14158,  2019,  2039,  2154,  2006,  1996,  1055,  1004,  1052, 29345,
         4518,  5950,  1012,  2065,  1996,  4518,  4023,  2001,  2981,  2013,
         2028,  2154,  2000,  1996,  2279,  1998,  1996,  9723,  1997,  1037,
         3893,  6202,  2154,  2001,  5377,  1010,  2059,  2057,  2052,  5987,
         2023,  3403,  2051,  2000,  3582,  1037, 14965,  4353,  1012,  2057,
         2064, 10939,  2023,  2046,  1037, 10744,  7705,  1024,   102])"
1620,1,['independent'], Testing for goodness of fit using chisquare,seg_57,h0: the stock market being up or down on a given day is independent from all other days. we,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 1044, 2692, 1024, 1996, 4518, 3006, 2108, 2039, 2030, 2091, 2006,
        1037, 2445, 2154, 2003, 2981, 2013, 2035, 2060, 2420, 1012, 2057,  102])"
1621,1,"['geometric', 'geometric distribution', 'hypothesis', 'distribution']", Testing for goodness of fit using chisquare,seg_57,"will consider the number of days that pass until an up day is observed. under this hypothesis, the number of days until an up day should follow a geometric distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2097,  5136,  1996,  2193,  1997,  2420,  2008,  3413,  2127,
         2019,  2039,  2154,  2003,  5159,  1012,  2104,  2023, 10744,  1010,
         1996,  2193,  1997,  2420,  2127,  2019,  2039,  2154,  2323,  3582,
         1037, 14965,  4353,  1012,   102])"
1622,1,['independent'], Testing for goodness of fit using chisquare,seg_57,ha: the stock market being up or down on a given day is not independent from all other days.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 5292, 1024, 1996, 4518, 3006, 2108, 2039, 2030, 2091, 2006, 1037,
        2445, 2154, 2003, 2025, 2981, 2013, 2035, 2060, 2420, 1012,  102])"
1623,1,"['geometric distribution', 'hypothesis', 'deviations', 'alternative hypothesis', 'distribution', 'geometric']", Testing for goodness of fit using chisquare,seg_57,"since we know the number of days until an up day would follow a geometric distribution under the null, we look for deviations from the geometric distribution, which would support the alternative hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2144,  2057,  2113,  1996,  2193,  1997,  2420,  2127,  2019,
         2039,  2154,  2052,  3582,  1037, 14965,  4353,  2104,  1996, 19701,
         1010,  2057,  2298,  2005, 24353,  2015,  2013,  1996, 14965,  4353,
         1010,  2029,  2052,  2490,  1996,  4522, 10744,  1012,   102])"
1624,1,['information'], Testing for goodness of fit using chisquare,seg_57,"there are important implications in our result for stock traders: if information from past trading days is useful in telling what will happen today, that information may provide an advantage over other traders.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2045,  2024,  2590, 13494,  1999,  2256,  2765,  2005,  4518,
        13066,  1024,  2065,  2592,  2013,  2627,  6202,  2420,  2003,  6179,
         1999,  4129,  2054,  2097,  4148,  2651,  1010,  2008,  2592,  2089,
         3073,  2019,  5056,  2058,  2060, 13066,  1012,   102])"
1625,1,['data'], Testing for goodness of fit using chisquare,seg_57,we consider data for the s&p500 and summarize the waiting times in figure 6.11 and figure 6.12. the s&p500 was positive on 54.5% of those days.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2057,  5136,  2951,  2005,  1996,  1055,  1004,  1052, 29345,
         1998,  7680,  7849,  4697,  1996,  3403,  2335,  1999,  3275,  1020,
         1012,  2340,  1998,  3275,  1020,  1012,  2260,  1012,  1996,  1055,
         1004,  1052, 29345,  2001,  3893,  2006,  5139,  1012,  1019,  1003,
         1997,  2216,  2420,  1012,   102])"
1626,1,"['cases', 'geometric', 'associated', 'method', 'model', 'bin', 'data']", Testing for goodness of fit using chisquare,seg_57,"because applying the chi-square framework requires expected counts to be at least 5, we have binned together all the cases where the waiting time was at least 7 days to ensure each expected count is well above this minimum. the actual data, shown in the observed row in figure 6.11, can be compared to the expected counts from the geometric model row. the method for computing expected counts is discussed in figure 6.11. in general, the expected counts are determined by (1) identifying the null proportion associated with each bin, then (2) multiplying each null proportion by the total count to obtain the expected counts. that is, this strategy identifies what proportion of the total count we would expect to be in each bin.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2138, 11243,  1996,  9610,  1011,  2675,  7705,  5942,  3517,
         9294,  2000,  2022,  2012,  2560,  1019,  1010,  2057,  2031,  8026,
         7228,  2362,  2035,  1996,  3572,  2073,  1996,  3403,  2051,  2001,
         2012,  2560,  1021,  2420,  2000,  5676,  2169,  3517,  4175,  2003,
         2092,  2682,  2023,  6263,  1012,  1996,  5025,  2951,  1010,  3491,
         1999,  1996,  5159,  5216,  1999,  3275,  1020,  1012,  2340,  1010,
         2064,  2022,  4102,  2000,  1996,  3517,  9294,  2013,  1996, 14965,
         2944,  5216,  1012,  1996,  4118,  2005,  9798,  3517,  9294,  2003,
         6936,  1999,  3275,  1020,  1012,  2340,  1012,  1999,  2236,  1010,
         1996,  3517,  9294,  2024,  4340,  2011,  1006,  1015,  1007, 12151,
         1996, 19701, 10817,  3378,  2007,  2169,  8026,  1010,  2059,  1006,
         1016,  1007,  4800, 22086,  2075,  2169, 19701, 10817,  2011,  1996,
         2561,  4175,  2000,  6855,  1996,  3517,  9294,  1012,  2008,  2003,
         1010,  2023,  5656, 14847,  2054, 10817,  1997,  1996,  2561,  4175,
         2057,  2052,  5987,  2000,  2022,  1999,  2169,  8026,  1012,   102])"
1627,1,"['model', 'geometric']", Testing for goodness of fit using chisquare,seg_57,days 1 2 3 4 5 6 7+ total observed 717 369 155 69 28 14 10 1362 geometric model 743 338 154 70 32 14 12 1362,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2420,  1015,  1016,  1017,  1018,  1019,  1020,  1021,  1009,
         2561,  5159,  6390,  2581,  4029,  2683, 14168,  6353,  2654,  2403,
         2184, 15407,  2475, 14965,  2944,  6356,  2509, 27908, 16666,  3963,
         3590,  2403,  2260, 15407,  2475,   102])"
1628,1,"['model', 'geometric', 'probability', 'distribution']", Testing for goodness of fit using chisquare,seg_57,"figure 6.11: distribution of the waiting time until a positive trading day. the expected counts based on the geometric model are shown in the last row. to find each expected count, we identify the probability of waiting d days based on the geometric model (p (d) = (1 − 0.545)d−1(0.545)) and multiply by the total number of streaks, 1362. for example, waiting for three days occurs under the geometric model about 0.4552× 0.545 = 11.28% of the time, which corresponds to 0.1128× 1362 = 154 streaks.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  2340,  1024,  4353,  1997,  1996,  3403,
         2051,  2127,  1037,  3893,  6202,  2154,  1012,  1996,  3517,  9294,
         2241,  2006,  1996, 14965,  2944,  2024,  3491,  1999,  1996,  2197,
         5216,  1012,  2000,  2424,  2169,  3517,  4175,  1010,  2057,  6709,
         1996,  9723,  1997,  3403,  1040,  2420,  2241,  2006,  1996, 14965,
         2944,  1006,  1052,  1006,  1040,  1007,  1027,  1006,  1015,  1597,
         1014,  1012,  5139,  2629,  1007,  1040, 27944,  1006,  1014,  1012,
         5139,  2629,  1007,  1007,  1998,  4800, 22086,  2011,  1996,  2561,
         2193,  1997, 21295,  1010, 15407,  2475,  1012,  2005,  2742,  1010,
         3403,  2005,  2093,  2420,  5158,  2104,  1996, 14965,  2944,  2055,
         1014,  1012,  3429, 25746, 26306,  1014,  1012,  5139,  2629,  1027,
         2340,  1012,  2654,  1003,  1997,  1996,  2051,  1010,  2029, 14788,
         2000,  1014,  1012, 11176,  2620, 26306, 15407,  2475,  1027, 16666,
        21295,  1012,   102])"
1629,0,[], Testing for goodness of fit using chisquare,seg_57,800 observed expected 600 ycneu 400 qerf 200 0 1 2 3 4 5 6 7+ wait until positive day,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 5385, 5159, 3517, 5174, 1061, 2278, 2638, 2226, 4278, 1053, 2121,
        2546, 3263, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1009, 3524,
        2127, 3893, 2154,  102])"
1630,1,"['bar plot', 'plot']", Testing for goodness of fit using chisquare,seg_57,figure 6.12: side-by-side bar plot of the observed and expected counts for each waiting time.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 3275, 1020, 1012, 2260, 1024, 2217, 1011, 2011, 1011, 2217, 3347,
        5436, 1997, 1996, 5159, 1998, 3517, 9294, 2005, 2169, 3403, 2051, 1012,
         102])"
1631,1,['deviations'], Testing for goodness of fit using chisquare,seg_57,do you notice any unusually large deviations in the graph? can you tell if these deviations are due to chance just by looking?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2079,  2017,  5060,  2151, 12890,  2312, 24353,  2015,  1999,
         1996, 10629,  1029,  2064,  2017,  2425,  2065,  2122, 24353,  2015,
         2024,  2349,  2000,  3382,  2074,  2011,  2559,  1029,   102])"
1632,1,"['hypothesis', 'deviations', 'distribution', 'null hypothesis', 'data', 'test']", Testing for goodness of fit using chisquare,seg_57,"it is not obvious whether differences in the observed counts and the expected counts from the geometric distribution are significantly different. that is, it is not clear whether these deviations might be due to chance or whether they are so strong that the data provide convincing evidence against the null hypothesis. however, we can perform a chi-square test using the counts in figure 6.11.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2009,  2003,  2025,  5793,  3251,  5966,  1999,  1996,  5159,
         9294,  1998,  1996,  3517,  9294,  2013,  1996, 14965,  4353,  2024,
         6022,  2367,  1012,  2008,  2003,  1010,  2009,  2003,  2025,  3154,
         3251,  2122, 24353,  2015,  2453,  2022,  2349,  2000,  3382,  2030,
         3251,  2027,  2024,  2061,  2844,  2008,  1996,  2951,  3073, 13359,
         3350,  2114,  1996, 19701, 10744,  1012,  2174,  1010,  2057,  2064,
         4685,  1037,  9610,  1011,  2675,  3231,  2478,  1996,  9294,  1999,
         3275,  1020,  1012,  2340,  1012,   102])"
1633,1,"['test statistic', 'geometric distribution', 'data', 'set', 'distribution', 'geometric', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"figure 6.11 provides a set of count data for waiting times (o1 = 717, o2 = 369, ...) and expected counts under the geometric distribution (e1 = 743, e2 = 338, ...). compute the chi-square test statistic, x2.37",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  2340,  3640,  1037,  2275,  1997,  4175,
         2951,  2005,  3403,  2335,  1006,  1051,  2487,  1027,  6390,  2581,
         1010,  1051,  2475,  1027,  4029,  2683,  1010,  1012,  1012,  1012,
         1007,  1998,  3517,  9294,  2104,  1996, 14965,  4353,  1006,  1041,
         2487,  1027,  6356,  2509,  1010,  1041,  2475,  1027, 27908,  1010,
         1012,  1012,  1012,  1007,  1012, 24134,  1996,  9610,  1011,  2675,
         3231, 28093,  6553,  1010,  1060,  2475,  1012,  4261,   102])"
1634,1,"['distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,"because the expected counts are all at least 5, we can safely apply the chi-square distribution to x2. however, how many degrees of freedom should we use?38",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([ 101, 2138, 1996, 3517, 9294, 2024, 2035, 2012, 2560, 1019, 1010, 2057,
        2064, 9689, 6611, 1996, 9610, 1011, 2675, 4353, 2000, 1060, 2475, 1012,
        2174, 1010, 2129, 2116, 5445, 1997, 4071, 2323, 2057, 2224, 1029, 4229,
         102])"
1635,1,"['test statistic', 'geometric', 'information', 'distribution', 'model', 'statistic', 'test']", Testing for goodness of fit using chisquare,seg_57,"if the observed counts follow the geometric model, then the chi-square test statistic x2 = 4.61 would closely follow a chi-square distribution with df = 6. using this information, compute a p-value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2065,  1996,  5159,  9294,  3582,  1996, 14965,  2944,  1010,
         2059,  1996,  9610,  1011,  2675,  3231, 28093,  6553,  1060,  2475,
         1027,  1018,  1012,  6079,  2052,  4876,  3582,  1037,  9610,  1011,
         2675,  4353,  2007,  1040,  2546,  1027,  1020,  1012,  2478,  2023,
         2592,  1010, 24134,  1037,  1052,  1011,  3643,  1012,   102])"
1636,1,"['geometric distribution', 'distribution', 'geometric', 'data', 'independent']", Testing for goodness of fit using chisquare,seg_57,"figure 6.13 shows the chi-square distribution, cutoff, and the shaded p-value. using software, we can find the p-value: 0.5951. ultimately, we do not have sufficient evidence to reject the notion that the wait times follow a geometric distribution for the last 10 years of data for the s&p500, i.e. we cannot reject the notion that trading days are independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  2410,  3065,  1996,  9610,  1011,  2675,
         4353,  1010,  3013,  7245,  1010,  1998,  1996, 25273,  1052,  1011,
         3643,  1012,  2478,  4007,  1010,  2057,  2064,  2424,  1996,  1052,
         1011,  3643,  1024,  1014,  1012,  5354, 22203,  1012,  4821,  1010,
         2057,  2079,  2025,  2031,  7182,  3350,  2000, 15454,  1996,  9366,
         2008,  1996,  3524,  2335,  3582,  1037, 14965,  4353,  2005,  1996,
         2197,  2184,  2086,  1997,  2951,  2005,  1996,  1055,  1004,  1052,
        29345,  1010,  1045,  1012,  1041,  1012,  2057,  3685, 15454,  1996,
         9366,  2008,  6202,  2420,  2024,  2981,  1012,   102])"
1637,0,[], Testing for goodness of fit using chisquare,seg_57,area representing the p−value 0 5 10 15 20 25,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2181,  5052,  1996,  1052, 22543, 10175,  5657,  1014,  1019,
         2184,  2321,  2322,  2423,   102])"
1638,1,"['distribution', 'degrees of freedom']", Testing for goodness of fit using chisquare,seg_57,figure 6.13: chi-square distribution with 6 degrees of freedom. the p-value for the stock analysis is shaded.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  3275,  1020,  1012,  2410,  1024,  9610,  1011,  2675,  4353,
         2007,  1020,  5445,  1997,  4071,  1012,  1996,  1052,  1011,  3643,
         2005,  1996,  4518,  4106,  2003, 25273,  1012,   102])"
1639,1,"['null hypothesis', 'data', 'hypothesis', 'independent']", Testing for goodness of fit using chisquare,seg_57,"in example 6.36, we did not reject the null hypothesis that the trading days are independent during the last 10 of data. why is this so important?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  1999,  2742,  1020,  1012,  4029,  1010,  2057,  2106,  2025,
        15454,  1996, 19701, 10744,  2008,  1996,  6202,  2420,  2024,  2981,
         2076,  1996,  2197,  2184,  1997,  2951,  1012,  2339,  2003,  2023,
         2061,  2590,  1029,   102])"
1640,1,['dependence'], Testing for goodness of fit using chisquare,seg_57,"it may be tempting to think the market is “due” for an up day if there have been several consecutive days where it has been down. however, we haven’t found strong evidence that there’s any such property where the market is “due” for a correction. at the very least, the analysis suggests any dependence between days is very weak.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5604,  2005, 15003,  1997,  4906,  2478,  9610,  2015, 16211,  2890])","tensor([  101,  2009,  2089,  2022, 23421,  2000,  2228,  1996,  3006,  2003,
         1523,  2349,  1524,  2005,  2019,  2039,  2154,  2065,  2045,  2031,
         2042,  2195,  5486,  2420,  2073,  2009,  2038,  2042,  2091,  1012,
         2174,  1010,  2057,  4033,  1521,  1056,  2179,  2844,  3350,  2008,
         2045,  1521,  1055,  2151,  2107,  3200,  2073,  1996,  3006,  2003,
         1523,  2349,  1524,  2005,  1037, 18140,  1012,  2012,  1996,  2200,
         2560,  1010,  1996,  4106,  6083,  2151, 18642,  2090,  2420,  2003,
         2200,  5410,  1012,   102])"
1641,0,[], Testing for independence in twoway tables,seg_59,"we all buy used products – cars, computers, textbooks, and so on – and we sometimes assume the sellers of those products will be forthright about any underlying problems with what they’re selling. this is not something we should take for granted. researchers recruited 219 participants in a study where they would sell a used ipod40 that was known to have frozen twice in the past. the participants were incentivized to get as much money as they could for the ipod since they would receive a 5% cut of the sale on top of $10 for participating. the researchers wanted to understand what types of questions would elicit the seller to disclose the freezing issue.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2057,  2035,  4965,  2109,  3688,  1516,  3765,  1010,  7588,
         1010, 18841,  1010,  1998,  2061,  2006,  1516,  1998,  2057,  2823,
         7868,  1996, 19041,  1997,  2216,  3688,  2097,  2022,  5743, 15950,
         2055,  2151, 10318,  3471,  2007,  2054,  2027,  1521,  2128,  4855,
         1012,  2023,  2003,  2025,  2242,  2057,  2323,  2202,  2005,  4379,
         1012,  6950,  8733, 20636,  6818,  1999,  1037,  2817,  2073,  2027,
         2052,  5271,  1037,  2109, 26322, 12740,  2008,  2001,  2124,  2000,
         2031,  7708,  3807,  1999,  1996,  2627,  1012,  1996,  6818,  2020,
         4297,  4765, 12848,  3550,  2000,  2131,  2004,  2172,  2769,  2004,
         2027,  2071,  2005,  1996, 26322,  2144,  2027,  2052,  4374,  1037,
         1019,  1003,  3013,  1997,  1996,  5096,  2006,  2327,  1997,  1002,
         2184,  2005,  8019,  1012,  1996,  6950,  2359,  2000,  3305,  2054,
         4127,  1997,  3980,  2052, 12005, 26243,  1996, 14939,  2000, 26056,
         1996, 12809,  3277,  1012,   102])"
1642,1,['likelihood'], Testing for independence in twoway tables,seg_59,"unbeknownst to the participants who were the sellers in the study, the buyers were collaborating with the researchers to evaluate the influence of different questions on the likelihood of getting the sellers to disclose the past issues with the ipod. the scripted buyers started with “okay, i guess i’m supposed to go first. so you’ve had the ipod for 2 years ...” and ended with one of three questions:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  4895, 24597, 19779, 23808,  2000,  1996,  6818,  2040,  2020,
         1996, 19041,  1999,  1996,  2817,  1010,  1996, 17394,  2020, 20295,
         2007,  1996,  6950,  2000, 16157,  1996,  3747,  1997,  2367,  3980,
         2006,  1996, 16593,  1997,  2893,  1996, 19041,  2000, 26056,  1996,
         2627,  3314,  2007,  1996, 26322,  1012,  1996, 22892, 17394,  2318,
         2007,  1523,  3100,  1010,  1045,  3984,  1045,  1521,  1049,  4011,
         2000,  2175,  2034,  1012,  2061,  2017,  1521,  2310,  2018,  1996,
        26322,  2005,  1016,  2086,  1012,  1012,  1012,  1524,  1998,  3092,
         2007,  2028,  1997,  2093,  3980,  1024,   102])"
1643,0,[], Testing for independence in twoway tables,seg_59,• general: what can you tell me about it?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 1528, 2236, 1024, 2054, 2064, 2017, 2425, 2033, 2055, 2009, 1029,
         102])"
1644,0,[], Testing for independence in twoway tables,seg_59,"• positive assumption: it doesn’t have any problems, does it?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1528,  3893, 11213,  1024,  2009,  2987,  1521,  1056,  2031,
         2151,  3471,  1010,  2515,  2009,  1029,   102])"
1645,0,[], Testing for independence in twoway tables,seg_59,• negative assumption: what problems does it have?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1528,  4997, 11213,  1024,  2054,  3471,  2515,  2009,  2031,
         1029,   102])"
1646,1,"['results', 'treatment', 'response', 'data']", Testing for independence in twoway tables,seg_59,"the question is the treatment given to the sellers, and the response is whether the question prompted them to disclose the freezing issue with the ipod. the results are shown in figure 6.14, and the data suggest that asking the, what problems does it have?, was the most effective at getting the seller to disclose the past freezing issues. however, you should also be asking yourself: could we see these results due to chance alone, or is this in fact evidence that some questions are more effective for getting at the truth?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1996,  3160,  2003,  1996,  3949,  2445,  2000,  1996, 19041,
         1010,  1998,  1996,  3433,  2003,  3251,  1996,  3160,  9469,  2068,
         2000, 26056,  1996, 12809,  3277,  2007,  1996, 26322,  1012,  1996,
         3463,  2024,  3491,  1999,  3275,  1020,  1012,  2403,  1010,  1998,
         1996,  2951,  6592,  2008,  4851,  1996,  1010,  2054,  3471,  2515,
         2009,  2031,  1029,  1010,  2001,  1996,  2087,  4621,  2012,  2893,
         1996, 14939,  2000, 26056,  1996,  2627, 12809,  3314,  1012,  2174,
         1010,  2017,  2323,  2036,  2022,  4851,  4426,  1024,  2071,  2057,
         2156,  2122,  3463,  2349,  2000,  3382,  2894,  1010,  2030,  2003,
         2023,  1999,  2755,  3350,  2008,  2070,  3980,  2024,  2062,  4621,
         2005,  2893,  2012,  1996,  3606,  1029,   102])"
1647,0,[], Testing for independence in twoway tables,seg_59,general positive assumption negative assumption total disclose problem 2 23 36 61 hide problem 71 50 37 158 total 73 73 73 219,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2236,  3893, 11213,  4997, 11213,  2561, 26056,  3291,  1016,
         2603,  4029,  6079,  5342,  3291,  6390,  2753,  4261, 17696,  2561,
         6421,  6421,  6421, 20636,   102])"
1648,0,[], Testing for independence in twoway tables,seg_59,"figure 6.14: summary of the ipod study, where a question was posed to the study participant who acted",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  3275,  1020,  1012,  2403,  1024, 12654,  1997,  1996, 26322,
         2817,  1010,  2073,  1037,  3160,  2001, 13686,  2000,  1996,  2817,
        13180,  2040,  6051,   102])"
1649,1,"['table', 'outcomes', 'outcome', 'dependent', 'variables', 'combinations', 'variable', 'independent']", Testing for independence in twoway tables,seg_59,"a one-way table describes counts for each outcome in a single variable. a two-way table describes counts for combinations of outcomes for two variables. when we consider a two-way table, we often would like to know, are these variables related in any way? that is, are they dependent (versus independent)?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1037,  2028,  1011,  2126,  2795,  5577,  9294,  2005,  2169,
         9560,  1999,  1037,  2309,  8023,  1012,  1037,  2048,  1011,  2126,
         2795,  5577,  9294,  2005, 14930,  1997, 13105,  2005,  2048, 10857,
         1012,  2043,  2057,  5136,  1037,  2048,  1011,  2126,  2795,  1010,
         2057,  2411,  2052,  2066,  2000,  2113,  1010,  2024,  2122, 10857,
         3141,  1999,  2151,  2126,  1029,  2008,  2003,  1010,  2024,  2027,
         7790,  1006,  6431,  2981,  1007,  1029,   102])"
1650,1,"['hypothesis', 'independent', 'experiment', 'hypothesis test', 'success', 'test']", Testing for independence in twoway tables,seg_59,"the hypothesis test for the ipod experiment is really about assessing whether there is statistically significant evidence that the success each question had on getting the participant to disclose the problem with the ipod. in other words, the goal is to check whether the buyer’s question was independent of whether the seller disclosed a problem.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1996, 10744,  3231,  2005,  1996, 26322,  7551,  2003,  2428,
         2055, 20077,  3251,  2045,  2003,  7778,  2135,  3278,  3350,  2008,
         1996,  3112,  2169,  3160,  2018,  2006,  2893,  1996, 13180,  2000,
        26056,  1996,  3291,  2007,  1996, 26322,  1012,  1999,  2060,  2616,
         1010,  1996,  3125,  2003,  2000,  4638,  3251,  1996, 17634,  1521,
         1055,  3160,  2001,  2981,  1997,  3251,  1996, 14939, 21362,  1037,
         3291,  1012,   102])"
1651,1,['tables'], Testing for independence in twoway tables,seg_59,6.4.1 expected counts in two-way tables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 1020, 1012, 1018, 1012, 1015, 3517, 9294, 1999, 2048, 1011, 2126,
        7251,  102])"
1652,1,"['estimated', 'tables', 'table']", Testing for independence in twoway tables,seg_59,"like with one-way tables, we will need to compute estimated counts for each cell in a two-way table.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2066,  2007,  2028,  1011,  2126,  7251,  1010,  2057,  2097,
         2342,  2000, 24134,  4358,  9294,  2005,  2169,  3526,  1999,  1037,
         2048,  1011,  2126,  2795,  1012,   102])"
1653,1,['experiment'], Testing for independence in twoway tables,seg_59,"from the experiment, we can compute the proportion of all sellers who disclosed the freezing problem as 61/219 = 0.2785. if there really is no difference among the questions and 27.85% of sellers were going to disclose the freezing problem no matter the question that was put to them, how many of the 73 people in the general group would we have expected to disclose the freezing problem?",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2013,  1996,  7551,  1010,  2057,  2064, 24134,  1996, 10817,
         1997,  2035, 19041,  2040, 21362,  1996, 12809,  3291,  2004,  6079,
         1013, 20636,  1027,  1014,  1012, 24709,  2629,  1012,  2065,  2045,
         2428,  2003,  2053,  4489,  2426,  1996,  3980,  1998,  2676,  1012,
         5594,  1003,  1997, 19041,  2020,  2183,  2000, 26056,  1996, 12809,
         3291,  2053,  3043,  1996,  3160,  2008,  2001,  2404,  2000,  2068,
         1010,  2129,  2116,  1997,  1996,  6421,  2111,  1999,  1996,  2236,
         2177,  2052,  2057,  2031,  3517,  2000, 26056,  1996, 12809,  3291,
         1029,   102])"
1654,1,"['vary', 'variation']", Testing for independence in twoway tables,seg_59,"we would predict that 0.2785×73 = 20.33 sellers would disclose the problem. obviously we observed fewer than this, though it is not yet clear if that is due to chance variation or whether that is because the questions vary in how effective they are at getting to the truth.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2057,  2052, 16014,  2008,  1014,  1012, 24709,  2629, 26306,
         2581,  2509,  1027,  2322,  1012,  3943, 19041,  2052, 26056,  1996,
         3291,  1012,  5525,  2057,  5159,  8491,  2084,  2023,  1010,  2295,
         2009,  2003,  2025,  2664,  3154,  2065,  2008,  2003,  2349,  2000,
         3382,  8386,  2030,  3251,  2008,  2003,  2138,  1996,  3980,  8137,
         1999,  2129,  4621,  2027,  2024,  2012,  2893,  2000,  1996,  3606,
         1012,   102])"
1655,0,[], Testing for independence in twoway tables,seg_59,"if the questions were actually equally effective, meaning about 27.85% of respondents would disclose the freezing issue regardless of what question they were asked, about how many sellers would we expect to hide the freezing problem from the positive assumption group?41",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2065,  1996,  3980,  2020,  2941,  8053,  4621,  1010,  3574,
         2055,  2676,  1012,  5594,  1003,  1997, 25094,  2052, 26056,  1996,
        12809,  3277,  7539,  1997,  2054,  3160,  2027,  2020,  2356,  1010,
         2055,  2129,  2116, 19041,  2052,  2057,  5987,  2000,  5342,  1996,
        12809,  3291,  2013,  1996,  3893, 11213,  2177,  1029,  4601,   102])"
1656,0,[], Testing for independence in twoway tables,seg_59,"we can compute the expected number of sellers who we would expect to disclose or hide the freezing issue for all groups, if the questions had no impact on what they disclosed, using the same strategy employed in example 6.38 and guided practice 6.39. these expected counts were used to construct figure 6.15, which is the same as figure 6.14, except now the expected counts have been added in parentheses.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2057,  2064, 24134,  1996,  3517,  2193,  1997, 19041,  2040,
         2057,  2052,  5987,  2000, 26056,  2030,  5342,  1996, 12809,  3277,
         2005,  2035,  2967,  1010,  2065,  1996,  3980,  2018,  2053,  4254,
         2006,  2054,  2027, 21362,  1010,  2478,  1996,  2168,  5656,  4846,
         1999,  2742,  1020,  1012,  4229,  1998,  8546,  3218,  1020,  1012,
         4464,  1012,  2122,  3517,  9294,  2020,  2109,  2000,  9570,  3275,
         1020,  1012,  2321,  1010,  2029,  2003,  1996,  2168,  2004,  3275,
         1020,  1012,  2403,  1010,  3272,  2085,  1996,  3517,  9294,  2031,
         2042,  2794,  1999, 27393,  1012,   102])"
1657,0,[], Testing for independence in twoway tables,seg_59,figure 6.15: the observed counts and the (expected counts).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 3275, 1020, 1012, 2321, 1024, 1996, 5159, 9294, 1998, 1996, 1006,
        3517, 9294, 1007, 1012,  102])"
1658,1,"['row totals', 'table', 'column totals']", Testing for independence in twoway tables,seg_59,"the examples and exercises above provided some help in computing expected counts. in general, expected counts for a two-way table may be computed using the row totals, column totals, and the table total. for instance, if there was no difference between the groups, then about 27.85% of each column should be in the first row:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1996,  4973,  1998, 11110,  2682,  3024,  2070,  2393,  1999,
         9798,  3517,  9294,  1012,  1999,  2236,  1010,  3517,  9294,  2005,
         1037,  2048,  1011,  2126,  2795,  2089,  2022, 24806,  2478,  1996,
         5216, 21948,  1010,  5930, 21948,  1010,  1998,  1996,  2795,  2561,
         1012,  2005,  6013,  1010,  2065,  2045,  2001,  2053,  4489,  2090,
         1996,  2967,  1010,  2059,  2055,  2676,  1012,  5594,  1003,  1997,
         2169,  5930,  2323,  2022,  1999,  1996,  2034,  5216,  1024,   102])"
1659,0,[], Testing for independence in twoway tables,seg_59,looking back to how 0.2785 was computed – as the fraction of sellers who disclosed the freezing issue (158/219) – these three expected counts could have been computed as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2559,  2067,  2000,  2129,  1014,  1012, 24709,  2629,  2001,
        24806,  1516,  2004,  1996, 12884,  1997, 19041,  2040, 21362,  1996,
        12809,  3277,  1006, 17696,  1013, 20636,  1007,  1516,  2122,  2093,
         3517,  9294,  2071,  2031,  2042, 24806,  2004,   102])"
1660,1,"['table', 'association', 'variable', 'test']", Testing for independence in twoway tables,seg_59,this leads us to a general formula for computing expected counts in a two-way table when we would like to test whether there is strong evidence of an association between the column variable and row variable.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 1., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 2023, 5260, 2149, 2000, 1037, 2236, 5675, 2005, 9798, 3517, 9294,
        1999, 1037, 2048, 1011, 2126, 2795, 2043, 2057, 2052, 2066, 2000, 3231,
        3251, 2045, 2003, 2844, 3350, 1997, 2019, 2523, 2090, 1996, 5930, 8023,
        1998, 5216, 8023, 1012,  102])"
1661,0,[], Testing for independence in twoway tables,seg_59,"to identify the expected count for the ith row and jth column, compute",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2000,  6709,  1996,  3517,  4175,  2005,  1996,  2009,  2232,
         5216,  1998,  1046,  2705,  5930,  1010, 24134,   102])"
1662,1,['table'], Testing for independence in twoway tables,seg_59,"(row i total)× (column j total) expected countrow i, col j = table total",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1006,  5216,  1045,  2561,  1007,  1095,  1006,  5930,  1046,
         2561,  1007,  3517,  4175, 10524,  1045,  1010,  8902,  1046,  1027,
         2795,  2561,   102])"
1663,1,"['tables', 'test']", Testing for independence in twoway tables,seg_59,6.4.2 the chi-square test for two-way tables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 1020, 1012, 1018, 1012, 1016, 1996, 9610, 1011, 2675, 3231, 2005,
        2048, 1011, 2126, 7251,  102])"
1664,1,"['test statistic', 'table', 'statistic', 'test']", Testing for independence in twoway tables,seg_59,"the chi-square test statistic for a two-way table is found the same way it is found for a one-way table. for each table count, compute",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1996,  9610,  1011,  2675,  3231, 28093,  6553,  2005,  1037,
         2048,  1011,  2126,  2795,  2003,  2179,  1996,  2168,  2126,  2009,
         2003,  2179,  2005,  1037,  2028,  1011,  2126,  2795,  1012,  2005,
         2169,  2795,  4175,  1010, 24134,   102])"
1665,0,[], Testing for independence in twoway tables,seg_59,(observed count − expected count)2 general formula expected count,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 1006, 5159, 4175, 1597, 3517, 4175, 1007, 1016, 2236, 5675, 3517,
        4175,  102])"
1666,1,"['test statistic', 'statistic', 'test']", Testing for independence in twoway tables,seg_59,adding the computed value for each cell gives the chi-square test statistic x2:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  5815,  1996, 24806,  3643,  2005,  2169,  3526,  3957,  1996,
         9610,  1011,  2675,  3231, 28093,  6553,  1060,  2475,  1024,   102])"
1667,1,"['test statistic', 'distribution', 'degrees of freedom', 'statistic', 'test']", Testing for independence in twoway tables,seg_59,"just like before, this test statistic follows a chi-square distribution. however, the degrees of freedom",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 1., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2074,  2066,  2077,  1010,  2023,  3231, 28093,  6553,  4076,
         1037,  9610,  1011,  2675,  4353,  1012,  2174,  1010,  1996,  5445,
         1997,  4071,   102])"
1668,1,"['tables', 'degrees of freedom', 'table']", Testing for independence in twoway tables,seg_59,"42 are computed a little differently for a two-way table. for two way tables, the degrees of freedom is equal to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  4413,  2024, 24806,  1037,  2210, 11543,  2005,  1037,  2048,
         1011,  2126,  2795,  1012,  2005,  2048,  2126,  7251,  1010,  1996,
         5445,  1997,  4071,  2003,  5020,  2000,   102])"
1669,0,[], Testing for independence in twoway tables,seg_59,df = (number of rows minus 1)× (number of columns minus 1),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1040,  2546,  1027,  1006,  2193,  1997, 10281, 15718,  1015,
         1007,  1095,  1006,  2193,  1997,  7753, 15718,  1015,  1007,   102])"
1670,1,"['parameter', 'degrees of freedom']", Testing for independence in twoway tables,seg_59,"in our example, the degrees of freedom parameter is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1999,  2256,  2742,  1010,  1996,  5445,  1997,  4071, 16381,
         2003,   102])"
1671,1,"['test statistic', 'information', 'degrees of freedom', 'hypothesis', 'experiment', 'distribution', 'null hypothesis', 'statistic', 'test']", Testing for independence in twoway tables,seg_59,"if the null hypothesis is true (i.e. the questions had no impact on the sellers in the experiment), then the test statistic x2 = 40.13 closely follows a chi-square distribution with 2 degrees of freedom. using this information, we can compute the p-value for the test, which is depicted in figure 6.16.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2065,  1996, 19701, 10744,  2003,  2995,  1006,  1045,  1012,
         1041,  1012,  1996,  3980,  2018,  2053,  4254,  2006,  1996, 19041,
         1999,  1996,  7551,  1007,  1010,  2059,  1996,  3231, 28093,  6553,
         1060,  2475,  1027,  2871,  1012,  2410,  4876,  4076,  1037,  9610,
         1011,  2675,  4353,  2007,  1016,  5445,  1997,  4071,  1012,  2478,
         2023,  2592,  1010,  2057,  2064, 24134,  1996,  1052,  1011,  3643,
         2005,  1996,  3231,  1010,  2029,  2003,  8212,  1999,  3275,  1020,
         1012,  2385,  1012,   102])"
1672,1,"['table', 'test']", Testing for independence in twoway tables,seg_59,"when applying the chi-square test to a two-way table, we use",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2043, 11243,  1996,  9610,  1011,  2675,  3231,  2000,  1037,
         2048,  1011,  2126,  2795,  1010,  2057,  2224,   102])"
1673,1,['table'], Testing for independence in twoway tables,seg_59,where r is the number of rows in the table and c is the number of columns.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2073,  1054,  2003,  1996,  2193,  1997, 10281,  1999,  1996,
         2795,  1998,  1039,  2003,  1996,  2193,  1997,  7753,  1012,   102])"
1674,1,"['tables', 'contingency tables']", Testing for independence in twoway tables,seg_59,"when analyzing 2-by-2 contingency tables, one guideline is to use the two-proportion methods introduced in section 6.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2043, 20253,  1016,  1011,  2011,  1011,  1016,  9530,  3436,
        11916,  7251,  1010,  2028,  5009,  4179,  2003,  2000,  2224,  1996,
         2048,  1011, 10817,  4725,  3107,  1999,  2930,  1020,  1012,  1016,
         1012,   102])"
1675,0,[], Testing for independence in twoway tables,seg_59,tail area (1 / 500 million) is too small to see 0 10 20 30 40 50,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 5725, 2181, 1006, 1015, 1013, 3156, 2454, 1007, 2003, 2205, 2235,
        2000, 2156, 1014, 2184, 2322, 2382, 2871, 2753,  102])"
1676,0,[], Testing for independence in twoway tables,seg_59,figure 6.16: visualization of the p-value for x2 = 40.13 when df = 2.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 3275, 1020, 1012, 2385, 1024, 5107, 3989, 1997, 1996, 1052, 1011,
        3643, 2005, 1060, 2475, 1027, 2871, 1012, 2410, 2043, 1040, 2546, 1027,
        1016, 1012,  102])"
1677,1,['likelihood'], Testing for independence in twoway tables,seg_59,find the p-value and draw a conclusion about whether the question affects the sellers likelihood of reporting the freezing problem.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2424,  1996,  1052,  1011,  3643,  1998,  4009,  1037,  7091,
         2055,  3251,  1996,  3160, 13531,  1996, 19041, 16593,  1997,  7316,
         1996, 12809,  3291,  1012,   102])"
1678,1,"['tail', 'significance level', 'table', 'degrees of freedom', 'hypothesis', 'level', 'likelihood', 'distribution', 'null hypothesis', 'significance', 'data']", Testing for independence in twoway tables,seg_59,"using a computer, we can compute a very precise value for the tail area above x2 = 40.13 for a chi-square distribution with 2 degrees of freedom: 0.000000002. (if using the table in appendix c.3, we would identify the p-value is smaller than 0.001.) using a significance level of α = 0.05, the null hypothesis is rejected since the p-value is smaller. that is, the data provide convincing evidence that the question asked did affect a seller’s likelihood to tell the truth about problems with the ipod.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2478,  1037,  3274,  1010,  2057,  2064, 24134,  1037,  2200,
        10480,  3643,  2005,  1996,  5725,  2181,  2682,  1060,  2475,  1027,
         2871,  1012,  2410,  2005,  1037,  9610,  1011,  2675,  4353,  2007,
         1016,  5445,  1997,  4071,  1024,  1014,  1012,  2199,  8889,  8889,
         2692,  2475,  1012,  1006,  2065,  2478,  1996,  2795,  1999, 22524,
         1039,  1012,  1017,  1010,  2057,  2052,  6709,  1996,  1052,  1011,
         3643,  2003,  3760,  2084,  1014,  1012, 25604,  1012,  1007,  2478,
         1037,  7784,  2504,  1997,  1155,  1027,  1014,  1012,  5709,  1010,
         1996, 19701, 10744,  2003,  5837,  2144,  1996,  1052,  1011,  3643,
         2003,  3760,  1012,  2008,  2003,  1010,  1996,  2951,  3073, 13359,
         3350,  2008,  1996,  3160,  2356,  2106,  7461,  1037, 14939,  1521,
         1055, 16593,  2000,  2425,  1996,  3606,  2055,  3471,  2007,  1996,
        26322,  1012,   102])"
1679,1,"['hypotheses', 'failure', 'treatment', 'outcome', 'control', 'results', 'experiment', 'evaluating', 'success', 'test']", Testing for independence in twoway tables,seg_59,"figure 6.17 summarizes the results of an experiment evaluating three treatments for type 2 diabetes in patients aged 10-17 who were being treated with metformin. the three treatments considered were continued treatment with metformin (met), treatment with metformin combined with rosiglitazone (rosi), or a lifestyle intervention program. each patient had a primary outcome, which was either lacked glycemic control (failure) or did not lack that control (success). what are appropriate hypotheses for this test?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 1., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  3275,  1020,  1012,  2459,  7680,  7849, 10057,  1996,  3463,
         1997,  2019,  7551, 23208,  2093, 13441,  2005,  2828,  1016, 14671,
         1999,  5022,  4793,  2184,  1011,  2459,  2040,  2020,  2108,  5845,
         2007,  2777, 14192,  2378,  1012,  1996,  2093, 13441,  2641,  2020,
         2506,  3949,  2007,  2777, 14192,  2378,  1006,  2777,  1007,  1010,
         3949,  2007,  2777, 14192,  2378,  4117,  2007, 20996,  5332, 25394,
         2696, 15975,  1006, 20996,  5332,  1007,  1010,  2030,  1037,  9580,
         8830,  2565,  1012,  2169,  5776,  2018,  1037,  3078,  9560,  1010,
         2029,  2001,  2593, 10858,  1043,  2135,  3401,  7712,  2491,  1006,
         4945,  1007,  2030,  2106,  2025,  3768,  2008,  2491,  1006,  3112,
         1007,  1012,  2054,  2024,  6413,  1044, 22571, 14573, 23072,  2005,
         2023,  3231,  1029,   102])"
1680,0,[], Testing for independence in twoway tables,seg_59,h0: there is no difference in the effectiveness of the three treatments.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1044,  2692,  1024,  2045,  2003,  2053,  4489,  1999,  1996,
        12353,  1997,  1996,  2093, 13441,  1012,   102])"
1681,0,[], Testing for independence in twoway tables,seg_59,"ha: there is some difference in effectiveness between the three treatments, e.g. perhaps the rosi",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  5292,  1024,  2045,  2003,  2070,  4489,  1999, 12353,  2090,
         1996,  2093, 13441,  1010,  1041,  1012,  1043,  1012,  3383,  1996,
        20996,  5332,   102])"
1682,0,[], Testing for independence in twoway tables,seg_59,treatment performed better than lifestyle.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([ 101, 3949, 2864, 2488, 2084, 9580, 1012,  102])"
1683,1,['success'], Testing for independence in twoway tables,seg_59,failure success total lifestyle 109 125 234 met 120 112 232 rosi 90 143 233 total 319 380 699,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  4945,  3112,  2561,  9580, 11518,  8732, 22018,  2777,  6036,
        11176, 20666, 20996,  5332,  3938, 16065, 22115,  2561, 26499, 17014,
         6353,  2683,   102])"
1684,1,['results'], Testing for independence in twoway tables,seg_59,figure 6.17: results for the type 2 diabetes study.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  3275,  1020,  1012,  2459,  1024,  3463,  2005,  1996,  2828,
         1016, 14671,  2817,  1012,   102])"
1685,1,"['hypotheses', 'table', 'expected values', 'test']", Testing for independence in twoway tables,seg_59,"a chi-square test for a two-way table may be used to test the hypotheses in example 6.41. as a first step, compute the expected values for each of the six table cells.43",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  1037,  9610,  1011,  2675,  3231,  2005,  1037,  2048,  1011,
         2126,  2795,  2089,  2022,  2109,  2000,  3231,  1996,  1044, 22571,
        14573, 23072,  1999,  2742,  1020,  1012,  4601,  1012,  2004,  1037,
         2034,  3357,  1010, 24134,  1996,  3517,  5300,  2005,  2169,  1997,
         1996,  2416,  2795,  4442,  1012,  4724,   102])"
1686,1,"['test statistic', 'statistic', 'data', 'test']", Testing for independence in twoway tables,seg_59,44 compute the chi-square test statistic for the data in figure 6.17.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  4008, 24134,  1996,  9610,  1011,  2675,  3231, 28093,  6553,
         2005,  1996,  2951,  1999,  3275,  1020,  1012,  2459,  1012,   102])"
1687,1,"['significance level', 'degrees of freedom', 'hypothesis', 'level', 'null hypothesis', 'significance', 'test']", Testing for independence in twoway tables,seg_59,"because there are 3 rows and 2 columns, the degrees of freedom for the test is df = (3−1)×(2−1) = 2. use x2 = 8.16, df = 2, evaluate whether to reject the null hypothesis using a significance level",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0.])","tensor([5604, 2005, 4336, 1999, 2048, 4576, 7251])","tensor([  101,  2138,  2045,  2024,  1017, 10281,  1998,  1016,  7753,  1010,
         1996,  5445,  1997,  4071,  2005,  1996,  3231,  2003,  1040,  2546,
         1027,  1006,  1017, 27944,  1007,  1095,  1006,  1016, 27944,  1007,
         1027,  1016,  1012,  2224,  1060,  2475,  1027,  1022,  1012,  2385,
         1010,  1040,  2546,  1027,  1016,  1010, 16157,  3251,  2000, 15454,
         1996, 19701, 10744,  2478,  1037,  7784,  2504,   102])"
1688,1,"['point estimate', 'confidence', 'paired', 'normal distribution', 'paired data', 'estimate', 'normal', 'statistical', 'point estimates', 'data', 'statistic', 'case', 'test', 'test statistic', 'hypotheses', 'anova', 'confidence intervals', 'estimates', 'distributions', 'sample', 'statistical inference', 'intervals', 'distribution']",Chapter  Inference for numerical data,seg_61,"7.1 one-sample means with the t-distribution 7.2 paired data 7.3 difference of two means 7.4 power calculations for a difference of means 7.5 comparing many means with anova chapter 5 introduced a framework for statistical inference based on confidence intervals and hypotheses using the normal distribution for sample proportions. in this chapter, we encounter several new point estimates and a couple new distributions. in each case, the inference ideas remain the same: determine which point estimate or test statistic is useful, identify an appropriate distribution for the point estimate or test statistic, and apply the ideas of inference. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3127, 28937,  2005, 15973,  2951])","tensor([  101,  1021,  1012,  1015,  2028,  1011,  7099,  2965,  2007,  1996,
         1056,  1011,  4353,  1021,  1012,  1016, 12739,  2951,  1021,  1012,
         1017,  4489,  1997,  2048,  2965,  1021,  1012,  1018,  2373, 16268,
         2005,  1037,  4489,  1997,  2965,  1021,  1012,  1019, 13599,  2116,
         2965,  2007,  2019,  7103,  3127,  1019,  3107,  1037,  7705,  2005,
         7778, 28937,  2241,  2006,  7023, 14025,  1998,  1044, 22571, 14573,
        23072,  2478,  1996,  3671,  4353,  2005,  7099, 19173,  1012,  1999,
         2023,  3127,  1010,  2057,  8087,  2195,  2047,  2391, 10035,  1998,
         1037,  3232,  2047, 20611,  1012,  1999,  2169,  2553,  1010,  1996,
        28937,  4784,  3961,  1996,  2168,  1024,  5646,  2029,  2391, 10197,
         2030,  3231, 28093,  6553,  2003,  6179,  1010,  6709,  2019,  6413,
         4353,  2005,  1996,  2391, 10197,  2030,  3231, 28093,  6553,  1010,
         1998,  6611,  1996,  4784,  1997, 28937,  1012,  2005,  6876,  1010,
        14816,  1010,  1998,  2060,  4219,  1010,  3531,  3942,  7479,  1012,
         2330, 18447,  3217,  1012,  8917,  1013,  9808,   102])"
1689,1,"['tests', 'confidence', 'mean', 'distribution', 'normal distribution', 'normal', 'model', 'hypothesis', 'confidence intervals', 'sample', 'intervals', 'hypothesis tests', 'sample mean']", Onesample means with the tdistribution,seg_63,"similar to how we can model the behavior of the sample proportion p̂ using a normal distribution, the sample mean x̄ can also be modeled using a normal distribution when certain conditions are met. however, we’ll soon learn that a new distribution, called the t-distribution, tends to be more useful when working with the sample mean. we’ll first learn about this new distribution, then we’ll use it to construct confidence intervals and conduct hypothesis tests for the mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2714,  2000,  2129,  2057,  2064,  2944,  1996,  5248,  1997,
         1996,  7099, 10817,  1052,  2478,  1037,  3671,  4353,  1010,  1996,
         7099,  2812,  1060,  2064,  2036,  2022, 14440,  2478,  1037,  3671,
         4353,  2043,  3056,  3785,  2024,  2777,  1012,  2174,  1010,  2057,
         1521,  2222,  2574,  4553,  2008,  1037,  2047,  4353,  1010,  2170,
         1996,  1056,  1011,  4353,  1010, 12102,  2000,  2022,  2062,  6179,
         2043,  2551,  2007,  1996,  7099,  2812,  1012,  2057,  1521,  2222,
         2034,  4553,  2055,  2023,  2047,  4353,  1010,  2059,  2057,  1521,
         2222,  2224,  2009,  2000,  9570,  7023, 14025,  1998,  6204, 10744,
         5852,  2005,  1996,  2812,  1012,   102])"
1690,1,"['sampling', 'sampling distribution', 'distribution']", Onesample means with the tdistribution,seg_63,7.1.1 the sampling distribution of x̄,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1021,  1012,  1015,  1012,  1015,  1996, 16227,  4353,  1997,
         1060,   102])"
1691,1,"['mean', 'error', 'deviation', 'normal distribution', 'population mean', 'population', 'sample', 'normal', 'standard deviation', 'standard', 'sample size', 'distribution', 'standard error', 'sample mean', 'population standard deviation']", Onesample means with the tdistribution,seg_63,"the sample mean tends to follow a normal distribution centered at the population mean, µ, when certain conditions are met. additionally, we can compute a standard error for the sample mean using the population standard deviation σ and the sample size n.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  7099,  2812, 12102,  2000,  3582,  1037,  3671,  4353,
         8857,  2012,  1996,  2313,  2812,  1010,  1085,  1010,  2043,  3056,
         3785,  2024,  2777,  1012,  5678,  1010,  2057,  2064, 24134,  1037,
         3115,  7561,  2005,  1996,  7099,  2812,  2478,  1996,  2313,  3115,
        24353,  1173,  1998,  1996,  7099,  2946,  1050,  1012,   102])"
1692,1,"['mean', 'deviation', 'observations', 'population', 'sample', 'sampling', 'normal', 'standard deviation', 'standard', 'distribution', 'sampling distribution', 'independent']", Onesample means with the tdistribution,seg_63,"when we collect a sufficiently large sample of n independent observations from a population with mean µ and standard deviation σ, the sampling distribution of x̄ will be nearly normal with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2043,  2057,  8145,  1037, 12949,  2312,  7099,  1997,  1050,
         2981,  9420,  2013,  1037,  2313,  2007,  2812,  1085,  1998,  3115,
        24353,  1173,  1010,  1996, 16227,  4353,  1997,  1060,  2097,  2022,
         3053,  3671,  2007,   102])"
1693,1,"['mean', 'standard', 'standard error', 'error']", Onesample means with the tdistribution,seg_63,σ mean = µ standard error (se) = √n,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 1173, 2812, 1027, 1085, 3115, 7561, 1006, 7367, 1007, 1027, 1600,
        2078,  102])"
1694,1,"['hypothesis', 'tests', 'intervals', 'hypothesis tests', 'confidence intervals', 'confidence']", Onesample means with the tdistribution,seg_63,"before diving into confidence intervals and hypothesis tests using x̄, we first need to cover two topics:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2077,  9404,  2046,  7023, 14025,  1998, 10744,  5852,  2478,
         1060,  1010,  2057,  2034,  2342,  2000,  3104,  2048,  7832,  1024,
          102])"
1695,1,"['normal distribution', 'normal', 'distribution']", Onesample means with the tdistribution,seg_63,"• when we modeled p̂ using the normal distribution, certain conditions had to be satisfied. the conditions for working with x̄ are a little more complex, and we’ll spend section 7.1.2 discussing how to check conditions for inference.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1528,  2043,  2057, 14440,  1052,  2478,  1996,  3671,  4353,
         1010,  3056,  3785,  2018,  2000,  2022,  8510,  1012,  1996,  3785,
         2005,  2551,  2007,  1060,  2024,  1037,  2210,  2062,  3375,  1010,
         1998,  2057,  1521,  2222,  5247,  2930,  1021,  1012,  1015,  1012,
         1016, 10537,  2129,  2000,  4638,  3785,  2005, 28937,  1012,   102])"
1696,1,"['deviation', 'estimation', 'estimate', 'population', 'dependent', 'standard deviation', 'standard', 'distribution', 'standard error', 'error', 'population standard deviation']", Onesample means with the tdistribution,seg_63,"• the standard error is dependent on the population standard deviation, σ. however, we rarely know σ, and instead we must estimate it. because this estimation is itself imperfect, we use a new distribution called the t-distribution to fix this problem, which we discuss in section 7.1.3.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1528,  1996,  3115,  7561,  2003,  7790,  2006,  1996,  2313,
         3115, 24353,  1010,  1173,  1012,  2174,  1010,  2057,  6524,  2113,
         1173,  1010,  1998,  2612,  2057,  2442, 10197,  2009,  1012,  2138,
         2023, 24155,  2003,  2993, 29238,  1010,  2057,  2224,  1037,  2047,
         4353,  2170,  1996,  1056,  1011,  4353,  2000,  8081,  2023,  3291,
         1010,  2029,  2057,  6848,  1999,  2930,  1021,  1012,  1015,  1012,
         1017,  1012,   102])"
1697,1,['evaluating'], Onesample means with the tdistribution,seg_63,7.1.2 evaluating the two conditions required for modeling x̄,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1021,  1012,  1015,  1012,  1016, 23208,  1996,  2048,  3785,
         3223,  2005, 11643,  1060,   102])"
1698,1,"['mean', 'sample', 'limit', 'central limit theorem', 'sample mean']", Onesample means with the tdistribution,seg_63,two conditions are required to apply the central limit theorem for a sample mean x̄:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2048, 3785, 2024, 3223, 2000, 6611, 1996, 2430, 5787, 9872, 2005,
        1037, 7099, 2812, 1060, 1024,  102])"
1699,1,"['observations', 'sample', 'independent']", Onesample means with the tdistribution,seg_63,"independence. the sample observations must be independent, the most common way to satisfy",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  4336,  1012,  1996,  7099,  9420,  2442,  2022,  2981,  1010,
         1996,  2087,  2691,  2126,  2000, 13225,   102])"
1700,1,"['random process', 'random sample', 'population', 'sample', 'random', 'independence', 'simple random sample', 'condition', 'process', 'data']", Onesample means with the tdistribution,seg_63,"this condition is when the sample is a simple random sample from the population. if the data come from a random process, analogous to rolling a die, this would also satisfy the independence condition.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2023,  4650,  2003,  2043,  1996,  7099,  2003,  1037,  3722,
         6721,  7099,  2013,  1996,  2313,  1012,  2065,  1996,  2951,  2272,
         2013,  1037,  6721,  2832,  1010, 19639,  2000,  5291,  1037,  3280,
         1010,  2023,  2052,  2036, 13225,  1996,  4336,  4650,  1012,   102])"
1701,1,"['sample', 'observations']", Onesample means with the tdistribution,seg_63,"normality. when a sample is small, we also require that the sample observations come from a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 3671, 3012, 1012, 2043, 1037, 7099, 2003, 2235, 1010, 2057, 2036,
        5478, 2008, 1996, 7099, 9420, 2272, 2013, 1037,  102])"
1702,1,"['sample', 'condition', 'population']", Onesample means with the tdistribution,seg_63,"normally distributed population. we can relax this condition more and more for larger and larger sample sizes. this condition is obviously vague, making it difficult to evaluate, so next we introduce a couple rules of thumb to make checking this condition easier.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  5373,  5500,  2313,  1012,  2057,  2064,  9483,  2023,  4650,
         2062,  1998,  2062,  2005,  3469,  1998,  3469,  7099, 10826,  1012,
         2023,  4650,  2003,  5525, 13727,  1010,  2437,  2009,  3697,  2000,
        16157,  1010,  2061,  2279,  2057,  8970,  1037,  3232,  3513,  1997,
         7639,  2000,  2191,  9361,  2023,  4650,  6082,  1012,   102])"
1703,1,"['condition', 'normality']", Onesample means with the tdistribution,seg_63,"there is no perfect way to check the normality condition, so instead we use two rules of thumb:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2045, 2003, 2053, 3819, 2126, 2000, 4638, 1996, 3671, 3012, 4650,
        1010, 2061, 2612, 2057, 2224, 2048, 3513, 1997, 7639, 1024,  102])"
1704,1,"['normal distribution', 'sample', 'normal', 'sample size', 'condition', 'outliers', 'distribution', 'data']", Onesample means with the tdistribution,seg_63,"n < 30: if the sample size n is less than 30 and there are no clear outliers in the data, then we typically assume the data come from a nearly normal distribution to satisfy the condition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1050,  1026,  2382,  1024,  2065,  1996,  7099,  2946,  1050,
         2003,  2625,  2084,  2382,  1998,  2045,  2024,  2053,  3154,  2041,
        14355,  2015,  1999,  1996,  2951,  1010,  2059,  2057,  4050,  7868,
         1996,  2951,  2272,  2013,  1037,  3053,  3671,  4353,  2000, 13225,
         1996,  4650,  1012,   102])"
1705,1,"['observations', 'sample', 'sample size', 'sampling', 'normal', 'distribution', 'outliers', 'sampling distribution', 'extreme outliers']", Onesample means with the tdistribution,seg_63,"n ≥ 30: if the sample size n is at least 30 and there are no particularly extreme outliers, then we typically assume the sampling distribution of x̄ is nearly normal, even if the underlying distribution of individual observations is not.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1050,  1609,  2382,  1024,  2065,  1996,  7099,  2946,  1050,
         2003,  2012,  2560,  2382,  1998,  2045,  2024,  2053,  3391,  6034,
         2041, 14355,  2015,  1010,  2059,  2057,  4050,  7868,  1996, 16227,
         4353,  1997,  1060,  2003,  3053,  3671,  1010,  2130,  2065,  1996,
        10318,  4353,  1997,  3265,  9420,  2003,  2025,  1012,   102])"
1706,1,"['cases', 'condition', 'statistics']", Onesample means with the tdistribution,seg_63,"in this first course in statistics, you aren’t expected to develop perfect judgement on the normality condition. however, you are expected to be able to handle clear cut cases based on the rules of thumb.1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1999,  2023,  2034,  2607,  1999,  6747,  1010,  2017,  4995,
         1521,  1056,  3517,  2000,  4503,  3819, 16646,  2006,  1996,  3671,
         3012,  4650,  1012,  2174,  1010,  2017,  2024,  3517,  2000,  2022,
         2583,  2000,  5047,  3154,  3013,  3572,  2241,  2006,  1996,  3513,
         1997,  7639,  1012,  1015,   102])"
1707,1,"['random samples', 'populations', 'sample', 'random', 'plots', 'samples']", Onesample means with the tdistribution,seg_63,consider the following two plots that come from simple random samples from different populations. their sample sizes are n1 = 15 and n2 = 50.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  5136,  1996,  2206,  2048, 14811,  2008,  2272,  2013,  3722,
         6721,  8168,  2013,  2367,  7080,  1012,  2037,  7099, 10826,  2024,
         1050,  2487,  1027,  2321,  1998,  1050,  2475,  1027,  2753,  1012,
          102])"
1708,1,"['sample', 'observations']", Onesample means with the tdistribution,seg_63,4 25 20 3 y y c c n n 15 e e u 2 u q q e e 10 r r f f 1 5 0 0 0 2 4 6 0 10 20 sample 1 observations (n = 15) sample 2 observations (n = 50),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 1018, 2423, 2322, 1017, 1061, 1061, 1039, 1039, 1050, 1050, 2321,
        1041, 1041, 1057, 1016, 1057, 1053, 1053, 1041, 1041, 2184, 1054, 1054,
        1042, 1042, 1015, 1019, 1014, 1014, 1014, 1016, 1018, 1020, 1014, 2184,
        2322, 7099, 1015, 9420, 1006, 1050, 1027, 2321, 1007, 7099, 1016, 9420,
        1006, 1050, 1027, 2753, 1007,  102])"
1709,1,"['independence', 'normality', 'case']", Onesample means with the tdistribution,seg_63,are the independence and normality conditions met in each case?,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2024, 1996, 4336, 1998, 3671, 3012, 3785, 2777, 1999, 2169, 2553,
        1029,  102])"
1710,1,"['random sample', 'population', 'sample', 'random', 'independence', 'condition', 'simple random sample', 'samples', 'normality']", Onesample means with the tdistribution,seg_63,"each samples is from a simple random sample of its respective population, so the independence condition is satisfied. let’s next check the normality condition for each using the rule of thumb.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2169, 8168, 2003, 2013, 1037, 3722, 6721, 7099, 1997, 2049, 7972,
        2313, 1010, 2061, 1996, 4336, 4650, 2003, 8510, 1012, 2292, 1521, 1055,
        2279, 4638, 1996, 3671, 3012, 4650, 2005, 2169, 2478, 1996, 3627, 1997,
        7639, 1012,  102])"
1711,1,"['observations', 'histogram', 'sample', 'outliers', 'condition', 'normality']", Onesample means with the tdistribution,seg_63,"the first sample has fewer than 30 observations, so we are watching for any clear outliers. none are present; while there is a small gap in the histogram on the right, this gap is small and 20% of the observations in this small sample are represented in that far right bar of the histogram, so we can hardly call these clear outliers. with no clear outliers, the normality condition is reasonably met.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  2034,  7099,  2038,  8491,  2084,  2382,  9420,  1010,
         2061,  2057,  2024,  3666,  2005,  2151,  3154,  2041, 14355,  2015,
         1012,  3904,  2024,  2556,  1025,  2096,  2045,  2003,  1037,  2235,
         6578,  1999,  1996,  2010,  3406, 13113,  2006,  1996,  2157,  1010,
         2023,  6578,  2003,  2235,  1998,  2322,  1003,  1997,  1996,  9420,
         1999,  2023,  2235,  7099,  2024,  3421,  1999,  2008,  2521,  2157,
         3347,  1997,  1996,  2010,  3406, 13113,  1010,  2061,  2057,  2064,
         6684,  2655,  2122,  3154,  2041, 14355,  2015,  1012,  2007,  2053,
         3154,  2041, 14355,  2015,  1010,  1996,  3671,  3012,  4650,  2003,
        16286,  2777,  1012,   102])"
1712,1,"['observation', 'extreme outlier', 'sample', 'sample size', 'condition', 'distribution', 'outlier', 'normality']", Onesample means with the tdistribution,seg_63,"the second sample has a sample size greater than 30 and includes an outlier that appears to be roughly 5 times further from the center of the distribution than the next furthest observation. this is an example of a particularly extreme outlier, so the normality condition would not be satisfied.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  2117,  7099,  2038,  1037,  7099,  2946,  3618,  2084,
         2382,  1998,  2950,  2019,  2041, 14355,  2008,  3544,  2000,  2022,
         5560,  1019,  2335,  2582,  2013,  1996,  2415,  1997,  1996,  4353,
         2084,  1996,  2279,  6519, 20515,  8089,  1012,  2023,  2003,  2019,
         2742,  1997,  1037,  3391,  6034,  2041, 14355,  1010,  2061,  1996,
         3671,  3012,  4650,  2052,  2025,  2022,  8510,  1012,   102])"
1713,1,"['skewed', 'skew', 'skewed distribution', 'population', 'sample', 'sample size', 'condition', 'outliers', 'distribution', 'data', 'extreme outliers', 'normality']", Onesample means with the tdistribution,seg_63,"in practice, it’s typical to also do a mental check to evaluate whether we have reason to believe the underlying population would have moderate skew (if n < 30) or have particularly extreme outliers (n ≥ 30) beyond what we observe in the data. for example, consider the number of followers for each individual account on twitter, and then imagine this distribution. the large majority of accounts have built up a couple thousand followers or fewer, while a relatively tiny fraction have amassed tens of millions of followers, meaning the distribution is extremely skewed. when we know the data come from such an extremely skewed distribution, it takes some effort to understand what sample size is large enough for the normality condition to be satisfied.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1999,  3218,  1010,  2009,  1521,  1055,  5171,  2000,  2036,
         2079,  1037,  5177,  4638,  2000, 16157,  3251,  2057,  2031,  3114,
         2000,  2903,  1996, 10318,  2313,  2052,  2031,  8777, 15315,  7974,
         1006,  2065,  1050,  1026,  2382,  1007,  2030,  2031,  3391,  6034,
         2041, 14355,  2015,  1006,  1050,  1609,  2382,  1007,  3458,  2054,
         2057, 11949,  1999,  1996,  2951,  1012,  2005,  2742,  1010,  5136,
         1996,  2193,  1997,  8771,  2005,  2169,  3265,  4070,  2006, 10474,
         1010,  1998,  2059,  5674,  2023,  4353,  1012,  1996,  2312,  3484,
         1997,  6115,  2031,  2328,  2039,  1037,  3232,  4595,  8771,  2030,
         8491,  1010,  2096,  1037,  4659,  4714, 12884,  2031, 22151, 15295,
         1997,  8817,  1997,  8771,  1010,  3574,  1996,  4353,  2003,  5186,
        15315,  7974,  2098,  1012,  2043,  2057,  2113,  1996,  2951,  2272,
         2013,  2107,  2019,  5186, 15315,  7974,  2098,  4353,  1010,  2009,
         3138,  2070,  3947,  2000,  3305,  2054,  7099,  2946,  2003,  2312,
         2438,  2005,  1996,  3671,  3012,  4650,  2000,  2022,  8510,  1012,
          102])"
1714,0,[], Onesample means with the tdistribution,seg_63,7.1.3 introducing the t-distribution,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1021,  1012,  1015,  1012,  1017, 10449,  1996,  1056,  1011,
         4353,   102])"
1715,1,"['deviation', 'sample', 'sample standard deviation', 'standard deviation', 'standard', 'population', 'standard error', 'error', 'population standard deviation']", Onesample means with the tdistribution,seg_63,"in practice, we cannot directly calculate the standard error for x̄ since we do not know the population standard deviation, σ. we encountered a similar issue when computing the standard error for a sample proportion, which relied on the population proportion, p. our solution in the proportion context was to use sample value in place of the population value when computing the standard error. we’ll employ a similar strategy for computing the standard error of x̄, using the sample standard deviation s in place of σ:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1999,  3218,  1010,  2057,  3685,  3495, 18422,  1996,  3115,
         7561,  2005,  1060,  2144,  2057,  2079,  2025,  2113,  1996,  2313,
         3115, 24353,  1010,  1173,  1012,  2057,  8567,  1037,  2714,  3277,
         2043,  9798,  1996,  3115,  7561,  2005,  1037,  7099, 10817,  1010,
         2029, 13538,  2006,  1996,  2313, 10817,  1010,  1052,  1012,  2256,
         5576,  1999,  1996, 10817,  6123,  2001,  2000,  2224,  7099,  3643,
         1999,  2173,  1997,  1996,  2313,  3643,  2043,  9798,  1996,  3115,
         7561,  1012,  2057,  1521,  2222, 12666,  1037,  2714,  5656,  2005,
         9798,  1996,  3115,  7561,  1997,  1060,  1010,  2478,  1996,  7099,
         3115, 24353,  1055,  1999,  2173,  1997,  1173,  1024,   102])"
1716,1,"['normal distribution', 'estimate', 'samples', 'normal', 'distribution', 'model', 'data']", Onesample means with the tdistribution,seg_63,"this strategy tends to work well when we have a lot of data and can estimate σ using s accurately. however, the estimate is less precise with smaller samples, and this leads to problems when using the normal distribution to model x̄.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2023,  5656, 12102,  2000,  2147,  2092,  2043,  2057,  2031,
         1037,  2843,  1997,  2951,  1998,  2064, 10197,  1173,  2478,  1055,
        14125,  1012,  2174,  1010,  1996, 10197,  2003,  2625, 10480,  2007,
         3760,  8168,  1010,  1998,  2023,  5260,  2000,  3471,  2043,  2478,
         1996,  3671,  4353,  2000,  2944,  1060,  1012,   102])"
1717,1,"['mean', 'normal distribution', 'tails', 'observations', 'normal', 'standard', 'distribution']", Onesample means with the tdistribution,seg_63,"we’ll find it useful to use a new distribution for inference calculations called the t-distribution. a t-distribution, shown as a solid line in figure 7.1, has a bell shape. however, its tails are thicker than the normal distribution’s, meaning observations are more likely to fall beyond two standard deviations from the mean than under the normal distribution. the extra thick tails of the t-distribution are exactly the correction needed to resolve the problem of using s in place of σ in the se calculation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2057,  1521,  2222,  2424,  2009,  6179,  2000,  2224,  1037,
         2047,  4353,  2005, 28937, 16268,  2170,  1996,  1056,  1011,  4353,
         1012,  1037,  1056,  1011,  4353,  1010,  3491,  2004,  1037,  5024,
         2240,  1999,  3275,  1021,  1012,  1015,  1010,  2038,  1037,  4330,
         4338,  1012,  2174,  1010,  2049, 17448,  2024, 19638,  2084,  1996,
         3671,  4353,  1521,  1055,  1010,  3574,  9420,  2024,  2062,  3497,
         2000,  2991,  3458,  2048,  3115, 24353,  2015,  2013,  1996,  2812,
         2084,  2104,  1996,  3671,  4353,  1012,  1996,  4469,  4317, 17448,
         1997,  1996,  1056,  1011,  4353,  2024,  3599,  1996, 18140,  2734,
         2000, 10663,  1996,  3291,  1997,  2478,  1055,  1999,  2173,  1997,
         1173,  1999,  1996,  7367, 17208,  1012,   102])"
1718,1,"['normal', 'normal distribution', 'distribution']", Onesample means with the tdistribution,seg_63,figure 7.1: comparison of a t-distribution and a normal distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 3275, 1021, 1012, 1015, 1024, 7831, 1997, 1037, 1056, 1011, 4353,
        1998, 1037, 3671, 4353, 1012,  102])"
1719,1,"['parameter', 'normal distribution', 'degrees of freedom', 'normal', 'distribution']", Onesample means with the tdistribution,seg_63,the t-distribution is always centered at zero and has a single parameter: degrees of freedom. the degrees of freedom (df ) describes the precise form of the bell-shaped t-distribution. several t-distributions are shown in figure 7.2 in comparison to the normal distribution.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  1056,  1011,  4353,  2003,  2467,  8857,  2012,  5717,
         1998,  2038,  1037,  2309, 16381,  1024,  5445,  1997,  4071,  1012,
         1996,  5445,  1997,  4071,  1006,  1040,  2546,  1007,  5577,  1996,
        10480,  2433,  1997,  1996,  4330,  1011,  5044,  1056,  1011,  4353,
         1012,  2195,  1056,  1011, 20611,  2024,  3491,  1999,  3275,  1021,
         1012,  1016,  1999,  7831,  2000,  1996,  3671,  4353,  1012,   102])"
1720,1,"['mean', 'normal distribution', 'standard normal distribution', 'standard normal', 'observations', 'degrees of freedom', 'sample', 'normal', 'sample size', 'standard', 'distribution', 'model', 'sample mean']", Onesample means with the tdistribution,seg_63,"in general, we’ll use a t-distribution with df = n−1 to model the sample mean when the sample size is n. that is, when we have more observations, the degrees of freedom will be larger and the t-distribution will look more like the standard normal distribution; when the degrees of freedom is about 30 or more, the t-distribution is nearly indistinguishable from the normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1999,  2236,  1010,  2057,  1521,  2222,  2224,  1037,  1056,
         1011,  4353,  2007,  1040,  2546,  1027,  1050, 27944,  2000,  2944,
         1996,  7099,  2812,  2043,  1996,  7099,  2946,  2003,  1050,  1012,
         2008,  2003,  1010,  2043,  2057,  2031,  2062,  9420,  1010,  1996,
         5445,  1997,  4071,  2097,  2022,  3469,  1998,  1996,  1056,  1011,
         4353,  2097,  2298,  2062,  2066,  1996,  3115,  3671,  4353,  1025,
         2043,  1996,  5445,  1997,  4071,  2003,  2055,  2382,  2030,  2062,
         1010,  1996,  1056,  1011,  4353,  2003,  3053, 27427,  2923,  2075,
        27020, 25459,  2571,  2013,  1996,  3671,  4353,  1012,   102])"
1721,1,"['normal distribution', 'standard normal distribution', 'standard normal', 'degrees of freedom', 'normal', 'standard', 'distribution']", Onesample means with the tdistribution,seg_63,"figure 7.2: the larger the degrees of freedom, the more closely the t-distribution resembles the standard normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  3275,  1021,  1012,  1016,  1024,  1996,  3469,  1996,  5445,
         1997,  4071,  1010,  1996,  2062,  4876,  1996,  1056,  1011,  4353,
        12950,  1996,  3115,  3671,  4353,  1012,   102])"
1722,1,"['degrees of freedom', 'normal', 'distribution', 'model']", Onesample means with the tdistribution,seg_63,"the degrees of freedom describes the shape of the t-distribution. the larger the degrees of freedom, the more closely the distribution approximates the normal model.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  5445,  1997,  4071,  5577,  1996,  4338,  1997,  1996,
         1056,  1011,  4353,  1012,  1996,  3469,  1996,  5445,  1997,  4071,
         1010,  1996,  2062,  4876,  1996,  4353, 15796,  2015,  1996,  3671,
         2944,  1012,   102])"
1723,0,[], Onesample means with the tdistribution,seg_63,"when modeling x̄ using the t-distribution, use df = n− 1.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2043, 11643,  1060,  2478,  1996,  1056,  1011,  4353,  1010,
         2224,  1040,  2546,  1027,  1050, 22543,  1015,  1012,   102])"
1724,1,"['normal distribution', 'data', 'table', 'method', 'normal', 'distribution', 'statistical', 'numerical']", Onesample means with the tdistribution,seg_63,"the t-distribution allows us greater flexibility than the normal distribution when analyzing numerical data. in practice, it’s common to use statistical software, such as r, python, or sas for these analyses. alternatively, a graphing calculator or a t-table may be used; the t-table is similar to the normal distribution table, and it may be found in appendix c.2, which includes usage instructions and examples for those who wish to use this option. no matter the approach you choose, apply your method using the examples below to confirm your working understanding of the t-distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  1056,  1011,  4353,  4473,  2149,  3618, 16991,  2084,
         1996,  3671,  4353,  2043, 20253, 15973,  2951,  1012,  1999,  3218,
         1010,  2009,  1521,  1055,  2691,  2000,  2224,  7778,  4007,  1010,
         2107,  2004,  1054,  1010, 18750,  1010,  2030, 21871,  2005,  2122,
        16478,  1012, 14084,  1010,  1037, 10629,  2075, 10250, 19879,  4263,
         2030,  1037,  1056,  1011,  2795,  2089,  2022,  2109,  1025,  1996,
         1056,  1011,  2795,  2003,  2714,  2000,  1996,  3671,  4353,  2795,
         1010,  1998,  2009,  2089,  2022,  2179,  1999, 22524,  1039,  1012,
         1016,  1010,  2029,  2950,  8192,  8128,  1998,  4973,  2005,  2216,
         2040,  4299,  2000,  2224,  2023,  5724,  1012,  2053,  3043,  1996,
         3921,  2017,  5454,  1010,  6611,  2115,  4118,  2478,  1996,  4973,
         2917,  2000, 12210,  2115,  2551,  4824,  1997,  1996,  1056,  1011,
         4353,  1012,   102])"
1725,1,['degrees of freedom'], Onesample means with the tdistribution,seg_63,figure 7.3: the t-distribution with 18 degrees of freedom. the area below -2.10 has been shaded.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  3275,  1021,  1012,  1017,  1024,  1996,  1056,  1011,  4353,
         2007,  2324,  5445,  1997,  4071,  1012,  1996,  2181,  2917,  1011,
         1016,  1012,  2184,  2038,  2042, 25273,  1012,   102])"
1726,1,['degrees of freedom'], Onesample means with the tdistribution,seg_63,"figure 7.4: left: the t-distribution with 20 degrees of freedom, with the area above 1.65 shaded. right: the t-distribution with 2 degrees of freedom, with the area further than 3 units from 0 shaded.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  3275,  1021,  1012,  1018,  1024,  2187,  1024,  1996,  1056,
         1011,  4353,  2007,  2322,  5445,  1997,  4071,  1010,  2007,  1996,
         2181,  2682,  1015,  1012,  3515, 25273,  1012,  2157,  1024,  1996,
         1056,  1011,  4353,  2007,  1016,  5445,  1997,  4071,  1010,  2007,
         1996,  2181,  2582,  2084,  1017,  3197,  2013,  1014, 25273,  1012,
          102])"
1727,1,['degrees of freedom'], Onesample means with the tdistribution,seg_63,what proportion of the t-distribution with 18 degrees of freedom falls below -2.10?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2054, 10817,  1997,  1996,  1056,  1011,  4353,  2007,  2324,
         5445,  1997,  4071,  4212,  2917,  1011,  1016,  1012,  2184,  1029,
          102])"
1728,1,"['probability', 'normal', 'statistical']", Onesample means with the tdistribution,seg_63,"just like a normal probability problem, we first draw the picture in figure 7.3 and shade the area below -2.10. using statistical software, we can obtain a precise value: 0.0250.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2074,  2066,  1037,  3671,  9723,  3291,  1010,  2057,  2034,
         4009,  1996,  3861,  1999,  3275,  1021,  1012,  1017,  1998,  8703,
         1996,  2181,  2917,  1011,  1016,  1012,  2184,  1012,  2478,  7778,
         4007,  1010,  2057,  2064,  6855,  1037, 10480,  3643,  1024,  1014,
         1012,  6185, 12376,  1012,   102])"
1729,1,"['estimate', 'degrees of freedom', 'distribution']", Onesample means with the tdistribution,seg_63,a t-distribution with 20 degrees of freedom is shown in the left panel of figure 7.4. estimate the proportion of the distribution falling above 1.65.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1037,  1056,  1011,  4353,  2007,  2322,  5445,  1997,  4071,
         2003,  3491,  1999,  1996,  2187,  5997,  1997,  3275,  1021,  1012,
         1018,  1012, 10197,  1996, 10817,  1997,  1996,  4353,  4634,  2682,
         1015,  1012,  3515,  1012,   102])"
1730,1,"['normal distribution', 'normal', 'distribution', 'statistical']", Onesample means with the tdistribution,seg_63,"with a normal distribution, this would correspond to about 0.05, so we should expect the tdistribution to give us a value in this neighborhood. using statistical software: 0.0573.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2007,  1037,  3671,  4353,  1010,  2023,  2052, 17254,  2000,
         2055,  1014,  1012,  5709,  1010,  2061,  2057,  2323,  5987,  1996,
        14595,  2923,  3089, 29446,  2000,  2507,  2149,  1037,  3643,  1999,
         2023,  5101,  1012,  2478,  7778,  4007,  1024,  1014,  1012,  5709,
         2581,  2509,  1012,   102])"
1731,1,"['mean', 'estimate', 'degrees of freedom', 'distribution']", Onesample means with the tdistribution,seg_63,a t-distribution with 2 degrees of freedom is shown in the right panel of figure 7.4. estimate the proportion of the distribution falling more than 3 units from the mean (above or below).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1037,  1056,  1011,  4353,  2007,  1016,  5445,  1997,  4071,
         2003,  3491,  1999,  1996,  2157,  5997,  1997,  3275,  1021,  1012,
         1018,  1012, 10197,  1996, 10817,  1997,  1996,  4353,  4634,  2062,
         2084,  1017,  3197,  2013,  1996,  2812,  1006,  2682,  2030,  2917,
         1007,  1012,   102])"
1732,1,"['normal distribution', 'tails', 'degrees of freedom', 'normal', 'distribution']", Onesample means with the tdistribution,seg_63,"with so few degrees of freedom, the t-distribution will give a more notably different value than the normal distribution. under a normal distribution, the area would be about 0.003 using the 68-95- 99.7 rule. for a t-distribution with df = 2, the area in both tails beyond 3 units totals 0.0955. this area is dramatically different than what we obtain from the normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2007,  2061,  2261,  5445,  1997,  4071,  1010,  1996,  1056,
         1011,  4353,  2097,  2507,  1037,  2062,  5546,  2367,  3643,  2084,
         1996,  3671,  4353,  1012,  2104,  1037,  3671,  4353,  1010,  1996,
         2181,  2052,  2022,  2055,  1014,  1012,  4002,  2509,  2478,  1996,
         6273,  1011,  5345,  1011,  5585,  1012,  1021,  3627,  1012,  2005,
         1037,  1056,  1011,  4353,  2007,  1040,  2546,  1027,  1016,  1010,
         1996,  2181,  1999,  2119, 17448,  3458,  1017,  3197, 21948,  1014,
         1012,  5641, 24087,  1012,  2023,  2181,  2003, 12099,  2367,  2084,
         2054,  2057,  6855,  2013,  1996,  3671,  4353,  1012,   102])"
1733,1,['degrees of freedom'], Onesample means with the tdistribution,seg_63,what proportion of the t-distribution with 19 degrees of freedom falls above -1.79 units? use your,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2054, 10817,  1997,  1996,  1056,  1011,  4353,  2007,  2539,
         5445,  1997,  4071,  4212,  2682,  1011,  1015,  1012,  6535,  3197,
         1029,  2224,  2115,   102])"
1734,1,"['tail', 'method', 'tail areas']", Onesample means with the tdistribution,seg_63,2 preferred method for finding tail areas.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 1016, 6871, 4118, 2005, 4531, 5725, 2752, 1012,  102])"
1735,1,"['sample', 'intervals']", Onesample means with the tdistribution,seg_63,7.1.4 one sample t-confidence intervals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1021,  1012,  1015,  1012,  1018,  2028,  7099,  1056,  1011,
         7023, 14025,   102])"
1736,0,[], Onesample means with the tdistribution,seg_63,"let’s get our first taste of applying the t-distribution in the context of an example about the mercury content of dolphin muscle. elevated mercury concentrations are an important problem for both dolphins and other animals, like humans, who occasionally eat them.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2292,  1521,  1055,  2131,  2256,  2034,  5510,  1997, 11243,
         1996,  1056,  1011,  4353,  1999,  1996,  6123,  1997,  2019,  2742,
         2055,  1996,  8714,  4180,  1997, 17801,  6740,  1012,  8319,  8714,
        14061,  2024,  2019,  2590,  3291,  2005,  2119, 13600,  1998,  2060,
         4176,  1010,  2066,  4286,  1010,  2040,  5681,  4521,  2068,  1012,
          102])"
1737,1,"['confidence interval', 'average', 'interval', 'sample', 'outliers', 'confidence', 'data']", Onesample means with the tdistribution,seg_63,we will identify a confidence interval for the average mercury content in dolphin muscle using a sample of 19 risso’s dolphins from the taiji area in japan. the data are summarized in figure 7.6. the minimum and maximum observed values can be used to evaluate whether or not there are clear outliers.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2057,  2097,  6709,  1037,  7023, 13483,  2005,  1996,  2779,
         8714,  4180,  1999, 17801,  6740,  2478,  1037,  7099,  1997,  2539,
        15544, 24137,  1521,  1055, 13600,  2013,  1996, 13843,  4478,  2181,
         1999,  2900,  1012,  1996,  2951,  2024, 22539,  1999,  3275,  1021,
         1012,  1020,  1012,  1996,  6263,  1998,  4555,  5159,  5300,  2064,
         2022,  2109,  2000, 16157,  3251,  2030,  2025,  2045,  2024,  3154,
         2041, 14355,  2015,  1012,   102])"
1738,1,['measurements'], Onesample means with the tdistribution,seg_63,figure 7.6: summary of mercury content in the muscle of 19 risso’s dolphins from the taiji area. measurements are in micrograms of mercury per wet gram of muscle (µg/wet g).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  3275,  1021,  1012,  1020,  1024, 12654,  1997,  8714,  4180,
         1999,  1996,  6740,  1997,  2539, 15544, 24137,  1521,  1055, 13600,
         2013,  1996, 13843,  4478,  2181,  1012, 11702,  2024,  1999, 12702,
        13113,  2015,  1997,  8714,  2566,  4954, 13250,  1997,  6740,  1006,
         1085,  2290,  1013,  4954,  1043,  1007,  1012,   102])"
1739,1,"['set', 'independence', 'data set', 'data', 'normality']", Onesample means with the tdistribution,seg_63,are the independence and normality conditions satisfied for this data set?,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2024, 1996, 4336, 1998, 3671, 3012, 3785, 8510, 2005, 2023, 2951,
        2275, 1029,  102])"
1740,1,"['condition', 'normality', 'mean', 'observations', 'statistics', 'standard deviations', 'random sample', 'independence', 'standard', 'sample', 'random', 'outliers', 'deviations', 'simple random sample']", Onesample means with the tdistribution,seg_63,"the observations are a simple random sample, therefore independence is reasonable. the summary statistics in figure 7.6 do not suggest any clear outliers, since all observations are within 2.5 standard deviations of the mean. based on this evidence, the normality condition seems reasonable.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  9420,  2024,  1037,  3722,  6721,  7099,  1010,  3568,
         4336,  2003,  9608,  1012,  1996, 12654,  6747,  1999,  3275,  1021,
         1012,  1020,  2079,  2025,  6592,  2151,  3154,  2041, 14355,  2015,
         1010,  2144,  2035,  9420,  2024,  2306,  1016,  1012,  1019,  3115,
        24353,  2015,  1997,  1996,  2812,  1012,  2241,  2006,  2023,  3350,
         1010,  1996,  3671,  3012,  4650,  3849,  9608,  1012,   102])"
1741,1,"['confidence interval', 'interval', 'normal', 'standard', 'model', 'standard error', 'confidence', 'error']", Onesample means with the tdistribution,seg_63,"in the normal model, we used z? and the standard error to determine the width of a confidence interval. we revise the confidence interval formula slightly when using the t-distribution:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1999,  1996,  3671,  2944,  1010,  2057,  2109,  1062,  1029,
         1998,  1996,  3115,  7561,  2000,  5646,  1996,  9381,  1997,  1037,
         7023, 13483,  1012,  2057,  7065,  5562,  1996,  7023, 13483,  5675,
         3621,  2043,  2478,  1996,  1056,  1011,  4353,  1024,   102])"
1742,1,"['estimate', 'point estimate']", Onesample means with the tdistribution,seg_63,s point estimate ± t?df × se → x̄ ± t?df × √n,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1055,  2391, 10197,  1081,  1056,  1029,  1040,  2546,  1095,
         7367,  1585,  1060,  1081,  1056,  1029,  1040,  2546,  1095,  1600,
         2078,   102])"
1743,1,"['standard', 'statistics', 'standard error', 'average', 'error']", Onesample means with the tdistribution,seg_63,"using the summary statistics in figure 7.6, compute the standard error for the average mercury content in the n = 19 dolphins.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2478,  1996, 12654,  6747,  1999,  3275,  1021,  1012,  1020,
         1010, 24134,  1996,  3115,  7561,  2005,  1996,  2779,  8714,  4180,
         1999,  1996,  1050,  1027,  2539, 13600,  1012,   102])"
1744,1,"['confidence level', 'normal distribution', 'degrees of freedom', 'level', 'normal', 'distribution', 'confidence']", Onesample means with the tdistribution,seg_63,the value t?df is a cutoff we obtain based on the confidence level and the t-distribution with df degrees of freedom. that cutoff is found in the same way as with a normal distribution: we find t?df such that the fraction of the t-distribution with df degrees of freedom within a distance t?df of 0 matches the confidence level of interest.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  3643,  1056,  1029,  1040,  2546,  2003,  1037,  3013,
         7245,  2057,  6855,  2241,  2006,  1996,  7023,  2504,  1998,  1996,
         1056,  1011,  4353,  2007,  1040,  2546,  5445,  1997,  4071,  1012,
         2008,  3013,  7245,  2003,  2179,  1999,  1996,  2168,  2126,  2004,
         2007,  1037,  3671,  4353,  1024,  2057,  2424,  1056,  1029,  1040,
         2546,  2107,  2008,  1996, 12884,  1997,  1996,  1056,  1011,  4353,
         2007,  1040,  2546,  5445,  1997,  4071,  2306,  1037,  3292,  1056,
         1029,  1040,  2546,  1997,  1014,  3503,  1996,  7023,  2504,  1997,
         3037,  1012,   102])"
1745,1,"['confidence level', 'degrees of freedom', 'level', 'confidence']", Onesample means with the tdistribution,seg_63,"when n = 19, what is the appropriate degrees of freedom? find t?df for this degrees of freedom and the confidence level of 95%",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2043, 1050, 1027, 2539, 1010, 2054, 2003, 1996, 6413, 5445, 1997,
        4071, 1029, 2424, 1056, 1029, 1040, 2546, 2005, 2023, 5445, 1997, 4071,
        1998, 1996, 7023, 2504, 1997, 5345, 1003,  102])"
1746,1,['degrees of freedom'], Onesample means with the tdistribution,seg_63,the degrees of freedom is easy to calculate: df = n− 1 = 18.,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  5445,  1997,  4071,  2003,  3733,  2000, 18422,  1024,
         1040,  2546,  1027,  1050, 22543,  1015,  1027,  2324,  1012,   102])"
1747,1,"['tail', 'statistical']", Onesample means with the tdistribution,seg_63,"using statistical software, we find the cutoff where the upper tail is equal to 2.5%: t?18 = 2.10. the area below -2.10 will also be equal to 2.5%. that is, 95% of the t-distribution with df = 18 lies within 2.10 units of 0.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2478, 7778, 4007, 1010, 2057, 2424, 1996, 3013, 7245, 2073, 1996,
        3356, 5725, 2003, 5020, 2000, 1016, 1012, 1019, 1003, 1024, 1056, 1029,
        2324, 1027, 1016, 1012, 2184, 1012, 1996, 2181, 2917, 1011, 1016, 1012,
        2184, 2097, 2036, 2022, 5020, 2000, 1016, 1012, 1019, 1003, 1012, 2008,
        2003, 1010, 5345, 1003, 1997, 1996, 1056, 1011, 4353, 2007, 1040, 2546,
        1027, 2324, 3658, 2306, 1016, 1012, 2184, 3197, 1997, 1014, 1012,  102])"
1748,1,"['interval', 'confidence', 'average', 'confidence interval']", Onesample means with the tdistribution,seg_63,compute and interpret the 95% confidence interval for the average mercury content in risso’s dolphins.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101, 24134,  1998, 17841,  1996,  5345,  1003,  7023, 13483,  2005,
         1996,  2779,  8714,  4180,  1999, 15544, 24137,  1521,  1055, 13600,
         1012,   102])"
1749,1,"['interval', 'confidence', 'confidence interval']", Onesample means with the tdistribution,seg_63,we can construct the confidence interval as,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2057,  2064,  9570,  1996,  7023, 13483,  2004,   102])"
1750,1,"['average', 'confident']", Onesample means with the tdistribution,seg_63,"we are 95% confident the average mercury content of muscles in risso’s dolphins is between 3.29 and 5.51 µg/wet gram, which is considered extremely high.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2057,  2024,  5345,  1003,  9657,  1996,  2779,  8714,  4180,
         1997,  6650,  1999, 15544, 24137,  1521,  1055, 13600,  2003,  2090,
         1017,  1012,  2756,  1998,  1019,  1012,  4868,  1085,  2290,  1013,
         4954, 13250,  1010,  2029,  2003,  2641,  5186,  2152,  1012,   102])"
1751,1,"['mean', 'confidence interval', 'interval', 'observations', 'sample', 'normal', 'population', 'population mean', 'confidence', 'independent']", Onesample means with the tdistribution,seg_63,"based on a sample of n independent and nearly normal observations, a confidence interval for the population mean is",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2241,  2006,  1037,  7099,  1997,  1050,  2981,  1998,  3053,
         3671,  9420,  1010,  1037,  7023, 13483,  2005,  1996,  2313,  2812,
         2003,   102])"
1752,1,"['estimate', 'point estimate']", Onesample means with the tdistribution,seg_63,s point estimate ± t?df × se → x̄ ± t?df × √n,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1055,  2391, 10197,  1081,  1056,  1029,  1040,  2546,  1095,
         7367,  1585,  1060,  1081,  1056,  1029,  1040,  2546,  1095,  1600,
         2078,   102])"
1753,1,"['mean', 'confidence level', 'error', 'estimated', 'degrees of freedom', 'level', 'sample', 'standard', 'standard error', 'confidence', 'sample mean']", Onesample means with the tdistribution,seg_63,"where x̄ is the sample mean, t?df corresponds to the confidence level and degrees of freedom df , and se is the standard error as estimated by the sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 0.,
        0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2073,  1060,  2003,  1996,  7099,  2812,  1010,  1056,  1029,
         1040,  2546, 14788,  2000,  1996,  7023,  2504,  1998,  5445,  1997,
         4071,  1040,  2546,  1010,  1998,  7367,  2003,  1996,  3115,  7561,
         2004,  4358,  2011,  1996,  7099,  1012,   102])"
1754,1,"['mean', 'deviation', 'data', 'observations', 'sample', 'standard deviation', 'standard', 'condition', 'statistics', 'independent', 'sample mean', 'normality']", Onesample means with the tdistribution,seg_63,"the fda’s webpage provides some data on mercury content of fish. based on a sample of 15 croaker white fish (pacific), a sample mean and standard deviation were computed as 0.287 and 0.069 ppm (parts per million), respectively. the 15 observations ranged from 0.18 to 0.41 ppm. we will assume these observations are independent. based on the summary statistics of the data, do you have any objections to the normality condition of the individual observations?3",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996, 17473,  1521,  1055,  4773, 13704,  3640,  2070,  2951,
         2006,  8714,  4180,  1997,  3869,  1012,  2241,  2006,  1037,  7099,
         1997,  2321, 13675, 10441,  5484,  2317,  3869,  1006,  3534,  1007,
         1010,  1037,  7099,  2812,  1998,  3115, 24353,  2020, 24806,  2004,
         1014,  1012, 23090,  1998,  1014,  1012,  5757,  2683,  4903,  2213,
         1006,  3033,  2566,  2454,  1007,  1010,  4414,  1012,  1996,  2321,
         9420, 15844,  2013,  1014,  1012,  2324,  2000,  1014,  1012,  4601,
         4903,  2213,  1012,  2057,  2097,  7868,  2122,  9420,  2024,  2981,
         1012,  2241,  2006,  1996, 12654,  6747,  1997,  1996,  2951,  1010,
         2079,  2017,  2031,  2151, 17304,  2000,  1996,  3671,  3012,  4650,
         1997,  1996,  3265,  9420,  1029,  1017,   102])"
1755,1,"['mean', 'confidence interval', 'interval', 'degrees of freedom', 'standard', 'standard error', 'confidence', 'data', 'error']", Onesample means with the tdistribution,seg_63,"estimate the standard error of x̄ = 0.287 ppm using the data summaries in guided practice 7.10. if we are to use the t-distribution to create a 90% confidence interval for the actual mean of the mercury content, identify the degrees of freedom and t?df .",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101, 10197,  1996,  3115,  7561,  1997,  1060,  1027,  1014,  1012,
        23090,  4903,  2213,  2478,  1996,  2951,  7680,  7849,  3111,  1999,
         8546,  3218,  1021,  1012,  2184,  1012,  2065,  2057,  2024,  2000,
         2224,  1996,  1056,  1011,  4353,  2000,  3443,  1037,  3938,  1003,
         7023, 13483,  2005,  1996,  5025,  2812,  1997,  1996,  8714,  4180,
         1010,  6709,  1996,  5445,  1997,  4071,  1998,  1056,  1029,  1040,
         2546,  1012,   102])"
1756,1,"['standard error', 'standard', 'error']", Onesample means with the tdistribution,seg_63,0.069 the standard error: se = = 0.0178.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 1014, 1012, 5757, 2683, 1996, 3115, 7561, 1024, 7367, 1027, 1027,
        1014, 1012, 5890, 2581, 2620, 1012,  102])"
1757,1,"['interval', 'confidence', 'confidence interval']", Onesample means with the tdistribution,seg_63,"since the goal is a 90% confidence interval, we choose t?14 so that the two-tail area is 0.1: t?14 = 1.76.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2144,  1996,  3125,  2003,  1037,  3938,  1003,  7023, 13483,
         1010,  2057,  5454,  1056,  1029,  2403,  2061,  2008,  1996,  2048,
         1011,  5725,  2181,  2003,  1014,  1012,  1015,  1024,  1056,  1029,
         2403,  1027,  1015,  1012,  6146,  1012,   102])"
1758,1,"['interval', 'confidence', 'confidence interval']", Onesample means with the tdistribution,seg_63,"once you’ve determined a one-mean confidence interval would be helpful for an application, there are four steps to constructing the interval:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2320,  2017,  1521,  2310,  4340,  1037,  2028,  1011,  2812,
         7023, 13483,  2052,  2022, 14044,  2005,  2019,  4646,  1010,  2045,
         2024,  2176,  4084,  2000, 15696,  1996, 13483,  1024,   102])"
1759,1,"['confidence level', 'confidence', 'level']", Onesample means with the tdistribution,seg_63,"prepare. identify x̄, s, n, and determine what confidence level you wish to use.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 7374, 1012, 6709, 1060, 1010, 1055, 1010, 1050, 1010, 1998, 5646,
        2054, 7023, 2504, 2017, 4299, 2000, 2224, 1012,  102])"
1760,1,['normal'], Onesample means with the tdistribution,seg_63,check. verify the conditions to ensure x̄ is nearly normal.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  4638,  1012, 20410,  1996,  3785,  2000,  5676,  1060,  2003,
         3053,  3671,  1012,   102])"
1761,1,['interval'], Onesample means with the tdistribution,seg_63,"calculate. if the conditions hold, compute se, find t?df , and construct the interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101, 18422,  1012,  2065,  1996,  3785,  2907,  1010, 24134,  7367,
         1010,  2424,  1056,  1029,  1040,  2546,  1010,  1998,  9570,  1996,
        13483,  1012,   102])"
1762,1,"['interval', 'confidence', 'confidence interval']", Onesample means with the tdistribution,seg_63,conclude. interpret the confidence interval in the context of the problem.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101, 16519,  1012, 17841,  1996,  7023, 13483,  1999,  1996,  6123,
         1997,  1996,  3291,  1012,   102])"
1763,1,"['results', 'information']", Onesample means with the tdistribution,seg_63,"using the information and results of guided practice 7.10 and example 7.11, compute a 90% con-",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2478,  1996,  2592,  1998,  3463,  1997,  8546,  3218,  1021,
         1012,  2184,  1998,  2742,  1021,  1012,  2340,  1010, 24134,  1037,
         3938,  1003,  9530,  1011,   102])"
1764,1,"['interval', 'average']", Onesample means with the tdistribution,seg_63,4 fidence interval for the average mercury content of croaker white fish (pacific).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1018, 26000,  5897, 13483,  2005,  1996,  2779,  8714,  4180,
         1997, 13675, 10441,  5484,  2317,  3869,  1006,  3534,  1007,  1012,
          102])"
1765,1,"['confidence interval', 'interval', 'levels', 'confidence']", Onesample means with the tdistribution,seg_63,the 90% confidence interval from guided practice 7.12 is 0.256 ppm to 0.318 ppm. can we say that 90% of croaker white fish (pacific) have mercury levels between 0.256 and 0.318 ppm?5,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  3938,  1003,  7023, 13483,  2013,  8546,  3218,  1021,
         1012,  2260,  2003,  1014,  1012, 17273,  4903,  2213,  2000,  1014,
         1012, 27003,  4903,  2213,  1012,  2064,  2057,  2360,  2008,  3938,
         1003,  1997, 13675, 10441,  5484,  2317,  3869,  1006,  3534,  1007,
         2031,  8714,  3798,  2090,  1014,  1012, 17273,  1998,  1014,  1012,
        27003,  4903,  2213,  1029,  1019,   102])"
1766,1,['sample'], Onesample means with the tdistribution,seg_63,7.1.5 one sample t-tests,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 1021, 1012, 1015, 1012, 1019, 2028, 7099, 1056, 1011, 5852,  102])"
1767,0,[], Onesample means with the tdistribution,seg_63,"is the typical us runner getting faster or slower over time? we consider this question in the context of the cherry blossom race, which is a 10-mile race in washington, dc each spring.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2003,  1996,  5171,  2149,  5479,  2893,  5514,  2030, 12430,
         2058,  2051,  1029,  2057,  5136,  2023,  3160,  1999,  1996,  6123,
         1997,  1996,  9115, 20593,  2679,  1010,  2029,  2003,  1037,  2184,
         1011,  3542,  2679,  1999,  2899,  1010,  5887,  2169,  3500,  1012,
          102])"
1768,1,"['average', 'data']", Onesample means with the tdistribution,seg_63,"the average time for all runners who finished the cherry blossom race in 2006 was 93.29 minutes (93 minutes and about 17 seconds). we want to determine using data from 100 participants in the 2017 cherry blossom race whether runners in this race are getting faster or slower, versus the other possibility that there has been no change.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  2779,  2051,  2005,  2035,  7190,  2040,  2736,  1996,
         9115, 20593,  2679,  1999,  2294,  2001,  6109,  1012,  2756,  2781,
         1006,  6109,  2781,  1998,  2055,  2459,  3823,  1007,  1012,  2057,
         2215,  2000,  5646,  2478,  2951,  2013,  2531,  6818,  1999,  1996,
         2418,  9115, 20593,  2679,  3251,  7190,  1999,  2023,  2679,  2024,
         2893,  5514,  2030, 12430,  1010,  6431,  1996,  2060,  6061,  2008,
         2045,  2038,  2042,  2053,  2689,  1012,   102])"
1769,1,['hypotheses'], Onesample means with the tdistribution,seg_63,what are appropriate hypotheses for this context?6,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2054,  2024,  6413,  1044, 22571, 14573, 23072,  2005,  2023,
         6123,  1029,  1020,   102])"
1770,1,"['observations', 'histogram', 'random sample', 'sample', 'random', 'independent', 'condition', 'simple random sample', 'data', 'normality']", Onesample means with the tdistribution,seg_63,"the data come from a simple random sample of all participants, so the observations are independent. however, should we be worried about the normality condition? see figure 7.7 for a histogram of the differences and evaluate if we can move forward.7",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  1996,  2951,  2272,  2013,  1037,  3722,  6721,  7099,  1997,
         2035,  6818,  1010,  2061,  1996,  9420,  2024,  2981,  1012,  2174,
         1010,  2323,  2057,  2022,  5191,  2055,  1996,  3671,  3012,  4650,
         1029,  2156,  3275,  1021,  1012,  1021,  2005,  1037,  2010,  3406,
        13113,  1997,  1996,  5966,  1998, 16157,  2065,  2057,  2064,  2693,
         2830,  1012,  1021,   102])"
1771,1,"['tail', 'mean', 'hypothesis test', 'test', 'null value', 'hypothesis', 'sampling', 'standard', 'process', 'distribution', 'standard error', 'sampling distribution', 'error']", Onesample means with the tdistribution,seg_63,"when completing a hypothesis test for the one-sample mean, the process is nearly identical to completing a hypothesis test for a single proportion. first, we find the z-score using the observed value, null value, and standard error; however, we call it a t-score since we use a t-distribution for calculating the tail area. then we find the p-value using the same ideas we used previously: find the one-tail area under the sampling distribution, and double it.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2043,  7678,  1037, 10744,  3231,  2005,  1996,  2028,  1011,
         7099,  2812,  1010,  1996,  2832,  2003,  3053,  7235,  2000,  7678,
         1037, 10744,  3231,  2005,  1037,  2309, 10817,  1012,  2034,  1010,
         2057,  2424,  1996,  1062,  1011,  3556,  2478,  1996,  5159,  3643,
         1010, 19701,  3643,  1010,  1998,  3115,  7561,  1025,  2174,  1010,
         2057,  2655,  2009,  1037,  1056,  1011,  3556,  2144,  2057,  2224,
         1037,  1056,  1011,  4353,  2005, 20177,  1996,  5725,  2181,  1012,
         2059,  2057,  2424,  1996,  1052,  1011,  3643,  2478,  1996,  2168,
         4784,  2057,  2109,  3130,  1024,  2424,  1996,  2028,  1011,  5725,
         2181,  2104,  1996, 16227,  4353,  1010,  1998,  3313,  2009,  1012,
          102])"
1772,0,[], Onesample means with the tdistribution,seg_63,20 15 ycneu 10 qerf 5 0 60 80 100 120 140 time (minutes),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2322, 2321, 1061, 2278, 2638, 2226, 2184, 1053, 2121, 2546, 1019,
        1014, 3438, 3770, 2531, 6036, 8574, 2051, 1006, 2781, 1007,  102])"
1773,1,"['sample', 'data', 'histogram']", Onesample means with the tdistribution,seg_63,figure 7.7: a histogram of time for the sample cherry blossom race data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  3275,  1021,  1012,  1021,  1024,  1037,  2010,  3406, 13113,
         1997,  2051,  2005,  1996,  7099,  9115, 20593,  2679,  2951,  1012,
          102])"
1774,1,"['hypothesis test', 'normality', 'mean', 'standard deviation', 'statistic', 'test', 'test statistic', 'deviation', 'hypothesis', 'independence', 'standard', 'sample', 'sample size', 'sample standard deviation', 'average', 'sample mean']", Onesample means with the tdistribution,seg_63,"with both the independence and normality conditions satisfied, we can proceed with a hypothesis test using the t-distribution. the sample mean and sample standard deviation of the sample of 100 runners from the 2017 cherry blossom race are 97.32 and 16.98 minutes, respectively. recall that the sample size is 100 and the average run time in 2006 was 93.29 minutes. find the test statistic and p-value. what is your conclusion?",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2007,  2119,  1996,  4336,  1998,  3671,  3012,  3785,  8510,
         1010,  2057,  2064, 10838,  2007,  1037, 10744,  3231,  2478,  1996,
         1056,  1011,  4353,  1012,  1996,  7099,  2812,  1998,  7099,  3115,
        24353,  1997,  1996,  7099,  1997,  2531,  7190,  2013,  1996,  2418,
         9115, 20593,  2679,  2024,  5989,  1012,  3590,  1998,  2385,  1012,
         5818,  2781,  1010,  4414,  1012,  9131,  2008,  1996,  7099,  2946,
         2003,  2531,  1998,  1996,  2779,  2448,  2051,  1999,  2294,  2001,
         6109,  1012,  2756,  2781,  1012,  2424,  1996,  3231, 28093,  6553,
         1998,  1052,  1011,  3643,  1012,  2054,  2003,  2115,  7091,  1029,
          102])"
1775,1,"['test statistic', 'standard', 'standard error', 'statistic', 'error', 'test']", Onesample means with the tdistribution,seg_63,"to find the test statistic (t-score), we first must determine the standard error:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2000,  2424,  1996,  3231, 28093,  6553,  1006,  1056,  1011,
         3556,  1007,  1010,  2057,  2034,  2442,  5646,  1996,  3115,  7561,
         1024,   102])"
1776,1,"['mean', 'null value', 'sample', 'sample mean']", Onesample means with the tdistribution,seg_63,"now we can compute the t-score using the sample mean (97.32), null value (93.29), and se:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2085,  2057,  2064, 24134,  1996,  1056,  1011,  3556,  2478,
         1996,  7099,  2812,  1006,  5989,  1012,  3590,  1007,  1010, 19701,
         3643,  1006,  6109,  1012,  2756,  1007,  1010,  1998,  7367,  1024,
          102])"
1777,1,['statistical'], Onesample means with the tdistribution,seg_63,"for df = 100 − 1 = 99, we can determine using statistical software (or a t-table) that the one-tail area is 0.01, which we double to get the p-value: 0.02.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([ 101, 2005, 1040, 2546, 1027, 2531, 1597, 1015, 1027, 5585, 1010, 2057,
        2064, 5646, 2478, 7778, 4007, 1006, 2030, 1037, 1056, 1011, 2795, 1007,
        2008, 1996, 2028, 1011, 5725, 2181, 2003, 1014, 1012, 5890, 1010, 2029,
        2057, 3313, 2000, 2131, 1996, 1052, 1011, 3643, 1024, 1014, 1012, 6185,
        1012,  102])"
1778,1,"['null value', 'hypothesis', 'null hypothesis', 'average', 'data']", Onesample means with the tdistribution,seg_63,"because the p-value is smaller than 0.05, we reject the null hypothesis. that is, the data provide strong evidence that the average run time for the cherry blossom run in 2017 is different than the 2006 average. since the observed value is above the null value and we have rejected the null hypothesis, we would conclude that runners in the race were slower on average in 2017 than in 2006.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2138,  1996,  1052,  1011,  3643,  2003,  3760,  2084,  1014,
         1012,  5709,  1010,  2057, 15454,  1996, 19701, 10744,  1012,  2008,
         2003,  1010,  1996,  2951,  3073,  2844,  3350,  2008,  1996,  2779,
         2448,  2051,  2005,  1996,  9115, 20593,  2448,  1999,  2418,  2003,
         2367,  2084,  1996,  2294,  2779,  1012,  2144,  1996,  5159,  3643,
         2003,  2682,  1996, 19701,  3643,  1998,  2057,  2031,  5837,  1996,
        19701, 10744,  1010,  2057,  2052, 16519,  2008,  7190,  1999,  1996,
         2679,  2020, 12430,  2006,  2779,  1999,  2418,  2084,  1999,  2294,
         1012,   102])"
1779,1,"['hypothesis test', 'hypothesis', 'test']", Onesample means with the tdistribution,seg_63,"once you’ve determined a one-mean hypothesis test is the correct procedure, there are four steps to completing the test:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  2320,  2017,  1521,  2310,  4340,  1037,  2028,  1011,  2812,
        10744,  3231,  2003,  1996,  6149,  7709,  1010,  2045,  2024,  2176,
         4084,  2000,  7678,  1996,  3231,  1024,   102])"
1780,1,"['parameter', 'hypotheses', 'significance level', 'parameter of interest', 'level', 'significance']", Onesample means with the tdistribution,seg_63,"prepare. identify the parameter of interest, list out hypotheses, identify the significance level, and identify x̄, s, and n.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  7374,  1012,  6709,  1996, 16381,  1997,  3037,  1010,  2862,
         2041,  1044, 22571, 14573, 23072,  1010,  6709,  1996,  7784,  2504,
         1010,  1998,  6709,  1060,  1010,  1055,  1010,  1998,  1050,  1012,
          102])"
1781,1,['normal'], Onesample means with the tdistribution,seg_63,check. verify conditions to ensure x̄ is nearly normal.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101,  4638,  1012, 20410,  3785,  2000,  5676,  1060,  2003,  3053,
         3671,  1012,   102])"
1782,0,[], Onesample means with the tdistribution,seg_63,"calculate. if the conditions hold, compute se, compute the t-score, and identify the p-value.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101, 18422,  1012,  2065,  1996,  3785,  2907,  1010, 24134,  7367,
         1010, 24134,  1996,  1056,  1011,  3556,  1010,  1998,  6709,  1996,
         1052,  1011,  3643,  1012,   102])"
1783,1,"['hypothesis test', 'hypothesis', 'test']", Onesample means with the tdistribution,seg_63,"conclude. evaluate the hypothesis test by comparing the p-value to α, and provide a conclusion in the context of the problem.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3924, 16613,  2571,  2965,  2007,  1996, 14595,  2923,  3089, 29446])","tensor([  101, 16519,  1012, 16157,  1996, 10744,  3231,  2011, 13599,  1996,
         1052,  1011,  3643,  2000,  1155,  1010,  1998,  3073,  1037,  7091,
         1999,  1996,  6123,  1997,  1996,  3291,  1012,   102])"
1784,1,['average'], Paired data,seg_65,"in an earlier edition of this textbook, we found that amazon prices were, on average, lower than those of the ucla bookstore for ucla courses in 2010. it’s been several years, and many stores have adapted to the online market, so we wondered, how is the ucla bookstore doing today?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  1999,  2019,  3041,  3179,  1997,  2023, 16432,  1010,  2057,
         2179,  2008,  9733,  7597,  2020,  1010,  2006,  2779,  1010,  2896,
         2084,  2216,  1997,  1996, 12389, 21785,  2005, 12389,  5352,  1999,
         2230,  1012,  2009,  1521,  1055,  2042,  2195,  2086,  1010,  1998,
         2116,  5324,  2031,  5967,  2000,  1996,  3784,  3006,  1010,  2061,
         2057,  4999,  1010,  2129,  2003,  1996, 12389, 21785,  2725,  2651,
         1029,   102])"
1785,1,"['set', 'data set', 'data']", Paired data,seg_65,"we sampled 201 ucla courses. of those, 68 required books could be found on amazon. a portion of the data set from these courses is shown in figure 7.8, where prices are in us dollars.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2057, 18925, 16345, 12389,  5352,  1012,  1997,  2216,  1010,
         6273,  3223,  2808,  2071,  2022,  2179,  2006,  9733,  1012,  1037,
         4664,  1997,  1996,  2951,  2275,  2013,  2122,  5352,  2003,  3491,
         1999,  3275,  1021,  1012,  1022,  1010,  2073,  7597,  2024,  1999,
         2149,  6363,  1012,   102])"
1786,1,"['cases', 'set', 'data set', 'data']", Paired data,seg_65,figure 7.8: four cases of the textbooks data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([12739,  2951])","tensor([  101,  3275,  1021,  1012,  1022,  1024,  2176,  3572,  1997,  1996,
        18841,  2951,  2275,  1012,   102])"
1787,1,"['observations', 'paired observations', 'paired']", Paired data,seg_65,7.2.1 paired observations,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([12739,  2951])","tensor([  101,  1021,  1012,  1016,  1012,  1015, 12739,  9420,   102])"
1788,1,"['paired', 'sets', 'set', 'observations', 'data set', 'data']", Paired data,seg_65,"each textbook has two corresponding prices in the data set: one for the ucla bookstore and one for amazon. when two sets of observations have this special correspondence, they are said to be paired.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2169, 16432,  2038,  2048,  7978,  7597,  1999,  1996,  2951,
         2275,  1024,  2028,  2005,  1996, 12389, 21785,  1998,  2028,  2005,
         9733,  1012,  2043,  2048,  4520,  1997,  9420,  2031,  2023,  2569,
        11061,  1010,  2027,  2024,  2056,  2000,  2022, 12739,  1012,   102])"
1789,1,"['paired', 'sets', 'observation', 'set', 'observations', 'data set', 'data']", Paired data,seg_65,two sets of observations are paired if each observation in one set has a special correspondence or connection with exactly one observation in the other data set.,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2048,  4520,  1997,  9420,  2024, 12739,  2065,  2169,  8089,
         1999,  2028,  2275,  2038,  1037,  2569, 11061,  2030,  4434,  2007,
         3599,  2028,  8089,  1999,  1996,  2060,  2951,  2275,  1012,   102])"
1790,1,"['paired', 'paired data', 'set', 'observations', 'outcomes', 'data set', 'data', 'variable']", Paired data,seg_65,"to analyze paired data, it is often useful to look at the difference in outcomes of each pair of observations. in the textbook data, we look at the differences in prices, which is represented as the price difference variable in the data set. here the differences are taken as",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12739,  2951])","tensor([  101,  2000, 17908, 12739,  2951,  1010,  2009,  2003,  2411,  6179,
         2000,  2298,  2012,  1996,  4489,  1999, 13105,  1997,  2169,  3940,
         1997,  9420,  1012,  1999,  1996, 16432,  2951,  1010,  2057,  2298,
         2012,  1996,  5966,  1999,  7597,  1010,  2029,  2003,  3421,  2004,
         1996,  3976,  4489,  8023,  1999,  1996,  2951,  2275,  1012,  2182,
         1996,  5966,  2024,  2579,  2004,   102])"
1791,0,[], Paired data,seg_65,ucla bookstore price−amazon price,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12739,  2951])","tensor([  101, 12389, 21785,  3976, 22543,  8067, 11597,  3976,   102])"
1792,1,"['paired', 'paired data', 'observations', 'histogram', 'paired observations', 'data']", Paired data,seg_65,"it is important that we always subtract using a consistent order; here amazon prices are always subtracted from ucla prices. the first difference shown in figure 7.8 is computed as 47.97 − 47.45 = 0.52. similarly, the second difference is computed as 14.26 − 13.55 = 0.71, and the third is 13.50 − 12.53 = 0.97. a histogram of the differences is shown in figure 7.9. using differences between paired observations is a common and useful way to analyze paired data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2009,  2003,  2590,  2008,  2057,  2467,  4942,  6494,  6593,
         2478,  1037,  8335,  2344,  1025,  2182,  9733,  7597,  2024,  2467,
         4942, 24301,  2013, 12389,  7597,  1012,  1996,  2034,  4489,  3491,
         1999,  3275,  1021,  1012,  1022,  2003, 24806,  2004,  4700,  1012,
         5989,  1597,  4700,  1012,  3429,  1027,  1014,  1012,  4720,  1012,
         6660,  1010,  1996,  2117,  4489,  2003, 24806,  2004,  2403,  1012,
         2656,  1597,  2410,  1012,  4583,  1027,  1014,  1012,  6390,  1010,
         1998,  1996,  2353,  2003,  2410,  1012,  2753,  1597,  2260,  1012,
         5187,  1027,  1014,  1012,  5989,  1012,  1037,  2010,  3406, 13113,
         1997,  1996,  5966,  2003,  3491,  1999,  3275,  1021,  1012,  1023,
         1012,  2478,  5966,  2090, 12739,  9420,  2003,  1037,  2691,  1998,
         6179,  2126,  2000, 17908, 12739,  2951,  1012,   102])"
1793,1,['histogram'], Paired data,seg_65,figure 7.9: histogram of the difference in price for each book sampled.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12739,  2951])","tensor([  101,  3275,  1021,  1012,  1023,  1024,  2010,  3406, 13113,  1997,
         1996,  4489,  1999,  3976,  2005,  2169,  2338, 18925,  1012,   102])"
1794,1,"['paired', 'paired data', 'data']", Paired data,seg_65,7.2.2 inference for paired data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([12739,  2951])","tensor([  101,  1021,  1012,  1016,  1012,  1016, 28937,  2005, 12739,  2951,
          102])"
1795,1,"['paired', 'paired data', 'set', 'data set', 'data']", Paired data,seg_65,"to analyze a paired data set, we simply analyze the differences. we can use the same tdistribution techniques we applied in section 7.1.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2000, 17908,  1037, 12739,  2951,  2275,  1010,  2057,  3432,
        17908,  1996,  5966,  1012,  2057,  2064,  2224,  1996,  2168, 14595,
         2923,  3089, 29446,  5461,  2057,  4162,  1999,  2930,  1021,  1012,
         1015,  1012,   102])"
1796,1,['statistics'], Paired data,seg_65,figure 7.10: summary statistics for the 68 price differences.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  3275,  1021,  1012,  2184,  1024, 12654,  6747,  2005,  1996,
         6273,  3976,  5966,  1012,   102])"
1797,1,"['hypothesis', 'hypothesis test', 'average', 'test']", Paired data,seg_65,"set up a hypothesis test to determine whether, on average, there is a difference between amazon’s price for a book and the ucla bookstore’s price. also, check the conditions for whether we can move forward with the test using the t-distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2275,  2039,  1037, 10744,  3231,  2000,  5646,  3251,  1010,
         2006,  2779,  1010,  2045,  2003,  1037,  4489,  2090,  9733,  1521,
         1055,  3976,  2005,  1037,  2338,  1998,  1996, 12389, 21785,  1521,
         1055,  3976,  1012,  2036,  1010,  4638,  1996,  3785,  2005,  3251,
         2057,  2064,  2693,  2830,  2007,  1996,  3231,  2478,  1996,  1056,
         1011,  4353,  1012,   102])"
1798,1,['average'], Paired data,seg_65,we are considering two scenarios: there is no difference or there is some difference in average prices.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2057,  2024,  6195,  2048, 16820,  1024,  2045,  2003,  2053,
         4489,  2030,  2045,  2003,  2070,  4489,  1999,  2779,  7597,  1012,
          102])"
1799,1,['average'], Paired data,seg_65,h0: µdiff = 0. there is no difference in the average textbook price.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  1044,  2692,  1024,  1085,  4305,  4246,  1027,  1014,  1012,
         2045,  2003,  2053,  4489,  1999,  1996,  2779, 16432,  3976,  1012,
          102])"
1800,1,['average'], Paired data,seg_65,ha: µdiff =6 0. there is a difference in average prices.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([12739,  2951])","tensor([ 101, 5292, 1024, 1085, 4305, 4246, 1027, 1020, 1014, 1012, 2045, 2003,
        1037, 4489, 1999, 2779, 7597, 1012,  102])"
1801,1,"['observations', 'random sample', 'independence', 'sample', 'random', 'outliers', 'simple random sample', 'normality']", Paired data,seg_65,"next, we check the independence and normality conditions. the observations are based on a simple random sample, so independence is reasonable. while there are some outliers, n = 68 and none of the outliers are particularly extreme, so the normality of x̄ is satisfied. with these conditions satisfied, we can move forward with the t-distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12739,  2951])","tensor([  101,  2279,  1010,  2057,  4638,  1996,  4336,  1998,  3671,  3012,
         3785,  1012,  1996,  9420,  2024,  2241,  2006,  1037,  3722,  6721,
         7099,  1010,  2061,  4336,  2003,  9608,  1012,  2096,  2045,  2024,
         2070,  2041, 14355,  2015,  1010,  1050,  1027,  6273,  1998,  3904,
         1997,  1996,  2041, 14355,  2015,  2024,  3391,  6034,  1010,  2061,
         1996,  3671,  3012,  1997,  1060,  2003,  8510,  1012,  2007,  2122,
         3785,  8510,  1010,  2057,  2064,  2693,  2830,  2007,  1996,  1056,
         1011,  4353,  1012,   102])"
1802,1,"['hypothesis test', 'hypothesis', 'test']", Paired data,seg_65,complete the hypothesis test started in example 7.17.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  3143,  1996, 10744,  3231,  2318,  1999,  2742,  1021,  1012,
         2459,  1012,   102])"
1803,1,"['deviation', 'associated', 'standard deviation', 'standard', 'standard error', 'error', 'test']", Paired data,seg_65,to compute the test compute the standard error associated with x̄diff using the standard deviation of the differences (sdiff = 13.42) and the number of differences (ndiff = 68):,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2000, 24134,  1996,  3231, 24134,  1996,  3115,  7561,  3378,
         2007,  1060,  4305,  4246,  2478,  1996,  3115, 24353,  1997,  1996,
         5966,  1006, 17371, 13355,  1027,  2410,  1012,  4413,  1007,  1998,
         1996,  2193,  1997,  5966,  1006,  1050,  4305,  4246,  1027,  6273,
         1007,  1024,   102])"
1804,1,"['mean', 'test statistic', 'condition', 'statistic', 'test']", Paired data,seg_65,the test statistic is the t-score of x̄diff under the null condition that the actual mean difference is 0:,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  1996,  3231, 28093,  6553,  2003,  1996,  1056,  1011,  3556,
         1997,  1060,  4305,  4246,  2104,  1996, 19701,  4650,  2008,  1996,
         5025,  2812,  4489,  2003,  1014,  1024,   102])"
1805,1,"['distribution', 'tails', 'sampling', 'sampling distribution']", Paired data,seg_65,"to visualize the p-value, the sampling distribution of x̄diff is drawn as though h0 is true, and the p-value is represented by the two shaded tails:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([12739,  2951])","tensor([  101,  2000,  5107,  4697,  1996,  1052,  1011,  3643,  1010,  1996,
        16227,  4353,  1997,  1060,  4305,  4246,  2003,  4567,  2004,  2295,
         1044,  2692,  2003,  2995,  1010,  1998,  1996,  1052,  1011,  3643,
         2003,  3421,  2011,  1996,  2048, 25273, 17448,  1024,   102])"
1806,1,"['degrees of freedom', 'statistical']", Paired data,seg_65,"the degrees of freedom is df = 68 − 1 = 67. using statistical software, we find the one-tail area of 0.0156. doubling this area gives the p-value: 0.0312.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  1996,  5445,  1997,  4071,  2003,  1040,  2546,  1027,  6273,
         1597,  1015,  1027,  6163,  1012,  2478,  7778,  4007,  1010,  2057,
         2424,  1996,  2028,  1011,  5725,  2181,  1997,  1014,  1012,  5890,
        26976,  1012, 19383,  2023,  2181,  3957,  1996,  1052,  1011,  3643,
         1024,  1014,  1012,  6021, 12521,  1012,   102])"
1807,1,"['null hypothesis', 'average', 'hypothesis']", Paired data,seg_65,"because the p-value is less than 0.05, we reject the null hypothesis. amazon prices are, on average, lower than the ucla bookstore prices for ucla courses.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12739,  2951])","tensor([  101,  2138,  1996,  1052,  1011,  3643,  2003,  2625,  2084,  1014,
         1012,  5709,  1010,  2057, 15454,  1996, 19701, 10744,  1012,  9733,
         7597,  2024,  1010,  2006,  2779,  1010,  2896,  2084,  1996, 12389,
        21785,  7597,  2005, 12389,  5352,  1012,   102])"
1808,1,"['interval', 'confidence', 'average', 'confidence interval']", Paired data,seg_65,create a 95% confidence interval for the average price difference between books at the ucla bookstore and books on amazon.10,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  3443,  1037,  5345,  1003,  7023, 13483,  2005,  1996,  2779,
         3976,  4489,  2090,  2808,  2012,  1996, 12389, 21785,  1998,  2808,
         2006,  9733,  1012,  2184,   102])"
1809,1,['average'], Paired data,seg_65,"we have strong evidence that amazon is, on average, less expensive. how should this conclusion affect ucla student buying habits? should ucla students always buy their books on amazon?11",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12739,  2951])","tensor([  101,  2057,  2031,  2844,  3350,  2008,  9733,  2003,  1010,  2006,
         2779,  1010,  2625,  6450,  1012,  2129,  2323,  2023,  7091,  7461,
        12389,  3076,  9343, 14243,  1029,  2323, 12389,  2493,  2467,  4965,
         2037,  2808,  2006,  9733,  1029,  2340,   102])"
1810,0,[], Paired data,seg_65,differences in number of days,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([12739,  2951])","tensor([ 101, 5966, 1999, 2193, 1997, 2420,  102])"
1811,1,['scores'], Paired data,seg_65,0 20 −20 −10 0 10 20 read write differences in scores (read − write) y,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12739,  2951])","tensor([  101,  1014,  2322,  1597, 11387,  1597, 10790,  1014,  2184,  2322,
         3191,  4339,  5966,  1999,  7644,  1006,  3191,  1597,  4339,  1007,
         1061,   102])"
1812,1,"['paired', 'estimate', 'point estimate', 'sample', 'condition', 'standard', 'population', 'standard error', 'data', 'error']", Difference of two means,seg_67,"in this section we consider a difference in two population means, µ1 − µ2, under the condition that the data are not paired. just as with a single sample, we identify conditions to ensure we can use the t-distribution with a point estimate of the difference, x̄1− x̄2, and a new standard error formula. other than these two differences, the details are almost identical to the one-mean procedures.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1999,  2023,  2930,  2057,  5136,  1037,  4489,  1999,  2048,
         2313,  2965,  1010,  1085,  2487,  1597,  1085,  2475,  1010,  2104,
         1996,  4650,  2008,  1996,  2951,  2024,  2025, 12739,  1012,  2074,
         2004,  2007,  1037,  2309,  7099,  1010,  2057,  6709,  3785,  2000,
         5676,  2057,  2064,  2224,  1996,  1056,  1011,  4353,  2007,  1037,
         2391, 10197,  1997,  1996,  4489,  1010,  1060,  2487, 22543,  1060,
         2475,  1010,  1998,  1037,  2047,  3115,  7561,  5675,  1012,  2060,
         2084,  2122,  2048,  5966,  1010,  1996,  4751,  2024,  2471,  7235,
         2000,  1996,  2028,  1011,  2812,  8853,  1012,   102])"
1813,1,"['function', 'variation', 'statistically significant', 'average']", Difference of two means,seg_67,"we apply these methods in three contexts: determining whether stem cells can improve heart function, exploring the relationship between pregnant womens’ smoking habits and birth weights of newborns, and exploring whether there is statistically significant evidence that one variation of an exam is harder than another variation. this section is motivated by questions like “is there convincing evidence that newborns from mothers who smoke have a different average birth weight than newborns from mothers who don’t smoke?”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2057,  6611,  2122,  4725,  1999,  2093, 18046,  1024, 12515,
         3251,  7872,  4442,  2064,  5335,  2540,  3853,  1010, 11131,  1996,
         3276,  2090,  6875,  2308,  2015,  1521,  9422, 14243,  1998,  4182,
        15871,  1997, 20662,  2015,  1010,  1998, 11131,  3251,  2045,  2003,
         7778,  2135,  3278,  3350,  2008,  2028,  8386,  1997,  2019, 11360,
         2003,  6211,  2084,  2178,  8386,  1012,  2023,  2930,  2003, 12774,
         2011,  3980,  2066,  1523,  2003,  2045, 13359,  3350,  2008, 20662,
         2015,  2013, 10756,  2040,  5610,  2031,  1037,  2367,  2779,  4182,
         3635,  2084, 20662,  2015,  2013, 10756,  2040,  2123,  1521,  1056,
         5610,  1029,  1524,   102])"
1814,1,"['interval', 'confidence', 'confidence interval']", Difference of two means,seg_67,7.3.1 confidence interval for a difference of means,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1021,  1012,  1017,  1012,  1015,  7023, 13483,  2005,  1037,
         4489,  1997,  2965,   102])"
1815,1,"['confidence interval', 'sets', 'treatment', 'confidence', 'interval', 'statistics', 'data', 'test', 'function', 'histograms', 'control group', 'control', 'experiment', 'data sets']", Difference of two means,seg_67,"does treatment using embryonic stem cells (escs) help improve heart function following a heart attack? figure 7.11 contains summary statistics for an experiment to test escs in sheep that had a heart attack. each of these sheep was randomly assigned to the esc or control group, and the change in their hearts’ pumping capacity was measured in the study. figure 7.12 provides histograms of the two data sets. a positive value corresponds to increased pumping capacity, which generally suggests a stronger recovery. our goal will be to identify a 95% confidence interval for the effect of escs on the change in heart pumping capacity relative to the control group.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2515,  3949,  2478, 28086,  8713,  7872,  4442,  1006,  9686,
         6169,  1007,  2393,  5335,  2540,  3853,  2206,  1037,  2540,  2886,
         1029,  3275,  1021,  1012,  2340,  3397, 12654,  6747,  2005,  2019,
         7551,  2000,  3231,  9686,  6169,  1999,  8351,  2008,  2018,  1037,
         2540,  2886,  1012,  2169,  1997,  2122,  8351,  2001, 18154,  4137,
         2000,  1996,  9686,  2278,  2030,  2491,  2177,  1010,  1998,  1996,
         2689,  1999,  2037,  8072,  1521, 14107,  3977,  2001,  7594,  1999,
         1996,  2817,  1012,  3275,  1021,  1012,  2260,  3640,  2010,  3406,
        13113,  2015,  1997,  1996,  2048,  2951,  4520,  1012,  1037,  3893,
         3643, 14788,  2000,  3445, 14107,  3977,  1010,  2029,  3227,  6083,
         1037,  6428,  7233,  1012,  2256,  3125,  2097,  2022,  2000,  6709,
         1037,  5345,  1003,  7023, 13483,  2005,  1996,  3466,  1997,  9686,
         6169,  2006,  1996,  2689,  1999,  2540, 14107,  3977,  5816,  2000,
         1996,  2491,  2177,  1012,   102])"
1816,1,['control'], Difference of two means,seg_67,n x̄ s escs 9 3.50 5.17 control 9 -4.33 2.76,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 1050, 1060, 1055, 9686, 6169, 1023, 1017, 1012, 2753, 1019, 1012,
        2459, 2491, 1023, 1011, 1018, 1012, 3943, 1016, 1012, 6146,  102])"
1817,1,['statistics'], Difference of two means,seg_67,figure 7.11: summary statistics of the embryonic stem cell study.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2340,  1024, 12654,  6747,  1997,  1996,
        28086,  8713,  7872,  3526,  2817,  1012,   102])"
1818,1,"['estimate', 'point estimate', 'sample', 'sample means', 'variable']", Difference of two means,seg_67,the point estimate of the difference in the heart pumping variable is straightforward to find: it is the difference in the sample means.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996,  2391, 10197,  1997,  1996,  4489,  1999,  1996,  2540,
        14107,  8023,  2003, 19647,  2000,  2424,  1024,  2009,  2003,  1996,
         4489,  1999,  1996,  7099,  2965,  1012,   102])"
1819,1,"['cases', 'confident', 'independence', 'outliers', 'independent', 'model', 'normality']", Difference of two means,seg_67,"for the question of whether we can model this difference using a t-distribution, we’ll need to check new conditions. like the 2-proportion cases, we will require a more robust version of independence so we are confident the two groups are also independent. secondly, we also check for normality in each group separately, which in practice is a check for outliers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2005,  1996,  3160,  1997,  3251,  2057,  2064,  2944,  2023,
         4489,  2478,  1037,  1056,  1011,  4353,  1010,  2057,  1521,  2222,
         2342,  2000,  4638,  2047,  3785,  1012,  2066,  1996,  1016,  1011,
        10817,  3572,  1010,  2057,  2097,  5478,  1037,  2062, 15873,  2544,
         1997,  4336,  2061,  2057,  2024,  9657,  1996,  2048,  2967,  2024,
         2036,  2981,  1012, 16378,  1010,  2057,  2036,  4638,  2005,  3671,
         3012,  1999,  2169,  2177, 10329,  1010,  2029,  1999,  3218,  2003,
         1037,  4638,  2005,  2041, 14355,  2015,  1012,   102])"
1820,1,['standardized'], Difference of two means,seg_67,the t-distribution can be used for inference when working with the standardized difference of two means if,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996,  1056,  1011,  4353,  2064,  2022,  2109,  2005, 28937,
         2043,  2551,  2007,  1996, 16367,  4489,  1997,  2048,  2965,  2065,
          102])"
1821,1,"['random samples', 'independence', 'random', 'experiment', 'samples', 'randomized experiment', 'data', 'independent']", Difference of two means,seg_67,"• independence, extended. the data are independent within and between the two groups, e.g. the data come from independent random samples or from a randomized experiment.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 1528, 4336, 1010, 3668, 1012, 1996, 2951, 2024, 2981, 2306, 1998,
        2090, 1996, 2048, 2967, 1010, 1041, 1012, 1043, 1012, 1996, 2951, 2272,
        2013, 2981, 6721, 8168, 2030, 2013, 1037, 6721, 3550, 7551, 1012,  102])"
1822,1,"['outliers', 'normality']", Difference of two means,seg_67,• normality. we check the outliers rules of thumb for each group separately.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1528,  3671,  3012,  1012,  2057,  4638,  1996,  2041, 14355,
         2015,  3513,  1997,  7639,  2005,  2169,  2177, 10329,  1012,   102])"
1823,1,"['standard error', 'standard', 'error']", Difference of two means,seg_67,the standard error may be computed as,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996,  3115,  7561,  2089,  2022, 24806,  2004,   102])"
1824,1,['degrees of freedom'], Difference of two means,seg_67,"the official formula for the degrees of freedom is quite complex and is generally computed using software, so instead you may use the smaller of n1 − 1 and n2 − 1 for the degrees of freedom if software isn’t readily available.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996,  2880,  5675,  2005,  1996,  5445,  1997,  4071,  2003,
         3243,  3375,  1998,  2003,  3227, 24806,  2478,  4007,  1010,  2061,
         2612,  2017,  2089,  2224,  1996,  3760,  1997,  1050,  2487,  1597,
         1015,  1998,  1050,  2475,  1597,  1015,  2005,  1996,  5445,  1997,
         4071,  2065,  4007,  3475,  1521,  1056, 12192,  2800,  1012,   102])"
1825,1,"['estimate', 'point estimate']", Difference of two means,seg_67,"can the t-distribution be used to make inference using the point estimate, x̄esc − x̄control = 7.83?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2064,  1996,  1056,  1011,  4353,  2022,  2109,  2000,  2191,
        28937,  2478,  1996,  2391, 10197,  1010,  1060,  2229,  2278,  1597,
         1060,  8663, 13181,  2140,  1027,  1021,  1012,  6640,  1029,   102])"
1826,1,['independence'], Difference of two means,seg_67,"first, we check for independence. because the sheep were randomized into the groups, independence within and between groups is satisfied.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 2034, 1010, 2057, 4638, 2005, 4336, 1012, 2138, 1996, 8351, 2020,
        6721, 3550, 2046, 1996, 2967, 1010, 4336, 2306, 1998, 2090, 2967, 2003,
        8510, 1012,  102])"
1827,1,"['variability', 'outliers']", Difference of two means,seg_67,"figure 7.12 does not reveal any clear outliers in either group. (the esc group does look a bit more variability, but this is not the same as having clear outliers.)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2260,  2515,  2025,  7487,  2151,  3154,
         2041, 14355,  2015,  1999,  2593,  2177,  1012,  1006,  1996,  9686,
         2278,  2177,  2515,  2298,  1037,  2978,  2062, 28436,  1010,  2021,
         2023,  2003,  2025,  1996,  2168,  2004,  2383,  3154,  2041, 14355,
         2015,  1012,  1007,   102])"
1828,1,"['sample', 'model', 'sample means']", Difference of two means,seg_67,"with both conditions met, we can use the t-distribution to model the difference of sample means.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 2007, 2119, 3785, 2777, 1010, 2057, 2064, 2224, 1996, 1056, 1011,
        4353, 2000, 2944, 1996, 4489, 1997, 7099, 2965, 1012,  102])"
1829,0,[], Difference of two means,seg_67,embryonic stem cell transplant,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101, 28086,  8713,  7872,  3526, 22291,   102])"
1830,1,['function'], Difference of two means,seg_67,change in heart pumping function,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2689,  1999,  2540, 14107,  3853,   102])"
1831,1,['treatment'], Difference of two means,seg_67,control (no treatment),tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 2491, 1006, 2053, 3949, 1007,  102])"
1832,1,['function'], Difference of two means,seg_67,change in heart pumping function,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2689,  1999,  2540, 14107,  3853,   102])"
1833,1,"['control group', 'histograms', 'control']", Difference of two means,seg_67,figure 7.12: histograms for both the embryonic stem cell and control group.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2260,  1024,  2010,  3406, 13113,  2015,
         2005,  2119,  1996, 28086,  8713,  7872,  3526,  1998,  2491,  2177,
         1012,   102])"
1834,1,"['error', 'sample standard deviations', 'sample', 'standard', 'population', 'deviations', 'standard error', 'case', 'standard deviations']", Difference of two means,seg_67,"as with the one-sample case, we always compute the standard error using sample standard deviations rather than population standard deviations:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        1., 1., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2004,  2007,  1996,  2028,  1011,  7099,  2553,  1010,  2057,
         2467, 24134,  1996,  3115,  7561,  2478,  7099,  3115, 24353,  2015,
         2738,  2084,  2313,  3115, 24353,  2015,  1024,   102])"
1835,1,"['tail', 'tail areas', 'degrees of freedom', 'statistical', 'case']", Difference of two means,seg_67,"generally, we use statistical software to find the appropriate degrees of freedom, or if software isn’t available, we can use the smaller of n1 − 1 and n2 − 1 for the degrees of freedom, e.g. if using a t-table to find tail areas. for transparency in the examples and guided practice, we’ll use the latter approach for finding df ; in the case of the esc example, this means we’ll use df = 8.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3227,  1010,  2057,  2224,  7778,  4007,  2000,  2424,  1996,
         6413,  5445,  1997,  4071,  1010,  2030,  2065,  4007,  3475,  1521,
         1056,  2800,  1010,  2057,  2064,  2224,  1996,  3760,  1997,  1050,
         2487,  1597,  1015,  1998,  1050,  2475,  1597,  1015,  2005,  1996,
         5445,  1997,  4071,  1010,  1041,  1012,  1043,  1012,  2065,  2478,
         1037,  1056,  1011,  2795,  2000,  2424,  5725,  2752,  1012,  2005,
        16987,  1999,  1996,  4973,  1998,  8546,  3218,  1010,  2057,  1521,
         2222,  2224,  1996,  3732,  3921,  2005,  4531,  1040,  2546,  1025,
         1999,  1996,  2553,  1997,  1996,  9686,  2278,  2742,  1010,  2023,
         2965,  2057,  1521,  2222,  2224,  1040,  2546,  1027,  1022,  1012,
          102])"
1836,1,"['interval', 'confidence', 'confidence interval']", Difference of two means,seg_67,calculate a 95% confidence interval for the effect of escs on the change in heart pumping capacity of sheep after they’ve suffered a heart attack.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101, 18422,  1037,  5345,  1003,  7023, 13483,  2005,  1996,  3466,
         1997,  9686,  6169,  2006,  1996,  2689,  1999,  2540, 14107,  3977,
         1997,  8351,  2044,  2027,  1521,  2310,  4265,  1037,  2540,  2886,
         1012,   102])"
1837,1,"['sample', 'standard', 'standard error', 'error']", Difference of two means,seg_67,we will use the sample difference and the standard error that we computed earlier calculations:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2057,  2097,  2224,  1996,  7099,  4489,  1998,  1996,  3115,
         7561,  2008,  2057, 24806,  3041, 16268,  1024,   102])"
1838,1,"['interval', 'critical value', 'confidence interval', 'confidence']", Difference of two means,seg_67,"using df = 8, we can identify the critical value of t?8 = 2.31 for a 95% confidence interval. finally, we can enter the values into the confidence interval formula:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2478,  1040,  2546,  1027,  1022,  1010,  2057,  2064,  6709,
         1996,  4187,  3643,  1997,  1056,  1029,  1022,  1027,  1016,  1012,
         2861,  2005,  1037,  5345,  1003,  7023, 13483,  1012,  2633,  1010,
         2057,  2064,  4607,  1996,  5300,  2046,  1996,  7023, 13483,  5675,
         1024,   102])"
1839,1,['estimate'], Difference of two means,seg_67,"point estimate ± t? × se → 7.83 ± 2.31× 1.95 → (3.32, 12.34)",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2391, 10197,  1081,  1056,  1029,  1095,  7367,  1585,  1021,
         1012,  6640,  1081,  1016,  1012,  2861, 26306,  1015,  1012,  5345,
         1585,  1006,  1017,  1012,  3590,  1010,  2260,  1012,  4090,  1007,
          102])"
1840,1,"['function', 'confident']", Difference of two means,seg_67,we are 95% confident that embryonic stem cells improve the heart’s pumping function in sheep that have suffered a heart attack by 3.32% to 12.34%.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2057,  2024,  5345,  1003,  9657,  2008, 28086,  8713,  7872,
         4442,  5335,  1996,  2540,  1521,  1055, 14107,  3853,  1999,  8351,
         2008,  2031,  4265,  1037,  2540,  2886,  2011,  1017,  1012,  3590,
         1003,  2000,  2260,  1012,  4090,  1003,  1012,   102])"
1841,1,"['statistical', 'statistical inference']", Difference of two means,seg_67,"as with past statistical inference applications, there is a well-trodden procedure.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2004,  2007,  2627,  7778, 28937,  5097,  1010,  2045,  2003,
         1037,  2092,  1011, 19817,  7716,  4181,  7709,  1012,   102])"
1842,1,"['set', 'hypotheses', 'information']", Difference of two means,seg_67,"prepare. retrieve critical contextual information, and if appropriate, set up hypotheses.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1.,
        1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  7374,  1012, 12850,  4187,  6123,  8787,  2592,  1010,  1998,
         2065,  6413,  1010,  2275,  2039,  1044, 22571, 14573, 23072,  1012,
          102])"
1843,0,[], Difference of two means,seg_67,check. ensure the required conditions are reasonably satisfied.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  4638,  1012,  5676,  1996,  3223,  3785,  2024, 16286,  8510,
         1012,   102])"
1844,1,"['confidence interval', 'interval', 'standard', 'standard error', 'confidence', 'error']", Difference of two means,seg_67,"calculate. find the standard error, and then construct a confidence interval, or if conducting a",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101, 18422,  1012,  2424,  1996,  3115,  7561,  1010,  1998,  2059,
         9570,  1037,  7023, 13483,  1010,  2030,  2065,  9283,  1037,   102])"
1845,1,"['test statistic', 'statistic', 'test']", Difference of two means,seg_67,"hypothesis test, find a test statistic and p-value.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101, 10744,  3231,  1010,  2424,  1037,  3231, 28093,  6553,  1998,
         1052,  1011,  3643,  1012,   102])"
1846,1,['results'], Difference of two means,seg_67,conclude. interpret the results in the context of the application.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101, 16519,  1012, 17841,  1996,  3463,  1999,  1996,  6123,  1997,
         1996,  4646,  1012,   102])"
1847,0,[], Difference of two means,seg_67,"the details change a little from one setting to the next, but this general approach remain the same.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 1996, 4751, 2689, 1037, 2210, 2013, 2028, 4292, 2000, 1996, 2279,
        1010, 2021, 2023, 2236, 3921, 3961, 1996, 2168, 1012,  102])"
1848,1,"['hypothesis', 'tests', 'hypothesis tests']", Difference of two means,seg_67,7.3.2 hypothesis tests for the difference of two means,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1021,  1012,  1017,  1012,  1016, 10744,  5852,  2005,  1996,
         4489,  1997,  2048,  2965,   102])"
1849,1,"['cases', 'data set', 'set', 'random sample', 'sample', 'random', 'variables', 'average', 'data', 'variable']", Difference of two means,seg_67,"a data set called ncbirths represents a random sample of 150 cases of mothers and their newborns in north carolina over a year. four cases from this data set are represented in figure 7.13. we are particularly interested in two variables: weight and smoke. the weight variable represents the weights of the newborns and the smoke variable describes which mothers smoked during pregnancy. we would like to know, is there convincing evidence that newborns from mothers who smoke have a different average birth weight than newborns from mothers who don’t smoke? we will use the north carolina sample to try to answer this question. the smoking group includes 50 cases and the nonsmoking group contains 100 cases.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1037,  2951,  2275,  2170, 13316, 17706, 26830,  5836,  1037,
         6721,  7099,  1997,  5018,  3572,  1997, 10756,  1998,  2037, 20662,
         2015,  1999,  2167,  3792,  2058,  1037,  2095,  1012,  2176,  3572,
         2013,  2023,  2951,  2275,  2024,  3421,  1999,  3275,  1021,  1012,
         2410,  1012,  2057,  2024,  3391,  4699,  1999,  2048, 10857,  1024,
         3635,  1998,  5610,  1012,  1996,  3635,  8023,  5836,  1996, 15871,
         1997,  1996, 20662,  2015,  1998,  1996,  5610,  8023,  5577,  2029,
        10756, 20482,  2076, 10032,  1012,  2057,  2052,  2066,  2000,  2113,
         1010,  2003,  2045, 13359,  3350,  2008, 20662,  2015,  2013, 10756,
         2040,  5610,  2031,  1037,  2367,  2779,  4182,  3635,  2084, 20662,
         2015,  2013, 10756,  2040,  2123,  1521,  1056,  5610,  1029,  2057,
         2097,  2224,  1996,  2167,  3792,  7099,  2000,  3046,  2000,  3437,
         2023,  3160,  1012,  1996,  9422,  2177,  2950,  2753,  3572,  1998,
         1996,  2512, 25855,  6834,  2177,  3397,  2531,  3572,  1012,   102])"
1850,1,"['cases', 'set', 'data set', 'data', 'variable']", Difference of two means,seg_67,"figure 7.13: four cases from the ncbirths data set. the value “na”, shown for the first two entries of the first variable, indicates that piece of data is missing.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2410,  1024,  2176,  3572,  2013,  1996,
        13316, 17706, 26830,  2951,  2275,  1012,  1996,  3643,  1523,  6583,
         1524,  1010,  3491,  2005,  1996,  2034,  2048, 10445,  1997,  1996,
         2034,  8023,  1010,  7127,  2008,  3538,  1997,  2951,  2003,  4394,
         1012,   102])"
1851,1,"['hypotheses', 'average']", Difference of two means,seg_67,set up appropriate hypotheses to evaluate whether there is a relationship between a mother smoking and average birth weight.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2275,  2039,  6413,  1044, 22571, 14573, 23072,  2000, 16157,
         3251,  2045,  2003,  1037,  3276,  2090,  1037,  2388,  9422,  1998,
         2779,  4182,  3635,  1012,   102])"
1852,1,"['null hypothesis', 'hypothesis', 'case']", Difference of two means,seg_67,the null hypothesis represents the case of no difference between the groups.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996, 19701, 10744,  5836,  1996,  2553,  1997,  2053,  4489,
         2090,  1996,  2967,  1012,   102])"
1853,1,['average'], Difference of two means,seg_67,h0: there is no difference in average birth weight for newborns from mothers who did and did not,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1044,  2692,  1024,  2045,  2003,  2053,  4489,  1999,  2779,
         4182,  3635,  2005, 20662,  2015,  2013, 10756,  2040,  2106,  1998,
         2106,  2025,   102])"
1854,1,['statistical'], Difference of two means,seg_67,"smoke. in statistical notation: µn−µs = 0, where µn represents non-smoking mothers and µs represents mothers who smoked.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  5610,  1012,  1999,  7778, 14869,  1024,  1085,  2078, 22543,
        29659,  2015,  1027,  1014,  1010,  2073,  1085,  2078,  5836,  2512,
         1011,  9422, 10756,  1998,  1085,  2015,  5836, 10756,  2040, 20482,
         1012,   102])"
1855,1,['average'], Difference of two means,seg_67,ha: there is some difference in average newborn weights from mothers who did and did not smoke,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  5292,  1024,  2045,  2003,  2070,  4489,  1999,  2779, 20662,
        15871,  2013, 10756,  2040,  2106,  1998,  2106,  2025,  5610,   102])"
1856,1,"['sample', 'model', 'sample means']", Difference of two means,seg_67,we check the two conditions necessary to model the difference in sample means using the t-distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 2057, 4638, 1996, 2048, 3785, 4072, 2000, 2944, 1996, 4489, 1999,
        7099, 2965, 2478, 1996, 1056, 1011, 4353, 1012,  102])"
1857,1,"['observations', 'random sample', 'sample', 'random', 'simple random sample', 'samples', 'data', 'independent']", Difference of two means,seg_67,"• because the data come from a simple random sample, the observations are independent, both within and between samples.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 1528, 2138, 1996, 2951, 2272, 2013, 1037, 3722, 6721, 7099, 1010,
        1996, 9420, 2024, 2981, 1010, 2119, 2306, 1998, 2090, 8168, 1012,  102])"
1858,1,"['sets', 'observations', 'outliers', 'data sets', 'data', 'extreme outliers']", Difference of two means,seg_67,"• with both data sets over 30 observations, we inspect the data in figure 7.14 for any particularly extreme outliers and find none.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1528,  2007,  2119,  2951,  4520,  2058,  2382,  9420,  1010,
         2057, 22459,  1996,  2951,  1999,  3275,  1021,  1012,  2403,  2005,
         2151,  3391,  6034,  2041, 14355,  2015,  1998,  2424,  3904,  1012,
          102])"
1859,1,"['sample', 'sample means']", Difference of two means,seg_67,"since both conditions are satisfied, the difference in sample means may be modeled using a tdistribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2144,  2119,  3785,  2024,  8510,  1010,  1996,  4489,  1999,
         7099,  2965,  2089,  2022, 14440,  2478,  1037, 14595,  2923,  3089,
        29446,  1012,   102])"
1860,0,[], Difference of two means,seg_67,mothers who smoked mothers who did not smoke,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101, 10756,  2040, 20482, 10756,  2040,  2106,  2025,  5610,   102])"
1861,0,[], Difference of two means,seg_67,ycneuqerf 0 2 4 6 8 10 0 2 4 6 8 10 newborn weights (lbs) newborn weights (lbs),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1061,  2278,  2638,  2226,  4160,  2121,  2546,  1014,  1016,
         1018,  1020,  1022,  2184,  1014,  1016,  1018,  1020,  1022,  2184,
        20662, 15871,  1006, 20702,  1007, 20662, 15871,  1006, 20702,  1007,
          102])"
1862,0,[], Difference of two means,seg_67,figure 7.14: the left panel represents birth weights for infants whose mothers smoked. the right panel represents the birth weights for infants whose mothers who did not smoke.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2403,  1024,  1996,  2187,  5997,  5836,
         4182, 15871,  2005, 16725,  3005, 10756, 20482,  1012,  1996,  2157,
         5997,  5836,  1996,  4182, 15871,  2005, 16725,  3005, 10756,  2040,
         2106,  2025,  5610,  1012,   102])"
1863,1,['statistics'], Difference of two means,seg_67,the summary statistics in figure 7.15 may be useful for this guided practice.13,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996, 12654,  6747,  1999,  3275,  1021,  1012,  2321,  2089,
         2022,  6179,  2005,  2023,  8546,  3218,  1012,  2410,   102])"
1864,1,"['estimate', 'point estimate', 'population']", Difference of two means,seg_67,"(a) what is the point estimate of the population difference, µn − µs?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1006,  1037,  1007,  2054,  2003,  1996,  2391, 10197,  1997,
         1996,  2313,  4489,  1010,  1085,  2078,  1597,  1085,  2015,  1029,
          102])"
1865,1,"['estimate', 'point estimate', 'standard', 'standard error', 'error']", Difference of two means,seg_67,(b) compute the standard error of the point estimate from part (a).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1006,  1038,  1007, 24134,  1996,  3115,  7561,  1997,  1996,
         2391, 10197,  2013,  2112,  1006,  1037,  1007,  1012,   102])"
1866,1,['mean'], Difference of two means,seg_67,smoker nonsmoker mean 6.78 7.18 st. dev. 1.43 1.60 samp. size 50 100,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  5610,  2099,  2512, 25855,  5484,  2812,  1020,  1012,  6275,
         1021,  1012,  2324,  2358,  1012, 16475,  1012,  1015,  1012,  4724,
         1015,  1012,  3438,  3520,  2361,  1012,  2946,  2753,  2531,   102])"
1867,1,"['data', 'set', 'statistics', 'data set']", Difference of two means,seg_67,figure 7.15: summary statistics for the ncbirths data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2321,  1024, 12654,  6747,  2005,  1996,
        13316, 17706, 26830,  2951,  2275,  1012,   102])"
1868,1,"['significance level', 'hypothesis', 'level', 'sample', 'hypothesis test', 'significance', 'test']", Difference of two means,seg_67,"complete the hypothesis test started in example 7.23 and guided practice 7.24. use a significance level of α = 0.05. for reference, x̄n − x̄s = 0.40, se = 0.26, and the sample sizes were nn = 100 and ns = 50.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3143,  1996, 10744,  3231,  2318,  1999,  2742,  1021,  1012,
         2603,  1998,  8546,  3218,  1021,  1012,  2484,  1012,  2224,  1037,
         7784,  2504,  1997,  1155,  1027,  1014,  1012,  5709,  1012,  2005,
         4431,  1010,  1060,  2078,  1597,  1060,  2015,  1027,  1014,  1012,
         2871,  1010,  7367,  1027,  1014,  1012,  2656,  1010,  1998,  1996,
         7099, 10826,  2020,  1050,  2078,  1027,  2531,  1998, 24978,  1027,
         2753,  1012,   102])"
1869,1,"['test statistic', 'statistic', 'test']", Difference of two means,seg_67,we can find the test statistic for this test using the values from guided practice 7.24:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2057,  2064,  2424,  1996,  3231, 28093,  6553,  2005,  2023,
         3231,  2478,  1996,  5300,  2013,  8546,  3218,  1021,  1012,  2484,
         1024,   102])"
1870,1,"['tails', 'plot']", Difference of two means,seg_67,the p-value is represented by the two shaded tails in the following plot:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996,  1052,  1011,  3643,  2003,  3421,  2011,  1996,  2048,
        25273, 17448,  1999,  1996,  2206,  5436,  1024,   102])"
1871,1,"['tail', 'degrees of freedom']", Difference of two means,seg_67,"we find the single tail area using software (or the t-table in appendix c.2). we’ll use the smaller of nn−1 = 99 and ns−1 = 49 as the degrees of freedom: df = 49. the one tail area is 0.065; doubling this value gives the two-tail area and p-value, 0.135.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2057,  2424,  1996,  2309,  5725,  2181,  2478,  4007,  1006,
         2030,  1996,  1056,  1011,  2795,  1999, 22524,  1039,  1012,  1016,
         1007,  1012,  2057,  1521,  2222,  2224,  1996,  3760,  1997,  1050,
         2078, 27944,  1027,  5585,  1998, 24978, 27944,  1027,  4749,  2004,
         1996,  5445,  1997,  4071,  1024,  1040,  2546,  1027,  4749,  1012,
         1996,  2028,  5725,  2181,  2003,  1014,  1012,  5757,  2629,  1025,
        19383,  2023,  3643,  3957,  1996,  2048,  1011,  5725,  2181,  1998,
         1052,  1011,  3643,  1010,  1014,  1012, 11502,  1012,   102])"
1872,1,"['hypothesis', 'null hypothesis', 'significance', 'average']", Difference of two means,seg_67,"the p-value is larger than the significance value, 0.05, so we do not reject the null hypothesis. there is insufficient evidence to say there is a difference in average birth weight of newborns from north carolina mothers who did smoke during pregnancy and newborns from north carolina mothers who did not smoke during pregnancy.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996,  1052,  1011,  3643,  2003,  3469,  2084,  1996,  7784,
         3643,  1010,  1014,  1012,  5709,  1010,  2061,  2057,  2079,  2025,
        15454,  1996, 19701, 10744,  1012,  2045,  2003, 13990,  3350,  2000,
         2360,  2045,  2003,  1037,  4489,  1999,  2779,  4182,  3635,  1997,
        20662,  2015,  2013,  2167,  3792, 10756,  2040,  2106,  5610,  2076,
        10032,  1998, 20662,  2015,  2013,  2167,  3792, 10756,  2040,  2106,
         2025,  5610,  2076, 10032,  1012,   102])"
1873,0,[], Difference of two means,seg_67,"we’ve seen much research suggesting smoking is harmful during pregnancy, so how could we fail to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2057,  1521,  2310,  2464,  2172,  2470,  9104,  9422,  2003,
        17631,  2076, 10032,  1010,  2061,  2129,  2071,  2057,  8246,  2000,
          102])"
1874,1,"['null hypothesis', 'hypothesis']", Difference of two means,seg_67,14 reject the null hypothesis in example 7.25?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2403, 15454,  1996, 19701, 10744,  1999,  2742,  1021,  1012,
         2423,  1029,   102])"
1875,1,"['data collection', 'type 2 error', 'data', 'error']", Difference of two means,seg_67,"if we made a type 2 error and there is a difference, what could we have done differently in data collection to be more likely to detect the difference?15",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2065,  2057,  2081,  1037,  2828,  1016,  7561,  1998,  2045,
         2003,  1037,  4489,  1010,  2054,  2071,  2057,  2031,  2589, 11543,
         1999,  2951,  3074,  2000,  2022,  2062,  3497,  2000, 11487,  1996,
         4489,  1029,  2321,   102])"
1876,1,"['sets', 'set', 'data sets', 'data set', 'data']", Difference of two means,seg_67,"public service announcement: while we have used this relatively small data set as an example, larger data sets show that women who smoke tend to have smaller newborns. in fact, some in the tobacco industry actually had the audacity to tout that as a benefit of smoking:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2270,  2326,  8874,  1024,  2096,  2057,  2031,  2109,  2023,
         4659,  2235,  2951,  2275,  2004,  2019,  2742,  1010,  3469,  2951,
         4520,  2265,  2008,  2308,  2040,  5610,  7166,  2000,  2031,  3760,
        20662,  2015,  1012,  1999,  2755,  1010,  2070,  1999,  1996,  9098,
         3068,  2941,  2018,  1996,  8740,  2850, 12972,  2000,  2000,  4904,
         2008,  2004,  1037,  5770,  1997,  9422,  1024,   102])"
1877,0,[], Difference of two means,seg_67,"it’s true. the babies born from women who smoke are smaller, but they’re just as healthy as the babies born from women who do not smoke. and some women would prefer having smaller babies.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2009,  1521,  1055,  2995,  1012,  1996, 10834,  2141,  2013,
         2308,  2040,  5610,  2024,  3760,  1010,  2021,  2027,  1521,  2128,
         2074,  2004,  7965,  2004,  1996, 10834,  2141,  2013,  2308,  2040,
         2079,  2025,  5610,  1012,  1998,  2070,  2308,  2052,  9544,  2383,
         3760, 10834,  1012,   102])"
1878,0,[], Difference of two means,seg_67,"- joseph cullman, philip morris’ chairman of the board ...on cbs’ face the nation, jan 3, 1971",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1011,  3312, 12731,  3363,  2386,  1010,  5170,  6384,  1521,
         3472,  1997,  1996,  2604,  1012,  1012,  1012,  2006,  6568,  1521,
         2227,  1996,  3842,  1010,  5553,  1017,  1010,  3411,   102])"
1879,0,[], Difference of two means,seg_67,fact check: the babies from women who smoke are not actually as healthy as the babies from women,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2755,  4638,  1024,  1996, 10834,  2013,  2308,  2040,  5610,
         2024,  2025,  2941,  2004,  7965,  2004,  1996, 10834,  2013,  2308,
          102])"
1880,1,['case'], Difference of two means,seg_67,7.3.3 case study: two versions of a course exam,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1021,  1012,  1017,  1012,  1017,  2553,  2817,  1024,  2048,
         4617,  1997,  1037,  2607, 11360,   102])"
1881,1,"['variations', 'random', 'statistics', 'average']", Difference of two means,seg_67,"an instructor decided to run two slight variations of the same exam. prior to passing out the exams, she shuffled the exams together to ensure each student received a random version. summary statistics for how students performed on these two exams are shown in figure 7.16. anticipating complaints from students who took version b, she would like to evaluate whether the difference observed in the groups is so large that it provides convincing evidence that version b was more difficult (on average) than version a.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2019,  9450,  2787,  2000,  2448,  2048,  7263,  8358,  1997,
         1996,  2168, 11360,  1012,  3188,  2000,  4458,  2041,  1996, 13869,
         1010,  2016, 18764,  1996, 13869,  2362,  2000,  5676,  2169,  3076,
         2363,  1037,  6721,  2544,  1012, 12654,  6747,  2005,  2129,  2493,
         2864,  2006,  2122,  2048, 13869,  2024,  3491,  1999,  3275,  1021,
         1012,  2385,  1012, 26481, 10821,  2013,  2493,  2040,  2165,  2544,
         1038,  1010,  2016,  2052,  2066,  2000, 16157,  3251,  1996,  4489,
         5159,  1999,  1996,  2967,  2003,  2061,  2312,  2008,  2009,  3640,
        13359,  3350,  2008,  2544,  1038,  2001,  2062,  3697,  1006,  2006,
         2779,  1007,  2084,  2544,  1037,  1012,   102])"
1882,1,"['scores', 'statistics']", Difference of two means,seg_67,figure 7.16: summary statistics of scores for each exam version.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2385,  1024, 12654,  6747,  1997,  7644,
         2005,  2169, 11360,  2544,  1012,   102])"
1883,1,"['hypotheses', 'sample', 'sample means']", Difference of two means,seg_67,"construct hypotheses to evaluate whether the observed difference in sample means, x̄a − x̄b = 5.3, is due to chance. we will later evaluate these hypotheses using α = 0.01.17",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  9570,  1044, 22571, 14573, 23072,  2000, 16157,  3251,  1996,
         5159,  4489,  1999,  7099,  2965,  1010,  1060,  2050,  1597,  1060,
         2497,  1027,  1019,  1012,  1017,  1010,  2003,  2349,  2000,  3382,
         1012,  2057,  2097,  2101, 16157,  2122,  1044, 22571, 14573, 23072,
         2478,  1155,  1027,  1014,  1012,  5890,  1012,  2459,   102])"
1884,1,['hypotheses'], Difference of two means,seg_67,"to evaluate the hypotheses in guided practice 7.28 using the t-distribution, we must first verify conditions.18",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2000, 16157,  1996,  1044, 22571, 14573, 23072,  1999,  8546,
         3218,  1021,  1012,  2654,  2478,  1996,  1056,  1011,  4353,  1010,
         2057,  2442,  2034, 20410,  3785,  1012,  2324,   102])"
1885,1,"['scores', 'independent']", Difference of two means,seg_67,(a) does it seem reasonable that the scores are independent?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 1006, 1037, 1007, 2515, 2009, 4025, 9608, 2008, 1996, 7644, 2024,
        2981, 1029,  102])"
1886,1,['outliers'], Difference of two means,seg_67,(b) any concerns about outliers?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1006,  1038,  1007,  2151,  5936,  2055,  2041, 14355,  2015,
         1029,   102])"
1887,1,"['scores', 'case', 'estimate', 'point estimate', 'sample', 'independent', 'standard', 'samples', 'standard error', 'average', 'data', 'error', 'test']", Difference of two means,seg_67,"after verifying the conditions for each sample and confirming the samples are independent of each other, we are ready to conduct the test using the t-distribution. in this case, we are estimating the true difference in average test scores using the sample data, so the point estimate is x̄a−x̄b = 5.3. the standard error of the estimate can be calculated as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2044, 20410,  2075,  1996,  3785,  2005,  2169,  7099,  1998,
        19195,  1996,  8168,  2024,  2981,  1997,  2169,  2060,  1010,  2057,
         2024,  3201,  2000,  6204,  1996,  3231,  2478,  1996,  1056,  1011,
         4353,  1012,  1999,  2023,  2553,  1010,  2057,  2024,  9765, 22835,
         1996,  2995,  4489,  1999,  2779,  3231,  7644,  2478,  1996,  7099,
         2951,  1010,  2061,  1996,  2391, 10197,  2003,  1060,  2050, 22543,
         2595,  2497,  1027,  1019,  1012,  1017,  1012,  1996,  3115,  7561,
         1997,  1996, 10197,  2064,  2022, 10174,  2004,   102])"
1888,1,"['test statistic', 'statistic', 'test']", Difference of two means,seg_67,"finally, we construct the test statistic:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2633,  1010,  2057,  9570,  1996,  3231, 28093,  6553,  1024,
          102])"
1889,1,['null value'], Difference of two means,seg_67,point estimate− null value (79.4− 74.1)− 0 t = = = 1.15 se 4.62,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2391, 10197, 22543, 19701,  3643,  1006,  6535,  1012,  1018,
        22543,  6356,  1012,  1015,  1007,  1597,  1014,  1056,  1027,  1027,
         1027,  1015,  1012,  2321,  7367,  1018,  1012,  5786,   102])"
1890,1,['degrees of freedom'], Difference of two means,seg_67,"if we have a computer handy, we can identify the degrees of freedom as 45.97. otherwise we use the smaller of n1 − 1 and n2 − 1: df = 26.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2065,  2057,  2031,  1037,  3274, 18801,  1010,  2057,  2064,
         6709,  1996,  5445,  1997,  4071,  2004,  3429,  1012,  5989,  1012,
         4728,  2057,  2224,  1996,  3760,  1997,  1050,  2487,  1597,  1015,
         1998,  1050,  2475,  1597,  1015,  1024,  1040,  2546,  1027,  2656,
         1012,   102])"
1891,1,['degrees of freedom'], Difference of two means,seg_67,figure 7.17: the t-distribution with 26 degrees of freedom and the p-value from exam example represented as the shaded areas.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  3275,  1021,  1012,  2459,  1024,  1996,  1056,  1011,  4353,
         2007,  2656,  5445,  1997,  4071,  1998,  1996,  1052,  1011,  3643,
         2013, 11360,  2742,  3421,  2004,  1996, 25273,  2752,  1012,   102])"
1892,1,['case'], Difference of two means,seg_67,"identify the p-value depicted in figure 7.17 using df = 26, and provide a conclusion in the context of the case study.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 6709, 1996, 1052, 1011, 3643, 8212, 1999, 3275, 1021, 1012, 2459,
        2478, 1040, 2546, 1027, 2656, 1010, 1998, 3073, 1037, 7091, 1999, 1996,
        6123, 1997, 1996, 2553, 2817, 1012,  102])"
1893,0,[], Difference of two means,seg_67,"using software, we can find the one-tail area (0.13) and then double this value to get the two-tail area, which is the p-value: 0.26. (alternatively, we could use the t-table in appendix c.2.)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2478,  4007,  1010,  2057,  2064,  2424,  1996,  2028,  1011,
         5725,  2181,  1006,  1014,  1012,  2410,  1007,  1998,  2059,  3313,
         2023,  3643,  2000,  2131,  1996,  2048,  1011,  5725,  2181,  1010,
         2029,  2003,  1996,  1052,  1011,  3643,  1024,  1014,  1012,  2656,
         1012,  1006, 14084,  1010,  2057,  2071,  2224,  1996,  1056,  1011,
         2795,  1999, 22524,  1039,  1012,  1016,  1012,  1007,   102])"
1894,1,"['scores', 'hypothesis', 'null hypothesis', 'data']", Difference of two means,seg_67,"in guided practice 7.28, we specified that we would use α = 0.01. since the p-value is larger than α, we do not reject the null hypothesis. that is, the data do not convincingly show that one exam version is more difficult than the other, and the teacher should not be convinced that she should add points to the version b exam scores.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1999,  8546,  3218,  1021,  1012,  2654,  1010,  2057,  9675,
         2008,  2057,  2052,  2224,  1155,  1027,  1014,  1012,  5890,  1012,
         2144,  1996,  1052,  1011,  3643,  2003,  3469,  2084,  1155,  1010,
         2057,  2079,  2025, 15454,  1996, 19701, 10744,  1012,  2008,  2003,
         1010,  1996,  2951,  2079,  2025, 13359,  2135,  2265,  2008,  2028,
        11360,  2544,  2003,  2062,  3697,  2084,  1996,  2060,  1010,  1998,
         1996,  3836,  2323,  2025,  2022,  6427,  2008,  2016,  2323,  5587,
         2685,  2000,  1996,  2544,  1038, 11360,  7644,  1012,   102])"
1895,1,"['deviation', 'estimate', 'standard deviation', 'standard', 'pooled standard deviation']", Difference of two means,seg_67,7.3.4 pooled standard deviation estimate (special topic),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1021,  1012,  1017,  1012,  1018, 19107,  2094,  3115, 24353,
        10197,  1006,  2569,  8476,  1007,   102])"
1896,1,"['cases', 'deviation', 'populations', 'standard deviation', 'deviations', 'standard', 'pooled standard deviation', 'historical data', 'data', 'standard deviations']", Difference of two means,seg_67,"occasionally, two populations will have standard deviations that are so similar that they can be treated as identical. for example, historical data or a well-understood biological mechanism may justify this strong assumption. in such cases, we can make the t-distribution approach slightly more precise by using a pooled standard deviation.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  5681,  1010,  2048,  7080,  2097,  2031,  3115, 24353,  2015,
         2008,  2024,  2061,  2714,  2008,  2027,  2064,  2022,  5845,  2004,
         7235,  1012,  2005,  2742,  1010,  3439,  2951,  2030,  1037,  2092,
         1011,  5319,  6897,  7337,  2089, 16114,  2023,  2844, 11213,  1012,
         1999,  2107,  3572,  1010,  2057,  2064,  2191,  1996,  1056,  1011,
         4353,  3921,  3621,  2062, 10480,  2011,  2478,  1037, 19107,  2094,
         3115, 24353,  1012,   102])"
1897,1,"['error', 'deviation', 'estimate', 'variances', 'population', 'samples', 'standard deviation', 'deviations', 'standard', 'pooled standard deviation', 'standard error', 'data', 'standard deviations']", Difference of two means,seg_67,"the pooled standard deviation of two groups is a way to use data from both samples to better estimate the standard deviation and standard error. if s1 and s2 are the standard deviations of groups 1 and 2 and there are very good reasons to believe that the population standard deviations are equal, then we can obtain an improved estimate of the group variances by pooling their data:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996, 19107,  2094,  3115, 24353,  1997,  2048,  2967,  2003,
         1037,  2126,  2000,  2224,  2951,  2013,  2119,  8168,  2000,  2488,
        10197,  1996,  3115, 24353,  1998,  3115,  7561,  1012,  2065,  1055,
         2487,  1998,  1055,  2475,  2024,  1996,  3115, 24353,  2015,  1997,
         2967,  1015,  1998,  1016,  1998,  2045,  2024,  2200,  2204,  4436,
         2000,  2903,  2008,  1996,  2313,  3115, 24353,  2015,  2024,  5020,
         1010,  2059,  2057,  2064,  6855,  2019,  5301, 10197,  1997,  1996,
         2177, 23284,  2015,  2011,  4770,  2075,  2037,  2951,  1024,   102])"
1898,1,"['sample', 'statistic']", Difference of two means,seg_67,"where n1 and n2 are the sample sizes, as before. to use this new statistic, we substitute s2pooled in",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2073,  1050,  2487,  1998,  1050,  2475,  2024,  1996,  7099,
        10826,  1010,  2004,  2077,  1012,  2000,  2224,  2023,  2047, 28093,
         6553,  1010,  2057,  7681,  1055,  2475, 16869,  2098,  1999,   102])"
1899,1,"['degrees of freedom', 'standard', 'standard error', 'error']", Difference of two means,seg_67,"place of s21 and s22 in the standard error formula, and we use an updated formula for the degrees of freedom:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  2173,  1997,  1055, 17465,  1998,  1055, 19317,  1999,  1996,
         3115,  7561,  5675,  1010,  1998,  2057,  2224,  2019,  7172,  5675,
         2005,  1996,  5445,  1997,  4071,  1024,   102])"
1900,1,"['parameter', 'deviation', 'estimate', 'degrees of freedom', 'standard deviation', 'sampling', 'standard', 'distribution', 'model', 'deviations', 'sampling distribution', 'standard deviations']", Difference of two means,seg_67,"the benefits of pooling the standard deviation are realized through obtaining a better estimate of the standard deviation for each group and using a larger degrees of freedom parameter for the t-distribution. both of these changes may permit a more accurate model of the sampling distribution of x̄1 − x̄2, if the standard deviations of the two groups are indeed equal.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1996,  6666,  1997,  4770,  2075,  1996,  3115, 24353,  2024,
         3651,  2083, 11381,  1037,  2488, 10197,  1997,  1996,  3115, 24353,
         2005,  2169,  2177,  1998,  2478,  1037,  3469,  5445,  1997,  4071,
        16381,  2005,  1996,  1056,  1011,  4353,  1012,  2119,  1997,  2122,
         3431,  2089,  9146,  1037,  2062,  8321,  2944,  1997,  1996, 16227,
         4353,  1997,  1060,  2487,  1597,  1060,  2475,  1010,  2065,  1996,
         3115, 24353,  2015,  1997,  1996,  2048,  2967,  2024,  5262,  5020,
         1012,   102])"
1901,1,"['deviation', 'sample', 'standard deviation', 'sample size', 'condition', 'standard', 'pooled standard deviation', 'deviations', 'data', 'standard deviations']", Difference of two means,seg_67,"a pooled standard deviation is only appropriate when background research indicates the population standard deviations are nearly equal. when the sample size is large and the condition may be adequately checked with data, the benefits of pooling the standard deviations greatly diminishes.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  1037, 19107,  2094,  3115, 24353,  2003,  2069,  6413,  2043,
         4281,  2470,  7127,  1996,  2313,  3115, 24353,  2015,  2024,  3053,
         5020,  1012,  2043,  1996,  7099,  2946,  2003,  2312,  1998,  1996,
         4650,  2089,  2022, 23613,  7039,  2007,  2951,  1010,  1996,  6666,
         1997,  4770,  2075,  1996,  3115, 24353,  2015,  6551, 11737,  5498,
         4095,  2229,  1012,   102])"
1902,0,[], Difference of two means,seg_67,friday the 6th friday the 13th difference,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 5958, 1996, 5351, 5958, 1996, 6122, 4489,  102])"
1903,0,[], Difference of two means,seg_67,friday the 6th friday the 13th difference,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 5958, 1996, 5351, 5958, 1996, 6122, 4489,  102])"
1904,0,[], Difference of two means,seg_67,150 100 casein horsebean linseed meatmeal soybean sunflower,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  5018,  2531,  2553,  2378,  3586,  4783,  2319, 11409, 19763,
         2094,  6240,  4168,  2389, 25176,  4783,  2319,  3103, 14156,   102])"
1905,0,[], Difference of two means,seg_67,automatic manual city mpg,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 6882, 6410, 2103, 6131, 2290,  102])"
1906,0,[], Difference of two means,seg_67,automatic manual hwy mpg,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([4489, 1997, 2048, 2965])","tensor([  101,  6882,  6410,  1044, 18418,  6131,  2290,   102])"
1907,1,['treatment'], Difference of two means,seg_67,treatment 1 treatment 2 treatment 3,tensor(1),"tensor([0., 1., 0., 1., 0., 1., 0., 0.])","tensor([4489, 1997, 2048, 2965])","tensor([ 101, 3949, 1015, 3949, 1016, 3949, 1017,  102])"
1908,1,['experiment'], Power calculations for a difference of means,seg_69,"often times in experiment planning, there are two competing considerations:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2411,  2335,  1999,  7551,  4041,  1010,  2045,  2024,  2048,
         6637, 16852,  1024,   102])"
1909,1,['data'], Power calculations for a difference of means,seg_69,• we want to collect enough data that we can detect important effects.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  2057,  2215,  2000,  8145,  2438,  2951,  2008,  2057,
         2064, 11487,  2590,  3896,  1012,   102])"
1910,1,"['risk', 'experiments', 'data']", Power calculations for a difference of means,seg_69,"• collecting data can be expensive, and in experiments involving people, there may be some risk to patients.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([ 101, 1528, 9334, 2951, 2064, 2022, 6450, 1010, 1998, 1999, 7885, 5994,
        2111, 1010, 2045, 2089, 2022, 2070, 3891, 2000, 5022, 1012,  102])"
1911,1,"['trial', 'sample', 'sample size', 'experiment']", Power calculations for a difference of means,seg_69,"in this section, we focus on the context of a clinical trial, which is a health-related experiment where the subject are people, and we will determine an appropriate sample size where we can be 80% sure",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([ 101, 1999, 2023, 2930, 1010, 2057, 3579, 2006, 1996, 6123, 1997, 1037,
        6612, 3979, 1010, 2029, 2003, 1037, 2740, 1011, 3141, 7551, 2073, 1996,
        3395, 2024, 2111, 1010, 1998, 2057, 2097, 5646, 2019, 6413, 7099, 2946,
        2073, 2057, 2064, 2022, 3770, 1003, 2469,  102])"
1912,0,[], Power calculations for a difference of means,seg_69,25 that we would detect any practically important effects.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2423,  2008,  2057,  2052, 11487,  2151,  8134,  2590,  3896,
         1012,   102])"
1913,1,['test'], Power calculations for a difference of means,seg_69,7.4.1 going through the motions of a test,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1021,  1012,  1018,  1012,  1015,  2183,  2083,  1996, 15323,
         1997,  1037,  3231,   102])"
1914,1,"['hypothesis', 'sample', 'sample size', 'hypothesis test', 'test']", Power calculations for a difference of means,seg_69,we’re going to go through the motions of a hypothesis test. this will help us frame our calculations for determining an appropriate sample size for the study.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  1521,  2128,  2183,  2000,  2175,  2083,  1996, 15323,
         1997,  1037, 10744,  3231,  1012,  2023,  2097,  2393,  2149,  4853,
         2256, 16268,  2005, 12515,  2019,  6413,  7099,  2946,  2005,  1996,
         2817,  1012,   102])"
1915,1,"['trial', 'hypotheses', 'control group', 'hypothesis', 'control', 'standard', 'experiment', 'hypothesis test', 'test']", Power calculations for a difference of means,seg_69,"suppose a pharmaceutical company has developed a new drug for lowering blood pressure, and they are preparing a clinical trial (experiment) to test the drug’s effectiveness. they recruit people who are taking a particular standard blood pressure medication. people in the control group will continue to take their current medication through generic-looking pills to ensure blinding. write down the hypotheses for a two-sided hypothesis test in this context.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  6814,  1037, 13859,  2194,  2038,  2764,  1037,  2047,  4319,
         2005, 13845,  2668,  3778,  1010,  1998,  2027,  2024,  8225,  1037,
         6612,  3979,  1006,  7551,  1007,  2000,  3231,  1996,  4319,  1521,
         1055, 12353,  1012,  2027, 13024,  2111,  2040,  2024,  2635,  1037,
         3327,  3115,  2668,  3778, 14667,  1012,  2111,  1999,  1996,  2491,
         2177,  2097,  3613,  2000,  2202,  2037,  2783, 14667,  2083, 12391,
         1011,  2559, 15345,  2000,  5676, 19709,  1012,  4339,  2091,  1996,
         1044, 22571, 14573, 23072,  2005,  1037,  2048,  1011, 11536, 10744,
         3231,  1999,  2023,  6123,  1012,   102])"
1916,1,"['hypotheses', 'hypothesis', 'trials', 'alternative hypothesis']", Power calculations for a difference of means,seg_69,"generally, clinical trials use a two-sided alternative hypothesis, so below are suitable hypotheses for this context:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  3227,  1010,  6612,  7012,  2224,  1037,  2048,  1011, 11536,
         4522, 10744,  1010,  2061,  2917,  2024,  7218,  1044, 22571, 14573,
        23072,  2005,  2023,  6123,  1024,   102])"
1917,1,['standard'], Power calculations for a difference of means,seg_69,h0: the new drug performs exactly as well as the standard medication.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1044,  2692,  1024,  1996,  2047,  4319, 10438,  3599,  2004,
         2092,  2004,  1996,  3115, 14667,  1012,   102])"
1918,1,['standard'], Power calculations for a difference of means,seg_69,ha: the new drug’s performance differs from the standard medication.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  5292,  1024,  1996,  2047,  4319,  1521,  1055,  2836, 12980,
         2013,  1996,  3115, 14667,  1012,   102])"
1919,1,"['trial', 'error', 'deviation', 'standard deviation', 'standard', 'distribution', 'standard error']", Power calculations for a difference of means,seg_69,"the researchers would like to run the clinical trial on patients with systolic blood pressures between 140 and 180 mmhg. suppose previously published studies suggest that the standard deviation of the patients’ blood pressures will be about 12 mmhg and the distribution of patient blood pressures will be approximately symmetric.26 if we had 100 patients per group, what would be the approximate standard error for x̄trmt − x̄ctrl?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  6950,  2052,  2066,  2000,  2448,  1996,  6612,  3979,
         2006,  5022,  2007, 25353, 16033, 10415,  2668, 15399,  2090,  8574,
         1998,  8380,  3461, 25619,  1012,  6814,  3130,  2405,  2913,  6592,
         2008,  1996,  3115, 24353,  1997,  1996,  5022,  1521,  2668, 15399,
         2097,  2022,  2055,  2260,  3461, 25619,  1998,  1996,  4353,  1997,
         5776,  2668, 15399,  2097,  2022,  3155, 19490,  1012,  2656,  2065,
         2057,  2018,  2531,  5022,  2566,  2177,  1010,  2054,  2052,  2022,
         1996, 15796,  3115,  7561,  2005,  1060, 16344, 20492,  1597,  1060,
         6593, 12190,  1029,   102])"
1920,1,"['standard error', 'standard', 'error']", Power calculations for a difference of means,seg_69,the standard error is calculated as follows:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  3115,  7561,  2003, 10174,  2004,  4076,  1024,   102])"
1921,1,"['deviation', 'estimate', 'standard deviation', 'standard']", Power calculations for a difference of means,seg_69,"this may be an imperfect estimate of sex̄trmt−x̄ctrl , since the standard deviation estimate we used may not be perfectly correct for this group of patients. however, it is sufficient for our purposes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2023,  2089,  2022,  2019, 29238, 10197,  1997,  3348, 16344,
        20492, 22543,  2595,  6593, 12190,  1010,  2144,  1996,  3115, 24353,
        10197,  2057,  2109,  2089,  2025,  2022,  6669,  6149,  2005,  2023,
         2177,  1997,  5022,  1012,  2174,  1010,  2009,  2003,  7182,  2005,
         2256,  5682,  1012,   102])"
1922,1,"['null distribution', 'distribution']", Power calculations for a difference of means,seg_69,what does the null distribution of x̄trmt − x̄ctrl look like?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2054,  2515,  1996, 19701,  4353,  1997,  1060, 16344, 20492,
         1597,  1060,  6593, 12190,  2298,  2066,  1029,   102])"
1923,1,"['mean', 'deviation', 'null hypothesis', 'degrees of freedom', 'hypothesis', 'normal', 'standard deviation', 'standard', 'distribution', 'standard error', 'error']", Power calculations for a difference of means,seg_69,"the degrees of freedom are greater than 30, so the distribution of x̄trmt− x̄ctrl will be approximately normal. the standard deviation of this distribution (the standard error) would be about 1.70, and under the null hypothesis, its mean would be 0.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  5445,  1997,  4071,  2024,  3618,  2084,  2382,  1010,
         2061,  1996,  4353,  1997,  1060, 16344, 20492, 22543,  1060,  6593,
        12190,  2097,  2022,  3155,  3671,  1012,  1996,  3115, 24353,  1997,
         2023,  4353,  1006,  1996,  3115,  7561,  1007,  2052,  2022,  2055,
         1015,  1012,  3963,  1010,  1998,  2104,  1996, 19701, 10744,  1010,
         2049,  2812,  2052,  2022,  1014,  1012,   102])"
1924,1,['distribution'], Power calculations for a difference of means,seg_69,null distribution −9 −6 −3 0 3 6 9 xtrmt − xctrl,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101, 19701,  4353,  1597,  2683,  1597,  2575,  1597,  2509,  1014,
         1017,  1020,  1023,  1060, 16344, 20492,  1597,  1060,  6593, 12190,
          102])"
1925,1,"['null hypothesis', 'hypothesis']", Power calculations for a difference of means,seg_69,for what values of x̄trmt − x̄ctrl would we reject the null hypothesis?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2005,  2054,  5300,  1997,  1060, 16344, 20492,  1597,  1060,
         6593, 12190,  2052,  2057, 15454,  1996, 19701, 10744,  1029,   102])"
1926,1,['tail'], Power calculations for a difference of means,seg_69,"for α = 0.05, we would reject h0 if the difference is in the lower 2.5% or upper 2.5% tail:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2005,  1155,  1027,  1014,  1012,  5709,  1010,  2057,  2052,
        15454,  1044,  2692,  2065,  1996,  4489,  2003,  1999,  1996,  2896,
         1016,  1012,  1019,  1003,  2030,  3356,  1016,  1012,  1019,  1003,
         5725,  1024,   102])"
1927,1,"['standard errors', 'normal', 'errors', 'standard', 'model']", Power calculations for a difference of means,seg_69,"lower 2.5%: for the normal model, this is 1.96 standard errors below 0, so any difference smaller",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2896,  1016,  1012,  1019,  1003,  1024,  2005,  1996,  3671,
         2944,  1010,  2023,  2003,  1015,  1012,  5986,  3115, 10697,  2917,
         1014,  1010,  2061,  2151,  4489,  3760,   102])"
1928,1,"['standard errors', 'normal', 'errors', 'standard', 'model']", Power calculations for a difference of means,seg_69,"upper 2.5%: for the normal model, this is 1.96 standard errors above 0, so any difference larger",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  3356,  1016,  1012,  1019,  1003,  1024,  2005,  1996,  3671,
         2944,  1010,  2023,  2003,  1015,  1012,  5986,  3115, 10697,  2682,
         1014,  1010,  2061,  2151,  4489,  3469,   102])"
1929,1,['rejection regions'], Power calculations for a difference of means,seg_69,the boundaries of these rejection regions are shown below:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  7372,  1997,  2122, 13893,  4655,  2024,  3491,  2917,
         1024,   102])"
1930,1,['distribution'], Power calculations for a difference of means,seg_69,null distribution do not reject h0 reject h0 reject h0 −9 −6 −3 0 3 6 9 xtrmt − xctrl,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101, 19701,  4353,  2079,  2025, 15454,  1044,  2692, 15454,  1044,
         2692, 15454,  1044,  2692,  1597,  2683,  1597,  2575,  1597,  2509,
         1014,  1017,  1020,  1023,  1060, 16344, 20492,  1597,  1060,  6593,
        12190,   102])"
1931,1,"['probability', 'null hypothesis', 'alternative hypothesis', 'hypothesis']", Power calculations for a difference of means,seg_69,"next, we’ll perform some hypothetical calculations to determine the probability we reject the null hypothesis, if the alternative hypothesis were actually true.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2279,  1010,  2057,  1521,  2222,  4685,  2070, 25613, 16268,
         2000,  5646,  1996,  9723,  2057, 15454,  1996, 19701, 10744,  1010,
         2065,  1996,  4522, 10744,  2020,  2941,  2995,  1012,   102])"
1932,1,['test'], Power calculations for a difference of means,seg_69,7.4.2 computing the power for a 2-sample test,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([ 101, 1021, 1012, 1018, 1012, 1016, 9798, 1996, 2373, 2005, 1037, 1016,
        1011, 7099, 3231,  102])"
1933,1,"['effect sizes', 'probability', 'sample']", Power calculations for a difference of means,seg_69,"when planning a study, we want to know how likely we are to detect an effect we care about. in other words, if there is a real effect, and that effect is large enough that it has practical value, then what’s the probability that we detect that effect? this probability is called the power, and we can compute it for different sample sizes or for different effect sizes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2043,  4041,  1037,  2817,  1010,  2057,  2215,  2000,  2113,
         2129,  3497,  2057,  2024,  2000, 11487,  2019,  3466,  2057,  2729,
         2055,  1012,  1999,  2060,  2616,  1010,  2065,  2045,  2003,  1037,
         2613,  3466,  1010,  1998,  2008,  3466,  2003,  2312,  2438,  2008,
         2009,  2038,  6742,  3643,  1010,  2059,  2054,  1521,  1055,  1996,
         9723,  2008,  2057, 11487,  2008,  3466,  1029,  2023,  9723,  2003,
         2170,  1996,  2373,  1010,  1998,  2057,  2064, 24134,  2009,  2005,
         2367,  7099, 10826,  2030,  2005,  2367,  3466, 10826,  1012,   102])"
1934,1,"['effect size', 'standard']", Power calculations for a difference of means,seg_69,"we first determine what is a practically significant result. suppose that the company researchers care about finding any effect on blood pressure that is 3 mmhg or larger vs the standard medication. here, 3 mmhg is the minimum effect size of interest, and we want to know how likely we are to detect this size of an effect in the study.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  2034,  5646,  2054,  2003,  1037,  8134,  3278,  2765,
         1012,  6814,  2008,  1996,  2194,  6950,  2729,  2055,  4531,  2151,
         3466,  2006,  2668,  3778,  2008,  2003,  1017,  3461, 25619,  2030,
         3469,  5443,  1996,  3115, 14667,  1012,  2182,  1010,  1017,  3461,
        25619,  2003,  1996,  6263,  3466,  2946,  1997,  3037,  1010,  1998,
         2057,  2215,  2000,  2113,  2129,  3497,  2057,  2024,  2000, 11487,
         2023,  2946,  1997,  2019,  3466,  1999,  1996,  2817,  1012,   102])"
1935,1,"['probability', 'treatment', 'treatment group', 'standard']", Power calculations for a difference of means,seg_69,suppose we decided to move forward with 100 patients per treatment group and the new drug reduces blood pressure by an additional 3 mmhg relative to the standard medication. what is the probability that we detect a drop?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  6814,  2057,  2787,  2000,  2693,  2830,  2007,  2531,  5022,
         2566,  3949,  2177,  1998,  1996,  2047,  4319, 13416,  2668,  3778,
         2011,  2019,  3176,  1017,  3461, 25619,  5816,  2000,  1996,  3115,
        14667,  1012,  2054,  2003,  1996,  9723,  2008,  2057, 11487,  1037,
         4530,  1029,   102])"
1936,0,[], Power calculations for a difference of means,seg_69,"before we even do any calculations, notice that if x̄trmt− x̄ctrl = −3 mmhg, there wouldn’t even be sufficient evidence to reject h0. that’s not a good sign.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2077,  2057,  2130,  2079,  2151, 16268,  1010,  5060,  2008,
         2065,  1060, 16344, 20492, 22543,  1060,  6593, 12190,  1027,  1597,
         2509,  3461, 25619,  1010,  2045,  2876,  1521,  1056,  2130,  2022,
         7182,  3350,  2000, 15454,  1044,  2692,  1012,  2008,  1521,  1055,
         2025,  1037,  2204,  3696,  1012,   102])"
1937,1,['probability'], Power calculations for a difference of means,seg_69,"to calculate the probability that we will reject h0, we need to determine a few things:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2000, 18422,  1996,  9723,  2008,  2057,  2097, 15454,  1044,
         2692,  1010,  2057,  2342,  2000,  5646,  1037,  2261,  2477,  1024,
          102])"
1938,1,"['null distribution', 'distribution', 'sampling', 'sampling distribution']", Power calculations for a difference of means,seg_69,"• the sampling distribution for x̄trmt − x̄ctrl when the true difference is -3 mmhg. this is the same as the null distribution, except it is shifted to the left by 3:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  1996, 16227,  4353,  2005,  1060, 16344, 20492,  1597,
         1060,  6593, 12190,  2043,  1996,  2995,  4489,  2003,  1011,  1017,
         3461, 25619,  1012,  2023,  2003,  1996,  2168,  2004,  1996, 19701,
         4353,  1010,  3272,  2009,  2003,  5429,  2000,  1996,  2187,  2011,
         1017,  1024,   102])"
1939,1,"['null distribution', 'distribution']", Power calculations for a difference of means,seg_69,distribution with null distribution µtrmt − µctrl = −3 −9 −6 −3 0 3 6 9 xtrmt − xctrl,tensor(1),"tensor([0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  4353,  2007, 19701,  4353,  1085, 16344, 20492,  1597,  1085,
         6593, 12190,  1027,  1597,  2509,  1597,  2683,  1597,  2575,  1597,
         2509,  1014,  1017,  1020,  1023,  1060, 16344, 20492,  1597,  1060,
         6593, 12190,   102])"
1940,1,['rejection regions'], Power calculations for a difference of means,seg_69,"• the rejection regions, which are outside of the dotted lines above.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  1996, 13893,  4655,  1010,  2029,  2024,  2648,  1997,
         1996, 20384,  3210,  2682,  1012,   102])"
1941,1,"['rejection region', 'distribution']", Power calculations for a difference of means,seg_69,• the fraction of the distribution that falls in the rejection region.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  1996, 12884,  1997,  1996,  4353,  2008,  4212,  1999,
         1996, 13893,  2555,  1012,   102])"
1942,1,"['mean', 'deviation', 'normal distribution', 'probability', 'normal', 'standard deviation', 'standard', 'distribution']", Power calculations for a difference of means,seg_69,"in short, we need to calculate the probability that x < −3.332 for a normal distribution with mean -3 and standard deviation 1.7. to do so, we first shade the area we want to calculate:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1999,  2460,  1010,  2057,  2342,  2000, 18422,  1996,  9723,
         2008,  1060,  1026,  1597,  2509,  1012, 29327,  2005,  1037,  3671,
         4353,  2007,  2812,  1011,  1017,  1998,  3115, 24353,  1015,  1012,
         1021,  1012,  2000,  2079,  2061,  1010,  2057,  2034,  8703,  1996,
         2181,  2057,  2215,  2000, 18422,  1024,   102])"
1943,1,"['null distribution', 'distribution']", Power calculations for a difference of means,seg_69,distribution with null distribution µtrmt − µctrl = −3 −9 −6 −3 0 3 6 9 xtrmt − xctrl,tensor(1),"tensor([0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  4353,  2007, 19701,  4353,  1085, 16344, 20492,  1597,  1085,
         6593, 12190,  1027,  1597,  2509,  1597,  2683,  1597,  2575,  1597,
         2509,  1014,  1017,  1020,  1023,  1060, 16344, 20492,  1597,  1060,
         6593, 12190,   102])"
1944,1,"['tail', 'table', 'probability', 'approximation', 'normal approximation', 'degrees of freedom', 'normal', 'statistical', 'probability table']", Power calculations for a difference of means,seg_69,"we’ll use a normal approximation, which is good approximation when the degrees of freedom is about 30 or more. we’ll start by calculating the z-score and find the tail area using either statistical software or the probability table:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  1521,  2222,  2224,  1037,  3671, 20167,  1010,  2029,
         2003,  2204, 20167,  2043,  1996,  5445,  1997,  4071,  2003,  2055,
         2382,  2030,  2062,  1012,  2057,  1521,  2222,  2707,  2011, 20177,
         1996,  1062,  1011,  3556,  1998,  2424,  1996,  5725,  2181,  2478,
         2593,  7778,  4007,  2030,  1996,  9723,  2795,  1024,   102])"
1945,1,"['sample', 'sample size', 'test']", Power calculations for a difference of means,seg_69,the power for the test is about 42% when µtrmt − µctrl = −3 and each group has a sample size of 100.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  2373,  2005,  1996,  3231,  2003,  2055,  4413,  1003,
         2043,  1085, 16344, 20492,  1597,  1085,  6593, 12190,  1027,  1597,
         2509,  1998,  2169,  2177,  2038,  1037,  7099,  2946,  1997,  2531,
         1012,   102])"
1946,1,"['null hypothesis', 'rejection region', 'hypothesis']", Power calculations for a difference of means,seg_69,"in example 7.35, we ignored the upper rejection region in the calculation, which was in the opposite direction of the hypothetical truth, i.e. -3. the reasoning? there wouldn’t be any value in rejecting the null hypothesis and concluding there was an increase when in fact there was a decrease.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1999,  2742,  1021,  1012,  3486,  1010,  2057,  6439,  1996,
         3356, 13893,  2555,  1999,  1996, 17208,  1010,  2029,  2001,  1999,
         1996,  4500,  3257,  1997,  1996, 25613,  3606,  1010,  1045,  1012,
         1041,  1012,  1011,  1017,  1012,  1996, 13384,  1029,  2045,  2876,
         1521,  1056,  2022,  2151,  3643,  1999, 21936,  1996, 19701, 10744,
         1998, 16228,  2045,  2001,  2019,  3623,  2043,  1999,  2755,  2045,
         2001,  1037,  9885,  1012,   102])"
1947,1,"['normal distribution', 'sample', 'normal', 'sample size', 'distribution']", Power calculations for a difference of means,seg_69,"we’ve also used a normal distribution instead of the t-distribution. this is a convenience, and if the sample size is too small, we’d need to revert back to using the t-distribution. we’ll discuss this a bit further at the end of this section.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  1521,  2310,  2036,  2109,  1037,  3671,  4353,  2612,
         1997,  1996,  1056,  1011,  4353,  1012,  2023,  2003,  1037, 15106,
         1010,  1998,  2065,  1996,  7099,  2946,  2003,  2205,  2235,  1010,
         2057,  1521,  1040,  2342,  2000,  7065,  8743,  2067,  2000,  2478,
         1996,  1056,  1011,  4353,  1012,  2057,  1521,  2222,  6848,  2023,
         1037,  2978,  2582,  2012,  1996,  2203,  1997,  2023,  2930,  1012,
          102])"
1948,1,"['sample', 'sample size']", Power calculations for a difference of means,seg_69,7.4.3 determining a proper sample size,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1021,  1012,  1018,  1012,  1017, 12515,  1037,  5372,  7099,
         2946,   102])"
1949,1,"['probability', 'effect size', 'hypothesis', 'sample', 'sample size', 'alternative hypothesis', 'data']", Power calculations for a difference of means,seg_69,"in the last example, we found that if we have a sample size of 100 in each group, we can only detect an effect size of 3 mmhg with a probability of about 0.42. suppose the researchers moved forward and only used 100 patients per group, and the data did not support the alternative hypothesis, i.e. the researchers did not reject h0. this is a very bad situation to be in for a few reasons:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1999,  1996,  2197,  2742,  1010,  2057,  2179,  2008,  2065,
         2057,  2031,  1037,  7099,  2946,  1997,  2531,  1999,  2169,  2177,
         1010,  2057,  2064,  2069, 11487,  2019,  3466,  2946,  1997,  1017,
         3461, 25619,  2007,  1037,  9723,  1997,  2055,  1014,  1012,  4413,
         1012,  6814,  1996,  6950,  2333,  2830,  1998,  2069,  2109,  2531,
         5022,  2566,  2177,  1010,  1998,  1996,  2951,  2106,  2025,  2490,
         1996,  4522, 10744,  1010,  1045,  1012,  1041,  1012,  1996,  6950,
         2106,  2025, 15454,  1044,  2692,  1012,  2023,  2003,  1037,  2200,
         2919,  3663,  2000,  2022,  1999,  2005,  1037,  2261,  4436,  1024,
          102])"
1950,1,['sample'], Power calculations for a difference of means,seg_69,"• in the back of the researchers’ minds, they’d all be wondering, maybe there is a real and meaningful difference, but we weren’t able to detect it with such a small sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  1999,  1996,  2067,  1997,  1996,  6950,  1521,  9273,
         1010,  2027,  1521,  1040,  2035,  2022,  6603,  1010,  2672,  2045,
         2003,  1037,  2613,  1998, 15902,  4489,  1010,  2021,  2057,  4694,
         1521,  1056,  2583,  2000, 11487,  2009,  2007,  2107,  1037,  2235,
         7099,  1012,   102])"
1951,1,"['uncertainty', 'experiment']", Power calculations for a difference of means,seg_69,"• the company probably invested hundreds of millions of dollars in developing the new drug, so now they are left with great uncertainty about its potential since the experiment didn’t have a great shot at detecting effects that could still be important.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  1996,  2194,  2763, 11241,  5606,  1997,  8817,  1997,
         6363,  1999,  4975,  1996,  2047,  4319,  1010,  2061,  2085,  2027,
         2024,  2187,  2007,  2307, 12503,  2055,  2049,  4022,  2144,  1996,
         7551,  2134,  1521,  1056,  2031,  1037,  2307,  2915,  2012, 25952,
         3896,  2008,  2071,  2145,  2022,  2590,  1012,   102])"
1952,0,[], Power calculations for a difference of means,seg_69,"• patients were subjected to the drug, and we can’t even say with much certainty that the drug doesn’t help (or harm) patients.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  5022,  2020, 13532,  2000,  1996,  4319,  1010,  1998,
         2057,  2064,  1521,  1056,  2130,  2360,  2007,  2172, 15855,  2008,
         1996,  4319,  2987,  1521,  1056,  2393,  1006,  2030,  7386,  1007,
         5022,  1012,   102])"
1953,1,['trial'], Power calculations for a difference of means,seg_69,"• another clinical trial may need to be run to get a more conclusive answer as to whether the drug does hold any practical value, and conducting a second clinical trial may take years and many millions of dollars.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1528,  2178,  6612,  3979,  2089,  2342,  2000,  2022,  2448,
         2000,  2131,  1037,  2062,  9530, 23633,  3437,  2004,  2000,  3251,
         1996,  4319,  2515,  2907,  2151,  6742,  3643,  1010,  1998,  9283,
         1037,  2117,  6612,  3979,  2089,  2202,  2086,  1998,  2116,  8817,
         1997,  6363,  1012,   102])"
1954,1,"['sample', 'sample size', 'confident']", Power calculations for a difference of means,seg_69,"we want to avoid this situation, so we need to determine an appropriate sample size to ensure we can be pretty confident that we’ll detect any effects that are practically important. as mentioned earlier, a change of 3 mmhg was deemed to be the minimum difference that was practically important. as a first step, we could calculate power for several different sample sizes. for instance, let’s try 500 patients per group.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  2215,  2000,  4468,  2023,  3663,  1010,  2061,  2057,
         2342,  2000,  5646,  2019,  6413,  7099,  2946,  2000,  5676,  2057,
         2064,  2022,  3492,  9657,  2008,  2057,  1521,  2222, 11487,  2151,
         3896,  2008,  2024,  8134,  2590,  1012,  2004,  3855,  3041,  1010,
         1037,  2689,  1997,  1017,  3461, 25619,  2001,  8357,  2000,  2022,
         1996,  6263,  4489,  2008,  2001,  8134,  2590,  1012,  2004,  1037,
         2034,  3357,  1010,  2057,  2071, 18422,  2373,  2005,  2195,  2367,
         7099, 10826,  1012,  2005,  6013,  1010,  2292,  1521,  1055,  3046,
         3156,  5022,  2566,  2177,  1012,   102])"
1955,1,"['sample', 'sample size']", Power calculations for a difference of means,seg_69,27 calculate the power to detect a change of -3 mmhg when using a sample size of 500 per group.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2676, 18422,  1996,  2373,  2000, 11487,  1037,  2689,  1997,
         1011,  1017,  3461, 25619,  2043,  2478,  1037,  7099,  2946,  1997,
         3156,  2566,  2177,  1012,   102])"
1956,1,"['deviation', 'standard deviation', 'standard', 'standard error', 'error']", Power calculations for a difference of means,seg_69,(a) determine the standard error (recall that the standard deviation for patients was expected to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1006,  1037,  1007,  5646,  1996,  3115,  7561,  1006,  9131,
         2008,  1996,  3115, 24353,  2005,  5022,  2001,  3517,  2000,   102])"
1957,0,[], Power calculations for a difference of means,seg_69,be about 12 mmhg).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2022,  2055,  2260,  3461, 25619,  1007,  1012,   102])"
1958,1,"['null distribution', 'rejection regions', 'distribution']", Power calculations for a difference of means,seg_69,(b) identify the null distribution and rejection regions.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1006,  1038,  1007,  6709,  1996, 19701,  4353,  1998, 13893,
         4655,  1012,   102])"
1959,1,['distribution'], Power calculations for a difference of means,seg_69,(c) identify the alternative distribution when µtrmt − µctrl = −3.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1006,  1039,  1007,  6709,  1996,  4522,  4353,  2043,  1085,
        16344, 20492,  1597,  1085,  6593, 12190,  1027,  1597,  2509,  1012,
          102])"
1960,1,"['probability', 'null hypothesis', 'hypothesis']", Power calculations for a difference of means,seg_69,(d) compute the probability we reject the null hypothesis.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1006,  1040,  1007, 24134,  1996,  9723,  2057, 15454,  1996,
        19701, 10744,  1012,   102])"
1961,1,"['trial', 'sample', 'sample size']", Power calculations for a difference of means,seg_69,"the researchers decided 3 mmhg was the minimum difference that was practically important, and with a sample size of 500, we can be very certain (97.7% or better) that we will detect any such difference. we now have moved to another extreme where we are exposing an unnecessary number of patients to the new drug in the clinical trial. not only is this ethically questionable, but it would also cost a lot more money than is necessary to be quite sure we’d detect any important effects.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  6950,  2787,  1017,  3461, 25619,  2001,  1996,  6263,
         4489,  2008,  2001,  8134,  2590,  1010,  1998,  2007,  1037,  7099,
         2946,  1997,  3156,  1010,  2057,  2064,  2022,  2200,  3056,  1006,
         5989,  1012,  1021,  1003,  2030,  2488,  1007,  2008,  2057,  2097,
        11487,  2151,  2107,  4489,  1012,  2057,  2085,  2031,  2333,  2000,
         2178,  6034,  2073,  2057,  2024, 14944,  2019, 14203,  2193,  1997,
         5022,  2000,  1996,  2047,  4319,  1999,  1996,  6612,  3979,  1012,
         2025,  2069,  2003,  2023, 12962,  2135, 21068,  1010,  2021,  2009,
         2052,  2036,  3465,  1037,  2843,  2062,  2769,  2084,  2003,  4072,
         2000,  2022,  3243,  2469,  2057,  1521,  1040, 11487,  2151,  2590,
         3896,  1012,   102])"
1962,1,"['sample', 'sample size', 'treatment']", Power calculations for a difference of means,seg_69,"the most common practice is to identify the sample size where the power is around 80%, and sometimes 90%. other values may be reasonable for a specific context, but 80% and 90% are most commonly targeted as a good balance between high power and not exposing too many patients to a new treatment (or wasting too much money).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  2087,  2691,  3218,  2003,  2000,  6709,  1996,  7099,
         2946,  2073,  1996,  2373,  2003,  2105,  3770,  1003,  1010,  1998,
         2823,  3938,  1003,  1012,  2060,  5300,  2089,  2022,  9608,  2005,
         1037,  3563,  6123,  1010,  2021,  3770,  1003,  1998,  3938,  1003,
         2024,  2087,  4141,  9416,  2004,  1037,  2204,  5703,  2090,  2152,
         2373,  1998,  2025, 14944,  2205,  2116,  5022,  2000,  1037,  2047,
         3949,  1006,  2030, 18313,  2205,  2172,  2769,  1007,  1012,   102])"
1963,1,"['power of the test', 'sample', 'test']", Power calculations for a difference of means,seg_69,"we could compute the power of the test at several other possible sample sizes until we find one that’s close to 80%, but there’s a better way. we should solve the problem backwards.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  2071, 24134,  1996,  2373,  1997,  1996,  3231,  2012,
         2195,  2060,  2825,  7099, 10826,  2127,  2057,  2424,  2028,  2008,
         1521,  1055,  2485,  2000,  3770,  1003,  1010,  2021,  2045,  1521,
         1055,  1037,  2488,  2126,  1012,  2057,  2323,  9611,  1996,  3291,
        11043,  1012,   102])"
1964,1,"['null distribution', 'distribution']", Power calculations for a difference of means,seg_69,distribution with null distribution µtrmt − µctrl = −3 −9 −6 −3 0 3 6 9 xtrmt − xctrl,tensor(1),"tensor([0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  4353,  2007, 19701,  4353,  1085, 16344, 20492,  1597,  1085,
         6593, 12190,  1027,  1597,  2509,  1597,  2683,  1597,  2575,  1597,
         2509,  1014,  1017,  1020,  1023,  1060, 16344, 20492,  1597,  1060,
         6593, 12190,   102])"
1965,1,"['sample', 'sample size']", Power calculations for a difference of means,seg_69,what sample size will lead to a power of 80%?,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([ 101, 2054, 7099, 2946, 2097, 2599, 2000, 1037, 2373, 1997, 3770, 1003,
        1029,  102])"
1966,1,"['test statistic', 'normal distribution', 'approximation', 'degrees of freedom', 'sample', 'normal', 'distribution', 'statistic', 'test']", Power calculations for a difference of means,seg_69,"we’ll assume we have a large enough sample that the normal distribution is a good approximation for the test statistic, since the normal distribution and the t-distribution look almost identical when the degrees of freedom are moderately large (e.g. df ≥ 30). if that doesn’t turn out to be true, then we’d need to make a correction.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  1521,  2222,  7868,  2057,  2031,  1037,  2312,  2438,
         7099,  2008,  1996,  3671,  4353,  2003,  1037,  2204, 20167,  2005,
         1996,  3231, 28093,  6553,  1010,  2144,  1996,  3671,  4353,  1998,
         1996,  1056,  1011,  4353,  2298,  2471,  7235,  2043,  1996,  5445,
         1997,  4071,  2024, 17844,  2312,  1006,  1041,  1012,  1043,  1012,
         1040,  2546,  1609,  2382,  1007,  1012,  2065,  2008,  2987,  1521,
         1056,  2735,  2041,  2000,  2022,  2995,  1010,  2059,  2057,  1521,
         1040,  2342,  2000,  2191,  1037, 18140,  1012,   102])"
1967,1,"['tail', 'sample', 'sample size']", Power calculations for a difference of means,seg_69,"we start by identifying the z-score that would give us a lower tail of 80%. for a moderately large sample size per group, the z-score for a lower tail of 80% would be about z = 0.84.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  2707,  2011, 12151,  1996,  1062,  1011,  3556,  2008,
         2052,  2507,  2149,  1037,  2896,  5725,  1997,  3770,  1003,  1012,
         2005,  1037, 17844,  2312,  7099,  2946,  2566,  2177,  1010,  1996,
         1062,  1011,  3556,  2005,  1037,  2896,  5725,  1997,  3770,  1003,
         2052,  2022,  2055,  1062,  1027,  1014,  1012,  6391,  1012,   102])"
1968,1,"['null distribution', 'distribution']", Power calculations for a difference of means,seg_69,distribution with null distribution µtrmt − µctrl = −3,tensor(1),"tensor([0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  4353,  2007, 19701,  4353,  1085, 16344, 20492,  1597,  1085,
         6593, 12190,  1027,  1597,  2509,   102])"
1969,1,"['null distribution', 'distributions', 'standard', 'distribution', 'standard error', 'rejection region', 'error']", Power calculations for a difference of means,seg_69,"additionally, the rejection region extends 1.96 × se from the center of the null distribution for α = 0.05. this allows us to calculate the target distance between the center of the null and alternative distributions in terms of the standard error:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  5678,  1010,  1996, 13893,  2555,  8908,  1015,  1012,  5986,
         1095,  7367,  2013,  1996,  2415,  1997,  1996, 19701,  4353,  2005,
         1155,  1027,  1014,  1012,  5709,  1012,  2023,  4473,  2149,  2000,
        18422,  1996,  4539,  3292,  2090,  1996,  2415,  1997,  1996, 19701,
         1998,  4522, 20611,  1999,  3408,  1997,  1996,  3115,  7561,  1024,
          102])"
1970,1,"['set', 'effect size', 'standard', 'standard error', 'error']", Power calculations for a difference of means,seg_69,"in our example, we want the distance between the null and alternative distributions’ centers to equal the minimum effect size of interest, 3 mmhg, which allows us to set up an equation between this difference and the standard error:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1999,  2256,  2742,  1010,  2057,  2215,  1996,  3292,  2090,
         1996, 19701,  1998,  4522, 20611,  1521,  6401,  2000,  5020,  1996,
         6263,  3466,  2946,  1997,  3037,  1010,  1017,  3461, 25619,  1010,
         2029,  4473,  2149,  2000,  2275,  2039,  2019,  8522,  2090,  2023,
         4489,  1998,  1996,  3115,  7561,  1024,   102])"
1971,1,"['significance', 'significance level', 'level']", Power calculations for a difference of means,seg_69,we should target 251 patients per group in order to achieve 80% power at the 0.05 significance level for this context.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2057,  2323,  4539, 22582,  5022,  2566,  2177,  1999,  2344,
         2000,  6162,  3770,  1003,  2373,  2012,  1996,  1014,  1012,  5709,
         7784,  2504,  2005,  2023,  6123,  1012,   102])"
1972,1,"['significance level', 'level', 'standard', 'standard error', 'significance', 'error']", Power calculations for a difference of means,seg_69,"the standard error difference of 2.8 × se is specific to a context where the targeted power is 80% and the significance level is α = 0.05. if the targeted power is 90% or if we use a different significance level, then we’ll use something a little different than 2.8× se.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1996,  3115,  7561,  4489,  1997,  1016,  1012,  1022,  1095,
         7367,  2003,  3563,  2000,  1037,  6123,  2073,  1996,  9416,  2373,
         2003,  3770,  1003,  1998,  1996,  7784,  2504,  2003,  1155,  1027,
         1014,  1012,  5709,  1012,  2065,  1996,  9416,  2373,  2003,  3938,
         1003,  2030,  2065,  2057,  2224,  1037,  2367,  7784,  2504,  1010,
         2059,  2057,  1521,  2222,  2224,  2242,  1037,  2210,  2367,  2084,
         1016,  1012,  1022, 26306,  7367,  1012,   102])"
1973,1,"['degrees of freedom', 'sample', 'sample size']", Power calculations for a difference of means,seg_69,"had the suggested sample size been relatively small – roughly 30 or smaller – it would have been a good idea to rework the calculations using the degrees of fredom for the smaller sample size under that initial sample size. that is, we would have revised the 0.84 and 1.96 values based on degrees of freedom implied by the initial sample size. the revised sample size target would generally have then been a little larger.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2018,  1996,  4081,  7099,  2946,  2042,  4659,  2235,  1516,
         5560,  2382,  2030,  3760,  1516,  2009,  2052,  2031,  2042,  1037,
         2204,  2801,  2000,  2128,  6198,  1996, 16268,  2478,  1996,  5445,
         1997,  5965,  5358,  2005,  1996,  3760,  7099,  2946,  2104,  2008,
         3988,  7099,  2946,  1012,  2008,  2003,  1010,  2057,  2052,  2031,
         8001,  1996,  1014,  1012,  6391,  1998,  1015,  1012,  5986,  5300,
         2241,  2006,  5445,  1997,  4071, 13339,  2011,  1996,  3988,  7099,
         2946,  1012,  1996,  8001,  7099,  2946,  4539,  2052,  3227,  2031,
         2059,  2042,  1037,  2210,  3469,  1012,   102])"
1974,1,"['effect size', 'standard errors', 'errors', 'standard', 'distribution']", Power calculations for a difference of means,seg_69,"suppose the targeted power was 90% and we were using α = 0.01. how many standard errors should separate the centers of the null and alternative distribution, where the alternative distribution is centered at the minimum effect size of interest?28",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  6814,  1996,  9416,  2373,  2001,  3938,  1003,  1998,  2057,
         2020,  2478,  1155,  1027,  1014,  1012,  5890,  1012,  2129,  2116,
         3115, 10697,  2323,  3584,  1996,  6401,  1997,  1996, 19701,  1998,
         4522,  4353,  1010,  2073,  1996,  4522,  4353,  2003,  8857,  2012,
         1996,  6263,  3466,  2946,  1997,  3037,  1029,  2654,   102])"
1975,0,[], Power calculations for a difference of means,seg_69,what are some considerations that are important in determining what the power should be for an experiment?29,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2054,  2024,  2070, 16852,  2008,  2024,  2590,  1999, 12515,
         2054,  1996,  2373,  2323,  2022,  2005,  2019,  7551,  1029,  2756,
          102])"
1976,1,"['curve', 'sample']", Power calculations for a difference of means,seg_69,"figure 7.18 shows the power for sample sizes from 20 patients to 5,000 patients when α = 0.05 and the true difference is -3. this curve was constructed by writing a program to compute the power for many different sample sizes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  3275,  1021,  1012,  2324,  3065,  1996,  2373,  2005,  7099,
        10826,  2013,  2322,  5022,  2000,  1019,  1010,  2199,  5022,  2043,
         1155,  1027,  1014,  1012,  5709,  1998,  1996,  2995,  4489,  2003,
         1011,  1017,  1012,  2023,  7774,  2001,  3833,  2011,  3015,  1037,
         2565,  2000, 24134,  1996,  2373,  2005,  2116,  2367,  7099, 10826,
         1012,   102])"
1977,1,"['sample', 'sample size']", Power calculations for a difference of means,seg_69,1.0 0.8 r 0.6 ewop 0.4 0.2 0.0 20 50 100 200 500 1000 2000 5000 sample size per group,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  1015,  1012,  1014,  1014,  1012,  1022,  1054,  1014,  1012,
         1020,  1041, 12155,  2361,  1014,  1012,  1018,  1014,  1012,  1016,
         1014,  1012,  1014,  2322,  2753,  2531,  3263,  3156,  6694,  2456,
        13509,  7099,  2946,  2566,  2177,   102])"
1978,1,"['curve', 'observations', 'sample']", Power calculations for a difference of means,seg_69,figure 7.18: the curve shows the power for different sample sizes in the context of the blood pressure example when the true difference is -3. having more than about 250 to 350 observations doesn’t provide much additional value in detecting an effect when α = 0.05.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  3275,  1021,  1012,  2324,  1024,  1996,  7774,  3065,  1996,
         2373,  2005,  2367,  7099, 10826,  1999,  1996,  6123,  1997,  1996,
         2668,  3778,  2742,  2043,  1996,  2995,  4489,  2003,  1011,  1017,
         1012,  2383,  2062,  2084,  2055,  5539,  2000,  8698,  9420,  2987,
         1521,  1056,  3073,  2172,  3176,  3643,  1999, 25952,  2019,  3466,
         2043,  1155,  1027,  1014,  1012,  5709,  1012,   102])"
1979,1,"['estimate', 'sample', 'sample size', 'experiment', 'experiments']", Power calculations for a difference of means,seg_69,"power calculations for expensive or risky experiments are critical. however, what about experiments that are inexpensive and where the ethical considerations are minimal? for example, if we are doing final testing on a new feature on a popular website, how would our sample size considerations change? as before, we’d want to make sure the sample is big enough. however, suppose the feature has undergone some testing and is known to perform well (e.g. the website’s users seem to enjoy the feature). then it may be reasonable to run a larger experiment if there’s value from having a more precise estimate of the feature’s effect, such as helping guide the development of the next useful feature.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2373, 16268,  2005,  1037,  4489,  1997,  2965])","tensor([  101,  2373, 16268,  2005,  6450,  2030, 19188,  7885,  2024,  4187,
         1012,  2174,  1010,  2054,  2055,  7885,  2008,  2024, 23766,  1998,
         2073,  1996, 12962, 16852,  2024, 10124,  1029,  2005,  2742,  1010,
         2065,  2057,  2024,  2725,  2345,  5604,  2006,  1037,  2047,  3444,
         2006,  1037,  2759,  4037,  1010,  2129,  2052,  2256,  7099,  2946,
        16852,  2689,  1029,  2004,  2077,  1010,  2057,  1521,  1040,  2215,
         2000,  2191,  2469,  1996,  7099,  2003,  2502,  2438,  1012,  2174,
         1010,  6814,  1996,  3444,  2038, 17215,  2070,  5604,  1998,  2003,
         2124,  2000,  4685,  2092,  1006,  1041,  1012,  1043,  1012,  1996,
         4037,  1521,  1055,  5198,  4025,  2000,  5959,  1996,  3444,  1007,
         1012,  2059,  2009,  2089,  2022,  9608,  2000,  2448,  1037,  3469,
         7551,  2065,  2045,  1521,  1055,  3643,  2013,  2383,  1037,  2062,
        10480, 10197,  1997,  1996,  3444,  1521,  1055,  3466,  1010,  2107,
         2004,  5094,  5009,  1996,  2458,  1997,  1996,  2279,  6179,  3444,
         1012,   102])"
1980,1,"['mean', 'populations', 'anova', 'pairwise comparisons', 'test']", Comparing many means with ANOVA,seg_71,"sometimes we want to compare means across many groups. we might initially think to do pairwise comparisons. for example, if there were three groups, we might be tempted to compare the first mean with the second, then with the third, and then finally compare the second and third means for a total of three comparisons. however, this strategy can be treacherous. if we have many groups and do many comparisons, it is likely that we will eventually find a difference just by chance, even if there is no difference in the populations. instead, we should apply a holistic test to check whether there is evidence that at least one pair groups are in fact different, and this is where anova saves the day.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2823,  2057,  2215,  2000, 12826,  2965,  2408,  2116,  2967,
         1012,  2057,  2453,  3322,  2228,  2000,  2079,  3940, 14244, 18539,
         1012,  2005,  2742,  1010,  2065,  2045,  2020,  2093,  2967,  1010,
         2057,  2453,  2022, 16312,  2000, 12826,  1996,  2034,  2812,  2007,
         1996,  2117,  1010,  2059,  2007,  1996,  2353,  1010,  1998,  2059,
         2633, 12826,  1996,  2117,  1998,  2353,  2965,  2005,  1037,  2561,
         1997,  2093, 18539,  1012,  2174,  1010,  2023,  5656,  2064,  2022,
        26648,  1012,  2065,  2057,  2031,  2116,  2967,  1998,  2079,  2116,
        18539,  1010,  2009,  2003,  3497,  2008,  2057,  2097,  2776,  2424,
         1037,  4489,  2074,  2011,  3382,  1010,  2130,  2065,  2045,  2003,
         2053,  4489,  1999,  1996,  7080,  1012,  2612,  1010,  2057,  2323,
         6611,  1037,  7570, 27348,  3231,  2000,  4638,  3251,  2045,  2003,
         3350,  2008,  2012,  2560,  2028,  3940,  2967,  2024,  1999,  2755,
         2367,  1010,  1998,  2023,  2003,  2073,  2019,  7103, 13169,  1996,
         2154,  1012,   102])"
1981,1,['anova'], Comparing many means with ANOVA,seg_71,7.5.1 core ideas of anova,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 1021, 1012, 1019, 1012, 1015, 4563, 4784, 1997, 2019, 7103,  102])"
1982,1,"['test statistic', 'variance', 'analysis of variance', 'hypothesis', 'method', 'anova', 'hypothesis test', 'statistic', 'test']", Comparing many means with ANOVA,seg_71,"in this section, we will learn a new method called analysis of variance (anova) and a new test statistic called f . anova uses a single hypothesis test to check whether the means across many groups are equal:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1999,  2023,  2930,  1010,  2057,  2097,  4553,  1037,  2047,
         4118,  2170,  4106,  1997, 23284,  1006,  2019,  7103,  1007,  1998,
         1037,  2047,  3231, 28093,  6553,  2170,  1042,  1012,  2019,  7103,
         3594,  1037,  2309, 10744,  3231,  2000,  4638,  3251,  1996,  2965,
         2408,  2116,  2967,  2024,  5020,  1024,   102])"
1983,1,"['mean', 'outcome', 'statistical']", Comparing many means with ANOVA,seg_71,"h0: the mean outcome is the same across all groups. in statistical notation, µ1 = µ2 = · · · = µk",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1044,  2692,  1024,  1996,  2812,  9560,  2003,  1996,  2168,
         2408,  2035,  2967,  1012,  1999,  7778, 14869,  1010,  1085,  2487,
         1027,  1085,  2475,  1027,  1087,  1087,  1087,  1027,  1085,  2243,
          102])"
1984,1,"['mean', 'observations', 'outcome']", Comparing many means with ANOVA,seg_71,where µi represents the mean of the outcome for observations in category i.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 2073, 1085, 2072, 5836, 1996, 2812, 1997, 1996, 9560, 2005, 9420,
        1999, 4696, 1045, 1012,  102])"
1985,1,['mean'], Comparing many means with ANOVA,seg_71,ha: at least one mean is different.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 5292, 1024, 2012, 2560, 2028, 2812, 2003, 2367, 1012,  102])"
1986,1,"['anova', 'data']", Comparing many means with ANOVA,seg_71,generally we must check three conditions on the data before performing anova:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 3227, 2057, 2442, 4638, 2093, 3785, 2006, 1996, 2951, 2077, 4488,
        2019, 7103, 1024,  102])"
1987,1,"['observations', 'independent']", Comparing many means with ANOVA,seg_71,"• the observations are independent within and across groups,",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 1528, 1996, 9420, 2024, 2981, 2306, 1998, 2408, 2967, 1010,  102])"
1988,1,"['normal', 'data']", Comparing many means with ANOVA,seg_71,"• the data within each group are nearly normal, and",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 1528, 1996, 2951, 2306, 2169, 2177, 2024, 3053, 3671, 1010, 1998,
         102])"
1989,1,['variability'], Comparing many means with ANOVA,seg_71,• the variability across the groups is about equal.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1528,  1996, 28436,  2408,  1996,  2967,  2003,  2055,  5020,
         1012,   102])"
1990,1,"['hypothesis', 'anova', 'null hypothesis', 'data']", Comparing many means with ANOVA,seg_71,"when these three conditions are met, we may perform an anova to determine whether the data provide strong evidence against the null hypothesis that all the µi are equal.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2043,  2122,  2093,  3785,  2024,  2777,  1010,  2057,  2089,
         4685,  2019,  2019,  7103,  2000,  5646,  3251,  1996,  2951,  3073,
         2844,  3350,  2114,  1996, 19701, 10744,  2008,  2035,  1996,  1085,
         2072,  2024,  5020,  1012,   102])"
1991,1,"['hypotheses', 'scores', 'statistically significant', 'statistics']", Comparing many means with ANOVA,seg_71,"college departments commonly run multiple lectures of the same introductory course each semester because of high demand. consider a statistics department that runs three lectures of an introductory statistics course. we might like to determine whether there are statistically significant differences in first exam scores in these three classes (a, b, and c). describe appropriate hypotheses to determine whether there are any differences between the three classes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2267,  7640,  4141,  2448,  3674,  8921,  1997,  1996,  2168,
        23889,  2607,  2169, 13609,  2138,  1997,  2152,  5157,  1012,  5136,
         1037,  6747,  2533,  2008,  3216,  2093,  8921,  1997,  2019, 23889,
         6747,  2607,  1012,  2057,  2453,  2066,  2000,  5646,  3251,  2045,
         2024,  7778,  2135,  3278,  5966,  1999,  2034, 11360,  7644,  1999,
         2122,  2093,  4280,  1006,  1037,  1010,  1038,  1010,  1998,  1039,
         1007,  1012,  6235,  6413,  1044, 22571, 14573, 23072,  2000,  5646,
         3251,  2045,  2024,  2151,  5966,  2090,  1996,  2093,  4280,  1012,
          102])"
1992,1,['hypotheses'], Comparing many means with ANOVA,seg_71,the hypotheses may be written in the following form:,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  1044, 22571, 14573, 23072,  2089,  2022,  2517,  1999,
         1996,  2206,  2433,  1024,   102])"
1993,1,['average'], Comparing many means with ANOVA,seg_71,h0: the average score is identical in all lectures. any observed difference is due to chance. nota-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 1044, 2692, 1024, 1996, 2779, 3556, 2003, 7235, 1999, 2035, 8921,
        1012, 2151, 5159, 4489, 2003, 2349, 2000, 3382, 1012, 2025, 2050, 1011,
         102])"
1994,1,"['null hypothesis', 'average', 'hypothesis']", Comparing many means with ANOVA,seg_71,ha: the average score varies by class. we would reject the null hypothesis in favor of the alternative,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  5292,  1024,  1996,  2779,  3556,  9783,  2011,  2465,  1012,
         2057,  2052, 15454,  1996, 19701, 10744,  1999,  5684,  1997,  1996,
         4522,   102])"
1995,0,[], Comparing many means with ANOVA,seg_71,hypothesis if there were larger differences among the class averages than what we might expect from chance alone.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101, 10744,  2065,  2045,  2020,  3469,  5966,  2426,  1996,  2465,
        20185,  2084,  2054,  2057,  2453,  5987,  2013,  3382,  2894,  1012,
          102])"
1996,1,"['variability', 'observations', 'hypothesis', 'anova', 'alternative hypothesis', 'success']", Comparing many means with ANOVA,seg_71,strong evidence favoring the alternative hypothesis in anova is described by unusually large differences among the group means. we will soon learn that assessing the variability of the group means relative to the variability among individual observations within each group is key to anova’s success.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2844,  3350,  5684,  2075,  1996,  4522, 10744,  1999,  2019,
         7103,  2003,  2649,  2011, 12890,  2312,  5966,  2426,  1996,  2177,
         2965,  1012,  2057,  2097,  2574,  4553,  2008, 20077,  1996, 28436,
         1997,  1996,  2177,  2965,  5816,  2000,  1996, 28436,  2426,  3265,
         9420,  2306,  2169,  2177,  2003,  3145,  2000,  2019,  7103,  1521,
         1055,  3112,  1012,   102])"
1997,0,[], Comparing many means with ANOVA,seg_71,"examine figure 7.19. compare groups i, ii, and iii. can you visually determine if the differences in the group centers is due to chance or not? now compare groups iv, v, and vi. do these differences appear to be due to chance?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101, 11628,  3275,  1021,  1012,  2539,  1012, 12826,  2967,  1045,
         1010,  2462,  1010,  1998,  3523,  1012,  2064,  2017, 17453,  5646,
         2065,  1996,  5966,  1999,  1996,  2177,  6401,  2003,  2349,  2000,
         3382,  2030,  2025,  1029,  2085, 12826,  2967,  4921,  1010,  1058,
         1010,  1998,  6819,  1012,  2079,  2122,  5966,  3711,  2000,  2022,
         2349,  2000,  3382,  1029,   102])"
1998,1,"['variability', 'mean', 'observations', 'outcome', 'average', 'data']", Comparing many means with ANOVA,seg_71,"any real difference in the means of groups i, ii, and iii is difficult to discern, because the data within each group are very volatile relative to any differences in the average outcome. on the other hand, it appears there are differences in the centers of groups iv, v, and vi. for instance, group v appears to have a higher mean than that of the other two groups. investigating groups iv, v, and vi, we see the differences in the groups’ centers are noticeable because those differences are large relative to the variability in the individual observations within each group.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2151,  2613,  4489,  1999,  1996,  2965,  1997,  2967,  1045,
         1010,  2462,  1010,  1998,  3523,  2003,  3697,  2000,  5860, 11795,
         1010,  2138,  1996,  2951,  2306,  2169,  2177,  2024,  2200, 20606,
         5816,  2000,  2151,  5966,  1999,  1996,  2779,  9560,  1012,  2006,
         1996,  2060,  2192,  1010,  2009,  3544,  2045,  2024,  5966,  1999,
         1996,  6401,  1997,  2967,  4921,  1010,  1058,  1010,  1998,  6819,
         1012,  2005,  6013,  1010,  2177,  1058,  3544,  2000,  2031,  1037,
         3020,  2812,  2084,  2008,  1997,  1996,  2060,  2048,  2967,  1012,
        11538,  2967,  4921,  1010,  1058,  1010,  1998,  6819,  1010,  2057,
         2156,  1996,  5966,  1999,  1996,  2967,  1521,  6401,  2024, 17725,
         2138,  2216,  5966,  2024,  2312,  5816,  2000,  1996, 28436,  1999,
         1996,  3265,  9420,  2306,  2169,  2177,  1012,   102])"
1999,1,"['outcomes', 'dot plot', 'plot']", Comparing many means with ANOVA,seg_71,figure 7.19: side-by-side dot plot for the outcomes for six groups.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2539,  1024,  2217,  1011,  2011,  1011,
         2217, 11089,  5436,  2005,  1996, 13105,  2005,  2416,  2967,  1012,
          102])"
2000,0,[], Comparing many means with ANOVA,seg_71,7.5.2 is batting performance related to player position in mlb?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1021,  1012,  1019,  1012,  1016,  2003,  9640,  2836,  3141,
         2000,  2447,  2597,  1999, 10901,  1029,   102])"
2001,1,"['cases', 'data set', 'set', 'percentage', 'outcome', 'data', 'variable']", Comparing many means with ANOVA,seg_71,"we would like to discern whether there are real differences between the batting performance of baseball players according to their position: outfielder (of), infielder (if), and catcher (c). we will use a data set called bat18, which includes batting records of 429 major league baseball (mlb) players from the 2018 season who had at least 100 at bats. six of the 429 cases represented in bat18 are shown in figure 7.20, and descriptions for each variable are provided in figure 7.21. the measure we will use for the player batting performance (the outcome variable) is on-base percentage (obp). the on-base percentage roughly represents the fraction of the time a player successfully gets on base or hits a home run.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2057,  2052,  2066,  2000,  5860, 11795,  3251,  2045,  2024,
         2613,  5966,  2090,  1996,  9640,  2836,  1997,  3598,  2867,  2429,
         2000,  2037,  2597,  1024, 21033,  1006,  1997,  1007,  1010,  1999,
         3790,  2121,  1006,  2065,  1007,  1010,  1998, 13795,  1006,  1039,
         1007,  1012,  2057,  2097,  2224,  1037,  2951,  2275,  2170,  7151,
        15136,  1010,  2029,  2950,  9640,  2636,  1997,  4413,  2683,  2350,
         2223,  3598,  1006, 10901,  1007,  2867,  2013,  1996,  2760,  2161,
         2040,  2018,  2012,  2560,  2531,  2012, 12236,  1012,  2416,  1997,
         1996,  4413,  2683,  3572,  3421,  1999,  7151, 15136,  2024,  3491,
         1999,  3275,  1021,  1012,  2322,  1010,  1998, 13271,  2005,  2169,
         8023,  2024,  3024,  1999,  3275,  1021,  1012,  2538,  1012,  1996,
         5468,  2057,  2097,  2224,  2005,  1996,  2447,  9640,  2836,  1006,
         1996,  9560,  8023,  1007,  2003,  2006,  1011,  2918,  7017,  1006,
        27885,  2361,  1007,  1012,  1996,  2006,  1011,  2918,  7017,  5560,
         5836,  1996, 12884,  1997,  1996,  2051,  1037,  2447,  5147,  4152,
         2006,  2918,  2030,  4978,  1037,  2188,  2448,  1012,   102])"
2002,1,"['data matrix', 'cases', 'data']", Comparing many means with ANOVA,seg_71,figure 7.20: six cases from the bat18 data matrix.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2322,  1024,  2416,  3572,  2013,  1996,
         7151, 15136,  2951,  8185,  1012,   102])"
2003,1,"['set', 'variables', 'data set', 'data']", Comparing many means with ANOVA,seg_71,figure 7.21: variables and their descriptions for the bat18 data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2538,  1024, 10857,  1998,  2037, 13271,
         2005,  1996,  7151, 15136,  2951,  2275,  1012,   102])"
2004,1,"['null hypothesis', 'hypothesis']", Comparing many means with ANOVA,seg_71,the null hypothesis under consideration is the following: µof = µif = µc. write the null and,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996, 19701, 10744,  2104,  9584,  2003,  1996,  2206,  1024,
         1085, 11253,  1027,  1085, 10128,  1027,  1085,  2278,  1012,  4339,
         1996, 19701,  1998,   102])"
2005,1,"['alternative hypotheses', 'hypotheses']", Comparing many means with ANOVA,seg_71,30 corresponding alternative hypotheses in plain language.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2382,  7978,  4522,  1044, 22571, 14573, 23072,  1999,  5810,
         2653,  1012,   102])"
2006,1,"['estimate', 'percentage', 'point estimate']", Comparing many means with ANOVA,seg_71,"the player positions have been divided into three groups: outfield (of), infield (if), and catcher (c). what would be an appropriate point estimate of the on-base percentage by outfielders, µof?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  2447,  4460,  2031,  2042,  4055,  2046,  2093,  2967,
         1024,  2041,  3790,  1006,  1997,  1007,  1010,  1999,  3790,  1006,
         2065,  1007,  1010,  1998, 13795,  1006,  1039,  1007,  1012,  2054,
         2052,  2022,  2019,  6413,  2391, 10197,  1997,  1996,  2006,  1011,
         2918,  7017,  2011, 21033,  2015,  1010,  1085, 11253,  1029,   102])"
2007,1,"['estimate', 'percentage', 'sample average', 'sample', 'average']", Comparing many means with ANOVA,seg_71,a good estimate of the on-base percentage by outfielders would be the sample average of obp for just those players whose position is outfield: x̄of = 0.320.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1037,  2204, 10197,  1997,  1996,  2006,  1011,  2918,  7017,
         2011, 21033,  2015,  2052,  2022,  1996,  7099,  2779,  1997, 27885,
         2361,  2005,  2074,  2216,  2867,  3005,  2597,  2003,  2041,  3790,
         1024,  1060, 11253,  1027,  1014,  1012, 13710,  1012,   102])"
2008,1,"['variability', 'variance', 'percentage', 'box plot', 'anova', 'statistics', 'plot']", Comparing many means with ANOVA,seg_71,figure 7.22 provides summary statistics for each group. a side-by-side box plot for the onbase percentage is shown in figure 7.23. notice that the variability appears to be approximately constant across groups; nearly constant variance across groups is an important assumption that must be satisfied before we consider the anova approach.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2570,  3640, 12654,  6747,  2005,  2169,
         2177,  1012,  1037,  2217,  1011,  2011,  1011,  2217,  3482,  5436,
         2005,  1996,  2006, 15058,  7017,  2003,  3491,  1999,  3275,  1021,
         1012,  2603,  1012,  5060,  2008,  1996, 28436,  3544,  2000,  2022,
         3155,  5377,  2408,  2967,  1025,  3053,  5377, 23284,  2408,  2967,
         2003,  2019,  2590, 11213,  2008,  2442,  2022,  8510,  2077,  2057,
         5136,  1996,  2019,  7103,  3921,  1012,   102])"
2009,1,"['percentage', 'statistics']", Comparing many means with ANOVA,seg_71,"figure 7.22: summary statistics of on-base percentage, split by player position.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2570,  1024, 12654,  6747,  1997,  2006,
         1011,  2918,  7017,  1010,  3975,  2011,  2447,  2597,  1012,   102])"
2010,1,"['percentage', 'box plot', 'outliers', 'plot']", Comparing many means with ANOVA,seg_71,"figure 7.23: side-by-side box plot of the on-base percentage for 429 players across three groups. with over a hundred players in both the infield and outfield groups, the apparent outliers are not a concern.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2603,  1024,  2217,  1011,  2011,  1011,
         2217,  3482,  5436,  1997,  1996,  2006,  1011,  2918,  7017,  2005,
         4413,  2683,  2867,  2408,  2093,  2967,  1012,  2007,  2058,  1037,
         3634,  2867,  1999,  2119,  1996,  1999,  3790,  1998,  2041,  3790,
         2967,  1010,  1996,  6835,  2041, 14355,  2015,  2024,  2025,  1037,
         5142,  1012,   102])"
2011,1,"['hypotheses', 'sample', 'sample means']", Comparing many means with ANOVA,seg_71,the largest difference between the sample means is between the catcher and the outfielder positions. consider again the original hypotheses:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  2922,  4489,  2090,  1996,  7099,  2965,  2003,  2090,
         1996, 13795,  1998,  1996, 21033,  4460,  1012,  5136,  2153,  1996,
         2434,  1044, 22571, 14573, 23072,  1024,   102])"
2012,1,"['average', 'percentage']", Comparing many means with ANOVA,seg_71,ha: the average on-base percentage (µi) varies across some (or all) groups.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 5292, 1024, 1996, 2779, 2006, 1011, 2918, 7017, 1006, 1085, 2072,
        1007, 9783, 2408, 2070, 1006, 2030, 2035, 1007, 2967, 1012,  102])"
2013,1,"['significance level', 'level', 'statistically significant', 'significance', 'test']", Comparing many means with ANOVA,seg_71,why might it be inappropriate to run the test by simply estimating whether the difference of µc and µof is statistically significant at a 0.05 significance level?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2339,  2453,  2009,  2022, 15884,  2000,  2448,  1996,  3231,
         2011,  3432,  9765, 22835,  3251,  1996,  4489,  1997,  1085,  2278,
         1998,  1085, 11253,  2003,  7778,  2135,  3278,  2012,  1037,  1014,
         1012,  5709,  7784,  2504,  1029,   102])"
2014,1,"['rate', 'data snooping', 'type 1 error', 'data', 'error', 'test']", Comparing many means with ANOVA,seg_71,"the primary issue here is that we are inspecting the data before picking the groups that will be compared. it is inappropriate to examine all data by eye (informal testing) and only afterwards decide which parts to formally test. this is called data snooping or data fishing. naturally, we would pick the groups with the large differences for the formal test, and this would leading to an inflation in the type 1 error rate. to understand this better, let’s consider a slightly different problem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  3078,  3277,  2182,  2003,  2008,  2057,  2024, 29508,
         1996,  2951,  2077,  8130,  1996,  2967,  2008,  2097,  2022,  4102,
         1012,  2009,  2003, 15884,  2000, 11628,  2035,  2951,  2011,  3239,
         1006, 11900,  5604,  1007,  1998,  2069,  5728,  5630,  2029,  3033,
         2000,  6246,  3231,  1012,  2023,  2003,  2170,  2951, 29044,  2075,
         2030,  2951,  5645,  1012,  8100,  1010,  2057,  2052,  4060,  1996,
         2967,  2007,  1996,  2312,  5966,  2005,  1996,  5337,  3231,  1010,
         1998,  2023,  2052,  2877,  2000,  2019, 14200,  1999,  1996,  2828,
         1015,  7561,  3446,  1012,  2000,  3305,  2023,  2488,  1010,  2292,
         1521,  1055,  5136,  1037,  3621,  2367,  3291,  1012,   102])"
2015,1,"['cases', 'random', 'test']", Comparing many means with ANOVA,seg_71,"suppose we are to measure the aptitude for students in 20 classes in a large elementary school at the beginning of the year. in this school, all students are randomly assigned to classrooms, so any differences we observe between the classes at the start of the year are completely due to chance. however, with so many groups, we will probably observe a few groups that look rather different from each other. if we select only these classes that look so different and then perform a formal test, we will probably make the wrong conclusion that the assignment wasn’t random. while we might only formally test differences for a few pairs of classes, we informally evaluated the other classes by eye before choosing the most extreme cases for a comparison.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  6814,  2057,  2024,  2000,  5468,  1996, 26794, 18679,  2005,
         2493,  1999,  2322,  4280,  1999,  1037,  2312,  4732,  2082,  2012,
         1996,  2927,  1997,  1996,  2095,  1012,  1999,  2023,  2082,  1010,
         2035,  2493,  2024, 18154,  4137,  2000, 12463,  1010,  2061,  2151,
         5966,  2057, 11949,  2090,  1996,  4280,  2012,  1996,  2707,  1997,
         1996,  2095,  2024,  3294,  2349,  2000,  3382,  1012,  2174,  1010,
         2007,  2061,  2116,  2967,  1010,  2057,  2097,  2763, 11949,  1037,
         2261,  2967,  2008,  2298,  2738,  2367,  2013,  2169,  2060,  1012,
         2065,  2057,  7276,  2069,  2122,  4280,  2008,  2298,  2061,  2367,
         1998,  2059,  4685,  1037,  5337,  3231,  1010,  2057,  2097,  2763,
         2191,  1996,  3308,  7091,  2008,  1996,  8775,  2347,  1521,  1056,
         6721,  1012,  2096,  2057,  2453,  2069,  6246,  3231,  5966,  2005,
         1037,  2261,  7689,  1997,  4280,  1010,  2057, 21858, 16330,  1996,
         2060,  4280,  2011,  3239,  2077, 10549,  1996,  2087,  6034,  3572,
         2005,  1037,  7831,  1012,   102])"
2016,1,['information'], Comparing many means with ANOVA,seg_71,"for additional information on the ideas expressed in example 7.44, we recommend reading about the prosecutor’s fallacy.31",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2005,  3176,  2592,  2006,  1996,  4784,  5228,  1999,  2742,
         1021,  1012,  4008,  1010,  2057, 16755,  3752,  2055,  1996, 12478,
         1521,  1055,  2991, 15719,  1012,  2861,   102])"
2017,1,"['sample', 'anova', 'population', 'sample means', 'statistic', 'test']", Comparing many means with ANOVA,seg_71,in the next section we will learn how to use the f statistic and anova to test whether observed differences in sample means could have happened just by chance even if there was no difference in the respective population means.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1999,  1996,  2279,  2930,  2057,  2097,  4553,  2129,  2000,
         2224,  1996,  1042, 28093,  6553,  1998,  2019,  7103,  2000,  3231,
         3251,  5159,  5966,  1999,  7099,  2965,  2071,  2031,  3047,  2074,
         2011,  3382,  2130,  2065,  2045,  2001,  2053,  4489,  1999,  1996,
         7972,  2313,  2965,  1012,   102])"
2018,1,"['variance', 'analysis of variance', 'anova']", Comparing many means with ANOVA,seg_71,7.5.3 analysis of variance (anova) and the f -test,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1021,  1012,  1019,  1012,  1017,  4106,  1997, 23284,  1006,
         2019,  7103,  1007,  1998,  1996,  1042,  1011,  3231,   102])"
2019,1,"['variability', 'mean', 'associated', 'variance', 'variation', 'analysis of variance', 'degrees of freedom', 'hypothesis', 'sample', 'method', 'mean square', 'null hypothesis', 'sample means']", Comparing many means with ANOVA,seg_71,"the method of analysis of variance in this context focuses on answering one question: is the variability in the sample means so large that it seems unlikely to be from chance alone? this question is different from earlier testing procedures since we will simultaneously consider many groups, and evaluate whether their sample means differ more than we would expect from natural variation. we call this variability the mean square between groups (msg), and it has an associated degrees of freedom, dfg = k − 1 when there are k groups. the msg can be thought of as a scaled variance formula for means. if the null hypothesis is true, any variation in the sample means is due",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  4118,  1997,  4106,  1997, 23284,  1999,  2023,  6123,
         7679,  2006, 10739,  2028,  3160,  1024,  2003,  1996, 28436,  1999,
         1996,  7099,  2965,  2061,  2312,  2008,  2009,  3849,  9832,  2000,
         2022,  2013,  3382,  2894,  1029,  2023,  3160,  2003,  2367,  2013,
         3041,  5604,  8853,  2144,  2057,  2097,  7453,  5136,  2116,  2967,
         1010,  1998, 16157,  3251,  2037,  7099,  2965, 11234,  2062,  2084,
         2057,  2052,  5987,  2013,  3019,  8386,  1012,  2057,  2655,  2023,
        28436,  1996,  2812,  2675,  2090,  2967,  1006,  5796,  2290,  1007,
         1010,  1998,  2009,  2038,  2019,  3378,  5445,  1997,  4071,  1010,
         1040,  2546,  2290,  1027,  1047,  1597,  1015,  2043,  2045,  2024,
         1047,  2967,  1012,  1996,  5796,  2290,  2064,  2022,  2245,  1997,
         2004,  1037, 18953, 23284,  5675,  2005,  2965,  1012,  2065,  1996,
        19701, 10744,  2003,  2995,  1010,  2151,  8386,  1999,  1996,  7099,
         2965,  2003,  2349,   102])"
2020,0,[], Comparing many means with ANOVA,seg_71,"32 to chance and shouldn’t be too large. details of msg calculations are provided in the footnote. however, we typically use software for these computations.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3590,  2000,  3382,  1998,  5807,  1521,  1056,  2022,  2205,
         2312,  1012,  4751,  1997,  5796,  2290, 16268,  2024,  3024,  1999,
         1996,  3329, 22074,  1012,  2174,  1010,  2057,  4050,  2224,  4007,
         2005,  2122, 22334,  2015,  1012,   102])"
2021,1,"['variability', 'degrees of freedom', 'hypothesis test', 'null hypothesis', 'mean', 'error', 'associated', 'estimate', 'mean square error', 'mean square', 'test', 'mse', 'hypothesis', 'anova', 'pooled variance', 'variance', 'sample', 'sample means']", Comparing many means with ANOVA,seg_71,"the mean square between the groups is, on its own, quite useless in a hypothesis test. we need a benchmark value for how much variability should be expected among the sample means if the null hypothesis is true. to this end, we compute a pooled variance estimate, often abbreviated as the mean square error (mse), which has an associated degrees of freedom value dfe = n − k. it is helpful to think of mse as a measure of the variability within the groups. details of the computations of the mse and a link to an extra online section for anova calculations are provided in the footnote33 for interested readers.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  2812,  2675,  2090,  1996,  2967,  2003,  1010,  2006,
         2049,  2219,  1010,  3243, 11809,  1999,  1037, 10744,  3231,  1012,
         2057,  2342,  1037,  6847, 10665,  3643,  2005,  2129,  2172, 28436,
         2323,  2022,  3517,  2426,  1996,  7099,  2965,  2065,  1996, 19701,
        10744,  2003,  2995,  1012,  2000,  2023,  2203,  1010,  2057, 24134,
         1037, 19107,  2094, 23284, 10197,  1010,  2411, 12066,  2004,  1996,
         2812,  2675,  7561,  1006,  5796,  2063,  1007,  1010,  2029,  2038,
         2019,  3378,  5445,  1997,  4071,  3643,  1040,  7959,  1027,  1050,
         1597,  1047,  1012,  2009,  2003, 14044,  2000,  2228,  1997,  5796,
         2063,  2004,  1037,  5468,  1997,  1996, 28436,  2306,  1996,  2967,
         1012,  4751,  1997,  1996, 22334,  2015,  1997,  1996,  5796,  2063,
         1998,  1037,  4957,  2000,  2019,  4469,  3784,  2930,  2005,  2019,
         7103, 16268,  2024,  3024,  1999,  1996,  3329, 22074, 22394,  2005,
         4699,  8141,  1012,   102])"
2022,1,"['test statistic', 'mse', 'hypothesis', 'sample', 'anova', 'null hypothesis', 'sample means', 'statistic', 'test']", Comparing many means with ANOVA,seg_71,"when the null hypothesis is true, any differences among the sample means are only due to chance, and the msg and mse should be about equal. as a test statistic for anova, we examine the fraction of msg and mse:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2043,  1996, 19701, 10744,  2003,  2995,  1010,  2151,  5966,
         2426,  1996,  7099,  2965,  2024,  2069,  2349,  2000,  3382,  1010,
         1998,  1996,  5796,  2290,  1998,  5796,  2063,  2323,  2022,  2055,
         5020,  1012,  2004,  1037,  3231, 28093,  6553,  2005,  2019,  7103,
         1010,  2057, 11628,  1996, 12884,  1997,  5796,  2290,  1998,  5796,
         2063,  1024,   102])"
2023,1,['mse'], Comparing many means with ANOVA,seg_71,msg f = mse,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 5796, 2290, 1042, 1027, 5796, 2063,  102])"
2024,1,"['variability', 'mse']", Comparing many means with ANOVA,seg_71,"the msg represents a measure of the between-group variability, and mse measures the variability within each of the groups.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  5796,  2290,  5836,  1037,  5468,  1997,  1996,  2090,
         1011,  2177, 28436,  1010,  1998,  5796,  2063,  5761,  1996, 28436,
         2306,  2169,  1997,  1996,  2967,  1012,   102])"
2025,1,"['mse', 'data', 'degrees of freedom']", Comparing many means with ANOVA,seg_71,"for the baseball data, msg = 0.00803 and mse = 0.00158. identify the degrees of freedom",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2005,  1996,  3598,  2951,  1010,  5796,  2290,  1027,  1014,
         1012,  4002, 17914,  2509,  1998,  5796,  2063,  1027,  1014,  1012,
        25604, 27814,  1012,  6709,  1996,  5445,  1997,  4071,   102])"
2026,1,"['mse', 'statistic', 'associated']", Comparing many means with ANOVA,seg_71,34 associated with msg and mse and verify the f statistic is approximately 5.077.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  4090,  3378,  2007,  5796,  2290,  1998,  5796,  2063,  1998,
        20410,  1996,  1042, 28093,  6553,  2003,  3155,  1019,  1012,  5718,
         2581,  1012,   102])"
2027,1,"['hypotheses', 'hypothesis test', 'associated', 'degrees of freedom', 'hypothesis', 'anova', 'distribution', 'f distribution', 'parameters', 'statistic', 'test']", Comparing many means with ANOVA,seg_71,"we can use the f statistic to evaluate the hypotheses in what is called an f -test. a p-value can be computed from the f statistic using an f distribution, which has two associated parameters: df1 and df2. for the f statistic in anova, df1 = dfg and df2 = dfe . an f distribution with 2 and 426 degrees of freedom, corresponding to the f statistic for the baseball hypothesis test, is shown in figure 7.24.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2057,  2064,  2224,  1996,  1042, 28093,  6553,  2000, 16157,
         1996,  1044, 22571, 14573, 23072,  1999,  2054,  2003,  2170,  2019,
         1042,  1011,  3231,  1012,  1037,  1052,  1011,  3643,  2064,  2022,
        24806,  2013,  1996,  1042, 28093,  6553,  2478,  2019,  1042,  4353,
         1010,  2029,  2038,  2048,  3378, 11709,  1024,  1040,  2546,  2487,
         1998,  1040,  2546,  2475,  1012,  2005,  1996,  1042, 28093,  6553,
         1999,  2019,  7103,  1010,  1040,  2546,  2487,  1027,  1040,  2546,
         2290,  1998,  1040,  2546,  2475,  1027,  1040,  7959,  1012,  2019,
         1042,  4353,  2007,  1016,  1998,  4413,  2575,  5445,  1997,  4071,
         1010,  7978,  2000,  1996,  1042, 28093,  6553,  2005,  1996,  3598,
        10744,  3231,  1010,  2003,  3491,  1999,  3275,  1021,  1012,  2484,
         1012,   102])"
2028,1,['tail'], Comparing many means with ANOVA,seg_71,small tail area 0 2 4 6 8,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 2235, 5725, 2181, 1014, 1016, 1018, 1020, 1022,  102])"
2029,1,"['f distribution', 'distribution']", Comparing many means with ANOVA,seg_71,figure 7.24: an f distribution with df1 = 2 and df2 = 426.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 3275, 1021, 1012, 2484, 1024, 2019, 1042, 4353, 2007, 1040, 2546,
        2487, 1027, 1016, 1998, 1040, 2546, 2475, 1027, 4413, 2575, 1012,  102])"
2030,1,"['variability', 'tail', 'mse', 'observations', 'hypothesis', 'sample', 'distribution', 'null hypothesis', 'sample means']", Comparing many means with ANOVA,seg_71,"the larger the observed variability in the sample means (msg) relative to the within-group observations (mse), the larger f will be and the stronger the evidence against the null hypothesis. because larger values of f represent stronger evidence against the null hypothesis, we use the upper tail of the distribution to compute a p-value.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  3469,  1996,  5159, 28436,  1999,  1996,  7099,  2965,
         1006,  5796,  2290,  1007,  5816,  2000,  1996,  2306,  1011,  2177,
         9420,  1006,  5796,  2063,  1007,  1010,  1996,  3469,  1042,  2097,
         2022,  1998,  1996,  6428,  1996,  3350,  2114,  1996, 19701, 10744,
         1012,  2138,  3469,  5300,  1997,  1042,  5050,  6428,  3350,  2114,
         1996, 19701, 10744,  1010,  2057,  2224,  1996,  3356,  5725,  1997,
         1996,  4353,  2000, 24134,  1037,  1052,  1011,  3643,  1012,   102])"
2031,1,"['variability', 'outcome', 'mean', 'standardized', 'model', 'statistic', 'test', 'test statistic', 'anova', 'parameters', 'tail', 'variance', 'sample', 'distribution', 'f distribution', 'sample means']", Comparing many means with ANOVA,seg_71,"analysis of variance (anova) is used to test whether the mean outcome differs across 2 or more groups. anova uses a test statistic f , which represents a standardized ratio of variability in the sample means relative to the variability within the groups. if h0 is true and the model conditions are satisfied, the statistic f follows an f distribution with parameters df1 = k − 1 and df2 = n− k. the upper tail of the f distribution is used to represent the p-value.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  4106,  1997, 23284,  1006,  2019,  7103,  1007,  2003,  2109,
         2000,  3231,  3251,  1996,  2812,  9560, 12980,  2408,  1016,  2030,
         2062,  2967,  1012,  2019,  7103,  3594,  1037,  3231, 28093,  6553,
         1042,  1010,  2029,  5836,  1037, 16367,  6463,  1997, 28436,  1999,
         1996,  7099,  2965,  5816,  2000,  1996, 28436,  2306,  1996,  2967,
         1012,  2065,  1044,  2692,  2003,  2995,  1998,  1996,  2944,  3785,
         2024,  8510,  1010,  1996, 28093,  6553,  1042,  4076,  2019,  1042,
         4353,  2007, 11709,  1040,  2546,  2487,  1027,  1047,  1597,  1015,
         1998,  1040,  2546,  2475,  1027,  1050, 22543,  1047,  1012,  1996,
         3356,  5725,  1997,  1996,  1042,  4353,  2003,  2109,  2000,  5050,
         1996,  1052,  1011,  3643,  1012,   102])"
2032,1,"['null hypothesis', 'hypothesis']", Comparing many means with ANOVA,seg_71,the p-value corresponding to the shaded area in figure 7.24 is equal to about 0.0066. does this provide strong evidence against the null hypothesis?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  1052,  1011,  3643,  7978,  2000,  1996, 25273,  2181,
         1999,  3275,  1021,  1012,  2484,  2003,  5020,  2000,  2055,  1014,
         1012,  4002, 28756,  1012,  2515,  2023,  3073,  2844,  3350,  2114,
         1996, 19701, 10744,  1029,   102])"
2033,1,"['significance level', 'percentage', 'hypothesis', 'level', 'null hypothesis', 'significance', 'average', 'data']", Comparing many means with ANOVA,seg_71,"the p-value is smaller than 0.05, indicating the evidence is strong enough to reject the null hypothesis at a significance level of 0.05. that is, the data provide strong evidence that the average on-base percentage varies by player’s primary field position.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  1052,  1011,  3643,  2003,  3760,  2084,  1014,  1012,
         5709,  1010,  8131,  1996,  3350,  2003,  2844,  2438,  2000, 15454,
         1996, 19701, 10744,  2012,  1037,  7784,  2504,  1997,  1014,  1012,
         5709,  1012,  2008,  2003,  1010,  1996,  2951,  3073,  2844,  3350,
         2008,  1996,  2779,  2006,  1011,  2918,  7017,  9783,  2011,  2447,
         1521,  1055,  3078,  2492,  2597,  1012,   102])"
2034,1,"['anova table', 'anova', 'table']", Comparing many means with ANOVA,seg_71,7.5.4 reading an anova table from software,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 1021, 1012, 1019, 1012, 1018, 3752, 2019, 2019, 7103, 2795, 2013,
        4007,  102])"
2035,1,"['anova', 'statistical', 'statistic', 'error']", Comparing many means with ANOVA,seg_71,"the calculations required to perform an anova by hand are tedious and prone to human error. for these reasons, it is common to use statistical software to calculate the f statistic and p-value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996, 16268,  3223,  2000,  4685,  2019,  2019,  7103,  2011,
         2192,  2024,  6945,  6313,  1998, 13047,  2000,  2529,  7561,  1012,
         2005,  2122,  4436,  1010,  2009,  2003,  2691,  2000,  2224,  7778,
         4007,  2000, 18422,  1996,  1042, 28093,  6553,  1998,  1052,  1011,
         3643,  1012,   102])"
2036,1,"['mean', 'regression', 'table', 'percentage', 'anova', 'statistic', 'test']", Comparing many means with ANOVA,seg_71,"an anova can be summarized in a table very similar to that of a regression summary, which we will see in chapters 8 and 9. figure 7.25 shows an anova summary to test whether the mean of on-base percentage varies by player positions in the mlb. many of these values should look familiar; in particular, the f -test statistic and p-value can be retrieved from the last two columns.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2019,  2019,  7103,  2064,  2022, 22539,  1999,  1037,  2795,
         2200,  2714,  2000,  2008,  1997,  1037, 26237, 12654,  1010,  2029,
         2057,  2097,  2156,  1999,  9159,  1022,  1998,  1023,  1012,  3275,
         1021,  1012,  2423,  3065,  2019,  2019,  7103, 12654,  2000,  3231,
         3251,  1996,  2812,  1997,  2006,  1011,  2918,  7017,  9783,  2011,
         2447,  4460,  1999,  1996, 10901,  1012,  2116,  1997,  2122,  5300,
         2323,  2298,  5220,  1025,  1999,  3327,  1010,  1996,  1042,  1011,
         3231, 28093,  6553,  1998,  1052,  1011,  3643,  2064,  2022,  5140,
         2013,  1996,  2197,  2048,  7753,  1012,   102])"
2037,1,"['mean', 'residuals']", Comparing many means with ANOVA,seg_71,df sum sq mean sq f value pr(>f) position 2 0.0161 0.0080 5.0766 0.0066 residuals 426 0.6740 0.0016 spooled = 0.040 on df = 423,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1040,  2546,  7680,  5490,  2812,  5490,  1042,  3643, 10975,
         1006,  1028,  1042,  1007,  2597,  1016,  1014,  1012,  5890,  2575,
         2487,  1014,  1012,  4002, 17914,  1019,  1012,  5718, 28756,  1014,
         1012,  4002, 28756, 21961,  2015,  4413,  2575,  1014,  1012,  6163,
        12740,  1014,  1012, 25604,  2575, 11867, 13669,  2098,  1027,  1014,
         1012,  5840,  2692,  2006,  1040,  2546,  1027,  4413,  2509,   102])"
2038,1,"['percentage', 'anova', 'average']", Comparing many means with ANOVA,seg_71,figure 7.25: anova summary for testing whether the average on-base percentage differs across player positions.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2423,  1024,  2019,  7103, 12654,  2005,
         5604,  3251,  1996,  2779,  2006,  1011,  2918,  7017, 12980,  2408,
         2447,  4460,  1012,   102])"
2039,1,"['anova', 'graphical']", Comparing many means with ANOVA,seg_71,7.5.5 graphical diagnostics for an anova analysis,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1021,  1012,  1019,  1012,  1019, 20477, 16474,  2015,  2005,
         2019,  2019,  7103,  4106,   102])"
2040,1,"['variance', 'observations', 'normal', 'anova', 'data', 'independent']", Comparing many means with ANOVA,seg_71,"there are three conditions we must check for an anova analysis: all observations must be independent, the data in each group must be nearly normal, and the variance within each group must be approximately equal.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2045,  2024,  2093,  3785,  2057,  2442,  4638,  2005,  2019,
         2019,  7103,  4106,  1024,  2035,  9420,  2442,  2022,  2981,  1010,
         1996,  2951,  1999,  2169,  2177,  2442,  2022,  3053,  3671,  1010,
         1998,  1996, 23284,  2306,  2169,  2177,  2442,  2022,  3155,  5020,
         1012,   102])"
2041,1,"['processes', 'random sample', 'sample', 'random', 'simple random sample', 'condition', 'data']", Comparing many means with ANOVA,seg_71,"independence. if the data are a simple random sample, this condition is satisfied. for processes",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 4336, 1012, 2065, 1996, 2951, 2024, 1037, 3722, 6721, 7099, 1010,
        2023, 4650, 2003, 8510, 1012, 2005, 6194,  102])"
2042,1,"['observations', 'independence', 'experiments', 'data', 'independent']", Comparing many means with ANOVA,seg_71,"and experiments, carefully consider whether the data may be independent (e.g. no pairing). for example, in the mlb data, the data were not sampled. however, there are not obvious reasons why independence would not hold for most or all observations.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1998,  7885,  1010,  5362,  5136,  3251,  1996,  2951,  2089,
         2022,  2981,  1006,  1041,  1012,  1043,  1012,  2053, 22778,  1007,
         1012,  2005,  2742,  1010,  1999,  1996, 10901,  2951,  1010,  1996,
         2951,  2020,  2025, 18925,  1012,  2174,  1010,  2045,  2024,  2025,
         5793,  4436,  2339,  4336,  2052,  2025,  2907,  2005,  2087,  2030,
         2035,  9420,  1012,   102])"
2043,1,"['normal', 'normality']", Comparing many means with ANOVA,seg_71,"approximately normal. as with oneand two-sample testing for means, the normality assump-",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3155,  3671,  1012,  2004,  2007,  2028,  5685,  2048,  1011,
         7099,  5604,  2005,  2965,  1010,  1996,  3671,  3012,  4632, 24237,
         1011,   102])"
2044,1,"['observations', 'histogram', 'sample', 'sample size', 'outliers']", Comparing many means with ANOVA,seg_71,"tion is especially important when the sample size is quite small when it is ironically difficult to check for non-normality. a histogram of the observations from each group is shown in figure 7.26. since each of the groups we’re considering have relatively large sample sizes, what we’re looking for are major outliers. none are apparent, so this conditions is reasonably met.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101, 14841,  2239,  2003,  2926,  2590,  2043,  1996,  7099,  2946,
         2003,  3243,  2235,  2043,  2009,  2003, 18527,  3697,  2000,  4638,
         2005,  2512,  1011,  3671,  3012,  1012,  1037,  2010,  3406, 13113,
         1997,  1996,  9420,  2013,  2169,  2177,  2003,  3491,  1999,  3275,
         1021,  1012,  2656,  1012,  2144,  2169,  1997,  1996,  2967,  2057,
         1521,  2128,  6195,  2031,  4659,  2312,  7099, 10826,  1010,  2054,
         2057,  1521,  2128,  2559,  2005,  2024,  2350,  2041, 14355,  2015,
         1012,  3904,  2024,  6835,  1010,  2061,  2023,  3785,  2003, 16286,
         2777,  1012,   102])"
2045,0,[], Comparing many means with ANOVA,seg_71,outfielders in−fielders catchers,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101, 21033,  2015,  1999, 22543,  3790,  2545, 13795,  2015,   102])"
2046,1,['histograms'], Comparing many means with ANOVA,seg_71,figure 7.26: histograms of obp for each field position.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2656,  1024,  2010,  3406, 13113,  2015,
         1997, 27885,  2361,  2005,  2169,  2492,  2597,  1012,   102])"
2047,1,['variance'], Comparing many means with ANOVA,seg_71,constant variance. the last assumption is that the variance in the groups is about equal from,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  5377, 23284,  1012,  1996,  2197, 11213,  2003,  2008,  1996,
        23284,  1999,  1996,  2967,  2003,  2055,  5020,  2013,   102])"
2048,1,"['variability', 'vary', 'deviation', 'table', 'outcomes', 'standard deviation', 'box plot', 'standard', 'plot', 'case']", Comparing many means with ANOVA,seg_71,"one group to the next. this assumption can be checked by examining a side-by-side box plot of the outcomes across the groups, as in figure 7.23 on page 287. in this case, the variability is similar in the four groups but not identical. we see in table 7.22 on page 287 that the standard deviation doesn’t vary much from one group to the next.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2028,  2177,  2000,  1996,  2279,  1012,  2023, 11213,  2064,
         2022,  7039,  2011, 12843,  1037,  2217,  1011,  2011,  1011,  2217,
         3482,  5436,  1997,  1996, 13105,  2408,  1996,  2967,  1010,  2004,
         1999,  3275,  1021,  1012,  2603,  2006,  3931, 23090,  1012,  1999,
         2023,  2553,  1010,  1996, 28436,  2003,  2714,  1999,  1996,  2176,
         2967,  2021,  2025,  7235,  1012,  2057,  2156,  1999,  2795,  1021,
         1012,  2570,  2006,  3931, 23090,  2008,  1996,  3115, 24353,  2987,
         1521,  1056,  8137,  2172,  2013,  2028,  2177,  2000,  1996,  2279,
         1012,   102])"
2049,1,"['variance', 'sample', 'condition', 'anova', 'normality']", Comparing many means with ANOVA,seg_71,independence is always important to an anova analysis. the normality condition is very important when the sample sizes for each group are relatively small. the constant variance condition is especially important when the sample sizes differ between groups.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  4336,  2003,  2467,  2590,  2000,  2019,  2019,  7103,  4106,
         1012,  1996,  3671,  3012,  4650,  2003,  2200,  2590,  2043,  1996,
         7099, 10826,  2005,  2169,  2177,  2024,  4659,  2235,  1012,  1996,
         5377, 23284,  4650,  2003,  2926,  2590,  2043,  1996,  7099, 10826,
        11234,  2090,  2967,  1012,   102])"
2050,1,"['rate', 'multiple comparisons', 'type 1 error', 'error']", Comparing many means with ANOVA,seg_71,7.5.6 multiple comparisons and controlling type 1 error rate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1021,  1012,  1019,  1012,  1020,  3674, 18539,  1998,  9756,
         2828,  1015,  7561,  3446,   102])"
2051,1,"['significance level', 'anova table', 'deviation', 'table', 'estimate', 'hypothesis', 'level', 'standard deviation', 'anova', 'standard', 'pooled standard deviation', 'null hypothesis', 'significance']", Comparing many means with ANOVA,seg_71,"when we reject the null hypothesis in an anova analysis, we might wonder, which of these groups have different means? to answer this question, we compare the means of each possible pair of groups. for instance, if there are three groups and there is strong evidence that there are some differences in the group means, there are three comparisons to make: group 1 to group 2, group 1 to group 3, and group 2 to group 3. these comparisons can be accomplished using a two-sample t-test, but we use a modified significance level and a pooled estimate of the standard deviation across groups. usually this pooled standard deviation can be found in the anova table, e.g. along the bottom of figure 7.25.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2043,  2057, 15454,  1996, 19701, 10744,  1999,  2019,  2019,
         7103,  4106,  1010,  2057,  2453,  4687,  1010,  2029,  1997,  2122,
         2967,  2031,  2367,  2965,  1029,  2000,  3437,  2023,  3160,  1010,
         2057, 12826,  1996,  2965,  1997,  2169,  2825,  3940,  1997,  2967,
         1012,  2005,  6013,  1010,  2065,  2045,  2024,  2093,  2967,  1998,
         2045,  2003,  2844,  3350,  2008,  2045,  2024,  2070,  5966,  1999,
         1996,  2177,  2965,  1010,  2045,  2024,  2093, 18539,  2000,  2191,
         1024,  2177,  1015,  2000,  2177,  1016,  1010,  2177,  1015,  2000,
         2177,  1017,  1010,  1998,  2177,  1016,  2000,  2177,  1017,  1012,
         2122, 18539,  2064,  2022,  8885,  2478,  1037,  2048,  1011,  7099,
         1056,  1011,  3231,  1010,  2021,  2057,  2224,  1037,  6310,  7784,
         2504,  1998,  1037, 19107,  2094, 10197,  1997,  1996,  3115, 24353,
         2408,  2967,  1012,  2788,  2023, 19107,  2094,  3115, 24353,  2064,
         2022,  2179,  1999,  1996,  2019,  7103,  2795,  1010,  1041,  1012,
         1043,  1012,  2247,  1996,  3953,  1997,  3275,  1021,  1012,  2423,
         1012,   102])"
2052,1,"['data', 'box plot', 'anova', 'statistics', 'deviations', 'plot']", Comparing many means with ANOVA,seg_71,"example 7.40 on page 285 discussed three statistics lectures, all taught during the same semester. figure 7.27 shows summary statistics for these three courses, and a side-by-side box plot of the data is shown in figure 7.28. we would like to conduct an anova for these data. do you see any deviations from the three conditions for anova?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2742,  1021,  1012,  2871,  2006,  3931, 21777,  6936,  2093,
         6747,  8921,  1010,  2035,  4036,  2076,  1996,  2168, 13609,  1012,
         3275,  1021,  1012,  2676,  3065, 12654,  6747,  2005,  2122,  2093,
         5352,  1010,  1998,  1037,  2217,  1011,  2011,  1011,  2217,  3482,
         5436,  1997,  1996,  2951,  2003,  3491,  1999,  3275,  1021,  1012,
         2654,  1012,  2057,  2052,  2066,  2000,  6204,  2019,  2019,  7103,
         2005,  2122,  2951,  1012,  2079,  2017,  2156,  2151, 24353,  2015,
         2013,  1996,  2093,  3785,  2005,  2019,  7103,  1029,   102])"
2053,1,"['independence', 'data', 'case']", Comparing many means with ANOVA,seg_71,"in this case (like many others) it is difficult to check independence in a rigorous way. instead, the best we can do is use common sense to consider reasons the assumption of independence may not hold. for instance, the independence assumption may not be reasonable if there is a star teaching assistant that only half of the students may access; such a scenario would divide a class into two subgroups. no such situations were evident for these particular data, and we believe that independence is acceptable.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1999,  2023,  2553,  1006,  2066,  2116,  2500,  1007,  2009,
         2003,  3697,  2000,  4638,  4336,  1999,  1037, 20001,  2126,  1012,
         2612,  1010,  1996,  2190,  2057,  2064,  2079,  2003,  2224,  2691,
         3168,  2000,  5136,  4436,  1996, 11213,  1997,  4336,  2089,  2025,
         2907,  1012,  2005,  6013,  1010,  1996,  4336, 11213,  2089,  2025,
         2022,  9608,  2065,  2045,  2003,  1037,  2732,  4252,  3353,  2008,
         2069,  2431,  1997,  1996,  2493,  2089,  3229,  1025,  2107,  1037,
        11967,  2052, 11443,  1037,  2465,  2046,  2048, 20576,  2015,  1012,
         2053,  2107,  8146,  2020, 10358,  2005,  2122,  3327,  2951,  1010,
         1998,  2057,  2903,  2008,  4336,  2003, 11701,  1012,   102])"
2054,1,"['distributions', 'outliers', 'box plot', 'plot', 'symmetric']", Comparing many means with ANOVA,seg_71,the distributions in the side-by-side box plot appear to be roughly symmetric and show no noticeable outliers.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996, 20611,  1999,  1996,  2217,  1011,  2011,  1011,  2217,
         3482,  5436,  3711,  2000,  2022,  5560, 19490,  1998,  2265,  2053,
        17725,  2041, 14355,  2015,  1012,   102])"
2055,1,"['box plots', 'variability', 'variance', 'plots']", Comparing many means with ANOVA,seg_71,"the box plots show approximately equal variability, which can be verified in figure 7.27, supporting the constant variance assumption.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  3482, 14811,  2265,  3155,  5020, 28436,  1010,  2029,
         2064,  2022, 20119,  1999,  3275,  1021,  1012,  2676,  1010,  4637,
         1996,  5377, 23284, 11213,  1012,   102])"
2056,1,"['scores', 'statistics']", Comparing many means with ANOVA,seg_71,figure 7.27: summary statistics for the first midterm scores in three different lectures of the same course.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2676,  1024, 12654,  6747,  2005,  1996,
         2034,  3054,  3334,  2213,  7644,  1999,  2093,  2367,  8921,  1997,
         1996,  2168,  2607,  1012,   102])"
2057,1,"['scores', 'box plot', 'plot']", Comparing many means with ANOVA,seg_71,figure 7.28: side-by-side box plot for the first midterm scores in three different lectures of the same course.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 3275, 1021, 1012, 2654, 1024, 2217, 1011, 2011, 1011, 2217, 3482,
        5436, 2005, 1996, 2034, 3054, 3334, 2213, 7644, 1999, 2093, 2367, 8921,
        1997, 1996, 2168, 2607, 1012,  102])"
2058,1,"['results', 'data']", Comparing many means with ANOVA,seg_71,"anova was conducted for the midterm data, and summary results are shown in figure 7.29. what should we conclude?35",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2019,  7103,  2001,  4146,  2005,  1996,  3054,  3334,  2213,
         2951,  1010,  1998, 12654,  3463,  2024,  3491,  1999,  3275,  1021,
         1012,  2756,  1012,  2054,  2323,  2057, 16519,  1029,  3486,   102])"
2059,1,"['mean', 'residuals']", Comparing many means with ANOVA,seg_71,df sum sq mean sq f value pr(>f) lecture 2 1290.11 645.06 3.48 0.0330 residuals 161 29810.13 185.16 spooled = 13.61 on df = 161,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1040,  2546,  7680,  5490,  2812,  5490,  1042,  3643, 10975,
         1006,  1028,  1042,  1007,  8835,  1016, 14378,  2692,  1012,  2340,
         4185,  2629,  1012,  5757,  1017,  1012,  4466,  1014,  1012,  6021,
        14142, 21961,  2015, 17365, 27240, 10790,  1012,  2410, 15376,  1012,
         2385, 11867, 13669,  2098,  1027,  2410,  1012,  6079,  2006,  1040,
         2546,  1027, 17365,   102])"
2060,1,"['anova', 'data', 'table']", Comparing many means with ANOVA,seg_71,figure 7.29: anova summary table for the midterm data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3275,  1021,  1012,  2756,  1024,  2019,  7103, 12654,  2795,
         2005,  1996,  3054,  3334,  2213,  2951,  1012,   102])"
2061,1,"['significance level', 'rate', 'level', 'tests', 'type 1 error', 'significance', 'error', 'test']", Comparing many means with ANOVA,seg_71,"there is strong evidence that the different means in each of the three classes is not simply due to chance. we might wonder, which of the classes are actually different? as discussed in earlier chapters, a two-sample t-test could be used to test for differences in each possible pair of groups. however, one pitfall was discussed in example 7.44 on page 288: when we run so many tests, the type 1 error rate increases. this issue is resolved by using a modified significance level.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2045,  2003,  2844,  3350,  2008,  1996,  2367,  2965,  1999,
         2169,  1997,  1996,  2093,  4280,  2003,  2025,  3432,  2349,  2000,
         3382,  1012,  2057,  2453,  4687,  1010,  2029,  1997,  1996,  4280,
         2024,  2941,  2367,  1029,  2004,  6936,  1999,  3041,  9159,  1010,
         1037,  2048,  1011,  7099,  1056,  1011,  3231,  2071,  2022,  2109,
         2000,  3231,  2005,  5966,  1999,  2169,  2825,  3940,  1997,  2967,
         1012,  2174,  1010,  2028,  6770, 13976,  2001,  6936,  1999,  2742,
         1021,  1012,  4008,  2006,  3931, 24841,  1024,  2043,  2057,  2448,
         2061,  2116,  5852,  1010,  1996,  2828,  1015,  7561,  3446,  7457,
         1012,  2023,  3277,  2003, 10395,  2011,  2478,  1037,  6310,  7784,
         2504,  1012,   102])"
2062,1,"['bonferroni correction', 'significance level', 'level', 'multiple comparisons', 'tests', 'significance']", Comparing many means with ANOVA,seg_71,the scenario of testing many pairs of groups is called multiple comparisons. the bonferroni correction suggests that a more stringent significance level is more appropriate for these tests:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996, 11967,  1997,  5604,  2116,  7689,  1997,  2967,  2003,
         2170,  3674, 18539,  1012,  1996, 14753,  7512,  4948,  2072, 18140,
         6083,  2008,  1037,  2062,  5164,  4765,  7784,  2504,  2003,  2062,
         6413,  2005,  2122,  5852,  1024,   102])"
2063,0,[], Comparing many means with ANOVA,seg_71,"where k is the number of comparisons being considered (formally or informally). if there are k(k−1) k groups, then usually all possible pairs are compared and k = . 2",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2073,  1047,  2003,  1996,  2193,  1997, 18539,  2108,  2641,
         1006,  6246,  2030, 21858,  1007,  1012,  2065,  2045,  2024,  1047,
         1006,  1047, 27944,  1007,  1047,  2967,  1010,  2059,  2788,  2035,
         2825,  7689,  2024,  4102,  1998,  1047,  1027,  1012,  1016,   102])"
2064,1,"['bonferroni correction', 'average', 'pairwise comparisons']", Comparing many means with ANOVA,seg_71,"in guided practice 7.48, you found strong evidence of differences in the average midterm grades between the three lectures. complete the three possible pairwise comparisons using the bonferroni correction and report any differences.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1999,  8546,  3218,  1021,  1012,  4466,  1010,  2017,  2179,
         2844,  3350,  1997,  5966,  1999,  1996,  2779,  3054,  3334,  2213,
         7022,  2090,  1996,  2093,  8921,  1012,  3143,  1996,  2093,  2825,
         3940, 14244, 18539,  2478,  1996, 14753,  7512,  4948,  2072, 18140,
         1998,  3189,  2151,  5966,  1012,   102])"
2065,1,"['significance level', 'deviation', 'table', 'estimate', 'level', 'standard deviation', 'anova', 'standard', 'significance']", Comparing many means with ANOVA,seg_71,"we use a modified significance level of α? = 0.05/3 = 0.0167. additionally, we use the pooled estimate of the standard deviation: spooled = 13.61 on df = 161, which is provided in the anova summary table.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2057,  2224,  1037,  6310,  7784,  2504,  1997,  1155,  1029,
         1027,  1014,  1012,  5709,  1013,  1017,  1027,  1014,  1012,  5890,
         2575,  2581,  1012,  5678,  1010,  2057,  2224,  1996, 19107,  2094,
        10197,  1997,  1996,  3115, 24353,  1024, 11867, 13669,  2098,  1027,
         2410,  1012,  6079,  2006,  1040,  2546,  1027, 17365,  1010,  2029,
         2003,  3024,  1999,  1996,  2019,  7103, 12654,  2795,  1012,   102])"
2066,1,"['estimated', 'standard', 'standard error', 'error']", Comparing many means with ANOVA,seg_71,"lecture a versus lecture b: the estimated difference and standard error are, respectively,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 8835, 1037, 6431, 8835, 1038, 1024, 1996, 4358, 4489, 1998, 3115,
        7561, 2024, 1010, 4414, 1010,  102])"
2067,1,"['significance level', 'associated', 'level', 'results', 'statistical', 'significance']", Comparing many means with ANOVA,seg_71,"(see section 7.3.4 on page 273 for additional details.) this results in a t-score of 1.21 on df = 161 (we use the df associated with spooled). statistical software was used to precisely identify the twosided p-value since the modified significance level of 0.0167 is not found in the t-table. the p-value (0.228) is larger than α∗ = 0.0167, so there is not strong evidence of a difference in the means of lectures a and b.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1006,  2156,  2930,  1021,  1012,  1017,  1012,  1018,  2006,
         3931, 25371,  2005,  3176,  4751,  1012,  1007,  2023,  3463,  1999,
         1037,  1056,  1011,  3556,  1997,  1015,  1012,  2538,  2006,  1040,
         2546,  1027, 17365,  1006,  2057,  2224,  1996,  1040,  2546,  3378,
         2007, 11867, 13669,  2098,  1007,  1012,  7778,  4007,  2001,  2109,
         2000, 10785,  6709,  1996,  2048,  7363,  2094,  1052,  1011,  3643,
         2144,  1996,  6310,  7784,  2504,  1997,  1014,  1012,  5890,  2575,
         2581,  2003,  2025,  2179,  1999,  1996,  1056,  1011,  2795,  1012,
         1996,  1052,  1011,  3643,  1006,  1014,  1012, 22238,  1007,  2003,
         3469,  2084,  1155, 30125,  1027,  1014,  1012,  5890,  2575,  2581,
         1010,  2061,  2045,  2003,  2025,  2844,  3350,  1997,  1037,  4489,
         1999,  1996,  2965,  1997,  8921,  1037,  1998,  1038,  1012,   102])"
2068,1,"['estimated', 'results', 'standard', 'standard error', 'error']", Comparing many means with ANOVA,seg_71,"lecture a versus lecture c: the estimated difference and standard error are 3.8 and 2.61, respectively. this results in a t score of 1.46 on df = 161 and a two-sided p-value of 0.1462. this p-value is larger than α∗, so there is not strong evidence of a difference in the means of lectures a and c.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  8835,  1037,  6431,  8835,  1039,  1024,  1996,  4358,  4489,
         1998,  3115,  7561,  2024,  1017,  1012,  1022,  1998,  1016,  1012,
         6079,  1010,  4414,  1012,  2023,  3463,  1999,  1037,  1056,  3556,
         1997,  1015,  1012,  4805,  2006,  1040,  2546,  1027, 17365,  1998,
         1037,  2048,  1011, 11536,  1052,  1011,  3643,  1997,  1014,  1012,
        16333,  2475,  1012,  2023,  1052,  1011,  3643,  2003,  3469,  2084,
         1155, 30125,  1010,  2061,  2045,  2003,  2025,  2844,  3350,  1997,
         1037,  4489,  1999,  1996,  2965,  1997,  8921,  1037,  1998,  1039,
         1012,   102])"
2069,1,"['estimated', 'results', 'standard', 'standard error', 'error']", Comparing many means with ANOVA,seg_71,"lecture b versus lecture c: the estimated difference and standard error are 6.9 and 2.65, respectively. this results in a t score of 2.60 on df = 161 and a two-sided p-value of 0.0102. this p-value is smaller than α∗. here we find strong evidence of a difference in the means of lectures b and c.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  8835,  1038,  6431,  8835,  1039,  1024,  1996,  4358,  4489,
         1998,  3115,  7561,  2024,  1020,  1012,  1023,  1998,  1016,  1012,
         3515,  1010,  4414,  1012,  2023,  3463,  1999,  1037,  1056,  3556,
         1997,  1016,  1012,  3438,  2006,  1040,  2546,  1027, 17365,  1998,
         1037,  2048,  1011, 11536,  1052,  1011,  3643,  1997,  1014,  1012,
         5890,  2692,  2475,  1012,  2023,  1052,  1011,  3643,  2003,  3760,
         2084,  1155, 30125,  1012,  2182,  2057,  2424,  2844,  3350,  1997,
         1037,  4489,  1999,  1996,  2965,  1997,  8921,  1038,  1998,  1039,
         1012,   102])"
2070,0,[], Comparing many means with ANOVA,seg_71,we might summarize the findings of the analysis from example 7.49 using the following notation:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2057,  2453,  7680,  7849,  4697,  1996,  9556,  1997,  1996,
         4106,  2013,  2742,  1021,  1012,  4749,  2478,  1996,  2206, 14869,
         1024,   102])"
2071,1,"['mean', 'hypothesis', 'null hypothesis', 'pairwise comparisons']", Comparing many means with ANOVA,seg_71,"the midterm mean in lecture a is not statistically distinguishable from those of lectures b or c. however, there is strong evidence that lectures b and c are different. in the first two pairwise comparisons, we did not have sufficient evidence to reject the null hypothesis. recall that failing to reject h0 does not imply h0 is true.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  3054,  3334,  2213,  2812,  1999,  8835,  1037,  2003,
         2025,  7778,  2135, 10782,  3085,  2013,  2216,  1997,  8921,  1038,
         2030,  1039,  1012,  2174,  1010,  2045,  2003,  2844,  3350,  2008,
         8921,  1038,  1998,  1039,  2024,  2367,  1012,  1999,  1996,  2034,
         2048,  3940, 14244, 18539,  1010,  2057,  2106,  2025,  2031,  7182,
         3350,  2000, 15454,  1996, 19701, 10744,  1012,  9131,  2008,  7989,
         2000, 15454,  1044,  2692,  2515,  2025, 19515,  1044,  2692,  2003,
         2995,  1012,   102])"
2072,1,"['hypothesis', 'anova', 'null hypothesis', 'pairwise comparisons']", Comparing many means with ANOVA,seg_71,"it is possible to reject the null hypothesis using anova and then to not subsequently identify differences in the pairwise comparisons. however, this does not invalidate the anova conclusion. it only means we have not been able to successfully identify which specific groups differ in their means.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  2009,  2003,  2825,  2000, 15454,  1996, 19701, 10744,  2478,
         2019,  7103,  1998,  2059,  2000,  2025,  3525,  6709,  5966,  1999,
         1996,  3940, 14244, 18539,  1012,  2174,  1010,  2023,  2515,  2025,
        19528,  3686,  1996,  2019,  7103,  7091,  1012,  2009,  2069,  2965,
         2057,  2031,  2025,  2042,  2583,  2000,  5147,  6709,  2029,  3563,
         2967, 11234,  1999,  2037,  2965,  1012,   102])"
2073,1,"['anova', 'statistically significant', 'confidence', 'test']", Comparing many means with ANOVA,seg_71,"the anova procedure examines the big picture: it considers all groups simultaneously to decipher whether there is evidence that some difference exists. even if the test indicates that there is strong evidence of differences in group means, identifying with high confidence a specific difference as statistically significant is more difficult.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1996,  2019,  7103,  7709, 20798,  1996,  2502,  3861,  1024,
         2009, 10592,  2035,  2967,  7453,  2000, 11703, 11514,  5886,  3251,
         2045,  2003,  3350,  2008,  2070,  4489,  6526,  1012,  2130,  2065,
         1996,  3231,  7127,  2008,  2045,  2003,  2844,  3350,  1997,  5966,
         1999,  2177,  2965,  1010, 12151,  2007,  2152,  7023,  1037,  3563,
         4489,  2004,  7778,  2135,  3278,  2003,  2062,  3697,  1012,   102])"
2074,1,"['rate', 'prediction', 'anova', 'data', 'success']", Comparing many means with ANOVA,seg_71,"consider the following analogy: we observe a wall street firm that makes large quantities of money based on predicting mergers. mergers are generally difficult to predict, and if the prediction success rate is extremely high, that may be considered sufficiently strong evidence to warrant investigation by the securities and exchange commission (sec). while the sec may be quite certain that there is insider trading taking place at the firm, the evidence against any single trader may not be very strong. it is only when the sec considers all the data that they identify the pattern. this is effectively the strategy of anova: stand back and consider all the groups simultaneously.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  5136,  1996,  2206, 23323,  1024,  2057, 11949,  1037,  2813,
         2395,  3813,  2008,  3084,  2312, 12450,  1997,  2769,  2241,  2006,
        29458, 28585,  1012, 28585,  2024,  3227,  3697,  2000, 16014,  1010,
         1998,  2065,  1996, 17547,  3112,  3446,  2003,  5186,  2152,  1010,
         2008,  2089,  2022,  2641, 12949,  2844,  3350,  2000, 10943,  4812,
         2011,  1996, 12012,  1998,  3863,  3222,  1006, 10819,  1007,  1012,
         2096,  1996, 10819,  2089,  2022,  3243,  3056,  2008,  2045,  2003,
        25297,  6202,  2635,  2173,  2012,  1996,  3813,  1010,  1996,  3350,
         2114,  2151,  2309, 17667,  2089,  2025,  2022,  2200,  2844,  1012,
         2009,  2003,  2069,  2043,  1996, 10819, 10592,  2035,  1996,  2951,
         2008,  2027,  6709,  1996,  5418,  1012,  2023,  2003,  6464,  1996,
         5656,  1997,  2019,  7103,  1024,  3233,  2067,  1998,  5136,  2035,
         1996,  2967,  7453,  1012,   102])"
2075,0,[], Comparing many means with ANOVA,seg_71,150 100 casein horsebean linseed meatmeal soybean sunflower,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  5018,  2531,  2553,  2378,  3586,  4783,  2319, 11409, 19763,
         2094,  6240,  4168,  2389, 25176,  4783,  2319,  3103, 14156,   102])"
2076,0,[], Comparing many means with ANOVA,seg_71,2.5 arts and humanities natural sciences social sciences,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1016,  1012,  1019,  2840,  1998, 11406,  3019,  4163,  2591,
         4163,   102])"
2077,0,[], Comparing many means with ANOVA,seg_71,ke 80 ew re 60 p de r k 40 ow sr 20 uoh 0 less than hs hs jr coll bachelor's graduate,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101, 17710,  3770,  1041,  2860,  2128,  3438,  1052,  2139,  1054,
         1047,  2871, 27593,  5034,  2322,  1057, 11631,  1014,  2625,  2084,
        26236, 26236,  3781,  8902,  2140,  5065,  1005,  1055,  4619,   102])"
2078,0,[], Comparing many means with ANOVA,seg_71,0 primary school lower middle school upper middle school technical or vocational college,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  1014,  3078,  2082,  2896,  2690,  2082,  3356,  2690,  2082,
         4087,  2030, 13099,  2267,   102])"
2079,0,[], Comparing many means with ANOVA,seg_71,8 10 12 14 16 18 max 18 number of credits,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 1022, 2184, 2260, 2403, 2385, 2324, 4098, 2324, 2193, 1997, 6495,
         102])"
2080,0,[], Comparing many means with ANOVA,seg_71,"heat wd−40 royal purple pb blaster liquid wrench aerokroil acetone/atf none 90 100 110 120 130 140 torque required to loosen rusty bolt, in foot−pounds",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([  101,  3684,  1059,  2094, 22543, 12740,  2548,  6379,  1052,  2497,
         8479,  2121,  6381, 16255,  2818, 18440, 21638, 10448,  2140,  9078,
         5524,  1013,  2012,  2546,  3904,  3938,  2531,  7287,  6036,  7558,
         8574, 15894,  3223,  2000, 29476, 13174, 10053,  1010,  1999,  3329,
        22543,  6873, 26698,   102])"
2081,0,[], Comparing many means with ANOVA,seg_71,number of exclusive relationships,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 2193, 1997, 7262, 6550,  102])"
2082,0,[], Comparing many means with ANOVA,seg_71,age at first marriage,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([13599,  2116,  2965,  2007,  2019,  7103])","tensor([ 101, 2287, 2012, 2034, 3510,  102])"
2083,1,"['regression', 'prediction', 'least squares regression', 'scatterplots', 'correlation', 'linear regression', 'residuals', 'statistical', 'linear', 'outliers', 'least squares', 'variables', 'numerical']",Chapter  Introduction to linear regression,seg_73,"8.1 fitting a line, residuals, and correlation 8.2 least squares regression 8.3 types of outliers in linear regression 8.4 inference for linear regression linear regression is a very powerful statistical technique. many people have some familiarity with regression just from reading the news, where straight lines are overlaid on scatterplots. linear models can be used for prediction or to evaluate whether there is a linear relationship between two numerical variables. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3127,  4955,  2000,  7399, 26237])","tensor([  101,  1022,  1012,  1015, 11414,  1037,  2240,  1010, 21961,  2015,
         1010,  1998, 16902,  1022,  1012,  1016,  2560, 14320, 26237,  1022,
         1012,  1017,  4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237,
         1022,  1012,  1018, 28937,  2005,  7399, 26237,  7399, 26237,  2003,
         1037,  2200,  3928,  7778,  6028,  1012,  2116,  2111,  2031,  2070,
        24666,  2007, 26237,  2074,  2013,  3752,  1996,  2739,  1010,  2073,
         3442,  3210,  2024,  2058, 24393,  2006,  8040, 20097, 24759, 12868,
         1012,  7399,  4275,  2064,  2022,  2109,  2005, 17547,  2030,  2000,
        16157,  3251,  2045,  2003,  1037,  7399,  3276,  2090,  2048, 15973,
        10857,  1012,  2005,  6876,  1010, 14816,  1010,  1998,  2060,  4219,
         1010,  3531,  3942,  7479,  1012,  2330, 18447,  3217,  1012,  8917,
         1013,  9808,   102])"
2084,1,"['linear', 'linear model', 'correlation', 'process', 'model', 'statistic']", Fitting a line residuals and correlation,seg_75,"it’s helpful to think deeply about the line fitting process. in this section, we define the form of a linear model, explore criteria for what makes a good fit, and introduce a new statistic called correlation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2009,  1521,  1055, 14044,  2000,  2228,  6171,  2055,  1996,
         2240, 11414,  2832,  1012,  1999,  2023,  2930,  1010,  2057,  9375,
         1996,  2433,  1997,  1037,  7399,  2944,  1010,  8849,  9181,  2005,
         2054,  3084,  1037,  2204,  4906,  1010,  1998,  8970,  1037,  2047,
        28093,  6553,  2170, 16902,  1012,   102])"
2085,1,['data'], Fitting a line residuals and correlation,seg_75,8.1.1 fitting a line to data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1022,  1012,  1015,  1012,  1015, 11414,  1037,  2240,  2000,
         2951,   102])"
2086,1,['variables'], Fitting a line residuals and correlation,seg_75,figure 8.1 shows two variables whose relationship can be modeled perfectly with a straight line. the equation for the line is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1015,  3065,  2048, 10857,  3005,  3276,
         2064,  2022, 14440,  6669,  2007,  1037,  3442,  2240,  1012,  1996,
         8522,  2005,  1996,  2240,  2003,   102])"
2087,1,"['linear', 'prediction', 'information', 'factors', 'process']", Fitting a line residuals and correlation,seg_75,"consider what a perfect linear relationship means: we know the exact value of y just by knowing the value of x. this is unrealistic in almost any natural process. for example, if we took family income (x), this value would provide some useful information about how much financial support a college may offer a prospective student (y). however, the prediction would be far from perfect, since other factors play a role in financial support beyond a family’s finances.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  5136,  2054,  1037,  3819,  7399,  3276,  2965,  1024,  2057,
         2113,  1996,  6635,  3643,  1997,  1061,  2074,  2011,  4209,  1996,
         3643,  1997,  1060,  1012,  2023,  2003,  4895, 22852,  6553,  1999,
         2471,  2151,  3019,  2832,  1012,  2005,  2742,  1010,  2065,  2057,
         2165,  2155,  3318,  1006,  1060,  1007,  1010,  2023,  3643,  2052,
         3073,  2070,  6179,  2592,  2055,  2129,  2172,  3361,  2490,  1037,
         2267,  2089,  3749,  1037, 17464,  3076,  1006,  1061,  1007,  1012,
         2174,  1010,  1996, 17547,  2052,  2022,  2521,  2013,  3819,  1010,
         2144,  2060,  5876,  2377,  1037,  2535,  1999,  3361,  2490,  3458,
         1037,  2155,  1521,  1055, 16156,  1012,   102])"
2088,1,['linear'], Fitting a line residuals and correlation,seg_75,"figure 8.1: requests from twelve separate buyers were simultaneously placed with a trading company to purchase target corporation stock (ticker tgt, december 28th, 2018), and the total cost of the shares were reported. because the cost is computed using a linear formula, the linear fit is perfect.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1015,  1024, 11186,  2013,  4376,  3584,
        17394,  2020,  7453,  2872,  2007,  1037,  6202,  2194,  2000,  5309,
         4539,  3840,  4518,  1006, 16356,  2121,  1056, 13512,  1010,  2285,
        15538,  1010,  2760,  1007,  1010,  1998,  1996,  2561,  3465,  1997,
         1996,  6661,  2020,  2988,  1012,  2138,  1996,  3465,  2003, 24806,
         2478,  1037,  7399,  5675,  1010,  1996,  7399,  4906,  2003,  3819,
         1012,   102])"
2089,1,"['error', 'regression', 'data', 'method', 'statistical', 'variables']", Fitting a line residuals and correlation,seg_75,"linear regression is the statistical method for fitting a line to data where the relationship between two variables, x and y, can be modeled by a straight line with some error:",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  7399, 26237,  2003,  1996,  7778,  4118,  2005, 11414,  1037,
         2240,  2000,  2951,  2073,  1996,  3276,  2090,  2048, 10857,  1010,
         1060,  1998,  1061,  1010,  2064,  2022, 14440,  2011,  1037,  3442,
         2240,  2007,  2070,  7561,  1024,   102])"
2090,1,"['estimated', 'prediction', 'outcome', 'explanatory', 'response', 'model', 'point estimates', 'data', 'predictor', 'variable', 'parameters', 'estimates', 'predictor variable', 'average', 'error']", Fitting a line residuals and correlation,seg_75,"the values β0 and β1 represent the model’s parameters (β is the greek letter beta), and the error is represented by ε (the greek letter epsilon). the parameters are estimated using data, and we write their point estimates as b0 and b1. when we use x to predict y, we usually call x the explanatory or predictor variable, and we call y the response; we also often drop the term when writing down the model since our main focus is often on the prediction of the average outcome.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996,  5300,  1156,  2692,  1998,  1156,  2487,  5050,  1996,
         2944,  1521,  1055, 11709,  1006,  1156,  2003,  1996,  3306,  3661,
         8247,  1007,  1010,  1998,  1996,  7561,  2003,  3421,  2011,  1159,
         1006,  1996,  3306,  3661, 28038,  1007,  1012,  1996, 11709,  2024,
         4358,  2478,  2951,  1010,  1998,  2057,  4339,  2037,  2391, 10035,
         2004,  1038,  2692,  1998, 29491,  1012,  2043,  2057,  2224,  1060,
         2000, 16014,  1061,  1010,  2057,  2788,  2655,  1060,  1996,  4654,
        24759,  5162,  7062,  2030, 16014,  2953,  8023,  1010,  1998,  2057,
         2655,  1061,  1996,  3433,  1025,  2057,  2036,  2411,  4530,  1996,
         2744,  2043,  3015,  2091,  1996,  2944,  2144,  2256,  2364,  3579,
         2003,  2411,  2006,  1996, 17547,  1997,  1996,  2779,  9560,  1012,
          102])"
2091,1,"['variability', 'cloud of points', 'linear', 'observations', 'plot', 'data', 'case']", Fitting a line residuals and correlation,seg_75,"it is rare for all of the data to fall perfectly on a straight line. instead, it’s more common for data to appear as a cloud of points, such as those examples shown in figure 8.2. in each case, the data fall around a straight line, even if none of the observations fall exactly on the line. the first plot shows a relatively strong downward linear trend, where the remaining variability in the data around the line is minor relative to the strength of the relationship between x and y. the second plot shows an upward trend that, while evident, is not as strong as the first. the last plot shows a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2009,  2003,  4678,  2005,  2035,  1997,  1996,  2951,  2000,
         2991,  6669,  2006,  1037,  3442,  2240,  1012,  2612,  1010,  2009,
         1521,  1055,  2062,  2691,  2005,  2951,  2000,  3711,  2004,  1037,
         6112,  1997,  2685,  1010,  2107,  2004,  2216,  4973,  3491,  1999,
         3275,  1022,  1012,  1016,  1012,  1999,  2169,  2553,  1010,  1996,
         2951,  2991,  2105,  1037,  3442,  2240,  1010,  2130,  2065,  3904,
         1997,  1996,  9420,  2991,  3599,  2006,  1996,  2240,  1012,  1996,
         2034,  5436,  3065,  1037,  4659,  2844, 14047,  7399,  9874,  1010,
         2073,  1996,  3588, 28436,  1999,  1996,  2951,  2105,  1996,  2240,
         2003,  3576,  5816,  2000,  1996,  3997,  1997,  1996,  3276,  2090,
         1060,  1998,  1061,  1012,  1996,  2117,  5436,  3065,  2019, 10745,
         9874,  2008,  1010,  2096, 10358,  1010,  2003,  2025,  2004,  2844,
         2004,  1996,  2034,  1012,  1996,  2197,  5436,  3065,  1037,   102])"
2092,1,"['sets', 'linear', 'linear model', 'data sets', 'model', 'data']", Fitting a line residuals and correlation,seg_75,figure 8.2: three data sets where a linear model may be useful even though the data do not all fall exactly on the line.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([ 101, 3275, 1022, 1012, 1016, 1024, 2093, 2951, 4520, 2073, 1037, 7399,
        2944, 2089, 2022, 6179, 2130, 2295, 1996, 2951, 2079, 2025, 2035, 2991,
        3599, 2006, 1996, 2240, 1012,  102])"
2093,0,[], Fitting a line residuals and correlation,seg_75,v ra ● best fitting straight line is flat (!) ●,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1058, 10958,  1619,  2190, 11414,  3442,  2240,  2003,  4257,
         1006,   999,  1007,  1619,   102])"
2094,1,"['linear', 'linear model', 'nonlinear', 'experiment', 'model', 'data', 'case']", Fitting a line residuals and correlation,seg_75,figure 8.3: a linear model is not useful in this nonlinear case. these data are from an introductory physics experiment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1017,  1024,  1037,  7399,  2944,  2003,
         2025,  6179,  1999,  2023, 27400,  2553,  1012,  2122,  2951,  2024,
         2013,  2019, 23889,  5584,  7551,  1012,   102])"
2095,1,"['uncertainty', 'associated', 'estimates', 'model', 'parameters', 'data']", Fitting a line residuals and correlation,seg_75,"very weak downward trend in the data, so slight we can hardly notice it. in each of these examples, we will have some uncertainty regarding our estimates of the model parameters, β0 and β1. for instance, we might wonder, should we move the line up or down a little, or should we tilt it more or less? as we move forward in this chapter, we will learn about criteria for line-fitting, and we will also learn about the uncertainty associated with estimates of model parameters.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2200,  5410, 14047,  9874,  1999,  1996,  2951,  1010,  2061,
         7263,  2057,  2064,  6684,  5060,  2009,  1012,  1999,  2169,  1997,
         2122,  4973,  1010,  2057,  2097,  2031,  2070, 12503,  4953,  2256,
        10035,  1997,  1996,  2944, 11709,  1010,  1156,  2692,  1998,  1156,
         2487,  1012,  2005,  6013,  1010,  2057,  2453,  4687,  1010,  2323,
         2057,  2693,  1996,  2240,  2039,  2030,  2091,  1037,  2210,  1010,
         2030,  2323,  2057, 17010,  2009,  2062,  2030,  2625,  1029,  2004,
         2057,  2693,  2830,  1999,  2023,  3127,  1010,  2057,  2097,  4553,
         2055,  9181,  2005,  2240,  1011, 11414,  1010,  1998,  2057,  2097,
         2036,  4553,  2055,  1996, 12503,  3378,  2007, 10035,  1997,  2944,
        11709,  1012,   102])"
2096,1,"['cases', 'linear', 'nonlinear', 'variables', 'data', 'case']", Fitting a line residuals and correlation,seg_75,"there are also cases where fitting a straight line to the data, even if there is a clear relationship between the variables, is not helpful. one such case is shown in figure 8.3 where there is a very clear relationship between the variables even though the trend is not linear. we discuss nonlinear trends in this chapter and the next, but details of fitting nonlinear models are saved for a later course.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2045,  2024,  2036,  3572,  2073, 11414,  1037,  3442,  2240,
         2000,  1996,  2951,  1010,  2130,  2065,  2045,  2003,  1037,  3154,
         3276,  2090,  1996, 10857,  1010,  2003,  2025, 14044,  1012,  2028,
         2107,  2553,  2003,  3491,  1999,  3275,  1022,  1012,  1017,  2073,
         2045,  2003,  1037,  2200,  3154,  3276,  2090,  1996, 10857,  2130,
         2295,  1996,  9874,  2003,  2025,  7399,  1012,  2057,  6848, 27400,
        12878,  1999,  2023,  3127,  1998,  1996,  2279,  1010,  2021,  4751,
         1997, 11414, 27400,  4275,  2024,  5552,  2005,  1037,  2101,  2607,
         1012,   102])"
2097,1,"['regression', 'linear regression', 'linear']", Fitting a line residuals and correlation,seg_75,8.1.2 using linear regression to predict possum head lengths,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1022,  1012,  1015,  1012,  1016,  2478,  7399, 26237,  2000,
        16014, 13433,  4757,  2819,  2132, 10742,   102])"
2098,1,"['tail', 'measurements']", Fitting a line residuals and correlation,seg_75,"brushtail possums are a marsupial that lives in australia, and a photo of one is shown in figure 8.4. researchers captured 104 of these animals and took body measurements before releasing the animals back into the wild. we consider two of these measurements: the total length of each possum, from head to tail, and the length of each possum’s head.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  8248, 14162, 13433,  4757, 18163,  2024,  1037,  7733,  6279,
         4818,  2008,  3268,  1999,  2660,  1010,  1998,  1037,  6302,  1997,
         2028,  2003,  3491,  1999,  3275,  1022,  1012,  1018,  1012,  6950,
         4110,  9645,  1997,  2122,  4176,  1998,  2165,  2303, 11702,  2077,
         8287,  1996,  4176,  2067,  2046,  1996,  3748,  1012,  2057,  5136,
         2048,  1997,  2122, 11702,  1024,  1996,  2561,  3091,  1997,  2169,
        13433,  4757,  2819,  1010,  2013,  2132,  2000,  5725,  1010,  1998,
         1996,  3091,  1997,  2169, 13433,  4757,  2819,  1521,  1055,  2132,
         1012,   102])"
2099,1,"['linear', 'associated', 'scatterplot', 'variables', 'average', 'data']", Fitting a line residuals and correlation,seg_75,"figure 8.5 shows a scatterplot for the head length and total length of the possums. each point represents a single possum from the data. the head and total length variables are associated: possums with an above average total length also tend to have above average head lengths. while the relationship is not perfectly linear, it could be helpful to partially explain the connection between these variables with a straight line.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1019,  3065,  1037,  8040, 20097, 24759,
         4140,  2005,  1996,  2132,  3091,  1998,  2561,  3091,  1997,  1996,
        13433,  4757, 18163,  1012,  2169,  2391,  5836,  1037,  2309, 13433,
         4757,  2819,  2013,  1996,  2951,  1012,  1996,  2132,  1998,  2561,
         3091, 10857,  2024,  3378,  1024, 13433,  4757, 18163,  2007,  2019,
         2682,  2779,  2561,  3091,  2036,  7166,  2000,  2031,  2682,  2779,
         2132, 10742,  1012,  2096,  1996,  3276,  2003,  2025,  6669,  7399,
         1010,  2009,  2071,  2022, 14044,  2000,  6822,  4863,  1996,  4434,
         2090,  2122, 10857,  2007,  1037,  3442,  2240,  1012,   102])"
2100,1,['scatterplot'], Fitting a line residuals and correlation,seg_75,figure 8.5: a scatterplot showing head length against total length for 104 brushtail possums. a point representing a possum with head length 94.1mm and total length 89cm is highlighted.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1019,  1024,  1037,  8040, 20097, 24759,
         4140,  4760,  2132,  3091,  2114,  2561,  3091,  2005,  9645,  8248,
        14162, 13433,  4757, 18163,  1012,  1037,  2391,  5052,  1037, 13433,
         4757,  2819,  2007,  2132,  3091,  6365,  1012,  1015,  7382,  1998,
         2561,  3091,  6486, 27487,  2003, 11548,  1012,   102])"
2101,1,"['linear', 'predictor', 'set', 'predictor variable', 'variables', 'data set', 'data', 'variable']", Fitting a line residuals and correlation,seg_75,"we want to describe the relationship between the head length and total length variables in the possum data set using a line. in this example, we will use the total length as the predictor variable, x, to predict a possum’s head length, y. we could fit the linear relationship by eye, as in figure 8.6. the equation for this line is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2057,  2215,  2000,  6235,  1996,  3276,  2090,  1996,  2132,
         3091,  1998,  2561,  3091, 10857,  1999,  1996, 13433,  4757,  2819,
         2951,  2275,  2478,  1037,  2240,  1012,  1999,  2023,  2742,  1010,
         2057,  2097,  2224,  1996,  2561,  3091,  2004,  1996, 16014,  2953,
         8023,  1010,  1060,  1010,  2000, 16014,  1037, 13433,  4757,  2819,
         1521,  1055,  2132,  3091,  1010,  1061,  1012,  2057,  2071,  4906,
         1996,  7399,  3276,  2011,  3239,  1010,  2004,  1999,  3275,  1022,
         1012,  1020,  1012,  1996,  8522,  2005,  2023,  2240,  2003,   102])"
2102,1,['estimate'], Fitting a line residuals and correlation,seg_75,"a “hat” on y is used to signify that this is an estimate. we can use this line to discuss properties of possums. for instance, the equation predicts a possum with a total length of 80 cm will have a head length of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1037,  1523,  6045,  1524,  2006,  1061,  2003,  2109,  2000,
         3696,  8757,  2008,  2023,  2003,  2019, 10197,  1012,  2057,  2064,
         2224,  2023,  2240,  2000,  6848,  5144,  1997, 13433,  4757, 18163,
         1012,  2005,  6013,  1010,  1996,  8522, 16014,  2015,  1037, 13433,
         4757,  2819,  2007,  1037,  2561,  3091,  1997,  3770,  4642,  2097,
         2031,  1037,  2132,  3091,  1997,   102])"
2103,1,"['estimate', 'information', 'average', 'prediction']", Fitting a line residuals and correlation,seg_75,"the estimate may be viewed as an average: the equation predicts that possums with a total length of 80 cm will have an average head length of 88.2 mm. absent further information about an 80 cm possum, the prediction for head length that uses the average is a reasonable estimate.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996, 10197,  2089,  2022,  7021,  2004,  2019,  2779,  1024,
         1996,  8522, 16014,  2015,  2008, 13433,  4757, 18163,  2007,  1037,
         2561,  3091,  1997,  3770,  4642,  2097,  2031,  2019,  2779,  2132,
         3091,  1997,  6070,  1012,  1016,  3461,  1012,  9962,  2582,  2592,
         2055,  2019,  3770,  4642, 13433,  4757,  2819,  1010,  1996, 17547,
         2005,  2132,  3091,  2008,  3594,  1996,  2779,  2003,  1037,  9608,
        10197,  1012,   102])"
2104,1,"['model', 'linear model', 'linear']", Fitting a line residuals and correlation,seg_75,figure 8.6: a reasonable linear model was fit to represent the relationship between head length and total length.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([ 101, 3275, 1022, 1012, 1020, 1024, 1037, 9608, 7399, 2944, 2001, 4906,
        2000, 5050, 1996, 3276, 2090, 2132, 3091, 1998, 2561, 3091, 1012,  102])"
2105,1,['variables'], Fitting a line residuals and correlation,seg_75,what other variables might help us predict the head length of a possum besides its length?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2054,  2060, 10857,  2453,  2393,  2149, 16014,  1996,  2132,
         3091,  1997,  1037, 13433,  4757,  2819,  4661,  2049,  3091,  1029,
          102])"
2106,1,"['model', 'linear model', 'linear', 'predictor']", Fitting a line residuals and correlation,seg_75,"perhaps the relationship would be a little different for male possums than female possums, or perhaps it would differ for possums from one region of australia versus another region. in chapter 9, we’ll learn about how we can include more than one predictor. before we get there, we first need to better understand how to best build a simple linear model with one predictor.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3383,  1996,  3276,  2052,  2022,  1037,  2210,  2367,  2005,
         3287, 13433,  4757, 18163,  2084,  2931, 13433,  4757, 18163,  1010,
         2030,  3383,  2009,  2052, 11234,  2005, 13433,  4757, 18163,  2013,
         2028,  2555,  1997,  2660,  6431,  2178,  2555,  1012,  1999,  3127,
         1023,  1010,  2057,  1521,  2222,  4553,  2055,  2129,  2057,  2064,
         2421,  2062,  2084,  2028, 16014,  2953,  1012,  2077,  2057,  2131,
         2045,  1010,  2057,  2034,  2342,  2000,  2488,  3305,  2129,  2000,
         2190,  3857,  1037,  3722,  7399,  2944,  2007,  2028, 16014,  2953,
         1012,   102])"
2107,1,['residuals'], Fitting a line residuals and correlation,seg_75,8.1.3 residuals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1022,  1012,  1015,  1012,  1017, 21961,  2015,   102])"
2108,1,"['model', 'variation', 'data']", Fitting a line residuals and correlation,seg_75,residuals are the leftover variation in the data after accounting for the model fit:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101, 21961,  2015,  2024,  1996,  2187,  7840,  8386,  1999,  1996,
         2951,  2044,  9529,  2005,  1996,  2944,  4906,  1024,   102])"
2109,1,['residual'], Fitting a line residuals and correlation,seg_75,data = fit + residual,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2951,  1027,  4906,  1009, 21961,   102])"
2110,1,"['residual', 'regression', 'observation', 'linear', 'regression line', 'linear model', 'observations', 'residuals', 'model', 'data']", Fitting a line residuals and correlation,seg_75,"each observation will have a residual, and three of the residuals for the linear model we fit for the possum data is shown in figure 8.6. if an observation is above the regression line, then its residual, the vertical distance from the observation to the line, is positive. observations below the line have negative residuals. one goal in picking the right linear model is for these residuals to be as small as possible.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2169,  8089,  2097,  2031,  1037, 21961,  1010,  1998,  2093,
         1997,  1996, 21961,  2015,  2005,  1996,  7399,  2944,  2057,  4906,
         2005,  1996, 13433,  4757,  2819,  2951,  2003,  3491,  1999,  3275,
         1022,  1012,  1020,  1012,  2065,  2019,  8089,  2003,  2682,  1996,
        26237,  2240,  1010,  2059,  2049, 21961,  1010,  1996,  7471,  3292,
         2013,  1996,  8089,  2000,  1996,  2240,  1010,  2003,  3893,  1012,
         9420,  2917,  1996,  2240,  2031,  4997, 21961,  2015,  1012,  2028,
         3125,  1999,  8130,  1996,  2157,  7399,  2944,  2003,  2005,  2122,
        21961,  2015,  2000,  2022,  2004,  2235,  2004,  2825,  1012,   102])"
2111,1,"['absolute value', 'residual', 'residuals', 'observation']", Fitting a line residuals and correlation,seg_75,"let’s look closer at the three residuals featured in figure 8.6. the observation marked by an “×” has a small, negative residual of about -1; the observation marked by “+” has a large residual of about +7; and the observation marked by “4” has a moderate residual of about -4. the size of a residual is usually discussed in terms of its absolute value. for example, the residual for “4” is larger than that of “×” because | − 4| is larger than | − 1|.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2292,  1521,  1055,  2298,  3553,  2012,  1996,  2093, 21961,
         2015,  2956,  1999,  3275,  1022,  1012,  1020,  1012,  1996,  8089,
         4417,  2011,  2019,  1523,  1095,  1524,  2038,  1037,  2235,  1010,
         4997, 21961,  1997,  2055,  1011,  1015,  1025,  1996,  8089,  4417,
         2011,  1523,  1009,  1524,  2038,  1037,  2312, 21961,  1997,  2055,
         1009,  1021,  1025,  1998,  1996,  8089,  4417,  2011,  1523,  1018,
         1524,  2038,  1037,  8777, 21961,  1997,  2055,  1011,  1018,  1012,
         1996,  2946,  1997,  1037, 21961,  2003,  2788,  6936,  1999,  3408,
         1997,  2049,  7619,  3643,  1012,  2005,  2742,  1010,  1996, 21961,
         2005,  1523,  1018,  1524,  2003,  3469,  2084,  2008,  1997,  1523,
         1095,  1524,  2138,  1064,  1597,  1018,  1064,  2003,  3469,  2084,
         1064,  1597,  1015,  1064,  1012,   102])"
2112,1,"['model', 'residual', 'observation', 'response']", Fitting a line residuals and correlation,seg_75,"the residual of the ith observation (xi, yi) is the difference of the observed response (yi) and the response we would predict based on the model fit (ŷi):",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996, 21961,  1997,  1996,  2009,  2232,  8089,  1006,  8418,
         1010, 12316,  1007,  2003,  1996,  4489,  1997,  1996,  5159,  3433,
         1006, 12316,  1007,  1998,  1996,  3433,  2057,  2052, 16014,  2241,
         2006,  1996,  2944,  4906,  1006, 12316,  1007,  1024,   102])"
2113,1,['model'], Fitting a line residuals and correlation,seg_75,we typically identify ŷi by plugging xi into the model.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2057,  4050,  6709, 12316,  2011, 13354,  4726,  8418,  2046,
         1996,  2944,  1012,   102])"
2114,1,"['residual', 'estimate', 'observation', 'linear']", Fitting a line residuals and correlation,seg_75,"the linear fit shown in figure 8.6 is given as ŷ = 41 + 0.59x. based on this line, formally compute the residual of the observation (77.0, 85.3). this observation is denoted by “×” in figure 8.6. check it against the earlier visual estimate, -1.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996,  7399,  4906,  3491,  1999,  3275,  1022,  1012,  1020,
         2003,  2445,  2004,  1061,  1027,  4601,  1009,  1014,  1012,  5354,
         2595,  1012,  2241,  2006,  2023,  2240,  1010,  6246, 24134,  1996,
        21961,  1997,  1996,  8089,  1006,  6255,  1012,  1014,  1010,  5594,
         1012,  1017,  1007,  1012,  2023,  8089,  2003, 19537,  2011,  1523,
         1095,  1524,  1999,  3275,  1022,  1012,  1020,  1012,  4638,  2009,
         2114,  1996,  3041,  5107, 10197,  1010,  1011,  1015,  1012,   102])"
2115,1,"['model', 'predicted']", Fitting a line residuals and correlation,seg_75,we first compute the predicted value of point “×” based on the model:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2057,  2034, 24134,  1996, 10173,  3643,  1997,  2391,  1523,
         1095,  1524,  2241,  2006,  1996,  2944,  1024,   102])"
2116,1,['predicted'], Fitting a line residuals and correlation,seg_75,next we compute the difference of the actual head length and the predicted head length:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2279,  2057, 24134,  1996,  4489,  1997,  1996,  5025,  2132,
         3091,  1998,  1996, 10173,  2132,  3091,  1024,   102])"
2117,1,"['residual', 'linear', 'linear model', 'estimate', 'model', 'error']", Fitting a line residuals and correlation,seg_75,"the model’s error is e× = −1.1mm, which is very close to the visual estimate of -1mm. the negative residual indicates that the linear model overpredicted head length for this particular possum.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996,  2944,  1521,  1055,  7561,  2003,  1041, 26306,  1027,
         1597,  2487,  1012,  1015,  7382,  1010,  2029,  2003,  2200,  2485,
         2000,  1996,  5107, 10197,  1997,  1011,  1015,  7382,  1012,  1996,
         4997, 21961,  7127,  2008,  1996,  7399,  2944,  2058, 28139, 29201,
         2098,  2132,  3091,  2005,  2023,  3327, 13433,  4757,  2819,  1012,
          102])"
2118,1,"['model', 'residual', 'observation']", Fitting a line residuals and correlation,seg_75,"if a model underestimates an observation, will the residual be positive or negative? what about if it overestimates the observation?1",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2065,  1037,  2944,  2104,  4355, 21499,  2015,  2019,  8089,
         1010,  2097,  1996, 21961,  2022,  3893,  2030,  4997,  1029,  2054,
         2055,  2065,  2009,  2058,  4355, 21499,  2015,  1996,  8089,  1029,
         1015,   102])"
2119,1,"['residuals', 'linear', 'observation']", Fitting a line residuals and correlation,seg_75,"compute the residuals for the “+” observation (85.0, 98.6) and the “4” observation (95.5, 94.0) in the figure using the linear relationship ŷ = 41 + 0.59x.2",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101, 24134,  1996, 21961,  2015,  2005,  1996,  1523,  1009,  1524,
         8089,  1006,  5594,  1012,  1014,  1010,  5818,  1012,  1020,  1007,
         1998,  1996,  1523,  1018,  1524,  8089,  1006,  5345,  1012,  1019,
         1010,  6365,  1012,  1014,  1007,  1999,  1996,  3275,  2478,  1996,
         7399,  3276,  1061,  1027,  4601,  1009,  1014,  1012,  5354,  2595,
         1012,  1016,   102])"
2120,1,"['residual', 'evaluating', 'regression', 'linear', 'regression line', 'set', 'locations', 'linear model', 'residual plot', 'residuals', 'model', 'scatterplot', 'plot', 'data set', 'data']", Fitting a line residuals and correlation,seg_75,"residuals are helpful in evaluating how well a linear model fits a data set. we often display them in a residual plot such as the one shown in figure 8.7 for the regression line in figure 8.6. the residuals are plotted at their original horizontal locations but with the vertical coordinate as the residual. for instance, the point (85.0, 98.6)+ had a residual of 7.45, so in the residual plot it is placed at (85.0, 7.45). creating a residual plot is sort of like tipping the scatterplot over so the regression line is horizontal.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101, 21961,  2015,  2024, 14044,  1999, 23208,  2129,  2092,  1037,
         7399,  2944, 16142,  1037,  2951,  2275,  1012,  2057,  2411,  4653,
         2068,  1999,  1037, 21961,  5436,  2107,  2004,  1996,  2028,  3491,
         1999,  3275,  1022,  1012,  1021,  2005,  1996, 26237,  2240,  1999,
         3275,  1022,  1012,  1020,  1012,  1996, 21961,  2015,  2024, 27347,
         2012,  2037,  2434,  9876,  5269,  2021,  2007,  1996,  7471, 13530,
         2004,  1996, 21961,  1012,  2005,  6013,  1010,  1996,  2391,  1006,
         5594,  1012,  1014,  1010,  5818,  1012,  1020,  1007,  1009,  2018,
         1037, 21961,  1997,  1021,  1012,  3429,  1010,  2061,  1999,  1996,
        21961,  5436,  2009,  2003,  2872,  2012,  1006,  5594,  1012,  1014,
         1010,  1021,  1012,  3429,  1007,  1012,  4526,  1037, 21961,  5436,
         2003,  4066,  1997,  2066, 25486,  1996,  8040, 20097, 24759,  4140,
         2058,  2061,  1996, 26237,  2240,  2003,  9876,  1012,   102])"
2121,1,"['residual', 'residual plot', 'model', 'plot']", Fitting a line residuals and correlation,seg_75,figure 8.7: residual plot for the model in figure 8.6.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1021,  1024, 21961,  5436,  2005,  1996,
         2944,  1999,  3275,  1022,  1012,  1020,  1012,   102])"
2122,1,"['residual', 'sample', 'plots', 'residual plots', 'data']", Fitting a line residuals and correlation,seg_75,figure 8.8: sample data with their best fitting lines (top row) and their corresponding residual plots (bottom row).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1022,  1024,  7099,  2951,  2007,  2037,
         2190, 11414,  3210,  1006,  2327,  5216,  1007,  1998,  2037,  7978,
        21961, 14811,  1006,  3953,  5216,  1007,  1012,   102])"
2123,1,"['residual', 'linear', 'residuals', 'scatterplots', 'plots', 'model', 'residual plots', 'data']", Fitting a line residuals and correlation,seg_75,one purpose of residual plots is to identify characteristics or patterns still apparent in data after fitting a model. figure 8.8 shows three scatterplots with linear models in the first row and residual plots in the second row. can you identify any patterns remaining in the residuals?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2028,  3800,  1997, 21961, 14811,  2003,  2000,  6709,  6459,
         2030,  7060,  2145,  6835,  1999,  2951,  2044, 11414,  1037,  2944,
         1012,  3275,  1022,  1012,  1022,  3065,  2093,  8040, 20097, 24759,
        12868,  2007,  7399,  4275,  1999,  1996,  2034,  5216,  1998, 21961,
        14811,  1999,  1996,  2117,  5216,  1012,  2064,  2017,  6709,  2151,
         7060,  3588,  1999,  1996, 21961,  2015,  1029,   102])"
2124,1,"['set', 'residuals', 'data set', 'data']", Fitting a line residuals and correlation,seg_75,"in the first data set (first column), the residuals show no obvious patterns. the residuals appear to be scattered randomly around the dashed line that represents 0.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1999,  1996,  2034,  2951,  2275,  1006,  2034,  5930,  1007,
         1010,  1996, 21961,  2015,  2265,  2053,  5793,  7060,  1012,  1996,
        21961,  2015,  3711,  2000,  2022,  7932, 18154,  2105,  1996, 18198,
         2240,  2008,  5836,  1014,  1012,   102])"
2125,1,"['residual', 'set', 'residual plot', 'residuals', 'model', 'scatterplot', 'plot', 'data set', 'data']", Fitting a line residuals and correlation,seg_75,"the second data set shows a pattern in the residuals. there is some curvature in the scatterplot, which is more obvious in the residual plot. we should not use a straight line to model these data. instead, a more advanced technique should be used.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996,  2117,  2951,  2275,  3065,  1037,  5418,  1999,  1996,
        21961,  2015,  1012,  2045,  2003,  2070, 25045,  1999,  1996,  8040,
        20097, 24759,  4140,  1010,  2029,  2003,  2062,  5793,  1999,  1996,
        21961,  5436,  1012,  2057,  2323,  2025,  2224,  1037,  3442,  2240,
         2000,  2944,  2122,  2951,  1012,  2612,  1010,  1037,  2062,  3935,
         6028,  2323,  2022,  2109,  1012,   102])"
2126,1,"['parameter', 'linear', 'data', 'slope', 'linear model', 'estimate', 'residuals', 'point estimate', 'statistically significant', 'model', 'plot']", Fitting a line residuals and correlation,seg_75,"the last plot shows very little upwards trend, and the residuals also show no obvious patterns. it is reasonable to try to fit a linear model to the data. however, it is unclear whether there is statistically significant evidence that the slope parameter is different from zero. the point estimate of the slope parameter, labeled b1, is not zero, but we might wonder if this could just be due to chance. we will address this sort of scenario in section 8.4.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996,  2197,  5436,  3065,  2200,  2210, 14873,  9874,  1010,
         1998,  1996, 21961,  2015,  2036,  2265,  2053,  5793,  7060,  1012,
         2009,  2003,  9608,  2000,  3046,  2000,  4906,  1037,  7399,  2944,
         2000,  1996,  2951,  1012,  2174,  1010,  2009,  2003, 10599,  3251,
         2045,  2003,  7778,  2135,  3278,  3350,  2008,  1996,  9663, 16381,
         2003,  2367,  2013,  5717,  1012,  1996,  2391, 10197,  1997,  1996,
         9663, 16381,  1010, 12599, 29491,  1010,  2003,  2025,  5717,  1010,
         2021,  2057,  2453,  4687,  2065,  2023,  2071,  2074,  2022,  2349,
         2000,  3382,  1012,  2057,  2097,  4769,  2023,  4066,  1997, 11967,
         1999,  2930,  1022,  1012,  1018,  1012,   102])"
2127,1,"['correlation', 'linear']", Fitting a line residuals and correlation,seg_75,8.1.4 describing linear relationships with correlation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1022,  1012,  1015,  1012,  1018,  7851,  7399,  6550,  2007,
        16902,   102])"
2128,1,"['linear', 'statistic', 'plots']", Fitting a line residuals and correlation,seg_75,we’ve seen plots with strong linear relationships and others with very weak linear relationships. it would be useful if we could quantify the strength of these linear relationships with a statistic.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2057,  1521,  2310,  2464, 14811,  2007,  2844,  7399,  6550,
         1998,  2500,  2007,  2200,  5410,  7399,  6550,  1012,  2009,  2052,
         2022,  6179,  2065,  2057,  2071, 24110, 27351,  1996,  3997,  1997,
         2122,  7399,  6550,  2007,  1037, 28093,  6553,  1012,   102])"
2129,1,"['variables', 'correlation', 'linear']", Fitting a line residuals and correlation,seg_75,"correlation, which always takes values between -1 and 1, describes the strength of the linear relationship between two variables. we denote the correlation by r.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101, 16902,  1010,  2029,  2467,  3138,  5300,  2090,  1011,  1015,
         1998,  1015,  1010,  5577,  1996,  3997,  1997,  1996,  7399,  3276,
         2090,  2048, 10857,  1012,  2057, 19090,  1996, 16902,  2011,  1054,
         1012,   102])"
2130,1,"['mean', 'deviation', 'sample', 'correlation', 'statistics', 'sample mean']", Fitting a line residuals and correlation,seg_75,"we can compute the correlation using a formula, just as we did with the sample mean and standard deviation. this formula is rather complex,3 and like with other statistics, we generally perform",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2057,  2064, 24134,  1996, 16902,  2478,  1037,  5675,  1010,
         2074,  2004,  2057,  2106,  2007,  1996,  7099,  2812,  1998,  3115,
        24353,  1012,  2023,  5675,  2003,  2738,  3375,  1010,  1017,  1998,
         2066,  2007,  2060,  6747,  1010,  2057,  3227,  4685,   102])"
2131,1,"['associated', 'scatterplots', 'sample', 'variables', 'correlations', 'variable']", Fitting a line residuals and correlation,seg_75,"figure 8.9: sample scatterplots and their correlations. the first row shows variables with a positive relationship, represented by the trend up and to the right. the second row shows variables with a negative trend, where a large value in one variable is associated with a low value in the other.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  1023,  1024,  7099,  8040, 20097, 24759,
        12868,  1998,  2037, 16902,  2015,  1012,  1996,  2034,  5216,  3065,
        10857,  2007,  1037,  3893,  3276,  1010,  3421,  2011,  1996,  9874,
         2039,  1998,  2000,  1996,  2157,  1012,  1996,  2117,  5216,  3065,
        10857,  2007,  1037,  4997,  9874,  1010,  2073,  1037,  2312,  3643,
         1999,  2028,  8023,  2003,  3378,  2007,  1037,  2659,  3643,  1999,
         1996,  2060,  1012,   102])"
2132,1,"['linear', 'correlation', 'plots', 'variables', 'correlations']", Fitting a line residuals and correlation,seg_75,"the calculations on a computer or calculator. figure 8.9 shows eight plots and their corresponding correlations. only when the relationship is perfectly linear is the correlation either -1 or 1. if the relationship is strong and positive, the correlation will be near +1. if it is strong and negative, it will be near -1. if there is no apparent linear relationship between the variables, then the correlation will be near zero.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996, 16268,  2006,  1037,  3274,  2030, 10250, 19879,  4263,
         1012,  3275,  1022,  1012,  1023,  3065,  2809, 14811,  1998,  2037,
         7978, 16902,  2015,  1012,  2069,  2043,  1996,  3276,  2003,  6669,
         7399,  2003,  1996, 16902,  2593,  1011,  1015,  2030,  1015,  1012,
         2065,  1996,  3276,  2003,  2844,  1998,  3893,  1010,  1996, 16902,
         2097,  2022,  2379,  1009,  1015,  1012,  2065,  2009,  2003,  2844,
         1998,  4997,  1010,  2009,  2097,  2022,  2379,  1011,  1015,  1012,
         2065,  2045,  2003,  2053,  6835,  7399,  3276,  2090,  1996, 10857,
         1010,  2059,  1996, 16902,  2097,  2022,  2379,  5717,  1012,   102])"
2133,1,"['linear', 'correlation', 'correlations', 'nonlinear']", Fitting a line residuals and correlation,seg_75,"the correlation is intended to quantify the strength of a linear trend. nonlinear trends, even when strong, sometimes produce correlations that do not reflect the strength of the relationship; see three such examples in figure 8.10.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1996, 16902,  2003,  3832,  2000, 24110, 27351,  1996,  3997,
         1997,  1037,  7399,  9874,  1012, 27400, 12878,  1010,  2130,  2043,
         2844,  1010,  2823,  3965, 16902,  2015,  2008,  2079,  2025,  8339,
         1996,  3997,  1997,  1996,  3276,  1025,  2156,  2093,  2107,  4973,
         1999,  3275,  1022,  1012,  2184,  1012,   102])"
2134,1,"['scatterplots', 'nonlinear', 'sample', 'correlation', 'variables', 'correlations', 'case']", Fitting a line residuals and correlation,seg_75,"figure 8.10: sample scatterplots and their correlations. in each case, there is a strong relationship between the variables. however, because the relationship is nonlinear, the correlation is relatively weak.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  3275,  1022,  1012,  2184,  1024,  7099,  8040, 20097, 24759,
        12868,  1998,  2037, 16902,  2015,  1012,  1999,  2169,  2553,  1010,
         2045,  2003,  1037,  2844,  3276,  2090,  1996, 10857,  1012,  2174,
         1010,  2138,  1996,  3276,  2003, 27400,  1010,  1996, 16902,  2003,
         4659,  5410,  1012,   102])"
2135,1,"['curve', 'sets', 'nonlinear', 'nonlinear curves', 'data sets', 'plot', 'data']", Fitting a line residuals and correlation,seg_75,"no straight line is a good fit for the data sets represented in figure 8.10. try drawing nonlinear curves on each plot. once you create a curve for each, describe what is important in your fit.4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  2053,  3442,  2240,  2003,  1037,  2204,  4906,  2005,  1996,
         2951,  4520,  3421,  1999,  3275,  1022,  1012,  2184,  1012,  3046,
         5059, 27400, 10543,  2006,  2169,  5436,  1012,  2320,  2017,  3443,
         1037,  7774,  2005,  2169,  1010,  6235,  2054,  2003,  2590,  1999,
         2115,  4906,  1012,  1018,   102])"
2136,0,[], Fitting a line residuals and correlation,seg_75,60 70 80 60 70 80 height (in inches) height (in inches),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([ 101, 3438, 3963, 3770, 3438, 3963, 3770, 4578, 1006, 1999, 5282, 1007,
        4578, 1006, 1999, 5282, 1007,  102])"
2137,0,[], Fitting a line residuals and correlation,seg_75,0 100 200 300 distance (miles),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([ 101, 1014, 2531, 3263, 3998, 3292, 1006, 2661, 1007,  102])"
2138,0,[], Fitting a line residuals and correlation,seg_75,g i centimeters? ew 60 40 80 90 100 110 120 130 hip girth (cm),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11414,  1037,  2240, 21961,  2015,  1998, 16902])","tensor([  101,  1043,  1045, 18119,  1029,  1041,  2860,  3438,  2871,  3770,
         3938,  2531,  7287,  6036,  7558,  5099, 21025, 15265,  1006,  4642,
         1007,   102])"
2139,1,"['regression', 'linear', 'least squares regression', 'least squares']", Least squares regression,seg_77,"fitting linear models by eye is open to criticism since it is based on an individual’s preference. in this section, we use least squares regression as a more rigorous approach.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2560, 14320, 26237])","tensor([  101, 11414,  7399,  4275,  2011,  3239,  2003,  2330,  2000,  6256,
         2144,  2009,  2003,  2241,  2006,  2019,  3265,  1521,  1055, 12157,
         1012,  1999,  2023,  2930,  1010,  2057,  2224,  2560, 14320, 26237,
         2004,  1037,  2062, 20001,  3921,  1012,   102])"
2140,0,[], Least squares regression,seg_77,8.2.1 gift aid for freshman at elmhurst college,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([  101,  1022,  1012,  1016,  1012,  1015,  5592,  4681,  2005, 10452,
         2012, 17709, 10510,  2267,   102])"
2141,1,"['linear', 'random sample', 'sample', 'random', 'scatterplot', 'data']", Least squares regression,seg_77,"this section considers family income and gift aid data from a random sample of fifty students in the freshman class of elmhurst college in illinois. gift aid is financial aid that does not need to be paid back, as opposed to a loan. a scatterplot of the data is shown in figure 8.11 along with two linear fits. the lines follow a negative trend in the data; students who have higher family incomes tended to have lower gift aid from the university.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2023,  2930, 10592,  2155,  3318,  1998,  5592,  4681,  2951,
         2013,  1037,  6721,  7099,  1997,  5595,  2493,  1999,  1996, 10452,
         2465,  1997, 17709, 10510,  2267,  1999,  4307,  1012,  5592,  4681,
         2003,  3361,  4681,  2008,  2515,  2025,  2342,  2000,  2022,  3825,
         2067,  1010,  2004,  4941,  2000,  1037,  5414,  1012,  1037,  8040,
        20097, 24759,  4140,  1997,  1996,  2951,  2003,  3491,  1999,  3275,
         1022,  1012,  2340,  2247,  2007,  2048,  7399, 16142,  1012,  1996,
         3210,  3582,  1037,  4997,  9874,  1999,  1996,  2951,  1025,  2493,
         2040,  2031,  3020,  2155, 29373, 11121,  2000,  2031,  2896,  5592,
         4681,  2013,  1996,  2118,  1012,   102])"
2142,1,"['random sample', 'sample', 'random', 'least squares line', 'least squares', 'data']", Least squares regression,seg_77,"figure 8.11: gift aid and family income for a random sample of 50 freshman students from elmhurst college. two lines are fit to the data, the solid line being the least squares line.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2340,  1024,  5592,  4681,  1998,  2155,
         3318,  2005,  1037,  6721,  7099,  1997,  2753, 10452,  2493,  2013,
        17709, 10510,  2267,  1012,  2048,  3210,  2024,  4906,  2000,  1996,
         2951,  1010,  1996,  5024,  2240,  2108,  1996,  2560, 14320,  2240,
         1012,   102])"
2143,1,['correlation'], Least squares regression,seg_77,is the correlation positive or negative in figure 8.11?8,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2003,  1996, 16902,  3893,  2030,  4997,  1999,  3275,  1022,
         1012,  2340,  1029,  1022,   102])"
2144,0,[], Least squares regression,seg_77,8.2.2 an objective measure for finding the best line,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([ 101, 1022, 1012, 1016, 1012, 1016, 2019, 7863, 5468, 2005, 4531, 1996,
        2190, 2240,  102])"
2145,1,"['mean', 'residual', 'residuals']", Least squares regression,seg_77,"we begin by thinking about what we mean by “best”. mathematically, we want a line that has small residuals. the first option that may come to mind is to minimize the sum of the residual magnitudes:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2057,  4088,  2011,  3241,  2055,  2054,  2057,  2812,  2011,
         1523,  2190,  1524,  1012,  8045,  2135,  1010,  2057,  2215,  1037,
         2240,  2008,  2038,  2235, 21961,  2015,  1012,  1996,  2034,  5724,
         2008,  2089,  2272,  2000,  2568,  2003,  2000, 18478,  1996,  7680,
         1997,  1996, 21961, 10194,  2015,  1024,   102])"
2146,1,['residuals'], Least squares regression,seg_77,"which we could accomplish with a computer program. the resulting dashed line shown in figure 8.11 demonstrates this fit can be quite reasonable. however, a more common practice is to choose the line that minimizes the sum of the squared residuals:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2029,  2057,  2071, 14570,  2007,  1037,  3274,  2565,  1012,
         1996,  4525, 18198,  2240,  3491,  1999,  3275,  1022,  1012,  2340,
        16691,  2023,  4906,  2064,  2022,  3243,  9608,  1012,  2174,  1010,
         1037,  2062,  2691,  3218,  2003,  2000,  5454,  1996,  2240,  2008,
        18478,  2015,  1996,  7680,  1997,  1996, 19942, 21961,  2015,  1024,
          102])"
2147,1,"['least squares', 'residual', 'least squares line', 'least squares criterion']", Least squares regression,seg_77,the line that minimizes this least squares criterion is represented as the solid line in figure 8.11. this is commonly called the least squares line. the following are three possible reasons to choose this option instead of trying to minimize the sum of residual magnitudes without any squaring:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996,  2240,  2008, 18478,  2015,  2023,  2560, 14320, 19229,
         2003,  3421,  2004,  1996,  5024,  2240,  1999,  3275,  1022,  1012,
         2340,  1012,  2023,  2003,  4141,  2170,  1996,  2560, 14320,  2240,
         1012,  1996,  2206,  2024,  2093,  2825,  4436,  2000,  5454,  2023,
         5724,  2612,  1997,  2667,  2000, 18478,  1996,  7680,  1997, 21961,
        10194,  2015,  2302,  2151,  5490,  6692,  4892,  1024,   102])"
2148,1,['method'], Least squares regression,seg_77,1. it is the most commonly used method.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([ 101, 1015, 1012, 2009, 2003, 1996, 2087, 4141, 2109, 4118, 1012,  102])"
2149,1,"['statistical', 'least squares', 'least squares line']", Least squares regression,seg_77,2. computing the least squares line is widely supported in statistical software.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1016,  1012,  9798,  1996,  2560, 14320,  2240,  2003,  4235,
         3569,  1999,  7778,  4007,  1012,   102])"
2150,1,"['residual', 'residuals']", Least squares regression,seg_77,"3. in many applications, a residual twice as large as another residual is more than twice as bad. for example, being off by 4 is usually more than twice as bad as being off by 2. squaring the residuals accounts for this discrepancy.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1017,  1012,  1999,  2116,  5097,  1010,  1037, 21961,  3807,
         2004,  2312,  2004,  2178, 21961,  2003,  2062,  2084,  3807,  2004,
         2919,  1012,  2005,  2742,  1010,  2108,  2125,  2011,  1018,  2003,
         2788,  2062,  2084,  3807,  2004,  2919,  2004,  2108,  2125,  2011,
         1016,  1012,  5490,  6692,  4892,  1996, 21961,  2015,  6115,  2005,
         2023,  5860,  2890,  9739,  5666,  1012,   102])"
2151,1,"['least squares', 'least squares criterion']", Least squares regression,seg_77,the first two reasons are largely for tradition and convenience; the last reason explains why the least squares criterion is typically most helpful.9,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996,  2034,  2048,  4436,  2024,  4321,  2005,  4535,  1998,
        15106,  1025,  1996,  2197,  3114,  7607,  2339,  1996,  2560, 14320,
        19229,  2003,  4050,  2087, 14044,  1012,  1023,   102])"
2152,1,"['least squares', 'least squares line']", Least squares regression,seg_77,8.2.3 conditions for the least squares line,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1022,  1012,  1016,  1012,  1017,  3785,  2005,  1996,  2560,
        14320,  2240,   102])"
2153,1,"['least squares', 'least squares line']", Least squares regression,seg_77,"when fitting a least squares line, we generally require",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2043, 11414,  1037,  2560, 14320,  2240,  1010,  2057,  3227,
         5478,   102])"
2154,1,"['linear', 'nonlinear', 'data']", Least squares regression,seg_77,linearity. the data should show a linear trend. if there is a nonlinear trend (e.g. left panel of,tensor(1),"tensor([0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  7399,  3012,  1012,  1996,  2951,  2323,  2265,  1037,  7399,
         9874,  1012,  2065,  2045,  2003,  1037, 27400,  9874,  1006,  1041,
         1012,  1043,  1012,  2187,  5997,  1997,   102])"
2155,1,"['method', 'regression']", Least squares regression,seg_77,"figure 8.12), an advanced regression method from another book or later course should be applied.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2260,  1007,  1010,  2019,  3935, 26237,
         4118,  2013,  2178,  2338,  2030,  2101,  2607,  2323,  2022,  4162,
         1012,   102])"
2156,1,"['normal', 'residuals', 'condition']", Least squares regression,seg_77,"nearly normal residuals. generally, the residuals must be nearly normal. when this condition",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        1., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3053,  3671, 21961,  2015,  1012,  3227,  1010,  1996, 21961,
         2015,  2442,  2022,  3053,  3671,  1012,  2043,  2023,  4650,   102])"
2157,1,"['residual', 'regression', 'observation', 'regression line', 'outliers']", Least squares regression,seg_77,"is found to be unreasonable, it is usually because of outliers or concerns about influential points, which we’ll talk about more in sections 8.3. an example of a residual that would be a potentially concern is shown in figure 8.12, where one observation is clearly much further from the regression line than the others.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2003,  2179,  2000,  2022, 29205,  1010,  2009,  2003,  2788,
         2138,  1997,  2041, 14355,  2015,  2030,  5936,  2055,  6383,  2685,
         1010,  2029,  2057,  1521,  2222,  2831,  2055,  2062,  1999,  5433,
         1022,  1012,  1017,  1012,  2019,  2742,  1997,  1037, 21961,  2008,
         2052,  2022,  1037,  9280,  5142,  2003,  3491,  1999,  3275,  1022,
         1012,  2260,  1010,  2073,  2028,  8089,  2003,  4415,  2172,  2582,
         2013,  1996, 26237,  2240,  2084,  1996,  2500,  1012,   102])"
2158,1,"['variability', 'least squares', 'least squares line']", Least squares regression,seg_77,constant variability. the variability of points around the least squares line remains roughly con-,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  5377, 28436,  1012,  1996, 28436,  1997,  2685,  2105,  1996,
         2560, 14320,  2240,  3464,  5560,  9530,  1011,   102])"
2159,1,"['variability', 'condition']", Least squares regression,seg_77,"stant. an example of non-constant variability is shown in the third panel of figure 8.12, which represents the most common pattern observed when this condition fails: the variability of y is larger when x is larger.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  9761,  2102,  1012,  2019,  2742,  1997,  2512,  1011,  5377,
        28436,  2003,  3491,  1999,  1996,  2353,  5997,  1997,  3275,  1022,
         1012,  2260,  1010,  2029,  5836,  1996,  2087,  2691,  5418,  5159,
         2043,  2023,  4650, 11896,  1024,  1996, 28436,  1997,  1061,  2003,
         3469,  2043,  1060,  2003,  3469,  1012,   102])"
2160,1,"['regression', 'observations', 'time series', 'data']", Least squares regression,seg_77,"independent observations. be cautious about applying regression to time series data, which",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2981,  9420,  1012,  2022, 17145,  2055, 11243, 26237,  2000,
         2051,  2186,  2951,  1010,  2029,   102])"
2161,1,"['data', 'set', 'observations', 'model', 'data set', 'correlations', 'independent']", Least squares regression,seg_77,"are sequential observations in time such as a stock price each day. such data may have an underlying structure that should be considered in a model and analysis. an example of a data set where successive observations are not independent is shown in the fourth panel of figure 8.12. there are also other instances where correlations within the data are important, which is further discussed in chapter 9.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2024, 25582,  9420,  1999,  2051,  2107,  2004,  1037,  4518,
         3976,  2169,  2154,  1012,  2107,  2951,  2089,  2031,  2019, 10318,
         3252,  2008,  2323,  2022,  2641,  1999,  1037,  2944,  1998,  4106,
         1012,  2019,  2742,  1997,  1037,  2951,  2275,  2073, 11165,  9420,
         2024,  2025,  2981,  2003,  3491,  1999,  1996,  2959,  5997,  1997,
         3275,  1022,  1012,  2260,  1012,  2045,  2024,  2036,  2060, 12107,
         2073, 16902,  2015,  2306,  1996,  2951,  2024,  2590,  1010,  2029,
         2003,  2582,  6936,  1999,  3127,  1023,  1012,   102])"
2162,1,"['least squares', 'regression', 'least squares regression', 'data']", Least squares regression,seg_77,should we have concerns about applying least squares regression to the elmhurst data in figure 8.11?10,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2323,  2057,  2031,  5936,  2055, 11243,  2560, 14320, 26237,
         2000,  1996, 17709, 10510,  2951,  1999,  3275,  1022,  1012,  2340,
         1029,  2184,   102])"
2163,1,"['variability', 'data set', 'correlated', 'set', 'observations', 'outliers', 'time series', 'errors', 'data']", Least squares regression,seg_77,"figure 8.12: four examples showing when the methods in this chapter are insufficient to apply to the data. first panel: linearity fails. second panel: there are outliers, most especially one point that is very far away from the line. third panel: the variability of the errors is related to the value of x. fourth panel: a time series data set is shown, where successive observations are highly correlated.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2260,  1024,  2176,  4973,  4760,  2043,
         1996,  4725,  1999,  2023,  3127,  2024, 13990,  2000,  6611,  2000,
         1996,  2951,  1012,  2034,  5997,  1024,  7399,  3012, 11896,  1012,
         2117,  5997,  1024,  2045,  2024,  2041, 14355,  2015,  1010,  2087,
         2926,  2028,  2391,  2008,  2003,  2200,  2521,  2185,  2013,  1996,
         2240,  1012,  2353,  5997,  1024,  1996, 28436,  1997,  1996, 10697,
         2003,  3141,  2000,  1996,  3643,  1997,  1060,  1012,  2959,  5997,
         1024,  1037,  2051,  2186,  2951,  2275,  2003,  3491,  1010,  2073,
        11165,  9420,  2024,  3811, 23900,  1012,   102])"
2164,1,"['least squares', 'least squares line']", Least squares regression,seg_77,8.2.4 finding the least squares line,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1022,  1012,  1016,  1012,  1018,  4531,  1996,  2560, 14320,
         2240,   102])"
2165,1,"['regression', 'regression line', 'least squares regression', 'least squares', 'data']", Least squares regression,seg_77,"for the elmhurst data, we could write the equation of the least squares regression line as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2005,  1996, 17709, 10510,  2951,  1010,  2057,  2071,  4339,
         1996,  8522,  1997,  1996,  2560, 14320, 26237,  2240,  2004,   102])"
2166,1,"['regression', 'regression line', 'set', 'parameters']", Least squares regression,seg_77,"here the equation is set up to predict gift aid based on a student’s family income, which would be useful to students considering elmhurst. these two values, β0 and β1, are the parameters of the regression line.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2182,  1996,  8522,  2003,  2275,  2039,  2000, 16014,  5592,
         4681,  2241,  2006,  1037,  3076,  1521,  1055,  2155,  3318,  1010,
         2029,  2052,  2022,  6179,  2000,  2493,  6195, 17709, 10510,  1012,
         2122,  2048,  5300,  1010,  1156,  2692,  1998,  1156,  2487,  1010,
         2024,  1996, 11709,  1997,  1996, 26237,  2240,  1012,   102])"
2167,1,"['mean', 'parameter', 'estimation', 'estimated', 'estimates', 'sample', 'least squares line', 'least squares', 'parameters', 'data', 'sample mean']", Least squares regression,seg_77,"as in chapters 5, 6, and 7, the parameters are estimated using observed data. in practice, this estimation is done using a computer in the same way that other estimates, like a sample mean, can be estimated using a computer or calculator. however, we can also find the parameter estimates by applying two properties of the least squares line:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2004,  1999,  9159,  1019,  1010,  1020,  1010,  1998,  1021,
         1010,  1996, 11709,  2024,  4358,  2478,  5159,  2951,  1012,  1999,
         3218,  1010,  2023, 24155,  2003,  2589,  2478,  1037,  3274,  1999,
         1996,  2168,  2126,  2008,  2060, 10035,  1010,  2066,  1037,  7099,
         2812,  1010,  2064,  2022,  4358,  2478,  1037,  3274,  2030, 10250,
        19879,  4263,  1012,  2174,  1010,  2057,  2064,  2036,  2424,  1996,
        16381, 10035,  2011, 11243,  2048,  5144,  1997,  1996,  2560, 14320,
         2240,  1024,   102])"
2168,1,"['slope', 'estimated', 'least squares line', 'least squares']", Least squares regression,seg_77,• the slope of the least squares line can be estimated by,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1528,  1996,  9663,  1997,  1996,  2560, 14320,  2240,  2064,
         2022,  4358,  2011,   102])"
2169,1,"['explanatory variable', 'sample standard deviations', 'response', 'sample', 'correlation', 'standard', 'standard deviations', 'variables', 'deviations', 'explanatory', 'variable']", Least squares regression,seg_77,"where r is the correlation between the two variables, and sx and sy are the sample standard deviations of the explanatory variable and response, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2073,  1054,  2003,  1996, 16902,  2090,  1996,  2048, 10857,
         1010,  1998,  1055,  2595,  1998, 25353,  2024,  1996,  7099,  3115,
        24353,  2015,  1997,  1996,  4654, 24759,  5162,  7062,  8023,  1998,
         3433,  1010,  4414,  1012,   102])"
2170,1,"['mean', 'explanatory variable', 'sample', 'least squares line', 'sample mean', 'least squares', 'explanatory', 'variable']", Least squares regression,seg_77,"• if x̄ is the sample mean of the explanatory variable and ȳ is the sample mean of the vertical variable, then the point (x̄, ȳ) is on the least squares line.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1528,  2065,  1060,  2003,  1996,  7099,  2812,  1997,  1996,
         4654, 24759,  5162,  7062,  8023,  1998,  1061,  2003,  1996,  7099,
         2812,  1997,  1996,  7471,  8023,  1010,  2059,  1996,  2391,  1006,
         1060,  1010,  1061,  1007,  2003,  2006,  1996,  2560, 14320,  2240,
         1012,   102])"
2171,1,"['sample', 'least squares line', 'least squares', 'plot', 'sample means']", Least squares regression,seg_77,"figure 8.13 shows the sample means for the family income and gift aid as $101,780 and $19,940, respectively. we could plot the point (101.8, 19.94) on figure 8.11 on page 317 to verify it falls on the least squares line (the solid line).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2410,  3065,  1996,  7099,  2965,  2005,
         1996,  2155,  3318,  1998,  5592,  4681,  2004,  1002,  7886,  1010,
        28601,  1998,  1002,  2539,  1010,  6365,  2692,  1010,  4414,  1012,
         2057,  2071,  5436,  1996,  2391,  1006,  7886,  1012,  1022,  1010,
         2539,  1012,  6365,  1007,  2006,  3275,  1022,  1012,  2340,  2006,
         3931, 26628,  2000, 20410,  2009,  4212,  2006,  1996,  2560, 14320,
         2240,  1006,  1996,  5024,  2240,  1007,  1012,   102])"
2172,1,"['estimates', 'point estimates', 'parameters']", Least squares regression,seg_77,"next, we formally find the point estimates b0 and b1 of the parameters β0 and β1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2279,  1010,  2057,  6246,  2424,  1996,  2391, 10035,  1038,
         2692,  1998, 29491,  1997,  1996, 11709,  1156,  2692,  1998,  1156,
         2487,  1012,   102])"
2173,1,['statistics'], Least squares regression,seg_77,figure 8.13: summary statistics for family income and gift aid.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2410,  1024, 12654,  6747,  2005,  2155,
         3318,  1998,  5592,  4681,  1012,   102])"
2174,1,"['regression', 'regression line', 'slope', 'statistics']", Least squares regression,seg_77,"using the summary statistics in figure 8.13, compute the slope for the regression line of gift aid against family income.11",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2478,  1996, 12654,  6747,  1999,  3275,  1022,  1012,  2410,
         1010, 24134,  1996,  9663,  2005,  1996, 26237,  2240,  1997,  5592,
         4681,  2114,  2155,  3318,  1012,  2340,   102])"
2175,1,"['model', 'slope', 'estimate']", Least squares regression,seg_77,"you might recall the point-slope form of a line from math class, which we can use to find the model fit, including the estimate of b0. given the slope of a line and a point on the line, (x0, y0), the equation for the line can be written as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2017,  2453,  9131,  1996,  2391,  1011,  9663,  2433,  1997,
         1037,  2240,  2013,  8785,  2465,  1010,  2029,  2057,  2064,  2224,
         2000,  2424,  1996,  2944,  4906,  1010,  2164,  1996, 10197,  1997,
         1038,  2692,  1012,  2445,  1996,  9663,  1997,  1037,  2240,  1998,
         1037,  2391,  2006,  1996,  2240,  1010,  1006,  1060,  2692,  1010,
         1061,  2692,  1007,  1010,  1996,  8522,  2005,  1996,  2240,  2064,
         2022,  2517,  2004,   102])"
2176,0,[], Least squares regression,seg_77,y − y0 = slope× (x− x0),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([  101,  1061,  1597,  1061,  2692,  1027,  9663, 26306,  1006,  1060,
        22543,  1060,  2692,  1007,   102])"
2177,1,"['least squares', 'least squares line', 'statistics']", Least squares regression,seg_77,to identify the least squares line from summary statistics:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2000,  6709,  1996,  2560, 14320,  2240,  2013, 12654,  6747,
         1024,   102])"
2178,1,"['slope', 'parameter', 'estimate']", Least squares regression,seg_77,"• estimate the slope parameter, b1 = (sy/sx)r.",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1528, 10197,  1996,  9663, 16381,  1010, 29491,  1027,  1006,
        25353,  1013,  1055,  2595,  1007,  1054,  1012,   102])"
2179,1,"['least squares', 'least squares line']", Least squares regression,seg_77,"• noting that the point (x̄, ȳ) is on the least squares line, use x0 = x̄ and y0 = ȳ with the point-slope equation: y − ȳ = b1(x− x̄).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1528,  9073,  2008,  1996,  2391,  1006,  1060,  1010,  1061,
         1007,  2003,  2006,  1996,  2560, 14320,  2240,  1010,  2224,  1060,
         2692,  1027,  1060,  1998,  1061,  2692,  1027,  1061,  2007,  1996,
         2391,  1011,  9663,  8522,  1024,  1061,  1597,  1061,  1027, 29491,
         1006,  1060, 22543,  1060,  1007,  1012,   102])"
2180,1,"['slope', 'estimate', 'sample', 'sample means']", Least squares regression,seg_77,"using the point (101780, 19940) from the sample means and the slope estimate b1 = −0.0431 from guided practice 8.9, find the least-squares line for predicting aid based on family income.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2478,  1996,  2391,  1006,  7886,  2581, 17914,  1010,  2807,
         2692,  1007,  2013,  1996,  7099,  2965,  1998,  1996,  9663, 10197,
        29491,  1027,  1597,  2692,  1012,  5840, 21486,  2013,  8546,  3218,
         1022,  1012,  1023,  1010,  2424,  1996,  2560,  1011, 14320,  2240,
         2005, 29458,  4681,  2241,  2006,  2155,  3318,  1012,   102])"
2181,1,['slope'], Least squares regression,seg_77,"apply the point-slope equation using (101.78, 19.94) and the slope b1 = −0.0431:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  6611,  1996,  2391,  1011,  9663,  8522,  2478,  1006,  7886,
         1012,  6275,  1010,  2539,  1012,  6365,  1007,  1998,  1996,  9663,
        29491,  1027,  1597,  2692,  1012,  5840, 21486,  1024,   102])"
2182,0,[], Least squares regression,seg_77,"expanding the right side and then adding 19,940 to each side, the equation simplifies:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([  101,  9186,  1996,  2157,  2217,  1998,  2059,  5815,  2539,  1010,
         6365,  2692,  2000,  2169,  2217,  1010,  1996,  8522, 21934, 24759,
        14144,  1024,   102])"
2183,1,"['variable', 'predicted']", Least squares regression,seg_77,"here we have replaced y with âid and x with family income to put the equation in context. the final equation should always include a “hat” on the variable being predicted, whether it is a generic “y” or a named variable like “aid”.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2182,  2057,  2031,  2999,  1061,  2007,  4681,  1998,  1060,
         2007,  2155,  3318,  2000,  2404,  1996,  8522,  1999,  6123,  1012,
         1996,  2345,  8522,  2323,  2467,  2421,  1037,  1523,  6045,  1524,
         2006,  1996,  8023,  2108, 10173,  1010,  3251,  2009,  2003,  1037,
        12391,  1523,  1061,  1524,  2030,  1037,  2315,  8023,  2066,  1523,
         4681,  1524,  1012,   102])"
2184,1,"['regression', 'regression line', 'table', 'estimates', 'results', 'least squares line', 'least squares', 'error']", Least squares regression,seg_77,"a computer is usually used to compute the least squares line, and a summary table generated using software for the elmhurst regression line is shown in figure 8.14. the first column of numbers provides estimates for b0 and b1, respectively. these results match those from example 8.10 (with some minor rounding error).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1037,  3274,  2003,  2788,  2109,  2000, 24134,  1996,  2560,
        14320,  2240,  1010,  1998,  1037, 12654,  2795,  7013,  2478,  4007,
         2005,  1996, 17709, 10510, 26237,  2240,  2003,  3491,  1999,  3275,
         1022,  1012,  2403,  1012,  1996,  2034,  5930,  1997,  3616,  3640,
        10035,  2005,  1038,  2692,  1998, 29491,  1010,  4414,  1012,  2122,
         3463,  2674,  2216,  2013,  2742,  1022,  1012,  2184,  1006,  2007,
         2070,  3576, 26939,  7561,  1007,  1012,   102])"
2185,1,['error'], Least squares regression,seg_77,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2186,1,['intercept'], Least squares regression,seg_77,(intercept) 24319.3 1291.5 18.83 <0.0001 family income -0.0431 0.0108 -3.98 0.0002,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1006, 19115,  1007, 22884, 16147,  1012,  1017, 14378,  2487,
         1012,  1019,  2324,  1012,  6640,  1026,  1014,  1012,  2199,  2487,
         2155,  3318,  1011,  1014,  1012,  5840, 21486,  1014,  1012,  5890,
         2692,  2620,  1011,  1017,  1012,  5818,  1014,  1012,  2199,  2475,
          102])"
2187,1,"['parameter', 'estimates', 'results', 'least squares', 'data']", Least squares regression,seg_77,figure 8.14: summary of least squares fit for the elmhurst data. compare the parameter estimates in the first column to the results of example 8.10.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2403,  1024, 12654,  1997,  2560, 14320,
         4906,  2005,  1996, 17709, 10510,  2951,  1012, 12826,  1996, 16381,
        10035,  1999,  1996,  2034,  5930,  2000,  1996,  3463,  1997,  2742,
         1022,  1012,  2184,  1012,   102])"
2188,0,[], Least squares regression,seg_77,"examine the second, third, and fourth columns in figure 8.14. can you guess what they represent? (if you have not reviewed any inference chapter yet, skip this example.)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([  101, 11628,  1996,  2117,  1010,  2353,  1010,  1998,  2959,  7753,
         1999,  3275,  1022,  1012,  2403,  1012,  2064,  2017,  3984,  2054,
         2027,  5050,  1029,  1006,  2065,  2017,  2031,  2025,  8182,  2151,
        28937,  3127,  2664,  1010, 13558,  2023,  2742,  1012,  1007,   102])"
2189,1,"['null hypothesis', 'estimate', 'point estimate', 'hypothesis', 'standard', 'alternative hypothesis', 'standard error', 'statistic', 'error']", Least squares regression,seg_77,"we’ll describe the meaning of the columns using the second row, which corresponds to β1. the first column provides the point estimate for β1, as we calculated in an earlier example: b1 = −0.0431. the second column is a standard error for this point estimate: seb1 = 0.0108. the third column is a t-test statistic for the null hypothesis that β1 = 0: t = −3.98. the last column is the p-value for the t-test statistic for the null hypothesis β1 = 0 and a two-sided alternative hypothesis: 0.0002. we will get into more of these details in section 8.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2057,  1521,  2222,  6235,  1996,  3574,  1997,  1996,  7753,
         2478,  1996,  2117,  5216,  1010,  2029, 14788,  2000,  1156,  2487,
         1012,  1996,  2034,  5930,  3640,  1996,  2391, 10197,  2005,  1156,
         2487,  1010,  2004,  2057, 10174,  1999,  2019,  3041,  2742,  1024,
        29491,  1027,  1597,  2692,  1012,  5840, 21486,  1012,  1996,  2117,
         5930,  2003,  1037,  3115,  7561,  2005,  2023,  2391, 10197,  1024,
         7367,  2497,  2487,  1027,  1014,  1012,  5890,  2692,  2620,  1012,
         1996,  2353,  5930,  2003,  1037,  1056,  1011,  3231, 28093,  6553,
         2005,  1996, 19701, 10744,  2008,  1156,  2487,  1027,  1014,  1024,
         1056,  1027,  1597,  2509,  1012,  5818,  1012,  1996,  2197,  5930,
         2003,  1996,  1052,  1011,  3643,  2005,  1996,  1056,  1011,  3231,
        28093,  6553,  2005,  1996, 19701, 10744,  1156,  2487,  1027,  1014,
         1998,  1037,  2048,  1011, 11536,  4522, 10744,  1024,  1014,  1012,
         2199,  2475,  1012,  2057,  2097,  2131,  2046,  2062,  1997,  2122,
         4751,  1999,  2930,  1022,  1012,  1018,  1012,   102])"
2190,1,"['estimated', 'linear equation', 'linear']", Least squares regression,seg_77,suppose a high school senior is considering elmhurst college. can she simply use the linear equation that we have estimated to calculate her financial aid from the university?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  6814,  1037,  2152,  2082,  3026,  2003,  6195, 17709, 10510,
         2267,  1012,  2064,  2016,  3432,  2224,  1996,  7399,  8522,  2008,
         2057,  2031,  4358,  2000, 18422,  2014,  3361,  4681,  2013,  1996,
         2118,  1029,   102])"
2191,1,"['linear', 'estimate', 'linear equation', 'predicted', 'data']", Least squares regression,seg_77,"she may use it as an estimate, though some qualifiers on this approach are important. first, the data all come from one freshman class, and the way aid is determined by the university may change from year to year. second, the equation will provide an imperfect estimate. while the linear equation is good at capturing the trend in the data, no individual student’s aid will be perfectly predicted.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2016,  2089,  2224,  2009,  2004,  2019, 10197,  1010,  2295,
         2070, 18956,  2006,  2023,  3921,  2024,  2590,  1012,  2034,  1010,
         1996,  2951,  2035,  2272,  2013,  2028, 10452,  2465,  1010,  1998,
         1996,  2126,  4681,  2003,  4340,  2011,  1996,  2118,  2089,  2689,
         2013,  2095,  2000,  2095,  1012,  2117,  1010,  1996,  8522,  2097,
         3073,  2019, 29238, 10197,  1012,  2096,  1996,  7399,  8522,  2003,
         2204,  2012, 11847,  1996,  9874,  1999,  1996,  2951,  1010,  2053,
         3265,  3076,  1521,  1055,  4681,  2097,  2022,  6669, 10173,  1012,
          102])"
2192,1,"['parameter', 'regression', 'estimates', 'regression model', 'model']", Least squares regression,seg_77,8.2.5 interpreting regression model parameter estimates,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1022,  1012,  1016,  1012,  1019, 25455, 26237,  2944, 16381,
        10035,   102])"
2193,1,"['regression', 'regression model', 'model', 'parameters']", Least squares regression,seg_77,interpreting parameters in a regression model is often one of the most important steps in the analysis.,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101, 25455, 11709,  1999,  1037, 26237,  2944,  2003,  2411,  2028,
         1997,  1996,  2087,  2590,  4084,  1999,  1996,  4106,  1012,   102])"
2194,1,"['mean', 'slope', 'intercept', 'estimates', 'data']", Least squares regression,seg_77,"the intercept and slope estimates for the elmhurst data are b0 = 24,319 and b1 = −0.0431. what do these numbers really mean?",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996, 19115,  1998,  9663, 10035,  2005,  1996, 17709, 10510,
         2951,  2024,  1038,  2692,  1027,  2484,  1010, 26499,  1998, 29491,
         1027,  1597,  2692,  1012,  5840, 21486,  1012,  2054,  2079,  2122,
         3616,  2428,  2812,  1029,   102])"
2195,1,"['parameter', 'association', 'slope', 'coefficient', 'model', 'variables', 'average', 'data']", Least squares regression,seg_77,"interpreting the slope parameter is helpful in almost any application. for each additional $1,000 of family income, we would expect a student to receive a net difference of $1,000×(−0.0431) = −$43.10 in aid on average, i.e. $43.10 less. note that a higher family income corresponds to less aid because the coefficient of family income is negative in the model. we must be cautious in this interpretation: while there is a real association, we cannot interpret a causal connection between the variables because these data are observational. that is, increasing a student’s family income may not cause the student’s aid to drop. (it would be reasonable to contact the college and ask if the relationship is causal, i.e. if elmhurst college’s aid decisions are partially based on students’ family income.)",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2560, 14320, 26237])","tensor([  101, 25455,  1996,  9663, 16381,  2003, 14044,  1999,  2471,  2151,
         4646,  1012,  2005,  2169,  3176,  1002,  1015,  1010,  2199,  1997,
         2155,  3318,  1010,  2057,  2052,  5987,  1037,  3076,  2000,  4374,
         1037,  5658,  4489,  1997,  1002,  1015,  1010,  2199, 26306,  1006,
         1597,  2692,  1012,  5840, 21486,  1007,  1027,  1597,  1002,  4724,
         1012,  2184,  1999,  4681,  2006,  2779,  1010,  1045,  1012,  1041,
         1012,  1002,  4724,  1012,  2184,  2625,  1012,  3602,  2008,  1037,
         3020,  2155,  3318, 14788,  2000,  2625,  4681,  2138,  1996, 19064,
         1997,  2155,  3318,  2003,  4997,  1999,  1996,  2944,  1012,  2057,
         2442,  2022, 17145,  1999,  2023,  7613,  1024,  2096,  2045,  2003,
         1037,  2613,  2523,  1010,  2057,  3685, 17841,  1037, 28102,  4434,
         2090,  1996, 10857,  2138,  2122,  2951,  2024,  8089,  2389,  1012,
         2008,  2003,  1010,  4852,  1037,  3076,  1521,  1055,  2155,  3318,
         2089,  2025,  3426,  1996,  3076,  1521,  1055,  4681,  2000,  4530,
         1012,  1006,  2009,  2052,  2022,  9608,  2000,  3967,  1996,  2267,
         1998,  3198,  2065,  1996,  3276,  2003, 28102,  1010,  1045,  1012,
         1041,  1012,  2065, 17709, 10510,  2267,  1521,  1055,  4681,  6567,
         2024,  6822,  2241,  2006,  2493,  1521,  2155,  3318,  1012,  1007,
          102])"
2196,1,"['estimated', 'observations', 'intercept', 'average']", Least squares regression,seg_77,"the estimated intercept b0 = 24,319 describes the average aid if a student’s family had no income. the meaning of the intercept is relevant to this application since the family income for some students at elmhurst is $0. in other applications, the intercept may have little or no practical value if there are no observations where x is near zero.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996,  4358, 19115,  1038,  2692,  1027,  2484,  1010, 26499,
         5577,  1996,  2779,  4681,  2065,  1037,  3076,  1521,  1055,  2155,
         2018,  2053,  3318,  1012,  1996,  3574,  1997,  1996, 19115,  2003,
         7882,  2000,  2023,  4646,  2144,  1996,  2155,  3318,  2005,  2070,
         2493,  2012, 17709, 10510,  2003,  1002,  1014,  1012,  1999,  2060,
         5097,  1010,  1996, 19115,  2089,  2031,  2210,  2030,  2053,  6742,
         3643,  2065,  2045,  2024,  2053,  9420,  2073,  1060,  2003,  2379,
         5717,  1012,   102])"
2197,1,"['linear', 'slope', 'estimated', 'linear model', 'explanatory variable', 'intercept', 'outcome', 'model', 'average', 'explanatory', 'variable', 'case']", Least squares regression,seg_77,"the slope describes the estimated difference in the y variable if the explanatory variable x for a case happened to be one unit larger. the intercept describes the average outcome of y if x = 0 and the linear model is valid all the way to x = 0, which in many applications is not the case.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996,  9663,  5577,  1996,  4358,  4489,  1999,  1996,  1061,
         8023,  2065,  1996,  4654, 24759,  5162,  7062,  8023,  1060,  2005,
         1037,  2553,  3047,  2000,  2022,  2028,  3131,  3469,  1012,  1996,
        19115,  5577,  1996,  2779,  9560,  1997,  1061,  2065,  1060,  1027,
         1014,  1998,  1996,  7399,  2944,  2003,  9398,  2035,  1996,  2126,
         2000,  1060,  1027,  1014,  1010,  2029,  1999,  2116,  5097,  2003,
         2025,  1996,  2553,  1012,   102])"
2198,1,['extrapolation'], Least squares regression,seg_77,8.2.6 extrapolation is treacherous,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1022,  1012,  1016,  1012,  1020,  4469, 18155,  3370,  2003,
        26648,   102])"
2199,0,[], Least squares regression,seg_77,"stephen colbert april 6th, 201012",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([  101,  4459, 23928,  2258,  5351,  1010,  2230, 12521,   102])"
2200,1,"['regression', 'linear', 'linear regression', 'variables', 'data']", Least squares regression,seg_77,"linear models can be used to approximate the relationship between two variables. however, these models have real limitations. linear regression is simply a modeling framework. the truth is almost always much more complex than our simple line. for example, we do not know how the data outside of our limited window will behave.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  7399,  4275,  2064,  2022,  2109,  2000, 15796,  1996,  3276,
         2090,  2048, 10857,  1012,  2174,  1010,  2122,  4275,  2031,  2613,
        12546,  1012,  7399, 26237,  2003,  3432,  1037, 11643,  7705,  1012,
         1996,  3606,  2003,  2471,  2467,  2172,  2062,  3375,  2084,  2256,
         3722,  2240,  1012,  2005,  2742,  1010,  2057,  2079,  2025,  2113,
         2129,  1996,  2951,  2648,  1997,  2256,  3132,  3332,  2097, 16582,
         1012,   102])"
2201,1,"['model', 'estimate']", Least squares regression,seg_77,"use the model âid = 24,319−0.0431×family income to estimate the aid of another freshman student whose family had income of $1 million.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2224,  1996,  2944,  4681,  1027,  2484,  1010, 26499, 22543,
         2692,  1012,  5840, 21486, 26306,  7011,  4328,  2135,  3318,  2000,
        10197,  1996,  4681,  1997,  2178, 10452,  3076,  3005,  2155,  2018,
         3318,  1997,  1002,  1015,  2454,  1012,   102])"
2202,0,[], Least squares regression,seg_77,"we want to calculate the aid for family income = 1,000,000:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([  101,  2057,  2215,  2000, 18422,  1996,  4681,  2005,  2155,  3318,
         1027,  1015,  1010,  2199,  1010,  2199,  1024,   102])"
2203,1,['model'], Least squares regression,seg_77,"the model predicts this student will have -$18,781 in aid (!). however, elmhurst college does not offer negative aid where they select some students to pay extra on top of tuition to attend.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996,  2944, 16014,  2015,  2023,  3076,  2097,  2031,  1011,
         1002,  2324,  1010,  6275,  2487,  1999,  4681,  1006,   999,  1007,
         1012,  2174,  1010, 17709, 10510,  2267,  2515,  2025,  3749,  4997,
         4681,  2073,  2027,  7276,  2070,  2493,  2000,  3477,  4469,  2006,
         2327,  1997, 15413,  2000,  5463,  1012,   102])"
2204,1,"['linear', 'linear model', 'estimate', 'approximation', 'model', 'variables', 'data']", Least squares regression,seg_77,"applying a model estimate to values outside of the realm of the original data is called extrapolation. generally, a linear model is only an approximation of the real relationship between two variables. if we extrapolate, we are making an unreliable bet that the approximate linear relationship will be valid in places where it has not been analyzed.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101, 11243,  1037,  2944, 10197,  2000,  5300,  2648,  1997,  1996,
         8391,  1997,  1996,  2434,  2951,  2003,  2170,  4469, 18155,  3370,
         1012,  3227,  1010,  1037,  7399,  2944,  2003,  2069,  2019, 20167,
         1997,  1996,  2613,  3276,  2090,  2048, 10857,  1012,  2065,  2057,
         4469, 18155,  3686,  1010,  2057,  2024,  2437,  2019, 23579,  6655,
         2008,  1996, 15796,  7399,  3276,  2097,  2022,  9398,  1999,  3182,
         2073,  2009,  2038,  2025,  2042, 16578,  1012,   102])"
2205,0,[], Least squares regression,seg_77,8.2.7 using r2 to describe the strength of a fit,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([ 101, 1022, 1012, 1016, 1012, 1021, 2478, 1054, 2475, 2000, 6235, 1996,
        3997, 1997, 1037, 4906,  102])"
2206,1,"['linear', 'linear model', 'correlation', 'model', 'variables', 'data']", Least squares regression,seg_77,"we evaluated the strength of the linear relationship between two variables earlier using the correlation, r. however, it is more common to explain the strength of a linear fit using r2, called r-squared. if provided with a linear model, we might like to describe how closely the data cluster around the linear fit.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2057, 16330,  1996,  3997,  1997,  1996,  7399,  3276,  2090,
         2048, 10857,  3041,  2478,  1996, 16902,  1010,  1054,  1012,  2174,
         1010,  2009,  2003,  2062,  2691,  2000,  4863,  1996,  3997,  1997,
         1037,  7399,  4906,  2478,  1054,  2475,  1010,  2170,  1054,  1011,
        19942,  1012,  2065,  3024,  2007,  1037,  7399,  2944,  1010,  2057,
         2453,  2066,  2000,  6235,  2129,  4876,  1996,  2951,  9324,  2105,
         1996,  7399,  4906,  1012,   102])"
2207,1,"['regression', 'regression line', 'least squares regression', 'random sample', 'sample', 'random', 'least squares']", Least squares regression,seg_77,"figure 8.15: gift aid and family income for a random sample of 50 freshman students from elmhurst college, shown with the least squares regression line.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2321,  1024,  5592,  4681,  1998,  2155,
         3318,  2005,  1037,  6721,  7099,  1997,  2753, 10452,  2493,  2013,
        17709, 10510,  2267,  1010,  3491,  2007,  1996,  2560, 14320, 26237,
         2240,  1012,   102])"
2208,1,"['variability', 'uncertainty', 'variance', 'linear', 'linear model', 'variation', 'residuals', 'response variable', 'response', 'least squares line', 'model', 'least squares', 'data', 'variable']", Least squares regression,seg_77,"the r2 of a linear model describes the amount of variation in the response that is explained by the least squares line. for example, consider the elmhurst data, shown in figure 8.15. the variance of the response variable, aid received, is about s2aid ≈ 29.8 million. however, if we apply our least squares line, then this model reduces our uncertainty in predicting aid using a student’s family income. the variability in the residuals describes how much variation remains after using the model: s2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996,  1054,  2475,  1997,  1037,  7399,  2944,  5577,  1996,
         3815,  1997,  8386,  1999,  1996,  3433,  2008,  2003,  4541,  2011,
         1996,  2560, 14320,  2240,  1012,  2005,  2742,  1010,  5136,  1996,
        17709, 10510,  2951,  1010,  3491,  1999,  3275,  1022,  1012,  2321,
         1012,  1996, 23284,  1997,  1996,  3433,  8023,  1010,  4681,  2363,
         1010,  2003,  2055,  1055,  2475, 14326,  1606,  2756,  1012,  1022,
         2454,  1012,  2174,  1010,  2065,  2057,  6611,  2256,  2560, 14320,
         2240,  1010,  2059,  2023,  2944, 13416,  2256, 12503,  1999, 29458,
         4681,  2478,  1037,  3076,  1521,  1055,  2155,  3318,  1012,  1996,
        28436,  1999,  1996, 21961,  2015,  5577,  2129,  2172,  8386,  3464,
         2044,  2478,  1996,  2944,  1024,  1055,  2475,   102])"
2209,0,[], Least squares regression,seg_77,"res ≈ 22.4 million. in short, there was a reduction of",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2560, 14320, 26237])","tensor([  101, 24501,  1606,  2570,  1012,  1018,  2454,  1012,  1999,  2460,
         1010,  2045,  2001,  1037,  7312,  1997,   102])"
2210,1,"['linear', 'linear model', 'variation', 'information', 'model']", Least squares regression,seg_77,or about 25% in the data’s variation by using information about family income for predicting aid using a linear model. this corresponds exactly to the r-squared value:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2030,  2055,  2423,  1003,  1999,  1996,  2951,  1521,  1055,
         8386,  2011,  2478,  2592,  2055,  2155,  3318,  2005, 29458,  4681,
         2478,  1037,  7399,  2944,  1012,  2023, 14788,  3599,  2000,  1996,
         1054,  1011, 19942,  3643,  1024,   102])"
2211,1,"['linear', 'linear model', 'variation', 'response', 'correlation', 'model', 'explanatory']", Least squares regression,seg_77,"if a linear model has a very strong negative relationship with a correlation of -0.97, how much of the variation in the response is explained by the explanatory variable?13",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2065,  1037,  7399,  2944,  2038,  1037,  2200,  2844,  4997,
         3276,  2007,  1037, 16902,  1997,  1011,  1014,  1012,  5989,  1010,
         2129,  2172,  1997,  1996,  8386,  1999,  1996,  3433,  2003,  4541,
         2011,  1996,  4654, 24759,  5162,  7062,  8023,  1029,  2410,   102])"
2212,1,"['levels', 'categorical']", Least squares regression,seg_77,8.2.8 categorical predictors with two levels,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1022,  1012,  1016,  1012,  1022,  4937, 27203, 16014,  5668,
         2007,  2048,  3798,   102])"
2213,1,"['predictor', 'outcomes', 'level', 'levels', 'condition', 'variables', 'plot', 'data', 'categorical']", Least squares regression,seg_77,"categorical variables are also useful in predicting outcomes. here we consider a categorical predictor with two levels (recall that a level is the same as a category). we’ll consider ebay auctions for a video game, mario kart for the nintendo wii, where both the total price of the auction and the condition of the game were recorded. here we want to predict total price based on game condition, which takes values used and new. a plot of the auction data is shown in figure 8.16.",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  4937, 27203, 10857,  2024,  2036,  6179,  1999, 29458, 13105,
         1012,  2182,  2057,  5136,  1037,  4937, 27203, 16014,  2953,  2007,
         2048,  3798,  1006,  9131,  2008,  1037,  2504,  2003,  1996,  2168,
         2004,  1037,  4696,  1007,  1012,  2057,  1521,  2222,  5136,  1041,
        15907, 10470,  2015,  2005,  1037,  2678,  2208,  1010,  7986, 10556,
         5339,  2005,  1996, 10022, 16568,  1010,  2073,  2119,  1996,  2561,
         3976,  1997,  1996, 10470,  1998,  1996,  4650,  1997,  1996,  2208,
         2020,  2680,  1012,  2182,  2057,  2215,  2000, 16014,  2561,  3976,
         2241,  2006,  2208,  4650,  1010,  2029,  3138,  5300,  2109,  1998,
         2047,  1012,  1037,  5436,  1997,  1996, 10470,  2951,  2003,  3491,
         1999,  3275,  1022,  1012,  2385,  1012,   102])"
2214,1,"['regression', 'regression line', 'least squares regression', 'condition', 'least squares']", Least squares regression,seg_77,"figure 8.16: total auction prices for the video game mario kart, divided into used (x = 0) and new (x = 1) condition games. the least squares regression line is also shown.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2385,  1024,  2561, 10470,  7597,  2005,
         1996,  2678,  2208,  7986, 10556,  5339,  1010,  4055,  2046,  2109,
         1006,  1060,  1027,  1014,  1007,  1998,  2047,  1006,  1060,  1027,
         1015,  1007,  4650,  2399,  1012,  1996,  2560, 14320, 26237,  2240,
         2003,  2036,  3491,  1012,   102])"
2215,1,"['categories', 'regression', 'linear', 'linear model', 'indicator variable', 'condition', 'model', 'numerical', 'indicator', 'variable']", Least squares regression,seg_77,"to incorporate the game condition variable into a regression equation, we must convert the categories into a numerical form. we will do so using an indicator variable called cond new, which takes value 1 when the game is new and 0 when the game is used. using this indicator variable, the linear model may be written as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2000, 13265,  1996,  2208,  4650,  8023,  2046,  1037, 26237,
         8522,  1010,  2057,  2442, 10463,  1996,  7236,  2046,  1037, 15973,
         2433,  1012,  2057,  2097,  2079,  2061,  2478,  2019, 17245,  8023,
         2170,  9530,  2094,  2047,  1010,  2029,  3138,  3643,  1015,  2043,
         1996,  2208,  2003,  2047,  1998,  1014,  2043,  1996,  2208,  2003,
         2109,  1012,  2478,  2023, 17245,  8023,  1010,  1996,  7399,  2944,
         2089,  2022,  2517,  2004,   102])"
2216,1,['error'], Least squares regression,seg_77,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2217,1,['intercept'], Least squares regression,seg_77,(intercept) 42.87 0.81 52.67 <0.0001 cond new 10.90 1.26 8.66 <0.0001,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1006, 19115,  1007,  4413,  1012,  6584,  1014,  1012,  6282,
         4720,  1012,  6163,  1026,  1014,  1012,  2199,  2487,  9530,  2094,
         2047,  2184,  1012,  3938,  1015,  1012,  2656,  1022,  1012,  5764,
         1026,  1014,  1012,  2199,  2487,   102])"
2218,1,"['least squares', 'least squares regression', 'regression', 'condition']", Least squares regression,seg_77,figure 8.17: least squares regression summary for the final auction price against the condition of the game.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  3275,  1022,  1012,  2459,  1024,  2560, 14320, 26237, 12654,
         2005,  1996,  2345, 10470,  3976,  2114,  1996,  4650,  1997,  1996,
         2208,  1012,   102])"
2219,1,"['model', 'parameter', 'estimates']", Least squares regression,seg_77,"the parameter estimates are given in figure 8.17, and the model equation can be summarized as",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996, 16381, 10035,  2024,  2445,  1999,  3275,  1022,  1012,
         2459,  1010,  1998,  1996,  2944,  8522,  2064,  2022, 22539,  2004,
          102])"
2220,1,"['variance', 'residuals', 'normal', 'levels', 'data', 'categorical']", Least squares regression,seg_77,"for categorical predictors with just two levels, the linearity assumption will always be satisfied. however, we must evaluate whether the residuals in each group are approximately normal and have approximately equal variance. as can be seen in figure 8.16, both of these conditions are reasonably satisfied by the auction data.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2005,  4937, 27203, 16014,  5668,  2007,  2074,  2048,  3798,
         1010,  1996,  7399,  3012, 11213,  2097,  2467,  2022,  8510,  1012,
         2174,  1010,  2057,  2442, 16157,  3251,  1996, 21961,  2015,  1999,
         2169,  2177,  2024,  3155,  3671,  1998,  2031,  3155,  5020, 23284,
         1012,  2004,  2064,  2022,  2464,  1999,  3275,  1022,  1012,  2385,
         1010,  2119,  1997,  2122,  3785,  2024, 16286,  8510,  2011,  1996,
        10470,  2951,  1012,   102])"
2221,1,"['estimated', 'model', 'parameters']", Least squares regression,seg_77,interpret the two parameters estimated in the model for the price of mario kart in ebay auctions.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101, 17841,  1996,  2048, 11709,  4358,  1999,  1996,  2944,  2005,
         1996,  3976,  1997,  7986, 10556,  5339,  1999,  1041, 15907, 10470,
         2015,  1012,   102])"
2222,1,"['estimated', 'intercept', 'condition', 'average']", Least squares regression,seg_77,"the intercept is the estimated price when cond new takes value 0, i.e. when the game is in used condition. that is, the average selling price of a used version of the game is $42.87.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996, 19115,  2003,  1996,  4358,  3976,  2043,  9530,  2094,
         2047,  3138,  3643,  1014,  1010,  1045,  1012,  1041,  1012,  2043,
         1996,  2208,  2003,  1999,  2109,  4650,  1012,  2008,  2003,  1010,
         1996,  2779,  4855,  3976,  1997,  1037,  2109,  2544,  1997,  1996,
         2208,  2003,  1002,  4413,  1012,  6584,  1012,   102])"
2223,1,"['slope', 'average']", Least squares regression,seg_77,"the slope indicates that, on average, new games sell for about $10.90 more than used games.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([ 101, 1996, 9663, 7127, 2008, 1010, 2006, 2779, 1010, 2047, 2399, 5271,
        2005, 2055, 1002, 2184, 1012, 3938, 2062, 2084, 2109, 2399, 1012,  102])"
2224,1,"['categories', 'slope', 'estimated', 'response variable', 'intercept', 'response', 'average', 'indicator', 'variable']", Least squares regression,seg_77,the estimated intercept is the value of the response variable for the first category (i.e. the category corresponding to an indicator value of 0). the estimated slope is the average change in the response variable between the two categories.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1996,  4358, 19115,  2003,  1996,  3643,  1997,  1996,  3433,
         8023,  2005,  1996,  2034,  4696,  1006,  1045,  1012,  1041,  1012,
         1996,  4696,  7978,  2000,  2019, 17245,  3643,  1997,  1014,  1007,
         1012,  1996,  4358,  9663,  2003,  1996,  2779,  2689,  1999,  1996,
         3433,  8023,  2090,  1996,  2048,  7236,  1012,   102])"
2225,1,"['regression', 'multiple regression', 'predictor', 'predictor variables', 'variables']", Least squares regression,seg_77,"we’ll elaborate further on this topic in chapter 9, where we examine the influence of many predictor variables simultaneously using multiple regression.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  2057,  1521,  2222,  9603,  2582,  2006,  2023,  8476,  1999,
         3127,  1023,  1010,  2073,  2057, 11628,  1996,  3747,  1997,  2116,
        16014,  2953, 10857,  7453,  2478,  3674, 26237,  1012,   102])"
2226,1,['residuals'], Least squares regression,seg_77,0 0 0 5000 15000 25000 0 5000 15000 25000 −1500 −750 0 750 1500 number of tourists (thousands) number of tourists (thousands) residuals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1014,  1014,  1014, 13509, 10347,  2692, 25108,  2692,  1014,
        13509, 10347,  2692, 25108,  2692,  1597, 16068,  8889,  1597, 23352,
         2692,  1014,  9683, 10347,  2193,  1997,  9045,  1006,  5190,  1007,
         2193,  1997,  9045,  1006,  5190,  1007, 21961,  2015,   102])"
2227,1,['residuals'], Least squares regression,seg_77,−20 20 0 100 200 300 400 500 100 200 300 400 500 −40 −20 0 20 40 calories calories residuals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 2560, 14320, 26237])","tensor([  101,  1597, 11387,  2322,  1014,  2531,  3263,  3998,  4278,  3156,
         2531,  3263,  3998,  4278,  3156,  1597, 12740,  1597, 11387,  1014,
         2322,  2871, 10250, 18909, 10250, 18909, 21961,  2015,   102])"
2228,1,"['regression', 'observations', 'least squares line', 'outliers', 'least squares', 'cloud of points']", Types of outliers in linear regression,seg_79,"in this section, we identify criteria for determining which outliers are important and influential. outliers in regression are observations that fall far from the cloud of points. these points are especially important because they can have a strong influence on the least squares line.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1999,  2023,  2930,  1010,  2057,  6709,  9181,  2005, 12515,
         2029,  2041, 14355,  2015,  2024,  2590,  1998,  6383,  1012,  2041,
        14355,  2015,  1999, 26237,  2024,  9420,  2008,  2991,  2521,  2013,
         1996,  6112,  1997,  2685,  1012,  2122,  2685,  2024,  2926,  2590,
         2138,  2027,  2064,  2031,  1037,  2844,  3747,  2006,  1996,  2560,
        14320,  2240,  1012,   102])"
2229,1,"['residual', 'residual plot', 'least squares', 'least squares line', 'outliers', 'plots', 'scatterplot', 'residual plots', 'outlier', 'plot']", Types of outliers in linear regression,seg_79,"there are six plots shown in figure 8.18 along with the least squares line and residual plots. for each scatterplot and residual plot pair, identify the outliers and note how they influence the least squares line. recall that an outlier is any point that doesn’t appear to belong with the vast majority of the other points.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  2045,  2024,  2416, 14811,  3491,  1999,  3275,  1022,  1012,
         2324,  2247,  2007,  1996,  2560, 14320,  2240,  1998, 21961, 14811,
         1012,  2005,  2169,  8040, 20097, 24759,  4140,  1998, 21961,  5436,
         3940,  1010,  6709,  1996,  2041, 14355,  2015,  1998,  3602,  2129,
         2027,  3747,  1996,  2560, 14320,  2240,  1012,  9131,  2008,  2019,
         2041, 14355,  2003,  2151,  2391,  2008,  2987,  1521,  1056,  3711,
         2000,  7141,  2007,  1996,  6565,  3484,  1997,  1996,  2060,  2685,
         1012,   102])"
2230,1,['outlier'], Types of outliers in linear regression,seg_79,"(1) there is one outlier far from the other points, though it only appears to slightly influence",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1006,  1015,  1007,  2045,  2003,  2028,  2041, 14355,  2521,
         2013,  1996,  2060,  2685,  1010,  2295,  2009,  2069,  3544,  2000,
         3621,  3747,   102])"
2231,1,"['least squares', 'least squares line', 'outlier']", Types of outliers in linear regression,seg_79,"(2) there is one outlier on the right, though it is quite close to the least squares line, which",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1006,  1016,  1007,  2045,  2003,  2028,  2041, 14355,  2006,
         1996,  2157,  1010,  2295,  2009,  2003,  3243,  2485,  2000,  1996,
         2560, 14320,  2240,  1010,  2029,   102])"
2232,0,[], Types of outliers in linear regression,seg_79,suggests it wasn’t very influential.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([ 101, 6083, 2009, 2347, 1521, 1056, 2200, 6383, 1012,  102])"
2233,1,"['least squares', 'outlier']", Types of outliers in linear regression,seg_79,"(3) there is one point far away from the cloud, and this outlier appears to pull the least squares",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1006,  1017,  1007,  2045,  2003,  2028,  2391,  2521,  2185,
         2013,  1996,  6112,  1010,  1998,  2023,  2041, 14355,  3544,  2000,
         4139,  1996,  2560, 14320,   102])"
2234,0,[], Types of outliers in linear regression,seg_79,line up on the right; examine how the line around the primary cloud doesn’t appear to fit very well.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  2240,  2039,  2006,  1996,  2157,  1025, 11628,  2129,  1996,
         2240,  2105,  1996,  3078,  6112,  2987,  1521,  1056,  3711,  2000,
         4906,  2200,  2092,  1012,   102])"
2235,1,['outliers'], Types of outliers in linear regression,seg_79,(4) there is a primary cloud and then a small secondary cloud of four outliers. the secondary,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1006,  1018,  1007,  2045,  2003,  1037,  3078,  6112,  1998,
         2059,  1037,  2235,  3905,  6112,  1997,  2176,  2041, 14355,  2015,
         1012,  1996,  3905,   102])"
2236,0,[], Types of outliers in linear regression,seg_79,"cloud appears to be influencing the line somewhat strongly, making the least square line fit poorly almost everywhere. there might be an interesting explanation for the dual clouds, which is something that could be investigated.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  6112,  3544,  2000,  2022, 25870,  1996,  2240,  5399,  6118,
         1010,  2437,  1996,  2560,  2675,  2240,  4906,  9996,  2471,  7249,
         1012,  2045,  2453,  2022,  2019,  5875,  7526,  2005,  1996,  7037,
         8044,  1010,  2029,  2003,  2242,  2008,  2071,  2022, 10847,  1012,
          102])"
2237,1,"['outlier', 'cloud of points']", Types of outliers in linear regression,seg_79,(5) there is no obvious trend in the main cloud of points and the outlier on the right appears to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1006,  1019,  1007,  2045,  2003,  2053,  5793,  9874,  1999,
         1996,  2364,  6112,  1997,  2685,  1998,  1996,  2041, 14355,  2006,
         1996,  2157,  3544,  2000,   102])"
2238,1,"['slope', 'least squares', 'least squares line', 'control']", Types of outliers in linear regression,seg_79,largely control the slope of the least squares line.,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  4321,  2491,  1996,  9663,  1997,  1996,  2560, 14320,  2240,
         1012,   102])"
2239,1,"['least squares', 'least squares line', 'outlier']", Types of outliers in linear regression,seg_79,"(6) there is one outlier far from the cloud. however, it falls quite close to the least squares line",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1006,  1020,  1007,  2045,  2003,  2028,  2041, 14355,  2521,
         2013,  1996,  6112,  1012,  2174,  1010,  2009,  4212,  3243,  2485,
         2000,  1996,  2560, 14320,  2240,   102])"
2240,0,[], Types of outliers in linear regression,seg_79,and does not appear to be very influential.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([ 101, 1998, 2515, 2025, 3711, 2000, 2022, 2200, 6383, 1012,  102])"
2241,1,"['cases', 'residual', 'slope', 'outliers', 'plots', 'least squares', 'residual plots', 'outlier', 'data']", Types of outliers in linear regression,seg_79,"examine the residual plots in figure 8.18. you will probably find that there is some trend in the main clouds of (3) and (4). in these cases, the outliers influenced the slope of the least squares lines. in (5), data with no clear trend were assigned a line with a large trend simply due to one outlier (!).",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101, 11628,  1996, 21961, 14811,  1999,  3275,  1022,  1012,  2324,
         1012,  2017,  2097,  2763,  2424,  2008,  2045,  2003,  2070,  9874,
         1999,  1996,  2364,  8044,  1997,  1006,  1017,  1007,  1998,  1006,
         1018,  1007,  1012,  1999,  2122,  3572,  1010,  1996,  2041, 14355,
         2015,  5105,  1996,  9663,  1997,  1996,  2560, 14320,  3210,  1012,
         1999,  1006,  1019,  1007,  1010,  2951,  2007,  2053,  3154,  9874,
         2020,  4137,  1037,  2240,  2007,  1037,  2312,  9874,  3432,  2349,
         2000,  2028,  2041, 14355,  1006,   999,  1007,  1012,   102])"
2242,1,"['leverage', 'high leverage']", Types of outliers in linear regression,seg_79,"points that fall horizontally away from the center of the cloud tend to pull harder on the line, so we call them points with high leverage.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  2685,  2008,  2991, 23190,  2185,  2013,  1996,  2415,  1997,
         1996,  6112,  7166,  2000,  4139,  6211,  2006,  1996,  2240,  1010,
         2061,  2057,  2655,  2068,  2685,  2007,  2152, 21155,  1012,   102])"
2243,1,"['cases', 'leverage points', 'slope', 'leverage', 'high leverage', 'influential point', 'least squares line', 'least squares']", Types of outliers in linear regression,seg_79,"points that fall horizontally far from the line are points of high leverage; these points can strongly influence the slope of the least squares line. if one of these high leverage points does appear to actually invoke its influence on the slope of the line – as in cases (3), (4), and (5) of example 8.17 – then we call it an influential point. usually we can say a point is influential if, had we fitted the line without it, the influential point would have been unusually far from the least squares line.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  2685,  2008,  2991, 23190,  2521,  2013,  1996,  2240,  2024,
         2685,  1997,  2152, 21155,  1025,  2122,  2685,  2064,  6118,  3747,
         1996,  9663,  1997,  1996,  2560, 14320,  2240,  1012,  2065,  2028,
         1997,  2122,  2152, 21155,  2685,  2515,  3711,  2000,  2941,  1999,
         6767,  3489,  2049,  3747,  2006,  1996,  9663,  1997,  1996,  2240,
         1516,  2004,  1999,  3572,  1006,  1017,  1007,  1010,  1006,  1018,
         1007,  1010,  1998,  1006,  1019,  1007,  1997,  2742,  1022,  1012,
         2459,  1516,  2059,  2057,  2655,  2009,  2019,  6383,  2391,  1012,
         2788,  2057,  2064,  2360,  1037,  2391,  2003,  6383,  2065,  1010,
         2018,  2057,  7130,  1996,  2240,  2302,  2009,  1010,  1996,  6383,
         2391,  2052,  2031,  2042, 12890,  2521,  2013,  1996,  2560, 14320,
         2240,  1012,   102])"
2244,1,"['cases', 'outliers']", Types of outliers in linear regression,seg_79,"it is tempting to remove outliers. don’t do this without a very good reason. models that ignore exceptional (and interesting) cases often perform poorly. for instance, if a financial firm ignored the largest market swings – the “outliers” – they would soon go bankrupt by making poorly thought-out investments.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  2009,  2003, 23421,  2000,  6366,  2041, 14355,  2015,  1012,
         2123,  1521,  1056,  2079,  2023,  2302,  1037,  2200,  2204,  3114,
         1012,  4275,  2008,  8568, 11813,  1006,  1998,  5875,  1007,  3572,
         2411,  4685,  9996,  1012,  2005,  6013,  1010,  2065,  1037,  3361,
         3813,  6439,  1996,  2922,  3006, 18755,  1516,  1996,  1523,  2041,
        14355,  2015,  1524,  1516,  2027,  2052,  2574,  2175, 17482,  2011,
         2437,  9996,  2245,  1011,  2041, 10518,  1012,   102])"
2245,1,"['residual', 'sets', 'residual plot', 'least squares line', 'plots', 'data sets', 'least squares', 'plot', 'outlier', 'data']", Types of outliers in linear regression,seg_79,"figure 8.18: six plots, each with a least squares line and residual plot. all data sets have at least one outlier.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  3275,  1022,  1012,  2324,  1024,  2416, 14811,  1010,  2169,
         2007,  1037,  2560, 14320,  2240,  1998, 21961,  5436,  1012,  2035,
         2951,  4520,  2031,  2012,  2560,  2028,  2041, 14355,  1012,   102])"
2246,1,"['percent', 'population']", Types of outliers in linear regression,seg_79,e servation? p 40% 60% 80% 100% percent urban population,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.])","tensor([ 4127,  1997,  2041, 14355,  2015,  1999,  7399, 26237])","tensor([  101,  1041, 14262, 21596,  1029,  1052,  2871,  1003,  3438,  1003,
         3770,  1003,  2531,  1003,  3867,  3923,  2313,   102])"
2247,1,"['regression', 'uncertainty', 'regression line', 'slope', 'point estimates', 'estimates', 'standard errors', 'errors', 'standard']", Inference for linear regression,seg_81,"in this section, we discuss uncertainty in the estimates of the slope and y-intercept for a regression line. just as we identified standard errors for point estimates in previous chapters, we first discuss standard errors for these new estimates.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1999,  2023,  2930,  1010,  2057,  6848, 12503,  1999,  1996,
        10035,  1997,  1996,  9663,  1998,  1061,  1011, 19115,  2005,  1037,
        26237,  2240,  1012,  2074,  2004,  2057,  4453,  3115, 10697,  2005,
         2391, 10035,  1999,  3025,  9159,  1010,  2057,  2034,  6848,  3115,
        10697,  2005,  2122,  2047, 10035,  1012,   102])"
2248,0,[], Inference for linear regression,seg_81,8.4.1 midterm elections and unemployment,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1022,  1012,  1018,  1012,  1015,  3054,  3334,  2213,  3864,
         1998, 12163,   102])"
2249,1,"['rate', 'set', 'states']", Inference for linear regression,seg_81,"elections for members of the united states house of representatives occur every two years, coinciding every four years with the u.s. presidential election. the set of house elections occurring during the middle of a presidential term are called midterm elections. in america’s two-party system, one political theory suggests the higher the unemployment rate, the worse the president’s party will do in the midterm elections.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  3864,  2005,  2372,  1997,  1996,  2142,  2163,  2160,  1997,
         4505,  5258,  2296,  2048,  2086,  1010,  9226,  6895,  4667,  2296,
         2176,  2086,  2007,  1996,  1057,  1012,  1055,  1012,  4883,  2602,
         1012,  1996,  2275,  1997,  2160,  3864, 10066,  2076,  1996,  2690,
         1997,  1037,  4883,  2744,  2024,  2170,  3054,  3334,  2213,  3864,
         1012,  1999,  2637,  1521,  1055,  2048,  1011,  2283,  2291,  1010,
         2028,  2576,  3399,  6083,  1996,  3020,  1996, 12163,  3446,  1010,
         1996,  4788,  1996,  2343,  1521,  1055,  2283,  2097,  2079,  1999,
         1996,  3054,  3334,  2213,  3864,  1012,   102])"
2250,1,"['regression', 'data', 'regression line', 'historical data']", Inference for linear regression,seg_81,"to assess the validity of this claim, we can compile historical data and look for a connection. we consider every midterm election from 1898 to 2018, with the exception of those elections during the great depression. figure 8.19 shows these data and the least-squares regression line:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2000, 14358,  1996, 16406,  1997,  2023,  4366,  1010,  2057,
         2064,  4012, 22090,  3439,  2951,  1998,  2298,  2005,  1037,  4434,
         1012,  2057,  5136,  2296,  3054,  3334,  2213,  2602,  2013,  6068,
         2000,  2760,  1010,  2007,  1996,  6453,  1997,  2216,  3864,  2076,
         1996,  2307,  6245,  1012,  3275,  1022,  1012,  2539,  3065,  2122,
         2951,  1998,  1996,  2560,  1011, 14320, 26237,  2240,  1024,   102])"
2251,0,[], Inference for linear regression,seg_81,% change in house seats for president’s party,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  7399, 26237])","tensor([ 101, 1003, 2689, 1999, 2160, 4272, 2005, 2343, 1521, 1055, 2283,  102])"
2252,1,['rate'], Inference for linear regression,seg_81,= −7.36− 0.89× (unemployment rate),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1027,  1597,  2581,  1012,  4029, 22543,  1014,  1012,  6486,
        26306,  1006, 12163,  3446,  1007,   102])"
2253,1,"['rate', 'percent']", Inference for linear regression,seg_81,we consider the percent change in the number of seats of the president’s party (e.g. percent change in the number of seats for republicans in 2018) against the unemployment rate.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2057,  5136,  1996,  3867,  2689,  1999,  1996,  2193,  1997,
         4272,  1997,  1996,  2343,  1521,  1055,  2283,  1006,  1041,  1012,
         1043,  1012,  3867,  2689,  1999,  1996,  2193,  1997,  4272,  2005,
        10643,  1999,  2760,  1007,  2114,  1996, 12163,  3446,  1012,   102])"
2254,1,"['variance', 'observations', 'correlation', 'outliers', 'deviations', 'data']", Inference for linear regression,seg_81,"examining the data, there are no clear deviations from linearity, the constant variance condition, or substantial outliers. while the data are collected sequentially, a separate analysis was used to check for any apparent correlation between successive observations; no such correlation was found.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101, 12843,  1996,  2951,  1010,  2045,  2024,  2053,  3154, 24353,
         2015,  2013,  7399,  3012,  1010,  1996,  5377, 23284,  4650,  1010,
         2030,  6937,  2041, 14355,  2015,  1012,  2096,  1996,  2951,  2024,
         5067, 25582,  2135,  1010,  1037,  3584,  4106,  2001,  2109,  2000,
         4638,  2005,  2151,  6835, 16902,  2090, 11165,  9420,  1025,  2053,
         2107, 16902,  2001,  2179,  1012,   102])"
2255,0,[], Inference for linear regression,seg_81,● democrat 10% republican,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  7399, 26237])","tensor([ 101, 1619, 7672, 2184, 1003, 3951,  102])"
2256,1,['percent'], Inference for linear regression,seg_81,r ● p −30% 4% 8% 12% percent unemployment,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1054,  1619,  1052,  1597, 14142,  1003,  1018,  1003,  1022,
         1003,  2260,  1003,  3867, 12163,   102])"
2257,1,"['regression', 'rate', 'regression line', 'least squares regression', 'least squares', 'percent', 'data']", Inference for linear regression,seg_81,"figure 8.19: the percent change in house seats for the president’s party in each election from 1898 to 2010 plotted against the unemployment rate. the two points for the great depression have been removed, and a least squares regression line has been fit to the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  3275,  1022,  1012,  2539,  1024,  1996,  3867,  2689,  1999,
         2160,  4272,  2005,  1996,  2343,  1521,  1055,  2283,  1999,  2169,
         2602,  2013,  6068,  2000,  2230, 27347,  2114,  1996, 12163,  3446,
         1012,  1996,  2048,  2685,  2005,  1996,  2307,  6245,  2031,  2042,
         3718,  1010,  1998,  1037,  2560, 14320, 26237,  2240,  2038,  2042,
         4906,  2000,  1996,  2951,  1012,   102])"
2258,1,"['rate', 'data']", Inference for linear regression,seg_81,"the data for the great depression (1934 and 1938) were removed because the unemployment rate was 21% and 18%, respectively. do you agree that they should be removed for this investigation? why or why not?17",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1996,  2951,  2005,  1996,  2307,  6245,  1006,  4579,  1998,
         4260,  1007,  2020,  3718,  2138,  1996, 12163,  3446,  2001,  2538,
         1003,  1998,  2324,  1003,  1010,  4414,  1012,  2079,  2017,  5993,
         2008,  2027,  2323,  2022,  3718,  2005,  2023,  4812,  1029,  2339,
         2030,  2339,  2025,  1029,  2459,   102])"
2259,1,"['parameter', 'rate', 'linear', 'statistical hypothesis', 'data', 'predictor', 'slope', 'linear model', 'estimates', 'hypothesis', 'statistical', 'hypothesis test', 'model', 'test']", Inference for linear regression,seg_81,"there is a negative slope in the line shown in figure 8.19. however, this slope (and the yintercept) are only estimates of the parameter values. we might wonder, is this convincing evidence that the “true” linear model has a negative slope? that is, do the data provide strong evidence that the political theory is accurate, where the unemployment rate is a useful predictor of the midterm election? we can frame this investigation into a statistical hypothesis test:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2045,  2003,  1037,  4997,  9663,  1999,  1996,  2240,  3491,
         1999,  3275,  1022,  1012,  2539,  1012,  2174,  1010,  2023,  9663,
         1006,  1998,  1996, 18208,  3334,  3401, 13876,  1007,  2024,  2069,
        10035,  1997,  1996, 16381,  5300,  1012,  2057,  2453,  4687,  1010,
         2003,  2023, 13359,  3350,  2008,  1996,  1523,  2995,  1524,  7399,
         2944,  2038,  1037,  4997,  9663,  1029,  2008,  2003,  1010,  2079,
         1996,  2951,  3073,  2844,  3350,  2008,  1996,  2576,  3399,  2003,
         8321,  1010,  2073,  1996, 12163,  3446,  2003,  1037,  6179, 16014,
         2953,  1997,  1996,  3054,  3334,  2213,  2602,  1029,  2057,  2064,
         4853,  2023,  4812,  2046,  1037,  7778, 10744,  3231,  1024,   102])"
2260,1,"['model', 'linear model', 'linear', 'slope']", Inference for linear regression,seg_81,h0: β1 = 0. the true linear model has slope zero.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([ 101, 1044, 2692, 1024, 1156, 2487, 1027, 1014, 1012, 1996, 2995, 7399,
        2944, 2038, 9663, 5717, 1012,  102])"
2261,1,"['model', 'linear model', 'linear', 'slope']", Inference for linear regression,seg_81,ha: β1 =6 0. the true linear model has a slope different than zero. the unemployment is predictive,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  5292,  1024,  1156,  2487,  1027,  1020,  1014,  1012,  1996,
         2995,  7399,  2944,  2038,  1037,  9663,  2367,  2084,  5717,  1012,
         1996, 12163,  2003, 16014,  3512,   102])"
2262,0,[], Inference for linear regression,seg_81,of whether the president’s party wins or loses seats in the house of representatives.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1997,  3251,  1996,  2343,  1521,  1055,  2283,  5222,  2030,
        12386,  4272,  1999,  1996,  2160,  1997,  4505,  1012,   102])"
2263,1,"['parameter', 'hypotheses', 'test statistic', 'data', 'slope', 'estimate', 'standard', 'standard error', 'statistic', 'error', 'test']", Inference for linear regression,seg_81,"we would reject h0 in favor of ha if the data provide strong evidence that the true slope parameter is different than zero. to assess the hypotheses, we identify a standard error for the estimate, compute an appropriate test statistic, and identify the p-value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2057,  2052, 15454,  1044,  2692,  1999,  5684,  1997,  5292,
         2065,  1996,  2951,  3073,  2844,  3350,  2008,  1996,  2995,  9663,
        16381,  2003,  2367,  2084,  5717,  1012,  2000, 14358,  1996,  1044,
        22571, 14573, 23072,  1010,  2057,  6709,  1037,  3115,  7561,  2005,
         1996, 10197,  1010, 24134,  2019,  6413,  3231, 28093,  6553,  1010,
         1998,  6709,  1996,  1052,  1011,  3643,  1012,   102])"
2264,1,['regression'], Inference for linear regression,seg_81,8.4.2 understanding regression output from software,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1022,  1012,  1018,  1012,  1016,  4824, 26237,  6434,  2013,
         4007,   102])"
2265,1,"['test statistic', 'estimates', 'point estimates', 'standard', 'standard error', 'statistic', 'error', 'test']", Inference for linear regression,seg_81,"just like other point estimates we have seen before, we can compute a standard error and test statistic for b1. we will generally label the test statistic using a t , since it follows the t-distribution.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2074,  2066,  2060,  2391, 10035,  2057,  2031,  2464,  2077,
         1010,  2057,  2064, 24134,  1037,  3115,  7561,  1998,  3231, 28093,
         6553,  2005, 29491,  1012,  2057,  2097,  3227,  3830,  1996,  3231,
        28093,  6553,  2478,  1037,  1056,  1010,  2144,  2009,  4076,  1996,
         1056,  1011,  4353,  1012,   102])"
2266,1,"['regression', 'coefficient', 'least squares regression', 'point estimate', 'hypothesis test', 'regression line', 'estimate', 'statistics', 'statistical', 'standard error', 'test', 'slope', 'variable', 'information', 'hypothesis', 'standard', 'least squares', 'error']", Inference for linear regression,seg_81,"we will rely on statistical software to compute the standard error and leave the explanation of how this standard error is determined to a second or third statistics course. figure 8.20 shows software output for the least squares regression line in figure 8.19. the row labeled unemp includes the point estimate and other hypothesis test information for the slope, which is the coefficient of the unemployment variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2057,  2097, 11160,  2006,  7778,  4007,  2000, 24134,  1996,
         3115,  7561,  1998,  2681,  1996,  7526,  1997,  2129,  2023,  3115,
         7561,  2003,  4340,  2000,  1037,  2117,  2030,  2353,  6747,  2607,
         1012,  3275,  1022,  1012,  2322,  3065,  4007,  6434,  2005,  1996,
         2560, 14320, 26237,  2240,  1999,  3275,  1022,  1012,  2539,  1012,
         1996,  5216, 12599, 16655,  8737,  2950,  1996,  2391, 10197,  1998,
         2060, 10744,  3231,  2592,  2005,  1996,  9663,  1010,  2029,  2003,
         1996, 19064,  1997,  1996, 12163,  8023,  1012,   102])"
2267,1,['error'], Inference for linear regression,seg_81,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2268,1,['intercept'], Inference for linear regression,seg_81,(intercept) -7.3644 5.1553 -1.43 0.1646 unemp -0.8897 0.8350 -1.07 0.2961 df = 27,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1006, 19115,  1007,  1011,  1021,  1012,  4029, 22932,  1019,
         1012, 14168,  2509,  1011,  1015,  1012,  4724,  1014,  1012, 28783,
        16655,  8737,  1011,  1014,  1012,  6070,  2683,  2581,  1014,  1012,
         6640, 12376,  1011,  1015,  1012,  5718,  1014,  1012, 27200,  2487,
         1040,  2546,  1027,  2676,   102])"
2269,1,"['regression', 'regression line', 'response', 'statistical']", Inference for linear regression,seg_81,figure 8.20: output from statistical software for the regression line modeling the midterm election losses for the president’s party as a response to unemployment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  3275,  1022,  1012,  2322,  1024,  6434,  2013,  7778,  4007,
         2005,  1996, 26237,  2240, 11643,  1996,  3054,  3334,  2213,  2602,
         6409,  2005,  1996,  2343,  1521,  1055,  2283,  2004,  1037,  3433,
         2000, 12163,  1012,   102])"
2270,0,[], Inference for linear regression,seg_81,what do the first and second columns of figure 8.20 represent?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  7399, 26237])","tensor([ 101, 2054, 2079, 1996, 2034, 1998, 2117, 7753, 1997, 3275, 1022, 1012,
        2322, 5050, 1029,  102])"
2271,1,"['regression', 'regression line', 'estimate', 'estimates', 'least squares', 'standard errors', 'errors', 'standard', 'least squares estimates']", Inference for linear regression,seg_81,"the entries in the first column represent the least squares estimates, b0 and b1, and the values in the second column correspond to the standard errors of each estimate. using the estimates, we could write the equation for the least square regression line as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1996, 10445,  1999,  1996,  2034,  5930,  5050,  1996,  2560,
        14320, 10035,  1010,  1038,  2692,  1998, 29491,  1010,  1998,  1996,
         5300,  1999,  1996,  2117,  5930, 17254,  2000,  1996,  3115, 10697,
         1997,  2169, 10197,  1012,  2478,  1996, 10035,  1010,  2057,  2071,
         4339,  1996,  8522,  2005,  1996,  2560,  2675, 26237,  2240,  2004,
          102])"
2272,1,"['rate', 'predicted', 'case']", Inference for linear regression,seg_81,"where ŷ in this case represents the predicted change in the number of seats for the president’s party, and x represents the unemployment rate.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2073,  1061,  1999,  2023,  2553,  5836,  1996, 10173,  2689,
         1999,  1996,  2193,  1997,  4272,  2005,  1996,  2343,  1521,  1055,
         2283,  1010,  1998,  1060,  5836,  1996, 12163,  3446,  1012,   102])"
2273,1,"['test statistic', 'hypotheses', 'regression', 'slope', 'numerical', 'null value', 'hypothesis', 'hypothesis testing', 'statistic', 'data', 'test']", Inference for linear regression,seg_81,"we previously used a t-test statistic for hypothesis testing in the context of numerical data. regression is very similar. in the hypotheses we consider, the null value for the slope is 0, so we can compute the test statistic using the t (or z) score formula:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2057,  3130,  2109,  1037,  1056,  1011,  3231, 28093,  6553,
         2005, 10744,  5604,  1999,  1996,  6123,  1997, 15973,  2951,  1012,
        26237,  2003,  2200,  2714,  1012,  1999,  1996,  1044, 22571, 14573,
        23072,  2057,  5136,  1010,  1996, 19701,  3643,  2005,  1996,  9663,
         2003,  1014,  1010,  2061,  2057,  2064, 24134,  1996,  3231, 28093,
         6553,  2478,  1996,  1056,  1006,  2030,  1062,  1007,  3556,  5675,
         1024,   102])"
2274,1,['null value'], Inference for linear regression,seg_81,estimate− null value −0.8897− 0 t = = = −1.07 se 0.8350,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101, 10197, 22543, 19701,  3643,  1597,  2692,  1012,  6070,  2683,
         2581, 22543,  1014,  1056,  1027,  1027,  1027,  1597,  2487,  1012,
         5718,  7367,  1014,  1012,  6640, 12376,   102])"
2275,0,[], Inference for linear regression,seg_81,this corresponds to the third column of figure 8.20.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2023, 14788,  2000,  1996,  2353,  5930,  1997,  3275,  1022,
         1012,  2322,  1012,   102])"
2276,1,"['table', 'hypothesis', 'hypothesis test', 'test']", Inference for linear regression,seg_81,use the table in figure 8.20 to determine the p-value for the hypothesis test.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2224,  1996,  2795,  1999,  3275,  1022,  1012,  2322,  2000,
         5646,  1996,  1052,  1011,  3643,  2005,  1996, 10744,  3231,  1012,
          102])"
2277,1,"['rate', 'table', 'coefficient', 'hypothesis', 'hypothesis test', 'data', 'test']", Inference for linear regression,seg_81,"the last column of the table gives the p-value for the two-sided hypothesis test for the coefficient of the unemployment rate: 0.2961. that is, the data do not provide convincing evidence that a higher unemployment rate has any correspondence with smaller or larger losses for the president’s party in the house of representatives in midterm elections.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1996,  2197,  5930,  1997,  1996,  2795,  3957,  1996,  1052,
         1011,  3643,  2005,  1996,  2048,  1011, 11536, 10744,  3231,  2005,
         1996, 19064,  1997,  1996, 12163,  3446,  1024,  1014,  1012, 27200,
         2487,  1012,  2008,  2003,  1010,  1996,  2951,  2079,  2025,  3073,
        13359,  3350,  2008,  1037,  3020, 12163,  3446,  2038,  2151, 11061,
         2007,  3760,  2030,  3469,  6409,  2005,  1996,  2343,  1521,  1055,
         2283,  1999,  1996,  2160,  1997,  4505,  1999,  3054,  3334,  2213,
         3864,  1012,   102])"
2278,1,"['standard errors', 'method', 'errors', 'statistics', 'statistical', 'point estimates', 'test', 'standard', 'estimates', 'test statistics']", Inference for linear regression,seg_81,"we usually rely on statistical software to identify point estimates, standard errors, test statistics, and p-values in practice. however, be aware that software will not generally check whether the method is appropriate, meaning we must still verify conditions are met.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2057,  2788, 11160,  2006,  7778,  4007,  2000,  6709,  2391,
        10035,  1010,  3115, 10697,  1010,  3231,  6747,  1010,  1998,  1052,
         1011,  5300,  1999,  3218,  1012,  2174,  1010,  2022,  5204,  2008,
         4007,  2097,  2025,  3227,  4638,  3251,  1996,  4118,  2003,  6413,
         1010,  3574,  2057,  2442,  2145, 20410,  3785,  2024,  2777,  1012,
          102])"
2279,1,"['slope', 'hypothesis', 'hypothesis test', 'test']", Inference for linear regression,seg_81,"examine figure 8.15 on page 322, which relates the elmhurst college aid and student family income. how sure are you that the slope is statistically significantly different from zero? that is, do you think a formal hypothesis test would reject the claim that the true slope of the line should be zero?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101, 11628,  3275,  1022,  1012,  2321,  2006,  3931, 23768,  1010,
         2029, 14623,  1996, 17709, 10510,  2267,  4681,  1998,  3076,  2155,
         3318,  1012,  2129,  2469,  2024,  2017,  2008,  1996,  9663,  2003,
         7778,  2135,  6022,  2367,  2013,  5717,  1029,  2008,  2003,  1010,
         2079,  2017,  2228,  1037,  5337, 10744,  3231,  2052, 15454,  1996,
         4366,  2008,  1996,  2995,  9663,  1997,  1996,  2240,  2323,  2022,
         5717,  1029,   102])"
2280,1,"['slope', 'hypothesis', 'hypothesis test', 'variables', 'data', 'test']", Inference for linear regression,seg_81,"while the relationship between the variables is not perfect, there is an evident decreasing trend in the data. this suggests the hypothesis test will reject the null claim that the slope is zero.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2096,  1996,  3276,  2090,  1996, 10857,  2003,  2025,  3819,
         1010,  2045,  2003,  2019, 10358, 16922,  9874,  1999,  1996,  2951,
         1012,  2023,  6083,  1996, 10744,  3231,  2097, 15454,  1996, 19701,
         4366,  2008,  1996,  9663,  2003,  5717,  1012,   102])"
2281,1,"['regression', 'regression line', 'least squares regression', 'statistical', 'least squares']", Inference for linear regression,seg_81,figure 8.21 shows statistical software output from fitting the least squares regression line shown in figure 8.15. use this output to formally evaluate the following hypotheses.18,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  3275,  1022,  1012,  2538,  3065,  7778,  4007,  6434,  2013,
        11414,  1996,  2560, 14320, 26237,  2240,  3491,  1999,  3275,  1022,
         1012,  2321,  1012,  2224,  2023,  6434,  2000,  6246, 16157,  1996,
         2206,  1044, 22571, 14573, 23072,  1012,  2324,   102])"
2282,1,['coefficient'], Inference for linear regression,seg_81,h0: the true coefficient for family income is zero.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1044,  2692,  1024,  1996,  2995, 19064,  2005,  2155,  3318,
         2003,  5717,  1012,   102])"
2283,1,['coefficient'], Inference for linear regression,seg_81,ha: the true coefficient for family income is not zero.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  5292,  1024,  1996,  2995, 19064,  2005,  2155,  3318,  2003,
         2025,  5717,  1012,   102])"
2284,1,['error'], Inference for linear regression,seg_81,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2285,1,['intercept'], Inference for linear regression,seg_81,(intercept) 24319.3 1291.5 18.83 <0.0001 family income -0.0431 0.0108 -3.98 0.0002 df = 48,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1006, 19115,  1007, 22884, 16147,  1012,  1017, 14378,  2487,
         1012,  1019,  2324,  1012,  6640,  1026,  1014,  1012,  2199,  2487,
         2155,  3318,  1011,  1014,  1012,  5840, 21486,  1014,  1012,  5890,
         2692,  2620,  1011,  1017,  1012,  5818,  1014,  1012,  2199,  2475,
         1040,  2546,  1027,  4466,   102])"
2286,1,"['least squares', 'data']", Inference for linear regression,seg_81,"figure 8.21: summary of least squares fit for the elmhurst college data, where we are predicting the gift aid by the university based on the family income of students.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  3275,  1022,  1012,  2538,  1024, 12654,  1997,  2560, 14320,
         4906,  2005,  1996, 17709, 10510,  2267,  2951,  1010,  2073,  2057,
         2024, 29458,  1996,  5592,  4681,  2011,  1996,  2118,  2241,  2006,
         1996,  2155,  3318,  1997,  2493,  1012,   102])"
2287,1,"['interval', 'confidence', 'confidence interval', 'coefficient']", Inference for linear regression,seg_81,8.4.3 confidence interval for a coefficient,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1022,  1012,  1018,  1012,  1017,  7023, 13483,  2005,  1037,
        19064,   102])"
2288,1,"['confidence interval', 'regression', 'interval', 'coefficient', 'hypothesis', 'hypothesis test', 'model', 'confidence', 'test']", Inference for linear regression,seg_81,"similar to how we can conduct a hypothesis test for a model coefficient using regression output, we can also construct a confidence interval for that coefficient.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2714,  2000,  2129,  2057,  2064,  6204,  1037, 10744,  3231,
         2005,  1037,  2944, 19064,  2478, 26237,  6434,  1010,  2057,  2064,
         2036,  9570,  1037,  7023, 13483,  2005,  2008, 19064,  1012,   102])"
2289,1,"['regression', 'confidence interval', 'table', 'interval', 'coefficient', 'confidence']", Inference for linear regression,seg_81,compute the 95% confidence interval for the family income coefficient using the regression output from table 8.21.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101, 24134,  1996,  5345,  1003,  7023, 13483,  2005,  1996,  2155,
         3318, 19064,  2478,  1996, 26237,  6434,  2013,  2795,  1022,  1012,
         2538,  1012,   102])"
2290,1,"['confidence interval', 'regression', 'interval', 'estimate', 'point estimate', 'coefficient', 'degrees of freedom', 'standard', 'distribution', 'model', 'standard error', 'confidence', 'error']", Inference for linear regression,seg_81,"the point estimate is -0.0431 and the standard error is se = 0.0108. when constructing a confidence interval for a model coefficient, we generally use a t-distribution. the degrees of freedom for the distribution are noted in the regression output, df = 48, allowing us to identify t?48 = 2.01 for use in the confidence interval.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1996,  2391, 10197,  2003,  1011,  1014,  1012,  5840, 21486,
         1998,  1996,  3115,  7561,  2003,  7367,  1027,  1014,  1012,  5890,
         2692,  2620,  1012,  2043, 15696,  1037,  7023, 13483,  2005,  1037,
         2944, 19064,  1010,  2057,  3227,  2224,  1037,  1056,  1011,  4353,
         1012,  1996,  5445,  1997,  4071,  2005,  1996,  4353,  2024,  3264,
         1999,  1996, 26237,  6434,  1010,  1040,  2546,  1027,  4466,  1010,
         4352,  2149,  2000,  6709,  1056,  1029,  4466,  1027,  1016,  1012,
         5890,  2005,  2224,  1999,  1996,  7023, 13483,  1012,   102])"
2291,1,"['interval', 'confidence', 'confidence interval']", Inference for linear regression,seg_81,we can now construct the confidence interval in the usual way:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2057,  2064,  2085,  9570,  1996,  7023, 13483,  1999,  1996,
         5156,  2126,  1024,   102])"
2292,0,[], Inference for linear regression,seg_81,"point estimate± t?48 × se → −0.0431± 2.01× 0.0108 → (−0.0648,−0.0214)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2391, 10197, 29657,  1056,  1029,  4466,  1095,  7367,  1585,
         1597,  2692,  1012,  5840, 21486, 29657,  1016,  1012,  5890, 26306,
         1014,  1012,  5890,  2692,  2620,  1585,  1006,  1597,  2692,  1012,
         5757, 18139,  1010,  1597,  2692,  1012,  6185, 16932,  1007,   102])"
2293,1,"['average', 'predicted', 'confident']", Inference for linear regression,seg_81,"we are 95% confident that with each dollar increase in family income, the university’s gift aid is predicted to decrease on average by $0.0214 to $0.0648.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2057,  2024,  5345,  1003,  9657,  2008,  2007,  2169,  7922,
         3623,  1999,  2155,  3318,  1010,  1996,  2118,  1521,  1055,  5592,
         4681,  2003, 10173,  2000,  9885,  2006,  2779,  2011,  1002,  1014,
         1012,  6185, 16932,  2000,  1002,  1014,  1012,  5757, 18139,  1012,
          102])"
2294,1,"['coefficients', 'intervals', 'model']", Inference for linear regression,seg_81,confidence intervals for model coefficients can be computed using the t-distribution:,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  7023, 14025,  2005,  2944, 21374,  2064,  2022, 24806,  2478,
         1996,  1056,  1011,  4353,  1024,   102])"
2295,1,"['confidence level', 'degrees of freedom', 'level', 'confidence']", Inference for linear regression,seg_81,where t?df is the appropriate t-value corresponding to the confidence level with the model’s degrees of freedom.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([ 101, 2073, 1056, 1029, 1040, 2546, 2003, 1996, 6413, 1056, 1011, 3643,
        7978, 2000, 1996, 7023, 2504, 2007, 1996, 2944, 1521, 1055, 5445, 1997,
        4071, 1012,  102])"
2296,1,"['mean', 'regression', 'mean response value', 'interval', 'prediction', 'response value', 'confidence', 'response', 'parameters', 'intervals', 'model', 'confidence intervals', 'prediction intervals']", Inference for linear regression,seg_81,"on the topic of intervals in this book, we’ve focused exclusively on confidence intervals for model parameters. however, there are other types of intervals that may be of interest, including prediction intervals for a response value and also confidence intervals for a mean response value in the context of regression. these two interval types are introduced in an online extra that you may download at",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  2006,  1996,  8476,  1997, 14025,  1999,  2023,  2338,  1010,
         2057,  1521,  2310,  4208,  7580,  2006,  7023, 14025,  2005,  2944,
        11709,  1012,  2174,  1010,  2045,  2024,  2060,  4127,  1997, 14025,
         2008,  2089,  2022,  1997,  3037,  1010,  2164, 17547, 14025,  2005,
         1037,  3433,  3643,  1998,  2036,  7023, 14025,  2005,  1037,  2812,
         3433,  3643,  1999,  1996,  6123,  1997, 26237,  1012,  2122,  2048,
        13483,  4127,  2024,  3107,  1999,  2019,  3784,  4469,  2008,  2017,
         2089,  8816,  2012,   102])"
2297,1,"['regression', 'linear regression', 'linear']", Inference for linear regression,seg_81,www.openintro.org/d?file=stat extra linear regression supp,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  7479,  1012,  2330, 18447,  3217,  1012,  8917,  1013,  1040,
         1029,  5371,  1027, 28093,  4469,  7399, 26237, 10514,  9397,   102])"
2298,1,"['regression', 'regression line', 'least squares regression', 'least squares']", Inference for linear regression,seg_81,"in the following exercises, visually check the conditions for fitting a least squares regression line. however, you do not need to report these conditions in your solutions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  1999,  1996,  2206, 11110,  1010, 17453,  4638,  1996,  3785,
         2005, 11414,  1037,  2560, 14320, 26237,  2240,  1012,  2174,  1010,
         2017,  2079,  2025,  2342,  2000,  3189,  2122,  3785,  1999,  2115,
         7300,  1012,   102])"
2299,1,['population'], Inference for linear regression,seg_81,% urban population,tensor(1),"tensor([0., 0., 0., 1., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([ 101, 1003, 3923, 2313,  102])"
2300,1,"['data collection', 'residuals', 'data']", Inference for linear regression,seg_81,05 −1 1− 0 −1 0 1 2 0 100 200 300 400 −2 −1 0 1 2 beauty order of data collection residuals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([28937,  2005,  7399, 26237])","tensor([  101,  5709,  1597,  2487,  1015, 22543,  1014,  1597,  2487,  1014,
         1015,  1016,  1014,  2531,  3263,  3998,  4278,  1597,  2475,  1597,
         2487,  1014,  1015,  1016,  5053,  2344,  1997,  2951,  3074, 21961,
         2015,   102])"
2301,1,"['regression', 'outcomes', 'simple linear regression', 'linear regression', 'logistic', 'multiple regression', 'logistic regression', 'model', 'case', 'linear', 'predictor', 'model selection', 'categorical', 'range', 'linear model', 'levels']",Chapter  Multiple and logistic regression,seg_83,"9.1 introduction to multiple regression 9.2 model selection 9.3 checking model conditions using graphs 9.4 multiple regression case study: mario kart 9.5 introduction to logistic regression the principles of simple linear regression lay the foundation for more sophisticated regression models used in a wide range of challenging settings. in chapter 9, we explore multiple regression, which introduces the possibility of more than one predictor in a linear model, and logistic regression, a technique for predicting categorical outcomes with two levels. for videos, slides, and other resources, please visit www.openintro.org/os",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3127,  3674,  1998,  8833,  6553, 26237])","tensor([  101,  1023,  1012,  1015,  4955,  2000,  3674, 26237,  1023,  1012,
         1016,  2944,  4989,  1023,  1012,  1017,  9361,  2944,  3785,  2478,
        19287,  1023,  1012,  1018,  3674, 26237,  2553,  2817,  1024,  7986,
        10556,  5339,  1023,  1012,  1019,  4955,  2000,  8833,  6553, 26237,
         1996,  6481,  1997,  3722,  7399, 26237,  3913,  1996,  3192,  2005,
         2062, 12138, 26237,  4275,  2109,  1999,  1037,  2898,  2846,  1997,
        10368, 10906,  1012,  1999,  3127,  1023,  1010,  2057,  8849,  3674,
        26237,  1010,  2029, 13999,  1996,  6061,  1997,  2062,  2084,  2028,
        16014,  2953,  1999,  1037,  7399,  2944,  1010,  1998,  8833,  6553,
        26237,  1010,  1037,  6028,  2005, 29458,  4937, 27203, 13105,  2007,
         2048,  3798,  1012,  2005,  6876,  1010, 14816,  1010,  1998,  2060,
         4219,  1010,  3531,  3942,  7479,  1012,  2330, 18447,  3217,  1012,
         8917,  1013,  9808,   102])"
2302,1,"['regression', 'response', 'method', 'variables', 'case']", Introduction to multiple regression,seg_85,"multiple regression extends simple two-variable regression to the case that still has one response but many predictors (denoted x1, x2, x3, ...). the method is motivated by scenarios where many variables may be simultaneously connected to an output.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  3674, 26237,  8908,  3722,  2048,  1011,  8023, 26237,  2000,
         1996,  2553,  2008,  2145,  2038,  2028,  3433,  2021,  2116, 16014,
         5668,  1006, 19537,  1060,  2487,  1010,  1060,  2475,  1010,  1060,
         2509,  1010,  1012,  1012,  1012,  1007,  1012,  1996,  4118,  2003,
        12774,  2011, 16820,  2073,  2116, 10857,  2089,  2022,  7453,  4198,
         2000,  2019,  6434,  1012,   102])"
2303,1,"['regression', 'rate', 'multiple regression', 'set', 'information', 'outcome', 'data set', 'data', 'variable']", Introduction to multiple regression,seg_85,"we will consider data about loans from the peer-to-peer lender, lending club, which is a data set we first encountered in chapters 1 and 2. the loan data includes terms of the loan as well as information about the borrower. the outcome variable we would like to better understand is the interest rate assigned to the loan. for instance, all other characteristics held constant, does it matter how much debt someone already has? does it matter if their income has been verified? multiple regression will help us answer these and other questions.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2057,  2097,  5136,  2951,  2055, 10940,  2013,  1996,  8152,
         1011,  2000,  1011,  8152, 18496,  2121,  1010, 18435,  2252,  1010,
         2029,  2003,  1037,  2951,  2275,  2057,  2034,  8567,  1999,  9159,
         1015,  1998,  1016,  1012,  1996,  5414,  2951,  2950,  3408,  1997,
         1996,  5414,  2004,  2092,  2004,  2592,  2055,  1996, 17781,  2121,
         1012,  1996,  9560,  8023,  2057,  2052,  2066,  2000,  2488,  3305,
         2003,  1996,  3037,  3446,  4137,  2000,  1996,  5414,  1012,  2005,
         6013,  1010,  2035,  2060,  6459,  2218,  5377,  1010,  2515,  2009,
         3043,  2129,  2172,  7016,  2619,  2525,  2038,  1029,  2515,  2009,
         3043,  2065,  2037,  3318,  2038,  2042, 20119,  1029,  3674, 26237,
         2097,  2393,  2149,  3437,  2122,  1998,  2060,  3980,  1012,   102])"
2304,1,"['regression', 'data', 'set', 'observations', 'indicator variable', 'results', 'model', 'variables', 'data set', 'indicator', 'variable', 'categorical']", Introduction to multiple regression,seg_85,"the data set loans includes results from 10,000 loans, and we’ll be looking at a subset of the available variables, some of which will be new from those we saw in earlier chapters. the first six observations in the data set are shown in figure 9.1, and descriptions for each variable are shown in figure 9.2. notice that the past bankruptcy variable (bankruptcy) is an indicator variable, where it takes the value 1 if the borrower had a past bankruptcy in their record and 0 if not. using an indicator variable in place of a category name allows for these variables to be directly used in regression. two of the other variables are categorical (income ver and issued), each of which can take one of a few different non-numerical values; we’ll discuss how these are handled in the model in section 9.1.1.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996,  2951,  2275, 10940,  2950,  3463,  2013,  2184,  1010,
         2199, 10940,  1010,  1998,  2057,  1521,  2222,  2022,  2559,  2012,
         1037, 16745,  1997,  1996,  2800, 10857,  1010,  2070,  1997,  2029,
         2097,  2022,  2047,  2013,  2216,  2057,  2387,  1999,  3041,  9159,
         1012,  1996,  2034,  2416,  9420,  1999,  1996,  2951,  2275,  2024,
         3491,  1999,  3275,  1023,  1012,  1015,  1010,  1998, 13271,  2005,
         2169,  8023,  2024,  3491,  1999,  3275,  1023,  1012,  1016,  1012,
         5060,  2008,  1996,  2627, 10528,  8023,  1006, 10528,  1007,  2003,
         2019, 17245,  8023,  1010,  2073,  2009,  3138,  1996,  3643,  1015,
         2065,  1996, 17781,  2121,  2018,  1037,  2627, 10528,  1999,  2037,
         2501,  1998,  1014,  2065,  2025,  1012,  2478,  2019, 17245,  8023,
         1999,  2173,  1997,  1037,  4696,  2171,  4473,  2005,  2122, 10857,
         2000,  2022,  3495,  2109,  1999, 26237,  1012,  2048,  1997,  1996,
         2060, 10857,  2024,  4937, 27203,  1006,  3318,  2310,  2099,  1998,
         3843,  1007,  1010,  2169,  1997,  2029,  2064,  2202,  2028,  1997,
         1037,  2261,  2367,  2512,  1011, 15973,  5300,  1025,  2057,  1521,
         2222,  6848,  2129,  2122,  2024,  8971,  1999,  1996,  2944,  1999,
         2930,  1023,  1012,  1015,  1012,  1015,  1012,   102])"
2305,1,"['set', 'data set', 'data']", Introduction to multiple regression,seg_85,figure 9.1: first six rows from the loans data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  3275,  1023,  1012,  1015,  1024,  2034,  2416, 10281,  2013,
         1996, 10940,  2951,  2275,  1012,   102])"
2306,1,"['set', 'variables', 'data set', 'data']", Introduction to multiple regression,seg_85,figure 9.2: variables and their descriptions for the loans data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  3275,  1023,  1012,  1016,  1024, 10857,  1998,  2037, 13271,
         2005,  1996, 10940,  2951,  2275,  1012,   102])"
2307,1,"['categorical variables', 'variables', 'indicator', 'categorical']", Introduction to multiple regression,seg_85,9.1.1 indicator and categorical variables as predictors,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1023,  1012,  1015,  1012,  1015, 17245,  1998,  4937, 27203,
        10857,  2004, 16014,  5668,   102])"
2308,1,"['regression', 'rate', 'linear', 'predictor', 'regression model', 'linear regression', 'model', 'linear regression model']", Introduction to multiple regression,seg_85,let’s start by fitting a linear regression model for interest rate with a single predictor indicating whether or not a person has a bankruptcy in their record:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2292,  1521,  1055,  2707,  2011, 11414,  1037,  7399, 26237,
         2944,  2005,  3037,  3446,  2007,  1037,  2309, 16014,  2953,  8131,
         3251,  2030,  2025,  1037,  2711,  2038,  1037, 10528,  1999,  2037,
         2501,  1024,   102])"
2309,1,['model'], Introduction to multiple regression,seg_85,results of this model are shown in figure 9.3.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([ 101, 3463, 1997, 2023, 2944, 2024, 3491, 1999, 3275, 1023, 1012, 1017,
        1012,  102])"
2310,1,"['intercept', 'error']", Introduction to multiple regression,seg_85,estimate std. error t value pr(>|t|) (intercept) 12.3380 0.0533 231.49 <0.0001 bankruptcy 0.7368 0.1529 4.82 <0.0001 df = 9998,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,  1006, 19115,  1007,  2260,  1012,
        27908,  2692,  1014,  1012,  5709, 22394, 20304,  1012,  4749,  1026,
         1014,  1012,  2199,  2487, 10528,  1014,  1012,  6421,  2575,  2620,
         1014,  1012, 15017,  2683,  1018,  1012,  6445,  1026,  1014,  1012,
         2199,  2487,  1040,  2546,  1027, 25897,  2620,   102])"
2311,1,"['rate', 'linear', 'linear model', 'model']", Introduction to multiple regression,seg_85,figure 9.3: summary of a linear model for predicting interest rate based on whether the borrower has a bankruptcy in their record.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  3275,  1023,  1012,  1017,  1024, 12654,  1997,  1037,  7399,
         2944,  2005, 29458,  3037,  3446,  2241,  2006,  3251,  1996, 17781,
         2121,  2038,  1037, 10528,  1999,  2037,  2501,  1012,   102])"
2312,1,"['model', 'coefficient', 'variable']", Introduction to multiple regression,seg_85,interpret the coefficient for the past bankruptcy variable in the model. is this coefficient significantly different from 0?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 17841,  1996, 19064,  2005,  1996,  2627, 10528,  8023,  1999,
         1996,  2944,  1012,  2003,  2023, 19064,  6022,  2367,  2013,  1014,
         1029,   102])"
2313,1,"['regression', 'rate', 'predictor', 'categorical predictor variables', 'slope', 'coefficient', 'predictor variables', 'model', 'variables', 'variable', 'categorical']", Introduction to multiple regression,seg_85,"the bankruptcy variable takes one of two values: 1 when the borrower has a bankruptcy in their history and 0 otherwise. a slope of 0.74 means that the model predicts a 0.74% higher interest rate for those borrowers with a bankruptcy in their record. (see section 8.2.8 for a review of the interpretation for two-level categorical predictor variables.) examining the regression output in figure 9.3, we can see that the p-value for bankruptcy is very close to zero, indicating there is strong evidence the coefficient is different from zero when using this simple one-predictor model.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996, 10528,  8023,  3138,  2028,  1997,  2048,  5300,  1024,
         1015,  2043,  1996, 17781,  2121,  2038,  1037, 10528,  1999,  2037,
         2381,  1998,  1014,  4728,  1012,  1037,  9663,  1997,  1014,  1012,
         6356,  2965,  2008,  1996,  2944, 16014,  2015,  1037,  1014,  1012,
         6356,  1003,  3020,  3037,  3446,  2005,  2216, 17781,  2545,  2007,
         1037, 10528,  1999,  2037,  2501,  1012,  1006,  2156,  2930,  1022,
         1012,  1016,  1012,  1022,  2005,  1037,  3319,  1997,  1996,  7613,
         2005,  2048,  1011,  2504,  4937, 27203, 16014,  2953, 10857,  1012,
         1007, 12843,  1996, 26237,  6434,  1999,  3275,  1023,  1012,  1017,
         1010,  2057,  2064,  2156,  2008,  1996,  1052,  1011,  3643,  2005,
        10528,  2003,  2200,  2485,  2000,  5717,  1010,  8131,  2045,  2003,
         2844,  3350,  1996, 19064,  2003,  2367,  2013,  5717,  2043,  2478,
         2023,  3722,  2028,  1011, 16014,  2953,  2944,  1012,   102])"
2314,1,"['regression', 'categorical variable', 'level', 'reference level', 'levels', 'model', 'variable', 'categorical']", Introduction to multiple regression,seg_85,"suppose we had fit a model using a 3-level categorical variable, such as income ver. the output from software is shown in figure 9.4. this regression output provides multiple rows for the income ver variable. each row represents the relative difference for each level of income ver. however, we are missing one of the levels: not (for not verified). the missing level is called the reference level, and it represents the default level that other levels are measured against.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  6814,  2057,  2018,  4906,  1037,  2944,  2478,  1037,  1017,
         1011,  2504,  4937, 27203,  8023,  1010,  2107,  2004,  3318,  2310,
         2099,  1012,  1996,  6434,  2013,  4007,  2003,  3491,  1999,  3275,
         1023,  1012,  1018,  1012,  2023, 26237,  6434,  3640,  3674, 10281,
         2005,  1996,  3318,  2310,  2099,  8023,  1012,  2169,  5216,  5836,
         1996,  5816,  4489,  2005,  2169,  2504,  1997,  3318,  2310,  2099,
         1012,  2174,  1010,  2057,  2024,  4394,  2028,  1997,  1996,  3798,
         1024,  2025,  1006,  2005,  2025, 20119,  1007,  1012,  1996,  4394,
         2504,  2003,  2170,  1996,  4431,  2504,  1010,  1998,  2009,  5836,
         1996, 12398,  2504,  2008,  2060,  3798,  2024,  7594,  2114,  1012,
          102])"
2315,1,"['intercept', 'error']", Introduction to multiple regression,seg_85,estimate std. error t value pr(>|t|) (intercept) 11.0995 0.0809 137.18 <0.0001 income ver: source only 1.4160 0.1107 12.79 <0.0001 income ver: verified 3.2543 0.1297 25.09 <0.0001 df = 9998,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,  1006, 19115,  1007,  2340,  1012,
         5641,  2683,  2629,  1014,  1012,  5511,  2692,  2683, 14989,  1012,
         2324,  1026,  1014,  1012,  2199,  2487,  3318,  2310,  2099,  1024,
         3120,  2069,  1015,  1012,  4601, 16086,  1014,  1012,  7287,  2581,
         2260,  1012,  6535,  1026,  1014,  1012,  2199,  2487,  3318,  2310,
         2099,  1024, 20119,  1017,  1012, 22234,  2509,  1014,  1012, 14378,
         2581,  2423,  1012,  5641,  1026,  1014,  1012,  2199,  2487,  1040,
         2546,  1027, 25897,  2620,   102])"
2316,1,"['regression', 'rate', 'linear', 'predictor', 'linear model', 'results', 'levels', 'model']", Introduction to multiple regression,seg_85,"figure 9.4: summary of a linear model for predicting interest rate based on whether the borrower’s income source and amount has been verified. this predictor has three levels, which results in 2 rows in the regression output.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  3275,  1023,  1012,  1018,  1024, 12654,  1997,  1037,  7399,
         2944,  2005, 29458,  3037,  3446,  2241,  2006,  3251,  1996, 17781,
         2121,  1521,  1055,  3318,  3120,  1998,  3815,  2038,  2042, 20119,
         1012,  2023, 16014,  2953,  2038,  2093,  3798,  1010,  2029,  3463,
         1999,  1016, 10281,  1999,  1996, 26237,  6434,  1012,   102])"
2317,1,"['model', 'regression model', 'regression']", Introduction to multiple regression,seg_85,how would we write an equation for this regression model?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2129,  2052,  2057,  4339,  2019,  8522,  2005,  2023, 26237,
         2944,  1029,   102])"
2318,1,"['model', 'regression model', 'regression']", Introduction to multiple regression,seg_85,the equation for the regression model may be written as a model with two predictors:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996,  8522,  2005,  1996, 26237,  2944,  2089,  2022,  2517,
         2004,  1037,  2944,  2007,  2048, 16014,  5668,  1024,   102])"
2319,1,"['indicator variables', 'categorical variable', 'variables', 'indicator', 'variable', 'categorical']", Introduction to multiple regression,seg_85,"we use the notation variablelevel to represent indicator variables for when the categorical variable takes a particular value. for example, income versource only would take a value of 1 if income ver was source only for a loan, and it would take a value of 0 otherwise. likewise, income ververified would take a value of 1 if income ver took a value of verified and 0 if it took any other value.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2057,  2224,  1996, 14869,  8023, 20414,  2884,  2000,  5050,
        17245, 10857,  2005,  2043,  1996,  4937, 27203,  8023,  3138,  1037,
         3327,  3643,  1012,  2005,  2742,  1010,  3318,  2310, 25301,  3126,
         3401,  2069,  2052,  2202,  1037,  3643,  1997,  1015,  2065,  3318,
         2310,  2099,  2001,  3120,  2069,  2005,  1037,  5414,  1010,  1998,
         2009,  2052,  2202,  1037,  3643,  1997,  1014,  4728,  1012, 10655,
         1010,  3318, 29230, 22618,  2052,  2202,  1037,  3643,  1997,  1015,
         2065,  3318,  2310,  2099,  2165,  1037,  3643,  1997, 20119,  1998,
         1014,  2065,  2009,  2165,  2151,  2060,  3643,  1012,   102])"
2320,1,"['variable', 'level']", Introduction to multiple regression,seg_85,the notation used in example 9.2 may feel a bit confusing. let’s figure out how to use the equation for each level of the income ver variable.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996, 14869,  2109,  1999,  2742,  1023,  1012,  1016,  2089,
         2514,  1037,  2978, 16801,  1012,  2292,  1521,  1055,  3275,  2041,
         2129,  2000,  2224,  1996,  8522,  2005,  2169,  2504,  1997,  1996,
         3318,  2310,  2099,  8023,  1012,   102])"
2321,1,"['model', 'rate', 'average']", Introduction to multiple regression,seg_85,"using the model from example 9.2, compute the average interest rate for borrowers whose income source and amount are both unverified.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2478,  1996,  2944,  2013,  2742,  1023,  1012,  1016,  1010,
        24134,  1996,  2779,  3037,  3446,  2005, 17781,  2545,  3005,  3318,
         3120,  1998,  3815,  2024,  2119,  4895,  6299,  7810,  1012,   102])"
2322,1,"['set', 'functions', 'indicator']", Introduction to multiple regression,seg_85,"when income ver takes a value of not, then both indicator functions in the equation from example 9.2 are set to zero:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2043,  3318,  2310,  2099,  3138,  1037,  3643,  1997,  2025,
         1010,  2059,  2119, 17245,  4972,  1999,  1996,  8522,  2013,  2742,
         1023,  1012,  1016,  2024,  2275,  2000,  5717,  1024,   102])"
2323,1,"['rate', 'coefficient', 'level', 'levels', 'average', 'variable']", Introduction to multiple regression,seg_85,"the average interest rate for these borrowers is 11.1%. because the not level does not have its own coefficient and it is the reference value, the indicators for the other levels for this variable all drop out.",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996,  2779,  3037,  3446,  2005,  2122, 17781,  2545,  2003,
         2340,  1012,  1015,  1003,  1012,  2138,  1996,  2025,  2504,  2515,
         2025,  2031,  2049,  2219, 19064,  1998,  2009,  2003,  1996,  4431,
         3643,  1010,  1996, 20390,  2005,  1996,  2060,  3798,  2005,  2023,
         8023,  2035,  4530,  2041,  1012,   102])"
2324,1,"['model', 'rate', 'average']", Introduction to multiple regression,seg_85,"using the model from example 9.2, compute the average interest rate for borrowers whose income source is verified but the amount is not.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2478,  1996,  2944,  2013,  2742,  1023,  1012,  1016,  1010,
        24134,  1996,  2779,  3037,  3446,  2005, 17781,  2545,  3005,  3318,
         3120,  2003, 20119,  2021,  1996,  3815,  2003,  2025,  1012,   102])"
2325,1,['variable'], Introduction to multiple regression,seg_85,"when income ver takes a value of source only, then the corresponding variable takes a value of 1 while the other (income ververified) is 0:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2043,  3318,  2310,  2099,  3138,  1037,  3643,  1997,  3120,
         2069,  1010,  2059,  1996,  7978,  8023,  3138,  1037,  3643,  1997,
         1015,  2096,  1996,  2060,  1006,  3318, 29230, 22618,  1007,  2003,
         1014,  1024,   102])"
2326,1,"['rate', 'average']", Introduction to multiple regression,seg_85,the average interest rate for these borrowers is 12.52%.,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996,  2779,  3037,  3446,  2005,  2122, 17781,  2545,  2003,
         2260,  1012,  4720,  1003,  1012,   102])"
2327,1,"['rate', 'average']", Introduction to multiple regression,seg_85,compute the average interest rate for borrowers whose income source and amount are both verified.1,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 24134,  1996,  2779,  3037,  3446,  2005, 17781,  2545,  3005,
         3318,  3120,  1998,  3815,  2024,  2119, 20119,  1012,  1015,   102])"
2328,1,"['regression', 'coefficients', 'categorical variable', 'coefficient', 'level', 'reference level', 'regression model', 'levels', 'model', 'variable', 'categorical']", Introduction to multiple regression,seg_85,"when fitting a regression model with a categorical variable that has k levels where k > 2, software will provide a coefficient for k − 1 of those levels. for the last level that does not receive a coefficient, this is the reference level, and the coefficients listed for the other levels are all considered relative to this reference level.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2043, 11414,  1037, 26237,  2944,  2007,  1037,  4937, 27203,
         8023,  2008,  2038,  1047,  3798,  2073,  1047,  1028,  1016,  1010,
         4007,  2097,  3073,  1037, 19064,  2005,  1047,  1597,  1015,  1997,
         2216,  3798,  1012,  2005,  1996,  2197,  2504,  2008,  2515,  2025,
         4374,  1037, 19064,  1010,  2023,  2003,  1996,  4431,  2504,  1010,
         1998,  1996, 21374,  3205,  2005,  1996,  2060,  3798,  2024,  2035,
         2641,  5816,  2000,  2023,  4431,  2504,  1012,   102])"
2329,1,['coefficients'], Introduction to multiple regression,seg_85,interpret the coefficients in the income ver model.2,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 17841,  1996, 21374,  1999,  1996,  3318,  2310,  2099,  2944,
         1012,  1016,   102])"
2330,1,"['rate', 'risk', 'data', 'set', 'model', 'confounding variables', 'variables', 'data set', 'confounding']", Introduction to multiple regression,seg_85,"the higher interest rate for borrowers who have verified their income source or amount is surprising. intuitively, we’d think that a loan would look less risky if the borrower’s income has been verified. however, note that the situation may be more complex, and there may be confounding variables that we didn’t account for. for example, perhaps lender require borrowers with poor credit to verify their income. that is, verifying income in our data set might be a signal of some concerns about the borrower rather than a reassurance that the borrower will pay back the loan. for this reason, the borrower could be deemed higher risk, resulting in a higher interest rate. (what other confounding variables might explain this counter-intuitive relationship suggested by the model?)",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996,  3020,  3037,  3446,  2005, 17781,  2545,  2040,  2031,
        20119,  2037,  3318,  3120,  2030,  3815,  2003, 11341,  1012, 29202,
         2135,  1010,  2057,  1521,  1040,  2228,  2008,  1037,  5414,  2052,
         2298,  2625, 19188,  2065,  1996, 17781,  2121,  1521,  1055,  3318,
         2038,  2042, 20119,  1012,  2174,  1010,  3602,  2008,  1996,  3663,
         2089,  2022,  2062,  3375,  1010,  1998,  2045,  2089,  2022,  9530,
        14876,  8630,  2075, 10857,  2008,  2057,  2134,  1521,  1056,  4070,
         2005,  1012,  2005,  2742,  1010,  3383, 18496,  2121,  5478, 17781,
         2545,  2007,  3532,  4923,  2000, 20410,  2037,  3318,  1012,  2008,
         2003,  1010, 20410,  2075,  3318,  1999,  2256,  2951,  2275,  2453,
         2022,  1037,  4742,  1997,  2070,  5936,  2055,  1996, 17781,  2121,
         2738,  2084,  1037,  2128, 12054, 25863,  2008,  1996, 17781,  2121,
         2097,  3477,  2067,  1996,  5414,  1012,  2005,  2023,  3114,  1010,
         1996, 17781,  2121,  2071,  2022,  8357,  3020,  3891,  1010,  4525,
         1999,  1037,  3020,  3037,  3446,  1012,  1006,  2054,  2060,  9530,
        14876,  8630,  2075, 10857,  2453,  4863,  2023,  4675,  1011, 29202,
         3276,  4081,  2011,  1996,  2944,  1029,  1007,   102])"
2331,1,['rate'], Introduction to multiple regression,seg_85,how much larger of an interest rate would we expect for a borrower who has verified their income source and amount vs a borrower whose income source has only been verified?3,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2129,  2172,  3469,  1997,  2019,  3037,  3446,  2052,  2057,
         5987,  2005,  1037, 17781,  2121,  2040,  2038, 20119,  2037,  3318,
         3120,  1998,  3815,  5443,  1037, 17781,  2121,  3005,  3318,  3120,
         2038,  2069,  2042, 20119,  1029,  1017,   102])"
2332,1,"['model', 'variables']", Introduction to multiple regression,seg_85,9.1.2 including and assessing many variables in a model,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1023,  1012,  1015,  1012,  1016,  2164,  1998, 20077,  2116,
        10857,  1999,  1037,  2944,   102])"
2333,1,"['regression', 'rate', 'multiple regression', 'data', 'factors', 'statistical', 'observational data', 'variable']", Introduction to multiple regression,seg_85,"the world is complex, and it can be helpful to consider many factors at once in statistical modeling. for example, we might like to use the full context of borrower to predict the interest rate they receive rather than using a single variable. this is the strategy used in multiple regression. while we remain cautious about making any causal interpretations using multiple regression on observational data, such models are a common first step in gaining insights or providing some evidence of a causal connection.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996,  2088,  2003,  3375,  1010,  1998,  2009,  2064,  2022,
        14044,  2000,  5136,  2116,  5876,  2012,  2320,  1999,  7778, 11643,
         1012,  2005,  2742,  1010,  2057,  2453,  2066,  2000,  2224,  1996,
         2440,  6123,  1997, 17781,  2121,  2000, 16014,  1996,  3037,  3446,
         2027,  4374,  2738,  2084,  2478,  1037,  2309,  8023,  1012,  2023,
         2003,  1996,  5656,  2109,  1999,  3674, 26237,  1012,  2096,  2057,
         3961, 17145,  2055,  2437,  2151, 28102, 15931,  2478,  3674, 26237,
         2006,  8089,  2389,  2951,  1010,  2107,  4275,  2024,  1037,  2691,
         2034,  3357,  1999,  8550, 20062,  2030,  4346,  2070,  3350,  1997,
         1037, 28102,  4434,  1012,   102])"
2334,1,"['set', 'model', 'variables', 'data set', 'data']", Introduction to multiple regression,seg_85,"we want to construct a model that accounts for not only for any past bankruptcy or whether the borrower had their income source or amount verified, but simultaneously accounts for all the variables in the data set: income ver, debt to income, credit util, bankruptcy, term, issued, and credit checks.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2057,  2215,  2000,  9570,  1037,  2944,  2008,  6115,  2005,
         2025,  2069,  2005,  2151,  2627, 10528,  2030,  3251,  1996, 17781,
         2121,  2018,  2037,  3318,  3120,  2030,  3815, 20119,  1010,  2021,
         7453,  6115,  2005,  2035,  1996, 10857,  1999,  1996,  2951,  2275,
         1024,  3318,  2310,  2099,  1010,  7016,  2000,  3318,  1010,  4923,
        21183,  4014,  1010, 10528,  1010,  2744,  1010,  3843,  1010,  1998,
         4923, 14148,  1012,   102])"
2335,1,"['coefficients', 'categorical variables', 'variables', 'categorical']", Introduction to multiple regression,seg_85,"this equation represents a holistic approach for modeling all of the variables simultaneously. notice that there are two coefficients for income ver and also two coefficients for issued, since both are 3-level categorical variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2023,  8522,  5836,  1037,  7570, 27348,  3921,  2005, 11643,
         2035,  1997,  1996, 10857,  7453,  1012,  5060,  2008,  2045,  2024,
         2048, 21374,  2005,  3318,  2310,  2099,  1998,  2036,  2048, 21374,
         2005,  3843,  1010,  2144,  2119,  2024,  1017,  1011,  2504,  4937,
        27203, 10857,  1012,   102])"
2336,1,"['predictor', 'estimate', 'residuals', 'parameters', 'case']", Introduction to multiple regression,seg_85,"we estimate the parameters β0, β1, β2, ..., β9 in the same way as we did in the case of a single predictor. we select b0, b1, b2, ..., b9 that minimize the sum of the squared residuals:",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2057, 10197,  1996, 11709,  1156,  2692,  1010,  1156,  2487,
         1010,  1156,  2475,  1010,  1012,  1012,  1012,  1010,  1156,  2683,
         1999,  1996,  2168,  2126,  2004,  2057,  2106,  1999,  1996,  2553,
         1997,  1037,  2309, 16014,  2953,  1012,  2057,  7276,  1038,  2692,
         1010, 29491,  1010,  1038,  2475,  1010,  1012,  1012,  1012,  1010,
         1038,  2683,  2008, 18478,  1996,  7680,  1997,  1996, 19942, 21961,
         2015,  1024,   102])"
2337,1,"['observation', 'rates', 'estimated', 'residuals', 'estimates', 'sample', 'model', 'point estimates', 'sum of squares', 'case']", Introduction to multiple regression,seg_85,"where yi and ŷi represent the observed interest rates and their estimated values according to the model, respectively. 10,000 residuals are calculated, one for each observation. we typically use a computer to minimize the sum of squares and compute point estimates, as shown in the sample output in figure 9.5. using this output, we identify the point estimates bi of each βi, just as we did in the one-predictor case.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2073, 12316,  1998, 12316,  5050,  1996,  5159,  3037,  6165,
         1998,  2037,  4358,  5300,  2429,  2000,  1996,  2944,  1010,  4414,
         1012,  2184,  1010,  2199, 21961,  2015,  2024, 10174,  1010,  2028,
         2005,  2169,  8089,  1012,  2057,  4050,  2224,  1037,  3274,  2000,
        18478,  1996,  7680,  1997, 14320,  1998, 24134,  2391, 10035,  1010,
         2004,  3491,  1999,  1996,  7099,  6434,  1999,  3275,  1023,  1012,
         1019,  1012,  2478,  2023,  6434,  1010,  2057,  6709,  1996,  2391,
        10035, 12170,  1997,  2169,  1156,  2072,  1010,  2074,  2004,  2057,
         2106,  1999,  1996,  2028,  1011, 16014,  2953,  2553,  1012,   102])"
2338,1,['error'], Introduction to multiple regression,seg_85,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2339,1,['intercept'], Introduction to multiple regression,seg_85,(intercept) 1.9251 0.2102 9.16 <0.0001 income ver: source only 0.9750 0.0991 9.83 <0.0001 income ver: verified 2.5374 0.1172 21.65 <0.0001 debt to income 0.0211 0.0029 7.18 <0.0001 credit util 4.8959 0.1619 30.24 <0.0001 bankruptcy 0.3864 0.1324 2.92 0.0035 term 0.1537 0.0039 38.96 <0.0001 issued: jan2018 0.0276 0.1081 0.26 0.7981 issued: mar2018 -0.0397 0.1065 -0.37 0.7093 credit checks 0.2282 0.0182 12.51 <0.0001 df = 9990,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1006, 19115,  1007,  1015,  1012,  6227, 22203,  1014,  1012,
        12875,  2475,  1023,  1012,  2385,  1026,  1014,  1012,  2199,  2487,
         3318,  2310,  2099,  1024,  3120,  2069,  1014,  1012,  5989, 12376,
         1014,  1012,  5641,  2683,  2487,  1023,  1012,  6640,  1026,  1014,
         1012,  2199,  2487,  3318,  2310,  2099,  1024, 20119,  1016,  1012,
         5187,  2581,  2549,  1014,  1012, 12567,  2475,  2538,  1012,  3515,
         1026,  1014,  1012,  2199,  2487,  7016,  2000,  3318,  1014,  1012,
         6185, 14526,  1014,  1012,  4002, 24594,  1021,  1012,  2324,  1026,
         1014,  1012,  2199,  2487,  4923, 21183,  4014,  1018,  1012,  6486,
        28154,  1014,  1012, 17365,  2683,  2382,  1012,  2484,  1026,  1014,
         1012,  2199,  2487, 10528,  1014,  1012,  4229, 21084,  1014,  1012,
        14078,  2549,  1016,  1012,  6227,  1014,  1012,  4002, 19481,  2744,
         1014,  1012, 16710,  2581,  1014,  1012,  4002, 23499,  4229,  1012,
         5986,  1026,  1014,  1012,  2199,  2487,  3843,  1024,  5553, 11387,
        15136,  1014,  1012,  6185,  2581,  2575,  1014,  1012, 10715,  2487,
         1014,  1012,  2656,  1014,  1012,  6535,  2620,  2487,  3843,  1024,
         9388, 11387, 15136,  1011,  1014,  1012,  6021,  2683,  2581,  1014,
         1012, 10114,  2629,  1011,  1014,  1012,  4261,  1014,  1012,  3963,
         2683,  2509,  4923, 14148,  1014,  1012, 22238,  2475,  1014,  1012,
         5890,  2620,  2475,  2260,  1012,  4868,  1026,  1014,  1012,  2199,
         2487,  1040,  2546,  1027, 25897,  2692,   102])"
2340,1,"['regression', 'rate', 'outcome', 'regression model', 'model', 'variables']", Introduction to multiple regression,seg_85,"figure 9.5: output for the regression model, where interest rate is the outcome and the variables listed are the predictors.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  3275,  1023,  1012,  1019,  1024,  6434,  2005,  1996, 26237,
         2944,  1010,  2073,  3037,  3446,  2003,  1996,  9560,  1998,  1996,
        10857,  3205,  2024,  1996, 16014,  5668,  1012,   102])"
2341,1,"['regression', 'multiple regression', 'linear', 'linear model', 'regression model', 'model']", Introduction to multiple regression,seg_85,"a multiple regression model is a linear model with many predictors. in general, we write the model as",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1037,  3674, 26237,  2944,  2003,  1037,  7399,  2944,  2007,
         2116, 16014,  5668,  1012,  1999,  2236,  1010,  2057,  4339,  1996,
         2944,  2004,   102])"
2342,1,"['estimate', 'statistical', 'parameters']", Introduction to multiple regression,seg_85,when there are k predictors. we always estimate the βi parameters using statistical software.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0.,
        0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2043,  2045,  2024,  1047, 16014,  5668,  1012,  2057,  2467,
        10197,  1996,  1156,  2072, 11709,  2478,  7778,  4007,  1012,   102])"
2343,1,"['regression', 'estimates', 'regression model', 'model', 'point estimates']", Introduction to multiple regression,seg_85,write out the regression model using the point estimates from figure 9.5. how many predictors are there in this model?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  4339,  2041,  1996, 26237,  2944,  2478,  1996,  2391, 10035,
         2013,  3275,  1023,  1012,  1019,  1012,  2129,  2116, 16014,  5668,
         2024,  2045,  1999,  2023,  2944,  1029,   102])"
2344,1,"['model', 'rate']", Introduction to multiple regression,seg_85,the fitted model for the interest rate is given by:,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([ 101, 1996, 7130, 2944, 2005, 1996, 3037, 3446, 2003, 2445, 2011, 1024,
         102])"
2345,1,"['regression', 'multiple regression', 'predictor', 'coefficients', 'regression model', 'levels', 'model', 'categorical']", Introduction to multiple regression,seg_85,"if we count up the number of predictor coefficients, we get the effective number of predictors in the model: k = 9. notice that the issued categorical predictor counts as two, once for the two levels shown in the model. in general, a categorical predictor with p different levels will be represented by p− 1 terms in a multiple regression model.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2065,  2057,  4175,  2039,  1996,  2193,  1997, 16014,  2953,
        21374,  1010,  2057,  2131,  1996,  4621,  2193,  1997, 16014,  5668,
         1999,  1996,  2944,  1024,  1047,  1027,  1023,  1012,  5060,  2008,
         1996,  3843,  4937, 27203, 16014,  2953,  9294,  2004,  2048,  1010,
         2320,  2005,  1996,  2048,  3798,  3491,  1999,  1996,  2944,  1012,
         1999,  2236,  1010,  1037,  4937, 27203, 16014,  2953,  2007,  1052,
         2367,  3798,  2097,  2022,  3421,  2011,  1052, 22543,  1015,  3408,
         1999,  1037,  3674, 26237,  2944,  1012,   102])"
2346,1,"['estimate', 'coefficient', 'point estimate', 'variable']", Introduction to multiple regression,seg_85,"what does β4, the coefficient of variable credit util, represent? what is the point estimate of β4?4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2054,  2515,  1156,  2549,  1010,  1996, 19064,  1997,  8023,
         4923, 21183,  4014,  1010,  5050,  1029,  2054,  2003,  1996,  2391,
        10197,  1997,  1156,  2549,  1029,  1018,   102])"
2347,1,"['residual', 'observation']", Introduction to multiple regression,seg_85,compute the residual of the first observation in figure 9.1 on page 343 using the equation identified in guided practice 9.9.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 24134,  1996, 21961,  1997,  1996,  2034,  8089,  1999,  3275,
         1023,  1012,  1015,  2006,  3931, 27810,  2478,  1996,  8522,  4453,
         1999,  8546,  3218,  1023,  1012,  1023,  1012,   102])"
2348,1,"['residual', 'rate', 'prediction', 'predicted']", Introduction to multiple regression,seg_85,"to compute the residual, we first need the predicted value, which we compute by plugging values into the equation from example 9.9. for example, income versource only takes a value of 0, income ververified takes a value of 1 (since the borrower’s income source and amount were verified), debt to income was 18.01, and so on. this leads to a prediction of r̂ate1 = 18.09. the observed interest rate was 14.07%, which leads to a residual of e1 = 14.07− 18.09 = −4.02.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2000, 24134,  1996, 21961,  1010,  2057,  2034,  2342,  1996,
        10173,  3643,  1010,  2029,  2057, 24134,  2011, 13354,  4726,  5300,
         2046,  1996,  8522,  2013,  2742,  1023,  1012,  1023,  1012,  2005,
         2742,  1010,  3318,  2310, 25301,  3126,  3401,  2069,  3138,  1037,
         3643,  1997,  1014,  1010,  3318, 29230, 22618,  3138,  1037,  3643,
         1997,  1015,  1006,  2144,  1996, 17781,  2121,  1521,  1055,  3318,
         3120,  1998,  3815,  2020, 20119,  1007,  1010,  7016,  2000,  3318,
         2001,  2324,  1012,  5890,  1010,  1998,  2061,  2006,  1012,  2023,
         5260,  2000,  1037, 17547,  1997,  3446,  2487,  1027,  2324,  1012,
         5641,  1012,  1996,  5159,  3037,  3446,  2001,  2403,  1012,  5718,
         1003,  1010,  2029,  5260,  2000,  1037, 21961,  1997,  1041,  2487,
         1027,  2403,  1012,  5718, 22543,  2324,  1012,  5641,  1027,  1597,
         2549,  1012,  6185,  1012,   102])"
2349,1,"['regression', 'multiple regression', 'linear', 'estimated', 'estimate', 'coefficient', 'simple linear regression', 'linear regression', 'standard', 'standard error', 'error']", Introduction to multiple regression,seg_85,we estimated a coefficient for bankruptcy in section 9.1.1 of b4 = 0.74 with a standard error of seb1 = 0.15 when using simple linear regression. why is there a difference between that estimate and the estimated coefficient of 0.39 in the multiple regression setting?,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2057,  4358,  1037, 19064,  2005, 10528,  1999,  2930,  1023,
         1012,  1015,  1012,  1015,  1997,  1038,  2549,  1027,  1014,  1012,
         6356,  2007,  1037,  3115,  7561,  1997,  7367,  2497,  2487,  1027,
         1014,  1012,  2321,  2043,  2478,  3722,  7399, 26237,  1012,  2339,
         2003,  2045,  1037,  4489,  2090,  2008, 10197,  1998,  1996,  4358,
        19064,  1997,  1014,  1012,  4464,  1999,  1996,  3674, 26237,  4292,
         1029,   102])"
2350,1,"['regression', 'estimated', 'outcome', 'simple linear regression', 'linear regression', 'correlated', 'model', 'confounding variables', 'data', 'confounding', 'rate', 'linear', 'predictor', 'bias', 'control', 'variables']", Introduction to multiple regression,seg_85,"if we examined the data carefully, we would see that some predictors are correlated. for instance, when we estimated the connection of the outcome interest rate and predictor bankruptcy using simple linear regression, we were unable to control for other variables like whether the borrower had her income verified, the borrower’s debt-to-income ratio, and other variables. that original model was constructed in a vacuum and did not consider the full context. when we include all of the variables, underlying and unintentional bias that was missed by these other variables is reduced or eliminated. of course, bias can still exist from other confounding variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2065,  2057,  8920,  1996,  2951,  5362,  1010,  2057,  2052,
         2156,  2008,  2070, 16014,  5668,  2024, 23900,  1012,  2005,  6013,
         1010,  2043,  2057,  4358,  1996,  4434,  1997,  1996,  9560,  3037,
         3446,  1998, 16014,  2953, 10528,  2478,  3722,  7399, 26237,  1010,
         2057,  2020,  4039,  2000,  2491,  2005,  2060, 10857,  2066,  3251,
         1996, 17781,  2121,  2018,  2014,  3318, 20119,  1010,  1996, 17781,
         2121,  1521,  1055,  7016,  1011,  2000,  1011,  3318,  6463,  1010,
         1998,  2060, 10857,  1012,  2008,  2434,  2944,  2001,  3833,  1999,
         1037, 11641,  1998,  2106,  2025,  5136,  1996,  2440,  6123,  1012,
         2043,  2057,  2421,  2035,  1997,  1996, 10857,  1010, 10318,  1998,
         4895, 18447,  4765, 19301, 13827,  2008,  2001,  4771,  2011,  2122,
         2060, 10857,  2003,  4359,  2030,  5892,  1012,  1997,  2607,  1010,
        13827,  2064,  2145,  4839,  2013,  2060,  9530, 14876,  8630,  2075,
        10857,  1012,   102])"
2351,1,"['regression', 'estimation', 'correlation', 'experiments', 'correlated', 'multiple regression', 'model', 'data', 'collinear', 'predictor', 'predictor variables', 'collinearity', 'variables', 'observational data']", Introduction to multiple regression,seg_85,"example 9.12 describes a common issue in multiple regression: correlation among predictor variables. we say the two predictor variables are collinear (pronounced as co-linear) when they are correlated, and this collinearity complicates model estimation. while it is impossible to prevent collinearity from arising in observational data, experiments are usually designed to prevent predictors from being collinear.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2742,  1023,  1012,  2260,  5577,  1037,  2691,  3277,  1999,
         3674, 26237,  1024, 16902,  2426, 16014,  2953, 10857,  1012,  2057,
         2360,  1996,  2048, 16014,  2953, 10857,  2024, 22180, 14644,  1006,
         8793,  2004,  2522,  1011,  7399,  1007,  2043,  2027,  2024, 23900,
         1010,  1998,  2023, 22180, 14644,  3012,  4012, 24759, 24695,  2015,
         2944, 24155,  1012,  2096,  2009,  2003,  5263,  2000,  4652, 22180,
        14644,  3012,  2013, 17707,  1999,  8089,  2389,  2951,  1010,  7885,
         2024,  2788,  2881,  2000,  4652, 16014,  5668,  2013,  2108, 22180,
        14644,  1012,   102])"
2352,1,"['estimated', 'coefficient', 'intercept', 'predicted', 'variables']", Introduction to multiple regression,seg_85,"the estimated value of the intercept is 1.925, and one might be tempted to make some interpretation of this coefficient, such as, it is the model’s predicted price when each of the variables take value zero: income source is not verified, the borrower has no debt (debt-to-income and credit utilization are zero), and so on. is this reasonable? is there any value gained by making this interpretation?5",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996,  4358,  3643,  1997,  1996, 19115,  2003,  1015,  1012,
         6227,  2629,  1010,  1998,  2028,  2453,  2022, 16312,  2000,  2191,
         2070,  7613,  1997,  2023, 19064,  1010,  2107,  2004,  1010,  2009,
         2003,  1996,  2944,  1521,  1055, 10173,  3976,  2043,  2169,  1997,
         1996, 10857,  2202,  3643,  5717,  1024,  3318,  3120,  2003,  2025,
        20119,  1010,  1996, 17781,  2121,  2038,  2053,  7016,  1006,  7016,
         1011,  2000,  1011,  3318,  1998,  4923, 27891,  2024,  5717,  1007,
         1010,  1998,  2061,  2006,  1012,  2003,  2023,  9608,  1029,  2003,
         2045,  2151,  3643,  4227,  2011,  2437,  2023,  7613,  1029,  1019,
          102])"
2353,1,"['adjusted r2', 'regression', 'multiple regression', 'adjusted']", Introduction to multiple regression,seg_85,9.1.3 adjusted r2 as a better tool for multiple regression,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1023,  1012,  1015,  1012,  1017, 10426,  1054,  2475,  2004,
         1037,  2488,  6994,  2005,  3674, 26237,   102])"
2354,1,"['model', 'variability', 'response']", Introduction to multiple regression,seg_85,we first used r2 in section 8.2 to determine the amount of variability in the response that was explained by the model:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2057,  2034,  2109,  1054,  2475,  1999,  2930,  1022,  1012,
         1016,  2000,  5646,  1996,  3815,  1997, 28436,  1999,  1996,  3433,
         2008,  2001,  4541,  2011,  1996,  2944,  1024,   102])"
2355,1,"['variability', 'residuals', 'outcome']", Introduction to multiple regression,seg_85,variability in residuals v ar(ei) r2 = 1− = 1− variability in the outcome v ar(yi),tensor(1),"tensor([0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 28436,  1999, 21961,  2015,  1058, 12098,  1006,  1041,  2072,
         1007,  1054,  2475,  1027,  1015, 22543,  1027,  1015, 22543, 28436,
         1999,  1996,  9560,  1058, 12098,  1006, 12316,  1007,   102])"
2356,1,"['regression', 'multiple regression', 'outcomes', 'residuals', 'model']", Introduction to multiple regression,seg_85,"where ei represents the residuals of the model and yi the outcomes. this equation remains valid in the multiple regression framework, but a small enhancement can make it even more informative when comparing models.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2073,  1041,  2072,  5836,  1996, 21961,  2015,  1997,  1996,
         2944,  1998, 12316,  1996, 13105,  1012,  2023,  8522,  3464,  9398,
         1999,  1996,  3674, 26237,  7705,  1010,  2021,  1037,  2235, 22415,
         2064,  2191,  2009,  2130,  2062, 12367,  8082,  2043, 13599,  4275,
         1012,   102])"
2357,1,"['model', 'residuals', 'variance']", Introduction to multiple regression,seg_85,"the variance of the residuals for the model given in guided practice 9.9 is 18.53, and the variance of the total price in all the auctions is 25.01. calculate r2 for this model.6",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996, 23284,  1997,  1996, 21961,  2015,  2005,  1996,  2944,
         2445,  1999,  8546,  3218,  1023,  1012,  1023,  2003,  2324,  1012,
         5187,  1010,  1998,  1996, 23284,  1997,  1996,  2561,  3976,  1999,
         2035,  1996, 10470,  2015,  2003,  2423,  1012,  5890,  1012, 18422,
         1054,  2475,  2005,  2023,  2944,  1012,  1020,   102])"
2358,1,"['variability', 'estimate', 'biased', 'sample', 'adjusted r2', 'adjusted', 'model', 'variables', 'data', 'variable']", Introduction to multiple regression,seg_85,"this strategy for estimating r2 is acceptable when there is just a single variable. however, it becomes less helpful when there are many variables. the regular r2 is a biased estimate of the amount of variability explained by the model when applied to a new sample of data. to get a better estimate, we use the adjusted r2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2023,  5656,  2005,  9765, 22835,  1054,  2475,  2003, 11701,
         2043,  2045,  2003,  2074,  1037,  2309,  8023,  1012,  2174,  1010,
         2009,  4150,  2625, 14044,  2043,  2045,  2024,  2116, 10857,  1012,
         1996,  3180,  1054,  2475,  2003,  1037, 25352, 10197,  1997,  1996,
         3815,  1997, 28436,  4541,  2011,  1996,  2944,  2043,  4162,  2000,
         1037,  2047,  7099,  1997,  2951,  1012,  2000,  2131,  1037,  2488,
        10197,  1010,  2057,  2224,  1996, 10426,  1054,  2475,  1012,   102])"
2359,1,"['adjusted r2', 'adjusted']", Introduction to multiple regression,seg_85,the adjusted r2 is computed as,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  1996, 10426,  1054,  2475,  2003, 24806,  2004,   102])"
2360,1,"['cases', 'predictor', 'levels', 'predictor variables', 'model', 'variables', 'categorical']", Introduction to multiple regression,seg_85,where n is the number of cases used to fit the model and k is the number of predictor variables in the model. remember that a categorical predictor with p levels will contribute p− 1 to the number of variables in the model.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2073,  1050,  2003,  1996,  2193,  1997,  3572,  2109,  2000,
         4906,  1996,  2944,  1998,  1047,  2003,  1996,  2193,  1997, 16014,
         2953, 10857,  1999,  1996,  2944,  1012,  3342,  2008,  1037,  4937,
        27203, 16014,  2953,  2007,  1052,  3798,  2097,  9002,  1052, 22543,
         1015,  2000,  1996,  2193,  1997, 10857,  1999,  1996,  2944,  1012,
          102])"
2361,1,"['regression', 'multiple regression', 'associated', 'variance', 'data', 'predictions', 'degrees of freedom', 'adjusted r2', 'adjusted', 'model', 'bias']", Introduction to multiple regression,seg_85,"because k is never negative, the adjusted r2 will be smaller – often times just a little smaller – than the unadjusted r2. the reasoning behind the adjusted r2 lies in the degrees of freedom associated with each variance, which is equal to n− k − 1 for the multiple regression context. if we were to make predictions for new data using our current model, we would find that the unadjusted r2 would tend to be slightly overly optimistic, while the adjusted r2 formula helps correct this bias.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2138,  1047,  2003,  2196,  4997,  1010,  1996, 10426,  1054,
         2475,  2097,  2022,  3760,  1516,  2411,  2335,  2074,  1037,  2210,
         3760,  1516,  2084,  1996, 14477,  2094, 29427,  2098,  1054,  2475,
         1012,  1996, 13384,  2369,  1996, 10426,  1054,  2475,  3658,  1999,
         1996,  5445,  1997,  4071,  3378,  2007,  2169, 23284,  1010,  2029,
         2003,  5020,  2000,  1050, 22543,  1047,  1597,  1015,  2005,  1996,
         3674, 26237,  6123,  1012,  2065,  2057,  2020,  2000,  2191, 20932,
         2005,  2047,  2951,  2478,  2256,  2783,  2944,  1010,  2057,  2052,
         2424,  2008,  1996, 14477,  2094, 29427,  2098,  1054,  2475,  2052,
         7166,  2000,  2022,  3621, 15241, 21931,  1010,  2096,  1996, 10426,
         1054,  2475,  5675,  7126,  6149,  2023, 13827,  1012,   102])"
2362,1,"['predictor', 'set', 'variances', 'predictor variables', 'model', 'variables', 'data set', 'data']", Introduction to multiple regression,seg_85,"there were n = 10000 auctions in the loans data set and k = 9 predictor variables in the model. use n, k, and the variances from guided practice 9.14 to calculate ra",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  2045,  2020,  1050,  1027,  6694,  2692, 10470,  2015,  1999,
         1996, 10940,  2951,  2275,  1998,  1047,  1027,  1023, 16014,  2953,
        10857,  1999,  1996,  2944,  1012,  2224,  1050,  1010,  1047,  1010,
         1998,  1996, 23284,  2015,  2013,  8546,  3218,  1023,  1012,  2403,
         2000, 18422, 10958,   102])"
2363,1,['rate'], Introduction to multiple regression,seg_85,2dj for the interest rate model.7,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 14134,  3501,  2005,  1996,  3037,  3446,  2944,  1012,  1021,
          102])"
2364,1,"['predictor', 'variance', 'adjusted r2', 'errors', 'adjusted', 'model']", Introduction to multiple regression,seg_85,"suppose you added another predictor to the model, but the variance of the errors v ar(ei) didn’t go down. what would happen to the r2? what would happen to the adjusted r2? 8",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101,  6814,  2017,  2794,  2178, 16014,  2953,  2000,  1996,  2944,
         1010,  2021,  1996, 23284,  1997,  1996, 10697,  1058, 12098,  1006,
         1041,  2072,  1007,  2134,  1521,  1056,  2175,  2091,  1012,  2054,
         2052,  4148,  2000,  1996,  1054,  2475,  1029,  2054,  2052,  4148,
         2000,  1996, 10426,  1054,  2475,  1029,  1022,   102])"
2365,1,"['model', 'adjusted r2', 'predictor', 'adjusted']", Introduction to multiple regression,seg_85,"adjusted r2 could have been used in chapter 8. however, when there is only k = 1 predictors, adjusted r2 is very close to regular r2, so this nuance isn’t typically important when the model has only one predictor.",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 10426,  1054,  2475,  2071,  2031,  2042,  2109,  1999,  3127,
         1022,  1012,  2174,  1010,  2043,  2045,  2003,  2069,  1047,  1027,
         1015, 16014,  5668,  1010, 10426,  1054,  2475,  2003,  2200,  2485,
         2000,  3180,  1054,  2475,  1010,  2061,  2023, 16371,  6651,  3475,
         1521,  1056,  4050,  2590,  2043,  1996,  2944,  2038,  2069,  2028,
        16014,  2953,  1012,   102])"
2366,1,"['intercept', 'error']", Introduction to multiple regression,seg_85,estimate std. error t value pr(>|t|) (intercept) -57.99 8.64 -6.71 0.00 height 0.34 0.13 2.61 0.01 diameter 4.71 0.26 17.82 0.00,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  3674, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,  1006, 19115,  1007,  1011,  5401,
         1012,  5585,  1022,  1012,  4185,  1011,  1020,  1012,  6390,  1014,
         1012,  4002,  4578,  1014,  1012,  4090,  1014,  1012,  2410,  1016,
         1012,  6079,  1014,  1012,  5890,  6705,  1018,  1012,  6390,  1014,
         1012,  2656,  2459,  1012,  6445,  1014,  1012,  4002,   102])"
2367,1,"['predictions', 'statistical', 'model', 'variables', 'model selection', 'variable']", Model selection,seg_87,"the best model is not always the most complicated. sometimes including variables that are not evidently important can actually reduce the accuracy of predictions. in this section, we discuss model selection strategies, which will help us eliminate variables from the model that are found to be less important. it’s common (and hip, at least in the statistical world) to refer to models that have undergone such variable pruning as parsimonious.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1996,  2190,  2944,  2003,  2025,  2467,  1996,  2087,  8552,
         1012,  2823,  2164, 10857,  2008,  2024,  2025, 15329,  2590,  2064,
         2941,  5547,  1996, 10640,  1997, 20932,  1012,  1999,  2023,  2930,
         1010,  2057,  6848,  2944,  4989,  9942,  1010,  2029,  2097,  2393,
         2149, 11027, 10857,  2013,  1996,  2944,  2008,  2024,  2179,  2000,
         2022,  2625,  2590,  1012,  2009,  1521,  1055,  2691,  1006,  1998,
         5099,  1010,  2012,  2560,  1999,  1996,  7778,  2088,  1007,  2000,
         6523,  2000,  4275,  2008,  2031, 17215,  2107,  8023, 10975, 19496,
         3070,  2004, 11968,  5332,  8202,  6313,  1012,   102])"
2368,1,"['full model', 'model', 'variables', 'explanatory']", Model selection,seg_87,"in practice, the model that includes all available explanatory variables is often referred to as the full model. the full model may not be the best model, and if it isn’t, we want to identify a smaller model that is preferable.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1999,  3218,  1010,  1996,  2944,  2008,  2950,  2035,  2800,
         4654, 24759,  5162,  7062, 10857,  2003,  2411,  3615,  2000,  2004,
         1996,  2440,  2944,  1012,  1996,  2440,  2944,  2089,  2025,  2022,
         1996,  2190,  2944,  1010,  1998,  2065,  2009,  3475,  1521,  1056,
         1010,  2057,  2215,  2000,  6709,  1037,  3760,  2944,  2008,  2003,
         9544,  3085,  1012,   102])"
2369,1,"['model', 'variables']", Model selection,seg_87,9.2.1 identifying variables in the model that may not be helpful,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1023,  1012,  1016,  1012,  1015, 12151, 10857,  1999,  1996,
         2944,  2008,  2089,  2025,  2022, 14044,   102])"
2370,1,"['evaluating', 'outcomes', 'model']", Model selection,seg_87,"adjusted r2 describes the strength of a model fit, and it is a useful tool for evaluating which predictors are adding value to the model, where adding value means they are (likely) improving the accuracy in predicting future outcomes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101, 10426,  1054,  2475,  5577,  1996,  3997,  1997,  1037,  2944,
         4906,  1010,  1998,  2009,  2003,  1037,  6179,  6994,  2005, 23208,
         2029, 16014,  5668,  2024,  5815,  3643,  2000,  1996,  2944,  1010,
         2073,  5815,  3643,  2965,  2027,  2024,  1006,  3497,  1007,  9229,
         1996, 10640,  1999, 29458,  2925, 13105,  1012,   102])"
2371,1,"['table', 'tables', 'full model', 'model', 'variable']", Model selection,seg_87,"let’s consider two models, which are shown in tables 9.6 and 9.7. the first table summarizes the full model since it includes all predictors, while the second does not include the issued variable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2292,  1521,  1055,  5136,  2048,  4275,  1010,  2029,  2024,
         3491,  1999,  7251,  1023,  1012,  1020,  1998,  1023,  1012,  1021,
         1012,  1996,  2034,  2795,  7680,  7849, 10057,  1996,  2440,  2944,
         2144,  2009,  2950,  2035, 16014,  5668,  1010,  2096,  1996,  2117,
         2515,  2025,  2421,  1996,  3843,  8023,  1012,   102])"
2372,1,['error'], Model selection,seg_87,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2373,1,['intercept'], Model selection,seg_87,(intercept) 1.9251 0.2102 9.16 <0.0001 income ver: source only 0.9750 0.0991 9.83 <0.0001 income ver: verified 2.5374 0.1172 21.65 <0.0001 debt to income 0.0211 0.0029 7.18 <0.0001 credit util 4.8959 0.1619 30.24 <0.0001 bankruptcy 0.3864 0.1324 2.92 0.0035 term 0.1537 0.0039 38.96 <0.0001 issued: jan2018 0.0276 0.1081 0.26 0.7981 issued: mar2018 -0.0397 0.1065 -0.37 0.7093 credit checks 0.2282 0.0182 12.51 <0.0001 ra,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1006, 19115,  1007,  1015,  1012,  6227, 22203,  1014,  1012,
        12875,  2475,  1023,  1012,  2385,  1026,  1014,  1012,  2199,  2487,
         3318,  2310,  2099,  1024,  3120,  2069,  1014,  1012,  5989, 12376,
         1014,  1012,  5641,  2683,  2487,  1023,  1012,  6640,  1026,  1014,
         1012,  2199,  2487,  3318,  2310,  2099,  1024, 20119,  1016,  1012,
         5187,  2581,  2549,  1014,  1012, 12567,  2475,  2538,  1012,  3515,
         1026,  1014,  1012,  2199,  2487,  7016,  2000,  3318,  1014,  1012,
         6185, 14526,  1014,  1012,  4002, 24594,  1021,  1012,  2324,  1026,
         1014,  1012,  2199,  2487,  4923, 21183,  4014,  1018,  1012,  6486,
        28154,  1014,  1012, 17365,  2683,  2382,  1012,  2484,  1026,  1014,
         1012,  2199,  2487, 10528,  1014,  1012,  4229, 21084,  1014,  1012,
        14078,  2549,  1016,  1012,  6227,  1014,  1012,  4002, 19481,  2744,
         1014,  1012, 16710,  2581,  1014,  1012,  4002, 23499,  4229,  1012,
         5986,  1026,  1014,  1012,  2199,  2487,  3843,  1024,  5553, 11387,
        15136,  1014,  1012,  6185,  2581,  2575,  1014,  1012, 10715,  2487,
         1014,  1012,  2656,  1014,  1012,  6535,  2620,  2487,  3843,  1024,
         9388, 11387, 15136,  1011,  1014,  1012,  6021,  2683,  2581,  1014,
         1012, 10114,  2629,  1011,  1014,  1012,  4261,  1014,  1012,  3963,
         2683,  2509,  4923, 14148,  1014,  1012, 22238,  2475,  1014,  1012,
         5890,  2620,  2475,  2260,  1012,  4868,  1026,  1014,  1012,  2199,
         2487, 10958,   102])"
2374,1,"['regression', 'regression model', 'adjusted r2', 'adjusted', 'model', 'full regression model']", Model selection,seg_87,"figure 9.6: the fit for the full regression model, including the adjusted r2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1.,
        1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  3275,  1023,  1012,  1020,  1024,  1996,  4906,  2005,  1996,
         2440, 26237,  2944,  1010,  2164,  1996, 10426,  1054,  2475,  1012,
          102])"
2375,1,['error'], Model selection,seg_87,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2376,1,['intercept'], Model selection,seg_87,(intercept) 1.9213 0.1982 9.69 <0.0001 income ver: source only 0.9740 0.0991 9.83 <0.0001 income ver: verified 2.5355 0.1172 21.64 <0.0001 debt to income 0.0211 0.0029 7.19 <0.0001 credit util 4.8958 0.1619 30.25 <0.0001 bankruptcy 0.3869 0.1324 2.92 0.0035 term 0.1537 0.0039 38.97 <0.0001 credit checks 0.2283 0.0182 12.51 <0.0001,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1006, 19115,  1007,  1015,  1012,  6227, 17134,  1014,  1012,
         3196,  1023,  1012,  6353,  1026,  1014,  1012,  2199,  2487,  3318,
         2310,  2099,  1024,  3120,  2069,  1014,  1012,  5989, 12740,  1014,
         1012,  5641,  2683,  2487,  1023,  1012,  6640,  1026,  1014,  1012,
         2199,  2487,  3318,  2310,  2099,  1024, 20119,  1016,  1012,  5187,
        24087,  1014,  1012, 12567,  2475,  2538,  1012,  4185,  1026,  1014,
         1012,  2199,  2487,  7016,  2000,  3318,  1014,  1012,  6185, 14526,
         1014,  1012,  4002, 24594,  1021,  1012,  2539,  1026,  1014,  1012,
         2199,  2487,  4923, 21183,  4014,  1018,  1012,  6486, 27814,  1014,
         1012, 17365,  2683,  2382,  1012,  2423,  1026,  1014,  1012,  2199,
         2487, 10528,  1014,  1012,  4229,  2575,  2683,  1014,  1012, 14078,
         2549,  1016,  1012,  6227,  1014,  1012,  4002, 19481,  2744,  1014,
         1012, 16710,  2581,  1014,  1012,  4002, 23499,  4229,  1012,  5989,
         1026,  1014,  1012,  2199,  2487,  4923, 14148,  1014,  1012, 22238,
         2509,  1014,  1012,  5890,  2620,  2475,  2260,  1012,  4868,  1026,
         1014,  1012,  2199,  2487,   102])"
2377,1,"['regression', 'regression model', 'model', 'variable']", Model selection,seg_87,figure 9.7: the fit for the regression model after dropping the issued variable.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([2944, 4989])","tensor([  101,  3275,  1023,  1012,  1021,  1024,  1996,  4906,  2005,  1996,
        26237,  2944,  2044,  7510,  1996,  3843,  8023,  1012,   102])"
2378,0,[], Model selection,seg_87,which of the two models is better?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([ 101, 2029, 1997, 1996, 2048, 4275, 2003, 2488, 1029,  102])"
2379,1,"['model', 'adjusted r2', 'adjusted']", Model selection,seg_87,we compare the adjusted r2 of each model to determine which to choose. since the first model has an ra,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2057, 12826,  1996, 10426,  1054,  2475,  1997,  2169,  2944,
         2000,  5646,  2029,  2000,  5454,  1012,  2144,  1996,  2034,  2944,
         2038,  2019, 10958,   102])"
2380,1,['model'], Model selection,seg_87,"2dj smaller than the ra 2dj of the second model, we prefer the second model to the first.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101, 14134,  3501,  3760,  2084,  1996, 10958, 14134,  3501,  1997,
         1996,  2117,  2944,  1010,  2057,  9544,  1996,  2117,  2944,  2000,
         1996,  2034,  1012,   102])"
2381,1,"['model', 'adjusted r2', 'adjusted']", Model selection,seg_87,"will the model without issued be better than the model with issued? we cannot know for sure, but based on the adjusted r2, this is our best assessment.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2097,  1996,  2944,  2302,  3843,  2022,  2488,  2084,  1996,
         2944,  2007,  3843,  1029,  2057,  3685,  2113,  2005,  2469,  1010,
         2021,  2241,  2006,  1996, 10426,  1054,  2475,  1010,  2023,  2003,
         2256,  2190,  7667,  1012,   102])"
2382,1,"['model', 'model selection']", Model selection,seg_87,9.2.2 two model selection strategies,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([2944, 4989])","tensor([ 101, 1023, 1012, 1016, 1012, 1016, 2048, 2944, 4989, 9942,  102])"
2383,1,"['regression', 'multiple regression', 'backward elimination', 'regression model', 'model', 'variables', 'model selection', 'variable', 'forward selection']", Model selection,seg_87,"two common strategies for adding or removing variables in a multiple regression model are called backward elimination and forward selection. these techniques are often referred to as stepwise model selection strategies, because they add or delete one variable at a time as they “step” through the candidate predictors.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2048,  2691,  9942,  2005,  5815,  2030,  9268, 10857,  1999,
         1037,  3674, 26237,  2944,  2024,  2170,  8848,  9614,  1998,  2830,
         4989,  1012,  2122,  5461,  2024,  2411,  3615,  2000,  2004,  3357,
        14244,  2944,  4989,  9942,  1010,  2138,  2027,  5587,  2030,  3972,
        12870,  2028,  8023,  2012,  1037,  2051,  2004,  2027,  1523,  3357,
         1524,  2083,  1996,  4018, 16014,  5668,  1012,   102])"
2384,1,"['predictor', 'predictor variables', 'adjusted r2', 'adjusted', 'model', 'variables', 'variable']", Model selection,seg_87,backward elimination starts with the model that includes all potential predictor variables. variables are eliminated one-at-a-time from the model until we cannot improve the adjusted r2. the strategy within each elimination step is to eliminate the variable that leads to the largest improvement in adjusted r2.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  8848,  9614,  4627,  2007,  1996,  2944,  2008,  2950,  2035,
         4022, 16014,  2953, 10857,  1012, 10857,  2024,  5892,  2028,  1011,
         2012,  1011,  1037,  1011,  2051,  2013,  1996,  2944,  2127,  2057,
         3685,  5335,  1996, 10426,  1054,  2475,  1012,  1996,  5656,  2306,
         2169,  9614,  3357,  2003,  2000, 11027,  1996,  8023,  2008,  5260,
         2000,  1996,  2922,  7620,  1999, 10426,  1054,  2475,  1012,   102])"
2385,1,"['model', 'backward elimination', 'data', 'full model']", Model selection,seg_87,results corresponding to the full model for the loans data are shown in figure 9.6. how should we proceed under the backward elimination strategy?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  3463,  7978,  2000,  1996,  2440,  2944,  2005,  1996, 10940,
         2951,  2024,  3491,  1999,  3275,  1023,  1012,  1020,  1012,  2129,
         2323,  2057, 10838,  2104,  1996,  8848,  9614,  5656,  1029,   102])"
2386,1,"['model', 'adjusted r2', 'adjusted', 'full model']", Model selection,seg_87,our baseline adjusted r2 from the full model is ra,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2256, 26163, 10426,  1054,  2475,  2013,  1996,  2440,  2944,
         2003, 10958,   102])"
2387,0,[], Model selection,seg_87,"2dj = 0.25843, and we need to determine whether",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101, 14134,  3501,  1027,  1014,  1012, 24398, 23777,  1010,  1998,
         2057,  2342,  2000,  5646,  3251,   102])"
2388,1,"['adjusted r2', 'predictor', 'adjusted']", Model selection,seg_87,"dropping a predictor will improve the adjusted r2. to check, we fit models that each drop a different predictor, and we record the adjusted r2:",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  7510,  1037, 16014,  2953,  2097,  5335,  1996, 10426,  1054,
         2475,  1012,  2000,  4638,  1010,  2057,  4906,  4275,  2008,  2169,
         4530,  1037,  2367, 16014,  2953,  1010,  1998,  2057,  2501,  1996,
        10426,  1054,  2475,  1024,   102])"
2389,0,[], Model selection,seg_87,exclude ... income ver debt to income credit util bankruptcy ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101, 23329,  1012,  1012,  1012,  3318,  2310,  2099,  7016,  2000,
         3318,  4923, 21183,  4014, 10528, 10958,   102])"
2390,0,[], Model selection,seg_87,term issued credit checks ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101,  2744,  3843,  4923, 14148, 10958,   102])"
2391,1,"['model', 'adjusted r2', 'adjusted', 'full model']", Model selection,seg_87,"the model without issued has the highest adjusted r2 of 0.25854, higher than the adjusted r2 for the full model. because eliminating issued leads to a model with a higher adjusted r2, we drop issued from the model.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1996,  2944,  2302,  3843,  2038,  1996,  3284, 10426,  1054,
         2475,  1997,  1014,  1012, 24398, 27009,  1010,  3020,  2084,  1996,
        10426,  1054,  2475,  2005,  1996,  2440,  2944,  1012,  2138, 15349,
         3843,  5260,  2000,  1037,  2944,  2007,  1037,  3020, 10426,  1054,
         2475,  1010,  2057,  4530,  3843,  2013,  1996,  2944,  1012,   102])"
2392,1,"['model', 'adjusted r2', 'predictor', 'adjusted']", Model selection,seg_87,"since we eliminated a predictor from the model in the first step, we see whether we should eliminate any additional predictors. our baseline adjusted r2 is now ra",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2144,  2057,  5892,  1037, 16014,  2953,  2013,  1996,  2944,
         1999,  1996,  2034,  3357,  1010,  2057,  2156,  3251,  2057,  2323,
        11027,  2151,  3176, 16014,  5668,  1012,  2256, 26163, 10426,  1054,
         2475,  2003,  2085, 10958,   102])"
2393,0,[], Model selection,seg_87,"2dj = 0.25854. we now fit new models, which consider eliminating each of the remaining predictors in addition to issued:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101, 14134,  3501,  1027,  1014,  1012, 24398, 27009,  1012,  2057,
         2085,  4906,  2047,  4275,  1010,  2029,  5136, 15349,  2169,  1997,
         1996,  3588, 16014,  5668,  1999,  2804,  2000,  3843,  1024,   102])"
2394,0,[], Model selection,seg_87,exclude issued and ... income ver debt to income credit util ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101, 23329,  3843,  1998,  1012,  1012,  1012,  3318,  2310,  2099,
         7016,  2000,  3318,  4923, 21183,  4014, 10958,   102])"
2395,0,[], Model selection,seg_87,bankruptcy term credit checks ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101, 10528,  2744,  4923, 14148, 10958,   102])"
2396,1,"['backward elimination', 'coefficients', 'adjusted r2', 'adjusted', 'model']", Model selection,seg_87,"none of these models lead to an improvement in adjusted r2, so we do not eliminate any of the remaining predictors. that is, after backward elimination, we are left with the model that keeps all predictors except issued, which we can summarize using the coefficients from figure 9.7:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  3904,  1997,  2122,  4275,  2599,  2000,  2019,  7620,  1999,
        10426,  1054,  2475,  1010,  2061,  2057,  2079,  2025, 11027,  2151,
         1997,  1996,  3588, 16014,  5668,  1012,  2008,  2003,  1010,  2044,
         8848,  9614,  1010,  2057,  2024,  2187,  2007,  1996,  2944,  2008,
         7906,  2035, 16014,  5668,  3272,  3843,  1010,  2029,  2057,  2064,
         7680,  7849,  4697,  2478,  1996, 21374,  2013,  3275,  1023,  1012,
         1021,  1024,   102])"
2397,1,"['backward elimination', 'adjusted r2', 'adjusted', 'model', 'variables', 'forward selection']", Model selection,seg_87,"the forward selection strategy is the reverse of the backward elimination technique. instead of eliminating variables one-at-a-time, we add variables one-at-a-time until we cannot find any variables that improve the model (as measured by adjusted r2).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0.])","tensor([2944, 4989])","tensor([  101,  1996,  2830,  4989,  5656,  2003,  1996,  7901,  1997,  1996,
         8848,  9614,  6028,  1012,  2612,  1997, 15349, 10857,  2028,  1011,
         2012,  1011,  1037,  1011,  2051,  1010,  2057,  5587, 10857,  2028,
         1011,  2012,  1011,  1037,  1011,  2051,  2127,  2057,  3685,  2424,
         2151, 10857,  2008,  5335,  1996,  2944,  1006,  2004,  7594,  2011,
        10426,  1054,  2475,  1007,  1012,   102])"
2398,1,"['set', 'model', 'data set', 'data', 'forward selection']", Model selection,seg_87,construct a model for the loans data set using the forward selection strategy.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  9570,  1037,  2944,  2005,  1996, 10940,  2951,  2275,  2478,
         1996,  2830,  4989,  5656,  1012,   102])"
2399,1,"['adjusted r2', 'adjusted', 'model', 'variables', 'variable']", Model selection,seg_87,"we start with the model that includes no variables. then we fit each of the possible models with just one variable. that is, we fit the model including just income ver, then the model including just debt to income, then a model with just credit util, and so on. then we examine the adjusted r2 for each of these models:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2944, 4989])","tensor([  101,  2057,  2707,  2007,  1996,  2944,  2008,  2950,  2053, 10857,
         1012,  2059,  2057,  4906,  2169,  1997,  1996,  2825,  4275,  2007,
         2074,  2028,  8023,  1012,  2008,  2003,  1010,  2057,  4906,  1996,
         2944,  2164,  2074,  3318,  2310,  2099,  1010,  2059,  1996,  2944,
         2164,  2074,  7016,  2000,  3318,  1010,  2059,  1037,  2944,  2007,
         2074,  4923, 21183,  4014,  1010,  1998,  2061,  2006,  1012,  2059,
         2057, 11628,  1996, 10426,  1054,  2475,  2005,  2169,  1997,  2122,
         4275,  1024,   102])"
2400,0,[], Model selection,seg_87,add ... income ver debt to income credit util bankruptcy ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101,  5587,  1012,  1012,  1012,  3318,  2310,  2099,  7016,  2000,
         3318,  4923, 21183,  4014, 10528, 10958,   102])"
2401,0,[], Model selection,seg_87,term issued credit checks ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101,  2744,  3843,  4923, 14148, 10958,   102])"
2402,1,"['model', 'adjusted r2', 'adjusted']", Model selection,seg_87,"in this first step, we compare the adjusted r2 against a baseline model that has no predictors. the no-predictors model always has ra",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1999,  2023,  2034,  3357,  1010,  2057, 12826,  1996, 10426,
         1054,  2475,  2114,  1037, 26163,  2944,  2008,  2038,  2053, 16014,
         5668,  1012,  1996,  2053,  1011, 16014,  5668,  2944,  2467,  2038,
        10958,   102])"
2403,1,"['model', 'predictor']", Model selection,seg_87,2dj = 0. the model with one predictor that has the largest,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101, 14134,  3501,  1027,  1014,  1012,  1996,  2944,  2007,  2028,
        16014,  2953,  2008,  2038,  1996,  2922,   102])"
2404,1,"['model', 'adjusted r2', 'predictor', 'adjusted']", Model selection,seg_87,"adjusted r2 is the model with the term predictor, and because this adjusted r2 is larger than the adjusted r2 from the model with no predictors (ra",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101, 10426,  1054,  2475,  2003,  1996,  2944,  2007,  1996,  2744,
        16014,  2953,  1010,  1998,  2138,  2023, 10426,  1054,  2475,  2003,
         3469,  2084,  1996, 10426,  1054,  2475,  2013,  1996,  2944,  2007,
         2053, 16014,  5668,  1006, 10958,   102])"
2405,1,"['model', 'variable']", Model selection,seg_87,"2dj = 0), we will add this variable to our model.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101, 14134,  3501,  1027,  1014,  1007,  1010,  2057,  2097,  5587,
         2023,  8023,  2000,  2256,  2944,  1012,   102])"
2406,1,['process'], Model selection,seg_87,"we repeat the process again, this time considering 2-predictor models where one of the predictors is term and with a new baseline of ra",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2057,  9377,  1996,  2832,  2153,  1010,  2023,  2051,  6195,
         1016,  1011, 16014,  2953,  4275,  2073,  2028,  1997,  1996, 16014,
         5668,  2003,  2744,  1998,  2007,  1037,  2047, 26163,  1997, 10958,
          102])"
2407,0,[], Model selection,seg_87,add term and ... income ver debt to income credit util ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101,  5587,  2744,  1998,  1012,  1012,  1012,  3318,  2310,  2099,
         7016,  2000,  3318,  4923, 21183,  4014, 10958,   102])"
2408,0,[], Model selection,seg_87,bankruptcy issued credit checks ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101, 10528,  3843,  4923, 14148, 10958,   102])"
2409,1,"['model', 'adjusted r2', 'predictor', 'adjusted']", Model selection,seg_87,"the best second predictor, credit util, has a higher adjusted r2 (0.20046) than the baseline (0.12855), so we also add credit util to the model.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1996,  2190,  2117, 16014,  2953,  1010,  4923, 21183,  4014,
         1010,  2038,  1037,  3020, 10426,  1054,  2475,  1006,  1014,  1012,
         2432,  2575,  1007,  2084,  1996, 26163,  1006,  1014,  1012, 11899,
        24087,  1007,  1010,  2061,  2057,  2036,  5587,  4923, 21183,  4014,
         2000,  1996,  2944,  1012,   102])"
2410,1,"['model', 'variable']", Model selection,seg_87,"since we have again added a variable to the model, we continue and see whether it would be beneficial to add a third variable:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2144,  2057,  2031,  2153,  2794,  1037,  8023,  2000,  1996,
         2944,  1010,  2057,  3613,  1998,  2156,  3251,  2009,  2052,  2022,
        15189,  2000,  5587,  1037,  2353,  8023,  1024,   102])"
2411,0,[], Model selection,seg_87,"add term, credit util, and ... income ver debt to income ra",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101,  5587,  2744,  1010,  4923, 21183,  4014,  1010,  1998,  1012,
         1012,  1012,  3318,  2310,  2099,  7016,  2000,  3318, 10958,   102])"
2412,0,[], Model selection,seg_87,bankruptcy issued credit checks ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101, 10528,  3843,  4923, 14148, 10958,   102])"
2413,1,"['model', 'adjusted r2', 'adjusted']", Model selection,seg_87,"the model adding income ver improved adjusted r2 (0.24183 to 0.20046), so we add income ver to the model.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1996,  2944,  5815,  3318,  2310,  2099,  5301, 10426,  1054,
         2475,  1006,  1014,  1012, 22343,  2620,  2509,  2000,  1014,  1012,
         2432,  2575,  1007,  1010,  2061,  2057,  5587,  3318,  2310,  2099,
         2000,  1996,  2944,  1012,   102])"
2414,1,['variable'], Model selection,seg_87,"we continue on in this way, next adding debt to income, then credit checks, and bankruptcy. at this point, we come again to the issued variable: adding this variable leads to ra",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2057,  3613,  2006,  1999,  2023,  2126,  1010,  2279,  5815,
         7016,  2000,  3318,  1010,  2059,  4923, 14148,  1010,  1998, 10528,
         1012,  2012,  2023,  2391,  1010,  2057,  2272,  2153,  2000,  1996,
         3843,  8023,  1024,  5815,  2023,  8023,  5260,  2000, 10958,   102])"
2415,1,['variables'], Model selection,seg_87,while keeping all the other variables but excluding issued leads to a higher ra,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2096,  4363,  2035,  1996,  2060, 10857,  2021, 13343,  3843,
         5260,  2000,  1037,  3020, 10958,   102])"
2416,1,"['model', 'backward elimination']", Model selection,seg_87,"means we do not add issued. in this example, we have arrived at the same model that we identified from backward elimination.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([2944, 4989])","tensor([ 101, 2965, 2057, 2079, 2025, 5587, 3843, 1012, 1999, 2023, 2742, 1010,
        2057, 2031, 3369, 2012, 1996, 2168, 2944, 2008, 2057, 4453, 2013, 8848,
        9614, 1012,  102])"
2417,1,"['model', 'variables', 'forward selection']", Model selection,seg_87,"backward elimination begins with the model having the largest number of predictors and eliminates variables one-by-one until we are satisfied that all remaining variables are important to the model. forward selection starts with no variables included in the model, then it adds in variables according to their importance until no other important variables are found.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  8848,  9614,  4269,  2007,  1996,  2944,  2383,  1996,  2922,
         2193,  1997, 16014,  5668,  1998, 11027,  2015, 10857,  2028,  1011,
         2011,  1011,  2028,  2127,  2057,  2024,  8510,  2008,  2035,  3588,
        10857,  2024,  2590,  2000,  1996,  2944,  1012,  2830,  4989,  4627,
         2007,  2053, 10857,  2443,  1999,  1996,  2944,  1010,  2059,  2009,
         9909,  1999, 10857,  2429,  2000,  2037,  5197,  2127,  2053,  2060,
         2590, 10857,  2024,  2179,  1012,   102])"
2418,1,"['model', 'forward selection']", Model selection,seg_87,"backward elimination and forward selection sometimes arrive at different final models. if trying both techniques and this happens, it’s common to choose the model with the larger ra",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  8848,  9614,  1998,  2830,  4989,  2823,  7180,  2012,  2367,
         2345,  4275,  1012,  2065,  2667,  2119,  5461,  1998,  2023,  6433,
         1010,  2009,  1521,  1055,  2691,  2000,  5454,  1996,  2944,  2007,
         1996,  3469, 10958,   102])"
2419,1,"['adjusted r2', 'adjusted']", Model selection,seg_87,"9.2.3 the p-value approach, an alternative to adjusted r2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0.])","tensor([2944, 4989])","tensor([  101,  1023,  1012,  1016,  1012,  1017,  1996,  1052,  1011,  3643,
         3921,  1010,  2019,  4522,  2000, 10426,  1054,  2475,   102])"
2420,0,[], Model selection,seg_87,the p-value may be used as an alternative to ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2944, 4989])","tensor([  101,  1996,  1052,  1011,  3643,  2089,  2022,  2109,  2004,  2019,
         4522,  2000, 10958,   102])"
2421,1,"['model', 'model selection']", Model selection,seg_87,2dj for model selection:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101, 14134,  3501,  2005,  2944,  4989,  1024,   102])"
2422,1,['backward elimination'], Model selection,seg_87,"backward elimination with the p-value approach. in backward elimination, we would iden-",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2944, 4989])","tensor([ 101, 8848, 9614, 2007, 1996, 1052, 1011, 3643, 3921, 1012, 1999, 8848,
        9614, 1010, 2057, 2052, 8909, 2368, 1011,  102])"
2423,1,"['significance level', 'predictor', 'level', 'model', 'significance', 'variable']", Model selection,seg_87,"tify the predictor corresponding to the largest p-value. if the p-value is above the significance level, usually α = 0.05, then we would drop that variable, refit the model, and repeat the process. if the largest p-value is less than α = 0.05, then we would not eliminate any predictors and the current model would be our best-fitting model.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101, 14841, 12031,  1996, 16014,  2953,  7978,  2000,  1996,  2922,
         1052,  1011,  3643,  1012,  2065,  1996,  1052,  1011,  3643,  2003,
         2682,  1996,  7784,  2504,  1010,  2788,  1155,  1027,  1014,  1012,
         5709,  1010,  2059,  2057,  2052,  4530,  2008,  8023,  1010, 27070,
         1996,  2944,  1010,  1998,  9377,  1996,  2832,  1012,  2065,  1996,
         2922,  1052,  1011,  3643,  2003,  2625,  2084,  1155,  1027,  1014,
         1012,  5709,  1010,  2059,  2057,  2052,  2025, 11027,  2151, 16014,
         5668,  1998,  1996,  2783,  2944,  2052,  2022,  2256,  2190,  1011,
        11414,  2944,  1012,   102])"
2424,1,['forward selection'], Model selection,seg_87,"forward selection with the p-value approach. in forward selection with p-values, we reverse",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([2944, 4989])","tensor([ 101, 2830, 4989, 2007, 1996, 1052, 1011, 3643, 3921, 1012, 1999, 2830,
        4989, 2007, 1052, 1011, 5300, 1010, 2057, 7901,  102])"
2425,1,"['predictor', 'process', 'model', 'variables']", Model selection,seg_87,"the process. we begin with a model that has no predictors, then we fit a model for each possible predictor, identifying the model where the corresponding predictor’s p-value is smallest. if that p-value is smaller than α = 0.05, we add it to the model and repeat the process, considering whether to add more variables one-at-a-time. when none of the remaining predictors can be added to the model and have a p-value less than 0.05, then we stop adding variables and the current model would be our best-fitting model.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101,  1996,  2832,  1012,  2057,  4088,  2007,  1037,  2944,  2008,
         2038,  2053, 16014,  5668,  1010,  2059,  2057,  4906,  1037,  2944,
         2005,  2169,  2825, 16014,  2953,  1010, 12151,  1996,  2944,  2073,
         1996,  7978, 16014,  2953,  1521,  1055,  1052,  1011,  3643,  2003,
        10479,  1012,  2065,  2008,  1052,  1011,  3643,  2003,  3760,  2084,
         1155,  1027,  1014,  1012,  5709,  1010,  2057,  5587,  2009,  2000,
         1996,  2944,  1998,  9377,  1996,  2832,  1010,  6195,  3251,  2000,
         5587,  2062, 10857,  2028,  1011,  2012,  1011,  1037,  1011,  2051,
         1012,  2043,  3904,  1997,  1996,  3588, 16014,  5668,  2064,  2022,
         2794,  2000,  1996,  2944,  1998,  2031,  1037,  1052,  1011,  3643,
         2625,  2084,  1014,  1012,  5709,  1010,  2059,  2057,  2644,  5815,
        10857,  1998,  1996,  2783,  2944,  2052,  2022,  2256,  2190,  1011,
        11414,  2944,  1012,   102])"
2426,1,"['backward elimination', 'model', 'variables', 'variable']", Model selection,seg_87,"examine figure 9.7 on page 353, which considers the model including all variables except the variable for the month the loan was issued. if we were using the p-value approach with backward elimination and we were considering this model, which of these variables would be up for elimination? would we drop that variable, or would we keep it in the model?12",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([2944, 4989])","tensor([  101, 11628,  3275,  1023,  1012,  1021,  2006,  3931,  3486,  2509,
         1010,  2029, 10592,  1996,  2944,  2164,  2035, 10857,  3272,  1996,
         8023,  2005,  1996,  3204,  1996,  5414,  2001,  3843,  1012,  2065,
         2057,  2020,  2478,  1996,  1052,  1011,  3643,  3921,  2007,  8848,
         9614,  1998,  2057,  2020,  6195,  2023,  2944,  1010,  2029,  1997,
         2122, 10857,  2052,  2022,  2039,  2005,  9614,  1029,  2052,  2057,
         4530,  2008,  8023,  1010,  2030,  2052,  2057,  2562,  2009,  1999,
         1996,  2944,  1029,  2260,   102])"
2427,1,"['adjusted r2', 'adjusted']", Model selection,seg_87,"while the adjusted r2 and p-value approaches are similar, they sometimes lead to different models, with the ra",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2096,  1996, 10426,  1054,  2475,  1998,  1052,  1011,  3643,
         8107,  2024,  2714,  1010,  2027,  2823,  2599,  2000,  2367,  4275,
         1010,  2007,  1996, 10958,   102])"
2428,1,['model'], Model selection,seg_87,2dj approach tending to include more predictors in the final model.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2944, 4989])","tensor([  101, 14134,  3501,  3921, 25069,  2000,  2421,  2062, 16014,  5668,
         1999,  1996,  2345,  2944,  1012,   102])"
2429,1,"['prediction', 'machine learning', 'case']", Model selection,seg_87,"when the sole goal is to improve prediction accuracy, use ra 2dj . this is commonly the case in machine learning applications.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2043,  1996,  7082,  3125,  2003,  2000,  5335, 17547, 10640,
         1010,  2224, 10958, 14134,  3501,  1012,  2023,  2003,  4141,  1996,
         2553,  1999,  3698,  4083,  5097,  1012,   102])"
2430,1,"['prediction', 'response', 'statistically significant', 'model', 'variables']", Model selection,seg_87,"when we care about understanding which variables are statistically significant predictors of the response, or if there is interest in producing a simpler model at the potential cost of a little prediction accuracy, then the p-value approach is preferred.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  2043,  2057,  2729,  2055,  4824,  2029, 10857,  2024,  7778,
         2135,  3278, 16014,  5668,  1997,  1996,  3433,  1010,  2030,  2065,
         2045,  2003,  3037,  1999,  5155,  1037, 16325,  2944,  2012,  1996,
         4022,  3465,  1997,  1037,  2210, 17547, 10640,  1010,  2059,  1996,
         1052,  1011,  3643,  3921,  2003,  6871,  1012,   102])"
2431,1,"['model', 'variable', 'forward selection']", Model selection,seg_87,"regardless of whether you use ra 2dj or the p-value approach, or if you use the backward elimination of forward selection strategy, our job is not done after variable selection. we must still verify the model conditions are reasonable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2944, 4989])","tensor([  101,  7539,  1997,  3251,  2017,  2224, 10958, 14134,  3501,  2030,
         1996,  1052,  1011,  3643,  3921,  1010,  2030,  2065,  2017,  2224,
         1996,  8848,  9614,  1997,  2830,  4989,  5656,  1010,  2256,  3105,
         2003,  2025,  2589,  2044,  8023,  4989,  1012,  2057,  2442,  2145,
        20410,  1996,  2944,  3785,  2024,  9608,  1012,   102])"
2432,1,"['model', 'regression']", Checking model conditions using graphs,seg_89,multiple regression methods using the model,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3674, 26237,  4725,  2478,  1996,  2944,   102])"
2433,0,[], Checking model conditions using graphs,seg_89,generally depend on the following four conditions:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3227, 12530,  2006,  1996,  2206,  2176,  3785,  1024,   102])"
2434,1,"['sets', 'residuals', 'normal', 'data sets', 'model', 'data']", Checking model conditions using graphs,seg_89,"1. the residuals of the model are nearly normal (less important for larger data sets),",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1015,  1012,  1996, 21961,  2015,  1997,  1996,  2944,  2024,
         3053,  3671,  1006,  2625,  2590,  2005,  3469,  2951,  4520,  1007,
         1010,   102])"
2435,1,"['variability', 'residuals']", Checking model conditions using graphs,seg_89,"2. the variability of the residuals is nearly constant,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1016,  1012,  1996, 28436,  1997,  1996, 21961,  2015,  2003,
         3053,  5377,  1010,   102])"
2436,1,"['residuals', 'independent']", Checking model conditions using graphs,seg_89,"3. the residuals are independent, and",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1017,  1012,  1996, 21961,  2015,  2024,  2981,  1010,  1998,
          102])"
2437,1,"['outcome', 'variable']", Checking model conditions using graphs,seg_89,4. each variable is linearly related to the outcome.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([ 101, 1018, 1012, 2169, 8023, 2003, 7399, 2135, 3141, 2000, 1996, 9560,
        1012,  102])"
2438,1,"['diagnostic plots', 'plots']", Checking model conditions using graphs,seg_89,9.3.1 diagnostic plots,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1023,  1012,  1017,  1012,  1015, 16474, 14811,   102])"
2439,1,"['plots', 'model', 'data']", Checking model conditions using graphs,seg_89,"diagnostic plots can be used to check each of these conditions. we will consider the model from the lending club loans data, and check whether there are any notable concerns:",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101, 16474, 14811,  2064,  2022,  2109,  2000,  4638,  2169,  1997,
         2122,  3785,  1012,  2057,  2097,  5136,  1996,  2944,  2013,  1996,
        18435,  2252, 10940,  2951,  1010,  1998,  4638,  3251,  2045,  2024,
         2151,  3862,  5936,  1024,   102])"
2440,1,"['residuals', 'normal', 'outliers', 'distribution']", Checking model conditions using graphs,seg_89,"check for outliers. in theory, the distribution of the residuals should be nearly normal; in prac-",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  4638,  2005,  2041, 14355,  2015,  1012,  1999,  3399,  1010,
         1996,  4353,  1997,  1996, 21961,  2015,  2323,  2022,  3053,  3671,
         1025,  1999, 10975,  6305,  1011,   102])"
2441,1,"['data set', 'case', 'set', 'observations', 'residuals', 'histogram', 'outliers', 'data', 'normality']", Checking model conditions using graphs,seg_89,"tice, normality can be relaxed for most applications. instead, we examine a histogram of the residuals to check if there are any outliers: figure 9.8 is a histogram of these outliers. since this is a very large data set, only particularly extreme observations would be a concern in this particular case. there are no extreme observations that might cause a concern.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101, 14841,  3401,  1010,  3671,  3012,  2064,  2022,  8363,  2005,
         2087,  5097,  1012,  2612,  1010,  2057, 11628,  1037,  2010,  3406,
        13113,  1997,  1996, 21961,  2015,  2000,  4638,  2065,  2045,  2024,
         2151,  2041, 14355,  2015,  1024,  3275,  1023,  1012,  1022,  2003,
         1037,  2010,  3406, 13113,  1997,  2122,  2041, 14355,  2015,  1012,
         2144,  2023,  2003,  1037,  2200,  2312,  2951,  2275,  1010,  2069,
         3391,  6034,  9420,  2052,  2022,  1037,  5142,  1999,  2023,  3327,
         2553,  1012,  2045,  2024,  2053,  6034,  9420,  2008,  2453,  3426,
         1037,  5142,  1012,   102])"
2442,1,"['prediction', 'observations', 'residuals', 'normal', 'intervals', 'prediction intervals']", Checking model conditions using graphs,seg_89,"if we intended to construct what are called prediction intervals for future observations, we would be more strict and require the residuals to be nearly normal. prediction intervals are further discussed in an online extra on the openintro website:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2065,  2057,  3832,  2000,  9570,  2054,  2024,  2170, 17547,
        14025,  2005,  2925,  9420,  1010,  2057,  2052,  2022,  2062,  9384,
         1998,  5478,  1996, 21961,  2015,  2000,  2022,  3053,  3671,  1012,
        17547, 14025,  2024,  2582,  6936,  1999,  2019,  3784,  4469,  2006,
         1996,  2330, 18447,  3217,  4037,  1024,   102])"
2443,1,"['regression', 'linear regression', 'linear']", Checking model conditions using graphs,seg_89,www.openintro.org/d?id=stat extra linear regression supp,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  7479,  1012,  2330, 18447,  3217,  1012,  8917,  1013,  1040,
         1029,  8909,  1027, 28093,  4469,  7399, 26237, 10514,  9397,   102])"
2444,1,['residuals'], Checking model conditions using graphs,seg_89,2000 1500 ycneuq 1000 erf 500 0 −10% −5% 0% 5% 10% 15% 20% residuals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2456, 10347,  1061,  2278,  2638,  2226,  4160,  6694,  9413,
         2546,  3156,  1014,  1597, 10790,  1003,  1597,  2629,  1003,  1014,
         1003,  1019,  1003,  2184,  1003,  2321,  1003,  2322,  1003, 21961,
         2015,   102])"
2445,1,"['residuals', 'histogram']", Checking model conditions using graphs,seg_89,figure 9.8: a histogram of the residuals.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3275,  1023,  1012,  1022,  1024,  1037,  2010,  3406, 13113,
         1997,  1996, 21961,  2015,  1012,   102])"
2446,1,"['absolute value', 'residuals', 'fitted values', 'plot']", Checking model conditions using graphs,seg_89,absolute values of residuals against fitted values. a plot of the absolute value of the resid-,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  7619,  5300,  1997, 21961,  2015,  2114,  7130,  5300,  1012,
         1037,  5436,  1997,  1996,  7619,  3643,  1997,  1996, 24501,  3593,
         1011,   102])"
2447,1,"['variability', 'variance', 'residuals', 'fitted values', 'condition', 'plot']", Checking model conditions using graphs,seg_89,"uals against their corresponding fitted values (ŷi) is shown in figure 9.9. this plot is helpful to check the condition that the variance of the residuals is approximately constant, and a smoothed line has been added to represent the approximate trend in this plot. there is more evident variability for fitted values that are larger, which we’ll discuss further.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101, 25423,  4877,  2114,  2037,  7978,  7130,  5300,  1006, 12316,
         1007,  2003,  3491,  1999,  3275,  1023,  1012,  1023,  1012,  2023,
         5436,  2003, 14044,  2000,  4638,  1996,  4650,  2008,  1996, 23284,
         1997,  1996, 21961,  2015,  2003,  3155,  5377,  1010,  1998,  1037,
        17966,  2240,  2038,  2042,  2794,  2000,  5050,  1996, 15796,  9874,
         1999,  2023,  5436,  1012,  2045,  2003,  2062, 10358, 28436,  2005,
         7130,  5300,  2008,  2024,  3469,  1010,  2029,  2057,  1521,  2222,
         6848,  2582,  1012,   102])"
2448,1,['fitted values'], Checking model conditions using graphs,seg_89,s la u 15% d is er f o 10% e ul av et lu 5% o sb a 0% 10 15 20 fitted values,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1055,  2474,  1057,  2321,  1003,  1040,  2003,  9413,  1042,
         1051,  2184,  1003,  1041, 17359, 20704,  3802, 11320,  1019,  1003,
         1051, 24829,  1037,  1014,  1003,  2184,  2321,  2322,  7130,  5300,
          102])"
2449,1,"['variance', 'absolute value', 'residuals', 'fitted values', 'deviations']", Checking model conditions using graphs,seg_89,figure 9.9: comparing the absolute value of the residuals against the fitted values (ŷi) is helpful in identifying deviations from the constant variance assumption.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3275,  1023,  1012,  1023,  1024, 13599,  1996,  7619,  3643,
         1997,  1996, 21961,  2015,  2114,  1996,  7130,  5300,  1006, 12316,
         1007,  2003, 14044,  1999, 12151, 24353,  2015,  2013,  1996,  5377,
        23284, 11213,  1012,   102])"
2450,1,"['observations', 'data collection', 'plot', 'data']", Checking model conditions using graphs,seg_89,residuals in order of their data collection. this type of plot can be helpful when observations,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101, 21961,  2015,  1999,  2344,  1997,  2037,  2951,  3074,  1012,
         2023,  2828,  1997,  5436,  2064,  2022, 14044,  2043,  9420,   102])"
2451,1,"['cases', 'set', 'time series', 'plot', 'data set', 'data']", Checking model conditions using graphs,seg_89,"were collected in a sequence. such a plot is helpful in identifying any connection between cases that are close to one another. the loans in this data set were issued over a 3 month period, and the month the loan was issued was not found to be important, suggesting this is not a concern for this data set. in cases where a data set does show some pattern for this check, time series methods may be useful.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2020,  5067,  1999,  1037,  5537,  1012,  2107,  1037,  5436,
         2003, 14044,  1999, 12151,  2151,  4434,  2090,  3572,  2008,  2024,
         2485,  2000,  2028,  2178,  1012,  1996, 10940,  1999,  2023,  2951,
         2275,  2020,  3843,  2058,  1037,  1017,  3204,  2558,  1010,  1998,
         1996,  3204,  1996,  5414,  2001,  3843,  2001,  2025,  2179,  2000,
         2022,  2590,  1010,  9104,  2023,  2003,  2025,  1037,  5142,  2005,
         2023,  2951,  2275,  1012,  1999,  3572,  2073,  1037,  2951,  2275,
         2515,  2265,  2070,  5418,  2005,  2023,  4638,  1010,  2051,  2186,
         4725,  2089,  2022,  6179,  1012,   102])"
2452,1,"['predictor', 'residuals', 'predictor variable', 'plot', 'variable']", Checking model conditions using graphs,seg_89,residuals against each predictor variable. we consider a plot of the residuals against each of,tensor(1),"tensor([0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101, 21961,  2015,  2114,  2169, 16014,  2953,  8023,  1012,  2057,
         5136,  1037,  5436,  1997,  1996, 21961,  2015,  2114,  2169,  1997,
          102])"
2453,1,"['box plots', 'variability', 'outcomes', 'plots', 'numerical', 'data']", Checking model conditions using graphs,seg_89,"the predictors in figure 9.10. for those instances where there are only 2-3 groups, box plots are shown. for the numerical outcomes, a smoothed line has been fit to the data to make it easier to review. ultimately, we are looking for any notable change in variability between groups or pattern in the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1996, 16014,  5668,  1999,  3275,  1023,  1012,  2184,  1012,
         2005,  2216, 12107,  2073,  2045,  2024,  2069,  1016,  1011,  1017,
         2967,  1010,  3482, 14811,  2024,  3491,  1012,  2005,  1996, 15973,
        13105,  1010,  1037, 17966,  2240,  2038,  2042,  4906,  2000,  1996,
         2951,  2000,  2191,  2009,  6082,  2000,  3319,  1012,  4821,  1010,
         2057,  2024,  2559,  2005,  2151,  3862,  2689,  1999, 28436,  2090,
         2967,  2030,  5418,  1999,  1996,  2951,  1012,   102])"
2454,1,['plots'], Checking model conditions using graphs,seg_89,here are the things of importance from these plots:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2182,  2024,  1996,  2477,  1997,  5197,  2013,  2122, 14811,
         1024,   102])"
2455,1,['variability'], Checking model conditions using graphs,seg_89,• there is some minor differences in variability between the verified income groups.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1528,  2045,  2003,  2070,  3576,  5966,  1999, 28436,  2090,
         1996, 20119,  3318,  2967,  1012,   102])"
2456,1,"['skewed', 'observations', 'variable']", Checking model conditions using graphs,seg_89,• there is a very clear pattern for the debt-to-income variable. what also stands out is that this variable is very strongly right skewed: there are few observations with very high debt-to-income ratios.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1528,  2045,  2003,  1037,  2200,  3154,  5418,  2005,  1996,
         7016,  1011,  2000,  1011,  3318,  8023,  1012,  2054,  2036,  4832,
         2041,  2003,  2008,  2023,  8023,  2003,  2200,  6118,  2157, 15315,
         7974,  2098,  1024,  2045,  2024,  2261,  9420,  2007,  2200,  2152,
         7016,  1011,  2000,  1011,  3318, 21879,  1012,   102])"
2457,1,"['curve', 'plots']", Checking model conditions using graphs,seg_89,• the downward curve on the right side of the credit utilization and credit check plots suggests some minor misfitting for those larger values.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1528,  1996, 14047,  7774,  2006,  1996,  2157,  2217,  1997,
         1996,  4923, 27891,  1998,  4923,  4638, 14811,  6083,  2070,  3576,
        28616,  8873, 13027,  2005,  2216,  3469,  5300,  1012,   102])"
2458,1,"['model', 'diagnostic plots', 'plots']", Checking model conditions using graphs,seg_89,"having reviewed the diagnostic plots, there are two options. the first option is to, if we’re not concerned about the issues observed, use this as the final model; if going this route, it is important to still note any abnormalities observed in the diagnostics. the second option is to try to improve the model, which is what we’ll try to do with this particular model fit.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2383,  8182,  1996, 16474, 14811,  1010,  2045,  2024,  2048,
         7047,  1012,  1996,  2034,  5724,  2003,  2000,  1010,  2065,  2057,
         1521,  2128,  2025,  4986,  2055,  1996,  3314,  5159,  1010,  2224,
         2023,  2004,  1996,  2345,  2944,  1025,  2065,  2183,  2023,  2799,
         1010,  2009,  2003,  2590,  2000,  2145,  3602,  2151, 28828,  5159,
         1999,  1996, 16474,  2015,  1012,  1996,  2117,  5724,  2003,  2000,
         3046,  2000,  5335,  1996,  2944,  1010,  2029,  2003,  2054,  2057,
         1521,  2222,  3046,  2000,  2079,  2007,  2023,  3327,  2944,  4906,
         1012,   102])"
2459,1,"['box plots', 'variability', 'diagnostic plots', 'residuals', 'plots', 'numerical', 'data']", Checking model conditions using graphs,seg_89,"figure 9.10: diagnostic plots for residuals against each of the predictors. for the box plots, we’re looking for notable differences in variability. for numerical predictors, we also check for trends or other structure in the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3275,  1023,  1012,  2184,  1024, 16474, 14811,  2005, 21961,
         2015,  2114,  2169,  1997,  1996, 16014,  5668,  1012,  2005,  1996,
         3482, 14811,  1010,  2057,  1521,  2128,  2559,  2005,  3862,  5966,
         1999, 28436,  1012,  2005, 15973, 16014,  5668,  1010,  2057,  2036,
         4638,  2005, 12878,  2030,  2060,  3252,  1999,  1996,  2951,  1012,
          102])"
2460,1,['model'], Checking model conditions using graphs,seg_89,9.3.2 options for improving the model fit,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([ 101, 1023, 1012, 1017, 1012, 1016, 7047, 2005, 9229, 1996, 2944, 4906,
         102])"
2461,1,"['variability', 'transforming', 'nonlinear', 'outcome', 'model', 'variables']", Checking model conditions using graphs,seg_89,"there are several options for improvement of a model, including transforming variables, seeking out additional variables to fill model gaps, or using more advanced methods that would account for challenges around inconsistent variability or nonlinear relationships between predictors and the outcome.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2045,  2024,  2195,  7047,  2005,  7620,  1997,  1037,  2944,
         1010,  2164, 17903, 10857,  1010,  6224,  2041,  3176, 10857,  2000,
         6039,  2944, 16680,  1010,  2030,  2478,  2062,  3935,  4725,  2008,
         2052,  4070,  2005,  7860,  2105, 20316, 28436,  2030, 27400,  6550,
         2090, 16014,  5668,  1998,  1996,  9560,  1012,   102])"
2462,1,"['predictor', 'nonlinear', 'outcome', 'predictor variable', 'model', 'variable']", Checking model conditions using graphs,seg_89,"the main concern for the initial model is that there is a notable nonlinear relationship between the debt-to-income variable observed in figure 9.10. to resolve this issue, we’re going to consider a couple strategies for adjusting the relationship between the predictor variable and the outcome.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1996,  2364,  5142,  2005,  1996,  3988,  2944,  2003,  2008,
         2045,  2003,  1037,  3862, 27400,  3276,  2090,  1996,  7016,  1011,
         2000,  1011,  3318,  8023,  5159,  1999,  3275,  1023,  1012,  2184,
         1012,  2000, 10663,  2023,  3277,  1010,  2057,  1521,  2128,  2183,
         2000,  5136,  1037,  3232,  9942,  2005, 19158,  1996,  3276,  2090,
         1996, 16014,  2953,  8023,  1998,  1996,  9560,  1012,   102])"
2463,1,"['skewed', 'leverage', 'histogram', 'variable']", Checking model conditions using graphs,seg_89,"let’s start by taking a look at a histogram of debt to income in figure 9.11. the variable is extremely skewed, and upper values will have a lot of leverage on the fit. below are several options:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2292,  1521,  1055,  2707,  2011,  2635,  1037,  2298,  2012,
         1037,  2010,  3406, 13113,  1997,  7016,  2000,  3318,  1999,  3275,
         1023,  1012,  2340,  1012,  1996,  8023,  2003,  5186, 15315,  7974,
         2098,  1010,  1998,  3356,  5300,  2097,  2031,  1037,  2843,  1997,
        21155,  2006,  1996,  4906,  1012,  2917,  2024,  2195,  7047,  1024,
          102])"
2464,1,['transformation'], Checking model conditions using graphs,seg_89,"• log transformation (log x),",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([ 101, 1528, 8833, 8651, 1006, 8833, 1060, 1007, 1010,  102])"
2465,1,['transformation'], Checking model conditions using graphs,seg_89,"• square root transformation (√x),",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([ 101, 1528, 2675, 7117, 8651, 1006, 1600, 2595, 1007, 1010,  102])"
2466,1,['transformation'], Checking model conditions using graphs,seg_89,"• inverse transformation (1/x),",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1528, 19262,  8651,  1006,  1015,  1013,  1060,  1007,  1010,
          102])"
2467,0,[], Checking model conditions using graphs,seg_89,• truncation (cap the max value possible),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1528, 19817,  4609, 10719,  1006,  6178,  1996,  4098,  3643,
         2825,  1007,   102])"
2468,1,"['transformation', 'observations', 'transformations', 'data', 'variable']", Checking model conditions using graphs,seg_89,"if we inspected the data more closely, we’d observe some instances where the variable takes a value of 0, and since log(0) and 1/x are undefined when x = 0, we’ll exclude these transformations from further consideration.13 a square root transformation is valid for all values the variable takes, and truncating some of the larger observations is also a valid approach. we’ll consider both of these approaches.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2065,  2057, 20456,  1996,  2951,  2062,  4876,  1010,  2057,
         1521,  1040, 11949,  2070, 12107,  2073,  1996,  8023,  3138,  1037,
         3643,  1997,  1014,  1010,  1998,  2144,  8833,  1006,  1014,  1007,
         1998,  1015,  1013,  1060,  2024,  6151, 28344,  2043,  1060,  1027,
         1014,  1010,  2057,  1521,  2222, 23329,  2122, 21865,  2013,  2582,
         9584,  1012,  2410,  1037,  2675,  7117,  8651,  2003,  9398,  2005,
         2035,  5300,  1996,  8023,  3138,  1010,  1998, 19817,  4609, 18252,
         2070,  1997,  1996,  3469,  9420,  2003,  2036,  1037,  9398,  3921,
         1012,  2057,  1521,  2222,  5136,  2119,  1997,  2122,  8107,  1012,
          102])"
2469,1,"['skew', 'histogram']", Checking model conditions using graphs,seg_89,"figure 9.11: histogram of debt to income, where extreme skew is evident.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3275,  1023,  1012,  2340,  1024,  2010,  3406, 13113,  1997,
         7016,  2000,  3318,  1010,  2073,  6034, 15315,  7974,  2003, 10358,
         1012,   102])"
2470,1,"['transforming', 'transformed', 'variables', 'variable']", Checking model conditions using graphs,seg_89,"to try transforming the variable, we make two new variables representing the transformed versions:",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2000,  3046, 17903,  1996,  8023,  1010,  2057,  2191,  2048,
         2047, 10857,  5052,  1996,  8590,  4617,  1024,   102])"
2471,1,['variable'], Checking model conditions using graphs,seg_89,"square root. we create a new variable, sqrt debt to income, where all the values are simply the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([ 101, 2675, 7117, 1012, 2057, 3443, 1037, 2047, 8023, 1010, 5490, 5339,
        7016, 2000, 3318, 1010, 2073, 2035, 1996, 5300, 2024, 3432, 1996,  102])"
2472,1,['model'], Checking model conditions using graphs,seg_89,"square roots of the values in debt to income, and then refit the model as before. the result is shown in the left panel of figure 9.12. the square root pulled in the higher values a bit, but the fit still doesn’t look great since the smoothed line is still wavy.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2675,  6147,  1997,  1996,  5300,  1999,  7016,  2000,  3318,
         1010,  1998,  2059, 27070,  1996,  2944,  2004,  2077,  1012,  1996,
         2765,  2003,  3491,  1999,  1996,  2187,  5997,  1997,  3275,  1023,
         1012,  2260,  1012,  1996,  2675,  7117,  2766,  1999,  1996,  3020,
         5300,  1037,  2978,  1010,  2021,  1996,  4906,  2145,  2987,  1521,
         1056,  2298,  2307,  2144,  1996, 17966,  2240,  2003,  2145, 23098,
         1012,   102])"
2473,1,['variable'], Checking model conditions using graphs,seg_89,"truncate at 50. we create a new variable, debt to income 50, where any values in debt to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101, 19817,  4609, 16280,  2012,  2753,  1012,  2057,  3443,  1037,
         2047,  8023,  1010,  7016,  2000,  3318,  2753,  1010,  2073,  2151,
         5300,  1999,  7016,  2000,   102])"
2474,1,"['model', 'plot', 'variable']", Checking model conditions using graphs,seg_89,"income that are greater than 50 are shrunk to exactly 50. refitting the model once more, the diagnostic plot for this new variable is shown in the right panel of figure 9.12. here the fit looks much more reasonable, so this appears to be a reasonable approach.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3318,  2008,  2024,  3618,  2084,  2753,  2024, 14021, 15532,
         2243,  2000,  3599,  2753,  1012, 27070,  3436,  1996,  2944,  2320,
         2062,  1010,  1996, 16474,  5436,  2005,  2023,  2047,  8023,  2003,
         3491,  1999,  1996,  2157,  5997,  1997,  3275,  1023,  1012,  2260,
         1012,  2182,  1996,  4906,  3504,  2172,  2062,  9608,  1010,  2061,
         2023,  3544,  2000,  2022,  1037,  9608,  3921,  1012,   102])"
2475,1,"['cases', 'results', 'transformations', 'transformation']", Checking model conditions using graphs,seg_89,"the downside of using transformations is that it reduces the ease of interpreting the results. fortunately, since the truncation transformation only affects a relatively small number of cases, the interpretation isn’t dramatically impacted.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1996, 12482,  5178,  1997,  2478, 21865,  2003,  2008,  2009,
        13416,  1996,  7496,  1997, 25455,  1996,  3463,  1012, 14599,  1010,
         2144,  1996, 19817,  4609, 10719,  8651,  2069, 13531,  1037,  4659,
         2235,  2193,  1997,  3572,  1010,  1996,  7613,  3475,  1521,  1056,
        12099, 19209,  1012,   102])"
2476,1,"['skew', 'histogram']", Checking model conditions using graphs,seg_89,"figure 9.12: histogram of debt to income, where extreme skew is evident.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3275,  1023,  1012,  2260,  1024,  2010,  3406, 13113,  1997,
         7016,  2000,  3318,  1010,  2073,  6034, 15315,  7974,  2003, 10358,
         1012,   102])"
2477,1,"['model', 'variance', 'control']", Checking model conditions using graphs,seg_89,"as a next step, we’d evaluate the new model using the truncated version of debt to income, we would complete all the same procedures as before. the other two issues noted while inspecting diagnostics in section 9.3.1 are still present in the updated model. if we choose to report this model, we would want to also discuss these shortcomings to be transparent in our work. depending on what the model will be used, we could either try to bring those under control, or we could stop since those issues aren’t severe. had the non-constant variance been a little more dramatic, it would be a higher priority. ultimately we decided that the model was reasonable, and we report its final form here:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2004,  1037,  2279,  3357,  1010,  2057,  1521,  1040, 16157,
         1996,  2047,  2944,  2478,  1996, 25449,  2544,  1997,  7016,  2000,
         3318,  1010,  2057,  2052,  3143,  2035,  1996,  2168,  8853,  2004,
         2077,  1012,  1996,  2060,  2048,  3314,  3264,  2096, 29508, 16474,
         2015,  1999,  2930,  1023,  1012,  1017,  1012,  1015,  2024,  2145,
         2556,  1999,  1996,  7172,  2944,  1012,  2065,  2057,  5454,  2000,
         3189,  2023,  2944,  1010,  2057,  2052,  2215,  2000,  2036,  6848,
         2122,  2460, 18935,  2015,  2000,  2022, 13338,  1999,  2256,  2147,
         1012,  5834,  2006,  2054,  1996,  2944,  2097,  2022,  2109,  1010,
         2057,  2071,  2593,  3046,  2000,  3288,  2216,  2104,  2491,  1010,
         2030,  2057,  2071,  2644,  2144,  2216,  3314,  4995,  1521,  1056,
         5729,  1012,  2018,  1996,  2512,  1011,  5377, 23284,  2042,  1037,
         2210,  2062,  6918,  1010,  2009,  2052,  2022,  1037,  3020,  9470,
         1012,  4821,  2057,  2787,  2008,  1996,  2944,  2001,  9608,  1010,
         1998,  2057,  3189,  2049,  2345,  2433,  2182,  1024,   102])"
2478,1,"['leverage', 'high leverage', 'coefficient', 'model', 'variable']", Checking model conditions using graphs,seg_89,"a sharp eye would notice that the coefficient for debt to income 50 is more than twice as large as what the coefficient had been for the debt to income variable in the earlier model. this suggests those larger values not only were points with high leverage, but they were influential points that were dramatically impacting the coefficient.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1037,  4629,  3239,  2052,  5060,  2008,  1996, 19064,  2005,
         7016,  2000,  3318,  2753,  2003,  2062,  2084,  3807,  2004,  2312,
         2004,  2054,  1996, 19064,  2018,  2042,  2005,  1996,  7016,  2000,
         3318,  8023,  1999,  1996,  3041,  2944,  1012,  2023,  6083,  2216,
         3469,  5300,  2025,  2069,  2020,  2685,  2007,  2152, 21155,  1010,
         2021,  2027,  2020,  6383,  2685,  2008,  2020, 12099,  4254,  2075,
         1996, 19064,  1012,   102])"
2479,1,['model'], Checking model conditions using graphs,seg_89,"the truth is that no model is perfect. however, even imperfect models can be useful. reporting a flawed model can be reasonable so long as we are clear and report the model’s shortcomings.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  1996,  3606,  2003,  2008,  2053,  2944,  2003,  3819,  1012,
         2174,  1010,  2130, 29238,  4275,  2064,  2022,  6179,  1012,  7316,
         1037, 25077,  2944,  2064,  2022,  9608,  2061,  2146,  2004,  2057,
         2024,  3154,  1998,  3189,  1996,  2944,  1521,  1055,  2460, 18935,
         2015,  1012,   102])"
2480,1,"['interaction', 'data', 'nonlinear', 'results', 'nonlinear curves', 'statistical', 'model', 'interaction terms']", Checking model conditions using graphs,seg_89,"don’t report results when conditions are grossly violated. while there is a little leeway in model conditions, don’t go too far. if model conditions are very clearly violated, consider a new model, even if it means learning more statistical methods or hiring someone who can help. to help you get started, we’ve developed a couple additional sections that you may find on openintro’s website. these sections provide a light introduction to what are called interaction terms and to fitting nonlinear curves to data, respectively:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  2123,  1521,  1056,  3189,  3463,  2043,  3785,  2024,  7977,
         2135, 14424,  1012,  2096,  2045,  2003,  1037,  2210,  3389,  4576,
         1999,  2944,  3785,  1010,  2123,  1521,  1056,  2175,  2205,  2521,
         1012,  2065,  2944,  3785,  2024,  2200,  4415, 14424,  1010,  5136,
         1037,  2047,  2944,  1010,  2130,  2065,  2009,  2965,  4083,  2062,
         7778,  4725,  2030, 14763,  2619,  2040,  2064,  2393,  1012,  2000,
         2393,  2017,  2131,  2318,  1010,  2057,  1521,  2310,  2764,  1037,
         3232,  3176,  5433,  2008,  2017,  2089,  2424,  2006,  2330, 18447,
         3217,  1521,  1055,  4037,  1012,  2122,  5433,  3073,  1037,  2422,
         4955,  2000,  2054,  2024,  2170,  8290,  3408,  1998,  2000, 11414,
        27400, 10543,  2000,  2951,  1010,  4414,  1024,   102])"
2481,1,['interaction'], Checking model conditions using graphs,seg_89,www.openintro.org/d?file=stat extra interaction effects,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  7479,  1012,  2330, 18447,  3217,  1012,  8917,  1013,  1040,
         1029,  5371,  1027, 28093,  4469,  8290,  3896,   102])"
2482,1,['nonlinear'], Checking model conditions using graphs,seg_89,www.openintro.org/d?file=stat extra nonlinear relationships,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  7479,  1012,  2330, 18447,  3217,  1012,  8917,  1013,  1040,
         1029,  5371,  1027, 28093,  4469, 27400,  6550,   102])"
2483,1,"['residuals', 'fitted values']", Checking model conditions using graphs,seg_89,300 40 250 200 slau 0 150 di se 100 r 50 −40 0 −60 −40 −20 0 20 40 60 80 120 160 residuals fitted values 40 40 s s l l a au 0 u 0 d d i is se er r −40 −40 150 200 250 300 350 0 400 800 1200 length of gestation order of collection 40 40 s s l l a a u 0 u 0 d d i i s s e e r r −40 −40 0 1 55 60 65 70 parity height of mother 40 40 s s l l a a u 0 u 0 d d i i s s e e r r −40 −40 100 150 200 250 0 1 weight of mother smoke,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  3998,  2871,  5539,  3263, 22889,  4887,  1014,  5018,  4487,
         7367,  2531,  1054,  2753,  1597, 12740,  1014,  1597, 16086,  1597,
        12740,  1597, 11387,  1014,  2322,  2871,  3438,  3770,  6036,  8148,
        21961,  2015,  7130,  5300,  2871,  2871,  1055,  1055,  1048,  1048,
         1037,  8740,  1014,  1057,  1014,  1040,  1040,  1045,  2003,  7367,
         9413,  1054,  1597, 12740,  1597, 12740,  5018,  3263,  5539,  3998,
         8698,  1014,  4278,  5385, 14840,  3091,  1997, 16216, 20100,  2344,
         1997,  3074,  2871,  2871,  1055,  1055,  1048,  1048,  1037,  1037,
         1057,  1014,  1057,  1014,  1040,  1040,  1045,  1045,  1055,  1055,
         1041,  1041,  1054,  1054,  1597, 12740,  1597, 12740,  1014,  1015,
         4583,  3438,  3515,  3963, 11968,  3012,  4578,  1997,  2388,  2871,
         2871,  1055,  1055,  1048,  1048,  1037,  1037,  1057,  1014,  1057,
         1014,  1040,  1040,  1045,  1045,  1055,  1055,  1041,  1041,  1054,
         1054,  1597, 12740,  1597, 12740,  2531,  5018,  3263,  5539,  1014,
         1015,  3635,  1997,  2388,  5610,   102])"
2484,0,[], Checking model conditions using graphs,seg_89,is comedy er drama 200 25 horror,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([ 101, 2003, 4038, 9413, 3689, 3263, 2423, 5469,  102])"
2485,1,['fitted values'], Checking model conditions using graphs,seg_89,residuals fitted values,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101, 21961,  2015,  7130,  5300,   102])"
2486,0,[], Checking model conditions using graphs,seg_89,action adventure comedy drama horror,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([ 101, 2895, 6172, 4038, 3689, 5469,  102])"
2487,0,[], Checking model conditions using graphs,seg_89,genre order of collection 80 60 slaud 40 iser 20 0 2010 2012 2014 2016 2018 release year,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9361,  2944,  3785,  2478, 19287])","tensor([  101,  6907,  2344,  1997,  3074,  3770,  3438, 22889, 19513,  2871,
         2003,  2121,  2322,  1014,  2230,  2262,  2297,  2355,  2760,  2713,
         2095,   102])"
2488,1,"['regression', 'multiple regression', 'associated', 'outcome', 'variables', 'average', 'variable']", Multiple regression case study Mario Kart,seg_91,"we’ll consider ebay auctions of a video game called mario kart for the nintendo wii. the outcome variable of interest is the total price of an auction, which is the highest bid plus the shipping cost. we will try to determine how total price is related to each characteristic in an auction while simultaneously controlling for other variables. for instance, all other characteristics held constant, are longer auctions associated with higher or lower prices? and, on average, how much more do buyers tend to pay for additional wii wheels (plastic steering wheels that attach to the wii controller) in auctions? multiple regression will help us answer these and other questions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2057,  1521,  2222,  5136,  1041, 15907, 10470,  2015,  1997,
         1037,  2678,  2208,  2170,  7986, 10556,  5339,  2005,  1996, 10022,
        16568,  1012,  1996,  9560,  8023,  1997,  3037,  2003,  1996,  2561,
         3976,  1997,  2019, 10470,  1010,  2029,  2003,  1996,  3284,  7226,
         4606,  1996,  7829,  3465,  1012,  2057,  2097,  3046,  2000,  5646,
         2129,  2561,  3976,  2003,  3141,  2000,  2169,  8281,  1999,  2019,
        10470,  2096,  7453,  9756,  2005,  2060, 10857,  1012,  2005,  6013,
         1010,  2035,  2060,  6459,  2218,  5377,  1010,  2024,  2936, 10470,
         2015,  3378,  2007,  3020,  2030,  2896,  7597,  1029,  1998,  1010,
         2006,  2779,  1010,  2129,  2172,  2062,  2079, 17394,  7166,  2000,
         3477,  2005,  3176, 16568,  7787,  1006,  6081,  9602,  7787,  2008,
        22476,  2000,  1996, 16568, 11486,  1007,  1999, 10470,  2015,  1029,
         3674, 26237,  2097,  2393,  2149,  3437,  2122,  1998,  2060,  3980,
         1012,   102])"
2489,1,"['set', 'full model', 'model', 'data set', 'data']", Multiple regression case study Mario Kart,seg_91,9.4.1 data set and the full model,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([ 101, 1023, 1012, 1018, 1012, 1015, 2951, 2275, 1998, 1996, 2440, 2944,
         102])"
2490,1,"['data', 'set', 'observations', 'indicator variables', 'results', 'condition', 'variables', 'data set', 'indicator', 'variable']", Multiple regression case study Mario Kart,seg_91,"the mariokart data set includes results from 141 auctions. four observations from this data set are shown in figure 9.13, and descriptions for each variable are shown in figure 9.14. notice that the condition and stock photo variables are indicator variables, similar to bankruptcy in the loan data set.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  1996,  7986,  6673,  2102,  2951,  2275,  2950,  3463,  2013,
        15471, 10470,  2015,  1012,  2176,  9420,  2013,  2023,  2951,  2275,
         2024,  3491,  1999,  3275,  1023,  1012,  2410,  1010,  1998, 13271,
         2005,  2169,  8023,  2024,  3491,  1999,  3275,  1023,  1012,  2403,
         1012,  5060,  2008,  1996,  4650,  1998,  4518,  6302, 10857,  2024,
        17245, 10857,  1010,  2714,  2000, 10528,  1999,  1996,  5414,  2951,
         2275,  1012,   102])"
2491,1,"['set', 'observations', 'data set', 'data']", Multiple regression case study Mario Kart,seg_91,figure 9.13: four observations from the mariokart data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([ 101, 3275, 1023, 1012, 2410, 1024, 2176, 9420, 2013, 1996, 7986, 6673,
        2102, 2951, 2275, 1012,  102])"
2492,1,"['set', 'variables', 'data set', 'data']", Multiple regression case study Mario Kart,seg_91,figure 9.14: variables and their descriptions for the mariokart data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3275,  1023,  1012,  2403,  1024, 10857,  1998,  2037, 13271,
         2005,  1996,  7986,  6673,  2102,  2951,  2275,  1012,   102])"
2493,1,"['regression', 'linear', 'predictor', 'results', 'linear regression', 'regression model', 'condition', 'model', 'linear regression model']", Multiple regression case study Mario Kart,seg_91,we fit a linear regression model with the game’s condition as a predictor of auction price. results of this model are summarized below:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2057,  4906,  1037,  7399, 26237,  2944,  2007,  1996,  2208,
         1521,  1055,  4650,  2004,  1037, 16014,  2953,  1997, 10470,  3976,
         1012,  3463,  1997,  2023,  2944,  2024, 22539,  2917,  1024,   102])"
2494,1,['error'], Multiple regression case study Mario Kart,seg_91,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2495,1,['intercept'], Multiple regression case study Mario Kart,seg_91,(intercept) 42.8711 0.8140 52.67 <0.0001 cond new 10.8996 1.2583 8.66 <0.0001 df = 139,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  1006, 19115,  1007,  4413,  1012,  6584, 14526,  1014,  1012,
         6282, 12740,  4720,  1012,  6163,  1026,  1014,  1012,  2199,  2487,
         9530,  2094,  2047,  2184,  1012,  6486,  2683,  2575,  1015,  1012,
        24398,  2509,  1022,  1012,  5764,  1026,  1014,  1012,  2199,  2487,
         1040,  2546,  1027, 16621,   102])"
2496,1,"['model', 'slope']", Multiple regression case study Mario Kart,seg_91,"write down the equation for the model, note whether the slope is statistically different from zero,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([ 101, 4339, 2091, 1996, 8522, 2005, 1996, 2944, 1010, 3602, 3251, 1996,
        9663, 2003, 7778, 2135, 2367, 2013, 5717, 1010,  102])"
2497,1,['coefficient'], Multiple regression case study Mario Kart,seg_91,15 and interpret the coefficient.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2321,  1998, 17841,  1996, 19064,  1012,   102])"
2498,1,"['predictor', 'outcome', 'predictor variable', 'predictor variables', 'model', 'variables', 'variable']", Multiple regression case study Mario Kart,seg_91,"sometimes there are underlying structures or relationships between predictor variables. for instance, new games sold on ebay tend to come with more wii wheels, which may have led to higher prices for those auctions. we would like to fit a model that includes all potentially important variables simultaneously. this would help us evaluate the relationship between a predictor variable and the outcome while controlling for the potential influence of other variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2823,  2045,  2024, 10318,  5090,  2030,  6550,  2090, 16014,
         2953, 10857,  1012,  2005,  6013,  1010,  2047,  2399,  2853,  2006,
         1041, 15907,  7166,  2000,  2272,  2007,  2062, 16568,  7787,  1010,
         2029,  2089,  2031,  2419,  2000,  3020,  7597,  2005,  2216, 10470,
         2015,  1012,  2057,  2052,  2066,  2000,  4906,  1037,  2944,  2008,
         2950,  2035,  9280,  2590, 10857,  7453,  1012,  2023,  2052,  2393,
         2149, 16157,  1996,  3276,  2090,  1037, 16014,  2953,  8023,  1998,
         1996,  9560,  2096,  9756,  2005,  1996,  4022,  3747,  1997,  2060,
        10857,  1012,   102])"
2499,1,"['model', 'variables', 'condition']", Multiple regression case study Mario Kart,seg_91,"we want to construct a model that accounts for not only the game condition, as in guided practice 9.21, but simultaneously accounts for three other variables:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2057,  2215,  2000,  9570,  1037,  2944,  2008,  6115,  2005,
         2025,  2069,  1996,  2208,  4650,  1010,  2004,  1999,  8546,  3218,
         1023,  1012,  2538,  1010,  2021,  7453,  6115,  2005,  2093,  2060,
        10857,  1024,   102])"
2500,1,"['coefficient', 'estimates', 'full model', 'model', 'point estimates']", Multiple regression case study Mario Kart,seg_91,"figure 9.15 summarizes the full model. using this output, we identify the point estimates of each coefficient.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3275,  1023,  1012,  2321,  7680,  7849, 10057,  1996,  2440,
         2944,  1012,  2478,  2023,  6434,  1010,  2057,  6709,  1996,  2391,
        10035,  1997,  2169, 19064,  1012,   102])"
2501,1,['error'], Multiple regression case study Mario Kart,seg_91,estimate std. error t value pr(>|t|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1056,  3643, 10975,  1006,
         1028,  1064,  1056,  1064,  1007,   102])"
2502,1,['intercept'], Multiple regression case study Mario Kart,seg_91,(intercept) 36.2110 1.5140 23.92 <0.0001 cond new 5.1306 1.0511 4.88 <0.0001 stock photo 1.0803 1.0568 1.02 0.3085 duration -0.0268 0.1904 -0.14 0.8882 wheels 7.2852 0.5547 13.13 <0.0001 df = 136,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  1006, 19115,  1007,  4029,  1012, 19235,  2692,  1015,  1012,
         4868, 12740,  2603,  1012,  6227,  1026,  1014,  1012,  2199,  2487,
         9530,  2094,  2047,  1019,  1012,  7558,  2575,  1015,  1012,  5709,
        14526,  1018,  1012,  6070,  1026,  1014,  1012,  2199,  2487,  4518,
         6302,  1015,  1012,  5511,  2692,  2509,  1015,  1012,  5709,  2575,
         2620,  1015,  1012,  6185,  1014,  1012, 24232,  2629,  9367,  1011,
         1014,  1012,  6185,  2575,  2620,  1014,  1012,  5692,  1011,  1014,
         1012,  2403,  1014,  1012,  6070,  2620,  2475,  7787,  1021,  1012,
        21777,  2475,  1014,  1012,  4583, 22610,  2410,  1012,  2410,  1026,
         1014,  1012,  2199,  2487,  1040,  2546,  1027, 15407,   102])"
2503,1,"['regression', 'outcome', 'regression model', 'model']", Multiple regression case study Mario Kart,seg_91,"figure 9.15: output for the regression model where price is the outcome and cond new, stock photo, duration, and wheels are the predictors.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3275,  1023,  1012,  2321,  1024,  6434,  2005,  1996, 26237,
         2944,  2073,  3976,  2003,  1996,  9560,  1998,  9530,  2094,  2047,
         1010,  4518,  6302,  1010,  9367,  1010,  1998,  7787,  2024,  1996,
        16014,  5668,  1012,   102])"
2504,1,"['estimates', 'point estimates']", Multiple regression case study Mario Kart,seg_91,write out the model’s equation using the point estimates from figure 9.15. how many predictors are there in this model?16,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  4339,  2041,  1996,  2944,  1521,  1055,  8522,  2478,  1996,
         2391, 10035,  2013,  3275,  1023,  1012,  2321,  1012,  2129,  2116,
        16014,  5668,  2024,  2045,  1999,  2023,  2944,  1029,  2385,   102])"
2505,1,"['estimate', 'coefficient', 'point estimate', 'variable']", Multiple regression case study Mario Kart,seg_91,"what does β4, the coefficient of variable x4 (wii wheels), represent? what is the point estimate of β4?17",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2054,  2515,  1156,  2549,  1010,  1996, 19064,  1997,  8023,
         1060,  2549,  1006, 16568,  7787,  1007,  1010,  5050,  1029,  2054,
         2003,  1996,  2391, 10197,  1997,  1156,  2549,  1029,  2459,   102])"
2506,1,"['residual', 'observation']", Multiple regression case study Mario Kart,seg_91,compute the residual of the first observation in figure 9.13 using the equation identified in guided,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 24134,  1996, 21961,  1997,  1996,  2034,  8089,  1999,  3275,
         1023,  1012,  2410,  2478,  1996,  8522,  4453,  1999,  8546,   102])"
2507,1,"['regression', 'multiple regression', 'linear', 'estimated', 'estimate', 'coefficient', 'simple linear regression', 'linear regression', 'standard', 'standard error', 'error']", Multiple regression case study Mario Kart,seg_91,we estimated a coefficient for cond new in section 9.21 of b1 = 10.90 with a standard error of seb1 = 1.26 when using simple linear regression. why might there be a difference between that estimate and the one in the multiple regression setting?,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2057,  4358,  1037, 19064,  2005,  9530,  2094,  2047,  1999,
         2930,  1023,  1012,  2538,  1997, 29491,  1027,  2184,  1012,  3938,
         2007,  1037,  3115,  7561,  1997,  7367,  2497,  2487,  1027,  1015,
         1012,  2656,  2043,  2478,  3722,  7399, 26237,  1012,  2339,  2453,
         2045,  2022,  1037,  4489,  2090,  2008, 10197,  1998,  1996,  2028,
         1999,  1996,  3674, 26237,  4292,  1029,   102])"
2508,1,"['regression', 'estimated', 'outcome', 'simple linear regression', 'linear regression', 'model', 'confounding variables', 'data', 'confounding', 'linear', 'predictor', 'biased', 'confounding variable', 'collinearity', 'bias', 'control', 'variables', 'variable']", Multiple regression case study Mario Kart,seg_91,"if we examined the data carefully, we would see that there is collinearity among some predictors. for instance, when we estimated the connection of the outcome price and predictor cond new using simple linear regression, we were unable to control for other variables like the number of wii wheels included in the auction. that model was biased by the confounding variable wheels. when we use both variables, this particular underlying and unintentional bias is reduced or eliminated (though bias from other confounding variables may still remain).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2065,  2057,  8920,  1996,  2951,  5362,  1010,  2057,  2052,
         2156,  2008,  2045,  2003, 22180, 14644,  3012,  2426,  2070, 16014,
         5668,  1012,  2005,  6013,  1010,  2043,  2057,  4358,  1996,  4434,
         1997,  1996,  9560,  3976,  1998, 16014,  2953,  9530,  2094,  2047,
         2478,  3722,  7399, 26237,  1010,  2057,  2020,  4039,  2000,  2491,
         2005,  2060, 10857,  2066,  1996,  2193,  1997, 16568,  7787,  2443,
         1999,  1996, 10470,  1012,  2008,  2944,  2001, 25352,  2011,  1996,
         9530, 14876,  8630,  2075,  8023,  7787,  1012,  2043,  2057,  2224,
         2119, 10857,  1010,  2023,  3327, 10318,  1998,  4895, 18447,  4765,
        19301, 13827,  2003,  4359,  2030,  5892,  1006,  2295, 13827,  2013,
         2060,  9530, 14876,  8630,  2075, 10857,  2089,  2145,  3961,  1007,
         1012,   102])"
2509,1,"['model', 'model selection']", Multiple regression case study Mario Kart,seg_91,9.4.2 model selection,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([ 101, 1023, 1012, 1018, 1012, 1016, 2944, 4989,  102])"
2510,1,"['model', 'model selection', 'full model']", Multiple regression case study Mario Kart,seg_91,let’s revisit the model for the mario kart auction and complete model selection using backwards selection. recall that the full model took the following form:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2292,  1521,  1055,  7065, 17417,  2102,  1996,  2944,  2005,
         1996,  7986, 10556,  5339, 10470,  1998,  3143,  2944,  4989,  2478,
        11043,  4989,  1012,  9131,  2008,  1996,  2440,  2944,  2165,  1996,
         2206,  2433,  1024,   102])"
2511,1,"['full model', 'model', 'variables', 'data']", Multiple regression case study Mario Kart,seg_91,"results corresponding to the full model for the mariokart data were shown in figure 9.15 on the facing page. for this model, we consider what would happen if dropping each of the variables in the model:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3463,  7978,  2000,  1996,  2440,  2944,  2005,  1996,  7986,
         6673,  2102,  2951,  2020,  3491,  1999,  3275,  1023,  1012,  2321,
         2006,  1996,  5307,  3931,  1012,  2005,  2023,  2944,  1010,  2057,
         5136,  2054,  2052,  4148,  2065,  7510,  2169,  1997,  1996, 10857,
         1999,  1996,  2944,  1024,   102])"
2512,0,[], Multiple regression case study Mario Kart,seg_91,exclude ... cond new stock photo duration wheels ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 23329,  1012,  1012,  1012,  9530,  2094,  2047,  4518,  6302,
         9367,  7787, 10958,   102])"
2513,1,"['model', 'full model']", Multiple regression case study Mario Kart,seg_91,"for the full model, ra",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2005,  1996,  2440,  2944,  1010, 10958,   102])"
2514,1,['backward elimination'], Multiple regression case study Mario Kart,seg_91,2dj = 0.7108. how should we proceed under the backward elimination strategy?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 14134,  3501,  1027,  1014,  1012, 27671,  2620,  1012,  2129,
         2323,  2057, 10838,  2104,  1996,  8848,  9614,  5656,  1029,   102])"
2515,1,['model'], Multiple regression case study Mario Kart,seg_91,the third model without duration has the highest ra,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  1996,  2353,  2944,  2302,  9367,  2038,  1996,  3284, 10958,
          102])"
2516,1,['model'], Multiple regression case study Mario Kart,seg_91,full model. because eliminating duration leads to a model with a higher ra,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2440,  2944,  1012,  2138, 15349,  9367,  5260,  2000,  1037,
         2944,  2007,  1037,  3020, 10958,   102])"
2517,0,[], Multiple regression case study Mario Kart,seg_91,"2dj , we drop duration",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 14134,  3501,  1010,  2057,  4530,  9367,   102])"
2518,1,['model'], Multiple regression case study Mario Kart,seg_91,from the model.,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([ 101, 2013, 1996, 2944, 1012,  102])"
2519,1,"['model', 'variable']", Multiple regression case study Mario Kart,seg_91,"in example 9.26, we eliminated the duration variable, which resulted in a model with ra",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  1999,  2742,  1023,  1012,  2656,  1010,  2057,  5892,  1996,
         9367,  8023,  1010,  2029,  4504,  1999,  1037,  2944,  2007, 10958,
          102])"
2520,1,"['model', 'variable']", Multiple regression case study Mario Kart,seg_91,let’s look at if we would eliminate another variable from the model using backwards elimination:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2292,  1521,  1055,  2298,  2012,  2065,  2057,  2052, 11027,
         2178,  8023,  2013,  1996,  2944,  2478, 11043,  9614,  1024,   102])"
2521,0,[], Multiple regression case study Mario Kart,seg_91,exclude duration and ... cond new stock photo wheels ra,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 23329,  9367,  1998,  1012,  1012,  1012,  9530,  2094,  2047,
         4518,  6302,  7787, 10958,   102])"
2522,1,['variable'], Multiple regression case study Mario Kart,seg_91,"should we eliminate any additional variable, and if so, which variable should we eliminate?19",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2323,  2057, 11027,  2151,  3176,  8023,  1010,  1998,  2065,
         2061,  1010,  2029,  8023,  2323,  2057, 11027,  1029,  2539,   102])"
2523,1,['model'], Multiple regression case study Mario Kart,seg_91,"after eliminating the auction’s duration from the model, we are left with the following reduced model:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2044, 15349,  1996, 10470,  1521,  1055,  9367,  2013,  1996,
         2944,  1010,  2057,  2024,  2187,  2007,  1996,  2206,  4359,  2944,
         1024,   102])"
2524,1,['data'], Multiple regression case study Mario Kart,seg_91,"how much would you predict for the total price for the mario kart game if it was used, used a stock photo, and included two wheels and put up for auction during the time period that the mario kart data were collected?20",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2129,  2172,  2052,  2017, 16014,  2005,  1996,  2561,  3976,
         2005,  1996,  7986, 10556,  5339,  2208,  2065,  2009,  2001,  2109,
         1010,  2109,  1037,  4518,  6302,  1010,  1998,  2443,  2048,  7787,
         1998,  2404,  2039,  2005, 10470,  2076,  1996,  2051,  2558,  2008,
         1996,  7986, 10556,  5339,  2951,  2020,  5067,  1029,  2322,   102])"
2525,0,[], Multiple regression case study Mario Kart,seg_91,would you be surprised if the seller from guided practice 9.28 didn’t get the exact price predicted?21,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2052,  2017,  2022,  4527,  2065,  1996, 14939,  2013,  8546,
         3218,  1023,  1012,  2654,  2134,  1521,  1056,  2131,  1996,  6635,
         3976, 10173,  1029,  2538,   102])"
2526,1,['model'], Multiple regression case study Mario Kart,seg_91,9.4.3 checking model conditions using graphs,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  1023,  1012,  1018,  1012,  1017,  9361,  2944,  3785,  2478,
        19287,   102])"
2527,1,['model'], Multiple regression case study Mario Kart,seg_91,let’s take a closer look at the diagnostics for the mario kart model to check if the model we have identified is reasonable.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2292,  1521,  1055,  2202,  1037,  3553,  2298,  2012,  1996,
        16474,  2015,  2005,  1996,  7986, 10556,  5339,  2944,  2000,  4638,
         2065,  1996,  2944,  2057,  2031,  4453,  2003,  9608,  1012,   102])"
2528,1,"['data set', 'set', 'residuals', 'histogram', 'outliers', 'data']", Multiple regression case study Mario Kart,seg_91,check for outliers. a histogram of the residuals is shown in figure 9.16. with a data set well,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  4638,  2005,  2041, 14355,  2015,  1012,  1037,  2010,  3406,
        13113,  1997,  1996, 21961,  2015,  2003,  3491,  1999,  3275,  1023,
         1012,  2385,  1012,  2007,  1037,  2951,  2275,  2092,   102])"
2529,1,"['data set', 'set', 'outliers', 'outlier', 'data']", Multiple regression case study Mario Kart,seg_91,"over a hundred, we’re primarily looking for major outliers. while one minor outlier appears on the upper end, it is not a concern for this large of a data set.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2058,  1037,  3634,  1010,  2057,  1521,  2128,  3952,  2559,
         2005,  2350,  2041, 14355,  2015,  1012,  2096,  2028,  3576,  2041,
        14355,  3544,  2006,  1996,  3356,  2203,  1010,  2009,  2003,  2025,
         1037,  5142,  2005,  2023,  2312,  1997,  1037,  2951,  2275,  1012,
          102])"
2530,1,['residuals'], Multiple regression case study Mario Kart,seg_91,30 25 yc 20 neu 15 qer 10 f 5 0 −10 −5 0 5 10 15 residuals,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2382,  2423,  1061,  2278,  2322, 11265,  2226,  2321,  1053,
         2121,  2184,  1042,  1019,  1014,  1597, 10790,  1597,  2629,  1014,
         1019,  2184,  2321, 21961,  2015,   102])"
2531,1,"['residuals', 'histogram', 'outliers']", Multiple regression case study Mario Kart,seg_91,figure 9.16: histogram of the residuals. no clear outliers are evident.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3275,  1023,  1012,  2385,  1024,  2010,  3406, 13113,  1997,
         1996, 21961,  2015,  1012,  2053,  3154,  2041, 14355,  2015,  2024,
        10358,  1012,   102])"
2532,1,"['absolute value', 'residuals', 'fitted values', 'plot']", Multiple regression case study Mario Kart,seg_91,absolute values of residuals against fitted values. a plot of the absolute value of the resid-,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  7619,  5300,  1997, 21961,  2015,  2114,  7130,  5300,  1012,
         1037,  5436,  1997,  1996,  7619,  3643,  1997,  1996, 24501,  3593,
         1011,   102])"
2533,1,"['deviations', 'fitted values', 'variance']", Multiple regression case study Mario Kart,seg_91,uals against their corresponding fitted values (ŷi) is shown in figure 9.17. we don’t see any obvious deviations from constant variance in this example.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 25423,  4877,  2114,  2037,  7978,  7130,  5300,  1006, 12316,
         1007,  2003,  3491,  1999,  3275,  1023,  1012,  2459,  1012,  2057,
         2123,  1521,  1056,  2156,  2151,  5793, 24353,  2015,  2013,  5377,
        23284,  1999,  2023,  2742,  1012,   102])"
2534,1,"['residuals', 'data collection', 'plot', 'data']", Multiple regression case study Mario Kart,seg_91,residuals in order of their data collection. a plot of the residuals in the order their corre-,tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 21961,  2015,  1999,  2344,  1997,  2037,  2951,  3074,  1012,
         1037,  5436,  1997,  1996, 21961,  2015,  1999,  1996,  2344,  2037,
         2522, 14343,  1011,   102])"
2535,0,[], Multiple regression case study Mario Kart,seg_91,sponding auctions were observed is shown in figure 9.18. here we see no structure that indicates a problem.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 11867, 15422,  2075, 10470,  2015,  2020,  5159,  2003,  3491,
         1999,  3275,  1023,  1012,  2324,  1012,  2182,  2057,  2156,  2053,
         3252,  2008,  7127,  1037,  3291,  1012,   102])"
2536,1,"['predictor', 'residuals', 'predictor variable', 'plot', 'variable']", Multiple regression case study Mario Kart,seg_91,residuals against each predictor variable. we consider a plot of the residuals against the,tensor(1),"tensor([0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101, 21961,  2015,  2114,  2169, 16014,  2953,  8023,  1012,  2057,
         5136,  1037,  5436,  1997,  1996, 21961,  2015,  2114,  1996,   102])"
2537,1,"['variability', 'residuals', 'condition', 'plots', 'variable']", Multiple regression case study Mario Kart,seg_91,"cond new variable, the residuals against the stock photo variable, and the residuals against the wheels variable. these plots are shown in figure 9.19. for the two-level condition variable, we are guaranteed not to see any remaining trend, and instead we are checking that the variability doesn’t fluctuate across groups, which it does not. however, looking at the stock",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  9530,  2094,  2047,  8023,  1010,  1996, 21961,  2015,  2114,
         1996,  4518,  6302,  8023,  1010,  1998,  1996, 21961,  2015,  2114,
         1996,  7787,  8023,  1012,  2122, 14811,  2024,  3491,  1999,  3275,
         1023,  1012,  2539,  1012,  2005,  1996,  2048,  1011,  2504,  4650,
         8023,  1010,  2057,  2024, 12361,  2025,  2000,  2156,  2151,  3588,
         9874,  1010,  1998,  2612,  2057,  2024,  9361,  2008,  1996, 28436,
         2987,  1521,  1056, 19857,  6593, 20598,  2408,  2967,  1010,  2029,
         2009,  2515,  2025,  1012,  2174,  1010,  2559,  2012,  1996,  4518,
          102])"
2538,1,['fitted values'], Multiple regression case study Mario Kart,seg_91,$0 ● $35 $40 $45 $50 $55 $60 $65 fitted values,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([ 101, 1002, 1014, 1619, 1002, 3486, 1002, 2871, 1002, 3429, 1002, 2753,
        1002, 4583, 1002, 3438, 1002, 3515, 7130, 5300,  102])"
2539,1,"['absolute value', 'residuals', 'fitted values']", Multiple regression case study Mario Kart,seg_91,figure 9.17: absolute value of the residuals against the fitted values. no patterns are evident.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3275,  1023,  1012,  2459,  1024,  7619,  3643,  1997,  1996,
        21961,  2015,  2114,  1996,  7130,  5300,  1012,  2053,  7060,  2024,
        10358,  1012,   102])"
2540,0,[], Multiple regression case study Mario Kart,seg_91,−$10 ● 0 20 40 60 80 100 120 140 order of collection,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([ 101, 1597, 1002, 2184, 1619, 1014, 2322, 2871, 3438, 3770, 2531, 6036,
        8574, 2344, 1997, 3074,  102])"
2541,1,"['observations', 'residuals']", Multiple regression case study Mario Kart,seg_91,figure 9.18: residuals in the order that their corresponding observations were collected. there are no evident patterns.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3275,  1023,  1012,  2324,  1024, 21961,  2015,  1999,  1996,
         2344,  2008,  2037,  7978,  9420,  2020,  5067,  1012,  2045,  2024,
         2053, 10358,  7060,  1012,   102])"
2542,1,"['variability', 'linear', 'residuals', 'variable']", Multiple regression case study Mario Kart,seg_91,"photo variable, we find that there is some difference in the variability of the residuals in the two groups. additionally, when we consider the residuals against the wheels variable, we see some possible structure. there appears to be curvature in the residuals, indicating the relationship is probably not linear.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  6302,  8023,  1010,  2057,  2424,  2008,  2045,  2003,  2070,
         4489,  1999,  1996, 28436,  1997,  1996, 21961,  2015,  1999,  1996,
         2048,  2967,  1012,  5678,  1010,  2043,  2057,  5136,  1996, 21961,
         2015,  2114,  1996,  7787,  8023,  1010,  2057,  2156,  2070,  2825,
         3252,  1012,  2045,  3544,  2000,  2022, 25045,  1999,  1996, 21961,
         2015,  1010,  8131,  1996,  3276,  2003,  2763,  2025,  7399,  1012,
          102])"
2543,1,"['variance', 'information', 'nonlinear', 'results', 'model', 'data', 'variable', 'case']", Multiple regression case study Mario Kart,seg_91,"as with the loans analysis, we would summarize diagnostics when reporting the model results. in the case of this auction data, we would report that there appears to be non-constant variance in the stock photo variable and that there may be a nonlinear relationship between the total price and the number of wheels included for an auction. this information would be important to buyers and sellers who may review the analysis, and omitting this information could be a setback to the very people who the model might assist.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  2004,  2007,  1996, 10940,  4106,  1010,  2057,  2052,  7680,
         7849,  4697, 16474,  2015,  2043,  7316,  1996,  2944,  3463,  1012,
         1999,  1996,  2553,  1997,  2023, 10470,  2951,  1010,  2057,  2052,
         3189,  2008,  2045,  3544,  2000,  2022,  2512,  1011,  5377, 23284,
         1999,  1996,  4518,  6302,  8023,  1998,  2008,  2045,  2089,  2022,
         1037, 27400,  3276,  2090,  1996,  2561,  3976,  1998,  1996,  2193,
         1997,  7787,  2443,  2005,  2019, 10470,  1012,  2023,  2592,  2052,
         2022,  2590,  2000, 17394,  1998, 19041,  2040,  2089,  3319,  1996,
         4106,  1010,  1998, 18168, 12474,  2075,  2023,  2592,  2071,  2022,
         1037,  2275,  5963,  2000,  1996,  2200,  2111,  2040,  1996,  2944,
         2453,  6509,  1012,   102])"
2544,0,[], Multiple regression case study Mario Kart,seg_91,note: there are no exercises for this section.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3602,  1024,  2045,  2024,  2053, 11110,  2005,  2023,  2930,
         1012,   102])"
2545,1,"['variability', 'residuals', 'numerical', 'condition', 'distribution', 'variables', 'plot', 'variable', 'case']", Multiple regression case study Mario Kart,seg_91,"figure 9.19: for the condition and stock photo variables, we check for differences in the distribution shape or variability of the residuals. in the case of the stock photos variable, we see a little less variability in the unique photo group than the stock photo group. for numerical predictors, we also check for trends or other structure. we see some slight bowing in the residuals against the wheels variable in the bottom plot.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 3674, 26237,  2553,  2817,  7986, 10556,  5339])","tensor([  101,  3275,  1023,  1012,  2539,  1024,  2005,  1996,  4650,  1998,
         4518,  6302, 10857,  1010,  2057,  4638,  2005,  5966,  1999,  1996,
         4353,  4338,  2030, 28436,  1997,  1996, 21961,  2015,  1012,  1999,
         1996,  2553,  1997,  1996,  4518,  7760,  8023,  1010,  2057,  2156,
         1037,  2210,  2625, 28436,  1999,  1996,  4310,  6302,  2177,  2084,
         1996,  4518,  6302,  2177,  1012,  2005, 15973, 16014,  5668,  1010,
         2057,  2036,  4638,  2005, 12878,  2030,  2060,  3252,  1012,  2057,
         2156,  2070,  7263, 26690,  1999,  1996, 21961,  2015,  2114,  1996,
         7787,  8023,  1999,  1996,  3953,  5436,  1012,   102])"
2546,1,"['regression', 'generalized linear model', 'logistic', 'normal distribution', 'multiple regression', 'response variables', 'residuals', 'response', 'normal', 'logistic regression', 'model', 'linear', 'glm', 'categorical', 'linear model', 'response variable', 'levels', 'distribution', 'variables', 'variable']", Introduction to logistic regression,seg_93,"in this section we introduce logistic regression as a tool for building models when there is a categorical response variable with two levels, e.g. yes and no. logistic regression is a type of generalized linear model (glm) for response variables where regular multiple regression does not work very well. in particular, the response variable in these settings often takes a form where residuals look completely different from the normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1999,  2023,  2930,  2057,  8970,  8833,  6553, 26237,  2004,
         1037,  6994,  2005,  2311,  4275,  2043,  2045,  2003,  1037,  4937,
        27203,  3433,  8023,  2007,  2048,  3798,  1010,  1041,  1012,  1043,
         1012,  2748,  1998,  2053,  1012,  8833,  6553, 26237,  2003,  1037,
         2828,  1997, 18960,  7399,  2944,  1006,  1043, 13728,  1007,  2005,
         3433, 10857,  2073,  3180,  3674, 26237,  2515,  2025,  2147,  2200,
         2092,  1012,  1999,  3327,  1010,  1996,  3433,  8023,  1999,  2122,
        10906,  2411,  3138,  1037,  2433,  2073, 21961,  2015,  2298,  3294,
         2367,  2013,  1996,  3671,  4353,  1012,   102])"
2547,1,"['parameter', 'regression', 'multiple regression', 'probability', 'response variable', 'response', 'poisson', 'model', 'distribution', 'poisson distribution', 'glm', 'binomial', 'variable', 'probability distribution']", Introduction to logistic regression,seg_93,"glms can be thought of as a two-stage modeling approach. we first model the response variable using a probability distribution, such as the binomial or poisson distribution. second, we model the parameter of the distribution using a collection of predictors and a special form of multiple regression. ultimately, the application of a glm will feel very similar to multiple regression, even if some of the details are different.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1043, 13728,  2015,  2064,  2022,  2245,  1997,  2004,  1037,
         2048,  1011,  2754, 11643,  3921,  1012,  2057,  2034,  2944,  1996,
         3433,  8023,  2478,  1037,  9723,  4353,  1010,  2107,  2004,  1996,
         8026, 20936,  2389,  2030, 13433, 24077,  4353,  1012,  2117,  1010,
         2057,  2944,  1996, 16381,  1997,  1996,  4353,  2478,  1037,  3074,
         1997, 16014,  5668,  1998,  1037,  2569,  2433,  1997,  3674, 26237,
         1012,  4821,  1010,  1996,  4646,  1997,  1037,  1043, 13728,  2097,
         2514,  2200,  2714,  2000,  3674, 26237,  1010,  2130,  2065,  2070,
         1997,  1996,  4751,  2024,  2367,  1012,   102])"
2548,1,['data'], Introduction to logistic regression,seg_93,9.5.1 resume data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1023,  1012,  1019,  1012,  1015, 13746,  2951,   102])"
2549,1,"['set', 'factors', 'experiment', 'rates', 'data set', 'data']", Introduction to logistic regression,seg_93,"we will consider experiment data from a study that sought to understand the effect of race and sex on job application callback rates; details of the study and a link to the data set may be found in appendix b.9. to evaluate which factors were important, job postings were identified in boston and chicago for the study, and researchers created many fake resumes to send off to these jobs to see which would elicit a callback. the researchers enumerated important characteristics, such as years of experience and education details, and they used these characteristics to randomly generate the resumes. finally, they randomly assigned a name to each resume, where the name would imply the applicant’s sex and race.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2097,  5136,  7551,  2951,  2013,  1037,  2817,  2008,
         4912,  2000,  3305,  1996,  3466,  1997,  2679,  1998,  3348,  2006,
         3105,  4646,  2655,  5963,  6165,  1025,  4751,  1997,  1996,  2817,
         1998,  1037,  4957,  2000,  1996,  2951,  2275,  2089,  2022,  2179,
         1999, 22524,  1038,  1012,  1023,  1012,  2000, 16157,  2029,  5876,
         2020,  2590,  1010,  3105, 14739,  2015,  2020,  4453,  1999,  3731,
         1998,  3190,  2005,  1996,  2817,  1010,  1998,  6950,  2580,  2116,
         8275, 13746,  2015,  2000,  4604,  2125,  2000,  2122,  5841,  2000,
         2156,  2029,  2052, 12005, 26243,  1037,  2655,  5963,  1012,  1996,
         6950,  4372, 17897,  9250,  2590,  6459,  1010,  2107,  2004,  2086,
         1997,  3325,  1998,  2495,  4751,  1010,  1998,  2027,  2109,  2122,
         6459,  2000, 18154,  9699,  1996, 13746,  2015,  1012,  2633,  1010,
         2027, 18154,  4137,  1037,  2171,  2000,  2169, 13746,  1010,  2073,
         1996,  2171,  2052, 19515,  1996, 23761,  1521,  1055,  3348,  1998,
         2679,  1012,   102])"
2550,1,"['associated', 'set', 'experiment', 'association', 'test']", Introduction to logistic regression,seg_93,"the first names that were used and randomly assigned in this experiment were selected so that they would predominantly be recognized as belonging to black or white individuals; other races were not considered in this study. while no name would definitively be inferred as pertaining to a black individual or to a white individual, the researchers conducted a survey to check for racial association of the names; names that did not pass this survey check were excluded from usage in the experiment. you can find the full set of names that did pass the survey test and were ultimately used in the study in figure 9.20. for example, lakisha was a name that their survey indicated would be interpreted as a black woman, while greg was a name that would generally be interpreted to be associated with a white male.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  2034,  3415,  2008,  2020,  2109,  1998, 18154,  4137,
         1999,  2023,  7551,  2020,  3479,  2061,  2008,  2027,  2052,  9197,
         2022,  3858,  2004,  7495,  2000,  2304,  2030,  2317,  3633,  1025,
         2060,  3837,  2020,  2025,  2641,  1999,  2023,  2817,  1012,  2096,
         2053,  2171,  2052, 15764,  2135,  2022,  1999,  7512,  5596,  2004,
        20246,  2000,  1037,  2304,  3265,  2030,  2000,  1037,  2317,  3265,
         1010,  1996,  6950,  4146,  1037,  5002,  2000,  4638,  2005,  5762,
         2523,  1997,  1996,  3415,  1025,  3415,  2008,  2106,  2025,  3413,
         2023,  5002,  4638,  2020, 12421,  2013,  8192,  1999,  1996,  7551,
         1012,  2017,  2064,  2424,  1996,  2440,  2275,  1997,  3415,  2008,
         2106,  3413,  1996,  5002,  3231,  1998,  2020,  4821,  2109,  1999,
         1996,  2817,  1999,  3275,  1023,  1012,  2322,  1012,  2005,  2742,
         1010,  2474, 14270,  3270,  2001,  1037,  2171,  2008,  2037,  5002,
         5393,  2052,  2022, 10009,  2004,  1037,  2304,  2450,  1010,  2096,
         6754,  2001,  1037,  2171,  2008,  2052,  3227,  2022, 10009,  2000,
         2022,  3378,  2007,  1037,  2317,  3287,  1012,   102])"
2551,1,['associated'], Introduction to logistic regression,seg_93,figure 9.20: list of all 36 unique names along with the commonly inferred race and sex associated with these names.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([ 101, 3275, 1023, 1012, 2322, 1024, 2862, 1997, 2035, 4029, 4310, 3415,
        2247, 2007, 1996, 4141, 1999, 7512, 5596, 2679, 1998, 3348, 3378, 2007,
        2122, 3415, 1012,  102])"
2552,1,"['set', 'response variable', 'states', 'protected classes', 'response', 'factors', 'variables', 'variable']", Introduction to logistic regression,seg_93,"the response variable of interest is whether or not there was a callback from the employer for the applicant, and there were 8 attributes that were randomly assigned that we’ll consider, with special interest in the race and sex variables. race and sex are protected classes in the united states, meaning they are not legally permitted factors for hiring or employment decisions. the full set of attributes considered is provided in figure 9.21.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  3433,  8023,  1997,  3037,  2003,  3251,  2030,  2025,
         2045,  2001,  1037,  2655,  5963,  2013,  1996, 11194,  2005,  1996,
        23761,  1010,  1998,  2045,  2020,  1022, 12332,  2008,  2020, 18154,
         4137,  2008,  2057,  1521,  2222,  5136,  1010,  2007,  2569,  3037,
         1999,  1996,  2679,  1998,  3348, 10857,  1012,  2679,  1998,  3348,
         2024,  5123,  4280,  1999,  1996,  2142,  2163,  1010,  3574,  2027,
         2024,  2025, 10142,  7936,  5876,  2005, 14763,  2030,  6107,  6567,
         1012,  1996,  2440,  2275,  1997, 12332,  2641,  2003,  3024,  1999,
         3275,  1023,  1012,  2538,  1012,   102])"
2553,1,"['data', 'set', 'indicator variables', 'variables', 'data set', 'indicator', 'variable']", Introduction to logistic regression,seg_93,"figure 9.21: descriptions for the callback variable along with 8 other variables in the resume data set. many of the variables are indicator variables, meaning they take the value 1 if the specified characteristic is present and 0 otherwise.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  3275,  1023,  1012,  2538,  1024, 13271,  2005,  1996,  2655,
         5963,  8023,  2247,  2007,  1022,  2060, 10857,  1999,  1996, 13746,
         2951,  2275,  1012,  2116,  1997,  1996, 10857,  2024, 17245, 10857,
         1010,  3574,  2027,  2202,  1996,  3643,  1015,  2065,  1996,  9675,
         8281,  2003,  2556,  1998,  1014,  4728,  1012,   102])"
2554,1,"['rate', 'experimental', 'statistically significant', 'variables', 'variable']", Introduction to logistic regression,seg_93,"all of the attributes listed on each resume were randomly assigned. this means that no attributes that might be favorable or detrimental to employment would favor one demographic over another on these resumes. importantly, due to the experimental nature of this study, we can infer causation between these variables and the callback rate, if the variable is statistically significant. our analysis will allow us to compare the practical importance of each of the variables relative to each other.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2035,  1997,  1996, 12332,  3205,  2006,  2169, 13746,  2020,
        18154,  4137,  1012,  2023,  2965,  2008,  2053, 12332,  2008,  2453,
         2022, 11119,  2030, 29172,  2000,  6107,  2052,  5684,  2028, 15982,
         2058,  2178,  2006,  2122, 13746,  2015,  1012, 14780,  1010,  2349,
         2000,  1996,  6388,  3267,  1997,  2023,  2817,  1010,  2057,  2064,
         1999,  7512,  6187, 10383,  3508,  2090,  2122, 10857,  1998,  1996,
         2655,  5963,  3446,  1010,  2065,  1996,  8023,  2003,  7778,  2135,
         3278,  1012,  2256,  4106,  2097,  3499,  2149,  2000, 12826,  1996,
         6742,  5197,  1997,  2169,  1997,  1996, 10857,  5816,  2000,  2169,
         2060,  1012,   102])"
2555,1,"['probability', 'probability of an event', 'event']", Introduction to logistic regression,seg_93,9.5.2 modeling the probability of an event,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1023,  1012,  1019,  1012,  1016, 11643,  1996,  9723,  1997,
         2019,  2724,   102])"
2556,1,"['regression', 'outcome', 'generalized linear model', 'observation', 'categorical variable', 'model', 'linear', 'predictor', 'probability', 'level', 'predictor variables', 'rates', 'categorical', 'linear model', 'variables', 'variable']", Introduction to logistic regression,seg_93,"logistic regression is a generalized linear model where the outcome is a two-level categorical variable. the outcome, yi, takes the value 1 (in our application, this represents a callback for the resume) with probability pi and the value 0 with probability 1− pi. because each observation has a slightly different context, e.g. different education level or a different number of years of experience, the probability pi will differ for each observation. ultimately, it is this probability that we model in relation to the predictor variables: we will examine which resume characteristics correspond to higher or lower callback rates.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  8833,  6553, 26237,  2003,  1037, 18960,  7399,  2944,  2073,
         1996,  9560,  2003,  1037,  2048,  1011,  2504,  4937, 27203,  8023,
         1012,  1996,  9560,  1010, 12316,  1010,  3138,  1996,  3643,  1015,
         1006,  1999,  2256,  4646,  1010,  2023,  5836,  1037,  2655,  5963,
         2005,  1996, 13746,  1007,  2007,  9723, 14255,  1998,  1996,  3643,
         1014,  2007,  9723,  1015, 22543, 14255,  1012,  2138,  2169,  8089,
         2038,  1037,  3621,  2367,  6123,  1010,  1041,  1012,  1043,  1012,
         2367,  2495,  2504,  2030,  1037,  2367,  2193,  1997,  2086,  1997,
         3325,  1010,  1996,  9723, 14255,  2097, 11234,  2005,  2169,  8089,
         1012,  4821,  1010,  2009,  2003,  2023,  9723,  2008,  2057,  2944,
         1999,  7189,  2000,  1996, 16014,  2953, 10857,  1024,  2057,  2097,
        11628,  2029, 13746,  6459, 17254,  2000,  3020,  2030,  2896,  2655,
         5963,  6165,  1012,   102])"
2557,1,"['observation', 'variable', 'outcome', 'glm']", Introduction to logistic regression,seg_93,"the outcome variable for a glm is denoted by yi, where the index i is used to represent observation i. in the resume application, yi will be used to represent whether resume i received a callback (yi = 1) or not (yi = 0).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  9560,  8023,  2005,  1037,  1043, 13728,  2003, 19537,
         2011, 12316,  1010,  2073,  1996,  5950,  1045,  2003,  2109,  2000,
         5050,  8089,  1045,  1012,  1999,  1996, 13746,  4646,  1010, 12316,
         2097,  2022,  2109,  2000,  5050,  3251, 13746,  1045,  2363,  1037,
         2655,  5963,  1006, 12316,  1027,  1015,  1007,  2030,  2025,  1006,
        12316,  1027,  1014,  1007,  1012,   102])"
2558,1,"['observation', 'predictor', 'predictor variables', 'variables', 'variable']", Introduction to logistic regression,seg_93,"the predictor variables are represented as follows: x1,i is the value of variable 1 for observation i, x2,i is the value of variable 2 for observation i, and so on.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996, 16014,  2953, 10857,  2024,  3421,  2004,  4076,  1024,
         1060,  2487,  1010,  1045,  2003,  1996,  3643,  1997,  8023,  1015,
         2005,  8089,  1045,  1010,  1060,  2475,  1010,  1045,  2003,  1996,
         3643,  1997,  8023,  1016,  2005,  8089,  1045,  1010,  1998,  2061,
         2006,  1012,   102])"
2559,1,"['logistic regression model', 'regression', 'multiple regression', 'probability', 'regression model', 'logistic regression', 'model', 'logistic']", Introduction to logistic regression,seg_93,"the logistic regression model relates the probability a resume would receive a callback (pi) to the predictors x1,i, x2,i, ..., xk,i through a framework much like that of multiple regression:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  8833,  6553, 26237,  2944, 14623,  1996,  9723,  1037,
        13746,  2052,  4374,  1037,  2655,  5963,  1006, 14255,  1007,  2000,
         1996, 16014,  5668,  1060,  2487,  1010,  1045,  1010,  1060,  2475,
         1010,  1045,  1010,  1012,  1012,  1012,  1010,  1060,  2243,  1010,
         1045,  2083,  1037,  7705,  2172,  2066,  2008,  1997,  3674, 26237,
         1024,   102])"
2560,1,"['logit transformation', 'range', 'logit', 'transformation']", Introduction to logistic regression,seg_93,"we want to choose a transformation in the equation that makes practical and mathematical sense. for example, we want a transformation that makes the range of possibilities on the left hand side of the equation equal to the range of possibilities for the right hand side; if there was no transformation for this equation, the left hand side could only take values between 0 and 1, but the right hand side could take values outside of this range. a common transformation for pi is the logit transformation, which may be written as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2215,  2000,  5454,  1037,  8651,  1999,  1996,  8522,
         2008,  3084,  6742,  1998,  8045,  3168,  1012,  2005,  2742,  1010,
         2057,  2215,  1037,  8651,  2008,  3084,  1996,  2846,  1997, 12020,
         2006,  1996,  2187,  2192,  2217,  1997,  1996,  8522,  5020,  2000,
         1996,  2846,  1997, 12020,  2005,  1996,  2157,  2192,  2217,  1025,
         2065,  2045,  2001,  2053,  8651,  2005,  2023,  8522,  1010,  1996,
         2187,  2192,  2217,  2071,  2069,  2202,  5300,  2090,  1014,  1998,
         1015,  1010,  2021,  1996,  2157,  2192,  2217,  2071,  2202,  5300,
         2648,  1997,  2023,  2846,  1012,  1037,  2691,  8651,  2005, 14255,
         2003,  1996,  8833,  4183,  8651,  1010,  2029,  2089,  2022,  2517,
         2004,   102])"
2561,0,[], Introduction to logistic regression,seg_93,pi logit(pi) = loge(1− pi),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101, 14255,  8833,  4183,  1006, 14255,  1007,  1027,  8833,  2063,
         1006,  1015, 22543, 14255,  1007,   102])"
2562,1,"['logit', 'logit transformation', 'transformation']", Introduction to logistic regression,seg_93,"the logit transformation is shown in figure 9.22. below, we rewrite the equation relating yi to its",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  8833,  4183,  8651,  2003,  3491,  1999,  3275,  1023,
         1012,  2570,  1012,  2917,  1010,  2057,  2128, 26373,  1996,  8522,
         8800, 12316,  2000,  2049,   102])"
2563,0,[], Introduction to logistic regression,seg_93,figure 9.22: values of pi against values of logit(pi).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  3275,  1023,  1012,  2570,  1024,  5300,  1997, 14255,  2114,
         5300,  1997,  8833,  4183,  1006, 14255,  1007,  1012,   102])"
2564,1,"['logit', 'logit transformation', 'transformation']", Introduction to logistic regression,seg_93,predictors using the logit transformation of pi:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101, 16014,  5668,  2478,  1996,  8833,  4183,  8651,  1997, 14255,
         1024,   102])"
2565,1,"['function', 'regression', 'linear', 'predictor', 'multiple regression', 'generalized linear models', 'coefficients', 'logit', 'logit function', 'predictor variables', 'model', 'variables']", Introduction to logistic regression,seg_93,"in our resume example, there are 8 predictor variables, so k = 8. while the precise choice of a logit function isn’t intuitive, it is based on theory that underpins generalized linear models, which is beyond the scope of this book. fortunately, once we fit a model using software, it will start to feel like we’re back in the multiple regression context, even if the interpretation of the coefficients is more complex.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1999,  2256, 13746,  2742,  1010,  2045,  2024,  1022, 16014,
         2953, 10857,  1010,  2061,  1047,  1027,  1022,  1012,  2096,  1996,
        10480,  3601,  1997,  1037,  8833,  4183,  3853,  3475,  1521,  1056,
        29202,  1010,  2009,  2003,  2241,  2006,  3399,  2008,  2104, 27915,
        18960,  7399,  4275,  1010,  2029,  2003,  3458,  1996,  9531,  1997,
         2023,  2338,  1012, 14599,  1010,  2320,  2057,  4906,  1037,  2944,
         2478,  4007,  1010,  2009,  2097,  2707,  2000,  2514,  2066,  2057,
         1521,  2128,  2067,  1999,  1996,  3674, 26237,  6123,  1010,  2130,
         2065,  1996,  7613,  1997,  1996, 21374,  2003,  2062,  3375,  1012,
          102])"
2566,1,"['logistic regression model', 'regression', 'predictor', 'regression model', 'logistic regression', 'statistical', 'model', 'logistic', 'variable']", Introduction to logistic regression,seg_93,"we start by fitting a model with a single predictor: honors. this variable indicates whether the applicant had any type of honors listed on their resume, such as employee of the month. the following logistic regression model was fit using statistical software:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2707,  2011, 11414,  1037,  2944,  2007,  1037,  2309,
        16014,  2953,  1024,  7836,  1012,  2023,  8023,  7127,  3251,  1996,
        23761,  2018,  2151,  2828,  1997,  7836,  3205,  2006,  2037, 13746,
         1010,  2107,  2004,  7904,  1997,  1996,  3204,  1012,  1996,  2206,
         8833,  6553, 26237,  2944,  2001,  4906,  2478,  7778,  4007,  1024,
          102])"
2567,1,['probability'], Introduction to logistic regression,seg_93,"(a) if a resume is randomly selected from the study and it does not have any honors listed, what is the probability resulted in a callback? (b) what would the probability be if the resume did list some honors?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1006,  1037,  1007,  2065,  1037, 13746,  2003, 18154,  3479,
         2013,  1996,  2817,  1998,  2009,  2515,  2025,  2031,  2151,  7836,
         3205,  1010,  2054,  2003,  1996,  9723,  4504,  1999,  1037,  2655,
         5963,  1029,  1006,  1038,  1007,  2054,  2052,  1996,  9723,  2022,
         2065,  1996, 13746,  2106,  2862,  2070,  7836,  1029,   102])"
2568,1,['model'], Introduction to logistic regression,seg_93,"(a) if a randomly chosen resume from those sent out is considered, and it does not list honors, then honors takes value 0 and the right side of the model equation equals -2.4998. solving for pi:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1006,  1037,  1007,  2065,  1037, 18154,  4217, 13746,  2013,
         2216,  2741,  2041,  2003,  2641,  1010,  1998,  2009,  2515,  2025,
         2862,  7836,  1010,  2059,  7836,  3138,  3643,  1014,  1998,  1996,
         2157,  2217,  1997,  1996,  2944,  8522, 19635,  1011,  1016,  1012,
         4749,  2683,  2620,  1012, 13729,  2005, 14255,  1024,   102])"
2569,1,"['probability', 'regression']", Introduction to logistic regression,seg_93,"−2.4998 = 0.076. just as we labeled a fitted value of yi with a “hat” in single-variable and multiple 1+e regression, we do the same for this probability: p̂i = 0.076.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1597,  2475,  1012,  4749,  2683,  2620,  1027,  1014,  1012,
         5718,  2575,  1012,  2074,  2004,  2057, 12599,  1037,  7130,  3643,
         1997, 12316,  2007,  1037,  1523,  6045,  1524,  1999,  2309,  1011,
         8023,  1998,  3674,  1015,  1009,  1041, 26237,  1010,  2057,  2079,
         1996,  2168,  2005,  2023,  9723,  1024, 14255,  1027,  1014,  1012,
         5718,  2575,  1012,   102])"
2570,1,"['model', 'probability']", Introduction to logistic regression,seg_93,"(b) if the resume had listed some honors, then the right side of the model equation is −2.4998 + 0.8668× 1 = −1.6330, which corresponds to a probability p̂i = 0.163.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1006,  1038,  1007,  2065,  1996, 13746,  2018,  3205,  2070,
         7836,  1010,  2059,  1996,  2157,  2217,  1997,  1996,  2944,  8522,
         2003,  1597,  2475,  1012,  4749,  2683,  2620,  1009,  1014,  1012,
         6564,  2575,  2620, 26306,  1015,  1027,  1597,  2487,  1012,  6191,
        14142,  1010,  2029, 14788,  2000,  1037,  9723, 14255,  1027,  1014,
         1012, 17867,  1012,   102])"
2571,1,"['probability', 'estimate']", Introduction to logistic regression,seg_93,notice that we could examine -2.4998 and -1.6330 in figure 9.22 to estimate the probability before formally calculating the value.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  5060,  2008,  2057,  2071, 11628,  1011,  1016,  1012,  4749,
         2683,  2620,  1998,  1011,  1015,  1012,  6191, 14142,  1999,  3275,
         1023,  1012,  2570,  2000, 10197,  1996,  9723,  2077,  6246, 20177,
         1996,  3643,  1012,   102])"
2572,1,"['regression', 'regression model', 'logistic regression', 'model', 'logistic']", Introduction to logistic regression,seg_93,"to convert from values on the logistic regression scale (e.g. -2.4998 and -1.6330 in example 9.31), use the following formula, which is the result of solving for pi in the regression model:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2000, 10463,  2013,  5300,  2006,  1996,  8833,  6553, 26237,
         4094,  1006,  1041,  1012,  1043,  1012,  1011,  1016,  1012,  4749,
         2683,  2620,  1998,  1011,  1015,  1012,  6191, 14142,  1999,  2742,
         1023,  1012,  2861,  1007,  1010,  2224,  1996,  2206,  5675,  1010,
         2029,  2003,  1996,  2765,  1997, 13729,  2005, 14255,  1999,  1996,
        26237,  2944,  1024,   102])"
2573,1,"['estimates', 'probabilities', 'point estimates', 'parameters', 'data']", Introduction to logistic regression,seg_93,"as with most applied data problems, we substitute the point estimates for the parameters (the βi) so that we can make use of this formula. in example 9.31, the probabilities were calculated as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2004,  2007,  2087,  4162,  2951,  3471,  1010,  2057,  7681,
         1996,  2391, 10035,  2005,  1996, 11709,  1006,  1996,  1156,  2072,
         1007,  2061,  2008,  2057,  2064,  2191,  2224,  1997,  2023,  5675,
         1012,  1999,  2742,  1023,  1012,  2861,  1010,  1996,  4013,  3676,
        14680,  2020, 10174,  2004,   102])"
2574,1,['variables'], Introduction to logistic regression,seg_93,"while knowing whether a resume listed honors provides some signal when predicting whether or not the employer would call, we would like to account for many different variables at once to understand how each of the different resume characteristics affected the chance of a callback.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2096,  4209,  3251,  1037, 13746,  3205,  7836,  3640,  2070,
         4742,  2043, 29458,  3251,  2030,  2025,  1996, 11194,  2052,  2655,
         1010,  2057,  2052,  2066,  2000,  4070,  2005,  2116,  2367, 10857,
         2012,  2320,  2000,  3305,  2129,  2169,  1997,  1996,  2367, 13746,
         6459,  5360,  1996,  3382,  1997,  1037,  2655,  5963,  1012,   102])"
2575,1,"['variables', 'model', 'logistic model', 'logistic']", Introduction to logistic regression,seg_93,9.5.3 building the logistic model with many variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1023,  1012,  1019,  1012,  1017,  2311,  1996,  8833,  6553,
         2944,  2007,  2116, 10857,   102])"
2576,1,"['logistic regression model', 'normal distribution', 'regression', 'multiple regression', 'table', 'regression model', 'normal', 'logistic regression', 'statistical', 'distribution', 'model', 'logistic']", Introduction to logistic regression,seg_93,"we used statistical software to fit the logistic regression model with all 8 predictors described in figure 9.21. like multiple regression, the result may be presented in a summary table, which is shown in figure 9.23. the structure of this table is almost identical to that of multiple regression; the only notable difference is that the p-values are calculated using the normal distribution rather than the t-distribution.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2109,  7778,  4007,  2000,  4906,  1996,  8833,  6553,
        26237,  2944,  2007,  2035,  1022, 16014,  5668,  2649,  1999,  3275,
         1023,  1012,  2538,  1012,  2066,  3674, 26237,  1010,  1996,  2765,
         2089,  2022,  3591,  1999,  1037, 12654,  2795,  1010,  2029,  2003,
         3491,  1999,  3275,  1023,  1012,  2603,  1012,  1996,  3252,  1997,
         2023,  2795,  2003,  2471,  7235,  2000,  2008,  1997,  3674, 26237,
         1025,  1996,  2069,  3862,  4489,  2003,  2008,  1996,  1052,  1011,
         5300,  2024, 10174,  2478,  1996,  3671,  4353,  2738,  2084,  1996,
         1056,  1011,  4353,  1012,   102])"
2577,1,['error'], Introduction to logistic regression,seg_93,estimate std. error z value pr(>|z|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1062,  3643, 10975,  1006,
         1028,  1064,  1062,  1064,  1007,   102])"
2578,1,['intercept'], Introduction to logistic regression,seg_93,(intercept) -2.6632 0.1820 -14.64 <0.0001 job city: chicago -0.4403 0.1142 -3.85 0.0001 college degree -0.0666 0.1211 -0.55 0.5821 years experience 0.0200 0.0102 1.96 0.0503 honors 0.7694 0.1858 4.14 <0.0001 military -0.3422 0.2157 -1.59 0.1127 email address 0.2183 0.1133 1.93 0.0541 race: white 0.4424 0.1080 4.10 <0.0001 sex: male -0.1818 0.1376 -1.32 0.1863,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1006, 19115,  1007,  1011,  1016,  1012,  5764, 16703,  1014,
         1012, 11102,  1011,  2403,  1012,  4185,  1026,  1014,  1012,  2199,
         2487,  3105,  2103,  1024,  3190,  1011,  1014,  1012, 17422,  2509,
         1014,  1012, 12457,  2475,  1011,  1017,  1012,  5594,  1014,  1012,
         2199,  2487,  2267,  3014,  1011,  1014,  1012,  5757, 28756,  1014,
         1012, 12606,  2487,  1011,  1014,  1012,  4583,  1014,  1012,  5388,
        17465,  2086,  3325,  1014,  1012,  6185,  8889,  1014,  1012,  5890,
         2692,  2475,  1015,  1012,  5986,  1014,  1012, 28714,  2509,  7836,
         1014,  1012,  6146,  2683,  2549,  1014,  1012,  8517,  1018,  1012,
         2403,  1026,  1014,  1012,  2199,  2487,  2510,  1011,  1014,  1012,
         4090, 19317,  1014,  1012, 17405,  2581,  1011,  1015,  1012,  5354,
         1014,  1012, 11176,  2581, 10373,  4769,  1014,  1012, 20741,  2509,
         1014,  1012, 12104,  2509,  1015,  1012,  6109,  1014,  1012,  5709,
        23632,  2679,  1024,  2317,  1014,  1012,  4008, 18827,  1014,  1012,
        10715,  2692,  1018,  1012,  2184,  1026,  1014,  1012,  2199,  2487,
         3348,  1024,  3287,  1011,  1014,  1012, 12094,  1014,  1012, 14989,
         2575,  1011,  1015,  1012,  3590,  1014,  1012,  6899,   102])"
2579,1,"['logistic regression model', 'regression', 'table', 'regression model', 'logistic regression', 'model', 'logistic']", Introduction to logistic regression,seg_93,figure 9.23: summary table for the full logistic regression model for the resume callback example.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  3275,  1023,  1012,  2603,  1024, 12654,  2795,  2005,  1996,
         2440,  8833,  6553, 26237,  2944,  2005,  1996, 13746,  2655,  5963,
         2742,  1012,   102])"
2580,1,"['regression', 'multiple regression', 'backward elimination', 'information', 'akaike information criterion', 'adjusted', 'model', 'variables', 'statistic', 'variable']", Introduction to logistic regression,seg_93,"just like multiple regression, we could trim some variables from the model. here we’ll use a statistic called akaike information criterion (aic), which is an analog to how we used adjusted r-squared in multiple regression, and we look for models with a lower aic through a backward elimination strategy. after using this criteria, the college degree variable is eliminated, giving the smaller model summarized in figure 9.24, which is what we’ll rely on for the remainder of this section.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2074,  2066,  3674, 26237,  1010,  2057,  2071, 12241,  2070,
        10857,  2013,  1996,  2944,  1012,  2182,  2057,  1521,  2222,  2224,
         1037, 28093,  6553,  2170,  9875, 17339,  2592, 19229,  1006,  9932,
         2278,  1007,  1010,  2029,  2003,  2019, 11698,  2000,  2129,  2057,
         2109, 10426,  1054,  1011, 19942,  1999,  3674, 26237,  1010,  1998,
         2057,  2298,  2005,  4275,  2007,  1037,  2896,  9932,  2278,  2083,
         1037,  8848,  9614,  5656,  1012,  2044,  2478,  2023,  9181,  1010,
         1996,  2267,  3014,  8023,  2003,  5892,  1010,  3228,  1996,  3760,
         2944, 22539,  1999,  3275,  1023,  1012,  2484,  1010,  2029,  2003,
         2054,  2057,  1521,  2222, 11160,  2006,  2005,  1996,  6893,  1997,
         2023,  2930,  1012,   102])"
2581,1,['error'], Introduction to logistic regression,seg_93,estimate std. error z value pr(>|z|),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101, 10197,  2358,  2094,  1012,  7561,  1062,  3643, 10975,  1006,
         1028,  1064,  1062,  1064,  1007,   102])"
2582,1,['intercept'], Introduction to logistic regression,seg_93,(intercept) -2.7162 0.1551 -17.51 <0.0001 job city: chicago -0.4364 0.1141 -3.83 0.0001 years experience 0.0206 0.0102 2.02 0.0430 honors 0.7634 0.1852 4.12 <0.0001 military -0.3443 0.2157 -1.60 0.1105 email address 0.2221 0.1130 1.97 0.0494 race: white 0.4429 0.1080 4.10 <0.0001 sex: male -0.1959 0.1352 -1.45 0.1473,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1006, 19115,  1007,  1011,  1016,  1012,  6390,  2575,  2475,
         1014,  1012, 14168,  2487,  1011,  2459,  1012,  4868,  1026,  1014,
         1012,  2199,  2487,  3105,  2103,  1024,  3190,  1011,  1014,  1012,
         4724, 21084,  1014,  1012, 12457,  2487,  1011,  1017,  1012,  6640,
         1014,  1012,  2199,  2487,  2086,  3325,  1014,  1012,  6185,  2692,
         2575,  1014,  1012,  5890,  2692,  2475,  1016,  1012,  6185,  1014,
         1012,  5840, 14142,  7836,  1014,  1012,  6146, 22022,  1014,  1012,
         8784,  1018,  1012,  2260,  1026,  1014,  1012,  2199,  2487,  2510,
         1011,  1014,  1012, 29386,  2509,  1014,  1012, 17405,  2581,  1011,
         1015,  1012,  3438,  1014,  1012,  7287,  2629, 10373,  4769,  1014,
         1012, 19015,  2487,  1014,  1012, 12104,  2692,  1015,  1012,  5989,
         1014,  1012,  5840,  2683,  2549,  2679,  1024,  2317,  1014,  1012,
         4008, 24594,  1014,  1012, 10715,  2692,  1018,  1012,  2184,  1026,
         1014,  1012,  2199,  2487,  3348,  1024,  3287,  1011,  1014,  1012,
         3851,  1014,  1012, 11502,  2475,  1011,  1015,  1012,  3429,  1014,
         1012, 16471,  2509,   102])"
2583,1,"['logistic regression model', 'regression', 'table', 'regression model', 'logistic regression', 'model', 'logistic', 'variable']", Introduction to logistic regression,seg_93,"figure 9.24: summary table for the logistic regression model for the resume callback example, where variable selection has been performed using aic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  3275,  1023,  1012,  2484,  1024, 12654,  2795,  2005,  1996,
         8833,  6553, 26237,  2944,  2005,  1996, 13746,  2655,  5963,  2742,
         1010,  2073,  8023,  4989,  2038,  2042,  2864,  2478,  9932,  2278,
         1012,   102])"
2584,1,"['factor', 'results', 'levels', 'model', 'variable']", Introduction to logistic regression,seg_93,"the race variable had taken only two levels: black and white. based on the model results, was race a meaningful factor for if a prospective employer would call back?",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  2679,  8023,  2018,  2579,  2069,  2048,  3798,  1024,
         2304,  1998,  2317,  1012,  2241,  2006,  1996,  2944,  3463,  1010,
         2001,  2679,  1037, 15902,  5387,  2005,  2065,  1037, 17464, 11194,
         2052,  2655,  2067,  1029,   102])"
2585,1,"['rate', 'data', 'coefficient', 'level', 'statistically significant']", Introduction to logistic regression,seg_93,"we see that the p-value for this coefficient is very small (very nearly zero), which implies that race played a statistically significant role in whether a candidate received a callback. additionally, we see that the coefficient shown corresponds to the level of white, and it is positive. this positive coefficient reflects a positive gain in callback rate for resumes where the candidate’s first name implied they were white. the data provide very strong evidence of racism by prospective employers that favors resumes where the first name is typically interpreted to be white.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2156,  2008,  1996,  1052,  1011,  3643,  2005,  2023,
        19064,  2003,  2200,  2235,  1006,  2200,  3053,  5717,  1007,  1010,
         2029, 12748,  2008,  2679,  2209,  1037,  7778,  2135,  3278,  2535,
         1999,  3251,  1037,  4018,  2363,  1037,  2655,  5963,  1012,  5678,
         1010,  2057,  2156,  2008,  1996, 19064,  3491, 14788,  2000,  1996,
         2504,  1997,  2317,  1010,  1998,  2009,  2003,  3893,  1012,  2023,
         3893, 19064, 11138,  1037,  3893,  5114,  1999,  2655,  5963,  3446,
         2005, 13746,  2015,  2073,  1996,  4018,  1521,  1055,  2034,  2171,
        13339,  2027,  2020,  2317,  1012,  1996,  2951,  3073,  2200,  2844,
         3350,  1997, 14398,  2011, 17464, 12433,  2008, 21191, 13746,  2015,
         2073,  1996,  2034,  2171,  2003,  4050, 10009,  2000,  2022,  2317,
         1012,   102])"
2586,1,"['coefficient', 'estimates', 'experiment', 'full model', 'model', 'point estimates', 'variables', 'observational data', 'data']", Introduction to logistic regression,seg_93,"the coefficient of racewhite in the full model in figure 9.23, is nearly identical to the model shown in figure 9.24. the predictors in this experiment were thoughtfully laid out so that the coefficient estimates would typically not be much influenced by which other predictors were in the model, which aligned with the motivation of the study to tease out which effects were important to getting a callback. in most observational data, it’s common for point estimates to change a little, and sometimes a lot, depending on which other variables are included in the model.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996, 19064,  1997,  2679,  2860, 16584,  2063,  1999,  1996,
         2440,  2944,  1999,  3275,  1023,  1012,  2603,  1010,  2003,  3053,
         7235,  2000,  1996,  2944,  3491,  1999,  3275,  1023,  1012,  2484,
         1012,  1996, 16014,  5668,  1999,  2023,  7551,  2020, 19897,  4201,
         2041,  2061,  2008,  1996, 19064, 10035,  2052,  4050,  2025,  2022,
         2172,  5105,  2011,  2029,  2060, 16014,  5668,  2020,  1999,  1996,
         2944,  1010,  2029, 13115,  2007,  1996, 14354,  1997,  1996,  2817,
         2000, 18381,  2041,  2029,  3896,  2020,  2590,  2000,  2893,  1037,
         2655,  5963,  1012,  1999,  2087,  8089,  2389,  2951,  1010,  2009,
         1521,  1055,  2691,  2005,  2391, 10035,  2000,  2689,  1037,  2210,
         1010,  1998,  2823,  1037,  2843,  1010,  5834,  2006,  2029,  2060,
        10857,  2024,  2443,  1999,  1996,  2944,  1012,   102])"
2587,1,"['model', 'estimate', 'probability']", Introduction to logistic regression,seg_93,"use the model summarized in figure 9.24 to estimate the probability of receiving a callback for a job in chicago where the candidate lists 14 years experience, no honors, no military experience, includes an email address, and has a first name that implies they are a white male.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2224,  1996,  2944, 22539,  1999,  3275,  1023,  1012,  2484,
         2000, 10197,  1996,  9723,  1997,  4909,  1037,  2655,  5963,  2005,
         1037,  3105,  1999,  3190,  2073,  1996,  4018,  7201,  2403,  2086,
         3325,  1010,  2053,  7836,  1010,  2053,  2510,  3325,  1010,  2950,
         2019, 10373,  4769,  1010,  1998,  2038,  1037,  2034,  2171,  2008,
        12748,  2027,  2024,  1037,  2317,  3287,  1012,   102])"
2588,1,"['coefficients', 'model', 'variable']", Introduction to logistic regression,seg_93,"we can start by writing out the equation using the coefficients from the model, then we can add in the corresponding values of each variable for this individual:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2064,  2707,  2011,  3015,  2041,  1996,  8522,  2478,
         1996, 21374,  2013,  1996,  2944,  1010,  2059,  2057,  2064,  5587,
         1999,  1996,  7978,  5300,  1997,  2169,  8023,  2005,  2023,  3265,
         1024,   102])"
2589,0,[], Introduction to logistic regression,seg_93,we can now back-solve for p: the chance such an individual will receive a callback is about 8.35%.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([ 101, 2057, 2064, 2085, 2067, 1011, 9611, 2005, 1052, 1024, 1996, 3382,
        2107, 2019, 3265, 2097, 4374, 1037, 2655, 5963, 2003, 2055, 1022, 1012,
        3486, 1003, 1012,  102])"
2590,1,['probability'], Introduction to logistic regression,seg_93,compute the probability of a callback for an individual with a name commonly inferred to be from a black male but who otherwise has the same characteristics as the one described in example 9.33.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101, 24134,  1996,  9723,  1997,  1037,  2655,  5963,  2005,  2019,
         3265,  2007,  1037,  2171,  4141,  1999,  7512,  5596,  2000,  2022,
         2013,  1037,  2304,  3287,  2021,  2040,  4728,  2038,  1996,  2168,
         6459,  2004,  1996,  2028,  2649,  1999,  2742,  1023,  1012,  3943,
         1012,   102])"
2591,1,"['probability', 'indicator variable', 'results', 'indicator', 'variable']", Introduction to logistic regression,seg_93,"we can complete the same steps for an individual with the same characteristics who is black, where the only difference in the calculation is that the indicator variable racewhite will take a value of 0. doing so yields a probability of 0.0553. let’s compare the results with those of example 9.33.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2064,  3143,  1996,  2168,  4084,  2005,  2019,  3265,
         2007,  1996,  2168,  6459,  2040,  2003,  2304,  1010,  2073,  1996,
         2069,  4489,  1999,  1996, 17208,  2003,  2008,  1996, 17245,  8023,
         2679,  2860, 16584,  2063,  2097,  2202,  1037,  3643,  1997,  1014,
         1012,  2725,  2061, 16189,  1037,  9723,  1997,  1014,  1012,  5709,
        22275,  1012,  2292,  1521,  1055, 12826,  1996,  3463,  2007,  2216,
         1997,  2742,  1023,  1012,  3943,  1012,   102])"
2592,0,[], Introduction to logistic regression,seg_93,"in practical terms, an individual perceived as white based on their first name would need to apply",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([ 101, 1999, 6742, 3408, 1010, 2019, 3265, 8690, 2004, 2317, 2241, 2006,
        2037, 2034, 2171, 2052, 2342, 2000, 6611,  102])"
2593,1,['average'], Introduction to logistic regression,seg_93,"1 to 0.0835 ≈ 12 jobs on average to receive a callback, while an individual perceived as black based on",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1015,  2000,  1014,  1012,  5511, 19481,  1606,  2260,  5841,
         2006,  2779,  2000,  4374,  1037,  2655,  5963,  1010,  2096,  2019,
         3265,  8690,  2004,  2304,  2241,  2006,   102])"
2594,1,['average'], Introduction to logistic regression,seg_93,"1 their first name would need to apply to 0.0553 ≈ 18 jobs on average to receive a callback. that is, applicants who are perceived as black need to apply to 50% more employers to receive a callback than someone who is perceived as white based on their first name for jobs like those in the study.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1015,  2037,  2034,  2171,  2052,  2342,  2000,  6611,  2000,
         1014,  1012,  5709, 22275,  1606,  2324,  5841,  2006,  2779,  2000,
         4374,  1037,  2655,  5963,  1012,  2008,  2003,  1010, 17362,  2040,
         2024,  8690,  2004,  2304,  2342,  2000,  6611,  2000,  2753,  1003,
         2062, 12433,  2000,  4374,  1037,  2655,  5963,  2084,  2619,  2040,
         2003,  8690,  2004,  2317,  2241,  2006,  2037,  2034,  2171,  2005,
         5841,  2066,  2216,  1999,  1996,  2817,  1012,   102])"
2595,1,"['cases', 'discrimination', 'experiment']", Introduction to logistic regression,seg_93,"what we’ve quantified in this section is alarming and disturbing. however, one aspect that makes this racism so difficult to address is that the experiment, as well-designed as it is, cannot send us much signal about which employers are discriminating. it is only possible to say that discrimination is happening, even if we cannot say which particular callbacks – or non-callbacks – represent discrimination. finding strong evidence of racism for individual cases is a persistent challenge in enforcing anti-discrimination laws.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2054,  2057,  1521,  2310, 24110,  3775, 10451,  1999,  2023,
         2930,  2003,  8598,  2075,  1998, 14888,  1012,  2174,  1010,  2028,
         7814,  2008,  3084,  2023, 14398,  2061,  3697,  2000,  4769,  2003,
         2008,  1996,  7551,  1010,  2004,  2092,  1011,  2881,  2004,  2009,
         2003,  1010,  3685,  4604,  2149,  2172,  4742,  2055,  2029, 12433,
         2024,  5860, 20026, 19185,  1012,  2009,  2003,  2069,  2825,  2000,
         2360,  2008,  9147,  2003,  6230,  1010,  2130,  2065,  2057,  3685,
         2360,  2029,  3327,  2655, 12221,  1516,  2030,  2512,  1011,  2655,
        12221,  1516,  5050,  9147,  1012,  4531,  2844,  3350,  1997, 14398,
         2005,  3265,  3572,  2003,  1037, 14516,  4119,  1999, 27455,  3424,
         1011,  9147,  4277,  1012,   102])"
2596,1,"['model', 'rate']", Introduction to logistic regression,seg_93,9.5.4 diagnostics for the callback rate model,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1023,  1012,  1019,  1012,  1018, 16474,  2015,  2005,  1996,
         2655,  5963,  3446,  2944,   102])"
2597,1,"['logistic regression model', 'regression', 'regression model', 'logistic regression', 'model', 'logistic']", Introduction to logistic regression,seg_93,there are two key conditions for fitting a logistic regression model:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2045,  2024,  2048,  3145,  3785,  2005, 11414,  1037,  8833,
         6553, 26237,  2944,  1024,   102])"
2598,1,"['outcomes', 'outcome', 'independent']", Introduction to logistic regression,seg_93,1. each outcome yi is independent of the other outcomes.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1015,  1012,  2169,  9560, 12316,  2003,  2981,  1997,  1996,
         2060, 13105,  1012,   102])"
2599,1,['predictor'], Introduction to logistic regression,seg_93,2. each predictor xi is linearly related to logit(pi) if all other predictors are held constant.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1016,  1012,  2169, 16014,  2953,  8418,  2003,  7399,  2135,
         3141,  2000,  8833,  4183,  1006, 14255,  1007,  2065,  2035,  2060,
        16014,  5668,  2024,  2218,  5377,  1012,   102])"
2600,1,"['logistic regression model', 'regression', 'outcomes', 'independence', 'logistic regression', 'condition', 'experiment', 'regression model', 'model', 'logistic']", Introduction to logistic regression,seg_93,the first logistic regression model condition – independence of the outcomes – is reasonable for the experiment since characteristics of resumes were randomly assigned to the resumes that were sent out.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  2034,  8833,  6553, 26237,  2944,  4650,  1516,  4336,
         1997,  1996, 13105,  1516,  2003,  9608,  2005,  1996,  7551,  2144,
         6459,  1997, 13746,  2015,  2020, 18154,  4137,  2000,  1996, 13746,
         2015,  2008,  2020,  2741,  2041,  1012,   102])"
2601,1,"['logistic regression model', 'regression', 'set', 'plotting', 'probabilities', 'regression model', 'logistic regression', 'condition', 'model', 'data set', 'logistic', 'data']", Introduction to logistic regression,seg_93,"the second condition of the logistic regression model is not easily checked without a fairly sizable amount of data. luckily, we have 4870 resume submissions in the data set! let’s first visualize these data by plotting the true classification of the resumes against the model’s fitted probabilities, as shown in figure 9.25.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  2117,  4650,  1997,  1996,  8833,  6553, 26237,  2944,
         2003,  2025,  4089,  7039,  2302,  1037,  7199, 25908,  3815,  1997,
         2951,  1012, 15798,  1010,  2057,  2031,  4466, 19841, 13746, 27842,
         1999,  1996,  2951,  2275,   999,  2292,  1521,  1055,  2034,  5107,
         4697,  2122,  2951,  2011, 20699,  1996,  2995,  5579,  1997,  1996,
        13746,  2015,  2114,  1996,  2944,  1521,  1055,  7130,  4013,  3676,
        14680,  1010,  2004,  3491,  1999,  3275,  1023,  1012,  2423,  1012,
          102])"
2602,1,"['probability', 'predicted']", Introduction to logistic regression,seg_93,1 (callback) 0 (no callback) 0.0 0.2 0.4 0.6 0.8 1.0 predicted probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1015,  1006,  2655,  5963,  1007,  1014,  1006,  2053,  2655,
         5963,  1007,  1014,  1012,  1014,  1014,  1012,  1016,  1014,  1012,
         1018,  1014,  1012,  1020,  1014,  1012,  1022,  1015,  1012,  1014,
        10173,  9723,   102])"
2603,1,"['probability', 'results', 'random', 'predicted']", Introduction to logistic regression,seg_93,"figure 9.25: the predicted probability that each of the 4870 resumes results in a callback. noise (small, random vertical shifts) have been added to each point so points with nearly identical values aren’t plotted exactly on top of one another.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  3275,  1023,  1012,  2423,  1024,  1996, 10173,  9723,  2008,
         2169,  1997,  1996,  4466, 19841, 13746,  2015,  3463,  1999,  1037,
         2655,  5963,  1012,  5005,  1006,  2235,  1010,  6721,  7471, 12363,
         1007,  2031,  2042,  2794,  2000,  2169,  2391,  2061,  2685,  2007,
         3053,  7235,  5300,  4995,  1521,  1056, 27347,  3599,  2006,  2327,
         1997,  2028,  2178,  1012,   102])"
2604,1,['probability'], Introduction to logistic regression,seg_93,"observations are bucketed, ● then we compute the observed probability in each bucket (y)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  9420,  2024, 13610,  2098,  1010,  1619,  2059,  2057, 24134,
         1996,  5159,  9723,  1999,  2169, 13610,  1006,  1061,  1007,   102])"
2605,1,"['probability', 'average', 'predicted']", Introduction to logistic regression,seg_93,● against the average predicted probability (x),tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1619,  2114,  1996,  2779, 10173,  9723,  1006,  1060,  1007,
          102])"
2606,1,"['intervals', 'confidence intervals', 'confidence']", Introduction to logistic regression,seg_93,● ●● for each of the buckets with 95% confidence intervals.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1619,  1619, 30146,  2005,  2169,  1997,  1996, 13610,  2015,
         2007,  5345,  1003,  7023, 14025,  1012,   102])"
2607,1,"['probability', 'predicted']", Introduction to logistic regression,seg_93,0 (no callback) 0.0 0.2 0.4 0.6 0.8 1.0 predicted probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1014,  1006,  2053,  2655,  5963,  1007,  1014,  1012,  1014,
         1014,  1012,  1016,  1014,  1012,  1018,  1014,  1012,  1020,  1014,
         1012,  1022,  1015,  1012,  1014, 10173,  9723,   102])"
2608,1,"['intervals', 'confidence intervals', 'confidence', 'logistic', 'confidence bound']", Introduction to logistic regression,seg_93,"figure 9.26: the dashed line is within the confidence bound of the 95% confidence intervals of each of the buckets, suggesting the logistic fit is reasonable.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  3275,  1023,  1012,  2656,  1024,  1996, 18198,  2240,  2003,
         2306,  1996,  7023,  5391,  1997,  1996,  5345,  1003,  7023, 14025,
         1997,  2169,  1997,  1996, 13610,  2015,  1010,  9104,  1996,  8833,
         6553,  4906,  2003,  9608,  1012,   102])"
2609,1,"['model', 'plot', 'data']", Introduction to logistic regression,seg_93,"we’d like to assess the quality of the model. for example, we might ask: if we look at resumes that we modeled as having a 10% chance of getting a callback, do we find about 10% of them actually receive a callback? we can check this for groups of the data by constructing a plot as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  1521,  1040,  2066,  2000, 14358,  1996,  3737,  1997,
         1996,  2944,  1012,  2005,  2742,  1010,  2057,  2453,  3198,  1024,
         2065,  2057,  2298,  2012, 13746,  2015,  2008,  2057, 14440,  2004,
         2383,  1037,  2184,  1003,  3382,  1997,  2893,  1037,  2655,  5963,
         1010,  2079,  2057,  2424,  2055,  2184,  1003,  1997,  2068,  2941,
         4374,  1037,  2655,  5963,  1029,  2057,  2064,  4638,  2023,  2005,
         2967,  1997,  1996,  2951,  2011, 15696,  1037,  5436,  2004,  4076,
         1024,   102])"
2610,1,"['probabilities', 'data', 'predicted']", Introduction to logistic regression,seg_93,1. bucket the data into groups based on their predicted probabilities.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1015,  1012, 13610,  1996,  2951,  2046,  2967,  2241,  2006,
         2037, 10173,  4013,  3676, 14680,  1012,   102])"
2611,1,"['probability', 'average', 'predicted']", Introduction to logistic regression,seg_93,2. compute the average predicted probability for each group.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1016,  1012, 24134,  1996,  2779, 10173,  9723,  2005,  2169,
         2177,  1012,   102])"
2612,1,"['probability', 'confidence', 'confidence interval', 'interval']", Introduction to logistic regression,seg_93,"3. compute the observed probability for each group, along with a 95% confidence interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1017,  1012, 24134,  1996,  5159,  9723,  2005,  2169,  2177,
         1010,  2247,  2007,  1037,  5345,  1003,  7023, 13483,  1012,   102])"
2613,1,"['probabilities', 'confidence', 'intervals', 'predicted', 'confidence intervals', 'plot', 'average']", Introduction to logistic regression,seg_93,4. plot the observed probabilities (with 95% confidence intervals) against the average predicted probabilities for each group.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1018,  1012,  5436,  1996,  5159,  4013,  3676, 14680,  1006,
         2007,  5345,  1003,  7023, 14025,  1007,  2114,  1996,  2779, 10173,
         4013,  3676, 14680,  2005,  2169,  2177,  1012,   102])"
2614,1,"['probabilities', 'confidence', 'intervals', 'predicted', 'confidence intervals', 'plot']", Introduction to logistic regression,seg_93,"the points plotted should fall close to the line y = x, since the predicted probabilities should be similar to the observed probabilities. we can use the confidence intervals to roughly gauge whether anything might be amiss. such a plot is shown in figure 9.26.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1996,  2685, 27347,  2323,  2991,  2485,  2000,  1996,  2240,
         1061,  1027,  1060,  1010,  2144,  1996, 10173,  4013,  3676, 14680,
         2323,  2022,  2714,  2000,  1996,  5159,  4013,  3676, 14680,  1012,
         2057,  2064,  2224,  1996,  7023, 14025,  2000,  5560,  7633,  3251,
         2505,  2453,  2022, 26445,  4757,  1012,  2107,  1037,  5436,  2003,
         3491,  1999,  3275,  1023,  1012,  2656,  1012,   102])"
2615,1,"['predictor', 'residuals', 'outcome', 'deviations', 'plots', 'plot']", Introduction to logistic regression,seg_93,"additional diagnostics may be created that are similar to those featured in section 9.3. for instance, we could compute residuals as the observed outcome minus the expected outcome (ei = yi − p̂i), and then we could create plots of these residuals against each predictor. we might also create a plot like that in figure 9.26 to better understand the deviations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  3176, 16474,  2015,  2089,  2022,  2580,  2008,  2024,  2714,
         2000,  2216,  2956,  1999,  2930,  1023,  1012,  1017,  1012,  2005,
         6013,  1010,  2057,  2071, 24134, 21961,  2015,  2004,  1996,  5159,
         9560, 15718,  1996,  3517,  9560,  1006,  1041,  2072,  1027, 12316,
         1597, 14255,  1007,  1010,  1998,  2059,  2057,  2071,  3443, 14811,
         1997,  2122, 21961,  2015,  2114,  2169, 16014,  2953,  1012,  2057,
         2453,  2036,  3443,  1037,  5436,  2066,  2008,  1999,  3275,  1023,
         1012,  2656,  2000,  2488,  3305,  1996, 24353,  2015,  1012,   102])"
2616,1,['discrimination'], Introduction to logistic regression,seg_93,9.5.5 exploring discrimination between groups of different sizes,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1023,  1012,  1019,  1012,  1019, 11131,  9147,  2090,  2967,
         1997,  2367, 10826,   102])"
2617,1,"['discrimination', 'data']", Introduction to logistic regression,seg_93,"any form of discrimination is concerning, and this is why we decided it was so important to discuss this topic using data. the resume study also only examined discrimination in a single aspect: whether a prospective employer would call a candidate who submitted their resume. there was a 50% higher barrier for resumes simply when the candidate had a first name that was perceived to be from a black individual. it’s unlikely that discrimination would stop there.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2151,  2433,  1997,  9147,  2003,  7175,  1010,  1998,  2023,
         2003,  2339,  2057,  2787,  2009,  2001,  2061,  2590,  2000,  6848,
         2023,  8476,  2478,  2951,  1012,  1996, 13746,  2817,  2036,  2069,
         8920,  9147,  1999,  1037,  2309,  7814,  1024,  3251,  1037, 17464,
        11194,  2052,  2655,  1037,  4018,  2040,  7864,  2037, 13746,  1012,
         2045,  2001,  1037,  2753,  1003,  3020,  8803,  2005, 13746,  2015,
         3432,  2043,  1996,  4018,  2018,  1037,  2034,  2171,  2008,  2001,
         8690,  2000,  2022,  2013,  1037,  2304,  3265,  1012,  2009,  1521,
         1055,  9832,  2008,  9147,  2052,  2644,  2045,  1012,   102])"
2618,0,[], Introduction to logistic regression,seg_93,"22 let’s consider a sex-imbalanced company that consists of 20% women and 80% men, and we’ll suppose that the company is very large, consisting of perhaps 20,000 employees. suppose when someone goes up for promotion at this company, 5 of their colleagues are randomly chosen to provide feedback on their work.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2570,  2292,  1521,  1055,  5136,  1037,  3348,  1011, 10047,
        26657,  2094,  2194,  2008,  3774,  1997,  2322,  1003,  2308,  1998,
         3770,  1003,  2273,  1010,  1998,  2057,  1521,  2222,  6814,  2008,
         1996,  2194,  2003,  2200,  2312,  1010,  5398,  1997,  3383,  2322,
         1010,  2199,  5126,  1012,  6814,  2043,  2619,  3632,  2039,  2005,
         4712,  2012,  2023,  2194,  1010,  1019,  1997,  2037,  8628,  2024,
        18154,  4217,  2000,  3073, 12247,  2006,  2037,  2147,  1012,   102])"
2619,0,[], Introduction to logistic regression,seg_93,"now let’s imagine that 10% of the people in the company are prejudiced against the other sex. that is, 10% of men are prejudiced against women, and similarly, 10% of women are prejudiced against men.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2085,  2292,  1521,  1055,  5674,  2008,  2184,  1003,  1997,
         1996,  2111,  1999,  1996,  2194,  2024, 18024,  2094,  2114,  1996,
         2060,  3348,  1012,  2008,  2003,  1010,  2184,  1003,  1997,  2273,
         2024, 18024,  2094,  2114,  2308,  1010,  1998,  6660,  1010,  2184,
         1003,  1997,  2308,  2024, 18024,  2094,  2114,  2273,  1012,   102])"
2620,0,[], Introduction to logistic regression,seg_93,"who is discriminated against more at the company, men or women?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2040,  2003,  5860, 20026, 15833,  2114,  2062,  2012,  1996,
         2194,  1010,  2273,  2030,  2308,  1029,   102])"
2621,1,"['biased', 'random', 'discrimination']", Introduction to logistic regression,seg_93,"let’s suppose we took 100 men who have gone up for promotion in the past few years. for these men, 5 × 100 = 500 random colleagues will be tapped for their feedback, of which about 20% will be women (100 women). of these 100 women, 10 are expected to be biased against the man they are reviewing. then, of the 500 colleagues reviewing them, men will experience discrimination by about 2% of their colleagues when they go up for promotion.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2292,  1521,  1055,  6814,  2057,  2165,  2531,  2273,  2040,
         2031,  2908,  2039,  2005,  4712,  1999,  1996,  2627,  2261,  2086,
         1012,  2005,  2122,  2273,  1010,  1019,  1095,  2531,  1027,  3156,
         6721,  8628,  2097,  2022, 10410,  2005,  2037, 12247,  1010,  1997,
         2029,  2055,  2322,  1003,  2097,  2022,  2308,  1006,  2531,  2308,
         1007,  1012,  1997,  2122,  2531,  2308,  1010,  2184,  2024,  3517,
         2000,  2022, 25352,  2114,  1996,  2158,  2027,  2024, 15252,  1012,
         2059,  1010,  1997,  1996,  3156,  8628, 15252,  2068,  1010,  2273,
         2097,  3325,  9147,  2011,  2055,  1016,  1003,  1997,  2037,  8628,
         2043,  2027,  2175,  2039,  2005,  4712,  1012,   102])"
2622,1,"['random', 'bias']", Introduction to logistic regression,seg_93,"let’s do a similar calculation for 100 women who have gone up for promotion in the last few years. they will also have 500 random colleagues providing feedback, of which about 400 (80%) will be men. of these 400 men, about 40 (10%) hold a bias against women. of the 500 colleagues providing feedback on the promotion packet for these women, 8% of the colleagues hold a bias against the women.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2292,  1521,  1055,  2079,  1037,  2714, 17208,  2005,  2531,
         2308,  2040,  2031,  2908,  2039,  2005,  4712,  1999,  1996,  2197,
         2261,  2086,  1012,  2027,  2097,  2036,  2031,  3156,  6721,  8628,
         4346, 12247,  1010,  1997,  2029,  2055,  4278,  1006,  3770,  1003,
         1007,  2097,  2022,  2273,  1012,  1997,  2122,  4278,  2273,  1010,
         2055,  2871,  1006,  2184,  1003,  1007,  2907,  1037, 13827,  2114,
         2308,  1012,  1997,  1996,  3156,  8628,  4346, 12247,  2006,  1996,
         4712, 14771,  2005,  2122,  2308,  1010,  1022,  1003,  1997,  1996,
         8628,  2907,  1037, 13827,  2114,  1996,  2308,  1012,   102])"
2623,1,['population'], Introduction to logistic regression,seg_93,"example 9.35 highlights something profound: even in a hypothetical setting where each demographic has the same degree of prejudice against the other demographic, the smaller group experiences the negative effects more frequently. additionally, if we would complete a handful of examples like the one above with different numbers, we’d learn that the greater the imbalance in the population groups, the more the smaller group is disproportionately impacted.23",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2742,  1023,  1012,  3486, 11637,  2242, 13769,  1024,  2130,
         1999,  1037, 25613,  4292,  2073,  2169, 15982,  2038,  1996,  2168,
         3014,  1997, 18024,  2114,  1996,  2060, 15982,  1010,  1996,  3760,
         2177,  6322,  1996,  4997,  3896,  2062,  4703,  1012,  5678,  1010,
         2065,  2057,  2052,  3143,  1037,  9210,  1997,  4973,  2066,  1996,
         2028,  2682,  2007,  2367,  3616,  1010,  2057,  1521,  1040,  4553,
         2008,  1996,  3618,  1996, 10047, 26657,  1999,  1996,  2313,  2967,
         1010,  1996,  2062,  1996,  3760,  2177,  2003,  4487, 13102, 18981,
        11589,  3258, 28239, 19209,  1012,  2603,   102])"
2624,1,"['discrimination', 'factors']", Introduction to logistic regression,seg_93,"of course, there are other considerable real-world omissions from the hypothetical example. for example, studies have found instances where people from an oppressed group also discriminate against others within their own oppressed group. as another example, there are also instances where a majority group can be oppressed, with apartheid in south africa being one such historic example. ultimately, discrimination is complex, and there are many factors at play beyond the mathematics property we observed in example 9.35.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  1997,  2607,  1010,  2045,  2024,  2060,  6196,  2613,  1011,
         2088, 18168, 14643,  8496,  2013,  1996, 25613,  2742,  1012,  2005,
         2742,  1010,  2913,  2031,  2179, 12107,  2073,  2111,  2013,  2019,
         6728, 19811,  2177,  2036,  5860, 20026, 14776,  2114,  2500,  2306,
         2037,  2219,  6728, 19811,  2177,  1012,  2004,  2178,  2742,  1010,
         2045,  2024,  2036, 12107,  2073,  1037,  3484,  2177,  2064,  2022,
         6728, 19811,  1010,  2007, 17862,  1999,  2148,  3088,  2108,  2028,
         2107,  3181,  2742,  1012,  4821,  1010,  9147,  2003,  3375,  1010,
         1998,  2045,  2024,  2116,  5876,  2012,  2377,  3458,  1996,  5597,
         3200,  2057,  5159,  1999,  2742,  1023,  1012,  3486,  1012,   102])"
2625,1,"['statistical', 'model', 'data', 'statistical model']", Introduction to logistic regression,seg_93,"we close this book on this serious topic, and we hope it inspires you to think about the power of reasoning with data. whether it is with a formal statistical model or by using critical thinking skills to structure a problem, we hope the ideas you have learned will help you do more and do better in life.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4955,  2000,  8833,  6553, 26237])","tensor([  101,  2057,  2485,  2023,  2338,  2006,  2023,  3809,  8476,  1010,
         1998,  2057,  3246,  2009, 18708,  2015,  2017,  2000,  2228,  2055,
         1996,  2373,  1997, 13384,  2007,  2951,  1012,  3251,  2009,  2003,
         2007,  1037,  5337,  7778,  2944,  2030,  2011,  2478,  4187,  3241,
         4813,  2000,  3252,  1037,  3291,  1010,  2057,  3246,  1996,  4784,
         2017,  2031,  4342,  2097,  2393,  2017,  2079,  2062,  1998,  2079,
         2488,  1999,  2166,  1012,   102])"
2626,1,['data'],Exercise solutions,seg_95,1 introduction to data,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([6912, 7300])","tensor([ 101, 1015, 4955, 2000, 2951,  102])"
2627,1,['data'],Exercise solutions,seg_95,2 summarizing data,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0.])","tensor([6912, 7300])","tensor([ 101, 1016, 7680, 7849, 6026, 2951,  102])"
2628,1,['probability'],Exercise solutions,seg_95,3 probability,tensor(1),"tensor([0., 0., 1., 0.])","tensor([6912, 7300])","tensor([ 101, 1017, 9723,  102])"
2629,1,"['box plots', 'plots']",Exercise solutions,seg_95,"no, 0.741 can construct passed? negative, 0.926 0.741*0.926 = 0.6862 box plots? yes, 0.86 0.8*0.86 = 0.688 yes, 0.8 no, 0.14 0.8*0.14 = 0.112 3.43 (a) e = $3.90. sd = $0.34. yes, 0.65 (b) e = $27.30. sd = $0.89.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6912, 7300])","tensor([  101,  2053,  1010,  1014,  1012,  6356,  2487,  2064,  9570,  2979,
         1029,  4997,  1010,  1014,  1012,  6227,  2575,  1014,  1012,  6356,
         2487,  1008,  1014,  1012,  6227,  2575,  1027,  1014,  1012,  6273,
         2575,  2475,  3482, 14811,  1029,  2748,  1010,  1014,  1012,  6564,
         1014,  1012,  1022,  1008,  1014,  1012,  6564,  1027,  1014,  1012,
         6273,  2620,  2748,  1010,  1014,  1012,  1022,  2053,  1010,  1014,
         1012,  2403,  1014,  1012,  1022,  1008,  1014,  1012,  2403,  1027,
         1014,  1012, 11176,  1017,  1012,  4724,  1006,  1037,  1007,  1041,
         1027,  1002,  1017,  1012,  3938,  1012, 17371,  1027,  1002,  1014,
         1012,  4090,  1012,  2748,  1010,  1014,  1012,  3515,  1006,  1038,
         1007,  1041,  1027,  1002,  2676,  1012,  2382,  1012, 17371,  1027,
         1002,  1014,  1012,  6486,  1012,   102])"
2630,1,"['distributions', 'random', 'random variables', 'variables']",Exercise solutions,seg_95,4 distributions of random variables,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0.])","tensor([6912, 7300])","tensor([  101,  1018, 20611,  1997,  6721, 10857,   102])"
2631,0,[],Exercise solutions,seg_95,5 foundations for inference,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([6912, 7300])","tensor([  101,  1019, 10100,  2005, 28937,   102])"
2632,1,"['categorical data', 'data', 'categorical']",Exercise solutions,seg_95,6 inference for categorical data,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0.])","tensor([6912, 7300])","tensor([  101,  1020, 28937,  2005,  4937, 27203,  2951,   102])"
2633,1,"['numerical', 'data']",Exercise solutions,seg_95,7 inference for numerical data,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0.])","tensor([6912, 7300])","tensor([  101,  1021, 28937,  2005, 15973,  2951,   102])"
2634,1,"['regression', 'linear regression', 'linear']",Exercise solutions,seg_95,8 introduction to linear regression,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0.])","tensor([6912, 7300])","tensor([  101,  1022,  4955,  2000,  7399, 26237,   102])"
2635,1,"['regression', 'logistic regression', 'logistic']",Exercise solutions,seg_95,9 multiple and logistic regression,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0.])","tensor([6912, 7300])","tensor([  101,  1023,  3674,  1998,  8833,  6553, 26237,   102])"
2636,1,"['sets', 'set', 'information', 'data sets', 'data set', 'data']",Data sets within the text,seg_97,"each data set within the text is described in this appendix, and there is a corresponding page for each of these data sets at openintro.org/data. this page also includes additional data sets that can be used for honing your skills. each data set has its own page with the following information:",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2169,  2951,  2275,  2306,  1996,  3793,  2003,  2649,  1999,
         2023, 22524,  1010,  1998,  2045,  2003,  1037,  7978,  3931,  2005,
         2169,  1997,  2122,  2951,  4520,  2012,  2330, 18447,  3217,  1012,
         8917,  1013,  2951,  1012,  2023,  3931,  2036,  2950,  3176,  2951,
         4520,  2008,  2064,  2022,  2109,  2005, 10189,  2075,  2115,  4813,
         1012,  2169,  2951,  2275,  2038,  2049,  2219,  3931,  2007,  1996,
         2206,  2592,  1024,   102])"
2637,1,"['variables', 'data']",Data sets within the text,seg_97,• list of the data set’s variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1528,  2862,  1997,  1996,  2951,  2275,  1521,  1055, 10857,
         1012,   102])"
2638,0,[],Data sets within the text,seg_97,• r object file download.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1528, 1054, 4874, 5371, 8816, 1012,  102])"
2639,1,['data'],Data sets within the text,seg_97,b.1 introduction to data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1038, 1012, 1015, 4955, 2000, 2951,  102])"
2640,1,"['sets', 'results', 'data sets', 'data']",Data sets within the text,seg_97,"1.1 stent30, stent365 → the stent data is split across two data sets, one for days 0-30 results",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1015,  1012,  1015, 26261,  3372, 14142,  1010, 26261,  3372,
        21619,  2629,  1585,  1996, 26261,  3372,  2951,  2003,  3975,  2408,
         2048,  2951,  4520,  1010,  2028,  2005,  2420,  1014,  1011,  2382,
         3463,   102])"
2641,1,['results'],Data sets within the text,seg_97,"and one for days 0-365 results. chimowitz mi, lynn mj, derdeyn cp, et al. 2011. stenting versus aggressive medical therapy for intracranial arterial stenosis. new england journal of medicine 365:993-1003. www.nejm.org/doi/full/10.1056/nejmoa1105335. ny times article: www.nytimes.com/2011/09/08/health/research/08stent.html.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1998,  2028,  2005,  2420,  1014,  1011, 19342,  3463,  1012,
         9610,  5302, 15362,  2771,  1010,  9399,  1049,  3501,  1010,  4315,
         3207,  6038, 18133,  1010,  3802,  2632,  1012,  2249,  1012, 26261,
        24360,  6431,  9376,  2966,  7242,  2005, 26721, 26775, 27532, 25543,
        26261, 27109,  1012,  2047,  2563,  3485,  1997,  4200, 19342,  1024,
         5585,  2509,  1011,  2531,  2509,  1012,  7479,  1012, 11265, 24703,
         1012,  8917,  1013,  9193,  1013,  2440,  1013,  2184,  1012,  8746,
         2575,  1013, 11265, 24703, 10441, 14526,  2692, 22275, 19481,  1012,
         6396,  2335,  3720,  1024,  7479,  1012,  6396,  7292,  2015,  1012,
         4012,  1013,  2249,  1013,  5641,  1013,  5511,  1013,  2740,  1013,
         2470,  1013,  5511, 16173,  2102,  1012, 16129,  1012,   102])"
2642,1,['data'],Data sets within the text,seg_97,"1.2 loan50, loans full schema→ this data comes from lending club (lendingclub.com), which",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1015,  1012,  1016,  5414, 12376,  1010, 10940,  2440,  8040,
        28433, 30113,  2023,  2951,  3310,  2013, 18435,  2252,  1006, 18435,
        20464, 12083,  1012,  4012,  1007,  1010,  2029,   102])"
2643,1,"['set', 'sample', 'data']",Data sets within the text,seg_97,"provides a large set of data on the people who received loans through their platform. the data used in the textbook comes from a sample of the loans made in q1 (jan, feb, march) 2018.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  3640,  1037,  2312,  2275,  1997,  2951,  2006,  1996,  2111,
         2040,  2363, 10940,  2083,  2037,  4132,  1012,  1996,  2951,  2109,
         1999,  1996, 16432,  3310,  2013,  1037,  7099,  1997,  1996, 10940,
         2081,  1999,  1053,  2487,  1006,  5553,  1010, 13114,  1010,  2233,
         1007,  2760,  1012,   102])"
2644,1,"['county', 'data', 'county complete']",Data sets within the text,seg_97,"1.2 county, county complete → these data come from several government sources. for those",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1015, 1012, 1016, 2221, 1010, 2221, 3143, 1585, 2122, 2951, 2272,
        2013, 2195, 2231, 4216, 1012, 2005, 2216,  102])"
2645,1,"['data', 'set', 'statistics', 'county', 'data set']",Data sets within the text,seg_97,"variables included in the county data set, only the most recent data is reported, as of what was available in late 2018. data prior to 2011 is all from census.gov, where the specific quick facts page providing the data is no longer available. the more recent data comes from usda (ers.usda.gov), bureau of labor statistics (bls.gov/lau), saipe (census.gov/did/www/saipe), and american community survey (census.gov/programs-surveys/acs).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 10857,  2443,  1999,  1996,  2221,  2951,  2275,  1010,  2069,
         1996,  2087,  3522,  2951,  2003,  2988,  1010,  2004,  1997,  2054,
         2001,  2800,  1999,  2397,  2760,  1012,  2951,  3188,  2000,  2249,
         2003,  2035,  2013,  2883,  1012, 18079,  1010,  2073,  1996,  3563,
         4248,  8866,  3931,  4346,  1996,  2951,  2003,  2053,  2936,  2800,
         1012,  1996,  2062,  3522,  2951,  3310,  2013, 13751,  2050,  1006,
         9413,  2015,  1012, 13751,  2050,  1012, 18079,  1007,  1010,  4879,
         1997,  4450,  6747,  1006,  1038,  4877,  1012, 18079,  1013, 21360,
         1007,  1010, 18952,  5051,  1006,  2883,  1012, 18079,  1013,  2106,
         1013,  7479,  1013, 18952,  5051,  1007,  1010,  1998,  2137,  2451,
         5002,  1006,  2883,  1012, 18079,  1013,  3454,  1011, 12265,  1013,
         9353,  2015,  1007,  1012,   102])"
2646,1,"['set', 'information', 'data set', 'data']",Data sets within the text,seg_97,"1.3 nurses’ health study → for more information on this data set, see",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1015,  1012,  1017, 11500,  1521,  2740,  2817,  1585,  2005,
         2062,  2592,  2006,  2023,  2951,  2275,  1010,  2156,   102])"
2647,1,['randomization'],Data sets within the text,seg_97,1.4 the study we had in mind when discussing the simple randomization (no blocking) study was,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1015,  1012,  1018,  1996,  2817,  2057,  2018,  1999,  2568,
         2043, 10537,  1996,  3722,  6721,  3989,  1006,  2053, 10851,  1007,
         2817,  2001,   102])"
2648,1,['trial'],Data sets within the text,seg_97,anturane reinfarction trial research group. 1980. sulfinpyrazone in the prevention of sudden death after myocardial infarction. new england journal of medicine 302(5):250-256.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 14405,  4648,  2638, 27788, 14971,  7542,  3979,  2470,  2177,
         1012,  3150,  1012, 21396, 16294,  7685, 20409,  5643,  1999,  1996,
         9740,  1997,  5573,  2331,  2044,  2026, 24755, 25070,  1999, 14971,
         7542,  1012,  2047,  2563,  3485,  1997,  4200, 22060,  1006,  1019,
         1007,  1024,  5539,  1011, 17273,  1012,   102])"
2649,1,['data'],Data sets within the text,seg_97,b.2 summarizing data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1038, 1012, 1016, 7680, 7849, 6026, 2951,  102])"
2650,1,"['sets', 'data sets', 'county', 'data']",Data sets within the text,seg_97,"2.1 loan50, county → these data sets are described in data appendix b.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1016,  1012,  1015,  5414, 12376,  1010,  2221,  1585,  2122,
         2951,  4520,  2024,  2649,  1999,  2951, 22524,  1038,  1012,  1015,
         1012,   102])"
2651,1,"['sets', 'data sets', 'county', 'data']",Data sets within the text,seg_97,"2.2 loan50, county → these data sets are described in data appendix b.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1016,  1012,  1016,  5414, 12376,  1010,  2221,  1585,  2122,
         2951,  4520,  2024,  2649,  1999,  2951, 22524,  1038,  1012,  1015,
         1012,   102])"
2652,0,[],Data sets within the text,seg_97,2.3 malaria → lyke et al. 2017. pfspz vaccine induces strain-transcending t cells and durable,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1016,  1012,  1017, 19132,  1585,  1048, 15922,  2063,  3802,
         2632,  1012,  2418,  1012,  1052, 10343,  2361,  2480, 17404, 19653,
         2015, 10178,  1011,  9099, 23865,  2075,  1056,  4442,  1998, 25634,
          102])"
2653,0,[],Data sets within the text,seg_97,protection against heterologous controlled human malaria infection. pnas 114(10):2711-2716. www.pnas.org/content/114/10/2711,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  3860,  2114, 21770, 10624, 21197,  3560,  4758,  2529, 19132,
         8985,  1012,  1052, 11649, 12457,  1006,  2184,  1007,  1024, 25103,
         2487,  1011, 25103,  2575,  1012,  7479,  1012,  1052, 11649,  1012,
         8917,  1013,  4180,  1013, 12457,  1013,  2184,  1013, 25103,  2487,
          102])"
2654,1,['probability'],Data sets within the text,seg_97,b.3 probability,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1038, 1012, 1017, 9723,  102])"
2655,1,"['sets', 'data sets', 'county', 'data']",Data sets within the text,seg_97,"3.1 loan50, county → these data sets are described in data appendix b.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1015,  5414, 12376,  1010,  2221,  1585,  2122,
         2951,  4520,  2024,  2649,  1999,  2951, 22524,  1038,  1012,  1015,
         1012,   102])"
2656,1,"['set', 'standard', 'data set', 'data']",Data sets within the text,seg_97,3.1 playing cards → data set describing the 52 cards in a standard deck.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1017, 1012, 1015, 2652, 5329, 1585, 2951, 2275, 7851, 1996, 4720,
        5329, 1999, 1037, 3115, 5877, 1012,  102])"
2657,1,"['data', 'simulated', 'population']",Data sets within the text,seg_97,3.2 family college → simulated data based on real population summaries at,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1016,  2155,  2267,  1585, 23599,  2951,  2241,
         2006,  2613,  2313,  7680,  7849,  3111,  2012,   102])"
2658,0,[],Data sets within the text,seg_97,3.2 smallpox → fenner f. 1988. smallpox and its eradication (history of international public,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1016, 25765,  1585, 21713,  3678,  1042,  1012,
         2997,  1012, 25765,  1998,  2049,  3690, 25027,  1006,  2381,  1997,
         2248,  2270,   102])"
2659,1,['probabilities'],Data sets within the text,seg_97,"3.2 mammogram screening, probabilities→ the probabilities reported were obtained using studies",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1016,  5003,  7382,  8649,  6444, 11326,  1010,
         4013,  3676, 14680, 30113,  1996,  4013,  3676, 14680,  2988,  2020,
         4663,  2478,  2913,   102])"
2660,0,[],Data sets within the text,seg_97,reported at www.breastcancer.org and www.ncbi.nlm.nih.gov/pmc/articles/pmc1173421.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2988,  2012,  7479,  1012,  7388,  9336, 17119,  1012,  8917,
         1998,  7479,  1012, 13316,  5638,  1012, 17953,  2213,  1012,  9152,
         2232,  1012, 18079,  1013,  7610,  2278,  1013,  4790,  1013,  7610,
         2278, 14526,  2581, 22022, 17465,  1012,   102])"
2661,1,['probabilities'],Data sets within the text,seg_97,"3.2 jose campus visits, probabilities → this example was made up.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1016,  4560,  3721,  7879,  1010,  4013,  3676,
        14680,  1585,  2023,  2742,  2001,  2081,  2039,  1012,   102])"
2662,1,"['sets', 'data sets', 'data']",Data sets within the text,seg_97,3.3 no data sets were described in this section.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1017, 1012, 1017, 2053, 2951, 4520, 2020, 2649, 1999, 2023, 2930,
        1012,  102])"
2663,1,['probabilities'],Data sets within the text,seg_97,3.4 course material purchases and probabilities → this example was made up.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1018,  2607,  3430, 17402,  1998,  4013,  3676,
        14680,  1585,  2023,  2742,  2001,  2081,  2039,  1012,   102])"
2664,0,[],Data sets within the text,seg_97,3.4 auctions for tv and toaster → this example was made up.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1018, 10470,  2015,  2005,  2694,  1998, 15174,
         2121,  1585,  2023,  2742,  2001,  2081,  2039,  1012,   102])"
2665,0,[],Data sets within the text,seg_97,"3.4 stocks 18 → monthly returns for caterpillar, exxon mobil corp, and google for november",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1017,  1012,  1018, 15768,  2324,  1585,  7058,  5651,  2005,
        23488,  8197, 17305,  1010,  4654, 22500, 11240,  4014, 13058,  1010,
         1998,  8224,  2005,  2281,   102])"
2666,0,[],Data sets within the text,seg_97,2015 to october 2018.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 2325, 2000, 2255, 2760, 1012,  102])"
2667,1,"['random sample', 'sample', 'random', 'simple random sample', 'population']",Data sets within the text,seg_97,3.5 fcid → this sample can be considered a simple random sample from the us population. it,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1017, 1012, 1019, 4429, 3593, 1585, 2023, 7099, 2064, 2022, 2641,
        1037, 3722, 6721, 7099, 2013, 1996, 2149, 2313, 1012, 2009,  102])"
2668,0,[],Data sets within the text,seg_97,relies on the usda food commodity intake database.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 16803,  2006,  1996, 13751,  2050,  2833, 19502, 13822,  7809,
         1012,   102])"
2669,1,"['distributions', 'random', 'random variables', 'variables']",Data sets within the text,seg_97,b.4 distributions of random variables,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1038,  1012,  1018, 20611,  1997,  6721, 10857,   102])"
2670,1,"['distribution', 'data', 'distributions']",Data sets within the text,seg_97,"4.1 sat and act score distributions → the sat score data comes from the 2018 distribution,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1015,  2938,  1998,  2552,  3556, 20611,  1585,
         1996,  2938,  3556,  2951,  3310,  2013,  1996,  2760,  4353,  1010,
          102])"
2671,1,"['normal', 'data', 'distribution']",Data sets within the text,seg_97,"which is provided at reports.collegeboard.org/pdf/2018-total-group-sat-suite-assessments-annual-report.pdf the act score data is available at act.org/content/dam/act/unsecured/documents/cccr2018/p 99 999999 n s n00 act-gcpr national.pdf we also acknowledge that the actual act score distribution is not nearly normal. however, since the topic is very accessible, we decided to keep the context and examples.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2029,  2003,  3024,  2012,  4311,  1012,  2267,  6277,  1012,
         8917,  1013, 11135,  1013,  2760,  1011,  2561,  1011,  2177,  1011,
         2938,  1011,  7621,  1011, 20794,  1011,  3296,  1011,  3189,  1012,
        11135,  1996,  2552,  3556,  2951,  2003,  2800,  2012,  2552,  1012,
         8917,  1013,  4180,  1013,  5477,  1013,  2552,  1013,  4895,  3366,
        19405,  1013,  5491,  1013, 10507, 26775, 11387, 15136,  1013,  1052,
         5585, 25897,  2683,  2683,  2683,  1050,  1055,  1050,  8889,  2552,
         1011,  1043, 21906,  2099,  2120,  1012, 11135,  2057,  2036, 13399,
         2008,  1996,  5025,  2552,  3556,  4353,  2003,  2025,  3053,  3671,
         1012,  2174,  1010,  2144,  1996,  8476,  2003,  2200,  7801,  1010,
         2057,  2787,  2000,  2562,  1996,  6123,  1998,  4973,  1012,   102])"
2672,1,['distribution'],Data sets within the text,seg_97,4.1 male heights → the distribution is based on the usda food commodity intake database.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1015,  3287,  7535,  1585,  1996,  4353,  2003,
         2241,  2006,  1996, 13751,  2050,  2833, 19502, 13822,  7809,  1012,
          102])"
2673,1,"['sample', 'distribution', 'parameters']",Data sets within the text,seg_97,4.1 possum → the distribution parameters are based on a sample of possums from australia,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1015, 13433,  4757,  2819,  1585,  1996,  4353,
        11709,  2024,  2241,  2006,  1037,  7099,  1997, 13433,  4757, 18163,
         2013,  2660,   102])"
2674,1,"['variation', 'data']",Data sets within the text,seg_97,"and new guinea. the original source of this data is as follows. lindenmayer db, et al. 1995. morphological variation among columns of the mountain brushtail possum, trichosurus caninus ogilby (phalangeridae: marsupiala). australian journal of zoology 43: 449-458.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1998,  2047,  7102,  1012,  1996,  2434,  3120,  1997,  2023,
         2951,  2003,  2004,  4076,  1012, 22066, 27871,  2121, 16962,  1010,
         3802,  2632,  1012,  2786,  1012, 24012,  8386,  2426,  7753,  1997,
         1996,  3137,  8248, 14162, 13433,  4757,  2819,  1010, 13012,  9905,
        26210,  2271,  2064, 13429, 13958,  4014,  3762,  1006,  6887,  7911,
        11392,  6096,  1024,  7733,  6279,  4818,  2050,  1007,  1012,  2827,
         3485,  1997, 22405,  4724,  1024,  4008,  2683,  1011,  3429,  2620,
         1012,   102])"
2675,1,['statistics'],Data sets within the text,seg_97,4.2 exceeding insurance deductible → these statistics were made up but are possible values one,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1016, 17003,  5427,  2139,  8566,  6593,  7028,
         1585,  2122,  6747,  2020,  2081,  2039,  2021,  2024,  2825,  5300,
         2028,   102])"
2676,0,[],Data sets within the text,seg_97,might observe for low-deductible plans.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2453, 11949,  2005,  2659,  1011,  2139,  8566,  6593,  7028,
         3488,  1012,   102])"
2677,1,['statistics'],Data sets within the text,seg_97,4.3 exceeding insurance deductible → these statistics were made up but are possible values one,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1017, 17003,  5427,  2139,  8566,  6593,  7028,
         1585,  2122,  6747,  2020,  2081,  2039,  2021,  2024,  2825,  5300,
         2028,   102])"
2678,0,[],Data sets within the text,seg_97,might observe for low-deductible plans.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2453, 11949,  2005,  2659,  1011,  2139,  8566,  6593,  7028,
         3488,  1012,   102])"
2679,1,['information'],Data sets within the text,seg_97,"4.3 smoking friends→ unfortunately, we don’t currently have additional information on the source",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1017,  9422,  2814, 30113,  6854,  1010,  2057,
         2123,  1521,  1056,  2747,  2031,  3176,  2592,  2006,  1996,  3120,
          102])"
2680,1,['statistic'],Data sets within the text,seg_97,"for the 30% statistic, so don’t consider this one as fact since we cannot verify it was from a reputable source.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2005,  1996,  2382,  1003, 28093,  6553,  1010,  2061,  2123,
         1521,  1056,  5136,  2023,  2028,  2004,  2755,  2144,  2057,  3685,
        20410,  2009,  2001,  2013,  1037, 16360, 23056,  3120,  1012,   102])"
2681,1,['rate'],Data sets within the text,seg_97,4.3 us smoking rate → the 15% smoking rate in the us figure is close to the value from the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1018, 1012, 1017, 2149, 9422, 3446, 1585, 1996, 2321, 1003, 9422,
        3446, 1999, 1996, 2149, 3275, 2003, 2485, 2000, 1996, 3643, 2013, 1996,
         102])"
2682,1,"['estimate', 'control']",Data sets within the text,seg_97,"centers for disease control and prevention website, which reports a value of 14% as of the 2017 estimate: cdc.gov/tobacco/data statistics/fact sheets/adult data/cig smoking/index.htm",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  6401,  2005,  4295,  2491,  1998,  9740,  4037,  1010,  2029,
         4311,  1037,  3643,  1997,  2403,  1003,  2004,  1997,  1996,  2418,
        10197,  1024, 26629,  1012, 18079,  1013,  9098,  1013,  2951,  6747,
         1013,  2755,  8697,  1013,  4639,  2951,  1013, 25022,  2290,  9422,
         1013,  5950,  1012,  1044, 21246,   102])"
2683,0,[],Data sets within the text,seg_97,4.4 football kicker → this example was made up.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1018,  2374, 22652,  1585,  2023,  2742,  2001,
         2081,  2039,  1012,   102])"
2684,0,[],Data sets within the text,seg_97,"4.4 heart attack admissions → this example was made up, though the heart attack admissions",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1018,  2540,  2886, 20247,  1585,  2023,  2742,
         2001,  2081,  2039,  1010,  2295,  1996,  2540,  2886, 20247,   102])"
2685,0,[],Data sets within the text,seg_97,are realistic for some hospitals.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2024, 12689,  2005,  2070,  8323,  1012,   102])"
2686,1,"['set', 'simulated', 'data set', 'data']",Data sets within the text,seg_97,4.5 ami occurrences→ this is a simulated data set but resembles actual ami data for new york,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1018,  1012,  1019, 26445, 27247, 30113,  2023,  2003,  1037,
        23599,  2951,  2275,  2021, 12950,  5025, 26445,  2951,  2005,  2047,
         2259,   102])"
2687,1,['rates'],Data sets within the text,seg_97,city based on typical ami incidence rates.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2103,  2241,  2006,  5171, 26445, 18949,  6165,  1012,   102])"
2688,0,[],Data sets within the text,seg_97,b.5 foundations for inference,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1038,  1012,  1019, 10100,  2005, 28937,   102])"
2689,1,"['observations', 'data']",Data sets within the text,seg_97,5.1 pew energy 2018→ the actual data has more observations than were referenced in this chap-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1019,  1012,  1015, 29071,  2943,  2760, 30113,  1996,  5025,
         2951,  2038,  2062,  9420,  2084,  2020, 14964,  1999,  2023, 15775,
         2361,  1011,   102])"
2690,1,"['variability', 'data', 'set', 'statistics', 'data set']",Data sets within the text,seg_97,"ter. that is, we used a subsample since it helped smooth some of the examples to have a bit more variability. the pew energy 2018 data set represents the full data set for each of the different energy source questions, which covers solar, wind, offshore drilling, hydrolic fracturing, and nuclear energy. the statistics used to construct the data are from the following page:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 28774,  1012,  2008,  2003,  1010,  2057,  2109,  1037,  4942,
        21559, 10814,  2144,  2009,  3271,  5744,  2070,  1997,  1996,  4973,
         2000,  2031,  1037,  2978,  2062, 28436,  1012,  1996, 29071,  2943,
         2760,  2951,  2275,  5836,  1996,  2440,  2951,  2275,  2005,  2169,
         1997,  1996,  2367,  2943,  3120,  3980,  1010,  2029,  4472,  5943,
         1010,  3612,  1010, 12195, 15827,  1010, 18479, 10415, 25312, 19159,
         1010,  1998,  4517,  2943,  1012,  1996,  6747,  2109,  2000,  9570,
         1996,  2951,  2024,  2013,  1996,  2206,  3931,  1024,   102])"
2691,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,5.2 pew energy 2018 → see the details for this data set above in the section 5.1 data section.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1019,  1012,  1016, 29071,  2943,  2760,  1585,  2156,  1996,
         4751,  2005,  2023,  2951,  2275,  2682,  1999,  1996,  2930,  1019,
         1012,  1015,  2951,  2930,  1012,   102])"
2692,0,[],Data sets within the text,seg_97,"5.2 ebola survey → in new york city on october 23rd, 2014, a doctor who had recently been",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1019,  1012,  1016,  1041, 24290,  5002,  1585,  1999,  2047,
         2259,  2103,  2006,  2255, 13928,  1010,  2297,  1010,  1037,  3460,
         2040,  2018,  3728,  2042,   102])"
2693,0,[],Data sets within the text,seg_97,"treating ebola patients in guinea went to the hospital with a slight fever and was subsequently diagnosed with ebola. soon thereafter, an nbc 4 new york/the wall street journal/marist poll found that 82% of new yorkers favored a “mandatory 21-day quarantine for anyone who has come in contact with an ebola patient”. this poll included responses of 1,042 new york adults between oct 26th and 28th, 2014. poll id ny141026 on maristpoll.marist.edu.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 12318,  1041, 24290,  5022,  1999,  7102,  2253,  2000,  1996,
         2902,  2007,  1037,  7263,  9016,  1998,  2001,  3525, 11441,  2007,
         1041, 24290,  1012,  2574,  6920,  1010,  2019,  6788,  1018,  2047,
         2259,  1013,  1996,  2813,  2395,  3485,  1013, 23787,  2102,  8554,
         2179,  2008,  6445,  1003,  1997,  2047, 19095,  2015, 12287,  1037,
         1523, 10915,  2538,  1011,  2154, 24209, 20486, 10196,  2005,  3087,
         2040,  2038,  2272,  1999,  3967,  2007,  2019,  1041, 24290,  5776,
         1524,  1012,  2023,  8554,  2443, 10960,  1997,  1015,  1010,  5840,
         2475,  2047,  2259,  6001,  2090, 13323, 14935,  1998, 15538,  1010,
         2297,  1012,  8554,  8909,  6396, 16932, 10790, 23833,  2006, 23787,
        25856, 14511,  1012, 23787,  2102,  1012,  3968,  2226,  1012,   102])"
2694,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,5.3 pew energy 2018 → see the details for this data set above in the section 5.1 data section.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1019,  1012,  1017, 29071,  2943,  2760,  1585,  2156,  1996,
         4751,  2005,  2023,  2951,  2275,  2682,  1999,  1996,  2930,  1019,
         1012,  1015,  2951,  2930,  1012,   102])"
2695,1,['samples'],Data sets within the text,seg_97,5.3 rosling questions → we noted much smaller samples than the roslings’ describe in their,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1019,  1012,  1017, 20996, 28886,  3980,  1585,  2057,  3264,
         2172,  3760,  8168,  2084,  1996, 20996, 28886,  2015,  1521,  6235,
         1999,  2037,   102])"
2696,1,"['populations', 'samples', 'rates']",Data sets within the text,seg_97,"book, factfulness, the samples we describe are similar but not the same as the actual rates. the approximate rates for the correct answers for the two questions for (sometimes different) populations discussed in the book, as reported in factfulness, are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2338,  1010,  2755, 20938,  1010,  1996,  8168,  2057,  6235,
         2024,  2714,  2021,  2025,  1996,  2168,  2004,  1996,  5025,  6165,
         1012,  1996, 15796,  6165,  2005,  1996,  6149,  6998,  2005,  1996,
         2048,  3980,  2005,  1006,  2823,  2367,  1007,  7080,  6936,  1999,
         1996,  2338,  1010,  2004,  2988,  1999,  2755, 20938,  1010,  2024,
          102])"
2697,0,[],Data sets within the text,seg_97,– 80% of the world’s 1 year olds have been vaccinated against some disease: 13% get this correct (17% in the us). gapm.io/q9,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1516,  3770,  1003,  1997,  1996,  2088,  1521,  1055,  1015,
         2095, 19457,  2031,  2042, 12436, 14693, 23854,  2114,  2070,  4295,
         1024,  2410,  1003,  2131,  2023,  6149,  1006,  2459,  1003,  1999,
         1996,  2149,  1007,  1012,  6578,  2213,  1012, 22834,  1013,  1053,
         2683,   102])"
2698,0,[],Data sets within the text,seg_97,– number of children in the world in 2100: 9% correct. gapm.io/q5,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1516,  2193,  1997,  2336,  1999,  1996,  2088,  1999, 12875,
         2692,  1024,  1023,  1003,  6149,  1012,  6578,  2213,  1012, 22834,
         1013,  1053,  2629,   102])"
2699,1,['percent'],Data sets within the text,seg_97,here are a few more questions and a rough percent of people who get them correct:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 2182, 2024, 1037, 2261, 2062, 3980, 1998, 1037, 5931, 3867, 1997,
        2111, 2040, 2131, 2068, 6149, 1024,  102])"
2700,0,[],Data sets within the text,seg_97,"– in all low-income countries across the world today, how many girls finish primary school: 20%, 40%, or 60%? answer: 60%. about 7% of people get this question correct. gapm.io/q1",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1516,  1999,  2035,  2659,  1011,  3318,  3032,  2408,  1996,
         2088,  2651,  1010,  2129,  2116,  3057,  3926,  3078,  2082,  1024,
         2322,  1003,  1010,  2871,  1003,  1010,  2030,  3438,  1003,  1029,
         3437,  1024,  3438,  1003,  1012,  2055,  1021,  1003,  1997,  2111,
         2131,  2023,  3160,  6149,  1012,  6578,  2213,  1012, 22834,  1013,
         1053,  2487,   102])"
2701,0,[],Data sets within the text,seg_97,"– what is the life expectancy of the world today: 50 years, 60 years, or 70 years? answer: 70 years. in the us, about 43% of people get this question correct. gapm.io/q4",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1516,  2054,  2003,  1996,  2166,  5987, 11656,  1997,  1996,
         2088,  2651,  1024,  2753,  2086,  1010,  3438,  2086,  1010,  2030,
         3963,  2086,  1029,  3437,  1024,  3963,  2086,  1012,  1999,  1996,
         2149,  1010,  2055,  4724,  1003,  1997,  2111,  2131,  2023,  3160,
         6149,  1012,  6578,  2213,  1012, 22834,  1013,  1053,  2549,   102])"
2702,0,[],Data sets within the text,seg_97,"– in 1996, tigers, giant pandas, and black rhinos were all listed as endangered. how many of these three species are more critically endangered today: two of them, one of them, none of them? answer: none of them. about 7% of people get this question correct. gapm.io/q11",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1516,  1999,  2727,  1010,  7600,  1010,  5016, 25462,  2015,
         1010,  1998,  2304, 24091,  2015,  2020,  2035,  3205,  2004, 10193,
         1012,  2129,  2116,  1997,  2122,  2093,  2427,  2024,  2062, 11321,
        10193,  2651,  1024,  2048,  1997,  2068,  1010,  2028,  1997,  2068,
         1010,  3904,  1997,  2068,  1029,  3437,  1024,  3904,  1997,  2068,
         1012,  2055,  1021,  1003,  1997,  2111,  2131,  2023,  3160,  6149,
         1012,  6578,  2213,  1012, 22834,  1013,  1053, 14526,   102])"
2703,0,[],Data sets within the text,seg_97,"– how many people in the world have some access to electricity? 20%, 50%, 80%. answer: 80%. about 22% of people get this correct. gapm.io/q12",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1516,  2129,  2116,  2111,  1999,  1996,  2088,  2031,  2070,
         3229,  2000,  6451,  1029,  2322,  1003,  1010,  2753,  1003,  1010,
         3770,  1003,  1012,  3437,  1024,  3770,  1003,  1012,  2055,  2570,
         1003,  1997,  2111,  2131,  2023,  6149,  1012,  6578,  2213,  1012,
        22834,  1013,  1053, 12521,   102])"
2704,1,['information'],Data sets within the text,seg_97,"for more information, check out the book, factfulness.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2005,  2062,  2592,  1010,  4638,  2041,  1996,  2338,  1010,
         2755, 20938,  1012,   102])"
2705,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,5.3 pew energy 2018 → see the details for this data set above in the section 5.1 data section.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1019,  1012,  1017, 29071,  2943,  2760,  1585,  2156,  1996,
         4751,  2005,  2023,  2951,  2275,  2682,  1999,  1996,  2930,  1019,
         1012,  1015,  2951,  2930,  1012,   102])"
2706,1,"['random sample', 'sample', 'random', 'simple random sample']",Data sets within the text,seg_97,"5.3 nuclear survey → a simple random sample of 1,028 us adults in march 2013 found that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1019, 1012, 1017, 4517, 5002, 1585, 1037, 3722, 6721, 7099, 1997,
        1015, 1010, 6185, 2620, 2149, 6001, 1999, 2233, 2286, 2179, 2008,  102])"
2707,0,[],Data sets within the text,seg_97,56% of us adults support nuclear arms reduction. www.gallup.com/poll/161198/favor-russian-nuclear-arms-reductions.aspx,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  5179,  1003,  1997,  2149,  6001,  2490,  4517,  2608,  7312,
         1012,  7479,  1012, 26033,  6279,  1012,  4012,  1013,  8554,  1013,
        28769,  2683,  2620,  1013,  5684,  1011,  2845,  1011,  4517,  1011,
         2608,  1011, 25006,  1012,  2004,  2361,  2595,   102])"
2708,0,[],Data sets within the text,seg_97,5.3 car manufacturing → this example was made up.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1019, 1012, 1017, 2482, 5814, 1585, 2023, 2742, 2001, 2081, 2039,
        1012,  102])"
2709,1,"['sets', 'data sets', 'data']",Data sets within the text,seg_97,"5.3 stent30, stent365 → these data sets are described in data appendix b.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1019,  1012,  1017, 26261,  3372, 14142,  1010, 26261,  3372,
        21619,  2629,  1585,  2122,  2951,  4520,  2024,  2649,  1999,  2951,
        22524,  1038,  1012,  1015,  1012,   102])"
2710,1,"['categorical data', 'data', 'categorical']",Data sets within the text,seg_97,b.6 inference for categorical data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1038,  1012,  1020, 28937,  2005,  4937, 27203,  2951,   102])"
2711,1,['statistics'],Data sets within the text,seg_97,6.1 payday loans → the statistics come from the following source:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1015,  3477, 10259, 10940,  1585,  1996,  6747,
         2272,  2013,  1996,  2206,  3120,  1024,   102])"
2712,0,[],Data sets within the text,seg_97,6.1 tire factory → this example was made up.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1015, 12824,  4713,  1585,  2023,  2742,  2001,
         2081,  2039,  1012,   102])"
2713,0,[],Data sets within the text,seg_97,6.2 cpr → böttiger et al. efficacy and safety of thrombolytic therapy after initially unsuccessful,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1016, 18133,  2099,  1585, 28516,  3775,  4590,
         3802,  2632,  1012, 21150,  1998,  3808,  1997, 16215, 21716, 14956,
        21252,  7242,  2044,  3322,  7736,   102])"
2714,1,['trial'],Data sets within the text,seg_97,"cardiopulmonary resuscitation: a prospective clinical trial. the lancet, 2001.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  4003,  3695, 14289, 13728,  7856,  2854, 24501,  2271, 26243,
         3370,  1024,  1037, 17464,  6612,  3979,  1012,  1996,  9993,  2102,
         1010,  2541,  1012,   102])"
2715,0,[],Data sets within the text,seg_97,"6.2 fish oil 18 → manson je, et al. 2018. marine n-3 fatty acids and prevention of cardio-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1016,  3869,  3514,  2324,  1585, 21440, 15333,
         1010,  3802,  2632,  1012,  2760,  1012,  3884,  1050,  1011,  1017,
        19101, 12737,  1998,  9740,  1997,  4003,  3695,  1011,   102])"
2716,0,[],Data sets within the text,seg_97,vascular disease and cancer. nejmoa1811403.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 21449,  4295,  1998,  4456,  1012, 11265, 24703, 10441, 15136,
        14526, 12740,  2509,  1012,   102])"
2717,0,[],Data sets within the text,seg_97,6.2 mammogram → miller ab. 2014. twenty five year follow-up for breast cancer incidence and,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1016,  5003,  7382,  8649,  6444,  1585,  4679,
        11113,  1012,  2297,  1012,  3174,  2274,  2095,  3582,  1011,  2039,
         2005,  7388,  4456, 18949,  1998,   102])"
2718,1,['trial'],Data sets within the text,seg_97,mortality of the canadian national breast screening study: randomised screening trial. bmj 2014;348:g366.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 13356,  1997,  1996,  3010,  2120,  7388, 11326,  2817,  1024,
         6721,  5084, 11326,  3979,  1012,  1038,  2213,  3501,  2297,  1025,
         4090,  2620,  1024,  1043, 21619,  2575,  1012,   102])"
2719,1,"['set', 'control', 'quality control', 'data set', 'data']",Data sets within the text,seg_97,6.2 drone blades → the quality control data set for quadcopter drone blades is a made-up data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1016, 18465, 10491,  1585,  1996,  3737,  2491,
         2951,  2275,  2005, 17718,  3597, 13876,  2121, 18465, 10491,  2003,
         1037,  2081,  1011,  2039,  2951,   102])"
2720,1,"['set', 'simulated', 'data set', 'data']",Data sets within the text,seg_97,set for an example. we provide the simulated data in the drone blades data set.,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2275,  2005,  2019,  2742,  1012,  2057,  3073,  1996, 23599,
         2951,  1999,  1996, 18465, 10491,  2951,  2275,  1012,   102])"
2721,1,"['discrimination', 'set', 'data set', 'data']",Data sets within the text,seg_97,6.3 jury→ the jury data set for examining discrimination is a made-up data set an example. we,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1017,  6467, 30113,  1996,  6467,  2951,  2275,
         2005, 12843,  9147,  2003,  1037,  2081,  1011,  2039,  2951,  2275,
         2019,  2742,  1012,  2057,   102])"
2722,1,"['set', 'simulated', 'data set', 'data']",Data sets within the text,seg_97,provide the simulated data in the jury data set.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  3073,  1996, 23599,  2951,  1999,  1996,  6467,  2951,  2275,
         1012,   102])"
2723,1,['data'],Data sets within the text,seg_97,6.3 sp500 1950 2018 → data is sourced from finance.yahoo.com.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1017, 11867, 29345,  3925,  2760,  1585,  2951,
         2003, 23184,  2013,  5446,  1012, 20643,  1012,  4012,  1012,   102])"
2724,0,[],Data sets within the text,seg_97,"6.4 ask → minson ja, ruedy ne, schweitzer me. there is such a thing as a stupid question:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1018,  3198,  1585,  8117,  3385, 14855,  1010,
        13413,  5149, 11265,  1010,  8040,  2232, 19845, 29546,  2033,  1012,
         2045,  2003,  2107,  1037,  2518,  2004,  1037,  5236,  3160,  1024,
          102])"
2725,1,"['trial', 'control']",Data sets within the text,seg_97,"6.4 diabetes2 → zeitler p, et al. 2012. a clinical trial to maintain glycemic control in youth",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1020,  1012,  1018, 14671,  2475,  1585, 27838,  4183,  3917,
         1052,  1010,  3802,  2632,  1012,  2262,  1012,  1037,  6612,  3979,
         2000,  5441,  1043,  2135,  3401,  7712,  2491,  1999,  3360,   102])"
2726,0,['n'],Data sets within the text,seg_97,with type 2 diabetes. n engl j med.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2007,  2828,  1016, 14671,  1012,  1050, 25540,  2140,  1046,
        19960,  1012,   102])"
2727,1,"['numerical', 'data']",Data sets within the text,seg_97,b.7 inference for numerical data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1038,  1012,  1021, 28937,  2005, 15973,  2951,   102])"
2728,1,"['levels', 'samples']",Data sets within the text,seg_97,7.1 risso’s dolphins → endo t and haraguchi k. 2009. high mercury levels in hair samples from,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1015, 15544, 24137,  1521,  1055, 13600,  1585,
         2203,  2080,  1056,  1998, 18820, 16918,  1047,  1012,  2268,  1012,
         2152,  8714,  3798,  1999,  2606,  8168,  2013,   102])"
2729,0,[],Data sets within the text,seg_97,"residents of taiji, a japanese whaling town. marine pollution bulletin 60(5):743-747.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  3901,  1997, 13843,  4478,  1010,  1037,  2887, 23687,  2237,
         1012,  3884, 10796, 13146,  3438,  1006,  1019,  1007,  1024,  6356,
         2509,  1011, 25374,  1012,   102])"
2730,1,"['random sample', 'sample', 'random', 'simple random sample']",Data sets within the text,seg_97,"taiji was featured in the movie the cove, and it is a significant source of dolphin and whale meat in japan. thousands of dolphins pass through the taiji area annually, and we assumes these 19 dolphins reasonably represent a simple random sample from those dolphins.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 13843,  4478,  2001,  2956,  1999,  1996,  3185,  1996, 11821,
         1010,  1998,  2009,  2003,  1037,  3278,  3120,  1997, 17801,  1998,
        13156,  6240,  1999,  2900,  1012,  5190,  1997, 13600,  3413,  2083,
         1996, 13843,  4478,  2181,  6604,  1010,  1998,  2057, 15980,  2122,
         2539, 13600, 16286,  5050,  1037,  3722,  6721,  7099,  2013,  2216,
        13600,  1012,   102])"
2731,0,[],Data sets within the text,seg_97,7.1 croaker white fish → fda.gov/food/foodborneillnesscontaminants/metals/ucm115644.htm,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1015, 13675, 10441,  5484,  2317,  3869,  1585,
        17473,  1012, 18079,  1013,  2833,  1013,  2833, 19288,  8591,  2791,
         8663, 15464,  3981,  7666,  1013, 11970,  1013, 15384,  2213, 14526,
        26976, 22932,  1012,  1044, 21246,   102])"
2732,1,['data'],Data sets within the text,seg_97,"7.2 textbooks, ucla textbooks f18→ data were collected by openintro staff in 2010 and again",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1016, 18841,  1010, 12389, 18841, 20069,  2620,
        30113,  2951,  2020,  5067,  2011,  2330, 18447,  3217,  3095,  1999,
         2230,  1998,  2153,   102])"
2733,1,"['sample', 'information']",Data sets within the text,seg_97,"in 2018. for the 2018 sample, we sampled 201 ucla courses. of those, 68 required books that could be found on amazon. the websites where information was retrieved: sa.ucla.edu/ro/public/soc, ucla.verbacompare.com, and amazon.com.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1999,  2760,  1012,  2005,  1996,  2760,  7099,  1010,  2057,
        18925, 16345, 12389,  5352,  1012,  1997,  2216,  1010,  6273,  3223,
         2808,  2008,  2071,  2022,  2179,  2006,  9733,  1012,  1996, 11744,
         2073,  2592,  2001,  5140,  1024,  7842,  1012, 12389,  1012,  3968,
         2226,  1013, 20996,  1013,  2270,  1013, 27084,  1010, 12389,  1012,
        12034, 22684,  8737, 12069,  1012,  4012,  1010,  1998,  9733,  1012,
         4012,  1012,   102])"
2734,0,[],Data sets within the text,seg_97,"7.3 stem cells→menard c, et al. 2005. transplantation of cardiac-committed mouse embryonic",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1017,  7872,  4442, 30113,  3549,  4232,  1039,
         1010,  3802,  2632,  1012,  2384,  1012, 22291,  3370,  1997, 15050,
         1011,  5462,  8000, 28086,  8713,   102])"
2735,0,[],Data sets within the text,seg_97,"stem cells to infarcted sheep myocardium: a preclinical study. the lancet: 366:9490, p1005- 1012.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  7872,  4442,  2000,  1999, 14971, 10985,  8351,  2026, 24755,
        17080,  2819,  1024,  1037,  3653, 20464,  5498,  9289,  2817,  1012,
         1996,  9993,  2102,  1024,  4029,  2575,  1024,  6365, 21057,  1010,
         1052, 18613,  2629,  1011,  7886,  2475,  1012,   102])"
2736,0,[],Data sets within the text,seg_97,"7.3 ncbirths → birth records released by north carolina in 2004. unfortunately, we don’t cur-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1017, 13316, 17706, 26830,  1585,  4182,  2636,
         2207,  2011,  2167,  3792,  1999,  2432,  1012,  6854,  1010,  2057,
         2123,  1521,  1056, 12731,  2099,  1011,   102])"
2737,1,"['set', 'information', 'data set', 'data']",Data sets within the text,seg_97,rently have additional information on the source for this data set.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 9278, 2135, 2031, 3176, 2592, 2006, 1996, 3120, 2005, 2023, 2951,
        2275, 1012,  102])"
2738,0,[],Data sets within the text,seg_97,7.3 exam versions → this example was made up.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1017, 11360,  4617,  1585,  2023,  2742,  2001,
         2081,  2039,  1012,   102])"
2739,1,"['deviation', 'standard deviation', 'standard', 'statistics']",Data sets within the text,seg_97,7.4 blood pressure statistics → the blood pressure standard deviation for patients with blood,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1018,  2668,  3778,  6747,  1585,  1996,  2668,
         3778,  3115, 24353,  2005,  5022,  2007,  2668,   102])"
2740,1,['data'],Data sets within the text,seg_97,pressure ranging from 140 to 180 mmhg is guessed and may be a little (but likely not dramatically) imprecise from what we’d observe in actual data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  3778,  7478,  2013,  8574,  2000,  8380,  3461, 25619,  2003,
        11445,  1998,  2089,  2022,  1037,  2210,  1006,  2021,  3497,  2025,
        12099,  1007, 17727,  2890, 18380,  2013,  2054,  2057,  1521,  1040,
        11949,  1999,  5025,  2951,  1012,   102])"
2741,1,"['anova', 'data']",Data sets within the text,seg_97,"7.5 toy anova → data used for figure 7.19, where this data was made up.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1021, 1012, 1019, 9121, 2019, 7103, 1585, 2951, 2109, 2005, 3275,
        1021, 1012, 2539, 1010, 2073, 2023, 2951, 2001, 2081, 2039, 1012,  102])"
2742,1,['data'],Data sets within the text,seg_97,7.5 mlb players 18 → data were retrieved from mlb.mlb.com/stats. only players with at least,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1021,  1012,  1019, 10901,  2867,  2324,  1585,  2951,  2020,
         5140,  2013, 10901,  1012, 10901,  1012,  4012,  1013, 26319,  1012,
         2069,  2867,  2007,  2012,  2560,   102])"
2743,0,[],Data sets within the text,seg_97,100 at bats were considered during the analysis.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2531,  2012, 12236,  2020,  2641,  2076,  1996,  4106,  1012,
          102])"
2744,0,[],Data sets within the text,seg_97,7.5 classdata → this example was made up.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([ 101, 1021, 1012, 1019, 2465, 2850, 2696, 1585, 2023, 2742, 2001, 2081,
        2039, 1012,  102])"
2745,1,"['regression', 'linear regression', 'linear']",Data sets within the text,seg_97,b.8 introduction to linear regression,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1038,  1012,  1022,  4955,  2000,  7399, 26237,   102])"
2746,1,"['linear', 'simulated', 'simulated scatter', 'plots', 'plot', 'data']",Data sets within the text,seg_97,8.1 simulated scatter → fake data used for the first three plots. the perfect linear plot uses,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1022,  1012,  1015, 23599,  8040, 20097,  1585,  8275,  2951,
         2109,  2005,  1996,  2034,  2093, 14811,  1012,  1996,  3819,  7399,
         5436,  3594,   102])"
2747,1,"['curve', 'residual', 'linear', 'set', 'scatterplots', 'correlation', 'plots', 'residual plots', 'data set', 'data', 'variable']",Data sets within the text,seg_97,"group 4 data, where group variable in the data set (figure 8.1). the group of 3 imperfect linear plots use groups 1-3 (figure 8.2). the sinusoidal curve uses group 5 data (figure 8.3). the group of 3 scatterplots with residual plots use groups 6-8 (figure 8.8). the correlation plots uses groups 9-19 data (figures 8.9 and 8.10).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2177,  1018,  2951,  1010,  2073,  2177,  8023,  1999,  1996,
         2951,  2275,  1006,  3275,  1022,  1012,  1015,  1007,  1012,  1996,
         2177,  1997,  1017, 29238,  7399, 14811,  2224,  2967,  1015,  1011,
         1017,  1006,  3275,  1022,  1012,  1016,  1007,  1012,  1996,  8254,
        26658, 16975,  7774,  3594,  2177,  1019,  2951,  1006,  3275,  1022,
         1012,  1017,  1007,  1012,  1996,  2177,  1997,  1017,  8040, 20097,
        24759, 12868,  2007, 21961, 14811,  2224,  2967,  1020,  1011,  1022,
         1006,  3275,  1022,  1012,  1022,  1007,  1012,  1996, 16902, 14811,
         3594,  2967,  1023,  1011,  2539,  2951,  1006,  4481,  1022,  1012,
         1023,  1998,  1022,  1012,  2184,  1007,  1012,   102])"
2748,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,8.1 possum → this data set is described in data appendix b.4.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1022,  1012,  1015, 13433,  4757,  2819,  1585,  2023,  2951,
         2275,  2003,  2649,  1999,  2951, 22524,  1038,  1012,  1018,  1012,
          102])"
2749,1,"['data', 'table']",Data sets within the text,seg_97,8.2 elmhurst→ these data were sampled from a table of data for all freshman from the 2011 class,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1022,  1012,  1016, 17709, 10510, 30113,  2122,  2951,  2020,
        18925,  2013,  1037,  2795,  1997,  2951,  2005,  2035, 10452,  2013,
         1996,  2249,  2465,   102])"
2750,0,[],Data sets within the text,seg_97,at elmhurst college that accompanied an article titled what students really pay to go to college published online by the chronicle of higher education: chronicle.com/article/what- students-really-pay-to-go/131435.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2012, 17709, 10510,  2267,  2008,  5642,  2019,  3720,  4159,
         2054,  2493,  2428,  3477,  2000,  2175,  2000,  2267,  2405,  3784,
         2011,  1996,  9519,  1997,  3020,  2495,  1024,  9519,  1012,  4012,
         1013,  3720,  1013,  2054,  1011,  2493,  1011,  2428,  1011,  3477,
         1011,  2000,  1011,  2175,  1013, 14677, 23777,  2629,  1012,   102])"
2751,1,"['plots', 'simulated']",Data sets within the text,seg_97,8.2 simulated scatter→ the plots for things that can go wrong uses groups 20-23 (figure 8.12).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1022,  1012,  1016, 23599,  8040, 20097, 30113,  1996, 14811,
         2005,  2477,  2008,  2064,  2175,  3308,  3594,  2967,  2322,  1011,
         2603,  1006,  3275,  1022,  1012,  2260,  1007,  1012,   102])"
2752,1,['data'],Data sets within the text,seg_97,8.2 mariokart → auction data from ebay (ebay.com) for the game mario kart for the nintendo,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1022,  1012,  1016,  7986,  6673,  2102,  1585, 10470,  2951,
         2013,  1041, 15907,  1006,  1041, 15907,  1012,  4012,  1007,  2005,
         1996,  2208,  7986, 10556,  5339,  2005,  1996, 10022,   102])"
2753,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,"wii. this data set was collected in early october, 2009.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101, 16568,  1012,  2023,  2951,  2275,  2001,  5067,  1999,  2220,
         2255,  1010,  2268,  1012,   102])"
2754,1,"['simulated', 'outliers', 'simulated scatter', 'plots']",Data sets within the text,seg_97,8.3 simulated scatter → the plots for types of outliers uses groups 24-29 (figure 8.18).,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1022,  1012,  1017, 23599,  8040, 20097,  1585,  1996, 14811,
         2005,  4127,  1997,  2041, 14355,  2015,  3594,  2967,  2484,  1011,
         2756,  1006,  3275,  1022,  1012,  2324,  1007,  1012,   102])"
2755,1,['data'],Data sets within the text,seg_97,8.4 midterms house → data was retrieved from wikipedia.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1022,  1012,  1018,  3054,  3334,  5244,  2160,  1585,  2951,
         2001,  5140,  2013, 16948,  1012,   102])"
2756,1,"['regression', 'logistic regression', 'logistic']",Data sets within the text,seg_97,b.9 multiple and logistic regression,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1038,  1012,  1023,  3674,  1998,  8833,  6553, 26237,   102])"
2757,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,9.1 loans full schema → this data set is described in data appendix b.1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1023,  1012,  1015, 10940,  2440,  8040, 28433,  1585,  2023,
         2951,  2275,  2003,  2649,  1999,  2951, 22524,  1038,  1012,  1015,
         1012,   102])"
2758,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,9.2 loans full schema → this data set is described in data appendix b.1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1023,  1012,  1016, 10940,  2440,  8040, 28433,  1585,  2023,
         2951,  2275,  2003,  2649,  1999,  2951, 22524,  1038,  1012,  1015,
         1012,   102])"
2759,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,9.3 loans full schema → this data set is described in data appendix b.1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1023,  1012,  1017, 10940,  2440,  8040, 28433,  1585,  2023,
         2951,  2275,  2003,  2649,  1999,  2951, 22524,  1038,  1012,  1015,
         1012,   102])"
2760,1,"['set', 'data set', 'data']",Data sets within the text,seg_97,9.4 mariokart → this data set is described in data appendix b.8.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1023,  1012,  1018,  7986,  6673,  2102,  1585,  2023,  2951,
         2275,  2003,  2649,  1999,  2951, 22524,  1038,  1012,  1022,  1012,
          102])"
2761,0,[],Data sets within the text,seg_97,"9.5 resume → bertrand m, mullainathan s. 2004. are emily and greg more employable than",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  1023,  1012,  1019, 13746,  1585, 20586,  1049,  1010, 14163,
         4571,  3981, 21604,  1055,  1012,  2432,  1012,  2024,  6253,  1998,
         6754,  2062, 12666,  3085,  2084,   102])"
2762,1,"['discrimination', 'experiment']",Data sets within the text,seg_97,lakisha and jamal? a field experiment on labor market discrimination. the american economic review 94:4 (991-1013). www.nber.org/papers/w9873,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2474, 14270,  3270,  1998, 24132,  1029,  1037,  2492,  7551,
         2006,  4450,  3006,  9147,  1012,  1996,  2137,  3171,  3319,  6365,
         1024,  1018,  1006,  5585,  2487,  1011,  7886,  2509,  1007,  1012,
         7479,  1012,  1050,  5677,  1012,  8917,  1013,  4981,  1013,  1059,
         2683,  2620,  2581,  2509,   102])"
2763,1,"['design', 'estimates', 'standard', 'point estimates', 'variables', 'combination', 'data']",Data sets within the text,seg_97,"we did omit discussion of some structure in the data for the analysis presented: the experiment design included blocking, where typically four resumes were sent to each job: one for each inferred race/sex combination (as inferred based on the first name). we did not worry about this blocking aspect, since accounting for the blocking would reduce the standard error without notably changing the point estimates for the race and sex variables versus the analysis performed in the section. that is, the most interesting conclusions in the study are unaffected even when completing a more sophisticated analysis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2951, 4520, 2306, 1996, 3793])","tensor([  101,  2057,  2106, 18168,  4183,  6594,  1997,  2070,  3252,  1999,
         1996,  2951,  2005,  1996,  4106,  3591,  1024,  1996,  7551,  2640,
         2443, 10851,  1010,  2073,  4050,  2176, 13746,  2015,  2020,  2741,
         2000,  2169,  3105,  1024,  2028,  2005,  2169,  1999,  7512,  5596,
         2679,  1013,  3348,  5257,  1006,  2004,  1999,  7512,  5596,  2241,
         2006,  1996,  2034,  2171,  1007,  1012,  2057,  2106,  2025,  4737,
         2055,  2023, 10851,  7814,  1010,  2144,  9529,  2005,  1996, 10851,
         2052,  5547,  1996,  3115,  7561,  2302,  5546,  5278,  1996,  2391,
        10035,  2005,  1996,  2679,  1998,  3348, 10857,  6431,  1996,  4106,
         2864,  1999,  1996,  2930,  1012,  2008,  2003,  1010,  1996,  2087,
         5875, 15306,  1999,  1996,  2817,  2024, 24720,  2130,  2043,  7678,
         1037,  2062, 12138,  4106,  1012,   102])"
2764,1,"['normal probability table', 'table', 'probability', 'normal', 'probability table']",Distribution tables,seg_99,c.1 normal probability table,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0.])","tensor([4353, 7251])","tensor([ 101, 1039, 1012, 1015, 3671, 9723, 2795,  102])"
2765,1,"['percentiles', 'normal distribution', 'normal probability table', 'table', 'probability', 'normal', 'distribution', 'probability table']",Distribution tables,seg_99,"a normal probability table may be used to find percentiles of a normal distribution using a z-score, or vice-versa. such a table lists z-scores and the corresponding percentiles. an abbreviated probability table is provided in figure c.1 that we’ll use for the examples in this appendix. a full table may be found on page 410.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1037,  3671,  9723,  2795,  2089,  2022,  2109,  2000,  2424,
         3867,  9463,  2015,  1997,  1037,  3671,  4353,  2478,  1037,  1062,
         1011,  3556,  1010,  2030,  3580,  1011, 18601,  1012,  2107,  1037,
         2795,  7201,  1062,  1011,  7644,  1998,  1996,  7978,  3867,  9463,
         2015,  1012,  2019, 12066,  9723,  2795,  2003,  3024,  1999,  3275,
         1039,  1012,  1015,  2008,  2057,  1521,  2222,  2224,  2005,  1996,
         4973,  1999,  2023, 22524,  1012,  1037,  2440,  2795,  2089,  2022,
         2179,  2006,  3931, 19151,  1012,   102])"
2766,1,"['probability table', 'normal probability table', 'table', 'probability', 'random variable', 'percentile', 'normal random variable', 'random', 'normal', 'variable']",Distribution tables,seg_99,"figure c.1: a section of the normal probability table. the percentile for a normal random variable with z = 1.00 has been highlighted, and the percentile closest to 0.8000 has also been highlighted.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3275,  1039,  1012,  1015,  1024,  1037,  2930,  1997,  1996,
         3671,  9723,  2795,  1012,  1996,  3867,  9463,  2005,  1037,  3671,
         6721,  8023,  2007,  1062,  1027,  1015,  1012,  4002,  2038,  2042,
        11548,  1010,  1998,  1996,  3867,  9463,  7541,  2000,  1014,  1012,
         5385,  2692,  2038,  2036,  2042, 11548,  1012,   102])"
2767,1,"['observation', 'normal probability table', 'table', 'probability', 'percentile', 'intersection', 'normal', 'probability table']",Distribution tables,seg_99,"when using a normal probability table to find a percentile for z (rounded to two decimals), identify the proper row in the normal probability table up through the first decimal, and then determine the column representing the second decimal value. the intersection of this row and column is the percentile of the observation. for instance, the percentile of z = 0.45 is shown in row 0.4 and column 0.05 in figure c.1: 0.6736, or the 67.36th percentile.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2043,  2478,  1037,  3671,  9723,  2795,  2000,  2424,  1037,
         3867,  9463,  2005,  1062,  1006,  8352,  2000,  2048, 26066,  2015,
         1007,  1010,  6709,  1996,  5372,  5216,  1999,  1996,  3671,  9723,
         2795,  2039,  2083,  1996,  2034, 26066,  1010,  1998,  2059,  5646,
         1996,  5930,  5052,  1996,  2117, 26066,  3643,  1012,  1996,  6840,
         1997,  2023,  5216,  1998,  5930,  2003,  1996,  3867,  9463,  1997,
         1996,  8089,  1012,  2005,  6013,  1010,  1996,  3867,  9463,  1997,
         1062,  1027,  1014,  1012,  3429,  2003,  3491,  1999,  5216,  1014,
         1012,  1018,  1998,  5930,  1014,  1012,  5709,  1999,  3275,  1039,
         1012,  1015,  1024,  1014,  1012,  6163, 21619,  1010,  2030,  1996,
         6163,  1012, 21460,  3867,  9463,  1012,   102])"
2768,1,"['observation', 'percentile']",Distribution tables,seg_99,figure c.2: the area to the left of z represents the percentile of the observation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 3275, 1039, 1012, 1016, 1024, 1996, 2181, 2000, 1996, 2187, 1997,
        1062, 5836, 1996, 3867, 9463, 1997, 1996, 8089, 1012,  102])"
2769,1,"['scores', 'normal distribution', 'normal', 'distribution', 'percentile']",Distribution tables,seg_99,"sat scores follow a normal distribution, n(1100, 200). ann earned a score of 1300 on her sat with a corresponding z-score of z = 1. she would like to know what percentile she falls in among all sat test-takers.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4353, 7251])","tensor([  101,  2938,  7644,  3582,  1037,  3671,  4353,  1010,  1050,  1006,
        22096,  1010,  3263,  1007,  1012,  5754,  3687,  1037,  3556,  1997,
        19527,  2006,  2014,  2938,  2007,  1037,  7978,  1062,  1011,  3556,
         1997,  1062,  1027,  1015,  1012,  2016,  2052,  2066,  2000,  2113,
         2054,  3867,  9463,  2016,  4212,  1999,  2426,  2035,  2938,  3231,
         1011,  2202,  2869,  1012,   102])"
2770,1,"['percentage', 'percentile']",Distribution tables,seg_99,ann’s percentile is the percentage of people who earned a lower sat score than her. we shade the area representing those individuals in the following graph:,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  5754,  1521,  1055,  3867,  9463,  2003,  1996,  7017,  1997,
         2111,  2040,  3687,  1037,  2896,  2938,  3556,  2084,  2014,  1012,
         2057,  8703,  1996,  2181,  5052,  2216,  3633,  1999,  1996,  2206,
        10629,  1024,   102])"
2771,1,"['curve', 'normal probability table', 'table', 'probability', 'percentile', 'normal', 'probability table']",Distribution tables,seg_99,"the total area under the normal curve is always equal to 1, and the proportion of people who scored below ann on the sat is equal to the area shaded in the graph. we find this area by looking in row 1.0 and column 0.00 in the normal probability table: 0.8413. in other words, ann is in the 84th percentile of sat takers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1996,  2561,  2181,  2104,  1996,  3671,  7774,  2003,  2467,
         5020,  2000,  1015,  1010,  1998,  1996, 10817,  1997,  2111,  2040,
         3195,  2917,  5754,  2006,  1996,  2938,  2003,  5020,  2000,  1996,
         2181, 25273,  1999,  1996, 10629,  1012,  2057,  2424,  2023,  2181,
         2011,  2559,  1999,  5216,  1015,  1012,  1014,  1998,  5930,  1014,
         1012,  4002,  1999,  1996,  3671,  9723,  2795,  1024,  1014,  1012,
         6391, 17134,  1012,  1999,  2060,  2616,  1010,  5754,  2003,  1999,
         1996,  6391,  2705,  3867,  9463,  1997,  2938,  2202,  2869,  1012,
          102])"
2772,1,['tail'],Distribution tables,seg_99,how do we find an upper tail area?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 2129, 2079, 2057, 2424, 2019, 3356, 5725, 2181, 1029,  102])"
2773,1,"['tail', 'normal probability table', 'table', 'probability', 'normal', 'probability table', 'test']",Distribution tables,seg_99,"the normal probability table always gives the area to the left. this means that if we want the area to the right, we first find the lower tail and then subtract it from 1. for instance, 84.13% of sat takers scored below ann, which means 15.87% of test takers scored higher than ann.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 1996, 3671, 9723, 2795, 2467, 3957, 1996, 2181, 2000, 1996, 2187,
        1012, 2023, 2965, 2008, 2065, 2057, 2215, 1996, 2181, 2000, 1996, 2157,
        1010, 2057, 2034, 2424, 1996, 2896, 5725, 1998, 2059, 4942, 6494, 6593,
        2009, 2013, 1015, 1012, 2005, 6013, 1010, 6391, 1012, 2410, 1003, 1997,
        2938, 2202, 2869, 3195, 2917, 5754, 1010, 2029, 2965, 2321, 1012, 6584,
        1003, 1997, 3231, 2202, 2869, 3195, 3020, 2084, 5754, 1012,  102])"
2774,1,"['associated', 'table', 'percentile']",Distribution tables,seg_99,"we can also find the z-score associated with a percentile. for example, to identify z for the 80th percentile, we look for the value closest to 0.8000 in the middle portion of the table: 0.7995. we determine the z-score for the 80th percentile by combining the row and column z values: 0.84.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2057,  2064,  2036,  2424,  1996,  1062,  1011,  3556,  3378,
         2007,  1037,  3867,  9463,  1012,  2005,  2742,  1010,  2000,  6709,
         1062,  2005,  1996,  3770,  2705,  3867,  9463,  1010,  2057,  2298,
         2005,  1996,  3643,  7541,  2000,  1014,  1012,  5385,  2692,  1999,
         1996,  2690,  4664,  1997,  1996,  2795,  1024,  1014,  1012,  6535,
         2683,  2629,  1012,  2057,  5646,  1996,  1062,  1011,  3556,  2005,
         1996,  3770,  2705,  3867,  9463,  2011, 11566,  1996,  5216,  1998,
         5930,  1062,  5300,  1024,  1014,  1012,  6391,  1012,   102])"
2775,1,['percentile'],Distribution tables,seg_99,find the sat score for the 80th percentile.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 2424, 1996, 2938, 3556, 2005, 1996, 3770, 2705, 3867, 9463, 1012,
         102])"
2776,1,"['set', 'table']",Distribution tables,seg_99,"we look for the are to the value in the table closest to 0.8000. the closest value is 0.7995, which corresponds to z = 0.84, where 0.8 comes from the row value and 0.04 comes from the column value. next, we set up the equation for the z-score and the unknown value x as follows, and then we solve for x:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2057,  2298,  2005,  1996,  2024,  2000,  1996,  3643,  1999,
         1996,  2795,  7541,  2000,  1014,  1012,  5385,  2692,  1012,  1996,
         7541,  3643,  2003,  1014,  1012,  6535,  2683,  2629,  1010,  2029,
        14788,  2000,  1062,  1027,  1014,  1012,  6391,  1010,  2073,  1014,
         1012,  1022,  3310,  2013,  1996,  5216,  3643,  1998,  1014,  1012,
         5840,  3310,  2013,  1996,  5930,  3643,  1012,  2279,  1010,  2057,
         2275,  2039,  1996,  8522,  2005,  1996,  1062,  1011,  3556,  1998,
         1996,  4242,  3643,  1060,  2004,  4076,  1010,  1998,  2059,  2057,
         9611,  2005,  1060,  1024,   102])"
2777,1,"['scores', 'percentile']",Distribution tables,seg_99,"the college board scales scores to increments of 10, so the 80th percentile is 1270. (reporting 1268 would have been perfectly okay for our purposes.)",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([4353, 7251])","tensor([  101,  1996,  2267,  2604,  9539,  7644,  2000,  4297, 28578, 11187,
         1997,  2184,  1010,  2061,  1996,  3770,  2705,  3867,  9463,  2003,
        13029,  2692,  1012,  1006,  7316, 14010,  2620,  2052,  2031,  2042,
         6669,  3100,  2005,  2256,  5682,  1012,  1007,   102])"
2778,1,"['normal distribution', 'normal probability table', 'table', 'probability', 'normal', 'distribution', 'probability table']",Distribution tables,seg_99,"for additional details about working with the normal distribution and the normal probability table, see section 4.1, which starts on page 133.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2005,  3176,  4751,  2055,  2551,  2007,  1996,  3671,  4353,
         1998,  1996,  3671,  9723,  2795,  1010,  2156,  2930,  1018,  1012,
         1015,  1010,  2029,  4627,  2006,  3931, 14506,  1012,   102])"
2779,1,['table'],Distribution tables,seg_99,c.2 t-probability table,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([4353, 7251])","tensor([ 101, 1039, 1012, 1016, 1056, 1011, 9723, 2795,  102])"
2780,1,"['percentiles', 'table', 'degrees of freedom', 'symmetric', 'normal distribution', 'tail areas', 'normal', 'probabilities', 'tail probabilities', 'tail', 'distribution']",Distribution tables,seg_99,"a t-probability table may be used to find tail areas of a t-distribution using a t-score, or viceversa. such a table lists t-scores and the corresponding percentiles. a partial t-table is shown in figure c.3, and the complete table starts on page 414. each row in the t-table represents a t-distribution with different degrees of freedom. the columns correspond to tail probabilities. for instance, if we know we are working with the t-distribution with df = 18, we can examine row 18, which is highlighted in figure c.3. if we want the value in this row that identifies the t-score (cutoff) for an upper tail of 10%, we can look in the column where one tail is 0.100. this cutoff is 1.33. if we had wanted the cutoff for the lower 10%, we would use -1.33. just like the normal distribution, all t-distributions are symmetric.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1037,  1056,  1011,  9723,  2795,  2089,  2022,  2109,  2000,
         2424,  5725,  2752,  1997,  1037,  1056,  1011,  4353,  2478,  1037,
         1056,  1011,  3556,  1010,  2030,  3580, 14028,  2050,  1012,  2107,
         1037,  2795,  7201,  1056,  1011,  7644,  1998,  1996,  7978,  3867,
         9463,  2015,  1012,  1037,  7704,  1056,  1011,  2795,  2003,  3491,
         1999,  3275,  1039,  1012,  1017,  1010,  1998,  1996,  3143,  2795,
         4627,  2006,  3931,  4601,  2549,  1012,  2169,  5216,  1999,  1996,
         1056,  1011,  2795,  5836,  1037,  1056,  1011,  4353,  2007,  2367,
         5445,  1997,  4071,  1012,  1996,  7753, 17254,  2000,  5725,  4013,
         3676, 14680,  1012,  2005,  6013,  1010,  2065,  2057,  2113,  2057,
         2024,  2551,  2007,  1996,  1056,  1011,  4353,  2007,  1040,  2546,
         1027,  2324,  1010,  2057,  2064, 11628,  5216,  2324,  1010,  2029,
         2003, 11548,  1999,  3275,  1039,  1012,  1017,  1012,  2065,  2057,
         2215,  1996,  3643,  1999,  2023,  5216,  2008, 14847,  1996,  1056,
         1011,  3556,  1006,  3013,  7245,  1007,  2005,  2019,  3356,  5725,
         1997,  2184,  1003,  1010,  2057,  2064,  2298,  1999,  1996,  5930,
         2073,  2028,  5725,  2003,  1014,  1012,  2531,  1012,  2023,  3013,
         7245,  2003,  1015,  1012,  3943,  1012,  2065,  2057,  2018,  2359,
         1996,  3013,  7245,  2005,  1996,  2896,  2184,  1003,  1010,  2057,
         2052,  2224,  1011,  1015,  1012,  3943,  1012,  2074,  2066,  1996,
         3671,  4353,  1010,  2035,  1056,  1011, 20611,  2024, 19490,  1012,
          102])"
2781,1,"['tail', 'tails']",Distribution tables,seg_99,one tail 0.100 0.050 0.025 0.010 0.005 two tails 0.200 0.100 0.050 0.020 0.010 df 1 3.08 6.31 12.71 31.82 63.66 2 1.89 2.92 4.30 6.96 9.92 3 1.64 2.35 3.18 4.54 5.84 . . . . . . . . . . . . . . . 17 1.33 1.74 2.11 2.57 2.90 18 1.33 1.73 2.10 2.55 2.88 19 1.33 1.73 2.09 2.54 2.86 20 1.33 1.72 2.09 2.53 2.85 . . . . . . . . . . . . . . . 400 1.28 1.65 1.97 2.34 2.59 500 1.28 1.65 1.96 2.33 2.59 ∞ 1.28 1.64 1.96 2.33 2.58,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2028,  5725,  1014,  1012,  2531,  1014,  1012, 28714,  1014,
         1012,  6185,  2629,  1014,  1012,  5890,  2692,  1014,  1012,  4002,
         2629,  2048, 17448,  1014,  1012,  3263,  1014,  1012,  2531,  1014,
         1012, 28714,  1014,  1012,  6185,  2692,  1014,  1012,  5890,  2692,
         1040,  2546,  1015,  1017,  1012,  5511,  1020,  1012,  2861,  2260,
         1012,  6390,  2861,  1012,  6445,  6191,  1012,  5764,  1016,  1015,
         1012,  6486,  1016,  1012,  6227,  1018,  1012,  2382,  1020,  1012,
         5986,  1023,  1012,  6227,  1017,  1015,  1012,  4185,  1016,  1012,
         3486,  1017,  1012,  2324,  1018,  1012,  5139,  1019,  1012,  6391,
         1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,
         1012,  1012,  1012,  1012,  1012,  2459,  1015,  1012,  3943,  1015,
         1012,  6356,  1016,  1012,  2340,  1016,  1012,  5401,  1016,  1012,
         3938,  2324,  1015,  1012,  3943,  1015,  1012,  6421,  1016,  1012,
         2184,  1016,  1012,  4583,  1016,  1012,  6070,  2539,  1015,  1012,
         3943,  1015,  1012,  6421,  1016,  1012,  5641,  1016,  1012,  5139,
         1016,  1012,  6564,  2322,  1015,  1012,  3943,  1015,  1012,  5824,
         1016,  1012,  5641,  1016,  1012,  5187,  1016,  1012,  5594,  1012,
         1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,  1012,
         1012,  1012,  1012,  1012,  4278,  1015,  1012,  2654,  1015,  1012,
         3515,  1015,  1012,  5989,  1016,  1012,  4090,  1016,  1012,  5354,
         3156,  1015,  1012,  2654,  1015,  1012,  3515,  1015,  1012,  5986,
         1016,  1012,  3943,  1016,  1012,  5354,  1601,  1015,  1012,  2654,
         1015,  1012,  4185,  1015,  1012,  5986,  1016,  1012,  3943,  1016,
         1012,  5388,   102])"
2782,1,"['tail', 'tail areas']",Distribution tables,seg_99,figure c.3: an abbreviated look at the t-table. each row represents a different t-distribution. the columns describe the cutoffs for specific tail areas. the row with df = 18 has been highlighted.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3275,  1039,  1012,  1017,  1024,  2019, 12066,  2298,  2012,
         1996,  1056,  1011,  2795,  1012,  2169,  5216,  5836,  1037,  2367,
         1056,  1011,  4353,  1012,  1996,  7753,  6235,  1996,  3013, 27475,
         2005,  3563,  5725,  2752,  1012,  1996,  5216,  2007,  1040,  2546,
         1027,  2324,  2038,  2042, 11548,  1012,   102])"
2783,1,['degrees of freedom'],Distribution tables,seg_99,what proportion of the t-distribution with 18 degrees of freedom falls below -2.10?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2054, 10817,  1997,  1996,  1056,  1011,  4353,  2007,  2324,
         5445,  1997,  4071,  4212,  2917,  1011,  1016,  1012,  2184,  1029,
          102])"
2784,1,"['probability', 'normal']",Distribution tables,seg_99,"just like a normal probability problem, we first draw the picture and shade the area below -2.10:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 2074, 2066, 1037, 3671, 9723, 3291, 1010, 2057, 2034, 4009, 1996,
        3861, 1998, 8703, 1996, 2181, 2917, 1011, 1016, 1012, 2184, 1024,  102])"
2785,1,"['tail', 'absolute value', 'table', 'distribution']",Distribution tables,seg_99,"to find this area, we first identify the appropriate row: df = 18. then we identify the column containing the absolute value of -2.10; it is the third column. because we are looking for just one tail, we examine the top line of the table, which shows that a one tail area for a value in the third row corresponds to 0.025. that is, 2.5% of the distribution falls below -2.10.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2000,  2424,  2023,  2181,  1010,  2057,  2034,  6709,  1996,
         6413,  5216,  1024,  1040,  2546,  1027,  2324,  1012,  2059,  2057,
         6709,  1996,  5930,  4820,  1996,  7619,  3643,  1997,  1011,  1016,
         1012,  2184,  1025,  2009,  2003,  1996,  2353,  5930,  1012,  2138,
         2057,  2024,  2559,  2005,  2074,  2028,  5725,  1010,  2057, 11628,
         1996,  2327,  2240,  1997,  1996,  2795,  1010,  2029,  3065,  2008,
         1037,  2028,  5725,  2181,  2005,  1037,  3643,  1999,  1996,  2353,
         5216, 14788,  2000,  1014,  1012,  6185,  2629,  1012,  2008,  2003,
         1010,  1016,  1012,  1019,  1003,  1997,  1996,  4353,  4212,  2917,
         1011,  1016,  1012,  2184,  1012,   102])"
2786,1,"['table', 'case']",Distribution tables,seg_99,in the next example we encounter a case where the exact t-score is not listed in the table.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 1999, 1996, 2279, 2742, 2057, 8087, 1037, 2553, 2073, 1996, 6635,
        1056, 1011, 3556, 2003, 2025, 3205, 1999, 1996, 2795, 1012,  102])"
2787,1,"['estimate', 'degrees of freedom', 'distribution']",Distribution tables,seg_99,a t-distribution with 20 degrees of freedom is shown in the left panel of figure c.4. estimate the proportion of the distribution falling above 1.65.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1037,  1056,  1011,  4353,  2007,  2322,  5445,  1997,  4071,
         2003,  3491,  1999,  1996,  2187,  5997,  1997,  3275,  1039,  1012,
         1018,  1012, 10197,  1996, 10817,  1997,  1996,  4353,  4634,  2682,
         1015,  1012,  3515,  1012,   102])"
2788,1,"['tail', 'mean', 'tail areas', 'degrees of freedom', 'deviations', 'standard', 'distribution', 'statistical', 'standard deviations']",Distribution tables,seg_99,"we identify the row in the t-table using the degrees of freedom: df = 20. then we look for 1.65; it is not listed. it falls between the first and second columns. since these values bound 1.65, their tail areas will bound the tail area corresponding to 1.65. we identify the one tail area of the first and second columns, 0.050 and 0.10, and we conclude that between 5% and 10% of the distribution is more than 1.65 standard deviations above the mean. if we like, we can identify the precise area using statistical software: 0.0573.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2057,  6709,  1996,  5216,  1999,  1996,  1056,  1011,  2795,
         2478,  1996,  5445,  1997,  4071,  1024,  1040,  2546,  1027,  2322,
         1012,  2059,  2057,  2298,  2005,  1015,  1012,  3515,  1025,  2009,
         2003,  2025,  3205,  1012,  2009,  4212,  2090,  1996,  2034,  1998,
         2117,  7753,  1012,  2144,  2122,  5300,  5391,  1015,  1012,  3515,
         1010,  2037,  5725,  2752,  2097,  5391,  1996,  5725,  2181,  7978,
         2000,  1015,  1012,  3515,  1012,  2057,  6709,  1996,  2028,  5725,
         2181,  1997,  1996,  2034,  1998,  2117,  7753,  1010,  1014,  1012,
        28714,  1998,  1014,  1012,  2184,  1010,  1998,  2057, 16519,  2008,
         2090,  1019,  1003,  1998,  2184,  1003,  1997,  1996,  4353,  2003,
         2062,  2084,  1015,  1012,  3515,  3115, 24353,  2015,  2682,  1996,
         2812,  1012,  2065,  2057,  2066,  1010,  2057,  2064,  6709,  1996,
        10480,  2181,  2478,  7778,  4007,  1024,  1014,  1012,  5709,  2581,
         2509,  1012,   102])"
2789,1,['degrees of freedom'],Distribution tables,seg_99,"figure c.4: left: the t-distribution with 20 degrees of freedom, with the area above 1.65 shaded. right: the t-distribution with 475 degrees of freedom, with the area further than 2 units from 0 shaded.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3275,  1039,  1012,  1018,  1024,  2187,  1024,  1996,  1056,
         1011,  4353,  2007,  2322,  5445,  1997,  4071,  1010,  2007,  1996,
         2181,  2682,  1015,  1012,  3515, 25273,  1012,  2157,  1024,  1996,
         1056,  1011,  4353,  2007, 28245,  5445,  1997,  4071,  1010,  2007,
         1996,  2181,  2582,  2084,  1016,  3197,  2013,  1014, 25273,  1012,
          102])"
2790,1,"['mean', 'estimate', 'degrees of freedom', 'distribution']",Distribution tables,seg_99,a t-distribution with 475 degrees of freedom is shown in the right panel of figure c.4. estimate the proportion of the distribution falling more than 2 units from the mean (above or below).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1037,  1056,  1011,  4353,  2007, 28245,  5445,  1997,  4071,
         2003,  3491,  1999,  1996,  2157,  5997,  1997,  3275,  1039,  1012,
         1018,  1012, 10197,  1996, 10817,  1997,  1996,  4353,  4634,  2062,
         2084,  1016,  3197,  2013,  1996,  2812,  1006,  2682,  2030,  2917,
         1007,  1012,   102])"
2791,1,"['tail', 'tails', 'tail areas', 'symmetric', 'case']",Distribution tables,seg_99,"as before, first identify the appropriate row: df = 475. this row does not exist! when this happens, we use the next smaller row, which in this case is df = 400. next, find the columns that capture 2.00; because 1.97 < 3 < 2.34, we use the third and fourth columns. finally, we find bounds for the tail areas by looking at the two tail values: 0.02 and 0.05. we use the two tail values because we are looking for two symmetric tails in the t-distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2004,  2077,  1010,  2034,  6709,  1996,  6413,  5216,  1024,
         1040,  2546,  1027, 28245,  1012,  2023,  5216,  2515,  2025,  4839,
          999,  2043,  2023,  6433,  1010,  2057,  2224,  1996,  2279,  3760,
         5216,  1010,  2029,  1999,  2023,  2553,  2003,  1040,  2546,  1027,
         4278,  1012,  2279,  1010,  2424,  1996,  7753,  2008,  5425,  1016,
         1012,  4002,  1025,  2138,  1015,  1012,  5989,  1026,  1017,  1026,
         1016,  1012,  4090,  1010,  2057,  2224,  1996,  2353,  1998,  2959,
         7753,  1012,  2633,  1010,  2057,  2424, 19202,  2005,  1996,  5725,
         2752,  2011,  2559,  2012,  1996,  2048,  5725,  5300,  1024,  1014,
         1012,  6185,  1998,  1014,  1012,  5709,  1012,  2057,  2224,  1996,
         2048,  5725,  5300,  2138,  2057,  2024,  2559,  2005,  2048, 19490,
        17448,  1999,  1996,  1056,  1011,  4353,  1012,   102])"
2792,1,['degrees of freedom'],Distribution tables,seg_99,what proportion of the t-distribution with 19 degrees of freedom falls above -1.79 units?1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2054, 10817,  1997,  1996,  1056,  1011,  4353,  2007,  2539,
         5445,  1997,  4071,  4212,  2682,  1011,  1015,  1012,  6535,  3197,
         1029,  1015,   102])"
2793,1,"['degrees of freedom', 'distribution']",Distribution tables,seg_99,"find the value of t?18 using the t-table, where t?18 is the cutoff for the t-distribution with 18 degrees of freedom where 95% of the distribution lies between -t?18 and +t?18.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 2424, 1996, 3643, 1997, 1056, 1029, 2324, 2478, 1996, 1056, 1011,
        2795, 1010, 2073, 1056, 1029, 2324, 2003, 1996, 3013, 7245, 2005, 1996,
        1056, 1011, 4353, 2007, 2324, 5445, 1997, 4071, 2073, 5345, 1003, 1997,
        1996, 4353, 3658, 2090, 1011, 1056, 1029, 2324, 1998, 1009, 1056, 1029,
        2324, 1012,  102])"
2794,1,"['confidence interval', 'interval', 'tails', 'degrees of freedom', 'confidence']",Distribution tables,seg_99,"for a 95% confidence interval, we want to find the cutoff t?18 such that 95% of the t-distribution is between -t?18 and t?18; this is the same as where the two tails have a total area of 0.05. we look in the t-table on page 412, find the column with area totaling 0.05 in the two tails (third column), and then the row with 18 degrees of freedom: t?18 = 2.10.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2005,  1037,  5345,  1003,  7023, 13483,  1010,  2057,  2215,
         2000,  2424,  1996,  3013,  7245,  1056,  1029,  2324,  2107,  2008,
         5345,  1003,  1997,  1996,  1056,  1011,  4353,  2003,  2090,  1011,
         1056,  1029,  2324,  1998,  1056,  1029,  2324,  1025,  2023,  2003,
         1996,  2168,  2004,  2073,  1996,  2048, 17448,  2031,  1037,  2561,
         2181,  1997,  1014,  1012,  5709,  1012,  2057,  2298,  1999,  1996,
         1056,  1011,  2795,  2006,  3931, 25873,  1010,  2424,  1996,  5930,
         2007,  2181, 21798,  1014,  1012,  5709,  1999,  1996,  2048, 17448,
         1006,  2353,  5930,  1007,  1010,  1998,  2059,  1996,  5216,  2007,
         2324,  5445,  1997,  4071,  1024,  1056,  1029,  2324,  1027,  1016,
         1012,  2184,  1012,   102])"
2795,1,"['tail', 'tails']",Distribution tables,seg_99,one tail one tail two tails,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 1., 0.])","tensor([4353, 7251])","tensor([  101,  2028,  5725,  2028,  5725,  2048, 17448,   102])"
2796,1,"['tail', 'tails']",Distribution tables,seg_99,one tail 0.100 0.050 0.025 0.010 0.005 two tails 0.200 0.100 0.050 0.020 0.010 df 1 3.08 6.31 12.71 31.82 63.66 2 1.89 2.92 4.30 6.96 9.92 3 1.64 2.35 3.18 4.54 5.84 4 1.53 2.13 2.78 3.75 4.60 5 1.48 2.02 2.57 3.36 4.03 6 1.44 1.94 2.45 3.14 3.71 7 1.41 1.89 2.36 3.00 3.50 8 1.40 1.86 2.31 2.90 3.36 9 1.38 1.83 2.26 2.82 3.25 10 1.37 1.81 2.23 2.76 3.17,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2028,  5725,  1014,  1012,  2531,  1014,  1012, 28714,  1014,
         1012,  6185,  2629,  1014,  1012,  5890,  2692,  1014,  1012,  4002,
         2629,  2048, 17448,  1014,  1012,  3263,  1014,  1012,  2531,  1014,
         1012, 28714,  1014,  1012,  6185,  2692,  1014,  1012,  5890,  2692,
         1040,  2546,  1015,  1017,  1012,  5511,  1020,  1012,  2861,  2260,
         1012,  6390,  2861,  1012,  6445,  6191,  1012,  5764,  1016,  1015,
         1012,  6486,  1016,  1012,  6227,  1018,  1012,  2382,  1020,  1012,
         5986,  1023,  1012,  6227,  1017,  1015,  1012,  4185,  1016,  1012,
         3486,  1017,  1012,  2324,  1018,  1012,  5139,  1019,  1012,  6391,
         1018,  1015,  1012,  5187,  1016,  1012,  2410,  1016,  1012,  6275,
         1017,  1012,  4293,  1018,  1012,  3438,  1019,  1015,  1012,  4466,
         1016,  1012,  6185,  1016,  1012,  5401,  1017,  1012,  4029,  1018,
         1012,  6021,  1020,  1015,  1012,  4008,  1015,  1012,  6365,  1016,
         1012,  3429,  1017,  1012,  2403,  1017,  1012,  6390,  1021,  1015,
         1012,  4601,  1015,  1012,  6486,  1016,  1012,  4029,  1017,  1012,
         4002,  1017,  1012,  2753,  1022,  1015,  1012,  2871,  1015,  1012,
         6564,  1016,  1012,  2861,  1016,  1012,  3938,  1017,  1012,  4029,
         1023,  1015,  1012,  4229,  1015,  1012,  6640,  1016,  1012,  2656,
         1016,  1012,  6445,  1017,  1012,  2423,  2184,  1015,  1012,  4261,
         1015,  1012,  6282,  1016,  1012,  2603,  1016,  1012,  6146,  1017,
         1012,  2459,   102])"
2797,1,"['tail', 'tails']",Distribution tables,seg_99,one tail one tail two tails,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 1., 0.])","tensor([4353, 7251])","tensor([  101,  2028,  5725,  2028,  5725,  2048, 17448,   102])"
2798,1,"['tail', 'tails']",Distribution tables,seg_99,one tail 0.100 0.050 0.025 0.010 0.005 two tails 0.200 0.100 0.050 0.020 0.010 df 31 1.31 1.70 2.04 2.45 2.74 32 1.31 1.69 2.04 2.45 2.74 33 1.31 1.69 2.03 2.44 2.73 34 1.31 1.69 2.03 2.44 2.73 35 1.31 1.69 2.03 2.44 2.72 36 1.31 1.69 2.03 2.43 2.72 37 1.30 1.69 2.03 2.43 2.72 38 1.30 1.69 2.02 2.43 2.71 39 1.30 1.68 2.02 2.43 2.71 40 1.30 1.68 2.02 2.42 2.70,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2028,  5725,  1014,  1012,  2531,  1014,  1012, 28714,  1014,
         1012,  6185,  2629,  1014,  1012,  5890,  2692,  1014,  1012,  4002,
         2629,  2048, 17448,  1014,  1012,  3263,  1014,  1012,  2531,  1014,
         1012, 28714,  1014,  1012,  6185,  2692,  1014,  1012,  5890,  2692,
         1040,  2546,  2861,  1015,  1012,  2861,  1015,  1012,  3963,  1016,
         1012,  5840,  1016,  1012,  3429,  1016,  1012,  6356,  3590,  1015,
         1012,  2861,  1015,  1012,  6353,  1016,  1012,  5840,  1016,  1012,
         3429,  1016,  1012,  6356,  3943,  1015,  1012,  2861,  1015,  1012,
         6353,  1016,  1012,  6021,  1016,  1012,  4008,  1016,  1012,  6421,
         4090,  1015,  1012,  2861,  1015,  1012,  6353,  1016,  1012,  6021,
         1016,  1012,  4008,  1016,  1012,  6421,  3486,  1015,  1012,  2861,
         1015,  1012,  6353,  1016,  1012,  6021,  1016,  1012,  4008,  1016,
         1012,  5824,  4029,  1015,  1012,  2861,  1015,  1012,  6353,  1016,
         1012,  6021,  1016,  1012,  4724,  1016,  1012,  5824,  4261,  1015,
         1012,  2382,  1015,  1012,  6353,  1016,  1012,  6021,  1016,  1012,
         4724,  1016,  1012,  5824,  4229,  1015,  1012,  2382,  1015,  1012,
         6353,  1016,  1012,  6185,  1016,  1012,  4724,  1016,  1012,  6390,
         4464,  1015,  1012,  2382,  1015,  1012,  6273,  1016,  1012,  6185,
         1016,  1012,  4724,  1016,  1012,  6390,  2871,  1015,  1012,  2382,
         1015,  1012,  6273,  1016,  1012,  6185,  1016,  1012,  4413,  1016,
         1012,  3963,   102])"
2799,1,"['table', 'probability', 'probability table']",Distribution tables,seg_99,c.3 chi-square probability table,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([4353, 7251])","tensor([ 101, 1039, 1012, 1017, 9610, 1011, 2675, 9723, 2795,  102])"
2800,1,"['tail', 'range', 'table', 'probability', 'tail areas', 'degrees of freedom', 'distributions', 'normal', 'tables', 'distribution', 'probability table']",Distribution tables,seg_99,"a chi-square probability table may be used to find tail areas of a chi-square distribution. the chi-square table is partially shown in figure c.5, and the complete table may be found on page 417. when using a chi-square table, we examine a particular row for distributions with different degrees of freedom, and we identify a range for the area (e.g. 0.025 to 0.05). note that the chi-square table provides upper tail values, which is different than the normal and t-distribution tables.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1037,  9610,  1011,  2675,  9723,  2795,  2089,  2022,  2109,
         2000,  2424,  5725,  2752,  1997,  1037,  9610,  1011,  2675,  4353,
         1012,  1996,  9610,  1011,  2675,  2795,  2003,  6822,  3491,  1999,
         3275,  1039,  1012,  1019,  1010,  1998,  1996,  3143,  2795,  2089,
         2022,  2179,  2006,  3931, 27519,  1012,  2043,  2478,  1037,  9610,
         1011,  2675,  2795,  1010,  2057, 11628,  1037,  3327,  5216,  2005,
        20611,  2007,  2367,  5445,  1997,  4071,  1010,  1998,  2057,  6709,
         1037,  2846,  2005,  1996,  2181,  1006,  1041,  1012,  1043,  1012,
         1014,  1012,  6185,  2629,  2000,  1014,  1012,  5709,  1007,  1012,
         3602,  2008,  1996,  9610,  1011,  2675,  2795,  3640,  3356,  5725,
         5300,  1010,  2029,  2003,  2367,  2084,  1996,  3671,  1998,  1056,
         1011,  4353,  7251,  1012,   102])"
2801,1,['table'],Distribution tables,seg_99,figure c.5: a section of the chi-square table. a complete table is in appendix c.3.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3275,  1039,  1012,  1019,  1024,  1037,  2930,  1997,  1996,
         9610,  1011,  2675,  2795,  1012,  1037,  3143,  2795,  2003,  1999,
        22524,  1039,  1012,  1017,  1012,   102])"
2802,1,"['tail', 'distribution', 'estimate', 'degrees of freedom']",Distribution tables,seg_99,figure c.6(a) shows a chi-square distribution with 3 degrees of freedom and an upper shaded tail starting at 6.25. use figure c.5 to estimate the shaded area.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3275,  1039,  1012,  1020,  1006,  1037,  1007,  3065,  1037,
         9610,  1011,  2675,  4353,  2007,  1017,  5445,  1997,  4071,  1998,
         2019,  3356, 25273,  5725,  3225,  2012,  1020,  1012,  2423,  1012,
         2224,  3275,  1039,  1012,  1019,  2000, 10197,  1996, 25273,  2181,
         1012,   102])"
2803,1,"['tail', 'table', 'degrees of freedom', 'distribution']",Distribution tables,seg_99,"this distribution has three degrees of freedom, so only the row with 3 degrees of freedom (df) is relevant. this row has been italicized in the table. next, we see that the value – 6.25 – falls in the column with upper tail area 0.1. that is, the shaded upper tail of figure c.6(a) has area 0.1.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2023,  4353,  2038,  2093,  5445,  1997,  4071,  1010,  2061,
         2069,  1996,  5216,  2007,  1017,  5445,  1997,  4071,  1006,  1040,
         2546,  1007,  2003,  7882,  1012,  2023,  5216,  2038,  2042,  2009,
        27072,  3550,  1999,  1996,  2795,  1012,  2279,  1010,  2057,  2156,
         2008,  1996,  3643,  1516,  1020,  1012,  2423,  1516,  4212,  1999,
         1996,  5930,  2007,  3356,  5725,  2181,  1014,  1012,  1015,  1012,
         2008,  2003,  1010,  1996, 25273,  3356,  5725,  1997,  3275,  1039,
         1012,  1020,  1006,  1037,  1007,  2038,  2181,  1014,  1012,  1015,
         1012,   102])"
2804,1,"['tail', 'range', 'table', 'estimate']",Distribution tables,seg_99,"this example was unusual, in that we observed the exact value in the table. in the next examples, we encounter situations where we cannot precisely estimate the tail area and must instead provide a range of values.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2023,  2742,  2001,  5866,  1010,  1999,  2008,  2057,  5159,
         1996,  6635,  3643,  1999,  1996,  2795,  1012,  1999,  1996,  2279,
         4973,  1010,  2057,  8087,  8146,  2073,  2057,  3685, 10785, 10197,
         1996,  5725,  2181,  1998,  2442,  2612,  3073,  1037,  2846,  1997,
         5300,  1012,   102])"
2805,1,"['tail', 'distribution', 'degrees of freedom']",Distribution tables,seg_99,figure c.6(b) shows the upper tail of a chi-square distribution with 2 degrees of freedom. the area above value 4.3 has been shaded; find this tail area.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3275,  1039,  1012,  1020,  1006,  1038,  1007,  3065,  1996,
         3356,  5725,  1997,  1037,  9610,  1011,  2675,  4353,  2007,  1016,
         5445,  1997,  4071,  1012,  1996,  2181,  2682,  3643,  1018,  1012,
         1017,  2038,  2042, 25273,  1025,  2424,  2023,  5725,  2181,  1012,
          102])"
2806,1,"['tail', 'tail areas', 'degrees of freedom']",Distribution tables,seg_99,"the cutoff 4.3 falls between the second and third columns in the 2 degrees of freedom row. because these columns correspond to tail areas of 0.2 and 0.1, we can be certain that the area shaded in figure c.6(b) is between 0.1 and 0.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1996,  3013,  7245,  1018,  1012,  1017,  4212,  2090,  1996,
         2117,  1998,  2353,  7753,  1999,  1996,  1016,  5445,  1997,  4071,
         5216,  1012,  2138,  2122,  7753, 17254,  2000,  5725,  2752,  1997,
         1014,  1012,  1016,  1998,  1014,  1012,  1015,  1010,  2057,  2064,
         2022,  3056,  2008,  1996,  2181, 25273,  1999,  3275,  1039,  1012,
         1020,  1006,  1038,  1007,  2003,  2090,  1014,  1012,  1015,  1998,
         1014,  1012,  1016,  1012,   102])"
2807,1,"['tail', 'distribution', 'degrees of freedom']",Distribution tables,seg_99,figure c.6(c) shows an upper tail for a chi-square distribution with 5 degrees of freedom and a cutoff of 5.1. find the tail area.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([4353, 7251])","tensor([ 101, 3275, 1039, 1012, 1020, 1006, 1039, 1007, 3065, 2019, 3356, 5725,
        2005, 1037, 9610, 1011, 2675, 4353, 2007, 1019, 5445, 1997, 4071, 1998,
        1037, 3013, 7245, 1997, 1019, 1012, 1015, 1012, 2424, 1996, 5725, 2181,
        1012,  102])"
2808,0,[],Distribution tables,seg_99,"looking in the row with 5 df, 5.1 falls below the smallest cutoff for this row (6.06). that means we can only say that the area is greater than 0.3.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4353, 7251])","tensor([  101,  2559,  1999,  1996,  5216,  2007,  1019,  1040,  2546,  1010,
         1019,  1012,  1015,  4212,  2917,  1996, 10479,  3013,  7245,  2005,
         2023,  5216,  1006,  1020,  1012,  5757,  1007,  1012,  2008,  2965,
         2057,  2064,  2069,  2360,  2008,  1996,  2181,  2003,  3618,  2084,
         1014,  1012,  1017,  1012,   102])"
2809,1,"['tail', 'distribution', 'degrees of freedom']",Distribution tables,seg_99,figure c.6(d) shows a cutoff of 11.7 on a chi-square distribution with 7 degrees of freedom. find the area of the upper tail.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([4353, 7251])","tensor([ 101, 3275, 1039, 1012, 1020, 1006, 1040, 1007, 3065, 1037, 3013, 7245,
        1997, 2340, 1012, 1021, 2006, 1037, 9610, 1011, 2675, 4353, 2007, 1021,
        5445, 1997, 4071, 1012, 2424, 1996, 2181, 1997, 1996, 3356, 5725, 1012,
         102])"
2810,1,"['distribution', 'degrees of freedom']",Distribution tables,seg_99,"figure c.6: (a) chi-square distribution with 3 degrees of freedom, area above 6.25 shaded. (b) 2 degrees of freedom, area above 4.3 shaded. (c) 5 degrees of freedom, area above 5.1 shaded. (d) 7 degrees of freedom, area above 11.7 shaded.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3275,  1039,  1012,  1020,  1024,  1006,  1037,  1007,  9610,
         1011,  2675,  4353,  2007,  1017,  5445,  1997,  4071,  1010,  2181,
         2682,  1020,  1012,  2423, 25273,  1012,  1006,  1038,  1007,  1016,
         5445,  1997,  4071,  1010,  2181,  2682,  1018,  1012,  1017, 25273,
         1012,  1006,  1039,  1007,  1019,  5445,  1997,  4071,  1010,  2181,
         2682,  1019,  1012,  1015, 25273,  1012,  1006,  1040,  1007,  1021,
         5445,  1997,  4071,  1010,  2181,  2682,  2340,  1012,  1021, 25273,
         1012,   102])"
2811,1,"['complement', 'adjusted r2', 'adjusted']",Distribution tables,seg_99,addition rule 83 complement 88 adjusted r2 (ra,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2804,  3627,  6640, 13711,  6070, 10426,  1054,  2475,  1006,
        10958,   102])"
2812,1,['condition'],Distribution tables,seg_99,2dj) 349 349 condition 97,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101, 14134,  3501,  1007,  4090,  2683,  4090,  2683,  4650,  5989,
          102])"
2813,1,"['confidence level', 'confidence interval', 'regression', 'confident', 'analysis of variance', 'alternative hypothesis', 'confidence', 'conditional', 'conditional probability', 'associated', 'interval', 'probability', 'information', 'hypothesis', 'level', 'anecdotal evidence', 'anova', 'variance', 'average']",Distribution tables,seg_99,"akaike information criterion (aic) 374 conditional probability 97 97–99, 108 alternative hypothesis (ha) 189 confidence interval 169 181 181–186 ami occurrences 404 95% 182 analysis of variance (anova) 285 285–294 confidence level 183 anecdotal evidence 22 interpretation 186 ask 406 regression 334 associated 16 confident 181 average 43 95% confident 181",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 1., 0., 0., 0.,
        1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  9875, 17339,  2592, 19229,  1006,  9932,  2278,  1007,  4261,
         2549, 18462,  9723,  5989,  5989,  1516,  5585,  1010, 10715,  4522,
        10744,  1006,  5292,  1007, 20500,  7023, 13483, 18582, 18596, 18596,
         1516, 19609, 26445, 27247, 24837,  5345,  1003, 17691,  4106,  1997,
        23284,  1006,  2019,  7103,  1007, 21777, 21777,  1516, 28135,  7023,
         2504, 18677,  2019,  8586, 27364,  2389,  3350,  2570,  7613, 19609,
         3198, 27433, 26237, 29562,  3378,  2385,  9657, 18596,  2779,  4724,
         5345,  1003,  9657, 18596,   102])"
2814,1,"['bar plot', 'confounding factor', 'backward elimination', 'factor', 'confounding variable', 'plot', 'confounding', 'variable']",Distribution tables,seg_99,confounder 25 backward elimination 354 confounding factor 25 bar plot 61 confounding variable 25,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 1., 1., 0., 1.,
        1., 1., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  9530, 14876, 20824,  2423,  8848,  9614, 27878,  9530, 14876,
         8630,  2075,  5387,  2423,  3347,  5436,  6079,  9530, 14876,  8630,
         2075,  8023,  2423,   102])"
2815,1,"['table', 'bayesian statistics', 'correlation', 'box plot', 'bar plot', 'bayesian', 'statistics', 'bimodal', 'plot', 'continuous', 'bonferroni correction', 'convenience sample', 'control group', 'county', 'bias', 'row totals', 'contingency table', 'column totals', 'control', 'sample', 'county complete']",Distribution tables,seg_99,"segmented bar plot 64 contingency table 61 side-by-side 64 column proportion 62 stacked bar plot 64 column totals 61 bayes’ theorem 106 104–108 row proportions 62 bayesian statistics 108 row totals 61 bias 24 22–24, 170 186 continuous 15 bimodal 46 control 32 blind 34 control group 9 32 blocking 32 convenience sample 24 blocks 32 correlation 305 310 310–311 bonferroni correction 293 county 403 404 box plot 49 county complete 403",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 1.,
        1., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  6903,  2098,  3347,  5436,  4185,  9530,  3436, 11916,  2795,
         6079,  2217,  1011,  2011,  1011,  2217,  4185,  5930, 10817,  5786,
        16934,  3347,  5436,  4185,  5930, 21948,  6079,  3016,  2229,  1521,
         9872, 10114,  9645,  1516, 10715,  5216, 19173,  5786,  3016, 25253,
         6747, 10715,  5216, 21948,  6079, 13827,  2484,  2570,  1516,  2484,
         1010, 10894, 19609,  7142,  2321, 12170,  5302,  9305,  4805,  2491,
         3590,  6397,  4090,  2491,  2177,  1023,  3590, 10851,  3590, 15106,
         7099,  2484,  5991,  3590, 16902, 20405, 17196, 17196,  1516, 23532,
        14753,  7512,  4948,  2072, 18140, 26953,  2221, 28203, 24837,  3482,
         5436,  4749,  2221,  3143, 28203,   102])"
2816,1,"['plot', 'box plot']",Distribution tables,seg_99,side-by-side box plot 68 cpr 406,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2217,  1011,  2011,  1011,  2217,  3482,  5436,  6273, 18133,
         2099, 27433,   102])"
2817,1,"['categorical variable', 'limit', 'central limit theorem', 'data', 'variable', 'categorical']",Distribution tables,seg_99,case 12 data 8 403–407 categorical 15 baby smoke 269–271 categorical variable 343 breast cancer 219–221 central limit theorem 172 251 coal power support 194–196,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4353, 7251])","tensor([  101,  2553,  2260,  2951,  1022, 28203,  1516, 28941,  4937, 27203,
         2321,  3336,  5610, 25717,  1516, 25103,  4937, 27203,  8023, 27810,
         7388,  4456, 20636,  1516, 19594,  2430,  5787,  9872, 18253, 22582,
         5317,  2373,  2490, 19955,  1516, 20035,   102])"
2818,1,"['table', 'cloud of points', 'probability table', 'interval', 'normal', 'data', 'statistic', 'collinear', 'probability', 'county', 'column totals', 'distribution']",Distribution tables,seg_99,"independence 172 county 13–18, 52–53, 67–68 normal data 252 cpr and blood thinner 217–218 proportion 172 diabetes 243–244 chi-square distribution 231 dolphins and mercury 255–256 chi-square probability table 416 ebola poll 185 chi-square statistic 231 ipod 240–243 chi-square table 416 loan50 12 41–51 classdata 406 loans 61–66, 84 86 343 clopper-pearson interval 211 malaria vaccine 71–74 cloud of points 305 mammography 219–221 code comment 171 mario kart 362 cohort 18 midterm elections 331–333 collections 84 mlb batting 286–291 collinear 348 367 nuclear arms reduction 197 column totals 61 payday regulation poll 208–210, 213",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  4336, 18253,  2221,  2410,  1516,  2324,  1010,  4720,  1516,
         5187,  1010,  6163,  1516,  6273,  3671,  2951, 22898, 18133,  2099,
         1998,  2668, 23082, 20335,  1516, 20741, 10817, 18253, 14671, 22884,
         1516, 24194,  9610,  1011,  2675,  4353, 20304, 13600,  1998,  8714,
        20637,  1516, 17273,  9610,  1011,  2675,  9723,  2795,  4601,  2575,
         1041, 24290,  8554, 15376,  9610,  1011,  2675, 28093,  6553, 20304,
        26322, 11212,  1516, 22884,  9610,  1011,  2675,  2795,  4601,  2575,
         5414, 12376,  2260,  4601,  1516,  4868,  2465,  2850,  2696, 27433,
        10940,  6079,  1516,  5764,  1010,  6391,  6564, 27810, 18856,  7361,
         4842,  1011, 12874, 13483, 19235, 19132, 17404,  6390,  1516,  6356,
         6112,  1997,  2685, 20405,  5003,  7382,  9888, 20636,  1516, 19594,
         3642,  7615, 18225,  7986, 10556,  5339,  4029,  2475,  2522, 27794,
         2324,  3054,  3334,  2213,  3864, 27533,  1516, 21211,  6407,  6391,
        10901,  9640, 24921,  1516, 27173, 22180, 14644,  4090,  2620,  4029,
         2581,  4517,  2608,  7312, 19975,  5930, 21948,  6079,  3477, 10259,
         7816,  8554, 18512,  1516, 12875,  1010, 19883,   102])"
2819,1,"['finite population correction factor', 'correction factor', 'population', 'false positive', 'explanatory', 'explanatory variable', 'failure', 'factor', 'false negative', 'data', 'extrapolation', 'data density', 'factorial', 'failure rate', 'function', 'rate', 'expectation', 'exponentially', 'first quartile', 'experiment', 'quartile', 'expected value', 'variable']",Distribution tables,seg_99,"photo classify 95–99 expectation 116–117 possum 306–309 expected value 116 racial make-up of jury 229–231, 234 experiment 18 32 resume 371–377 explanatory variable 18 305 s&p500 stock data 236–239 exponentially 145 smallpox 99–102 extrapolation 322 solar survey 170–186 f -test 289 stem cells, heart function 267–269 face card 85 stroke 9–10, 15 factorial 150 student football stadium 212 failure 144 textbooks 262–264 false negative 105 tire failure rate 213 false positive 105 two exam comparison 272–273 family college 404 us adult heights 125–127 fcid 404 white fish and mercury 256–257 finite population correction factor 173 wind turbine survey 186 first quartile 49 data density 45",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  6302, 26268,  5345,  1516,  5585, 17626, 12904,  1516, 12567,
        13433,  4757,  2819, 24622,  1516, 25048,  3517,  3643, 12904,  5762,
         2191,  1011,  2039,  1997,  6467, 22777,  1516, 20304,  1010, 22018,
         7551,  2324,  3590, 13746,  4261,  2487,  1516,  4261,  2581,  4654,
        24759,  5162,  7062,  8023,  2324, 20405,  1055,  1004,  1052, 29345,
         4518,  2951, 23593,  1516, 23688, 27258,  2135, 13741, 25765,  5585,
         1516,  9402,  4469, 18155,  3370, 23768,  5943,  5002, 10894,  1516,
        19609,  1042,  1011,  3231, 27054,  7872,  4442,  1010,  2540,  3853,
        25491,  1516, 25717,  2227,  4003,  5594,  6909,  1023,  1516,  2184,
         1010,  2321,  5387,  4818,  5018,  3076,  2374,  3346, 18164,  4945,
        14748, 18841, 21950,  1516, 21611,  6270,  4997,  8746, 12824,  4945,
         3446, 19883,  6270,  3893,  8746,  2048, 11360,  7831, 24231,  1516,
        25371,  2155,  2267, 24837,  2149,  4639,  7535,  8732,  1516, 13029,
         4429,  3593, 24837,  2317,  3869,  1998,  8714, 17273,  1516, 24368,
        10713,  2313, 18140,  5387, 19410,  3612, 14027,  5002, 19609,  2034,
        24209,  8445,  9463,  4749,  2951,  4304,  3429,   102])"
2820,1,['data'],Distribution tables,seg_99,fish oil 18 406 data fishing 288,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3869,  3514,  2324, 27433,  2951,  5645, 24841,   102])"
2821,1,"['data matrix', 'data']",Distribution tables,seg_99,forward selection 354 data matrix 12,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2830,  4989, 27878,  2951,  8185,  2260,   102])"
2822,1,"['model', 'data snooping', 'data']",Distribution tables,seg_99,full model 353 data snooping 288,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2440,  2944,  3486,  2509,  2951, 29044,  2075, 24841,   102])"
2823,0,[],Distribution tables,seg_99,deck of cards 85 gambler’s fallacy 101,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4353, 7251])","tensor([  101,  5877,  1997,  5329,  5594, 18503,  2099,  1521,  1055,  2991,
        15719,  7886,   102])"
2824,1,"['addition rule', 'general addition rule']",Distribution tables,seg_99,degrees of freedom (df) general addition rule 86,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 5445, 1997, 4071, 1006, 1040, 2546, 1007, 2236, 2804, 3627, 6564,
         102])"
2825,1,"['linear', 'linear model', 'degrees of freedom', 'general multiplication rule', 'multiplication rule', 'generalized linear model', 'model']",Distribution tables,seg_99,t-distribution 253 general multiplication rule 100 degrees of freedom (df) generalized linear model 164 371,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1056,  1011,  4353, 23254,  2236, 24856,  3627,  2531,  5445,
         1997,  4071,  1006,  1040,  2546,  1007, 18960,  7399,  2944, 17943,
         4261,  2487,   102])"
2826,1,['glm'],Distribution tables,seg_99,anova 289 glm 371 chi-square 231 greek,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2019,  7103, 27054,  1043, 13728,  4261,  2487,  9610,  1011,
         2675, 20304,  3306,   102])"
2827,1,['dependent'],Distribution tables,seg_99,regression 349 alpha (α) 193 density 126 beta (β) 305 dependent 16 18 epsilon (ε) 305,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101, 26237,  4090,  2683,  6541,  1006,  1155,  1007, 19984,  4304,
        14010,  8247,  1006,  1156,  1007, 20405,  7790,  2385,  2324, 28038,
         1006,  1159,  1007, 20405,   102])"
2828,1,['degrees of freedom'],Distribution tables,seg_99,deviation 47 lambda (λ) 163 df see degrees of freedom (df) mu (µ) 43 116,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101, 24353,  4700, 23375,  1006,  1165,  1007, 17867,  1040,  2546,
         2156,  5445,  1997,  4071,  1006,  1040,  2546,  1007, 14163,  1006,
         1085,  1007,  4724, 12904,   102])"
2829,1,"['diagnostic plots', 'plots']",Distribution tables,seg_99,diabetes2 406 sigma (σ) 47 118 diagnostic plots 358,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101, 14671,  2475, 27433, 13201,  1006,  1173,  1007,  4700, 12963,
        16474, 14811,  3486,  2620,   102])"
2830,1,"['hypotheses', 'discrimination', 'hollow histogram', 'disjoint', 'leverage', 'high leverage', 'histogram', 'distribution']",Distribution tables,seg_99,discrete 15 175 high leverage 328 discrimination 378 histogram 45 disjoint 83 83–84 hollow histogram 68 125–126 distribution 43 126 hypotheses 189,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        1., 0., 0.])","tensor([4353, 7251])","tensor([  101, 16246,  2321, 12862,  2152, 21155, 25256,  9147,  4261,  2620,
         2010,  3406, 13113,  3429,  4487,  2015,  5558, 18447,  6640,  6640,
         1516,  6391,  8892,  2010,  3406, 13113,  6273,  8732,  1516, 14010,
         4353,  4724, 14010,  1044, 22571, 14573, 23072, 20500,   102])"
2831,1,"['significance level', 'approximation', 'normal approximation', 'hypothesis', 'negative binomial', 'level', 'normal', 'errors', 'hypothesis testing', 'geometric', 'significance', 'binomial']",Distribution tables,seg_99,"bernoulli 144 144 hypothesis testing 189–199, 201 binomial 149 149–155 decision errors 193 normal approximation 153–155 p-value 194 194 geometric 145 146 145–147 significance level 193 198–199 negative binomial 158 158–161",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101, 16595,  7140,  6894, 14748, 14748, 10744,  5604, 20500,  1516,
        20713,  1010, 16345,  8026, 20936,  2389, 17332, 17332,  1516, 14168,
         3247, 10697, 19984,  3671, 20167, 16710,  1516, 14168,  1052,  1011,
         3643, 19955, 19955, 14965, 13741, 16333, 13741,  1516, 16471,  7784,
         2504, 19984, 20003,  1516, 20713,  4997,  8026, 20936,  2389, 17696,
        17696,  1516, 17365,   102])"
2832,1,['independence'],Distribution tables,seg_99,normal 133 133–143 independence 172,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3671, 14506, 14506,  1516, 16065,  4336, 18253,   102])"
2833,1,"['interaction', 'indicator variable', 'influential point', 'interaction term', 'poisson', 'intensity map', 'intensity', 'dot plot', 'plot', 'indicator', 'variable', 'independent']",Distribution tables,seg_99,standard 184 independent 17 18 89 172 poisson 163 163–164 independent and identically distributed (iid) 145 t 252–254 indicator variable 323 343 344 365 372 dot plot 42 influential point 328 double-blind 34 intensity map 53 drone blades 406 interaction term 362,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3115, 19681,  2981,  2459,  2324,  6486, 18253, 13433, 24077,
        17867, 17867,  1516, 17943,  2981,  1998,  7235,  2135,  5500,  1006,
         2462,  2094,  1007, 13741,  1056, 22898,  1516, 22234, 17245,  8023,
        25392, 27810, 29386, 19342,  4261,  2475, 11089,  5436,  4413,  6383,
         2391, 25256,  3313,  1011,  6397,  4090,  8015,  4949,  5187, 18465,
        10491, 27433,  8290,  2744,  4029,  2475,   102])"
2834,1,"['effect size', 'range']",Distribution tables,seg_99,interquartile range 49 50 ebola survey 405 iqr 49 effect size 204 279,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([4353, 7251])","tensor([  101,  6970, 16211, 28228,  2571,  2846,  4749,  2753,  1041, 24290,
         5002, 23988, 26264,  2099,  4749,  3466,  2946, 19627, 25745,   102])"
2835,1,"['probability', 'estimate', 'joint', 'joint probability', 'error']",Distribution tables,seg_99,elmhurst 407 joint probability 96 96–97 error 170 jury 406 estimate 170,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101, 17709, 10510, 28941,  4101,  9723,  5986,  5986,  1516,  5989,
         7561, 10894,  6467, 27433, 10197, 10894,   102])"
2836,1,"['least squares', 'law of large numbers', 'least squares line', 'least squares criterion']",Distribution tables,seg_99,event 84 84 law of large numbers 82 e(x) 116 least squares criterion 318 exampleforresumeandblackquantified 375 least squares line 318,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2724,  6391,  6391,  2375,  1997,  2312,  3616,  6445,  1041,
         1006,  1060,  1007, 12904,  2560, 14320, 19229, 27003,  2742, 29278,
         6072, 17897,  5685, 28522,  3600, 16211, 16778, 10451, 18034,  2560,
        14320,  2240, 27003,   102])"
2837,1,"['regression', 'observational study']",Distribution tables,seg_99,least squares regression 317–321 observational study 18,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2560, 14320, 26237, 26628,  1516, 24030,  8089,  2389,  2817,
         2324,   102])"
2838,1,"['regression', 'outcome', 'linear regression', 'hypothesis test', 'outlier', 'linear combination', 'ordinal', 'test', 'linear', 'hypothesis', 'parameters', 'combination', 'observational unit', 'leverage', 'levels', 'outcome of interest']",Distribution tables,seg_99,extrapolation 322 observational unit 12 interpreting parameters 321 one-sided hypothesis test 200 r-squared (r2) 322 322–323 ordinal 15 levels 15 outcome 82 leverage 328 outcome of interest 97 linear combination 120 outlier 50 linear regression see also regression,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1.,
        0., 1., 0., 1., 1., 1., 0., 1., 1., 0., 1., 1., 0., 1., 1., 0., 0., 1.,
        0.])","tensor([4353, 7251])","tensor([  101,  4469, 18155,  3370, 23768,  8089,  2389,  3131,  2260, 25455,
        11709, 24030,  2028,  1011, 11536, 10744,  3231,  3263,  1054,  1011,
        19942,  1006,  1054,  2475,  1007, 23768, 23768,  1516, 25392,  2030,
        18979,  2140,  2321,  3798,  2321,  9560,  6445, 21155, 25256,  9560,
         1997,  3037,  5989,  7399,  5257,  6036,  2041, 14355,  2753,  7399,
        26237,  2156,  2036, 26237,   102])"
2839,1,"['parameter', 'paired', 'regression', 'logistic regression', 'logistic']",Distribution tables,seg_99,p-value 194 loan50 403 404 paired 262 262–264 loans full schema 403 407 parameter 133 170 305 319 logistic regression see also regression,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.])","tensor([4353, 7251])","tensor([  101,  1052,  1011,  3643, 19955,  5414, 12376, 28203, 24837, 12739,
        21950, 21950,  1516, 21611, 10940,  2440,  8040, 28433, 28203, 28941,
        16381, 14506, 10894, 20405, 26499,  8833,  6553, 26237,  2156,  2036,
        26237,   102])"
2840,1,"['logit', 'logit transformation', 'transformation']",Distribution tables,seg_99,parsimonious 353 logit transformation 372,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101, 11968,  5332,  8202,  6313,  3486,  2509,  8833,  4183,  8651,
         4261,  2475,   102])"
2841,1,"['tail', 'long tail']",Distribution tables,seg_99,patients 32 long tail 45,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 5022, 3590, 2146, 5725, 3429,  102])"
2842,1,"['lurking variable', 'variable']",Distribution tables,seg_99,percentile 49 136 138 409 lurking variable 25,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3867,  9463,  4749, 15407, 15028,  2871,  2683, 24261,  8023,
         2423,   102])"
2843,1,"['mean', 'marginal', 'probability', 'estimate', 'machine learning', 'point estimate', 'pie chart', 'marginal probability', 'chart', 'margin of error', 'error']",Distribution tables,seg_99,pew energy 2018 405 machine learning (ml) 95 pie chart 66 malaria 403 placebo 18 34 mammogram 406 placebo effect 34 margin of error 184 212 212–213 playing cards 404 marginal probability 96 96–97 plug-in principle 174 mariokart 407 point estimate 44 170 170–171 mean 43 difference of means 267,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101, 29071,  2943,  2760, 23988,  3698,  4083,  1006, 19875,  1007,
         5345, 11345,  3673,  5764, 19132, 28203,  2173,  5092,  2324,  4090,
         5003,  7382,  8649,  6444, 27433,  2173,  5092,  3466,  4090,  7785,
         1997,  7561, 19681, 18164, 18164,  1516, 19883,  2652,  5329, 24837,
        14785,  9723,  5986,  5986,  1516,  5989, 13354,  1011,  1999,  6958,
        19492,  7986,  6673,  2102, 28941,  2391, 10197,  4008, 10894, 10894,
         1516, 18225,  2812,  4724,  4489,  1997,  2965, 25491,   102])"
2844,1,"['density function', 'regression', 'prediction', 'multiplication rule', 'population', 'weighted mean', 'association', 'median', 'mean', 'distribution', 'multiple regression', 'pooled proportion', 'interval', 'mean square error', 'response', 'mean square', 'standard deviation', 'model', 'plot', 'mutually exclusive', 'multimodal', 'mosaic plot', 'positive association', 'function', 'deviation', 'predictor', 'probability', 'mse', 'multiple comparisons', 'standard', 'model selection', 'prediction interval', 'mean response value', 'response value', 'pooled standard deviation', 'error']",Distribution tables,seg_99,average 43 difference of proportions 217 weighted mean 44 single mean 251 mean response value 334 single proportion 208 mean square between groups (msg) 289 point-slope 320 mean square error (mse) 289 pooled proportion 220 median 49 pooled standard deviation 273 midterm election 331 population 22 22–24 midterms house 407 positive association 17 mlb players 18 406 possum 404 407 mode 46 power 279 model selection 353–356 practically significant 199 mosaic plot 65 prediction interval 334 358 multimodal 46 predictor 305 multiple comparisons 293 primary 102 multiple regression see also regression probability 82 80–108 multiplication rule 90 density function 126 mutually exclusive 83 83–84 distribution 87,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 1., 1., 0., 0., 1., 1., 1., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  2779,  4724,  4489,  1997, 19173, 20335, 18215,  2812,  4008,
         2309,  2812, 22582,  2812,  3433,  3643, 29562,  2309, 10817, 18512,
         2812,  2675,  2090,  2967,  1006,  5796,  2290,  1007, 27054,  2391,
         1011,  9663, 13710,  2812,  2675,  7561,  1006,  5796,  2063,  1007,
        27054, 19107,  2094, 10817, 10545,  3991,  4749, 19107,  2094,  3115,
        24353, 25371,  3054,  3334,  2213,  2602, 27533,  2313,  2570,  2570,
         1516,  2484,  3054,  3334,  5244,  2160, 28941,  3893,  2523,  2459,
        10901,  2867,  2324, 27433, 13433,  4757,  2819, 24837, 28941,  5549,
         4805,  2373, 25745,  2944,  4989,  3486,  2509,  1516, 27509,  8134,
         3278, 20713, 16061,  5436,  3515, 17547, 13483, 29562,  3486,  2620,
         4800,  5302,  9305,  4805, 16014,  2953, 20405,  3674, 18539, 26953,
         3078,  9402,  3674, 26237,  2156,  2036, 26237,  9723,  6445,  3770,
         1516, 10715, 24856,  3627,  3938,  4304,  3853, 14010, 20271,  7262,
         6640,  6640,  1516,  6391,  4353,  6584,   102])"
2845,1,"['curve', 'table', 'prospective study', 'nominal', 'association', 'probability table', 'normal distribution', 'nonlinear curve', 'n choose k', 'normal', 'rate', 'probability', 'nonlinear', 'first quartile', 'bias', 'success', 'probability sample', 'negative association', 'protected classes', 'sample', 'distribution', 'quartile']",Distribution tables,seg_99,probability of a success 144 n choose k 150 probability sample see sample ncbirths 406 probability table 136 negative association 17 prominent 46 noise 376 prosecutor’s fallacy 288 nominal 15 prospective study 25 non-response bias 24 protected classes 371 non-response rate 24 nonlinear 41 306 quartile nonlinear curve 362 first quartile 49 normal distribution 133 133 133–143 q1 49,tensor(1),"tensor([0., 1., 0., 0., 1., 0., 1., 1., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  9723,  1997,  1037,  3112, 14748,  1050,  5454,  1047,  5018,
         9723,  7099,  2156,  7099, 13316, 17706, 26830, 27433,  9723,  2795,
        15407,  4997,  2523,  2459,  4069,  4805,  5005,  4261,  2575, 12478,
         1521,  1055,  2991, 15719, 24841, 15087,  2321, 17464,  2817,  2423,
         2512,  1011,  3433, 13827,  2484,  5123,  4280,  4261,  2487,  2512,
         1011,  3433,  3446,  2484, 27400,  4601, 24622, 24209,  8445,  9463,
        27400,  7774,  4029,  2475,  2034, 24209,  8445,  9463,  4749,  3671,
         4353, 14506, 14506, 14506,  1516, 16065,  1053,  2487,  4749,   102])"
2846,1,"['normal probability table', 'table', 'probability', 'third quartile', 'normal', 'quartile', 'probability table']",Distribution tables,seg_99,standard 133 184 q3 49 normal probability table 408 third quartile 49 nuclear survey 405,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3115, 14506, 19681,  1053,  2509,  4749,  3671,  9723,  2795,
         2871,  2620,  2353, 24209,  8445,  9463,  4749,  4517,  5002, 23988,
          102])"
2847,1,"['null distribution', 'distribution']",Distribution tables,seg_99,r 171 null distribution 195,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1054, 18225, 19701,  4353, 17317,   102])"
2848,1,"['hypothesis', 'null hypothesis']",Distribution tables,seg_99,r-squared (r2) 322 null hypothesis (h0) 189,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  1054,  1011, 19942,  1006,  1054,  2475,  1007, 23768, 19701,
        10744,  1006,  1044,  2692,  1007, 20500,   102])"
2849,1,['null value'],Distribution tables,seg_99,random noise 72 null value 190,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  6721,  5005,  5824, 19701,  3643, 11827,   102])"
2850,1,"['random variable', 'random', 'process', 'numerical', 'variable']",Distribution tables,seg_99,random process 82 82–83 numerical 15 random variable 115 116 115–123,tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101,  6721,  2832,  6445,  6445,  1516,  6640, 15973,  2321,  6721,
         8023, 10630, 12904, 10630,  1516, 13138,   102])"
2851,1,"['randomization', 'data']",Distribution tables,seg_99,observational data 25 randomization 72,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 8089, 2389, 2951, 2423, 6721, 3989, 5824,  102])"
2852,1,"['tail', 'regression', 'skewed', 'rate', 'long tail', 'level', 'reference level', 'experiment', 'symmetric']",Distribution tables,seg_99,"randomized experiment 18 32 long tail 45 rate 163 right skewed 45 reference level 344 345 strong 45 50 regression 304 304–334, 343–377 symmetric 45",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  6721,  3550,  7551,  2324,  3590,  2146,  5725,  3429,  3446,
        17867,  2157, 15315,  7974,  2098,  3429,  4431,  2504, 29386, 23785,
         2844,  3429,  2753, 26237, 23859, 23859,  1516, 29562,  1010, 27810,
         1516,  4261,  2581, 19490,  3429,   102])"
2853,1,"['curve', 'interaction', 'replicate', 'residual plot', 'robust statistics', 'logistic', 'error', 'normal distribution', 'retrospective studies', 'nonlinear curve', 'response', 'normal', 'standard deviation', 'statistics', 'model', 'standard error', 'plot', 'statistic', 'substitution approximation', 'residual', 'deviation', 'stepwise', 'rejection regions', 'standard normal distribution', 'approximation', 'nonlinear', 'interaction term', 'standard', 'statistically significant', 'representative', 'tail', 'row totals', 'standard normal', 'response variable', 'distribution', 'variable', 'strata']",Distribution tables,seg_99,conditions 358–362 tail 45 interaction term 362 smallpox 404 logistic 371 371–377 sp500 1950 2018 406 model assumptions 358–362 standard deviation 47 118 model conditions 358–362 standard error (se) 171 181 multiple 346 343–362 difference in means 267 nonlinear curve 362 difference in proportions 217 technical conditions 358–362 single proportion 208 rejection regions 279 standard normal distribution 133 184 replicate 32 statistic see also summary statistic representative 24 statistically significant 199 residual 308 308–310 stem cells 406 residual plot 309 stent30 403 405 response variable 18 stent365 403 405 resume 407 stepwise 354 retrospective studies 25 stocks 18 404 robust statistics 51 strata 27 row totals 61 study participants 32 run17 406 substitution approximation 174,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.,
        0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  3785,  3486,  2620,  1516,  4029,  2475,  5725,  3429,  8290,
         2744,  4029,  2475, 25765, 24837,  8833,  6553,  4261,  2487,  4261,
         2487,  1516,  4261,  2581, 11867, 29345,  3925,  2760, 27433,  2944,
        17568,  3486,  2620,  1516,  4029,  2475,  3115, 24353,  4700, 12963,
         2944,  3785,  3486,  2620,  1516,  4029,  2475,  3115,  7561,  1006,
         7367,  1007, 18225, 18596,  3674,  4090,  2575, 27810,  1516,  4029,
         2475,  4489,  1999,  2965, 25491, 27400,  7774,  4029,  2475,  4489,
         1999, 19173, 20335,  4087,  3785,  3486,  2620,  1516,  4029,  2475,
         2309, 10817, 18512, 13893,  4655, 25745,  3115,  3671,  4353, 14506,
        19681, 28024,  3590, 28093,  6553,  2156,  2036, 12654, 28093,  6553,
         4387,  2484,  7778,  2135,  3278, 20713, 21961, 24232, 24232,  1516,
        17196,  7872,  4442, 27433, 21961,  5436, 25048, 26261,  3372, 14142,
        28203, 23988,  3433,  8023,  2324, 26261,  3372, 21619,  2629, 28203,
        23988, 13746, 28941,  3357, 14244, 27878, 15354,  2913,  2423, 15768,
         2324, 24837, 15873,  6747,  4868, 22913,  2676,  5216, 21948,  6079,
         2817,  6818,  3590,  2448, 16576, 27433, 20885, 20167, 19492,   102])"
2854,1,"['success', 'sample', 'condition']",Distribution tables,seg_99,success 144 s 88 success-failure condition 172 208 sample 22 22–24 suits 85,tensor(1),"tensor([0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4353, 7251])","tensor([  101,  3112, 14748,  1055,  6070,  3112,  1011,  4945,  4650, 18253,
        18512,  7099,  2570,  2570,  1516,  2484, 11072,  5594,   102])"
2855,1,"['sum of squares between groups', 'sets', 'table', 'third quartile', 'treatment', 'box plot', 'errors', 'time series', 'sampling distribution', 'symmetric', 'sum of squared', 'significance level', 'simple random sampling', 'tree diagram', 'sampling', 'plot', 'statistic', 'test', 'trial', 'convenience sample', 'test statistic', 'rate', 'uncertainty', 'random sample', 'level', 'anova', 'significance', 'sampling error', 'sampling uncertainty', 'sum of squares', 'stratified sampling', 'bias', 'transformation', 'tail', 'cluster sampling', 'sample space', 'random sampling', 'treatment group', 'table proportions', 'cluster sample', 'sample', 'random', 'sample size', 'sample statistic', 'distribution', 'scatterplot', 'quartile', 'error', 'strata']",Distribution tables,seg_99,bias 23 23–24 sum of squared errors (sse) 289 cluster 27 sum of squares between groups 289 cluster sample 27 sum of squares total (sst ) 289 cluster sampling 28 summary statistic 10 16 51 convenience sample 24 symmetric 45 multistage sample 27 multistage sampling 28 t-distribution 253 251–254 non-response bias 24 t-probability table 412 non-response rate 24 t-score 257 random sample 23–24 t-table 253 412 simple random sampling 26 27 table proportions 96 strata 27 tail 45 stratified sampling 26 27 test statistic 136 sample proportion 144 textbooks 406 sample size 170 third quartile 49 sample space 88 time series 318 359 sample statistic 51 toy anova 406 sampling distribution 171 transformation 52 sampling error 170 inverse 361 sampling uncertainty 170 log 361 scatterplot 16 41 square root 361 sets 84 truncation 361 sham surgery 34 treatment group 9 32 side-by-side box plot 68 tree diagram 102 102–108 significance level 193 198–199 trial 144,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 1., 0., 1., 0., 1.,
        1., 1., 1., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 1., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        1., 0., 1., 1., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101, 13827,  2603,  2603,  1516,  2484,  7680,  1997, 19942, 10697,
         1006,  7020,  2063,  1007, 27054,  9324,  2676,  7680,  1997, 14320,
         2090,  2967, 27054,  9324,  7099,  2676,  7680,  1997, 14320,  2561,
         1006,  7020,  2102,  1007, 27054,  9324, 16227,  2654, 12654, 28093,
         6553,  2184,  2385,  4868, 15106,  7099,  2484, 19490,  3429,  4800,
         9153,  3351,  7099,  2676,  4800,  9153,  3351, 16227,  2654,  1056,
         1011,  4353, 23254, 22582,  1516, 22234,  2512,  1011,  3433, 13827,
         2484,  1056,  1011,  9723,  2795, 25873,  2512,  1011,  3433,  3446,
         2484,  1056,  1011,  3556, 24368,  6721,  7099,  2603,  1516,  2484,
         1056,  1011,  2795, 23254, 25873,  3722,  6721, 16227,  2656,  2676,
         2795, 19173,  5986, 22913,  2676,  5725,  3429,  2358,  8609,  7810,
        16227,  2656,  2676,  3231, 28093,  6553, 15407,  7099, 10817, 14748,
        18841, 27433,  7099,  2946, 10894,  2353, 24209,  8445,  9463,  4749,
         7099,  2686,  6070,  2051,  2186, 27003,  3486,  2683,  7099, 28093,
         6553,  4868,  9121,  2019,  7103, 27433, 16227,  4353, 18225,  8651,
         4720, 16227,  7561, 10894, 19262,  4029,  2487, 16227, 12503, 10894,
         8833,  4029,  2487,  8040, 20097, 24759,  4140,  2385,  4601,  2675,
         7117,  4029,  2487,  4520,  6391, 19817,  4609, 10719,  4029,  2487,
        25850,  5970,  4090,  3949,  2177,  1023,  3590,  2217,  1011,  2011,
         1011,  2217,  3482,  5436,  6273,  3392, 16403,  9402,  9402,  1516,
        10715,  7784,  2504, 19984, 20003,  1516, 20713,  3979, 14748,   102])"
2856,1,"['simulation', 'type 2 error', 'hypothesis tests', 'hypothesis', 'random sample', 'simulated', 'sample', 'random', 'tests', 'simulated scatter', 'simple random sample', 'type 1 error', 'error']",Distribution tables,seg_99,multiple comparisons 292–294 truncation 361 simple random sample 24 two-sided hypothesis tests 200 simulated scatter 407 type 1 error 193 simulation 72 73 type 2 error 193,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([4353, 7251])","tensor([  101,  3674, 18539, 25797,  1516, 28135, 19817,  4609, 10719,  4029,
         2487,  3722,  6721,  7099,  2484,  2048,  1011, 11536, 10744,  5852,
         3263, 23599,  8040, 20097, 28941,  2828,  1015,  7561, 19984, 12504,
         5824,  6421,  2828,  1016,  7561, 19984,   102])"
2857,0,[],Distribution tables,seg_99,skew ucla textbooks f18 406,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4353, 7251])","tensor([  101, 15315,  7974, 12389, 18841, 20069,  2620, 27433,   102])"
2858,1,"['unimodal', 'skewed', 'unbiased']",Distribution tables,seg_99,extreme 52 unbiased 178 left skewed 45 unimodal 46,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101,  6034,  4720,  4895, 11607,  6924, 19289,  2187, 15315,  7974,
         2098,  3429,  4895, 16339,  9305,  4805,   102])"
2859,1,['observation'],Distribution tables,seg_99,unit of observation 12,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([4353, 7251])","tensor([ 101, 3131, 1997, 8089, 2260,  102])"
2860,1,"['variance', 'venn diagrams', 'venn', 'variable']",Distribution tables,seg_99,variability 47 49 variable 12 variance 47 118 venn diagrams 85 volunteers 32,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([4353, 7251])","tensor([  101, 28436,  4700,  4749,  8023,  2260, 23284,  4700, 12963,  2310,
        10695, 26309,  5594,  7314,  3590,   102])"
2861,1,"['mean', 'with replacement', 'without replacement', 'whiskers', 'replacement']",Distribution tables,seg_99,weighted mean 44 whiskers 50 with replacement 113 without replacement 113,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 0., 1., 1., 0., 1., 1., 0., 0.])","tensor([4353, 7251])","tensor([  101, 18215,  2812,  4008,  1059, 24158, 11451,  2753,  2007,  6110,
        12104,  2302,  6110, 12104,   102])"
2862,0,[],Distribution tables,seg_99,z 134 z-score 134,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([4353, 7251])","tensor([  101,  1062, 15170,  1062,  1011,  3556, 15170,   102])"
