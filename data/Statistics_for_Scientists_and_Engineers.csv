,Relevance,Tags,Heading,Seg,Sentence,Enc Relevance,Enc Tags,Enc Heading,Enc Sentence
0,0,[], DESCRIPTIVE STATISTICS,seg_1,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([22726,  6747])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
1,1,['statistics'], DESCRIPTIVE STATISTICS,seg_1,◾ explain the meaning and uses of statistics,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([22726,  6747])","tensor([ 101,  100, 4863, 1996, 3574, 1998, 3594, 1997, 6747,  102])"
2,1,"['scales of measurement', 'standard', 'measurement']", DESCRIPTIVE STATISTICS,seg_1,◾ describe the standard scales of measurement,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([22726,  6747])","tensor([  101,   100,  6235,  1996,  3115,  9539,  1997, 10903,   102])"
3,1,['summation'], DESCRIPTIVE STATISTICS,seg_1,◾ interpret various summation (∑) and product (∏) notations,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([22726,  6747])","tensor([  101,   100, 17841,  2536,  7680, 28649,  1006,   100,  1007,  1998,
         4031,  1006,   100,  1007, 14869,  2015,   102])"
4,1,"['transformations', 'data']", DESCRIPTIVE STATISTICS,seg_1,◾ apply different types of data transformations,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([22726,  6747])","tensor([  101,   100,  6611,  2367,  4127,  1997,  2951, 21865,   102])"
5,1,"['discretization', 'data']", DESCRIPTIVE STATISTICS,seg_1,◾ distinguish various data discretization algorithms (ddas),tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([22726,  6747])","tensor([  101,   100, 10782,  2536,  2951,  5860, 13465,  3989, 13792,  1006,
        20315,  3022,  1007,   102])"
6,1,"['discretization', 'permutation', 'transform', 'statistics', 'data', 'factorial', 'continuous', 'inferential statistics', 'rising and falling factorials', 'falling factorials', 'scales of measurement', 'combination', 'range', 'measurement', 'summation']", INTRODUCTION,seg_3,"statistics has borrowed several ideas and notations from various other fields. this section summarizes some important concepts and notations that will be used in this book. as examples, the factorial, permutation and combination, summation, product (including rising and falling factorials), and other mathematical notations including set-theoretic operators are discussed in this chapter. these notations are extensively used in descriptive and inferential statistics. a discussion on the most commonly used scales of measurement in this chapter gives better insight into the types of data most often encountered. various techniques to transform these data into any desired range are also given. data discretization techniques to categorize continuous data are exemplified. these notations, tools, and techniques are immensely useful to better grasp the rest of the chapters.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 1., 1., 1., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([4955]),"tensor([  101,  6747,  2038, 11780,  2195,  4784,  1998, 14869,  2015,  2013,
         2536,  2060,  4249,  1012,  2023,  2930,  7680,  7849, 10057,  2070,
         2590,  8474,  1998, 14869,  2015,  2008,  2097,  2022,  2109,  1999,
         2023,  2338,  1012,  2004,  4973,  1010,  1996,  5387,  4818,  1010,
         2566, 28120,  3370,  1998,  5257,  1010,  7680, 28649,  1010,  4031,
         1006,  2164,  4803,  1998,  4634,  5387, 26340,  1007,  1010,  1998,
         2060,  8045, 14869,  2015,  2164,  2275,  1011, 14833, 13465,  2594,
         9224,  2024,  6936,  1999,  2023,  3127,  1012,  2122, 14869,  2015,
         2024,  8077,  2109,  1999, 22726,  1998,  1999,  7512, 24271,  6747,
         1012,  1037,  6594,  2006,  1996,  2087,  4141,  2109,  9539,  1997,
        10903,  1999,  2023,  3127,  3957,  2488, 12369,  2046,  1996,  4127,
         1997,  2951,  2087,  2411,  8567,  1012,  2536,  5461,  2000, 10938,
         2122,  2951,  2046,  2151,  9059,  2846,  2024,  2036,  2445,  1012,
         2951,  5860, 13465,  3989,  5461,  2000,  4937, 20265, 25709,  7142,
         2951,  2024, 28593,  1012,  2122, 14869,  2015,  1010,  5906,  1010,
         1998,  5461,  2024, 24256,  6179,  2000,  2488, 10616,  1996,  2717,
         1997,  1996,  9159,  1012,   102])"
7,1,"['percentiles', 'weighted means', 'population', 'trimmed means', 'median', 'location', 'skewness', 'quartiles', 'harmonic', 'statistical', 'geometric', 'data', 'case', 'trials', 'kurtosis', 'sample median', 'sample', 'location measures']", INTRODUCTION,seg_3,"most of the statistical analyses use a sample of data values. these data are either collected from a target population, obtained from field trials, or generated randomly. they are then either summarized (using summary measures) or subjected to one or more analyses. popular summarization measures include location measures, spread measures, skewness and kurtosis measures, dependency measures, and other measures. chapter 2 introduces the most common location measures. these include arithmetic, geometric, and harmonic means; median; and the mode. trimmed versions of these measures are obtained by dropping data values at either or both of the extremes. as a special case, as the geometric and harmonic means are defined only for positive data values ($ $0), an analyst may drop all zero and negative data values to obtain left-trimmed versions of them. the trimmed means, weighted means, and their updating formula are given. the sample median, mode, quartiles, and percentiles are also explained.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0.])",tensor([4955]),"tensor([  101,  2087,  1997,  1996,  7778, 16478,  2224,  1037,  7099,  1997,
         2951,  5300,  1012,  2122,  2951,  2024,  2593,  5067,  2013,  1037,
         4539,  2313,  1010,  4663,  2013,  2492,  7012,  1010,  2030,  7013,
        18154,  1012,  2027,  2024,  2059,  2593, 22539,  1006,  2478, 12654,
         5761,  1007,  2030, 13532,  2000,  2028,  2030,  2062, 16478,  1012,
         2759,  7680,  7849,  3989,  5761,  2421,  3295,  5761,  1010,  3659,
         5761,  1010, 15315,  7974,  2791,  1998,  9679, 12650,  5761,  1010,
        24394,  5761,  1010,  1998,  2060,  5761,  1012,  3127,  1016, 13999,
         1996,  2087,  2691,  3295,  5761,  1012,  2122,  2421, 20204,  1010,
        14965,  1010,  1998, 19452,  2965,  1025,  3991,  1025,  1998,  1996,
         5549,  1012, 21920,  4617,  1997,  2122,  5761,  2024,  4663,  2011,
         7510,  2951,  5300,  2012,  2593,  2030,  2119,  1997,  1996, 28800,
         1012,  2004,  1037,  2569,  2553,  1010,  2004,  1996, 14965,  1998,
        19452,  2965,  2024,  4225,  2069,  2005,  3893,  2951,  5300,  1006,
         1002,  1002,  1014,  1007,  1010,  2019, 12941,  2089,  4530,  2035,
         5717,  1998,  4997,  2951,  5300,  2000,  6855,  2187,  1011, 21920,
         4617,  1997,  2068,  1012,  1996, 21920,  2965,  1010, 18215,  2965,
         1010,  1998,  2037,  2039, 16616,  5675,  2024,  2445,  1012,  1996,
         7099,  3991,  1010,  5549,  1010, 24209,  8445,  9463,  2015,  1010,
         1998,  3867,  9463,  2015,  2024,  2036,  4541,  1012,   102])"
8,1,"['range', 'linear', 'variance', 'deviation', 'variation', 'coefficient', 'nonlinear', 'sample', 'standard deviation', 'standard', 'sample variance', 'categorization', 'coefficient of variation']", INTRODUCTION,seg_3,"dispersion measures are discussed in chapter 3. a categorization of spread measures helps the reader to distinguish between linear and nonlinear measures, pivotal and pivotless measures, additive and nonadditive measures, absolute and relative measures, and distance-based measures. the most frequently used spread measures are the sample range, variance, or standard deviation. these are discussed and some updating formulae for sample variance are derived. the sample variance and covariance can be computed recursively using a divide-and-conquer strategy by dividing the sample into two subsamples and pooling the corresponding variance or covariance of subsamples in a sensible and orderly way. the coefficient of variation and gini coefficient are also discussed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])",tensor([4955]),"tensor([  101,  4487, 17668, 10992,  5761,  2024,  6936,  1999,  3127,  1017,
         1012,  1037,  4937, 20265, 26910,  1997,  3659,  5761,  7126,  1996,
         8068,  2000, 10782,  2090,  7399,  1998, 27400,  5761,  1010, 20369,
         1998, 14255, 22994,  3238,  5761,  1010, 29167,  1998,  2512,  4215,
        23194,  3512,  5761,  1010,  7619,  1998,  5816,  5761,  1010,  1998,
         3292,  1011,  2241,  5761,  1012,  1996,  2087,  4703,  2109,  3659,
         5761,  2024,  1996,  7099,  2846,  1010, 23284,  1010,  2030,  3115,
        24353,  1012,  2122,  2024,  6936,  1998,  2070,  2039, 16616,  5675,
         2063,  2005,  7099, 23284,  2024,  5173,  1012,  1996,  7099, 23284,
         1998,  2522, 10755, 28335,  2064,  2022, 24806, 28667,  9236, 14547,
         2478,  1037, 11443,  1011,  1998,  1011, 16152,  5656,  2011, 16023,
         1996,  7099,  2046,  2048,  4942, 21559, 21112,  1998,  4770,  2075,
         1996,  7978, 23284,  2030,  2522, 10755, 28335,  1997,  4942, 21559,
        21112,  1999,  1037, 21082,  1998, 23589,  2126,  1012,  1996, 19064,
         1997,  8386,  1998, 18353,  2072, 19064,  2024,  2036,  6936,  1012,
          102])"
9,1,"['probability theory', 'functions', 'bayes', 'bayes theorem', 'derangements', 'conditional', 'location', 'recurrence', 'conditional probability', 'permutation', 'skewness', 'urn models', 'recurrence relations', 'probability', 'partitions', 'kurtosis', 'complete enumeration', 'combination', 'distribution']", INTRODUCTION,seg_3,"popular measures of skewness and kurtosis are discussed in chapter 4. different types of skewness measures such as location and scale-based measures, quartile-based measures, moment-based measures, measures that utilize inverse of distribution functions, or l-moments are discussed. the measures of kurtosis discussed are skewness–kurtosis bounds, l-kurtosis, and spectral kurtosis. chapter 5 discusses probability theory with emphasis on solving problems from various fields. essential tools and techniques such as permutation and combination, cyclic permutation, complete enumeration, trees, principle of inclusion and exclusion, recurrence relations, derangements, urn models, and partitions used to solve probability problems are discussed, and conditional probability and bayes theorem are introduced.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        1., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0.,
        0.])",tensor([4955]),"tensor([  101,  2759,  5761,  1997, 15315,  7974,  2791,  1998,  9679, 12650,
         2024,  6936,  1999,  3127,  1018,  1012,  2367,  4127,  1997, 15315,
         7974,  2791,  5761,  2107,  2004,  3295,  1998,  4094,  1011,  2241,
         5761,  1010, 24209,  8445,  9463,  1011,  2241,  5761,  1010,  2617,
         1011,  2241,  5761,  1010,  5761,  2008, 16462, 19262,  1997,  4353,
         4972,  1010,  2030,  1048,  1011,  5312,  2024,  6936,  1012,  1996,
         5761,  1997,  9679, 12650,  6936,  2024, 15315,  7974,  2791,  1516,
         9679, 12650, 19202,  1010,  1048,  1011,  9679, 12650,  1010,  1998,
        17435,  9679, 12650,  1012,  3127,  1019, 15841,  9723,  3399,  2007,
         7902,  2006, 13729,  3471,  2013,  2536,  4249,  1012,  6827,  5906,
         1998,  5461,  2107,  2004,  2566, 28120,  3370,  1998,  5257,  1010,
        23750,  2566, 28120,  3370,  1010,  3143,  4372, 17897,  8156,  1010,
         3628,  1010,  6958,  1997, 10502,  1998, 15945,  1010, 28667,  3126,
        24413,  4262,  1010,  4315, 22043,  8163,  1010, 24471,  2078,  4275,
         1010,  1998, 13571,  2015,  2109,  2000,  9611,  9723,  3471,  2024,
         6936,  1010,  1998, 18462,  9723,  1998,  3016,  2229,  9872,  2024,
         3107,  1012,   102])"
10,1,"['mathematical expectation', 'absolute value', 'method', 'successes', 'binomial distribution', 'independent', 'mean', 'continuous distributions', 'bernoulli', 'convergence', 'tail areas', 'failures', 'poisson', 'bernoulli trials', 'binomial', 'discrete', 'continuous', 'rate', 'deviation', 'linear', 'trials', 'expectation', 'tail', 'variance', 'distributions', 'distribution', 'discrete distribution']", INTRODUCTION,seg_3,"discrete distributions and their properties are discussed in chapter 6. a novel method to easily find the mean deviation (md) of any discrete distribution is introduced in this chapter, and its practical use is illustrated. it is shown that the rate of convergence of binomial distribution to the poisson [307,308] law is quadratic in p and linear in n. distribution of the absolute value of the difference between successes and failures in independent bernoulli trials is obtained in simple form. commonly encountered continuous distributions are discussed in chapter 7. an impressive method of immense practical value to find the mean deviation of continuous distributions is derived and is extensively used throughout the chapter. variance of continuous distributions is shown to be related to the tail areas. mathematical expectation and its properties are discussed in chapter 8. an introduction to various",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([4955]),"tensor([  101, 16246, 20611,  1998,  2037,  5144,  2024,  6936,  1999,  3127,
         1020,  1012,  1037,  3117,  4118,  2000,  4089,  2424,  1996,  2812,
        24353,  1006,  9108,  1007,  1997,  2151, 16246,  4353,  2003,  3107,
         1999,  2023,  3127,  1010,  1998,  2049,  6742,  2224,  2003,  7203,
         1012,  2009,  2003,  3491,  2008,  1996,  3446,  1997, 19143,  1997,
         8026, 20936,  2389,  4353,  2000,  1996, 13433, 24077,  1031, 24559,
         1010, 24232,  1033,  2375,  2003, 17718, 23671,  1999,  1052,  1998,
         7399,  1999,  1050,  1012,  4353,  1997,  1996,  7619,  3643,  1997,
         1996,  4489,  2090, 14152,  1998, 15428,  1999,  2981, 16595,  7140,
         6894,  7012,  2003,  4663,  1999,  3722,  2433,  1012,  4141,  8567,
         7142, 20611,  2024,  6936,  1999,  3127,  1021,  1012,  2019,  8052,
         4118,  1997, 14269,  6742,  3643,  2000,  2424,  1996,  2812, 24353,
         1997,  7142, 20611,  2003,  5173,  1998,  2003,  8077,  2109,  2802,
         1996,  3127,  1012, 23284,  1997,  7142, 20611,  2003,  3491,  2000,
         2022,  3141,  2000,  1996,  5725,  2752,  1012,  8045, 17626,  1998,
         2049,  5144,  2024,  6936,  1999,  3127,  1022,  1012,  2019,  4955,
         2000,  2536,   102])"
11,1,"['mean', 'deviation', 'functions', 'statistics', 'distribution']", INTRODUCTION,seg_3,generating functions used in statistics appears in chapter 9. two new families of generating functions (for generating cumulative distribution functions (cdf-gf) and mean deviation (md-gf)) are introduced in this chapter.,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4955]),"tensor([  101, 11717,  4972,  2109,  1999,  6747,  3544,  1999,  3127,  1023,
         1012,  2048,  2047,  2945,  1997, 11717,  4972,  1006,  2005, 11717,
        23260,  4353,  4972,  1006,  3729,  2546,  1011,  1043,  2546,  1007,
         1998,  2812, 24353,  1006,  9108,  1011,  1043,  2546,  1007,  1007,
         2024,  3107,  1999,  2023,  3127,  1012,   102])"
12,1,"['table', 'functions', 'polar transformations', 'method', 'conditional', 'transformations', 'probabilistic', 'continuous random variables', 'integer part', 'continuous', 'marginal', 'random variables', 'jacobian', 'distributions', 'random', 'distribution', 'variables', 'joint', 'conditional distributions']", INTRODUCTION,seg_3,"functions of random variables appear in chapter 10. different techniques such as method of distribution functions, jacobian method, probabilistic methods, and area-based methods are discussed. distribution of squares, square roots, reciprocals, sums, products, quotients, integer part, and fractional part of continuous random variables and distributions of trigonometric and transcendental functions are also discussed. joint, marginal, and conditional distributions are discussed in chapter 11. the concept of jacobians is introduced, and an immensely useful summary table of 2d transformations is given. various polar transformations such as plane polar, spherical polar, and toroidal polar and their inverses are also discussed and summarized.",tensor(1),"tensor([0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([4955]),"tensor([  101,  4972,  1997,  6721, 10857,  3711,  1999,  3127,  2184,  1012,
         2367,  5461,  2107,  2004,  4118,  1997,  4353,  4972,  1010,  6213,
         2937,  4118,  1010,  4013,  3676, 27965,  4588,  4725,  1010,  1998,
         2181,  1011,  2241,  4725,  2024,  6936,  1012,  4353,  1997, 14320,
         1010,  2675,  6147,  1010, 28309,  2015,  1010, 20571,  1010,  3688,
         1010, 22035,  9515,  7666,  1010, 16109,  2112,  1010,  1998, 12884,
         2389,  2112,  1997,  7142,  6721, 10857,  1998, 20611,  1997, 13012,
         7446, 28993,  1998,  9099, 23865, 21050,  4972,  2024,  2036,  6936,
         1012,  4101,  1010, 14785,  1010,  1998, 18462, 20611,  2024,  6936,
         1999,  3127,  2340,  1012,  1996,  4145,  1997,  6213,  7066,  2003,
         3107,  1010,  1998,  2019, 24256,  6179, 12654,  2795,  1997, 14134,
        21865,  2003,  2445,  1012,  2536, 11508, 21865,  2107,  2004,  4946,
        11508,  1010, 18970, 11508,  1010,  1998, 23790, 16975, 11508,  1998,
         2037, 19262,  2015,  2024,  2036,  6936,  1998, 22539,  1012,   102])"
13,1,"['scatterplots', 'correlation', 'population', 'mean', 'testing statistical', 'statistics', 'samples', 'statistical', 'statistical hypotheses', 'data', 'inferential statistics', 'hypotheses', 'descriptive statistics', 'information', 'quality control', 'parameters', 'random samples', 'range', 'graphical', 'variance', 'control', 'random', 'numerical']", STATISTICS AS A SCIENTIFIC DISCIPLINE,seg_5,"statistics has its origin in describing (collecting, organizing, and interpreting) numeric data collected on subjects of interest. this branch of statistics is called descriptive statistics. it deals with finite random samples drawn from the totality of all elements concerned (which is assumed to be large and is called the population (pp. 1–11)). it uses numerical measures (such as mean, variance, and correlation) and graphical techniques to summarize information in a concise and comprehensible form. these are intended for communication, interpretation, or subsequent processing by humans or machines. inferential statistics is concerned with making inferences about the parameters or on the functional form of a population (defined in the following) using small random samples drawn from it. a great majority of inferential statistics do make assumptions on the form of the underlying density, on the parameters, or on the data range. data for descriptive and inferential statistics are often numeric. large samples are typically used in descriptive statistics than in inferential statistics. for example, scatterplots and other visualization tools require more data points than those used in statistical quality control or testing statistical hypotheses.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        1., 1., 1., 1., 1., 1., 0., 0.])","tensor([6747, 2004, 1037, 4045, 9009])","tensor([  101,  6747,  2038,  2049,  4761,  1999,  7851,  1006,  9334,  1010,
        10863,  1010,  1998, 25455,  1007, 16371, 25531,  2951,  5067,  2006,
         5739,  1997,  3037,  1012,  2023,  3589,  1997,  6747,  2003,  2170,
        22726,  6747,  1012,  2009,  9144,  2007, 10713,  6721,  8168,  4567,
         2013,  1996,  2561,  3012,  1997,  2035,  3787,  4986,  1006,  2029,
         2003,  5071,  2000,  2022,  2312,  1998,  2003,  2170,  1996,  2313,
         1006,  4903,  1012,  1015,  1516,  2340,  1007,  1007,  1012,  2009,
         3594, 15973,  5761,  1006,  2107,  2004,  2812,  1010, 23284,  1010,
         1998, 16902,  1007,  1998, 20477,  5461,  2000,  7680,  7849,  4697,
         2592,  1999,  1037,  9530, 18380,  1998,  4012, 28139, 10222, 19307,
         2433,  1012,  2122,  2024,  3832,  2005,  4807,  1010,  7613,  1010,
         2030,  4745,  6364,  2011,  4286,  2030,  6681,  1012,  1999,  7512,
        24271,  6747,  2003,  4986,  2007,  2437, 28937,  2015,  2055,  1996,
        11709,  2030,  2006,  1996,  8360,  2433,  1997,  1037,  2313,  1006,
         4225,  1999,  1996,  2206,  1007,  2478,  2235,  6721,  8168,  4567,
         2013,  2009,  1012,  1037,  2307,  3484,  1997,  1999,  7512, 24271,
         6747,  2079,  2191, 17568,  2006,  1996,  2433,  1997,  1996, 10318,
         4304,  1010,  2006,  1996, 11709,  1010,  2030,  2006,  1996,  2951,
         2846,  1012,  2951,  2005, 22726,  1998,  1999,  7512, 24271,  6747,
         2024,  2411, 16371, 25531,  1012,  2312,  8168,  2024,  4050,  2109,
         1999, 22726,  6747,  2084,  1999,  1999,  7512, 24271,  6747,  1012,
         2005,  2742,  1010,  8040, 20097, 24759, 12868,  1998,  2060,  5107,
         3989,  5906,  5478,  2062,  2951,  2685,  2084,  2216,  2109,  1999,
         7778,  3737,  2491,  2030,  5604,  7778,  1044, 22571, 14573, 23072,
         1012,   102])"
14,1,"['hypotheses', 'data', 'information', 'experimental', 'statistics']", STATISTICS AS A SCIENTIFIC DISCIPLINE,seg_5,"definition 1.1 statistics is a branch of scientific discipline that deals with the systematic collection, tabulation, summarization, classification, analysis and modeling of data, extracting summary information from numeric data, and drawing potentially useful conclusions from past or observed data, or verifying experimental hypotheses.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([6747, 2004, 1037, 4045, 9009])","tensor([  101,  6210,  1015,  1012,  1015,  6747,  2003,  1037,  3589,  1997,
         4045,  9009,  2008,  9144,  2007,  1996, 11778,  3074,  1010, 21628,
         9513,  1010,  7680,  7849,  3989,  1010,  5579,  1010,  4106,  1998,
        11643,  1997,  2951,  1010, 14817,  2075, 12654,  2592,  2013, 16371,
        25531,  2951,  1010,  1998,  5059,  9280,  6179, 15306,  2013,  2627,
         2030,  5159,  2951,  1010,  2030, 20410,  2075,  6388,  1044, 22571,
        14573, 23072,  1012,   102])"
15,1,"['experimental', 'population', 'tolerance limits', 'statistics', 'statistical', 'statistical hypotheses', 'statistic', 'test', 'parameter', 'hypotheses', 'test statistic', 'hypothesis', 'quality control', 'process', 'control', 'levels', 'deviations', 'distribution']", STATISTICS AS A SCIENTIFIC DISCIPLINE,seg_5,"this definition does not cover every branch of statistics, as the subject continues to diversify into various applied sciences. for example, statistical quality control is used to check process deviations to see if they are well within the tolerance limits or if they fall beyond predefined levels. testing of statistical hypotheses involve well-defined experimental steps that use tabulated values of a test statistic to draw reasonable conclusions (accepting or rejecting a research hypothesis) about an unknown population parameter that describes some characteristic of the distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([6747, 2004, 1037, 4045, 9009])","tensor([  101,  2023,  6210,  2515,  2025,  3104,  2296,  3589,  1997,  6747,
         1010,  2004,  1996,  3395,  4247,  2000, 18612,  8757,  2046,  2536,
         4162,  4163,  1012,  2005,  2742,  1010,  7778,  3737,  2491,  2003,
         2109,  2000,  4638,  2832, 24353,  2015,  2000,  2156,  2065,  2027,
         2024,  2092,  2306,  1996, 13986,  6537,  2030,  2065,  2027,  2991,
         3458,  3653,  3207, 23460,  2094,  3798,  1012,  5604,  1997,  7778,
         1044, 22571, 14573, 23072,  9125,  2092,  1011,  4225,  6388,  4084,
         2008,  2224, 21628,  8898,  5300,  1997,  1037,  3231, 28093,  6553,
         2000,  4009,  9608, 15306,  1006, 10564,  2030, 21936,  1037,  2470,
        10744,  1007,  2055,  2019,  4242,  2313, 16381,  2008,  5577,  2070,
         8281,  1997,  1996,  4353,  1012,   102])"
16,1,"['regression', 'data', 'least squares', 'statistics']", STATISTICS AS A SCIENTIFIC DISCIPLINE,seg_5,"similarly, engineering applications of statistics include searching for potentially useful patterns and trends in large data collections using regression [304] models, hierarchical (tree) models, cluster analysis, partial least squares, and so on. the least-squares principle finds applications in neural networks (nns), digital signal processing, data compression, and many engineering fields.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6747, 2004, 1037, 4045, 9009])","tensor([  101,  6660,  1010,  3330,  5097,  1997,  6747,  2421,  6575,  2005,
         9280,  6179,  7060,  1998, 12878,  1999,  2312,  2951,  6407,  2478,
        26237,  1031, 23859,  1033,  4275,  1010, 25835,  1006,  3392,  1007,
         4275,  1010,  9324,  4106,  1010,  7704,  2560, 14320,  1010,  1998,
         2061,  2006,  1012,  1996,  2560,  1011, 14320,  6958,  4858,  5097,
         1999, 15756,  6125,  1006,  1050,  3619,  1007,  1010,  3617,  4742,
         6364,  1010,  2951, 13379,  1010,  1998,  2116,  3330,  4249,  1012,
          102])"
17,1,"['estimation', 'expectations', 'simulated', 'experimental', 'experiments', 'quantitative', 'population', 'location', 'states', 'sampling', 'statistics', 'samples', 'statistical', 'sampling distributions', 'inferential statistics', 'data', 'function', 'predictions', 'trials', 'random variables', 'parameters', 'categorical', 'range', 'distributions', 'random', 'nonparametric statistics', 'distribution', 'distribution function', 'variables', 'strata']", STATISTICS AS A SCIENTIFIC DISCIPLINE,seg_5,"population census was conducted long ago in 3340 bc in egypt [en.wikipedia.org/ wiki/census]. william-i of england conducted a complete census of adults and households in ad 1086. regular population census started in the united states in 1790 and in the united kingdom in 1801 at 10-year periods. numeric data on birth, death, and marriages were collected in several countries of western europe subsequently. this branch of statistics that deals with vital (life-connected) data is known as vital statistics. study of numeric data on education, housing, and social welfare came to be known as social statistics. economic statistics deals with data analysis on unemployment, economic indicators (consumer price index of essential commodities, purchasing power of people in various strata, etc.), industrial production, import, and export. experimental statistics deals with data analysis or comparison techniques in field experiments using samples or simulated trials. agricultural statistics is a related field that deals with analysis of yield in field experimentation. data analysis techniques that utilize data spread across a frame-of-reference (such as the earth’s surface or deep space) are known as spatial statistics. they involve data of categorical or quantitative types along with a spatial frame of reference that serves as a window. medical statistics is a mixture of the above that deals with summary measures, experimental designs, sampling, predictions, classifications, and clustering, to name a few. mathematical statistics comprises an umbrella of properties of random variables, sampling distributions, expectations, estimation, and inference (see inferential statistics). nonparametric statistics have minimal assumptions on the data—on the data range, distribution function, or the location and scale parameters of the population. statistical techniques are also applied in various other fields such as insurance (actuarial statistics), engineering (engineering statistics), psychology, and education.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6747, 2004, 1037, 4045, 9009])","tensor([  101,  2313,  2883,  2001,  4146,  2146,  3283,  1999, 29562,  2692,
         4647,  1999,  5279,  1031,  4372,  1012, 16948,  1012,  8917,  1013,
        15536,  3211,  1013,  2883,  1033,  1012,  2520,  1011,  1045,  1997,
         2563,  4146,  1037,  3143,  2883,  1997,  6001,  1998,  3911,  1999,
         4748, 28196,  1012,  3180,  2313,  2883,  2318,  1999,  1996,  2142,
         2163,  1999, 13393,  1998,  1999,  1996,  2142,  2983,  1999, 12410,
         2012,  2184,  1011,  2095,  6993,  1012, 16371, 25531,  2951,  2006,
         4182,  1010,  2331,  1010,  1998, 12743,  2020,  5067,  1999,  2195,
         3032,  1997,  2530,  2885,  3525,  1012,  2023,  3589,  1997,  6747,
         2008,  9144,  2007,  8995,  1006,  2166,  1011,  4198,  1007,  2951,
         2003,  2124,  2004,  8995,  6747,  1012,  2817,  1997, 16371, 25531,
         2951,  2006,  2495,  1010,  3847,  1010,  1998,  2591,  7574,  2234,
         2000,  2022,  2124,  2004,  2591,  6747,  1012,  3171,  6747,  9144,
         2007,  2951,  4106,  2006, 12163,  1010,  3171, 20390,  1006,  7325,
         3976,  5950,  1997,  6827, 21955,  1010, 13131,  2373,  1997,  2111,
         1999,  2536, 22913,  1010,  4385,  1012,  1007,  1010,  3919,  2537,
         1010, 12324,  1010,  1998,  9167,  1012,  6388,  6747,  9144,  2007,
         2951,  4106,  2030,  7831,  5461,  1999,  2492,  7885,  2478,  8168,
         2030, 23599,  7012,  1012,  4910,  6747,  2003,  1037,  3141,  2492,
         2008,  9144,  2007,  4106,  1997, 10750,  1999,  2492, 21470,  1012,
         2951,  4106,  5461,  2008, 16462,  2951,  3659,  2408,  1037,  4853,
         1011,  1997,  1011,  4431,  1006,  2107,  2004,  1996,  3011,  1521,
         1055,  3302,  2030,  2784,  2686,  1007,  2024,  2124,  2004, 13589,
         6747,  1012,  2027,  9125,  2951,  1997,  4937, 27203,  2030, 20155,
         4127,  2247,  2007,  1037, 13589,  4853,  1997,  4431,  2008,  4240,
         2004,  1037,  3332,  1012,  2966,  6747,  2003,  1037,  8150,  1997,
         1996,  2682,  2008,  9144,  2007, 12654,  5761,  1010,  6388,  5617,
         1010, 16227,  1010, 20932,  1010, 26739,  1010,  1998,  9324,  2075,
         1010,  2000,  2171,  1037,  2261,  1012,  8045,  6747,  8681,  2019,
        12977,  1997,  5144,  1997,  6721, 10857,  1010, 16227, 20611,  1010,
        10908,  1010, 24155,  1010,  1998, 28937,  1006,  2156,  1999,  7512,
        24271,  6747,  1007,  1012,  2512, 28689, 12589,  6747,  2031, 10124,
        17568,  2006,  1996,  2951,  1517,  2006,  1996,  2951,  2846,  1010,
         4353,  3853,  1010,  2030,  1996,  3295,  1998,  4094, 11709,  1997,
         1996,  2313,  1012,  7778,  5461,  2024,  2036,  4162,  1999,  2536,
         2060,  4249,  2107,  2004,  5427,  1006,  2552,  6692, 14482,  6747,
         1007,  1010,  3330,  1006,  3330,  6747,  1007,  1010,  6825,  1010,
         1998,  2495,  1012,   102])"
18,1,"['categories', 'ordinal data', 'data', 'interval', 'ordinal', 'scales of measurement', 'standard', 'measurement', 'quantitative', 'statistical', 'nominal', 'categorical']", Scales of Measurement,seg_7,"the most popular scales of measurement are nominal, ordinal, interval, and ratio (noir) scales originated by stevens [265]. a great majority of common data during the 1940s belonged to one of these four categories. these are called standard data scales. these scales were well known in statistical analysis much before 1946 as categorical and quantitative scales. the nominal and ordinal data are together called categorical, nonmetric, or qualitative data because they are labeled using a finite alphabet of distinct and consistent symbols. these need not be numbers because we can use letters (in various languages such as english and greek), enumerated constants, or strings to label them. the interval and ratio type of data are together called quantitative data. these are always numeric (either integers or floating point",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        1., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 9539,  1997, 10903])","tensor([  101,  1996,  2087,  2759,  9539,  1997, 10903,  2024, 15087,  1010,
         2030, 18979,  2140,  1010, 13483,  1010,  1998,  6463,  1006, 15587,
         1007,  9539,  7940,  2011,  8799,  1031, 20549,  1033,  1012,  1037,
         2307,  3484,  1997,  2691,  2951,  2076,  1996,  7675,  6272,  2000,
         2028,  1997,  2122,  2176,  7236,  1012,  2122,  2024,  2170,  3115,
         2951,  9539,  1012,  2122,  9539,  2020,  2092,  2124,  1999,  7778,
         4106,  2172,  2077,  3918,  2004,  4937, 27203,  1998, 20155,  9539,
         1012,  1996, 15087,  1998,  2030, 18979,  2140,  2951,  2024,  2362,
         2170,  4937, 27203,  1010,  2512, 12589,  1010,  2030, 24209, 11475,
        27453,  2951,  2138,  2027,  2024, 12599,  2478,  1037, 10713, 12440,
         1997,  5664,  1998,  8335,  9255,  1012,  2122,  2342,  2025,  2022,
         3616,  2138,  2057,  2064,  2224,  4144,  1006,  1999,  2536,  4155,
         2107,  2004,  2394,  1998,  3306,  1007,  1010,  4372, 17897,  9250,
         5377,  2015,  1010,  2030,  7817,  2000,  3830,  2068,  1012,  1996,
        13483,  1998,  6463,  2828,  1997,  2951,  2024,  2362,  2170, 20155,
         2951,  1012,  2122,  2024,  2467, 16371, 25531,  1006,  2593, 24028,
         2030,  8274,  2391,   102])"
19,1,"['interval', 'ordinal', 'statisticians', 'quantitative', 'statistical', 'nominal', 'data', 'categorical']", Scales of Measurement,seg_7,"numbers with integer and fractional parts). most statisticians are familiar with categorical (nominal and ordinal) and quantitative (interval and ratio) (or c q for short) data scales1, as the majority of statistical methods works on them. different statistical techniques are used with c q data, as discussed in subsequent chapters.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        1., 0., 1., 0., 1., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9539,  1997, 10903])","tensor([  101,  3616,  2007, 16109,  1998, 12884,  2389,  3033,  1007,  1012,
         2087, 28093,  6553,  7066,  2024,  5220,  2007,  4937, 27203,  1006,
        15087,  1998,  2030, 18979,  2140,  1007,  1998, 20155,  1006, 13483,
         1998,  6463,  1007,  1006,  2030,  1039,  1053,  2005,  2460,  1007,
         2951,  9539,  2487,  1010,  2004,  1996,  3484,  1997,  7778,  4725,
         2573,  2006,  2068,  1012,  2367,  7778,  5461,  2024,  2109,  2007,
         1039,  1053,  2951,  1010,  2004,  6936,  1999,  4745,  9159,  1012,
          102])"
20,1,"['ordinal data', 'set', 'interval', 'ordinal', 'level', 'nominal', 'data']", Scales of Measurement,seg_7,"text data are built on a nominal or ordinal set of characters [53]. one example is the binary string data that uses a sequence of 0’s and 1’s (figure 1.1). majority of text data use alphabetic characters of natural languages that are ordinal data. subsets of alphabetic characters or special characters can also be used to encode text data as in genomics and bioinformatics. audio, video, animation, and multimedia (avam) data are always compressed when stored in digital form. these use interval or ratio type of data at the basic level.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0.])","tensor([ 9539,  1997, 10903])","tensor([  101,  3793,  2951,  2024,  2328,  2006,  1037, 15087,  2030,  2030,
        18979,  2140,  2275,  1997,  3494,  1031,  5187,  1033,  1012,  2028,
         2742,  2003,  1996, 12441,  5164,  2951,  2008,  3594,  1037,  5537,
         1997,  1014,  1521,  1055,  1998,  1015,  1521,  1055,  1006,  3275,
         1015,  1012,  1015,  1007,  1012,  3484,  1997,  3793,  2951,  2224,
        12440,  2594,  3494,  1997,  3019,  4155,  2008,  2024,  2030, 18979,
         2140,  2951,  1012, 16745,  2015,  1997, 12440,  2594,  3494,  2030,
         2569,  3494,  2064,  2036,  2022,  2109,  2000,  4372, 16044,  3793,
         2951,  2004,  1999,  8991, 25524,  1998, 16012,  2378, 14192, 17592,
         1012,  5746,  1010,  2678,  1010,  7284,  1010,  1998, 14959,  1006,
        10927,  2213,  1007,  2951,  2024,  2467, 16620,  2043,  8250,  1999,
         3617,  2433,  1012,  2122,  2224, 13483,  2030,  6463,  2828,  1997,
         2951,  2012,  1996,  3937,  2504,  1012,   102])"
21,1,"['quantitative', 'categorical data', 'data', 'categorical']", Scales of Measurement,seg_7,"spatial data are stored with reference to a coordinate frame, a surface, or a map. it consists of quantitative or categorical data that are tied to unique points in the corresponding frame. one example is gis data that use the earth’s surface as the base. earth-centric data can be represented in multiple ways (using (longitude, latitude, altitude) coordinates, using gps coordinates, etc.).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9539,  1997, 10903])","tensor([  101, 13589,  2951,  2024,  8250,  2007,  4431,  2000,  1037, 13530,
         4853,  1010,  1037,  3302,  1010,  2030,  1037,  4949,  1012,  2009,
         3774,  1997, 20155,  2030,  4937, 27203,  2951,  2008,  2024,  5079,
         2000,  4310,  2685,  1999,  1996,  7978,  4853,  1012,  2028,  2742,
         2003, 21025,  2015,  2951,  2008,  2224,  1996,  3011,  1521,  1055,
         3302,  2004,  1996,  2918,  1012,  3011,  1011,  9358,  7277,  2951,
         2064,  2022,  3421,  1999,  3674,  3971,  1006,  2478,  1006, 20413,
         1010, 15250,  1010,  7998,  1007, 12093,  1010,  2478, 14658, 12093,
         1010,  4385,  1012,  1007,  1012,   102])"
22,1,"['vary', 'data', 'efficient', 'dependent', 'intervals', 'statistics', 'statistical', 'least squares']", Scales of Measurement,seg_7,"temporal data are time dependent. one common example is the stock market index, which varies continuously during the trading time. spatiotemporal data are spatial data that vary over time. examples are data generated by tornadoes, hurricanes, and other natural disasters that persist for some time, sea surface temperatures (which vary during 24-hour intervals with maximum occurring when the sun has passed over the particular sea), http connection requests generated across the world (which subsides down after midnight at particular regions), and so on. the extended data types can be structured or unstructured, compressed or uncompressed. newer data types and standards are also being devised to store data collected using special hardware devices, wireless devices, and satellites. these data are transmitted as radio waves in analog form, which are then converted into digital form. high-quality compression standards that use quantization and least squares principle are used for efficient storage of this type of data. newer applications of statistics are also emerging in extended data analysis. for instance, statistical measures computed",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 9539,  1997, 10903])","tensor([  101, 15850,  2951,  2024,  2051,  7790,  1012,  2028,  2691,  2742,
         2003,  1996,  4518,  3006,  5950,  1010,  2029,  9783, 10843,  2076,
         1996,  6202,  2051,  1012, 14690, 25185,  6633, 17822,  2389,  2951,
         2024, 13589,  2951,  2008,  8137,  2058,  2051,  1012,  4973,  2024,
         2951,  7013,  2011, 22668,  1010, 17035,  1010,  1998,  2060,  3019,
        18665,  2008, 29486,  2005,  2070,  2051,  1010,  2712,  3302,  7715,
         1006,  2029,  8137,  2076,  2484,  1011,  3178, 14025,  2007,  4555,
        10066,  2043,  1996,  3103,  2038,  2979,  2058,  1996,  3327,  2712,
         1007,  1010,  8299,  4434, 11186,  7013,  2408,  1996,  2088,  1006,
         2029,  4942,  7363,  2015,  2091,  2044,  7090,  2012,  3327,  4655,
         1007,  1010,  1998,  2061,  2006,  1012,  1996,  3668,  2951,  4127,
         2064,  2022, 14336,  2030,  4895,  3367, 26134,  1010, 16620,  2030,
         4895,  9006, 19811,  1012, 10947,  2951,  4127,  1998,  4781,  2024,
         2036,  2108, 14917,  2000,  3573,  2951,  5067,  2478,  2569,  8051,
         5733,  1010,  9949,  5733,  1010,  1998, 14549,  1012,  2122,  2951,
         2024, 11860,  2004,  2557,  5975,  1999, 11698,  2433,  1010,  2029,
         2024,  2059,  4991,  2046,  3617,  2433,  1012,  2152,  1011,  3737,
        13379,  4781,  2008,  2224, 24110,  3775,  9276,  1998,  2560, 14320,
         6958,  2024,  2109,  2005,  8114,  5527,  1997,  2023,  2828,  1997,
         2951,  1012, 10947,  5097,  1997,  6747,  2024,  2036,  8361,  1999,
         3668,  2951,  4106,  1012,  2005,  6013,  1010,  7778,  5761, 24806,
          102])"
23,1,"['data', 'information', 'temporal data', 'statistical']", Scales of Measurement,seg_7,"from summary information extracted from extended data are being used in information retrieval using latent semantic analysis [53, 294]. well-developed statistical techniques also exist for spatial and temporal data analysis.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0.])","tensor([ 9539,  1997, 10903])","tensor([  101,  2013, 12654,  2592, 15901,  2013,  3668,  2951,  2024,  2108,
         2109,  1999,  2592, 26384,  2478,  2397,  3372, 21641,  4106,  1031,
         5187,  1010, 28135,  1033,  1012,  2092,  1011,  2764,  7778,  5461,
         2036,  4839,  2005, 13589,  1998, 15850,  2951,  4106,  1012,   102])"
24,1,"['data', 'information', 'level', 'scales of measurement', 'standard', 'measurement', 'statistics', 'data collection', 'variable']", THE NOIR SCALE,seg_9,"this section briefly reviews the standard scales of measurement, which we call the noir typology. a basic understanding of this concept is helpful to students and researchers in statistics and other fields, who are faced with the data collection task. data can be collected using questionnaires, web forms, or machines or special devices. a precise granularity level is important for choosing each variable and to extract the maximum information from subjects that generate the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 1996, 15587,  4094])","tensor([  101,  2023,  2930,  4780,  4391,  1996,  3115,  9539,  1997, 10903,
         1010,  2029,  2057,  2655,  1996, 15587,  5939, 18155, 15707,  1012,
         1037,  3937,  4824,  1997,  2023,  4145,  2003, 14044,  2000,  2493,
         1998,  6950,  1999,  6747,  1998,  2060,  4249,  1010,  2040,  2024,
         4320,  2007,  1996,  2951,  3074,  4708,  1012,  2951,  2064,  2022,
         5067,  2478,  3160, 20589,  2015,  1010,  4773,  3596,  1010,  2030,
         6681,  2030,  2569,  5733,  1012,  1037, 10480, 12604,  7934,  3012,
         2504,  2003,  2590,  2005, 10549,  2169,  8023,  1998,  2000, 14817,
         1996,  4555,  2592,  2013,  5739,  2008,  9699,  1996,  2951,  1012,
          102])"
25,1,"['categories', 'set', 'factor', 'nominal', 'categorization', 'mutually exclusive', 'variable']", The Nominal Scale,seg_11,"it is a categorization of a variable into a set of mutually exclusive (distinct) values. a most common example is the human blood group = {a,b,o,ab}. there is no logical order among the blood groups. hence, we cannot say that a person with blood group “a” is better or worse than a person with blood group “b” (owing to the advances being made in the mapping and analysis of human genes, it is now possible to identify humans who are more susceptible to certain illnesses using their blood type. someday, it may be possible to logically order the blood groups conditionally on various disease categories.). they are just distinguishing labels given to persons based on a surface marker on the red blood cells. by convention, they are denoted by capital letters of the english alphabet. another common nominal variable is the rhesus factor (rh-f) coded as {+,−}. the labels + and − are chosen historically, but it could be any two distinct symbols, or numbers such as {1, 0}.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 1996, 15087,  4094])","tensor([  101,  2009,  2003,  1037,  4937, 20265, 26910,  1997,  1037,  8023,
         2046,  1037,  2275,  1997, 20271,  7262,  1006,  5664,  1007,  5300,
         1012,  1037,  2087,  2691,  2742,  2003,  1996,  2529,  2668,  2177,
         1027,  1063,  1037,  1010,  1038,  1010,  1051,  1010, 11113,  1065,
         1012,  2045,  2003,  2053, 11177,  2344,  2426,  1996,  2668,  2967,
         1012,  6516,  1010,  2057,  3685,  2360,  2008,  1037,  2711,  2007,
         2668,  2177,  1523,  1037,  1524,  2003,  2488,  2030,  4788,  2084,
         1037,  2711,  2007,  2668,  2177,  1523,  1038,  1524,  1006, 11427,
         2000,  1996,  9849,  2108,  2081,  1999,  1996, 12375,  1998,  4106,
         1997,  2529,  9165,  1010,  2009,  2003,  2085,  2825,  2000,  6709,
         4286,  2040,  2024,  2062, 18002,  2000,  3056, 24757,  2478,  2037,
         2668,  2828,  1012, 13834,  1010,  2009,  2089,  2022,  2825,  2000,
        11177,  2135,  2344,  1996,  2668,  2967, 18462,  2135,  2006,  2536,
         4295,  7236,  1012,  1007,  1012,  2027,  2024,  2074, 20852, 10873,
         2445,  2000,  5381,  2241,  2006,  1037,  3302, 12115,  2006,  1996,
         2417,  2668,  4442,  1012,  2011,  4680,  1010,  2027,  2024, 19537,
         2011,  3007,  4144,  1997,  1996,  2394, 12440,  1012,  2178,  2691,
        15087,  8023,  2003,  1996,  1054, 15689,  2271,  5387,  1006,  1054,
         2232,  1011,  1042,  1007, 22402,  2004,  1063,  1009,  1010,  1597,
         1065,  1012,  1996, 10873,  1009,  1998,  1597,  2024,  4217,  7145,
         1010,  2021,  2009,  2071,  2022,  2151,  2048,  5664,  9255,  1010,
         2030,  3616,  2107,  2004,  1063,  1015,  1010,  1014,  1065,  1012,
          102])"
26,1,"['set', 'nominal', 'mutually exclusive', 'data', 'variable']", The Nominal Scale,seg_11,"definition 1.2 a variable that takes a value among a finite set of mutually exclusive codes that have no logical order among themselves is called a nominal variable, and the data that it generates is called nominal data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 1996, 15087,  4094])","tensor([  101,  6210,  1015,  1012,  1016,  1037,  8023,  2008,  3138,  1037,
         3643,  2426,  1037, 10713,  2275,  1997, 20271,  7262,  9537,  2008,
         2031,  2053, 11177,  2344,  2426,  3209,  2003,  2170,  1037, 15087,
         8023,  1010,  1998,  1996,  2951,  2008,  2009, 19421,  2003,  2170,
        15087,  2951,  1012,   102])"
27,1,"['categories', 'dummy variables', 'goodness of fit', 'linear', 'coefficient', 'tests', 'correlation', 'nominal', 'variables', 'mutually exclusive', 'data']", The Nominal Scale,seg_11,"some nominal data are always coded numerically. examples are binary support vector machines (svms) whose class labels are always coded as (−1,+1), dummy variables in linear programming (coded as 0 or 1). decision trees (dts) and nns use any type of numeric or nonnumeric codes for nominal data. pearson’s  2-statistic based goodness of fit tests use mutually exclusive and collectively exhaustive nominal categories that are numerically coded. it uses the contingency coefficient (section 1.12, pp. 1–20) to find the correlation between two numerically coded nominal variables.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 1996, 15087,  4094])","tensor([  101,  2070, 15087,  2951,  2024,  2467, 22402, 15973,  2135,  1012,
         4973,  2024, 12441,  2490,  9207,  6681,  1006, 17917,  5244,  1007,
         3005,  2465, 10873,  2024,  2467, 22402,  2004,  1006,  1597,  2487,
         1010,  1009,  1015,  1007,  1010, 24369, 10857,  1999,  7399,  4730,
         1006, 22402,  2004,  1014,  2030,  1015,  1007,  1012,  3247,  3628,
         1006, 26718,  2015,  1007,  1998,  1050,  3619,  2224,  2151,  2828,
         1997, 16371, 25531,  2030,  2512, 19172, 22420,  9537,  2005, 15087,
         2951,  1012, 12874,  1521,  1055,  1016,  1011, 28093,  6553,  2241,
        15003,  1997,  4906,  5852,  2224, 20271,  7262,  1998, 13643, 15095,
         3512, 15087,  7236,  2008,  2024, 15973,  2135, 22402,  1012,  2009,
         3594,  1996,  9530,  3436, 11916, 19064,  1006,  2930,  1015,  1012,
         2260,  1010,  4903,  1012,  1015,  1516,  2322,  1007,  2000,  2424,
         1996, 16902,  2090,  2048, 15973,  2135, 22402, 15087, 10857,  1012,
          102])"
28,1,"['nominal', 'variables']", The Ordinal Scale,seg_13,"some of the nominal variables can be ordered using the values they take on two or more subjects. examples are the severity of an accident = {mild, severe,",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2030, 18979,  2140,  4094])","tensor([  101,  2070,  1997,  1996, 15087, 10857,  2064,  2022,  3641,  2478,
         1996,  5300,  2027,  2202,  2006,  2048,  2030,  2062,  5739,  1012,
         4973,  2024,  1996, 18976,  1997,  2019,  4926,  1027,  1063, 10256,
         1010,  5729,  1010,   102])"
29,0,[], The Ordinal Scale,seg_13,"critical, deadly}, patient-type = {child, teenager, youth, adult, senile}, and various ratings = {poor, fair, good, excellent}.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1996,  2030, 18979,  2140,  4094])","tensor([  101,  4187,  1010,  9252,  1065,  1010,  5776,  1011,  2828,  1027,
         1063,  2775,  1010, 10563,  1010,  3360,  1010,  4639,  1010, 12411,
         9463,  1065,  1010,  1998,  2536,  8599,  1027,  1063,  3532,  1010,
         4189,  1010,  2204,  1010,  6581,  1065,  1012,   102])"
30,1,"['ordinal data', 'ordinal', 'nominal', 'data', 'variable']", The Ordinal Scale,seg_13,definition 1.3 nominal data that can be logically ordered are called ordinal data and the corresponding variable is called an ordinal variable.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 1996,  2030, 18979,  2140,  4094])","tensor([  101,  6210,  1015,  1012,  1017, 15087,  2951,  2008,  2064,  2022,
        11177,  2135,  3641,  2024,  2170,  2030, 18979,  2140,  2951,  1998,
         1996,  7978,  8023,  2003,  2170,  2019,  2030, 18979,  2140,  8023,
         1012,   102])"
31,1,"['ordinal data', 'ordinal', 'data', 'variable']", The Ordinal Scale,seg_13,"one of the relational operators is used to order them. for instance, poor fair good excellent. sometimes, this ordering is done literally. an example is the seasons = {spring, summer, autumn, winter}. these seasons repeat among themselves. hence, it is called a cyclic ordinal variable. other examples are the days of the week, months of the year, letters of an alphabet, and so on, which are literally ordered ordinal data. we could categorize ordinal data as alphabetically ordered, numerically ordered, and literally ordered; each of them can be cyclically ordered if there is a natural succession among them. alphabetically ordered ordinal data use the precedence order among the letters of a natural language (e.g., english and japanese) to decide which comes first.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2030, 18979,  2140,  4094])","tensor([  101,  2028,  1997,  1996, 28771,  9224,  2003,  2109,  2000,  2344,
         2068,  1012,  2005,  6013,  1010,  3532,  4189,  2204,  6581,  1012,
         2823,  1010,  2023, 13063,  2003,  2589,  6719,  1012,  2019,  2742,
         2003,  1996,  3692,  1027,  1063,  3500,  1010,  2621,  1010,  7114,
         1010,  3467,  1065,  1012,  2122,  3692,  9377,  2426,  3209,  1012,
         6516,  1010,  2009,  2003,  2170,  1037, 23750,  2030, 18979,  2140,
         8023,  1012,  2060,  4973,  2024,  1996,  2420,  1997,  1996,  2733,
         1010,  2706,  1997,  1996,  2095,  1010,  4144,  1997,  2019, 12440,
         1010,  1998,  2061,  2006,  1010,  2029,  2024,  6719,  3641,  2030,
        18979,  2140,  2951,  1012,  2057,  2071,  4937, 20265, 25709,  2030,
        18979,  2140,  2951,  2004, 12440, 15004,  3641,  1010, 15973,  2135,
         3641,  1010,  1998,  6719,  3641,  1025,  2169,  1997,  2068,  2064,
         2022, 23750,  3973,  3641,  2065,  2045,  2003,  1037,  3019,  8338,
         2426,  2068,  1012, 12440, 15004,  3641,  2030, 18979,  2140,  2951,
         2224,  1996, 23359,  2344,  2426,  1996,  4144,  1997,  1037,  3019,
         2653,  1006,  1041,  1012,  1043,  1012,  1010,  2394,  1998,  2887,
         1007,  2000,  5630,  2029,  3310,  2034,  1012,   102])"
32,1,"['location', 'ordinal data', 'percentiles', 'ordinal', 'coefficient', 'quartiles', 'data', 'median']", The Ordinal Scale,seg_13,"numerically coded ordinal data can be compared using relational operators. hence, the median and mode are appropriate measures of location for them. we could also use the quartiles, percentiles, contingency coefficient, and so on.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 1996,  2030, 18979,  2140,  4094])","tensor([  101, 15973,  2135, 22402,  2030, 18979,  2140,  2951,  2064,  2022,
         4102,  2478, 28771,  9224,  1012,  6516,  1010,  1996,  3991,  1998,
         5549,  2024,  6413,  5761,  1997,  3295,  2005,  2068,  1012,  2057,
         2071,  2036,  2224,  1996, 24209,  8445,  9463,  2015,  1010,  3867,
         9463,  2015,  1010,  9530,  3436, 11916, 19064,  1010,  1998,  2061,
         2006,  1012,   102])"
33,1,"['ordinal data', 'functions', 'ordinal', 'data']", The Interval Scale,seg_15,some of the ordinal data can be coded as integers or functions thereof (as in date data type).,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([ 1996, 13483,  4094])","tensor([  101,  2070,  1997,  1996,  2030, 18979,  2140,  2951,  2064,  2022,
        22402,  2004, 24028,  2030,  4972, 21739,  1006,  2004,  1999,  3058,
         2951,  2828,  1007,  1012,   102])"
34,1,"['ordinal data', 'interval', 'ordinal', 'data']", The Interval Scale,seg_15,"definition 1.4 if numerically coded ordinal data have the property that the differences between any two values represent equal difference in the amount of the characteristic measured, it is called an interval data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([ 1996, 13483,  4094])","tensor([  101,  6210,  1015,  1012,  1018,  2065, 15973,  2135, 22402,  2030,
        18979,  2140,  2951,  2031,  1996,  3200,  2008,  1996,  5966,  2090,
         2151,  2048,  5300,  5050,  5020,  4489,  1999,  1996,  3815,  1997,
         1996,  8281,  7594,  1010,  2009,  2003,  2170,  2019, 13483,  2951,
         1012,   102])"
35,1,"['ordinal data', 'interval', 'ordinal', 'intervals', 'variables', 'data']", The Interval Scale,seg_15,"in other words, all ordinal data with well-defined intervals are interval data. one common example is the date data type. a characteristic property of interval data is that there is no natural zero. the natural zero need not always be the zero point. this can differ among variables. as an example, the fever is measured in fahrenheit or",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 1996, 13483,  4094])","tensor([  101,  1999,  2060,  2616,  1010,  2035,  2030, 18979,  2140,  2951,
         2007,  2092,  1011,  4225, 14025,  2024, 13483,  2951,  1012,  2028,
         2691,  2742,  2003,  1996,  3058,  2951,  2828,  1012,  1037,  8281,
         3200,  1997, 13483,  2951,  2003,  2008,  2045,  2003,  2053,  3019,
         5717,  1012,  1996,  3019,  5717,  2342,  2025,  2467,  2022,  1996,
         5717,  2391,  1012,  2023,  2064, 11234,  2426, 10857,  1012,  2004,
         2019,  2742,  1010,  1996,  9016,  2003,  7594,  1999,  6904, 28362,
        25311, 20175,  2030,   102])"
36,1,['normal'], The Interval Scale,seg_15,"∘ centigrade scales. the normal [305] human body temperature is 98.4 f. if a person has higher body temperature, we say that there is fever. thus, the origin for fever is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1996, 13483,  4094])","tensor([  101,  1599,  9358,  8004, 13662,  9539,  1012,  1996,  3671,  1031,
        20405,  1033,  2529,  2303,  4860,  2003,  5818,  1012,  1018,  1042,
         1012,  2065,  1037,  2711,  2038,  3020,  2303,  4860,  1010,  2057,
         2360,  2008,  2045,  2003,  9016,  1012,  2947,  1010,  1996,  4761,
         2005,  9016,  2003,   102])"
37,1,['limit'], The Interval Scale,seg_15,"∘ 98.4 f, as it is the cutoff limit.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 1996, 13483,  4094])","tensor([ 101, 1599, 5818, 1012, 1018, 1042, 1010, 2004, 2009, 2003, 1996, 3013,
        7245, 5787, 1012,  102])"
38,1,"['measurement', 'variables', 'data']", The Ratio Scale,seg_17,"interval data with a clear definition of zero are called ratio data. thus, both the differences between data values and their ratios are meaningful. common examples are the height and weight. if a father is 5 feet 4 inches and his sibling is 2 feet 8 inches, then the father is twice as tall as the sibling, and the same relationship holds irrespective of the unit of measurement. hence even if we change to the metric system, the same relationship will hold. other examples are the price of an article, speed of vehicles, capacity of disks or pen drives, and so on. the zero point for some ratio variables may never be materialized. for instance, consider the task of classifying a patient as overfat or underfat. this is done using the body mass index (bmi) measure.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([1996, 6463, 4094])","tensor([  101, 13483,  2951,  2007,  1037,  3154,  6210,  1997,  5717,  2024,
         2170,  6463,  2951,  1012,  2947,  1010,  2119,  1996,  5966,  2090,
         2951,  5300,  1998,  2037, 21879,  2024, 15902,  1012,  2691,  4973,
         2024,  1996,  4578,  1998,  3635,  1012,  2065,  1037,  2269,  2003,
         1019,  2519,  1018,  5282,  1998,  2010, 22941,  2003,  1016,  2519,
         1022,  5282,  1010,  2059,  1996,  2269,  2003,  3807,  2004,  4206,
         2004,  1996, 22941,  1010,  1998,  1996,  2168,  3276,  4324, 20868,
         6072,  5051, 15277,  1997,  1996,  3131,  1997, 10903,  1012,  6516,
         2130,  2065,  2057,  2689,  2000,  1996, 12046,  2291,  1010,  1996,
         2168,  3276,  2097,  2907,  1012,  2060,  4973,  2024,  1996,  3976,
         1997,  2019,  3720,  1010,  3177,  1997,  4683,  1010,  3977,  1997,
        23999,  2030,  7279,  9297,  1010,  1998,  2061,  2006,  1012,  1996,
         5717,  2391,  2005,  2070,  6463, 10857,  2089,  2196,  2022, 27075,
         1012,  2005,  6013,  1010,  5136,  1996,  4708,  1997, 26268,  2075,
         1037,  5776,  2004,  2058, 27753,  2030,  2104, 27753,  1012,  2023,
         2003,  2589,  2478,  1996,  2303,  3742,  5950,  1006,  1038,  4328,
         1007,  5468,  1012,   102])"
39,0,[], The Ratio Scale,seg_17,the bmi is defined as follows:,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([1996, 6463, 4094])","tensor([ 101, 1996, 1038, 4328, 2003, 4225, 2004, 4076, 1024,  102])"
40,1,"['vary', 'limit', 'variable']", The Ratio Scale,seg_17,"this is a ratio variable. typical cutoff limit varies from country to country, but a bmi of 25 is a common cutoff limit for adults. if the person’s bmi is above 25, we say that he or she is overfat. the bmi can never be zero (not even for newborns). this means that a zero bmi is hypothetical. as the square of a number between zero and one is less than itself, the cutoff will vary for infants shorter than 1 meter.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 6463, 4094])","tensor([  101,  2023,  2003,  1037,  6463,  8023,  1012,  5171,  3013,  7245,
         5787,  9783,  2013,  2406,  2000,  2406,  1010,  2021,  1037,  1038,
         4328,  1997,  2423,  2003,  1037,  2691,  3013,  7245,  5787,  2005,
         6001,  1012,  2065,  1996,  2711,  1521,  1055,  1038,  4328,  2003,
         2682,  2423,  1010,  2057,  2360,  2008,  2002,  2030,  2016,  2003,
         2058, 27753,  1012,  1996,  1038,  4328,  2064,  2196,  2022,  5717,
         1006,  2025,  2130,  2005, 20662,  2015,  1007,  1012,  2023,  2965,
         2008,  1037,  5717,  1038,  4328,  2003, 25613,  1012,  2004,  1996,
         2675,  1997,  1037,  2193,  2090,  5717,  1998,  2028,  2003,  2625,
         2084,  2993,  1010,  1996,  3013,  7245,  2097,  8137,  2005, 16725,
         7820,  2084,  1015,  8316,  1012,   102])"
41,1,"['set', 'random sample', 'sample', 'random', 'population', 'statistical', 'variables', 'statistical population']", POPULATION VERSUS SAMPLE,seg_19,"most statistical procedures are based on a random sample drawn from a “population” of interest. the meaning of statistical population is slightly different from the literal meaning of population. literally, it denotes a group of living organisms that are often large in size. a statistical population can have temporary or permanent existence. it can be small in size. as examples, the set of all http requests on the web on any day is a statistical population that is large in size. however, majority of http requests last at most a few seconds. the set of gps satellites in orbit is another population that is small in size, as also the set of atomic powered interplanetary spacecrafts. each element of a population is assumed to be measurable on a set of variables. these variables often follow well-defined statistical laws.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([2313, 6431, 7099])","tensor([  101,  2087,  7778,  8853,  2024,  2241,  2006,  1037,  6721,  7099,
         4567,  2013,  1037,  1523,  2313,  1524,  1997,  3037,  1012,  1996,
         3574,  1997,  7778,  2313,  2003,  3621,  2367,  2013,  1996, 18204,
         3574,  1997,  2313,  1012,  6719,  1010,  2009, 14796,  1037,  2177,
         1997,  2542, 11767,  2008,  2024,  2411,  2312,  1999,  2946,  1012,
         1037,  7778,  2313,  2064,  2031,  5741,  2030,  4568,  4598,  1012,
         2009,  2064,  2022,  2235,  1999,  2946,  1012,  2004,  4973,  1010,
         1996,  2275,  1997,  2035,  8299, 11186,  2006,  1996,  4773,  2006,
         2151,  2154,  2003,  1037,  7778,  2313,  2008,  2003,  2312,  1999,
         2946,  1012,  2174,  1010,  3484,  1997,  8299, 11186,  2197,  2012,
         2087,  1037,  2261,  3823,  1012,  1996,  2275,  1997, 14658, 14549,
         1999,  8753,  2003,  2178,  2313,  2008,  2003,  2235,  1999,  2946,
         1010,  2004,  2036,  1996,  2275,  1997,  9593,  6113,  6970, 11751,
        18219, 12076,  2015,  1012,  2169,  5783,  1997,  1037,  2313,  2003,
         5071,  2000,  2022,  2033, 28329,  2006,  1037,  2275,  1997, 10857,
         1012,  2122, 10857,  2411,  3582,  2092,  1011,  4225,  7778,  4277,
         1012,   102])"
42,1,['population'], POPULATION VERSUS SAMPLE,seg_19,definition 1.5 the totality of all elements of interest in a study is called the population.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([2313, 6431, 7099])","tensor([ 101, 6210, 1015, 1012, 1019, 1996, 2561, 3012, 1997, 2035, 3787, 1997,
        3037, 1999, 1037, 2817, 2003, 2170, 1996, 2313, 1012,  102])"
43,1,"['location', 'sample', 'population', 'statistical', 'statistical population']", POPULATION VERSUS SAMPLE,seg_19,"a statistical population may comprise animate or inanimate objects, symbols, entities, and so on. it may or may not be finite. it can be confined to a specific location or could be spread around a known or unknown locality. the first step in obtaining a sample is identifying the correct population. hence, the population is often defined unambiguously by the experimenter for each research study. the study of elements of the entire population is called a census.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([2313, 6431, 7099])","tensor([  101,  1037,  7778,  2313,  2089, 15821,  2019, 21499,  2030, 27118,
         3490,  8585,  5200,  1010,  9255,  1010, 11422,  1010,  1998,  2061,
         2006,  1012,  2009,  2089,  2030,  2089,  2025,  2022, 10713,  1012,
         2009,  2064,  2022, 12302,  2000,  1037,  3563,  3295,  2030,  2071,
         2022,  3659,  2105,  1037,  2124,  2030,  4242, 10246,  1012,  1996,
         2034,  3357,  1999, 11381,  1037,  7099,  2003, 12151,  1996,  6149,
         2313,  1012,  6516,  1010,  1996,  2313,  2003,  2411,  4225, 14477,
        14905,  8004, 28078,  2011,  1996,  7551,  2121,  2005,  2169,  2470,
         2817,  1012,  1996,  2817,  1997,  3787,  1997,  1996,  2972,  2313,
         2003,  2170,  1037,  2883,  1012,   102])"
44,1,"['vary', 'population']", POPULATION VERSUS SAMPLE,seg_19,"illustration 1 consider a study to correlate the marks obtained by students in a science subject to ownership of a computer or ipad and the use of the internet. the population in this study is the totality of all students in that subject who owns a computer or ipad with internet connectivity. this can be confined to a university, a country, a geographic region, and so on. thus, the population could vary depending on the spread of the subjects.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2313, 6431, 7099])","tensor([  101, 14614,  1015,  5136,  1037,  2817,  2000,  2522, 14343, 13806,
         1996,  6017,  4663,  2011,  2493,  1999,  1037,  2671,  3395,  2000,
         6095,  1997,  1037,  3274,  2030, 25249,  1998,  1996,  2224,  1997,
         1996,  4274,  1012,  1996,  2313,  1999,  2023,  2817,  2003,  1996,
         2561,  3012,  1997,  2035,  2493,  1999,  2008,  3395,  2040,  8617,
         1037,  3274,  2030, 25249,  2007,  4274, 20831,  1012,  2023,  2064,
         2022, 12302,  2000,  1037,  2118,  1010,  1037,  2406,  1010,  1037,
         9183,  2555,  1010,  1998,  2061,  2006,  1012,  2947,  1010,  1996,
         2313,  2071,  8137,  5834,  2006,  1996,  3659,  1997,  1996,  5739,
         1012,   102])"
45,1,"['set', 'population', 'measurements']", POPULATION VERSUS SAMPLE,seg_19,"illustration 2 toy manufacturers make toys for kids in specific age groups. in a study to find out toys that are injurious to kids in 1–5 age group, the population is the set of all toys for this age group. as measurements are taken on subjects, the true population is the totality of kids in the above-mentioned age group who use these toys.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2313, 6431, 7099])","tensor([  101, 14614,  1016,  9121,  8712,  2191, 10899,  2005,  4268,  1999,
         3563,  2287,  2967,  1012,  1999,  1037,  2817,  2000,  2424,  2041,
        10899,  2008,  2024,  1999,  9103,  9488,  2271,  2000,  4268,  1999,
         1015,  1516,  1019,  2287,  2177,  1010,  1996,  2313,  2003,  1996,
         2275,  1997,  2035, 10899,  2005,  2023,  2287,  2177,  1012,  2004,
        11702,  2024,  2579,  2006,  5739,  1010,  1996,  2995,  2313,  2003,
         1996,  2561,  3012,  1997,  4268,  1999,  1996,  2682,  1011,  3855,
         2287,  2177,  2040,  2224,  2122, 10899,  1012,   102])"
46,1,"['random sample', 'sample', 'random', 'population', 'data', 'representative']", POPULATION VERSUS SAMPLE,seg_19,"definition 1.6 a random sample is a true representative subset of a population, which is much smaller in size and each element of which generates recordable and meaningful data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2313, 6431, 7099])","tensor([  101,  6210,  1015,  1012,  1020,  1037,  6721,  7099,  2003,  1037,
         2995,  4387, 16745,  1997,  1037,  2313,  1010,  2029,  2003,  2172,
         3760,  1999,  2946,  1998,  2169,  5783,  1997,  2029, 19421,  2501,
         3085,  1998, 15902,  2951,  1012,   102])"
47,1,"['mean', 'with replacement', 'without replacement', 'populations', 'random sample', 'population', 'sample', 'method', 'sampling', 'random', 'results', 'replacement', 'representative']", POPULATION VERSUS SAMPLE,seg_19,"by the true representative, we mean that each and every element of the population has an equal chance of being included in our random sample. if the population is of finite size, sampling with replacement will ensure that the chance of drawing a sample from the population remains the same. the method in which a sampled item from a population is not replaced (back into the population) before the next item is drawn is called sampling without replacement. this does not matter for infinite populations. if the population size is finite and small, sampling without replacement results in a nonrandom sample.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([2313, 6431, 7099])","tensor([  101,  2011,  1996,  2995,  4387,  1010,  2057,  2812,  2008,  2169,
         1998,  2296,  5783,  1997,  1996,  2313,  2038,  2019,  5020,  3382,
         1997,  2108,  2443,  1999,  2256,  6721,  7099,  1012,  2065,  1996,
         2313,  2003,  1997, 10713,  2946,  1010, 16227,  2007,  6110,  2097,
         5676,  2008,  1996,  3382,  1997,  5059,  1037,  7099,  2013,  1996,
         2313,  3464,  1996,  2168,  1012,  1996,  4118,  1999,  2029,  1037,
        18925,  8875,  2013,  1037,  2313,  2003,  2025,  2999,  1006,  2067,
         2046,  1996,  2313,  1007,  2077,  1996,  2279,  8875,  2003,  4567,
         2003,  2170, 16227,  2302,  6110,  1012,  2023,  2515,  2025,  3043,
         2005, 10709,  7080,  1012,  2065,  1996,  2313,  2946,  2003, 10713,
         1998,  2235,  1010, 16227,  2302,  6110,  3463,  1999,  1037,  2512,
        13033,  5358,  7099,  1012,   102])"
48,1,"['without replacement', 'random sample', 'sample', 'random', 'sampling', 'replacement']", POPULATION VERSUS SAMPLE,seg_19,"illustration 3 a foundation offered five scholarships to students in a college who secured distinction in their final exam. if there are 25 eligible students, we need to select a random sample of five students from among them. to preclude the possibility of a selected student receiving two scholarships, we need to do a sampling without replacement.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([2313, 6431, 7099])","tensor([  101, 14614,  1017,  1037,  3192,  3253,  2274, 15691,  2000,  2493,
         1999,  1037,  2267,  2040,  7119,  7835,  1999,  2037,  2345, 11360,
         1012,  2065,  2045,  2024,  2423,  7792,  2493,  1010,  2057,  2342,
         2000,  7276,  1037,  6721,  7099,  1997,  2274,  2493,  2013,  2426,
         2068,  1012,  2000,  3653, 20464, 12672,  1996,  6061,  1997,  1037,
         3479,  3076,  4909,  2048, 15691,  1010,  2057,  2342,  2000,  2079,
         1037, 16227,  2302,  6110,  1012,   102])"
49,1,"['population', 'sampling distribution', 'asymptotic', 'populations', 'sampling', 'statistics', 'samples', 'statistical', 'data', 'random sample', 'results', 'parameters', 'stratified sampling', 'estimates', 'sample', 'random', 'sample size', 'distribution']", POPULATION VERSUS SAMPLE,seg_19,"random samples are much easier to work with because they are much smaller in size. owing to some asymptotic properties of sample estimates, we often restrict the random sample size between 30 and a few hundred. bigger sample sizes give better results in some statistical procedures. a researcher decides upon an optimal sample size using the cost of sampling an item, population characteristics, number of unknown parameters, sampling distribution of statistics, and so on. for instance, if the population has distinct data clusters, a technique called stratified sampling can be used to select a random sample from each cluster based on the cluster size. sampling of elements from populations is an extensively studied field called sampling theory in statistics.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([2313, 6431, 7099])","tensor([  101,  6721,  8168,  2024,  2172,  6082,  2000,  2147,  2007,  2138,
         2027,  2024,  2172,  3760,  1999,  2946,  1012, 11427,  2000,  2070,
         2004, 24335, 13876, 20214,  5144,  1997,  7099, 10035,  1010,  2057,
         2411, 21573,  1996,  6721,  7099,  2946,  2090,  2382,  1998,  1037,
         2261,  3634,  1012,  7046,  7099, 10826,  2507,  2488,  3463,  1999,
         2070,  7778,  8853,  1012,  1037, 10753,  7288,  2588,  2019, 15502,
         7099,  2946,  2478,  1996,  3465,  1997, 16227,  2019,  8875,  1010,
         2313,  6459,  1010,  2193,  1997,  4242, 11709,  1010, 16227,  4353,
         1997,  6747,  1010,  1998,  2061,  2006,  1012,  2005,  6013,  1010,
         2065,  1996,  2313,  2038,  5664,  2951, 12906,  1010,  1037,  6028,
         2170,  2358,  8609,  7810, 16227,  2064,  2022,  2109,  2000,  7276,
         1037,  6721,  7099,  2013,  2169,  9324,  2241,  2006,  1996,  9324,
         2946,  1012, 16227,  1997,  3787,  2013,  7080,  2003,  2019,  8077,
         3273,  2492,  2170, 16227,  3399,  1999,  6747,  1012,   102])"
50,1,"['parameter', 'population']", Parameter Versus Statistic,seg_21,a parameter describes the population of interest. a population can have zero or more,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  1037, 16381,  5577,  1996,  2313,  1997,  3037,  1012,  1037,
         2313,  2064,  2031,  5717,  2030,  2062,   102])"
51,1,"['cauchy', 'cauchy distribution', 'distribution', 'parameters']", Parameter Versus Statistic,seg_21,1 1 parameters. consider the cauchy distribution f (x) =   (1+x2) for −∞   x   ∞. it has,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  1015,  1015, 11709,  1012,  5136,  1996,  6187, 10875,  2100,
         4353,  1042,  1006,  1060,  1007,  1027,  1006,  1015,  1009,  1060,
         2475,  1007,  2005,  1597, 30128,  1060,  1601,  1012,  2009,  2038,
          102])"
52,1,"['range', 'poisson', 'population', 'distribution', 'poisson distribution', 'parameters']", Parameter Versus Statistic,seg_21,"no parameters, although it describes a population2. parameters are values that characterize the population. they may be a part of the functional form or the range of values assumed. for instance, a left-truncated poisson distribution with truncation point k has the functional form",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  2053, 11709,  1010,  2348,  2009,  5577,  1037,  2313,  2475,
         1012, 11709,  2024,  5300,  2008,  2839,  4697,  1996,  2313,  1012,
         2027,  2089,  2022,  1037,  2112,  1997,  1996,  8360,  2433,  2030,
         1996,  2846,  1997,  5300,  5071,  1012,  2005,  6013,  1010,  1037,
         2187,  1011, 25449, 13433, 24077,  4353,  2007, 19817,  4609, 10719,
         2391,  1047,  2038,  1996,  8360,  2433,   102])"
53,1,"['location', 'parameter', 'range', 'set', 'functions', 'degrees of freedom', 'poisson', 'population', 'distribution', 'parameters']", Parameter Versus Statistic,seg_21,"where p(j) = e−  j∕j! here k is a range parameter. the location (central value) and spread (scale) are the most important characteristics of a population. they may either be described as functions of the same set of parameters (as in  2 distribution with   = n,  2 = 2n, where n is the degrees of freedom; or the poisson law with   =  2 =  )",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  2073,  1052,  1006,  1046,  1007,  1027,  1041, 22543,   100,
          999,  2182,  1047,  2003,  1037,  2846, 16381,  1012,  1996,  3295,
         1006,  2430,  3643,  1007,  1998,  3659,  1006,  4094,  1007,  2024,
         1996,  2087,  2590,  6459,  1997,  1037,  2313,  1012,  2027,  2089,
         2593,  2022,  2649,  2004,  4972,  1997,  1996,  2168,  2275,  1997,
        11709,  1006,  2004,  1999,  1016,  4353,  2007,  1027,  1050,  1010,
         1016,  1027,  1016,  2078,  1010,  2073,  1050,  2003,  1996,  5445,
         1997,  4071,  1025,  2030,  1996, 13433, 24077,  2375,  2007,  1027,
         1016,  1027,  1007,   102])"
54,1,"['mean', 'variance', 'normal', 'parameters']", Parameter Versus Statistic,seg_21,"or by separate parameters as in the univariate normal law n( ,  2) with mean   and variance  2; the laplace law which has pdf",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  2030,  2011,  3584, 11709,  2004,  1999,  1996,  4895, 28739,
        13143,  3671,  2375,  1050,  1006,  1010,  1016,  1007,  2007,  2812,
         1998, 23284,  1016,  1025,  1996,  5001, 19217,  2375,  2029,  2038,
        11135,   102])"
55,1,['logistic'], Parameter Versus Statistic,seg_21,with   = a and  2 = 2b2 or the logistic law with cdf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0.])","tensor([16381,  6431, 28093,  6553])","tensor([ 101, 2007, 1027, 1037, 1998, 1016, 1027, 1016, 2497, 2475, 2030, 1996,
        8833, 6553, 2375, 2007, 3729, 2546,  102])"
56,1,"['beta distribution', 'mean', 'variance', 'functions', 'distributions', 'distribution', 'parameters', 'noncentral', 'asymmetric']", Parameter Versus Statistic,seg_21,"for several distributions, the mean and variance are complex functions of the parameters. as examples, the bino(n, p) distribution has mean = np and variance = ∗ q = npq. similarly, the noncentral chi-square distribution has mean = n + and variance 2 = 2( + ) = 2n + 4 . the shape of the distribution can be very sensitive to the parameters. one example is the beta distribution beta-i(p, q) with mean = p∕(p + q), which is asymmetric in the parameters p and q and variance",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  2005,  2195, 20611,  1010,  1996,  2812,  1998, 23284,  2024,
         3375,  4972,  1997,  1996, 11709,  1012,  2004,  4973,  1010,  1996,
         8026,  2080,  1006,  1050,  1010,  1052,  1007,  4353,  2038,  2812,
         1027, 27937,  1998, 23284,  1027,  1598,  1053,  1027, 27937,  4160,
         1012,  6660,  1010,  1996,  2512, 13013,  7941,  9610,  1011,  2675,
         4353,  2038,  2812,  1027,  1050,  1009,  1998, 23284,  1016,  1027,
         1016,  1006,  1009,  1007,  1027,  1016,  2078,  1009,  1018,  1012,
         1996,  4338,  1997,  1996,  4353,  2064,  2022,  2200,  7591,  2000,
         1996, 11709,  1012,  2028,  2742,  2003,  1996,  8247,  4353,  8247,
         1011,  1045,  1006,  1052,  1010,  1053,  1007,  2007,  2812,  1027,
          100,  1006,  1052,  1009,  1053,  1007,  1010,  2029,  2003,  2004,
        24335, 12589,  1999,  1996, 11709,  1052,  1998,  1053,  1998, 23284,
          102])"
57,1,"['logarithmic distribution', 'symmetric', 'distribution']", Parameter Versus Statistic,seg_21,"which is symmetric in p and q. if p is increased or decreased by keeping q fixed, the distribution changes shape rapidly. the logarithmic distribution",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  2029,  2003, 19490,  1999,  1052,  1998,  1053,  1012,  2065,
         1052,  2003,  3445,  2030, 10548,  2011,  4363,  1053,  4964,  1010,
         1996,  4353,  3431,  4338,  5901,  1012,  1996,  8833,  8486,  2705,
         7712,  4353,   102])"
58,0,[], Parameter Versus Statistic,seg_21,1 q − 1). this discussion shows that various parame-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  1015,  1053,  1597,  1015,  1007,  1012,  2023,  6594,  3065,
         2008,  2536, 11498,  4168,  1011,   102])"
59,1,"['location', 'mean', 'parameter', 'dependence', 'variance', 'functions', 'convergence', 'distributions', 'moments', 'parameters', 'standard', 'asymptotic']", Parameter Versus Statistic,seg_21,"ters contribute differently to the mean and variance in particular and to other moments in general. this complexity can be used as a measure of the parameter dependence on the shape of distributions. this also affects the asymptotic convergence behavior of various distributions to other standard distributions. when there exist three or more parameters, they may all contribute as functions to the location and scale. for",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101, 28774,  2015,  9002, 11543,  2000,  1996,  2812,  1998, 23284,
         1999,  3327,  1998,  2000,  2060,  5312,  1999,  2236,  1012,  2023,
        11619,  2064,  2022,  2109,  2004,  1037,  5468,  1997,  1996, 16381,
        18642,  2006,  1996,  4338,  1997, 20611,  1012,  2023,  2036, 13531,
         1996,  2004, 24335, 13876, 20214, 19143,  5248,  1997,  2536, 20611,
         2000,  2060,  3115, 20611,  1012,  2043,  2045,  4839,  2093,  2030,
         2062, 11709,  1010,  2027,  2089,  2035,  9002,  2004,  4972,  2000,
         1996,  3295,  1998,  4094,  1012,  2005,   102])"
60,1,"['mean', 'noncentral f', 'distribution', 'f distribution', 'noncentral']", Parameter Versus Statistic,seg_21,"n m+  example, the noncentral f distribution ncf(m, n,  ) has mean   = , for n   2,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  1050,  1049,  1009,  2742,  1010,  1996,  2512, 13013,  7941,
         1042,  4353, 13316,  2546,  1006,  1049,  1010,  1050,  1010,  1007,
         2038,  2812,  1027,  1010,  2005,  1050,  1016,  1010,   102])"
61,1,"['linear', 'estimated', 'degrees of freedom', 'nonlinear', 'sample', 'population', 'parameters']", Parameter Versus Statistic,seg_21,"n−2 m which is linear in , and nonlinear in the degrees of freedom parameters. if the population parameters are unknown, they are estimated from a sample drawn from that population.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1.,
        0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  1050, 22543,  2475,  1049,  2029,  2003,  7399,  1999,  1010,
         1998, 27400,  1999,  1996,  5445,  1997,  4071, 11709,  1012,  2065,
         1996,  2313, 11709,  2024,  4242,  1010,  2027,  2024,  4358,  2013,
         1037,  7099,  4567,  2013,  2008,  2313,  1012,   102])"
62,1,"['function', 'sample', 'statistic']", Parameter Versus Statistic,seg_21,definition 1.7 a well-defined function of the sample values is called a statistic.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  6210,  1015,  1012,  1021,  1037,  2092,  1011,  4225,  3853,
         1997,  1996,  7099,  5300,  2003,  2170,  1037, 28093,  6553,  1012,
          102])"
63,1,"['mean', 'function', 'data', 'functions', 'estimated', 'random sample', 'sample', 'random', 'sample size', 'integer part', 'population', 'parameters', 'statistic', 'sample mean']", Parameter Versus Statistic,seg_21,"by our definition, a statistic does not involve the unknown population parameters, but it could involve the sample size or any function of it. for example, if x is a random sample of size n from a population with sample mean x, then n − x is a statistic as it involves the sample values and sample size. the unknown population parameters are estimated using a statistic (or a function of it, which is also a statistic if it does not involve unknowns). we have used the word “well-defined function” in our definition of statistic. this includes not only arithmetic and other mathematical functions but also special functions such as minimum and maximum of sample values and integer part of data values (ceil and floor functions in computer programming).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([16381,  6431, 28093,  6553])","tensor([  101,  2011,  2256,  6210,  1010,  1037, 28093,  6553,  2515,  2025,
         9125,  1996,  4242,  2313, 11709,  1010,  2021,  2009,  2071,  9125,
         1996,  7099,  2946,  2030,  2151,  3853,  1997,  2009,  1012,  2005,
         2742,  1010,  2065,  1060,  2003,  1037,  6721,  7099,  1997,  2946,
         1050,  2013,  1037,  2313,  2007,  7099,  2812,  1060,  1010,  2059,
         1050,  1597,  1060,  2003,  1037, 28093,  6553,  2004,  2009,  7336,
         1996,  7099,  5300,  1998,  7099,  2946,  1012,  1996,  4242,  2313,
        11709,  2024,  4358,  2478,  1037, 28093,  6553,  1006,  2030,  1037,
         3853,  1997,  2009,  1010,  2029,  2003,  2036,  1037, 28093,  6553,
         2065,  2009,  2515,  2025,  9125,  4242,  2015,  1007,  1012,  2057,
         2031,  2109,  1996,  2773,  1523,  2092,  1011,  4225,  3853,  1524,
         1999,  2256,  6210,  1997, 28093,  6553,  1012,  2023,  2950,  2025,
         2069, 20204,  1998,  2060,  8045,  4972,  2021,  2036,  2569,  4972,
         2107,  2004,  6263,  1998,  4555,  1997,  7099,  5300,  1998, 16109,
         2112,  1997,  2951,  5300,  1006,  8292,  4014,  1998,  2723,  4972,
         1999,  3274,  4730,  1007,  1012,   102])"
64,1,"['hypergeometric', 'negative binomial', 'distributions', 'combination', 'statistical', 'binomial']", COMBINATION NOTATION,seg_23,"the combination notation is used in several statistical distributions. examples include the binomial, negative binomial, hypergeometric, and beta-binomial distributions. we",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        1., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0.])","tensor([ 5257, 14869])","tensor([  101,  1996,  5257, 14869,  2003,  2109,  1999,  2195,  7778, 20611,
         1012,  4973,  2421,  1996,  8026, 20936,  2389,  1010,  4997,  8026,
        20936,  2389,  1010, 23760,  3351, 28993,  1010,  1998,  8247,  1011,
         8026, 20936,  2389, 20611,  1012,  2057,   102])"
65,0,[], COMBINATION NOTATION,seg_23,"x), which is read as “n choose x.” other notations include ncx and",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5257, 14869])","tensor([  101,  1060,  1007,  1010,  2029,  2003,  3191,  2004,  1523,  1050,
         5454,  1060,  1012,  1524,  2060, 14869,  2015,  2421, 13316,  2595,
         1998,   102])"
66,1,['combination'], COMBINATION NOTATION,seg_23,"c(n, x). this represents the combination of n things taken x at a time. symbolically,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5257, 14869])","tensor([  101,  1039,  1006,  1050,  1010,  1060,  1007,  1012,  2023,  5836,
         1996,  5257,  1997,  1050,  2477,  2579,  1060,  2012,  1037,  2051,
         1012, 12613,  3973,  1010,   102])"
67,0,[], COMBINATION NOTATION,seg_23,"where n! is pronounced either as “n factorial” or as “factorial n” and abbreviated as “fact n.” by convention 0! = 1! = 1. as the numerator and denominator involve products of integers, it can be evaluated in multiple ways. write the n! in the numerator as n ∗ (n − 1)!, and the x! in the denominator as x ∗ (x − 1)! to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 5257, 14869])","tensor([  101,  2073,  1050,   999,  2003,  8793,  2593,  2004,  1523,  1050,
         5387,  4818,  1524,  2030,  2004,  1523,  5387,  4818,  1050,  1524,
         1998, 12066,  2004,  1523,  2755,  1050,  1012,  1524,  2011,  4680,
         1014,   999,  1027,  1015,   999,  1027,  1015,  1012,  2004,  1996,
        16371,  5017,  8844,  1998,  7939, 20936, 27413,  9125,  3688,  1997,
        24028,  1010,  2009,  2064,  2022, 16330,  1999,  3674,  3971,  1012,
         4339,  1996,  1050,   999,  1999,  1996, 16371,  5017,  8844,  2004,
         1050,  1598,  1006,  1050,  1597,  1015,  1007,   999,  1010,  1998,
         1996,  1060,   999,  1999,  1996,  7939, 20936, 27413,  2004,  1060,
         1598,  1006,  1060,  1597,  1015,  1007,   999,  2000,  2131,   102])"
68,0,['n'], COMBINATION NOTATION,seg_23,"as it represents the number of ways to select x items out of n distinct items, ( n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5257, 14869])","tensor([ 101, 2004, 2009, 5836, 1996, 2193, 1997, 3971, 2000, 7276, 1060, 5167,
        2041, 1997, 1050, 5664, 5167, 1010, 1006, 1050,  102])"
69,0,['n'], COMBINATION NOTATION,seg_23,x) is always an integer when n and x are integers. formula (1.8) can result in approx-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 5257, 14869])","tensor([  101,  1060,  1007,  2003,  2467,  2019, 16109,  2043,  1050,  1998,
         1060,  2024, 24028,  1012,  5675,  1006,  1015,  1012,  1022,  1007,
         2064,  2765,  1999, 22480,  1011,   102])"
70,0,[], COMBINATION NOTATION,seg_23,"imations (for example, ( 3",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5257, 14869])","tensor([  101, 10047, 10708,  1006,  2005,  2742,  1010,  1006,  1017,   102])"
71,0,[], COMBINATION NOTATION,seg_23,owing to floating point truncations (5/3 is truncated to 1.6666). a solution is to use pascal’s identity,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5257, 14869])","tensor([  101, 11427,  2000,  8274,  2391, 19817,  4609, 10719,  2015,  1006,
         1019,  1013,  1017,  2003, 25449,  2000,  1015,  1012,  5764, 28756,
         1007,  1012,  1037,  5576,  2003,  2000,  2224, 17878,  1521,  1055,
         4767,   102])"
72,1,"['hypergeometric', 'hypergeometric distributions', 'negative binomial', 'distributions', 'binomial']", COMBINATION NOTATION,seg_23,"as this involves only addition, it will always give an integer as the final result. a related notation used in negative binomial and negative hypergeometric distributions",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 5257, 14869])","tensor([  101,  2004,  2023,  7336,  2069,  2804,  1010,  2009,  2097,  2467,
         2507,  2019, 16109,  2004,  1996,  2345,  2765,  1012,  1037,  3141,
        14869,  2109,  1999,  4997,  8026, 20936,  2389,  1998,  4997, 23760,
         3351, 28993, 20611,   102])"
73,1,"['regression', 'expectations', 'functions', 'design', 'experiments', 'continuous distributions', 'design of experiments', 'sampling', 'statistics', 'contingency tables', 'discrete', 'continuous', 'sampling distributions', 'probability distributions', 'order statistics', 'probability', 'random variables', 'tables', 'distributions', 'sample', 'random', 'variables', 'summation', 'numerical']", SUMMATION NOTATION,seg_25,"the ubiquitous ∑ notation is extremely useful to express functions of sample values, random variables, complicated sequences, series, and so on in concise form. this section introduces several summation notations that are extensively used in the present and subsequent chapters. a good grasp of various summation notations is essential for students and practitioners of statistics and for people in many other disciplines such as algorithmics, numerical methods, digital signal processing, and parallel computing. it is extensively used in probability distributions (more so in discrete than in continuous distributions), sampling distributions, mathematical probability and expectations, generating functions, design of experiments, regression and correlation, contingency tables, and order statistics, to name a few. there are many variants to the summation notation. all of them starts with the greek capital symbol ∑",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7680, 28649, 14869])","tensor([  101,  1996, 28498,   100, 14869,  2003,  5186,  6179,  2000,  4671,
         4972,  1997,  7099,  5300,  1010,  6721, 10857,  1010,  8552, 10071,
         1010,  2186,  1010,  1998,  2061,  2006,  1999,  9530, 18380,  2433,
         1012,  2023,  2930, 13999,  2195,  7680, 28649, 14869,  2015,  2008,
         2024,  8077,  2109,  1999,  1996,  2556,  1998,  4745,  9159,  1012,
         1037,  2204, 10616,  1997,  2536,  7680, 28649, 14869,  2015,  2003,
         6827,  2005,  2493,  1998, 14617,  1997,  6747,  1998,  2005,  2111,
         1999,  2116,  2060, 12736,  2107,  2004,  9896,  6558,  1010, 15973,
         4725,  1010,  3617,  4742,  6364,  1010,  1998,  5903,  9798,  1012,
         2009,  2003,  8077,  2109,  1999,  9723, 20611,  1006,  2062,  2061,
         1999, 16246,  2084,  1999,  7142, 20611,  1007,  1010, 16227, 20611,
         1010,  8045,  9723,  1998, 10908,  1010, 11717,  4972,  1010,  2640,
         1997,  7885,  1010, 26237,  1998, 16902,  1010,  9530,  3436, 11916,
         7251,  1010,  1998,  2344,  6747,  1010,  2000,  2171,  1037,  2261,
         1012,  2045,  2024,  2116, 10176,  2000,  1996,  7680, 28649, 14869,
         1012,  2035,  1997,  2068,  4627,  2007,  1996,  3306,  3007,  6454,
          100,   102])"
74,1,"['range', 'associated', 'variable']", SUMMATION NOTATION,seg_25,"(which is read as sum). each ∑ has an associated index variable (indexvar)3 and has an implied meaning of an iteration or enumeration of the expression that follows it (summand) over the range of the implicit indexvar (which is assumed to be an integer and is usually denoted by i, j, k, p, q, or r with or without subscripts). thus, all of the following expressions are equivalent:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7680, 28649, 14869])","tensor([  101,  1006,  2029,  2003,  3191,  2004,  7680,  1007,  1012,  2169,
          100,  2038,  2019,  3378,  5950,  8023,  1006,  5950, 10755,  1007,
         1017,  1998,  2038,  2019, 13339,  3574,  1997,  2019, 27758,  2030,
         4372, 17897,  8156,  1997,  1996,  3670,  2008,  4076,  2009,  1006,
         7680,  2386,  2094,  1007,  2058,  1996,  2846,  1997,  1996, 24655,
         5950, 10755,  1006,  2029,  2003,  5071,  2000,  2022,  2019, 16109,
         1998,  2003,  2788, 19537,  2011,  1045,  1010,  1046,  1010,  1047,
         1010,  1052,  1010,  1053,  1010,  2030,  1054,  2007,  2030,  2302,
         4942, 22483,  2015,  1007,  1012,  2947,  1010,  2035,  1997,  1996,
         2206, 11423,  2024,  5662,  1024,   102])"
75,1,['set'], SUMMATION NOTATION,seg_25,"the indexvar could also be explicit when the set notation is used for iteration. the subscript of ∑ denotes the initial values, conditions, or initializations, and the superscript denotes the terminal (final) values or conditions. the subscript, superscript, or both can also be missing, as in the above-mentioned example, if they can be inferred from the context.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7680, 28649, 14869])","tensor([  101,  1996,  5950, 10755,  2071,  2036,  2022, 13216,  2043,  1996,
         2275, 14869,  2003,  2109,  2005, 27758,  1012,  1996,  4942, 22483,
         1997,   100, 14796,  1996,  3988,  5300,  1010,  3785,  1010,  2030,
         3988, 22318,  1010,  1998,  1996,  3565, 22483, 14796,  1996,  5536,
         1006,  2345,  1007,  5300,  2030,  3785,  1012,  1996,  4942, 22483,
         1010,  3565, 22483,  1010,  2030,  2119,  2064,  2036,  2022,  4394,
         1010,  2004,  1999,  1996,  2682,  1011,  3855,  2742,  1010,  2065,
         2027,  2064,  2022,  1999,  7512,  5596,  2013,  1996,  6123,  1012,
          102])"
76,1,"['function', 'probabilities', 'varying', 'binomial']", SUMMATION NOTATION,seg_25,"in the great majority of applications, the indexvar varies from low values to high values. however, there are a few applications in which this can either be in the reverse (high to low) or two-way varying. as an example of reverse summing, consider the problem of accumulating binomial right-tail probabilities (survival function) until it accumulates to say c. this is mathematically expressed as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7680, 28649, 14869])","tensor([  101,  1999,  1996,  2307,  3484,  1997,  5097,  1010,  1996,  5950,
        10755,  9783,  2013,  2659,  5300,  2000,  2152,  5300,  1012,  2174,
         1010,  2045,  2024,  1037,  2261,  5097,  1999,  2029,  2023,  2064,
         2593,  2022,  1999,  1996,  7901,  1006,  2152,  2000,  2659,  1007,
         2030,  2048,  1011,  2126,  9671,  1012,  2004,  2019,  2742,  1997,
         7901,  7680,  6562,  1010,  5136,  1996,  3291,  1997, 16222,  2819,
        10924,  8026, 20936,  2389,  2157,  1011,  5725,  4013,  3676, 14680,
         1006,  7691,  3853,  1007,  2127,  2009, 27598,  2015,  2000,  2360,
         1039,  1012,  2023,  2003,  8045,  2135,  5228,  2004,   102])"
77,1,"['incomplete beta', 'precision', 'function', 'probabilities', 'beta function', 'distributions', 'poisson', 'incomplete beta function', 'memory', 'distribution', 'poisson distribution', 'noncentral beta', 'memory overflow', 'summation', 'error', 'noncentral']", SUMMATION NOTATION,seg_25,"the indexvar here is chosen as x to indicate that we are summing probabilities. this can be easily accumulated by starting the summation at x = n and iterating backward (x = n − 1, x = n − 2, · · · , x = k) until the desired sum is accumulated (this can also be expressed in terms of the incomplete beta function; see page 6–34). similarly, infinite poisson-weighted distributions such as noncentral  2 and noncentral beta need to evaluate the poisson weights e−  x∕x! for large   values. if the computations are carried out in single precision arithmetic, the first poisson term e−  0∕0! = e−  will result in a memory underflow (a machine will misinterpret it as zero) for     104 and a memory overflow for     183.805 (see [47], pp. 231–232 for details). this leads to error propagation, as each subsequent term is evaluated iteratively. as the mode of the poisson distribution is  , we could start the computations at   and iterate in both directions [49, 51, 52]. this will allow one to compute such pdf and cdf for much higher   values. alternatively, we could use double precision arithmetic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 7680, 28649, 14869])","tensor([  101,  1996,  5950, 10755,  2182,  2003,  4217,  2004,  1060,  2000,
         5769,  2008,  2057,  2024,  7680,  6562,  4013,  3676, 14680,  1012,
         2023,  2064,  2022,  4089, 14830,  2011,  3225,  1996,  7680, 28649,
         2012,  1060,  1027,  1050,  1998,  2009,  6906,  3436,  8848,  1006,
         1060,  1027,  1050,  1597,  1015,  1010,  1060,  1027,  1050,  1597,
         1016,  1010,  1087,  1087,  1087,  1010,  1060,  1027,  1047,  1007,
         2127,  1996,  9059,  7680,  2003, 14830,  1006,  2023,  2064,  2036,
         2022,  5228,  1999,  3408,  1997,  1996, 12958,  8247,  3853,  1025,
         2156,  3931,  1020,  1516,  4090,  1007,  1012,  6660,  1010, 10709,
        13433, 24077,  1011, 18215, 20611,  2107,  2004,  2512, 13013,  7941,
         1016,  1998,  2512, 13013,  7941,  8247,  2342,  2000, 16157,  1996,
        13433, 24077, 15871,  1041, 22543,   100,   999,  2005,  2312,  5300,
         1012,  2065,  1996, 22334,  2015,  2024,  3344,  2041,  1999,  2309,
        11718, 20204,  1010,  1996,  2034, 13433, 24077,  2744,  1041, 22543,
          100,   999,  1027,  1041, 22543,  2097,  2765,  1999,  1037,  3638,
         2104, 12314,  1006,  1037,  3698,  2097, 28616, 18447,  2121, 28139,
         2102,  2009,  2004,  5717,  1007,  2005,  9645,  1998,  1037,  3638,
         2058, 12314,  2005, 18677,  1012,  3770,  2629,  1006,  2156,  1031,
         4700,  1033,  1010,  4903,  1012, 20304,  1516, 20666,  2005,  4751,
         1007,  1012,  2023,  5260,  2000,  7561, 20594,  1010,  2004,  2169,
         4745,  2744,  2003, 16330,  2009, 25284,  2135,  1012,  2004,  1996,
         5549,  1997,  1996, 13433, 24077,  4353,  2003,  1010,  2057,  2071,
         2707,  1996, 22334,  2015,  2012,  1998,  2009, 22139,  1999,  2119,
         7826,  1031,  4749,  1010,  4868,  1010,  4720,  1033,  1012,  2023,
         2097,  3499,  2028,  2000, 24134,  2107, 11135,  1998,  3729,  2546,
         2005,  2172,  3020,  5300,  1012, 14084,  1010,  2057,  2071,  2224,
         3313, 11718, 20204,  1012,   102])"
78,1,"['nested sum', 'variables']", Nested Sums,seg_27,"nested sums and iterations are usually denoted by multiple∑ symbols4. for instance, ∑j∑k denotes a nested sum over two index variables j and k. when multiple ∑ occur",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  9089,  2098, 20571,  1998, 27758,  2015,  2024,  2788, 19537,
         2011,   100,  9255,  2549,  1012,  2005,  6013,  1010,   100, 14796,
         1037,  9089,  2098,  7680,  2058,  2048,  5950, 10857,  1046,  1998,
         1047,  1012,  2043,  3674,   100,  5258,   102])"
79,1,"['statistic', 'process']", Nested Sums,seg_27,"as a block, they are evaluated from right to left. in other words, the leftmost indexvar is fixed and right indexvars are varied in the summand until they are complete, thereby accumulating the partialsum. then, the leftmost indexvar is incremented using the step size, and the process is continued. one common example is pearson’s 2 statistic:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  2004,  1037,  3796,  1010,  2027,  2024, 16330,  2013,  2157,
         2000,  2187,  1012,  1999,  2060,  2616,  1010,  1996,  2187, 11800,
         5950, 10755,  2003,  4964,  1998,  2157,  5950, 10755,  2015,  2024,
         9426,  1999,  1996,  7680,  2386,  2094,  2127,  2027,  2024,  3143,
         1010,  8558, 16222,  2819, 10924,  1996,  7704, 17421,  1012,  2059,
         1010,  1996,  2187, 11800,  5950, 10755,  2003,  4297, 28578, 14088,
         2478,  1996,  3357,  2946,  1010,  1998,  1996,  2832,  2003,  2506,
         1012,  2028,  2691,  2742,  2003, 12874,  1521,  1055,  1016, 28093,
         6553,  1024,   102])"
80,1,"['dummy variables', 'range', 'frequencies', 'symmetric', 'set', 'table', 'nested sums', 'variables', 'summation', 'variable']", Nested Sums,seg_27,"where ojk are the observed and ejk are the expected frequencies in an r × c table. the order in which nested sums are found is sometimes important (as in matrix multiplications). in the above-mentioned sum, we iterate first over the (inner) k variable, followed by the (outer) j variable. thus, j is set to its lowest value (=1), and k is varied over its full range (1 to c). then, j is incremented by 1 and k is again varied over its full range, and so on. if the expression to be evaluated is symmetric in the dummy variables (as in equation 1.12), the order of summation can be interchanged. the summand may sometimes be tightly coupled with the indexvars. consider the minimization criterion used in k-means clustering as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  2073,  1051, 15992,  2024,  1996,  5159,  1998,  1041, 15992,
         2024,  1996,  3517, 13139,  1999,  2019,  1054,  1095,  1039,  2795,
         1012,  1996,  2344,  1999,  2029,  9089,  2098, 20571,  2024,  2179,
         2003,  2823,  2590,  1006,  2004,  1999,  8185, 24856,  2015,  1007,
         1012,  1999,  1996,  2682,  1011,  3855,  7680,  1010,  2057,  2009,
        22139,  2034,  2058,  1996,  1006,  5110,  1007,  1047,  8023,  1010,
         2628,  2011,  1996,  1006,  6058,  1007,  1046,  8023,  1012,  2947,
         1010,  1046,  2003,  2275,  2000,  2049,  7290,  3643,  1006,  1027,
         1015,  1007,  1010,  1998,  1047,  2003,  9426,  2058,  2049,  2440,
         2846,  1006,  1015,  2000,  1039,  1007,  1012,  2059,  1010,  1046,
         2003,  4297, 28578, 14088,  2011,  1015,  1998,  1047,  2003,  2153,
         9426,  2058,  2049,  2440,  2846,  1010,  1998,  2061,  2006,  1012,
         2065,  1996,  3670,  2000,  2022, 16330,  2003, 19490,  1999,  1996,
        24369, 10857,  1006,  2004,  1999,  8522,  1015,  1012,  2260,  1007,
         1010,  1996,  2344,  1997,  7680, 28649,  2064,  2022,  8989,  2094,
         1012,  1996,  7680,  2386,  2094,  2089,  2823,  2022,  7371, 11211,
         2007,  1996,  5950, 10755,  2015,  1012,  5136,  1996,  7163,  4328,
         9276, 19229,  2109,  1999,  1047,  1011,  2965,  9324,  2075,  2004,
          102])"
81,1,['data'], Nested Sums,seg_27,"where |cj| is the number of data points in cluster j, cj’s are the cluster centroids, k is the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  2073,  1064,  1039,  3501,  1064,  2003,  1996,  2193,  1997,
         2951,  2685,  1999,  9324,  1046,  1010,  1039,  3501,  1521,  1055,
         2024,  1996,  9324, 18120,  9821,  1010,  1047,  2003,  1996,   102])"
82,0,[], Nested Sums,seg_27,"number of clusters, and xi",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9089,  2098, 20571])","tensor([  101,  2193,  1997, 12906,  1010,  1998,  8418,   102])"
83,1,['data'], Nested Sums,seg_27,"(j) denotes ith data value in jth cluster. here, the summand is tightly coupled with the outer indexvar. thus, we cannot easily interchange the summations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  1006,  1046,  1007, 14796,  2009,  2232,  2951,  3643,  1999,
         1046,  2705,  9324,  1012,  2182,  1010,  1996,  7680,  2386,  2094,
         2003,  7371, 11211,  2007,  1996,  6058,  5950, 10755,  1012,  2947,
         1010,  2057,  3685,  4089,  8989,  1996,  7680, 28649,  2015,  1012,
          102])"
84,1,"['dependence', 'variable names', 'nested summations', 'variable']", Nested Sums,seg_27,"when there are several nested summations in one block, each of them must be assigned a unique index variable. the variable names do not actually matter, as they are dummy indexvars. any constant multiplier(s) that does not depend upon the indexvars could be taken outside all summations. any multiplicand expressions that do not depend on the inner indexvars could be moved as much outside as possible such that their dependence is only on the indexvars to their left. for example, consider the",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  2043,  2045,  2024,  2195,  9089,  2098,  7680, 28649,  2015,
         1999,  2028,  3796,  1010,  2169,  1997,  2068,  2442,  2022,  4137,
         1037,  4310,  5950,  8023,  1012,  1996,  8023,  3415,  2079,  2025,
         2941,  3043,  1010,  2004,  2027,  2024, 24369,  5950, 10755,  2015,
         1012,  2151,  5377,  4800, 24759,  3771,  1006,  1055,  1007,  2008,
         2515,  2025, 12530,  2588,  1996,  5950, 10755,  2015,  2071,  2022,
         2579,  2648,  2035,  7680, 28649,  2015,  1012,  2151,  4800, 24759,
         5555,  4859, 11423,  2008,  2079,  2025, 12530,  2006,  1996,  5110,
         5950, 10755,  2015,  2071,  2022,  2333,  2004,  2172,  2648,  2004,
         2825,  2107,  2008,  2037, 18642,  2003,  2069,  2006,  1996,  5950,
        10755,  2015,  2000,  2037,  2187,  1012,  2005,  2742,  1010,  5136,
         1996,   102])"
85,1,['independent'], Nested Sums,seg_27,"as  j is independent of i and c is a constant, we could rewrite it as",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  2004,  1046,  2003,  2981,  1997,  1045,  1998,  1039,  2003,
         1037,  5377,  1010,  2057,  2071,  2128, 26373,  2009,  2004,   102])"
86,0,[], Nested Sums,seg_27,"(see exercise 1.51). similarly,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9089,  2098, 20571])","tensor([ 101, 1006, 2156, 6912, 1015, 1012, 4868, 1007, 1012, 6660, 1010,  102])"
87,1,"['dependent', 'limit']", Nested Sums,seg_27,"we could also combine multiple ∑ into a single ∑ if there is no scope for confusion. thus, the above-mentioned double sum in equation (1.12) can also be written using ∑j,k. however, multiple ∑ is the recommended notation, as it is easy to comprehend and useful to convert such expressions into computer programs. moreover, the indexvars in inner sums are sometimes dependent on the outer indexvars (as in equation 1.13, where the upper limit of the inner indexvar “i” depends on the outer indexvar j. see also equations 1.30 and 1.31 in page 1–26 and 1–38 in page 1–30).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9089,  2098, 20571])","tensor([  101,  2057,  2071,  2036, 11506,  3674,   100,  2046,  1037,  2309,
          100,  2065,  2045,  2003,  2053,  9531,  2005,  6724,  1012,  2947,
         1010,  1996,  2682,  1011,  3855,  3313,  7680,  1999,  8522,  1006,
         1015,  1012,  2260,  1007,  2064,  2036,  2022,  2517,  2478,   100,
         1010,  1047,  1012,  2174,  1010,  3674,   100,  2003,  1996,  6749,
        14869,  1010,  2004,  2009,  2003,  3733,  2000, 22346,  1998,  6179,
         2000, 10463,  2107, 11423,  2046,  3274,  3454,  1012,  9308,  1010,
         1996,  5950, 10755,  2015,  1999,  5110, 20571,  2024,  2823,  7790,
         2006,  1996,  6058,  5950, 10755,  2015,  1006,  2004,  1999,  8522,
         1015,  1012,  2410,  1010,  2073,  1996,  3356,  5787,  1997,  1996,
         5110,  5950, 10755,  1523,  1045,  1524,  9041,  2006,  1996,  6058,
         5950, 10755,  1046,  1012,  2156,  2036, 11380,  1015,  1012,  2382,
         1998,  1015,  1012,  2861,  1999,  3931,  1015,  1516,  2656,  1998,
         1015,  1516,  4229,  1999,  3931,  1015,  1516,  2382,  1007,  1012,
          102])"
88,1,"['exponentially', 'statistics', 'numerical']", Increment Step Sizes,seg_29,"the increments of the indexvar are assumed to be in steps of 1 by default. this is true for most of the summations that we encounter in statistics and computer science. however, there exist some applications in engineering and numerical computing where the increments are fractions. if this increment is in steps of c (≠1), it is indicated at the middle of the ∑ symbol. the increment step c can in general be a multiple of an integer or a fraction. it can rarely grow exponentially in some applications (see exercise 1.48 pp. 1–68).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1996,  4297, 28578, 11187,  1997,  1996,  5950, 10755,  2024,
         5071,  2000,  2022,  1999,  4084,  1997,  1015,  2011, 12398,  1012,
         2023,  2003,  2995,  2005,  2087,  1997,  1996,  7680, 28649,  2015,
         2008,  2057,  8087,  1999,  6747,  1998,  3274,  2671,  1012,  2174,
         1010,  2045,  4839,  2070,  5097,  1999,  3330,  1998, 15973,  9798,
         2073,  1996,  4297, 28578, 11187,  2024, 12884,  2015,  1012,  2065,
         2023,  4297, 28578,  4765,  2003,  1999,  4084,  1997,  1039,  1006,
         1027,  1015,  1007,  1010,  2009,  2003,  5393,  2012,  1996,  2690,
         1997,  1996,   100,  6454,  1012,  1996,  4297, 28578,  4765,  3357,
         1039,  2064,  1999,  2236,  2022,  1037,  3674,  1997,  2019, 16109,
         2030,  1037, 12884,  1012,  2009,  2064,  6524,  4982, 27258,  2135,
         1999,  2070,  5097,  1006,  2156,  6912,  1015,  1012,  4466,  4903,
         1012,  1015,  1516,  6273,  1007,  1012,   102])"
89,1,['summation'], Increment Step Sizes,seg_29,"1.6.2.1 fractional incremental steps (fiss) when the increment is a fraction, we could recode the indexvar to force it to be an integer and adjust the summand accordingly. for example, consider the summation ∑j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1015,  1012,  1020,  1012,  1016,  1012,  1015, 12884,  2389,
         4297, 28578, 21050,  4084,  1006, 27424,  2015,  1007,  2043,  1996,
         4297, 28578,  4765,  2003,  1037, 12884,  1010,  2057,  2071, 28667,
        10244,  1996,  5950, 10755,  2000,  2486,  2009,  2000,  2022,  2019,
        16109,  1998, 14171,  1996,  7680,  2386,  2094, 11914,  1012,  2005,
         2742,  1010,  5136,  1996,  7680, 28649,   100,   102])"
90,1,"['parameters', 'function']", Increment Step Sizes,seg_29,"n =1 f (j), where f(j) is any arbitrary function of j (along with other parameters), the indexvar j varies in steps of c = 0.5, and n is an integer or half-integer 1. we could write it as∑j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  1042,  1006,  1046,  1007,  1010,  2073,
         1042,  1006,  1046,  1007,  2003,  2151, 15275,  3853,  1997,  1046,
         1006,  2247,  2007,  2060, 11709,  1007,  1010,  1996,  5950, 10755,
         1046,  9783,  1999,  4084,  1997,  1039,  1027,  1014,  1012,  1019,
         1010,  1998,  1050,  2003,  2019, 16109,  2030,  2431,  1011, 16109,
         1015,  1012,  2057,  2071,  4339,  2009,   100,   102])"
91,1,['vary'], Increment Step Sizes,seg_29,"here, the indexvar has been “inflated” to vary from 1 to 2n − 1 in steps of 1 and ( j + 1)∕2 has been substituted in the summand to compensate for the inflated index. in general, if we need to increment j from u to v in steps of a proper fraction c = 1∕k, then the indexvar is inflated to vary from u to (  ∗ k − u ∗ (k − 1)), and the sum is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2182,  1010,  1996,  5950, 10755,  2038,  2042,  1523, 29561,
         1524,  2000,  8137,  2013,  1015,  2000,  1016,  2078,  1597,  1015,
         1999,  4084,  1997,  1015,  1998,  1006,  1046,  1009,  1015,  1007,
          100,  2038,  2042, 17316,  1999,  1996,  7680,  2386,  2094,  2000,
        19079,  2005,  1996, 29561,  5950,  1012,  1999,  2236,  1010,  2065,
         2057,  2342,  2000,  4297, 28578,  4765,  1046,  2013,  1057,  2000,
         1058,  1999,  4084,  1997,  1037,  5372, 12884,  1039,  1027,   100,
         1010,  2059,  1996,  5950, 10755,  2003, 29561,  2000,  8137,  2013,
         1057,  2000,  1006,  1598,  1047,  1597,  1057,  1598,  1006,  1047,
         1597,  1015,  1007,  1007,  1010,  1998,  1996,  7680,  2003,   102])"
92,0,[], Increment Step Sizes,seg_29,"as u and k are known constants, we could also write this as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([ 101, 2004, 1057, 1998, 1047, 2024, 2124, 5377, 2015, 1010, 2057, 2071,
        2036, 4339, 2023, 2004,  102])"
93,0,[], Increment Step Sizes,seg_29,"where k′ = u(1 − 1∕k). indeed, changing the indexvar as i = j − u, this could also be written in the alternative form",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2073,  1047,  1531,  1027,  1057,  1006,  1015,  1597,   100,
         1007,  1012,  5262,  1010,  5278,  1996,  5950, 10755,  2004,  1045,
         1027,  1046,  1597,  1057,  1010,  2023,  2071,  2036,  2022,  2517,
         1999,  1996,  4522,  2433,   102])"
94,0,[], Increment Step Sizes,seg_29,which is much better suited for computer implementation.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2029,  2003,  2172,  2488, 10897,  2005,  3274,  7375,  1012,
          102])"
95,0,[], Increment Step Sizes,seg_29,example 1.1 simplified sum,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2742,  1015,  1012,  1015, 11038,  7680,   102])"
96,0,[], Increment Step Sizes,seg_29,"simplify∑j f (j) for index j from 1 to 3 in steps of 1/3, using the above-mentioned technique.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([ 101,  100, 1042, 1006, 1046, 1007, 2005, 5950, 1046, 2013, 1015, 2000,
        1017, 1999, 4084, 1997, 1015, 1013, 1017, 1010, 2478, 1996, 2682, 1011,
        3855, 6028, 1012,  102])"
97,0,[], Increment Step Sizes,seg_29,"1.6.2.2 integral incremental steps (iiss) if the indexvar increments in steps of 2, we evaluate the sum ∑j",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1015,  1012,  1020,  1012,  1016,  1012,  1016,  9897,  4297,
        28578, 21050,  4084,  1006,  2462,  4757,  1007,  2065,  1996,  5950,
        10755,  4297, 28578, 11187,  1999,  4084,  1997,  1016,  1010,  2057,
        16157,  1996,  7680,   100,   102])"
98,0,[], Increment Step Sizes,seg_29,"where ⌊x⌋ denotes the floor operator that returns the largest integer less than x. if c is an integer  2, we modify the sum as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2073,   100,  1060,   100, 14796,  1996,  2723,  6872,  2008,
         5651,  1996,  2922, 16109,  2625,  2084,  1060,  1012,  2065,  1039,
         2003,  2019, 16109,  1016,  1010,  2057, 19933,  1996,  7680,  2004,
          102])"
99,1,"['vary', 'discrete']", Increment Step Sizes,seg_29,"these are used in discrete signal processing and transforms. in general, if we need to increment j from u to v in steps of an integer multiple c ≥ 2, then the index is deflated to vary from 0 to (v − u)/c, and the sum is evaluated as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2122,  2024,  2109,  1999, 16246,  4742,  6364,  1998, 21743,
         1012,  1999,  2236,  1010,  2065,  2057,  2342,  2000,  4297, 28578,
         4765,  1046,  2013,  1057,  2000,  1058,  1999,  4084,  1997,  2019,
        16109,  3674,  1039,  1609,  1016,  1010,  2059,  1996,  5950,  2003,
        13366, 13776,  2000,  8137,  2013,  1014,  2000,  1006,  1058,  1597,
         1057,  1007,  1013,  1039,  1010,  1998,  1996,  7680,  2003, 16330,
         2004,   102])"
100,1,['case'], Increment Step Sizes,seg_29,a special case is accumulating the sum ∑j,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1037,  2569,  2553,  2003, 16222,  2819, 10924,  1996,  7680,
          100,   102])"
101,1,['limit'], Increment Step Sizes,seg_29,"equation (1.24) is valid for both c an integer and a fraction. when c is a fraction, the upper limit ⌊2k∕c⌋ is simply blown up.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  8522,  1006,  1015,  1012,  2484,  1007,  2003,  9398,  2005,
         2119,  1039,  2019, 16109,  1998,  1037, 12884,  1012,  2043,  1039,
         2003,  1037, 12884,  1010,  1996,  3356,  5787,   100,   100,   100,
         2003,  3432, 10676,  2039,  1012,   102])"
102,1,['symmetric'], Increment Step Sizes,seg_29,example 1.2 simplified symmetric sum,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2742,  1015,  1012,  1016, 11038, 19490,  7680,   102])"
103,0,[], Increment Step Sizes,seg_29,"if j varies in fractional steps of 1/3, simplify the following sums:– (i)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2065,  1046,  9783,  1999, 12884,  2389,  4084,  1997,  1015,
         1013,  1017,  1010, 21934, 28250,  1996,  2206, 20571,  1024,  1516,
         1006,  1045,  1007,   102])"
104,1,['limit'], Increment Step Sizes,seg_29,"solution 1.2 (i) using (1.24), the first sum has upper limit ⌊2 × 1∕(1∕3)⌋ = 6, so that it can be unfolded as ∑j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  5576,  1015,  1012,  1016,  1006,  1045,  1007,  2478,  1006,
         1015,  1012,  2484,  1007,  1010,  1996,  2034,  7680,  2038,  3356,
         5787,   100,  1016,  1095,   100,  1006,   100,  1007,   100,  1027,
         1020,  1010,  2061,  2008,  2009,  2064,  2022, 23959,  2004,   100,
          102])"
105,0,[], Increment Step Sizes,seg_29,example 1.3 simplified double sum,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2742,  1015,  1012,  1017, 11038,  3313,  7680,   102])"
106,0,[], Increment Step Sizes,seg_29,"if j varies in fractional steps of 1/4, and k varies in integer steps of 3, simplify following sums:– (i) s1 = ∑j",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2065,  1046,  9783,  1999, 12884,  2389,  4084,  1997,  1015,
         1013,  1018,  1010,  1998,  1047,  9783,  1999, 16109,  4084,  1997,
         1017,  1010, 21934, 28250,  2206, 20571,  1024,  1516,  1006,  1045,
         1007,  1055,  2487,  1027,   100,   102])"
107,1,['case'], Increment Step Sizes,seg_29,"solution 1.3 in case (i), u = 2,    = 5, and c = 1∕4 so that we apply fis first to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  5576,  1015,  1012,  1017,  1999,  2553,  1006,  1045,  1007,
         1010,  1057,  1027,  1016,  1010,  1027,  1019,  1010,  1998,  1039,
         1027,   100,  2061,  2008,  2057,  6611, 27424,  2034,  2000,  2131,
          102])"
108,1,['case'], Increment Step Sizes,seg_29,"in case (ii), we first apply fis to get",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1999,  2553,  1006,  2462,  1007,  1010,  2057,  2034,  6611,
        27424,  2000,  2131,   102])"
109,0,[], Increment Step Sizes,seg_29,"where the inner index still increments in step size 1/4. next, we apply iis to indexvar k to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2073,  1996,  5110,  5950,  2145,  4297, 28578, 11187,  1999,
         3357,  2946,  1015,  1013,  1018,  1012,  2279,  1010,  2057,  6611,
         2462,  2015,  2000,  5950, 10755,  1047,  2000,  2131,   102])"
110,1,"['summation', 'statistics']", Increment Step Sizes,seg_29,"the most frequent use of ∑ notation in statistics is to denote the arithmetic sum of n quantities that are distinguished only by one or more subscripts. in the following discussion, we introduce the most common summation notations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1996,  2087,  6976,  2224,  1997,   100, 14869,  1999,  6747,
         2003,  2000, 19090,  1996, 20204,  7680,  1997,  1050, 12450,  2008,
         2024,  5182,  2069,  2011,  2028,  2030,  2062,  4942, 22483,  2015,
         1012,  1999,  1996,  2206,  6594,  1010,  2057,  8970,  1996,  2087,
         2691,  7680, 28649, 14869,  2015,  1012,   102])"
111,1,"['varying', 'summation']", Increment Step Sizes,seg_29,1. subscript fully varying summation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1015,  1012,  4942, 22483,  3929,  9671,  7680, 28649,   102])"
112,1,['summation'], Increment Step Sizes,seg_29,consider the summation,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  5136,  1996,  7680, 28649,   102])"
113,1,"['probability theory', 'bivariate data', 'disjoint', 'events', 'bivariate', 'statistics', 'samples', 'data', 'order statistics', 'probability', 'disjoint events', 'random variables', 'random', 'variables', 'summation', 'variable']", Increment Step Sizes,seg_29,"where xj is the jth value of the series x[]. here, each of the xj’s are either known data values or random variables. the j is called the summation variable or index of summation. this notation is used in arithmetic means of samples, of random variables, in order statistics, and in probability theory for disjoint events. because bivariate data are arranged as a matrix and identified by a row and a column, we could extend the above-mentioned notation as ∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 1.,
        1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2073,  1060,  3501,  2003,  1996,  1046,  2705,  3643,  1997,
         1996,  2186,  1060,  1031,  1033,  1012,  2182,  1010,  2169,  1997,
         1996,  1060,  3501,  1521,  1055,  2024,  2593,  2124,  2951,  5300,
         2030,  6721, 10857,  1012,  1996,  1046,  2003,  2170,  1996,  7680,
        28649,  8023,  2030,  5950,  1997,  7680, 28649,  1012,  2023, 14869,
         2003,  2109,  1999, 20204,  2965,  1997,  8168,  1010,  1997,  6721,
        10857,  1010,  1999,  2344,  6747,  1010,  1998,  1999,  9723,  3399,
         2005,  4487,  2015,  5558, 18447,  2824,  1012,  2138, 12170, 10755,
        13143,  2951,  2024,  5412,  2004,  1037,  8185,  1998,  4453,  2011,
         1037,  5216,  1998,  1037,  5930,  1010,  2057,  2071,  7949,  1996,
         2682,  1011,  3855, 14869,  2004,   100,   102])"
114,1,['summation'], Increment Step Sizes,seg_29,"n =1 xij to denote the sum of all of the m × n entries or values. this is sometimes compactly written as ∑i∑jxij or as ∑i,jxij. the summation notation is also used in vari-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  8418,  3501,  2000, 19090,  1996,  7680,
         1997,  2035,  1997,  1996,  1049,  1095,  1050, 10445,  2030,  5300,
         1012,  2023,  2003,  2823,  9233,  2135,  2517,  2004,   100,  2030,
         2004,   100,  1010,  1046,  9048,  3501,  1012,  1996,  7680, 28649,
        14869,  2003,  2036,  2109,  1999, 13075,  2072,  1011,   102])"
115,1,['summation'], Increment Step Sizes,seg_29,n =1 (xj − x)2∕(n − 1). consider the summation ∑j,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  1006,  1060,  3501,  1597,  1060,  1007,
          100,  1006,  1050,  1597,  1015,  1007,  1012,  5136,  1996,  7680,
        28649,   100,   102])"
116,1,"['bivariate', 'data', 'bivariate data', 'case']", Increment Step Sizes,seg_29,"· · · + (xn − c)k, where xj is the jth value of the series x[], and c,k are constants. as in the above-mentioned case, we could extend this to bivariate data as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1087,  1087,  1087,  1009,  1006,  1060,  2078,  1597,  1039,
         1007,  1047,  1010,  2073,  1060,  3501,  2003,  1996,  1046,  2705,
         3643,  1997,  1996,  2186,  1060,  1031,  1033,  1010,  1998,  1039,
         1010,  1047,  2024,  5377,  2015,  1012,  2004,  1999,  1996,  2682,
         1011,  3855,  2553,  1010,  2057,  2071,  7949,  2023,  2000, 12170,
        10755, 13143,  2951,  2004,   102])"
117,1,['variables'], Increment Step Sizes,seg_29,"n =1 xjyj, where xj and yj are the values of two traits generated by the jth subject. when there are many traits, we may represent them by an additional subscript, rather than by separate variables as in ∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  1060,  3501,  2100,  3501,  1010,  2073,
         1060,  3501,  1998,  1061,  3501,  2024,  1996,  5300,  1997,  2048,
        12955,  7013,  2011,  1996,  1046,  2705,  3395,  1012,  2043,  2045,
         2024,  2116, 12955,  1010,  2057,  2089,  5050,  2068,  2011,  2019,
         3176,  4942, 22483,  1010,  2738,  2084,  2011,  3584, 10857,  2004,
         1999,   100,   102])"
118,1,"['varying', 'summation']", Increment Step Sizes,seg_29,"2. subscript partially varying summation this is a variant of the above-mentioned notation, where we use ≠ or ≥ to restrict one or more summation indexes. consider the problem of summing the elements in the upper triangular portion (above the diagonal) of a 2d array. if xij denotes the (i, j)th element, this sum is given by s = ∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1016,  1012,  4942, 22483,  6822,  9671,  7680, 28649,  2023,
         2003,  1037,  8349,  1997,  1996,  2682,  1011,  3855, 14869,  1010,
         2073,  2057,  2224,  1027,  2030,  1609,  2000, 21573,  2028,  2030,
         2062,  7680, 28649,  5950,  2229,  1012,  5136,  1996,  3291,  1997,
         7680,  6562,  1996,  3787,  1999,  1996,  3356, 14023,  4664,  1006,
         2682,  1996, 19754,  1007,  1997,  1037, 14134,  9140,  1012,  2065,
         8418,  3501, 14796,  1996,  1006,  1045,  1010,  1046,  1007, 16215,
         5783,  1010,  2023,  7680,  2003,  2445,  2011,  1055,  1027,   100,
          102])"
119,1,['summation'], Increment Step Sizes,seg_29,"n =1 ∑j≥ixij. in some applications, we may have to omit particular values of the summation index as in ∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,   100,  1012,  1999,  2070,  5097,  1010,
         2057,  2089,  2031,  2000, 18168,  4183,  3327,  5300,  1997,  1996,
         7680, 28649,  5950,  2004,  1999,   100,   102])"
120,1,"['sample', 'sample variance', 'variance']", Increment Step Sizes,seg_29,"n =1;j≠i xij. as another example, the sample variance can be represented as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  1025,  1046,  1027,  1045,  8418,  3501,
         1012,  2004,  2178,  2742,  1010,  1996,  7099, 23284,  2064,  2022,
         3421,  2004,   102])"
121,1,['symmetric'], Increment Step Sizes,seg_29,"where the inner indexvar depends on the outer indexvar. as this is symmetric in xi and xj, we could also write it as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2073,  1996,  5110,  5950, 10755,  9041,  2006,  1996,  6058,
         5950, 10755,  1012,  2004,  2023,  2003, 19490,  1999,  8418,  1998,
         1060,  3501,  1010,  2057,  2071,  2036,  4339,  2009,  2004,   102])"
122,1,"['sets', 'set', 'information', 'summation']", Increment Step Sizes,seg_29,"3. summation over a set this is an extension of the above-mentioned notation. in some applications, we have distinct nonoverlapping subsets that makeup a set. we may have to accumulate some information about each of the subsets. the above-mentioned summation notation can be modified such that the summation index varies over each subset:∑j∈sj f (xj). these sets can be specified either explicitly or implicitly",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1017,  1012,  7680, 28649,  2058,  1037,  2275,  2023,  2003,
         2019,  5331,  1997,  1996,  2682,  1011,  3855, 14869,  1012,  1999,
         2070,  5097,  1010,  2057,  2031,  5664,  2512,  7840,  2721, 14853,
        16745,  2015,  2008,  5789,  1037,  2275,  1012,  2057,  2089,  2031,
         2000, 27598,  2070,  2592,  2055,  2169,  1997,  1996, 16745,  2015,
         1012,  1996,  2682,  1011,  3855,  7680, 28649, 14869,  2064,  2022,
         6310,  2107,  2008,  1996,  7680, 28649,  5950,  9783,  2058,  2169,
        16745,  1024,   100,  1042,  1006,  1060,  3501,  1007,  1012,  2122,
         4520,  2064,  2022,  9675,  2593, 12045,  2030, 24655,  2135,   102])"
123,1,"['set', 'probability', 'condition', 'summation']", Increment Step Sizes,seg_29,"using a condition. for instance, the set of all odd integers can be specified as “j is odd,” where j is the summation index. suppose that we are interested in finding the probability of an even number of heads when six coins are thrown. let y",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2478,  1037,  4650,  1012,  2005,  6013,  1010,  1996,  2275,
         1997,  2035,  5976, 24028,  2064,  2022,  9675,  2004,  1523,  1046,
         2003,  5976,  1010,  1524,  2073,  1046,  2003,  1996,  7680, 28649,
         5950,  1012,  6814,  2008,  2057,  2024,  4699,  1999,  4531,  1996,
         9723,  1997,  2019,  2130,  2193,  1997,  4641,  2043,  2416,  7824,
         2024,  6908,  1012,  2292,  1061,   102])"
124,1,"['tail', 'probability', 'tails', 'event', 'distribution', 'binomial', 'binomial distribution']", Increment Step Sizes,seg_29,"denotes the event that an even number of heads appear. the possible values of y are s1 = 0, 2, 4, 6. here, y = 0 indicates that all six coins ended up as tails and six indicates that all of them were heads. we know that this is solvable using the binomial distribution with n = 6. if p denotes the probability of a head showing up and q = 1 − p denotes the probability of a tail showing up, we are interested in finding the probability",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101, 14796,  1996,  2724,  2008,  2019,  2130,  2193,  1997,  4641,
         3711,  1012,  1996,  2825,  5300,  1997,  1061,  2024,  1055,  2487,
         1027,  1014,  1010,  1016,  1010,  1018,  1010,  1020,  1012,  2182,
         1010,  1061,  1027,  1014,  7127,  2008,  2035,  2416,  7824,  3092,
         2039,  2004, 17448,  1998,  2416,  7127,  2008,  2035,  1997,  2068,
         2020,  4641,  1012,  2057,  2113,  2008,  2023,  2003, 14017, 12423,
         2478,  1996,  8026, 20936,  2389,  4353,  2007,  1050,  1027,  1020,
         1012,  2065,  1052, 14796,  1996,  9723,  1997,  1037,  2132,  4760,
         2039,  1998,  1053,  1027,  1015,  1597,  1052, 14796,  1996,  9723,
         1997,  1037,  5725,  4760,  2039,  1010,  2057,  2024,  4699,  1999,
         4531,  1996,  9723,   102])"
125,1,"['function', 'summation', 'variable']", Increment Step Sizes,seg_29,4. function of summation variable,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1018,  1012,  3853,  1997,  7680, 28649,  8023,   102])"
126,1,['summation'], Increment Step Sizes,seg_29,consider the simple summation ∑j,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  5136,  1996,  3722,  7680, 28649,   100,   102])"
127,1,"['tail', 'function', 'probability', 'tail areas', 'poisson']", Increment Step Sizes,seg_29,"n =1 j2. here, our summand (the quantity summed) is either j itself or a function of it. a more complicated example is the tail areas of poisson probability defined as pj(  ) = e−  j∕j! or",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  1046,  2475,  1012,  2182,  1010,  2256,
         7680,  2386,  2094,  1006,  1996, 11712,  7680,  7583,  1007,  2003,
         2593,  1046,  2993,  2030,  1037,  3853,  1997,  2009,  1012,  1037,
         2062,  8552,  2742,  2003,  1996,  5725,  2752,  1997, 13433, 24077,
         9723,  4225,  2004,  1052,  3501,  1006,  1007,  1027,  1041, 22543,
          100,   999,  2030,   102])"
128,1,"['tail', 'function', 'probabilities', 'binomial']", Increment Step Sizes,seg_29,"the binomial density bj(n, p) = ( n j ) pj(1 − p)n−j = (1 − p)n ( n j ) (p∕q)j, for j = 0, 1, · · · , n, and q = 1 − p. the sum of the probabilities on the left tail is called the cdf and that on the right tail is called the survival function. symbolically,",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1996,  8026, 20936,  2389,  4304,  1038,  3501,  1006,  1050,
         1010,  1052,  1007,  1027,  1006,  1050,  1046,  1007,  1052,  3501,
         1006,  1015,  1597,  1052,  1007,  1050, 22543,  3501,  1027,  1006,
         1015,  1597,  1052,  1007,  1050,  1006,  1050,  1046,  1007,  1006,
          100,  1007,  1046,  1010,  2005,  1046,  1027,  1014,  1010,  1015,
         1010,  1087,  1087,  1087,  1010,  1050,  1010,  1998,  1053,  1027,
         1015,  1597,  1052,  1012,  1996,  7680,  1997,  1996,  4013,  3676,
        14680,  2006,  1996,  2187,  5725,  2003,  2170,  1996,  3729,  2546,
         1998,  2008,  2006,  1996,  2157,  5725,  2003,  2170,  1996,  7691,
         3853,  1012, 12613,  3973,  1010,   102])"
129,1,"['function', 'binomial']", Increment Step Sizes,seg_29,"k =0 e−  j∕j! is the cdf up to and including k, where k is a number in (0,∞). similarly, the binomial survival function is given by gx(k, n, p) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1047,  1027,  1014,  1041, 22543,   100,   999,  2003,  1996,
         3729,  2546,  2039,  2000,  1998,  2164,  1047,  1010,  2073,  1047,
         2003,  1037,  2193,  1999,  1006,  1014,  1010,  1601,  1007,  1012,
         6660,  1010,  1996,  8026, 20936,  2389,  7691,  3853,  2003,  2445,
         2011,  1043,  2595,  1006,  1047,  1010,  1050,  1010,  1052,  1007,
         1027,   102])"
130,1,"['varying', 'summation']", Increment Step Sizes,seg_29,5. superscript varying summation,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1019,  1012,  3565, 22483,  9671,  7680, 28649,   102])"
131,1,['summation'], Increment Step Sizes,seg_29,consider the summation ∑k,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  5136,  1996,  7680, 28649,   100,   102])"
132,0,[], Increment Step Sizes,seg_29,"n =1 (xj − c)k or ∑k(xj − c)k for short. this denotes the expanded sum (xj − c)1 + (xj − c)2 + · · · + (xj − c)k, where xj, the jth value of the series x[], and c are constants. this notation is used in generating func-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  1006,  1060,  3501,  1597,  1039,  1007,
         1047,  2030,   100,  1006,  1060,  3501,  1597,  1039,  1007,  1047,
         2005,  2460,  1012,  2023, 14796,  1996,  4423,  7680,  1006,  1060,
         3501,  1597,  1039,  1007,  1015,  1009,  1006,  1060,  3501,  1597,
         1039,  1007,  1016,  1009,  1087,  1087,  1087,  1009,  1006,  1060,
         3501,  1597,  1039,  1007,  1047,  1010,  2073,  1060,  3501,  1010,
         1996,  1046,  2705,  3643,  1997,  1996,  2186,  1060,  1031,  1033,
         1010,  1998,  1039,  2024,  5377,  2015,  1012,  2023, 14869,  2003,
         2109,  1999, 11717,  4569,  2278,  1011,   102])"
133,0,[], Increment Step Sizes,seg_29,"tions. in differential calculus, it denotes jth derivative as in d",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101, 14841,  5644,  1012,  1999, 11658, 19276,  1010,  2009, 14796,
         1046,  2705, 13819,  2004,  1999,  1040,   102])"
134,0,[], Increment Step Sizes,seg_29,which is interpreted as applying the differential operator ( d,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2029,  2003, 10009,  2004, 11243,  1996, 11658,  6872,  1006,
         1040,   102])"
135,1,"['function', 'cumulant']", Increment Step Sizes,seg_29,"d x ) repeatedly j times. as another example, the jth derivative of cumulant generating function is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 1., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1040,  1060,  1007,  8385,  1046,  2335,  1012,  2004,  2178,
         2742,  1010,  1996,  1046,  2705, 13819,  1997, 13988,  7068,  3372,
        11717,  3853,  2003,   102])"
136,1,['cumulant'], Increment Step Sizes,seg_29,"( ∕ t)jkx(t) = ( ∕ t)j ln(mx(t)) =  j +  j+1(t∕1) +  j+2(t2∕(1 ∗ 2)) + · · · , (1.33) from which by putting t = 0, we could separate out the jth cumulant. putting",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1006,   100,  1056,  1007,  1046,  2243,  2595,  1006,  1056,
         1007,  1027,  1006,   100,  1056,  1007,  1046,  1048,  2078,  1006,
        25630,  1006,  1056,  1007,  1007,  1027,  1046,  1009,  1046,  1009,
         1015,  1006,   100,  1007,  1009,  1046,  1009,  1016,  1006,   100,
         1006,  1015,  1598,  1016,  1007,  1007,  1009,  1087,  1087,  1087,
         1010,  1006,  1015,  1012,  3943,  1007,  2013,  2029,  2011,  5128,
         1056,  1027,  1014,  1010,  2057,  2071,  3584,  2041,  1996,  1046,
         2705, 13988,  7068,  3372,  1012,  5128,   102])"
137,1,"['mean', 'function', 'processes', 'states', 'stochastic processes', 'discrete']", Increment Step Sizes,seg_29,"r (see also 9.1 (pp. 9–2)). note that the superscript may or may not mean powers. for instance, it means various states in stochastic processes and game theory. it could be negative in time-dependent autoregressive processes and discrete signal processing. for example, the generating function a(z, n) = ∑j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1054,  1006,  2156,  2036,  1023,  1012,  1015,  1006,  4903,
         1012,  1023,  1516,  1016,  1007,  1007,  1012,  3602,  2008,  1996,
         3565, 22483,  2089,  2030,  2089,  2025,  2812,  4204,  1012,  2005,
         6013,  1010,  2009,  2965,  2536,  2163,  1999,  2358, 11663, 20875,
         6194,  1998,  2208,  3399,  1012,  2009,  2071,  2022,  4997,  1999,
         2051,  1011,  7790,  8285,  2890, 17603, 18719,  3726,  6194,  1998,
        16246,  4742,  6364,  1012,  2005,  2742,  1010,  1996, 11717,  3853,
         1037,  1006,  1062,  1010,  1050,  1007,  1027,   100,   102])"
138,1,['process'], Increment Step Sizes,seg_29,n =1 aj(n)z−j denotes the autoregressive process x(n) = −∑i,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015, 19128,  1006,  1050,  1007,  1062, 22543,
         3501, 14796,  1996,  8285,  2890, 17603, 18719,  3726,  2832,  1060,
         1006,  1050,  1007,  1027,   100,   102])"
139,1,"['parameter', 'sample', 'estimator', 'data']", Increment Step Sizes,seg_29,"n =1 ai(n)x(n − i) +  (n), where negative powers of z denote time lags to the past from the reference point. if it does not imply powers, we could enclose them in parenthesis to avoid confusion. a superscript could denote an omitted data value as in the jackknife estimator of a parameter using a sample of size",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1050,  1027,  1015,  9932,  1006,  1050,  1007,  1060,  1006,
         1050,  1597,  1045,  1007,  1009,  1006,  1050,  1007,  1010,  2073,
         4997,  4204,  1997,  1062, 19090,  2051,  2474,  5620,  2000,  1996,
         2627,  2013,  1996,  4431,  2391,  1012,  2065,  2009,  2515,  2025,
        19515,  4204,  1010,  2057,  2071,  4372, 20464,  9232,  2068,  1999,
         6687, 24124,  2000,  4468,  6724,  1012,  1037,  3565, 22483,  2071,
        19090,  2019, 16647,  2951,  3643,  2004,  1999,  1996,  2990,  2243,
         3490,  7959,  9765,  9581,  4263,  1997,  1037, 16381,  2478,  1037,
         7099,  1997,  2946,   102])"
140,1,"['sample', 'estimate', 'data']", Increment Step Sizes,seg_29,where tn is the estimate using all sample values and t(j) denotes the estimate n−1 without jth data value (using other n-1 values).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2073, 28286,  2003,  1996, 10197,  2478,  2035,  7099,  5300,
         1998,  1056,  1006,  1046,  1007, 14796,  1996, 10197,  1050, 27944,
         2302,  1046,  2705,  2951,  3643,  1006,  2478,  2060,  1050,  1011,
         1015,  5300,  1007,  1012,   102])"
141,1,"['noncentrality', 'dummy variable', 'moment generating function', 'beta distribution', 'mean', 'noncentral', 'parameter', 'function', 'moment', 'noncentrality parameter', 'shape parameters', 'noncentral beta', 'parameters', 'combination', 'distribution', 'summation', 'variable']", Increment Step Sizes,seg_29,"6. combination summation this type of summation may involve a combination of the above-mentioned two types. consider the expression mx(t) = ∑∞ j=0(t j∕j!) j, which is called the ordinary moment generating function. here, the summation index appears as a subscript on  , as superscript on the dummy variable t, and as a function 1∕j!. as another example, consider the noncentral beta distribution ncb(p, q,  ) with shape parameters (p, q), and noncentrality parameter    0. the mean of this distribution is expressed as an infinite sum of poisson-weighted central beta means as",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  1020,  1012,  5257,  7680, 28649,  2023,  2828,  1997,  7680,
        28649,  2089,  9125,  1037,  5257,  1997,  1996,  2682,  1011,  3855,
         2048,  4127,  1012,  5136,  1996,  3670, 25630,  1006,  1056,  1007,
         1027,   100,  1046,  1027,  1014,  1006,  1056,   100,   999,  1007,
         1046,  1010,  2029,  2003,  2170,  1996,  6623,  2617, 11717,  3853,
         1012,  2182,  1010,  1996,  7680, 28649,  5950,  3544,  2004,  1037,
         4942, 22483,  2006,  1010,  2004,  3565, 22483,  2006,  1996, 24369,
         8023,  1056,  1010,  1998,  2004,  1037,  3853,   100,   999,  1012,
         2004,  2178,  2742,  1010,  5136,  1996,  2512, 13013,  7941,  8247,
         4353, 13316,  2497,  1006,  1052,  1010,  1053,  1010,  1007,  2007,
         4338, 11709,  1006,  1052,  1010,  1053,  1007,  1010,  1998,  2512,
        13013,  7941,  3012, 16381,  1014,  1012,  1996,  2812,  1997,  2023,
         4353,  2003,  5228,  2004,  2019, 10709,  7680,  1997, 13433, 24077,
         1011, 18215,  2430,  8247,  2965,  2004,   102])"
142,1,['table'], Increment Step Sizes,seg_29,"where c = p + q + ∕2 [52]. here, j appears as powers of ( ∕2) and as a funcp+j tion (see table 8.3, pp. 8–41 in chapter 8). j!(p+q+j)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4297, 28578,  4765,  3357, 10826])","tensor([  101,  2073,  1039,  1027,  1052,  1009,  1053,  1009,   100,  1031,
         4720,  1033,  1012,  2182,  1010,  1046,  3544,  2004,  4204,  1997,
         1006,   100,  1007,  1998,  2004,  1037,  4569, 21906,  1009,  1046,
        14841,  2239,  1006,  2156,  2795,  1022,  1012,  1017,  1010,  4903,
         1012,  1022,  1516,  4601,  1999,  3127,  1022,  1007,  1012,  1046,
          999,  1006,  1052,  1009,  1053,  1009,  1046,  1007,   102])"
143,1,"['maximum likelihood estimation', 'estimation', 'maximum likelihood', 'conditional', 'geometric mean', 'mean', 'falling factorial', 'geometric', 'discrete', 'factorial', 'factorial moments', 'function', 'parameters', 'likelihood function', 'numerical', 'distributions', 'moments', 'likelihood', 'distribution', 'summation', 'conditional distributions', 'correlations']", PRODUCT NOTATION,seg_31,"we have used the + operator in the summation notation discussed earlier. there are many situations where we need to use the product (*) operator instead of +. examples are the rising and falling factorial moments, geometric mean (section 2.7, pp. 2–29), likelihood function in maximum likelihood estimation (mle) of statistical parameters, multivariate distribution theory, conditional distributions, multiple and partial correlations, and some special numbers. it is also used in inverse discrete fourier transforms, numerical interpolation, and many other engineering fields. if x1, x2, · · · , xn are nonzero numbers (positive or negative), their product is denoted as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  2057,  2031,  2109,  1996,  1009,  6872,  1999,  1996,  7680,
        28649, 14869,  6936,  3041,  1012,  2045,  2024,  2116,  8146,  2073,
         2057,  2342,  2000,  2224,  1996,  4031,  1006,  1008,  1007,  6872,
         2612,  1997,  1009,  1012,  4973,  2024,  1996,  4803,  1998,  4634,
         5387,  4818,  5312,  1010, 14965,  2812,  1006,  2930,  1016,  1012,
         1021,  1010,  4903,  1012,  1016,  1516,  2756,  1007,  1010, 16593,
         3853,  1999,  4555, 16593, 24155,  1006, 19875,  2063,  1007,  1997,
         7778, 11709,  1010,  4800, 10755, 13143,  4353,  3399,  1010, 18462,
        20611,  1010,  3674,  1998,  7704, 16902,  2015,  1010,  1998,  2070,
         2569,  3616,  1012,  2009,  2003,  2036,  2109,  1999, 19262, 16246,
        26899, 21743,  1010, 15973,  6970, 18155,  3370,  1010,  1998,  2116,
         2060,  3330,  4249,  1012,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1087,  1087,  1087,  1010,  1060,  2078,  2024,  2512,  6290,
         2080,  3616,  1006,  3893,  2030,  4997,  1007,  1010,  2037,  4031,
         2003, 19537,  2004,   102])"
144,1,"['geometric', 'function']", PRODUCT NOTATION,seg_31,the objective function in geometric programming (gp) is the posynomial,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  1996,  7863,  3853,  1999, 14965,  4730,  1006, 14246,  1007,
         2003,  1996, 13433,  6508,  3630, 10092,  2140,   102])"
145,0,[], PRODUCT NOTATION,seg_31,"ajt , where ct  0, ajt are real and xj  0 ∀j. applying",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4031, 14869])","tensor([  101, 19128,  2102,  1010,  2073, 14931,  1014,  1010, 19128,  2102,
         2024,  2613,  1998,  1060,  3501,  1014,   100,  1012, 11243,   102])"
146,0,[], PRODUCT NOTATION,seg_31,equation 1.36 immediately gives,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4031, 14869])","tensor([ 101, 8522, 1015, 1012, 4029, 3202, 3957,  102])"
147,1,"['multinomial', 'probabilities']", PRODUCT NOTATION,seg_31,n! the multinomial probabilities are expressed as x1!.x2!···xn!px,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  1050,   999,  1996,  4800,  3630, 10092,  2140,  4013,  3676,
        14680,  2024,  5228,  2004,  1060,  2487,   999,  1012,  1060,  2475,
          999,  1087,  1087,  1087,  1060,  2078,   999,  1052,  2595,   102])"
148,1,['probabilities'], PRODUCT NOTATION,seg_31,"2 … pn xn , where p′ js are probabilities that add up to 1 and ‘.’ denotes multiplication (*) (see chapter 6). this",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  1016,  1529,  1052,  2078,  1060,  2078,  1010,  2073,  1052,
         1531,  1046,  2015,  2024,  4013,  3676, 14680,  2008,  5587,  2039,
         2000,  1015,  1998,  1520,  1012,  1521, 14796, 24856,  1006,  1008,
         1007,  1006,  2156,  3127,  1020,  1007,  1012,  2023,   102])"
149,0,[], PRODUCT NOTATION,seg_31,can be concisely written as p = ∏n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4031, 14869])","tensor([  101,  2064,  2022,  9530, 18380,  2135,  2517,  2004,  1052,  1027,
          100,   102])"
150,0,[], PRODUCT NOTATION,seg_31,"equation 1.36, this becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4031, 14869])","tensor([ 101, 8522, 1015, 1012, 4029, 1010, 2023, 4150,  102])"
151,0,[], PRODUCT NOTATION,seg_31,′s are integers. this,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4031, 14869])","tensor([  101,  1531,  1055,  2024, 24028,  1012,  2023,   102])"
152,0,[], PRODUCT NOTATION,seg_31,can be written as,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 4031, 14869])","tensor([ 101, 2064, 2022, 2517, 2004,  102])"
153,1,"['function', 'likelihood function', 'sample', 'likelihood', 'distribution']", PRODUCT NOTATION,seg_31,"for an mle example, let fx(x,  ) be the pdf of a distribution from which a sample x1, x2, · · · , xn of size n is drawn. then, the likelihood function is l(x1, x2, · · · , xn;  ) = ∏j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  2005,  2019, 19875,  2063,  2742,  1010,  2292, 23292,  1006,
         1060,  1010,  1007,  2022,  1996, 11135,  1997,  1037,  4353,  2013,
         2029,  1037,  7099,  1060,  2487,  1010,  1060,  2475,  1010,  1087,
         1087,  1087,  1010,  1060,  2078,  1997,  2946,  1050,  2003,  4567,
         1012,  2059,  1010,  1996, 16593,  3853,  2003,  1048,  1006,  1060,
         2487,  1010,  1060,  2475,  1010,  1087,  1087,  1087,  1010,  1060,
         2078,  1025,  1007,  1027,   100,   102])"
154,1,"['estimated', 'likelihood', 'parameters']", PRODUCT NOTATION,seg_31,"n =1 fx(xi,  ). the unknown parameters are then estimated by maximizing the likelihood or equivalently maximizing the log-likelihood.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  1050,  1027,  1015, 23292,  1006,  8418,  1010,  1007,  1012,
         1996,  4242, 11709,  2024,  2059,  4358,  2011, 20446,  6026,  1996,
        16593,  2030,  5662,  2135, 20446,  6026,  1996,  8833,  1011, 16593,
         1012,   102])"
155,1,['independent'], PRODUCT NOTATION,seg_31,"expressions independent of the indexvars can be taken outside all independent products. for example, consider the product p = ∏j",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101, 11423,  2981,  1997,  1996,  5950, 10755,  2015,  2064,  2022,
         2579,  2648,  2035,  2981,  3688,  1012,  2005,  2742,  1010,  5136,
         1996,  4031,  1052,  1027,   100,   102])"
156,1,['symmetric'], PRODUCT NOTATION,seg_31,"(note that j varies k+1 times and i varies m+1 times). as the expression within the product5 is symmetric in i and j, we could also write it as p = ck+m+2 ∏i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  1006,  3602,  2008,  1046,  9783,  1047,  1009,  1015,  2335,
         1998,  1045,  9783,  1049,  1009,  1015,  2335,  1007,  1012,  2004,
         1996,  3670,  2306,  1996,  4031,  2629,  2003, 19490,  1999,  1045,
         1998,  1046,  1010,  2057,  2071,  2036,  4339,  2009,  2004,  1052,
         1027, 23616,  1009,  1049,  1009,  1016,   100,   102])"
157,1,['case'], PRODUCT NOTATION,seg_31,"k =0  j). in the particular case when u =   (uj =  j), this simplifies to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4031, 14869])","tensor([  101,  1047,  1027,  1014,  1046,  1007,  1012,  1999,  1996,  3327,
         2553,  2043,  1057,  1027,  1006,  1057,  3501,  1027,  1046,  1007,
         1010,  2023, 21934, 24759, 14144,  2000,   102])"
158,1,"['probability distributions', 'probability', 'gamma', 'distributions', 'poisson', 'weibull', 'poisson distributions', 'pareto']", Evaluating Large Powers,seg_33,"expressions of the form xn, (1 − x)n, or  x occur in many probability distributions such as gamma, beta, weibull, pareto, power series, and poisson distributions. in some applications, we need to compute the pdf for just a few x values for a large",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101, 11423,  1997,  1996,  2433,  1060,  2078,  1010,  1006,  1015,
         1597,  1060,  1007,  1050,  1010,  2030,  1060,  5258,  1999,  2116,
         9723, 20611,  2107,  2004, 13091,  1010,  8247,  1010, 11417,  8569,
         3363,  1010, 11968, 18903,  1010,  2373,  2186,  1010,  1998, 13433,
        24077, 20611,  1012,  1999,  2070,  5097,  1010,  2057,  2342,  2000,
        24134,  1996, 11135,  2005,  2074,  1037,  2261,  1060,  5300,  2005,
         1037,  2312,   102])"
159,1,"['efficient', 'method']", Evaluating Large Powers,seg_33,fixed n or large integer values of x for fixed  . there are many ways to evaluate them. the following example first considers an efficient method when the power n is large and then explains the computational details when both x and n are large.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101,  4964,  1050,  2030,  2312, 16109,  5300,  1997,  1060,  2005,
         4964,  1012,  2045,  2024,  2116,  3971,  2000, 16157,  2068,  1012,
         1996,  2206,  2742,  2034, 10592,  2019,  8114,  4118,  2043,  1996,
         2373,  1050,  2003,  2312,  1998,  2059,  7607,  1996, 15078,  4751,
         2043,  2119,  1060,  1998,  1050,  2024,  2312,  1012,   102])"
160,0,['n'], Evaluating Large Powers,seg_33,evaluate xn where n is a large integer.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23208,  2312,  4204])","tensor([  101, 16157,  1060,  2078,  2073,  1050,  2003,  1037,  2312, 16109,
         1012,   102])"
161,1,['cases'], Evaluating Large Powers,seg_33,"solution 1.4 we consider two cases depending on whether n is a power of 2 or not. (i) let n = 2m, where m is an integer. we could evaluate it as xn∕2 ∗ xn∕2, where each of the terms are recursively evaluated.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101,  5576,  1015,  1012,  1018,  2057,  5136,  2048,  3572,  5834,
         2006,  3251,  1050,  2003,  1037,  2373,  1997,  1016,  2030,  2025,
         1012,  1006,  1045,  1007,  2292,  1050,  1027,  1016,  2213,  1010,
         2073,  1049,  2003,  2019, 16109,  1012,  2057,  2071, 16157,  2009,
         2004,   100,  1598,   100,  1010,  2073,  2169,  1997,  1996,  3408,
         2024, 28667,  9236, 14547, 16330,  1012,   102])"
162,1,['case'], Evaluating Large Powers,seg_33,"case (ii): n is not a power of 2. if n is of the form 2k ±  , where v is a small number (say 1,2, or 3), we could still utilize case (i). as examples, n = 15 = 24 − 1, so that x15 = x16∕x, and x67 = x64 ∗ x3. otherwise, we convert n into its binary representation as n = bkbk−1 · · · b1b0, where b0 is the least significant bit (lsb) and bk is the most significant bit (msb). the n and bj",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101,  2553,  1006,  2462,  1007,  1024,  1050,  2003,  2025,  1037,
         2373,  1997,  1016,  1012,  2065,  1050,  2003,  1997,  1996,  2433,
         1016,  2243,  1081,  1010,  2073,  1058,  2003,  1037,  2235,  2193,
         1006,  2360,  1015,  1010,  1016,  1010,  2030,  1017,  1007,  1010,
         2057,  2071,  2145, 16462,  2553,  1006,  1045,  1007,  1012,  2004,
         4973,  1010,  1050,  1027,  2321,  1027,  2484,  1597,  1015,  1010,
         2061,  2008,  1060, 16068,  1027,   100,  1010,  1998,  1060,  2575,
         2581,  1027,  1060, 21084,  1598,  1060,  2509,  1012,  4728,  1010,
         2057, 10463,  1050,  2046,  2049, 12441,  6630,  2004,  1050,  1027,
        23923,  2497,  2243, 27944,  1087,  1087,  1087, 29491,  2497,  2692,
         1010,  2073,  1038,  2692,  2003,  1996,  2560,  3278,  2978,  1006,
         1048, 19022,  1007,  1998, 23923,  2003,  1996,  2087,  3278,  2978,
         1006,  5796,  2497,  1007,  1012,  1996,  1050,  1998,  1038,  3501,
          102])"
163,1,['summation'], Evaluating Large Powers,seg_33,"k =0 bj2j, where we have rearranged the summation index to match significant bits from right",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101,  1047,  1027,  1014,  1038,  3501,  2475,  3501,  1010,  2073,
         2057,  2031,  4373, 24388,  2098,  1996,  7680, 28649,  5950,  2000,
         2674,  3278,  9017,  2013,  2157,   102])"
164,1,['case'], Evaluating Large Powers,seg_33,"k =0 (x2j )bj . as the powers of all x’s are of the form 2k, the case (i) applies for large k. because bj",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101,  1047,  1027,  1014,  1006,  1060,  2475,  3501,  1007,  1038,
         3501,  1012,  2004,  1996,  4204,  1997,  2035,  1060,  1521,  1055,
         2024,  1997,  1996,  2433,  1016,  2243,  1010,  1996,  2553,  1006,
         1045,  1007, 12033,  2005,  2312,  1047,  1012,  2138,  1038,  3501,
          102])"
165,0,[], Evaluating Large Powers,seg_33,′s are binary digits,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([23208,  2312,  4204])","tensor([  101,  1531,  1055,  2024, 12441, 16648,   102])"
166,0,[], Evaluating Large Powers,seg_33,the above-mentioned product could also be expressed as xn = ∏j,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23208,  2312,  4204])","tensor([ 101, 1996, 2682, 1011, 3855, 4031, 2071, 2036, 2022, 5228, 2004, 1060,
        2078, 1027,  100,  102])"
167,1,"['prime number', 'method']", Evaluating Large Powers,seg_33,"k =0, bj=1 (x2j )bj . sequential algorithms convert a decimal number (n 0) into its binary representation using the repeated division by base (=2) method. this generates the binary digits from lsb to msb. we could then check each and every bit to see if it is 1 and accumulate the corresponding product term (x2j )bj immediately. this is especially useful in cryptography applications that work with expressions of the form xp − 1 where p is a very large prime number. as fractions are converted into binary using the repeated multiplication by base method, the above-mentioned discussion is equally applicable to evaluate expressions involving x1∕n too, where n is large.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101,  1047,  1027,  1014,  1010,  1038,  3501,  1027,  1015,  1006,
         1060,  2475,  3501,  1007,  1038,  3501,  1012, 25582, 13792, 10463,
         1037, 26066,  2193,  1006,  1050,  1014,  1007,  2046,  2049, 12441,
         6630,  2478,  1996,  5567,  2407,  2011,  2918,  1006,  1027,  1016,
         1007,  4118,  1012,  2023, 19421,  1996, 12441, 16648,  2013,  1048,
        19022,  2000,  5796,  2497,  1012,  2057,  2071,  2059,  4638,  2169,
         1998,  2296,  2978,  2000,  2156,  2065,  2009,  2003,  1015,  1998,
        27598,  1996,  7978,  4031,  2744,  1006,  1060,  2475,  3501,  1007,
         1038,  3501,  3202,  1012,  2023,  2003,  2926,  6179,  1999, 19888,
         9888,  5097,  2008,  2147,  2007, 11423,  1997,  1996,  2433, 26726,
         1597,  1015,  2073,  1052,  2003,  1037,  2200,  2312,  3539,  2193,
         1012,  2004, 12884,  2015,  2024,  4991,  2046, 12441,  2478,  1996,
         5567, 24856,  2011,  2918,  4118,  1010,  1996,  2682,  1011,  3855,
         6594,  2003,  8053, 12711,  2000, 16157, 11423,  5994,   100,  2205,
         1010,  2073,  1050,  2003,  2312,  1012,   102])"
168,1,"['factorization', 'factorization theorem', 'case']", Evaluating Large Powers,seg_33,"in the particular case when x and n are both very large, we break x using the prime factorization theorem into x = p1",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([ 101, 1999, 1996, 3327, 2553, 2043, 1060, 1998, 1050, 2024, 2119, 2200,
        2312, 1010, 2057, 3338, 1060, 2478, 1996, 3539, 5387, 3989, 9872, 2046,
        1060, 1027, 1052, 2487,  102])"
169,0,[], Evaluating Large Powers,seg_33,k =0 bj2j . this can be simplified into the form,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23208,  2312,  4204])","tensor([  101,  1047,  1027,  1014,  1038,  3501,  2475,  3501,  1012,  2023,
         2064,  2022, 11038,  2046,  1996,  2433,   102])"
170,0,[], Evaluating Large Powers,seg_33,j+1 j j where the inner product is carried out only for bj = 1. note that p2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([23208,  2312,  4204])","tensor([ 101, 1046, 1009, 1015, 1046, 1046, 2073, 1996, 5110, 4031, 2003, 3344,
        2041, 2069, 2005, 1038, 3501, 1027, 1015, 1012, 3602, 2008, 1052, 2475,
         102])"
171,0,[], Evaluating Large Powers,seg_33,"i = p2 i ∗ p2 i . hence, these can be kept in an array and updated in each pass.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([23208,  2312,  4204])","tensor([ 101, 1045, 1027, 1052, 2475, 1045, 1598, 1052, 2475, 1045, 1012, 6516,
        1010, 2122, 2064, 2022, 2921, 1999, 2019, 9140, 1998, 7172, 1999, 2169,
        3413, 1012,  102])"
172,1,"['function', 'statistics']", Evaluating Large Powers,seg_33,"we could also combine multiple products as well as sums and products. multiple products are, however, not of much use in engineering statistics. the index of summation and products could also be a function (say r(j)) of the respective indexvars",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23208,  2312,  4204])","tensor([  101,  2057,  2071,  2036, 11506,  3674,  3688,  2004,  2092,  2004,
        20571,  1998,  3688,  1012,  3674,  3688,  2024,  1010,  2174,  1010,
         2025,  1997,  2172,  2224,  1999,  3330,  6747,  1012,  1996,  5950,
         1997,  7680, 28649,  1998,  3688,  2071,  2036,  2022,  1037,  3853,
         1006,  2360,  1054,  1006,  1046,  1007,  1007,  1997,  1996,  7972,
         5950, 10755,  2015,   102])"
173,0,[], Evaluating Large Powers,seg_33,"as used in [157], page 27–36. an extension is to allow the step size to be any integer  1. for example, when the step size is 2, we get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23208,  2312,  4204])","tensor([  101,  2004,  2109,  1999,  1031, 17403,  1033,  1010,  3931,  2676,
         1516,  4029,  1012,  2019,  5331,  2003,  2000,  3499,  1996,  3357,
         2946,  2000,  2022,  2151, 16109,  1015,  1012,  2005,  2742,  1010,
         2043,  1996,  3357,  2946,  2003,  1016,  1010,  2057,  2131,   102])"
174,1,"['coefficients', 'binomial', 'factorial', 'discrete', 'factorial moments', 'rising and falling factorials', 'falling factorials', 'discrete distributions', 'binomial coefficients', 'distributions', 'moments']", RISING AND FALLING FACTORIALS,seg_35,"this section introduces a particular type of the product form presented earlier. these expressions are useful in finding factorial moments of discrete distributions whose pdf involves factorials or binomial coefficients. in the literature, theseare known as pochhammer’s notation for rising and falling factorials. this will be explored in subsequent chapters.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4803,  1998,  4634,  5387, 26340])","tensor([  101,  2023,  2930, 13999,  1037,  3327,  2828,  1997,  1996,  4031,
         2433,  3591,  3041,  1012,  2122, 11423,  2024,  6179,  1999,  4531,
         5387,  4818,  5312,  1997, 16246, 20611,  3005, 11135,  7336,  5387,
        26340,  2030,  8026, 20936,  2389, 21374,  1012,  1999,  1996,  3906,
         1010,  2122, 12069,  2124,  2004, 13433,  2818, 19742,  1521,  1055,
        14869,  2005,  4803,  1998,  4634,  5387, 26340,  1012,  2023,  2097,
         2022, 10641,  1999,  4745,  9159,  1012,   102])"
175,1,"['rising factorial', 'factorial', 'factorial notation']", RISING AND FALLING FACTORIALS,seg_35,1. rising factorial notation,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4803,  1998,  4634,  5387, 26340])","tensor([  101,  1015,  1012,  4803,  5387,  4818, 14869,   102])"
176,1,"['rising factorial', 'variable', 'factorial']", RISING AND FALLING FACTORIALS,seg_35,"factorial products come in two flavors. in the rising factorial, a variable is incremented successively in each iteration. this is denoted as",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4803,  1998,  4634,  5387, 26340])","tensor([  101,  5387,  4818,  3688,  2272,  1999,  2048, 26389,  1012,  1999,
         1996,  4803,  5387,  4818,  1010,  1037,  8023,  2003,  4297, 28578,
        14088, 24288,  1999,  2169, 27758,  1012,  2023,  2003, 19537,  2004,
          102])"
177,1,"['falling factorial', 'factorial', 'factorial notation']", RISING AND FALLING FACTORIALS,seg_35,2. falling factorial notation,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4803,  1998,  4634,  5387, 26340])","tensor([  101,  1016,  1012,  4634,  5387,  4818, 14869,   102])"
178,1,"['falling factorial', 'variable', 'factorial']", RISING AND FALLING FACTORIALS,seg_35,"in the falling factorial, a variable is decremented successively at each iteration. this is denoted as",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4803,  1998,  4634,  5387, 26340])","tensor([  101,  1999,  1996,  4634,  5387,  4818,  1010,  1037,  8023,  2003,
        11703, 28578, 14088, 24288,  2012,  2169, 27758,  1012,  2023,  2003,
        19537,  2004,   102])"
179,1,"['moments', 'distribution', 'statistical', 'significance']", MOMENTS AND CUMULANTS,seg_37,moments of a distribution are denoted by the greek letter . they have great theoretical significance in statistical distribution theory. moments can be defined about any arbitrary constant “c” as,tensor(1),"tensor([0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([  101,  5312,  1997,  1037,  4353,  2024, 19537,  2011,  1996,  3306,
         3661,  1012,  2027,  2031,  2307,  9373,  7784,  1999,  7778,  4353,
         3399,  1012,  5312,  2064,  2022,  4225,  2055,  2151, 15275,  5377,
         1523,  1039,  1524,  2004,   102])"
180,1,"['distributions', 'discrete distributions', 'discrete']", MOMENTS AND CUMULANTS,seg_37,"⎧ (x − c)nf (x), for discrete distributions ⎪∑  n(c) = e(x − c)n = ⎨ x (1.44)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([  101,   100,  1006,  1060,  1597,  1039,  1007,  1050,  2546,  1006,
         1060,  1007,  1010,  2005, 16246, 20611,   100,  1050,  1006,  1039,
         1007,  1027,  1041,  1006,  1060,  1597,  1039,  1007,  1050,  1027,
          100,  1060,  1006,  1015,  1012,  4008,  1007,   102])"
181,1,"['continuous', 'continuous distributions', 'distributions']", MOMENTS AND CUMULANTS,seg_37,"⎪⎩∫x(x − c)nf (x)dx, for continuous distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([  101,   100,  1006,  1060,  1597,  1039,  1007,  1050,  2546,  1006,
         1060,  1007,  1040,  2595,  1010,  2005,  7142, 20611,  1012,   102])"
182,1,['moments'], MOMENTS AND CUMULANTS,seg_37,"if c = 0 in this definition, we get raw moments, and when c =  1 =  , we get the central moments.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([ 101, 2065, 1039, 1027, 1014, 1999, 2023, 6210, 1010, 2057, 2131, 6315,
        5312, 1010, 1998, 2043, 1039, 1027, 1015, 1027, 1010, 2057, 2131, 1996,
        2430, 5312, 1012,  102])"
183,1,"['moments', 'sample', 'sample moments']", MOMENTS AND CUMULANTS,seg_37,the corresponding sample moments are analogously defined as mk(c) =,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([  101,  1996,  7978,  7099,  5312,  2024, 19639,  2135,  4225,  2004,
        12395,  1006,  1039,  1007,  1027,   102])"
184,1,"['mean', 'function', 'moment', 'cauchy', 'sample', 'method', 'moments', 'population', 'standard', 'cauchy distribution', 'distribution', 'moment generating function', 'sample moments', 'sample mean']", MOMENTS AND CUMULANTS,seg_37,"n =1 (xj − c)kf (xj). the population moments may not always exist, but the sample moments will always exist. for example, the mean of a standard cauchy distribution does not exist, however, the sample mean exists. the moment generating function (mgf) provides a convenient method to express population moments. it is defined",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([  101,  1050,  1027,  1015,  1006,  1060,  3501,  1597,  1039,  1007,
         1047,  2546,  1006,  1060,  3501,  1007,  1012,  1996,  2313,  5312,
         2089,  2025,  2467,  4839,  1010,  2021,  1996,  7099,  5312,  2097,
         2467,  4839,  1012,  2005,  2742,  1010,  1996,  2812,  1997,  1037,
         3115,  6187, 10875,  2100,  4353,  2515,  2025,  4839,  1010,  2174,
         1010,  1996,  7099,  2812,  6526,  1012,  1996,  2617, 11717,  3853,
         1006, 11460,  2546,  1007,  3640,  1037, 14057,  4118,  2000,  4671,
         2313,  5312,  1012,  2009,  2003,  4225,   102])"
185,1,"['function', 'cumulant']", MOMENTS AND CUMULANTS,seg_37,"the logarithm of the mgf is called cumulant generating function (kgf). symbolically,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([  101,  1996,  8833,  8486,  2705,  2213,  1997,  1996, 11460,  2546,
         2003,  2170, 13988,  7068,  3372, 11717,  3853,  1006,  4705,  2546,
         1007,  1012, 12613,  3973,  1010,   102])"
186,1,['functions'], MOMENTS AND CUMULANTS,seg_37,see also equation (1.33) in pp. 1–31. l-moment is an extension that is discussed in ref. 145. a thorough discussion of generating functions appears in chapter 9.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5312,  1998, 13988,  7068,  7666])","tensor([  101,  2156,  2036,  8522,  1006,  1015,  1012,  3943,  1007,  1999,
         4903,  1012,  1015,  1516,  2861,  1012,  1048,  1011,  2617,  2003,
         2019,  5331,  2008,  2003,  6936,  1999, 25416,  1012, 13741,  1012,
         1037, 16030,  6594,  1997, 11717,  4972,  3544,  1999,  3127,  1023,
         1012,   102])"
187,1,"['mean', 'test statistic', 'linear', 'variance', 'data', 'change of scale', 'analysis of variance', 'linear transformation', 'anova', 'statistical', 'statistic', 'transformation', 'test']", DATA TRANSFORMATIONS,seg_39,"data transformation is used in various statistical analyses. it is especially useful in hand computations when the numbers involved are too large or too small. computing summary measures such as mean and variance of large numbers can be simplified using linear transformation techniques discussed in the following. similarly, as the test statistic in analysis of variance (anova) computations involves the ratio of sums of squares, a change of scale transformation is applicable. if the spread (variance) of data are too large or too small, an appropriate change of scale transformation can ease the visualization of data.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 2951, 21865])","tensor([  101,  2951,  8651,  2003,  2109,  1999,  2536,  7778, 16478,  1012,
         2009,  2003,  2926,  6179,  1999,  2192, 22334,  2015,  2043,  1996,
         3616,  2920,  2024,  2205,  2312,  2030,  2205,  2235,  1012,  9798,
        12654,  5761,  2107,  2004,  2812,  1998, 23284,  1997,  2312,  3616,
         2064,  2022, 11038,  2478,  7399,  8651,  5461,  6936,  1999,  1996,
         2206,  1012,  6660,  1010,  2004,  1996,  3231, 28093,  6553,  1999,
         4106,  1997, 23284,  1006,  2019,  7103,  1007, 22334,  2015,  7336,
         1996,  6463,  1997, 20571,  1997, 14320,  1010,  1037,  2689,  1997,
         4094,  8651,  2003, 12711,  1012,  2065,  1996,  3659,  1006, 23284,
         1007,  1997,  2951,  2024,  2205,  2312,  2030,  2205,  2235,  1010,
         2019,  6413,  2689,  1997,  4094,  8651,  2064,  7496,  1996,  5107,
         3989,  1997,  2951,  1012,   102])"
188,1,"['sample', 'data']", Change of Origin,seg_41,"as the name implies, this shifts all data points linearly (by subtracting or adding a constant from each sample value) as y = x − c. the constant c (positive or negative) is preferably an integer when sample values are all integers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([2689, 1997, 4761])","tensor([  101,  2004,  1996,  2171, 12748,  1010,  2023, 12363,  2035,  2951,
         2685,  7399,  2135,  1006,  2011,  4942,  6494, 11873,  2030,  5815,
         1037,  5377,  2013,  2169,  7099,  3643,  1007,  2004,  1061,  1027,
         1060,  1597,  1039,  1012,  1996,  5377,  1039,  1006,  3893,  2030,
         4997,  1007,  2003,  9544,  8231,  2019, 16109,  2043,  7099,  5300,
         2024,  2035, 24028,  1012,   102])"
189,0,[], Change of Origin,seg_41,example 1.5 reservoir inflow,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2689, 1997, 4761])","tensor([  101,  2742,  1015,  1012,  1019,  8071,  1999, 12314,   102])"
190,1,"['change of origin', 'mean', 'method']", Change of Origin,seg_41,"the amount of water inflow into a reservoir during 6 hours in cubic feet is x = {286, 254, 242, 247, 255, 270}. apply the change of origin method and find the mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([2689, 1997, 4761])","tensor([  101,  1996,  3815,  1997,  2300,  1999, 12314,  2046,  1037,  8071,
         2076,  1020,  2847,  1999, 11919,  2519,  2003,  1060,  1027,  1063,
        24921,  1010, 22234,  1010, 22431,  1010, 23380,  1010, 20637,  1010,
        13756,  1065,  1012,  6611,  1996,  2689,  1997,  4761,  4118,  1998,
         2424,  1996,  2812,  1012,   102])"
191,1,['observation'], Change of Origin,seg_41,"solution 1.5 we subtract 240 (chosen arbitrarily) from each observation to get xi ′ = xi − 240 as x′ = {46, 14, 2, 7, 15, 30}, from which ∑ixi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761])","tensor([  101,  5576,  1015,  1012,  1019,  2057,  4942,  6494,  6593, 11212,
         1006,  4217, 12098, 16313, 19848,  6588,  1007,  2013,  2169,  8089,
         2000,  2131,  8418,  1531,  1027,  8418,  1597, 11212,  2004,  1060,
         1531,  1027,  1063,  4805,  1010,  2403,  1010,  1016,  1010,  1021,
         1010,  2321,  1010,  2382,  1065,  1010,  2013,  2029,   100,   102])"
192,1,"['mean', 'data']", Change of Origin,seg_41,′ = 114. the mean ′ of x′ is x = 114∕6 = 19. the mean of the original data is 240 + 19 = 259 = x.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761])","tensor([  101,  1531,  1027, 12457,  1012,  1996,  2812,  1531,  1997,  1060,
         1531,  2003,  1060,  1027,   100,  1027,  2539,  1012,  1996,  2812,
         1997,  1996,  2434,  2951,  2003, 11212,  1009,  2539,  1027, 25191,
         1027,  1060,  1012,   102])"
193,1,"['change of origin', 'range', 'data', 'transformation']", Change of Origin,seg_41,it is trivial to prove that the range of original data is preserved by a change of origin transformation because (xn − k) − (x1 − k) = xn − x1 and (xn + k) − (x1 + k) = xn − x1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761])","tensor([  101,  2009,  2003, 20610,  2000,  6011,  2008,  1996,  2846,  1997,
         2434,  2951,  2003,  6560,  2011,  1037,  2689,  1997,  4761,  8651,
         2138,  1006,  1060,  2078,  1597,  1047,  1007,  1597,  1006,  1060,
         2487,  1597,  1047,  1007,  1027,  1060,  2078,  1597,  1060,  2487,
         1998,  1006,  1060,  2078,  1009,  1047,  1007,  1597,  1006,  1060,
         2487,  1009,  1047,  1007,  1027,  1060,  2078,  1597,  1060,  2487,
         1012,   102])"
194,1,"['variability', 'observation', 'observations', 'sample']", Change of Scale,seg_43,"this technique divides each large observation by the same constant ( 1). this is useful when numbers are large and has high variability. examples are family income, total insured amounts, annual insurance premiums, defaulting loan amounts, advertising expenses in various media and regions, and so on. let x1, x2, ..xn be “n” sample values and c be a nonzero constant. define yi = xi∕c. if c is less than the minimum of the observations, each of the yi’s are greater than 1, if xi’s are positive. similarly, if c is greater than the maximum of the observations, each yi’s are less than 1. for values of c between minimum and maximum of the sample, we get values on the real line (positive real line if all xi’s are positive). if all values are small fractions, we may multiply by a constant to scale them up.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4094])","tensor([  101,  2023,  6028, 20487,  2169,  2312,  8089,  2011,  1996,  2168,
         5377,  1006,  1015,  1007,  1012,  2023,  2003,  6179,  2043,  3616,
         2024,  2312,  1998,  2038,  2152, 28436,  1012,  4973,  2024,  2155,
         3318,  1010,  2561, 16021, 12165,  8310,  1010,  3296,  5427, 12882,
         2015,  1010, 12398,  2075,  5414,  8310,  1010,  6475, 11727,  1999,
         2536,  2865,  1998,  4655,  1010,  1998,  2061,  2006,  1012,  2292,
         1060,  2487,  1010,  1060,  2475,  1010,  1012,  1012,  1060,  2078,
         2022,  1523,  1050,  1524,  7099,  5300,  1998,  1039,  2022,  1037,
         2512,  6290,  2080,  5377,  1012,  9375, 12316,  1027,   100,  1012,
         2065,  1039,  2003,  2625,  2084,  1996,  6263,  1997,  1996,  9420,
         1010,  2169,  1997,  1996, 12316,  1521,  1055,  2024,  3618,  2084,
         1015,  1010,  2065,  8418,  1521,  1055,  2024,  3893,  1012,  6660,
         1010,  2065,  1039,  2003,  3618,  2084,  1996,  4555,  1997,  1996,
         9420,  1010,  2169, 12316,  1521,  1055,  2024,  2625,  2084,  1015,
         1012,  2005,  5300,  1997,  1039,  2090,  6263,  1998,  4555,  1997,
         1996,  7099,  1010,  2057,  2131,  5300,  2006,  1996,  2613,  2240,
         1006,  3893,  2613,  2240,  2065,  2035,  8418,  1521,  1055,  2024,
         3893,  1007,  1012,  2065,  2035,  5300,  2024,  2235, 12884,  2015,
         1010,  2057,  2089,  4800, 22086,  2011,  1037,  5377,  2000,  4094,
         2068,  2039,  1012,   102])"
195,1,"['mean', 'change of scale']", Change of Scale,seg_43,example 1.6 change of scale to find the mean,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.])","tensor([2689, 1997, 4094])","tensor([ 101, 2742, 1015, 1012, 1020, 2689, 1997, 4094, 2000, 2424, 1996, 2812,
         102])"
196,1,"['mean', 'data', 'measurements']", Change of Scale,seg_43,"error measurements of a device are as follows. scale the data and find the mean:- x = {0.001, 0.006, 0.0095, 0.015, 0.03}.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4094])","tensor([  101,  7561, 11702,  1997,  1037,  5080,  2024,  2004,  4076,  1012,
         4094,  1996,  2951,  1998,  2424,  1996,  2812,  1024,  1011,  1060,
         1027,  1063,  1014,  1012, 25604,  1010,  1014,  1012,  4002,  2575,
         1010,  1014,  1012,  4002,  2683,  2629,  1010,  1014,  1012,  5890,
         2629,  1010,  1014,  1012,  6021,  1065,  1012,   102])"
197,1,['mean'], Change of Scale,seg_43,"solution 1.6 choose c = 1000 and scale using yi = cxi to get y = {1, 6, 9.5, 15, 30}. this is an example of decimal scaling in which the decimal point is moved by multiplying/dividing by a power of 10. the mean of y is y = 61.5∕5 = 12.3 and thus the mean of x is x = 0.0123.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4094])","tensor([  101,  5576,  1015,  1012,  1020,  5454,  1039,  1027,  6694,  1998,
         4094,  2478, 12316,  1027,  1039,  9048,  2000,  2131,  1061,  1027,
         1063,  1015,  1010,  1020,  1010,  1023,  1012,  1019,  1010,  2321,
         1010,  2382,  1065,  1012,  2023,  2003,  2019,  2742,  1997, 26066,
        25169,  1999,  2029,  1996, 26066,  2391,  2003,  2333,  2011,  4800,
        22086,  2075,  1013, 16023,  2011,  1037,  2373,  1997,  2184,  1012,
         1996,  2812,  1997,  1061,  2003,  1061,  1027,  6079,  1012,   100,
         1027,  2260,  1012,  1017,  1998,  2947,  1996,  2812,  1997,  1060,
         2003,  1060,  1027,  1014,  1012,  5890, 21926,  1012,   102])"
198,1,"['transformed', 'intervals', 'data']", Change of Origin and Scale,seg_45,"this is the most frequently used technique to standardize data values. depending on the constants used to change the origin and scale, a variety of transformed intervals can be obtained.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0.])","tensor([2689, 1997, 4761, 1998, 4094])","tensor([  101,  2023,  2003,  1996,  2087,  4703,  2109,  6028,  2000,  3115,
         4697,  2951,  5300,  1012,  5834,  2006,  1996,  5377,  2015,  2109,
         2000,  2689,  1996,  4761,  1998,  4094,  1010,  1037,  3528,  1997,
         8590, 14025,  2064,  2022,  4663,  1012,   102])"
199,1,"['range', 'interval', 'transformed', 'sample', 'transformation']", Change of Origin and Scale,seg_45,"theorem 1.1 a sample in the range (a,b) can be transformed to a new interval (c, d) by the transformation y = c + [(d − c)∕(b − a)] ∗ (x − a).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2689, 1997, 4761, 1998, 4094])","tensor([  101,  9872,  1015,  1012,  1015,  1037,  7099,  1999,  1996,  2846,
         1006,  1037,  1010,  1038,  1007,  2064,  2022,  8590,  2000,  1037,
         2047, 13483,  1006,  1039,  1010,  1040,  1007,  2011,  1996,  8651,
         1061,  1027,  1039,  1009,  1031,  1006,  1040,  1597,  1039,  1007,
          100,  1006,  1038,  1597,  1037,  1007,  1033,  1598,  1006,  1060,
         1597,  1037,  1007,  1012,   102])"
200,1,"['intervals', 'range']", Change of Origin and Scale,seg_45,"proof: by putting x = a in the expression gives y = c. putting x = b gives y = c + [(d − c)∕(b − a)] ∗ (b − a) = c + (d − c) = d. as (x − a)∕(b − a) and (y − c)∕(d − c) both map points in the respective intervals to the [0,1] range, all intermediate values in (a,b) get mapped to a value in (c,d) range. this proves the result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761, 1998, 4094])","tensor([  101,  6947,  1024,  2011,  5128,  1060,  1027,  1037,  1999,  1996,
         3670,  3957,  1061,  1027,  1039,  1012,  5128,  1060,  1027,  1038,
         3957,  1061,  1027,  1039,  1009,  1031,  1006,  1040,  1597,  1039,
         1007,   100,  1006,  1038,  1597,  1037,  1007,  1033,  1598,  1006,
         1038,  1597,  1037,  1007,  1027,  1039,  1009,  1006,  1040,  1597,
         1039,  1007,  1027,  1040,  1012,  2004,  1006,  1060,  1597,  1037,
         1007,   100,  1006,  1038,  1597,  1037,  1007,  1998,  1006,  1061,
         1597,  1039,  1007,   100,  1006,  1040,  1597,  1039,  1007,  2119,
         4949,  2685,  1999,  1996,  7972, 14025,  2000,  1996,  1031,  1014,
         1010,  1015,  1033,  2846,  1010,  2035,  7783,  5300,  1999,  1006,
         1037,  1010,  1038,  1007,  2131, 17715,  2000,  1037,  3643,  1999,
         1006,  1039,  1010,  1040,  1007,  2846,  1012,  2023, 16481,  1996,
         2765,  1012,   102])"
201,1,"['transform', 'data', 'range']", Change of Origin and Scale,seg_45,"amount of fluoride (in milligrams) in drinking water collected from six places are [60, 90, 118, 150, 165, 170]. transform the data to the range [10, 60].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761, 1998, 4094])","tensor([  101,  3815,  1997, 19857, 10050,  3207,  1006,  1999,  4971,  8004,
         6444,  2015,  1007,  1999,  5948,  2300,  5067,  2013,  2416,  3182,
         2024,  1031,  3438,  1010,  3938,  1010, 12963,  1010,  5018,  1010,
        13913,  1010, 10894,  1033,  1012, 10938,  1996,  2951,  2000,  1996,
         2846,  1031,  2184,  1010,  3438,  1033,  1012,   102])"
202,1,['transformation'], Change of Origin and Scale,seg_45,"solution 1.7 here a = 60, b = 170, c = 10, d = 60. thus (d − c)∕(b − a) = (60 − 10)∕(170 − 60) = 5∕11. hence, the required transformation is yi = 10 + (5∕11)(xi − 60). substitute each successive value of x to get y = [10, 23.6364, 36.3636, 50.9091, 57.7273, 60].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761, 1998, 4094])","tensor([  101,  5576,  1015,  1012,  1021,  2182,  1037,  1027,  3438,  1010,
         1038,  1027, 10894,  1010,  1039,  1027,  2184,  1010,  1040,  1027,
         3438,  1012,  2947,  1006,  1040,  1597,  1039,  1007,   100,  1006,
         1038,  1597,  1037,  1007,  1027,  1006,  3438,  1597,  2184,  1007,
          100,  1006, 10894,  1597,  3438,  1007,  1027,   100,  1012,  6516,
         1010,  1996,  3223,  8651,  2003, 12316,  1027,  2184,  1009,  1006,
          100,  1007,  1006,  8418,  1597,  3438,  1007,  1012,  7681,  2169,
        11165,  3643,  1997,  1060,  2000,  2131,  1061,  1027,  1031,  2184,
         1010,  2603,  1012,  6191, 21084,  1010,  4029,  1012,  4029, 21619,
         1010,  2753,  1012,  3938,  2683,  2487,  1010,  5401,  1012,  5824,
         2581,  2509,  1010,  3438,  1033,  1012,   102])"
203,1,"['range', 'interval', 'transformed', 'sample', 'transformation']", Change of Origin and Scale,seg_45,"corollary 1 prove that the sample x in the range (a,b) can be transformed to a new interval (c,d) by the transformation",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([2689, 1997, 4761, 1998, 4094])","tensor([  101,  2522, 28402,  5649,  1015,  6011,  2008,  1996,  7099,  1060,
         1999,  1996,  2846,  1006,  1037,  1010,  1038,  1007,  2064,  2022,
         8590,  2000,  1037,  2047, 13483,  1006,  1039,  1010,  1040,  1007,
         2011,  1996,  8651,   102])"
204,1,"['interval', 'sample', 'transformation']", MinMax Transformation,seg_47,"this transformation is used to map any sample values to the interval [0, 1], [−1, +1], and so on.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  2023,  8651,  2003,  2109,  2000,  4949,  2151,  7099,  5300,
         2000,  1996, 13483,  1031,  1014,  1010,  1015,  1033,  1010,  1031,
         1597,  2487,  1010,  1009,  1015,  1033,  1010,  1998,  2061,  2006,
         1012,   102])"
205,1,"['range', 'transformation', 'interval', 'numeric variable', 'sample', 'variable']", MinMax Transformation,seg_47,"theorem 1.2 any numeric variable x in the interval (xmin, xmax) can be transformed to a new interval [0, 1] by the transformation y = (x − xmin)∕r, where r = (xmax − xmin) is the range and xmin, xmax are the minimum and maximum of the sample values.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  9872,  1015,  1012,  1016,  2151, 16371, 25531,  8023,  1060,
         1999,  1996, 13483,  1006,  1060, 10020,  1010,  1060, 17848,  1007,
         2064,  2022,  8590,  2000,  1037,  2047, 13483,  1031,  1014,  1010,
         1015,  1033,  2011,  1996,  8651,  1061,  1027,  1006,  1060,  1597,
         1060, 10020,  1007,   100,  1010,  2073,  1054,  1027,  1006,  1060,
        17848,  1597,  1060, 10020,  1007,  2003,  1996,  2846,  1998,  1060,
        10020,  1010,  1060, 17848,  2024,  1996,  6263,  1998,  4555,  1997,
         1996,  7099,  5300,  1012,   102])"
206,0,[], MinMax Transformation,seg_47,"proof: substituting x = xmin gives y = 0 and x = xmax gives y = 1. hence, the transformed values are mapped to [0, 1].",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8117, 17848,  8651])","tensor([  101,  6947,  1024,  4942, 21532,  1060,  1027,  1060, 10020,  3957,
         1061,  1027,  1014,  1998,  1060,  1027,  1060, 17848,  3957,  1061,
         1027,  1015,  1012,  6516,  1010,  1996,  8590,  5300,  2024, 17715,
         2000,  1031,  1014,  1010,  1015,  1033,  1012,   102])"
207,1,"['data', 'range']", MinMax Transformation,seg_47,"transform the fluoride data in page 1–38 into the [0,1] range.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101, 10938,  1996, 19857, 10050,  3207,  2951,  1999,  3931,  1015,
         1516,  4229,  2046,  1996,  1031,  1014,  1010,  1015,  1033,  2846,
         1012,   102])"
208,1,"['change of origin', 'range', 'interval', 'sample', 'change of origin and scale', 'transformation']", MinMax Transformation,seg_47,"lemma 1 a sample x in any finite range can be mapped to the interval [−1, +1] by a simple change of origin and scale transformation.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  3393, 14760,  1015,  1037,  7099,  1060,  1999,  2151, 10713,
         2846,  2064,  2022, 17715,  2000,  1996, 13483,  1031,  1597,  2487,
         1010,  1009,  1015,  1033,  2011,  1037,  3722,  2689,  1997,  4761,
         1998,  4094,  8651,  1012,   102])"
209,1,"['interval', 'transformation']", MinMax Transformation,seg_47,"proof: consider the transformation y = 2 ∗ [(x − xmin)∕r] − 1, where r = (xmax − xmin). when x = xmin, y becomes −1 and when x = xmax, y = +1. all intermediate values are mapped to points within the interval [−1,+1]. thus the result. this holds even if xmin is negative.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  6947,  1024,  5136,  1996,  8651,  1061,  1027,  1016,  1598,
         1031,  1006,  1060,  1597,  1060, 10020,  1007,   100,  1033,  1597,
         1015,  1010,  2073,  1054,  1027,  1006,  1060, 17848,  1597,  1060,
        10020,  1007,  1012,  2043,  1060,  1027,  1060, 10020,  1010,  1061,
         4150,  1597,  2487,  1998,  2043,  1060,  1027,  1060, 17848,  1010,
         1061,  1027,  1009,  1015,  1012,  2035,  7783,  5300,  2024, 17715,
         2000,  2685,  2306,  1996, 13483,  1031,  1597,  2487,  1010,  1009,
         1015,  1033,  1012,  2947,  1996,  2765,  1012,  2023,  4324,  2130,
         2065,  1060, 10020,  2003,  4997,  1012,   102])"
210,1,"['interval', 'data']", MinMax Transformation,seg_47,"transform the data [ 34, 43, 55, 62, 68, 74] to the interval [−1, +1].",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101, 10938,  1996,  2951,  1031,  4090,  1010,  4724,  1010,  4583,
         1010,  5786,  1010,  6273,  1010,  6356,  1033,  2000,  1996, 13483,
         1031,  1597,  2487,  1010,  1009,  1015,  1033,  1012,   102])"
211,1,"['range', 'transformed', 'data']", MinMax Transformation,seg_47,"solution 1.9 here, the minimum is 34 and maximum is 74. thus, the range is 40. using lemma 1, we get the transformed data as y = [2 ∗ (x − 34)∕40] − 1 = [−1,−0.55, 0.05, 0.40, 0.70,+1].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  5576,  1015,  1012,  1023,  2182,  1010,  1996,  6263,  2003,
         4090,  1998,  4555,  2003,  6356,  1012,  2947,  1010,  1996,  2846,
         2003,  2871,  1012,  2478,  3393, 14760,  1015,  1010,  2057,  2131,
         1996,  8590,  2951,  2004,  1061,  1027,  1031,  1016,  1598,  1006,
         1060,  1597,  4090,  1007,   100,  1033,  1597,  1015,  1027,  1031,
         1597,  2487,  1010,  1597,  2692,  1012,  4583,  1010,  1014,  1012,
         5709,  1010,  1014,  1012,  2871,  1010,  1014,  1012,  3963,  1010,
         1009,  1015,  1033,  1012,   102])"
212,1,"['range', 'sample', 'transformation']", MinMax Transformation,seg_47,"theorem 1.3 a sample x in any finite range with at least two elements can be mapped to the range y = [−k,+k] by the transformation",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  9872,  1015,  1012,  1017,  1037,  7099,  1060,  1999,  2151,
        10713,  2846,  2007,  2012,  2560,  2048,  3787,  2064,  2022, 17715,
         2000,  1996,  2846,  1061,  1027,  1031,  1597,  2243,  1010,  1009,
         1047,  1033,  2011,  1996,  8651,   102])"
213,0,[], MinMax Transformation,seg_47,proof: putting x = xmin gives y = r,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8117, 17848,  8651])","tensor([  101,  6947,  1024,  5128,  1060,  1027,  1060, 10020,  3957,  1061,
         1027,  1054,   102])"
214,0,[], MinMax Transformation,seg_47,because r = (xmax − xmin). putting x = xmax gives y = r,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8117, 17848,  8651])","tensor([  101,  2138,  1054,  1027,  1006,  1060, 17848,  1597,  1060, 10020,
         1007,  1012,  5128,  1060,  1027,  1060, 17848,  3957,  1061,  1027,
         1054,   102])"
215,1,['interval'], MinMax Transformation,seg_47,"k [2 ∗ xmax − (xmin + xmax)] = +k. all intermediate values are mapped to the interval (−k,+k). for instance xc = (xmin + xmax)∕2 gets mapped to 0. this proves the result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  1047,  1031,  1016,  1598,  1060, 17848,  1597,  1006,  1060,
        10020,  1009,  1060, 17848,  1007,  1033,  1027,  1009,  1047,  1012,
         2035,  7783,  5300,  2024, 17715,  2000,  1996, 13483,  1006,  1597,
         2243,  1010,  1009,  1047,  1007,  1012,  2005,  6013,  1060,  2278,
         1027,  1006,  1060, 10020,  1009,  1060, 17848,  1007,   100,  4152,
        17715,  2000,  1014,  1012,  2023, 16481,  1996,  2765,  1012,   102])"
216,1,"['intervals', 'data']", MinMax Transformation,seg_47,"transform the above-mentioned data into the intervals [−0.5, +0.5], and [−3, +3].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101, 10938,  1996,  2682,  1011,  3855,  2951,  2046,  1996, 14025,
         1031,  1597,  2692,  1012,  1019,  1010,  1009,  1014,  1012,  1019,
         1033,  1010,  1998,  1031,  1597,  2509,  1010,  1009,  1017,  1033,
         1012,   102])"
217,1,"['transformation', 'range']", MinMax Transformation,seg_47,"solution 1.10 here k = 0.5, so that k∕r = 0.5∕(74 − 34) = 0.0125, xmin + xmax = 74 + 34 = 108, giving the transformation y = 0.0125 ∗ (2 ∗ x − 108). resulting y vector is [−0.5,−0.275, 0.025, 0.20, 0.35, 0.5]. for the [−3,+3] range, k = 3 and k∕r = 3∕40 = 0.075, giving the transformation y = 0.075 ∗ (2 ∗ x − 108). resulting values are [−3,−1.65, 0.15, 1.2, 2.1, 3].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  5576,  1015,  1012,  2184,  2182,  1047,  1027,  1014,  1012,
         1019,  1010,  2061,  2008,   100,  1027,  1014,  1012,   100,  1006,
         6356,  1597,  4090,  1007,  1027,  1014,  1012,  5890, 17788,  1010,
         1060, 10020,  1009,  1060, 17848,  1027,  6356,  1009,  4090,  1027,
        10715,  1010,  3228,  1996,  8651,  1061,  1027,  1014,  1012,  5890,
        17788,  1598,  1006,  1016,  1598,  1060,  1597, 10715,  1007,  1012,
         4525,  1061,  9207,  2003,  1031,  1597,  2692,  1012,  1019,  1010,
         1597,  2692,  1012, 17528,  1010,  1014,  1012,  6185,  2629,  1010,
         1014,  1012,  2322,  1010,  1014,  1012,  3486,  1010,  1014,  1012,
         1019,  1033,  1012,  2005,  1996,  1031,  1597,  2509,  1010,  1009,
         1017,  1033,  2846,  1010,  1047,  1027,  1017,  1998,   100,  1027,
          100,  1027,  1014,  1012,  5718,  2629,  1010,  3228,  1996,  8651,
         1061,  1027,  1014,  1012,  5718,  2629,  1598,  1006,  1016,  1598,
         1060,  1597, 10715,  1007,  1012,  4525,  5300,  2024,  1031,  1597,
         2509,  1010,  1597,  2487,  1012,  3515,  1010,  1014,  1012,  2321,
         1010,  1015,  1012,  1016,  1010,  1016,  1012,  1015,  1010,  1017,
         1033,  1012,   102])"
218,1,"['sample', 'case']", MinMax Transformation,seg_47,"remark 1 in the particular case when the sample has just two elements, they are mapped exactly to −k and +k respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101, 17674,  1015,  1999,  1996,  3327,  2553,  2043,  1996,  7099,
         2038,  2074,  2048,  3787,  1010,  2027,  2024, 17715,  3599,  2000,
         1597,  2243,  1998,  1009,  1047,  4414,  1012,   102])"
219,1,['sample'], MinMax Transformation,seg_47,"proof: consider a sample (x,y) of size two. rearrange them such that xmin = x, xmax = y or vice versa. substituting in equation 1.3, xmin and xmax gets mapped to −k and +k, respectively.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  6947,  1024,  5136,  1037,  7099,  1006,  1060,  1010,  1061,
         1007,  1997,  2946,  2048,  1012,  4373, 24388,  2063,  2068,  2107,
         2008,  1060, 10020,  1027,  1060,  1010,  1060, 17848,  1027,  1061,
         2030,  3580, 18601,  1012,  4942, 21532,  1999,  8522,  1015,  1012,
         1017,  1010,  1060, 10020,  1998,  1060, 17848,  4152, 17715,  2000,
         1597,  2243,  1998,  1009,  1047,  1010,  4414,  1012,   102])"
220,1,"['transform', 'data', 'interval']", MinMax Transformation,seg_47,"the incomes of six families are [34,000, 43,000, 55,000, 62,000, 68,000, 74,000]. transform the data to the interval [−1, +1].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  1996, 29373,  1997,  2416,  2945,  2024,  1031,  4090,  1010,
         2199,  1010,  4724,  1010,  2199,  1010,  4583,  1010,  2199,  1010,
         5786,  1010,  2199,  1010,  6273,  1010,  2199,  1010,  6356,  1010,
         2199,  1033,  1012, 10938,  1996,  2951,  2000,  1996, 13483,  1031,
         1597,  2487,  1010,  1009,  1015,  1033,  1012,   102])"
221,1,"['data', 'transformation']", MinMax Transformation,seg_47,"solution 1.11 we will choose c = 10, 000 and divide each value by c to get x′ = [3.4, 4.3, 5.5, 6.2, 6.8, 7.4]. here r = (7.4 − 3.4) = 4, k = 1 and (xmin + xmax) = 3.4 + 7.4 = 10.8, giving the transformation y = 0.25 ∗ (2 ∗ x − 10.8) where x varies over the original data values. the resulting y vector is [−1,−0.55, 0.05, 0.40, 0.70,+1].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8117, 17848,  8651])","tensor([  101,  5576,  1015,  1012,  2340,  2057,  2097,  5454,  1039,  1027,
         2184,  1010,  2199,  1998, 11443,  2169,  3643,  2011,  1039,  2000,
         2131,  1060,  1531,  1027,  1031,  1017,  1012,  1018,  1010,  1018,
         1012,  1017,  1010,  1019,  1012,  1019,  1010,  1020,  1012,  1016,
         1010,  1020,  1012,  1022,  1010,  1021,  1012,  1018,  1033,  1012,
         2182,  1054,  1027,  1006,  1021,  1012,  1018,  1597,  1017,  1012,
         1018,  1007,  1027,  1018,  1010,  1047,  1027,  1015,  1998,  1006,
         1060, 10020,  1009,  1060, 17848,  1007,  1027,  1017,  1012,  1018,
         1009,  1021,  1012,  1018,  1027,  2184,  1012,  1022,  1010,  3228,
         1996,  8651,  1061,  1027,  1014,  1012,  2423,  1598,  1006,  1016,
         1598,  1060,  1597,  2184,  1012,  1022,  1007,  2073,  1060,  9783,
         2058,  1996,  2434,  2951,  5300,  1012,  1996,  4525,  1061,  9207,
         2003,  1031,  1597,  2487,  1010,  1597,  2692,  1012,  4583,  1010,
         1014,  1012,  5709,  1010,  1014,  1012,  2871,  1010,  1014,  1012,
         3963,  1010,  1009,  1015,  1033,  1012,   102])"
222,1,"['variance', 'nonlinear', 'exponential', 'transformations', 'data', 'transformation']", Nonlinear Transformations,seg_49,"linear data transformations may be insufficient in some engineering applications. the popular nonlinear transformations are square-root transformation, trigonometric and hyperbolic transformations, logarithmic and exponential transformations, power transformations, and polynomial transformations. these transformations are used either to stabilize the variance of the data or to bring the data into one of the well-known distributional form.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([27400, 21865])","tensor([  101,  7399,  2951, 21865,  2089,  2022, 13990,  1999,  2070,  3330,
         5097,  1012,  1996,  2759, 27400, 21865,  2024,  2675,  1011,  7117,
         8651,  1010, 13012,  7446, 28993,  1998, 23760, 18647, 21865,  1010,
         8833,  8486,  2705,  7712,  1998, 27258, 21865,  1010,  2373, 21865,
         1010,  1998, 17505, 21865,  1012,  2122, 21865,  2024,  2109,  2593,
         2000, 27790,  1996, 23284,  1997,  1996,  2951,  2030,  2000,  3288,
         1996,  2951,  2046,  2028,  1997,  1996,  2092,  1011,  2124,  4353,
         2389,  2433,  1012,   102])"
223,1,"['mean', 'interval', 'standard deviation', 'statistics', 'data', 'standard normalization', 'deviation', 'scores', 'standard', 'transformation', 'variance', 'sample', 'error']", Standard Normalization,seg_51,"this transformation is so called because it is extensively used in statistics to standardize arbitrary scores. here, the origin is changed using the mean of the sample, and the scale is changed using the standard deviation of the sample. symbolically yi = (xi − x)∕s, where s is the standard deviation. the resulting values of y are called z-scores and will almost always lie in the interval [−3, +3]. a disadvantage of this transformation is that it uses the mean and variance that need a single pass through the data. if standard normalization is applied manually, a quick check can be carried out as follows. if the sum of the z-scores is nonzero, it is an indication that either the calculation is wrong or error has propagated. ideally, we expect the sum of the z-scores to be less than a small number (say 0.00001).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([3115, 3671, 3989])","tensor([  101,  2023,  8651,  2003,  2061,  2170,  2138,  2009,  2003,  8077,
         2109,  1999,  6747,  2000,  3115,  4697, 15275,  7644,  1012,  2182,
         1010,  1996,  4761,  2003,  2904,  2478,  1996,  2812,  1997,  1996,
         7099,  1010,  1998,  1996,  4094,  2003,  2904,  2478,  1996,  3115,
        24353,  1997,  1996,  7099,  1012, 12613,  3973, 12316,  1027,  1006,
         8418,  1597,  1060,  1007,   100,  1010,  2073,  1055,  2003,  1996,
         3115, 24353,  1012,  1996,  4525,  5300,  1997,  1061,  2024,  2170,
         1062,  1011,  7644,  1998,  2097,  2471,  2467,  4682,  1999,  1996,
        13483,  1031,  1597,  2509,  1010,  1009,  1017,  1033,  1012,  1037,
        20502,  1997,  2023,  8651,  2003,  2008,  2009,  3594,  1996,  2812,
         1998, 23284,  2008,  2342,  1037,  2309,  3413,  2083,  1996,  2951,
         1012,  2065,  3115,  3671,  3989,  2003,  4162, 21118,  1010,  1037,
         4248,  4638,  2064,  2022,  3344,  2041,  2004,  4076,  1012,  2065,
         1996,  7680,  1997,  1996,  1062,  1011,  7644,  2003,  2512,  6290,
         2080,  1010,  2009,  2003,  2019, 12407,  2008,  2593,  1996, 17208,
         2003,  3308,  2030,  7561,  2038, 17678, 16098,  3064,  1012, 28946,
         1010,  2057,  5987,  1996,  7680,  1997,  1996,  1062,  1011,  7644,
         2000,  2022,  2625,  2084,  1037,  2235,  2193,  1006,  2360,  1014,
         1012,  2199, 24096,  1007,  1012,   102])"
224,0,[], Standard Normalization,seg_51,example 1.12 shear strength of bonded joints,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3115, 3671, 3989])","tensor([  101,  2742,  1015,  1012,  2260, 18330,  3997,  1997, 20886, 17651,
          102])"
225,1,"['standard normalization', 'standard']", Standard Normalization,seg_51,"the shear strength of bonded joints (in mpa) are x=(22, 30, 81, 26, 44, 29, 61, 35). apply the standard normalization.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([3115, 3671, 3989])","tensor([  101,  1996, 18330,  3997,  1997, 20886, 17651,  1006,  1999,  6131,
         2050,  1007,  2024,  1060,  1027,  1006,  2570,  1010,  2382,  1010,
         6282,  1010,  2656,  1010,  4008,  1010,  2756,  1010,  6079,  1010,
         3486,  1007,  1012,  6611,  1996,  3115,  3671,  3989,  1012,   102])"
226,1,"['mean', 'variance', 'data', 'sum of squares', 'transformation']", Standard Normalization,seg_51,"solution 1.12 the sum of the data is 328, from which the mean is 41. sum of squares is 16,344 so that the variance is 413.7142857 (and s is 20.33996769). thus, the transformation y=(x − 41)∕20.33996769, which gives y=(−0.93412, −0.54081, 1.96657,−0.737464, 0.14749,−0.58997, 0.983286,−0.294986).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3115, 3671, 3989])","tensor([  101,  5576,  1015,  1012,  2260,  1996,  7680,  1997,  1996,  2951,
         2003, 25256,  1010,  2013,  2029,  1996,  2812,  2003,  4601,  1012,
         7680,  1997, 14320,  2003,  2385,  1010, 29386,  2061,  2008,  1996,
        23284,  2003,  4601,  2509,  1012,  6390, 20958, 27531,  2581,  1006,
         1998,  1055,  2003,  2322,  1012, 28977,  2683,  2575,  2581,  2575,
         2683,  1007,  1012,  2947,  1010,  1996,  8651,  1061,  1027,  1006,
         1060,  1597,  4601,  1007,   100,  1012, 28977,  2683,  2575,  2581,
         2575,  2683,  1010,  2029,  3957,  1061,  1027,  1006,  1597,  2692,
         1012,  6109, 23632,  2475,  1010,  1597,  2692,  1012, 20263,  2620,
         2487,  1010,  1015,  1012,  5986, 26187,  2581,  1010,  1597,  2692,
         1012, 22061, 21472,  2549,  1010,  1014,  1012, 16471, 26224,  1010,
         1597,  2692,  1012,  5388,  2683,  2683,  2581,  1010,  1014,  1012,
         5818, 16703, 20842,  1010,  1597,  2692,  1012, 28135,  2683, 20842,
         1007,  1012,   102])"
227,0,[], Standard Normalization,seg_51,example 1.13 carbon nanoparticles,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3115, 3671, 3989])","tensor([  101,  2742,  1015,  1012,  2410,  6351, 28991, 19362,  4588,  4244,
          102])"
228,0,[], Standard Normalization,seg_51,"the amount of carbon particles in a nano-device is x = {32, 148, 21, 940, 36, 182, 39, 276, 14, 260, 43, 769, 25, 313, 25, 312}. compute the z-scores.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3115, 3671, 3989])","tensor([  101,  1996,  3815,  1997,  6351,  9309,  1999,  1037, 28991,  1011,
         5080,  2003,  1060,  1027,  1063,  3590,  1010, 16459,  1010,  2538,
         1010,  6365,  2692,  1010,  4029,  1010, 17691,  1010,  4464,  1010,
        25113,  1010,  2403,  1010, 13539,  1010,  4724,  1010,  6146,  2683,
         1010,  2423,  1010, 22997,  1010,  2423,  1010, 21036,  1065,  1012,
        24134,  1996,  1062,  1011,  7644,  1012,   102])"
229,1,"['mean', 'deviation', 'variance', 'change of scale', 'standard deviation', 'standard', 'data', 'transformation']", Standard Normalization,seg_51,"solution 1.13 as the numbers are large, apply a change of scale transformation. divide each data by 10,000 to get s′={0.32148, 0.2194, 0.36182, 0.39276, 0.1426, 0.43760, 0.25322, 0.25312}. the mean of scaled data is 0.29775, and variance is s2 = 0.009634, from which the standard deviation is obtained as 0.098152944. the corresponding z-scores are easily found as [00.24176,−0.79824, 0.65276, 0.967979,−1.580696, 1.42482,−0.4536797,−0.454698]. the corresponding z-scores for s are also the same, which can be verified using the transformation z = (x − 29775)∕9815.294.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3115, 3671, 3989])","tensor([  101,  5576,  1015,  1012,  2410,  2004,  1996,  3616,  2024,  2312,
         1010,  6611,  1037,  2689,  1997,  4094,  8651,  1012, 11443,  2169,
         2951,  2011,  2184,  1010,  2199,  2000,  2131,  1055,  1531,  1027,
         1063,  1014,  1012, 24030, 18139,  1010,  1014,  1012, 20636,  2549,
         1010,  1014,  1012,  4029, 15136,  2475,  1010,  1014,  1012,  4464,
        22907,  2575,  1010,  1014,  1012, 16087,  2575,  1010,  1014,  1012,
         4724,  2581, 16086,  1010,  1014,  1012, 23254, 19317,  1010,  1014,
         1012, 23254, 12521,  1065,  1012,  1996,  2812,  1997, 18953,  2951,
         2003,  1014,  1012, 27502, 23352,  1010,  1998, 23284,  2003,  1055,
         2475,  1027,  1014,  1012,  4002,  2683,  2575, 22022,  1010,  2013,
         2029,  1996,  3115, 24353,  2003,  4663,  2004,  1014,  1012,  5641,
         2620, 16068, 24594, 22932,  1012,  1996,  7978,  1062,  1011,  7644,
         2024,  4089,  2179,  2004,  1031,  4002,  1012, 22343,  2581,  2575,
         1010,  1597,  2692,  1012,  6535,  2620, 18827,  1010,  1014,  1012,
         3515, 22907,  2575,  1010,  1014,  1012,  5986,  2581,  2683,  2581,
         2683,  1010,  1597,  2487,  1012, 23712,  2575,  2683,  2575,  1010,
         1015,  1012,  4413, 18139,  2475,  1010,  1597,  2692,  1012,  3429,
        21619,  2581,  2683,  2581,  1010,  1597,  2692,  1012,  3429, 21472,
         2683,  2620,  1033,  1012,  1996,  7978,  1062,  1011,  7644,  2005,
         1055,  2024,  2036,  1996,  2168,  1010,  2029,  2064,  2022, 20119,
         2478,  1996,  8651,  1062,  1027,  1006,  1060,  1597, 27502, 23352,
         1007,   100,  1012, 28135,  1012,   102])"
230,1,"['continuous', 'loss', 'interval', 'information', 'bins', 'process', 'ratio scale', 'discretization', 'variable']", DATA DISCRETIZATION,seg_53,"as the name implies, discretization (also known as binning) is the process of categorizing a continuous variable (called source variable) measured in the interval or ratio scale of noir typology into a small number of groups (called bins) with minimal loss of information.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 1., 0., 0.])","tensor([ 2951,  5860, 13465,  3989])","tensor([  101,  2004,  1996,  2171, 12748,  1010,  5860, 13465,  3989,  1006,
         2036,  2124,  2004,  8026,  5582,  1007,  2003,  1996,  2832,  1997,
         4937, 20265, 21885,  2075,  1037,  7142,  8023,  1006,  2170,  3120,
         8023,  1007,  7594,  1999,  1996, 13483,  2030,  6463,  4094,  1997,
        15587,  5939, 18155, 15707,  2046,  1037,  2235,  2193,  1997,  2967,
         1006,  2170,  8026,  2015,  1007,  2007, 10124,  3279,  1997,  2592,
         1012,   102])"
231,1,"['continuous', 'range', 'interval', 'intervals', 'categorical']", DATA DISCRETIZATION,seg_53,"definition 1.8 ddas divide the global range of a continuous attribute into nonoverlapping and piece-wise continuous intervals in an optimal way, where each continuous interval is assigned a categorical label.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([ 2951,  5860, 13465,  3989])","tensor([  101,  6210,  1015,  1012,  1022, 20315,  3022, 11443,  1996,  3795,
         2846,  1997,  1037,  7142, 17961,  2046,  2512,  7840,  2721, 14853,
         1998,  3538,  1011,  7968,  7142, 14025,  1999,  2019, 15502,  2126,
         1010,  2073,  2169,  7142, 13483,  2003,  4137,  1037,  4937, 27203,
         3830,  1012,   102])"
232,1,"['continuous', 'range', 'data', 'functions', 'sampling', 'uniformly distributed', 'distribution', 'statistical', 'variable']", DATA DISCRETIZATION,seg_53,univariate dda has only one source variable with well-defined logical boundaries (upper and lower). continuous periodic data are discretized using a technique called sampling using shannon’s law. we will consider only aperiodic functions in the rest of the chapter. these boundaries can also be ∓∞. nothing is assumed on the distribution of the source variable—it can be uniformly distributed over its range or can follow one of the other statistical laws.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([ 2951,  5860, 13465,  3989])","tensor([  101,  4895, 28739, 13143, 20315,  2050,  2038,  2069,  2028,  3120,
         8023,  2007,  2092,  1011,  4225, 11177,  7372,  1006,  3356,  1998,
         2896,  1007,  1012,  7142, 15861,  2951,  2024,  5860, 13465,  3550,
         2478,  1037,  6028,  2170, 16227,  2478, 10881,  1521,  1055,  2375,
         1012,  2057,  2097,  5136,  2069, 23957,  9488, 14808,  4972,  1999,
         1996,  2717,  1997,  1996,  3127,  1012,  2122,  7372,  2064,  2036,
         2022,   100,  1012,  2498,  2003,  5071,  2006,  1996,  4353,  1997,
         1996,  3120,  8023,  1517,  2009,  2064,  2022, 27423,  5500,  2058,
         2049,  2846,  2030,  2064,  3582,  2028,  1997,  1996,  2060,  7778,
         4277,  1012,   102])"
233,1,"['bin', 'interval', 'information', 'interactions', 'data']", CATEGORIZATION OF DATA DISCRETIZATION,seg_55,"the dda can be classified into the following categories—(i) supervised, semisupervised, or unsupervised; (ii) global or local, and (iii) static or dynamic. supervised dda explores the class information (category labels) in the data intensively. entropy-based binning and purity-based binning are supervised algorithms. static dda discretizes each attribute independently without regard to attribute interactions. dynamic dda on the other hand searches for all attributes simultaneously and takes care of attribute interactions. in the following discussion, we will use a simple parenthesis ‘(’ to denote an open interval and a ‘[’ to denote a closed interval. we have a choice of either keeping the right margin open, except for the last bin, or keeping the left margin open, except for the first bin.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  2951,  5860, 13465,  3989])","tensor([  101,  1996, 20315,  2050,  2064,  2022,  6219,  2046,  1996,  2206,
         7236,  1517,  1006,  1045,  1007, 13588,  1010,  4100,  6342,  4842,
        11365,  2098,  1010,  2030,  4895,  6342,  4842, 11365,  2098,  1025,
         1006,  2462,  1007,  3795,  2030,  2334,  1010,  1998,  1006,  3523,
         1007, 10763,  2030,  8790,  1012, 13588, 20315,  2050, 15102,  1996,
         2465,  2592,  1006,  4696, 10873,  1007,  1999,  1996,  2951, 11806,
         2135,  1012, 23077,  1011,  2241,  8026,  5582,  1998, 18433,  1011,
         2241,  8026,  5582,  2024, 13588, 13792,  1012, 10763, 20315,  2050,
         5860, 13465, 10057,  2169, 17961,  9174,  2302,  7634,  2000, 17961,
        10266,  1012,  8790, 20315,  2050,  2006,  1996,  2060,  2192, 17193,
         2005,  2035, 12332,  7453,  1998,  3138,  2729,  1997, 17961, 10266,
         1012,  1999,  1996,  2206,  6594,  1010,  2057,  2097,  2224,  1037,
         3722,  6687, 24124,  1520,  1006,  1521,  2000, 19090,  2019,  2330,
        13483,  1998,  1037,  1520,  1031,  1521,  2000, 19090,  1037,  2701,
        13483,  1012,  2057,  2031,  1037,  3601,  1997,  2593,  4363,  1996,
         2157,  7785,  2330,  1010,  3272,  2005,  1996,  2197,  8026,  1010,
         2030,  4363,  1996,  2187,  7785,  2330,  1010,  3272,  2005,  1996,
         2034,  8026,  1012,   102])"
234,1,"['range', 'percentiles', 'interval', 'observations', 'information', 'bins', 'method', 'outliers', 'intervals', 'algorithm', 'data']", Equal Interval Binning EIB,seg_57,"this method is also called equal width binning (ewb). it is the simplest unsupervised dda, as it does not use the class label information of training data. moreover, it does not require data sorting. only inputs to this algorithm are the minimum x1 and maximum xn of n observations, and a user-supplied constant k(≥ 2) that represents the number of bins. this minimum and maximum can be found without data sorting, either using a single iteration over the data or using a recursive divide-and-conquer strategy. the range r = xn − x1 is then divided into k equal width intervals (say s = r∕k), so that xn = x1 + k ∗ s. the ith interval is then given by (x1 + (i − 1) ∗ s, x1 + i ∗ s) for i = 1, 2, · · · , k, where boundaries are properly taken care of. a disadvantage of eib is that it is sensitive to data outliers on both sides. a simple solution is to use percentiles of the data x, say p5 and p95, as the minimum and maximum and use it in the range calculation, so that s = (p95 − p5)∕k. the leftmost and rightmost intervals can finally be made unequal widths as [x1,p5 + s)",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  2023,  4118,  2003,  2036,  2170,  5020,  9381,  8026,  5582,
         1006,  1041,  2860,  2497,  1007,  1012,  2009,  2003,  1996, 21304,
         4895,  6342,  4842, 11365,  2098, 20315,  2050,  1010,  2004,  2009,
         2515,  2025,  2224,  1996,  2465,  3830,  2592,  1997,  2731,  2951,
         1012,  9308,  1010,  2009,  2515,  2025,  5478,  2951, 22210,  1012,
         2069, 20407,  2000,  2023,  9896,  2024,  1996,  6263,  1060,  2487,
         1998,  4555,  1060,  2078,  1997,  1050,  9420,  1010,  1998,  1037,
         5310,  1011,  8127,  5377,  1047,  1006,  1609,  1016,  1007,  2008,
         5836,  1996,  2193,  1997,  8026,  2015,  1012,  2023,  6263,  1998,
         4555,  2064,  2022,  2179,  2302,  2951, 22210,  1010,  2593,  2478,
         1037,  2309, 27758,  2058,  1996,  2951,  2030,  2478,  1037, 28667,
         9236,  3512, 11443,  1011,  1998,  1011, 16152,  5656,  1012,  1996,
         2846,  1054,  1027,  1060,  2078,  1597,  1060,  2487,  2003,  2059,
         4055,  2046,  1047,  5020,  9381, 14025,  1006,  2360,  1055,  1027,
          100,  1007,  1010,  2061,  2008,  1060,  2078,  1027,  1060,  2487,
         1009,  1047,  1598,  1055,  1012,  1996,  2009,  2232, 13483,  2003,
         2059,  2445,  2011,  1006,  1060,  2487,  1009,  1006,  1045,  1597,
         1015,  1007,  1598,  1055,  1010,  1060,  2487,  1009,  1045,  1598,
         1055,  1007,  2005,  1045,  1027,  1015,  1010,  1016,  1010,  1087,
         1087,  1087,  1010,  1047,  1010,  2073,  7372,  2024,  7919,  2579,
         2729,  1997,  1012,  1037, 20502,  1997,  1041, 12322,  2003,  2008,
         2009,  2003,  7591,  2000,  2951,  2041, 14355,  2015,  2006,  2119,
         3903,  1012,  1037,  3722,  5576,  2003,  2000,  2224,  3867,  9463,
         2015,  1997,  1996,  2951,  1060,  1010,  2360,  1052,  2629,  1998,
         1052,  2683,  2629,  1010,  2004,  1996,  6263,  1998,  4555,  1998,
         2224,  2009,  1999,  1996,  2846, 17208,  1010,  2061,  2008,  1055,
         1027,  1006,  1052,  2683,  2629,  1597,  1052,  2629,  1007,   100,
         1012,  1996,  2187, 11800,  1998,  2157, 11800, 14025,  2064,  2633,
         2022,  2081, 16655, 26426,  9381,  2015,  2004,  1031,  1060,  2487,
         1010,  1052,  2629,  1009,  1055,  1007,   102])"
235,1,"['intervals', 'case', 'categorical']", Equal Interval Binning EIB,seg_57,"and [p95 − s, xn]. in this case, the intervals 1 and k are unequal and all others are equal width. this does not matter as we assign categorical labels to these intervals.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  1998,  1031,  1052,  2683,  2629,  1597,  1055,  1010,  1060,
         2078,  1033,  1012,  1999,  2023,  2553,  1010,  1996, 14025,  1015,
         1998,  1047,  2024, 16655, 26426,  1998,  2035,  2500,  2024,  5020,
         9381,  1012,  2023,  2515,  2025,  3043,  2004,  2057, 23911,  4937,
        27203, 10873,  2000,  2122, 14025,  1012,   102])"
236,1,"['skewed', 'factors', 'distribution', 'indicator']", Equal Interval Binning EIB,seg_57,"it is well known that excessive fat intake and a compulsion to over-eat are the major contributing factors in the pathogenesis of obesityx. sedentary life styles and fatty food eating habits make many people overfat in developed countries, resulting in a negatively skewed bmi distribution. the bmi of most adults varies between 17 and 35. this of course is country specific. an ideal bmi value is a key indicator of the overall health and fitness of an individual. too low or too high bmi values quite often indicate ill-health. very low values can be due to immunity-related illnesses and anemia. some genetic disorders and addiction to fatty food can result in very high bmi values (there are less than a dozen genetic markers that increase the bmi and contribute to obesity). those with bmi values between 30 and 35 are called obese. those above 35 bmi are called morbidly obese, for which surgical options (bariatric surgery) are available. management of obesity is important in adolescence as it could lead to heart problems in later life.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  2009,  2003,  2092,  2124,  2008, 11664,  6638, 13822,  1998,
         1037, 27638,  2000,  2058,  1011,  4521,  2024,  1996,  2350,  8020,
         5876,  1999,  1996, 26835, 19009,  1997, 24552,  2595,  1012,  7367,
        16454,  5649,  2166,  6782,  1998, 19101,  2833,  5983, 14243,  2191,
         2116,  2111,  2058, 27753,  1999,  2764,  3032,  1010,  4525,  1999,
         1037, 19762, 15315,  7974,  2098,  1038,  4328,  4353,  1012,  1996,
         1038,  4328,  1997,  2087,  6001,  9783,  2090,  2459,  1998,  3486,
         1012,  2023,  1997,  2607,  2003,  2406,  3563,  1012,  2019,  7812,
         1038,  4328,  3643,  2003,  1037,  3145, 17245,  1997,  1996,  3452,
         2740,  1998, 10516,  1997,  2019,  3265,  1012,  2205,  2659,  2030,
         2205,  2152,  1038,  4328,  5300,  3243,  2411,  5769,  5665,  1011,
         2740,  1012,  2200,  2659,  5300,  2064,  2022,  2349,  2000, 15403,
         1011,  3141, 24757,  1998,  2019, 17577,  1012,  2070,  7403, 10840,
         1998, 13449,  2000, 19101,  2833,  2064,  2765,  1999,  2200,  2152,
         1038,  4328,  5300,  1006,  2045,  2024,  2625,  2084,  1037,  6474,
         7403, 16387,  2008,  3623,  1996,  1038,  4328,  1998,  9002,  2000,
        24552,  1007,  1012,  2216,  2007,  1038,  4328,  5300,  2090,  2382,
         1998,  3486,  2024,  2170, 15578,  3366,  1012,  2216,  2682,  3486,
         1038,  4328,  2024,  2170, 22822, 17062,  2135, 15578,  3366,  1010,
         2005,  2029, 11707,  7047,  1006, 22466,  4017,  7277,  5970,  1007,
         2024,  2800,  1012,  2968,  1997, 24552,  2003,  2590,  1999, 29101,
         2004,  2009,  2071,  2599,  2000,  2540,  3471,  1999,  2101,  2166,
         1012,   102])"
237,1,"['categories', 'range', 'rate', 'interval', 'population', 'sample', 'results', 'normal', 'distribution', 'categorization', 'data', 'error']", Equal Interval Binning EIB,seg_57,"because the normal bmi range for adults is a narrow interval, we expect a smaller fraction of the people to fall in this range than in the other ranges. an ewd will probably produce wrong results, as the “normal” range is too narrow. an efb could give better results if the population were naturally divided equally among under-fats, normals, and over-fats. in addition, as females are in general shorter than males, the bmi distribution for males and females is different. thus, the proportion of females in our sample could impact the binning boundary. note that the bmi-based categorization of an individual into the three body-fatness groups is very explicit as there are no overlaps. on the contrary, consider binning a group of people into {diabetic, nondiabetic} categories based on the bmi value. all overfat people are not diabetic, and there are few underfat diabetic patients too. thus, the classes have high overlaps. the extent of the overlap determines the error rate in binning. the entropy-based binning algorithms can give good binning in this kind of situations if the class labels of the training data are exactly known.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  2138,  1996,  3671,  1038,  4328,  2846,  2005,  6001,  2003,
         1037,  4867, 13483,  1010,  2057,  5987,  1037,  3760, 12884,  1997,
         1996,  2111,  2000,  2991,  1999,  2023,  2846,  2084,  1999,  1996,
         2060,  8483,  1012,  2019,  1041, 21724,  2097,  2763,  3965,  3308,
         3463,  1010,  2004,  1996,  1523,  3671,  1524,  2846,  2003,  2205,
         4867,  1012,  2019,  1041, 26337,  2071,  2507,  2488,  3463,  2065,
         1996,  2313,  2020,  8100,  4055,  8053,  2426,  2104,  1011,  6638,
         2015,  1010,  3671,  2015,  1010,  1998,  2058,  1011,  6638,  2015,
         1012,  1999,  2804,  1010,  2004,  3801,  2024,  1999,  2236,  7820,
         2084,  3767,  1010,  1996,  1038,  4328,  4353,  2005,  3767,  1998,
         3801,  2003,  2367,  1012,  2947,  1010,  1996, 10817,  1997,  3801,
         1999,  2256,  7099,  2071,  4254,  1996,  8026,  5582,  6192,  1012,
         3602,  2008,  1996,  1038,  4328,  1011,  2241,  4937, 20265, 26910,
         1997,  2019,  3265,  2046,  1996,  2093,  2303,  1011,  6638,  2791,
         2967,  2003,  2200, 13216,  2004,  2045,  2024,  2053, 17702,  2015,
         1012,  2006,  1996, 10043,  1010,  5136,  8026,  5582,  1037,  2177,
         1997,  2111,  2046,  1063, 22939, 20915,  2594,  1010,  2512,  9032,
        20915,  2594,  1065,  7236,  2241,  2006,  1996,  1038,  4328,  3643,
         1012,  2035,  2058, 27753,  2111,  2024,  2025, 22939, 20915,  2594,
         1010,  1998,  2045,  2024,  2261,  2104, 27753, 22939, 20915,  2594,
         5022,  2205,  1012,  2947,  1010,  1996,  4280,  2031,  2152, 17702,
         2015,  1012,  1996,  6698,  1997,  1996, 17702, 16463,  1996,  7561,
         3446,  1999,  8026,  5582,  1012,  1996, 23077,  1011,  2241,  8026,
         5582, 13792,  2064,  2507,  2204,  8026,  5582,  1999,  2023,  2785,
         1997,  8146,  2065,  1996,  2465, 10873,  1997,  1996,  2731,  2951,
         2024,  3599,  2124,  1012,   102])"
238,1,"['percentiles', 'skewed', 'distribution']", Equal Interval Binning EIB,seg_57,"instead of fixing the lower and upper cutoff at p5 and p95, we could arbitrarily choose two percentiles, which are often taken symmetrically (this is not necessary if the distribution is highly skewed). if pl and p100−l are the lower and upper percentiles, the above-mentioned formula becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  2612,  1997, 15887,  1996,  2896,  1998,  3356,  3013,  7245,
         2012,  1052,  2629,  1998,  1052,  2683,  2629,  1010,  2057,  2071,
        12098, 16313, 19848,  6588,  5454,  2048,  3867,  9463,  2015,  1010,
         2029,  2024,  2411,  2579, 23476,  2135,  1006,  2023,  2003,  2025,
         4072,  2065,  1996,  4353,  2003,  3811, 15315,  7974,  2098,  1007,
         1012,  2065, 20228,  1998,  1052, 18613, 22543,  2140,  2024,  1996,
         2896,  1998,  3356,  3867,  9463,  2015,  1010,  1996,  2682,  1011,
         3855,  5675,  4150,   102])"
239,1,"['continuous', 'bin', 'data', 'interactions', 'outlier', 'correlations', 'test']", Equal Interval Binning EIB,seg_57,"for i = 1, 2, · · · , k − 1 and [(1 − 1∕k)p100−l + (1∕k)pl, xn]. this is recommended only when the data size is large. for smaller data sizes, an outlier test may be carried out to individually remove them one by one and then use the remaining data for binning. multiple continuous attributes are discretized one at a time (simultaneous discretization algorithms that care for attribute interactions (correlations) are also reported in the literature). this can also be done in parallel, as the majority of computation time is spent in assigning the correct bin to each data value. because nothing is assumed",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  2005,  1045,  1027,  1015,  1010,  1016,  1010,  1087,  1087,
         1087,  1010,  1047,  1597,  1015,  1998,  1031,  1006,  1015,  1597,
          100,  1007,  1052, 18613, 22543,  2140,  1009,  1006,   100,  1007,
        20228,  1010,  1060,  2078,  1033,  1012,  2023,  2003,  6749,  2069,
         2043,  1996,  2951,  2946,  2003,  2312,  1012,  2005,  3760,  2951,
        10826,  1010,  2019,  2041, 14355,  3231,  2089,  2022,  3344,  2041,
         2000, 14258,  6366,  2068,  2028,  2011,  2028,  1998,  2059,  2224,
         1996,  3588,  2951,  2005,  8026,  5582,  1012,  3674,  7142, 12332,
         2024,  5860, 13465,  3550,  2028,  2012,  1037,  2051,  1006, 17424,
         5860, 13465,  3989, 13792,  2008,  2729,  2005, 17961, 10266,  1006,
        16902,  2015,  1007,  2024,  2036,  2988,  1999,  1996,  3906,  1007,
         1012,  2023,  2064,  2036,  2022,  2589,  1999,  5903,  1010,  2004,
         1996,  3484,  1997, 22334,  2051,  2003,  2985,  1999, 23911,  2075,
         1996,  6149,  8026,  2000,  2169,  2951,  3643,  1012,  2138,  2498,
         2003,  5071,   102])"
240,1,"['categories', 'range', 'blind binning', 'rate', 'estimate', 'method', 'predicted', 'distribution', 'data', 'error']", Equal Interval Binning EIB,seg_57,"about the data distribution, other than the range, this method is called blind binning. if the class labels (categories) of the data are already known, we could estimate the error rate (discussed in the following) by comparing the actual and predicted class labels. obviously, the error rate is maximum with ewb when compared to other dda. thus, the real question is whether we should compromise on the high predictive accuracy attainable by supervised dda at the expense of extra computations over the simplicity of unsupervised algorithms such as eib.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  2055,  1996,  2951,  4353,  1010,  2060,  2084,  1996,  2846,
         1010,  2023,  4118,  2003,  2170,  6397,  8026,  5582,  1012,  2065,
         1996,  2465, 10873,  1006,  7236,  1007,  1997,  1996,  2951,  2024,
         2525,  2124,  1010,  2057,  2071, 10197,  1996,  7561,  3446,  1006,
         6936,  1999,  1996,  2206,  1007,  2011, 13599,  1996,  5025,  1998,
        10173,  2465, 10873,  1012,  5525,  1010,  1996,  7561,  3446,  2003,
         4555,  2007,  1041,  2860,  2497,  2043,  4102,  2000,  2060, 20315,
         2050,  1012,  2947,  1010,  1996,  2613,  3160,  2003,  3251,  2057,
         2323, 12014,  2006,  1996,  2152, 16014,  3512, 10640, 18759,  3085,
         2011, 13588, 20315,  2050,  2012,  1996, 10961,  1997,  4469, 22334,
         2015,  2058,  1996, 17839,  1997,  4895,  6342,  4842, 11365,  2098,
        13792,  2107,  2004,  1041, 12322,  1012,   102])"
241,1,"['bins', 'data']", Equal Interval Binning EIB,seg_57,"the body mass index (bmi) of 15 patients is as follows. discretize the data using eib with (i) k = 3, (ii) k = 4, and (iii) k = 7 bins. x = {26.2, 25.6, 25.1, 23.3, 23.7, 23.4, 29.7, 28.5, 25.2, 21.4, 28.3, 33.4, 27.8, 24.4, 25.9}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  1996,  2303,  3742,  5950,  1006,  1038,  4328,  1007,  1997,
         2321,  5022,  2003,  2004,  4076,  1012,  5860, 13465,  4697,  1996,
         2951,  2478,  1041, 12322,  2007,  1006,  1045,  1007,  1047,  1027,
         1017,  1010,  1006,  2462,  1007,  1047,  1027,  1018,  1010,  1998,
         1006,  3523,  1007,  1047,  1027,  1021,  8026,  2015,  1012,  1060,
         1027,  1063,  2656,  1012,  1016,  1010,  2423,  1012,  1020,  1010,
         2423,  1012,  1015,  1010,  2603,  1012,  1017,  1010,  2603,  1012,
         1021,  1010,  2603,  1012,  1018,  1010,  2756,  1012,  1021,  1010,
         2654,  1012,  1019,  1010,  2423,  1012,  1016,  1010,  2538,  1012,
         1018,  1010,  2654,  1012,  1017,  1010,  3943,  1012,  1018,  1010,
         2676,  1012,  1022,  1010,  2484,  1012,  1018,  1010,  2423,  1012,
         1023,  1065,  1012,   102])"
242,1,"['range', 'frequency', 'bins', 'normal', 'data', 'case']", Equal Interval Binning EIB,seg_57,"solution 1.14 here, the minimum is 21.4 and maximum is 33.4, so that the range is 12. for case (i), we need to divide the range into three equal widths, so that s = r∕k = 12∕3 = 4. the bins are b1 = [21.4, 25.4), b2 = [25.4, 29.4), and b3 = [29.4, 33.4]. if the labels are u = underweight, n = normal, and o = overweight, the new data are y = {n,n,u,u,u,u,o,n,u,u,n,o,n,u,n}. for case (ii), we get s = r∕k = 12∕4 = 3. the bins are b1 = [21.4, 24.4), b2 = [24.4, 27.4), b3 = [27.4, 30.4), and b4 = [30.4, 33.4]. let the labels be u = underweight, n = normal, o = over weight, and h = heavy. note that the “normal” category has lost its significance because the normal6 bmi is in the range (25–26). discretized data are y = {n,n,n,u,u,u,o,o,n,u,o,h,o,n,n}. for case (iii), s = r∕k = 12∕7 = 1.7143. the bins are a = [21.40, 23.114),b = [23.114, 24.829),c = [24.829, 26.543),d = [26.5435, 28.257),e = [28.257, 29.971),f = [29.971, 31.686),g = [31.686, 33.4]. the discretized data becomes {c,c,c,b,b,b,e,e, c,a,e,g,d,b,c}. note that the class f = [29.971, 31.686) has zero frequency. this is a common problem when narrow range data are discretized into a large number of bins.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([ 5020, 13483,  8026,  5582,  1041, 12322])","tensor([  101,  5576,  1015,  1012,  2403,  2182,  1010,  1996,  6263,  2003,
         2538,  1012,  1018,  1998,  4555,  2003,  3943,  1012,  1018,  1010,
         2061,  2008,  1996,  2846,  2003,  2260,  1012,  2005,  2553,  1006,
         1045,  1007,  1010,  2057,  2342,  2000, 11443,  1996,  2846,  2046,
         2093,  5020,  9381,  2015,  1010,  2061,  2008,  1055,  1027,   100,
         1027,   100,  1027,  1018,  1012,  1996,  8026,  2015,  2024, 29491,
         1027,  1031,  2538,  1012,  1018,  1010,  2423,  1012,  1018,  1007,
         1010,  1038,  2475,  1027,  1031,  2423,  1012,  1018,  1010,  2756,
         1012,  1018,  1007,  1010,  1998,  1038,  2509,  1027,  1031,  2756,
         1012,  1018,  1010,  3943,  1012,  1018,  1033,  1012,  2065,  1996,
        10873,  2024,  1057,  1027,  2104, 11179,  1010,  1050,  1027,  3671,
         1010,  1998,  1051,  1027,  2058, 11179,  1010,  1996,  2047,  2951,
         2024,  1061,  1027,  1063,  1050,  1010,  1050,  1010,  1057,  1010,
         1057,  1010,  1057,  1010,  1057,  1010,  1051,  1010,  1050,  1010,
         1057,  1010,  1057,  1010,  1050,  1010,  1051,  1010,  1050,  1010,
         1057,  1010,  1050,  1065,  1012,  2005,  2553,  1006,  2462,  1007,
         1010,  2057,  2131,  1055,  1027,   100,  1027,   100,  1027,  1017,
         1012,  1996,  8026,  2015,  2024, 29491,  1027,  1031,  2538,  1012,
         1018,  1010,  2484,  1012,  1018,  1007,  1010,  1038,  2475,  1027,
         1031,  2484,  1012,  1018,  1010,  2676,  1012,  1018,  1007,  1010,
         1038,  2509,  1027,  1031,  2676,  1012,  1018,  1010,  2382,  1012,
         1018,  1007,  1010,  1998,  1038,  2549,  1027,  1031,  2382,  1012,
         1018,  1010,  3943,  1012,  1018,  1033,  1012,  2292,  1996, 10873,
         2022,  1057,  1027,  2104, 11179,  1010,  1050,  1027,  3671,  1010,
         1051,  1027,  2058,  3635,  1010,  1998,  1044,  1027,  3082,  1012,
         3602,  2008,  1996,  1523,  3671,  1524,  4696,  2038,  2439,  2049,
         7784,  2138,  1996,  3671,  2575,  1038,  4328,  2003,  1999,  1996,
         2846,  1006,  2423,  1516,  2656,  1007,  1012,  5860, 13465,  3550,
         2951,  2024,  1061,  1027,  1063,  1050,  1010,  1050,  1010,  1050,
         1010,  1057,  1010,  1057,  1010,  1057,  1010,  1051,  1010,  1051,
         1010,  1050,  1010,  1057,  1010,  1051,  1010,  1044,  1010,  1051,
         1010,  1050,  1010,  1050,  1065,  1012,  2005,  2553,  1006,  3523,
         1007,  1010,  1055,  1027,   100,  1027,   100,  1027,  1015,  1012,
         6390, 23777,  1012,  1996,  8026,  2015,  2024,  1037,  1027,  1031,
         2538,  1012,  2871,  1010,  2603,  1012, 12457,  1007,  1010,  1038,
         1027,  1031,  2603,  1012, 12457,  1010,  2484,  1012,  6445,  2683,
         1007,  1010,  1039,  1027,  1031,  2484,  1012,  6445,  2683,  1010,
         2656,  1012,  5139,  2509,  1007,  1010,  1040,  1027,  1031,  2656,
         1012,  5139, 19481,  1010,  2654,  1012, 24368,  1007,  1010,  1041,
         1027,  1031,  2654,  1012, 24368,  1010,  2756,  1012,  5989,  2487,
         1007,  1010,  1042,  1027,  1031,  2756,  1012,  5989,  2487,  1010,
         2861,  1012,  6273,  2575,  1007,  1010,  1043,  1027,  1031,  2861,
         1012,  6273,  2575,  1010,  3943,  1012,  1018,  1033,  1012,  1996,
         5860, 13465,  3550,  2951,  4150,  1063,  1039,  1010,  1039,  1010,
         1039,  1010,  1038,  1010,  1038,  1010,  1038,  1010,  1041,  1010,
         1041,  1010,  1039,  1010,  1037,  1010,  1041,  1010,  1043,  1010,
         1040,  1010,  1038,  1010,  1039,  1065,  1012,  3602,  2008,  1996,
         2465,  1042,  1027,  1031,  2756,  1012,  5989,  2487,  1010,  2861,
         1012,  6273,  2575,  1007,  2038,  5717,  6075,  1012,  2023,  2003,
         1037,  2691,  3291,  2043,  4867,  2846,  2951,  2024,  5860, 13465,
         3550,  2046,  1037,  2312,  2193,  1997,  8026,  2015,  1012,   102])"
243,1,"['cases', 'range', 'bin', 'results', 'method', 'uniformly distributed', 'distribution', 'algorithm', 'data', 'median']", Equal Frequency Binning EFB,seg_59,"this method divides the total range such that each subinterval has more or less the same number of data items. as this obviously requires some knowledge about the data distribution, efb is in general computationally more complex than eib. if data are known to be approximately uniform, we could first apply the eib and perturb the boundary, if necessary, to get the efb. the results obtained by eib and efb are often different, except in particular cases (when data are uniformly distributed, when (n = 2, k = 2), (n = 3, k = 2), etc.). if k is a power of 2, we could apply the median finding algorithm repeatedly using the divide-and-conquer principle to easily get the bin boundaries. otherwise, we sort the data values and pick out the bin boundaries using the following algorithm. if the number of data points is large and k is small,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5020,  6075,  8026,  5582,  1041, 26337])","tensor([  101,  2023,  4118, 20487,  1996,  2561,  2846,  2107,  2008,  2169,
         4942, 18447,  2121, 10175,  2038,  2062,  2030,  2625,  1996,  2168,
         2193,  1997,  2951,  5167,  1012,  2004,  2023,  5525,  5942,  2070,
         3716,  2055,  1996,  2951,  4353,  1010,  1041, 26337,  2003,  1999,
         2236, 15078,  2135,  2062,  3375,  2084,  1041, 12322,  1012,  2065,
         2951,  2024,  2124,  2000,  2022,  3155,  6375,  1010,  2057,  2071,
         2034,  6611,  1996,  1041, 12322,  1998,  2566, 20689,  2497,  1996,
         6192,  1010,  2065,  4072,  1010,  2000,  2131,  1996,  1041, 26337,
         1012,  1996,  3463,  4663,  2011,  1041, 12322,  1998,  1041, 26337,
         2024,  2411,  2367,  1010,  3272,  1999,  3327,  3572,  1006,  2043,
         2951,  2024, 27423,  5500,  1010,  2043,  1006,  1050,  1027,  1016,
         1010,  1047,  1027,  1016,  1007,  1010,  1006,  1050,  1027,  1017,
         1010,  1047,  1027,  1016,  1007,  1010,  4385,  1012,  1007,  1012,
         2065,  1047,  2003,  1037,  2373,  1997,  1016,  1010,  2057,  2071,
         6611,  1996,  3991,  4531,  9896,  8385,  2478,  1996, 11443,  1011,
         1998,  1011, 16152,  6958,  2000,  4089,  2131,  1996,  8026,  7372,
         1012,  4728,  1010,  2057,  4066,  1996,  2951,  5300,  1998,  4060,
         2041,  1996,  8026,  7372,  2478,  1996,  2206,  9896,  1012,  2065,
         1996,  2193,  1997,  2951,  2685,  2003,  2312,  1998,  1047,  2003,
         2235,  1010,   102])"
244,1,"['range', 'frequency', 'bins', 'results', 'algorithm', 'data', 'case']", Equal Frequency Binning EFB,seg_59,"the frequency of each class will be more or less equal. a problem with this binning is the duplicate values that could get split across the boundary of two adjacent classes. consider for example discretizing x = {1, 1, 2, 2, 2, 3} into k = 2 bins. as n = 6, we would split it into b1 = {1, 1, 2} and b2 = {2, 2, 3}. here 2 appears in both the bins. by our algorithm, each value in b1 is assigned one label (say x), and all values in b2 are assigned another label (say y), so that the discretized data becomes {x, x, x, y, y, y}. if the eib algorithm is used, we have r = 3 − 1 = 2 and s = r∕2 = 1 so that we either get b1 = [1, 2) and b2 = [2, 3] or b1 = [1, 2] and b2 = (2, 3]. in the first case, the discretized data becomes {x, x, y, y, y, y}, and in the second case, we get {x, x, x, x, x, y}. this example shows that eib and efb could give totally different results. eliminating all duplicates solves the problem because the data range will remain the same after a duplicates deletion (but it could result in a smaller n if there were at least one pair of duplicates). above data without duplicates is x = {1, 2, 3} with new n = 3. for k = 2 bins, we get the boundaries as b1 = [1, 1.5) and b2 = [1.5, 3]. discretized data becomes {x, x, y, y, y, y}.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5020,  6075,  8026,  5582,  1041, 26337])","tensor([  101,  1996,  6075,  1997,  2169,  2465,  2097,  2022,  2062,  2030,
         2625,  5020,  1012,  1037,  3291,  2007,  2023,  8026,  5582,  2003,
         1996, 24473,  5300,  2008,  2071,  2131,  3975,  2408,  1996,  6192,
         1997,  2048,  5516,  4280,  1012,  5136,  2005,  2742,  5860, 13465,
         6026,  1060,  1027,  1063,  1015,  1010,  1015,  1010,  1016,  1010,
         1016,  1010,  1016,  1010,  1017,  1065,  2046,  1047,  1027,  1016,
         8026,  2015,  1012,  2004,  1050,  1027,  1020,  1010,  2057,  2052,
         3975,  2009,  2046, 29491,  1027,  1063,  1015,  1010,  1015,  1010,
         1016,  1065,  1998,  1038,  2475,  1027,  1063,  1016,  1010,  1016,
         1010,  1017,  1065,  1012,  2182,  1016,  3544,  1999,  2119,  1996,
         8026,  2015,  1012,  2011,  2256,  9896,  1010,  2169,  3643,  1999,
        29491,  2003,  4137,  2028,  3830,  1006,  2360,  1060,  1007,  1010,
         1998,  2035,  5300,  1999,  1038,  2475,  2024,  4137,  2178,  3830,
         1006,  2360,  1061,  1007,  1010,  2061,  2008,  1996,  5860, 13465,
         3550,  2951,  4150,  1063,  1060,  1010,  1060,  1010,  1060,  1010,
         1061,  1010,  1061,  1010,  1061,  1065,  1012,  2065,  1996,  1041,
        12322,  9896,  2003,  2109,  1010,  2057,  2031,  1054,  1027,  1017,
         1597,  1015,  1027,  1016,  1998,  1055,  1027,   100,  1027,  1015,
         2061,  2008,  2057,  2593,  2131, 29491,  1027,  1031,  1015,  1010,
         1016,  1007,  1998,  1038,  2475,  1027,  1031,  1016,  1010,  1017,
         1033,  2030, 29491,  1027,  1031,  1015,  1010,  1016,  1033,  1998,
         1038,  2475,  1027,  1006,  1016,  1010,  1017,  1033,  1012,  1999,
         1996,  2034,  2553,  1010,  1996,  5860, 13465,  3550,  2951,  4150,
         1063,  1060,  1010,  1060,  1010,  1061,  1010,  1061,  1010,  1061,
         1010,  1061,  1065,  1010,  1998,  1999,  1996,  2117,  2553,  1010,
         2057,  2131,  1063,  1060,  1010,  1060,  1010,  1060,  1010,  1060,
         1010,  1060,  1010,  1061,  1065,  1012,  2023,  2742,  3065,  2008,
         1041, 12322,  1998,  1041, 26337,  2071,  2507,  6135,  2367,  3463,
         1012, 15349,  2035, 24473,  2015,  9611,  2015,  1996,  3291,  2138,
         1996,  2951,  2846,  2097,  3961,  1996,  2168,  2044,  1037, 24473,
         2015,  3972, 20624,  2239,  1006,  2021,  2009,  2071,  2765,  1999,
         1037,  3760,  1050,  2065,  2045,  2020,  2012,  2560,  2028,  3940,
         1997, 24473,  2015,  1007,  1012,  2682,  2951,  2302, 24473,  2015,
         2003,  1060,  1027,  1063,  1015,  1010,  1016,  1010,  1017,  1065,
         2007,  2047,  1050,  1027,  1017,  1012,  2005,  1047,  1027,  1016,
         8026,  2015,  1010,  2057,  2131,  1996,  7372,  2004, 29491,  1027,
         1031,  1015,  1010,  1015,  1012,  1019,  1007,  1998,  1038,  2475,
         1027,  1031,  1015,  1012,  1019,  1010,  1017,  1033,  1012,  5860,
        13465,  3550,  2951,  4150,  1063,  1060,  1010,  1060,  1010,  1061,
         1010,  1061,  1010,  1061,  1010,  1061,  1065,  1012,   102])"
245,1,['data'], Equal Frequency Binning EFB,seg_59,example 1.15 discretize bmi data using efb,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5020,  6075,  8026,  5582,  1041, 26337])","tensor([  101,  2742,  1015,  1012,  2321,  5860, 13465,  4697,  1038,  4328,
         2951,  2478,  1041, 26337,   102])"
246,1,"['bins', 'data']", Equal Frequency Binning EFB,seg_59,discretize the 15 bmi data in example 1.14 using efb with (i) k = 3 and (ii) k = 7 bins.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5020,  6075,  8026,  5582,  1041, 26337])","tensor([  101,  5860, 13465,  4697,  1996,  2321,  1038,  4328,  2951,  1999,
         2742,  1015,  1012,  2403,  2478,  1041, 26337,  2007,  1006,  1045,
         1007,  1047,  1027,  1017,  1998,  1006,  2462,  1007,  1047,  1027,
         1021,  8026,  2015,  1012,   102])"
247,1,"['data', 'case']", Equal Frequency Binning EFB,seg_59,"solution 1.15 data in sorted order is x={21.4, 23.3, 23.4, 23.7, 24.4, 25.1, 25.2, 25.6, 25.9, 26.2, 27.8, 28.3, 28.5, 29.7, 33.4}. here n = 15, s = 15∕3 = 5. for case (i), we need to assign the same label to all values in (x[1 + (i − 1) ∗ s],x[1 + i ∗ s]) so that b1 = (x[1],x[5]) = [21.4, 24.4], b2 = (x[6],x[10]) = [25.1, 26.2], and b3 = (x[11],x[15]) = [27.8, 28.3, 28.5, 29.7, 33, 33.4]. the binned original data (unsorted) using labels (u, n, o) is y={n,n,n,u,u,u,o,o,n, u,o,o,o,u,n}.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5020,  6075,  8026,  5582,  1041, 26337])","tensor([  101,  5576,  1015,  1012,  2321,  2951,  1999, 19616,  2344,  2003,
         1060,  1027,  1063,  2538,  1012,  1018,  1010,  2603,  1012,  1017,
         1010,  2603,  1012,  1018,  1010,  2603,  1012,  1021,  1010,  2484,
         1012,  1018,  1010,  2423,  1012,  1015,  1010,  2423,  1012,  1016,
         1010,  2423,  1012,  1020,  1010,  2423,  1012,  1023,  1010,  2656,
         1012,  1016,  1010,  2676,  1012,  1022,  1010,  2654,  1012,  1017,
         1010,  2654,  1012,  1019,  1010,  2756,  1012,  1021,  1010,  3943,
         1012,  1018,  1065,  1012,  2182,  1050,  1027,  2321,  1010,  1055,
         1027,   100,  1027,  1019,  1012,  2005,  2553,  1006,  1045,  1007,
         1010,  2057,  2342,  2000, 23911,  1996,  2168,  3830,  2000,  2035,
         5300,  1999,  1006,  1060,  1031,  1015,  1009,  1006,  1045,  1597,
         1015,  1007,  1598,  1055,  1033,  1010,  1060,  1031,  1015,  1009,
         1045,  1598,  1055,  1033,  1007,  2061,  2008, 29491,  1027,  1006,
         1060,  1031,  1015,  1033,  1010,  1060,  1031,  1019,  1033,  1007,
         1027,  1031,  2538,  1012,  1018,  1010,  2484,  1012,  1018,  1033,
         1010,  1038,  2475,  1027,  1006,  1060,  1031,  1020,  1033,  1010,
         1060,  1031,  2184,  1033,  1007,  1027,  1031,  2423,  1012,  1015,
         1010,  2656,  1012,  1016,  1033,  1010,  1998,  1038,  2509,  1027,
         1006,  1060,  1031,  2340,  1033,  1010,  1060,  1031,  2321,  1033,
         1007,  1027,  1031,  2676,  1012,  1022,  1010,  2654,  1012,  1017,
         1010,  2654,  1012,  1019,  1010,  2756,  1012,  1021,  1010,  3943,
         1010,  3943,  1012,  1018,  1033,  1012,  1996,  8026,  7228,  2434,
         2951,  1006,  4895, 21748,  3064,  1007,  2478, 10873,  1006,  1057,
         1010,  1050,  1010,  1051,  1007,  2003,  1061,  1027,  1063,  1050,
         1010,  1050,  1010,  1050,  1010,  1057,  1010,  1057,  1010,  1057,
         1010,  1051,  1010,  1051,  1010,  1050,  1010,  1057,  1010,  1051,
         1010,  1051,  1010,  1051,  1010,  1057,  1010,  1050,  1065,  1012,
          102])"
248,1,"['data', 'case']", Equal Frequency Binning EFB,seg_59,"for case (ii), we have k = 7, s = [15∕7] = 2 so that the binned data is y = {oo uuuu oo uu ooo uo} or y = {o uuuuu oo uu ooo uo}.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5020,  6075,  8026,  5582,  1041, 26337])","tensor([ 101, 2005, 2553, 1006, 2462, 1007, 1010, 2057, 2031, 1047, 1027, 1021,
        1010, 1055, 1027, 1031,  100, 1033, 1027, 1016, 2061, 2008, 1996, 8026,
        7228, 2951, 2003, 1061, 1027, 1063, 1051, 2080, 1057, 2226, 2226, 2226,
        1051, 2080, 1057, 2226, 1051, 9541, 1057, 2080, 1065, 2030, 1061, 1027,
        1063, 1051, 1057, 2226, 2226, 2226, 2226, 1051, 2080, 1057, 2226, 1051,
        9541, 1057, 2080, 1065, 1012,  102])"
249,1,"['loss', 'bin', 'interval', 'entropy', 'information', 'results', 'algorithm', 'data', 'test']", Equal Frequency Binning EFB,seg_59,note that the class labels of test data are not utilized in any of the above-mentioned unsupervised dda. this results in loss of classification information (when dda is used in engineering context). other unsupervised ddas include holte’s 1r algorithm [125] that constrains each bin to have at least m prespecified data instances of a majority class and kerber’s chi–merge algorithm [153]. the following algorithm adjusts the boundaries to decrease entropy at each interval.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0.])","tensor([ 5020,  6075,  8026,  5582,  1041, 26337])","tensor([  101,  3602,  2008,  1996,  2465, 10873,  1997,  3231,  2951,  2024,
         2025, 12550,  1999,  2151,  1997,  1996,  2682,  1011,  3855,  4895,
         6342,  4842, 11365,  2098, 20315,  2050,  1012,  2023,  3463,  1999,
         3279,  1997,  5579,  2592,  1006,  2043, 20315,  2050,  2003,  2109,
         1999,  3330,  6123,  1007,  1012,  2060,  4895,  6342,  4842, 11365,
         2098, 20315,  3022,  2421, 12621,  2063,  1521,  1055,  1015,  2099,
         9896,  1031,  8732,  1033,  2008,  9530, 20528,  7076,  2169,  8026,
         2000,  2031,  2012,  2560,  1049,  3653, 13102,  8586,  7810,  2951,
        12107,  1997,  1037,  3484,  2465,  1998, 17710, 20473,  1521,  1055,
         9610,  1516, 13590,  9896,  1031, 16710,  1033,  1012,  1996,  2206,
         9896, 14171,  2015,  1996,  7372,  2000,  9885, 23077,  2012,  2169,
        13483,  1012,   102])"
250,1,"['continuous', 'level', 'control', 'discretization', 'algorithm', 'data', 'entropy']", EntropyBased Discretization EBD,seg_61,"these are hierarchical discretization methods that maximize shannon’s entropy in the resulting discretized space or minimize entropy to control the number of intervals induced in the continuous space. as ebd considers the class labels of the data, it is a supervised learning algorithm. the ebd induces a binary tree in the data by recursively splitting it using a fixed attribute at each level. if the data are unsorted,",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  2122,  2024, 25835,  5860, 13465,  3989,  4725,  2008, 25845,
        10881,  1521,  1055, 23077,  1999,  1996,  4525,  5860, 13465,  3550,
         2686,  2030, 18478, 23077,  2000,  2491,  1996,  2193,  1997, 14025,
        10572,  1999,  1996,  7142,  2686,  1012,  2004,  1041,  2497,  2094,
        10592,  1996,  2465, 10873,  1997,  1996,  2951,  1010,  2009,  2003,
         1037, 13588,  4083,  9896,  1012,  1996,  1041,  2497,  2094, 19653,
         2015,  1037, 12441,  3392,  1999,  1996,  2951,  2011, 28667,  9236,
        14547, 14541,  2009,  2478,  1037,  4964, 17961,  2012,  2169,  2504,
         1012,  2065,  1996,  2951,  2024,  4895, 21748,  3064,  1010,   102])"
251,1,"['bins', 'representative', 'bin', 'data', 'entropy']", EntropyBased Discretization EBD,seg_61,"each value is considered one-by-one as a pivot for a possible split. let t = x[j] be the current pivot. then, we split the data into two bins as b1 = (x[i] t]∀ (i) and b2 = (x[i] ≥ t∀ (i). we assume that each of the bins contains representative data items of each of the classes. in other words, if there are k classes, we assume that at least one of the data items in each bin will belong to one of the classes. sometimes, this assumption may not hold, as our classes become more and more pure. the entropy for this split is calculated as |s1| ∗ ent(s1) + |s2| ∗ ent(s2), where |s1|",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  2169,  3643,  2003,  2641,  2028,  1011,  2011,  1011,  2028,
         2004,  1037, 14255, 22994,  2005,  1037,  2825,  3975,  1012,  2292,
         1056,  1027,  1060,  1031,  1046,  1033,  2022,  1996,  2783, 14255,
        22994,  1012,  2059,  1010,  2057,  3975,  1996,  2951,  2046,  2048,
         8026,  2015,  2004, 29491,  1027,  1006,  1060,  1031,  1045,  1033,
         1056,  1033,   100,  1006,  1045,  1007,  1998,  1038,  2475,  1027,
         1006,  1060,  1031,  1045,  1033,  1609,   100,  1006,  1045,  1007,
         1012,  2057,  7868,  2008,  2169,  1997,  1996,  8026,  2015,  3397,
         4387,  2951,  5167,  1997,  2169,  1997,  1996,  4280,  1012,  1999,
         2060,  2616,  1010,  2065,  2045,  2024,  1047,  4280,  1010,  2057,
         7868,  2008,  2012,  2560,  2028,  1997,  1996,  2951,  5167,  1999,
         2169,  8026,  2097,  7141,  2000,  2028,  1997,  1996,  4280,  1012,
         2823,  1010,  2023, 11213,  2089,  2025,  2907,  1010,  2004,  2256,
         4280,  2468,  2062,  1998,  2062,  5760,  1012,  1996, 23077,  2005,
         2023,  3975,  2003, 10174,  2004,  1064,  1055,  2487,  1064,  1598,
         4372,  2102,  1006,  1055,  2487,  1007,  1009,  1064,  1055,  2475,
         1064,  1598,  4372,  2102,  1006,  1055,  2475,  1007,  1010,  2073,
         1064,  1055,  2487,  1064,   102])"
252,1,"['bin', 'data', 'entropy']", EntropyBased Discretization EBD,seg_61,|s| |s| is the number of elements in bin b1 and |s| the total number of data items under current consideration. the entropy is calculated using all of the classes as ent(si) = −∑j,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  1064,  1055,  1064,  1064,  1055,  1064,  2003,  1996,  2193,
         1997,  3787,  1999,  8026, 29491,  1998,  1064,  1055,  1064,  1996,
         2561,  2193,  1997,  2951,  5167,  2104,  2783,  9584,  1012,  1996,
        23077,  2003, 10174,  2478,  2035,  1997,  1996,  4280,  2004,  4372,
         2102,  1006,  9033,  1007,  1027,   100,   102])"
253,1,"['bins', 'information']", EntropyBased Discretization EBD,seg_61,"k =1 p(cj) ∗ log2p(cj), where k is the number of classes and p(cj) the fraction of items belonging to class cj in the respective subset si. as log (0) = −∞, irrespective of the base of the logarithm, we will drop those classes not represented in the bins (or combine the corresponding bins with its neighbors). the information gain resulting from the split at t is found as the difference between the entropies before and after split:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  1047,  1027,  1015,  1052,  1006,  1039,  3501,  1007,  1598,
         8833,  2475,  2361,  1006,  1039,  3501,  1007,  1010,  2073,  1047,
         2003,  1996,  2193,  1997,  4280,  1998,  1052,  1006,  1039,  3501,
         1007,  1996, 12884,  1997,  5167,  7495,  2000,  2465,  1039,  3501,
         1999,  1996,  7972, 16745,  9033,  1012,  2004,  8833,  1006,  1014,
         1007,  1027,  1597, 30128,  1010, 20868,  6072,  5051, 15277,  1997,
         1996,  2918,  1997,  1996,  8833,  8486,  2705,  2213,  1010,  2057,
         2097,  4530,  2216,  4280,  2025,  3421,  1999,  1996,  8026,  2015,
         1006,  2030, 11506,  1996,  7978,  8026,  2015,  2007,  2049, 10638,
         1007,  1012,  1996,  2592,  5114,  4525,  2013,  1996,  3975,  2012,
         1056,  2003,  2179,  2004,  1996,  4489,  2090,  1996,  4372, 13181,
        13046,  2077,  1998,  2044,  3975,  1024,   102])"
254,1,['set'], EntropyBased Discretization EBD,seg_61,k =1 p′(cj) ∗ log2p′(cj) (here p′(cj) is the fraction of items belonging to class cj in the original set before split).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  1047,  1027,  1015,  1052,  1531,  1006,  1039,  3501,  1007,
         1598,  8833,  2475,  2361,  1531,  1006,  1039,  3501,  1007,  1006,
         2182,  1052,  1531,  1006,  1039,  3501,  1007,  2003,  1996, 12884,
         1997,  5167,  7495,  2000,  2465,  1039,  3501,  1999,  1996,  2434,
         2275,  2077,  3975,  1007,  1012,   102])"
255,1,"['mdl principle', 'intervals', 'data', 'entropy']", EntropyBased Discretization EBD,seg_61,"those intervals with entropy 0 or with only one data value are kept. others are split recursively. the splitting is stopped using the mdl principle when infgain(s,t)     =",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  2216, 14025,  2007, 23077,  1014,  2030,  2007,  2069,  2028,
         2951,  3643,  2024,  2921,  1012,  2500,  2024,  3975, 28667,  9236,
        14547,  1012,  1996, 14541,  2003,  3030,  2478,  1996,  9108,  2140,
         6958,  2043,  1999,  2546, 23805,  2078,  1006,  1055,  1010,  1056,
         1007,  1027,   102])"
256,1,"['correlated', 'interval', 'outliers', 'intervals', 'algorithm', 'data', 'entropy']", EntropyBased Discretization EBD,seg_61,"where n is the size of data and k the total number of classes. alternately, the difference between the entropy of the parent and maximum of the child node entropies is computed at each step, and iterations are terminated if this difference is small. as stated earlier, further splitting is continued only for impure intervals (if an interval is totally pure, then all values in it belong to the same class and its entropy is 0). if the class labels are highly correlated with an (increasing or decreasing) sort order of one or more attributes, we could considerably speedup the above-mentioned algorithm by taking t at the boundary of each class. as an example, consider discretizing medical patients as high-blood pressure (hbp) (c1) and low-blood pressure (c2) groups. majority of hbp patients are also overfat. thus, the bmi and hbp are highly correlated. if we sort the data in increasing order of bmi, there will be some overlap along the class boundary (on occasion there could also be some outliers in both classes).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  2073,  1050,  2003,  1996,  2946,  1997,  2951,  1998,  1047,
         1996,  2561,  2193,  1997,  4280,  1012, 23554,  1010,  1996,  4489,
         2090,  1996, 23077,  1997,  1996,  6687,  1998,  4555,  1997,  1996,
         2775, 13045,  4372, 13181, 13046,  2003, 24806,  2012,  2169,  3357,
         1010,  1998, 27758,  2015,  2024, 12527,  2065,  2023,  4489,  2003,
         2235,  1012,  2004,  3090,  3041,  1010,  2582, 14541,  2003,  2506,
         2069,  2005, 17727,  5397, 14025,  1006,  2065,  2019, 13483,  2003,
         6135,  5760,  1010,  2059,  2035,  5300,  1999,  2009,  7141,  2000,
         1996,  2168,  2465,  1998,  2049, 23077,  2003,  1014,  1007,  1012,
         2065,  1996,  2465, 10873,  2024,  3811, 23900,  2007,  2019,  1006,
         4852,  2030, 16922,  1007,  4066,  2344,  1997,  2028,  2030,  2062,
        12332,  1010,  2057,  2071,  9839,  3177,  6279,  1996,  2682,  1011,
         3855,  9896,  2011,  2635,  1056,  2012,  1996,  6192,  1997,  2169,
         2465,  1012,  2004,  2019,  2742,  1010,  5136,  5860, 13465,  6026,
         2966,  5022,  2004,  2152,  1011,  2668,  3778,  1006,  1044,  2497,
         2361,  1007,  1006, 27723,  1007,  1998,  2659,  1011,  2668,  3778,
         1006, 29248,  1007,  2967,  1012,  3484,  1997,  1044,  2497,  2361,
         5022,  2024,  2036,  2058, 27753,  1012,  2947,  1010,  1996,  1038,
         4328,  1998,  1044,  2497,  2361,  2024,  3811, 23900,  1012,  2065,
         2057,  4066,  1996,  2951,  1999,  4852,  2344,  1997,  1038,  4328,
         1010,  2045,  2097,  2022,  2070, 17702,  2247,  1996,  2465,  6192,
         1006,  2006,  6686,  2045,  2071,  2036,  2022,  2070,  2041, 14355,
         2015,  1999,  2119,  4280,  1007,  1012,   102])"
257,1,['data'], EntropyBased Discretization EBD,seg_61,example 1.16 discretize bmi data using ebd,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  2742,  1015,  1012,  2385,  5860, 13465,  4697,  1038,  4328,
         2951,  2478,  1041,  2497,  2094,   102])"
258,1,['data'], EntropyBased Discretization EBD,seg_61,discretize the 15 bmi data in example 1.14 (pp. 1–14) using ebd.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  5860, 13465,  4697,  1996,  2321,  1038,  4328,  2951,  1999,
         2742,  1015,  1012,  2403,  1006,  4903,  1012,  1015,  1516,  2403,
         1007,  2478,  1041,  2497,  2094,  1012,   102])"
259,1,"['set', 'algorithm', 'information', 'sample', 'data', 'entropy']", EntropyBased Discretization EBD,seg_61,"solution 1.16 as ebd is a supervised learning algorithm, we will label7 the data as x = {26.2(o), 25.6(n), 25.1(n), 23.3(u), 23.7(u), 23.4(u), 29.7(o), 28.5(o), 25.2(n), 21.4(u), 28.3(o), 33.4(o), 27.8(o), 24.4(u), 25.9(n)}. there are 6 o’s, 4 n’s, and 5 u’s in the original data. the entropy before split is −6∕15 ∗ log2 (6∕15) − 4∕15 ∗ log2(4∕15)−5∕15 ∗ log2(5∕15) =−0.4 ∗ (−1.3219)−0.26667 ∗ (−1.90689)−0.33333 ∗ (−1.58496) = 0.52877+0.5085 + 0.52832 = 1.565596. the set s1 contains all sample values 26.2 and s2 contains all sample values ≥26.2. for convenience, we represent only the class labels as s1 = {n,n,u,u,u,n,u,u,n} and s2 = {o,o,o,o,o,o}. here, s1 contains only four n’s and five u’s; and s2 contains only six o’s. the corresponding entropies are easily computed as ent(s1) = −(4∕9) ∗ log2(4∕9) − (5∕9) ∗ log2(5∕9) =−0.444444 ∗ (−1.169925)− 0.555556∗(−0.8479969) = 0.5199667+ 0.4711094= 0.991076, and ent(s2) = 0.0. information gain for this split is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  5576,  1015,  1012,  2385,  2004,  1041,  2497,  2094,  2003,
         1037, 13588,  4083,  9896,  1010,  2057,  2097,  3830,  2581,  1996,
         2951,  2004,  1060,  1027,  1063,  2656,  1012,  1016,  1006,  1051,
         1007,  1010,  2423,  1012,  1020,  1006,  1050,  1007,  1010,  2423,
         1012,  1015,  1006,  1050,  1007,  1010,  2603,  1012,  1017,  1006,
         1057,  1007,  1010,  2603,  1012,  1021,  1006,  1057,  1007,  1010,
         2603,  1012,  1018,  1006,  1057,  1007,  1010,  2756,  1012,  1021,
         1006,  1051,  1007,  1010,  2654,  1012,  1019,  1006,  1051,  1007,
         1010,  2423,  1012,  1016,  1006,  1050,  1007,  1010,  2538,  1012,
         1018,  1006,  1057,  1007,  1010,  2654,  1012,  1017,  1006,  1051,
         1007,  1010,  3943,  1012,  1018,  1006,  1051,  1007,  1010,  2676,
         1012,  1022,  1006,  1051,  1007,  1010,  2484,  1012,  1018,  1006,
         1057,  1007,  1010,  2423,  1012,  1023,  1006,  1050,  1007,  1065,
         1012,  2045,  2024,  1020,  1051,  1521,  1055,  1010,  1018,  1050,
         1521,  1055,  1010,  1998,  1019,  1057,  1521,  1055,  1999,  1996,
         2434,  2951,  1012,  1996, 23077,  2077,  3975,  2003,   100,  1598,
         8833,  2475,  1006,   100,  1007,  1597,   100,  1598,  8833,  2475,
         1006,   100,  1007,   100,  1598,  8833,  2475,  1006,   100,  1007,
         1027,  1597,  2692,  1012,  1018,  1598,  1006,  1597,  2487,  1012,
        24030,  2683,  1007,  1597,  2692,  1012, 25162,  2575,  2581,  1598,
         1006,  1597,  2487,  1012,  3938,  2575,  2620,  2683,  1007,  1597,
         2692,  1012, 21211, 22394,  1598,  1006,  1597,  2487,  1012,  5388,
        26224,  2575,  1007,  1027,  1014,  1012,  4720,  2620,  2581,  2581,
         1009,  1014,  1012,  2753, 27531,  1009,  1014,  1012,  4720,  2620,
        16703,  1027,  1015,  1012,  5179, 24087,  2683,  2575,  1012,  1996,
         2275,  1055,  2487,  3397,  2035,  7099,  5300,  2656,  1012,  1016,
         1998,  1055,  2475,  3397,  2035,  7099,  5300,  1609, 23833,  1012,
         1016,  1012,  2005, 15106,  1010,  2057,  5050,  2069,  1996,  2465,
        10873,  2004,  1055,  2487,  1027,  1063,  1050,  1010,  1050,  1010,
         1057,  1010,  1057,  1010,  1057,  1010,  1050,  1010,  1057,  1010,
         1057,  1010,  1050,  1065,  1998,  1055,  2475,  1027,  1063,  1051,
         1010,  1051,  1010,  1051,  1010,  1051,  1010,  1051,  1010,  1051,
         1065,  1012,  2182,  1010,  1055,  2487,  3397,  2069,  2176,  1050,
         1521,  1055,  1998,  2274,  1057,  1521,  1055,  1025,  1998,  1055,
         2475,  3397,  2069,  2416,  1051,  1521,  1055,  1012,  1996,  7978,
         4372, 13181, 13046,  2024,  4089, 24806,  2004,  4372,  2102,  1006,
         1055,  2487,  1007,  1027,  1597,  1006,   100,  1007,  1598,  8833,
         2475,  1006,   100,  1007,  1597,  1006,   100,  1007,  1598,  8833,
         2475,  1006,   100,  1007,  1027,  1597,  2692,  1012,  4008, 22932,
        22932,  1598,  1006,  1597,  2487,  1012, 28718, 17788,  1007,  1597,
         1014,  1012, 29541, 24087,  2575, 30125,  1006,  1597,  2692,  1012,
         6391,  2581,  2683,  2683,  2575,  2683,  1007,  1027,  1014,  1012,
         4868,  2683,  2683, 28756,  2581,  1009,  1014,  1012,  4700, 14526,
         2692,  2683,  2549,  1027,  1014,  1012,  5585, 10790,  2581,  2575,
         1010,  1998,  4372,  2102,  1006,  1055,  2475,  1007,  1027,  1014,
         1012,  1014,  1012,  2592,  5114,  2005,  2023,  3975,  2003,   102])"
260,1,"['table', 'set', 'information', 'results']", EntropyBased Discretization EBD,seg_61,"0.991076 − (6∕16) ∗ 0.0 = 0.97095. iterations are continued using each of the subsequent values as split points. the results are summarized in table 1.1. the maximum information gain 0.97095 occurs for split point 26.2. hence, we will keep the set s2 intact and recursively split s1. proceeding as above, we get the entropies as 25.60 (0.31976), 25.10 (0.99108), 23.30 (0.10219), 23.70 (0.37888), 23.40 (0.22479), 25.20 (0.55773), 21.40 (0.00000), 24.40 (0.59000), and 25.90 (0.14269). the optimal split point is 25.1 with maximum value",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  1014,  1012,  5585, 10790,  2581,  2575,  1597,  1006,   100,
         1007,  1598,  1014,  1012,  1014,  1027,  1014,  1012,  5989,  2692,
         2683,  2629,  1012, 27758,  2015,  2024,  2506,  2478,  2169,  1997,
         1996,  4745,  5300,  2004,  3975,  2685,  1012,  1996,  3463,  2024,
        22539,  1999,  2795,  1015,  1012,  1015,  1012,  1996,  4555,  2592,
         5114,  1014,  1012,  5989,  2692,  2683,  2629,  5158,  2005,  3975,
         2391,  2656,  1012,  1016,  1012,  6516,  1010,  2057,  2097,  2562,
         1996,  2275,  1055,  2475, 10109,  1998, 28667,  9236, 14547,  3975,
         1055,  2487,  1012, 18207,  2004,  2682,  1010,  2057,  2131,  1996,
         4372, 13181, 13046,  2004,  2423,  1012,  3438,  1006,  1014,  1012,
        26499,  2581,  2575,  1007,  1010,  2423,  1012,  2184,  1006,  1014,
         1012,  5585, 10790,  2620,  1007,  1010,  2603,  1012,  2382,  1006,
         1014,  1012,  9402, 16147,  1007,  1010,  2603,  1012,  3963,  1006,
         1014,  1012,  4261,  2620,  2620,  2620,  1007,  1010,  2603,  1012,
         2871,  1006,  1014,  1012, 19711,  2581,  2683,  1007,  1010,  2423,
         1012,  2322,  1006,  1014,  1012,  4583,  2581,  2581,  2509,  1007,
         1010,  2538,  1012,  2871,  1006,  1014,  1012,  2199,  8889,  1007,
         1010,  2484,  1012,  2871,  1006,  1014,  1012, 25186,  8889,  1007,
         1010,  1998,  2423,  1012,  3938,  1006,  1014,  1012, 16087,  2575,
         2683,  1007,  1012,  1996, 15502,  3975,  2391,  2003,  2423,  1012,
         1015,  2007,  4555,  3643,   102])"
261,1,['intervals'], EntropyBased Discretization EBD,seg_61,"0.99108. hence, the three intervals are u = bmi   25.1,n = (25.1, 26.2), and o = bmi ≥ 26.2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23077, 15058,  2094,  5860, 13465,  3989,  1041,  2497,  2094])","tensor([  101,  1014,  1012,  5585, 10790,  2620,  1012,  6516,  1010,  1996,
         2093, 14025,  2024,  1057,  1027,  1038,  4328,  2423,  1012,  1015,
         1010,  1050,  1027,  1006,  2423,  1012,  1015,  1010,  2656,  1012,
         1016,  1007,  1010,  1998,  1051,  1027,  1038,  4328,  1609,  2656,
         1012,  1016,  1012,   102])"
262,1,"['rate', 'estimate', 'data', 'error']", Error in Discretization,seg_63,"if the true class labels of data to be discretized are known apriori, we could estimate the error in discretizing as follows. let there be k original classes. denote original data by x and discretized data by y. for class cj, let nj be the total number of items in x. if all of them are correctly classified in y, the error rate for class j is zero. let np be the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 7561,  1999,  5860, 13465,  3989])","tensor([  101,  2065,  1996,  2995,  2465, 10873,  1997,  2951,  2000,  2022,
         5860, 13465,  3550,  2024,  2124, 19804, 25346,  2072,  1010,  2057,
         2071, 10197,  1996,  7561,  1999,  5860, 13465,  6026,  2004,  4076,
         1012,  2292,  2045,  2022,  1047,  2434,  4280,  1012, 19090,  2434,
         2951,  2011,  1060,  1998,  5860, 13465,  3550,  2951,  2011,  1061,
         1012,  2005,  2465,  1039,  3501,  1010,  2292, 19193,  2022,  1996,
         2561,  2193,  1997,  5167,  1999,  1060,  1012,  2065,  2035,  1997,
         2068,  2024, 11178,  6219,  1999,  1061,  1010,  1996,  7561,  3446,
         2005,  2465,  1046,  2003,  5717,  1012,  2292, 27937,  2022,  1996,
          102])"
263,1,['case'], Error in Discretization,seg_63,"j number of correctly classified items of cj and nqj be the wrongly classified number of items, so that nj = npj + nqj . note that in the case of just two classes, all nqj items will",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7561,  1999,  5860, 13465,  3989])","tensor([  101,  1046,  2193,  1997, 11178,  6219,  5167,  1997,  1039,  3501,
         1998,  1050,  4160,  3501,  2022,  1996, 29116,  6219,  2193,  1997,
         5167,  1010,  2061,  2008, 19193,  1027, 27937,  3501,  1009,  1050,
         4160,  3501,  1012,  3602,  2008,  1999,  1996,  2553,  1997,  2074,
         2048,  4280,  1010,  2035,  1050,  4160,  3501,  5167,  2097,   102])"
264,0,[], Error in Discretization,seg_63,"belong to the other class. however, if there are  2 classes, nq will contain all items",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7561,  1999,  5860, 13465,  3989])","tensor([ 101, 7141, 2000, 1996, 2060, 2465, 1012, 2174, 1010, 2065, 2045, 2024,
        1016, 4280, 1010, 1050, 4160, 2097, 5383, 2035, 5167,  102])"
265,1,"['rate', 'error']", Error in Discretization,seg_63,"j belonging to cj. then, the error rate for class j is nqj∕nj. the error rate for the entire",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([ 7561,  1999,  5860, 13465,  3989])","tensor([ 101, 1046, 7495, 2000, 1039, 3501, 1012, 2059, 1010, 1996, 7561, 3446,
        2005, 2465, 1046, 2003,  100, 1012, 1996, 7561, 3446, 2005, 1996, 2972,
         102])"
266,0,[], Error in Discretization,seg_63,data is obtained by summing over all of the classes as   = ∑j,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7561,  1999,  5860, 13465,  3989])","tensor([ 101, 2951, 2003, 4663, 2011, 7680, 6562, 2058, 2035, 1997, 1996, 4280,
        2004, 1027,  100,  102])"
267,1,"['continuous', 'bin', 'set', 'disjoint', 'information', 'bins', 'discretization', 'intervals', 'process', 'model', 'data', 'test']", Error in Discretization,seg_63,"k =1 nqj∕nj. the minimum of occurs when all items are correctly classified with minimum value 0. the maximum occurs when all items are incorrectly classified with maximum value 1. when there are no class overlaps ( is very small), the predictive accuracy is maximum. the information extracted by the discretization process can be used to classify new data instances. as the dda returns a set of disjoint, piece-wise continuous set of intervals, these intervals define the boundaries for various classes. we could divide the available data into a training set and a test set. the training set can then be used to construct the class boundaries (bins). these bin boundaries are then put to use in discretizing test data (in a classification context). in this sense, the dda is a semisupervised learning model.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7561,  1999,  5860, 13465,  3989])","tensor([  101,  1047,  1027,  1015,   100,  1012,  1996,  6263,  1997,  5158,
         2043,  2035,  5167,  2024, 11178,  6219,  2007,  6263,  3643,  1014,
         1012,  1996,  4555,  5158,  2043,  2035,  5167,  2024, 19721,  6219,
         2007,  4555,  3643,  1015,  1012,  2043,  2045,  2024,  2053,  2465,
        17702,  2015,  1006,  2003,  2200,  2235,  1007,  1010,  1996, 16014,
         3512, 10640,  2003,  4555,  1012,  1996,  2592, 15901,  2011,  1996,
         5860, 13465,  3989,  2832,  2064,  2022,  2109,  2000, 26268,  2047,
         2951, 12107,  1012,  2004,  1996, 20315,  2050,  5651,  1037,  2275,
         1997,  4487,  2015,  5558, 18447,  1010,  3538,  1011,  7968,  7142,
         2275,  1997, 14025,  1010,  2122, 14025,  9375,  1996,  7372,  2005,
         2536,  4280,  1012,  2057,  2071, 11443,  1996,  2800,  2951,  2046,
         1037,  2731,  2275,  1998,  1037,  3231,  2275,  1012,  1996,  2731,
         2275,  2064,  2059,  2022,  2109,  2000,  9570,  1996,  2465,  7372,
         1006,  8026,  2015,  1007,  1012,  2122,  8026,  7372,  2024,  2059,
         2404,  2000,  2224,  1999,  5860, 13465,  6026,  3231,  2951,  1006,
         1999,  1037,  5579,  6123,  1007,  1012,  1999,  2023,  3168,  1010,
         1996, 20315,  2050,  2003,  1037,  4100,  6342,  4842, 11365,  2098,
         4083,  2944,  1012,   102])"
268,1,"['categories', 'regression', 'tests', 'linear regression', 'normality', 'mean', 'normally distributed', 'statistical', 'data', 'linear', 'anova', 'numerical', 'error']", TESTING FOR NORMALITY,seg_65,"several statistical procedures such as anova tests and t-tests assume normality of data. similarly, the error terms are assumed to be normally distributed with zero mean in linear regression models. there are two categories of normality tests— (i) visual displays and (ii) numerical tests.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([5604, 2005, 3671, 3012])","tensor([  101,  2195,  7778,  8853,  2107,  2004,  2019,  7103,  5852,  1998,
         1056,  1011,  5852,  7868,  3671,  3012,  1997,  2951,  1012,  6660,
         1010,  1996,  7561,  3408,  2024,  5071,  2000,  2022,  5373,  5500,
         2007,  5717,  2812,  1999,  7399, 26237,  4275,  1012,  2045,  2024,
         2048,  7236,  1997,  3671,  3012,  5852,  1517,  1006,  1045,  1007,
         5107,  8834,  1998,  1006,  2462,  1007, 15973,  5852,  1012,   102])"
269,1,"['location', 'curve', 'normal distribution', 'graphical', 'variance', 'range', 'tails', 'location measure', 'sample', 'normal', 'distribution', 'data']", Graphical Methods for Normality Checking,seg_67,"visual displays (also known as graphical methods) use one or more graphs or diagrams to visually display the data distribution. they can be drawn as overlapping diagrams with a normal distribution for reference comparison. if the data have distinct mode, the normal curve with the same variance as the data is drawn so as to align the normal mode with the data mode. if the data mode is not unique, the normal curve uses the means for alignment. note that the theoretical normal curve extends from −∞ to ∞, whereas the sample data are always in a finite range. hence, we will look for alignment with a normal curve at the central part of the data distribution rather than at the tails (away from the location measure).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([20477,  4725,  2005,  3671,  3012,  9361])","tensor([  101,  5107,  8834,  1006,  2036,  2124,  2004, 20477,  4725,  1007,
         2224,  2028,  2030,  2062, 19287,  2030, 26309,  2000, 17453,  4653,
         1996,  2951,  4353,  1012,  2027,  2064,  2022,  4567,  2004, 20567,
        26309,  2007,  1037,  3671,  4353,  2005,  4431,  7831,  1012,  2065,
         1996,  2951,  2031,  5664,  5549,  1010,  1996,  3671,  7774,  2007,
         1996,  2168, 23284,  2004,  1996,  2951,  2003,  4567,  2061,  2004,
         2000, 25705,  1996,  3671,  5549,  2007,  1996,  2951,  5549,  1012,
         2065,  1996,  2951,  5549,  2003,  2025,  4310,  1010,  1996,  3671,
         7774,  3594,  1996,  2965,  2005, 12139,  1012,  3602,  2008,  1996,
         9373,  3671,  7774,  8908,  2013,  1597, 30128,  2000,  1601,  1010,
         6168,  1996,  7099,  2951,  2024,  2467,  1999,  1037, 10713,  2846,
         1012,  6516,  1010,  2057,  2097,  2298,  2005, 12139,  2007,  1037,
         3671,  7774,  2012,  1996,  2430,  2112,  1997,  1996,  2951,  4353,
         2738,  2084,  2012,  1996, 17448,  1006,  2185,  2013,  1996,  3295,
         5468,  1007,  1012,   102])"
270,1,"['box plots', 'curve', 'ogive', 'symmetry', 'box plot', 'tests', 'normality', 'normal distribution', 'isochronous', 'frequency', 'normal', 'plots', 'plot', 'data', 'histograms', 'quantiles', 'dot plots', 'graphical', 'distributions', 'distribution']", Graphical Methods for Normality Checking,seg_67,"the popular graphical methods include histograms, frequency polygons and curves, box plots, quantile-quantile (q-q) plots, moran plots, ogive curves, and dot plots. these can be categorized into two types:– (i) isochronous graphical methods produce shapes that resemble a normal curve. examples are the histograms, frequency curves. these graphs can be used as quick tests to check for normality. (ii) nonisochronous graphical methods produce particular shapes or patterns that do not have direct resemblance to a normal curve but are similar to the shapes obtained for data from a normal distribution. for instance, if points lie close to a straight line in a q–q plot, it is an indication of normality of data. this is due to the fact that quantiles of any two identical distributions when plotted along the x and y axes gives rise to a straight line plot. checking for symmetry using a box plot is easy, but checking for normality is more involved.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([20477,  4725,  2005,  3671,  3012,  9361])","tensor([  101,  1996,  2759, 20477,  4725,  2421,  2010,  3406, 13113,  2015,
         1010,  6075, 26572,  7446,  2015,  1998, 10543,  1010,  3482, 14811,
         1010, 24110, 15286,  1011, 24110, 15286,  1006,  1053,  1011,  1053,
         1007, 14811,  1010, 17866, 14811,  1010, 13958,  3512, 10543,  1010,
         1998, 11089, 14811,  1012,  2122,  2064,  2022, 20427,  2046,  2048,
         4127,  1024,  1516,  1006,  1045,  1007, 11163,  2818,  4948,  3560,
        20477,  4725,  3965, 10466,  2008, 13014,  1037,  3671,  7774,  1012,
         4973,  2024,  1996,  2010,  3406, 13113,  2015,  1010,  6075, 10543,
         1012,  2122, 19287,  2064,  2022,  2109,  2004,  4248,  5852,  2000,
         4638,  2005,  3671,  3012,  1012,  1006,  2462,  1007,  2512, 19565,
         2818,  4948,  3560, 20477,  4725,  3965,  3327, 10466,  2030,  7060,
         2008,  2079,  2025,  2031,  3622, 14062,  2000,  1037,  3671,  7774,
         2021,  2024,  2714,  2000,  1996, 10466,  4663,  2005,  2951,  2013,
         1037,  3671,  4353,  1012,  2005,  6013,  1010,  2065,  2685,  4682,
         2485,  2000,  1037,  3442,  2240,  1999,  1037,  1053,  1516,  1053,
         5436,  1010,  2009,  2003,  2019, 12407,  1997,  3671,  3012,  1997,
         2951,  1012,  2023,  2003,  2349,  2000,  1996,  2755,  2008, 24110,
        15286,  2015,  1997,  2151,  2048,  7235, 20611,  2043, 27347,  2247,
         1996,  1060,  1998,  1061, 19589,  3957,  4125,  2000,  1037,  3442,
         2240,  5436,  1012,  9361,  2005, 14991,  2478,  1037,  3482,  5436,
         2003,  3733,  1010,  2021,  9361,  2005,  3671,  3012,  2003,  2062,
         2920,  1012,   102])"
271,1,"['ogive', 'negative ogive', 'functions', 'tests', 'population', 'median', 'normality', 'symmetric', 'normally distributed', 'tails', 'intersection', 'normal', 'plots', 'standardized', 'plot', 'data', 'linear', 'standard', 'variates', 'tail', 'graphical', 'standard normal', 'distributions', 'sample', 'linear combinations', 'density functions', 'deviations', 'distribution', 'combinations', 'numerical']", Ogive Plots,seg_69,"ogives are graphical plots of cumulative distribution functions f(x) or survival probabilities g(x) = 1 − f(x). they are of two types, called less-than ogive (positive ogive) and more-than ogive (negative ogive). mathematically, we plot (x,f(x)) for each sample value arranged in increasing order for the less-than ogive and plot (x, 1.0 − f(x)) for the more-than ogive. the positive ogive is more popular among data analysts because several software packages support only this option. in addition, the positive ogive passes through the origin, whereas the negative ogive touches the y-axis at y = 1. if both of them are plotted in the same graph, they will intersect at the median. if the intersection point is less than the normal median and more toward the origin, it is an indication that the sample has come from a right-skewed distribution. on the other hand, an intersection point away from the normal median indicates that the sample has come from a left-skewed distribution. similar reasoning holds for leftand right-truncated distributions. the ogive curves exhibit anti-symmetry (lower left-tail and upper right-tail both tails off similarly for data from symmetric distributions). thus, the tail shapes can throw some light on whether the parent population is symmetric or not. note that a variate is symmetric around a constant if fx( − xk) + fx( + xk) = 1 ∀ k 0. in terms of density functions, this can be expressed as fx( − xk) = fx( + xk). a standard normal ogive may be superimposed on an ogive obtained from standardized empirical data to check for deviations from normality. if the original data are normal, both ogives will almost overlap. however, as linear combinations of normal variates are normally distributed, these methods cannot reveal whether the original data are linear combinations of normal laws or purely normal. nevertheless, these methods are less technical than the numerical tests.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([13958,  3512, 14811])","tensor([  101, 13958, 24653,  2024, 20477, 14811,  1997, 23260,  4353,  4972,
         1042,  1006,  1060,  1007,  2030,  7691,  4013,  3676, 14680,  1043,
         1006,  1060,  1007,  1027,  1015,  1597,  1042,  1006,  1060,  1007,
         1012,  2027,  2024,  1997,  2048,  4127,  1010,  2170,  2625,  1011,
         2084, 13958,  3512,  1006,  3893, 13958,  3512,  1007,  1998,  2062,
         1011,  2084, 13958,  3512,  1006,  4997, 13958,  3512,  1007,  1012,
         8045,  2135,  1010,  2057,  5436,  1006,  1060,  1010,  1042,  1006,
         1060,  1007,  1007,  2005,  2169,  7099,  3643,  5412,  1999,  4852,
         2344,  2005,  1996,  2625,  1011,  2084, 13958,  3512,  1998,  5436,
         1006,  1060,  1010,  1015,  1012,  1014,  1597,  1042,  1006,  1060,
         1007,  1007,  2005,  1996,  2062,  1011,  2084, 13958,  3512,  1012,
         1996,  3893, 13958,  3512,  2003,  2062,  2759,  2426,  2951, 18288,
         2138,  2195,  4007, 14555,  2490,  2069,  2023,  5724,  1012,  1999,
         2804,  1010,  1996,  3893, 13958,  3512,  5235,  2083,  1996,  4761,
         1010,  6168,  1996,  4997, 13958,  3512, 12817,  1996,  1061,  1011,
         8123,  2012,  1061,  1027,  1015,  1012,  2065,  2119,  1997,  2068,
         2024, 27347,  1999,  1996,  2168, 10629,  1010,  2027,  2097, 29261,
         2012,  1996,  3991,  1012,  2065,  1996,  6840,  2391,  2003,  2625,
         2084,  1996,  3671,  3991,  1998,  2062,  2646,  1996,  4761,  1010,
         2009,  2003,  2019, 12407,  2008,  1996,  7099,  2038,  2272,  2013,
         1037,  2157,  1011, 15315,  7974,  2098,  4353,  1012,  2006,  1996,
         2060,  2192,  1010,  2019,  6840,  2391,  2185,  2013,  1996,  3671,
         3991,  7127,  2008,  1996,  7099,  2038,  2272,  2013,  1037,  2187,
         1011, 15315,  7974,  2098,  4353,  1012,  2714, 13384,  4324,  2005,
         2187,  5685,  2157,  1011, 25449, 20611,  1012,  1996, 13958,  3512,
        10543,  8327,  3424,  1011, 14991,  1006,  2896,  2187,  1011,  5725,
         1998,  3356,  2157,  1011,  5725,  2119, 17448,  2125,  6660,  2005,
         2951,  2013, 19490, 20611,  1007,  1012,  2947,  1010,  1996,  5725,
        10466,  2064,  5466,  2070,  2422,  2006,  3251,  1996,  6687,  2313,
         2003, 19490,  2030,  2025,  1012,  3602,  2008,  1037, 13075, 13143,
         2003, 19490,  2105,  1037,  5377,  2065, 23292,  1006,  1597,  1060,
         2243,  1007,  1009, 23292,  1006,  1009,  1060,  2243,  1007,  1027,
         1015,   100,  1047,  1014,  1012,  1999,  3408,  1997,  4304,  4972,
         1010,  2023,  2064,  2022,  5228,  2004, 23292,  1006,  1597,  1060,
         2243,  1007,  1027, 23292,  1006,  1009,  1060,  2243,  1007,  1012,
         1037,  3115,  3671, 13958,  3512,  2089,  2022,  3565,  5714, 19155,
         2006,  2019, 13958,  3512,  4663,  2013, 16367, 17537,  2951,  2000,
         4638,  2005, 24353,  2015,  2013,  3671,  3012,  1012,  2065,  1996,
         2434,  2951,  2024,  3671,  1010,  2119, 13958, 24653,  2097,  2471,
        17702,  1012,  2174,  1010,  2004,  7399, 14930,  1997,  3671, 13075,
        13143,  2015,  2024,  5373,  5500,  1010,  2122,  4725,  3685,  7487,
         3251,  1996,  2434,  2951,  2024,  7399, 14930,  1997,  3671,  4277,
         2030, 11850,  3671,  1012,  6600,  1010,  2122,  4725,  2024,  2625,
         4087,  2084,  1996, 15973,  5852,  1012,   102])"
272,1,"['standardized', 'probabilities', 'sample', 'method', 'distribution', 'plot']", PP and QQ Plots,seg_71,"a probability–probability (p–p) plot is another method to check if a sample has come from a known distribution. we plot the cdf of the standardized variate along the x-axis and the corresponding cumulative probabilities from a theoretical distribution along the y-axis. mathematically, we plot (f(xj − x)∕s,g(x)) for each sample value",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4903,  1998,  1053,  4160, 14811])","tensor([  101,  1037,  9723,  1516,  9723,  1006,  1052,  1516,  1052,  1007,
         5436,  2003,  2178,  4118,  2000,  4638,  2065,  1037,  7099,  2038,
         2272,  2013,  1037,  2124,  4353,  1012,  2057,  5436,  1996,  3729,
         2546,  1997,  1996, 16367, 13075, 13143,  2247,  1996,  1060,  1011,
         8123,  1998,  1996,  7978, 23260,  4013,  3676, 14680,  2013,  1037,
         9373,  4353,  2247,  1996,  1061,  1011,  8123,  1012,  8045,  2135,
         1010,  2057,  5436,  1006,  1042,  1006,  1060,  3501,  1597,  1060,
         1007,   100,  1010,  1043,  1006,  1060,  1007,  1007,  2005,  2169,
         7099,  3643,   102])"
273,1,"['function', 'cumulative distribution function', 'distribution function', 'sample', 'distribution', 'empirical cumulative distribution function']", PP and QQ Plots,seg_71,"arranged in increasing order, where g(x) is the cdf of the hypothesized distribution from which the sample came. in other words, it compares the empirical cumulative distribution function of a variate (say along the x-axis) with the cdf of a theoretical distribution (say along the y-axis). thus, both of the axes are calibrated from",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4903,  1998,  1053,  4160, 14811])","tensor([  101,  5412,  1999,  4852,  2344,  1010,  2073,  1043,  1006,  1060,
         1007,  2003,  1996,  3729,  2546,  1997,  1996,  1044, 22571, 14573,
         2229,  3550,  4353,  2013,  2029,  1996,  7099,  2234,  1012,  1999,
         2060,  2616,  1010,  2009, 22963,  1996, 17537, 23260,  4353,  3853,
         1997,  1037, 13075, 13143,  1006,  2360,  2247,  1996,  1060,  1011,
         8123,  1007,  2007,  1996,  3729,  2546,  1997,  1037,  9373,  4353,
         1006,  2360,  2247,  1996,  1061,  1011,  8123,  1007,  1012,  2947,
         1010,  2119,  1997,  1996, 19589,  2024, 10250, 12322,  9250,  2013,
          102])"
274,1,"['normal distribution', 'slope', 'skewness', 'population', 'sample', 'samples', 'normal', 'distribution', 'kurtosis', 'plot', 'quantiles', 'data']", PP and QQ Plots,seg_71,"∘ 0 to 1.0, starting with the origin. a reference line with slope 45 is also drawn in the positive quadrant along the stretch of the data. if the sample is indeed drawn from the hypothesized population, the data points will clutter around the reference line. any major scattering away from the reference line indicates that the hypothesis is wrong. the q–q plot is very similar, except that we plot the quantiles of the data along the x-axis and quantiles of theoretical distribution along the y-axis. a skewness–kurtosis plot can also be used if multiple samples are available. this plot uses the x-axis for skewness and the y-axis for kurtosis or vice versa. as the normal distribution has skewness 0 and kurtosis 3, the sample values must clutter around the point with coordinates (0,3) (or (3,0) if skewness is plotted along the y-axis) if the parent population is normal. several researchers have modeled the skewness–kurtosis relationships empirically.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4903,  1998,  1053,  4160, 14811])","tensor([  101,  1599,  1014,  2000,  1015,  1012,  1014,  1010,  3225,  2007,
         1996,  4761,  1012,  1037,  4431,  2240,  2007,  9663,  3429,  2003,
         2036,  4567,  1999,  1996,  3893, 29371,  2247,  1996,  7683,  1997,
         1996,  2951,  1012,  2065,  1996,  7099,  2003,  5262,  4567,  2013,
         1996,  1044, 22571, 14573,  2229,  3550,  2313,  1010,  1996,  2951,
         2685,  2097, 18856, 26878,  2105,  1996,  4431,  2240,  1012,  2151,
         2350, 17501,  2185,  2013,  1996,  4431,  2240,  7127,  2008,  1996,
        10744,  2003,  3308,  1012,  1996,  1053,  1516,  1053,  5436,  2003,
         2200,  2714,  1010,  3272,  2008,  2057,  5436,  1996, 24110, 15286,
         2015,  1997,  1996,  2951,  2247,  1996,  1060,  1011,  8123,  1998,
        24110, 15286,  2015,  1997,  9373,  4353,  2247,  1996,  1061,  1011,
         8123,  1012,  1037, 15315,  7974,  2791,  1516,  9679, 12650,  5436,
         2064,  2036,  2022,  2109,  2065,  3674,  8168,  2024,  2800,  1012,
         2023,  5436,  3594,  1996,  1060,  1011,  8123,  2005, 15315,  7974,
         2791,  1998,  1996,  1061,  1011,  8123,  2005,  9679, 12650,  2030,
         3580, 18601,  1012,  2004,  1996,  3671,  4353,  2038, 15315,  7974,
         2791,  1014,  1998,  9679, 12650,  1017,  1010,  1996,  7099,  5300,
         2442, 18856, 26878,  2105,  1996,  2391,  2007, 12093,  1006,  1014,
         1010,  1017,  1007,  1006,  2030,  1006,  1017,  1010,  1014,  1007,
         2065, 15315,  7974,  2791,  2003, 27347,  2247,  1996,  1061,  1011,
         8123,  1007,  2065,  1996,  6687,  2313,  2003,  3671,  1012,  2195,
         6950,  2031, 14440,  1996, 15315,  7974,  2791,  1516,  9679, 12650,
         6550, 17537,  2135,  1012,   102])"
275,1,"['ogive', 'populations', 'distributions', 'normal', 'distribution', 'plot', 'quantiles', 'data', 'normality']", PP and QQ Plots,seg_71,"using the above-mentioned techniques, even beginning practitioners and analysts can easily be trained to check normality. all of the positive ogive plot, p–p plot and q–q plot pass through the origin. an advantage of ogive plot and q–q plot is that they can be used to check if data came from any theoretical distributions and not only for normal populations. as an example, if data are known to come from a student-t distribution, we could plot the data quantiles along the x-axis and quantiles of student’s t along the y-axis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4903,  1998,  1053,  4160, 14811])","tensor([  101,  2478,  1996,  2682,  1011,  3855,  5461,  1010,  2130,  2927,
        14617,  1998, 18288,  2064,  4089,  2022,  4738,  2000,  4638,  3671,
         3012,  1012,  2035,  1997,  1996,  3893, 13958,  3512,  5436,  1010,
         1052,  1516,  1052,  5436,  1998,  1053,  1516,  1053,  5436,  3413,
         2083,  1996,  4761,  1012,  2019,  5056,  1997, 13958,  3512,  5436,
         1998,  1053,  1516,  1053,  5436,  2003,  2008,  2027,  2064,  2022,
         2109,  2000,  4638,  2065,  2951,  2234,  2013,  2151,  9373, 20611,
         1998,  2025,  2069,  2005,  3671,  7080,  1012,  2004,  2019,  2742,
         1010,  2065,  2951,  2024,  2124,  2000,  2272,  2013,  1037,  3076,
         1011,  1056,  4353,  1010,  2057,  2071,  5436,  1996,  2951, 24110,
        15286,  2015,  2247,  1996,  1060,  1011,  8123,  1998, 24110, 15286,
         2015,  1997,  3076,  1521,  1055,  1056,  2247,  1996,  1061,  1011,
         8123,  1012,   102])"
276,1,"['curve', 'class interval', 'method', 'binomial distribution', 'normality', 'normal distribution', 'interval', 'tails', 'frequency', 'histogram', 'normal', 'plots', 'statistics', 'plot', 'data', 'binomial', 'continuous', 'case', 'discrete', 'parameter', 'trial', 'dispersion', 'standard', 'discrete distributions', 'success', 'range', 'standard normal', 'distributions', 'outliers', 'deviations', 'distribution', 'error']", StemandLeaf Plots,seg_73,"if all data values are integers with a fixed range (say they have two or three digits), one could also use the stem-and-leaf (s l) plot to check if data are approximately normal (this method, however, cannot distinguish between continuous and discrete distributions. for example, the s l plot of data from a binomial distribution with a p close to 0.5 and large n will resemble that from a normal law). they are unsuitable for higher dimensional data. this method depends on the user’s familiarity with the normal law too. most statistics textbooks give the figure of only the standard normal law n(0, 1). as the dispersion parameter  2  0, the normal curve can take a variety of shapes. hence unless a normal distribution is superimposed on the observed data, slight deviations from normality are difficult to judge. in addition, the success also depends on the class width chosen for some of these plots. if a histogram is prepared with a small class interval, some of the classes may be empty (there may not be any data points falling in this range, so that their frequency counts are zeros). this is more likely to occur in classes toward the tails, especially when data contain outliers (exceptions do exist as in the case of u-shaped distributions). thus, a trial and error method with many class widths may be needed to reasonably conclude that the data are indeed drawn from a normal law.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 7872,  5685, 19213, 14811])","tensor([  101,  2065,  2035,  2951,  5300,  2024, 24028,  2007,  1037,  4964,
         2846,  1006,  2360,  2027,  2031,  2048,  2030,  2093, 16648,  1007,
         1010,  2028,  2071,  2036,  2224,  1996,  7872,  1011,  1998,  1011,
         7053,  1006,  1055,  1048,  1007,  5436,  2000,  4638,  2065,  2951,
         2024,  3155,  3671,  1006,  2023,  4118,  1010,  2174,  1010,  3685,
        10782,  2090,  7142,  1998, 16246, 20611,  1012,  2005,  2742,  1010,
         1996,  1055,  1048,  5436,  1997,  2951,  2013,  1037,  8026, 20936,
         2389,  4353,  2007,  1037,  1052,  2485,  2000,  1014,  1012,  1019,
         1998,  2312,  1050,  2097, 13014,  2008,  2013,  1037,  3671,  2375,
         1007,  1012,  2027,  2024, 25622,  2005,  3020,  8789,  2951,  1012,
         2023,  4118,  9041,  2006,  1996,  5310,  1521,  1055, 24666,  2007,
         1996,  3671,  2375,  2205,  1012,  2087,  6747, 18841,  2507,  1996,
         3275,  1997,  2069,  1996,  3115,  3671,  2375,  1050,  1006,  1014,
         1010,  1015,  1007,  1012,  2004,  1996,  4487, 17668, 10992, 16381,
         1016,  1014,  1010,  1996,  3671,  7774,  2064,  2202,  1037,  3528,
         1997, 10466,  1012,  6516,  4983,  1037,  3671,  4353,  2003,  3565,
         5714, 19155,  2006,  1996,  5159,  2951,  1010,  7263, 24353,  2015,
         2013,  3671,  3012,  2024,  3697,  2000,  3648,  1012,  1999,  2804,
         1010,  1996,  3112,  2036,  9041,  2006,  1996,  2465,  9381,  4217,
         2005,  2070,  1997,  2122, 14811,  1012,  2065,  1037,  2010,  3406,
        13113,  2003,  4810,  2007,  1037,  2235,  2465, 13483,  1010,  2070,
         1997,  1996,  4280,  2089,  2022,  4064,  1006,  2045,  2089,  2025,
         2022,  2151,  2951,  2685,  4634,  1999,  2023,  2846,  1010,  2061,
         2008,  2037,  6075,  9294,  2024,  5717,  2015,  1007,  1012,  2023,
         2003,  2062,  3497,  2000,  5258,  1999,  4280,  2646,  1996, 17448,
         1010,  2926,  2043,  2951,  5383,  2041, 14355,  2015,  1006, 11790,
         2079,  4839,  2004,  1999,  1996,  2553,  1997,  1057,  1011,  5044,
        20611,  1007,  1012,  2947,  1010,  1037,  3979,  1998,  7561,  4118,
         2007,  2116,  2465,  9381,  2015,  2089,  2022,  2734,  2000, 16286,
        16519,  2008,  1996,  2951,  2024,  5262,  4567,  2013,  1037,  3671,
         2375,  1012,   102])"
277,1,"['sample', 'outliers', 'plots', 'median', 'normality']", StemandLeaf Plots,seg_73,"box plots are more appropriate to check for outliers than for normality. it uses the five-number summary of a sample, namely, the (minimum, q1, median= q2,q3,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7872,  5685, 19213, 14811])","tensor([  101,  3482, 14811,  2024,  2062,  6413,  2000,  4638,  2005,  2041,
        14355,  2015,  2084,  2005,  3671,  3012,  1012,  2009,  3594,  1996,
         2274,  1011,  2193, 12654,  1997,  1037,  7099,  1010,  8419,  1010,
         1996,  1006,  6263,  1010,  1053,  2487,  1010,  3991,  1027,  1053,
         2475,  1010,  1053,  2509,  1010,   102])"
278,1,"['mean', 'symmetric', 'observations', 'symmetric distributions', 'distributions', 'sampling', 'outliers', 'errors', 'data', 'median']", StemandLeaf Plots,seg_73,"maximum). if the data are symmetrically distributed, the q1 and q3 are equidistant from the median (q2 − q1 = q3 − q2). this is easy to catch if the scale of the graph is large enough (so that the boxes are long). in addition, the mean and median should coincide for symmetric distributions. as the box is drawn from q1 to q3, the mean and median should bisect the box area (they must be approximately at the center of the box; considering any sampling errors). the difference q3 − q1 is called iqr. all observations that fall below−1.5*iqr of q1 and above 1.5*iqr of q3 are considered to be outliers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([ 7872,  5685, 19213, 14811])","tensor([  101,  4555,  1007,  1012,  2065,  1996,  2951,  2024, 23476,  2135,
         5500,  1010,  1996,  1053,  2487,  1998,  1053,  2509,  2024,  1041,
        15549, 10521,  5794,  2102,  2013,  1996,  3991,  1006,  1053,  2475,
         1597,  1053,  2487,  1027,  1053,  2509,  1597,  1053,  2475,  1007,
         1012,  2023,  2003,  3733,  2000,  4608,  2065,  1996,  4094,  1997,
         1996, 10629,  2003,  2312,  2438,  1006,  2061,  2008,  1996,  8378,
         2024,  2146,  1007,  1012,  1999,  2804,  1010,  1996,  2812,  1998,
         3991,  2323, 19680,  2005, 19490, 20611,  1012,  2004,  1996,  3482,
         2003,  4567,  2013,  1053,  2487,  2000,  1053,  2509,  1010,  1996,
         2812,  1998,  3991,  2323, 20377, 22471,  1996,  3482,  2181,  1006,
         2027,  2442,  2022,  3155,  2012,  1996,  2415,  1997,  1996,  3482,
         1025,  6195,  2151, 16227, 10697,  1007,  1012,  1996,  4489,  1053,
         2509,  1597,  1053,  2487,  2003,  2170, 26264,  2099,  1012,  2035,
         9420,  2008,  2991,  2917, 27944,  1012,  1019,  1008, 26264,  2099,
         1997,  1053,  2487,  1998,  2682,  1015,  1012,  1019,  1008, 26264,
         2099,  1997,  1053,  2509,  2024,  2641,  2000,  2022,  2041, 14355,
         2015,  1012,   102])"
279,1,"['curve', 'gaussian distribution', 'symmetry', 'symmetric distributions', 'method', 'tests', 'population', 'median', 'normality', 'location', 'mean', 'asymmetric', 'symmetric', 'skewness', 'inverse gaussian', 'inverse gaussian distribution', 'normal', 'samples', 'jointly', 'data', 'test', 'frequencies', 'dispersion', 'kurtosis', 'combination', 'distributions', 'sample', 'sample size', 'distribution']", Numerical Methods for Normality Testing,seg_75,"numerical tests are more reliable as they can catch all kinds of normality violations (normality may be violated due to dispersion, skewness or kurtosis, or a combination of these. in a normal curve, 68.26% of the frequencies lie in ∓ , 95.44% of the frequencies lie in ∓ 2 , and 99.74% of the frequencies lie in ∓ 3 (see chapter 8). location and spread measures computed from the data cannot in general reveal if the parent population is normal or not. as the mean, median, and mode coincide for symmetric distributions, these measures can quite often reveal symmetry for large samples. if the sample size is small, the above-mentioned measures may be in proximity (close-by) even for asymmetric distributions. a symmetry test and a skewness measure can jointly be used to check for normality. as discussed in the following, there are many symmetric distributions with the same skewness. hence, this method cannot always guarantee the normality of a population. similarly, linear combination of several symmetric distributions is known to be symmetric. if data are known to be asymmetric, the inverse gaussian distribution ig( , ) with pdf",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1.,
        1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([15973,  4725,  2005,  3671,  3012,  5604])","tensor([  101, 15973,  5852,  2024,  2062, 10539,  2004,  2027,  2064,  4608,
         2035,  7957,  1997,  3671,  3012, 13302,  1006,  3671,  3012,  2089,
         2022, 14424,  2349,  2000,  4487, 17668, 10992,  1010, 15315,  7974,
         2791,  2030,  9679, 12650,  1010,  2030,  1037,  5257,  1997,  2122,
         1012,  1999,  1037,  3671,  7774,  1010,  6273,  1012,  2656,  1003,
         1997,  1996, 13139,  4682,  1999,   100,  1010,  5345,  1012,  4008,
         1003,  1997,  1996, 13139,  4682,  1999,   100,  1016,  1010,  1998,
         5585,  1012,  6356,  1003,  1997,  1996, 13139,  4682,  1999,   100,
         1017,  1006,  2156,  3127,  1022,  1007,  1012,  3295,  1998,  3659,
         5761, 24806,  2013,  1996,  2951,  3685,  1999,  2236,  7487,  2065,
         1996,  6687,  2313,  2003,  3671,  2030,  2025,  1012,  2004,  1996,
         2812,  1010,  3991,  1010,  1998,  5549, 19680,  2005, 19490, 20611,
         1010,  2122,  5761,  2064,  3243,  2411,  7487, 14991,  2005,  2312,
         8168,  1012,  2065,  1996,  7099,  2946,  2003,  2235,  1010,  1996,
         2682,  1011,  3855,  5761,  2089,  2022,  1999, 10039,  1006,  2485,
         1011,  2011,  1007,  2130,  2005,  2004, 24335, 12589, 20611,  1012,
         1037, 14991,  3231,  1998,  1037, 15315,  7974,  2791,  5468,  2064,
        10776,  2022,  2109,  2000,  4638,  2005,  3671,  3012,  1012,  2004,
         6936,  1999,  1996,  2206,  1010,  2045,  2024,  2116, 19490, 20611,
         2007,  1996,  2168, 15315,  7974,  2791,  1012,  6516,  1010,  2023,
         4118,  3685,  2467, 11302,  1996,  3671,  3012,  1997,  1037,  2313,
         1012,  6660,  1010,  7399,  5257,  1997,  2195, 19490, 20611,  2003,
         2124,  2000,  2022, 19490,  1012,  2065,  2951,  2024,  2124,  2000,
         2022,  2004, 24335, 12589,  1010,  1996, 19262, 11721, 17854,  2937,
         4353,  1045,  2290,  1006,  1010,  1007,  2007, 11135,   102])"
280,1,"['model', 'data']", Numerical Methods for Normality Testing,seg_75,"1   f (x; ,  ) = ( ∕2 x3) 2 exp{− 2 2x (x −  )2} is the preferred choice for data model-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([15973,  4725,  2005,  3671,  3012,  5604])","tensor([ 101, 1015, 1042, 1006, 1060, 1025, 1010, 1007, 1027, 1006,  100, 1060,
        2509, 1007, 1016, 4654, 2361, 1063, 1597, 1016, 1016, 2595, 1006, 1060,
        1597, 1007, 1016, 1065, 2003, 1996, 6871, 3601, 2005, 2951, 2944, 1011,
         102])"
281,1,"['graphical', 'table', 'normality']", Numerical Methods for Normality Testing,seg_75,ing and fitting. table 1.2 summarizes popular normality testing using graphical and analytical methods.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([15973,  4725,  2005,  3671,  3012,  5604])","tensor([  101, 13749,  1998, 11414,  1012,  2795,  1015,  1012,  1016,  7680,
         7849, 10057,  2759,  3671,  3012,  5604,  2478, 20477,  1998, 17826,
         4725,  1012,   102])"
282,1,"['lack of symmetry', 'symmetry', 'distributions', 'sample', 'samples', 'sample size', 'plot', 'data', 'transformation', 'asymmetric']", Numerical Methods for Normality Testing,seg_75,"a data plot can reveal any possible lack of symmetry for 2d samples. this is more difficult to visualize when dimensionality is more than three. in addition, if the variables (in 2d or more) are measured in different units, one may have to do a data transformation to concisely visualize the data. any slight departures from symmetry may not be apparent in such situations. this is more challenging when the sample size is small. suppose we have data from two asymmetric distributions. deciding whether one is more asymmetric than the other is harder when they are mirror image",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([15973,  4725,  2005,  3671,  3012,  5604])","tensor([  101,  1037,  2951,  5436,  2064,  7487,  2151,  2825,  3768,  1997,
        14991,  2005, 14134,  8168,  1012,  2023,  2003,  2062,  3697,  2000,
         5107,  4697,  2043,  8789,  3012,  2003,  2062,  2084,  2093,  1012,
         1999,  2804,  1010,  2065,  1996, 10857,  1006,  1999, 14134,  2030,
         2062,  1007,  2024,  7594,  1999,  2367,  3197,  1010,  2028,  2089,
         2031,  2000,  2079,  1037,  2951,  8651,  2000,  9530, 18380,  2135,
         5107,  4697,  1996,  2951,  1012,  2151,  7263,  6712,  2015,  2013,
        14991,  2089,  2025,  2022,  6835,  1999,  2107,  8146,  1012,  2023,
         2003,  2062, 10368,  2043,  1996,  7099,  2946,  2003,  2235,  1012,
         6814,  2057,  2031,  2951,  2013,  2048,  2004, 24335, 12589, 20611,
         1012, 10561,  3251,  2028,  2003,  2062,  2004, 24335, 12589,  2084,
         1996,  2060,  2003,  6211,  2043,  2027,  2024,  5259,  3746,   102])"
283,1,"['skewed', 'graphical', 'lack of symmetry', 'symmetry', 'skewness', 'distributions', 'tests', 'plots', 'geometric', 'data', 'normality']", Numerical Methods for Normality Testing,seg_75,"asymmetric—one is skewed to the left and the other is skewed to the right. setting aside the geometric intuition behind skewness as evinced through graphical plots and displays, a numeric score derived from the data can certainly help to understand the amount of lack of symmetry. if such a measure takes positive and negative values, we could even distinguish between left-skewed and right-skewed distributions. several skewness measures have been reported for this purpose. these are interpreted as measures of lack of symmetry because increasing values indicate how far they are away from symmetry. see refs 60, 134, and 170 for other normality tests.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([15973,  4725,  2005,  3671,  3012,  5604])","tensor([  101,  2004, 24335, 12589,  1517,  2028,  2003, 15315,  7974,  2098,
         2000,  1996,  2187,  1998,  1996,  2060,  2003, 15315,  7974,  2098,
         2000,  1996,  2157,  1012,  4292,  4998,  1996, 14965, 26406,  2369,
        15315,  7974,  2791,  2004, 23408,  2378, 11788,  2083, 20477, 14811,
         1998,  8834,  1010,  1037, 16371, 25531,  3556,  5173,  2013,  1996,
         2951,  2064,  5121,  2393,  2000,  3305,  1996,  3815,  1997,  3768,
         1997, 14991,  1012,  2065,  2107,  1037,  5468,  3138,  3893,  1998,
         4997,  5300,  1010,  2057,  2071,  2130, 10782,  2090,  2187,  1011,
        15315,  7974,  2098,  1998,  2157,  1011, 15315,  7974,  2098, 20611,
         1012,  2195, 15315,  7974,  2791,  5761,  2031,  2042,  2988,  2005,
         2023,  3800,  1012,  2122,  2024, 10009,  2004,  5761,  1997,  3768,
         1997, 14991,  2138,  4852,  5300,  5769,  2129,  2521,  2027,  2024,
         2185,  2013, 14991,  1012,  2156, 25416,  2015,  3438,  1010, 15170,
         1010,  1998, 10894,  2005,  2060,  3671,  3012,  5852,  1012,   102])"
284,1,"['data', 'bayesian', 'level', 'discretization', 'statistics', 'statistical', 'summation', 'algorithm', 'transformation']", SUMMARY,seg_77,"this chapter introduced different data types encountered in statistical analysis. some notations to better understand statistics in particular and mathematical sciences in general are given below. most students are familiar with the summation and product notations. however, these can sometimes be intricate and often tricky solutions exist to simplify them. some of the concepts such as sum and product notations, data discretization, and transformation may be skipped depending on the level of the course. readers who are already familiar with summation and product notations, combinations, and so on can have a bird’s eye view of the respective sections. equations that are unfamiliar or tedious can be skipped in the first reading as these are meant only to familiarize the reader with various notations. see ref. 298 for an unsupervised and ref. 174 for a bayesian data discretization algorithm.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2023,  3127,  3107,  2367,  2951,  4127,  8567,  1999,  7778,
         4106,  1012,  2070, 14869,  2015,  2000,  2488,  3305,  6747,  1999,
         3327,  1998,  8045,  4163,  1999,  2236,  2024,  2445,  2917,  1012,
         2087,  2493,  2024,  5220,  2007,  1996,  7680, 28649,  1998,  4031,
        14869,  2015,  1012,  2174,  1010,  2122,  2064,  2823,  2022, 17796,
         1998,  2411, 24026,  7300,  4839,  2000, 21934, 28250,  2068,  1012,
         2070,  1997,  1996,  8474,  2107,  2004,  7680,  1998,  4031, 14869,
         2015,  1010,  2951,  5860, 13465,  3989,  1010,  1998,  8651,  2089,
         2022, 16791,  5834,  2006,  1996,  2504,  1997,  1996,  2607,  1012,
         8141,  2040,  2024,  2525,  5220,  2007,  7680, 28649,  1998,  4031,
        14869,  2015,  1010, 14930,  1010,  1998,  2061,  2006,  2064,  2031,
         1037,  4743,  1521,  1055,  3239,  3193,  1997,  1996,  7972,  5433,
         1012, 11380,  2008,  2024, 16261,  2030,  6945,  6313,  2064,  2022,
        16791,  1999,  1996,  2034,  3752,  2004,  2122,  2024,  3214,  2069,
         2000,  5220,  4697,  1996,  8068,  2007,  2536, 14869,  2015,  1012,
         2156, 25416,  1012, 27240,  2005,  2019,  4895,  6342,  4842, 11365,
         2098,  1998, 25416,  1012, 19492,  2005,  1037,  3016, 25253,  2951,
         5860, 13465,  3989,  9896,  1012,   102])"
285,1,"['interval', 'data']", SUMMARY,seg_77,a) interval data have no natural zero point,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  1007, 13483,  2951,  2031,  2053,  3019,  5717,  2391,
          102])"
286,1,"['interval', 'quartile', 'data']", SUMMARY,seg_77,b) quartile differences are interval data,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1038,  1007, 24209,  8445,  9463,  5966,  2024, 13483,  2951,
          102])"
287,1,['sample'], SUMMARY,seg_77,c) the mode of a sample can coincide with the minimum of the sample,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1039,  1007,  1996,  5549,  1997,  1037,  7099,  2064, 19680,
         2007,  1996,  6263,  1997,  1996,  7099,   102])"
288,1,"['ordinal data', 'ordinal', 'data', 'median']", SUMMARY,seg_77,d) the median is meaningless for ordinal data,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1040,  1007,  1996,  3991,  2003, 25120,  2005,  2030, 18979,
         2140,  2951,   102])"
289,1,"['ordinal data', 'ordinal', 'data']", SUMMARY,seg_77,e) a scale of proportionality exist among values of numeric ordinal data,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0.])",tensor([12654]),"tensor([  101,  1041,  1007,  1037,  4094,  1997, 14267,  3012,  4839,  2426,
         5300,  1997, 16371, 25531,  2030, 18979,  2140,  2951,   102])"
290,1,"['set', 'entropy']", SUMMARY,seg_77,f) the entropy of a set can be negative,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1042,  1007,  1996, 23077,  1997,  1037,  2275,  2064,  2022,
         4997,   102])"
291,1,"['nominal', 'variables']", SUMMARY,seg_77,g) all arithmetic operations are allowed on numeric nominal variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1043,  1007,  2035, 20204,  3136,  2024,  3039,  2006, 16371,
        25531, 15087, 10857,   102])"
292,1,"['discretization', 'data']", SUMMARY,seg_77,h) data discretization works only for unlabeled data.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1044,  1007,  2951,  5860, 13465,  3989,  2573,  2069,  2005,
         4895, 20470, 12260,  2094,  2951,  1012,   102])"
293,1,['categorical'], SUMMARY,seg_77,1.2 what are the main branches of 1.4 distinguish between categorical,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1015,  1012,  1016,  2054,  2024,  1996,  2364,  5628,  1997,
         1015,  1012,  1018, 10782,  2090,  4937, 27203,   102])"
294,1,"['sample', 'sample size', 'quantitative', 'data']", SUMMARY,seg_77,statistics? how does sample size and quantitative data. what are,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6747,  1029,  2129,  2515,  7099,  2946,  1998, 20155,  2951,
         1012,  2054,  2024,   102])"
295,1,['statistical'], SUMMARY,seg_77,differ among these branches? some statistical procedures that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101, 11234,  2426,  2122,  5628,  1029,  2070,  7778,  8853,  2008,
          102])"
296,1,"['nominal', 'information']", SUMMARY,seg_77,use each of them? which encap1.3 give examples of nominal and sulates more information?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2224,  2169,  1997,  2068,  1029,  2029,  4372, 17695,  2487,
         1012,  1017,  2507,  4973,  1997, 15087,  1998, 21396,  8520,  2062,
         2592,  1029,   102])"
297,1,['data'], SUMMARY,seg_77,ordinal data. what are some,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2030, 18979,  2140,  2951,  1012,  2054,  2024,  2070,   102])"
298,1,['standard'], SUMMARY,seg_77,restrictions on coding these types 1.5 distinguish between standard and,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  9259,  2006, 16861,  2122,  4127,  1015,  1012,  1019, 10782,
         2090,  3115,  1998,   102])"
299,1,['data'], SUMMARY,seg_77,of data? extended data types. identify some,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1997, 2951, 1029, 3668, 2951, 4127, 1012, 6709, 2070,  102])"
300,1,"['set', 'varying', 'standard', 'data', 'variable']", SUMMARY,seg_77,numeric measures used in each of 1.17 give an example of a summathe standard data types. tion over a set. give examples of subscript varying and superscript 1.6 what type of variable is each of varying summations.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 16371, 25531,  5761,  2109,  1999,  2169,  1997,  1015,  1012,
         2459,  2507,  2019,  2742,  1997,  1037,  7680, 18900,  5369,  3115,
         2951,  4127,  1012, 14841,  2239,  2058,  1037,  2275,  1012,  2507,
         4973,  1997,  4942, 22483,  9671,  1998,  3565, 22483,  1015,  1012,
         1020,  2054,  2828,  1997,  8023,  2003,  2169,  1997,  9671,  7680,
        28649,  2015,  1012,   102])"
301,1,"['dependent', 'scores', 'intensity']", SUMMARY,seg_77,"the following: (i) bmi, (ii) sys1.18 give examples of double summatolic blood pressure, (iii) earthtions where the inner indexvar is quake intensity, (iv) consumer dependent on the outer indexvar. price index, (v) gre scores.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  2206,  1024,  1006,  1045,  1007,  1038,  4328,  1010,
         1006,  2462,  1007, 25353,  2015,  2487,  1012,  2324,  2507,  4973,
         1997,  3313,  7680, 18900, 23518,  2668,  3778,  1010,  1006,  3523,
         1007,  3011,  9285,  2073,  1996,  5110,  5950, 10755,  2003, 27785,
         8015,  1010,  1006,  4921,  1007,  7325,  7790,  2006,  1996,  6058,
         5950, 10755,  1012,  3976,  5950,  1010,  1006,  1058,  1007, 24665,
         2063,  7644,  1012,   102])"
302,0,[], SUMMARY,seg_77,1.19 what is the most appropriate 1.7 can you apply the change of ori-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1015, 1012, 2539, 2054, 2003, 1996, 2087, 6413, 1015, 1012, 1021,
        2064, 2017, 6611, 1996, 2689, 1997, 2030, 2072, 1011,  102])"
303,1,"['model', 'sample', 'median']", SUMMARY,seg_77,indexvar to model thermal congin technique to find the median ductivity problems? of a sample containing very large,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5950, 10755,  2000,  2944,  9829, 26478,  2378,  6028,  2000,
         2424,  1996,  3991, 23245,  7730,  3471,  1029,  1997,  1037,  7099,
         4820,  2200,  2312,   102])"
304,1,['sample'], SUMMARY,seg_77,numbers? mode of same sample? 1.20 in what situations can you,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 3616, 1029, 5549, 1997, 2168, 7099, 1029, 1015, 1012, 2322, 1999,
        2054, 8146, 2064, 2017,  102])"
305,0,[], SUMMARY,seg_77,exchange the indexvars in a dou1.8 consider the alphabet of any natuble sum?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  3863,  1996,  5950, 10755,  2015,  1999,  1037,  2079,  2226,
         2487,  1012,  1022,  5136,  1996, 12440,  1997,  2151, 14085, 12083,
         2571,  7680,  1029,   102])"
306,1,['data'], SUMMARY,seg_77,ral language. what type of data are,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101, 10958,  2140,  2653,  1012,  2054,  2828,  1997,  2951,  2024,
          102])"
307,0,[], SUMMARY,seg_77,these? 1.21 give an example where the indexvar increments in fractions. 1.9 which means are easier to evalu-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2122,  1029,  1015,  1012,  2538,  2507,  2019,  2742,  2073,
         1996,  5950, 10755,  4297, 28578, 11187,  1999, 12884,  2015,  1012,
         1015,  1012,  1023,  2029,  2965,  2024,  6082,  2000,  9345,  7630,
         1011,   102])"
308,1,"['function', 'probability', 'distributions', 'probability mass function', 'mass function', 'data']", SUMMARY,seg_77,ate for distributions that have ( n x) 1.22 give an example where the indexin the probability mass function?. var is varied from high to low values. is it possible to convert such 1.10 what data are the basic building summations in the low to high,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  8823,  2005, 20611,  2008,  2031,  1006,  1050,  1060,  1007,
         1015,  1012,  2570,  2507,  2019,  2742,  2073,  1996,  5950,  2378,
         1996,  9723,  3742,  3853,  1029,  1012, 13075,  2003,  9426,  2013,
         2152,  2000,  2659,  5300,  1012,  2003,  2009,  2825,  2000, 10463,
         2107,  1015,  1012,  2184,  2054,  2951,  2024,  1996,  3937,  2311,
         7680, 28649,  2015,  1999,  1996,  2659,  2000,  2152,   102])"
309,1,['data'], SUMMARY,seg_77,blocks of text encoded data? indexvar values using an index,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5991,  1997,  3793, 12359,  2951,  1029,  5950, 10755,  5300,
         2478,  2019,  5950,   102])"
310,1,"['parameter', 'statistic']", SUMMARY,seg_77,transformation? 1.11 define parameter and statistic.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  8651,  1029,  1015,  1012,  2340,  9375, 16381,  1998, 28093,
         6553,  1012,   102])"
311,1,"['summation', 'statistic']", SUMMARY,seg_77,can a statistic take arbitrarily large 1.23 what type of summation will you,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2064,  1037, 28093,  6553,  2202, 12098, 16313, 19848,  6588,
         2312,  1015,  1012,  2603,  2054,  2828,  1997,  7680, 28649,  2097,
         2017,   102])"
312,0,[], SUMMARY,seg_77,values? use in very large matrix mul-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  5300,  1029,  2224,  1999,  2200,  2312,  8185, 14163,  2140,
         1011,   102])"
313,1,['population'], SUMMARY,seg_77,tiplication problems where each 1.12 distinguish between population,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  5955, 19341,  3508,  3471,  2073,  2169,  1015,  1012,  2260,
        10782,  2090,  2313,   102])"
314,1,"['sample', 'populations']", SUMMARY,seg_77,matrix is decomposed into several and sample. give examples of submatrices of appropriate order? enumerable populations.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  8185,  2003, 21933,  8737, 24768,  2046,  2195,  1998,  7099,
         1012,  2507,  4973,  1997,  4942, 18900, 17599,  2015,  1997,  6413,
         2344,  1029,  4372, 17897, 16670,  7080,  1012,   102])"
315,1,['limit'], SUMMARY,seg_77,1.24 give examples of summations 1.13 what are some problems encounin which the upper limit for,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1012,  2484,  2507,  4973,  1997,  7680, 28649,  2015,
         1015,  1012,  2410,  2054,  2024,  2070,  3471,  4372,  3597, 19496,
         2078,  2029,  1996,  3356,  5787,  2005,   102])"
316,1,"['poisson', 'parameter']", SUMMARY,seg_77,tered in computing the poisson the indexvar is known only at pdf for large parameter values? run-time.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 28774,  2098,  1999,  9798,  1996, 13433, 24077,  1996,  5950,
        10755,  2003,  2124,  2069,  2012, 11135,  2005,  2312, 16381,  5300,
         1029,  2448,  1011,  2051,  1012,   102])"
317,0,[], SUMMARY,seg_77,1.14 what are some situations in which 1.25 distinguish between supervised,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1015,  1012,  2403,  2054,  2024,  2070,  8146,  1999,  2029,
         1015,  1012,  2423, 10782,  2090, 13588,   102])"
318,1,"['variables', 'summation', 'data']", SUMMARY,seg_77,the summation variables in a douand unsupervised data discretizable sum can be interchanged?. tion algorithms.,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  7680, 28649, 10857,  1999,  1037,  2079, 13860,  2094,
         4895,  6342,  4842, 11365,  2098,  2951,  5860, 13465, 21335,  3468,
         7680,  2064,  2022,  8989,  2094,  1029,  1012, 14841,  2239, 13792,
         1012,   102])"
319,0,[], SUMMARY,seg_77,1.15 give an example situation where,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1015, 1012, 2321, 2507, 2019, 2742, 3663, 2073,  102])"
320,1,['variable'], SUMMARY,seg_77,"the index variable is varied from 1.26 if xmxm is a square matrix, use the ∑ notation to find the sum of high to low values. each of the following:–(i) diagonal",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  5950,  8023,  2003,  9426,  2013,  1015,  1012,  2656,
         2065,  1060, 22984,  2213,  2003,  1037,  2675,  8185,  1010,  2224,
         1996,   100, 14869,  2000,  2424,  1996,  7680,  1997,  2152,  2000,
         2659,  5300,  1012,  2169,  1997,  1996,  2206,  1024,  1516,  1006,
         1045,  1007, 19754,   102])"
321,1,['nested sum'], SUMMARY,seg_77,"1.16 what is a nested sum? how are elements, (ii) tridiagonal elements",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1012,  2385,  2054,  2003,  1037,  9089,  2098,  7680,
         1029,  2129,  2024,  3787,  1010,  1006,  2462,  1007, 13012,  9032,
        20028,  3787,   102])"
322,0,[], SUMMARY,seg_77,"they evaluated? what are the pos(main diagonal plus adjacent diagsible simplifications in a nested onals), and (iii) lower triangular sum evaluation? elements (including the diagonal).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2027, 16330,  1029,  2054,  2024,  1996, 13433,  2015,  1006,
         2364, 19754,  4606,  5516, 22939,  5620,  7028, 21934, 24759,  9031,
         2015,  1999,  1037,  9089,  2098,  2006,  9777,  1007,  1010,  1998,
         1006,  3523,  1007,  2896, 14023,  7680,  9312,  1029,  3787,  1006,
         2164,  1996, 19754,  1007,  1012,   102])"
323,0,[], SUMMARY,seg_77,1.27 the number of hours that a battery where x[n] is the signal value,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1015, 1012, 2676, 1996, 2193, 1997, 2847, 2008, 1037, 6046, 2073,
        1060, 1031, 1050, 1033, 2003, 1996, 4742, 3643,  102])"
324,1,['data'], SUMMARY,seg_77,can be continuously operated in recorded at time t = n. rewrite the different devices after a 30-minute expression where n varies from 0 recharge is given below. transto 2n. what is the power when form the data into the interthe signals are either compressed,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2064,  2022, 10843,  3498,  1999,  2680,  2012,  2051,  1056,
         1027,  1050,  1012,  2128, 26373,  1996,  2367,  5733,  2044,  1037,
         2382,  1011,  3371,  3670,  2073,  1050,  9783,  2013,  1014, 28667,
         8167,  3351,  2003,  2445,  2917,  1012,  9099,  3406,  1016,  2078,
         1012,  2054,  2003,  1996,  2373,  2043,  2433,  1996,  2951,  2046,
         1996,  6970, 10760,  7755,  2024,  2593, 16620,   102])"
325,1,['data'], SUMMARY,seg_77,n ≠i=1 (xi − xj)2. discontinuous data (with gaps in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1050,  1027,  1045,  1027,  1015,  1006,  8418,  1597,  1060,
         3501,  1007,  1016,  1012, 12532, 16778, 11231,  3560,  2951,  1006,
         2007, 16680,  1999,   102])"
326,1,['algorithm'], SUMMARY,seg_77,n between)? which algorithm is 1.29 express (∑j=1 xj)2 in terms of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1050, 2090, 1007, 1029, 2029, 9896, 2003, 1015, 1012, 2756, 4671,
        1006,  100, 1027, 1015, 1060, 3501, 1007, 1016, 1999, 3408, 1997,  102])"
327,1,['cases'], SUMMARY,seg_77,"n ≠k; j,k=1 xj ∗ xk. use best in such cases?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1050, 1027, 1047, 1025, 1046, 1010, 1047, 1027, 1015, 1060, 3501,
        1598, 1060, 2243, 1012, 2224, 2190, 1999, 2107, 3572, 1029,  102])"
328,1,['data'], SUMMARY,seg_77,"n =1 xj)2) as a 1.37 discretize the data x = {56, product. 62, 68, 73, 75, 78, 81, 88, 90, 93} using epb if the labels are 1.30 if the indexvar increments in steps",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1050,  1027,  1015,  1060,  3501,  1007,  1016,  1007,  2004,
         1037,  1015,  1012,  4261,  5860, 13465,  4697,  1996,  2951,  1060,
         1027,  1063,  5179,  1010,  4031,  1012,  5786,  1010,  6273,  1010,
         6421,  1010,  4293,  1010,  6275,  1010,  6282,  1010,  6070,  1010,
         3938,  1010,  6109,  1065,  2478,  4958,  2497,  2065,  1996, 10873,
         2024,  1015,  1012,  2382,  2065,  1996,  5950, 10755,  4297, 28578,
        11187,  1999,  4084,   102])"
329,1,"['discretization', 'data']", SUMMARY,seg_77,1.38 what is data discretization? what 1.31 if the indexvar increments in steps,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1012,  4229,  2054,  2003,  2951,  5860, 13465,  3989,
         1029,  2054,  1015,  1012,  2861,  2065,  1996,  5950, 10755,  4297,
        28578, 11187,  1999,  4084,   102])"
330,0,[], SUMMARY,seg_77,"k are some of its applications in of c, evaluate the sum ∑j=−k f (j) engineering? describe how you",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1047,  2024,  2070,  1997,  2049,  5097,  1999,  1997,  1039,
         1010, 16157,  1996,  7680,   100,  1027,  1597,  2243,  1042,  1006,
         1046,  1007,  3330,  1029,  6235,  2129,  2017,   102])"
331,1,['range'], SUMMARY,seg_77,using unit incrementing indexvar. will discretize if the range (spread),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2478,  3131,  4297, 28578, 26951,  5950, 10755,  1012,  2097,
         5860, 13465,  4697,  2065,  1996,  2846,  1006,  3659,  1007,   102])"
332,0,[], SUMMARY,seg_77,1.32 if gini diversity index is defined as of values is too large.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1015,  1012,  3590,  2065, 18353,  2072,  8906,  5950,  2003,
         4225,  2004,  1997,  5300,  2003,  2205,  2312,  1012,   102])"
333,1,['transform'], SUMMARY,seg_77,"n ≠i=1 (xi −xj)2, 1.39 transform the above-mentioned",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1050,  1027,  1045,  1027,  1015,  1006,  8418,  1597,  2595,
         3501,  1007,  1016,  1010,  1015,  1012,  4464, 10938,  1996,  2682,
         1011,  3855,   102])"
334,1,['data'], SUMMARY,seg_77,"prove that d2 ≤ 2sn2. data to the [−1, +1] and [−3, +3]",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 6011, 2008, 1040, 2475, 1608, 1016, 2015, 2078, 2475, 1012, 2951,
        2000, 1996, 1031, 1597, 2487, 1010, 1009, 1015, 1033, 1998, 1031, 1597,
        2509, 1010, 1009, 1017, 1033,  102])"
335,1,['data'], SUMMARY,seg_77,1.33 what is a data requirement for ranges using min–max transfor-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1015,  1012,  3943,  2054,  2003,  1037,  2951,  9095,  2005,
         8483,  2478,  8117,  1516,  4098,  9099, 29278,  1011,   102])"
336,1,['results'], SUMMARY,seg_77,using the entropy-based dismation (pp. 1–48) and compare cretization? in what situations is the results using the z-score transit best? formation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  2478,  1996, 23077,  1011,  2241,  4487, 26212,  3508,  1006,
         4903,  1012,  1015,  1516,  4466,  1007,  1998, 12826, 13675, 20624,
         9276,  1029,  1999,  2054,  8146,  2003,  1996,  3463,  2478,  1996,
         1062,  1011,  3556,  6671,  2190,  1029,  4195,  1012,   102])"
337,1,['data'], SUMMARY,seg_77,1.34 the following data gives the 1.40 can the minimum data value in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1015, 1012, 4090, 1996, 2206, 2951, 3957, 1996, 1015, 1012, 2871,
        2064, 1996, 6263, 2951, 3643, 1999,  102])"
338,0,[], SUMMARY,seg_77,marks scored by 10 students in eib (pp. 1–45) be negative? can,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  6017,  3195,  2011,  2184,  2493,  1999,  1041, 12322,  1006,
         4903,  1012,  1015,  1516,  3429,  1007,  2022,  4997,  1029,  2064,
          102])"
339,1,"['range', 'data', 'transform', 'intervals', 'statistics']", SUMMARY,seg_77,"engineering statistics. discretize both the minimum and maximum the data using eib and efb. x = be negative? {56,62,68,73,75,78,81,88,90,93}. 1.41 how will the efb (pp. 1–48) transform the data to [−3,+3] divide n data items into k intervals range using min–max transforif n is not a multiple of k? mation. obtain the z-scores and",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3330,  6747,  1012,  5860, 13465,  4697,  2119,  1996,  6263,
         1998,  4555,  1996,  2951,  2478,  1041, 12322,  1998,  1041, 26337,
         1012,  1060,  1027,  2022,  4997,  1029,  1063,  5179,  1010,  5786,
         1010,  6273,  1010,  6421,  1010,  4293,  1010,  6275,  1010,  6282,
         1010,  6070,  1010,  3938,  1010,  6109,  1065,  1012,  1015,  1012,
         4601,  2129,  2097,  1996,  1041, 26337,  1006,  4903,  1012,  1015,
         1516,  4466,  1007, 10938,  1996,  2951,  2000,  1031,  1597,  2509,
         1010,  1009,  1017,  1033, 11443,  1050,  2951,  5167,  2046,  1047,
        14025,  2846,  2478,  8117,  1516,  4098,  9099, 29278, 10128,  1050,
         2003,  2025,  1037,  3674,  1997,  1047,  1029, 13523,  3258,  1012,
         6855,  1996,  1062,  1011,  7644,  1998,   102])"
340,0,[], SUMMARY,seg_77,compare with min–max trans1.42 the first-order bragg reflection of,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 12826,  2007,  8117,  1516,  4098,  9099,  2487,  1012,  4413,
         1996,  2034,  1011,  2344, 23678,  9185,  1997,   102])"
341,1,['data'], SUMMARY,seg_77,formed data. x-ray at different angles through,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2719,  2951,  1012,  1060,  1011,  4097,  2012,  2367, 12113,
         2083,   102])"
342,1,['discrete'], SUMMARY,seg_77,1.35 the power of a discrete signal a crystal gave the nanometer,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1012,  3486,  1996,  2373,  1997,  1037, 16246,  4742,
         1037,  6121,  2435,  1996, 28991, 22828,   102])"
343,1,['data'], SUMMARY,seg_77,"transform the data into the inter[−1,+1] and [−3,+3] ranges. x = vals [−0.5,+0.5] and [−1,+1]. {32, 19, 24, 31, 20, 27}.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 10938,  1996,  2951,  2046,  1996,  6970,  1031,  1597,  2487,
         1010,  1009,  1015,  1033,  1998,  1031,  1597,  2509,  1010,  1009,
         1017,  1033,  8483,  1012,  1060,  1027, 11748,  2015,  1031,  1597,
         2692,  1012,  1019,  1010,  1009,  1014,  1012,  1019,  1033,  1998,
         1031,  1597,  2487,  1010,  1009,  1015,  1033,  1012,  1063,  3590,
         1010,  2539,  1010,  2484,  1010,  2861,  1010,  2322,  1010,  2676,
         1065,  1012,   102])"
344,0,[], SUMMARY,seg_77,1.43 the resistance of an electronic 1.46 a plastic polymer thread is sub-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1015,  1012,  4724,  1996,  5012,  1997,  2019,  4816,  1015,
         1012,  4805,  1037,  6081, 17782, 11689,  2003,  4942,  1011,   102])"
345,1,"['range', 'percentage', 'data', 'test']", SUMMARY,seg_77,"circuit was measured using five jected to an elongation stress test to see how much it can be different components as {5.2ω, stretched before it breaks. elonga4.9ω, 5.12ω, 4.95ω, 5.1ω}. transtion at break point is expressed as a form the data to [−1,+1] range. percentage of its original length as convert data into z-scores. x = {9.2%, 6.7%, 15.3%, 18.0%,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4984,  2001,  7594,  2478,  2274, 15333, 10985,  2000,  2019,
         3449, 26356,  3508,  6911,  3231,  2000,  2156,  2129,  2172,  2009,
         2064,  2022,  2367,  6177,  2004,  1063,  1019,  1012,  1016, 29739,
         1010,  7121,  2077,  2009,  7807,  1012,  3449, 26356,  2549,  1012,
         1023, 29739,  1010,  1019,  1012,  2260, 29739,  1010,  1018,  1012,
         5345, 29739,  1010,  1019,  1012,  1015, 29739,  1065,  1012,  9099,
         3508,  2012,  3338,  2391,  2003,  5228,  2004,  1037,  2433,  1996,
         2951,  2000,  1031,  1597,  2487,  1010,  1009,  1015,  1033,  2846,
         1012,  7017,  1997,  2049,  2434,  3091,  2004, 10463,  2951,  2046,
         1062,  1011,  7644,  1012,  1060,  1027,  1063,  1023,  1012,  1016,
         1003,  1010,  1020,  1012,  1021,  1003,  1010,  2321,  1012,  1017,
         1003,  1010,  2324,  1012,  1014,  1003,  1010,   102])"
346,1,"['transform', 'data', 'range']", SUMMARY,seg_77,"some thermoplastics is given 12.0%}. transform the data to the below. discretize the data into [−3,+3] range.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([12654]),"tensor([  101,  2070,  1996, 10867,  7361, 28723,  2015,  2003,  2445,  2260,
         1012,  1014,  1003,  1065,  1012, 10938,  1996,  2951,  2000,  1996,
         2917,  1012,  5860, 13465,  4697,  1996,  2951,  2046,  1031,  1597,
         2509,  1010,  1009,  1017,  1033,  2846,  1012,   102])"
347,1,"['transform', 'intervals', 'data']", SUMMARY,seg_77,three intervals using efb and 1.47 soluble dissolvents (in mg/l) in eib. transform the data to the drinking water are measured at,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2093, 14025,  2478,  1041, 26337,  1998,  1015,  1012,  4700,
        24345, 21969,  7666,  1006,  1999, 11460,  1013,  1048,  1007,  1999,
         1041, 12322,  1012, 10938,  1996,  2951,  2000,  1996,  5948,  2300,
         2024,  7594,  2012,   102])"
348,1,['standard'], SUMMARY,seg_77,"{15.6,19.5,17.2, 18.1, 17.6, 15.3, {560, 458, 490, 525, 482, 554, 499, 18.0, 16.8, 16.4, 19.0}. 538, 540, 507, 481, 513}. standard-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1063,  2321,  1012,  1020,  1010,  2539,  1012,  1019,  1010,
         2459,  1012,  1016,  1010,  2324,  1012,  1015,  1010,  2459,  1012,
         1020,  1010,  2321,  1012,  1017,  1010,  1063, 21267,  1010,  3429,
         2620,  1010, 22288,  1010, 25621,  1010,  4466,  2475,  1010,  4583,
         2549,  1010,  4749,  2683,  1010,  2324,  1012,  1014,  1010,  2385,
         1012,  1022,  1010,  2385,  1012,  1018,  1010,  2539,  1012,  1014,
         1065,  1012,  5187,  2620,  1010, 20263,  1010,  2753,  2581,  1010,
         4466,  2487,  1010,  4868,  2509,  1065,  1012,  3115,  1011,   102])"
349,1,['data'], SUMMARY,seg_77,1.45 the number of hours that a battery ize the data. will you prefer the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([ 101, 1015, 1012, 3429, 1996, 2193, 1997, 2847, 2008, 1037, 6046, 1045,
        4371, 1996, 2951, 1012, 2097, 2017, 9544, 1996,  102])"
350,1,"['change of origin', 'range', 'change of scale', 'transform', 'interval', 'transformations', 'data']", SUMMARY,seg_77,"can be continuously operated in change of origin, change of scale, different devices after a 30-minute or both transformations? transrecharge is given below. transform the data to the [−1,+1] form the data into the interval range.?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  2064,  2022, 10843,  3498,  1999,  2689,  1997,  4761,  1010,
         2689,  1997,  4094,  1010,  2367,  5733,  2044,  1037,  2382,  1011,
         3371,  2030,  2119, 21865,  1029,  9099,  2890,  7507, 20800,  2003,
         2445,  2917,  1012, 10938,  1996,  2951,  2000,  1996,  1031,  1597,
         2487,  1010,  1009,  1015,  1033,  2433,  1996,  2951,  2046,  1996,
        13483,  2846,  1012,  1029,   102])"
351,0,[], SUMMARY,seg_77,"1.48 if the index varies in powers of b (in steps of bj), prove that ∑j",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1015, 1012, 4466, 2065, 1996, 5950, 9783, 1999, 4204, 1997, 1038,
        1006, 1999, 4084, 1997, 1038, 3501, 1007, 1010, 6011, 2008,  100,  102])"
352,1,['estimation'], SUMMARY,seg_77,1.50 consider an expression for echo delay estimation in audio echo cancellation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1012,  2753,  5136,  2019,  3670,  2005,  9052,  8536,
        24155,  1999,  5746,  9052, 16990,   102])"
353,0,[], SUMMARY,seg_77,k =−lag x[j] ∗ x[j + lag]. use loop rerolling technique to express it in terms of an indexvar that is always positive.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1047,  1027,  1597, 17802,  1060,  1031,  1046,  1033,  1598,
         1060,  1031,  1046,  1009,  2474,  2290,  1033,  1012,  2224,  7077,
         2128, 28402,  2075,  6028,  2000,  4671,  2009,  1999,  3408,  1997,
         2019,  5950, 10755,  2008,  2003,  2467,  3893,  1012,   102])"
354,1,['summation'], SUMMARY,seg_77,1.51 rewrite the summation ∑k,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1012,  4868,  2128, 26373,  1996,  7680, 28649,   100,
          102])"
355,1,['independent'], SUMMARY,seg_77,m =1 c ∗ ui ∗  j+k ∗  k by taking terms independent of indexvars outside the summations.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1049,  1027,  1015,  1039,  1598, 21318,  1598,  1046,  1009,
         1047,  1598,  1047,  2011,  2635,  3408,  2981,  1997,  5950, 10755,
         2015,  2648,  1996,  7680, 28649,  2015,  1012,   102])"
356,0,[], MEASURES OF LOCATION,seg_79,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5761, 1997, 3295])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
357,1,"['location', 'parameters', 'population']", MEASURES OF LOCATION,seg_79,◾ distinguish between location and scale population parameters,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0.])","tensor([5761, 1997, 3295])","tensor([  101,   100, 10782,  2090,  3295,  1998,  4094,  2313, 11709,   102])"
358,1,['location'], MEASURES OF LOCATION,seg_79,◾ describe important measures of location (central tendency),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([5761, 1997, 3295])","tensor([  101,   100,  6235,  2590,  5761,  1997,  3295,  1006,  2430, 11765,
         1007,   102])"
359,1,"['trimmed mean', 'mean', 'weighted mean']", MEASURES OF LOCATION,seg_79,◾ understand trimmed mean and weighted mean,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([5761, 1997, 3295])","tensor([  101,   100,  3305, 21920,  2812,  1998, 18215,  2812,   102])"
360,1,"['percentiles', 'quartiles']", MEASURES OF LOCATION,seg_79,"◾ comprehend quartiles, deciles, and percentiles",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([5761, 1997, 3295])","tensor([  101,   100, 22346, 24209,  8445,  9463,  2015,  1010, 11703,  9463,
         2015,  1010,  1998,  3867,  9463,  2015,   102])"
361,1,"['transformations', 'data']", MEASURES OF LOCATION,seg_79,◾ use data transformations to compute various measures,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([5761, 1997, 3295])","tensor([  101,   100,  2224,  2951, 21865,  2000, 24134,  2536,  5761,   102])"
362,1,"['geometric', 'harmonic']", MEASURES OF LOCATION,seg_79,"◾ apply updating formula for arithmetic, geometric, and harmonic means",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([5761, 1997, 3295])","tensor([  101,   100,  6611,  2039, 16616,  5675,  2005, 20204,  1010, 14965,
         1010,  1998, 19452,  2965,   102])"
363,0,[], MEASURES OF LOCATION,seg_79,◾ prudently choose the correct measure for each situation,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5761, 1997, 3295])","tensor([  101,   100, 10975, 12672, 20630,  5454,  1996,  6149,  5468,  2005,
         2169,  3663,   102])"
364,1,"['location', 'data', 'statistics']", MEANING OF LOCATION MEASURE,seg_81,"the literal meaning of “location” is a place or point of interest with respect to (wrt) a frame of reference. in statistics, a location indicates a single point (for univariate data) that best describes the data at hand.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([3574, 1997, 3295, 5468])","tensor([  101,  1996, 18204,  3574,  1997,  1523,  3295,  1524,  2003,  1037,
         2173,  2030,  2391,  1997,  3037,  2007,  4847,  2000,  1006, 23277,
         2102,  1007,  1037,  4853,  1997,  4431,  1012,  1999,  6747,  1010,
         1037,  3295,  7127,  1037,  2309,  2391,  1006,  2005,  4895, 28739,
        13143,  2951,  1007,  2008,  2190,  5577,  1996,  2951,  2012,  2192,
         1012,   102])"
365,1,"['location', 'function', 'information', 'sample', 'data']", MEANING OF LOCATION MEASURE,seg_81,definition 2.1 a well-defined function of the sample values that purports to summarize the locational information of data into a concise number is called a measure of location or central tendency.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([3574, 1997, 3295, 5468])","tensor([  101,  6210,  1016,  1012,  1015,  1037,  2092,  1011,  4225,  3853,
         1997,  1996,  7099,  5300,  2008, 16405, 14536, 11589,  2015,  2000,
         7680,  7849,  4697,  1996,  3295,  2389,  2592,  1997,  2951,  2046,
         1037,  9530, 18380,  2193,  2003,  2170,  1037,  5468,  1997,  3295,
         2030,  2430, 11765,  1012,   102])"
366,1,"['location', 'locations', 'sample', 'population', 'parameters']", MEANING OF LOCATION MEASURE,seg_81,"the concept of location is applicable to a sample as well as to a population. population locations are indicated by parameters (described below). for example,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3574, 1997, 3295, 5468])","tensor([  101,  1996,  4145,  1997,  3295,  2003, 12711,  2000,  1037,  7099,
         2004,  2092,  2004,  2000,  1037,  2313,  1012,  2313,  5269,  2024,
         5393,  2011, 11709,  1006,  2649,  2917,  1007,  1012,  2005,  2742,
         1010,   102])"
367,1,"['location', 'parameter', 'range', 'functions', 'location parameter', 'locations', 'sample', 'distribution', 'discrete distribution', 'data', 'discrete']", MEANING OF LOCATION MEASURE,seg_81,"a parameter   is called a location parameter if the functional form of the pdf is f (x ∓  ). here,   is a nonzero real number. sample locations are measured by functions of sample values that return a real number within the range of the sample. it need not coincide with the sample data (i.e., x-value) for a sample drawn from a discrete distribution. these are also called measures of central tendency.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3574, 1997, 3295, 5468])","tensor([  101,  1037, 16381,  2003,  2170,  1037,  3295, 16381,  2065,  1996,
         8360,  2433,  1997,  1996, 11135,  2003,  1042,  1006,  1060,   100,
         1007,  1012,  2182,  1010,  2003,  1037,  2512,  6290,  2080,  2613,
         2193,  1012,  7099,  5269,  2024,  7594,  2011,  4972,  1997,  7099,
         5300,  2008,  2709,  1037,  2613,  2193,  2306,  1996,  2846,  1997,
         1996,  7099,  1012,  2009,  2342,  2025, 19680,  2007,  1996,  7099,
         2951,  1006,  1045,  1012,  1041,  1012,  1010,  1060,  1011,  3643,
         1007,  2005,  1037,  7099,  4567,  2013,  1037, 16246,  4353,  1012,
         2122,  2024,  2036,  2170,  5761,  1997,  2430, 11765,  1012,   102])"
368,1,"['change of origin', 'percentiles', 'functions', 'geometric mean', 'median', 'location', 'mean', 'observations', 'frequency', 'quartiles', 'harmonic', 'harmonic mean', 'samples', 'geometric', 'grouped data', 'data', 'change of scale', 'arithmetic mean', 'transformation', 'medoids', 'sample median', 'sample', 'medoid', 'location measures']", Categorization of Location Measures,seg_83,"many meaningful functions of sample values can be used as sample location measures. such a measure is expected to locate the central part of the data. naturally, a measure that uses each and every sample value is more meaningful in engineering applications. the arithmetic mean (simply called mean), geometric mean, and harmonic mean (hm) belong to this category. trimmed versions of them remove a small amount of extreme observations, and compute the value for the rest of the data. weighted version of them give different importance to different data. the mean need not always coincide with one of the data values. a medoid is that data value that is closest to the mean in a distance sense. medoids for large samples need not be unique (as there could exist multiple data points at equal distance from the mean). as it depends on the mean, it also belongs to the above category. yet other types of measures that use the frequency of data rather than data values are available. one example is the mode that locates the data value with maximum frequency. this is more meaningful for grouped data. the sample median uses the count of data values to divide the total frequency into two equal parts. an extension of this concept uses quartiles, deciles, and percentiles that are useful when the data size is large. among these measures, a change of origin transformation is meaningful to the arithmetic mean only, and a change of scale transformation is applicable to all the three means. these are discussed in subsequent sections.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  3295,  5761])","tensor([  101,  2116, 15902,  4972,  1997,  7099,  5300,  2064,  2022,  2109,
         2004,  7099,  3295,  5761,  1012,  2107,  1037,  5468,  2003,  3517,
         2000, 12453,  1996,  2430,  2112,  1997,  1996,  2951,  1012,  8100,
         1010,  1037,  5468,  2008,  3594,  2169,  1998,  2296,  7099,  3643,
         2003,  2062, 15902,  1999,  3330,  5097,  1012,  1996, 20204,  2812,
         1006,  3432,  2170,  2812,  1007,  1010, 14965,  2812,  1010,  1998,
        19452,  2812,  1006, 20287,  1007,  7141,  2000,  2023,  4696,  1012,
        21920,  4617,  1997,  2068,  6366,  1037,  2235,  3815,  1997,  6034,
         9420,  1010,  1998, 24134,  1996,  3643,  2005,  1996,  2717,  1997,
         1996,  2951,  1012, 18215,  2544,  1997,  2068,  2507,  2367,  5197,
         2000,  2367,  2951,  1012,  1996,  2812,  2342,  2025,  2467, 19680,
         2007,  2028,  1997,  1996,  2951,  5300,  1012,  1037, 19960,  9314,
         2003,  2008,  2951,  3643,  2008,  2003,  7541,  2000,  1996,  2812,
         1999,  1037,  3292,  3168,  1012, 19960, 17086,  2005,  2312,  8168,
         2342,  2025,  2022,  4310,  1006,  2004,  2045,  2071,  4839,  3674,
         2951,  2685,  2012,  5020,  3292,  2013,  1996,  2812,  1007,  1012,
         2004,  2009,  9041,  2006,  1996,  2812,  1010,  2009,  2036,  7460,
         2000,  1996,  2682,  4696,  1012,  2664,  2060,  4127,  1997,  5761,
         2008,  2224,  1996,  6075,  1997,  2951,  2738,  2084,  2951,  5300,
         2024,  2800,  1012,  2028,  2742,  2003,  1996,  5549,  2008, 12453,
         2015,  1996,  2951,  3643,  2007,  4555,  6075,  1012,  2023,  2003,
         2062, 15902,  2005, 15131,  2951,  1012,  1996,  7099,  3991,  3594,
         1996,  4175,  1997,  2951,  5300,  2000, 11443,  1996,  2561,  6075,
         2046,  2048,  5020,  3033,  1012,  2019,  5331,  1997,  2023,  4145,
         3594, 24209,  8445,  9463,  2015,  1010, 11703,  9463,  2015,  1010,
         1998,  3867,  9463,  2015,  2008,  2024,  6179,  2043,  1996,  2951,
         2946,  2003,  2312,  1012,  2426,  2122,  5761,  1010,  1037,  2689,
         1997,  4761,  8651,  2003, 15902,  2000,  1996, 20204,  2812,  2069,
         1010,  1998,  1037,  2689,  1997,  4094,  8651,  2003, 12711,  2000,
         2035,  1996,  2093,  2965,  1012,  2122,  2024,  6936,  1999,  4745,
         5433,  1012,   102])"
369,1,"['symmetric distributions', 'pareto', 'symmetric', 'binomial distribution', 'beta distribution', 'asymmetric', 'normal distribution', 'cauchy', 'normal', 'statistical', 'binomial', 'continuous', 'parameter', 'standard', 'parameters', 'gamma', 'pareto distribution', 'distributions', 'gamma distributions', 'distribution', 'exponential', 'f distribution']", MEASURES OF CENTRAL TENDENCY,seg_85,"statistical distributions come in various shapes. some of them are always symmetric around a real number for univariate distributions (or a vector for multivariate distributions), which can be zero or nonzero. examples include the standard normal, standard cauchy, and student’s t distributions (symmetric about 0), general normal distribution n( , 2), which is symmetric about , and general cauchy distributions. examples of asymmetric distributions include the exponential, beta and gamma distributions, f distribution, pareto distribution, and so on. some of these distributions are symmetric for particular parameter values though. for instance, the 2-parameter beta distribution beta-i (a, b) is symmetric when the parameters are equal (a= b), and the binomial distribution bino (n, p) is symmetric when p = 1∕2,∀ n. as mentioned below, a great majority of statistical distributions are asymmetric. most of the symmetric distributions are of continuous type.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0.])","tensor([ 5761,  1997,  2430, 11765])","tensor([  101,  7778, 20611,  2272,  1999,  2536, 10466,  1012,  2070,  1997,
         2068,  2024,  2467, 19490,  2105,  1037,  2613,  2193,  2005,  4895,
        28739, 13143, 20611,  1006,  2030,  1037,  9207,  2005,  4800, 10755,
        13143, 20611,  1007,  1010,  2029,  2064,  2022,  5717,  2030,  2512,
         6290,  2080,  1012,  4973,  2421,  1996,  3115,  3671,  1010,  3115,
         6187, 10875,  2100,  1010,  1998,  3076,  1521,  1055,  1056, 20611,
         1006, 19490,  2055,  1014,  1007,  1010,  2236,  3671,  4353,  1050,
         1006,  1010,  1016,  1007,  1010,  2029,  2003, 19490,  2055,  1010,
         1998,  2236,  6187, 10875,  2100, 20611,  1012,  4973,  1997,  2004,
        24335, 12589, 20611,  2421,  1996, 27258,  1010,  8247,  1998, 13091,
        20611,  1010,  1042,  4353,  1010, 11968, 18903,  4353,  1010,  1998,
         2061,  2006,  1012,  2070,  1997,  2122, 20611,  2024, 19490,  2005,
         3327, 16381,  5300,  2295,  1012,  2005,  6013,  1010,  1996,  1016,
         1011, 16381,  8247,  4353,  8247,  1011,  1045,  1006,  1037,  1010,
         1038,  1007,  2003, 19490,  2043,  1996, 11709,  2024,  5020,  1006,
         1037,  1027,  1038,  1007,  1010,  1998,  1996,  8026, 20936,  2389,
         4353,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  2003, 19490,
         2043,  1052,  1027,   100,  1010,   100,  1050,  1012,  2004,  3855,
         2917,  1010,  1037,  2307,  3484,  1997,  7778, 20611,  2024,  2004,
        24335, 12589,  1012,  2087,  1997,  1996, 19490, 20611,  2024,  1997,
         7142,  2828,  1012,   102])"
370,1,"['location', 'symmetry', 'distributions', 'symmetric', 'asymmetric']", MEASURES OF CENTRAL TENDENCY,seg_85,"the “central tendency” measures the location of symmetry of symmetric distributions, and the center of gravity of asymmetric distributions. we call it a location",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 5761,  1997,  2430, 11765])","tensor([  101,  1996,  1523,  2430, 11765,  1524,  5761,  1996,  3295,  1997,
        14991,  1997, 19490, 20611,  1010,  1998,  1996,  2415,  1997,  8992,
         1997,  2004, 24335, 12589, 20611,  1012,  2057,  2655,  2009,  1037,
         3295,   102])"
371,1,"['change of origin', 'geometric mean', 'median', 'location', 'mean', 'geometric', 'data', 'case', 'linear', 'nonlinear', 'arithmetic mean', 'transformation', 'distributions', 'sample', 'distribution', 'location measures']", MEASURES OF CENTRAL TENDENCY,seg_85,"measure because they can locate the approximate centering of the distribution along the real line (univariate case). the most commonly used measures of location are the arithmetic mean, median, and the mode. among them, the arithmetic mean is a linear measure as it uses the sum of the data values in the numerator. geometric and hms are nonlinear measures (geometric mean is log-linear as shown below). a change of origin transformation (e.g., using the mean as the pivot) can be used to align the location measures of different distributions. arithmetic, geometric, and hms and the median always lie between the minimum and maximum of the sample values (for n ≥ 2), while the mode may get aligned with the extremes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5761,  1997,  2430, 11765])","tensor([  101,  5468,  2138,  2027,  2064, 12453,  1996, 15796,  2415,  2075,
         1997,  1996,  4353,  2247,  1996,  2613,  2240,  1006,  4895, 28739,
        13143,  2553,  1007,  1012,  1996,  2087,  4141,  2109,  5761,  1997,
         3295,  2024,  1996, 20204,  2812,  1010,  3991,  1010,  1998,  1996,
         5549,  1012,  2426,  2068,  1010,  1996, 20204,  2812,  2003,  1037,
         7399,  5468,  2004,  2009,  3594,  1996,  7680,  1997,  1996,  2951,
         5300,  1999,  1996, 16371,  5017,  8844,  1012, 14965,  1998,  7220,
         2024, 27400,  5761,  1006, 14965,  2812,  2003,  8833,  1011,  7399,
         2004,  3491,  2917,  1007,  1012,  1037,  2689,  1997,  4761,  8651,
         1006,  1041,  1012,  1043,  1012,  1010,  2478,  1996,  2812,  2004,
         1996, 14255, 22994,  1007,  2064,  2022,  2109,  2000, 25705,  1996,
         3295,  5761,  1997,  2367, 20611,  1012, 20204,  1010, 14965,  1010,
         1998,  7220,  1998,  1996,  3991,  2467,  4682,  2090,  1996,  6263,
         1998,  4555,  1997,  1996,  7099,  5300,  1006,  2005,  1050,  1609,
         1016,  1007,  1010,  2096,  1996,  5549,  2089,  2131, 13115,  2007,
         1996, 28800,  1012,   102])"
372,1,"['mean', 'sample', 'sample size', 'population', 'sample mean']", ARITHMETIC MEAN,seg_87,"the mean of a population is denoted by the greek letter  , and the corresponding sample mean is denoted by x (or xn where n is the sample size). we define it as",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  1996,  2812,  1997,  1037,  2313,  2003, 19537,  2011,  1996,
         3306,  3661,  1010,  1998,  1996,  7978,  7099,  2812,  2003, 19537,
         2011,  1060,  1006,  2030,  1060,  2078,  2073,  1050,  2003,  1996,
         7099,  2946,  1007,  1012,  2057,  9375,  2009,  2004,   102])"
373,1,['discrete'], ARITHMETIC MEAN,seg_87,∞ =−∞ xk pk if x is discrete;   = { ∫x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  1601,  1027,  1597, 30128,  1060,  2243,  1052,  2243,  2065,
         1060,  2003, 16246,  1025,  1027,  1063,   100,   102])"
374,1,['continuous'], ARITHMETIC MEAN,seg_87,∞ =−∞ x f (x)dx if x is continuous.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([20204,  2812])","tensor([  101,  1601,  1027,  1597, 30128,  1060,  1042,  1006,  1060,  1007,
         1040,  2595,  2065,  1060,  2003,  7142,  1012,   102])"
375,1,"['mean', 'moment', 'range', 'weighted average', 'random variable', 'probabilities', 'summation', 'random', 'average', 'variable']", ARITHMETIC MEAN,seg_87,the summation or integration needs to be carried out only throughout the range of the respective random variable (as the pdf is defined to be zero outside the range). this represents the weighted average of all possible values of a random variable with the corresponding probabilities as weights. the mean is the first moment because it is obtained by putting j = 1 in,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([20204,  2812])","tensor([  101,  1996,  7680, 28649,  2030,  8346,  3791,  2000,  2022,  3344,
         2041,  2069,  2802,  1996,  2846,  1997,  1996,  7972,  6721,  8023,
         1006,  2004,  1996, 11135,  2003,  4225,  2000,  2022,  5717,  2648,
         1996,  2846,  1007,  1012,  2023,  5836,  1996, 18215,  2779,  1997,
         2035,  2825,  5300,  1997,  1037,  6721,  8023,  2007,  1996,  7978,
         4013,  3676, 14680,  2004, 15871,  1012,  1996,  2812,  2003,  1996,
         2034,  2617,  2138,  2009,  2003,  4663,  2011,  5128,  1046,  1027,
         1015,  1999,   102])"
376,1,['discrete'], ARITHMETIC MEAN,seg_87,j pk if x is discrete;  j = { ∫−,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  1046,  1052,  2243,  2065,  1060,  2003, 16246,  1025,  1046,
         1027,  1063,   100,   102])"
377,1,['continuous'], ARITHMETIC MEAN,seg_87,∞ ∞ xjf (x)dx if x is continuous.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([20204,  2812])","tensor([ 101, 1601, 1601, 1060, 3501, 2546, 1006, 1060, 1007, 1040, 2595, 2065,
        1060, 2003, 7142, 1012,  102])"
378,1,"['sample', 'sample size', 'mean']", ARITHMETIC MEAN,seg_87,the simple (arithmetic1) mean of a sample of size n is defined as the sum of the sample values divided by the sample size. symbolically,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  1996,  3722,  1006, 20204,  2487,  1007,  2812,  1997,  1037,
         7099,  1997,  2946,  1050,  2003,  4225,  2004,  1996,  7680,  1997,
         1996,  7099,  5300,  4055,  2011,  1996,  7099,  2946,  1012, 12613,
         3973,   102])"
379,1,"['mean', 'sample', 'results', 'sample size', 'data', 'median']", ARITHMETIC MEAN,seg_87,"where the subscript n on the left hand side (lhs) denotes the sample size, and on xn denotes the nth data value. we write it as x when no ambiguity is present. duplicate values, if any, are counted distinctly in finding the mean. it is evident from equation (2.1) that the mean of a sample need not coincide with one of the sample values for n 1 (median for odd sample size, and mode will always coincide with a sample value). distributing the constant with each of the sample values results in",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0.])","tensor([20204,  2812])","tensor([  101,  2073,  1996,  4942, 22483,  1050,  2006,  1996,  2187,  2192,
         2217,  1006,  1048,  7898,  1007, 14796,  1996,  7099,  2946,  1010,
         1998,  2006,  1060,  2078, 14796,  1996, 23961,  2232,  2951,  3643,
         1012,  2057,  4339,  2009,  2004,  1060,  2043,  2053, 27637,  2003,
         2556,  1012, 24473,  5300,  1010,  2065,  2151,  1010,  2024,  8897,
        19517,  1999,  4531,  1996,  2812,  1012,  2009,  2003, 10358,  2013,
         8522,  1006,  1016,  1012,  1015,  1007,  2008,  1996,  2812,  1997,
         1037,  7099,  2342,  2025, 19680,  2007,  2028,  1997,  1996,  7099,
         5300,  2005,  1050,  1015,  1006,  3991,  2005,  5976,  7099,  2946,
         1010,  1998,  5549,  2097,  2467, 19680,  2007,  1037,  7099,  3643,
         1007,  1012, 20083,  1996,  5377,  2007,  2169,  1997,  1996,  7099,
         5300,  3463,  1999,   102])"
380,1,"['mean', 'sample', 'data', 'sample mean']", ARITHMETIC MEAN,seg_87,"this shows that the sample mean gives equal weights or importance to each sample data item. if a sample contains several zeros, all of them are counted in the above definition. subtract xn from both sides of equation (2.1), and write xn on the right-hand side (rhs) as n terms each of which is xn∕n to get",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  2023,  3065,  2008,  1996,  7099,  2812,  3957,  5020, 15871,
         2030,  5197,  2000,  2169,  7099,  2951,  8875,  1012,  2065,  1037,
         7099,  3397,  2195,  5717,  2015,  1010,  2035,  1997,  2068,  2024,
         8897,  1999,  1996,  2682,  6210,  1012,  4942,  6494,  6593,  1060,
         2078,  2013,  2119,  3903,  1997,  8522,  1006,  1016,  1012,  1015,
         1007,  1010,  1998,  4339,  1060,  2078,  2006,  1996,  2157,  1011,
         2192,  2217,  1006,  1054,  7898,  1007,  2004,  1050,  3408,  2169,
         1997,  2029,  2003,   100,  2000,  2131,   102])"
381,1,"['factor', 'summation']", ARITHMETIC MEAN,seg_87,"take (1∕n) as common factor from rhs, and write the rest of the terms using the summation notation. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  2202,  1006,   100,  1007,  2004,  2691,  5387,  2013,  1054,
         7898,  1010,  1998,  4339,  1996,  2717,  1997,  1996,  3408,  2478,
         1996,  7680, 28649, 14869,  1012,  2023,  3957,   102])"
382,1,"['mean', 'sample', 'deviations']", ARITHMETIC MEAN,seg_87,"as (1/n) is a constant, this means that the sum of the deviations of sample values from its mean is always zero. this can also be stated as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  2004,  1006,  1015,  1013,  1050,  1007,  2003,  1037,  5377,
         1010,  2023,  2965,  2008,  1996,  7680,  1997,  1996, 24353,  2015,
         1997,  7099,  5300,  2013,  2049,  2812,  2003,  2467,  5717,  1012,
         2023,  2064,  2036,  2022,  3090,  2004,  4076,  1024,   102])"
383,1,['sample'], ARITHMETIC MEAN,seg_87,"n =1(xi − c) = 0 for a sample, then c = xn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([20204,  2812])","tensor([ 101, 1050, 1027, 1015, 1006, 8418, 1597, 1039, 1007, 1027, 1014, 2005,
        1037, 7099, 1010, 2059, 1039, 1027, 1060, 2078, 1012,  102])"
384,1,['summation'], ARITHMETIC MEAN,seg_87,proof: apply the summation to each individual term in the bracket to get ∑i,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20204,  2812])","tensor([  101,  6947,  1024,  6611,  1996,  7680, 28649,  2000,  2169,  3265,
         2744,  1999,  1996, 21605,  2000,  2131,   100,   102])"
385,1,"['sample', 'sample size']", ARITHMETIC MEAN,seg_87,"n =1 c = n ∗ c. substitute in the above to get n ∗ xn − n ∗ c = 0, or equivalently n ∗ (xn − c) = 0. as n being the sample size is nonzero, the only possibility is that c = xn. this result will be used in subsequent chapters.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20204,  2812])","tensor([ 101, 1050, 1027, 1015, 1039, 1027, 1050, 1598, 1039, 1012, 7681, 1999,
        1996, 2682, 2000, 2131, 1050, 1598, 1060, 2078, 1597, 1050, 1598, 1039,
        1027, 1014, 1010, 2030, 5662, 2135, 1050, 1598, 1006, 1060, 2078, 1597,
        1039, 1007, 1027, 1014, 1012, 2004, 1050, 2108, 1996, 7099, 2946, 2003,
        2512, 6290, 2080, 1010, 1996, 2069, 6061, 2003, 2008, 1039, 1027, 1060,
        2078, 1012, 2023, 2765, 2097, 2022, 2109, 1999, 4745, 9159, 1012,  102])"
386,1,"['population', 'population mean', 'nominal', 'median', 'location', 'mean', 'observation', 'statistics', 'data', 'inferential statistics', 'variable', 'location measure', 'arithmetic mean', 'sample', 'variables', 'sample mean']", ARITHMETIC MEAN,seg_87,"the sample mean is the most extensively used location measure due to its desirable properties in inferential statistics. as the mean utilizes each and every observation in a sample, it rapidly converges to the population mean as n → ∞. the arithmetic mean is not an appropriate measure of central tendency when nominal variables are coded numerically. however, the mean is meaningful in one situation—when a dichotomous nominal (i.e., binary) variable is coded as 0 and 1, the mean gives the proportion of items that are coded as 1. as we cannot compare nominal data, the median p. 54 also is meaningless. the mode p. 58 is the most appropriate measure of central tendency for nominal data.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([20204,  2812])","tensor([  101,  1996,  7099,  2812,  2003,  1996,  2087,  8077,  2109,  3295,
         5468,  2349,  2000,  2049, 16166,  5144,  1999,  1999,  7512, 24271,
         6747,  1012,  2004,  1996,  2812, 21852,  2169,  1998,  2296,  8089,
         1999,  1037,  7099,  1010,  2009,  5901, 28314,  2015,  2000,  1996,
         2313,  2812,  2004,  1050,  1585,  1601,  1012,  1996, 20204,  2812,
         2003,  2025,  2019,  6413,  5468,  1997,  2430, 11765,  2043, 15087,
        10857,  2024, 22402, 15973,  2135,  1012,  2174,  1010,  1996,  2812,
         2003, 15902,  1999,  2028,  3663,  1517,  2043,  1037,  4487,  9905,
        20389,  3560, 15087,  1006,  1045,  1012,  1041,  1012,  1010, 12441,
         1007,  8023,  2003, 22402,  2004,  1014,  1998,  1015,  1010,  1996,
         2812,  3957,  1996, 10817,  1997,  5167,  2008,  2024, 22402,  2004,
         1015,  1012,  2004,  2057,  3685, 12826, 15087,  2951,  1010,  1996,
         3991,  1052,  1012,  5139,  2036,  2003, 25120,  1012,  1996,  5549,
         1052,  1012,  5388,  2003,  1996,  2087,  6413,  5468,  1997,  2430,
        11765,  2005, 15087,  2951,  1012,   102])"
387,1,"['mean', 'design', 'sample', 'sample size', 'data']", Updating Formula For Sample Mean,seg_89,"as mentioned above, the mean of a sample can be found if the sum of the observations and the sample size are known. all of the sample values may not be readily available in some scientific and industrial applications. as an example, suppose the data come from sensors installed in a large factory. several industries and factories have a multitude of sensors such as temperature (heat), light, pressure, humidity (moisture), gas, and chemical sensors installed at various strategic points. in addition, some specialized industries such as chip design factories, dvd, and floppy disk manufacturing plants measure dust and microparticle suspension in the air to ensure that they do not get deposited into sensitive chip components, circuits, or platters. smoke and radiation sensors are more important in space stations. similarly, some",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2004,  3855,  2682,  1010,  1996,  2812,  1997,  1037,  7099,
         2064,  2022,  2179,  2065,  1996,  7680,  1997,  1996,  9420,  1998,
         1996,  7099,  2946,  2024,  2124,  1012,  2035,  1997,  1996,  7099,
         5300,  2089,  2025,  2022, 12192,  2800,  1999,  2070,  4045,  1998,
         3919,  5097,  1012,  2004,  2019,  2742,  1010,  6814,  1996,  2951,
         2272,  2013, 13907,  5361,  1999,  1037,  2312,  4713,  1012,  2195,
         6088,  1998, 11123,  2031,  1037, 20889,  1997, 13907,  2107,  2004,
         4860,  1006,  3684,  1007,  1010,  2422,  1010,  3778,  1010, 18213,
         1006, 14098,  1007,  1010,  3806,  1010,  1998,  5072, 13907,  5361,
         2012,  2536,  6143,  2685,  1012,  1999,  2804,  1010,  2070,  7772,
         6088,  2107,  2004,  9090,  2640, 11123,  1010,  4966,  1010,  1998,
        28491,  9785,  5814,  4264,  5468,  6497,  1998, 12702, 19362,  4588,
         2571,  8636,  1999,  1996,  2250,  2000,  5676,  2008,  2027,  2079,
         2025,  2131, 14140,  2046,  7591,  9090,  6177,  1010, 13782,  1010,
         2030, 28005,  2545,  1012,  5610,  1998,  8249, 13907,  2024,  2062,
         2590,  1999,  2686,  3703,  1012,  6660,  1010,  2070,   102])"
388,1,"['vary', 'variations', 'combinations', 'concentration']", Updating Formula For Sample Mean,seg_89,"pharmaceutical companies have microbe sensors on the machine parts that manufacture some medicines. a high concentration of microbes in the ingredients could be lethal to patients if it contaminates just a few of the tablets or capsules manufactured2. each of the sensors can have variations in terms of calibration. for example, there are separate heat sensors for air, water, liquids (different liquids boil at different temperatures; it slightly differs for the same liquid in the presence of various solvents, or combinations of them; the boiling point also depends on the altitude), chemicals, and surface temperatures. this will vary from factory to factory. while air temperature, smoke, and humidity sensors are more important in textile factories, pressure and temperature sensors are more important in robotic factories. as another example, hydroponics farms are closed (air-tight) laboratories in which plants are grown in sand or water tubes or containers. the light, nutrient concentrations, and temperature sensors are the most important, followed by water and microbe concentrations in hydroponics farms. these can be continuously monitored using various sensors.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101, 13859,  3316,  2031, 12702,  4783, 13907,  2006,  1996,  3698,
         3033,  2008,  9922,  2070, 20233,  1012,  1037,  2152,  6693,  1997,
        12702, 12681,  1999,  1996, 12760,  2071,  2022, 12765,  2000,  5022,
         2065,  2009,  9530, 15464, 28184,  2074,  1037,  2261,  1997,  1996,
        17596,  2030, 18269,  2015,  7609,  2475,  1012,  2169,  1997,  1996,
        13907,  2064,  2031,  8358,  1999,  3408,  1997, 10250, 12322,  8156,
         1012,  2005,  2742,  1010,  2045,  2024,  3584,  3684, 13907,  2005,
         2250,  1010,  2300,  1010, 26820,  1006,  2367, 26820, 26077,  2012,
         2367,  7715,  1025,  2009,  3621, 12980,  2005,  1996,  2168,  6381,
         1999,  1996,  3739,  1997,  2536, 23735,  2015,  1010,  2030, 14930,
         1997,  2068,  1025,  1996, 16018,  2391,  2036,  9041,  2006,  1996,
         7998,  1007,  1010, 12141,  1010,  1998,  3302,  7715,  1012,  2023,
         2097,  8137,  2013,  4713,  2000,  4713,  1012,  2096,  2250,  4860,
         1010,  5610,  1010,  1998, 18213, 13907,  2024,  2062,  2590,  1999,
        12437, 11123,  1010,  3778,  1998,  4860, 13907,  2024,  2062,  2590,
         1999, 20478, 11123,  1012,  2004,  2178,  2742,  1010, 18479, 26029,
         6558,  8623,  2024,  2701,  1006,  2250,  1011,  4389,  1007, 12030,
         1999,  2029,  4264,  2024,  4961,  1999,  5472,  2030,  2300, 10868,
         2030, 16143,  1012,  1996,  2422,  1010, 26780, 14061,  1010,  1998,
         4860, 13907,  2024,  1996,  2087,  2590,  1010,  2628,  2011,  2300,
         1998, 12702,  4783, 14061,  1999, 18479, 26029,  6558,  8623,  1012,
         2122,  2064,  2022, 10843, 17785,  2478,  2536, 13907,  1012,   102])"
389,1,"['cases', 'mean', 'observation', 'charts', 'statistical', 'data', 'quality control', 'process', 'control', 'sample', 'deviations', 'sample mean']", Updating Formula For Sample Mean,seg_89,"in all of the above cases, we wish to continuously check process deviations using quality control charts or statistical models that heavily depend on the sample mean. in such situations, we could find the mean of already available data, and iteratively update the mean when new data items are received from various sensors. this is called online updating. suppose we have a sample of size n with mean xn. if an additional observation xn+1 is added to our sample, the new mean becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  1999,  2035,  1997,  1996,  2682,  3572,  1010,  2057,  4299,
         2000, 10843,  4638,  2832, 24353,  2015,  2478,  3737,  2491,  6093,
         2030,  7778,  4275,  2008,  4600, 12530,  2006,  1996,  7099,  2812,
         1012,  1999,  2107,  8146,  1010,  2057,  2071,  2424,  1996,  2812,
         1997,  2525,  2800,  2951,  1010,  1998,  2009, 25284,  2135, 10651,
         1996,  2812,  2043,  2047,  2951,  5167,  2024,  2363,  2013,  2536,
        13907,  1012,  2023,  2003,  2170,  3784,  2039, 16616,  1012,  6814,
         2057,  2031,  1037,  7099,  1997,  2946,  1050,  2007,  2812,  1060,
         2078,  1012,  2065,  2019,  3176,  8089,  1060,  2078,  1009,  1015,
         2003,  2794,  2000,  2256,  7099,  1010,  1996,  2047,  2812,  4150,
          102])"
390,0,['n'], Updating Formula For Sample Mean,seg_89,"multiply numerator and denominator by n, and separate out the last term xn+1 to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  4800, 22086, 16371,  5017,  8844,  1998,  7939, 20936, 27413,
         2011,  1050,  1010,  1998,  3584,  2041,  1996,  2197,  2744,  1060,
         2078,  1009,  1015,  2000,  2131,   102])"
391,1,['factor'], Updating Formula For Sample Mean,seg_89,"take 1/(n+1) as a common factor, and write this as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([ 101, 2202, 1015, 1013, 1006, 1050, 1009, 1015, 1007, 2004, 1037, 2691,
        5387, 1010, 1998, 4339, 2023, 2004,  102])"
392,1,"['mean', 'recursive algorithm', 'arithmetic mean', 'algorithm', 'data', 'case']", Updating Formula For Sample Mean,seg_89,"each newly received data item is used only once in the updating formula. note that the correction term (xn+1 − xn)∕(n + 1) can be positive or negative depending on whether the new data item xn+1 is   or   xn. in the particular case when xn+1 = xn, the mean is unchanged. this provides a recursive algorithm for arithmetic mean [2].",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2169,  4397,  2363,  2951,  8875,  2003,  2109,  2069,  2320,
         1999,  1996,  2039, 16616,  5675,  1012,  3602,  2008,  1996, 18140,
         2744,  1006,  1060,  2078,  1009,  1015,  1597,  1060,  2078,  1007,
          100,  1006,  1050,  1009,  1015,  1007,  2064,  2022,  3893,  2030,
         4997,  5834,  2006,  3251,  1996,  2047,  2951,  8875,  1060,  2078,
         1009,  1015,  2003,  2030,  1060,  2078,  1012,  1999,  1996,  3327,
         2553,  2043,  1060,  2078,  1009,  1015,  1027,  1060,  2078,  1010,
         1996,  2812,  2003, 15704,  1012,  2023,  3640,  1037, 28667,  9236,
         3512,  9896,  2005, 20204,  2812,  1031,  1016,  1033,  1012,   102])"
393,1,['mean'], Updating Formula For Sample Mean,seg_89,example 2.1 find mean by updating formula,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2742,  1016,  1012,  1015,  2424,  2812,  2011,  2039, 16616,
         5675,   102])"
394,1,"['mean', 'locations', 'sample']", Updating Formula For Sample Mean,seg_89,"thickness of paint layer applied on straight locations using nylon brush is dependent on the paint viscosity and smoothness of the surface. paint-layer tends to be thicker on harsh surfaces than smooth ones. a sample surface of size 1"" × 1"" is test-painted, and the layer thickness (in mm) after drying is noted down at 10 random spots. use the updating formula (2.9) to compute the mean paint thickness. x = {0.26, 0.51, 0.39, 0.27, 0.44, 0.58, 0.34, 0.29, 0.4, 0.53}",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101, 14983,  1997,  6773,  6741,  4162,  2006,  3442,  5269,  2478,
        27201,  8248,  2003,  7790,  2006,  1996,  6773, 25292, 13186,  3012,
         1998,  5744,  2791,  1997,  1996,  3302,  1012,  6773,  1011,  6741,
        12102,  2000,  2022, 19638,  2006,  8401,  9972,  2084,  5744,  3924,
         1012,  1037,  7099,  3302,  1997,  2946,  1015,  1000,  1095,  1015,
         1000,  2003,  3231,  1011,  4993,  1010,  1998,  1996,  6741, 14983,
         1006,  1999,  3461,  1007,  2044, 17462,  2003,  3264,  2091,  2012,
         2184,  6721,  7516,  1012,  2224,  1996,  2039, 16616,  5675,  1006,
         1016,  1012,  1023,  1007,  2000, 24134,  1996,  2812,  6773, 14983,
         1012,  1060,  1027,  1063,  1014,  1012,  2656,  1010,  1014,  1012,
         4868,  1010,  1014,  1012,  4464,  1010,  1014,  1012,  2676,  1010,
         1014,  1012,  4008,  1010,  1014,  1012,  5388,  1010,  1014,  1012,
         4090,  1010,  1014,  1012,  2756,  1010,  1014,  1012,  1018,  1010,
         1014,  1012,  5187,  1065,   102])"
395,1,"['mean', 'data']", Updating Formula For Sample Mean,seg_89,"solution 2.1 form a sequence of pairs (xi, xi) where xi is the mean of all data until the current one. we get (0.26, 0.26), (0.51, 0.385), (0.39, 0.38667), (0.27, 0.3575), (0.44, 0.374), (0.58, 0.4083), (0.34, 0.39857), (0.29, 0.385), (0.4, 0.386667), (0.53, 0.401) as the values. the second value in the last pair is the mean xn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  5576,  1016,  1012,  1015,  2433,  1037,  5537,  1997,  7689,
         1006,  8418,  1010,  8418,  1007,  2073,  8418,  2003,  1996,  2812,
         1997,  2035,  2951,  2127,  1996,  2783,  2028,  1012,  2057,  2131,
         1006,  1014,  1012,  2656,  1010,  1014,  1012,  2656,  1007,  1010,
         1006,  1014,  1012,  4868,  1010,  1014,  1012, 24429,  1007,  1010,
         1006,  1014,  1012,  4464,  1010,  1014,  1012,  4229, 28756,  2581,
         1007,  1010,  1006,  1014,  1012,  2676,  1010,  1014,  1012, 26231,
         2629,  1007,  1010,  1006,  1014,  1012,  4008,  1010,  1014,  1012,
         4261,  2549,  1007,  1010,  1006,  1014,  1012,  5388,  1010,  1014,
         1012,  2871,  2620,  2509,  1007,  1010,  1006,  1014,  1012,  4090,
         1010,  1014,  1012,  4464, 27531,  2581,  1007,  1010,  1006,  1014,
         1012,  2756,  1010,  1014,  1012, 24429,  1007,  1010,  1006,  1014,
         1012,  1018,  1010,  1014,  1012,  4229, 28756,  2575,  2581,  1007,
         1010,  1006,  1014,  1012,  5187,  1010,  1014,  1012, 22649,  1007,
         2004,  1996,  5300,  1012,  1996,  2117,  3643,  1999,  1996,  2197,
         3940,  2003,  1996,  2812,  1060,  2078,  1012,   102])"
396,1,"['mean', 'sample', 'plots', 'samples', 'average']", Updating Formula For Sample Mean,seg_89,"in some applications, we have the mean of subsamples already available. as examples, the mean marks of two or more classes in the same college, the mean yield of two or more plots in an agricultural experimentation, the mean purchase amount of day-time and night-time customers to an online store, and the average sales amount in two consecutive time periods (days, months, years, etc.) all record multiple means for different samples. these separately computed means could be combined, irrespective of their individual sample sizes, using the following theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  1999,  2070,  5097,  1010,  2057,  2031,  1996,  2812,  1997,
         4942, 21559, 21112,  2525,  2800,  1012,  2004,  4973,  1010,  1996,
         2812,  6017,  1997,  2048,  2030,  2062,  4280,  1999,  1996,  2168,
         2267,  1010,  1996,  2812, 10750,  1997,  2048,  2030,  2062, 14811,
         1999,  2019,  4910, 21470,  1010,  1996,  2812,  5309,  3815,  1997,
         2154,  1011,  2051,  1998,  2305,  1011,  2051,  6304,  2000,  2019,
         3784,  3573,  1010,  1998,  1996,  2779,  4341,  3815,  1999,  2048,
         5486,  2051,  6993,  1006,  2420,  1010,  2706,  1010,  2086,  1010,
         4385,  1012,  1007,  2035,  2501,  3674,  2965,  2005,  2367,  8168,
         1012,  2122, 10329, 24806,  2965,  2071,  2022,  4117,  1010, 20868,
         6072,  5051, 15277,  1997,  2037,  3265,  7099, 10826,  1010,  2478,
         1996,  2206,  9872,  1012,   102])"
397,1,"['mean', 'sample', 'samples', 'combined sample']", Updating Formula For Sample Mean,seg_89,"theorem 2.1 if x1 and x2 are the means of two samples of sizes n1 and n2, respectively, the mean of the combined sample is given by x = (n1x1 + n2x2)∕(n1 + n2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  9872,  1016,  1012,  1015,  2065,  1060,  2487,  1998,  1060,
         2475,  2024,  1996,  2965,  1997,  2048,  8168,  1997, 10826,  1050,
         2487,  1998,  1050,  2475,  1010,  4414,  1010,  1996,  2812,  1997,
         1996,  4117,  7099,  2003,  2445,  2011,  1060,  1027,  1006,  1050,
         2487,  2595,  2487,  1009,  1050,  2475,  2595,  2475,  1007,   100,
         1006,  1050,  2487,  1009,  1050,  2475,  1007,  1012,   102])"
398,1,"['mean', 'observations', 'sample', 'samples', 'grand mean']", Updating Formula For Sample Mean,seg_89,"proof: the n1x1 and n2x2 in the rhs represent the sum of the observations of the first and second sample, respectively, so that their sum is the grand total of all observations. by dividing this total by (n1 + n2) gives the grand mean on the lhs. this result can be extended to any number of samples as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  6947,  1024,  1996,  1050,  2487,  2595,  2487,  1998,  1050,
         2475,  2595,  2475,  1999,  1996,  1054,  7898,  5050,  1996,  7680,
         1997,  1996,  9420,  1997,  1996,  2034,  1998,  2117,  7099,  1010,
         4414,  1010,  2061,  2008,  2037,  7680,  2003,  1996,  2882,  2561,
         1997,  2035,  9420,  1012,  2011, 16023,  2023,  2561,  2011,  1006,
         1050,  2487,  1009,  1050,  2475,  1007,  3957,  1996,  2882,  2812,
         2006,  1996,  1048,  7898,  1012,  2023,  2765,  2064,  2022,  3668,
         2000,  2151,  2193,  1997,  8168,  2004,  4076,  1024,   102])"
399,1,"['mean', 'sample', 'samples', 'combined sample']", Updating Formula For Sample Mean,seg_89,"corollary 1 if xi, i = 1, 2, ..m are the means of m samples of sizes n1, n2, … , nm, respectively, the mean of the combined sample is given by x = (n1x1 + n2x2 + · · · + nmxm)∕(n1 + n2 + · · · + nm).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2522, 28402,  5649,  1015,  2065,  8418,  1010,  1045,  1027,
         1015,  1010,  1016,  1010,  1012,  1012,  1049,  2024,  1996,  2965,
         1997,  1049,  8168,  1997, 10826,  1050,  2487,  1010,  1050,  2475,
         1010,  1529,  1010, 13221,  1010,  4414,  1010,  1996,  2812,  1997,
         1996,  4117,  7099,  2003,  2445,  2011,  1060,  1027,  1006,  1050,
         2487,  2595,  2487,  1009,  1050,  2475,  2595,  2475,  1009,  1087,
         1087,  1087,  1009, 13221,  2595,  2213,  1007,   100,  1006,  1050,
         2487,  1009,  1050,  2475,  1009,  1087,  1087,  1087,  1009, 13221,
         1007,  1012,   102])"
400,1,"['mean', 'random samples', 'probability', 'unbiased', 'population', 'sample', 'random', 'estimator', 'samples', 'unbiased estimator', 'population mean', 'sample mean']", Updating Formula For Sample Mean,seg_89,"as e(xn) =  , the sample mean is used as an unbiased estimator of the unknown population mean  . this has two interpretations. if repeated random samples of small size n are drawn from a population, the mean of these samples will clutter around the population mean  . on the other hand, the mean of a sample of size n converges in probability to the population mean as n → ∞. equivalence of both these statements can be understood from the above lemma, where n = (n1 + n2 + · · · + nm) → ∞with each of the n′",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2004,  1041,  1006,  1060,  2078,  1007,  1027,  1010,  1996,
         7099,  2812,  2003,  2109,  2004,  2019,  4895, 11607,  6924,  9765,
         9581,  4263,  1997,  1996,  4242,  2313,  2812,  1012,  2023,  2038,
         2048, 15931,  1012,  2065,  5567,  6721,  8168,  1997,  2235,  2946,
         1050,  2024,  4567,  2013,  1037,  2313,  1010,  1996,  2812,  1997,
         2122,  8168,  2097, 18856, 26878,  2105,  1996,  2313,  2812,  1012,
         2006,  1996,  2060,  2192,  1010,  1996,  2812,  1997,  1037,  7099,
         1997,  2946,  1050, 28314,  2015,  1999,  9723,  2000,  1996,  2313,
         2812,  2004,  1050,  1585,  1601,  1012, 27841,  1997,  2119,  2122,
         8635,  2064,  2022,  5319,  2013,  1996,  2682,  3393, 14760,  1010,
         2073,  1050,  1027,  1006,  1050,  2487,  1009,  1050,  2475,  1009,
         1087,  1087,  1087,  1009, 13221,  1007,  1585,  1601, 24415,  2169,
         1997,  1996,  1050,  1531,   102])"
401,0,[], Updating Formula For Sample Mean,seg_89,"is being equal, and m is large.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([ 101, 2003, 2108, 5020, 1010, 1998, 1049, 2003, 2312, 1012,  102])"
402,1,['mean'], Updating Formula For Sample Mean,seg_89,example 2.2 combined mean,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([ 101, 2742, 1016, 1012, 1016, 4117, 2812,  102])"
403,1,['mean'], Updating Formula For Sample Mean,seg_89,"two trucks work continuously to transport passenger luggage from an airport to a terminal. if the mean weight (in tonnes) transported in 10 trips by truck-1 is 58, and 12 trips of truck-2 is 46, what is the mean weight transported by these two trucks combined?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2048,  9322,  2147, 10843,  2000,  3665,  4628, 17434,  2013,
         2019,  3199,  2000,  1037,  5536,  1012,  2065,  1996,  2812,  3635,
         1006,  1999, 11000,  1007,  9687,  1999,  2184,  9109,  2011,  4744,
         1011,  1015,  2003,  5388,  1010,  1998,  2260,  9109,  1997,  4744,
         1011,  1016,  2003,  4805,  1010,  2054,  2003,  1996,  2812,  3635,
         9687,  2011,  2122,  2048,  9322,  4117,  1029,   102])"
404,1,"['sample', 'observation', 'mean']", Updating Formula For Sample Mean,seg_89,"corollary 2 if an existing observation xn is removed from a sample of size n with mean xn, the new mean is given by (nxn − xn)∕(n − 1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2522, 28402,  5649,  1016,  2065,  2019,  4493,  8089,  1060,
         2078,  2003,  3718,  2013,  1037,  7099,  1997,  2946,  1050,  2007,
         2812,  1060,  2078,  1010,  1996,  2047,  2812,  2003,  2445,  2011,
         1006,  1050,  2595,  2078,  1597,  1060,  2078,  1007,   100,  1006,
         1050,  1597,  1015,  1007,  1012,   102])"
405,1,"['mean', 'observations', 'sample']", Updating Formula For Sample Mean,seg_89,"corollary 3 if m observations with mean xm are removed from a sample of size n with mean x, the new mean is given by xnew = (nx − mxm)∕(n − m).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005,  7099,  2812])","tensor([  101,  2522, 28402,  5649,  1017,  2065,  1049,  9420,  2007,  2812,
         1060,  2213,  2024,  3718,  2013,  1037,  7099,  1997,  2946,  1050,
         2007,  2812,  1060,  1010,  1996,  2047,  2812,  2003,  2445,  2011,
         1060,  2638,  2860,  1027,  1006,  1050,  2595,  1597, 25630,  2213,
         1007,   100,  1006,  1050,  1597,  1049,  1007,  1012,   102])"
406,1,"['change of origin', 'mean', 'transformed', 'sample', 'variables', 'case']", Sample Mean Using Change of Origin and Scale,seg_91,"the change of origin technique is useful to compute the mean when the sample values are large. if the variables are transformed as yi = xi − c, the means are related as yn = xn − c. in this case, the updating formula becomes yn = [(n − 1) ∗ yn−1 + xn − c]∕n. this can also be written as",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101,  1996,  2689,  1997,  4761,  6028,  2003,  6179,  2000, 24134,
         1996,  2812,  2043,  1996,  7099,  5300,  2024,  2312,  1012,  2065,
         1996, 10857,  2024,  8590,  2004, 12316,  1027,  8418,  1597,  1039,
         1010,  1996,  2965,  2024,  3141,  2004,  1061,  2078,  1027,  1060,
         2078,  1597,  1039,  1012,  1999,  2023,  2553,  1010,  1996,  2039,
        16616,  5675,  4150,  1061,  2078,  1027,  1031,  1006,  1050,  1597,
         1015,  1007,  1598,  1061,  2078, 27944,  1009,  1060,  2078,  1597,
         1039,  1033,   100,  1012,  2023,  2064,  2036,  2022,  2517,  2004,
          102])"
407,1,"['change of origin', 'change of scale', 'change of origin and scale', 'data', 'transformation']", Sample Mean Using Change of Origin and Scale,seg_91,the change of scale transformation y = c ∗ x gives yn = c ∗ xn. we could simultaneously apply the change of origin and scale transformation to the data as zi = (xi − c)∕d. the means are then related as zn = (xn − c)∕d. the updating formula then becomes,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101,  1996,  2689,  1997,  4094,  8651,  1061,  1027,  1039,  1598,
         1060,  3957,  1061,  2078,  1027,  1039,  1598,  1060,  2078,  1012,
         2057,  2071,  7453,  6611,  1996,  2689,  1997,  4761,  1998,  4094,
         8651,  2000,  1996,  2951,  2004,  1062,  2072,  1027,  1006,  8418,
         1597,  1039,  1007,   100,  1012,  1996,  2965,  2024,  2059,  3141,
         2004,  1062,  2078,  1027,  1006,  1060,  2078,  1597,  1039,  1007,
          100,  1012,  1996,  2039, 16616,  5675,  2059,  4150,   102])"
408,1,"['mean', 'vary', 'range', 'variance', 'sphere', 'data']", Sample Mean Using Change of Origin and Scale,seg_91,"the above equation is quite useful in iteratively computing the mean when the data values are large and have large variance. as an example, microparticle sensors have limited range (or visibility) to maintain correct accuracy. if the range is 1cm3 (theoretically, it is a sphere of appropriate radius (if they are setup above ground) or a semi-sphere (if they are mounted on walls or flat surfaces) such that there are no empty regions between adjacent sensors) around its sensing point, the number of microparticles in it could be very large, which could vary depending on the air current. similarly, smoke sensors installed in rooms or buildings near the road or highway sides, or inside vehicles on the road have a cutoff threshold for the number of carbon particles. if this number is beyond the threshold, it is flagged as smoke from fire. if it is below the threshold, it is assumed as engine exhausts or cigarette smoke, and so on. the numbers used in all these situations are large in magnitude and have large variance. however, we need to only accumulate the values for a suitable time window. a smoke detector is least concerned with the number of carbon particles it encountered 2 min ago. its window is very small, perhaps 1–3 s. the window size of microparticle",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101,  1996,  2682,  8522,  2003,  3243,  6179,  1999,  2009, 25284,
         2135,  9798,  1996,  2812,  2043,  1996,  2951,  5300,  2024,  2312,
         1998,  2031,  2312, 23284,  1012,  2004,  2019,  2742,  1010, 12702,
        19362,  4588,  2571, 13907,  2031,  3132,  2846,  1006,  2030, 16476,
         1007,  2000,  5441,  6149, 10640,  1012,  2065,  1996,  2846,  2003,
         1015, 27487,  2509,  1006, 22634,  1010,  2009,  2003,  1037, 10336,
         1997,  6413, 12177,  1006,  2065,  2027,  2024, 16437,  2682,  2598,
         1007,  2030,  1037,  4100,  1011, 10336,  1006,  2065,  2027,  2024,
         5614,  2006,  3681,  2030,  4257,  9972,  1007,  2107,  2008,  2045,
         2024,  2053,  4064,  4655,  2090,  5516, 13907,  1007,  2105,  2049,
        13851,  2391,  1010,  1996,  2193,  1997, 12702, 19362,  4588,  4244,
         1999,  2009,  2071,  2022,  2200,  2312,  1010,  2029,  2071,  8137,
         5834,  2006,  1996,  2250,  2783,  1012,  6660,  1010,  5610, 13907,
         5361,  1999,  4734,  2030,  3121,  2379,  1996,  2346,  2030,  3307,
         3903,  1010,  2030,  2503,  4683,  2006,  1996,  2346,  2031,  1037,
         3013,  7245, 11207,  2005,  1996,  2193,  1997,  6351,  9309,  1012,
         2065,  2023,  2193,  2003,  3458,  1996, 11207,  1010,  2009,  2003,
         5210,  5999,  2004,  5610,  2013,  2543,  1012,  2065,  2009,  2003,
         2917,  1996, 11207,  1010,  2009,  2003,  5071,  2004,  3194, 15095,
         2015,  2030,  9907,  5610,  1010,  1998,  2061,  2006,  1012,  1996,
         3616,  2109,  1999,  2035,  2122,  8146,  2024,  2312,  1999, 10194,
         1998,  2031,  2312, 23284,  1012,  2174,  1010,  2057,  2342,  2000,
         2069, 27598,  1996,  5300,  2005,  1037,  7218,  2051,  3332,  1012,
         1037,  5610, 19034,  2003,  2560,  4986,  2007,  1996,  2193,  1997,
         6351,  9309,  2009,  8567,  1016,  8117,  3283,  1012,  2049,  3332,
         2003,  2200,  2235,  1010,  3383,  1015,  1516,  1017,  1055,  1012,
         1996,  3332,  2946,  1997, 12702, 19362,  4588,  2571,   102])"
409,1,['vary'], Sample Mean Using Change of Origin and Scale,seg_91,"sensors could vary depending on the air-current—if air circulates fast, the window is a few milliseconds, and if it circulates slowly, it could be 1 or 2 s. this could also vary among sensors installed in other media such as water, liquids, or chemicals. if the window size is d, the general updating formula given above becomes",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101, 13907,  2071,  8137,  5834,  2006,  1996,  2250,  1011,  2783,
         1517,  2065,  2250, 25022, 11890, 18969,  3435,  1010,  1996,  3332,
         2003,  1037,  2261,  4971,  5562,  8663,  5104,  1010,  1998,  2065,
         2009, 25022, 11890, 18969,  3254,  1010,  2009,  2071,  2022,  1015,
         2030,  1016,  1055,  1012,  2023,  2071,  2036,  8137,  2426, 13907,
         5361,  1999,  2060,  2865,  2107,  2004,  2300,  1010, 26820,  1010,
         2030, 12141,  1012,  2065,  1996,  3332,  2946,  2003,  1040,  1010,
         1996,  2236,  2039, 16616,  5675,  2445,  2682,  4150,   102])"
410,1,"['mean', 'data']", Sample Mean Using Change of Origin and Scale,seg_91,this is called the ‘window mean’ as it simply accumulates the mean of the most recently seen d data values.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101,  2023,  2003,  2170,  1996,  1520,  3332,  2812,  1521,  2004,
         2009,  3432, 27598,  2015,  1996,  2812,  1997,  1996,  2087,  3728,
         2464,  1040,  2951,  5300,  1012,   102])"
411,1,['mean'], Sample Mean Using Change of Origin and Scale,seg_91,example 2.3 mean updating,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101,  2742,  1016,  1012,  1017,  2812,  2039, 16616,   102])"
412,1,['mean'], Sample Mean Using Change of Origin and Scale,seg_91,"the mean of the number of particles received in a sensor for 6 s is 1600. if two new counts (970 and 1830) are recorded in subsequent seconds, find the new mean using updating formula (2.9) in page 47.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101,  1996,  2812,  1997,  1996,  2193,  1997,  9309,  2363,  1999,
         1037, 13617,  2005,  1020,  1055,  2003, 14883,  1012,  2065,  2048,
         2047,  9294,  1006,  5989,  2692,  1998,  9500,  1007,  2024,  2680,
         1999,  4745,  3823,  1010,  2424,  1996,  2047,  2812,  2478,  2039,
        16616,  5675,  1006,  1016,  1012,  1023,  1007,  1999,  3931,  4700,
         1012,   102])"
413,1,"['mean', 'intervals']", Sample Mean Using Change of Origin and Scale,seg_91,"solution 2.3 our updating formula is xn+1 = xn + (xn+1 − xn)∕(n + 1). we are given that n = 6 (as the particles are counted in intervals of 1 s), xn = 1600. for xn+1 = 970, the correction term is  n+1 = (xn+1 − xn)∕(n + 1) = (970 − 1600)∕7 = −90. substitute xn+1 = xn +  n+1 to get the new mean as 1600 − 90 = 1510. the new correction term is  n+2 = (xn+2 − xn+1)∕(n + 2) = (1830 − 1510)∕8 = 40. substitute in xn+2 = xn+1 +  n+2 to get the new mean as 1510 + 40 = 1550.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2812, 2478, 2689, 1997, 4761, 1998, 4094])","tensor([  101,  5576,  1016,  1012,  1017,  2256,  2039, 16616,  5675,  2003,
         1060,  2078,  1009,  1015,  1027,  1060,  2078,  1009,  1006,  1060,
         2078,  1009,  1015,  1597,  1060,  2078,  1007,   100,  1006,  1050,
         1009,  1015,  1007,  1012,  2057,  2024,  2445,  2008,  1050,  1027,
         1020,  1006,  2004,  1996,  9309,  2024,  8897,  1999, 14025,  1997,
         1015,  1055,  1007,  1010,  1060,  2078,  1027, 14883,  1012,  2005,
         1060,  2078,  1009,  1015,  1027,  5989,  2692,  1010,  1996, 18140,
         2744,  2003,  1050,  1009,  1015,  1027,  1006,  1060,  2078,  1009,
         1015,  1597,  1060,  2078,  1007,   100,  1006,  1050,  1009,  1015,
         1007,  1027,  1006,  5989,  2692,  1597, 14883,  1007,   100,  1027,
         1597, 21057,  1012,  7681,  1060,  2078,  1009,  1015,  1027,  1060,
         2078,  1009,  1050,  1009,  1015,  2000,  2131,  1996,  2047,  2812,
         2004, 14883,  1597,  3938,  1027, 16528,  2692,  1012,  1996,  2047,
        18140,  2744,  2003,  1050,  1009,  1016,  1027,  1006,  1060,  2078,
         1009,  1016,  1597,  1060,  2078,  1009,  1015,  1007,   100,  1006,
         1050,  1009,  1016,  1007,  1027,  1006,  9500,  1597, 16528,  2692,
         1007,   100,  1027,  2871,  1012,  7681,  1999,  1060,  2078,  1009,
         1016,  1027,  1060,  2078,  1009,  1015,  1009,  1050,  1009,  1016,
         2000,  2131,  1996,  2047,  2812,  2004, 16528,  2692,  1009,  2871,
         1027, 26245,  1012,   102])"
414,1,"['mean', 'observations', 'arithmetic mean', 'sample', 'outliers', 'trimmed means', 'summation', 'data']", Trimmed Mean,seg_93,"data outliers have a major influence on the arithmetic mean, as they are given equal importance as other data values. a solution is to delete extreme observations from the low and high end of a sample (of sufficiently large size) and compute the mean of the rest of the data. these are called trimmed means. they can be left-trimmed (only low end data are discarded), right-trimmed (only high end data are discarded), or simply trimmed (from both the ends). it is symmetrically trimmed if an equal number of observations are discarded from both the ends. using the summation notation introduced in chapter 1, this becomes",tensor(1),"tensor([0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([21920,  2812])","tensor([  101,  2951,  2041, 14355,  2015,  2031,  1037,  2350,  3747,  2006,
         1996, 20204,  2812,  1010,  2004,  2027,  2024,  2445,  5020,  5197,
         2004,  2060,  2951,  5300,  1012,  1037,  5576,  2003,  2000,  3972,
        12870,  6034,  9420,  2013,  1996,  2659,  1998,  2152,  2203,  1997,
         1037,  7099,  1006,  1997, 12949,  2312,  2946,  1007,  1998, 24134,
         1996,  2812,  1997,  1996,  2717,  1997,  1996,  2951,  1012,  2122,
         2024,  2170, 21920,  2965,  1012,  2027,  2064,  2022,  2187,  1011,
        21920,  1006,  2069,  2659,  2203,  2951,  2024, 15105,  1007,  1010,
         2157,  1011, 21920,  1006,  2069,  2152,  2203,  2951,  2024, 15105,
         1007,  1010,  2030,  3432, 21920,  1006,  2013,  2119,  1996,  4515,
         1007,  1012,  2009,  2003, 23476,  2135, 21920,  2065,  2019,  5020,
         2193,  1997,  9420,  2024, 15105,  2013,  2119,  1996,  4515,  1012,
         2478,  1996,  7680, 28649, 14869,  3107,  1999,  3127,  1015,  1010,
         2023,  4150,   102])"
415,1,"['mean', 'trimmed mean', 'order statistic', 'sample', 'statistic', 'data']", Trimmed Mean,seg_93,"t where xm denotes that this is the trimmed mean of m = n − 2k data values, and x(i) is the ith order statistic. this definition uses a count (k) to truncate data values from both the ends. a cutoff threshold can also be used to discard data values from either or both the ends of a rearranged sample. in fact, an entire sample need not be sorted (arranged in increasing or decreasing order) to find the trimmed mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([21920,  2812])","tensor([  101,  1056,  2073,  1060,  2213, 14796,  2008,  2023,  2003,  1996,
        21920,  2812,  1997,  1049,  1027,  1050,  1597,  1016,  2243,  2951,
         5300,  1010,  1998,  1060,  1006,  1045,  1007,  2003,  1996,  2009,
         2232,  2344, 28093,  6553,  1012,  2023,  6210,  3594,  1037,  4175,
         1006,  1047,  1007,  2000, 19817,  4609, 16280,  2951,  5300,  2013,
         2119,  1996,  4515,  1012,  1037,  3013,  7245, 11207,  2064,  2036,
         2022,  2109,  2000,  5860,  4232,  2951,  5300,  2013,  2593,  2030,
         2119,  1996,  4515,  1997,  1037,  4373, 24388,  2098,  7099,  1012,
         1999,  2755,  1010,  2019,  2972,  7099,  2342,  2025,  2022, 19616,
         1006,  5412,  1999,  4852,  2030, 16922,  2344,  1007,  2000,  2424,
         1996, 21920,  2812,  1012,   102])"
416,1,"['mean', 'observation', 'sample', 'weighted mean']", Weighted Mean,seg_95,each observation (sample value) is weighted by 1∕n in the simple mean (see equation (2.2)). the weighted mean is an extension in which we multiply (or divide),tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([18215,  2812])","tensor([  101,  2169,  8089,  1006,  7099,  3643,  1007,  2003, 18215,  2011,
          100,  1999,  1996,  3722,  2812,  1006,  2156,  8522,  1006,  1016,
         1012,  1016,  1007,  1007,  1012,  1996, 18215,  2812,  2003,  2019,
         5331,  1999,  2029,  2057,  4800, 22086,  1006,  2030, 11443,  1007,
          102])"
417,1,"['mean', 'observation', 'associated', 'weighted mean']", Weighted Mean,seg_95,"each observation by an appropriate nonzero weight. if  1,  2, … ,  n are the weights associated with x1, x2, … , xn, respectively, the weighted mean is given by",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0.])","tensor([18215,  2812])","tensor([  101,  2169,  8089,  2011,  2019,  6413,  2512,  6290,  2080,  3635,
         1012,  2065,  1015,  1010,  1016,  1010,  1529,  1010,  1050,  2024,
         1996, 15871,  3378,  2007,  1060,  2487,  1010,  1060,  2475,  1010,
         1529,  1010,  1060,  2078,  1010,  4414,  1010,  1996, 18215,  2812,
         2003,  2445,  2011,   102])"
418,1,"['mean', 'correlated', 'observations', 'outcome', 'sample', 'experiment', 'weighted mean', 'parameters', 'arithmetic mean', 'data']", Weighted Mean,seg_95,"weighted mean assigns different importance to different sample observations. for example, if the data were collected over a time window (as in supermarket sales), more recent transactions must be highly weighted than distant ones to the past. similarly in some medical studies in which the age of a patient is correlated with the outcome of an experiment, patients in various age groups may be weighted differently. we denote the weighted mean by xn(w) (or xn(wn)) to distinguish it from simple mean, and to indicate that the weights are the parameters. different weightings may be used on the same sample. when all the weights are equal, the weighted mean reduces to the arithmetic mean.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([18215,  2812])","tensor([  101, 18215,  2812, 24022,  2367,  5197,  2000,  2367,  7099,  9420,
         1012,  2005,  2742,  1010,  2065,  1996,  2951,  2020,  5067,  2058,
         1037,  2051,  3332,  1006,  2004,  1999, 17006,  4341,  1007,  1010,
         2062,  3522, 11817,  2442,  2022,  3811, 18215,  2084,  6802,  3924,
         2000,  1996,  2627,  1012,  6660,  1999,  2070,  2966,  2913,  1999,
         2029,  1996,  2287,  1997,  1037,  5776,  2003, 23900,  2007,  1996,
         9560,  1997,  2019,  7551,  1010,  5022,  1999,  2536,  2287,  2967,
         2089,  2022, 18215, 11543,  1012,  2057, 19090,  1996, 18215,  2812,
         2011,  1060,  2078,  1006,  1059,  1007,  1006,  2030,  1060,  2078,
         1006,  1059,  2078,  1007,  1007,  2000, 10782,  2009,  2013,  3722,
         2812,  1010,  1998,  2000,  5769,  2008,  1996, 15871,  2024,  1996,
        11709,  1012,  2367,  3635,  8613,  2089,  2022,  2109,  2006,  1996,
         2168,  7099,  1012,  2043,  2035,  1996, 15871,  2024,  5020,  1010,
         1996, 18215,  2812, 13416,  2000,  1996, 20204,  2812,  1012,   102])"
419,1,"['mean', 'frequencies', 'data', 'grouped data']", Mean of Grouped Data,seg_97,the mean of grouped data is obtained from the above by replacing i’s with corresponding class frequencies fi’s as,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([ 2812,  1997, 15131,  2951])","tensor([  101,  1996,  2812,  1997, 15131,  2951,  2003,  4663,  2013,  1996,
         2682,  2011,  6419,  1045,  1521,  1055,  2007,  7978,  2465, 13139,
        10882,  1521,  1055,  2004,   102])"
420,1,"['cases', 'mean', 'moment', 'frequencies', 'frequency', 'moments', 'results', 'distribution', 'data', 'median']", Mean of Grouped Data,seg_97,"here, fi are the frequencies and xi is the middle point of the respective class. it is assumed that there are no open classes (such as x 5 or x 100) at the extremes. in such cases, the median is more appropriate. each of the class widths are assumed to be equal in equation (2.14). a shepperd’s correction may be applied to get more accurate results. this is desirable because the middle value of a class is used to compute the mean (and higher order moments) under the assumption that the entire frequency falling in a class is concentrated at or around the middle value. this warrants a correction to compensate for the distribution of data throughout the class. there is no correction for the first moment 1. for 2, the correction term is h2∕2 so that the corrected term is 2 − h2∕2 where h is the class width. if there are a large number of classes and some of the adjacent classes have relatively very low frequencies, they may be combined to reduce the computation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812,  1997, 15131,  2951])","tensor([  101,  2182,  1010, 10882,  2024,  1996, 13139,  1998,  8418,  2003,
         1996,  2690,  2391,  1997,  1996,  7972,  2465,  1012,  2009,  2003,
         5071,  2008,  2045,  2024,  2053,  2330,  4280,  1006,  2107,  2004,
         1060,  1019,  2030,  1060,  2531,  1007,  2012,  1996, 28800,  1012,
         1999,  2107,  3572,  1010,  1996,  3991,  2003,  2062,  6413,  1012,
         2169,  1997,  1996,  2465,  9381,  2015,  2024,  5071,  2000,  2022,
         5020,  1999,  8522,  1006,  1016,  1012,  2403,  1007,  1012,  1037,
         2016, 18620,  2094,  1521,  1055, 18140,  2089,  2022,  4162,  2000,
         2131,  2062,  8321,  3463,  1012,  2023,  2003, 16166,  2138,  1996,
         2690,  3643,  1997,  1037,  2465,  2003,  2109,  2000, 24134,  1996,
         2812,  1006,  1998,  3020,  2344,  5312,  1007,  2104,  1996, 11213,
         2008,  1996,  2972,  6075,  4634,  1999,  1037,  2465,  2003,  8279,
         2012,  2030,  2105,  1996,  2690,  3643,  1012,  2023, 10943,  2015,
         1037, 18140,  2000, 19079,  2005,  1996,  4353,  1997,  2951,  2802,
         1996,  2465,  1012,  2045,  2003,  2053, 18140,  2005,  1996,  2034,
         2617,  1015,  1012,  2005,  1016,  1010,  1996, 18140,  2744,  2003,
          100,  2061,  2008,  1996, 13371,  2744,  2003,  1016,  1597,   100,
         2073,  1044,  2003,  1996,  2465,  9381,  1012,  2065,  2045,  2024,
         1037,  2312,  2193,  1997,  4280,  1998,  2070,  1997,  1996,  5516,
         4280,  2031,  4659,  2200,  2659, 13139,  1010,  2027,  2089,  2022,
         4117,  2000,  5547,  1996, 22334,  1012,   102])"
421,1,"['mean', 'weighted mean']", Updating Formula for Weighted Sample Mean,seg_99,an updating formula could also be developed for the weighted mean as follows. start with equation (2.14) for n + 1 as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101,  2019,  2039, 16616,  5675,  2071,  2036,  2022,  2764,  2005,
         1996, 18215,  2812,  2004,  4076,  1012,  2707,  2007,  8522,  1006,
         1016,  1012,  2403,  1007,  2005,  1050,  1009,  1015,  2004,   102])"
422,0,[], Updating Formula for Weighted Sample Mean,seg_99,multiply and divide the first term on the rhs by ∑i,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101,  4800, 22086,  1998, 11443,  1996,  2034,  2744,  2006,  1996,
         1054,  7898,  2011,   100,   102])"
423,0,[], Updating Formula for Weighted Sample Mean,seg_99,"factor from first two terms, and cancel out ∑i",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101,  5387,  2013,  2034,  2048,  3408,  1010,  1998, 17542,  2041,
          100,   102])"
424,0,[], Updating Formula for Weighted Sample Mean,seg_99,1  i from numerator and denominator,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101,  1015,  1045,  2013, 16371,  5017,  8844,  1998,  7939, 20936,
        27413,   102])"
425,0,[], Updating Formula for Weighted Sample Mean,seg_99,of the first term to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([ 101, 1997, 1996, 2034, 2744, 2000, 2131,  102])"
426,1,"['mean', 'sample', 'weighted mean', 'data']", Updating Formula for Weighted Sample Mean,seg_99,"in terms of the mean of the weights, this becomes xn+1(wn+1) = xn(wn) +  n+1 (xn+1 − xn(wn)). when xn+1 = xn(wn), the weighted mean will remain (n+1) n+1 the same, irrespective of the weight assigned to the new sample data item.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101,  1999,  3408,  1997,  1996,  2812,  1997,  1996, 15871,  1010,
         2023,  4150,  1060,  2078,  1009,  1015,  1006,  1059,  2078,  1009,
         1015,  1007,  1027,  1060,  2078,  1006,  1059,  2078,  1007,  1009,
         1050,  1009,  1015,  1006,  1060,  2078,  1009,  1015,  1597,  1060,
         2078,  1006,  1059,  2078,  1007,  1007,  1012,  2043,  1060,  2078,
         1009,  1015,  1027,  1060,  2078,  1006,  1059,  2078,  1007,  1010,
         1996, 18215,  2812,  2097,  3961,  1006,  1050,  1009,  1015,  1007,
         1050,  1009,  1015,  1996,  2168,  1010, 20868,  6072,  5051, 15277,
         1997,  1996,  3635,  4137,  2000,  1996,  2047,  7099,  2951,  8875,
         1012,   102])"
427,0,[], Updating Formula for Weighted Sample Mean,seg_99,example 2.4 calories burned while exercising,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101,  2742,  1016,  1012,  1018, 10250, 18909,  5296,  2096, 28428,
          102])"
428,1,"['weighted mean', 'mean', 'table']", Updating Formula for Weighted Sample Mean,seg_99,"calories burned on a treadmill by a person depends on many things including speed of the belt, age, and physical stature. table 2.1 gives the calories burned and speed on treadmill of 16 visitors to a health club. find the weighted mean using equation (2.17).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101, 10250, 18909,  5296,  2006,  1037, 29449, 19912,  2011,  1037,
         2711,  9041,  2006,  2116,  2477,  2164,  3177,  1997,  1996,  5583,
         1010,  2287,  1010,  1998,  3558, 21120,  1012,  2795,  1016,  1012,
         1015,  3957,  1996, 10250, 18909,  5296,  1998,  3177,  2006, 29449,
        19912,  1997,  2385,  5731,  2000,  1037,  2740,  2252,  1012,  2424,
         1996, 18215,  2812,  2478,  8522,  1006,  1016,  1012,  2459,  1007,
         1012,   102])"
429,1,"['weighted mean', 'mean', 'table']", Updating Formula for Weighted Sample Mean,seg_99,solution 2.4 calculations are shown in table 2.1. weighted mean is computed directly to check the computations. the last entry in the last column gives the weighted mean as 8.0282.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 18215,  7099,  2812])","tensor([  101,  5576,  1016,  1012,  1018, 16268,  2024,  3491,  1999,  2795,
         1016,  1012,  1015,  1012, 18215,  2812,  2003, 24806,  3495,  2000,
         4638,  1996, 22334,  2015,  1012,  1996,  2197,  4443,  1999,  1996,
         2197,  5930,  3957,  1996, 18215,  2812,  2004,  1022,  1012,  6185,
         2620,  2475,  1012,   102])"
430,1,"['mean', 'hypotheses', 'representative', 'case', 'data', 'ordinal', 'frequency', 'relative frequency', 'sample', 'statistics', 'statistical', 'nominal', 'sample mean']", Advantages of Mean,seg_101,"the am can be computed even if data contain many zeros. in addition, it possesses some desirable statistical properties in other fields of statistics such as testing of hypotheses and inferences. it is meaningful for ordinal or higher scales of measurements that are numerically coded. there is one particular case of nominal data for which the mean is meaningful. if the nominal data are coded as either 0 or 1, the mean will give the relative frequency of sample values that are coded as 1. as a simple example, suppose the sex of patients to a clinic are coded as 0= female, 1=male. if 120 patients visit the clinic on a particular day, we could find the mean of these values to find out what proportion of them were males. this is due to the fact that we have coded males as “1.” what if we want to find out the proportion of females only? one solution is to subtract the males’ proportion from 1 to get the female proportion (as the proportions for males and females add up to 1). the mean also has an interpretation as the balancing point (center of gravity) of a simple or weighted sample (see below). this implies that if one were to use a single number between the minimum and maximum of the sample values as a representative of the sample, the sample mean seems to be the most appropriate value to use.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997,  2812])","tensor([  101,  1996,  2572,  2064,  2022, 24806,  2130,  2065,  2951,  5383,
         2116,  5717,  2015,  1012,  1999,  2804,  1010,  2009, 14882,  2070,
        16166,  7778,  5144,  1999,  2060,  4249,  1997,  6747,  2107,  2004,
         5604,  1997,  1044, 22571, 14573, 23072,  1998, 28937,  2015,  1012,
         2009,  2003, 15902,  2005,  2030, 18979,  2140,  2030,  3020,  9539,
         1997, 11702,  2008,  2024, 15973,  2135, 22402,  1012,  2045,  2003,
         2028,  3327,  2553,  1997, 15087,  2951,  2005,  2029,  1996,  2812,
         2003, 15902,  1012,  2065,  1996, 15087,  2951,  2024, 22402,  2004,
         2593,  1014,  2030,  1015,  1010,  1996,  2812,  2097,  2507,  1996,
         5816,  6075,  1997,  7099,  5300,  2008,  2024, 22402,  2004,  1015,
         1012,  2004,  1037,  3722,  2742,  1010,  6814,  1996,  3348,  1997,
         5022,  2000,  1037,  9349,  2024, 22402,  2004,  1014,  1027,  2931,
         1010,  1015,  1027,  3287,  1012,  2065,  6036,  5022,  3942,  1996,
         9349,  2006,  1037,  3327,  2154,  1010,  2057,  2071,  2424,  1996,
         2812,  1997,  2122,  5300,  2000,  2424,  2041,  2054, 10817,  1997,
         2068,  2020,  3767,  1012,  2023,  2003,  2349,  2000,  1996,  2755,
         2008,  2057,  2031, 22402,  3767,  2004,  1523,  1015,  1012,  1524,
         2054,  2065,  2057,  2215,  2000,  2424,  2041,  1996, 10817,  1997,
         3801,  2069,  1029,  2028,  5576,  2003,  2000,  4942,  6494,  6593,
         1996,  3767,  1521, 10817,  2013,  1015,  2000,  2131,  1996,  2931,
        10817,  1006,  2004,  1996, 19173,  2005,  3767,  1998,  3801,  5587,
         2039,  2000,  1015,  1007,  1012,  1996,  2812,  2036,  2038,  2019,
         7613,  2004,  1996, 20120,  2391,  1006,  2415,  1997,  8992,  1007,
         1997,  1037,  3722,  2030, 18215,  7099,  1006,  2156,  2917,  1007,
         1012,  2023, 12748,  2008,  2065,  2028,  2020,  2000,  2224,  1037,
         2309,  2193,  2090,  1996,  6263,  1998,  4555,  1997,  1996,  7099,
         5300,  2004,  1037,  4387,  1997,  1996,  7099,  1010,  1996,  7099,
         2812,  3849,  2000,  2022,  1996,  2087,  6413,  3643,  2000,  2224,
         1012,   102])"
431,1,['mean'], Advantages of Mean,seg_101,some of the advantages of mean are summarized below:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12637,  1997,  2812])","tensor([  101,  2070,  1997,  1996, 12637,  1997,  2812,  2024, 22539,  2917,
         1024,   102])"
432,1,['mean'], Advantages of Mean,seg_101,1. the mean is easy to compute.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997,  2812])","tensor([  101,  1015,  1012,  1996,  2812,  2003,  3733,  2000, 24134,  1012,
          102])"
433,1,['treatment'], Advantages of Mean,seg_101,2. it lends itself to further arithmetic treatment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([12637,  1997,  2812])","tensor([  101,  1016,  1012,  2009, 18496,  2015,  2993,  2000,  2582, 20204,
         3949,  1012,   102])"
434,1,['sample'], Advantages of Mean,seg_101,3. it is always unique (whereas mode of a sample need not be unique).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12637,  1997,  2812])","tensor([ 101, 1017, 1012, 2009, 2003, 2467, 4310, 1006, 6168, 5549, 1997, 1037,
        7099, 2342, 2025, 2022, 4310, 1007, 1012,  102])"
435,1,['data'], Advantages of Mean,seg_101,4. it can easily be updated (when data are added or deleted).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997,  2812])","tensor([  101,  1018,  1012,  2009,  2064,  4089,  2022,  7172,  1006,  2043,
         2951,  2024,  2794,  2030, 17159,  1007,  1012,   102])"
436,1,"['mean', 'function', 'linear', 'observations', 'sample', 'missing value', 'missing values', 'grand mean']", Advantages of Mean,seg_101,"as the mean is a linear function of the sample values, we could deal with missing values as follows: (i) find the grand mean xg by omitting all missing observations; (ii) replace each missing value by xg and find the new mean x.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([12637,  1997,  2812])","tensor([  101,  2004,  1996,  2812,  2003,  1037,  7399,  3853,  1997,  1996,
         7099,  5300,  1010,  2057,  2071,  3066,  2007,  4394,  5300,  2004,
         4076,  1024,  1006,  1045,  1007,  2424,  1996,  2882,  2812,  1060,
         2290,  2011, 18168, 12474,  2075,  2035,  4394,  9420,  1025,  1006,
         2462,  1007,  5672,  2169,  4394,  3643,  2011,  1060,  2290,  1998,
         2424,  1996,  2047,  2812,  1060,  1012,   102])"
437,1,"['mean', 'observations', 'deviations']", Properties of The Mean,seg_103,"the mean satisfies many interesting properties. for example, the mean places itself in-between the extremes of observations in such a way that the sum of the deviations of observations (from it) to its left and to its right are equally balanced in terms of their magnitudes. this is proved in the following theorem.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  1996,  2812,  2938,  2483, 14213,  2116,  5875,  5144,  1012,
         2005,  2742,  1010,  1996,  2812,  3182,  2993,  1999,  1011,  2090,
         1996, 28800,  1997,  9420,  1999,  2107,  1037,  2126,  2008,  1996,
         7680,  1997,  1996, 24353,  2015,  1997,  9420,  1006,  2013,  2009,
         1007,  2000,  2049,  2187,  1998,  2000,  2049,  2157,  2024,  8053,
        12042,  1999,  3408,  1997,  2037, 10194,  2015,  1012,  2023,  2003,
         4928,  1999,  1996,  2206,  9872,  1012,   102])"
438,1,"['observations', 'sample', 'deviations']", Properties of The Mean,seg_103,"theorem 2.2 for any sample of size n   1, the sum of the deviations of observations",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  9872,  1016,  1012,  1016,  2005,  2151,  7099,  1997,  2946,
         1050,  1015,  1010,  1996,  7680,  1997,  1996, 24353,  2015,  1997,
         9420,   102])"
439,1,['mean'], Properties of The Mean,seg_103,from the mean ∑j,tensor(1),"tensor([0., 0., 0., 1., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([ 101, 2013, 1996, 2812,  100,  102])"
440,1,"['mean', 'weighted mean']", Properties of The Mean,seg_103,proof: this is already proved in equation (2.4) (p. 46). this can be extended to the weighted mean as follows:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  6947,  1024,  2023,  2003,  2525,  4928,  1999,  8522,  1006,
         1016,  1012,  1018,  1007,  1006,  1052,  1012,  4805,  1007,  1012,
         2023,  2064,  2022,  3668,  2000,  1996, 18215,  2812,  2004,  4076,
         1024,   102])"
441,1,"['mean', 'table', 'levels', 'data']", Properties of The Mean,seg_103,hexavalent chromium is a toxic chemical found in the metropolitan areas. data in table 2.2 gives the levels in nanogram per cubic meter for 10 different places. compute the mean and verify whether ∑i,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  2002, 18684, 24879, 10381, 21716,  5007,  2003,  1037, 11704,
         5072,  2179,  1999,  1996,  4956,  2752,  1012,  2951,  1999,  2795,
         1016,  1012,  1016,  3957,  1996,  3798,  1999, 28991, 13113,  2566,
        11919,  8316,  2005,  2184,  2367,  3182,  1012, 24134,  1996,  2812,
         1998, 20410,  3251,   100,   102])"
442,1,"['mean', 'table', 'deviations', 'data']", Properties of The Mean,seg_103,"solution 2.5 the sum of the numbers is 7.66, from which the mean is found as 0.766. the second row of table 2.2 gives the deviations of data from the mean. the last column is the sum of the deviations, which is obviously zero.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  5576,  1016,  1012,  1019,  1996,  7680,  1997,  1996,  3616,
         2003,  1021,  1012,  5764,  1010,  2013,  2029,  1996,  2812,  2003,
         2179,  2004,  1014,  1012,  6146,  2575,  1012,  1996,  2117,  5216,
         1997,  2795,  1016,  1012,  1016,  3957,  1996, 24353,  2015,  1997,
         2951,  2013,  1996,  2812,  1012,  1996,  2197,  5930,  2003,  1996,
         7680,  1997,  1996, 24353,  2015,  1010,  2029,  2003,  5525,  5717,
         1012,   102])"
443,1,['data'], Properties of The Mean,seg_103,example 2.6 am coinciding with a data value,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([ 101, 2742, 1016, 1012, 1020, 2572, 9226, 6895, 4667, 2007, 1037, 2951,
        3643,  102])"
444,1,"['mean', 'arithmetic mean', 'data']", Properties of The Mean,seg_103,"if the arithmetic mean of n data values coincide exactly with one of the data values (say xk), then xk must be the am of the other (n − 1) data values.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  2065,  1996, 20204,  2812,  1997,  1050,  2951,  5300, 19680,
         3599,  2007,  2028,  1997,  1996,  2951,  5300,  1006,  2360,  1060,
         2243,  1007,  1010,  2059,  1060,  2243,  2442,  2022,  1996,  2572,
         1997,  1996,  2060,  1006,  1050,  1597,  1015,  1007,  2951,  5300,
         1012,   102])"
445,1,"['mean', 'data']", Properties of The Mean,seg_103,solution 2.6 let there be n data values with mean xn. then we have n ∗ xn =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([ 101, 5576, 1016, 1012, 1020, 2292, 2045, 2022, 1050, 2951, 5300, 2007,
        2812, 1060, 2078, 1012, 2059, 2057, 2031, 1050, 1598, 1060, 2078, 1027,
         102])"
446,1,"['loss', 'data']", Properties of The Mean,seg_103,"n =1 xi. without loss of generality, assume that the coinciding data value is xk so that xn = xk and the lhs becomes nxk. cancel one xk term from lhs and rhs. the multiplier on the lhs becomes (n − 1). what remains on the rhs is the sum of the data values less xk. divide both sides by (n − 1) to get xk = xn−1. as k is arbitrary, the result follows. this result is easy to extend to gm and hm (see exercise 2.10, p. 65).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  1050,  1027,  1015,  8418,  1012,  2302,  3279,  1997,  2236,
         3012,  1010,  7868,  2008,  1996,  9226,  6895,  4667,  2951,  3643,
         2003,  1060,  2243,  2061,  2008,  1060,  2078,  1027,  1060,  2243,
         1998,  1996,  1048,  7898,  4150,  1050,  2595,  2243,  1012, 17542,
         2028,  1060,  2243,  2744,  2013,  1048,  7898,  1998,  1054,  7898,
         1012,  1996,  4800, 24759,  3771,  2006,  1996,  1048,  7898,  4150,
         1006,  1050,  1597,  1015,  1007,  1012,  2054,  3464,  2006,  1996,
         1054,  7898,  2003,  1996,  7680,  1997,  1996,  2951,  5300,  2625,
         1060,  2243,  1012, 11443,  2119,  3903,  2011,  1006,  1050,  1597,
         1015,  1007,  2000,  2131,  1060,  2243,  1027,  1060,  2078, 27944,
         1012,  2004,  1047,  2003, 15275,  1010,  1996,  2765,  4076,  1012,
         2023,  2765,  2003,  3733,  2000,  7949,  2000, 13938,  1998, 20287,
         1006,  2156,  6912,  1016,  1012,  2184,  1010,  1052,  1012,  3515,
         1007,  1012,   102])"
447,1,"['analysis of variance', 'variances', 'variance']", Properties of The Mean,seg_103,"in analysis of variance procedures, we encounter within group variances which are measured around the means of each group xi. = 1",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  1999,  4106,  1997, 23284,  8853,  1010,  2057,  8087,  2306,
         2177, 23284,  2015,  2029,  2024,  7594,  2105,  1996,  2965,  1997,
         2169,  2177,  8418,  1012,  1027,  1015,   102])"
448,1,['variances'], Properties of The Mean,seg_103,"n∑jxij, and between group variances",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,   100,  1010,  1998,  2090,  2177, 23284,  2015,   102])"
449,1,['mean'], Properties of The Mean,seg_103,which are measured around overall mean x.. = n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([ 101, 2029, 2024, 7594, 2105, 3452, 2812, 1060, 1012, 1012, 1027, 1050,
         102])"
450,1,"['mean', 'variable']", Properties of The Mean,seg_103,1 k∑i∑jxij. note that a “.” in these expressions fixes a variable. thus x is the mean that is averaged around all values,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  1015,   100,  1012,  3602,  2008,  1037,  1523,  1012,  1524,
         1999,  2122, 11423,  8081,  2229,  1037,  8023,  1012,  2947,  1060,
         2003,  1996,  2812,  2008,  2003, 11398,  2105,  2035,  5300,   102])"
451,1,['mean'], Properties of The Mean,seg_103,".. of i and j, whereas xi. is the mean that is averaged around all j values.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([5144, 1997, 1996, 2812])","tensor([  101,  1012,  1012,  1997,  1045,  1998,  1046,  1010,  6168,  8418,
         1012,  2003,  1996,  2812,  2008,  2003, 11398,  2105,  2035,  1046,
         5300,  1012,   102])"
452,1,"['set', 'frequency', 'sample median', 'population', 'sample', 'efficient', 'distribution', 'data set', 'data', 'median']", MEDIAN,seg_105,"the population median is that value below which 50% of the values fall. in other words, the median divides the total frequency (area under the distribution) into exactly equal parts. analogous definition holds for the sample median. it is most appropriate when all sample values are different. it can be easily found if the sample values are arranged in sorted order (in ascending or descending order). the complexity of sequential data sorting is o(n log n) where n is the size of the data. parallel sorting techniques can improve this to o(n). still, it may be time consuming to sort an entire data set, just to find the median when the data size is too large. however, efficient algorithms are available to locate approximate median without data sorting [2, 17].",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([3991]),"tensor([  101,  1996,  2313,  3991,  2003,  2008,  3643,  2917,  2029,  2753,
         1003,  1997,  1996,  5300,  2991,  1012,  1999,  2060,  2616,  1010,
         1996,  3991, 20487,  1996,  2561,  6075,  1006,  2181,  2104,  1996,
         4353,  1007,  2046,  3599,  5020,  3033,  1012, 19639,  6210,  4324,
         2005,  1996,  7099,  3991,  1012,  2009,  2003,  2087,  6413,  2043,
         2035,  7099,  5300,  2024,  2367,  1012,  2009,  2064,  2022,  4089,
         2179,  2065,  1996,  7099,  5300,  2024,  5412,  1999, 19616,  2344,
         1006,  1999, 22316,  2030, 15127,  2344,  1007,  1012,  1996, 11619,
         1997, 25582,  2951, 22210,  2003,  1051,  1006,  1050,  8833,  1050,
         1007,  2073,  1050,  2003,  1996,  2946,  1997,  1996,  2951,  1012,
         5903, 22210,  5461,  2064,  5335,  2023,  2000,  1051,  1006,  1050,
         1007,  1012,  2145,  1010,  2009,  2089,  2022,  2051, 15077,  2000,
         4066,  2019,  2972,  2951,  2275,  1010,  2074,  2000,  2424,  1996,
         3991,  2043,  1996,  2951,  2946,  2003,  2205,  2312,  1012,  2174,
         1010,  8114, 13792,  2024,  2800,  2000, 12453, 15796,  3991,  2302,
         2951, 22210,  1031,  1016,  1010,  2459,  1033,  1012,   102])"
453,1,"['sample', 'sample size', 'median']", MEDIAN,seg_105,"the median of a sample is unique for odd sample size (middle element at [(n + 1)∕2]th position, or x(n+1)∕2). when the sample size is even, we take the",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([3991]),"tensor([  101,  1996,  3991,  1997,  1037,  7099,  2003,  4310,  2005,  5976,
         7099,  2946,  1006,  2690,  5783,  2012,  1031,  1006,  1050,  1009,
         1015,  1007,   100,  1033, 16215,  2597,  1010,  2030,  1060,  1006,
         1050,  1009,  1015,  1007,   100,  1007,  1012,  2043,  1996,  7099,
         2946,  2003,  2130,  1010,  2057,  2202,  1996,   102])"
454,1,"['mean', 'median']", MEDIAN,seg_105,arithmetic mean of the middle values (at (n∕2)th and (n∕2 + 1)th positions) as the median. symbolically:,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([3991]),"tensor([  101, 20204,  2812,  1997,  1996,  2690,  5300,  1006,  2012,  1006,
          100,  1007, 16215,  1998,  1006,   100,  1009,  1015,  1007, 16215,
         4460,  1007,  2004,  1996,  3991,  1012, 12613,  3973,  1024,   102])"
455,1,['median'], MEDIAN,seg_105,example 2.7 median finding,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0.])",tensor([3991]),"tensor([ 101, 2742, 1016, 1012, 1021, 3991, 4531,  102])"
456,1,['median'], MEDIAN,seg_105,"find the median of (5,2,8,4,7) and (5,2,8,9,4,7).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([3991]),"tensor([ 101, 2424, 1996, 3991, 1997, 1006, 1019, 1010, 1016, 1010, 1022, 1010,
        1018, 1010, 1021, 1007, 1998, 1006, 1019, 1010, 1016, 1010, 1022, 1010,
        1023, 1010, 1018, 1010, 1021, 1007, 1012,  102])"
457,1,"['mean', 'set', 'observations', 'number of observations', 'data set', 'data', 'median', 'case']", MEDIAN,seg_105,"solution 2.7 here, the number of observations is odd. the sorted data set is (2,4,5,7,8). the middle element is 5, which is the median. in the second case, the number of observations is even. the sorted data set is (2,4,5,7,8,9). the middle elements are 5 and 7. the mean of these middle elements is (5+7)/2= 6, which is the median.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([3991]),"tensor([  101,  5576,  1016,  1012,  1021,  2182,  1010,  1996,  2193,  1997,
         9420,  2003,  5976,  1012,  1996, 19616,  2951,  2275,  2003,  1006,
         1016,  1010,  1018,  1010,  1019,  1010,  1021,  1010,  1022,  1007,
         1012,  1996,  2690,  5783,  2003,  1019,  1010,  2029,  2003,  1996,
         3991,  1012,  1999,  1996,  2117,  2553,  1010,  1996,  2193,  1997,
         9420,  2003,  2130,  1012,  1996, 19616,  2951,  2275,  2003,  1006,
         1016,  1010,  1018,  1010,  1019,  1010,  1021,  1010,  1022,  1010,
         1023,  1007,  1012,  1996,  2690,  3787,  2024,  1019,  1998,  1021,
         1012,  1996,  2812,  1997,  2122,  2690,  3787,  2003,  1006,  1019,
         1009,  1021,  1007,  1013,  1016,  1027,  1020,  1010,  2029,  2003,
         1996,  3991,  1012,   102])"
458,1,"['data', 'median']", MEDIAN,seg_105,"trimmed median is meaningful when the trimming occurs at either of the extremes. if data values are discarded at the low end, the trimmed median moves to the right and vice versa. when an equal number of data values are discarded from both ends, the median will remain the same.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])",tensor([3991]),"tensor([  101, 21920,  3991,  2003, 15902,  2043,  1996, 12241,  6562,  5158,
         2012,  2593,  1997,  1996, 28800,  1012,  2065,  2951,  5300,  2024,
        15105,  2012,  1996,  2659,  2203,  1010,  1996, 21920,  3991,  5829,
         2000,  1996,  2157,  1998,  3580, 18601,  1012,  2043,  2019,  5020,
         2193,  1997,  2951,  5300,  2024, 15105,  2013,  2119,  4515,  1010,
         1996,  3991,  2097,  3961,  1996,  2168,  1012,   102])"
459,1,"['grouped data', 'data', 'median']", Median of Grouped Data,seg_107,"finding the median of grouped data is more difficult, as we need to first locate the median class. it is found in two steps as follows:",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  4531,  1996,  3991,  1997, 15131,  2951,  2003,  2062,  3697,
         1010,  2004,  2057,  2342,  2000,  2034, 12453,  1996,  3991,  2465,
         1012,  2009,  2003,  2179,  1999,  2048,  4084,  2004,  4076,  1024,
          102])"
460,1,['median'], Median of Grouped Data,seg_107,1. find the class to which the median belongs,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([ 101, 1015, 1012, 2424, 1996, 2465, 2000, 2029, 1996, 3991, 7460,  102])"
461,1,"['frequency', 'sample', 'sample size', 'limit', 'cumulative frequency', 'median']", Median of Grouped Data,seg_107,"2. compute it as median = l + c ∗ (n∕2 − m)∕f where l is the lower limit of the median class, c is the fixed class width, n is the sample size, m is the cumulative frequency up to median class, and f is the frequency in the median class.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  1016,  1012, 24134,  2009,  2004,  3991,  1027,  1048,  1009,
         1039,  1598,  1006,   100,  1597,  1049,  1007,   100,  2073,  1048,
         2003,  1996,  2896,  5787,  1997,  1996,  3991,  2465,  1010,  1039,
         2003,  1996,  4964,  2465,  9381,  1010,  1050,  2003,  1996,  7099,
         2946,  1010,  1049,  2003,  1996, 23260,  6075,  2039,  2000,  3991,
         2465,  1010,  1998,  1042,  2003,  1996,  6075,  1999,  1996,  3991,
         2465,  1012,   102])"
462,1,"['random variable', 'random', 'expected values', 'median', 'variable']", Median of Grouped Data,seg_107,"theorem 2.3 the expected absolute departure of a random variable is minimum when it is taken around the median (i.e., e|x − c| is minimum when c is the median (expected values are discussed in chapter 8)).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([ 101, 9872, 1016, 1012, 1017, 1996, 3517, 7619, 6712, 1997, 1037, 6721,
        8023, 2003, 6263, 2043, 2009, 2003, 2579, 2105, 1996, 3991, 1006, 1045,
        1012, 1041, 1012, 1010, 1041, 1064, 1060, 1597, 1039, 1064, 2003, 6263,
        2043, 1039, 2003, 1996, 3991, 1006, 3517, 5300, 2024, 6936, 1999, 3127,
        1022, 1007, 1007, 1012,  102])"
463,1,['discrete'], Median of Grouped Data,seg_107,"proof: let x be discrete. by definition, e|x − c| = ∑ (c − xi)f (x) + ∑ (xi − c)f (x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  6947,  1024,  2292,  1060,  2022, 16246,  1012,  2011,  6210,
         1010,  1041,  1064,  1060,  1597,  1039,  1064,  1027,   100,  1006,
         1039,  1597,  8418,  1007,  1042,  1006,  1060,  1007,  1009,   100,
         1006,  8418,  1597,  1039,  1007,  1042,  1006,  1060,  1007,  1012,
          102])"
464,1,['summation'], Median of Grouped Data,seg_107,"xi c xi c perturb the constant c by a small amount  c so that c = c −  c. the net change is then δ = − ∑ ( c)f (x) + ∑ ( c)f (x). taking the constant  c outside the summation, we",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  8418,  1039,  8418,  1039,  2566, 20689,  2497,  1996,  5377,
         1039,  2011,  1037,  2235,  3815,  1039,  2061,  2008,  1039,  1027,
         1039,  1597,  1039,  1012,  1996,  5658,  2689,  2003,  2059,  1158,
         1027,  1597,   100,  1006,  1039,  1007,  1042,  1006,  1060,  1007,
         1009,   100,  1006,  1039,  1007,  1042,  1006,  1060,  1007,  1012,
         2635,  1996,  5377,  1039,  2648,  1996,  7680, 28649,  1010,  2057,
          102])"
465,1,['median'], Median of Grouped Data,seg_107,"xi c xi c get δ =  c[∑ f (x) − ∑ f (x)]. if c is the median, then the expression in the square",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([ 101, 8418, 1039, 8418, 1039, 2131, 1158, 1027, 1039, 1031,  100, 1042,
        1006, 1060, 1007, 1597,  100, 1042, 1006, 1060, 1007, 1033, 1012, 2065,
        1039, 2003, 1996, 3991, 1010, 2059, 1996, 3670, 1999, 1996, 2675,  102])"
466,1,"['continuous', 'frequency', 'median']", Median of Grouped Data,seg_107,"brackets is zero (because the median divides the total frequency into equal parts). thus, the result. if x is continuous, we could write",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101, 19719,  2003,  5717,  1006,  2138,  1996,  3991, 20487,  1996,
         2561,  6075,  2046,  5020,  3033,  1007,  1012,  2947,  1010,  1996,
         2765,  1012,  2065,  1060,  2003,  7142,  1010,  2057,  2071,  4339,
          102])"
467,1,"['mean', 'indicator function', 'function', 'data', 'observations', 'frequency', 'sample', 'results', 'sample size', 'indicator', 'median']", Median of Grouped Data,seg_107,"whereas the mean balances the data above and below it in terms of the magnitudes of observations, the median balances the frequency (count) of data above and below it, irrespective of their magnitudes (here we are assuming that the median for even sample size is the mean of the middle (sorted) sample values). thus the median can be found iteratively using an indicator function. define an indicator function i(xj) = 1 if xj  median and i(xj) = 0 otherwise. summing results in ∑xj i(xj) = n∕2 if n is even;",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  6168,  1996,  2812,  5703,  2015,  1996,  2951,  2682,  1998,
         2917,  2009,  1999,  3408,  1997,  1996, 10194,  2015,  1997,  9420,
         1010,  1996,  3991,  5703,  2015,  1996,  6075,  1006,  4175,  1007,
         1997,  2951,  2682,  1998,  2917,  2009,  1010, 20868,  6072,  5051,
        15277,  1997,  2037, 10194,  2015,  1006,  2182,  2057,  2024, 10262,
         2008,  1996,  3991,  2005,  2130,  7099,  2946,  2003,  1996,  2812,
         1997,  1996,  2690,  1006, 19616,  1007,  7099,  5300,  1007,  1012,
         2947,  1996,  3991,  2064,  2022,  2179,  2009, 25284,  2135,  2478,
         2019, 17245,  3853,  1012,  9375,  2019, 17245,  3853,  1045,  1006,
         1060,  3501,  1007,  1027,  1015,  2065,  1060,  3501,  3991,  1998,
         1045,  1006,  1060,  3501,  1007,  1027,  1014,  4728,  1012,  7680,
         6562,  3463,  1999,   100,  1045,  1006,  1060,  3501,  1007,  1027,
          100,  2065,  1050,  2003,  2130,  1025,   102])"
468,1,['median'], Median of Grouped Data,seg_107,and (n − 1)∕2 if n is odd (because i(xj) is zero at xj =median). then the median can be defined as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([ 101, 1998, 1006, 1050, 1597, 1015, 1007,  100, 2065, 1050, 2003, 5976,
        1006, 2138, 1045, 1006, 1060, 3501, 1007, 2003, 5717, 2012, 1060, 3501,
        1027, 3991, 1007, 1012, 2059, 1996, 3991, 2064, 2022, 4225, 2004,  102])"
469,1,['median'], Median of Grouped Data,seg_107,n∕2 if n is even; median = maximum xj such that ∑ i(xj) = xj {,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([ 101,  100, 2065, 1050, 2003, 2130, 1025, 3991, 1027, 4555, 1060, 3501,
        2107, 2008,  100, 1045, 1006, 1060, 3501, 1007, 1027, 1060, 3501, 1063,
         102])"
470,1,"['median', 'quartiles']", Median of Grouped Data,seg_107,"as i(xj) is defined in terms of the median, we start with a guess value (say m0) and evaluate the lhs. if it is less than the rhs, it means that our guess value was short of the true median. we increment our guess value m0 by a small amount, and repeat the above procedure (checking i(xj) = 0 values and changing perhaps some of them to 1) until equality holds. if lhs sum is greater than the rhs value, we keep on decrementing our guess value m0 by a small amount (checking i(xj) = 1 values and changing perhaps some of them to 0) until equality holds. this is easy to parallelize, and can be extended to find quartiles (discussed below).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  2004,  1045,  1006,  1060,  3501,  1007,  2003,  4225,  1999,
         3408,  1997,  1996,  3991,  1010,  2057,  2707,  2007,  1037,  3984,
         3643,  1006,  2360,  1049,  2692,  1007,  1998, 16157,  1996,  1048,
         7898,  1012,  2065,  2009,  2003,  2625,  2084,  1996,  1054,  7898,
         1010,  2009,  2965,  2008,  2256,  3984,  3643,  2001,  2460,  1997,
         1996,  2995,  3991,  1012,  2057,  4297, 28578,  4765,  2256,  3984,
         3643,  1049,  2692,  2011,  1037,  2235,  3815,  1010,  1998,  9377,
         1996,  2682,  7709,  1006,  9361,  1045,  1006,  1060,  3501,  1007,
         1027,  1014,  5300,  1998,  5278,  3383,  2070,  1997,  2068,  2000,
         1015,  1007,  2127,  9945,  4324,  1012,  2065,  1048,  7898,  7680,
         2003,  3618,  2084,  1996,  1054,  7898,  3643,  1010,  2057,  2562,
         2006, 11703, 28578, 26951,  2256,  3984,  3643,  1049,  2692,  2011,
         1037,  2235,  3815,  1006,  9361,  1045,  1006,  1060,  3501,  1007,
         1027,  1015,  5300,  1998,  5278,  3383,  2070,  1997,  2068,  2000,
         1014,  1007,  2127,  9945,  4324,  1012,  2023,  2003,  3733,  2000,
         5903,  4697,  1010,  1998,  2064,  2022,  3668,  2000,  2424, 24209,
         8445,  9463,  2015,  1006,  6936,  2917,  1007,  1012,   102])"
471,1,"['mean', 'skewed data', 'ogive', 'skewed', 'observations', 'sample median', 'sample', 'data', 'median']", Median of Grouped Data,seg_107,2.4.1.1 advantages of median the sample median is least influenced by extreme observations (for n 2). it can be approximated graphically using ogive curves. median is better than the mean for skewed data. the median can be found even for open-ended data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  1016,  1012,  1018,  1012,  1015,  1012,  1015, 12637,  1997,
         3991,  1996,  7099,  3991,  2003,  2560,  5105,  2011,  6034,  9420,
         1006,  2005,  1050,  1016,  1007,  1012,  2009,  2064,  2022, 15796,
         2094, 20477,  2135,  2478, 13958,  3512, 10543,  1012,  3991,  2003,
         2488,  2084,  1996,  2812,  2005, 15315,  7974,  2098,  2951,  1012,
         1996,  3991,  2064,  2022,  2179,  2130,  2005,  2330,  1011,  3092,
         2951,  1012,   102])"
472,1,"['mean', 'sample median', 'sample', 'sample size', 'samples', 'data', 'median']", Median of Grouped Data,seg_107,"finding the median of a sample of size n ≥ 4 is computationally more involved than finding the mean. if the data are unsorted, we may require multiple passes through the data to locate the median. the nature of the sample size n (whether it is odd or even) should be known to compute the sample median, whereas this is immaterial to compute the mean and mode. the theorem 2.1 (p. 48) allows us to use a divide and conquer strategy to find the mean of large samples by finding the mean of subsamples, but such a strategy will not in general work for finding the median.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  4531,  1996,  3991,  1997,  1037,  7099,  1997,  2946,  1050,
         1609,  1018,  2003, 15078,  2135,  2062,  2920,  2084,  4531,  1996,
         2812,  1012,  2065,  1996,  2951,  2024,  4895, 21748,  3064,  1010,
         2057,  2089,  5478,  3674,  5235,  2083,  1996,  2951,  2000, 12453,
         1996,  3991,  1012,  1996,  3267,  1997,  1996,  7099,  2946,  1050,
         1006,  3251,  2009,  2003,  5976,  2030,  2130,  1007,  2323,  2022,
         2124,  2000, 24134,  1996,  7099,  3991,  1010,  6168,  2023,  2003,
        10047,  8585, 14482,  2000, 24134,  1996,  2812,  1998,  5549,  1012,
         1996,  9872,  1016,  1012,  1015,  1006,  1052,  1012,  4466,  1007,
         4473,  2149,  2000,  2224,  1037, 11443,  1998, 16152,  5656,  2000,
         2424,  1996,  2812,  1997,  2312,  8168,  2011,  4531,  1996,  2812,
         1997,  4942, 21559, 21112,  1010,  2021,  2107,  1037,  5656,  2097,
         2025,  1999,  2236,  2147,  2005,  4531,  1996,  3991,  1012,   102])"
473,1,"['mean', 'distance metric', 'sample', 'medoid', 'algorithm', 'data', 'median', 'case']", Median of Grouped Data,seg_107,sample median is used as smoothing filters in digital image processing. it is also used in data clustering algorithms (k-median algorithm). the data item nearest to the mean (if mean does not coincide with a sample item) is called the medoid. this nearness can be quantified using a distance metric. the medoid is not unique in the univariate case if it is equally distant from the nearest data points on both the sides of it.,tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  7099,  3991,  2003,  2109,  2004, 27045, 17736,  1999,  3617,
         3746,  6364,  1012,  2009,  2003,  2036,  2109,  1999,  2951,  9324,
         2075, 13792,  1006,  1047,  1011,  3991,  9896,  1007,  1012,  1996,
         2951,  8875,  7205,  2000,  1996,  2812,  1006,  2065,  2812,  2515,
         2025, 19680,  2007,  1037,  7099,  8875,  1007,  2003,  2170,  1996,
        19960,  9314,  1012,  2023,  2379,  2791,  2064,  2022, 24110,  3775,
        10451,  2478,  1037,  3292, 12046,  1012,  1996, 19960,  9314,  2003,
         2025,  4310,  1999,  1996,  4895, 28739, 13143,  2553,  2065,  2009,
         2003,  8053,  6802,  2013,  1996,  7205,  2951,  2685,  2006,  2119,
         1996,  3903,  1997,  2009,  1012,   102])"
474,1,"['location', 'case', 'distance metric', 'medoid', 'correlation', 'algorithm', 'data', 'location measures']", Median of Grouped Data,seg_107,"this is more of a problem in the multivariate case, in the presence of correlation, for which mahalanobis distance metric is the most appropriate choice. medoid is used in k-medoid algorithm of data clustering. location measures are summarized in figure 2.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3991,  1997, 15131,  2951])","tensor([  101,  2023,  2003,  2062,  1997,  1037,  3291,  1999,  1996,  4800,
        10755, 13143,  2553,  1010,  1999,  1996,  3739,  1997, 16902,  1010,
         2005,  2029, 27913,  6761, 18477,  3292, 12046,  2003,  1996,  2087,
         6413,  3601,  1012, 19960,  9314,  2003,  2109,  1999,  1047,  1011,
        19960,  9314,  9896,  1997,  2951,  9324,  2075,  1012,  3295,  5761,
         2024, 22539,  1999,  3275,  1016,  1012,  1015,  1012,   102])"
475,1,"['percentiles', 'third quartile', 'frequency', 'percentile', 'sample', 'quartiles', 'first quartile', 'quartile', 'median']", QUARTILES AND PERCENTILES,seg_109,"quantiles is a common name for quartiles (which divide the total frequency into four equal parts), deciles (which divide the total frequency into 10 equal parts), and percentiles (see figure 2.2). they can be considered as generalizations of the median. as the quartiles divide the total frequency into four equal parts, there are three of them. the first quartile is denoted by q1. it is that value of x below which one-fourth of the frequency lie. the second quartile is the same as the median (q2 =median). the third quartile q3 is that value of x below which three-fourth of the frequency lie (or above which one-fourth of the frequency lie). deciles divide the total frequency into one-tenth parts. percentiles are those values of x that divide the total frequency into units of (1/100). thus, 25th percentile= first quartile. the five parameters [x(1),q1,q2 = m,q3, x(n)] is called the five-number summary of a sample, where x(1) and x(n) are the minimum and maximum of the sample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([24209,  8445,  9463,  2015,  1998,  3867,  9463,  2015])","tensor([  101, 24110, 15286,  2015,  2003,  1037,  2691,  2171,  2005, 24209,
         8445,  9463,  2015,  1006,  2029, 11443,  1996,  2561,  6075,  2046,
         2176,  5020,  3033,  1007,  1010, 11703,  9463,  2015,  1006,  2029,
        11443,  1996,  2561,  6075,  2046,  2184,  5020,  3033,  1007,  1010,
         1998,  3867,  9463,  2015,  1006,  2156,  3275,  1016,  1012,  1016,
         1007,  1012,  2027,  2064,  2022,  2641,  2004,  2236, 22318,  1997,
         1996,  3991,  1012,  2004,  1996, 24209,  8445,  9463,  2015, 11443,
         1996,  2561,  6075,  2046,  2176,  5020,  3033,  1010,  2045,  2024,
         2093,  1997,  2068,  1012,  1996,  2034, 24209,  8445,  9463,  2003,
        19537,  2011,  1053,  2487,  1012,  2009,  2003,  2008,  3643,  1997,
         1060,  2917,  2029,  2028,  1011,  2959,  1997,  1996,  6075,  4682,
         1012,  1996,  2117, 24209,  8445,  9463,  2003,  1996,  2168,  2004,
         1996,  3991,  1006,  1053,  2475,  1027,  3991,  1007,  1012,  1996,
         2353, 24209,  8445,  9463,  1053,  2509,  2003,  2008,  3643,  1997,
         1060,  2917,  2029,  2093,  1011,  2959,  1997,  1996,  6075,  4682,
         1006,  2030,  2682,  2029,  2028,  1011,  2959,  1997,  1996,  6075,
         4682,  1007,  1012, 11703,  9463,  2015, 11443,  1996,  2561,  6075,
         2046,  2028,  1011,  7891,  3033,  1012,  3867,  9463,  2015,  2024,
         2216,  5300,  1997,  1060,  2008, 11443,  1996,  2561,  6075,  2046,
         3197,  1997,  1006,  1015,  1013,  2531,  1007,  1012,  2947,  1010,
        10965,  3867,  9463,  1027,  2034, 24209,  8445,  9463,  1012,  1996,
         2274, 11709,  1031,  1060,  1006,  1015,  1007,  1010,  1053,  2487,
         1010,  1053,  2475,  1027,  1049,  1010,  1053,  2509,  1010,  1060,
         1006,  1050,  1007,  1033,  2003,  2170,  1996,  2274,  1011,  2193,
        12654,  1997,  1037,  7099,  1010,  2073,  1060,  1006,  1015,  1007,
         1998,  1060,  1006,  1050,  1007,  2024,  1996,  6263,  1998,  4555,
         1997,  1996,  7099,  1012,   102])"
476,1,"['percentiles', 'class interval', 'interval', 'frequency', 'quartiles', 'limit', 'cumulative frequency', 'grouped data', 'data']", QUARTILES AND PERCENTILES,seg_109,"the quartiles of grouped data are found using qk = l + c ∗ (kn∕4 − m)∕f where k = 1 for q1, and k = 3 for q3. here, l is the lower limit of the respective class, c is the fixed class interval, n is the total frequency, m is the cumulative frequency up to the respective class, and f is the frequency in the respective class. this formula can be generalized to find the percentiles as pk = l + c ∗ (kn∕100 − m)∕f ,",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([24209,  8445,  9463,  2015,  1998,  3867,  9463,  2015])","tensor([  101,  1996, 24209,  8445,  9463,  2015,  1997, 15131,  2951,  2024,
         2179,  2478,  1053,  2243,  1027,  1048,  1009,  1039,  1598,  1006,
          100,  1597,  1049,  1007,   100,  2073,  1047,  1027,  1015,  2005,
         1053,  2487,  1010,  1998,  1047,  1027,  1017,  2005,  1053,  2509,
         1012,  2182,  1010,  1048,  2003,  1996,  2896,  5787,  1997,  1996,
         7972,  2465,  1010,  1039,  2003,  1996,  4964,  2465, 13483,  1010,
         1050,  2003,  1996,  2561,  6075,  1010,  1049,  2003,  1996, 23260,
         6075,  2039,  2000,  1996,  7972,  2465,  1010,  1998,  1042,  2003,
         1996,  6075,  1999,  1996,  7972,  2465,  1012,  2023,  5675,  2064,
         2022, 18960,  2000,  2424,  1996,  3867,  9463,  2015,  2004,  1052,
         2243,  1027,  1048,  1009,  1039,  1598,  1006,   100,  1597,  1049,
         1007,   100,  1010,   102])"
477,1,"['quantile', 'function', 'probabilities', 'distributions', 'discrete distributions', 'inequality', 'discrete']", QUARTILES AND PERCENTILES,seg_109,"where k ∈ {1, 2, 3, .. , 99}. a quantile function q(u) is analogously defined as q(u) = inf {x ∶ f(x) ≥ u}, where u ∈ (0, 1). they can easily be found for continuous distributions (find x ∶ x = f−1(u)). the inequality may not strictly hold for discrete distributions due to uneven split of probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0.])","tensor([24209,  8445,  9463,  2015,  1998,  3867,  9463,  2015])","tensor([  101,  2073,  1047,  1596,  1063,  1015,  1010,  1016,  1010,  1017,
         1010,  1012,  1012,  1010,  5585,  1065,  1012,  1037, 24110, 15286,
         3853,  1053,  1006,  1057,  1007,  2003, 19639,  2135,  4225,  2004,
         1053,  1006,  1057,  1007,  1027,  1999,  2546,  1063,  1060,   100,
         1042,  1006,  1060,  1007,  1609,  1057,  1065,  1010,  2073,  1057,
         1596,  1006,  1014,  1010,  1015,  1007,  1012,  2027,  2064,  4089,
         2022,  2179,  2005,  7142, 20611,  1006,  2424,  1060,   100,  1060,
         1027,  1042, 27944,  1006,  1057,  1007,  1007,  1012,  1996, 16440,
         2089,  2025,  9975,  2907,  2005, 16246, 20611,  2349,  2000, 17837,
         3975,  1997,  4013,  3676, 14680,  1012,   102])"
478,1,"['sample', 'outliers', 'quantiles', 'data', 'median']", QUARTILES AND PERCENTILES,seg_109,"trimmed quantiles are obtained by trimming data values from either or both the ends of a sample. they are useful when outliers are present. when an equal number of data values are discarded from both extremes, the median will remain the same, but other quantiles will move uniformly toward the median.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([24209,  8445,  9463,  2015,  1998,  3867,  9463,  2015])","tensor([  101, 21920, 24110, 15286,  2015,  2024,  4663,  2011, 12241,  6562,
         2951,  5300,  2013,  2593,  2030,  2119,  1996,  4515,  1997,  1037,
         7099,  1012,  2027,  2024,  6179,  2043,  2041, 14355,  2015,  2024,
         2556,  1012,  2043,  2019,  5020,  2193,  1997,  2951,  5300,  2024,
        15105,  2013,  2119, 28800,  1010,  1996,  3991,  2097,  3961,  1996,
         2168,  1010,  2021,  2060, 24110, 15286,  2015,  2097,  2693, 27423,
         2646,  1996,  3991,  1012,   102])"
479,1,"['observations', 'sample', 'population', 'grouped data', 'data']", MODE,seg_111,"mode of a sample is that data item which occurs most frequently. the corresponding value is called modal value. if each data item is unique, any of the observations can be taken as the mode. hence, it is most appropriate when some sample values are repeated. a population with two or more modes is called multi-modal. the mode of grouped data can be found using a two-step procedure:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5549]),"tensor([  101,  5549,  1997,  1037,  7099,  2003,  2008,  2951,  8875,  2029,
         5158,  2087,  4703,  1012,  1996,  7978,  3643,  2003,  2170, 16913,
         2389,  3643,  1012,  2065,  2169,  2951,  8875,  2003,  4310,  1010,
         2151,  1997,  1996,  9420,  2064,  2022,  2579,  2004,  1996,  5549,
         1012,  6516,  1010,  2009,  2003,  2087,  6413,  2043,  2070,  7099,
         5300,  2024,  5567,  1012,  1037,  2313,  2007,  2048,  2030,  2062,
        11583,  2003,  2170,  4800,  1011, 16913,  2389,  1012,  1996,  5549,
         1997, 15131,  2951,  2064,  2022,  2179,  2478,  1037,  2048,  1011,
         3357,  7709,  1024,   102])"
480,0,[], MODE,seg_111,1. find the class to which the mode belongs.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([5549]),"tensor([ 101, 1015, 1012, 2424, 1996, 2465, 2000, 2029, 1996, 5549, 7460, 1012,
         102])"
481,1,"['mean', 'frequency', 'variables', 'sample', 'bivariate', 'limit', 'samples', 'conditional']", MODE,seg_111,"the lower limit of modal class, l is the difference in frequency between modal class and the class below it, and u is the difference in frequency between the next class above it and the modal class. for bivariate and higher samples, we could define conditional mode by fixing (conditioning) some of the variables. however, the existence of unique conditional modes does not necessarily mean that the mode for the entire sample is unique. as an example, in a class of students, there could exist multiple values for height or weight but it is rare to have two or more students with the same height and weight unless the sample is too large.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])",tensor([5549]),"tensor([  101,  1996,  2896,  5787,  1997, 16913,  2389,  2465,  1010,  1048,
         2003,  1996,  4489,  1999,  6075,  2090, 16913,  2389,  2465,  1998,
         1996,  2465,  2917,  2009,  1010,  1998,  1057,  2003,  1996,  4489,
         1999,  6075,  2090,  1996,  2279,  2465,  2682,  2009,  1998,  1996,
        16913,  2389,  2465,  1012,  2005, 12170, 10755, 13143,  1998,  3020,
         8168,  1010,  2057,  2071,  9375, 18462,  5549,  2011, 15887,  1006,
        14372,  1007,  2070,  1997,  1996, 10857,  1012,  2174,  1010,  1996,
         4598,  1997,  4310, 18462, 11583,  2515,  2025,  9352,  2812,  2008,
         1996,  5549,  2005,  1996,  2972,  7099,  2003,  4310,  1012,  2004,
         2019,  2742,  1010,  1999,  1037,  2465,  1997,  2493,  1010,  2045,
         2071,  4839,  3674,  5300,  2005,  4578,  2030,  3635,  2021,  2009,
         2003,  4678,  2000,  2031,  2048,  2030,  2062,  2493,  2007,  1996,
         2168,  4578,  1998,  3635,  4983,  1996,  7099,  2003,  2205,  2312,
         1012,   102])"
482,1,"['symmetric', 'median', 'mean', 'observation', 'frequency', 'data', 'case', 'skewed', 'skewed distributions', 'missing value', 'distributions', 'sample', 'sample size', 'outliers']", Advantages of Mode,seg_113,"as the mode is located along the maximum frequency, it is easy to find irrespective of whether the data are symmetric or skewed. mode can be found even when the data are open ended. some other advantages are summarized below: (1) mode can be approximated graphically, which is useful for skewed distributions and in multivariate case. (2) mode is not influenced by outliers. (3) the modal value coincides with a sample observation (whereas the median for even sample size and mean need not coincide with sample values). (4) mode is the most appropriate measure for categorical data. the biggest disadvantage of mode is that it need not be unique. it can coincide with the minimum or maximum of the sample (which is not possible for mean for n ≥ 2, although it could happen for median). when large number of data items are missing or have default values, the mode can wrongly get located at the missing value. mode utilizes only the value of most frequently occurring observation",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([12637,  1997,  5549])","tensor([  101,  2004,  1996,  5549,  2003,  2284,  2247,  1996,  4555,  6075,
         1010,  2009,  2003,  3733,  2000,  2424, 20868,  6072,  5051, 15277,
         1997,  3251,  1996,  2951,  2024, 19490,  2030, 15315,  7974,  2098,
         1012,  5549,  2064,  2022,  2179,  2130,  2043,  1996,  2951,  2024,
         2330,  3092,  1012,  2070,  2060, 12637,  2024, 22539,  2917,  1024,
         1006,  1015,  1007,  5549,  2064,  2022, 15796,  2094, 20477,  2135,
         1010,  2029,  2003,  6179,  2005, 15315,  7974,  2098, 20611,  1998,
         1999,  4800, 10755, 13143,  2553,  1012,  1006,  1016,  1007,  5549,
         2003,  2025,  5105,  2011,  2041, 14355,  2015,  1012,  1006,  1017,
         1007,  1996, 16913,  2389,  3643, 19680,  2015,  2007,  1037,  7099,
         8089,  1006,  6168,  1996,  3991,  2005,  2130,  7099,  2946,  1998,
         2812,  2342,  2025, 19680,  2007,  7099,  5300,  1007,  1012,  1006,
         1018,  1007,  5549,  2003,  1996,  2087,  6413,  5468,  2005,  4937,
        27203,  2951,  1012,  1996,  5221, 20502,  1997,  5549,  2003,  2008,
         2009,  2342,  2025,  2022,  4310,  1012,  2009,  2064, 19680,  2007,
         1996,  6263,  2030,  4555,  1997,  1996,  7099,  1006,  2029,  2003,
         2025,  2825,  2005,  2812,  2005,  1050,  1609,  1016,  1010,  2348,
         2009,  2071,  4148,  2005,  3991,  1007,  1012,  2043,  2312,  2193,
         1997,  2951,  5167,  2024,  4394,  2030,  2031, 12398,  5300,  1010,
         1996,  5549,  2064, 29116,  2131,  2284,  2012,  1996,  4394,  3643,
         1012,  5549, 21852,  2069,  1996,  3643,  1997,  2087,  4703, 10066,
         8089,   102])"
483,1,"['mean', 'contrast', 'frequency', 'sample']", Advantages of Mode,seg_113,(max frequency counts) in contrast to the mean that utilizes actual values of every item in a sample.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([12637,  1997,  5549])","tensor([  101,  1006,  4098,  6075,  9294,  1007,  1999,  5688,  2000,  1996,
         2812,  2008, 21852,  5025,  5300,  1997,  2296,  8875,  1999,  1037,
         7099,  1012,   102])"
484,1,"['mean', 'distributions', 'samples', 'inequality', 'median']", Advantages of Mode,seg_113,"an approximate relation exists for samples from bell-shaped distributions as (mean–mode) ≃ 3(mean–median). for right–skewed distributions (mean ≤ median ≤ mode). this is called the mean–median–mode inequality [18, 19].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12637,  1997,  5549])","tensor([  101,  2019, 15796,  7189,  6526,  2005,  8168,  2013,  4330,  1011,
         5044, 20611,  2004,  1006,  2812,  1516,  5549,  1007,   100,  1017,
         1006,  2812,  1516,  3991,  1007,  1012,  2005,  2157,  1516, 15315,
         7974,  2098, 20611,  1006,  2812,  1608,  3991,  1608,  5549,  1007,
         1012,  2023,  2003,  2170,  1996,  2812,  1516,  3991,  1516,  5549,
        16440,  1031,  2324,  1010,  2539,  1033,  1012,   102])"
485,1,"['geometric', 'mean', 'geometric mean']", GEOMETRIC MEAN,seg_115,the geometric mean (gm) of n nonzero numbers is defined as,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  2812])","tensor([  101,  1996, 14965,  2812,  1006, 13938,  1007,  1997,  1050,  2512,
         6290,  2080,  3616,  2003,  4225,  2004,   102])"
486,1,['observations'], GEOMETRIC MEAN,seg_115,"where ∏ denotes the product of the observations. we will denote gm by x̂n to distinguish it from xn. if none of the observations are zeros, we could take the logarithm of both sides of equation (2.18) to get log(gm) = (1∕n)∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  2812])","tensor([  101,  2073,   100, 14796,  1996,  4031,  1997,  1996,  9420,  1012,
         2057,  2097, 19090, 13938,  2011,  1060,  2078,  2000, 10782,  2009,
         2013,  1060,  2078,  1012,  2065,  3904,  1997,  1996,  9420,  2024,
         5717,  2015,  1010,  2057,  2071,  2202,  1996,  8833,  8486,  2705,
         2213,  1997,  2119,  3903,  1997,  8522,  1006,  1016,  1012,  2324,
         1007,  2000,  2131,  8833,  1006, 13938,  1007,  1027,  1006,   100,
         1007,   100,   102])"
487,1,"['mean', 'arithmetic mean', 'observation']", GEOMETRIC MEAN,seg_115,"n =1 log (xi). this shows that log(gm) is the arithmetic mean in the “log-space.” because the logarithm is defined only for positive argument, this summary measure is meaningful only when all observations are positive (if at least one observation is 0, the product will itself be zero. the usual practice in such situations is to omit all zeros, and find the gm of the remaining values).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([14965,  2812])","tensor([  101,  1050,  1027,  1015,  8833,  1006,  8418,  1007,  1012,  2023,
         3065,  2008,  8833,  1006, 13938,  1007,  2003,  1996, 20204,  2812,
         1999,  1996,  1523,  8833,  1011,  2686,  1012,  1524,  2138,  1996,
         8833,  8486,  2705,  2213,  2003,  4225,  2069,  2005,  3893,  6685,
         1010,  2023, 12654,  5468,  2003, 15902,  2069,  2043,  2035,  9420,
         2024,  3893,  1006,  2065,  2012,  2560,  2028,  8089,  2003,  1014,
         1010,  1996,  4031,  2097,  2993,  2022,  5717,  1012,  1996,  5156,
         3218,  1999,  2107,  8146,  2003,  2000, 18168,  4183,  2035,  5717,
         2015,  1010,  1998,  2424,  1996, 13938,  1997,  1996,  3588,  5300,
         1007,  1012,   102])"
488,1,"['compound', 'observations', 'graphics', 'sample', 'population', 'rates']", GEOMETRIC MEAN,seg_115,"the gm coincides with the sample observations when all observations are equal. hence, it is most appropriate when the products of several positive numbers combine together to produce a resulting quantity as in rates of changes, exchange rates, inflation rates, compound interests, population growth, and so on. other examples are successive discounts; price or stock market increases and decreases; successive size changes (enlargements or contractions) of images, graphics; successive volume changes; and so on. it is used in image enhancement applications to smooth low contrast images by taking the gm of the surrounding pixels.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  2812])","tensor([  101,  1996, 13938, 19680,  2015,  2007,  1996,  7099,  9420,  2043,
         2035,  9420,  2024,  5020,  1012,  6516,  1010,  2009,  2003,  2087,
         6413,  2043,  1996,  3688,  1997,  2195,  3893,  3616, 11506,  2362,
         2000,  3965,  1037,  4525, 11712,  2004,  1999,  6165,  1997,  3431,
         1010,  3863,  6165,  1010, 14200,  6165,  1010,  7328,  5426,  1010,
         2313,  3930,  1010,  1998,  2061,  2006,  1012,  2060,  4973,  2024,
        11165, 19575,  2015,  1025,  3976,  2030,  4518,  3006,  7457,  1998,
        17913,  1025, 11165,  2946,  3431,  1006,  4372,  8017, 20511,  2015,
         2030, 21963,  2015,  1007,  1997,  4871,  1010,  8389,  1025, 11165,
         3872,  3431,  1025,  1998,  2061,  2006,  1012,  2009,  2003,  2109,
         1999,  3746, 22415,  5097,  2000,  5744,  2659,  5688,  4871,  2011,
         2635,  1996, 13938,  1997,  1996,  4193, 27725,  1012,   102])"
489,1,"['change of origin', 'mean', 'change of scale', 'observations', 'geometric mean', 'geometric', 'rates', 'significance', 'arithmetic mean', 'data', 'transformation']", GEOMETRIC MEAN,seg_115,"some of the rates of changes can be positive or negative. is the geometric mean defined for negative numbers? theoretically no!, because the nth root of a negative number is imaginary. however, if there is an even number of negatives, the product of them will be a positive number. as an example, if x = {− 3,−2, 2, 3}, the product of data values is +36. hence, it looks like we could define the gm when negative numbers occur in pairs. however, this is not true, because it loses the significance as a measure of central tendency, which may wrongly get located toward the positive values). this implies that even in rates of changes involving negative numbers, we should opt for the arithmetic mean. as gm inherently involves the product of individual observations, the change of origin technique is not useful. however, the change of scale transformation y = c ∗ x provides the relationship ŷn = c ∗ x̂n. the gm for",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([14965,  2812])","tensor([  101,  2070,  1997,  1996,  6165,  1997,  3431,  2064,  2022,  3893,
         2030,  4997,  1012,  2003,  1996, 14965,  2812,  4225,  2005,  4997,
         3616,  1029, 22634,  2053,   999,  1010,  2138,  1996, 23961,  2232,
         7117,  1997,  1037,  4997,  2193,  2003, 15344,  1012,  2174,  1010,
         2065,  2045,  2003,  2019,  2130,  2193,  1997,  4997,  2015,  1010,
         1996,  4031,  1997,  2068,  2097,  2022,  1037,  3893,  2193,  1012,
         2004,  2019,  2742,  1010,  2065,  1060,  1027,  1063,  1597,  1017,
         1010,  1597,  2475,  1010,  1016,  1010,  1017,  1065,  1010,  1996,
         4031,  1997,  2951,  5300,  2003,  1009,  4029,  1012,  6516,  1010,
         2009,  3504,  2066,  2057,  2071,  9375,  1996, 13938,  2043,  4997,
         3616,  5258,  1999,  7689,  1012,  2174,  1010,  2023,  2003,  2025,
         2995,  1010,  2138,  2009, 12386,  1996,  7784,  2004,  1037,  5468,
         1997,  2430, 11765,  1010,  2029,  2089, 29116,  2131,  2284,  2646,
         1996,  3893,  5300,  1007,  1012,  2023, 12748,  2008,  2130,  1999,
         6165,  1997,  3431,  5994,  4997,  3616,  1010,  2057,  2323, 23569,
         2005,  1996, 20204,  2812,  1012,  2004, 13938, 26096,  7336,  1996,
         4031,  1997,  3265,  9420,  1010,  1996,  2689,  1997,  4761,  6028,
         2003,  2025,  6179,  1012,  2174,  1010,  1996,  2689,  1997,  4094,
         8651,  1061,  1027,  1039,  1598,  1060,  3640,  1996,  3276,  1061,
         2078,  1027,  1039,  1598,  1060,  2078,  1012,  1996, 13938,  2005,
          102])"
490,1,['data'], GEOMETRIC MEAN,seg_115,grouped data is given by (,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0.])","tensor([14965,  2812])","tensor([  101, 15131,  2951,  2003,  2445,  2011,  1006,   102])"
491,1,"['frequency', 'outliers', 'data']", GEOMETRIC MEAN,seg_115,n =1 fj is the total frequency. trimmed gm is meaningful when outliers or zero values are present. a left-trimmed gm is appropriate when data contain several zeros.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([14965,  2812])","tensor([  101,  1050,  1027,  1015,  1042,  3501,  2003,  1996,  2561,  6075,
         1012, 21920, 13938,  2003, 15902,  2043,  2041, 14355,  2015,  2030,
         5717,  5300,  2024,  2556,  1012,  1037,  2187,  1011, 21920, 13938,
         2003,  6413,  2043,  2951,  5383,  2195,  5717,  2015,  1012,   102])"
492,1,"['sample', 'data', 'case']", Updating Formula For Geometric Mean,seg_117,"as in the case of am, there are situations in which we need to update an already found gm using newly arrived data values. when all sample values are non-negative, an updating formula for gm can easily be derived as",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  2004,  1999,  1996,  2553,  1997,  2572,  1010,  2045,  2024,
         8146,  1999,  2029,  2057,  2342,  2000, 10651,  2019,  2525,  2179,
        13938,  2478,  4397,  3369,  2951,  5300,  1012,  2043,  2035,  7099,
         5300,  2024,  2512,  1011,  4997,  1010,  2019,  2039, 16616,  5675,
         2005, 13938,  2064,  4089,  2022,  5173,  2004,   102])"
493,1,['factor'], Updating Formula For Geometric Mean,seg_117,"where the logarithm is to any base. by taking 1∕n as a common factor, and denoting log of gm by ẑ this could also be written as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  2073,  1996,  8833,  8486,  2705,  2213,  2003,  2000,  2151,
         2918,  1012,  2011,  2635,   100,  2004,  1037,  2691,  5387,  1010,
         1998,  7939, 20656,  8833,  1997, 13938,  2011,  1062,  2023,  2071,
         2036,  2022,  2517,  2004,   102])"
494,0,[], Updating Formula For Geometric Mean,seg_117,"the successive values can be evaluated iteratively by starting with log(x̂1) = log(x1), log(x̂2) = 1",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  1996, 11165,  5300,  2064,  2022, 16330,  2009, 25284,  2135,
         2011,  3225,  2007,  8833,  1006,  1060,  2487,  1007,  1027,  8833,
         1006,  1060,  2487,  1007,  1010,  8833,  1006,  1060,  2475,  1007,
         1027,  1015,   102])"
495,1,"['recurrence', 'transformation', 'change of scale', 'observations', 'transformed', 'variables']", Updating Formula For Geometric Mean,seg_117,"2 log(x̂1) + 1 2 log(x2), log(x̂3) = 2 3 log(x̂2) + log(x3)∕3, and so on. the iterations are stopped when log(x̂n) is reached. by taking the anti-logarithm we get the required result. when the variables are transformed using the change of scale transformation y = c ∗ x, these iterations are carried out in yi and at the end, the gm of y is multiplied by c to get the gm of x, as shown below. alternatively, we could add a constant log(c) to the recurrence (2.19) to iteratively update log(x̂i). as the gm involves the product of nonzero observations, weighted gm is meaningless. however, there is one situation where weighting by exponentiation is useful. consider gm  = (x1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  1016,  8833,  1006,  1060,  2487,  1007,  1009,  1015,  1016,
         8833,  1006,  1060,  2475,  1007,  1010,  8833,  1006,  1060,  2509,
         1007,  1027,  1016,  1017,  8833,  1006,  1060,  2475,  1007,  1009,
         8833,  1006,  1060,  2509,  1007,   100,  1010,  1998,  2061,  2006,
         1012,  1996, 27758,  2015,  2024,  3030,  2043,  8833,  1006,  1060,
         2078,  1007,  2003,  2584,  1012,  2011,  2635,  1996,  3424,  1011,
         8833,  8486,  2705,  2213,  2057,  2131,  1996,  3223,  2765,  1012,
         2043,  1996, 10857,  2024,  8590,  2478,  1996,  2689,  1997,  4094,
         8651,  1061,  1027,  1039,  1598,  1060,  1010,  2122, 27758,  2015,
         2024,  3344,  2041,  1999, 12316,  1998,  2012,  1996,  2203,  1010,
         1996, 13938,  1997,  1061,  2003, 28608,  2011,  1039,  2000,  2131,
         1996, 13938,  1997,  1060,  1010,  2004,  3491,  2917,  1012, 14084,
         1010,  2057,  2071,  5587,  1037,  5377,  8833,  1006,  1039,  1007,
         2000,  1996, 28667,  3126, 24413,  1006,  1016,  1012,  2539,  1007,
         2000,  2009, 25284,  2135, 10651,  8833,  1006,  8418,  1007,  1012,
         2004,  1996, 13938,  7336,  1996,  4031,  1997,  2512,  6290,  2080,
         9420,  1010, 18215, 13938,  2003, 25120,  1012,  2174,  1010,  2045,
         2003,  2028,  3663,  2073,  3635,  2075,  2011, 16258, 21576, 18963,
         2003,  6179,  1012,  5136, 13938,  1027,  1006,  1060,  2487,   102])"
496,0,[], Updating Formula For Geometric Mean,seg_117,′s are scaled up if xj   1 and scaled down if 0   xj   1 (as the powers of a fraction are less than the fraction itself). in,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  1531,  1055,  2024, 18953,  2039,  2065,  1060,  3501,  1015,
         1998, 18953,  2091,  2065,  1014,  1060,  3501,  1015,  1006,  2004,
         1996,  4204,  1997,  1037, 12884,  2024,  2625,  2084,  1996, 12884,
         2993,  1007,  1012,  1999,   102])"
497,1,['case'], Updating Formula For Geometric Mean,seg_117,"the particular case, when fj = −xj, we get gm  = (x1",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  1996,  3327,  2553,  1010,  2043,  1042,  3501,  1027,  1597,
         2595,  3501,  1010,  2057,  2131, 13938,  1027,  1006,  1060,  2487,
          102])"
498,1,"['transformed', 'data', 'change of scale']", Updating Formula For Geometric Mean,seg_117,"lemma 2 prove that the gm of change of scale transformed data (y-variable) is given by gm(y) = c * gm(x), where yi = cxi, and c is a constant (positive or negative).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  3393, 14760,  1016,  6011,  2008,  1996, 13938,  1997,  2689,
         1997,  4094,  8590,  2951,  1006,  1061,  1011,  8023,  1007,  2003,
         2445,  2011, 13938,  1006,  1061,  1007,  1027,  1039,  1008, 13938,
         1006,  1060,  1007,  1010,  2073, 12316,  1027,  1039,  9048,  1010,
         1998,  1039,  2003,  1037,  5377,  1006,  3893,  2030,  4997,  1007,
         1012,   102])"
499,1,"['geometric', 'mean', 'geometric mean']", Updating Formula For Geometric Mean,seg_117,example 2.8 geometric mean for shear strength,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  2742,  1016,  1012,  1022, 14965,  2812,  2005, 18330,  3997,
          102])"
500,1,"['geometric', 'mean', 'geometric mean']", Updating Formula For Geometric Mean,seg_117,"find the geometric mean for the shear strength x = (32, 80, 56, 75, 69, 26, 44, 50) using equation (2.19).",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  2424,  1996, 14965,  2812,  2005,  1996, 18330,  3997,  1060,
         1027,  1006,  3590,  1010,  3770,  1010,  5179,  1010,  4293,  1010,
         6353,  1010,  2656,  1010,  4008,  1010,  2753,  1007,  2478,  8522,
         1006,  1016,  1012,  2539,  1007,  1012,   102])"
501,1,['precision'], Updating Formula For Geometric Mean,seg_117,"solution 2.8 as the numbers are large, we will apply the above lemma to compute the gm (product of the original numbers is 42,435,993,600,000= 4.24e+13, which is too big for single precision) by dividing each number by 10 to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  5576,  1016,  1012,  1022,  2004,  1996,  3616,  2024,  2312,
         1010,  2057,  2097,  6611,  1996,  2682,  3393, 14760,  2000, 24134,
         1996, 13938,  1006,  4031,  1997,  1996,  2434,  3616,  2003,  4413,
         1010, 24125,  1010,  5585,  2509,  1010,  5174,  1010,  2199,  1027,
         1018,  1012,  2484,  2063,  1009,  2410,  1010,  2029,  2003,  2205,
         2502,  2005,  2309, 11718,  1007,  2011, 16023,  2169,  2193,  2011,
         2184,  2000,  2131,   102])"
502,1,"['data', 'table']", Updating Formula For Geometric Mean,seg_117,"x = {3.2, 8.0, 5.6, 7.5, 6.9, 2.6, 4.4, 5.0}. here, n = 8. the calculations are shown in table 2.3, where the last column contains the successive gm. the gm of scaled data is 5.05204019. hence using lemma 3, the gm of original data is 5.05204019*10 = 50.5204019. as ln(4.24359936e+13)/8= 3.92237725 and exp(3.92237725) = 50.5204019, we get the same result directly.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 14965,  2812])","tensor([  101,  1060,  1027,  1063,  1017,  1012,  1016,  1010,  1022,  1012,
         1014,  1010,  1019,  1012,  1020,  1010,  1021,  1012,  1019,  1010,
         1020,  1012,  1023,  1010,  1016,  1012,  1020,  1010,  1018,  1012,
         1018,  1010,  1019,  1012,  1014,  1065,  1012,  2182,  1010,  1050,
         1027,  1022,  1012,  1996, 16268,  2024,  3491,  1999,  2795,  1016,
         1012,  1017,  1010,  2073,  1996,  2197,  5930,  3397,  1996, 11165,
        13938,  1012,  1996, 13938,  1997, 18953,  2951,  2003,  1019,  1012,
         5709, 11387, 12740, 16147,  1012,  6516,  2478,  3393, 14760,  1017,
         1010,  1996, 13938,  1997,  2434,  2951,  2003,  1019,  1012,  5709,
        11387, 12740, 16147,  1008,  2184,  1027,  2753,  1012, 19611, 12740,
        16147,  1012,  2004,  1048,  2078,  1006,  1018,  1012, 22884, 28154,
         2683, 21619,  2063,  1009,  2410,  1007,  1013,  1022,  1027,  1017,
         1012,  6227, 21926,  2581,  2581, 17788,  1998,  4654,  2361,  1006,
         1017,  1012,  6227, 21926,  2581,  2581, 17788,  1007,  1027,  2753,
         1012, 19611, 12740, 16147,  1010,  2057,  2131,  1996,  2168,  2765,
         3495,  1012,   102])"
503,1,"['mean', 'observations', 'arithmetic mean', 'data']", HARMONIC MEAN,seg_119,"if all the observations are nonzero, the reciprocal of the arithmetic mean of the reciprocals of observations is known as hm. for ungrouped data, it is defined as hm = n∕∑i",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([19452,  2812])","tensor([  101,  2065,  2035,  1996,  9420,  2024,  2512,  6290,  2080,  1010,
         1996, 28309,  1997,  1996, 20204,  2812,  1997,  1996, 28309,  2015,
         1997,  9420,  2003,  2124,  2004, 20287,  1012,  2005,  4895, 17058,
         2098,  2951,  1010,  2009,  2003,  4225,  2004, 20287,  1027,   100,
          102])"
504,1,"['mean', 'grouped data', 'data', 'case']", HARMONIC MEAN,seg_119,n =1(1∕xi). the hm is used when (nonzero) numbers combine via reciprocals as in the case of finding the mean speed of vehicles that go the same distance (not for the same duration). the hm for grouped data is given by f∕∑i,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0.])","tensor([19452,  2812])","tensor([  101,  1050,  1027,  1015,  1006,   100,  1007,  1012,  1996, 20287,
         2003,  2109,  2043,  1006,  2512,  6290,  2080,  1007,  3616, 11506,
         3081, 28309,  2015,  2004,  1999,  1996,  2553,  1997,  4531,  1996,
         2812,  3177,  1997,  4683,  2008,  2175,  1996,  2168,  3292,  1006,
         2025,  2005,  1996,  2168,  9367,  1007,  1012,  1996, 20287,  2005,
        15131,  2951,  2003,  2445,  2011,   100,   102])"
505,1,"['precision', 'set', 'sample', 'inequality', 'algorithm']", HARMONIC MEAN,seg_119,"n =1 fj. we will denote it by xn to distinguish it from x and xn. a simple inequality exists n between the three popular means as: (am ≥ gm ≥ hm). when each of the sample values are weighted using the same set of weights, this identity is preserved [20]. hm finds applications in clustering (k-hms algorithm). the f-score used in text mining is the hm of precision and recall [2].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([19452,  2812])","tensor([  101,  1050,  1027,  1015,  1042,  3501,  1012,  2057,  2097, 19090,
         2009,  2011,  1060,  2078,  2000, 10782,  2009,  2013,  1060,  1998,
         1060,  2078,  1012,  1037,  3722, 16440,  6526,  1050,  2090,  1996,
         2093,  2759,  2965,  2004,  1024,  1006,  2572,  1609, 13938,  1609,
        20287,  1007,  1012,  2043,  2169,  1997,  1996,  7099,  5300,  2024,
        18215,  2478,  1996,  2168,  2275,  1997, 15871,  1010,  2023,  4767,
         2003,  6560,  1031,  2322,  1033,  1012, 20287,  4858,  5097,  1999,
         9324,  2075,  1006,  1047,  1011,  7220,  9896,  1007,  1012,  1996,
         1042,  1011,  3556,  2109,  1999,  3793,  5471,  2003,  1996, 20287,
         1997, 11718,  1998,  9131,  1031,  1016,  1033,  1012,   102])"
506,1,['sample'], Updating Formula For Harmonic Mean,seg_121,"if the sample values arrive successively, we may have to update the hm from an already found value. the updating formula for hm is easily derived as",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  2065,  1996,  7099,  5300,  7180, 24288,  1010,  2057,  2089,
         2031,  2000, 10651,  1996, 20287,  2013,  2019,  2525,  2179,  3643,
         1012,  1996,  2039, 16616,  5675,  2005, 20287,  2003,  4089,  5173,
         2004,   102])"
507,0,['n'], Updating Formula For Harmonic Mean,seg_121,"or in terms of the hm() notation as hm(xn) = n∕[(n − 1)∕hm(xn−1) + 1∕(xn)]. dividing numerator and denominator by n, and rearranging gives",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  2030,  1999,  3408,  1997,  1996, 20287,  1006,  1007, 14869,
         2004, 20287,  1006,  1060,  2078,  1007,  1027,   100,  1031,  1006,
         1050,  1597,  1015,  1007,   100,  1006,  1060,  2078, 27944,  1007,
         1009,   100,  1006,  1060,  2078,  1007,  1033,  1012, 16023, 16371,
         5017,  8844,  1998,  7939, 20936, 27413,  2011,  1050,  1010,  1998,
         4373, 24388,  2075,  3957,   102])"
508,1,"['mean', 'harmonic', 'harmonic mean']", Updating Formula For Harmonic Mean,seg_121,"where hm(xj) denotes the harmonic mean of x1, ...., xj, and hm(x1) = x1. denoting the reciprocal of the hm by rhm, we could rewrite it in the easy-to-remember form",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  2073, 20287,  1006,  1060,  3501,  1007, 14796,  1996, 19452,
         2812,  1997,  1060,  2487,  1010,  1012,  1012,  1012,  1012,  1010,
         1060,  3501,  1010,  1998, 20287,  1006,  1060,  2487,  1007,  1027,
         1060,  2487,  1012,  7939, 20656,  1996, 28309,  1997,  1996, 20287,
         2011,  1054, 14227,  1010,  2057,  2071,  2128, 26373,  2009,  1999,
         1996,  3733,  1011,  2000,  1011,  3342,  2433,   102])"
509,1,"['change of origin', 'change of scale', 'transformation', 'case']", Updating Formula For Harmonic Mean,seg_121,"as in the case of gm, the change of origin transformation is meaningless. the change of scale transformation y = c ∗ x for hm gives hm(y)= c*hm(x).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  2004,  1999,  1996,  2553,  1997, 13938,  1010,  1996,  2689,
         1997,  4761,  8651,  2003, 25120,  1012,  1996,  2689,  1997,  4094,
         8651,  1061,  1027,  1039,  1598,  1060,  2005, 20287,  3957, 20287,
         1006,  1061,  1007,  1027,  1039,  1008, 20287,  1006,  1060,  1007,
         1012,   102])"
510,1,"['transformed', 'data']", Updating Formula For Harmonic Mean,seg_121,"lemma 3 if yi = c ∗ xi, where c is a constant, prove that the hm of transformed data (y-variable) is given by hm(y) = c * hm(x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  3393, 14760,  1017,  2065, 12316,  1027,  1039,  1598,  8418,
         1010,  2073,  1039,  2003,  1037,  5377,  1010,  6011,  2008,  1996,
        20287,  1997,  8590,  2951,  1006,  1061,  1011,  8023,  1007,  2003,
         2445,  2011, 20287,  1006,  1061,  1007,  1027,  1039,  1008, 20287,
         1006,  1060,  1007,  1012,   102])"
511,1,"['outliers', 'data']", Updating Formula For Harmonic Mean,seg_121,trimmed hm is meaningful when outliers or zero values are present. a left-trimmed hm is appropriate when data contain several zeros.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101, 21920, 20287,  2003, 15902,  2043,  2041, 14355,  2015,  2030,
         5717,  5300,  2024,  2556,  1012,  1037,  2187,  1011, 21920, 20287,
         2003,  6413,  2043,  2951,  5383,  2195,  5717,  2015,  1012,   102])"
512,1,"['mean', 'harmonic', 'harmonic mean']", Updating Formula For Harmonic Mean,seg_121,example 2.9 harmonic mean finding,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  2742,  1016,  1012,  1023, 19452,  2812,  4531,   102])"
513,1,['data'], Updating Formula For Harmonic Mean,seg_121,find the hm for the data in example 2–32 (pp. 2–24) using equation in page 60.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  2424,  1996, 20287,  2005,  1996,  2951,  1999,  2742,  1016,
         1516,  3590,  1006,  4903,  1012,  1016,  1516,  2484,  1007,  2478,
         8522,  1999,  3931,  3438,  1012,   102])"
514,1,"['observations', 'table']", Updating Formula For Harmonic Mean,seg_121,"solution 2.9 the calculations are shown in table 2.4. column 2 gives the reciprocal of observations. these sum to 0.170622041. column 3 gives the rhs of equation (2.22), the reciprocals of which are given in column 4. we could verify our result by direct substitution as n∕(∑ 1∕xi) = 8∕0.170622041 = 46.88726, which agrees with the last entry in column 4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2039, 16616,  5675,  2005, 19452,  2812])","tensor([  101,  5576,  1016,  1012,  1023,  1996, 16268,  2024,  3491,  1999,
         2795,  1016,  1012,  1018,  1012,  5930,  1016,  3957,  1996, 28309,
         1997,  9420,  1012,  2122,  7680,  2000,  1014,  1012, 10894,  2575,
        19317,  2692, 23632,  1012,  5930,  1017,  3957,  1996,  1054,  7898,
         1997,  8522,  1006,  1016,  1012,  2570,  1007,  1010,  1996, 28309,
         2015,  1997,  2029,  2024,  2445,  1999,  5930,  1018,  1012,  2057,
         2071, 20410,  2256,  2765,  2011,  3622, 20885,  2004,   100,  1006,
          100,   100,  1007,  1027,   100,  1012, 10894,  2575, 19317,  2692,
        23632,  1027,  4805,  1012,  6070,  2581, 23833,  1010,  2029, 10217,
         2007,  1996,  2197,  4443,  1999,  5930,  1018,  1012,   102])"
515,1,['median'], WHICH MEASURE TO USE,seg_123,"three types of means (am, gm, and hm), along with the median and mode, serve",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([2029, 5468, 2000, 2224])","tensor([  101,  2093,  4127,  1997,  2965,  1006,  2572,  1010, 13938,  1010,
         1998, 20287,  1007,  1010,  2247,  2007,  1996,  3991,  1998,  5549,
         1010,  3710,   102])"
516,1,"['location', 'mean']", WHICH MEASURE TO USE,seg_123,"as measures of location. in addition, the quadratic mean is defined as √",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2029, 5468, 2000, 2224])","tensor([  101,  2004,  5761,  1997,  3295,  1012,  1999,  2804,  1010,  1996,
        17718, 23671,  2812,  2003,  4225,  2004,  1600,   102])"
517,0,[], WHICH MEASURE TO USE,seg_123,a question that analysts face is “which measure is the most appropriate?”. this,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2029, 5468, 2000, 2224])","tensor([  101,  1037,  3160,  2008, 18288,  2227,  2003,  1523,  2029,  5468,
         2003,  1996,  2087,  6413,  1029,  1524,  1012,  2023,   102])"
518,1,"['graphics', 'quantitative', 'nominal', 'geometric mean', 'median', 'mean', 'observation', 'interval', 'ordinal', 'geometric', 'data', 'ordinal data', 'skewed', 'rates', 'arithmetic mean', 'sample', 'medoid', 'distribution', 'average']", WHICH MEASURE TO USE,seg_123,"depends both on the nature of the data (qualitative or quantitative, positive or negative) and the application at hand. the mode is the only appropriate measure for numerically coded nominal or ordinal data. for interval and ratio type data, the median is better than the mean and mode if the distribution is skewed. as the medoid coincides with a sample observation, it is preferred when all data values are integers and arithmetic operations involve differences between data values and the medoid (as in clustering). the arithmetic mean is to be preferred when the numbers combine additively to produce a resultant value. examples are consumption of materials or power, quantities measured on a scale such as heights, weights, thickness, and temperatures. the geometric mean is better suited when several nonzero numbers combine multiplicatively to produce a resultant value (or equivalently, the logarithm of several nonzero numbers combine additively). this includes rates of changes such as successive discounts; time-dependent growth; successive size changes (enlargements or contractions) of images, graphics; successive volume changes, power and voltage changes and so on. the hm is preferred when reciprocals of several nonzero numbers combine additively to produce a resultant value. examples are electrical resistance or capacitance in parallel circuits, average speed of vehicles for the same distance, and so on. quadratic mean is better suited when squares of several numbers combine additively as in squared euclidean distances.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2029, 5468, 2000, 2224])","tensor([  101,  9041,  2119,  2006,  1996,  3267,  1997,  1996,  2951,  1006,
        24209, 11475, 27453,  2030, 20155,  1010,  3893,  2030,  4997,  1007,
         1998,  1996,  4646,  2012,  2192,  1012,  1996,  5549,  2003,  1996,
         2069,  6413,  5468,  2005, 15973,  2135, 22402, 15087,  2030,  2030,
        18979,  2140,  2951,  1012,  2005, 13483,  1998,  6463,  2828,  2951,
         1010,  1996,  3991,  2003,  2488,  2084,  1996,  2812,  1998,  5549,
         2065,  1996,  4353,  2003, 15315,  7974,  2098,  1012,  2004,  1996,
        19960,  9314, 19680,  2015,  2007,  1037,  7099,  8089,  1010,  2009,
         2003,  6871,  2043,  2035,  2951,  5300,  2024, 24028,  1998, 20204,
         3136,  9125,  5966,  2090,  2951,  5300,  1998,  1996, 19960,  9314,
         1006,  2004,  1999,  9324,  2075,  1007,  1012,  1996, 20204,  2812,
         2003,  2000,  2022,  6871,  2043,  1996,  3616, 11506, 29167,  2135,
         2000,  3965,  1037, 28573,  3643,  1012,  4973,  2024,  8381,  1997,
         4475,  2030,  2373,  1010, 12450,  7594,  2006,  1037,  4094,  2107,
         2004,  7535,  1010, 15871,  1010, 14983,  1010,  1998,  7715,  1012,
         1996, 14965,  2812,  2003,  2488, 10897,  2043,  2195,  2512,  6290,
         2080,  3616, 11506,  4800, 24759, 25184,  2135,  2000,  3965,  1037,
        28573,  3643,  1006,  2030,  5662,  2135,  1010,  1996,  8833,  8486,
         2705,  2213,  1997,  2195,  2512,  6290,  2080,  3616, 11506, 29167,
         2135,  1007,  1012,  2023,  2950,  6165,  1997,  3431,  2107,  2004,
        11165, 19575,  2015,  1025,  2051,  1011,  7790,  3930,  1025, 11165,
         2946,  3431,  1006,  4372,  8017, 20511,  2015,  2030, 21963,  2015,
         1007,  1997,  4871,  1010,  8389,  1025, 11165,  3872,  3431,  1010,
         2373,  1998, 10004,  3431,  1998,  2061,  2006,  1012,  1996, 20287,
         2003,  6871,  2043, 28309,  2015,  1997,  2195,  2512,  6290,  2080,
         3616, 11506, 29167,  2135,  2000,  3965,  1037, 28573,  3643,  1012,
         4973,  2024,  5992,  5012,  2030,  6178,  6305, 25451,  3401,  1999,
         5903, 13782,  1010,  2779,  3177,  1997,  4683,  2005,  1996,  2168,
         3292,  1010,  1998,  2061,  2006,  1012, 17718, 23671,  2812,  2003,
         2488, 10897,  2043, 14320,  1997,  2195,  3616, 11506, 29167,  2135,
         2004,  1999, 19942, 25826, 12103,  1012,   102])"
519,1,"['location', 'mean', 'data', 'varying', 'weighted mean', 'outliers', 'population', 'median']", SUMMARY,seg_125,"several popular measures of location are introduced and exemplified which are useful to compare several groups. the measures of location portray the central location of varying data values. they are sometimes called “sample statistics” which are substitutes for their population counterparts. the mean is vulnerable to unusually low or high values (which are recognized as outliers) in an uneven manner. in such situations, the median should be used. when the data size is large or there is a need to identify more often repeating value in the data, the mode is preferable over the mean or median. if neither the median nor the mode resolves the issue of uneven influences exerted by the outliers on the measures of location, the weighted mean could be chosen as a remedy.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2195,  2759,  5761,  1997,  3295,  2024,  3107,  1998, 28593,
         2029,  2024,  6179,  2000, 12826,  2195,  2967,  1012,  1996,  5761,
         1997,  3295, 17279,  1996,  2430,  3295,  1997,  9671,  2951,  5300,
         1012,  2027,  2024,  2823,  2170,  1523,  7099,  6747,  1524,  2029,
         2024, 29200,  2005,  2037,  2313, 14562,  1012,  1996,  2812,  2003,
         8211,  2000, 12890,  2659,  2030,  2152,  5300,  1006,  2029,  2024,
         3858,  2004,  2041, 14355,  2015,  1007,  1999,  2019, 17837,  5450,
         1012,  1999,  2107,  8146,  1010,  1996,  3991,  2323,  2022,  2109,
         1012,  2043,  1996,  2951,  2946,  2003,  2312,  2030,  2045,  2003,
         1037,  2342,  2000,  6709,  2062,  2411, 15192,  3643,  1999,  1996,
         2951,  1010,  1996,  5549,  2003,  9544,  3085,  2058,  1996,  2812,
         2030,  3991,  1012,  2065,  4445,  1996,  3991,  4496,  1996,  5549,
        10663,  2015,  1996,  3277,  1997, 17837,  8092,  4654, 28728,  2011,
         1996,  2041, 14355,  2015,  2006,  1996,  5761,  1997,  3295,  1010,
         1996, 18215,  2812,  2071,  2022,  4217,  2004,  1037, 19519,  1012,
          102])"
520,1,"['location', 'data', 'median', 'location measures']", SUMMARY,seg_125,"updating formula for some of them are also presented. these are useful in online computations, where new data arrive continuously. important properties of these location measures are also discussed. this allows an analyst to choose the most appropriate measure of central tendency for the data at their hand [21]. median finding algorithms are discussed in references 17, 22, and 23. see reference 20 for a discussion of am, gm, and hm inequalities for weighted data, and references 24, 25",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2039, 16616,  5675,  2005,  2070,  1997,  2068,  2024,  2036,
         3591,  1012,  2122,  2024,  6179,  1999,  3784, 22334,  2015,  1010,
         2073,  2047,  2951,  7180, 10843,  1012,  2590,  5144,  1997,  2122,
         3295,  5761,  2024,  2036,  6936,  1012,  2023,  4473,  2019, 12941,
         2000,  5454,  1996,  2087,  6413,  5468,  1997,  2430, 11765,  2005,
         1996,  2951,  2012,  2037,  2192,  1031,  2538,  1033,  1012,  3991,
         4531, 13792,  2024,  6936,  1999,  7604,  2459,  1010,  2570,  1010,
         1998,  2603,  1012,  2156,  4431,  2322,  2005,  1037,  6594,  1997,
         2572,  1010, 13938,  1010,  1998, 20287,  1999,  2063, 26426,  6447,
         2005, 18215,  2951,  1010,  1998,  7604,  2484,  1010,  2423,   102])"
521,1,"['location', 'variability', 'location measures']", SUMMARY,seg_125,for new measures of central tendency and variability. a discussion of visualizing of location measures can be found in references 26–28.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2005,  2047,  5761,  1997,  2430, 11765,  1998, 28436,  1012,
         1037,  6594,  1997,  5107,  6026,  1997,  3295,  5761,  2064,  2022,
         2179,  1999,  7604,  2656,  1516,  2654,  1012,   102])"
522,1,"['set', 'quartiles', 'data set', 'data']", SUMMARY,seg_125,a) quartiles divide a data set into three equal parts,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  1007, 24209,  8445,  9463,  2015, 11443,  1037,  2951,
         2275,  2046,  2093,  5020,  3033,   102])"
523,1,['quartiles'], SUMMARY,seg_125,b) third quartiles lies between 7th and 8th decile,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1038,  1007,  2353, 24209,  8445,  9463,  2015,  3658,  2090,
         5504,  1998,  5893, 11703,  9463,   102])"
524,1,['sample'], SUMMARY,seg_125,c) the mode of a sample can never be the minimum of the sample,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 1039, 1007, 1996, 5549, 1997, 1037, 7099, 2064, 2196, 2022, 1996,
        6263, 1997, 1996, 7099,  102])"
525,1,"['frequency', 'data', 'median']", SUMMARY,seg_125,d) the median balances the frequency count of data above and below it,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1040, 1007, 1996, 3991, 5703, 2015, 1996, 6075, 4175, 1997, 2951,
        2682, 1998, 2917, 2009,  102])"
526,1,"['geometric', 'mean', 'geometric mean', 'data']", SUMMARY,seg_125,e) geometric mean of data containing at least one zero is zero,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1041,  1007, 14965,  2812,  1997,  2951,  4820,  2012,  2560,
         2028,  5717,  2003,  5717,   102])"
527,1,"['sample', 'observation']", SUMMARY,seg_125,f) every sample observation contributes to the mode,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1042,  1007,  2296,  7099,  8089, 16605,  2000,  1996,  5549,
          102])"
528,1,['sample'], SUMMARY,seg_125,g) mode of a sample is always a sample value,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1043, 1007, 5549, 1997, 1037, 7099, 2003, 2467, 1037, 7099, 3643,
         102])"
529,1,"['mean', 'data']", SUMMARY,seg_125,h) duplicate data values are counted distinctly in finding the mean.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1044,  1007, 24473,  2951,  5300,  2024,  8897, 19517,  1999,
         4531,  1996,  2812,  1012,   102])"
530,1,['table'], SUMMARY,seg_125,"2.2 the tuition fees of 230 graduate schools per semester are given in table 2.5,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1012,  1016,  1996, 15413,  9883,  1997, 11816,  4619,
         2816,  2566, 13609,  2024,  2445,  1999,  2795,  1016,  1012,  1019,
         1010,   102])"
531,1,"['mean', 'median']", SUMMARY,seg_125,where the count column indicates the number of schools charging the fee on the left. find the mean and median of tuition fees.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2073,  1996,  4175,  5930,  7127,  1996,  2193,  1997,  2816,
        13003,  1996,  7408,  2006,  1996,  2187,  1012,  2424,  1996,  2812,
         1998,  3991,  1997, 15413,  9883,  1012,   102])"
532,1,['medoid'], SUMMARY,seg_125,2.3 what is a medoid? what are its needed to update the mode using,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1016,  1012,  1017,  2054,  2003,  1037, 19960,  9314,  1029,
         2054,  2024,  2049,  2734,  2000, 10651,  1996,  5549,  2478,   102])"
533,1,['data'], SUMMARY,seg_125,uses? how can it be used to meanew data?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 3594, 1029, 2129, 2064, 2009, 2022, 2109, 2000, 2812, 7974, 2951,
        1029,  102])"
534,1,['data'], SUMMARY,seg_125,sure data spread? 2.7 which of the following is most,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2469, 2951, 3659, 1029, 1016, 1012, 1021, 2029, 1997, 1996, 2206,
        2003, 2087,  102])"
535,1,"['location', 'location measures']", SUMMARY,seg_125,2.4 to which of the location measures appropriate as a measure of loca-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1016, 1012, 1018, 2000, 2029, 1997, 1996, 3295, 5761, 6413, 2004,
        1037, 5468, 1997, 8840, 3540, 1011,  102])"
536,1,"['medoid', 'average']", SUMMARY,seg_125,does a medoid converge to as the tion in finding the average distance,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2515,  1037, 19960,  9314, 28314,  2000,  2004,  1996, 14841,
         2239,  1999,  4531,  1996,  2779,  3292,   102])"
537,0,[], SUMMARY,seg_125,sample size is increased? of vehicles that travel the same,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 7099, 2946, 2003, 3445, 1029, 1997, 4683, 2008, 3604, 1996, 2168,
         102])"
538,0,[], SUMMARY,seg_125,2.5 for which of the following meaduration?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1016,  1012,  1019,  2005,  2029,  1997,  1996,  2206, 19855,
        18924,  1029,   102])"
539,1,"['change of origin', 'mean', 'geometric', 'arithmetic mean']", SUMMARY,seg_125,sures is the change of origin tech(a) arithmetic mean (b) geometric,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0.])",tensor([12654]),"tensor([  101,  2469,  2015,  2003,  1996,  2689,  1997,  4761,  6627,  1006,
         1037,  1007, 20204,  2812,  1006,  1038,  1007, 14965,   102])"
540,1,"['mean', 'geometric mean', 'harmonic', 'harmonic mean', 'geometric', 'arithmetic mean', 'median']", SUMMARY,seg_125,nique useful? (a) arithmetic mean mean (c) harmonic mean (d) all (b) geometric mean (c) harmonic of them mean (d) median,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1.,
        0.])",tensor([12654]),"tensor([  101,  9152,  4226,  6179,  1029,  1006,  1037,  1007, 20204,  2812,
         2812,  1006,  1039,  1007, 19452,  2812,  1006,  1040,  1007,  2035,
         1006,  1038,  1007, 14965,  2812,  1006,  1039,  1007, 19452,  1997,
         2068,  2812,  1006,  1040,  1007,  3991,   102])"
541,1,"['location', 'location measure']", SUMMARY,seg_125,2.8 which location measure is most 2.6 in what situations is the mode,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1016, 1012, 1022, 2029, 3295, 5468, 2003, 2087, 1016, 1012, 1020,
        1999, 2054, 8146, 2003, 1996, 5549,  102])"
542,1,['data'], SUMMARY,seg_125,"appropriate for the following data? most appropriate, and most inap-",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6413,  2005,  1996,  2206,  2951,  1029,  2087,  6413,  1010,
         1998,  2087, 27118,  2361,  1011,   102])"
543,1,['information'], SUMMARY,seg_125,propriate? what information is (i) growth of visitors to a web site,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101, 17678,  4360,  2618,  1029,  2054,  2592,  2003,  1006,  1045,
         1007,  3930,  1997,  5731,  2000,  1037,  4773,  2609,   102])"
544,1,"['mean', 'trimmed mean', 'grouped data', 'data', 'median']", SUMMARY,seg_125,(ii) amount of money in a com2.18 describe situations where pound interest account (iii) electrimmed mean and median are tric current in a parallel circuit (iv) useful for grouped data. can you debt of a company. find trimmed mean without complete data sorting? 2.9 if the gm of n data values coincide,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  2462,  1007,  3815,  1997,  2769,  1999,  1037,  4012,
         2475,  1012,  2324,  6235,  8146,  2073,  9044,  3037,  4070,  1006,
         3523,  1007, 11322, 20026,  7583,  2812,  1998,  3991,  2024, 13012,
         2278,  2783,  1999,  1037,  5903,  4984,  1006,  4921,  1007,  6179,
         2005, 15131,  2951,  1012,  2064,  2017,  7016,  1997,  1037,  2194,
         1012,  2424, 21920,  2812,  2302,  3143,  2951, 22210,  1029,  1016,
         1012,  1023,  2065,  1996, 13938,  1997,  1050,  2951,  5300, 19680,
          102])"
545,1,"['location', 'mean', 'harmonic', 'harmonic mean', 'data']", SUMMARY,seg_125,"2.19 give examples of some situations exactly with one of the data values where the harmonic mean is the (say xk), then prove xk is the gm most appropriate location meaof the other (n − 1) data values. sure. when is it most inappropri2.10 if the hm of n data values coincide ate?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1012,  2539,  2507,  4973,  1997,  2070,  8146,  3599,
         2007,  2028,  1997,  1996,  2951,  5300,  2073,  1996, 19452,  2812,
         2003,  1996,  1006,  2360,  1060,  2243,  1007,  1010,  2059,  6011,
         1060,  2243,  2003,  1996, 13938,  2087,  6413,  3295,  2033,  7113,
         2546,  1996,  2060,  1006,  1050,  1597,  1015,  1007,  2951,  5300,
         1012,  2469,  1012,  2043,  2003,  2009,  2087, 27118,  9397, 18981,
         3089,  2475,  1012,  2184,  2065,  1996, 20287,  1997,  1050,  2951,
         5300, 19680,  8823,  1029,   102])"
546,1,"['mean', 'sample', 'standard', 'standardized', 'data']", SUMMARY,seg_125,"exactly with one of the data values 2.20 can you always find the gm and (say xk), then xk must be the hm hm for standardized data y = of the other (n − 1) data values. (x − x)/s, where x is the sample 2.11 what is the most commonly used mean and s is the standard devia-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3599,  2007,  2028,  1997,  1996,  2951,  5300,  1016,  1012,
         2322,  2064,  2017,  2467,  2424,  1996, 13938,  1998,  1006,  2360,
         1060,  2243,  1007,  1010,  2059,  1060,  2243,  2442,  2022,  1996,
        20287, 20287,  2005, 16367,  2951,  1061,  1027,  1997,  1996,  2060,
         1006,  1050,  1597,  1015,  1007,  2951,  5300,  1012,  1006,  1060,
         1597,  1060,  1007,  1013,  1055,  1010,  2073,  1060,  2003,  1996,
         7099,  1016,  1012,  2340,  2054,  2003,  1996,  2087,  4141,  2109,
         2812,  1998,  1055,  2003,  1996,  3115, 14386,  2050,  1011,   102])"
547,1,"['mean', 'observations']", SUMMARY,seg_125,location measure? what are its tion? advantages over others? 2.21 find the mean of n observations 2.12 what are some uses of samthat are in arithmetic progression,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  3295,  5468,  1029,  2054,  2024,  2049, 14841,  2239,  1029,
        12637,  2058,  2500,  1029,  1016,  1012,  2538,  2424,  1996,  2812,
         1997,  1050,  9420,  1016,  1012,  2260,  2054,  2024,  2070,  3594,
         1997,  3520,  8322,  2102,  2024,  1999, 20204, 14967,   102])"
548,1,"['medoid', 'median']", SUMMARY,seg_125,ple median? what is a medoid? with first term k and common difwhere is it used? ference d.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 20228,  2063,  3991,  1029,  2054,  2003,  1037, 19960,  9314,
         1029,  2007,  2034,  2744,  1047,  1998,  2691,  4487,  2546,  2860,
         5886,  2063,  2003,  2009,  2109,  1029, 10768, 24413,  1040,  1012,
          102])"
549,0,[], SUMMARY,seg_125,2.13 what is the least stable measure 2.22 what is the first step in comput-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1016,  1012,  2410,  2054,  2003,  1996,  2560,  6540,  5468,
         1016,  1012,  2570,  2054,  2003,  1996,  2034,  3357,  1999,  4012,
        18780,  1011,   102])"
550,1,"['mean', 'geometric', 'grouped data', 'geometric mean', 'data', 'median']", SUMMARY,seg_125,of central tendency? (a) arithmetic ing (i) the mode? (ii) the median mean (b) geometric mean (c) harof raw data and grouped data?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  2430, 11765,  1029,  1006,  1037,  1007, 20204, 13749,
         1006,  1045,  1007,  1996,  5549,  1029,  1006,  2462,  1007,  1996,
         3991,  2812,  1006,  1038,  1007, 14965,  2812,  1006,  1039,  1007,
         5292,  3217,  2546,  6315,  2951,  1998, 15131,  2951,  1029,   102])"
551,1,['mean'], SUMMARY,seg_125,monic mean (d) mode 2.23 what are the two situations in,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 12256,  2594,  2812,  1006,  1040,  1007,  5549,  1016,  1012,
         2603,  2054,  2024,  1996,  2048,  8146,  1999,   102])"
552,1,['mean'], SUMMARY,seg_125,2.14 prove that the sum of the deviawhich the mean is the same as the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1012,  2403,  6011,  2008,  1996,  7680,  1997,  1996,
        14386, 10376, 16066,  2232,  1996,  2812,  2003,  1996,  2168,  2004,
         1996,   102])"
553,1,['sample'], SUMMARY,seg_125,tions of sample values from the sample value?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  5644,  1997,  7099,  5300,  2013,  1996,  7099,  3643,
         1029,   102])"
554,1,"['change of origin', 'mean']", SUMMARY,seg_125,sample mean is zero. what is the 2.24 when is the change of origin use-,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0.])",tensor([12654]),"tensor([ 101, 7099, 2812, 2003, 5717, 1012, 2054, 2003, 1996, 1016, 1012, 2484,
        2043, 2003, 1996, 2689, 1997, 4761, 2224, 1011,  102])"
555,1,"['mean', 'population']", SUMMARY,seg_125,corresponding population equivaful in computing the mean? lent?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  7978,  2313,  1041, 15549,  3567,  3993,  1999,  9798,  1996,
         2812,  1029, 15307,  1029,   102])"
556,1,"['mean', 'percentage', 'plots', 'arithmetic mean']", SUMMARY,seg_125,2.25 the percentage of seeds that ger2.15 what is trimmed arithmetic mean? minate from eight different plots,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1016,  1012,  2423,  1996,  7017,  1997,  8079,  2008, 16216,
         2099,  2475,  1012,  2321,  2054,  2003, 21920, 20204,  2812,  1029,
        19808,  2618,  2013,  2809,  2367, 14811,   102])"
557,1,['harmonic'], SUMMARY,seg_125,"ric and trimmed harmonic means. 89.3, 94.4, 95.0, 83.1, 90.6, 96.1}.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 26220,  1998, 21920, 19452,  2965,  1012,  6486,  1012,  1017,
         1010,  6365,  1012,  1018,  1010,  5345,  1012,  1014,  1010,  6640,
         1012,  1015,  1010,  3938,  1012,  1020,  1010,  5986,  1012,  1015,
         1065,  1012,   102])"
558,1,"['location', 'geometric', 'location measure']", SUMMARY,seg_125,2.16 in what situations is the geometric which location measure is most,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1012,  2385,  1999,  2054,  8146,  2003,  1996, 14965,
         2029,  3295,  5468,  2003,  2087,   102])"
559,0,[], SUMMARY,seg_125,mean most appropriate? what are appropriate? find its value.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 2812, 2087, 6413, 1029, 2054, 2024, 6413, 1029, 2424, 2049, 3643,
        1012,  102])"
560,1,['data'], SUMMARY,seg_125,some data restrictions on comput2.26 the first-order bragg reflection of,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2070,  2951,  9259,  2006,  4012, 18780,  2475,  1012,  2656,
         1996,  2034,  1011,  2344, 23678,  9185,  1997,   102])"
561,0,[], SUMMARY,seg_125,ing it? x-ray at different angles through t 2.17 if xn−2 denotes the 1-trimmed a crystal gave the wavelengths (in,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 13749,  2009,  1029,  1060,  1011,  4097,  2012,  2367, 12113,
         2083,  1056,  1016,  1012,  2459,  2065,  1060,  2078, 22543,  2475,
        14796,  1996,  1015,  1011, 21920,  1037,  6121,  2435,  1996, 29263,
         1006,  1999,   102])"
562,1,"['mean', 'observation', 'median', 'change of scale']", SUMMARY,seg_125,"mean after deleting the smallest nanometers) as {0.0795, 0.0841, and largest observation in a sam0.0790, 0.0844, 0.0842, 0.0840}. t ple, prove that (1 − 2∕n) ∗ xn−2 = use the change of scale technique xn − (x(1) + x(n))∕n. to find the mean and the median.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2812,  2044,  3972, 20624,  3070,  1996, 10479, 28991, 22828,
         2015,  1007,  2004,  1063,  1014,  1012,  5718,  2683,  2629,  1010,
         1014,  1012,  5511, 23632,  1010,  1998,  2922,  8089,  1999,  1037,
         3520,  2692,  1012,  5718, 21057,  1010,  1014,  1012,  5511, 22932,
         1010,  1014,  1012,  5511, 20958,  1010,  1014,  1012,  5511, 12740,
         1065,  1012,  1056, 20228,  2063,  1010,  6011,  2008,  1006,  1015,
         1597,   100,  1007,  1598,  1060,  2078, 22543,  2475,  1027,  2224,
         1996,  2689,  1997,  4094,  6028,  1060,  2078,  1597,  1006,  1060,
         1006,  1015,  1007,  1009,  1060,  1006,  1050,  1007,  1007,   100,
         1012,  2000,  2424,  1996,  2812,  1998,  1996,  3991,  1012,   102])"
563,0,[], SUMMARY,seg_125,2.27 the number of hours that a bat2.32 the expected absolute departure,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1016, 1012, 2676, 1996, 2193, 1997, 2847, 2008, 1037, 7151, 2475,
        1012, 3590, 1996, 3517, 7619, 6712,  102])"
564,1,"['mean', 'random variable', 'random', 'median', 'variable']", SUMMARY,seg_125,tery can be continuously operof a random variable is minimum ated in different devices after a when it is taken around the—(a) 30 min recharge is given below. mean (b) median (c) mode (d) both find the median and mean. x = (a) and (b).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 28774,  2100,  2064,  2022, 10843,  6728, 10624,  2546,  1037,
         6721,  8023,  2003,  6263,  8823,  2094,  1999,  2367,  5733,  2044,
         1037,  2043,  2009,  2003,  2579,  2105,  1996,  1517,  1006,  1037,
         1007,  2382,  8117, 28667,  8167,  3351,  2003,  2445,  2917,  1012,
         2812,  1006,  1038,  1007,  3991,  1006,  1039,  1007,  5549,  1006,
         1040,  1007,  2119,  2424,  1996,  3991,  1998,  2812,  1012,  1060,
         1027,  1006,  1037,  1007,  1998,  1006,  1038,  1007,  1012,   102])"
565,0,[], SUMMARY,seg_125,subjected to an elongation 2.28 the resistance of an electronic,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 13532,  2000,  2019,  3449, 26356,  3508,  1016,  1012,  2654,
         1996,  5012,  1997,  2019,  4816,   102])"
566,1,"['mean', 'data', 'median', 'test']", SUMMARY,seg_125,"stress test to see how much circuit was measured using it can be stretched before it five different components as breaks. let x = {9.2 6.7 15.3 {5.2, 4.9 5.12, 4.95, 5.1}. find the 18.0 11.6 10.8 7.7 16.1 8.5 12.0} mean and median. convert data to denote the break point length in z-scores. cm. (i) find the mean and the 2.29 what is trimmed median? if median.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  6911,  3231,  2000,  2156,  2129,  2172,  4984,  2001,  7594,
         2478,  2009,  2064,  2022,  7121,  2077,  2009,  2274,  2367,  6177,
         2004,  7807,  1012,  2292,  1060,  1027,  1063,  1023,  1012,  1016,
         1020,  1012,  1021,  2321,  1012,  1017,  1063,  1019,  1012,  1016,
         1010,  1018,  1012,  1023,  1019,  1012,  2260,  1010,  1018,  1012,
         5345,  1010,  1019,  1012,  1015,  1065,  1012,  2424,  1996,  2324,
         1012,  1014,  2340,  1012,  1020,  2184,  1012,  1022,  1021,  1012,
         1021,  2385,  1012,  1015,  1022,  1012,  1019,  2260,  1012,  1014,
         1065,  2812,  1998,  3991,  1012, 10463,  2951,  2000, 19090,  1996,
         3338,  2391,  3091,  1999,  1062,  1011,  7644,  1012,  4642,  1012,
         1006,  1045,  1007,  2424,  1996,  2812,  1998,  1996,  1016,  1012,
         2756,  2054,  2003, 21920,  3991,  1029,  2065,  3991,  1012,   102])"
567,1,"['sample', 'data']", SUMMARY,seg_125,"extreme data values are removed 2.34 soluble dissolvents (in milfrom both ends of a sample, does ligram/liter) in drinking water",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6034,  2951,  5300,  2024,  3718,  1016,  1012,  4090, 24345,
        21969,  7666,  1006,  1999, 23689, 19699,  5358,  2119,  4515,  1997,
         1037,  7099,  1010,  2515,  5622, 13113,  1013, 23675,  1007,  1999,
         5948,  2300,   102])"
568,1,['median'], SUMMARY,seg_125,the trimmed median differ from are measured at different places,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996, 21920,  3991, 11234,  2013,  2024,  7594,  2012,  2367,
         3182,   102])"
569,1,"['mean', 'standard', 'median']", SUMMARY,seg_125,"the original median? in a city. find the mean 1 n 2.30 prove that (xn −  ) = ∑j=1(xj − and median, and standard-",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0.])",tensor([12654]),"tensor([ 101, 1996, 2434, 3991, 1029, 1999, 1037, 2103, 1012, 2424, 1996, 2812,
        1015, 1050, 1016, 1012, 2382, 6011, 2008, 1006, 1060, 2078, 1597, 1007,
        1027,  100, 1027, 1015, 1006, 1060, 3501, 1597, 1998, 3991, 1010, 1998,
        3115, 1011,  102])"
570,1,['median'], SUMMARY,seg_125,n  ) = (median −  ) + 1 n ∑n,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1050, 1007, 1027, 1006, 3991, 1597, 1007, 1009, 1015, 1050,  100,
         102])"
571,1,"['mean', 'sample', 'data', 'median']", SUMMARY,seg_125,"j=1(xj − ize the data where x = {560, median), where xn is the mean of 458, 490, 525, 482, 554, 499, 538, a sample of size n. 540, 507, 481, 513} is the amount of dissolvent in mg/l. 2.31 if data values are discarded from",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1046,  1027,  1015,  1006,  1060,  3501,  1597,  1045,  4371,
         1996,  2951,  2073,  1060,  1027,  1063, 21267,  1010,  3991,  1007,
         1010,  2073,  1060,  2078,  2003,  1996,  2812,  1997,  3429,  2620,
         1010, 22288,  1010, 25621,  1010,  4466,  2475,  1010,  4583,  2549,
         1010,  4749,  2683,  1010,  5187,  2620,  1010,  1037,  7099,  1997,
         2946,  1050,  1012, 20263,  1010,  2753,  2581,  1010,  4466,  2487,
         1010,  4868,  2509,  1065,  2003,  1996,  3815,  1997, 21969,  3372,
         1999, 11460,  1013,  1048,  1012,  1016,  1012,  2861,  2065,  2951,
         5300,  2024, 15105,  2013,   102])"
572,1,"['sample', 'median', 'mean']", SUMMARY,seg_125,"the low end of a sorted sample, 2.35 should the complete sample be the trimmed median —(a) moves sorted to compute the trimmed t to the left (b) moves to the right mean using the formula xm =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  2659,  2203,  1997,  1037, 19616,  7099,  1010,  1016,
         1012,  3486,  2323,  1996,  3143,  7099,  2022,  1996, 21920,  3991,
         1517,  1006,  1037,  1007,  5829, 19616,  2000, 24134,  1996, 21920,
         1056,  2000,  1996,  2187,  1006,  1038,  1007,  5829,  2000,  1996,
         2157,  2812,  2478,  1996,  5675,  1060,  2213,  1027,   102])"
573,0,[], SUMMARY,seg_125,"k +1 x(i)? if not, how dictable much sorting is required?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1047,  1009,  1015,  1060,  1006,  1045,  1007,  1029,  2065,
         2025,  1010,  2129,  4487, 23576,  2172, 22210,  2003,  3223,  1029,
          102])"
574,0,[], MEASURES OF SPREAD,seg_127,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5761, 1997, 3659])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
575,0,[], MEASURES OF SPREAD,seg_127,◾ describe popular measures of spread,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([5761, 1997, 3659])","tensor([ 101,  100, 6235, 2759, 5761, 1997, 3659,  102])"
576,1,['range'], MEASURES OF SPREAD,seg_127,◾ understand range and inter-quartile range,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([5761, 1997, 3659])","tensor([  101,   100,  3305,  2846,  1998,  6970,  1011, 24209,  8445,  9463,
         2846,   102])"
577,1,"['deviation', 'standard deviation', 'standard', 'variance']", MEASURES OF SPREAD,seg_127,◾ understand variance and standard deviation,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0.])","tensor([5761, 1997, 3659])","tensor([  101,   100,  3305, 23284,  1998,  3115, 24353,   102])"
578,1,"['variation', 'coefficient', 'coefficient of variation']", MEASURES OF SPREAD,seg_127,◾ comprehend the coefficient of variation,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0.])","tensor([5761, 1997, 3659])","tensor([  101,   100, 22346,  1996, 19064,  1997,  8386,   102])"
579,0,[], MEASURES OF SPREAD,seg_127,◾ apply the above concepts to practical problems,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5761, 1997, 3659])","tensor([ 101,  100, 6611, 1996, 2682, 8474, 2000, 6742, 3471,  102])"
580,1,"['variability', 'population', 'symmetric', 'location', 'mean', 'bivariate', 'samples', 'statistical', 'data', 'range', 'unimodal', 'distributions', 'sample', 'distribution', 'location measures']", NEED FOR A SPREAD MEASURE,seg_129,"the prime task in many statistical analyses is to summarize the location and variability of data. one or more concise measures are used for this purpose. these are real numbers for univariate samples, and a vector or matrix for bivariate and higher dimensional samples. chapter 2 introduced several location measures for this purpose. if repeated samples are drawn from a univariate population, they can lie anywhere within the range (min, max). as shown below, this depends on the shape of the distribution. if the parent population is unimodal (with a clear peak), a great majority of sample values will fall close to the mode. as the mean and mode coincide for symmetric unimodal distributions, we expect most of the data points to fall within the vicinity of the mean for such distributions. on the other hand, if the distribution is uniform, there is an equal chance for any new data item to fall anywhere within",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  1996,  3539,  4708,  1999,  2116,  7778, 16478,  2003,  2000,
         7680,  7849,  4697,  1996,  3295,  1998, 28436,  1997,  2951,  1012,
         2028,  2030,  2062,  9530, 18380,  5761,  2024,  2109,  2005,  2023,
         3800,  1012,  2122,  2024,  2613,  3616,  2005,  4895, 28739, 13143,
         8168,  1010,  1998,  1037,  9207,  2030,  8185,  2005, 12170, 10755,
        13143,  1998,  3020,  8789,  8168,  1012,  3127,  1016,  3107,  2195,
         3295,  5761,  2005,  2023,  3800,  1012,  2065,  5567,  8168,  2024,
         4567,  2013,  1037,  4895, 28739, 13143,  2313,  1010,  2027,  2064,
         4682,  5973,  2306,  1996,  2846,  1006,  8117,  1010,  4098,  1007,
         1012,  2004,  3491,  2917,  1010,  2023,  9041,  2006,  1996,  4338,
         1997,  1996,  4353,  1012,  2065,  1996,  6687,  2313,  2003,  4895,
        16339,  9305,  1006,  2007,  1037,  3154,  4672,  1007,  1010,  1037,
         2307,  3484,  1997,  7099,  5300,  2097,  2991,  2485,  2000,  1996,
         5549,  1012,  2004,  1996,  2812,  1998,  5549, 19680,  2005, 19490,
         4895, 16339,  9305, 20611,  1010,  2057,  5987,  2087,  1997,  1996,
         2951,  2685,  2000,  2991,  2306,  1996,  9884,  1997,  1996,  2812,
         2005,  2107, 20611,  1012,  2006,  1996,  2060,  2192,  1010,  2065,
         1996,  4353,  2003,  6375,  1010,  2045,  2003,  2019,  5020,  3382,
         2005,  2151,  2047,  2951,  8875,  2000,  2991,  5973,  2306,   102])"
581,1,"['mean', 'range', 'leptokurtic', 'distributions', 'sample', 'sample size', 'data']", NEED FOR A SPREAD MEASURE,seg_129,"the range. the number of data points that fall in the vicinity of the mean or mode depends more on how fast the distributions tail-off in both directions. we expect less data points around the mean if the tailing-offs are slow, than otherwise. thus, there are likely to be more data points in the close proximity of the mean for leptokurtic distributions (defined in chapter 4) when sample size is large.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  1996,  2846,  1012,  1996,  2193,  1997,  2951,  2685,  2008,
         2991,  1999,  1996,  9884,  1997,  1996,  2812,  2030,  5549,  9041,
         2062,  2006,  2129,  3435,  1996, 20611,  5725,  1011,  2125,  1999,
         2119,  7826,  1012,  2057,  5987,  2625,  2951,  2685,  2105,  1996,
         2812,  2065,  1996,  5725,  2075,  1011, 12446,  2024,  4030,  1010,
         2084,  4728,  1012,  2947,  1010,  2045,  2024,  3497,  2000,  2022,
         2062,  2951,  2685,  1999,  1996,  2485, 10039,  1997,  1996,  2812,
         2005,  3393, 13876, 21940, 28228,  2278, 20611,  1006,  4225,  1999,
         3127,  1018,  1007,  2043,  7099,  2946,  2003,  2312,  1012,   102])"
582,1,"['variability', 'population', 'confidence', 'median', 'symmetric', 'location', 'mean', 'frequency', 'sampling', 'data', 'standard deviations', 'probability', 'location measure', 'dispersion', 'standard', 'distributions', 'sample', 'deviations', 'distribution', 'average']", NEED FOR A SPREAD MEASURE,seg_129,"this shows that a location measure alone is insufficient to fully understand a data distribution. assume that we have somehow found the mean (average) of a population. in repeated sampling from that population, why do some data points fall above the mean, and some others fall below? can we predict with some confidence how far from a location measure (e.g., the mean) are the new data values likely to lie? what is the probability that a randomly chosen new data value will fall above the mean or two standard deviations away (in both directions) from the mean? these types of queries can be answered using spread measures discussed below. as the median divides the total frequency into two equal halves, we know that there is a 50–50 chance that a new sample value will be above or below the median. hence for symmetric unimodal distributions, we expect that there is an equal chance for new data values to fall above or below the mean too. however, to quantify “how far from a location measure (such as the mean) they are likely to lie,” we need well-defined measures. these are called measures of dispersion or spread (we will use “measures of spread,” “dispersion measure,” or measure of variability synonymously).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  2023,  3065,  2008,  1037,  3295,  5468,  2894,  2003, 13990,
         2000,  3929,  3305,  1037,  2951,  4353,  1012,  7868,  2008,  2057,
         2031,  5064,  2179,  1996,  2812,  1006,  2779,  1007,  1997,  1037,
         2313,  1012,  1999,  5567, 16227,  2013,  2008,  2313,  1010,  2339,
         2079,  2070,  2951,  2685,  2991,  2682,  1996,  2812,  1010,  1998,
         2070,  2500,  2991,  2917,  1029,  2064,  2057, 16014,  2007,  2070,
         7023,  2129,  2521,  2013,  1037,  3295,  5468,  1006,  1041,  1012,
         1043,  1012,  1010,  1996,  2812,  1007,  2024,  1996,  2047,  2951,
         5300,  3497,  2000,  4682,  1029,  2054,  2003,  1996,  9723,  2008,
         1037, 18154,  4217,  2047,  2951,  3643,  2097,  2991,  2682,  1996,
         2812,  2030,  2048,  3115, 24353,  2015,  2185,  1006,  1999,  2119,
         7826,  1007,  2013,  1996,  2812,  1029,  2122,  4127,  1997, 10861,
         5134,  2064,  2022,  4660,  2478,  3659,  5761,  6936,  2917,  1012,
         2004,  1996,  3991, 20487,  1996,  2561,  6075,  2046,  2048,  5020,
        23672,  1010,  2057,  2113,  2008,  2045,  2003,  1037,  2753,  1516,
         2753,  3382,  2008,  1037,  2047,  7099,  3643,  2097,  2022,  2682,
         2030,  2917,  1996,  3991,  1012,  6516,  2005, 19490,  4895, 16339,
         9305, 20611,  1010,  2057,  5987,  2008,  2045,  2003,  2019,  5020,
         3382,  2005,  2047,  2951,  5300,  2000,  2991,  2682,  2030,  2917,
         1996,  2812,  2205,  1012,  2174,  1010,  2000, 24110, 27351,  1523,
         2129,  2521,  2013,  1037,  3295,  5468,  1006,  2107,  2004,  1996,
         2812,  1007,  2027,  2024,  3497,  2000,  4682,  1010,  1524,  2057,
         2342,  2092,  1011,  4225,  5761,  1012,  2122,  2024,  2170,  5761,
         1997,  4487, 17668, 10992,  2030,  3659,  1006,  2057,  2097,  2224,
         1523,  5761,  1997,  3659,  1010,  1524,  1523,  4487, 17668, 10992,
         5468,  1010,  1524,  2030,  5468,  1997, 28436, 22594,  2135,  1007,
         1012,   102])"
583,1,"['variability', 'data', 'dispersion measure', 'observations', 'dispersion', 'sample', 'statistic']", NEED FOR A SPREAD MEASURE,seg_129,"definition 3.1 a univariate dispersion measure concisely summarizes the extent of spread or variability of data in a sample of size n ≥ 2 using a well-defined statistic, with a minimum value of zero indicating that there is no spread; and an increasingly positive value indicating the extent of spread of observations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  6210,  1017,  1012,  1015,  1037,  4895, 28739, 13143,  4487,
        17668, 10992,  5468,  9530, 18380,  2135,  7680,  7849, 10057,  1996,
         6698,  1997,  3659,  2030, 28436,  1997,  2951,  1999,  1037,  7099,
         1997,  2946,  1050,  1609,  1016,  2478,  1037,  2092,  1011,  4225,
        28093,  6553,  1010,  2007,  1037,  6263,  3643,  1997,  5717,  8131,
         2008,  2045,  2003,  2053,  3659,  1025,  1998,  2019,  6233,  3893,
         3643,  8131,  1996,  6698,  1997,  3659,  1997,  9420,  1012,   102])"
584,1,"['density function', 'population', 'dispersion measures', 'location', 'ratio measure', 'case', 'parameter', 'function', 'linear', 'nonlinear', 'dispersion', 'range', 'variance', 'sample', 'location measures']", NEED FOR A SPREAD MEASURE,seg_129,"as the zero value is well-defined, this is a ratio measure. increasing values of it indicate that the sample values are more spread-out over its range. the extent of this spread depends on whether the measure is linear or nonlinear. as shown below, some of the dispersion measures (such as the variance) are upper-bounded by the square of the range. as in the case of location measures, these are also applicable to sample and population. a population parameter is called a scale-parameter if the density function takes the form (1∕ ) f (x∕ ).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  2004,  1996,  5717,  3643,  2003,  2092,  1011,  4225,  1010,
         2023,  2003,  1037,  6463,  5468,  1012,  4852,  5300,  1997,  2009,
         5769,  2008,  1996,  7099,  5300,  2024,  2062,  3659,  1011,  2041,
         2058,  2049,  2846,  1012,  1996,  6698,  1997,  2023,  3659,  9041,
         2006,  3251,  1996,  5468,  2003,  7399,  2030, 27400,  1012,  2004,
         3491,  2917,  1010,  2070,  1997,  1996,  4487, 17668, 10992,  5761,
         1006,  2107,  2004,  1996, 23284,  1007,  2024,  3356,  1011, 10351,
         2011,  1996,  2675,  1997,  1996,  2846,  1012,  2004,  1999,  1996,
         2553,  1997,  3295,  5761,  1010,  2122,  2024,  2036, 12711,  2000,
         7099,  1998,  2313,  1012,  1037,  2313, 16381,  2003,  2170,  1037,
         4094,  1011, 16381,  2065,  1996,  4304,  3853,  3138,  1996,  2433,
         1006,   100,  1007,  1042,  1006,   100,  1007,  1012,   102])"
585,1,"['sample', 'case']", NEED FOR A SPREAD MEASURE,seg_129,"there are two situations in which a univariate sample measure of spread can be zero—(i) if the sample contains just one item (n = 1), (ii) if all sample values coincide. in case (i) there is no spread as the sample is a singleton. this is symbolically written as s1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  2045,  2024,  2048,  8146,  1999,  2029,  1037,  4895, 28739,
        13143,  7099,  5468,  1997,  3659,  2064,  2022,  5717,  1517,  1006,
         1045,  1007,  2065,  1996,  7099,  3397,  2074,  2028,  8875,  1006,
         1050,  1027,  1015,  1007,  1010,  1006,  2462,  1007,  2065,  2035,
         7099,  5300, 19680,  1012,  1999,  2553,  1006,  1045,  1007,  2045,
         2003,  2053,  3659,  2004,  1996,  7099,  2003,  1037, 28159,  1012,
         2023,  2003, 12613,  3973,  2517,  2004,  1055,  2487,   102])"
586,1,"['sample', 'sample variance', 'variance']", NEED FOR A SPREAD MEASURE,seg_129,"2 = 0, where sn2 denotes the sample variance (defined in p. 77). note that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  1016,  1027,  1014,  1010,  2073,  1055,  2078,  2475, 14796,
         1996,  7099, 23284,  1006,  4225,  1999,  1052,  1012,  6255,  1007,
         1012,  3602,  2008,   102])"
587,1,"['mean', 'range', 'deviation', 'variance', 'observations', 'sample', 'sample variance', 'case']", NEED FOR A SPREAD MEASURE,seg_129,"if the sample variance uses (n − 1) in the denominator, we get a zero (1 − 1) in the denominator. hence, the sample variance is undefined (it is not zero) if (n − 1) is used in the denominator, and is zero if n is used. in case (ii), all the sample observations are the same (xi = xj = c ∀i, j). this is as equal as having a singleton sample. the mean in this case is c, so that each of the deviation terms in the numerator of s2n is zero. the sample range and mean absolute deviation are both zero as well (as the minimum and maximum are both c).",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2342, 2005, 1037, 3659, 5468])","tensor([  101,  2065,  1996,  7099, 23284,  3594,  1006,  1050,  1597,  1015,
         1007,  1999,  1996,  7939, 20936, 27413,  1010,  2057,  2131,  1037,
         5717,  1006,  1015,  1597,  1015,  1007,  1999,  1996,  7939, 20936,
        27413,  1012,  6516,  1010,  1996,  7099, 23284,  2003,  6151, 28344,
         1006,  2009,  2003,  2025,  5717,  1007,  2065,  1006,  1050,  1597,
         1015,  1007,  2003,  2109,  1999,  1996,  7939, 20936, 27413,  1010,
         1998,  2003,  5717,  2065,  1050,  2003,  2109,  1012,  1999,  2553,
         1006,  2462,  1007,  1010,  2035,  1996,  7099,  9420,  2024,  1996,
         2168,  1006,  8418,  1027,  1060,  3501,  1027,  1039,   100,  1010,
         1046,  1007,  1012,  2023,  2003,  2004,  5020,  2004,  2383,  1037,
        28159,  7099,  1012,  1996,  2812,  1999,  2023,  2553,  2003,  1039,
         1010,  2061,  2008,  2169,  1997,  1996, 24353,  3408,  1999,  1996,
        16371,  5017,  8844,  1997,  1055,  2475,  2078,  2003,  5717,  1012,
         1996,  7099,  2846,  1998,  2812,  7619, 24353,  2024,  2119,  5717,
         2004,  2092,  1006,  2004,  1996,  6263,  1998,  4555,  2024,  2119,
         1039,  1007,  1012,   102])"
588,1,"['change of origin', 'table', 'median', 'mean', 'standard deviation', 'data', 'deviation', 'linear', 'change of scale', 'nonlinear', 'standard', 'sample variance', 'transformation', 'range', 'variance', 'sample', 'sample size', 'deviations']", Categorization of Dispersion Measures,seg_131,"sample range, inter-quartile range (iqr), mean absolute deviations (from the mean or median), sample variance, and standard deviation are the most commonly used measures of spread. while the sample variance additively combines the squared deviations of sample values from its mean, the mean absolute deviation combines the absolute values of deviations additively, and the range-based measures (sample range, iqr, etc.) combine the appropriate extremes of sample values linearly. all dispersion-measures quantify the spread of data into a positive numeric scale. they are not affected by a change of origin transformation (as the entire data are translated linearly by this transformation). all of the measures defined below are affected by a change of scale transformation. there are many ways to categorize the measures of spread (see table 3.1)—(i) linear and nonlinear measures, (ii) pivotal measures and pivot-less measures, (iii) measures that utilize sample size and those that do not use sample size, and (iv) additive and nonadditive measures.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  7099,  2846,  1010,  6970,  1011, 24209,  8445,  9463,  2846,
         1006, 26264,  2099,  1007,  1010,  2812,  7619, 24353,  2015,  1006,
         2013,  1996,  2812,  2030,  3991,  1007,  1010,  7099, 23284,  1010,
         1998,  3115, 24353,  2024,  1996,  2087,  4141,  2109,  5761,  1997,
         3659,  1012,  2096,  1996,  7099, 23284, 29167,  2135, 13585,  1996,
        19942, 24353,  2015,  1997,  7099,  5300,  2013,  2049,  2812,  1010,
         1996,  2812,  7619, 24353, 13585,  1996,  7619,  5300,  1997, 24353,
         2015, 29167,  2135,  1010,  1998,  1996,  2846,  1011,  2241,  5761,
         1006,  7099,  2846,  1010, 26264,  2099,  1010,  4385,  1012,  1007,
        11506,  1996,  6413, 28800,  1997,  7099,  5300,  7399,  2135,  1012,
         2035,  4487, 17668, 10992,  1011,  5761, 24110, 27351,  1996,  3659,
         1997,  2951,  2046,  1037,  3893, 16371, 25531,  4094,  1012,  2027,
         2024,  2025,  5360,  2011,  1037,  2689,  1997,  4761,  8651,  1006,
         2004,  1996,  2972,  2951,  2024,  5421,  7399,  2135,  2011,  2023,
         8651,  1007,  1012,  2035,  1997,  1996,  5761,  4225,  2917,  2024,
         5360,  2011,  1037,  2689,  1997,  4094,  8651,  1012,  2045,  2024,
         2116,  3971,  2000,  4937, 20265, 25709,  1996,  5761,  1997,  3659,
         1006,  2156,  2795,  1017,  1012,  1015,  1007,  1517,  1006,  1045,
         1007,  7399,  1998, 27400,  5761,  1010,  1006,  2462,  1007, 20369,
         5761,  1998, 14255, 22994,  1011,  2625,  5761,  1010,  1006,  3523,
         1007,  5761,  2008, 16462,  7099,  2946,  1998,  2216,  2008,  2079,
         2025,  2224,  7099,  2946,  1010,  1998,  1006,  4921,  1007, 29167,
         1998,  2512,  4215, 23194,  3512,  5761,  1012,   102])"
589,1,"['function', 'range', 'linear', 'functions', 'nonlinear', 'sample']", Categorization of Dispersion Measures,seg_131,"1. linear and nonlinear measures linear measures combine sample values as simple linear functions or their deviations from pivotal values. for instance, the sample range is a linear function of the first and last sample values as r = (x(n) − x(1)) (see section 3.2, p. 71).",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1015,  1012,  7399,  1998, 27400,  5761,  7399,  5761, 11506,
         7099,  5300,  2004,  3722,  7399,  4972,  2030,  2037, 24353,  2015,
         2013, 20369,  5300,  1012,  2005,  6013,  1010,  1996,  7099,  2846,
         2003,  1037,  7399,  3853,  1997,  1996,  2034,  1998,  2197,  7099,
         5300,  2004,  1054,  1027,  1006,  1060,  1006,  1050,  1007,  1597,
         1060,  1006,  1015,  1007,  1007,  1006,  2156,  2930,  1017,  1012,
         1016,  1010,  1052,  1012,  6390,  1007,  1012,   102])"
590,1,"['mean', 'deviation']", Categorization of Dispersion Measures,seg_131,the mean deviation n,tensor(1),"tensor([0., 0., 1., 1., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1996,  2812, 24353,  1050,   102])"
591,1,"['mean', 'function', 'linear', 'nonlinear', 'sample', 'deviations']", Categorization of Dispersion Measures,seg_131,"on the other hand, is a linear function of deviations measured from the mean xn. nonlinear measures combine sample values nonlinearly (as square-roots, squares, or higher powers). nonlinear measures are the preferred choice in some applications because they often inflate (blow-up) the deviations so that the computed value is larger than those obtained from linear measures.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  2006,  1996,  2060,  2192,  1010,  2003,  1037,  7399,  3853,
         1997, 24353,  2015,  7594,  2013,  1996,  2812,  1060,  2078,  1012,
        27400,  5761, 11506,  7099,  5300, 27400,  2135,  1006,  2004,  2675,
         1011,  6147,  1010, 14320,  1010,  2030,  3020,  4204,  1007,  1012,
        27400,  5761,  2024,  1996,  6871,  3601,  1999,  2070,  5097,  2138,
         2027,  2411,  1999, 10258,  3686,  1006,  6271,  1011,  2039,  1007,
         1996, 24353,  2015,  2061,  2008,  1996, 24806,  3643,  2003,  3469,
         2084,  2216,  4663,  2013,  7399,  5761,  1012,   102])"
592,1,"['location', 'function', 'location measure', 'sample', 'dispersion', 'dispersion measures']", Categorization of Dispersion Measures,seg_131,2. pivotal measures and pivot-less measures some of the dispersion measures use a location measure as a pivot to quantify the spread (see below). recall from chapter 2 that some of the location measures (such as the means) are expressible as a function of the sample values.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1016,  1012, 20369,  5761,  1998, 14255, 22994,  1011,  2625,
         5761,  2070,  1997,  1996,  4487, 17668, 10992,  5761,  2224,  1037,
         3295,  5468,  2004,  1037, 14255, 22994,  2000, 24110, 27351,  1996,
         3659,  1006,  2156,  2917,  1007,  1012,  9131,  2013,  3127,  1016,
         2008,  2070,  1997,  1996,  3295,  5761,  1006,  2107,  2004,  1996,
         2965,  1007,  2024,  4671,  7028,  2004,  1037,  3853,  1997,  1996,
         7099,  5300,  1012,   102])"
593,1,"['location', 'function', 'range', 'quartile deviation', 'deviation', 'location measure', 'sample', 'quartile', 'location measures']", Categorization of Dispersion Measures,seg_131,"by expanding such location measures as a function of the sample values, it is possible to obtain those spread measures without an explicit location measure. nevertheless, this criterion allows us to distinguish some spread measures from the others. exceptions are the range, iqr, and quartile deviation (qd) that do not use a location measure as a pivot.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  2011,  9186,  2107,  3295,  5761,  2004,  1037,  3853,  1997,
         1996,  7099,  5300,  1010,  2009,  2003,  2825,  2000,  6855,  2216,
         3659,  5761,  2302,  2019, 13216,  3295,  5468,  1012,  6600,  1010,
         2023, 19229,  4473,  2149,  2000, 10782,  2070,  3659,  5761,  2013,
         1996,  2500,  1012, 11790,  2024,  1996,  2846,  1010, 26264,  2099,
         1010,  1998, 24209,  8445,  9463, 24353,  1006,  1053,  2094,  1007,
         2008,  2079,  2025,  2224,  1037,  3295,  5468,  2004,  1037, 14255,
        22994,  1012,   102])"
594,1,"['sample', 'sample size']", Categorization of Dispersion Measures,seg_131,3. measures that utilize the sample size,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1017,  1012,  5761,  2008, 16462,  1996,  7099,  2946,   102])"
595,1,"['coefficient', 'mean', 'coefficient of variation', 'skewed', 'skewed distributions', 'variation', 'range', 'variance', 'distributions', 'sample', 'sample size', 'deviations']", Categorization of Dispersion Measures,seg_131,"the variance, coefficient of variation (cv), and mean deviations discussed below fully utilize each and every sample value (and thus the sample size n). on the contrary, the sample range utilizes only the minimum and maximum; and iqr utilizes only two of the sample values denoted by q1 and q3. the range does not distinguish between multi-modal distributions, skewed distributions, and peaked distributions. hence, the range and iqr are called minimax measures.",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1996, 23284,  1010, 19064,  1997,  8386,  1006, 26226,  1007,
         1010,  1998,  2812, 24353,  2015,  6936,  2917,  3929, 16462,  2169,
         1998,  2296,  7099,  3643,  1006,  1998,  2947,  1996,  7099,  2946,
         1050,  1007,  1012,  2006,  1996, 10043,  1010,  1996,  7099,  2846,
        21852,  2069,  1996,  6263,  1998,  4555,  1025,  1998, 26264,  2099,
        21852,  2069,  2048,  1997,  1996,  7099,  5300, 19537,  2011,  1053,
         2487,  1998,  1053,  2509,  1012,  1996,  2846,  2515,  2025, 10782,
         2090,  4800,  1011, 16913,  2389, 20611,  1010, 15315,  7974,  2098,
        20611,  1010,  1998,  6601, 20611,  1012,  6516,  1010,  1996,  2846,
         1998, 26264,  2099,  2024,  2170,  7163, 17848,  5761,  1012,   102])"
596,0,[], Categorization of Dispersion Measures,seg_131,4. additive and nonadditive measures,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1018,  1012, 29167,  1998,  2512,  4215, 23194,  3512,  5761,
          102])"
597,1,"['range', 'variance', 'information', 'sample', 'method', 'case']", Categorization of Dispersion Measures,seg_131,"additive measures are those that can be found by divide-and-conquer (d c) method without further information. in other words, suppose we divide a sample into two subsamples and find the measure values from these subsamples. if we could combine these values obtained independently from the subsamples without additional information to find the corresponding measure for the entire sample, then it is called additive. in the case of sample range, we need extra information to find the range of the original sample. if a sample s is divided into two subsamples s1 and s2, and we find the ranges r1 and r2, we cannot find the range of the original sample s unless the subsample minimums and maximums are both known. sometimes the subsamples may be such that all elements in one of them is less than (or greater than) all elements in the other. if such overlap information about subsamples is known, we could sometimes find the range using the minimum of lower subsample and maximum of the upper subsample. however, the overlap can occur in many ways—(i) s1 completely subsumes s2, (ii) s2 completely subsumes s1, (iii) minimum of s2 lies between minimum and maximum of s1, or vice versa, and (iv) minimum of s2 is greater than maximum of s1 or vice versa. in this case, we could obtain range(s) = max(max(s1), max(s2)) − min(min(s1), min(s2)). suppose the subsamples s1 and s2 are nonoverlapping, and additionally we know that elements in s1 are all less than the elements in s2. in this particular case, we could find the range as range(s) = max(s2) − min(s1). similar arguments hold when the minimum element of s1 is greater than the maximum of s2, in which case the roles of s1 and s2 simply get swapped and we obtain range (s) = max(s1) − min(s2). variance is an additive measure.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101, 29167,  5761,  2024,  2216,  2008,  2064,  2022,  2179,  2011,
        11443,  1011,  1998,  1011, 16152,  1006,  1040,  1039,  1007,  4118,
         2302,  2582,  2592,  1012,  1999,  2060,  2616,  1010,  6814,  2057,
        11443,  1037,  7099,  2046,  2048,  4942, 21559, 21112,  1998,  2424,
         1996,  5468,  5300,  2013,  2122,  4942, 21559, 21112,  1012,  2065,
         2057,  2071, 11506,  2122,  5300,  4663,  9174,  2013,  1996,  4942,
        21559, 21112,  2302,  3176,  2592,  2000,  2424,  1996,  7978,  5468,
         2005,  1996,  2972,  7099,  1010,  2059,  2009,  2003,  2170, 29167,
         1012,  1999,  1996,  2553,  1997,  7099,  2846,  1010,  2057,  2342,
         4469,  2592,  2000,  2424,  1996,  2846,  1997,  1996,  2434,  7099,
         1012,  2065,  1037,  7099,  1055,  2003,  4055,  2046,  2048,  4942,
        21559, 21112,  1055,  2487,  1998,  1055,  2475,  1010,  1998,  2057,
         2424,  1996,  8483,  1054,  2487,  1998,  1054,  2475,  1010,  2057,
         3685,  2424,  1996,  2846,  1997,  1996,  2434,  7099,  1055,  4983,
         1996,  4942, 21559, 10814,  6263,  2015,  1998,  4555,  2015,  2024,
         2119,  2124,  1012,  2823,  1996,  4942, 21559, 21112,  2089,  2022,
         2107,  2008,  2035,  3787,  1999,  2028,  1997,  2068,  2003,  2625,
         2084,  1006,  2030,  3618,  2084,  1007,  2035,  3787,  1999,  1996,
         2060,  1012,  2065,  2107, 17702,  2592,  2055,  4942, 21559, 21112,
         2003,  2124,  1010,  2057,  2071,  2823,  2424,  1996,  2846,  2478,
         1996,  6263,  1997,  2896,  4942, 21559, 10814,  1998,  4555,  1997,
         1996,  3356,  4942, 21559, 10814,  1012,  2174,  1010,  1996, 17702,
         2064,  5258,  1999,  2116,  3971,  1517,  1006,  1045,  1007,  1055,
         2487,  3294,  4942, 23545,  2015,  1055,  2475,  1010,  1006,  2462,
         1007,  1055,  2475,  3294,  4942, 23545,  2015,  1055,  2487,  1010,
         1006,  3523,  1007,  6263,  1997,  1055,  2475,  3658,  2090,  6263,
         1998,  4555,  1997,  1055,  2487,  1010,  2030,  3580, 18601,  1010,
         1998,  1006,  4921,  1007,  6263,  1997,  1055,  2475,  2003,  3618,
         2084,  4555,  1997,  1055,  2487,  2030,  3580, 18601,  1012,  1999,
         2023,  2553,  1010,  2057,  2071,  6855,  2846,  1006,  1055,  1007,
         1027,  4098,  1006,  4098,  1006,  1055,  2487,  1007,  1010,  4098,
         1006,  1055,  2475,  1007,  1007,  1597,  8117,  1006,  8117,  1006,
         1055,  2487,  1007,  1010,  8117,  1006,  1055,  2475,  1007,  1007,
         1012,  6814,  1996,  4942, 21559, 21112,  1055,  2487,  1998,  1055,
         2475,  2024,  2512,  7840,  2721, 14853,  1010,  1998,  5678,  2057,
         2113,  2008,  3787,  1999,  1055,  2487,  2024,  2035,  2625,  2084,
         1996,  3787,  1999,  1055,  2475,  1012,  1999,  2023,  3327,  2553,
         1010,  2057,  2071,  2424,  1996,  2846,  2004,  2846,  1006,  1055,
         1007,  1027,  4098,  1006,  1055,  2475,  1007,  1597,  8117,  1006,
         1055,  2487,  1007,  1012,  2714,  9918,  2907,  2043,  1996,  6263,
         5783,  1997,  1055,  2487,  2003,  3618,  2084,  1996,  4555,  1997,
         1055,  2475,  1010,  1999,  2029,  2553,  1996,  4395,  1997,  1055,
         2487,  1998,  1055,  2475,  3432,  2131, 29176,  1998,  2057,  6855,
         2846,  1006,  1055,  1007,  1027,  4098,  1006,  1055,  2487,  1007,
         1597,  8117,  1006,  1055,  2475,  1007,  1012, 23284,  2003,  2019,
        29167,  5468,  1012,   102])"
598,0,[], Categorization of Dispersion Measures,seg_131,5. absolute and relative measures,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([ 101, 1019, 1012, 7619, 1998, 5816, 5761,  102])"
599,1,"['mean', 'range', 'deviation', 'variance', 'observations', 'dispersion', 'standard deviation', 'deviations', 'standard', 'dispersion measures', 'average']", Categorization of Dispersion Measures,seg_131,"some of the dispersion measures are absolute. they are expressed in the same unit as that of the observations. examples of absolute dispersion measures are the range, qd, mean deviations, variance, and standard deviation. variance, being the average of the squared deviations of observations from their mean, is expressed in the unit squared. relative measures, on the other hand, do not",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  2070,  1997,  1996,  4487, 17668, 10992,  5761,  2024,  7619,
         1012,  2027,  2024,  5228,  1999,  1996,  2168,  3131,  2004,  2008,
         1997,  1996,  9420,  1012,  4973,  1997,  7619,  4487, 17668, 10992,
         5761,  2024,  1996,  2846,  1010,  1053,  2094,  1010,  2812, 24353,
         2015,  1010, 23284,  1010,  1998,  3115, 24353,  1012, 23284,  1010,
         2108,  1996,  2779,  1997,  1996, 19942, 24353,  2015,  1997,  9420,
         2013,  2037,  2812,  1010,  2003,  5228,  1999,  1996,  3131, 19942,
         1012,  5816,  5761,  1010,  2006,  1996,  2060,  2192,  1010,  2079,
         2025,   102])"
600,1,"['variability', 'coefficient', 'median', 'location', 'mean', 'standard deviation', 'data', 'deviation', 'percentage', 'dispersion', 'standard', 'rates', 'variance', 'sample', 'sample standard deviation', 'deviations', 'sample mean', 'location measures']", Categorization of Dispersion Measures,seg_131,"depend on a unit. examples are the coefficient of dispersion and cv. absolute measures are easy to convert into relative measures. simply find the unit in which they are expressed and divide by another measure (usually one of the location measures) expressed in the same unit. sample standard deviation (s), being the positive square-root of variance (s2), has the same unit as the data. hence, we could divide s by any of the location measures (mean, median, or mode) to get a relative measure. as the standard deviation uses the sample mean as pivotal measure to take the deviations, it is customary to use the mean in the denominator to get a relative measure s∕x. owing to the possibility of x becoming zero (resulting in a very large value) this measure is defined only for x ≠ 0. this measure called the cv (p. 82) can also be expressed as a percentage. as it is dimensionless, it can be used to compare the variability of data measured in different units. for instance, data collected from different geographical regions that have different currencies (dollars, euro, yen, etc.) can be compared without worrying about the currency exchange rates or conversions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101, 12530,  2006,  1037,  3131,  1012,  4973,  2024,  1996, 19064,
         1997,  4487, 17668, 10992,  1998, 26226,  1012,  7619,  5761,  2024,
         3733,  2000, 10463,  2046,  5816,  5761,  1012,  3432,  2424,  1996,
         3131,  1999,  2029,  2027,  2024,  5228,  1998, 11443,  2011,  2178,
         5468,  1006,  2788,  2028,  1997,  1996,  3295,  5761,  1007,  5228,
         1999,  1996,  2168,  3131,  1012,  7099,  3115, 24353,  1006,  1055,
         1007,  1010,  2108,  1996,  3893,  2675,  1011,  7117,  1997, 23284,
         1006,  1055,  2475,  1007,  1010,  2038,  1996,  2168,  3131,  2004,
         1996,  2951,  1012,  6516,  1010,  2057,  2071, 11443,  1055,  2011,
         2151,  1997,  1996,  3295,  5761,  1006,  2812,  1010,  3991,  1010,
         2030,  5549,  1007,  2000,  2131,  1037,  5816,  5468,  1012,  2004,
         1996,  3115, 24353,  3594,  1996,  7099,  2812,  2004, 20369,  5468,
         2000,  2202,  1996, 24353,  2015,  1010,  2009,  2003, 16120,  2000,
         2224,  1996,  2812,  1999,  1996,  7939, 20936, 27413,  2000,  2131,
         1037,  5816,  5468,   100,  1012, 11427,  2000,  1996,  6061,  1997,
         1060,  3352,  5717,  1006,  4525,  1999,  1037,  2200,  2312,  3643,
         1007,  2023,  5468,  2003,  4225,  2069,  2005,  1060,  1027,  1014,
         1012,  2023,  5468,  2170,  1996, 26226,  1006,  1052,  1012,  6445,
         1007,  2064,  2036,  2022,  5228,  2004,  1037,  7017,  1012,  2004,
         2009,  2003,  9812,  3238,  1010,  2009,  2064,  2022,  2109,  2000,
        12826,  1996, 28436,  1997,  2951,  7594,  1999,  2367,  3197,  1012,
         2005,  6013,  1010,  2951,  5067,  2013,  2367, 10056,  4655,  2008,
         2031,  2367, 12731, 14343, 14767,  1006,  6363,  1010,  9944,  1010,
        18371,  1010,  4385,  1012,  1007,  2064,  2022,  4102,  2302, 15366,
         2055,  1996,  9598,  3863,  6165,  2030, 25834,  1012,   102])"
601,1,"['range', 'variance', 'distance metric', 'dispersion', 'sample', 'sample variance', 'dispersion measures', 'case']", Categorization of Dispersion Measures,seg_131,"6. distance-based measures some of the dispersion measures can be cast in distance metric form. as an example, we can interpret the univariate sample range as either the manhattan distance between xn and x1 as |xn − x1|, or as the euclidean distance as [(xn − x1)1∕2]2. the sample variance in the univariate case is the squared",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1020,  1012,  3292,  1011,  2241,  5761,  2070,  1997,  1996,
         4487, 17668, 10992,  5761,  2064,  2022,  3459,  1999,  3292, 12046,
         2433,  1012,  2004,  2019,  2742,  1010,  2057,  2064, 17841,  1996,
         4895, 28739, 13143,  7099,  2846,  2004,  2593,  1996,  7128,  3292,
         2090,  1060,  2078,  1998,  1060,  2487,  2004,  1064,  1060,  2078,
         1597,  1060,  2487,  1064,  1010,  2030,  2004,  1996, 25826,  3292,
         2004,  1031,  1006,  1060,  2078,  1597,  1060,  2487,  1007,   100,
         1033,  1016,  1012,  1996,  7099, 23284,  1999,  1996,  4895, 28739,
        13143,  2553,  2003,  1996, 19942,   102])"
602,1,['data'], Categorization of Dispersion Measures,seg_131,"1 (x − xn)′ (x − xn), where x is the data vector of size",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([ 101, 1015, 1006, 1060, 1597, 1060, 2078, 1007, 1531, 1006, 1060, 1597,
        1060, 2078, 1007, 1010, 2073, 1060, 2003, 1996, 2951, 9207, 1997, 2946,
         102])"
603,1,"['mean', 'sample', 'average', 'sample mean']", Categorization of Dispersion Measures,seg_131,"n, and xn is an n-vector in which each element is the sample mean xn (i.e., n values ⏞⏞⏞⏞⏞⏞ ⏞⏞⏞⏞⏞ ′ xn = {xn, xn, … , xn}). here, n denotes the appropriate divisor used (either n = n − 1, or n = n; see discussion below). similarly, the average absolute",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1050,  1010,  1998,  1060,  2078,  2003,  2019,  1050,  1011,
         9207,  1999,  2029,  2169,  5783,  2003,  1996,  7099,  2812,  1060,
         2078,  1006,  1045,  1012,  1041,  1012,  1010,  1050,  5300,   100,
          100,  1531,  1060,  2078,  1027,  1063,  1060,  2078,  1010,  1060,
         2078,  1010,  1529,  1010,  1060,  2078,  1065,  1007,  1012,  2182,
         1010,  1050, 14796,  1996,  6413,  4487, 11365,  2953,  2109,  1006,
         2593,  1050,  1027,  1050,  1597,  1015,  1010,  2030,  1050,  1027,
         1050,  1025,  2156,  6594,  2917,  1007,  1012,  6660,  1010,  1996,
         2779,  7619,   102])"
604,0,['n'], Categorization of Dispersion Measures,seg_131,deviation (aad) can be written as aad = n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101, 24353,  1006,  9779,  2094,  1007,  2064,  2022,  2517,  2004,
         9779,  2094,  1027,  1050,   102])"
605,0,[], Categorization of Dispersion Measures,seg_131,written in vector form in which each component is √|xi − xn|. the analogue in,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  2517,  1999,  9207,  2433,  1999,  2029,  2169,  6922,  2003,
         1600,  1064,  8418,  1597,  1060,  2078,  1064,  1012,  1996, 21800,
         1999,   102])"
606,1,"['sample', 'case']", Categorization of Dispersion Measures,seg_131,"the multivariate case is the mahalanobis distance (x − xn)′s−1(x − xn), where s is the pooled sample variance–covariance matrix.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  4487, 17668, 10992,  5761])","tensor([  101,  1996,  4800, 10755, 13143,  2553,  2003,  1996, 27913,  6761,
        18477,  3292,  1006,  1060,  1597,  1060,  2078,  1007,  1531,  1055,
        27944,  1006,  1060,  1597,  1060,  2078,  1007,  1010,  2073,  1055,
         2003,  1996, 19107,  2094,  7099, 23284,  1516,  2522, 10755, 28335,
         8185,  1012,   102])"
607,1,"['location', 'variability', 'mean', 'range', 'vary', 'information', 'population', 'sample', 'samples', 'data']", RANGE,seg_133,"the sample range can throw more insight into the inherent variability in a population. suppose repeated samples are taken from a population and the range is updated each time. if it does not vary very much, it is an indication that we have captured most of the variability into the sample. as an example, if the range of temperatures in 24 h for two cities are the same, we cannot conclude that both cities have the same weather because one city, say on the sea-front, might have cooled faster at night whereas another city in mid-plains might have cooled slower. if we have the additional information that the mean temperature during the 24-h period was almost the same, we could have a better perception regarding the weather at the two cities. thus, a measure of location along with a spread measure can describe the nature of our data in a better way than either",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([2846]),"tensor([  101,  1996,  7099,  2846,  2064,  5466,  2062, 12369,  2046,  1996,
        16112, 28436,  1999,  1037,  2313,  1012,  6814,  5567,  8168,  2024,
         2579,  2013,  1037,  2313,  1998,  1996,  2846,  2003,  7172,  2169,
         2051,  1012,  2065,  2009,  2515,  2025,  8137,  2200,  2172,  1010,
         2009,  2003,  2019, 12407,  2008,  2057,  2031,  4110,  2087,  1997,
         1996, 28436,  2046,  1996,  7099,  1012,  2004,  2019,  2742,  1010,
         2065,  1996,  2846,  1997,  7715,  1999,  2484,  1044,  2005,  2048,
         3655,  2024,  1996,  2168,  1010,  2057,  3685, 16519,  2008,  2119,
         3655,  2031,  1996,  2168,  4633,  2138,  2028,  2103,  1010,  2360,
         2006,  1996,  2712,  1011,  2392,  1010,  2453,  2031, 12981,  5514,
         2012,  2305,  6168,  2178,  2103,  1999,  3054,  1011,  8575,  2453,
         2031, 12981, 12430,  1012,  2065,  2057,  2031,  1996,  3176,  2592,
         2008,  1996,  2812,  4860,  2076,  1996,  2484,  1011,  1044,  2558,
         2001,  2471,  1996,  2168,  1010,  2057,  2071,  2031,  1037,  2488,
        10617,  4953,  1996,  4633,  2012,  1996,  2048,  3655,  1012,  2947,
         1010,  1037,  5468,  1997,  3295,  2247,  2007,  1037,  3659,  5468,
         2064,  6235,  1996,  3267,  1997,  2256,  2951,  1999,  1037,  2488,
         2126,  2084,  2593,   102])"
608,1,"['kurtosis', 'skewness', 'data']", RANGE,seg_133,"of them alone. as temperatures increase and decrease gradually, we can conclude that the weather is more or less the same. as shown below, even this cannot fully describe the data if skewness and kurtosis are also present.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([2846]),"tensor([  101,  1997,  2068,  2894,  1012,  2004,  7715,  3623,  1998,  9885,
         6360,  1010,  2057,  2064, 16519,  2008,  1996,  4633,  2003,  2062,
         2030,  2625,  1996,  2168,  1012,  2004,  3491,  2917,  1010,  2130,
         2023,  3685,  3929,  6235,  1996,  2951,  2065, 15315,  7974,  2791,
         1998,  9679, 12650,  2024,  2036,  2556,  1012,   102])"
609,1,"['observation', 'range', 'sample']", RANGE,seg_133,"definition 3.2 range of a sample is the difference between the largest and smallest observation of the sample. symbolically, if x = {x1, x2, ..xn} are the “n” sample values that are arranged in increasing order,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([2846]),"tensor([  101,  6210,  1017,  1012,  1016,  2846,  1997,  1037,  7099,  2003,
         1996,  4489,  2090,  1996,  2922,  1998, 10479,  8089,  1997,  1996,
         7099,  1012, 12613,  3973,  1010,  2065,  1060,  1027,  1063,  1060,
         2487,  1010,  1060,  2475,  1010,  1012,  1012,  1060,  2078,  1065,
         2024,  1996,  1523,  1050,  1524,  7099,  5300,  2008,  2024,  5412,
         1999,  4852,  2344,  1010,   102])"
610,1,"['ordinal data', 'range', 'interval', 'ordinal', 'coefficient', 'sample', 'data']", RANGE,seg_133,"the range is zero in only one particular case—when all of the sample values are the same. in all other situations, it is a positive number which is an integer when the sample values are integers. even if all data values are negative, the range is always positive as we are subtracting the minimum from the maximum. for instance, if x = { −11,−5,−3,−2}, the minimum is −11 and maximum is −2, so that the range is max − min = (−2) − (−11) = 11 − 2 = 9, where we have used the fact that maximum of negative numbers max(xi ∶ xi   0∀i) = −min(|xi|). range is defined for interval or ratio data too. it is also meaningful for numerically coded ordinal data, if the codes are equi-spaced. coefficient of range is defined as cr = (x(n) − x(1))∕(x(1) + x(n)), which is unit-less. if each of the sample values are positive, this measure lies in [0,1). if x(1) is negative, this measure could take any positive value. it is assumed that (x(1) + x(n)) is nonzero.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([2846]),"tensor([  101,  1996,  2846,  2003,  5717,  1999,  2069,  2028,  3327,  2553,
         1517,  2043,  2035,  1997,  1996,  7099,  5300,  2024,  1996,  2168,
         1012,  1999,  2035,  2060,  8146,  1010,  2009,  2003,  1037,  3893,
         2193,  2029,  2003,  2019, 16109,  2043,  1996,  7099,  5300,  2024,
        24028,  1012,  2130,  2065,  2035,  2951,  5300,  2024,  4997,  1010,
         1996,  2846,  2003,  2467,  3893,  2004,  2057,  2024,  4942,  6494,
        11873,  1996,  6263,  2013,  1996,  4555,  1012,  2005,  6013,  1010,
         2065,  1060,  1027,  1063,  1597, 14526,  1010,  1597,  2629,  1010,
         1597,  2509,  1010,  1597,  2475,  1065,  1010,  1996,  6263,  2003,
         1597, 14526,  1998,  4555,  2003,  1597,  2475,  1010,  2061,  2008,
         1996,  2846,  2003,  4098,  1597,  8117,  1027,  1006,  1597,  2475,
         1007,  1597,  1006,  1597, 14526,  1007,  1027,  2340,  1597,  1016,
         1027,  1023,  1010,  2073,  2057,  2031,  2109,  1996,  2755,  2008,
         4555,  1997,  4997,  3616,  4098,  1006,  8418,   100,  8418,   100,
         1007,  1027,  1597, 10020,  1006,  1064,  8418,  1064,  1007,  1012,
         2846,  2003,  4225,  2005, 13483,  2030,  6463,  2951,  2205,  1012,
         2009,  2003,  2036, 15902,  2005, 15973,  2135, 22402,  2030, 18979,
         2140,  2951,  1010,  2065,  1996,  9537,  2024,  1041, 15549,  1011,
        19835,  1012, 19064,  1997,  2846,  2003,  4225,  2004, 13675,  1027,
         1006,  1060,  1006,  1050,  1007,  1597,  1060,  1006,  1015,  1007,
         1007,   100,  1006,  1060,  1006,  1015,  1007,  1009,  1060,  1006,
         1050,  1007,  1007,  1010,  2029,  2003,  3131,  1011,  2625,  1012,
         2065,  2169,  1997,  1996,  7099,  5300,  2024,  3893,  1010,  2023,
         5468,  3658,  1999,  1031,  1014,  1010,  1015,  1007,  1012,  2065,
         1060,  1006,  1015,  1007,  2003,  4997,  1010,  2023,  5468,  2071,
         2202,  2151,  3893,  3643,  1012,  2009,  2003,  5071,  2008,  1006,
         1060,  1006,  1015,  1007,  1009,  1060,  1006,  1050,  1007,  1007,
         2003,  2512,  6290,  2080,  1012,   102])"
611,1,"['continuous', 'range', 'observations', 'sample', 'data', 'case']", Advantages of Range,seg_135,"the range is easy to compute and easy to interpret. we require only the smallest and largest observations of a sample to compute the range. this can be obtained in a single pass through the data (unless the data are sorted, in which case we can easily pick out the smallest and largest observations in two fetches). range is easy to update if new data arrive continuously. for instance, suppose data are received from a traffic sensor on a continuous basis. the data may indicate either the number of vehicles in a street or locality; or the speed of a passing vehicle. as new data arrive, it is a simple matter to check if it lies above or below the minimum and maximum to decide whether the range needs to be updated. if new data are within the so far accumulated min and max, the range is unaffected. the range can be bulk-updated if old minimum and maximum are known, and several new sample values are received. suppose a sample sk has minimum and maximum xk and xm",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12637,  1997,  2846])","tensor([  101,  1996,  2846,  2003,  3733,  2000, 24134,  1998,  3733,  2000,
        17841,  1012,  2057,  5478,  2069,  1996, 10479,  1998,  2922,  9420,
         1997,  1037,  7099,  2000, 24134,  1996,  2846,  1012,  2023,  2064,
         2022,  4663,  1999,  1037,  2309,  3413,  2083,  1996,  2951,  1006,
         4983,  1996,  2951,  2024, 19616,  1010,  1999,  2029,  2553,  2057,
         2064,  4089,  4060,  2041,  1996, 10479,  1998,  2922,  9420,  1999,
         2048, 18584,  2229,  1007,  1012,  2846,  2003,  3733,  2000, 10651,
         2065,  2047,  2951,  7180, 10843,  1012,  2005,  6013,  1010,  6814,
         2951,  2024,  2363,  2013,  1037,  4026, 13617,  2006,  1037,  7142,
         3978,  1012,  1996,  2951,  2089,  5769,  2593,  1996,  2193,  1997,
         4683,  1999,  1037,  2395,  2030, 10246,  1025,  2030,  1996,  3177,
         1997,  1037,  4458,  4316,  1012,  2004,  2047,  2951,  7180,  1010,
         2009,  2003,  1037,  3722,  3043,  2000,  4638,  2065,  2009,  3658,
         2682,  2030,  2917,  1996,  6263,  1998,  4555,  2000,  5630,  3251,
         1996,  2846,  3791,  2000,  2022,  7172,  1012,  2065,  2047,  2951,
         2024,  2306,  1996,  2061,  2521, 14830,  8117,  1998,  4098,  1010,
         1996,  2846,  2003, 24720,  1012,  1996,  2846,  2064,  2022,  9625,
         1011,  7172,  2065,  2214,  6263,  1998,  4555,  2024,  2124,  1010,
         1998,  2195,  2047,  7099,  5300,  2024,  2363,  1012,  6814,  1037,
         7099, 15315,  2038,  6263,  1998,  4555,  1060,  2243,  1998,  1060,
         2213,   102])"
612,1,['sample'], Advantages of Range,seg_135,k ax. if the minimum and maximum of a min new sample are xm,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([12637,  1997,  2846])","tensor([  101,  1047, 22260,  1012,  2065,  1996,  6263,  1998,  4555,  1997,
         1037,  8117,  2047,  7099,  2024,  1060,  2213,   102])"
613,1,['range'], Advantages of Range,seg_135,"1 and xm k+a1x, the new range is max(xm k ax, xm",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([12637,  1997,  2846])","tensor([  101,  1015,  1998,  1060,  2213,  1047,  1009, 17350,  2595,  1010,
         1996,  2047,  2846,  2003,  4098,  1006,  1060,  2213,  1047, 22260,
         1010,  1060,  2213,   102])"
614,0,[], Advantages of Range,seg_135,"course, we need to save the new minimum and maximum to update for subsequent iterations.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12637,  1997,  2846])","tensor([  101,  2607,  1010,  2057,  2342,  2000,  3828,  1996,  2047,  6263,
         1998,  4555,  2000, 10651,  2005,  4745, 27758,  2015,  1012,   102])"
615,1,"['range', 'observation', 'sample', 'outliers']", Disadvantage of Range,seg_137,"the biggest disadvantage of range is that it is extremely sensitive to outliers (on both extremes). as it does not utilize every observation of a sample, it cannot distinguish",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([20502,  1997,  2846])","tensor([  101,  1996,  5221, 20502,  1997,  2846,  2003,  2008,  2009,  2003,
         5186,  7591,  2000,  2041, 14355,  2015,  1006,  2006,  2119, 28800,
         1007,  1012,  2004,  2009,  2515,  2025, 16462,  2296,  8089,  1997,
         1037,  7099,  1010,  2009,  3685, 10782,   102])"
616,1,"['skewed', 'range', 'variance', 'data', 'skewed distributions', 'change of scale', 'distributions', 'sample', 'sample size', 'sample variance', 'indicator', 'transformation']", Disadvantage of Range,seg_137,"between skewed distributions that have the same range. it is not a good indicator of spread when the sample size varies. range is not unit-less. it uses the same unit as that of the data. thus, it is affected by a change of scale transformation. for example, if the family incomes of a sample are measured in dollars and euros, the range will be different. it does not lend itself to further arithmetic operations (as does the sample variance).",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([20502,  1997,  2846])","tensor([  101,  2090, 15315,  7974,  2098, 20611,  2008,  2031,  1996,  2168,
         2846,  1012,  2009,  2003,  2025,  1037,  2204, 17245,  1997,  3659,
         2043,  1996,  7099,  2946,  9783,  1012,  2846,  2003,  2025,  3131,
         1011,  2625,  1012,  2009,  3594,  1996,  2168,  3131,  2004,  2008,
         1997,  1996,  2951,  1012,  2947,  1010,  2009,  2003,  5360,  2011,
         1037,  2689,  1997,  4094,  8651,  1012,  2005,  2742,  1010,  2065,
         1996,  2155, 29373,  1997,  1037,  7099,  2024,  7594,  1999,  6363,
         1998, 19329,  1010,  1996,  2846,  2097,  2022,  2367,  1012,  2009,
         2515,  2025, 18496,  2993,  2000,  2582, 20204,  3136,  1006,  2004,
         2515,  1996,  7099, 23284,  1007,  1012,   102])"
617,1,"['range', 'information', 'sample', 'bivariate', 'variates', 'data']", Disadvantage of Range,seg_137,"range is better suited for univariate data. range of multivariate data contains too little information about the multivariate spread, especially in the presence of correlation. for example, consider a bivariate sample of say height and weight of students, or amount of two different dissolvents in drinking water. the range can measure only the difference between the individual variates x and y.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([20502,  1997,  2846])","tensor([  101,  2846,  2003,  2488, 10897,  2005,  4895, 28739, 13143,  2951,
         1012,  2846,  1997,  4800, 10755, 13143,  2951,  3397,  2205,  2210,
         2592,  2055,  1996,  4800, 10755, 13143,  3659,  1010,  2926,  1999,
         1996,  3739,  1997, 16902,  1012,  2005,  2742,  1010,  5136,  1037,
        12170, 10755, 13143,  7099,  1997,  2360,  4578,  1998,  3635,  1997,
         2493,  1010,  2030,  3815,  1997,  2048,  2367, 21969,  7666,  1999,
         5948,  2300,  1012,  1996,  2846,  2064,  5468,  2069,  1996,  4489,
         2090,  1996,  3265, 13075, 13143,  2015,  1060,  1998,  1061,  1012,
          102])"
618,1,"['plotting', 'transformations', 'estimate', 'ordinal', 'plot', 'data', 'quality control', 'scales of measurement', 'process', 'transformation', 'range', 'control', 'sample', 'sample size', 'measurement', 'average']", Applications of Range,seg_139,"the sample range has lot many applications in engineering and applied sciences. it is applicable to ordinal and higher scales of measurement. it is used in quality control and process control systems. some of the data plotting and visualization techniques use the sample range. as an example, the box-plot and range plot use the sample range. the sample range is also used in data transformations. for instance, the min–max transformation in (section 1.9.4) uses the data range in the denominator. if the sample size is small (say 4 or 5 as in quality control applications), the range is a quite good estimate of the spread. thus, we use average of the ranges r = ∑ri∕n in",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([5097, 1997, 2846])","tensor([  101,  1996,  7099,  2846,  2038,  2843,  2116,  5097,  1999,  3330,
         1998,  4162,  4163,  1012,  2009,  2003, 12711,  2000,  2030, 18979,
         2140,  1998,  3020,  9539,  1997, 10903,  1012,  2009,  2003,  2109,
         1999,  3737,  2491,  1998,  2832,  2491,  3001,  1012,  2070,  1997,
         1996,  2951, 20699,  1998,  5107,  3989,  5461,  2224,  1996,  7099,
         2846,  1012,  2004,  2019,  2742,  1010,  1996,  3482,  1011,  5436,
         1998,  2846,  5436,  2224,  1996,  7099,  2846,  1012,  1996,  7099,
         2846,  2003,  2036,  2109,  1999,  2951, 21865,  1012,  2005,  6013,
         1010,  1996,  8117,  1516,  4098,  8651,  1999,  1006,  2930,  1015,
         1012,  1023,  1012,  1018,  1007,  3594,  1996,  2951,  2846,  1999,
         1996,  7939, 20936, 27413,  1012,  2065,  1996,  7099,  2946,  2003,
         2235,  1006,  2360,  1018,  2030,  1019,  2004,  1999,  3737,  2491,
         5097,  1007,  1010,  1996,  2846,  2003,  1037,  3243,  2204, 10197,
         1997,  1996,  3659,  1012,  2947,  1010,  2057,  2224,  2779,  1997,
         1996,  8483,  1054,  1027,   100,  1999,   102])"
619,1,"['mean', 'range', 'control', 'process', 'charts']", Applications of Range,seg_139,"quality control charts as (x ∓ 3r∕(d2√n)). the mean of ranges r can indicate when a process deviates in one direction. for example, suppose a time-dependent process deviates to the “high” (or increasing) side. even if the range remains the same, the mean of ranges will steadily increase. however, if the range deviates from both sides (either inwards or decreasing values or outwards or increasing values), the mean of ranges could remain the same.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5097, 1997, 2846])","tensor([  101,  3737,  2491,  6093,  2004,  1006,  1060,   100,   100,  1006,
         1040,  2475, 30127,  2078,  1007,  1007,  1012,  1996,  2812,  1997,
         8483,  1054,  2064,  5769,  2043,  1037,  2832, 14386,  8520,  1999,
         2028,  3257,  1012,  2005,  2742,  1010,  6814,  1037,  2051,  1011,
         7790,  2832, 14386,  8520,  2000,  1996,  1523,  2152,  1524,  1006,
         2030,  4852,  1007,  2217,  1012,  2130,  2065,  1996,  2846,  3464,
         1996,  2168,  1010,  1996,  2812,  1997,  8483,  2097, 11328,  3623,
         1012,  2174,  1010,  2065,  1996,  2846, 14386,  8520,  2013,  2119,
         3903,  1006,  2593, 20546,  2015,  2030, 16922,  5300,  2030, 15436,
         2015,  2030,  4852,  5300,  1007,  1010,  1996,  2812,  1997,  8483,
         2071,  3961,  1996,  2168,  1012,   102])"
620,1,"['range', 'sample', 'quartiles', 'outliers', 'data']", INTERQUARTILE RANGE IQR,seg_141,"the sample range is sensitive to outliers at both ends. this could be diminished by removing possible outliers and then computing the range of remaining data. these are called trimmed range. a generalization of it is called the iqr. we defined quartiles in section 2.5. as the name implies, the iqr is the range of data quartiles.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 6970, 16211, 28228,  2571,  2846, 26264,  2099])","tensor([  101,  1996,  7099,  2846,  2003,  7591,  2000,  2041, 14355,  2015,
         2012,  2119,  4515,  1012,  2023,  2071,  2022, 15911,  2011,  9268,
         2825,  2041, 14355,  2015,  1998,  2059,  9798,  1996,  2846,  1997,
         3588,  2951,  1012,  2122,  2024,  2170, 21920,  2846,  1012,  1037,
         2236,  3989,  1997,  2009,  2003,  2170,  1996, 26264,  2099,  1012,
         2057,  4225, 24209,  8445,  9463,  2015,  1999,  2930,  1016,  1012,
         1019,  1012,  2004,  1996,  2171, 12748,  1010,  1996, 26264,  2099,
         2003,  1996,  2846,  1997,  2951, 24209,  8445,  9463,  2015,  1012,
          102])"
621,1,"['quantile', 'function', 'cumulative distribution function', 'boxplots', 'information', 'observations', 'sample', 'quartiles', 'outliers', 'distribution', 'distribution function']", INTERQUARTILE RANGE IQR,seg_141,"definition 3.3 the iqr is defined as (q3 − q1), where q3 and q1 are the upper and lower quartiles. (q1 is that value below which one-fourth of the observations fall, and q3 is that value below which three-fourth of the observations fall, after the sample is arranged in ascending order). one half of iqr is called the qd. the unit quantile function is a parametrized version of it defined as q(u) = (f−1(u) − f−1(1 − u))∕2, where 0 ≤ u ≤ 1 and f(x) denotes the cumulative distribution function. this reduces to qd for u = 3∕4, and is negative for u   0.5. it is unaffected by outliers, and provides supplementary information on the spread of observations around the center of the sample. it is used in boxplots to visually detect outliers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([ 6970, 16211, 28228,  2571,  2846, 26264,  2099])","tensor([  101,  6210,  1017,  1012,  1017,  1996, 26264,  2099,  2003,  4225,
         2004,  1006,  1053,  2509,  1597,  1053,  2487,  1007,  1010,  2073,
         1053,  2509,  1998,  1053,  2487,  2024,  1996,  3356,  1998,  2896,
        24209,  8445,  9463,  2015,  1012,  1006,  1053,  2487,  2003,  2008,
         3643,  2917,  2029,  2028,  1011,  2959,  1997,  1996,  9420,  2991,
         1010,  1998,  1053,  2509,  2003,  2008,  3643,  2917,  2029,  2093,
         1011,  2959,  1997,  1996,  9420,  2991,  1010,  2044,  1996,  7099,
         2003,  5412,  1999, 22316,  2344,  1007,  1012,  2028,  2431,  1997,
        26264,  2099,  2003,  2170,  1996,  1053,  2094,  1012,  1996,  3131,
        24110, 15286,  3853,  2003,  1037, 11498, 11368, 18425,  2544,  1997,
         2009,  4225,  2004,  1053,  1006,  1057,  1007,  1027,  1006,  1042,
        27944,  1006,  1057,  1007,  1597,  1042, 27944,  1006,  1015,  1597,
         1057,  1007,  1007,   100,  1010,  2073,  1014,  1608,  1057,  1608,
         1015,  1998,  1042,  1006,  1060,  1007, 14796,  1996, 23260,  4353,
         3853,  1012,  2023, 13416,  2000,  1053,  2094,  2005,  1057,  1027,
          100,  1010,  1998,  2003,  4997,  2005,  1057,  1014,  1012,  1019,
         1012,  2009,  2003, 24720,  2011,  2041, 14355,  2015,  1010,  1998,
         3640, 26215,  2592,  2006,  1996,  3659,  1997,  9420,  2105,  1996,
         2415,  1997,  1996,  7099,  1012,  2009,  2003,  2109,  1999,  3482,
        24759, 12868,  2000, 17453, 11487,  2041, 14355,  2015,  1012,   102])"
622,1,"['change of origin', 'range', 'change of scale', 'data', 'transformation', 'case']", Change of Origin and Scale Transformation for Range,seg_143,"range is unaffected by a change of origin data transformation. the change of scale transformation y = c ∗ x gives the relationship range(y) = c*range(x), as both extremes are scaled by the same constant. the constant c is chosen as  1 if x values are very large. this is especially useful when large data are expressed in scientific notation. in this case, dividing by 10k is done by adjusting just the index of the number. for example, let x = 3.6524219879e+8. to divide x by 106, simply adjust e+8 to e+2 to get x = 365.24219879, which is the number of days in a year.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761, 1998, 4094, 8651, 2005, 2846])","tensor([  101,  2846,  2003, 24720,  2011,  1037,  2689,  1997,  4761,  2951,
         8651,  1012,  1996,  2689,  1997,  4094,  8651,  1061,  1027,  1039,
         1598,  1060,  3957,  1996,  3276,  2846,  1006,  1061,  1007,  1027,
         1039,  1008,  2846,  1006,  1060,  1007,  1010,  2004,  2119, 28800,
         2024, 18953,  2011,  1996,  2168,  5377,  1012,  1996,  5377,  1039,
         2003,  4217,  2004,  1015,  2065,  1060,  5300,  2024,  2200,  2312,
         1012,  2023,  2003,  2926,  6179,  2043,  2312,  2951,  2024,  5228,
         1999,  4045, 14869,  1012,  1999,  2023,  2553,  1010, 16023,  2011,
         2184,  2243,  2003,  2589,  2011, 19158,  2074,  1996,  5950,  1997,
         1996,  2193,  1012,  2005,  2742,  1010,  2292,  1060,  1027,  1017,
         1012,  3515, 18827, 17465,  2683,  2620,  2581,  2683,  2063,  1009,
         1022,  1012,  2000, 11443,  1060,  2011, 10114,  1010,  3432, 14171,
         1041,  1009,  1022,  2000,  1041,  1009,  1016,  2000,  2131,  1060,
         1027, 19342,  1012, 22431, 16147,  2620,  2581,  2683,  1010,  2029,
         2003,  1996,  2193,  1997,  2420,  1999,  1037,  2095,  1012,   102])"
623,0,[], Change of Origin and Scale Transformation for Range,seg_143,example 3.1 outstanding amounts on 10 bank loans,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2689, 1997, 4761, 1998, 4094, 8651, 2005, 2846])","tensor([  101,  2742,  1017,  1012,  1015,  5151,  8310,  2006,  2184,  2924,
        10940,   102])"
624,1,"['data', 'range']", Change of Origin and Scale Transformation for Range,seg_143,"ten outstanding loan amounts in a bank are x = [60,000, 40,000, 85,000, 37,000, 110,000, 280,000, 72,000, 92,000, 154,000, 81,000]. find the range and qd of the data.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([2689, 1997, 4761, 1998, 4094, 8651, 2005, 2846])","tensor([  101,  2702,  5151,  5414,  8310,  1999,  1037,  2924,  2024,  1060,
         1027,  1031,  3438,  1010,  2199,  1010,  2871,  1010,  2199,  1010,
         5594,  1010,  2199,  1010,  4261,  1010,  2199,  1010,  7287,  1010,
         2199,  1010, 13427,  1010,  2199,  1010,  5824,  1010,  2199,  1010,
         6227,  1010,  2199,  1010, 16666,  1010,  2199,  1010,  6282,  1010,
         2199,  1033,  1012,  2424,  1996,  2846,  1998,  1053,  2094,  1997,
         1996,  2951,  1012,   102])"
625,1,"['range', 'coefficient', 'transformed', 'first quartile', 'quartile', 'data']", Change of Origin and Scale Transformation for Range,seg_143,"solution 3.1 as the data values are all large, we divide them by c = 100,000 to get y = [0.60, 0.4, .85, 0.37, 1.10, 2.80, 0.72, 0.92, 1.54, 0.81]. the maximum and minimum values of transformed data are 2.8 and 0.37. the range of y is 2.80 − 0.37 = 2.43. from this the range of x is obtained by multiplying by c as 2.43 ∗ 100,000 = 243,000. to find the qd, we need to find q3 and q1. the first quartile is that value below which one-fourth of the data values lie. rearranging the data in ascending order gives y = [0.37, 0.4, 0.60, 0.72, 0.81, 0.85, 0.92, 1.10, 1.54, 2.80]. as there are two data values below 0.60, q1 = 0.60. similarly, q3 = 1.10 as there are two values above it. from this we get the qd of y as 1.10 − 0.60 = 0.50. multiply by 100, 000 to get the qd of x as 50,000. the quartile coefficient is (q3 − q1)∕(q3 + q1) = 50,000∕170,000 = 0.294.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761, 1998, 4094, 8651, 2005, 2846])","tensor([  101,  5576,  1017,  1012,  1015,  2004,  1996,  2951,  5300,  2024,
         2035,  2312,  1010,  2057, 11443,  2068,  2011,  1039,  1027,  2531,
         1010,  2199,  2000,  2131,  1061,  1027,  1031,  1014,  1012,  3438,
         1010,  1014,  1012,  1018,  1010,  1012,  5594,  1010,  1014,  1012,
         4261,  1010,  1015,  1012,  2184,  1010,  1016,  1012,  3770,  1010,
         1014,  1012,  5824,  1010,  1014,  1012,  6227,  1010,  1015,  1012,
         5139,  1010,  1014,  1012,  6282,  1033,  1012,  1996,  4555,  1998,
         6263,  5300,  1997,  8590,  2951,  2024,  1016,  1012,  1022,  1998,
         1014,  1012,  4261,  1012,  1996,  2846,  1997,  1061,  2003,  1016,
         1012,  3770,  1597,  1014,  1012,  4261,  1027,  1016,  1012,  4724,
         1012,  2013,  2023,  1996,  2846,  1997,  1060,  2003,  4663,  2011,
         4800, 22086,  2075,  2011,  1039,  2004,  1016,  1012,  4724,  1598,
         2531,  1010,  2199,  1027, 22884,  1010,  2199,  1012,  2000,  2424,
         1996,  1053,  2094,  1010,  2057,  2342,  2000,  2424,  1053,  2509,
         1998,  1053,  2487,  1012,  1996,  2034, 24209,  8445,  9463,  2003,
         2008,  3643,  2917,  2029,  2028,  1011,  2959,  1997,  1996,  2951,
         5300,  4682,  1012,  4373, 24388,  2075,  1996,  2951,  1999, 22316,
         2344,  3957,  1061,  1027,  1031,  1014,  1012,  4261,  1010,  1014,
         1012,  1018,  1010,  1014,  1012,  3438,  1010,  1014,  1012,  5824,
         1010,  1014,  1012,  6282,  1010,  1014,  1012,  5594,  1010,  1014,
         1012,  6227,  1010,  1015,  1012,  2184,  1010,  1015,  1012,  5139,
         1010,  1016,  1012,  3770,  1033,  1012,  2004,  2045,  2024,  2048,
         2951,  5300,  2917,  1014,  1012,  3438,  1010,  1053,  2487,  1027,
         1014,  1012,  3438,  1012,  6660,  1010,  1053,  2509,  1027,  1015,
         1012,  2184,  2004,  2045,  2024,  2048,  5300,  2682,  2009,  1012,
         2013,  2023,  2057,  2131,  1996,  1053,  2094,  1997,  1061,  2004,
         1015,  1012,  2184,  1597,  1014,  1012,  3438,  1027,  1014,  1012,
         2753,  1012,  4800, 22086,  2011,  2531,  1010,  2199,  2000,  2131,
         1996,  1053,  2094,  1997,  1060,  2004,  2753,  1010,  2199,  1012,
         1996, 24209,  8445,  9463, 19064,  2003,  1006,  1053,  2509,  1597,
         1053,  2487,  1007,   100,  1006,  1053,  2509,  1009,  1053,  2487,
         1007,  1027,  2753,  1010,   100,  1010,  2199,  1027,  1014,  1012,
        28135,  1012,   102])"
626,1,"['variance', 'dispersion measure', 'dispersion', 'sample', 'sample variance', 'data']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,degrees of freedom concept originated in data analysis. sample variance was the most popular dispersion measure in wide use during the 19th and early 20th centuries.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  5445,  1997,  4071,  4145,  7940,  1999,  2951,  4106,  1012,
         7099, 23284,  2001,  1996,  2087,  2759,  4487, 17668, 10992,  5468,
         1999,  2898,  2224,  2076,  1996,  3708,  1998,  2220,  3983,  4693,
         1012,   102])"
627,1,"['degrees of freedom', 'level', 'statistics', 'independent']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,"the concept of degrees of freedom (dof) is used in many branches of applied sciences. in physics and physical chemistry, it indicates the independent mode or free dimensionality in which a particle or system can move, or be oriented wrt fixed coordinate axes. in mechanical and aeronautical engineering, dof denotes the flexibility of motion of a particle or an object in 3d. such a particle has 6 dof—namely: (i) up or down (heaving), (ii) left or right (swaying), (iii) forward or backward (surging), (iv) tilting up or down (pitching), (v) turning left or right wrt a plane (yawing), and (vi) tilting side-to-side (rolling). it has an entirely different interpretation in statistics, where loosely speaking, it denotes the local level",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  1996,  4145,  1997,  5445,  1997,  4071,  1006,  2079,  2546,
         1007,  2003,  2109,  1999,  2116,  5628,  1997,  4162,  4163,  1012,
         1999,  5584,  1998,  3558,  6370,  1010,  2009,  7127,  1996,  2981,
         5549,  2030,  2489,  8789,  3012,  1999,  2029,  1037, 10811,  2030,
         2291,  2064,  2693,  1010,  2030,  2022,  8048, 23277,  2102,  4964,
        13530, 19589,  1012,  1999,  6228,  1998, 25010,  3330,  1010,  2079,
         2546, 14796,  1996, 16991,  1997,  4367,  1997,  1037, 10811,  2030,
         2019,  4874,  1999,  7605,  1012,  2107,  1037, 10811,  2038,  1020,
         2079,  2546,  1517,  8419,  1024,  1006,  1045,  1007,  2039,  2030,
         2091,  1006, 23907,  1007,  1010,  1006,  2462,  1007,  2187,  2030,
         2157,  1006, 21826,  1007,  1010,  1006,  3523,  1007,  2830,  2030,
         8848,  1006,  7505,  4726,  1007,  1010,  1006,  4921,  1007, 21788,
         2039,  2030,  2091,  1006, 14696,  1007,  1010,  1006,  1058,  1007,
         3810,  2187,  2030,  2157, 23277,  2102,  1037,  4946,  1006,  8038,
         9328,  1007,  1010,  1998,  1006,  6819,  1007, 21788,  2217,  1011,
         2000,  1011,  2217,  1006,  5291,  1007,  1012,  2009,  2038,  2019,
         4498,  2367,  7613,  1999,  6747,  1010,  2073, 11853,  4092,  1010,
         2009, 14796,  1996,  2334,  2504,   102])"
628,1,"['mean', 'deviation', 'estimated', 'estimate', 'sample', 'deviations', 'confidence', 'statistic', 'independent']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,"of confidence left in a sample of size n ≥ 2. if nothing has been estimated from a sample, its dof is n. the dof is reduced by one for each statistic (that uses all of the sample values) estimated from it. consider the deviations (x1 − x, x2 − x, … , xn − x). these deviations always sum to zero (p. 53), specifying any of the (n − 1) values automatically determines the nth deviation. this is precisely the reason why we use (n − 1) as the dof of a sample from which the mean has been estimated. it may also be noted that this reduction in dof is not a global phenomena. so, if 10 persons estimate the mean of a sample of size 15, the dof is reduced by one for each one of them (the dof does not become 5, but it is simply 14 for each person) under the assumption that each person’s procedures or actions are independent.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  1997,  7023,  2187,  1999,  1037,  7099,  1997,  2946,  1050,
         1609,  1016,  1012,  2065,  2498,  2038,  2042,  4358,  2013,  1037,
         7099,  1010,  2049,  2079,  2546,  2003,  1050,  1012,  1996,  2079,
         2546,  2003,  4359,  2011,  2028,  2005,  2169, 28093,  6553,  1006,
         2008,  3594,  2035,  1997,  1996,  7099,  5300,  1007,  4358,  2013,
         2009,  1012,  5136,  1996, 24353,  2015,  1006,  1060,  2487,  1597,
         1060,  1010,  1060,  2475,  1597,  1060,  1010,  1529,  1010,  1060,
         2078,  1597,  1060,  1007,  1012,  2122, 24353,  2015,  2467,  7680,
         2000,  5717,  1006,  1052,  1012,  5187,  1007,  1010, 20648,  2075,
         2151,  1997,  1996,  1006,  1050,  1597,  1015,  1007,  5300,  8073,
        16463,  1996, 23961,  2232, 24353,  1012,  2023,  2003, 10785,  1996,
         3114,  2339,  2057,  2224,  1006,  1050,  1597,  1015,  1007,  2004,
         1996,  2079,  2546,  1997,  1037,  7099,  2013,  2029,  1996,  2812,
         2038,  2042,  4358,  1012,  2009,  2089,  2036,  2022,  3264,  2008,
         2023,  7312,  1999,  2079,  2546,  2003,  2025,  1037,  3795, 13352,
         1012,  2061,  1010,  2065,  2184,  5381, 10197,  1996,  2812,  1997,
         1037,  7099,  1997,  2946,  2321,  1010,  1996,  2079,  2546,  2003,
         4359,  2011,  2028,  2005,  2169,  2028,  1997,  2068,  1006,  1996,
         2079,  2546,  2515,  2025,  2468,  1019,  1010,  2021,  2009,  2003,
         3432,  2403,  2005,  2169,  2711,  1007,  2104,  1996, 11213,  2008,
         2169,  2711,  1521,  1055,  8853,  2030,  4506,  2024,  2981,  1012,
          102])"
629,1,"['normal distribution', 't distribution', 'standard normal distribution', 'standard normal', 'sample', 'samples', 'normal', 'sample size', 'standard', 'distribution', 'statistic', 'sum of squares']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,"sampling distribution of the statistic t = (xn −  )∕(s∕√n) follows a student’s t distribution with n dof for normal samples, where n is the sample size. similarly, the sum of squares of n sample values drawn from a standard normal distribution has a central  2 distribution with n dof. these are discussed in chapter 11.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101, 16227,  4353,  1997,  1996, 28093,  6553,  1056,  1027,  1006,
         1060,  2078,  1597,  1007,   100,  1006,   100,  1007,  4076,  1037,
         3076,  1521,  1055,  1056,  4353,  2007,  1050,  2079,  2546,  2005,
         3671,  8168,  1010,  2073,  1050,  2003,  1996,  7099,  2946,  1012,
         6660,  1010,  1996,  7680,  1997, 14320,  1997,  1050,  7099,  5300,
         4567,  2013,  1037,  3115,  3671,  4353,  2038,  1037,  2430,  1016,
         4353,  2007,  1050,  2079,  2546,  1012,  2122,  2024,  6936,  1999,
         3127,  2340,  1012,   102])"
630,1,"['mean', 'variance', 'estimated', 'observations', 'sample', 'deviations', 'process', 'data', 'sample mean']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,"it is defined in terms of the mean as the pivot as in equation (3.8), which uses the sample mean xn explicitly. assume that the variance is computed in two steps. the first step computes the sample mean. the second step then finds the deviations of observations and finds the variance. as the mean has to be estimated from the data, some “information content” of the obtained sample is lost during this process.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  2009,  2003,  4225,  1999,  3408,  1997,  1996,  2812,  2004,
         1996, 14255, 22994,  2004,  1999,  8522,  1006,  1017,  1012,  1022,
         1007,  1010,  2029,  3594,  1996,  7099,  2812,  1060,  2078, 12045,
         1012,  7868,  2008,  1996, 23284,  2003, 24806,  1999,  2048,  4084,
         1012,  1996,  2034,  3357, 24134,  2015,  1996,  7099,  2812,  1012,
         1996,  2117,  3357,  2059,  4858,  1996, 24353,  2015,  1997,  9420,
         1998,  4858,  1996, 23284,  1012,  2004,  1996,  2812,  2038,  2000,
         2022,  4358,  2013,  1996,  2951,  1010,  2070,  1523,  2592,  4180,
         1524,  1997,  1996,  4663,  7099,  2003,  2439,  2076,  2023,  2832,
         1012,   102])"
631,1,"['loss', 'mean', 'parameter', 'estimation', 'variance', 'data', 'estimated', 'information', 'statisticians', 'sample', 'sample variance', 'sample mean']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,"for each parameter estimated from the sample, we quantify it as a unit loss of information. we use (n − 1) in the denominator of sample variance to indicate the loss of 1 “dof” due to the estimation of the sample mean from the data. to compensate for this loss of information, it is logical to use (n − 1) as the divisor for the variance. this lead some statisticians to advocate the formula (3.8) for sample variance. however, there are many expressions for the sample variance that does not explicitly involve the sample mean. some such formulas are given in chapter 1, which are repeated",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  2005,  2169, 16381,  4358,  2013,  1996,  7099,  1010,  2057,
        24110, 27351,  2009,  2004,  1037,  3131,  3279,  1997,  2592,  1012,
         2057,  2224,  1006,  1050,  1597,  1015,  1007,  1999,  1996,  7939,
        20936, 27413,  1997,  7099, 23284,  2000,  5769,  1996,  3279,  1997,
         1015,  1523,  2079,  2546,  1524,  2349,  2000,  1996, 24155,  1997,
         1996,  7099,  2812,  2013,  1996,  2951,  1012,  2000, 19079,  2005,
         2023,  3279,  1997,  2592,  1010,  2009,  2003, 11177,  2000,  2224,
         1006,  1050,  1597,  1015,  1007,  2004,  1996,  4487, 11365,  2953,
         2005,  1996, 23284,  1012,  2023,  2599,  2070, 28093,  6553,  7066,
         2000,  8175,  1996,  5675,  1006,  1017,  1012,  1022,  1007,  2005,
         7099, 23284,  1012,  2174,  1010,  2045,  2024,  2116, 11423,  2005,
         1996,  7099, 23284,  2008,  2515,  2025, 12045,  9125,  1996,  7099,
         2812,  1012,  2070,  2107, 25814,  2024,  2445,  1999,  3127,  1015,
         1010,  2029,  2024,  5567,   102])"
632,1,"['order statistic', 'varying', 'summation', 'statistic']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,where we have used the subscript partially varying summation notation introduced in chapter 1. another formula in terms of order statistic can be found in references 9 and 29.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  2073,  2057,  2031,  2109,  1996,  4942, 22483,  6822,  9671,
         7680, 28649, 14869,  3107,  1999,  3127,  1015,  1012,  2178,  5675,
         1999,  3408,  1997,  2344, 28093,  6553,  2064,  2022,  2179,  1999,
         7604,  1023,  1998,  2756,  1012,   102])"
633,1,"['function', 'associated', 'information', 'level', 'sample', 'confidence']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,definition 3.4 the dof is a concept associated with the information content of a sample that indicates a local level of confidence left in a sample as a function of the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([ 101, 6210, 1017, 1012, 1018, 1996, 2079, 2546, 2003, 1037, 4145, 3378,
        2007, 1996, 2592, 4180, 1997, 1037, 7099, 2008, 7127, 1037, 2334, 2504,
        1997, 7023, 2187, 1999, 1037, 7099, 2004, 1037, 3853, 1997, 1996,  102])"
634,1,"['distribution', 'sample', 'population', 'statistic']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,sample size. it is also applied to a statistic computed from a sample or the distribution of a parent population.,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 1., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  7099,  2946,  1012,  2009,  2003,  2036,  4162,  2000,  1037,
        28093,  6553, 24806,  2013,  1037,  7099,  2030,  1996,  4353,  1997,
         1037,  6687,  2313,  1012,   102])"
635,1,"['t distribution', 'hypergeometric', 'noncentrality', 'sampling distribution', 'sampling', 'statistics', 'statistical', 'binomial', 'noncentral', 'parameter', 'negative binomial', 'parameters', 'determinant', 'gamma', 'distributions', 'sample', 'distribution', 'f distribution']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,"the dof of a statistical distribution is actually a parameter. they are so-called due to an analogy with the sampling distribution of some related statistics. as examples, the student’s t distribution has a parameter which is traditionally known as “n,” which is called its dof; and snedecor’s f distribution has two parameters m,n which are called its (numerator and denominator) dof. other distributions that utilize the dof concept are the 2 distribution, fisher’s z distribution, wishart distribution, and noncentral versions of these central distributions (noncentral 2,f,t ,z [4, 5]. many other distributions such as the distribution of the trace of a wishart matrix and the distribution of statistics computed from the sample variance–covariance matrix (such as the distribution of the determinant, or minimum and maximum eigen values) can also have dof parameter. noncentral distributions also exist without the dof concept. as examples, the noncentral gamma, beta, negative binomial, and hypergeometric laws have shape and scale parameters, and one or more noncentrality parameters but no dof.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  1996,  2079,  2546,  1997,  1037,  7778,  4353,  2003,  2941,
         1037, 16381,  1012,  2027,  2024,  2061,  1011,  2170,  2349,  2000,
         2019, 23323,  2007,  1996, 16227,  4353,  1997,  2070,  3141,  6747,
         1012,  2004,  4973,  1010,  1996,  3076,  1521,  1055,  1056,  4353,
         2038,  1037, 16381,  2029,  2003,  6964,  2124,  2004,  1523,  1050,
         1010,  1524,  2029,  2003,  2170,  2049,  2079,  2546,  1025,  1998,
         1055,  7228,  8586,  2953,  1521,  1055,  1042,  4353,  2038,  2048,
        11709,  1049,  1010,  1050,  2029,  2024,  2170,  2049,  1006, 16371,
         5017,  8844,  1998,  7939, 20936, 27413,  1007,  2079,  2546,  1012,
         2060, 20611,  2008, 16462,  1996,  2079,  2546,  4145,  2024,  1996,
         1016,  4353,  1010,  8731,  1521,  1055,  1062,  4353,  1010,  4299,
         8445,  4353,  1010,  1998,  2512, 13013,  7941,  4617,  1997,  2122,
         2430, 20611,  1006,  2512, 13013,  7941,  1016,  1010,  1042,  1010,
         1056,  1010,  1062,  1031,  1018,  1010,  1019,  1033,  1012,  2116,
         2060, 20611,  2107,  2004,  1996,  4353,  1997,  1996,  7637,  1997,
         1037,  4299,  8445,  8185,  1998,  1996,  4353,  1997,  6747, 24806,
         2013,  1996,  7099, 23284,  1516,  2522, 10755, 28335,  8185,  1006,
         2107,  2004,  1996,  4353,  1997,  1996, 28283, 22311,  3372,  1010,
         2030,  6263,  1998,  4555,  1041, 29206,  5300,  1007,  2064,  2036,
         2031,  2079,  2546, 16381,  1012,  2512, 13013,  7941, 20611,  2036,
         4839,  2302,  1996,  2079,  2546,  4145,  1012,  2004,  4973,  1010,
         1996,  2512, 13013,  7941, 13091,  1010,  8247,  1010,  4997,  8026,
        20936,  2389,  1010,  1998, 23760,  3351, 28993,  4277,  2031,  4338,
         1998,  4094, 11709,  1010,  1998,  2028,  2030,  2062,  2512, 13013,
         7941,  3012, 11709,  2021,  2053,  2079,  2546,  1012,   102])"
636,1,"['mean', 'range', 'deviation', 'variance', 'observation', 'estimated', 'estimate', 'sample', 'statistic']", THE CONCEPT OF DEGREES OF FREEDOM,seg_145,"as mentioned above, 1 dof is lost for each statistic computed from a sample. this does not mean that we must lose one dof for each statistic. the rule is that if a statistic involves each and every observation of a sample, it loses 1 dof. thus if the mode or range of a sample is estimated, 1 dof is not lost. but if the am, gm, hm, variance or mean deviation, or some other statistic that utilizes each observation of a sample is estimated, 1 dof is lost for each such estimate.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([1996, 4145, 1997, 5445, 1997, 4071])","tensor([  101,  2004,  3855,  2682,  1010,  1015,  2079,  2546,  2003,  2439,
         2005,  2169, 28093,  6553, 24806,  2013,  1037,  7099,  1012,  2023,
         2515,  2025,  2812,  2008,  2057,  2442,  4558,  2028,  2079,  2546,
         2005,  2169, 28093,  6553,  1012,  1996,  3627,  2003,  2008,  2065,
         1037, 28093,  6553,  7336,  2169,  1998,  2296,  8089,  1997,  1037,
         7099,  1010,  2009, 12386,  1015,  2079,  2546,  1012,  2947,  2065,
         1996,  5549,  2030,  2846,  1997,  1037,  7099,  2003,  4358,  1010,
         1015,  2079,  2546,  2003,  2025,  2439,  1012,  2021,  2065,  1996,
         2572,  1010, 13938,  1010, 20287,  1010, 23284,  2030,  2812, 24353,
         1010,  2030,  2070,  2060, 28093,  6553,  2008, 21852,  2169,  8089,
         1997,  1037,  7099,  2003,  4358,  1010,  1015,  2079,  2546,  2003,
         2439,  2005,  2169,  2107, 10197,  1012,   102])"
637,1,"['mean', 'deviation', 'sample', 'sample mean']", AVERAGED ABSOLUTE DEVIATION AAD,seg_147,the aad (also called sample mean absolute deviation (smad)) from the mean is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([11398,  7619, 24353,  9779,  2094])","tensor([  101,  1996,  9779,  2094,  1006,  2036,  2170,  7099,  2812,  7619,
        24353,  1006, 15488,  4215,  1007,  1007,  2013,  1996,  2812,  2003,
          102])"
638,1,"['variance', 'estimated', 'sample', 'sample variance', 'case']", AVERAGED ABSOLUTE DEVIATION AAD,seg_147,"where n = n − 1 if n   1 and xn is estimated from the sample (some authors use n in the denominator; this is why we have kept n which can be interpreted appropriately). as in the case of sample variance (defined below), this quantity is undefined for a sample of size 1, if n − 1 is used as the divisor. this is because the numerator then becomes x1 − x1 = 0, and the expression (3.5) is of 0/0 form. but if n = n, the aad is defined as zero (as the expression (3.5) becomes 0/1 = 0). expand xn in (3.5), and simplify to get the alternate expressions",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11398,  7619, 24353,  9779,  2094])","tensor([  101,  2073,  1050,  1027,  1050,  1597,  1015,  2065,  1050,  1015,
         1998,  1060,  2078,  2003,  4358,  2013,  1996,  7099,  1006,  2070,
         6048,  2224,  1050,  1999,  1996,  7939, 20936, 27413,  1025,  2023,
         2003,  2339,  2057,  2031,  2921,  1050,  2029,  2064,  2022, 10009,
        23263,  1007,  1012,  2004,  1999,  1996,  2553,  1997,  7099, 23284,
         1006,  4225,  2917,  1007,  1010,  2023, 11712,  2003,  6151, 28344,
         2005,  1037,  7099,  1997,  2946,  1015,  1010,  2065,  1050,  1597,
         1015,  2003,  2109,  2004,  1996,  4487, 11365,  2953,  1012,  2023,
         2003,  2138,  1996, 16371,  5017,  8844,  2059,  4150,  1060,  2487,
         1597,  1060,  2487,  1027,  1014,  1010,  1998,  1996,  3670,  1006,
         1017,  1012,  1019,  1007,  2003,  1997,  1014,  1013,  1014,  2433,
         1012,  2021,  2065,  1050,  1027,  1050,  1010,  1996,  9779,  2094,
         2003,  4225,  2004,  5717,  1006,  2004,  1996,  3670,  1006,  1017,
         1012,  1019,  1007,  4150,  1014,  1013,  1015,  1027,  1014,  1007,
         1012,  7818,  1060,  2078,  1999,  1006,  1017,  1012,  1019,  1007,
         1010,  1998, 21934, 28250,  2000,  2131,  1996,  6585, 11423,   102])"
639,1,"['expectation', 'mathematical expectation', 'condition', 'population']", AVERAGED ABSOLUTE DEVIATION AAD,seg_147,"where we have used a condition on the second indexvar (p. 1–26). the corresponding population analogue is e|x − |, where e[ ] denotes mathematical expectation",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0.])","tensor([11398,  7619, 24353,  9779,  2094])","tensor([  101,  2073,  2057,  2031,  2109,  1037,  4650,  2006,  1996,  2117,
         5950, 10755,  1006,  1052,  1012,  1015,  1516,  2656,  1007,  1012,
         1996,  7978,  2313, 21800,  2003,  1041,  1064,  1060,  1597,  1064,
         1010,  2073,  1041,  1031,  1033, 14796,  8045, 17626,   102])"
640,1,"['mean', 'range', 'deviation', 'observation', 'sample', 'medoid', 'outliers', 'arithmetic mean', 'statistic', 'median', 'case']", AVERAGED ABSOLUTE DEVIATION AAD,seg_147,"(chapter 8). it is also called mean (absolute) deviation from the mean. as in the case of arithmetic mean, this measure uses each and every observation of the sample. it is affected by outliers, but not as much as the range. computations can be simplified if medoid is used in place of the mean xn, resulting in aad from the medoid. when all sample values are integers, this will ease the computations because the medoid itself being a sample value will be an integer (whereas the mean need not be an integer) so that the differences are all integers. a related statistic is median absolute deviation (aad around the median) defined as ∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([11398,  7619, 24353,  9779,  2094])","tensor([  101,  1006,  3127,  1022,  1007,  1012,  2009,  2003,  2036,  2170,
         2812,  1006,  7619,  1007, 24353,  2013,  1996,  2812,  1012,  2004,
         1999,  1996,  2553,  1997, 20204,  2812,  1010,  2023,  5468,  3594,
         2169,  1998,  2296,  8089,  1997,  1996,  7099,  1012,  2009,  2003,
         5360,  2011,  2041, 14355,  2015,  1010,  2021,  2025,  2004,  2172,
         2004,  1996,  2846,  1012, 22334,  2015,  2064,  2022, 11038,  2065,
        19960,  9314,  2003,  2109,  1999,  2173,  1997,  1996,  2812,  1060,
         2078,  1010,  4525,  1999,  9779,  2094,  2013,  1996, 19960,  9314,
         1012,  2043,  2035,  7099,  5300,  2024, 24028,  1010,  2023,  2097,
         7496,  1996, 22334,  2015,  2138,  1996, 19960,  9314,  2993,  2108,
         1037,  7099,  3643,  2097,  2022,  2019, 16109,  1006,  6168,  1996,
         2812,  2342,  2025,  2022,  2019, 16109,  1007,  2061,  2008,  1996,
         5966,  2024,  2035, 24028,  1012,  1037,  3141, 28093,  6553,  2003,
         3991,  7619, 24353,  1006,  9779,  2094,  2105,  1996,  3991,  1007,
         4225,  2004,   100,   102])"
641,1,"['deviation', 'observations', 'median absolute deviation', 'deviations', 'median']", AVERAGED ABSOLUTE DEVIATION AAD,seg_147,"n =1 |xi − median|∕n. median absolute deviation around the median is the middle value of (sorted) absolute deviations of observations from the median. symbolically,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([11398,  7619, 24353,  9779,  2094])","tensor([  101,  1050,  1027,  1015,  1064,  8418,  1597,  3991,  1064,   100,
         1012,  3991,  7619, 24353,  2105,  1996,  3991,  2003,  1996,  2690,
         3643,  1997,  1006, 19616,  1007,  7619, 24353,  2015,  1997,  9420,
         2013,  1996,  3991,  1012, 12613,  3973,  1010,   102])"
642,1,"['deviation', 'deviation ', 'median']", AVERAGED ABSOLUTE DEVIATION AAD,seg_147,median absolute deviation = median|xi − m| where m = median(xi). (3.7),tensor(1),"tensor([0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([11398,  7619, 24353,  9779,  2094])","tensor([  101,  3991,  7619, 24353,  1027,  3991,  1064,  8418,  1597,  1049,
         1064,  2073,  1049,  1027,  3991,  1006,  8418,  1007,  1012,  1006,
         1017,  1012,  1021,  1007,   102])"
643,1,"['deviation', 'observations', 'median absolute deviation', 'medoid', 'deviations', 'median']", AVERAGED ABSOLUTE DEVIATION AAD,seg_147,"similarly, we could define the median absolute deviation around the medoid as the middle value of (sorted) absolute deviations of observations from the medoid (by replacing m by medoid in (3.7)).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11398,  7619, 24353,  9779,  2094])","tensor([  101,  6660,  1010,  2057,  2071,  9375,  1996,  3991,  7619, 24353,
         2105,  1996, 19960,  9314,  2004,  1996,  2690,  3643,  1997,  1006,
        19616,  1007,  7619, 24353,  2015,  1997,  9420,  2013,  1996, 19960,
         9314,  1006,  2011,  6419,  1049,  2011, 19960,  9314,  1999,  1006,
         1017,  1012,  1021,  1007,  1007,  1012,   102])"
644,1,"['mean', 'range', 'deviation', 'sample', 'deviations', 'sample mean', 'median']", Advantages of Averaged Absolute Deviation,seg_149,"as the deviation from each and every sample value is summed, it contains more information than the range. it is easy to compute as we need only the absolute deviations from the sample mean (or median).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 1., 0., 0., 0.])","tensor([12637,  1997, 11398,  7619, 24353])","tensor([  101,  2004,  1996, 24353,  2013,  2169,  1998,  2296,  7099,  3643,
         2003,  7680,  7583,  1010,  2009,  3397,  2062,  2592,  2084,  1996,
         2846,  1012,  2009,  2003,  3733,  2000, 24134,  2004,  2057,  2342,
         2069,  1996,  7619, 24353,  2015,  2013,  1996,  7099,  2812,  1006,
         2030,  3991,  1007,  1012,   102])"
645,1,"['sample', 'treatment']", Disadvantages of Averaged Absolute Deviation,seg_151,"it does not lend itself to further arithmetic treatment. for example, if a sample s of size n is divided into two subsamples, and the aad of each subsample is found, it is not in general possible to combine the subsample values to find the aad of s.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20502,  2015,  1997, 11398,  7619, 24353])","tensor([  101,  2009,  2515,  2025, 18496,  2993,  2000,  2582, 20204,  3949,
         1012,  2005,  2742,  1010,  2065,  1037,  7099,  1055,  1997,  2946,
         1050,  2003,  4055,  2046,  2048,  4942, 21559, 21112,  1010,  1998,
         1996,  9779,  2094,  1997,  2169,  4942, 21559, 10814,  2003,  2179,
         1010,  2009,  2003,  2025,  1999,  2236,  2825,  2000, 11506,  1996,
         4942, 21559, 10814,  5300,  2000,  2424,  1996,  9779,  2094,  1997,
         1055,  1012,   102])"
646,1,"['change of origin', 'deviation', 'transformation', 'change of scale', 'summation', 'medoid', 'change of origin and scale', 'data', 'median']", Change of Origin and Scale Transformation for AAD,seg_153,"the aad can be found easily using the change of origin and scale transformation. consider the change of origin transformation y = x + c. then the aad of y is the same as the aad of x because each term inside the summation becomes |yi − yn| = |xi + c − (xn + c)| = |xi − xn|. this holds true for averaged absolute deviation from medoid and median, as the data are simply translated. next, consider the change of scale transformation y = c ∗ x. each deviation term of y is |yi − yn| = |c ∗ xi − c ∗ (xn)| = |c| ∗ |xi − xn|, so that aad(y ,n)= |c|*aad(x,n).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 4761, 1998, 4094, 8651, 2005, 9779, 2094])","tensor([  101,  1996,  9779,  2094,  2064,  2022,  2179,  4089,  2478,  1996,
         2689,  1997,  4761,  1998,  4094,  8651,  1012,  5136,  1996,  2689,
         1997,  4761,  8651,  1061,  1027,  1060,  1009,  1039,  1012,  2059,
         1996,  9779,  2094,  1997,  1061,  2003,  1996,  2168,  2004,  1996,
         9779,  2094,  1997,  1060,  2138,  2169,  2744,  2503,  1996,  7680,
        28649,  4150,  1064, 12316,  1597,  1061,  2078,  1064,  1027,  1064,
         8418,  1009,  1039,  1597,  1006,  1060,  2078,  1009,  1039,  1007,
         1064,  1027,  1064,  8418,  1597,  1060,  2078,  1064,  1012,  2023,
         4324,  2995,  2005, 11398,  7619, 24353,  2013, 19960,  9314,  1998,
         3991,  1010,  2004,  1996,  2951,  2024,  3432,  5421,  1012,  2279,
         1010,  5136,  1996,  2689,  1997,  4094,  8651,  1061,  1027,  1039,
         1598,  1060,  1012,  2169, 24353,  2744,  1997,  1061,  2003,  1064,
        12316,  1597,  1061,  2078,  1064,  1027,  1064,  1039,  1598,  8418,
         1597,  1039,  1598,  1006,  1060,  2078,  1007,  1064,  1027,  1064,
         1039,  1064,  1598,  1064,  8418,  1597,  1060,  2078,  1064,  1010,
         2061,  2008,  9779,  2094,  1006,  1061,  1010,  1050,  1007,  1027,
         1064,  1039,  1064,  1008,  9779,  2094,  1006,  1060,  1010,  1050,
         1007,  1012,   102])"
647,1,"['sample', 'sample variance', 'variance']", VARIANCE AND STANDARD DEVIATION,seg_155,"using the notation introduced in section 1 (chapter 1), we define sample variance as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([23284,  1998,  3115, 24353])","tensor([  101,  2478,  1996, 14869,  3107,  1999,  2930,  1015,  1006,  3127,
         1015,  1007,  1010,  2057,  9375,  7099, 23284,  2004,   102])"
648,1,"['variance', 'population']", VARIANCE AND STANDARD DEVIATION,seg_155,the variance of the population is defined as,tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([23284,  1998,  3115, 24353])","tensor([  101,  1996, 23284,  1997,  1996,  2313,  2003,  4225,  2004,   102])"
649,1,"['mean', 'variance', 'data', 'estimated', 'sample', 'sample size', 'population', 'population mean', 'covariance', 'sample covariance', 'sum of squares']", VARIANCE AND STANDARD DEVIATION,seg_155,"where   is the population mean, n is the sample size, and n is the population size. being a sum of squares, s2 and  2 are always≥ 0. we will keep the divisor n in analogy with the sample covariance (see chapter 8) that uses n in the denominator although x and y are estimated from the data. in addition, the sample covariance should reduce to the variance when y′",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([23284,  1998,  3115, 24353])","tensor([  101,  2073,  2003,  1996,  2313,  2812,  1010,  1050,  2003,  1996,
         7099,  2946,  1010,  1998,  1050,  2003,  1996,  2313,  2946,  1012,
         2108,  1037,  7680,  1997, 14320,  1010,  1055,  2475,  1998,  1016,
         2024,  2467, 30136,  1014,  1012,  2057,  2097,  2562,  1996,  4487,
        11365,  2953,  1050,  1999, 23323,  2007,  1996,  7099,  2522, 10755,
        28335,  1006,  2156,  3127,  1022,  1007,  2008,  3594,  1050,  1999,
         1996,  7939, 20936, 27413,  2348,  1060,  1998,  1061,  2024,  4358,
         2013,  1996,  2951,  1012,  1999,  2804,  1010,  1996,  7099,  2522,
        10755, 28335,  2323,  5547,  2000,  1996, 23284,  2043,  1061,  1531,
          102])"
650,0,[], VARIANCE AND STANDARD DEVIATION,seg_155,i s are replaced by xi,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([23284,  1998,  3115, 24353])","tensor([ 101, 1045, 1055, 2024, 2999, 2011, 8418,  102])"
651,1,"['recursive algorithm', 'algorithm', 'observation', 'variance']", VARIANCE AND STANDARD DEVIATION,seg_155,"′s (and y is replaced by x). moreover, in the recursive algorithm for variance defined below, we assume that the variance for n = 1 (a single observation) is zero. this assumption is invalid if (n−1) is used in the denominator.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([23284,  1998,  3115, 24353])","tensor([  101,  1531,  1055,  1006,  1998,  1061,  2003,  2999,  2011,  1060,
         1007,  1012,  9308,  1010,  1999,  1996, 28667,  9236,  3512,  9896,
         2005, 23284,  4225,  2917,  1010,  2057,  7868,  2008,  1996, 23284,
         2005,  1050,  1027,  1015,  1006,  1037,  2309,  8089,  1007,  2003,
         5717,  1012,  2023, 11213,  2003, 19528,  2065,  1006,  1050, 27944,
         1007,  2003,  2109,  1999,  1996,  7939, 20936, 27413,  1012,   102])"
652,0,[], VARIANCE AND STANDARD DEVIATION,seg_155,"by expanding the square, and summing the resulting terms individually, this could also be computed as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23284,  1998,  3115, 24353])","tensor([  101,  2011,  9186,  1996,  2675,  1010,  1998,  7680,  6562,  1996,
         4525,  3408, 14258,  1010,  2023,  2071,  2036,  2022, 24806,  2004,
          102])"
653,1,['frequency'], VARIANCE AND STANDARD DEVIATION,seg_155,where n is to be interpreted appropriately (as n − 1 or n). this has a frequency version given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([23284,  1998,  3115, 24353])","tensor([  101,  2073,  1050,  2003,  2000,  2022, 10009, 23263,  1006,  2004,
         1050,  1597,  1015,  2030,  1050,  1007,  1012,  2023,  2038,  1037,
         6075,  2544,  2445,  2011,   102])"
654,1,"['deviation', 'variance', 'standard deviation', 'standard']", VARIANCE AND STANDARD DEVIATION,seg_155,"positive square-root of variance is called the standard deviation. many other formula are also available for the variance (see references 9, 30–32, which are more of theoretical interest than from a computational viewpoint.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  1998,  3115, 24353])","tensor([  101,  3893,  2675,  1011,  7117,  1997, 23284,  2003,  2170,  1996,
         3115, 24353,  1012,  2116,  2060,  5675,  2024,  2036,  2800,  2005,
         1996, 23284,  1006,  2156,  7604,  1023,  1010,  2382,  1516,  3590,
         1010,  2029,  2024,  2062,  1997,  9373,  3037,  2084,  2013,  1037,
        15078, 21386,  1012,   102])"
655,1,"['mean', 'distribution', 'range', 'variance', 'deviation', 'observations', 'population', 'sample', 'sample variance', 'samples', 'data']", Advantages of Variance,seg_157,"the main advantages of variance are that (i) it uses all of the sample observations, (ii) it lends itself to further arithmetic operations, (iii) distribution of sample variance is known when the population distribution is known, and (iv) it can be found without data sorting. it is well defined for univariate as well as multivariate samples (but the range and mean absolute deviation are seldom used for multivariate samples or procedures).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  1996,  2364, 12637,  1997, 23284,  2024,  2008,  1006,  1045,
         1007,  2009,  3594,  2035,  1997,  1996,  7099,  9420,  1010,  1006,
         2462,  1007,  2009, 18496,  2015,  2993,  2000,  2582, 20204,  3136,
         1010,  1006,  3523,  1007,  4353,  1997,  7099, 23284,  2003,  2124,
         2043,  1996,  2313,  4353,  2003,  2124,  1010,  1998,  1006,  4921,
         1007,  2009,  2064,  2022,  2179,  2302,  2951, 22210,  1012,  2009,
         2003,  2092,  4225,  2005,  4895, 28739, 13143,  2004,  2092,  2004,
         4800, 10755, 13143,  8168,  1006,  2021,  1996,  2846,  1998,  2812,
         7619, 24353,  2024, 15839,  2109,  2005,  4800, 10755, 13143,  8168,
         2030,  8853,  1007,  1012,   102])"
656,1,"['sample', 'sample variance', 'variance']", Advantages of Variance,seg_157,theorem 3.1 the sample variance can be recursively computed as s2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  9872,  1017,  1012,  1015,  1996,  7099, 23284,  2064,  2022,
        28667,  9236, 14547, 24806,  2004,  1055,  2475,   102])"
657,1,"['sample', 'sample variance', 'variance']", Advantages of Variance,seg_157,proof: we give a proof for the more general result for the unscaled variance. let n denote the denominator of the sample variance for n + 1 dof. then,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  6947,  1024,  2057,  2507,  1037,  6947,  2005,  1996,  2062,
         2236,  2765,  2005,  1996,  4895, 15782,  3709, 23284,  1012,  2292,
         1050, 19090,  1996,  7939, 20936, 27413,  1997,  1996,  7099, 23284,
         2005,  1050,  1009,  1015,  2079,  2546,  1012,  2059,   102])"
658,1,['factor'], Advantages of Variance,seg_157,"1 (xi − xn+1)2∕n, where n is the scaling factor (either n or n + 1). split n+1 this into two terms to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  1015,  1006,  8418,  1597,  1060,  2078,  1009,  1015,  1007,
          100,  1010,  2073,  1050,  2003,  1996, 25169,  5387,  1006,  2593,
         1050,  2030,  1050,  1009,  1015,  1007,  1012,  3975,  1050,  1009,
         1015,  2023,  2046,  2048,  3408,  2000,  2131,   102])"
659,1,['variable'], Advantages of Variance,seg_157,"expand as a quadratic and sum term by term. the first term becomes (n − 1)sn2. the product term reduces to zero using equation 2.4 (p. 46) of last chapter. as the second term does not involve the index variable i, summing it n times gives the second square",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  7818,  2004,  1037, 17718, 23671,  1998,  7680,  2744,  2011,
         2744,  1012,  1996,  2034,  2744,  4150,  1006,  1050,  1597,  1015,
         1007,  1055,  2078,  2475,  1012,  1996,  4031,  2744, 13416,  2000,
         5717,  2478,  8522,  1016,  1012,  1018,  1006,  1052,  1012,  4805,
         1007,  1997,  2197,  3127,  1012,  2004,  1996,  2117,  2744,  2515,
         2025,  9125,  1996,  5950,  8023,  1045,  1010,  7680,  6562,  2009,
         1050,  2335,  3957,  1996,  2117,  2675,   102])"
660,1,['factor'], Advantages of Variance,seg_157,term as n(xn+1 − xn)2∕(n + 1). combine (1)+(2) and take n∕(n + 1)2(xn+1 − xn)2 as a common factor to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  2744,  2004,  1050,  1006,  1060,  2078,  1009,  1015,  1597,
         1060,  2078,  1007,   100,  1006,  1050,  1009,  1015,  1007,  1012,
        11506,  1006,  1015,  1007,  1009,  1006,  1016,  1007,  1998,  2202,
          100,  1006,  1050,  1009,  1015,  1007,  1016,  1006,  1060,  2078,
         1009,  1015,  1597,  1060,  2078,  1007,  1016,  2004,  1037,  2691,
         5387,  2000,  2131,   102])"
661,0,['n'], Advantages of Variance,seg_157,divide throughout by n = n to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12637,  1997, 23284])","tensor([  101, 11443,  2802,  2011,  1050,  1027,  1050,  2000,  2131,   102])"
662,1,['factor'], Advantages of Variance,seg_157,"n+1) as a scaling factor, the corresponding",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  1050,  1009,  1015,  1007,  2004,  1037, 25169,  5387,  1010,
         1996,  7978,   102])"
663,1,['variance'], Advantages of Variance,seg_157,recurrence for variance becomes (1 + 1,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101, 28667,  3126, 24413,  2005, 23284,  4150,  1006,  1015,  1009,
         1015,   102])"
664,1,['variance'], Advantages of Variance,seg_157,example 3.2 variance of chlorine in drinking water,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  2742,  1017,  1012,  1016, 23284,  1997, 10381, 10626,  3170,
         1999,  5948,  2300,   102])"
665,1,"['locations', 'variance']", Advantages of Variance,seg_157,"chlorine in drinking water at eight locations in ml/cc are [8, 17, 12, 13, 10]. find the variance using theorem 3.1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12637,  1997, 23284])","tensor([  101, 10381, 10626,  3170,  1999,  5948,  2300,  2012,  2809,  5269,
         1999, 19875,  1013, 10507,  2024,  1031,  1022,  1010,  2459,  1010,
         2260,  1010,  2410,  1010,  2184,  1033,  1012,  2424,  1996, 23284,
         2478,  9872,  1017,  1012,  1015,  1012,   102])"
666,1,"['variance', 'table', 'sample', 'sample means']", Advantages of Variance,seg_157,solution 3.2 table 3.2 gives various steps using both algorithms (that uses n in the denominator and (n − 1) in the denominator). the sample means (second column) need be computed until (n − 1)th row. the last entry in 3rd (resp 4th) column is the variance with n (resp. n − 1) in the denominator.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  5576,  1017,  1012,  1016,  2795,  1017,  1012,  1016,  3957,
         2536,  4084,  2478,  2119, 13792,  1006,  2008,  3594,  1050,  1999,
         1996,  7939, 20936, 27413,  1998,  1006,  1050,  1597,  1015,  1007,
         1999,  1996,  7939, 20936, 27413,  1007,  1012,  1996,  7099,  2965,
         1006,  2117,  5930,  1007,  2342,  2022, 24806,  2127,  1006,  1050,
         1597,  1015,  1007, 16215,  5216,  1012,  1996,  2197,  4443,  1999,
         3822,  1006, 24501,  2361,  4343,  1007,  5930,  2003,  1996, 23284,
         2007,  1050,  1006, 24501,  2361,  1012,  1050,  1597,  1015,  1007,
         1999,  1996,  7939, 20936, 27413,  1012,   102])"
667,1,"['variance', 'variances', 'sample', 'samples', 'combined sample']", Advantages of Variance,seg_157,"2) are the arithmetic means and variances of two samples s1 and s2 of respective sizes n1 and n2, the variance of the combined sample of size n1 + n2 is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  1016,  1007,  2024,  1996, 20204,  2965,  1998, 23284,  2015,
         1997,  2048,  8168,  1055,  2487,  1998,  1055,  2475,  1997,  7972,
        10826,  1050,  2487,  1998,  1050,  2475,  1010,  1996, 23284,  1997,
         1996,  4117,  7099,  1997,  2946,  1050,  2487,  1009,  1050,  2475,
         2003,  2445,  2011,   102])"
668,1,"['mean', 'variance', 'sample', 'combined sample', 'sample mean']", Advantages of Variance,seg_157,"proof: by theorem 2.1, the combined sample mean is xc = (n1x1 + n2x2)∕(n1 + n2). the variance of the combined sample by definition is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  6947,  1024,  2011,  9872,  1016,  1012,  1015,  1010,  1996,
         4117,  7099,  2812,  2003,  1060,  2278,  1027,  1006,  1050,  2487,
         2595,  2487,  1009,  1050,  2475,  2595,  2475,  1007,   100,  1006,
         1050,  2487,  1009,  1050,  2475,  1007,  1012,  1996, 23284,  1997,
         1996,  4117,  7099,  2011,  6210,  2003,   102])"
669,0,[], Advantages of Variance,seg_157,consider the expression ∑n,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([12637,  1997, 23284])","tensor([ 101, 5136, 1996, 3670,  100,  102])"
670,0,[], Advantages of Variance,seg_157,"+n2 (xi − xc)2. split this into two terms t1 and t2 over s1 and s2, respectively. substitute for xc in t1 to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12637,  1997, 23284])","tensor([ 101, 1009, 1050, 2475, 1006, 8418, 1597, 1060, 2278, 1007, 1016, 1012,
        3975, 2023, 2046, 2048, 3408, 1056, 2487, 1998, 1056, 2475, 2058, 1055,
        2487, 1998, 1055, 2475, 1010, 4414, 1012, 7681, 2005, 1060, 2278, 1999,
        1056, 2487, 2000, 2131,  102])"
671,1,['summation'], Advantages of Variance,seg_157,take (n1 + n2)2 outside the summation from the denominator.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  2202,  1006,  1050,  2487,  1009,  1050,  2475,  1007,  1016,
         2648,  1996,  7680, 28649,  2013,  1996,  7939, 20936, 27413,  1012,
          102])"
672,1,['summation'], Advantages of Variance,seg_157,"add and subtract n2x1 inside the summation, combine −n1x1 and −n2x1 as −(n1 + 1 n2)x1, to get t1 = (n1+n2)2 ∑xi∈s1 ((n1 + n2)[xi − x1] + n2(x1 − x2))2. expanding the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  5587,  1998,  4942,  6494,  6593,  1050,  2475,  2595,  2487,
         2503,  1996,  7680, 28649,  1010, 11506,  1597,  2078,  2487,  2595,
         2487,  1998,  1597,  2078,  2475,  2595,  2487,  2004,  1597,  1006,
         1050,  2487,  1009,  1015,  1050,  2475,  1007,  1060,  2487,  1010,
         2000,  2131,  1056,  2487,  1027,  1006,  1050,  2487,  1009,  1050,
         2475,  1007,  1016,   100,  1006,  1006,  1050,  2487,  1009,  1050,
         2475,  1007,  1031,  8418,  1597,  1060,  2487,  1033,  1009,  1050,
         2475,  1006,  1060,  2487,  1597,  1060,  2475,  1007,  1007,  1016,
         1012,  9186,  1996,   102])"
673,0,[], Advantages of Variance,seg_157,"as (x1 − x2) is a constant, the second expression becomes n1n2",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12637,  1997, 23284])","tensor([ 101, 2004, 1006, 1060, 2487, 1597, 1060, 2475, 1007, 2003, 1037, 5377,
        1010, 1996, 2117, 3670, 4150, 1050, 2487, 2078, 2475,  102])"
674,0,[], Advantages of Variance,seg_157,"2. thus, t1 simplifies to n1s1",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12637,  1997, 23284])","tensor([  101,  1016,  1012,  2947,  1010,  1056,  2487, 21934, 24759, 14144,
         2000,  1050,  2487,  2015,  2487,   102])"
675,0,[], Advantages of Variance,seg_157,a similar reduction is possible for t2 by adding and subtracting n1x2 inside the,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12637,  1997, 23284])","tensor([  101,  1037,  2714,  7312,  2003,  2825,  2005,  1056,  2475,  2011,
         5815,  1998,  4942,  6494, 11873,  1050,  2487,  2595,  2475,  2503,
         1996,   102])"
676,0,[], Advantages of Variance,seg_157,summation of t2. this gives us t2 = n2s2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12637,  1997, 23284])","tensor([  101,  7680, 28649,  1997,  1056,  2475,  1012,  2023,  3957,  2149,
         1056,  2475,  1027,  1050,  2475,  2015,  2475,   102])"
677,1,['variance'], Advantages of Variance,seg_157,where n1 and n2 are the divisors used in the respective variance (n or n − 1).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  2073,  1050,  2487,  1998,  1050,  2475,  2024,  1996,  4487,
        11365,  5668,  2109,  1999,  1996,  7972, 23284,  1006,  1050,  2030,
         1050,  1597,  1015,  1007,  1012,   102])"
678,1,['covariance'], Advantages of Variance,seg_157,corollary 1 the covariance of two subsamples can be combined using the relationship,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  2522, 28402,  5649,  1015,  1996,  2522, 10755, 28335,  1997,
         2048,  4942, 21559, 21112,  2064,  2022,  4117,  2478,  1996,  3276,
          102])"
679,1,"['covariance', 'mean', 'factors']", Advantages of Variance,seg_157,"where n1 and n2 are the scaling factors, covc1 is the covariance and (x1, y1) is the mean vector of the first subsample, and covc2 is the covariance and (x2, y2) is the mean vector of the second subsample.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 23284])","tensor([  101,  2073,  1050,  2487,  1998,  1050,  2475,  2024,  1996, 25169,
         5876,  1010,  2522, 25465,  2487,  2003,  1996,  2522, 10755, 28335,
         1998,  1006,  1060,  2487,  1010,  1061,  2487,  1007,  2003,  1996,
         2812,  9207,  1997,  1996,  2034,  4942, 21559, 10814,  1010,  1998,
         2522, 25465,  2475,  2003,  1996,  2522, 10755, 28335,  1998,  1006,
         1060,  2475,  1010,  1061,  2475,  1007,  2003,  1996,  2812,  9207,
         1997,  1996,  2117,  4942, 21559, 10814,  1012,   102])"
680,1,"['variances', 'transformed', 'data']", Change of Origin and Scale Transformation for Variance,seg_159,"theorem 3.3 if data are transformed as y = (x − a)∕c, the variances are related as sy2 = (1∕c2)sx2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2689,  1997,  4761,  1998,  4094,  8651,  2005, 23284])","tensor([  101,  9872,  1017,  1012,  1017,  2065,  2951,  2024,  8590,  2004,
         1061,  1027,  1006,  1060,  1597,  1037,  1007,   100,  1010,  1996,
        23284,  2015,  2024,  3141,  2004, 25353,  2475,  1027,  1006,   100,
         1007,  1055,  2595,  2475,  1012,   102])"
681,0,[], Change of Origin and Scale Transformation for Variance,seg_159,proof: the means are clearly related as y = (x − a)∕c. consider ∑i,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2689,  1997,  4761,  1998,  4094,  8651,  2005, 23284])","tensor([ 101, 6947, 1024, 1996, 2965, 2024, 4415, 3141, 2004, 1061, 1027, 1006,
        1060, 1597, 1037, 1007,  100, 1012, 5136,  100,  102])"
682,1,"['variability', 'dispersion measures', 'location', 'estimate', 'standard deviation', 'scale variant', 'data', 'deviation', 'information', 'location measure', 'dispersion', 'standard', 'range', 'variance', 'sample', 'measurement', 'variable']", Change of Origin and Scale Transformation for Variance,seg_159,"dispersion measures concisely quantify the amount of spread inherent in a sample. some dispersion measures use a location measure as a pivot to calculate the deviations (section 3.1.1). both the sample range and iqr do not use a pivot. hence, they can be used to get a preliminary estimate of the spread. because the dispersion measures explain the inherent variability in the sample data, those measures that utilize a location measure are preferred for engineering applications. all absolute spread measures depend on the unit of measurement of the variable. in other words, they are scale variant. however, there are some relative measures such as the cv that does not depend on the unit of measurement. this is summarized as several theorems below (section 3.6) in p. 82. the popular dispersion measures can be arranged according to the inherent information on the amount of spread captured by them from a sample as: range iqr aad variance. thus, the variance and standard deviation (positive square-root of variance) contain maximum spread information in a sample.",tensor(1),"tensor([0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 2689,  1997,  4761,  1998,  4094,  8651,  2005, 23284])","tensor([  101,  4487, 17668, 10992,  5761,  9530, 18380,  2135, 24110, 27351,
         1996,  3815,  1997,  3659, 16112,  1999,  1037,  7099,  1012,  2070,
         4487, 17668, 10992,  5761,  2224,  1037,  3295,  5468,  2004,  1037,
        14255, 22994,  2000, 18422,  1996, 24353,  2015,  1006,  2930,  1017,
         1012,  1015,  1012,  1015,  1007,  1012,  2119,  1996,  7099,  2846,
         1998, 26264,  2099,  2079,  2025,  2224,  1037, 14255, 22994,  1012,
         6516,  1010,  2027,  2064,  2022,  2109,  2000,  2131,  1037,  8824,
        10197,  1997,  1996,  3659,  1012,  2138,  1996,  4487, 17668, 10992,
         5761,  4863,  1996, 16112, 28436,  1999,  1996,  7099,  2951,  1010,
         2216,  5761,  2008, 16462,  1037,  3295,  5468,  2024,  6871,  2005,
         3330,  5097,  1012,  2035,  7619,  3659,  5761, 12530,  2006,  1996,
         3131,  1997, 10903,  1997,  1996,  8023,  1012,  1999,  2060,  2616,
         1010,  2027,  2024,  4094,  8349,  1012,  2174,  1010,  2045,  2024,
         2070,  5816,  5761,  2107,  2004,  1996, 26226,  2008,  2515,  2025,
        12530,  2006,  1996,  3131,  1997, 10903,  1012,  2023,  2003, 22539,
         2004,  2195,  9872,  2015,  2917,  1006,  2930,  1017,  1012,  1020,
         1007,  1999,  1052,  1012,  6445,  1012,  1996,  2759,  4487, 17668,
        10992,  5761,  2064,  2022,  5412,  2429,  2000,  1996, 16112,  2592,
         2006,  1996,  3815,  1997,  3659,  4110,  2011,  2068,  2013,  1037,
         7099,  2004,  1024,  2846, 26264,  2099,  9779,  2094, 23284,  1012,
         2947,  1010,  1996, 23284,  1998,  3115, 24353,  1006,  3893,  2675,
         1011,  7117,  1997, 23284,  1007,  5383,  4555,  3659,  2592,  1999,
         1037,  7099,  1012,   102])"
683,1,"['ordinal data', 'precision', 'loss', 'variance', 'observations', 'ordinal', 'standard', 'algorithm', 'data']", Disadvantages of Variance,seg_161,"the main disadvantages of variance are that (i) extreme observations on either side has a large influence on variance, (ii) it is inappropriate for numeric coded ordinal data, (iii) it can result in loss of precision due to squaring when large decimal numbers are involved, and (iv) it may require 2 passes through data (in standard algorithm) although it can be computed in a single pass.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20502,  2015,  1997, 23284])","tensor([  101,  1996,  2364, 20502,  2015,  1997, 23284,  2024,  2008,  1006,
         1045,  1007,  6034,  9420,  2006,  2593,  2217,  2038,  1037,  2312,
         3747,  2006, 23284,  1010,  1006,  2462,  1007,  2009,  2003, 15884,
         2005, 16371, 25531, 22402,  2030, 18979,  2140,  2951,  1010,  1006,
         3523,  1007,  2009,  2064,  2765,  1999,  3279,  1997, 11718,  2349,
         2000,  5490,  6692,  4892,  2043,  2312, 26066,  3616,  2024,  2920,
         1010,  1998,  1006,  4921,  1007,  2009,  2089,  5478,  1016,  5235,
         2083,  2951,  1006,  1999,  3115,  9896,  1007,  2348,  2009,  2064,
         2022, 24806,  1999,  1037,  2309,  3413,  1012,   102])"
684,1,"['range', 'deviation', 'variance', 'sample', 'standard deviation', 'standard', 'sample variance', 'sum of squares']", A Bound for Sample Standard Deviation,seg_163,"as the sample variance is a sum of squares, it is always ≥ 0. several researchers have come up with bounds for variance or standard deviation. mcleod and henderson [33–35] gave a lower bound for the standard deviation. shiffler and harsha [36] provided an upper bound for the standard deviation in terms of the range. for a sample of size ≥3, these bounds can be combined to get a bound for the standard deviation as",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 1037,  5391,  2005,  7099,  3115, 24353])","tensor([  101,  2004,  1996,  7099, 23284,  2003,  1037,  7680,  1997, 14320,
         1010,  2009,  2003,  2467,  1609,  1014,  1012,  2195,  6950,  2031,
         2272,  2039,  2007, 19202,  2005, 23284,  2030,  3115, 24353,  1012,
        25363,  1998,  9481,  1031,  3943,  1516,  3486,  1033,  2435,  1037,
         2896,  5391,  2005,  1996,  3115, 24353,  1012, 11895, 18142,  2099,
         1998,  8401,  2050,  1031,  4029,  1033,  3024,  2019,  3356,  5391,
         2005,  1996,  3115, 24353,  1999,  3408,  1997,  1996,  2846,  1012,
         2005,  1037,  7099,  1997,  2946,  1609,  2509,  1010,  2122, 19202,
         2064,  2022,  4117,  2000,  2131,  1037,  5391,  2005,  1996,  3115,
        24353,  2004,   102])"
685,1,"['sample', 'range']", A Bound for Sample Standard Deviation,seg_163,"where r is the sample range. note that the upper bound is not tight asymptotically. as n becomes large, the quantity (n∕(n − 1))1∕2 will converge quickly to 1,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1037,  5391,  2005,  7099,  3115, 24353])","tensor([  101,  2073,  1054,  2003,  1996,  7099,  2846,  1012,  3602,  2008,
         1996,  3356,  5391,  2003,  2025,  4389,  2004, 24335, 13876, 20214,
         3973,  1012,  2004,  1050,  4150,  2312,  1010,  1996, 11712,  1006,
          100,  1006,  1050,  1597,  1015,  1007,  1007,   100,  2097, 28314,
         2855,  2000,  1015,  1010,   102])"
686,1,['variance'], A Bound for Sample Standard Deviation,seg_163,"2, giving s ≤ r/√ 2 = 0.70711 ∗ r. in fact, it can be shown that for n = 2 the equality holds, because the variance is (x1 − x2)2∕2. a sharper upper bound can be found in reference 37 as s ≤ r(1∕2 − (n − 2)∕[n(n − 1)])1∕2 for n ≥ 2. write (n − 2) as (n − 1) − 1 to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1037,  5391,  2005,  7099,  3115, 24353])","tensor([  101,  1016,  1010,  3228,  1055,  1608,  1054,  1013,  1600,  1016,
         1027,  1014,  1012,  3963,  2581, 14526,  1598,  1054,  1012,  1999,
         2755,  1010,  2009,  2064,  2022,  3491,  2008,  2005,  1050,  1027,
         1016,  1996,  9945,  4324,  1010,  2138,  1996, 23284,  2003,  1006,
         1060,  2487,  1597,  1060,  2475,  1007,   100,  1012,  1037, 22147,
         2099,  3356,  5391,  2064,  2022,  2179,  1999,  4431,  4261,  2004,
         1055,  1608,  1054,  1006,   100,  1597,  1006,  1050,  1597,  1016,
         1007,   100,  1031,  1050,  1006,  1050,  1597,  1015,  1007,  1033,
         1007,   100,  2005,  1050,  1609,  1016,  1012,  4339,  1006,  1050,
         1597,  1016,  1007,  2004,  1006,  1050,  1597,  1015,  1007,  1597,
         1015,  2000,  2131,   102])"
687,1,"['sample', 'standard', 'population', 'variables']", COEFFICIENT OF VARIATION,seg_165,"definition 3.5 the cv of a sample is a relative ratio-measure defined as (s∕x) × 100, and the corresponding population cv is ( ∕ ) × 100. this form of cv is called the standard form, and it applies to single variables only.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([19064,  1997,  8386])","tensor([  101,  6210,  1017,  1012,  1019,  1996, 26226,  1997,  1037,  7099,
         2003,  1037,  5816,  6463,  1011,  5468,  4225,  2004,  1006,   100,
         1007,  1095,  2531,  1010,  1998,  1996,  7978,  2313, 26226,  2003,
         1006,   100,  1007,  1095,  2531,  1012,  2023,  2433,  1997, 26226,
         2003,  2170,  1996,  3115,  2433,  1010,  1998,  2009, 12033,  2000,
         2309, 10857,  2069,  1012,   102])"
688,1,"['variability', 'variance', 'change of scale', 'sample', 'sample size', 'intervals', 'samples', 'confidence intervals', 'confidence', 'numerical', 'data', 'transformation', 'normality']", Advantages of Coefficient of Variation,seg_167,"the cv is simple to understand. it is a unit-less measure whose numerical value is high when data variance is high. if the variability of two samples measured in different units are to be compared, cv is the most appropriate measure. in other words, cv allows variability of heterogeneous samples to be compared among themselves. a change of scale transformation y = c ∗ x will not change the cv as the c will be canceled out from the numerator and denominator. it can be used to create confidence intervals. it provides caution on the sample size, normality, or departures from it.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 19064,  1997,  8386])","tensor([  101,  1996, 26226,  2003,  3722,  2000,  3305,  1012,  2009,  2003,
         1037,  3131,  1011,  2625,  5468,  3005, 15973,  3643,  2003,  2152,
         2043,  2951, 23284,  2003,  2152,  1012,  2065,  1996, 28436,  1997,
         2048,  8168,  7594,  1999,  2367,  3197,  2024,  2000,  2022,  4102,
         1010, 26226,  2003,  1996,  2087,  6413,  5468,  1012,  1999,  2060,
         2616,  1010, 26226,  4473, 28436,  1997, 21770, 10624,  6914, 14769,
         8168,  2000,  2022,  4102,  2426,  3209,  1012,  1037,  2689,  1997,
         4094,  8651,  1061,  1027,  1039,  1598,  1060,  2097,  2025,  2689,
         1996, 26226,  2004,  1996,  1039,  2097,  2022, 13261,  2041,  2013,
         1996, 16371,  5017,  8844,  1998,  7939, 20936, 27413,  1012,  2009,
         2064,  2022,  2109,  2000,  3443,  7023, 14025,  1012,  2009,  3640,
        14046,  2006,  1996,  7099,  2946,  1010,  3671,  3012,  1010,  2030,
         6712,  2015,  2013,  2009,  1012,   102])"
689,1,"['variance', 'random sample', 'sample', 'random', 'factor']", Advantages of Coefficient of Variation,seg_167,"the cv of a random sample of size 1 is zero if n is used as a divisor in the variance, and the cv is undefined if n − 1 is used. symbolically, cv(x1) = 0 if n is used as scaling factor. for a sample of size 2, cv(x1, x2) = |x1 − x2|∕(x1 + x2) if n is used,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12637,  1997, 19064,  1997,  8386])","tensor([  101,  1996, 26226,  1997,  1037,  6721,  7099,  1997,  2946,  1015,
         2003,  5717,  2065,  1050,  2003,  2109,  2004,  1037,  4487, 11365,
         2953,  1999,  1996, 23284,  1010,  1998,  1996, 26226,  2003,  6151,
        28344,  2065,  1050,  1597,  1015,  2003,  2109,  1012, 12613,  3973,
         1010, 26226,  1006,  1060,  2487,  1007,  1027,  1014,  2065,  1050,
         2003,  2109,  2004, 25169,  5387,  1012,  2005,  1037,  7099,  1997,
         2946,  1016,  1010, 26226,  1006,  1060,  2487,  1010,  1060,  2475,
         1007,  1027,  1064,  1060,  2487,  1597,  1060,  2475,  1064,   100,
         1006,  1060,  2487,  1009,  1060,  2475,  1007,  2065,  1050,  2003,
         2109,  1010,   102])"
690,1,['variance'], Advantages of Coefficient of Variation,seg_167,2|x1 − x2|∕(x1 + x2) if n − 1 is used in variance. when cv is used,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 19064,  1997,  8386])","tensor([  101,  1016,  1064,  1060,  2487,  1597,  1060,  2475,  1064,   100,
         1006,  1060,  2487,  1009,  1060,  2475,  1007,  2065,  1050,  1597,
         1015,  2003,  2109,  1999, 23284,  1012,  2043, 26226,  2003,  2109,
          102])"
691,1,['model'], Advantages of Coefficient of Variation,seg_167,"in the model setting, it can indicate which model better fits the data—the smaller the cv, the better the fit.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12637,  1997, 19064,  1997,  8386])","tensor([  101,  1999,  1996,  2944,  4292,  1010,  2009,  2064,  5769,  2029,
         2944,  2488, 16142,  1996,  2951,  1517,  1996,  3760,  1996, 26226,
         1010,  1996,  2488,  1996,  4906,  1012,   102])"
692,1,"['location', 'mean', 'variability', 'change of origin', 'transformation', 'sample', 'results', 'outliers', 'samples', 'variables', 'arithmetic mean', 'transformations', 'variable', 'case']", Disadvantages of Coefficient of Variation,seg_169,"as the denominator of cv contains x, the arithmetic mean should be nonzero. if a variable takes both positive and negative values and the mean is very close to zero, we cannot use the cv. thus it is most appropriate when variables are either strictly positive or strictly negative. this is a disadvantage. however, there is a catch. the cv is location variant. this means that a change of origin transformation y = x + c results in the same numerator sy, but the denominator is shifted by c units. when cv is used to compare the variability of two samples, at least one of which has zero mean, we could choose the c carefully in such a way that the resulting means are nonzero. alternatively, we could remove outliers from that sample which had a mean near zero with the hope of shifting it away from zero. it cannot easily be extended to the multivariate case. another disadvantage of cv is that it can result in misleading or conflicting interpretations under some transformations such as y = log(x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20502,  2015,  1997, 19064,  1997,  8386])","tensor([  101,  2004,  1996,  7939, 20936, 27413,  1997, 26226,  3397,  1060,
         1010,  1996, 20204,  2812,  2323,  2022,  2512,  6290,  2080,  1012,
         2065,  1037,  8023,  3138,  2119,  3893,  1998,  4997,  5300,  1998,
         1996,  2812,  2003,  2200,  2485,  2000,  5717,  1010,  2057,  3685,
         2224,  1996, 26226,  1012,  2947,  2009,  2003,  2087,  6413,  2043,
        10857,  2024,  2593,  9975,  3893,  2030,  9975,  4997,  1012,  2023,
         2003,  1037, 20502,  1012,  2174,  1010,  2045,  2003,  1037,  4608,
         1012,  1996, 26226,  2003,  3295,  8349,  1012,  2023,  2965,  2008,
         1037,  2689,  1997,  4761,  8651,  1061,  1027,  1060,  1009,  1039,
         3463,  1999,  1996,  2168, 16371,  5017,  8844, 25353,  1010,  2021,
         1996,  7939, 20936, 27413,  2003,  5429,  2011,  1039,  3197,  1012,
         2043, 26226,  2003,  2109,  2000, 12826,  1996, 28436,  1997,  2048,
         8168,  1010,  2012,  2560,  2028,  1997,  2029,  2038,  5717,  2812,
         1010,  2057,  2071,  5454,  1996,  1039,  5362,  1999,  2107,  1037,
         2126,  2008,  1996,  4525,  2965,  2024,  2512,  6290,  2080,  1012,
        14084,  1010,  2057,  2071,  6366,  2041, 14355,  2015,  2013,  2008,
         7099,  2029,  2018,  1037,  2812,  2379,  5717,  2007,  1996,  3246,
         1997,  9564,  2009,  2185,  2013,  5717,  1012,  2009,  3685,  4089,
         2022,  3668,  2000,  1996,  4800, 10755, 13143,  2553,  1012,  2178,
        20502,  1997, 26226,  2003,  2008,  2009,  2064,  2765,  1999, 22369,
         2030, 19326, 15931,  2104,  2070, 21865,  2107,  2004,  1061,  1027,
         8833,  1006,  1060,  1007,  1012,   102])"
693,1,"['regression', 'estimation', 'estimated', 'dependent', 'goodness of fit', 'mean', 'estimate', 'mean square error', 'mean square', 'standard deviation', 'samples', 'standard error', 'parameter', 'deviation', 'dependent variable', 'variable', 'dispersion', 'standard', 'variance', 'error']", An Interpretation of Coefficient of Variation,seg_171,"as the cv is a ratio of standard deviation (which being the +ve square-root of variance is always positive) to the mean, its sign depends on the sign of x (if x is positive (negative), cv is positive (negative); if x is zero, cv is undefined). as the numerator and denominator are expressed in the same unit as the variate, the ratio is unit-less. thus, it summarizes the dispersion of a variable as a concise and unit-less real number. hence, it can be used across geographical boundaries, irrespective of the units in use. when two samples are being compared by the cv, a higher value may be due to a lower x. depending on whether x →0 from below or above, the cv will tend to ±∞ for fixed variance. the cv also has an interpretation in terms of the ratio of the root mean square error (rmse) to the mean of the dependent variable in regression models, and as the ratio of the standard error of an estimate to its estimated value [see ( ̂ )∕ ̂ ] in parameter estimation]. the smaller the cv, the better the goodness of fit, or the estimation procedure.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 2019,  7613,  1997, 19064,  1997,  8386])","tensor([  101,  2004,  1996, 26226,  2003,  1037,  6463,  1997,  3115, 24353,
         1006,  2029,  2108,  1996,  1009,  2310,  2675,  1011,  7117,  1997,
        23284,  2003,  2467,  3893,  1007,  2000,  1996,  2812,  1010,  2049,
         3696,  9041,  2006,  1996,  3696,  1997,  1060,  1006,  2065,  1060,
         2003,  3893,  1006,  4997,  1007,  1010, 26226,  2003,  3893,  1006,
         4997,  1007,  1025,  2065,  1060,  2003,  5717,  1010, 26226,  2003,
         6151, 28344,  1007,  1012,  2004,  1996, 16371,  5017,  8844,  1998,
         7939, 20936, 27413,  2024,  5228,  1999,  1996,  2168,  3131,  2004,
         1996, 13075, 13143,  1010,  1996,  6463,  2003,  3131,  1011,  2625,
         1012,  2947,  1010,  2009,  7680,  7849, 10057,  1996,  4487, 17668,
        10992,  1997,  1037,  8023,  2004,  1037,  9530, 18380,  1998,  3131,
         1011,  2625,  2613,  2193,  1012,  6516,  1010,  2009,  2064,  2022,
         2109,  2408, 10056,  7372,  1010, 20868,  6072,  5051, 15277,  1997,
         1996,  3197,  1999,  2224,  1012,  2043,  2048,  8168,  2024,  2108,
         4102,  2011,  1996, 26226,  1010,  1037,  3020,  3643,  2089,  2022,
         2349,  2000,  1037,  2896,  1060,  1012,  5834,  2006,  3251,  1060,
         1585,  2692,  2013,  2917,  2030,  2682,  1010,  1996, 26226,  2097,
         7166,  2000,  1081, 30128,  2005,  4964, 23284,  1012,  1996, 26226,
         2036,  2038,  2019,  7613,  1999,  3408,  1997,  1996,  6463,  1997,
         1996,  7117,  2812,  2675,  7561,  1006, 29311,  2063,  1007,  2000,
         1996,  2812,  1997,  1996,  7790,  8023,  1999, 26237,  4275,  1010,
         1998,  2004,  1996,  6463,  1997,  1996,  3115,  7561,  1997,  2019,
        10197,  2000,  2049,  4358,  3643,  1031,  2156,  1006,  1007,   100,
         1033,  1999, 16381, 24155,  1033,  1012,  1996,  3760,  1996, 26226,
         1010,  1996,  2488,  1996, 15003,  1997,  4906,  1010,  2030,  1996,
        24155,  7709,  1012,   102])"
694,1,"['change of origin', 'deviation', 'scores', 'change of scale', 'factors', 'factor', 'tests', 'standard deviation', 'standard', 'case', 'transformation']", Change of Origin and Scale for CV,seg_173,"consider the change of scale transformation first. let y = c ∗ x, where c is nonzero. we know that sy = |c| ∗ sx and y = c ∗ x. as the scaling factor c factors out from both the numerator and denominator, the cv is scale invariant (cvy = cvx). this is a desirable characteristic in some applications such as cross-national comparison of traits or attributes such as income, profits, and expenses or cross comparison of scores in different tests such as gre and gmat. next, consider a change of origin transformation y = x + d. in this case the standard deviation remains the same, but",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2689,  1997,  4761,  1998,  4094,  2005, 26226])","tensor([  101,  5136,  1996,  2689,  1997,  4094,  8651,  2034,  1012,  2292,
         1061,  1027,  1039,  1598,  1060,  1010,  2073,  1039,  2003,  2512,
         6290,  2080,  1012,  2057,  2113,  2008, 25353,  1027,  1064,  1039,
         1064,  1598,  1055,  2595,  1998,  1061,  1027,  1039,  1598,  1060,
         1012,  2004,  1996, 25169,  5387,  1039,  5876,  2041,  2013,  2119,
         1996, 16371,  5017,  8844,  1998,  7939, 20936, 27413,  1010,  1996,
        26226,  2003,  4094, 23915,  1006, 26226,  2100,  1027, 26226,  2595,
         1007,  1012,  2023,  2003,  1037, 16166,  8281,  1999,  2070,  5097,
         2107,  2004,  2892,  1011,  2120,  7831,  1997, 12955,  2030, 12332,
         2107,  2004,  3318,  1010, 11372,  1010,  1998, 11727,  2030,  2892,
         7831,  1997,  7644,  1999,  2367,  5852,  2107,  2004, 24665,  2063,
         1998, 20917,  2102,  1012,  2279,  1010,  5136,  1037,  2689,  1997,
         4761,  8651,  1061,  1027,  1060,  1009,  1040,  1012,  1999,  2023,
         2553,  1996,  3115, 24353,  3464,  1996,  2168,  1010,  2021,   102])"
695,1,"['variability', 'mean', 'coefficient']", Change of Origin and Scale for CV,seg_173,"the mean is shifted by d units. then, cvy = sy∕(x + d) = cvx ∗ x∕(x + d). thus, the coefficient of variability can be increased or reduced depending on the magnitude and sign of x∕(x + d).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2689,  1997,  4761,  1998,  4094,  2005, 26226])","tensor([  101,  1996,  2812,  2003,  5429,  2011,  1040,  3197,  1012,  2059,
         1010, 26226,  2100,  1027,   100,  1006,  1060,  1009,  1040,  1007,
         1027, 26226,  2595,  1598,   100,  1006,  1060,  1009,  1040,  1007,
         1012,  2947,  1010,  1996, 19064,  1997, 28436,  2064,  2022,  3445,
         2030,  4359,  5834,  2006,  1996, 10194,  1998,  3696,  1997,   100,
         1006,  1060,  1009,  1040,  1007,  1012,   102])"
696,1,"['mean', 'data', 'sample', 'variables', 'statistic', 'variable']", GINI COEFFICIENT,seg_175,"gini’s mean difference is a summary statistic that measures the extent of the distribution of a variable by fixing other variables. for a sample (x1, x2, … , xn), it is defined for raw data as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([18353,  2072, 19064])","tensor([  101, 18353,  2072,  1521,  1055,  2812,  4489,  2003,  1037, 12654,
        28093,  6553,  2008,  5761,  1996,  6698,  1997,  1996,  4353,  1997,
         1037,  8023,  2011, 15887,  2060, 10857,  1012,  2005,  1037,  7099,
         1006,  1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,  1060,
         2078,  1007,  1010,  2009,  2003,  4225,  2005,  6315,  2951,  2004,
          102])"
697,1,"['frequency', 'distributions']", GINI COEFFICIENT,seg_175,where k = n(n − 1) if j varies from i to n or k = n2 if j varies from 1 to n. for frequency distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([18353,  2072, 19064])","tensor([  101,  2073,  1047,  1027,  1050,  1006,  1050,  1597,  1015,  1007,
         2065,  1046,  9783,  2013,  1045,  2000,  1050,  2030,  1047,  1027,
         1050,  2475,  2065,  1046,  9783,  2013,  1015,  2000,  1050,  1012,
         2005,  6075, 20611,   102])"
698,1,"['coefficient', 'data', 'concentration']", GINI COEFFICIENT,seg_175,n =1 fi. this has the same unit as the data. a unit-less measure can be obtained by dividing gmd by x to get the gini coefficient of concentration as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0.])","tensor([18353,  2072, 19064])","tensor([  101,  1050,  1027,  1015, 10882,  1012,  2023,  2038,  1996,  2168,
         3131,  2004,  1996,  2951,  1012,  1037,  3131,  1011,  2625,  5468,
         2064,  2022,  4663,  2011, 16023, 13938,  2094,  2011,  1060,  2000,
         2131,  1996, 18353,  2072, 19064,  1997,  6693,  2004,   102])"
699,1,"['mean', 'skewed data', 'skewed', 'dispersion', 'data']", GINI COEFFICIENT,seg_175,"as it is a mean difference (see equation 3.2), it can be used to measure dispersion of highly skewed data. as the numerator is always positive, gcc can take any positive value.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18353,  2072, 19064])","tensor([  101,  2004,  2009,  2003,  1037,  2812,  4489,  1006,  2156,  8522,
         1017,  1012,  1016,  1007,  1010,  2009,  2064,  2022,  2109,  2000,
         5468,  4487, 17668, 10992,  1997,  3811, 15315,  7974,  2098,  2951,
         1012,  2004,  1996, 16371,  5017,  8844,  2003,  2467,  3893,  1010,
         1043,  9468,  2064,  2202,  2151,  3893,  3643,  1012,   102])"
700,1,"['coefficient', 'population', 'dispersion measures', 'outlier', 'median', 'mean', 'standard deviation', 'samples', 'data', 'deviation', 'information', 'partitions', 'dispersion', 'standard', 'percentile', 'range', 'variance', 'dispersion measure', 'sample', 'consistency']", SUMMARY,seg_177,"popular measures of dispersion are discussed at length in this chapter. in a sense, the dispersion captures and summarizes data information. the lesser dispersion value refers to more consistency and hence reliability (see figure 3.1). the sample dispersion measure is a surrogate of the corresponding unknown population dispersion. commonly used dispersion measures are range, variance, qd, coefficient of variance, and absolute mean deviation (see figure 3.2). the range (xn − x1) is not indicative of the neighborhood of the data as the same range value could occur among smaller or larger values. hence, the sample dispersion is preferred over the sample range. the variance is of second degree, while the mean is of first degree. the cv (which is the ratio of the standard deviation over the mean) is often used if the measure of dispersion has to be compared across samples. when the data contain one or more unusual value (which is technically called outlier), the inter-qd is selected over the variance or range. the 50th percentile (which is technically called the median) partitions the ordered data into two equal segments. the inter-qd portrays the range between the",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 1., 1., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2759,  5761,  1997,  4487, 17668, 10992,  2024,  6936,  2012,
         3091,  1999,  2023,  3127,  1012,  1999,  1037,  3168,  1010,  1996,
         4487, 17668, 10992, 19566,  1998,  7680,  7849, 10057,  2951,  2592,
         1012,  1996,  8276,  4487, 17668, 10992,  3643,  5218,  2000,  2062,
        18700,  1998,  6516, 15258,  1006,  2156,  3275,  1017,  1012,  1015,
         1007,  1012,  1996,  7099,  4487, 17668, 10992,  5468,  2003,  1037,
         7505, 21799,  1997,  1996,  7978,  4242,  2313,  4487, 17668, 10992,
         1012,  4141,  2109,  4487, 17668, 10992,  5761,  2024,  2846,  1010,
        23284,  1010,  1053,  2094,  1010, 19064,  1997, 23284,  1010,  1998,
         7619,  2812, 24353,  1006,  2156,  3275,  1017,  1012,  1016,  1007,
         1012,  1996,  2846,  1006,  1060,  2078,  1597,  1060,  2487,  1007,
         2003,  2025, 24668,  1997,  1996,  5101,  1997,  1996,  2951,  2004,
         1996,  2168,  2846,  3643,  2071,  5258,  2426,  3760,  2030,  3469,
         5300,  1012,  6516,  1010,  1996,  7099,  4487, 17668, 10992,  2003,
         6871,  2058,  1996,  7099,  2846,  1012,  1996, 23284,  2003,  1997,
         2117,  3014,  1010,  2096,  1996,  2812,  2003,  1997,  2034,  3014,
         1012,  1996, 26226,  1006,  2029,  2003,  1996,  6463,  1997,  1996,
         3115, 24353,  2058,  1996,  2812,  1007,  2003,  2411,  2109,  2065,
         1996,  5468,  1997,  4487, 17668, 10992,  2038,  2000,  2022,  4102,
         2408,  8168,  1012,  2043,  1996,  2951,  5383,  2028,  2030,  2062,
         5866,  3643,  1006,  2029,  2003, 10892,  2170,  2041, 14355,  1007,
         1010,  1996,  6970,  1011,  1053,  2094,  2003,  3479,  2058,  1996,
        23284,  2030,  2846,  1012,  1996, 12951,  3867,  9463,  1006,  2029,
         2003, 10892,  2170,  1996,  3991,  1007, 13571,  2015,  1996,  3641,
         2951,  2046,  2048,  5020,  9214,  1012,  1996,  6970,  1011,  1053,
         2094, 17509,  1996,  2846,  2090,  1996,   102])"
701,1,"['skewed', 'percentiles', 'deviation', 'tails', 'dispersion', 'data']", SUMMARY,seg_177,"25th and 75th percentiles. when the data have outlier(s), the inter-qd is preferable over other measures of dispersion. alternatively, the measure of absolute deviation is exercised when the data are skewed or have thick tails.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 1.,
        0., 0.])",tensor([12654]),"tensor([  101, 10965,  1998, 25092,  3867,  9463,  2015,  1012,  2043,  1996,
         2951,  2031,  2041, 14355,  1006,  1055,  1007,  1010,  1996,  6970,
         1011,  1053,  2094,  2003,  9544,  3085,  2058,  2060,  5761,  1997,
         4487, 17668, 10992,  1012, 14084,  1010,  1996,  5468,  1997,  7619,
        24353,  2003, 17747,  2043,  1996,  2951,  2024, 15315,  7974,  2098,
         2030,  2031,  4317, 17448,  1012,   102])"
702,1,"['variance', 'symmetry', 'dispersion', 'poisson', 'evaluating', 'data']", SUMMARY,seg_177,"every data analyst who works with numeric data will find the discussion very illuminating and easy to follow. updating formulas that comes handy when new data arrive are presented and illustrated. a discussion of algorithms for variance can be found in references 30–32, 38–41. a measure of variance for hierarchical data appears in reference 42. evaluating methods of symmetry are discussed in references 43–45, and poisson dispersion in reference 46.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2296,  2951, 12941,  2040,  2573,  2007, 16371, 25531,  2951,
         2097,  2424,  1996,  6594,  2200, 27816,  1998,  3733,  2000,  3582,
         1012,  2039, 16616, 25814,  2008,  3310, 18801,  2043,  2047,  2951,
         7180,  2024,  3591,  1998,  7203,  1012,  1037,  6594,  1997, 13792,
         2005, 23284,  2064,  2022,  2179,  1999,  7604,  2382,  1516,  3590,
         1010,  4229,  1516,  4601,  1012,  1037,  5468,  1997, 23284,  2005,
        25835,  2951,  3544,  1999,  4431,  4413,  1012, 23208,  4725,  1997,
        14991,  2024,  6936,  1999,  7604,  4724,  1516,  3429,  1010,  1998,
        13433, 24077,  4487, 17668, 10992,  1999,  4431,  4805,  1012,   102])"
703,1,"['data', 'dispersion']", SUMMARY,seg_177,a) dispersion is a measure of data spread,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  1007,  4487, 17668, 10992,  2003,  1037,  5468,  1997,
         2951,  3659,   102])"
704,1,"['third quartile', 'quartile']", SUMMARY,seg_177,b) third quartile lies between 7th and 8th decile,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1038,  1007,  2353, 24209,  8445,  9463,  3658,  2090,  5504,
         1998,  5893, 11703,  9463,   102])"
705,1,"['skewed', 'range', 'skewed distributions', 'distributions', 'sample']", SUMMARY,seg_177,c) sample range can distinguish between skewed distributions,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1039,  1007,  7099,  2846,  2064, 10782,  2090, 15315,  7974,
         2098, 20611,   102])"
706,1,"['sample', 'range', 'observation']", SUMMARY,seg_177,d) every sample observation contributes to the range,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1040,  1007,  2296,  7099,  8089, 16605,  2000,  1996,  2846,
          102])"
707,1,"['range', 'sample', 'data']", SUMMARY,seg_177,e) range of a sample can be negative when all data values are negative,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1041, 1007, 2846, 1997, 1037, 7099, 2064, 2022, 4997, 2043, 2035,
        2951, 5300, 2024, 4997,  102])"
708,1,['sample'], SUMMARY,seg_177,f) a sample with large cv is less dispersed than a sample with small cv,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1042,  1007,  1037,  7099,  2007,  2312, 26226,  2003,  2625,
        15484,  2084,  1037,  7099,  2007,  2235, 26226,   102])"
709,1,"['data', 'measurement']", SUMMARY,seg_177,g) cv measures the data spread irrespective of the unit of measurement.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([12654]),"tensor([  101,  1043,  1007, 26226,  5761,  1996,  2951,  3659, 20868,  6072,
         5051, 15277,  1997,  1996,  3131,  1997, 10903,  1012,   102])"
710,1,"['sample', 'range']", SUMMARY,seg_177,3.2 what is the sample range when all 3.10 prove that s ≤ r ( 1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1017, 1012, 1016, 2054, 2003, 1996, 7099, 2846, 2043, 2035, 1017,
        1012, 2184, 6011, 2008, 1055, 1608, 1054, 1006, 1015,  102])"
711,1,"['sample', 'observations']", SUMMARY,seg_177,"2 − 1 n )1∕2 for sample observations are the same large n, where s is the sample stan-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1016, 1597, 1015, 1050, 1007,  100, 2005, 7099, 9420, 2024, 1996,
        2168, 2312, 1050, 1010, 2073, 1055, 2003, 1996, 7099, 9761, 1011,  102])"
712,1,"['deviation', 'range']", SUMMARY,seg_177,(say k)? dard deviation and r is the range.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  2360,  1047,  1007,  1029, 18243,  2094, 24353,  1998,
         1054,  2003,  1996,  2846,  1012,   102])"
713,1,"['location', 'location measure']", SUMMARY,seg_177,(a) 0 (b) k (c) ∞ (d) 1 3.11 why is it that a location measure,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([ 101, 1006, 1037, 1007, 1014, 1006, 1038, 1007, 1047, 1006, 1039, 1007,
        1601, 1006, 1040, 1007, 1015, 1017, 1012, 2340, 2339, 2003, 2009, 2008,
        1037, 3295, 5468,  102])"
714,0,[], SUMMARY,seg_177,3.3 which of the measure additively alone is insufficient to fully under-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1017,  1012,  1017,  2029,  1997,  1996,  5468, 29167,  2135,
         2894,  2003, 13990,  2000,  3929,  2104,  1011,   102])"
715,1,"['sample', 'data', 'distribution']", SUMMARY,seg_177,combines the squared sample valstand a data distribution?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101, 13585,  1996, 19942,  7099, 11748, 21515,  1037,  2951,  4353,
         1029,   102])"
716,1,"['mean', 'deviations']", SUMMARY,seg_177,ues? (a) mean absolute deviations 3.12 a city has five weight-loss clinics.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1057,  2229,  1029,  1006,  1037,  1007,  2812,  7619, 24353,
         2015,  1017,  1012,  2260,  1037,  2103,  2038,  2274,  3635,  1011,
         3279, 17865,  1012,   102])"
717,1,"['sample', 'range']", SUMMARY,seg_177,(b) sample range (c) inter-quartile each one uses a different diet and,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  1038,  1007,  7099,  2846,  1006,  1039,  1007,  6970,
         1011, 24209,  8445,  9463,  2169,  2028,  3594,  1037,  2367,  8738,
         1998,   102])"
718,1,['variance'], SUMMARY,seg_177,range (d) variance exercise program. (i) an executive,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2846,  1006,  1040,  1007, 23284,  6912,  2565,  1012,  1006,
         1045,  1007,  2019,  3237,   102])"
719,0,[], SUMMARY,seg_177,who wishes to shed the maximum 3.4 what are the popular categoriza-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2040,  8996,  2000,  8328,  1996,  4555,  1017,  1012,  1018,
         2054,  2024,  1996,  2759,  4937, 20265, 21885,  2050,  1011,   102])"
720,1,"['dispersion measures', 'dispersion']", SUMMARY,seg_177,body fat in shortest time should tion of dispersion measures? prefer a weight-loss program hav3.5 what are some desirable qualities ing,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2303,  6638,  1999, 20047,  2051,  2323, 14841,  2239,  1997,
         4487, 17668, 10992,  5761,  1029,  9544,  1037,  3635,  1011,  3279,
         2565,  5292,  2615,  2509,  1012,  1019,  2054,  2024,  2070, 16166,
        11647, 13749,   102])"
721,1,"['variance', 'dispersion']", SUMMARY,seg_177,of a good measure of dispersion? (a) low variance (b) high variance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0.])",tensor([12654]),"tensor([  101,  1997,  1037,  2204,  5468,  1997,  4487, 17668, 10992,  1029,
         1006,  1037,  1007,  2659, 23284,  1006,  1038,  1007,  2152, 23284,
          102])"
722,1,['skew'], SUMMARY,seg_177,(c) negative skew (d) platykurtic 3.6 for which of the following mea-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  1039,  1007,  4997, 15315,  7974,  1006,  1040,  1007,
        20228,  4017, 15922, 19585,  2594,  1017,  1012,  1020,  2005,  2029,
         1997,  1996,  2206,  2033,  2050,  1011,   102])"
723,1,['change of origin'], SUMMARY,seg_177,(ii) a housewife who has 15 sures is the change of origin techdays available should prefer,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  2462,  1007,  1037,  2160, 19993,  2040,  2038,  2321,
         2469,  2015,  2003,  1996,  2689,  1997,  4761,  6627, 10259,  2015,
         2800,  2323,  9544,   102])"
724,1,"['mean', 'range', 'sample']", SUMMARY,seg_177,nique useful? (a) mean absolute a weight-loss program havdeviations (b) sample range (c) ing______,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  9152,  4226,  6179,  1029,  1006,  1037,  1007,  2812,  7619,
         1037,  3635,  1011,  3279,  2565,  5292, 16872,  6777, 18963,  2015,
         1006,  1038,  1007,  7099,  2846,  1006,  1039,  1007, 13749,  1035,
         1035,  1035,  1035,  1035,  1035,   102])"
725,1,"['mean', 'variance', 'range']", SUMMARY,seg_177,inter-quartile range (d) variance (a) high mean  15 (b) low vari-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6970,  1011, 24209,  8445,  9463,  2846,  1006,  1040,  1007,
        23284,  1006,  1037,  1007,  2152,  2812,  2321,  1006,  1038,  1007,
         2659, 13075,  2072,  1011,   102])"
726,1,"['sample', 'mean']", SUMMARY,seg_177,3.7 if a sample s is split into two subance (c) low mean and high vari-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1017,  1012,  1021,  2065,  1037,  7099,  1055,  2003,  3975,
         2046,  2048,  4942,  6651,  1006,  1039,  1007,  2659,  2812,  1998,
         2152, 13075,  2072,  1011,   102])"
727,1,"['mean', 'variance', 'range']", SUMMARY,seg_177,"samples, can you find the range of ance (d) high mean and low s if the range of the subsamples variance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  8168,  1010,  2064,  2017,  2424,  1996,  2846,  1997,  2019,
         3401,  1006,  1040,  1007,  2152,  2812,  1998,  2659,  1055,  2065,
         1996,  2846,  1997,  1996,  4942, 21559, 21112, 23284,  1012,   102])"
728,0,[], SUMMARY,seg_177,information is needed?   u   1 denotes the inverse of,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2592,  2003,  2734,  1029,  1057,  1015, 14796,  1996, 19262,
         1997,   102])"
729,1,['measurement'], SUMMARY,seg_177,"3.8 identify the unit of measurement the cdf, prove that a sym-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1017,  1012,  1022,  6709,  1996,  3131,  1997, 10903,  1996,
         3729,  2546,  1010,  6011,  2008,  1037, 25353,  2213,  1011,   102])"
730,1,['distribution'], SUMMARY,seg_177,in each of the following statismetric distribution can be char-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1999,  2169,  1997,  1996,  2206, 28093,  2964,  3388,  7277,
         4353,  2064,  2022, 25869,  1011,   102])"
731,1,"['mean', 'condition', 'geometric', 'measurements', 'geometric mean', 'statistic', 'symmetric']", SUMMARY,seg_177,"tics: (i) s2n∕xn (ii) am/gm, where acterized by the condition = f−1(u) + f−1(1 − u) = 0 for am= xn, gm = geometric mean u ∈ (0, .5). prove that such dis(iii) 4∕ 2 if all measurements are tributions are symmetric around in centimeters. 0 if f−1(1∕2) = 0 and symmetric 3.9 consider a statistic defined as sdn = around if f−1(1∕2) = . prove",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  6169,  1024,  1006,  1045,  1007,   100,  1006,  2462,
         1007,  2572,  1013, 13938,  1010,  2073,  2552, 11124,  5422,  2011,
         1996,  4650,  1027,  1042, 27944,  1006,  1057,  1007,  1009,  1042,
        27944,  1006,  1015,  1597,  1057,  1007,  1027,  1014,  2005,  2572,
         1027,  1060,  2078,  1010, 13938,  1027, 14965,  2812,  1057,  1596,
         1006,  1014,  1010,  1012,  1019,  1007,  1012,  6011,  2008,  2107,
         4487,  2015,  1006,  3523,  1007,   100,  1016,  2065,  2035, 11702,
         2024, 13012, 29446,  2015,  2024, 19490,  2105,  1999, 18119,  1012,
         1014,  2065,  1042, 27944,  1006,   100,  1007,  1027,  1014,  1998,
        19490,  1017,  1012,  1023,  5136,  1037, 28093,  6553,  4225,  2004,
        17371,  2078,  1027,  2105,  2065,  1042, 27944,  1006,   100,  1007,
         1027,  1012,  6011,   102])"
732,1,['skewed'], SUMMARY,seg_177,"1 dj 2, where dj = xj+1 − xj that     0 for positively skewed",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1015,  6520,  1016,  1010,  2073,  6520,  1027,  1060,  3501,
         1009,  1015,  1597,  1060,  3501,  2008,  1014,  2005, 13567, 15315,
         7974,  2098,   102])"
733,1,"['skewed', 'observations', 'frequency', 'distributions']", SUMMARY,seg_177,denotes the difference between and     0 for negatively skewed successive ordered observations. distributions. can you compute when is it minimum? what does this measure for frequency dis-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14796,  1996,  4489,  2090,  1998,  1014,  2005, 19762, 15315,
         7974,  2098, 11165,  3641,  9420,  1012, 20611,  1012,  2064,  2017,
        24134,  2043,  2003,  2009,  6263,  1029,  2054,  2515,  2023,  5468,
         2005,  6075,  4487,  2015,  1011,   102])"
734,1,['data'], SUMMARY,seg_177,it measure? tributed data?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 2009, 5468, 1029, 7050, 2094, 2951, 1029,  102])"
735,1,['change of origin'], SUMMARY,seg_177,"3.14 can the qd be ever zero? if so, 3.23 how does the change of origin",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([ 101, 1017, 1012, 2403, 2064, 1996, 1053, 2094, 2022, 2412, 5717, 1029,
        2065, 2061, 1010, 1017, 1012, 2603, 2129, 2515, 1996, 2689, 1997, 4761,
         102])"
736,1,"['sample', 'data', 'transformation']", SUMMARY,seg_177,for what type of data? what is its and scale transformation affect the interpretation? sample aad?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2005, 2054, 2828, 1997, 2951, 1029, 2054, 2003, 2049, 1998, 4094,
        8651, 7461, 1996, 7613, 1029, 7099, 9779, 2094, 1029,  102])"
737,1,['quantile'], SUMMARY,seg_177,3.15 describe the unit quantile func3.24 consider a measure defined as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1017,  1012,  2321,  6235,  1996,  3131, 24110, 15286,  4569,
         2278,  2509,  1012,  2484,  5136,  1037,  5468,  4225,  2004,   102])"
738,1,['variance'], SUMMARY,seg_177,"4 =1(qi − qi−1), where tion. how is it useful to measure q0 = x(1) is the first-order statissample variance?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1027,  1015,  1006, 18816,  1597, 18816, 27944,  1007,
         1010,  2073, 14841,  2239,  1012,  2129,  2003,  2009,  6179,  2000,
         5468,  1053,  2692,  1027,  1060,  1006,  1015,  1007,  2003,  1996,
         2034,  1011,  2344, 28093, 21205, 23344, 23284,  1029,   102])"
739,0,[], SUMMARY,seg_177,"3.16 critically examine the different tic, q4 = x(n) and other qi",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1017,  1012,  2385, 11321, 11628,  1996,  2367, 14841,  2278,
         1010,  1053,  2549,  1027,  1060,  1006,  1050,  1007,  1998,  2060,
        18816,   102])"
740,1,"['quantile', 'parameter', 'variation', 'dispersion', 'weibull']", SUMMARY,seg_177,"quartiles. can it be used to meameasures for variation, and indisure the dispersion? what does cate their advantages and disadhigh values indicate? vantages. 3.25 prove that the unit quantile func3.17 in what situations is the recurtion of one parameter weibull",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0.])",tensor([12654]),"tensor([  101, 24209,  8445,  9463,  2015,  1012,  2064,  2009,  2022,  2109,
         2000,  2033, 14074,  3022, 14900,  2005,  8386,  1010,  1998, 27427,
         2483,  5397,  1996,  4487, 17668, 10992,  1029,  2054,  2515,  4937,
         2063,  2037, 12637,  1998,  4487,  3736, 19114,  5603,  5300,  5769,
         1029, 27274,  2015,  1012,  1017,  1012,  2423,  6011,  2008,  1996,
         3131, 24110, 15286,  4569,  2278,  2509,  1012,  2459,  1999,  2054,
         8146,  2003,  1996, 28667, 19585,  3258,  1997,  2028, 16381, 11417,
         8569,  3363,   102])"
741,1,"['variance', 'sample', 'sample variance', 'distribution', 'algorithm']", SUMMARY,seg_177,"sive algorithm for sample variance distribution with cdf f(x) = helpful over the iterative version? −xa 1 − e , x, a   0 is q(u) = [1 − log (1 − u)]1∕a. show that 3.18 if there are two items (x1, x2) in a",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  9033,  3726,  9896,  2005,  7099, 23284,  4353,  2007,  3729,
         2546,  1042,  1006,  1060,  1007,  1027, 14044,  2058,  1996,  2009,
        25284,  2544,  1029,  1597, 18684,  1015,  1597,  1041,  1010,  1060,
         1010,  1037,  1014,  2003,  1053,  1006,  1057,  1007,  1027,  1031,
         1015,  1597,  8833,  1006,  1015,  1597,  1057,  1007,  1033,   100,
         1012,  2265,  2008,  1017,  1012,  2324,  2065,  2045,  2024,  2048,
         5167,  1006,  1060,  2487,  1010,  1060,  2475,  1007,  1999,  1037,
          102])"
742,1,"['sample', 'median', 'mean']", SUMMARY,seg_177,"the median is log (2)1∕a. sample, prove that the mean abso-",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1996,  3991,  2003,  8833,  1006,  1016,  1007,   100,  1012,
         7099,  1010,  6011,  2008,  1996,  2812, 14689,  2080,  1011,   102])"
743,1,"['mean', 'range', 'deviation', 'sample', 'data', 'median']", SUMMARY,seg_177,lute deviation around the mean 3.26 when is the sample range meanand median are both equal to half ingful for numerically coded ordithe sample range. nal data?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0.])",tensor([12654]),"tensor([  101, 11320,  2618, 24353,  2105,  1996,  2812,  1017,  1012,  2656,
         2043,  2003,  1996,  7099,  2846,  2812,  5685,  3991,  2024,  2119,
         5020,  2000,  2431, 13749,  3993,  2005, 15973,  2135, 22402,  2030,
        23194,  5369,  7099,  2846,  1012,  6583,  2140,  2951,  1029,   102])"
744,1,"['mean', 'variance', 'information', 'sample', 'sample mean']", SUMMARY,seg_177,3.19 if the sample mean and variance of 3.27 what information is needed to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1017,  1012,  2539,  2065,  1996,  7099,  2812,  1998, 23284,
         1997,  1017,  1012,  2676,  2054,  2592,  2003,  2734,  2000,   102])"
745,1,"['range', 'sample', 'samples', 'data', 'independent']", SUMMARY,seg_177,"two independent samples of sizes update the sample range using new 8 and 10 are (65, 20) and (70, 32), data?",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2048,  2981,  8168,  1997, 10826, 10651,  1996,  7099,  2846,
         2478,  2047,  1022,  1998,  2184,  2024,  1006,  3515,  1010,  2322,
         1007,  1998,  1006,  3963,  1010,  3590,  1007,  1010,  2951,  1029,
          102])"
746,1,"['percentage', 'variance']", SUMMARY,seg_177,find the variance of the combined 3.28 the percentage of seeds that ger-,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  2424,  1996, 23284,  1997,  1996,  4117,  1017,  1012,  2654,
         1996,  7017,  1997,  8079,  2008, 16216,  2099,  1011,   102])"
747,1,['plots'], SUMMARY,seg_177,"sample. minate from eight different plots 3.20 what are the possible ranges of are as follows: {98.2, 92.7, 89.3,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  7099,  1012, 19808,  2618,  2013,  2809,  2367, 14811,  1017,
         1012,  2322,  2054,  2024,  1996,  2825,  8483,  1997,  2024,  2004,
         4076,  1024,  1063,  5818,  1012,  1016,  1010,  6227,  1012,  1021,
         1010,  6486,  1012,  1017,  1010,   102])"
748,1,"['variability', 'coefficient', 'range']", SUMMARY,seg_177,"values for cv? how is it help94.4, 95.0, 83.1, 90.6, 96.1}. find ful in comparing the variability of the coefficient of range cr.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5300,  2005, 26226,  1029,  2129,  2003,  2009,  2393,  2683,
         2549,  1012,  1018,  1010,  5345,  1012,  1014,  1010,  6640,  1012,
         1015,  1010,  3938,  1012,  1020,  1010,  5986,  1012,  1015,  1065,
         1012,  2424, 11865,  2140,  1999, 13599,  1996, 28436,  1997,  1996,
        19064,  1997,  2846, 13675,  1012,   102])"
749,1,"['quartile', 'coefficient', 'samples']", SUMMARY,seg_177,different samples? 3.29 if a quartile coefficient is defined,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2367,  8168,  1029,  1017,  1012,  2756,  2065,  1037, 24209,
         8445,  9463, 19064,  2003,  4225,   102])"
750,1,"['sample', 'standard']", SUMMARY,seg_177,"3.21 how is the sample standard devias qc = (q3 − q1)∕(q3 + q1),",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1017,  1012,  2538,  2129,  2003,  1996,  7099,  3115, 14386,
         3022, 25196,  1027,  1006,  1053,  2509,  1597,  1053,  2487,  1007,
          100,  1006,  1053,  2509,  1009,  1053,  2487,  1007,  1010,   102])"
751,1,"['inequality', 'asymptotic', 'range']", SUMMARY,seg_177,ation related to the range? what is what are the possible values? is the asymptotic inequality between it absolute or relative measure?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2012,  3258,  3141,  2000,  1996,  2846,  1029,  2054,  2003,
         2054,  2024,  1996,  2825,  5300,  1029,  2003,  1996,  2004, 24335,
        13876, 20214, 16440,  2090,  2009,  7619,  2030,  5816,  5468,  1029,
          102])"
752,1,"['sample', 'sample size']", SUMMARY,seg_177,them when sample size n is large? 3.30 consider a measure defined as,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2068, 2043, 7099, 2946, 1050, 2003, 2312, 1029, 1017, 1012, 2382,
        5136, 1037, 5468, 4225, 2004,  102])"
753,1,['median'], SUMMARY,seg_177,3.22 if the origin and scale are trans[(q1 − p − median) − (median −,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1017, 1012, 2570, 2065, 1996, 4761, 1998, 4094, 2024, 9099, 1031,
        1006, 1053, 2487, 1597, 1052, 1597, 3991, 1007, 1597, 1006, 3991, 1597,
         102])"
754,1,['percentile'], SUMMARY,seg_177,"formed as y = c ∗ x + d, where qp)]∕[q1 − p − qp], where p is a c ≠ 0, prove that cvy = cvx ∗ percentile. what does it measure? x∕(x + d∕c). what are the possible values?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2719,  2004,  1061,  1027,  1039,  1598,  1060,  1009,  1040,
         1010,  2073,  1053,  2361,  1007,  1033,   100,  1031,  1053,  2487,
         1597,  1052,  1597,  1053,  2361,  1033,  1010,  2073,  1052,  2003,
         1037,  1039,  1027,  1014,  1010,  6011,  2008, 26226,  2100,  1027,
        26226,  2595,  1598,  3867,  9463,  1012,  2054,  2515,  2009,  5468,
         1029,   100,  1006,  1060,  1009,   100,  1007,  1012,  2054,  2024,
         1996,  2825,  5300,  1029,   102])"
755,0,[], SKEWNESS AND KURTOSIS,seg_179,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([15315,  7974,  2791,  1998,  9679, 12650])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
756,1,['skewness'], SKEWNESS AND KURTOSIS,seg_179,◾ describe measures of skewness,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([15315,  7974,  2791,  1998,  9679, 12650])","tensor([  101,   100,  6235,  5761,  1997, 15315,  7974,  2791,   102])"
757,0,[], SKEWNESS AND KURTOSIS,seg_179,◾ understand absolute and relative measures,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([15315,  7974,  2791,  1998,  9679, 12650])","tensor([ 101,  100, 3305, 7619, 1998, 5816, 5761,  102])"
758,0,[], SKEWNESS AND KURTOSIS,seg_179,"◾ comprehend galton’s, pearson’s, bowley’s, and kelly’s measures",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([15315,  7974,  2791,  1998,  9679, 12650])","tensor([  101,   100, 22346, 14891,  2669,  1521,  1055,  1010, 12874,  1521,
         1055,  1010,  4605,  3240,  1521,  1055,  1010,  1998,  5163,  1521,
         1055,  5761,   102])"
759,1,['kurtosis'], SKEWNESS AND KURTOSIS,seg_179,◾ interpret pearson’s and stavig’s kurtosis measures,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([15315,  7974,  2791,  1998,  9679, 12650])","tensor([  101,   100, 17841, 12874,  1521,  1055,  1998,  2358, 18891,  2290,
         1521,  1055,  9679, 12650,  5761,   102])"
760,0,[], SKEWNESS AND KURTOSIS,seg_179,◾ describe l-kurtosis,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([15315,  7974,  2791,  1998,  9679, 12650])","tensor([  101,   100,  6235,  1048,  1011,  9679, 12650,   102])"
761,1,['kurtosis'], SKEWNESS AND KURTOSIS,seg_179,◾ understand spectral kurtosis,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0.])","tensor([15315,  7974,  2791,  1998,  9679, 12650])","tensor([  101,   100,  3305, 17435,  9679, 12650,   102])"
762,1,['bias'], MEANING OF SKEWNESS,seg_181,"the literal meaning of “skew” is a bias, dragging, or distortion toward some particular value, group, subjects, or direction.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  1996, 18204,  3574,  1997,  1523, 15315,  7974,  1524,  2003,
         1037, 13827,  1010, 11920,  1010,  2030, 20870,  2646,  2070,  3327,
         3643,  1010,  2177,  1010,  5739,  1010,  2030,  3257,  1012,   102])"
763,1,"['unimodal', 'skewness', 'distribution']", MEANING OF SKEWNESS,seg_181,definition 4.1 a measure of skewness is a numeric metric to concisely summarize the degree of asymmetry of a unimodal distribution that can be compared with other similar numbers.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  6210,  1018,  1012,  1015,  1037,  5468,  1997, 15315,  7974,
         2791,  2003,  1037, 16371, 25531, 12046,  2000,  9530, 18380,  2135,
         7680,  7849,  4697,  1996,  3014,  1997,  2004, 24335, 24327,  1997,
         1037,  4895, 16339,  9305,  4353,  2008,  2064,  2022,  4102,  2007,
         2060,  2714,  3616,  1012,   102])"
764,1,"['table', 'cauchy', 'coefficients', 'correlation coefficients', 'distributions', 'sample', 'correlation', 'normal', 'distribution', 'statistical', 'asymmetric']", MEANING OF SKEWNESS,seg_181,"a great majority of statistical distributions are asymmetric (see table 4.1). nevertheless, symmetrical laws such as the normal, student’s t, laplace, cauchy distributions, and the distribution of sample correlation coefficients are more popular.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  1037,  2307,  3484,  1997,  7778, 20611,  2024,  2004, 24335,
        12589,  1006,  2156,  2795,  1018,  1012,  1015,  1007,  1012,  6600,
         1010, 23476,  4277,  2107,  2004,  1996,  3671,  1010,  3076,  1521,
         1055,  1056,  1010,  5001, 19217,  1010,  6187, 10875,  2100, 20611,
         1010,  1998,  1996,  4353,  1997,  7099, 16902, 21374,  2024,  2062,
         2759,  1012,   102])"
765,1,"['location', 'tail', 'contrast', 'unimodal', 'distributions', 'bimodal', 'data', 'asymmetric']", MEANING OF SKEWNESS,seg_181,asymmetry of unimodal distributions can be due to a flat left tail or right tail. two asymmetric mirror-image distributions (around the mode) could have exactly the same location and spread. a quantified measure of this asymmetry is needed to compare and contrast such distributions (see reference 47 for bimodal data).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  2004, 24335, 24327,  1997,  4895, 16339,  9305, 20611,  2064,
         2022,  2349,  2000,  1037,  4257,  2187,  5725,  2030,  2157,  5725,
         1012,  2048,  2004, 24335, 12589,  5259,  1011,  3746, 20611,  1006,
         2105,  1996,  5549,  1007,  2071,  2031,  3599,  1996,  2168,  3295,
         1998,  3659,  1012,  1037, 24110,  3775, 10451,  5468,  1997,  2023,
         2004, 24335, 24327,  2003,  2734,  2000, 12826,  1998,  5688,  2107,
        20611,  1006,  2156,  4431,  4700,  2005, 12170,  5302,  9305,  2951,
         1007,  1012,   102])"
766,1,"['change of origin', 'normality', 'location', 'asymmetric', 'skewness', 'samples', 'data', 'skewed', 'information', 'transformation', 'tail', 'distributions', 'outliers', 'distribution', 'location measures']", MEANING OF SKEWNESS,seg_181,"a change of origin transformation can be used to align the location measures of two distributions (or samples). then, we could compare the spreads of the two distributions. these two measures are insufficient to fully understand the data. two distributions could have the same location and spread, but one could tail-off slowly to the right, whereas the other could tail off slowly to the left. in other words, two asymmetric mirror-image distributions (around the mode) could have exactly the same location and spread. this is exactly the reason for studying skewness [48]. this information is useful to fit empirical distributions and in parametric analysis. in addition, possible outliers under the assumption of normality of data may turn out to be nonoutliers when the data distribution is actually skewed.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  1037,  2689,  1997,  4761,  8651,  2064,  2022,  2109,  2000,
        25705,  1996,  3295,  5761,  1997,  2048, 20611,  1006,  2030,  8168,
         1007,  1012,  2059,  1010,  2057,  2071, 12826,  1996, 20861,  1997,
         1996,  2048, 20611,  1012,  2122,  2048,  5761,  2024, 13990,  2000,
         3929,  3305,  1996,  2951,  1012,  2048, 20611,  2071,  2031,  1996,
         2168,  3295,  1998,  3659,  1010,  2021,  2028,  2071,  5725,  1011,
         2125,  3254,  2000,  1996,  2157,  1010,  6168,  1996,  2060,  2071,
         5725,  2125,  3254,  2000,  1996,  2187,  1012,  1999,  2060,  2616,
         1010,  2048,  2004, 24335, 12589,  5259,  1011,  3746, 20611,  1006,
         2105,  1996,  5549,  1007,  2071,  2031,  3599,  1996,  2168,  3295,
         1998,  3659,  1012,  2023,  2003,  3599,  1996,  3114,  2005,  5702,
        15315,  7974,  2791,  1031,  4466,  1033,  1012,  2023,  2592,  2003,
         6179,  2000,  4906, 17537, 20611,  1998,  1999, 11498, 12589,  4106,
         1012,  1999,  2804,  1010,  2825,  2041, 14355,  2015,  2104,  1996,
        11213,  1997,  3671,  3012,  1997,  2951,  2089,  2735,  2041,  2000,
         2022,  2512,  5833, 14355,  2015,  2043,  1996,  2951,  4353,  2003,
         2941, 15315,  7974,  2098,  1012,   102])"
767,1,"['scores', 'skewed', 'set', 'unimodal', 'symmetry', 'failures', 'skewed distribution', 'population', 'outcome', 'distribution']", MEANING OF SKEWNESS,seg_181,"a skewed distribution may be a desired outcome in some domains. as an example, instructors in several educational institutions set the exam questions in such a way that the resulting scores reflect symmetry (the mark distribution is often unimodal with a great majority of the class having marks in the neighborhood of the mode, and a few students with scores in both the extremes—a few failures and more or less an equal number of distinctions. owing to the heterogeneity of student population and different learning habits, a perfect bell shape is seldom achieved. even if the instructor had a bell-shaped distribution in mind while setting the exam questions, it could end up as a skewed distribution. a mark distribution skewed to the left indicates an easy exam (or a question paper leak or mass copying), whereas a distribution skewed to the right indicates a difficult exam.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  1037, 15315,  7974,  2098,  4353,  2089,  2022,  1037,  9059,
         9560,  1999,  2070, 13100,  1012,  2004,  2019,  2742,  1010, 19922,
         1999,  2195,  4547,  4896,  2275,  1996, 11360,  3980,  1999,  2107,
         1037,  2126,  2008,  1996,  4525,  7644,  8339, 14991,  1006,  1996,
         2928,  4353,  2003,  2411,  4895, 16339,  9305,  2007,  1037,  2307,
         3484,  1997,  1996,  2465,  2383,  6017,  1999,  1996,  5101,  1997,
         1996,  5549,  1010,  1998,  1037,  2261,  2493,  2007,  7644,  1999,
         2119,  1996, 28800,  1517,  1037,  2261, 15428,  1998,  2062,  2030,
         2625,  2019,  5020,  2193,  1997, 25995,  1012, 11427,  2000,  1996,
        21770, 10624,  6914, 20175,  2100,  1997,  3076,  2313,  1998,  2367,
         4083, 14243,  1010,  1037,  3819,  4330,  4338,  2003, 15839,  4719,
         1012,  2130,  2065,  1996,  9450,  2018,  1037,  4330,  1011,  5044,
         4353,  1999,  2568,  2096,  4292,  1996, 11360,  3980,  1010,  2009,
         2071,  2203,  2039,  2004,  1037, 15315,  7974,  2098,  4353,  1012,
         1037,  2928,  4353, 15315,  7974,  2098,  2000,  1996,  2187,  7127,
         2019,  3733, 11360,  1006,  2030,  1037,  3160,  3259, 17271,  2030,
         3742, 24731,  1007,  1010,  6168,  1037,  4353, 15315,  7974,  2098,
         2000,  1996,  2157,  7127,  1037,  3697, 11360,  1012,   102])"
768,1,"['continuous', 'data', 'unimodal', 'uniform distribution', 'symmetry', 'distributions', 'statistics', 'distribution', 'discrete']", MEANING OF SKEWNESS,seg_181,"asymmetry is the opposite of symmetry. it is literally applied to physical structures, arrangements, formations, and so on. examples are buildings, walls, gates, paintings and pictures, arrangement of flowers and beads, formation of groups of people or ships, and so on around an axis. in statistics, it is used to describe data distributions around a central value. it is more meaningful for unimodal distributions. the uniform distribution (both discrete and continuous) exhibits a special type of symmetry. note that the symmetry is always measured with respect to the x-axis (most software packages record the variate values along the abscissa and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  2004, 24335, 24327,  2003,  1996,  4500,  1997, 14991,  1012,
         2009,  2003,  6719,  4162,  2000,  3558,  5090,  1010,  7565,  1010,
        13197,  1010,  1998,  2061,  2006,  1012,  4973,  2024,  3121,  1010,
         3681,  1010,  6733,  1010,  5265,  1998,  4620,  1010,  6512,  1997,
         4870,  1998, 17530,  1010,  4195,  1997,  2967,  1997,  2111,  2030,
         3719,  1010,  1998,  2061,  2006,  2105,  2019,  8123,  1012,  1999,
         6747,  1010,  2009,  2003,  2109,  2000,  6235,  2951, 20611,  2105,
         1037,  2430,  3643,  1012,  2009,  2003,  2062, 15902,  2005,  4895,
        16339,  9305, 20611,  1012,  1996,  6375,  4353,  1006,  2119, 16246,
         1998,  7142,  1007, 10637,  1037,  2569,  2828,  1997, 14991,  1012,
         3602,  2008,  1996, 14991,  2003,  2467,  7594,  2007,  4847,  2000,
         1996,  1060,  1011,  8123,  1006,  2087,  4007, 14555,  2501,  1996,
        13075, 13143,  5300,  2247,  1996, 14689, 22987,  3736,  1998,   102])"
769,1,"['location', 'tail', 'skewed', 'class interval', 'case', 'interval', 'unimodal', 'symmetry', 'skewness', 'distribution', 'data', 'discrete', 'location measures']", MEANING OF SKEWNESS,seg_181,"frequencies along the y-axis). the following discussion is more pertinent to continuous data than discrete ones. with this convention, positive skewness (or skewed to the right) indicates a heavy and long-extending tail on the right side of the location alignment. similarly, a negative skewness (or skewed to the left) indicates a heavy and long-extending left tail. in other words, a disproportionate amount of data falls on the left or right side of a unimodal distribution, thereby dragging or dispersing the location measures. this will be apparent only when the data size is large, and the spread is small. consider the systolic bp of some patients. if the number of patients is small (say 12), the values may all be distinct, in which case the mode is not unique. therefore, we may have to use grouping of data (using a class interval) to find symmetry.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101, 13139,  2247,  1996,  1061,  1011,  8123,  1007,  1012,  1996,
         2206,  6594,  2003,  2062,  2566, 10196,  3372,  2000,  7142,  2951,
         2084, 16246,  3924,  1012,  2007,  2023,  4680,  1010,  3893, 15315,
         7974,  2791,  1006,  2030, 15315,  7974,  2098,  2000,  1996,  2157,
         1007,  7127,  1037,  3082,  1998,  2146,  1011,  8402,  5725,  2006,
         1996,  2157,  2217,  1997,  1996,  3295, 12139,  1012,  6660,  1010,
         1037,  4997, 15315,  7974,  2791,  1006,  2030, 15315,  7974,  2098,
         2000,  1996,  2187,  1007,  7127,  1037,  3082,  1998,  2146,  1011,
         8402,  2187,  5725,  1012,  1999,  2060,  2616,  1010,  1037,  4487,
        13102, 18981, 11589,  3258,  3686,  3815,  1997,  2951,  4212,  2006,
         1996,  2187,  2030,  2157,  2217,  1997,  1037,  4895, 16339,  9305,
         4353,  1010,  8558, 11920,  2030,  4487, 17668,  7741,  1996,  3295,
         5761,  1012,  2023,  2097,  2022,  6835,  2069,  2043,  1996,  2951,
         2946,  2003,  2312,  1010,  1998,  1996,  3659,  2003,  2235,  1012,
         5136,  1996, 25353, 16033, 10415, 17531,  1997,  2070,  5022,  1012,
         2065,  1996,  2193,  1997,  5022,  2003,  2235,  1006,  2360,  2260,
         1007,  1010,  1996,  5300,  2089,  2035,  2022,  5664,  1010,  1999,
         2029,  2553,  1996,  5549,  2003,  2025,  4310,  1012,  3568,  1010,
         2057,  2089,  2031,  2000,  2224, 19765,  1997,  2951,  1006,  2478,
         1037,  2465, 13483,  1007,  2000,  2424, 14991,  1012,   102])"
770,1,"['mean', 'error', 'skewed', 'symmetric', 'symmetric distribution', 'skewed distribution', 'sample', 'sampling', 'sample size', 'errors', 'distribution', 'data', 'median']", MEANING OF SKEWNESS,seg_181,"the mean, median, and mode coincide for symmetric laws. in addition, the quartiles are equally distant from the median. however, for negatively skewed distribution, the mean is less than the median and mode in general (although exceptions do exist). for positively skewed distribution, the mean is greater than the median and median is greater than the mode in general. thus, the difference between these measures can tell us if the data are symmetric or skewed [12]. it is important to remember that a skewed sample may come from a symmetric distribution and vice versa because of sampling errors. this error is minimal when the sample size is large.",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  1996,  2812,  1010,  3991,  1010,  1998,  5549, 19680,  2005,
        19490,  4277,  1012,  1999,  2804,  1010,  1996, 24209,  8445,  9463,
         2015,  2024,  8053,  6802,  2013,  1996,  3991,  1012,  2174,  1010,
         2005, 19762, 15315,  7974,  2098,  4353,  1010,  1996,  2812,  2003,
         2625,  2084,  1996,  3991,  1998,  5549,  1999,  2236,  1006,  2348,
        11790,  2079,  4839,  1007,  1012,  2005, 13567, 15315,  7974,  2098,
         4353,  1010,  1996,  2812,  2003,  3618,  2084,  1996,  3991,  1998,
         3991,  2003,  3618,  2084,  1996,  5549,  1999,  2236,  1012,  2947,
         1010,  1996,  4489,  2090,  2122,  5761,  2064,  2425,  2149,  2065,
         1996,  2951,  2024, 19490,  2030, 15315,  7974,  2098,  1031,  2260,
         1033,  1012,  2009,  2003,  2590,  2000,  3342,  2008,  1037, 15315,
         7974,  2098,  7099,  2089,  2272,  2013,  1037, 19490,  4353,  1998,
         3580, 18601,  2138,  1997, 16227, 10697,  1012,  2023,  7561,  2003,
        10124,  2043,  1996,  7099,  2946,  2003,  2312,  1012,   102])"
771,1,"['skewed', 'level', 'tests', 'distribution']", MEANING OF SKEWNESS,seg_181,"if the distribution of marks in a series of tests of the same difficulty level moves from a positively skewed shape at the beginning to a negatively skewed shape at the end of the course, it is an indication that the teaching was effective and student participation was good.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  2065,  1996,  4353,  1997,  6017,  1999,  1037,  2186,  1997,
         5852,  1997,  1996,  2168,  7669,  2504,  5829,  2013,  1037, 13567,
        15315,  7974,  2098,  4338,  2012,  1996,  2927,  2000,  1037, 19762,
        15315,  7974,  2098,  4338,  2012,  1996,  2203,  1997,  1996,  2607,
         1010,  2009,  2003,  2019, 12407,  2008,  1996,  4252,  2001,  4621,
         1998,  3076,  6577,  2001,  2204,  1012,   102])"
772,1,"['continuous', 'symmetric', 'table', 'uniform distribution', 'symmetry', 'symmetric distributions', 'distributions', 'poisson', 'discrete uniform distribution', 'distribution', 'poisson distribution', 'binomial', 'discrete', 'binomial distribution']", MEANING OF SKEWNESS,seg_181,"from table 4.1, it is evident that most of the symmetric distributions are continuous. an exception is the discrete uniform distribution, which exhibits a special type of symmetry. the binomial distribution is symmetric when p = 0.5, and the poisson distribution (chapter 6, p. 6–67) approaches symmetry for very large   values.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3574,  1997, 15315,  7974,  2791])","tensor([  101,  2013,  2795,  1018,  1012,  1015,  1010,  2009,  2003, 10358,
         2008,  2087,  1997,  1996, 19490, 20611,  2024,  7142,  1012,  2019,
         6453,  2003,  1996, 16246,  6375,  4353,  1010,  2029, 10637,  1037,
         2569,  2828,  1997, 14991,  1012,  1996,  8026, 20936,  2389,  4353,
         2003, 19490,  2043,  1052,  1027,  1014,  1012,  1019,  1010,  1998,
         1996, 13433, 24077,  4353,  1006,  3127,  1020,  1010,  1052,  1012,
         1020,  1516,  6163,  1007,  8107, 14991,  2005,  2200,  2312,  5300,
         1012,   102])"
773,1,"['mean', 'skewed', 'average', 'symmetric', 'skewed distributions', 'skewness', 'distributions', 'sample', 'samples', 'measurement', 'arithmetic mean', 'data', 'median']", Absolute Versus Relative Measures of Skewness,seg_183,"absolute measures express the skewness in terms of the unit of measurement. as the arithmetic mean is greater than mode for positively skewed distributions, d = (mean-mode) provides a quick check to see if data are skewed. this is an absolute measure because it uses the same unit as the data. similarly (q3 + q1) − 2 ∗ m where m is the median is zero for symmetric laws and 0 for positively skewed distributions. a disadvantage of these measures is that they cannot be compared across samples. the unit can be canceled by dividing the quantity with another quantity computed from the same sample that has the same degree. for instance, bowley’s measure is obtained by dividing (q3 + q1) − 2 ∗ m by (q3 − q1). this measure is zero in two situations:–(i) when data are symmetric, the average (q3 + q1)∕2 coincides with the median m, so that the numerator is zero (ii) when all sample values are the same",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  7619,  5761,  4671,  1996, 15315,  7974,  2791,  1999,  3408,
         1997,  1996,  3131,  1997, 10903,  1012,  2004,  1996, 20204,  2812,
         2003,  3618,  2084,  5549,  2005, 13567, 15315,  7974,  2098, 20611,
         1010,  1040,  1027,  1006,  2812,  1011,  5549,  1007,  3640,  1037,
         4248,  4638,  2000,  2156,  2065,  2951,  2024, 15315,  7974,  2098,
         1012,  2023,  2003,  2019,  7619,  5468,  2138,  2009,  3594,  1996,
         2168,  3131,  2004,  1996,  2951,  1012,  6660,  1006,  1053,  2509,
         1009,  1053,  2487,  1007,  1597,  1016,  1598,  1049,  2073,  1049,
         2003,  1996,  3991,  2003,  5717,  2005, 19490,  4277,  1998,  1014,
         2005, 13567, 15315,  7974,  2098, 20611,  1012,  1037, 20502,  1997,
         2122,  5761,  2003,  2008,  2027,  3685,  2022,  4102,  2408,  8168,
         1012,  1996,  3131,  2064,  2022, 13261,  2011, 16023,  1996, 11712,
         2007,  2178, 11712, 24806,  2013,  1996,  2168,  7099,  2008,  2038,
         1996,  2168,  3014,  1012,  2005,  6013,  1010,  4605,  3240,  1521,
         1055,  5468,  2003,  4663,  2011, 16023,  1006,  1053,  2509,  1009,
         1053,  2487,  1007,  1597,  1016,  1598,  1049,  2011,  1006,  1053,
         2509,  1597,  1053,  2487,  1007,  1012,  2023,  5468,  2003,  5717,
         1999,  2048,  8146,  1024,  1516,  1006,  1045,  1007,  2043,  2951,
         2024, 19490,  1010,  1996,  2779,  1006,  1053,  2509,  1009,  1053,
         2487,  1007,   100, 19680,  2015,  2007,  1996,  3991,  1049,  1010,
         2061,  2008,  1996, 16371,  5017,  8844,  2003,  5717,  1006,  2462,
         1007,  2043,  2035,  7099,  5300,  2024,  1996,  2168,   102])"
774,1,['numerical'], Absolute Versus Relative Measures of Skewness,seg_183,"(q3,q1), and m are equal. as the denominator is much greater than the numerator, the numerical value of this measure is much less than 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  1006,  1053,  2509,  1010,  1053,  2487,  1007,  1010,  1998,
         1049,  2024,  5020,  1012,  2004,  1996,  7939, 20936, 27413,  2003,
         2172,  3618,  2084,  1996, 16371,  5017,  8844,  1010,  1996, 15973,
         3643,  1997,  2023,  5468,  2003,  2172,  2625,  2084,  1015,  1012,
          102])"
775,1,"['absolute value', 'symmetric', 'normal distribution', 'skew', 'tails', 'skewness', 'normal', 'standard error', 'data', 'skewed', 'standard normal distribution', 'probability', 'standard', 'kurtosis', 'tail', 'standard normal', 'distributions', 'skewed distribution', 'sample', 'distribution', 'error']", Absolute Versus Relative Measures of Skewness,seg_183,"how much skewed is a skew distribution? we need a yardstick to measure the amount of departure from an otherwise symmetric law. the original skewness measures used the standard normal distribution n(0, 1) as the yardstick. to quantify the amount of skewness, we could consider the standard error of skewness (ses) and measure the departure from twice the standard error. an approximate ses for a sample of size n is √6∕n (see reference 49. if 2*ses absolute value of skewness, we may reasonably conclude that the data are from a skewed distribution. we could also distinguish if the data are skewed to the left (skewness 0) or to the right (skewness 0). skewness can be categorized based on the shape of both tails. a distribution which is skewed to the right may have a left tail either below a standard normal left tail, above it, partially below and partially above it, or align exactly with the normal. this gives rise to lepto-right-skewed, meso-right-skewed and platy-right-skewed distributions (where lepto-, mesoand platyindicate the behavior of the left tail of a right-skewed distribution). the difference is subtle but important. analogous definition holds for left-skewed distribution whose right tail may be unaligned with a normal right tail. as defined in the following, the kurtosis measures the relative concentration or amassment of probability mass toward the center (peak) of a distribution. hence, these peculiarities are of interest among itself than from a kurtosis view point.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  2129,  2172, 15315,  7974,  2098,  2003,  1037, 15315,  7974,
         4353,  1029,  2057,  2342,  1037,  4210, 26348,  2000,  5468,  1996,
         3815,  1997,  6712,  2013,  2019,  4728, 19490,  2375,  1012,  1996,
         2434, 15315,  7974,  2791,  5761,  2109,  1996,  3115,  3671,  4353,
         1050,  1006,  1014,  1010,  1015,  1007,  2004,  1996,  4210, 26348,
         1012,  2000, 24110, 27351,  1996,  3815,  1997, 15315,  7974,  2791,
         1010,  2057,  2071,  5136,  1996,  3115,  7561,  1997, 15315,  7974,
         2791,  1006,  7367,  2015,  1007,  1998,  5468,  1996,  6712,  2013,
         3807,  1996,  3115,  7561,  1012,  2019, 15796,  7367,  2015,  2005,
         1037,  7099,  1997,  2946,  1050,  2003,   100,  1006,  2156,  4431,
         4749,  1012,  2065,  1016,  1008,  7367,  2015,  7619,  3643,  1997,
        15315,  7974,  2791,  1010,  2057,  2089, 16286, 16519,  2008,  1996,
         2951,  2024,  2013,  1037, 15315,  7974,  2098,  4353,  1012,  2057,
         2071,  2036, 10782,  2065,  1996,  2951,  2024, 15315,  7974,  2098,
         2000,  1996,  2187,  1006, 15315,  7974,  2791,  1014,  1007,  2030,
         2000,  1996,  2157,  1006, 15315,  7974,  2791,  1014,  1007,  1012,
        15315,  7974,  2791,  2064,  2022, 20427,  2241,  2006,  1996,  4338,
         1997,  2119, 17448,  1012,  1037,  4353,  2029,  2003, 15315,  7974,
         2098,  2000,  1996,  2157,  2089,  2031,  1037,  2187,  5725,  2593,
         2917,  1037,  3115,  3671,  2187,  5725,  1010,  2682,  2009,  1010,
         6822,  2917,  1998,  6822,  2682,  2009,  1010,  2030, 25705,  3599,
         2007,  1996,  3671,  1012,  2023,  3957,  4125,  2000,  3393, 13876,
         2080,  1011,  2157,  1011, 15315,  7974,  2098,  1010,  2033,  6499,
         1011,  2157,  1011, 15315,  7974,  2098,  1998, 20228,  4017,  2100,
         1011,  2157,  1011, 15315,  7974,  2098, 20611,  1006,  2073,  3393,
        13876,  2080,  1011,  1010,  2033,  6499,  5685, 20228,  4017, 25811,
        16467,  1996,  5248,  1997,  1996,  2187,  5725,  1997,  1037,  2157,
         1011, 15315,  7974,  2098,  4353,  1007,  1012,  1996,  4489,  2003,
        11259,  2021,  2590,  1012, 19639,  6210,  4324,  2005,  2187,  1011,
        15315,  7974,  2098,  4353,  3005,  2157,  5725,  2089,  2022, 14477,
         3669, 19225,  2007,  1037,  3671,  2157,  5725,  1012,  2004,  4225,
         1999,  1996,  2206,  1010,  1996,  9679, 12650,  5761,  1996,  5816,
         6693,  2030, 25933,  4757,  3672,  1997,  9723,  3742,  2646,  1996,
         2415,  1006,  4672,  1007,  1997,  1037,  4353,  1012,  6516,  1010,
         2122, 14099,  6447,  2024,  1997,  3037,  2426,  2993,  2084,  2013,
         1037,  9679, 12650,  3193,  2391,  1012,   102])"
776,1,"['skewness', 'cumulant', 'moments', 'normal', 'distribution', 'kurtosis', 'symmetric', 'normality']", Absolute Versus Relative Measures of Skewness,seg_183,note that the third-order central moments (in the numerator of some skewness measures) vanish not only for the normal law but also for any symmetric distribution. whether the fourth cumulant vanish or not depends on the distribution. both the skewness and kurtosis are measures of shape departures from normality.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  3602,  2008,  1996,  2353,  1011,  2344,  2430,  5312,  1006,
         1999,  1996, 16371,  5017,  8844,  1997,  2070, 15315,  7974,  2791,
         5761,  1007, 25887,  2025,  2069,  2005,  1996,  3671,  2375,  2021,
         2036,  2005,  2151, 19490,  4353,  1012,  3251,  1996,  2959, 13988,
         7068,  3372, 25887,  2030,  2025,  9041,  2006,  1996,  4353,  1012,
         2119,  1996, 15315,  7974,  2791,  1998,  9679, 12650,  2024,  5761,
         1997,  4338,  6712,  2015,  2013,  3671,  3012,  1012,   102])"
777,1,"['symmetry', 'skewness', 'sample']", Absolute Versus Relative Measures of Skewness,seg_183,definition 4.2 skewness is a numeric measure of the degree of departure of a sample of size n   2 from symmetry.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  6210,  1018,  1012,  1016, 15315,  7974,  2791,  2003,  1037,
        16371, 25531,  5468,  1997,  1996,  3014,  1997,  6712,  1997,  1037,
         7099,  1997,  2946,  1050,  1016,  2013, 14991,  1012,   102])"
778,1,"['location', 'skewed', 'unimodal', 'tails', 'skewed distribution', 'population', 'sample', 'distribution']", Absolute Versus Relative Measures of Skewness,seg_183,"the above-mentioned definition pertains to the sample, although it is defined for both the sample and the population. if a unimodal skewed distribution is superimposed on a unimodal bell-shaped distribution so as to align the peaked points exactly (location alignment), we could visualize various possible types of asymmetry in the left and right tails. a positively (respectively negatively) skewed distribution has longer tails on the right (left) side of the location alignment.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  1996,  2682,  1011,  3855,  6210,  2566, 18249,  2015,  2000,
         1996,  7099,  1010,  2348,  2009,  2003,  4225,  2005,  2119,  1996,
         7099,  1998,  1996,  2313,  1012,  2065,  1037,  4895, 16339,  9305,
        15315,  7974,  2098,  4353,  2003,  3565,  5714, 19155,  2006,  1037,
         4895, 16339,  9305,  4330,  1011,  5044,  4353,  2061,  2004,  2000,
        25705,  1996,  6601,  2685,  3599,  1006,  3295, 12139,  1007,  1010,
         2057,  2071,  5107,  4697,  2536,  2825,  4127,  1997,  2004, 24335,
        24327,  1999,  1996,  2187,  1998,  2157, 17448,  1012,  1037, 13567,
         1006,  4414, 19762,  1007, 15315,  7974,  2098,  4353,  2038,  2936,
        17448,  2006,  1996,  2157,  1006,  2187,  1007,  2217,  1997,  1996,
         3295, 12139,  1012,   102])"
779,1,['skewness'], Absolute Versus Relative Measures of Skewness,seg_183,example 4.1 check the skewness of marks,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  2742,  1018,  1012,  1015,  4638,  1996, 15315,  7974,  2791,
         1997,  6017,   102])"
780,1,"['skewed', 'skewness', 'distribution']", Absolute Versus Relative Measures of Skewness,seg_183,the mark distribution of 60 students of a class had a skewness of −0.65 at the start of the semester and +0.75 at the end. are the marks significantly skewed?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  1996,  2928,  4353,  1997,  3438,  2493,  1997,  1037,  2465,
         2018,  1037, 15315,  7974,  2791,  1997,  1597,  2692,  1012,  3515,
         2012,  1996,  2707,  1997,  1996, 13609,  1998,  1009,  1014,  1012,
         4293,  2012,  1996,  2203,  1012,  2024,  1996,  6017,  6022, 15315,
         7974,  2098,  1029,   102])"
781,1,"['skewed', 'skewness', 'distributions']", Absolute Versus Relative Measures of Skewness,seg_183,"solution 4.1 here n = 60, so that 6∕n = 0.10, ses = 6∕n1∕2 = 0.316227766, and 2*ses = 0.632455532. as the absolute values of skewness are both greater than 2*ses, we conclude that both distributions are skewed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0.,
        0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101,  5576,  1018,  1012,  1015,  2182,  1050,  1027,  3438,  1010,
         2061,  2008,   100,  1027,  1014,  1012,  2184,  1010,  7367,  2015,
         1027,   100,  1027,  1014,  1012, 23980, 19317,  2581,  2581, 28756,
         1010,  1998,  1016,  1008,  7367,  2015,  1027,  1014,  1012,  6191,
        18827, 24087, 22275,  2475,  1012,  2004,  1996,  7619,  5300,  1997,
        15315,  7974,  2791,  2024,  2119,  3618,  2084,  1016,  1008,  7367,
         2015,  1010,  2057, 16519,  2008,  2119, 20611,  2024, 15315,  7974,
         2098,  1012,   102])"
782,1,"['location', 'mean', 'median', 'location measures']", Absolute Versus Relative Measures of Skewness,seg_183,"skewness was originally defined as a measure of asymmetry. all three location measures (the mean, median, and mode) together can throw some insight on the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101, 15315,  7974,  2791,  2001,  2761,  4225,  2004,  1037,  5468,
         1997,  2004, 24335, 24327,  1012,  2035,  2093,  3295,  5761,  1006,
         1996,  2812,  1010,  3991,  1010,  1998,  5549,  1007,  2362,  2064,
         5466,  2070, 12369,  2006,  1996,   102])"
783,1,"['mean', 'skewed', 'variance', 'symmetric', 'skewed distributions', 'skewness', 'symmetric distributions', 'distributions', 'distribution', 'data', 'median']", Absolute Versus Relative Measures of Skewness,seg_183,"skewness of a data distribution. in general, mean   median   mode for negatively skewed distributions, mean = median = mode for symmetric distributions, mean   median   mode for positively skewed distributions. the variance could be exactly identical for positively and negatively skewed distributions. we need a measure of skewness to distinguish between possible asymmetries. there are many measures for this purpose [50].",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1.,
        1., 1., 1., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7619,  6431,  5816,  5761,  1997, 15315,  7974,  2791])","tensor([  101, 15315,  7974,  2791,  1997,  1037,  2951,  4353,  1012,  1999,
         2236,  1010,  2812,  3991,  5549,  2005, 19762, 15315,  7974,  2098,
        20611,  1010,  2812,  1027,  3991,  1027,  5549,  2005, 19490, 20611,
         1010,  2812,  3991,  5549,  2005, 13567, 15315,  7974,  2098, 20611,
         1012,  1996, 23284,  2071,  2022,  3599,  7235,  2005, 13567,  1998,
        19762, 15315,  7974,  2098, 20611,  1012,  2057,  2342,  1037,  5468,
         1997, 15315,  7974,  2791,  2000, 10782,  2090,  2825,  2004, 24335,
        11368,  5134,  1012,  2045,  2024,  2116,  5761,  2005,  2023,  3800,
         1031,  2753,  1033,  1012,   102])"
784,1,"['location', 'range', 'variance', 'dispersion', 'sample']", CATEGORIZATION OF SKEWNESS MEASURES,seg_185,"1. location and scale-based measures these measures combine the location and scale measures (in the numerator and denominator, respectively) to get a unit-less measure of dispersion. one popular example is pearson’s   measure [51] for a sample defined as   = (xn − mode)∕sn. as the mode can be on the left or right of xn, the numerator can be positive, negative, or zero. the denominator being the positive square-root of variance is always positive. hence,   can take any real value. as xn and mode both lie in between the minimum and maximum,   is bounded by the sample range.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4937, 20265, 26910,  1997, 15315,  7974,  2791,  5761])","tensor([  101,  1015,  1012,  3295,  1998,  4094,  1011,  2241,  5761,  2122,
         5761, 11506,  1996,  3295,  1998,  4094,  5761,  1006,  1999,  1996,
        16371,  5017,  8844,  1998,  7939, 20936, 27413,  1010,  4414,  1007,
         2000,  2131,  1037,  3131,  1011,  2625,  5468,  1997,  4487, 17668,
        10992,  1012,  2028,  2759,  2742,  2003, 12874,  1521,  1055,  5468,
         1031,  4868,  1033,  2005,  1037,  7099,  4225,  2004,  1027,  1006,
         1060,  2078,  1597,  5549,  1007,   100,  1012,  2004,  1996,  5549,
         2064,  2022,  2006,  1996,  2187,  2030,  2157,  1997,  1060,  2078,
         1010,  1996, 16371,  5017,  8844,  2064,  2022,  3893,  1010,  4997,
         1010,  2030,  5717,  1012,  1996,  7939, 20936, 27413,  2108,  1996,
         3893,  2675,  1011,  7117,  1997, 23284,  2003,  2467,  3893,  1012,
         6516,  1010,  2064,  2202,  2151,  2613,  3643,  1012,  2004,  1060,
         2078,  1998,  5549,  2119,  4682,  1999,  2090,  1996,  6263,  1998,
         4555,  1010,  2003, 10351,  2011,  1996,  7099,  2846,  1012,   102])"
785,1,"['distribution', 'percentiles', 'quartiles', 'deviations', 'median']", CATEGORIZATION OF SKEWNESS MEASURES,seg_185,"2. quartile-based measures these measures utilize the quartiles of a distribution. the popular examples are bowley’s, hinkley’s, and kelley’s measures discussed in the following text. another measure that utilizes the averaged deviations of percentiles from the median using a cutoff threshold can be found in reference 43.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997, 15315,  7974,  2791,  5761])","tensor([  101,  1016,  1012, 24209,  8445,  9463,  1011,  2241,  5761,  2122,
         5761, 16462,  1996, 24209,  8445,  9463,  2015,  1997,  1037,  4353,
         1012,  1996,  2759,  4973,  2024,  4605,  3240,  1521,  1055,  1010,
         7632,  8950,  3051,  1521,  1055,  1010,  1998, 19543,  1521,  1055,
         5761,  6936,  1999,  1996,  2206,  3793,  1012,  2178,  5468,  2008,
        21852,  1996, 11398, 24353,  2015,  1997,  3867,  9463,  2015,  2013,
         1996,  3991,  2478,  1037,  3013,  7245, 11207,  2064,  2022,  2179,
         1999,  4431,  4724,  1012,   102])"
786,1,"['moment', 'skewness', 'sample', 'deviations', 'standard', 'population', 'standard deviations']", CATEGORIZATION OF SKEWNESS MEASURES,seg_185,"3. moment-based measures these utilize the third central moment as   =  3∕ 3 for the population. they are defined for both the population and the sample. as the denominator is the cube of the standard deviations, they are also unit-less and scale invariant, that is, x and y = |c| ∗ x have the same skewness for nonzero c ∈ r.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997, 15315,  7974,  2791,  5761])","tensor([  101,  1017,  1012,  2617,  1011,  2241,  5761,  2122, 16462,  1996,
         2353,  2430,  2617,  2004,  1027,   100,  1017,  2005,  1996,  2313,
         1012,  2027,  2024,  4225,  2005,  2119,  1996,  2313,  1998,  1996,
         7099,  1012,  2004,  1996,  7939, 20936, 27413,  2003,  1996, 14291,
         1997,  1996,  3115, 24353,  2015,  1010,  2027,  2024,  2036,  3131,
         1011,  2625,  1998,  4094, 23915,  1010,  2008,  2003,  1010,  1060,
         1998,  1061,  1027,  1064,  1039,  1064,  1598,  1060,  2031,  1996,
         2168, 15315,  7974,  2791,  2005,  2512,  6290,  2080,  1039,  1596,
         1054,  1012,   102])"
787,1,"['function', 'skewed', 'skewed distributions', 'functions', 'unimodal', 'skewness', 'distributions', 'condition', 'distribution', 'plot', 'symmetric', 'case']", CATEGORIZATION OF SKEWNESS MEASURES,seg_185,"4. measures that utilize inverse of distribution functions these measures use the inverse of theoretical distribution functions. one example is the spread function. let f−1(u) = sup(x∶f(x) ≤ u), 0   u   1 denotes the inverse of the cdf. then, a symmetric zero-centered distribution can be characterized by the condition   = f−1(u) + f−1(1 − u) = 0 for u ∈ (0, .5). such distributions are symmetric around 0 if f−1(1∕2) = 0, and symmetric around   if f−1(1∕2) =  , in which case 2  −   = 0. note that     0 for positively skewed and     0 for negatively skewed distributions. balanda and macgillivray [52] used sf(u) = f−1(0.5 + u) − f−1(0.5 − u) for 0 ≤ u ≤ 0.5 as a measure of skewness. if both f and g are unimodal and invertible, one could produce a plot of sf(u)∕sg(u) (or its inverse) to compare the relative skewness.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])","tensor([ 4937, 20265, 26910,  1997, 15315,  7974,  2791,  5761])","tensor([  101,  1018,  1012,  5761,  2008, 16462, 19262,  1997,  4353,  4972,
         2122,  5761,  2224,  1996, 19262,  1997,  9373,  4353,  4972,  1012,
         2028,  2742,  2003,  1996,  3659,  3853,  1012,  2292,  1042, 27944,
         1006,  1057,  1007,  1027, 10514,  2361,  1006,   100,  1006,  1060,
         1007,  1608,  1057,  1007,  1010,  1014,  1057,  1015, 14796,  1996,
        19262,  1997,  1996,  3729,  2546,  1012,  2059,  1010,  1037, 19490,
         5717,  1011,  8857,  4353,  2064,  2022,  7356,  2011,  1996,  4650,
         1027,  1042, 27944,  1006,  1057,  1007,  1009,  1042, 27944,  1006,
         1015,  1597,  1057,  1007,  1027,  1014,  2005,  1057,  1596,  1006,
         1014,  1010,  1012,  1019,  1007,  1012,  2107, 20611,  2024, 19490,
         2105,  1014,  2065,  1042, 27944,  1006,   100,  1007,  1027,  1014,
         1010,  1998, 19490,  2105,  2065,  1042, 27944,  1006,   100,  1007,
         1027,  1010,  1999,  2029,  2553,  1016,  1597,  1027,  1014,  1012,
         3602,  2008,  1014,  2005, 13567, 15315,  7974,  2098,  1998,  1014,
         2005, 19762, 15315,  7974,  2098, 20611,  1012, 21451,  8943,  1998,
         6097, 19791, 12848,  9447,  1031,  4720,  1033,  2109, 16420,  1006,
         1057,  1007,  1027,  1042, 27944,  1006,  1014,  1012,  1019,  1009,
         1057,  1007,  1597,  1042, 27944,  1006,  1014,  1012,  1019,  1597,
         1057,  1007,  2005,  1014,  1608,  1057,  1608,  1014,  1012,  1019,
         2004,  1037,  5468,  1997, 15315,  7974,  2791,  1012,  2065,  2119,
         1042,  1998,  1043,  2024,  4895, 16339,  9305,  1998,  1999, 16874,
         7028,  1010,  2028,  2071,  3965,  1037,  5436,  1997, 16420,  1006,
         1057,  1007,   100,  1006,  1057,  1007,  1006,  2030,  2049, 19262,
         1007,  2000, 12826,  1996,  5816, 15315,  7974,  2791,  1012,   102])"
788,1,"['mean', 'linear combination', 'order statistics', 'linear', 'random variable', 'random', 'statistics', 'expected value', 'variable', 'combination']", CATEGORIZATION OF SKEWNESS MEASURES,seg_185,"5. measures that utilize l-moments for a real-valued random variable x with finite mean  , the l-moment is defined as expected value of linear combination of order statistics.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 1.,
        0., 0.])","tensor([ 4937, 20265, 26910,  1997, 15315,  7974,  2791,  5761])","tensor([  101,  1019,  1012,  5761,  2008, 16462,  1048,  1011,  5312,  2005,
         1037,  2613,  1011, 11126,  6721,  8023,  1060,  2007, 10713,  2812,
         1010,  1996,  1048,  1011,  2617,  2003,  4225,  2004,  3517,  3643,
         1997,  7399,  5257,  1997,  2344,  6747,  1012,   102])"
789,1,"['mean', 'linear combination', 'range', 'order statistics', 'linear', 'order statistic', 'dispersion', 'sample', 'statistics', 'expected values', 'statistic', 'combination']", CATEGORIZATION OF SKEWNESS MEASURES,seg_185,"the first l-moment is the same as the mean, so that  1 = e(x) =  . the second l-moment  2 = 0.5 ∗ [e(x(2∶2) − x(1∶2))] where x(i∶n) for i   n denotes the ith order statistic of a sample of size n. this is e(half range). define  3 = (1∕3) ∗ e(x(3∶3) − 2 ∗ x(2∶3) + x(1∶3)). the l-skewness is then defined as  3 =  3∕ 2 [9, 53]. as  3 and  2 are expected values of linear combination of order statistics,  3 is unit-less. analogously,  2 =  2∕ 1 can be considered as a measure of dispersion.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])","tensor([ 4937, 20265, 26910,  1997, 15315,  7974,  2791,  5761])","tensor([  101,  1996,  2034,  1048,  1011,  2617,  2003,  1996,  2168,  2004,
         1996,  2812,  1010,  2061,  2008,  1015,  1027,  1041,  1006,  1060,
         1007,  1027,  1012,  1996,  2117,  1048,  1011,  2617,  1016,  1027,
         1014,  1012,  1019,  1598,  1031,  1041,  1006,  1060,  1006,   100,
         1007,  1597,  1060,  1006,   100,  1007,  1007,  1033,  2073,  1060,
         1006,   100,  1007,  2005,  1045,  1050, 14796,  1996,  2009,  2232,
         2344, 28093,  6553,  1997,  1037,  7099,  1997,  2946,  1050,  1012,
         2023,  2003,  1041,  1006,  2431,  2846,  1007,  1012,  9375,  1017,
         1027,  1006,   100,  1007,  1598,  1041,  1006,  1060,  1006,   100,
         1007,  1597,  1016,  1598,  1060,  1006,   100,  1007,  1009,  1060,
         1006,   100,  1007,  1007,  1012,  1996,  1048,  1011, 15315,  7974,
         2791,  2003,  2059,  4225,  2004,  1017,  1027,   100,  1016,  1031,
         1023,  1010,  5187,  1033,  1012,  2004,  1017,  1998,  1016,  2024,
         3517,  5300,  1997,  7399,  5257,  1997,  2344,  6747,  1010,  1017,
         2003,  3131,  1011,  2625,  1012, 19639,  2135,  1010,  1016,  1027,
          100,  1015,  2064,  2022,  2641,  2004,  1037,  5468,  1997,  4487,
        17668, 10992,  1012,   102])"
790,1,"['percentiles', 'symmetric distributions', 'symmetric', 'median', 'frequency', 'quartiles', 'integer part', 'quartile', 'data', 'case', 'percentile', 'distributions', 'sample', 'sample size', 'levels']", CATEGORIZATION OF SKEWNESS MEASURES,seg_185,"the quartiles, deciles, and percentiles are symmetrically located from the median for all symmetric distributions. while deciles divide the total frequency (or area) into 10 equal parts, percentiles (%-tiles) divide it into 100 equal parts. we could go to finer levels into one thousand equal parts, and so on. however, these are seldom popular owing to the simple reason that sample sizes are most often 1000. if the sample size is  100, even the percentiles are not used as several percentiles could coincide. deciles are special %-tiles, as also quartiles are special deciles. for example, q2 = d5 = p50, where q, d, p stand for quartile, decile, and percentile, respectively. in the following discussion, k ∈ {1, 2, 3}, j ∈ {1, 2, .., 9}. the general formula to convert from quartile into decile is qk = d(10∕4)∗k = d(5∕2)∗k, provided (5∕2) ∗ k is an integer. the reverse relationship is dj = q(2∕5)∗j, provided (2∕5) ∗ j is an integer (which happens to be the case for j = 5). similarly dj = p10∗j or its reverse pi = di∕10 if i∕10 is an integer. a similar relation between quartiles and percentiles is qk = p25∗k or pi = q⌈i∕25⌉. as q⌈i∕25⌉ returns the integer part (ceil operator), several percentiles can get mapped to the same quartile when the data size is small.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997, 15315,  7974,  2791,  5761])","tensor([  101,  1996, 24209,  8445,  9463,  2015,  1010, 11703,  9463,  2015,
         1010,  1998,  3867,  9463,  2015,  2024, 23476,  2135,  2284,  2013,
         1996,  3991,  2005,  2035, 19490, 20611,  1012,  2096, 11703,  9463,
         2015, 11443,  1996,  2561,  6075,  1006,  2030,  2181,  1007,  2046,
         2184,  5020,  3033,  1010,  3867,  9463,  2015,  1006,  1003,  1011,
        13262,  1007, 11443,  2009,  2046,  2531,  5020,  3033,  1012,  2057,
         2071,  2175,  2000, 26954,  3798,  2046,  2028,  4595,  5020,  3033,
         1010,  1998,  2061,  2006,  1012,  2174,  1010,  2122,  2024, 15839,
         2759, 11427,  2000,  1996,  3722,  3114,  2008,  7099, 10826,  2024,
         2087,  2411,  6694,  1012,  2065,  1996,  7099,  2946,  2003,  2531,
         1010,  2130,  1996,  3867,  9463,  2015,  2024,  2025,  2109,  2004,
         2195,  3867,  9463,  2015,  2071, 19680,  1012, 11703,  9463,  2015,
         2024,  2569,  1003,  1011, 13262,  1010,  2004,  2036, 24209,  8445,
         9463,  2015,  2024,  2569, 11703,  9463,  2015,  1012,  2005,  2742,
         1010,  1053,  2475,  1027,  1040,  2629,  1027,  1052, 12376,  1010,
         2073,  1053,  1010,  1040,  1010,  1052,  3233,  2005, 24209,  8445,
         9463,  1010, 11703,  9463,  1010,  1998,  3867,  9463,  1010,  4414,
         1012,  1999,  1996,  2206,  6594,  1010,  1047,  1596,  1063,  1015,
         1010,  1016,  1010,  1017,  1065,  1010,  1046,  1596,  1063,  1015,
         1010,  1016,  1010,  1012,  1012,  1010,  1023,  1065,  1012,  1996,
         2236,  5675,  2000, 10463,  2013, 24209,  8445,  9463,  2046, 11703,
         9463,  2003,  1053,  2243,  1027,  1040,  1006,   100,  1007,  1598,
         2243,  1027,  1040,  1006,   100,  1007,  1598,  2243,  1010,  3024,
         1006,   100,  1007,  1598,  1047,  2003,  2019, 16109,  1012,  1996,
         7901,  3276,  2003,  6520,  1027,  1053,  1006,   100,  1007,  1598,
         3501,  1010,  3024,  1006,   100,  1007,  1598,  1046,  2003,  2019,
        16109,  1006,  2029,  6433,  2000,  2022,  1996,  2553,  2005,  1046,
         1027,  1019,  1007,  1012,  6660,  6520,  1027,  1052, 10790, 30125,
         3501,  2030,  2049,  7901, 14255,  1027,   100,  2065,   100,  2003,
         2019, 16109,  1012,  1037,  2714,  7189,  2090, 24209,  8445,  9463,
         2015,  1998,  3867,  9463,  2015,  2003,  1053,  2243,  1027,  1052,
        17788, 30125,  2243,  2030, 14255,  1027,  1053,   100,   100,   100,
         1012,  2004,  1053,   100,   100,   100,  5651,  1996, 16109,  2112,
         1006,  8292,  4014,  6872,  1007,  1010,  2195,  3867,  9463,  2015,
         2064,  2131, 17715,  2000,  1996,  2168, 24209,  8445,  9463,  2043,
         1996,  2951,  2946,  2003,  2235,  1012,   102])"
791,1,"['skewness', 'sample', 'sample size', 'population', 'data', 'case']", MEASURES OF SKEWNESS,seg_187,there are many skewness measures available. they can be applied to the population or sample. sample skewness is more important for data analysts and engineers. most of the measures discussed in the following are sample measures. it is assumed that the sample size n is sufficiently large for the expressions involved to be meaningful. the population analogs are denoted by greek letters and their sample counterparts by lower case english letters by convention.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5761,  1997, 15315,  7974,  2791])","tensor([  101,  2045,  2024,  2116, 15315,  7974,  2791,  5761,  2800,  1012,
         2027,  2064,  2022,  4162,  2000,  1996,  2313,  2030,  7099,  1012,
         7099, 15315,  7974,  2791,  2003,  2062,  2590,  2005,  2951, 18288,
         1998,  6145,  1012,  2087,  1997,  1996,  5761,  6936,  1999,  1996,
         2206,  2024,  7099,  5761,  1012,  2009,  2003,  5071,  2008,  1996,
         7099,  2946,  1050,  2003, 12949,  2312,  2005,  1996, 11423,  2920,
         2000,  2022, 15902,  1012,  1996,  2313, 11698,  2015,  2024, 19537,
         2011,  3306,  4144,  1998,  2037,  7099, 14562,  2011,  2896,  2553,
         2394,  4144,  2011,  4680,  1012,   102])"
792,1,"['location', 'skewness coefficient', 'percentiles', 'symmetric', 'lack of symmetry', 'symmetry', 'skewness', 'coefficient', 'distribution', 'median']", Bowleys Skewness Measure,seg_189,"as skewness measures the lack of symmetry, several measures can be defined by utilizing their location relative to the distance from the median. if the distribution is symmetric, (m − q1) and (q3 − m) are equal. in general, (m − pk) and (p100−k − m) are equal where pk denotes the percentiles and p50 = m is the median. this property has been utilized by harremoës [54], macgillivray [55]. the simplest one is due to bowley [56], who defined a skewness coefficient as",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2004, 15315,  7974,  2791,  5761,  1996,  3768,  1997, 14991,
         1010,  2195,  5761,  2064,  2022,  4225,  2011, 16911,  2037,  3295,
         5816,  2000,  1996,  3292,  2013,  1996,  3991,  1012,  2065,  1996,
         4353,  2003, 19490,  1010,  1006,  1049,  1597,  1053,  2487,  1007,
         1998,  1006,  1053,  2509,  1597,  1049,  1007,  2024,  5020,  1012,
         1999,  2236,  1010,  1006,  1049,  1597,  1052,  2243,  1007,  1998,
         1006,  1052, 18613, 22543,  2243,  1597,  1049,  1007,  2024,  5020,
         2073,  1052,  2243, 14796,  1996,  3867,  9463,  2015,  1998,  1052,
        12376,  1027,  1049,  2003,  1996,  3991,  1012,  2023,  3200,  2038,
         2042, 12550,  2011,  5292, 14343,  5302,  2229,  1031,  5139,  1033,
         1010,  6097, 19791, 12848,  9447,  1031,  4583,  1033,  1012,  1996,
        21304,  2028,  2003,  2349,  2000,  4605,  3240,  1031,  5179,  1033,
         1010,  2040,  4225,  1037, 15315,  7974,  2791, 19064,  2004,   102])"
793,1,"['continuous', 'discrete', 'percentiles', 'symmetric', 'continuous distributions', 'distributions', 'quartiles', 'errors', 'discrete distributions', 'median']", Bowleys Skewness Measure,seg_189,"where q1 and q3 are the lower and upper quartiles and m is the median. as the percentiles are equally distant from the median, the above-mentioned measure is zero for symmetric continuous distributions because the numerator is zero (this may not hold for discrete distributions owing to round-off errors).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2073,  1053,  2487,  1998,  1053,  2509,  2024,  1996,  2896,
         1998,  3356, 24209,  8445,  9463,  2015,  1998,  1049,  2003,  1996,
         3991,  1012,  2004,  1996,  3867,  9463,  2015,  2024,  8053,  6802,
         2013,  1996,  3991,  1010,  1996,  2682,  1011,  3855,  5468,  2003,
         5717,  2005, 19490,  7142, 20611,  2138,  1996, 16371,  5017,  8844,
         2003,  5717,  1006,  2023,  2089,  2025,  2907,  2005, 16246, 20611,
        11427,  2000,  2461,  1011,  2125, 10697,  1007,  1012,   102])"
794,1,['population'], Bowleys Skewness Measure,seg_189,the corresponding population analog is easily expressed in terms of the cdf as,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  1996,  7978,  2313, 11698,  2003,  4089,  5228,  1999,  3408,
         1997,  1996,  3729,  2546,  2004,   102])"
795,1,"['function', 'skewness', 'percentile']", Bowleys Skewness Measure,seg_189,"this measure was generalized in reference 57, who parametrizes it in terms of an arbitrary percentile u as skewness function",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2023,  5468,  2001, 18960,  1999,  4431,  5401,  1010,  2040,
        11498, 11368, 25709,  2015,  2009,  1999,  3408,  1997,  2019, 15275,
         3867,  9463,  1057,  2004, 15315,  7974,  2791,  3853,   102])"
796,1,"['continuous', 'normalized', 'range', 'percentiles', 'populations', 'discrete']", Bowleys Skewness Measure,seg_189,"where u is normalized to the range [0,1]. this is easy to compute for continuous populations (for discrete populations, the percentiles may not align exactly on variate values). the above-mentioned measure is negative for u   1",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2073,  1057,  2003,  3671,  3550,  2000,  1996,  2846,  1031,
         1014,  1010,  1015,  1033,  1012,  2023,  2003,  3733,  2000, 24134,
         2005,  7142,  7080,  1006,  2005, 16246,  7080,  1010,  1996,  3867,
         9463,  2015,  2089,  2025, 25705,  3599,  2006, 13075, 13143,  5300,
         1007,  1012,  1996,  2682,  1011,  3855,  5468,  2003,  4997,  2005,
         1057,  1015,   102])"
797,0,[], Bowleys Skewness Measure,seg_189,2 (as the denominator,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  1016,  1006,  2004,  1996,  7939, 20936, 27413,   102])"
798,1,['skewness'], Bowleys Skewness Measure,seg_189,is −ve). it coincides with galton skewness measure for u = 3∕4. subtract and add f−1(1 − u) in the numerator and simplify to get the alternative form,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2003,  1597,  3726,  1007,  1012,  2009, 19680,  2015,  2007,
        14891,  2669, 15315,  7974,  2791,  5468,  2005,  1057,  1027,   100,
         1012,  4942,  6494,  6593,  1998,  5587,  1042, 27944,  1006,  1015,
         1597,  1057,  1007,  1999,  1996, 16371,  5017,  8844,  1998, 21934,
        28250,  2000,  2131,  1996,  4522,  2433,   102])"
799,1,['range'], Bowleys Skewness Measure,seg_189,example 4.2 range of values for bowley’s measure,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([ 101, 2742, 1018, 1012, 1016, 2846, 1997, 5300, 2005, 4605, 3240, 1521,
        1055, 5468,  102])"
800,1,"['interval', 'skewness']", Bowleys Skewness Measure,seg_189,"prove that bowley’s skewness measure lies in the interval [−1,+1].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  6011,  2008,  4605,  3240,  1521,  1055, 15315,  7974,  2791,
         5468,  3658,  1999,  1996, 13483,  1031,  1597,  2487,  1010,  1009,
         1015,  1033,  1012,   102])"
801,1,['skewed'], Bowleys Skewness Measure,seg_189,"solution 4.2 consider bs = (q3 + q1 − 2m)∕(q3 − q1). when m = q1 (highly positively skewed), the numerator simplifies as (q3 + q1 − 2 ∗ q1) = (q3 − q1). this cancels out with the denominator giving bs = 1. similarly when m = q3 (highly negatively skewed), the numerator becomes q1 − q3 = −(q3 − q1), giving bs = −1. add and subtract q1 in the denominator to get bs = (q3 + q1 − 2m)∕(q1 + q3 − 2q1). divide both the numerator and the denominator by 2 to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  5576,  1018,  1012,  1016,  5136, 18667,  1027,  1006,  1053,
         2509,  1009,  1053,  2487,  1597,  1016,  2213,  1007,   100,  1006,
         1053,  2509,  1597,  1053,  2487,  1007,  1012,  2043,  1049,  1027,
         1053,  2487,  1006,  3811, 13567, 15315,  7974,  2098,  1007,  1010,
         1996, 16371,  5017,  8844, 21934, 24759, 14144,  2004,  1006,  1053,
         2509,  1009,  1053,  2487,  1597,  1016,  1598,  1053,  2487,  1007,
         1027,  1006,  1053,  2509,  1597,  1053,  2487,  1007,  1012,  2023,
        17542,  2015,  2041,  2007,  1996,  7939, 20936, 27413,  3228, 18667,
         1027,  1015,  1012,  6660,  2043,  1049,  1027,  1053,  2509,  1006,
         3811, 19762, 15315,  7974,  2098,  1007,  1010,  1996, 16371,  5017,
         8844,  4150,  1053,  2487,  1597,  1053,  2509,  1027,  1597,  1006,
         1053,  2509,  1597,  1053,  2487,  1007,  1010,  3228, 18667,  1027,
         1597,  2487,  1012,  5587,  1998,  4942,  6494,  6593,  1053,  2487,
         1999,  1996,  7939, 20936, 27413,  2000,  2131, 18667,  1027,  1006,
         1053,  2509,  1009,  1053,  2487,  1597,  1016,  2213,  1007,   100,
         1006,  1053,  2487,  1009,  1053,  2509,  1597,  1016,  4160,  2487,
         1007,  1012, 11443,  2119,  1996, 16371,  5017,  8844,  1998,  1996,
         7939, 20936, 27413,  2011,  1016,  2000,  2131,   102])"
802,1,"['cases', 'mean', 'absolute value']", Bowleys Skewness Measure,seg_189,"as q1 ≤ q2 ≤ q3, the mean (q1 + q3)∕2 must lie in between them. hence, the absolute value of the numerator must be less than absolute value of the denominator. this means that |bs| 1 for all other cases. hence, bs ∈ [−1,+1].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2004,  1053,  2487,  1608,  1053,  2475,  1608,  1053,  2509,
         1010,  1996,  2812,  1006,  1053,  2487,  1009,  1053,  2509,  1007,
          100,  2442,  4682,  1999,  2090,  2068,  1012,  6516,  1010,  1996,
         7619,  3643,  1997,  1996, 16371,  5017,  8844,  2442,  2022,  2625,
         2084,  7619,  3643,  1997,  1996,  7939, 20936, 27413,  1012,  2023,
         2965,  2008,  1064, 18667,  1064,  1015,  2005,  2035,  2060,  3572,
         1012,  6516,  1010, 18667,  1596,  1031,  1597,  2487,  1010,  1009,
         1015,  1033,  1012,   102])"
803,1,['skewness'], Bowleys Skewness Measure,seg_189,example 4.3 bmi skewness calculation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2742,  1018,  1012,  1017,  1038,  4328, 15315,  7974,  2791,
        17208,   102])"
804,1,"['skewness coefficient', 'table', 'coefficient', 'skewness']", Bowleys Skewness Measure,seg_189,the bmi of 30 patients is given in first two columns of table 4.2. compute galton’s skewness coefficient.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  1996,  1038,  4328,  1997,  2382,  5022,  2003,  2445,  1999,
         2034,  2048,  7753,  1997,  2795,  1018,  1012,  1016,  1012, 24134,
        14891,  2669,  1521,  1055, 15315,  7974,  2791, 19064,  1012,   102])"
805,1,"['skewed', 'table', 'frequency', 'quartiles', 'limit', 'cumulative frequency', 'quartile', 'data']", Bowleys Skewness Measure,seg_189,"solution 4.3 here n = 30, so that n/4 = 7.5. hence, q1 is that value below which one-fourth of the data lie. from the sorted column (3), we find that the seventh and eighth values are both 23.3. hence q1 = 23.30. next, q3 is that value below which three-fourth of the data lie (or equivalently above which one-fourth of the data lie). from the last column, we see that eight patients have bmi ≥ 27.4 and there are seven patients with bmi ≥ 28.4. hence q3 = 27.9. if data are grouped using a class width of 3, we get table 4.3. using the formula for quartiles as qk = l + (n ∗ k∕4 − m) ∗ c∕f where n = 30, l = lower limit of quartile class, k = 1 for q1 and 3 for q3,m is the cumulative frequency up to (but excluding) quartile class, c is class width ( = 3) and f is the frequency of quartile class, we get q1 = 23.5 and q3 = 27.25. as m = 24.45, (q3 + q1 − 2m)∕(q3 − q1) = (50.75 − 48.9)∕3.75 = 0.4933, showing that the data are skewed to the right (table 4.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  5576,  1018,  1012,  1017,  2182,  1050,  1027,  2382,  1010,
         2061,  2008,  1050,  1013,  1018,  1027,  1021,  1012,  1019,  1012,
         6516,  1010,  1053,  2487,  2003,  2008,  3643,  2917,  2029,  2028,
         1011,  2959,  1997,  1996,  2951,  4682,  1012,  2013,  1996, 19616,
         5930,  1006,  1017,  1007,  1010,  2057,  2424,  2008,  1996,  5066,
         1998,  5964,  5300,  2024,  2119,  2603,  1012,  1017,  1012,  6516,
         1053,  2487,  1027,  2603,  1012,  2382,  1012,  2279,  1010,  1053,
         2509,  2003,  2008,  3643,  2917,  2029,  2093,  1011,  2959,  1997,
         1996,  2951,  4682,  1006,  2030,  5662,  2135,  2682,  2029,  2028,
         1011,  2959,  1997,  1996,  2951,  4682,  1007,  1012,  2013,  1996,
         2197,  5930,  1010,  2057,  2156,  2008,  2809,  5022,  2031,  1038,
         4328,  1609,  2676,  1012,  1018,  1998,  2045,  2024,  2698,  5022,
         2007,  1038,  4328,  1609,  2654,  1012,  1018,  1012,  6516,  1053,
         2509,  1027,  2676,  1012,  1023,  1012,  2065,  2951,  2024, 15131,
         2478,  1037,  2465,  9381,  1997,  1017,  1010,  2057,  2131,  2795,
         1018,  1012,  1017,  1012,  2478,  1996,  5675,  2005, 24209,  8445,
         9463,  2015,  2004,  1053,  2243,  1027,  1048,  1009,  1006,  1050,
         1598,   100,  1597,  1049,  1007,  1598,   100,  2073,  1050,  1027,
         2382,  1010,  1048,  1027,  2896,  5787,  1997, 24209,  8445,  9463,
         2465,  1010,  1047,  1027,  1015,  2005,  1053,  2487,  1998,  1017,
         2005,  1053,  2509,  1010,  1049,  2003,  1996, 23260,  6075,  2039,
         2000,  1006,  2021, 13343,  1007, 24209,  8445,  9463,  2465,  1010,
         1039,  2003,  2465,  9381,  1006,  1027,  1017,  1007,  1998,  1042,
         2003,  1996,  6075,  1997, 24209,  8445,  9463,  2465,  1010,  2057,
         2131,  1053,  2487,  1027,  2603,  1012,  1019,  1998,  1053,  2509,
         1027,  2676,  1012,  2423,  1012,  2004,  1049,  1027,  2484,  1012,
         3429,  1010,  1006,  1053,  2509,  1009,  1053,  2487,  1597,  1016,
         2213,  1007,   100,  1006,  1053,  2509,  1597,  1053,  2487,  1007,
         1027,  1006,  2753,  1012,  4293,  1597,  4466,  1012,  1023,  1007,
          100,  1012,  4293,  1027,  1014,  1012,  4749, 22394,  1010,  4760,
         2008,  1996,  2951,  2024, 15315,  7974,  2098,  2000,  1996,  2157,
         1006,  2795,  1018,  1012,  1018,  1007,  1012,   102])"
806,1,"['quantile', 'frequency', 'limit', 'cumulative frequency', 'quartile', 'data']", Bowleys Skewness Measure,seg_189,"as the kth quartile uses the lower limit of the class where qk falls, frequency of that class and cumulative frequency up to the class, there is no need to sort the complete data. fast methods exist to find any quantile when the data size is very large and one of them needs to be computed.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4605,  3240,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2004,  1996,  1047,  2705, 24209,  8445,  9463,  3594,  1996,
         2896,  5787,  1997,  1996,  2465,  2073,  1053,  2243,  4212,  1010,
         6075,  1997,  2008,  2465,  1998, 23260,  6075,  2039,  2000,  1996,
         2465,  1010,  2045,  2003,  2053,  2342,  2000,  4066,  1996,  3143,
         2951,  1012,  3435,  4725,  4839,  2000,  2424,  2151, 24110, 15286,
         2043,  1996,  2951,  2946,  2003,  2200,  2312,  1998,  2028,  1997,
         2068,  3791,  2000,  2022, 24806,  1012,   102])"
807,1,"['symmetric distributions', 'symmetric', 'location', 'populations', 'skewness', 'standard deviation', 'statistics', 'samples', 'data', 'skewed', 'deviation', 'skewed distributions', 'standard', 'range', 'distributions', 'sample', 'expected value', 'location measures']", Pearsons Skewness Measure,seg_191,"pearson’s measure of sample skewness was introduced in section 1. it is a ratiomeasure defined as = (xn − mode)∕sn. nearly, bell-shaped distributions satisfy an approximate relationship (x-mode) ∼ 3*(x-median). this allows us to express the above as = 3*(x-median)/s. this is more meaningful, as the mode of a sample need not be unique. as the numerator is the difference between two location measures, can be positive or negative. as it is divided by the standard deviation, it is unit-less. this measure returns 0 for symmetric distributions. it is 0 for negatively skewed distributions. the expected value of these statistics tends to zero when samples come from large symmetric populations. for most data, it will lie in the range (−3,+3).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101, 12874,  1521,  1055,  5468,  1997,  7099, 15315,  7974,  2791,
         2001,  3107,  1999,  2930,  1015,  1012,  2009,  2003,  1037,  6463,
         4168,  3022,  5397,  4225,  2004,  1027,  1006,  1060,  2078,  1597,
         5549,  1007,   100,  1012,  3053,  1010,  4330,  1011,  5044, 20611,
        13225,  2019, 15796,  3276,  1006,  1060,  1011,  5549,  1007,   100,
         1017,  1008,  1006,  1060,  1011,  3991,  1007,  1012,  2023,  4473,
         2149,  2000,  4671,  1996,  2682,  2004,  1027,  1017,  1008,  1006,
         1060,  1011,  3991,  1007,  1013,  1055,  1012,  2023,  2003,  2062,
        15902,  1010,  2004,  1996,  5549,  1997,  1037,  7099,  2342,  2025,
         2022,  4310,  1012,  2004,  1996, 16371,  5017,  8844,  2003,  1996,
         4489,  2090,  2048,  3295,  5761,  1010,  2064,  2022,  3893,  2030,
         4997,  1012,  2004,  2009,  2003,  4055,  2011,  1996,  3115, 24353,
         1010,  2009,  2003,  3131,  1011,  2625,  1012,  2023,  5468,  5651,
         1014,  2005, 19490, 20611,  1012,  2009,  2003,  1014,  2005, 19762,
        15315,  7974,  2098, 20611,  1012,  1996,  3517,  3643,  1997,  2122,
         6747, 12102,  2000,  5717,  2043,  8168,  2272,  2013,  2312, 19490,
         7080,  1012,  2005,  2087,  2951,  1010,  2009,  2097,  4682,  1999,
         1996,  2846,  1006,  1597,  2509,  1010,  1009,  1017,  1007,  1012,
          102])"
808,0,[], Pearsons Skewness Measure,seg_191,"pearson’s   = (x − mode)∕s ≃ 3 ∗ (x − median)∕s ∈ (−3,+3). (4.6)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101, 12874,  1521,  1055,  1027,  1006,  1060,  1597,  5549,  1007,
          100,   100,  1017,  1598,  1006,  1060,  1597,  3991,  1007,   100,
         1596,  1006,  1597,  2509,  1010,  1009,  1017,  1007,  1012,  1006,
         1018,  1012,  1020,  1007,   102])"
809,1,"['normalized', 'moment', 'skewness', 'random variable', 'random', 'variable']", Pearsons Skewness Measure,seg_191,pearson also suggested another measure of skewness in terms of third moment of a unit normalized random variable as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 1., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101, 12874,  2036,  4081,  2178,  5468,  1997, 15315,  7974,  2791,
         1999,  3408,  1997,  2353,  2617,  1997,  1037,  3131,  3671,  3550,
         6721,  8023,  2004,   102])"
810,1,"['tail', 'standard normal', 'skewness', 'moments', 'normal', 'standard']", Pearsons Skewness Measure,seg_191,"this can be expressed in terms of moments as 3∕ 3. as the standard normal distribution has skewness zero, positive values of skewness indicates a flat right tail and vice versa. its square 1 = 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2023,  2064,  2022,  5228,  1999,  3408,  1997,  5312,  2004,
          100,  1017,  1012,  2004,  1996,  3115,  3671,  4353,  2038, 15315,
         7974,  2791,  5717,  1010,  3893,  5300,  1997, 15315,  7974,  2791,
         7127,  1037,  4257,  2157,  5725,  1998,  3580, 18601,  1012,  2049,
         2675,  1015,  1027,  1015,   102])"
811,1,"['unimodal', 'symmetric distributions', 'distributions', 'moments', 'expected value', 'symmetric']", Pearsons Skewness Measure,seg_191,"2 is sometimes used, under the assumption of the existence of finite second and third moments. as the numerator contains a centralized measure (with expected value zero for symmetric distributions), this measure is location invariant for unimodal distributions. as the denominator contains quantities in the same unit, it is unit-less. as the orders of the numerator and the denominator are the same, the measure is scale invariant too.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  1016,  2003,  2823,  2109,  1010,  2104,  1996, 11213,  1997,
         1996,  4598,  1997, 10713,  2117,  1998,  2353,  5312,  1012,  2004,
         1996, 16371,  5017,  8844,  3397,  1037, 22493,  5468,  1006,  2007,
         3517,  3643,  5717,  2005, 19490, 20611,  1007,  1010,  2023,  5468,
         2003,  3295, 23915,  2005,  4895, 16339,  9305, 20611,  1012,  2004,
         1996,  7939, 20936, 27413,  3397, 12450,  1999,  1996,  2168,  3131,
         1010,  2009,  2003,  3131,  1011,  2625,  1012,  2004,  1996,  4449,
         1997,  1996, 16371,  5017,  8844,  1998,  1996,  7939, 20936, 27413,
         2024,  1996,  2168,  1010,  1996,  5468,  2003,  4094, 23915,  2205,
         1012,   102])"
812,1,['skewness'], Pearsons Skewness Measure,seg_191,example 4.4 pearson’s skewness calculation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  2742,  1018,  1012,  1018, 12874,  1521,  1055, 15315,  7974,
         2791, 17208,   102])"
813,1,"['table', 'skewness', 'data']", Pearsons Skewness Measure,seg_191,compute pearson’s skewness for the data in table 4.2.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101, 24134, 12874,  1521,  1055, 15315,  7974,  2791,  2005,  1996,
         2951,  1999,  2795,  1018,  1012,  1016,  1012,   102])"
814,1,"['skewed', 'data', 'median']", Pearsons Skewness Measure,seg_191,"solution 4.4 we find x = 25.49667, and s = 3.4455852, median m = 24.45. substitute these values to get   = 3 ∗ (25.49667 − 24.45)∕3.44558 = 3.14∕3.44558 = 0.9113, showing that the data are skewed to the right.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  5576,  1018,  1012,  1018,  2057,  2424,  1060,  1027,  2423,
         1012,  4749, 28756,  2581,  1010,  1998,  1055,  1027,  1017,  1012,
         4008, 24087, 27531,  2475,  1010,  3991,  1049,  1027,  2484,  1012,
         3429,  1012,  7681,  2122,  5300,  2000,  2131,  1027,  1017,  1598,
         1006,  2423,  1012,  4749, 28756,  2581,  1597,  2484,  1012,  3429,
         1007,   100,  1012,  4008, 24087,  2620,  1027,  1017,  1012,   100,
         1012,  4008, 24087,  2620,  1027,  1014,  1012, 19989,  2509,  1010,
         4760,  2008,  1996,  2951,  2024, 15315,  7974,  2098,  2000,  1996,
         2157,  1012,   102])"
815,1,['distribution'], Pearsons Skewness Measure,seg_191,example 4.5 is marks distribution bell-shaped?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([ 101, 2742, 1018, 1012, 1019, 2003, 6017, 4353, 4330, 1011, 5044, 1029,
         102])"
816,1,"['mean', 'deviation', 'skewed', 'symmetric', 'standard deviation', 'standard', 'distribution', 'median']", Pearsons Skewness Measure,seg_191,"the marks obtained by students in an exam have mean 70 and median 72, with a standard deviation of 8. is the distribution of marks symmetric? if not, is it skewed to the left or right?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  1996,  6017,  4663,  2011,  2493,  1999,  2019, 11360,  2031,
         2812,  3963,  1998,  3991,  5824,  1010,  2007,  1037,  3115, 24353,
         1997,  1022,  1012,  2003,  1996,  4353,  1997,  6017, 19490,  1029,
         2065,  2025,  1010,  2003,  2009, 15315,  7974,  2098,  2000,  1996,
         2187,  2030,  2157,  1029,   102])"
817,1,"['skewed', 'skewness', 'distribution', 'asymmetric']", Pearsons Skewness Measure,seg_191,"solution 4.5 we find pearson’s measure of skewness as   = 3*(x-median)/s = 3*(70 − 72)/8 = −6∕8 = −0.75. as this is  0, the distribution is asymmetric and is negatively skewed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        1., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  5576,  1018,  1012,  1019,  2057,  2424, 12874,  1521,  1055,
         5468,  1997, 15315,  7974,  2791,  2004,  1027,  1017,  1008,  1006,
         1060,  1011,  3991,  1007,  1013,  1055,  1027,  1017,  1008,  1006,
         3963,  1597,  5824,  1007,  1013,  1022,  1027,   100,  1027,  1597,
         2692,  1012,  4293,  1012,  2004,  2023,  2003,  1014,  1010,  1996,
         4353,  2003,  2004, 24335, 12589,  1998,  2003, 19762, 15315,  7974,
         2098,  1012,   102])"
818,1,"['vary', 'sample statistics', 'coefficient', 'population', 'populations', 'skewness', 'sampling', 'statistics', 'samples', 'test', 'unimodal', 'distributions', 'sample', 'distribution', 'expected value']", Pearsons Skewness Measure,seg_191,"a skewness measure can be used to compare two samples drawn from distinct populations. however, as the sample statistics vary in repeated sampling from the same population, these comparisons are often vague. for example, pearson’s coefficient has expected value (chapter 8) zero for unimodal distributions. suppose we take repeated samples from a uniform or u-shaped distribution. the coefficient will vary widely in these situations (because the mode is not well defined for uniform distributions, and there are two modes for u-shaped distributions). see reference 58 for a discussion on a quadratic-mean based skewness test.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  1037, 15315,  7974,  2791,  5468,  2064,  2022,  2109,  2000,
        12826,  2048,  8168,  4567,  2013,  5664,  7080,  1012,  2174,  1010,
         2004,  1996,  7099,  6747,  8137,  1999,  5567, 16227,  2013,  1996,
         2168,  2313,  1010,  2122, 18539,  2024,  2411, 13727,  1012,  2005,
         2742,  1010, 12874,  1521,  1055, 19064,  2038,  3517,  3643,  1006,
         3127,  1022,  1007,  5717,  2005,  4895, 16339,  9305, 20611,  1012,
         6814,  2057,  2202,  5567,  8168,  2013,  1037,  6375,  2030,  1057,
         1011,  5044,  4353,  1012,  1996, 19064,  2097,  8137,  4235,  1999,
         2122,  8146,  1006,  2138,  1996,  5549,  2003,  2025,  2092,  4225,
         2005,  6375, 20611,  1010,  1998,  2045,  2024,  2048, 11583,  2005,
         1057,  1011,  5044, 20611,  1007,  1012,  2156,  4431,  5388,  2005,
         1037,  6594,  2006,  1037, 17718, 23671,  1011,  2812,  2241, 15315,
         7974,  2791,  3231,  1012,   102])"
819,1,"['probability', 'symmetry', 'skewness', 'distributions', 'population', 'densities', 'transformation', 'asymmetric']", Pearsons Skewness Measure,seg_191,"the concept can be extended to population densities with intent to order them based on a skewness measure. one notable contribution is by van zwet [59], who defines a partial-order among probability laws with cumulative distributions f and g as f≤sg iff g−1(f(x)) is convex for x ≥ k (or equivalently f−1(g(x)) is concave), where k is the common point of symmetry of the distributions. this allows one to compare those distributions, the inverse of at least one of which exists. symmetric distributions can be converted into asymmetric ones using the transformation f (x, ) = 2g(x)g( ) where ∈ ℝ, and g() denotes the cdf [60, 61].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12874,  2015, 15315,  7974,  2791,  5468])","tensor([  101,  1996,  4145,  2064,  2022,  3668,  2000,  2313,  7939, 24279,
         2007,  7848,  2000,  2344,  2068,  2241,  2006,  1037, 15315,  7974,
         2791,  5468,  1012,  2028,  3862,  6691,  2003,  2011,  3158,  1062,
         8545,  2102,  1031,  5354,  1033,  1010,  2040, 11859,  1037,  7704,
         1011,  2344,  2426,  9723,  4277,  2007, 23260, 20611,  1042,  1998,
         1043,  2004,  1042, 30135, 28745,  2065,  2546,  1043, 27944,  1006,
         1042,  1006,  1060,  1007,  1007,  2003, 18309,  2005,  1060,  1609,
         1047,  1006,  2030,  5662,  2135,  1042, 27944,  1006,  1043,  1006,
         1060,  1007,  1007,  2003,  9530, 27454,  1007,  1010,  2073,  1047,
         2003,  1996,  2691,  2391,  1997, 14991,  1997,  1996, 20611,  1012,
         2023,  4473,  2028,  2000, 12826,  2216, 20611,  1010,  1996, 19262,
         1997,  2012,  2560,  2028,  1997,  2029,  6526,  1012, 19490, 20611,
         2064,  2022,  4991,  2046,  2004, 24335, 12589,  3924,  2478,  1996,
         8651,  1042,  1006,  1060,  1010,  1007,  1027,  1016,  2290,  1006,
         1060,  1007,  1043,  1006,  1007,  2073,  1596,  1579,  1010,  1998,
         1043,  1006,  1007, 14796,  1996,  3729,  2546,  1031,  3438,  1010,
         6079,  1033,  1012,   102])"
820,1,"['deviation', 'quartile deviation', 'third quartile', 'coefficient', 'quartile']", Coefficient of Quartile Deviation,seg_193,the coefficient of quartile deviation exclusively uses the first and third quartile,tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([19064,  1997, 24209,  8445,  9463, 24353])","tensor([  101,  1996, 19064,  1997, 24209,  8445,  9463, 24353,  7580,  3594,
         1996,  2034,  1998,  2353, 24209,  8445,  9463,   102])"
821,1,"['range', 'linear', 'ratio measure', 'median']", Coefficient of Quartile Deviation,seg_193,"while bowley’s measure uses the median, cqd does not depend on the median. hence, it is less informative. as the numerator and denominator are both linear in qi and measured in the same units, cqd is a unit-less ratio measure with finite range. it is always positive as both the numerator and the denominator are positive.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19064,  1997, 24209,  8445,  9463, 24353])","tensor([  101,  2096,  4605,  3240,  1521,  1055,  5468,  3594,  1996,  3991,
         1010,  1039,  4160,  2094,  2515,  2025, 12530,  2006,  1996,  3991,
         1012,  6516,  1010,  2009,  2003,  2625, 12367,  8082,  1012,  2004,
         1996, 16371,  5017,  8844,  1998,  7939, 20936, 27413,  2024,  2119,
         7399,  1999, 18816,  1998,  7594,  1999,  1996,  2168,  3197,  1010,
         1039,  4160,  2094,  2003,  1037,  3131,  1011,  2625,  6463,  5468,
         2007, 10713,  2846,  1012,  2009,  2003,  2467,  3893,  2004,  2119,
         1996, 16371,  5017,  8844,  1998,  1996,  7939, 20936, 27413,  2024,
         3893,  1012,   102])"
822,1,['range'], Coefficient of Quartile Deviation,seg_193,example 4.6 range of values for cqd,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([19064,  1997, 24209,  8445,  9463, 24353])","tensor([ 101, 2742, 1018, 1012, 1020, 2846, 1997, 5300, 2005, 1039, 4160, 2094,
         102])"
823,1,"['third quartile', 'quartile']", Coefficient of Quartile Deviation,seg_193,solution 4.6 add and subtract q1 in the numerator to get (q3 + q1 − 2q1). combine the first two terms with the denominator and write the third terms separately. then cqd = 1 − 2q1∕(q1 + q3). because q3 (being the third quartile),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0.])","tensor([19064,  1997, 24209,  8445,  9463, 24353])","tensor([  101,  5576,  1018,  1012,  1020,  5587,  1998,  4942,  6494,  6593,
         1053,  2487,  1999,  1996, 16371,  5017,  8844,  2000,  2131,  1006,
         1053,  2509,  1009,  1053,  2487,  1597,  1016,  4160,  2487,  1007,
         1012, 11506,  1996,  2034,  2048,  3408,  2007,  1996,  7939, 20936,
        27413,  1998,  4339,  1996,  2353,  3408, 10329,  1012,  2059,  1039,
         4160,  2094,  1027,  1015,  1597,   100,  1006,  1053,  2487,  1009,
         1053,  2509,  1007,  1012,  2138,  1053,  2509,  1006,  2108,  1996,
         2353, 24209,  8445,  9463,  1007,   102])"
824,1,"['table', 'data', 'range']", Coefficient of Quartile Deviation,seg_193,"divides the entire data in 75%:25% ratio, it is always greater than q1. thus, the ratio q1∕(q1 + q3) is always in the range (0,.5). substituting 0 shows that cqd is always less than 1. substituting 0.5 shows that cqd is greater than zero (see table 4.3). hence cqd ∈ (0,1).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([19064,  1997, 24209,  8445,  9463, 24353])","tensor([  101, 20487,  1996,  2972,  2951,  1999,  4293,  1003,  1024,  2423,
         1003,  6463,  1010,  2009,  2003,  2467,  3618,  2084,  1053,  2487,
         1012,  2947,  1010,  1996,  6463,   100,  1006,  1053,  2487,  1009,
         1053,  2509,  1007,  2003,  2467,  1999,  1996,  2846,  1006,  1014,
         1010,  1012,  1019,  1007,  1012,  4942, 21532,  1014,  3065,  2008,
         1039,  4160,  2094,  2003,  2467,  2625,  2084,  1015,  1012,  4942,
        21532,  1014,  1012,  1019,  3065,  2008,  1039,  4160,  2094,  2003,
         3618,  2084,  5717,  1006,  2156,  2795,  1018,  1012,  1017,  1007,
         1012,  6516,  1039,  4160,  2094,  1596,  1006,  1014,  1010,  1015,
         1007,  1012,   102])"
825,1,"['symmetry', 'skewness', 'distributions', 'inverse gaussian', 'moments', 'distribution']", Other Skewness Measures,seg_195,"the concept of symmetry has been defined in terms of density or distribution functions in the above-mentioned discussions. kelly’s measure of skewness uses deciles and is defined as (d1 + d9 − 2d5)∕(d9 − d1). the inverse gaussian (ig)-symmetry is an analog that utilizes equality of positive and negative moments. for the ig( , ) law (chapter 7, pp. 7–64), it is easy to verify that e(x∕ )−r = e(x∕ )r+1, where negative index denotes inverse moments. the negative moments are defined only when f (x) = 0 for x = 0. this property is also satisfied by the log-normal law and scale mixtures of ig distributions [62].",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([ 2060, 15315,  7974,  2791,  5761])","tensor([  101,  1996,  4145,  1997, 14991,  2038,  2042,  4225,  1999,  3408,
         1997,  4304,  2030,  4353,  4972,  1999,  1996,  2682,  1011,  3855,
        10287,  1012,  5163,  1521,  1055,  5468,  1997, 15315,  7974,  2791,
         3594, 11703,  9463,  2015,  1998,  2003,  4225,  2004,  1006,  1040,
         2487,  1009,  1040,  2683,  1597, 14134,  2629,  1007,   100,  1006,
         1040,  2683,  1597,  1040,  2487,  1007,  1012,  1996, 19262, 11721,
        17854,  2937,  1006,  1045,  2290,  1007,  1011, 14991,  2003,  2019,
        11698,  2008, 21852,  9945,  1997,  3893,  1998,  4997,  5312,  1012,
         2005,  1996,  1045,  2290,  1006,  1010,  1007,  2375,  1006,  3127,
         1021,  1010,  4903,  1012,  1021,  1516,  4185,  1007,  1010,  2009,
         2003,  3733,  2000, 20410,  2008,  1041,  1006,   100,  1007,  1597,
         2099,  1027,  1041,  1006,   100,  1007,  1054,  1009,  1015,  1010,
         2073,  4997,  5950, 14796, 19262,  5312,  1012,  1996,  4997,  5312,
         2024,  4225,  2069,  2043,  1042,  1006,  1060,  1007,  1027,  1014,
         2005,  1060,  1027,  1014,  1012,  2023,  3200,  2003,  2036,  8510,
         2011,  1996,  8833,  1011,  3671,  2375,  1998,  4094,  8150,  2015,
         1997,  1045,  2290, 20611,  1031,  5786,  1033,  1012,   102])"
826,1,"['unbiased', 'skewness', 'biased', 'estimator', 'population', 'unbiased estimator', 'expected value']", Other Skewness Measures,seg_195,the skewness measure defined earlier is biased. an unbiased estimator can be obtained by differently scaling it to have an expected value exactly equal to the population skewness. this is why some software packages use n∕[(n − 1)(n − 2)] ∑j[(xj − x)∕s]3 (for n ≥ 3) as a measure of skewness. see reference 63 for a comparison of skewness measures.,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0.])","tensor([ 2060, 15315,  7974,  2791,  5761])","tensor([  101,  1996, 15315,  7974,  2791,  5468,  4225,  3041,  2003, 25352,
         1012,  2019,  4895, 11607,  6924,  9765,  9581,  4263,  2064,  2022,
         4663,  2011, 11543, 25169,  2009,  2000,  2031,  2019,  3517,  3643,
         3599,  5020,  2000,  1996,  2313, 15315,  7974,  2791,  1012,  2023,
         2003,  2339,  2070,  4007, 14555,  2224,   100,  1031,  1006,  1050,
         1597,  1015,  1007,  1006,  1050,  1597,  1016,  1007,  1033,   100,
         1031,  1006,  1060,  3501,  1597,  1060,  1007,   100,  1033,  1017,
         1006,  2005,  1050,  1609,  1017,  1007,  2004,  1037,  5468,  1997,
        15315,  7974,  2791,  1012,  2156,  4431,  6191,  2005,  1037,  7831,
         1997, 15315,  7974,  2791,  5761,  1012,   102])"
827,1,"['skewed', 'pearson', 'leptokurtic', 'symmetric', 'unimodal', 'standard normal', 'distributions', 'normal', 'standard', 'distribution', 'kurtosis', 'multimodal', 'data', 'discrete']", CONCEPT OF KURTOSIS,seg_197,"kurtosis originated in data analysis. some data distributions are more peaked than the standard normal law, whereas some others are less peaked. this prompted pearson (1905) to classify distributions as leptokurtic, mesokurtic, and platykurtic. kurtosis was originally defined using the standard normal law as a yardstick. a data distribution that has the same kurtosis as n(0, 1) is called mesokurtic. those with higher kurtosis is called leptokurtic and with lower values is called platykurtic. they are applicable to discrete and truncated data, skewed, and symmetric data that are continuous. they are more meaningful to unimodal data than rectangular data. they are less meaningful to u-shaped and other multimodal data.",tensor(1),"tensor([0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0.])","tensor([ 4145,  1997,  9679, 12650])","tensor([  101,  9679, 12650,  7940,  1999,  2951,  4106,  1012,  2070,  2951,
        20611,  2024,  2062,  6601,  2084,  1996,  3115,  3671,  2375,  1010,
         6168,  2070,  2500,  2024,  2625,  6601,  1012,  2023,  9469, 12874,
         1006,  5497,  1007,  2000, 26268, 20611,  2004,  3393, 13876, 21940,
        28228,  2278,  1010,  2033,  6499, 18569,  4588,  1010,  1998, 20228,
         4017, 15922, 19585,  2594,  1012,  9679, 12650,  2001,  2761,  4225,
         2478,  1996,  3115,  3671,  2375,  2004,  1037,  4210, 26348,  1012,
         1037,  2951,  4353,  2008,  2038,  1996,  2168,  9679, 12650,  2004,
         1050,  1006,  1014,  1010,  1015,  1007,  2003,  2170,  2033,  6499,
        18569,  4588,  1012,  2216,  2007,  3020,  9679, 12650,  2003,  2170,
         3393, 13876, 21940, 28228,  2278,  1998,  2007,  2896,  5300,  2003,
         2170, 20228,  4017, 15922, 19585,  2594,  1012,  2027,  2024, 12711,
         2000, 16246,  1998, 25449,  2951,  1010, 15315,  7974,  2098,  1010,
         1998, 19490,  2951,  2008,  2024,  7142,  1012,  2027,  2024,  2062,
        15902,  2000,  4895, 16339,  9305,  2951,  2084, 10806,  2951,  1012,
         2027,  2024,  2625, 15902,  2000,  1057,  1011,  5044,  1998,  2060,
         4800,  5302,  9305,  2951,  1012,   102])"
828,1,"['location', 'tail', 'probability', 'location measure', 'distribution', 'jointly', 'kurtosis']", CONCEPT OF KURTOSIS,seg_197,definition 4.3 kurtosis is a measure of both the peakedness of the distribution in and around the location measure (center of mass) and a measure of the tail weights that jointly characterize the accumulation of probability mass toward the center [64].,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4145,  1997,  9679, 12650])","tensor([  101,  6210,  1018,  1012,  1017,  9679, 12650,  2003,  1037,  5468,
         1997,  2119,  1996,  6601,  2791,  1997,  1996,  4353,  1999,  1998,
         2105,  1996,  3295,  5468,  1006,  2415,  1997,  3742,  1007,  1998,
         1037,  5468,  1997,  1996,  5725, 15871,  2008, 10776,  2839,  4697,
         1996, 20299,  1997,  9723,  3742,  2646,  1996,  2415,  1031,  4185,
         1033,  1012,   102])"
829,1,"['sample', 'population', 'kurtosis', 'case']", CONCEPT OF KURTOSIS,seg_197,the population analogs are denoted by greek letters and their sample counterparts by lower case english letters by convention. pearson’s kurtosis measure for the population is denoted by 2 and sample counterpart by b2 (or b2(n)).,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4145,  1997,  9679, 12650])","tensor([  101,  1996,  2313, 11698,  2015,  2024, 19537,  2011,  3306,  4144,
         1998,  2037,  7099, 14562,  2011,  2896,  2553,  2394,  4144,  2011,
         4680,  1012, 12874,  1521,  1055,  9679, 12650,  5468,  2005,  1996,
         2313,  2003, 19537,  2011,  1016,  1998,  7099, 13637,  2011,  1038,
         2475,  1006,  2030,  1038,  2475,  1006,  1050,  1007,  1007,  1012,
          102])"
830,1,"['unimodal', 'frequency', 'distributions', 'distribution', 'kurtosis']", An Interpretation of Kurtosis,seg_199,pearson’s definition of kurtosis confines itself to unimodal distributions. it emphasizes the overall frequency at or around the central part (mode) of a distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101, 12874,  1521,  1055,  6210,  1997,  9679, 12650, 25722,  2993,
         2000,  4895, 16339,  9305, 20611,  1012,  2009, 20618,  1996,  3452,
         6075,  2012,  2030,  2105,  1996,  2430,  2112,  1006,  5549,  1007,
         1997,  1037,  4353,  1012,   102])"
831,1,"['absolute value', 'exponential distribution', 'leptokurtic', 'tails', 'poisson', 'normal', 'poisson distribution', 'standard error', 'data', 'parameter', 'probability', 'results', 'standard', 'kurtosis', 'parameters', 'tail', 'distributions', 'sample', 'distribution', 'exponential', 'error']", An Interpretation of Kurtosis,seg_199,"as theoretical distributions can take a variety of shapes depending on the parameter values, this “central part” may move to the extremes for some parameters. one example is the exponential distribution c ∗ exp (−c x) or the poisson distribution with very small values (say 0.10) that tails off slowly to the right (the left tail of these distributions are either very short or nonexistent). kurtosis is defined for these distributions too. such distributions are not kurtosis comparable with others that tails off in both directions. the classical kurtosis measures how much of the probability mass is moved from the shoulders (say within ± 2 to ± 3 ) of a normal law to the center that results in an identical leptokurtic distribution or vice versa (how much mass is moved from the central part (say from ± ) to the regions beyond, so as to get a platykurtic distribution). to quantify the amount of kurtosis, we could consider the sek and measure the departure from twice the standard error. an approximate sek for a sample of size n is √24∕n (see reference 49. if 2*sek absolute value of kurtosis, we may reasonably conclude that the data are from a non-platykurtic distribution. the above-mentioned interpretation of kurtosis can be refined, resulting in a new interpretation in terms of both the tailing off behavior combined with the peakedness simultaneously [65]–[70].",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  2004,  9373, 20611,  2064,  2202,  1037,  3528,  1997, 10466,
         5834,  2006,  1996, 16381,  5300,  1010,  2023,  1523,  2430,  2112,
         1524,  2089,  2693,  2000,  1996, 28800,  2005,  2070, 11709,  1012,
         2028,  2742,  2003,  1996, 27258,  4353,  1039,  1598,  4654,  2361,
         1006,  1597,  2278,  1060,  1007,  2030,  1996, 13433, 24077,  4353,
         2007,  2200,  2235,  5300,  1006,  2360,  1014,  1012,  2184,  1007,
         2008, 17448,  2125,  3254,  2000,  1996,  2157,  1006,  1996,  2187,
         5725,  1997,  2122, 20611,  2024,  2593,  2200,  2460,  2030,  3904,
         9048, 16173,  2102,  1007,  1012,  9679, 12650,  2003,  4225,  2005,
         2122, 20611,  2205,  1012,  2107, 20611,  2024,  2025,  9679, 12650,
        12435,  2007,  2500,  2008, 17448,  2125,  1999,  2119,  7826,  1012,
         1996,  4556,  9679, 12650,  5761,  2129,  2172,  1997,  1996,  9723,
         3742,  2003,  2333,  2013,  1996,  4065,  1006,  2360,  2306,  1081,
         1016,  2000,  1081,  1017,  1007,  1997,  1037,  3671,  2375,  2000,
         1996,  2415,  2008,  3463,  1999,  2019,  7235,  3393, 13876, 21940,
        28228,  2278,  4353,  2030,  3580, 18601,  1006,  2129,  2172,  3742,
         2003,  2333,  2013,  1996,  2430,  2112,  1006,  2360,  2013,  1081,
         1007,  2000,  1996,  4655,  3458,  1010,  2061,  2004,  2000,  2131,
         1037, 20228,  4017, 15922, 19585,  2594,  4353,  1007,  1012,  2000,
        24110, 27351,  1996,  3815,  1997,  9679, 12650,  1010,  2057,  2071,
         5136,  1996,  7367,  2243,  1998,  5468,  1996,  6712,  2013,  3807,
         1996,  3115,  7561,  1012,  2019, 15796,  7367,  2243,  2005,  1037,
         7099,  1997,  2946,  1050,  2003,   100,  1006,  2156,  4431,  4749,
         1012,  2065,  1016,  1008,  7367,  2243,  7619,  3643,  1997,  9679,
        12650,  1010,  2057,  2089, 16286, 16519,  2008,  1996,  2951,  2024,
         2013,  1037,  2512,  1011, 20228,  4017, 15922, 19585,  2594,  4353,
         1012,  1996,  2682,  1011,  3855,  7613,  1997,  9679, 12650,  2064,
         2022, 15514,  1010,  4525,  1999,  1037,  2047,  7613,  1999,  3408,
         1997,  2119,  1996,  5725,  2075,  2125,  5248,  4117,  2007,  1996,
         6601,  2791,  7453,  1031,  3515,  1033,  1516,  1031,  3963,  1033,
         1012,   102])"
832,1,"['asymptotic', 'convergence', 'random variable', 'normal', 'second moment', 'function', 'moment', 'standard', 'sample variance', 'kurtosis', 'variance', 'standard normal', 'sample', 'random', 'sample size', 'distribution', 'variable']", An Interpretation of Kurtosis,seg_199,"as the variance is a quadratic function of the random variable (for a population) or a quadratic function of the sample values (for s2), its second moment has power 4 (it is a biquadratic or quadratic of the random variable or sample values). in other words, the variance of the sample variance must be a function of pearson’s 2 (var(s2)/e[s2]2 = 2 − 1 asymptotically). as mentioned earlier, the variance is measured in the same unit as the sample values, whereas the kurtosis is a unit-less measure. if the sample size is large, it is known that √n(s2 − 2) → n(0, ( 2 − 1) 4), which is interpreted as convergence in distribution. as 2 = 3 for the standard normal law, the asymptotic convergence is to n(0, 2). in addition,√n(log (s2) − log ( 2)) → n(0, ( 2 − 1)) using mann–wald theorem [62]. it is well known that ns2∕ 2 is distributed as n",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  2004,  1996, 23284,  2003,  1037, 17718, 23671,  3853,  1997,
         1996,  6721,  8023,  1006,  2005,  1037,  2313,  1007,  2030,  1037,
        17718, 23671,  3853,  1997,  1996,  7099,  5300,  1006,  2005,  1055,
         2475,  1007,  1010,  2049,  2117,  2617,  2038,  2373,  1018,  1006,
         2009,  2003,  1037, 12170, 16211,  7265,  4588,  2030, 17718, 23671,
         1997,  1996,  6721,  8023,  2030,  7099,  5300,  1007,  1012,  1999,
         2060,  2616,  1010,  1996, 23284,  1997,  1996,  7099, 23284,  2442,
         2022,  1037,  3853,  1997, 12874,  1521,  1055,  1016,  1006, 13075,
         1006,  1055,  2475,  1007,  1013,  1041,  1031,  1055,  2475,  1033,
         1016,  1027,  1016,  1597,  1015,  2004, 24335, 13876, 20214,  3973,
         1007,  1012,  2004,  3855,  3041,  1010,  1996, 23284,  2003,  7594,
         1999,  1996,  2168,  3131,  2004,  1996,  7099,  5300,  1010,  6168,
         1996,  9679, 12650,  2003,  1037,  3131,  1011,  2625,  5468,  1012,
         2065,  1996,  7099,  2946,  2003,  2312,  1010,  2009,  2003,  2124,
         2008,  1600,  2078,  1006,  1055,  2475,  1597,  1016,  1007,  1585,
         1050,  1006,  1014,  1010,  1006,  1016,  1597,  1015,  1007,  1018,
         1007,  1010,  2029,  2003, 10009,  2004, 19143,  1999,  4353,  1012,
         2004,  1016,  1027,  1017,  2005,  1996,  3115,  3671,  2375,  1010,
         1996,  2004, 24335, 13876, 20214, 19143,  2003,  2000,  1050,  1006,
         1014,  1010,  1016,  1007,  1012,  1999,  2804,  1010,  1600,  2078,
         1006,  8833,  1006,  1055,  2475,  1007,  1597,  8833,  1006,  1016,
         1007,  1007,  1585,  1050,  1006,  1014,  1010,  1006,  1016,  1597,
         1015,  1007,  1007,  2478, 10856,  1516, 24547,  2094,  9872,  1031,
         5786,  1033,  1012,  2009,  2003,  2092,  2124,  2008,   100,  1016,
         2003,  5500,  2004,  1050,   102])"
833,1,"['samples', 'normal', 'population', 'kurtosis']", An Interpretation of Kurtosis,seg_199,"2 −1 when samples come from a normal population, so that e(ns2∕ 2)2 ≃ 2(n − 1). this result is used in some of the kurtosis measures defined in the following discussion.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  1016,  1597,  2487,  2043,  8168,  2272,  2013,  1037,  3671,
         2313,  1010,  2061,  2008,  1041,  1006,   100,  1016,  1007,  1016,
          100,  1016,  1006,  1050,  1597,  1015,  1007,  1012,  2023,  2765,
         2003,  2109,  1999,  2070,  1997,  1996,  9679, 12650,  5761,  4225,
         1999,  1996,  2206,  6594,  1012,   102])"
834,1,"['binomial distribution', 'binomial', 'distribution']", An Interpretation of Kurtosis,seg_199,example 4.7 when is binomial distribution mesokurtic?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  2742,  1018,  1012,  1021,  2043,  2003,  8026, 20936,  2389,
         4353,  2033,  6499, 18569,  4588,  1029,   102])"
835,1,"['binomial distribution', 'binomial', 'distribution']", An Interpretation of Kurtosis,seg_199,prove that the binomial distribution is mesokurtic when p = 2 1 ( 1 ± √,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  6011,  2008,  1996,  8026, 20936,  2389,  4353,  2003,  2033,
         6499, 18569,  4588,  2043,  1052,  1027,  1016,  1015,  1006,  1015,
         1081,  1600,   102])"
836,1,"['coefficient', 'distributions', 'distribution', 'kurtosis', 'binomial', 'binomial distribution']", An Interpretation of Kurtosis,seg_199,"solution 4.7 the coefficient of kurtosis of binomial distribution is  2 = 3 + (1 − 6pq)∕npq (chapter 6). for mesokurtic distributions,  2 = 3. this means that (1 − 6pq)∕npq = 0. as the denominator is always positive, this expression is zero when pq = 1∕6. write this as p(1 − p) − 1∕6 = 0 or equiv-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  5576,  1018,  1012,  1021,  1996, 19064,  1997,  9679, 12650,
         1997,  8026, 20936,  2389,  4353,  2003,  1016,  1027,  1017,  1009,
         1006,  1015,  1597,  1020,  2361,  4160,  1007,   100,  1006,  3127,
         1020,  1007,  1012,  2005,  2033,  6499, 18569,  4588, 20611,  1010,
         1016,  1027,  1017,  1012,  2023,  2965,  2008,  1006,  1015,  1597,
         1020,  2361,  4160,  1007,   100,  1027,  1014,  1012,  2004,  1996,
         7939, 20936, 27413,  2003,  2467,  3893,  1010,  2023,  3670,  2003,
         5717,  2043,  1052,  4160,  1027,   100,  1012,  4339,  2023,  2004,
         1052,  1006,  1015,  1597,  1052,  1007,  1597,   100,  1027,  1014,
         2030,  1041, 15549,  2615,  1011,   102])"
837,0,[], An Interpretation of Kurtosis,seg_199,3 . consider the,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([ 101, 1017, 1012, 5136, 1996,  102])"
838,0,[], An Interpretation of Kurtosis,seg_199,3 second expression . multiply numerator and denominator by √ 3 and 6 cancel out 3 to get 1∕2√ 3. substitute in the aforementioned and take (1/2),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  1017,  2117,  3670,  1012,  4800, 22086, 16371,  5017,  8844,
         1998,  7939, 20936, 27413,  2011,  1600,  1017,  1998,  1020, 17542,
         2041,  1017,  2000,  2131,   100,  1017,  1012,  7681,  1999,  1996,
        17289,  1998,  2202,  1006,  1015,  1013,  1016,  1007,   102])"
839,1,"['factor', 'condition']", An Interpretation of Kurtosis,seg_199,as common factor to get the condition as p = 2 1 (1 ± √,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([ 101, 2004, 2691, 5387, 2000, 2131, 1996, 4650, 2004, 1052, 1027, 1016,
        1015, 1006, 1015, 1081, 1600,  102])"
840,1,['distribution'], An Interpretation of Kurtosis,seg_199,. the distribution,tensor(1),"tensor([0., 0., 0., 1., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([ 101, 1012, 1996, 4353,  102])"
841,1,['leptokurtic'], An Interpretation of Kurtosis,seg_199,is leptokurtic (respectively platykurtic) if (1 − 6pq)   (respectively  ) 0. in,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  2003,  3393, 13876, 21940, 28228,  2278,  1006,  4414, 20228,
         4017, 15922, 19585,  2594,  1007,  2065,  1006,  1015,  1597,  1020,
         2361,  4160,  1007,  1006,  4414,  1007,  1014,  1012,  1999,   102])"
842,0,[], An Interpretation of Kurtosis,seg_199,terms of p this becomes p   (respectively  ) 2 1 (1 ± √,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([ 101, 3408, 1997, 1052, 2023, 4150, 1052, 1006, 4414, 1007, 1016, 1015,
        1006, 1015, 1081, 1600,  102])"
843,1,['leptokurtic'], An Interpretation of Kurtosis,seg_199,it is leptokurtic if p   2 1 ( 1 − √,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  2009,  2003,  3393, 13876, 21940, 28228,  2278,  2065,  1052,
         1016,  1015,  1006,  1015,  1597,  1600,   102])"
844,0,[], An Interpretation of Kurtosis,seg_199,1 3) and platykurtic if,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2019,  7613,  1997,  9679, 12650])","tensor([  101,  1015,  1017,  1007,  1998, 20228,  4017, 15922, 19585,  2594,
         2065,   102])"
845,1,['kurtosis'], Categorization of Kurtosis Measures,seg_201,the kurtosis can be measured in more than one way [61]. this section gives a categorization of popular kurtosis measures.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1996,  9679, 12650,  2064,  2022,  7594,  1999,  2062,  2084,
         2028,  2126,  1031,  6079,  1033,  1012,  2023,  2930,  3957,  1037,
         4937, 20265, 26910,  1997,  2759,  9679, 12650,  5761,  1012,   102])"
846,1,"['population', 'normal distribution', 'normal', 'standard deviations', 'moment', 'standard normal distribution', 'standard', 'kurtosis', 'standard normal', 'sample', 'moments', 'deviations', 'distribution']", Categorization of Kurtosis Measures,seg_201,"1. moment-based measures the classical kurtosis measures are moment-based and assume the existence of finite fourth moment (for the population). most of them utilize the fourth central moment or its scale transforms. they are defined for both the population and the sample. pearson’s kurtosis is expressed for a population in terms of moments as  2 =  4∕ 2 2. as the denominator is the fourth power of the standard deviations, they are also unit-less. because the standard normal distribution has kurtosis 3, the quantity  2 =  2 − 3 is widely used (see the following discussion).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1015,  1012,  2617,  1011,  2241,  5761,  1996,  4556,  9679,
        12650,  5761,  2024,  2617,  1011,  2241,  1998,  7868,  1996,  4598,
         1997, 10713,  2959,  2617,  1006,  2005,  1996,  2313,  1007,  1012,
         2087,  1997,  2068, 16462,  1996,  2959,  2430,  2617,  2030,  2049,
         4094, 21743,  1012,  2027,  2024,  4225,  2005,  2119,  1996,  2313,
         1998,  1996,  7099,  1012, 12874,  1521,  1055,  9679, 12650,  2003,
         5228,  2005,  1037,  2313,  1999,  3408,  1997,  5312,  2004,  1016,
         1027,   100,  1016,  1016,  1012,  2004,  1996,  7939, 20936, 27413,
         2003,  1996,  2959,  2373,  1997,  1996,  3115, 24353,  2015,  1010,
         2027,  2024,  2036,  3131,  1011,  2625,  1012,  2138,  1996,  3115,
         3671,  4353,  2038,  9679, 12650,  1017,  1010,  1996, 11712,  1016,
         1027,  1016,  1597,  1017,  2003,  4235,  2109,  1006,  2156,  1996,
         2206,  6594,  1007,  1012,   102])"
847,1,"['population', 'standardized', 'kurtosis', 'variables']", Categorization of Kurtosis Measures,seg_201,2. measures that utilize standardized variables (z-scores) the classical measure of pearson’s population kurtosis is defined as  2 = e[z4] where z = (x −  )∕ . stavig’s kurtosis measure [71] is defined as 1 − e[|z|]. seiner bonett used e[g(z)] where,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1016,  1012,  5761,  2008, 16462, 16367, 10857,  1006,  1062,
         1011,  7644,  1007,  1996,  4556,  5468,  1997, 12874,  1521,  1055,
         2313,  9679, 12650,  2003,  4225,  2004,  1016,  1027,  1041,  1031,
         1062,  2549,  1033,  2073,  1062,  1027,  1006,  1060,  1597,  1007,
          100,  1012,  2358, 18891,  2290,  1521,  1055,  9679, 12650,  5468,
         1031,  6390,  1033,  2003,  4225,  2004,  1015,  1597,  1041,  1031,
         1064,  1062,  1064,  1033,  1012, 16470,  2099,  5923,  4779,  2109,
         1041,  1031,  1043,  1006,  1062,  1007,  1033,  2073,   102])"
848,1,"['unimodal', 'data']", Categorization of Kurtosis Measures,seg_201,which gives more importance to the peak at the center for unimodal data.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  2029,  3957,  2062,  5197,  2000,  1996,  4672,  2012,  1996,
         2415,  2005,  4895, 16339,  9305,  2951,  1012,   102])"
849,1,"['quantiles', 'distribution']", Categorization of Kurtosis Measures,seg_201,"3. quantile-based measures these measures utilize the quantiles of a distribution. the popular ones are due to balanda and macgillivray [52], groeneveld and meeden [72] and groeneveld [73].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1017,  1012, 24110, 15286,  1011,  2241,  5761,  2122,  5761,
        16462,  1996, 24110, 15286,  2015,  1997,  1037,  4353,  1012,  1996,
         2759,  3924,  2024,  2349,  2000, 21451,  8943,  1998,  6097, 19791,
        12848,  9447,  1031,  4720,  1033,  1010, 24665,  8913,  2638, 15985,
         2094,  1998,  2033, 14728,  2078,  1031,  5824,  1033,  1998, 24665,
         8913,  2638, 15985,  2094,  1031,  6421,  1033,  1012,   102])"
850,1,"['function', 'functions', 'distribution']", Categorization of Kurtosis Measures,seg_201,4. measures that utilize inverse of distribution functions these measures use the inverse of theoretical distribution functions. one example is the spread function of balanda and macgillivray [52],tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1018,  1012,  5761,  2008, 16462, 19262,  1997,  4353,  4972,
         2122,  5761,  2224,  1996, 19262,  1997,  9373,  4353,  4972,  1012,
         2028,  2742,  2003,  1996,  3659,  3853,  1997, 21451,  8943,  1998,
         6097, 19791, 12848,  9447,  1031,  4720,  1033,   102])"
851,1,"['continuous', 'unimodal', 'skewness', 'plot']", Categorization of Kurtosis Measures,seg_201,"the u is called interquantile distance. if both f and g are continuous unimodal and invertible, one could produce a plot of sf(u)∕sg(u) (or its inverse) to compare the relative skewness [74].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1996,  1057,  2003,  2170,  6970, 16211, 16778,  2571,  3292,
         1012,  2065,  2119,  1042,  1998,  1043,  2024,  7142,  4895, 16339,
         9305,  1998,  1999, 16874,  7028,  1010,  2028,  2071,  3965,  1037,
         5436,  1997, 16420,  1006,  1057,  1007,   100,  1006,  1057,  1007,
         1006,  2030,  2049, 19262,  1007,  2000, 12826,  1996,  5816, 15315,
         7974,  2791,  1031,  6356,  1033,  1012,   102])"
852,0,[], Categorization of Kurtosis Measures,seg_201,5. measures that utilize density crossing,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1019,  1012,  5761,  2008, 16462,  4304,  5153,   102])"
853,1,"['variance', 'frequency', 'distributions', 'samples', 'condition', 'kurtosis']", Categorization of Kurtosis Measures,seg_201,"the “density crossing” is a sufficient condition to kurtosis-order two samples. finucan [75] showed that if two distributions have the same variance, and if the frequency curves cross twice on each side of the mode, then one of them has higher kurtosis than the other.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1996,  1523,  4304,  5153,  1524,  2003,  1037,  7182,  4650,
         2000,  9679, 12650,  1011,  2344,  2048,  8168,  1012, 10346, 18100,
         2078,  1031,  4293,  1033,  3662,  2008,  2065,  2048, 20611,  2031,
         1996,  2168, 23284,  1010,  1998,  2065,  1996,  6075, 10543,  2892,
         3807,  2006,  2169,  2217,  1997,  1996,  5549,  1010,  2059,  2028,
         1997,  2068,  2038,  3020,  9679, 12650,  2084,  1996,  2060,  1012,
          102])"
854,1,"['standardized', 'range', 'unimodal', 'skewness', 'distributions', 'bivariate', 'kurtosis', 'case', 'symmetric', 'asymmetric']", Categorization of Kurtosis Measures,seg_201,"4.4.2.1 van zwet ordering of kurtosis as in the case of skewness, theoretical distributions can be “kurtosis ordered” [59]. this is more meaningful for symmetric unimodal distributions. a bivariate ordering based on both the skewness and the kurtosis is more meaningful for asymmetric distributions. as various distributions have different range, they are standardized to the same range before they are ordered.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4937, 20265, 26910,  1997,  9679, 12650,  5761])","tensor([  101,  1018,  1012,  1018,  1012,  1016,  1012,  1015,  3158,  1062,
         8545,  2102, 13063,  1997,  9679, 12650,  2004,  1999,  1996,  2553,
         1997, 15315,  7974,  2791,  1010,  9373, 20611,  2064,  2022,  1523,
         9679, 12650,  3641,  1524,  1031,  5354,  1033,  1012,  2023,  2003,
         2062, 15902,  2005, 19490,  4895, 16339,  9305, 20611,  1012,  1037,
        12170, 10755, 13143, 13063,  2241,  2006,  2119,  1996, 15315,  7974,
         2791,  1998,  1996,  9679, 12650,  2003,  2062, 15902,  2005,  2004,
        24335, 12589, 20611,  1012,  2004,  2536, 20611,  2031,  2367,  2846,
         1010,  2027,  2024, 16367,  2000,  1996,  2168,  2846,  2077,  2027,
         2024,  3641,  1012,   102])"
855,1,"['loss', 'skewed', 'normal distribution', 'standard normal distribution', 'leptokurtic', 'standard normal', 'skewed distribution', 'population', 'sample', 'normal', 'standard', 'distribution', 'kurtosis', 'data', 'case']", MEASURES OF KURTOSIS,seg_203,"kurtosis measures are used to numerically evaluate the relative peakedness or flatness of data. the standard normal distribution can be used as a yardstick for bell-shaped data, but the concept is valid for other shapes such as j-shaped, reverse j-shaped, and cusp-shaped data. it is applicable to both the sample and the population. this has important implications in some fields. as examples, suppose that there are many weight-loss programs available. the distribution of actual weight lost, or the time spent in the program by participants can take various shapes. a negatively skewed distribution in the first case will indicate that more persons lost more weight and in the second case will indicate that participants who spent more time in the program lost more weight. a leptokurtic distribution indicates that the program was very effective in weight loss, whereas a platykurtic distribution indicates that the weight loss was gradual. hence, people will be more attracted to a positively skewed or leptokurtic weight-loss program. similarly consider machine servicing by various vendors or repair persons. if there are multiple shops that could do this, a client may be more interested in that service shop with a leptokurtic and positively skewed servicing time distribution. we need a standard scale to measure the amount of kurtosis.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 5761,  1997,  9679, 12650])","tensor([  101,  9679, 12650,  5761,  2024,  2109,  2000, 15973,  2135, 16157,
         1996,  5816,  6601,  2791,  2030,  4257,  2791,  1997,  2951,  1012,
         1996,  3115,  3671,  4353,  2064,  2022,  2109,  2004,  1037,  4210,
        26348,  2005,  4330,  1011,  5044,  2951,  1010,  2021,  1996,  4145,
         2003,  9398,  2005,  2060, 10466,  2107,  2004,  1046,  1011,  5044,
         1010,  7901,  1046,  1011,  5044,  1010,  1998, 12731, 13102,  1011,
         5044,  2951,  1012,  2009,  2003, 12711,  2000,  2119,  1996,  7099,
         1998,  1996,  2313,  1012,  2023,  2038,  2590, 13494,  1999,  2070,
         4249,  1012,  2004,  4973,  1010,  6814,  2008,  2045,  2024,  2116,
         3635,  1011,  3279,  3454,  2800,  1012,  1996,  4353,  1997,  5025,
         3635,  2439,  1010,  2030,  1996,  2051,  2985,  1999,  1996,  2565,
         2011,  6818,  2064,  2202,  2536, 10466,  1012,  1037, 19762, 15315,
         7974,  2098,  4353,  1999,  1996,  2034,  2553,  2097,  5769,  2008,
         2062,  5381,  2439,  2062,  3635,  1998,  1999,  1996,  2117,  2553,
         2097,  5769,  2008,  6818,  2040,  2985,  2062,  2051,  1999,  1996,
         2565,  2439,  2062,  3635,  1012,  1037,  3393, 13876, 21940, 28228,
         2278,  4353,  7127,  2008,  1996,  2565,  2001,  2200,  4621,  1999,
         3635,  3279,  1010,  6168,  1037, 20228,  4017, 15922, 19585,  2594,
         4353,  7127,  2008,  1996,  3635,  3279,  2001, 16612,  1012,  6516,
         1010,  2111,  2097,  2022,  2062,  6296,  2000,  1037, 13567, 15315,
         7974,  2098,  2030,  3393, 13876, 21940, 28228,  2278,  3635,  1011,
         3279,  2565,  1012,  6660,  5136,  3698, 26804,  2011,  2536, 17088,
         2030,  7192,  5381,  1012,  2065,  2045,  2024,  3674,  7340,  2008,
         2071,  2079,  2023,  1010,  1037,  7396,  2089,  2022,  2062,  4699,
         1999,  2008,  2326,  4497,  2007,  1037,  3393, 13876, 21940, 28228,
         2278,  1998, 13567, 15315,  7974,  2098, 26804,  2051,  4353,  1012,
         2057,  2342,  1037,  3115,  4094,  2000,  5468,  1996,  3815,  1997,
         9679, 12650,  1012,   102])"
856,1,"['pearson', 'moments', 'population', 'kurtosis']", Pearsons Kurtosis Measure,seg_205,"using the reasoning in page 4–22, pearson defined the population kurtosis in terms of moments as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  2478,  1996, 13384,  1999,  3931,  1018,  1516,  2570,  1010,
        12874,  4225,  1996,  2313,  9679, 12650,  1999,  3408,  1997,  5312,
         2004,   102])"
857,1,"['moment', 'mathematical expectation', 'expectation', 'standardized']", Pearsons Kurtosis Measure,seg_205,"where e() denotes mathematical expectation (chapter 8) [76]. this is the fourth moment of the standardized variate z = (x −  )∕ . using v(x) = e[x2] − e[x]2 on [(x −  )∕ ]2, we have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  2073,  1041,  1006,  1007, 14796,  8045, 17626,  1006,  3127,
         1022,  1007,  1031,  6146,  1033,  1012,  2023,  2003,  1996,  2959,
         2617,  1997,  1996, 16367, 13075, 13143,  1062,  1027,  1006,  1060,
         1597,  1007,   100,  1012,  2478,  1058,  1006,  1060,  1007,  1027,
         1041,  1031,  1060,  2475,  1033,  1597,  1041,  1031,  1060,  1033,
         1016,  2006,  1031,  1006,  1060,  1597,  1007,   100,  1033,  1016,
         1010,  2057,  2031,   102])"
858,1,"['function', 'variance', 'coefficient', 'distributions', 'sample', 'kurtosis', 'asymmetric']", Pearsons Kurtosis Measure,seg_205,"rearranged, we get e{[(x −  )∕ ]4} = v{[(x −  )∕ ]2} + {e[(x −  )∕ ]2}2. the second expression being the square of the variance the rhs becomes v{[(x −  )∕ ]2} + {v[(x −  )∕ ]}2. an interpretation of this result is that the kurtosis and variance (spread) are related through squares. as the numerator is an even function of the variate, this measure allows one to compare the kurtosis of asymmetric distributions. the sample kurtosis coefficient is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  4373, 24388,  2098,  1010,  2057,  2131,  1041,  1063,  1031,
         1006,  1060,  1597,  1007,   100,  1033,  1018,  1065,  1027,  1058,
         1063,  1031,  1006,  1060,  1597,  1007,   100,  1033,  1016,  1065,
         1009,  1063,  1041,  1031,  1006,  1060,  1597,  1007,   100,  1033,
         1016,  1065,  1016,  1012,  1996,  2117,  3670,  2108,  1996,  2675,
         1997,  1996, 23284,  1996,  1054,  7898,  4150,  1058,  1063,  1031,
         1006,  1060,  1597,  1007,   100,  1033,  1016,  1065,  1009,  1063,
         1058,  1031,  1006,  1060,  1597,  1007,   100,  1033,  1065,  1016,
         1012,  2019,  7613,  1997,  2023,  2765,  2003,  2008,  1996,  9679,
        12650,  1998, 23284,  1006,  3659,  1007,  2024,  3141,  2083, 14320,
         1012,  2004,  1996, 16371,  5017,  8844,  2003,  2019,  2130,  3853,
         1997,  1996, 13075, 13143,  1010,  2023,  5468,  4473,  2028,  2000,
        12826,  1996,  9679, 12650,  1997,  2004, 24335, 12589, 20611,  1012,
         1996,  7099,  9679, 12650, 19064,  2003,   102])"
859,1,"['population', 'leptokurtic', 'estimate', 'standard deviation', 'standardized', 'data', 'discrete', 'continuous', 'deviation', 'fisher', 'biased', 'standard', 'kurtosis', 'range', 'distributions', 'sample', 'sample standard deviation', 'distribution']", Pearsons Kurtosis Measure,seg_205,"where sn is the sample standard deviation. because sums of fourth powers is always positive, b2 ≥ 0. as the zero-point is well defined, it is a ratio-measure with range ∈ ℝ. it is shown in the following (next page) that the kurtosis of the standard normal distribution is 3. this means that irrespective of whether the data are discrete or continuous, we could subtract 3 to get 2 = 2 − 3 as a standardized measure of kurtosis as suggested by fisher. then 2 0 indicates leptokurtic and 2 0 indicates platykurtic distributions. replacing the population quantities by the corresponding sample equivalents, we could get a biased estimate as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  2073,  1055,  2078,  2003,  1996,  7099,  3115, 24353,  1012,
         2138, 20571,  1997,  2959,  4204,  2003,  2467,  3893,  1010,  1038,
         2475,  1609,  1014,  1012,  2004,  1996,  5717,  1011,  2391,  2003,
         2092,  4225,  1010,  2009,  2003,  1037,  6463,  1011,  5468,  2007,
         2846,  1596,  1579,  1012,  2009,  2003,  3491,  1999,  1996,  2206,
         1006,  2279,  3931,  1007,  2008,  1996,  9679, 12650,  1997,  1996,
         3115,  3671,  4353,  2003,  1017,  1012,  2023,  2965,  2008, 20868,
         6072,  5051, 15277,  1997,  3251,  1996,  2951,  2024, 16246,  2030,
         7142,  1010,  2057,  2071,  4942,  6494,  6593,  1017,  2000,  2131,
         1016,  1027,  1016,  1597,  1017,  2004,  1037, 16367,  5468,  1997,
         9679, 12650,  2004,  4081,  2011,  8731,  1012,  2059,  1016,  1014,
         7127,  3393, 13876, 21940, 28228,  2278,  1998,  1016,  1014,  7127,
        20228,  4017, 15922, 19585,  2594, 20611,  1012,  6419,  1996,  2313,
        12450,  2011,  1996,  7978,  7099,  5662,  2015,  1010,  2057,  2071,
         2131,  1037, 25352, 10197,  2004,   102])"
860,1,"['biased estimator', 'estimate', 'unbiased', 'biased', 'sample', 'estimator', 'factor', 'population', 'kurtosis']", Pearsons Kurtosis Measure,seg_205,the sample kurtosis is a biased estimator of the population kurtosis. we need to apply a different scaling factor to get the unbiased estimate. this is why some,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  1996,  7099,  9679, 12650,  2003,  1037, 25352,  9765,  9581,
         4263,  1997,  1996,  2313,  9679, 12650,  1012,  2057,  2342,  2000,
         6611,  1037,  2367, 25169,  5387,  2000,  2131,  1996,  4895, 11607,
         6924, 10197,  1012,  2023,  2003,  2339,  2070,   102])"
861,1,"['kurtosis', 'coefficient']", Pearsons Kurtosis Measure,seg_205,example 4.8 classical kurtosis coefficient,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  2742,  1018,  1012,  1022,  4556,  9679, 12650, 19064,   102])"
862,1,"['kurtosis', 'mean', 'coefficient', 'dispersion']", Pearsons Kurtosis Measure,seg_205,prove that the classical kurtosis coefficient measures the dispersion of [(x −  )∕ ]2 around its mean 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  6011,  2008,  1996,  4556,  9679, 12650, 19064,  5761,  1996,
         4487, 17668, 10992,  1997,  1031,  1006,  1060,  1597,  1007,   100,
         1033,  1016,  2105,  2049,  2812,  1015,  1012,   102])"
863,1,"['mean', 'standardized', 'normally distributed', 'variance', 'distribution']", Pearsons Kurtosis Measure,seg_205,"solution 4.8 replace e[(x −  )∕ ]2 on the rhs of equation (4.12) by v[(x −  )∕ ] + {e[(x −  )∕ ]}2. as z = (x −  )∕  is a standardized variate, it has mean e(z) = 0 and variance v(z) = 1. if x is normally distributed, ((x −  )∕ )2 has a chi-square distribution having 1 dof with mean 1 and variance 2 (chapter 7). substitute these values in equation (4.12) to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  5576,  1018,  1012,  1022,  5672,  1041,  1031,  1006,  1060,
         1597,  1007,   100,  1033,  1016,  2006,  1996,  1054,  7898,  1997,
         8522,  1006,  1018,  1012,  2260,  1007,  2011,  1058,  1031,  1006,
         1060,  1597,  1007,   100,  1033,  1009,  1063,  1041,  1031,  1006,
         1060,  1597,  1007,   100,  1033,  1065,  1016,  1012,  2004,  1062,
         1027,  1006,  1060,  1597,  1007,   100,  2003,  1037, 16367, 13075,
        13143,  1010,  2009,  2038,  2812,  1041,  1006,  1062,  1007,  1027,
         1014,  1998, 23284,  1058,  1006,  1062,  1007,  1027,  1015,  1012,
         2065,  1060,  2003,  5373,  5500,  1010,  1006,  1006,  1060,  1597,
         1007,   100,  1007,  1016,  2038,  1037,  9610,  1011,  2675,  4353,
         2383,  1015,  2079,  2546,  2007,  2812,  1015,  1998, 23284,  1016,
         1006,  3127,  1021,  1007,  1012,  7681,  2122,  5300,  1999,  8522,
         1006,  1018,  1012,  2260,  1007,  2000,  2131,   102])"
864,1,"['mean', 'variance']", Pearsons Kurtosis Measure,seg_205,this shows that e{[(x − )∕ ]4} = v{[(x − )∕ ]2} + 1 measures the dispersion of [(x − )∕ ]2 about its mean 1 (which is the variance of z = (x − )∕ ).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  2023,  3065,  2008,  1041,  1063,  1031,  1006,  1060,  1597,
         1007,   100,  1033,  1018,  1065,  1027,  1058,  1063,  1031,  1006,
         1060,  1597,  1007,   100,  1033,  1016,  1065,  1009,  1015,  5761,
         1996,  4487, 17668, 10992,  1997,  1031,  1006,  1060,  1597,  1007,
          100,  1033,  1016,  2055,  2049,  2812,  1015,  1006,  2029,  2003,
         1996, 23284,  1997,  1062,  1027,  1006,  1060,  1597,  1007,   100,
         1007,  1012,   102])"
865,1,"['normal', 'variance']", Pearsons Kurtosis Measure,seg_205,substitute for v{[(x −  )∕ ]2} = 2 (chi-square variance with 1 dof) shows that the kurtotis is 3 when x is normal.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  7681,  2005,  1058,  1063,  1031,  1006,  1060,  1597,  1007,
          100,  1033,  1016,  1065,  1027,  1016,  1006,  9610,  1011,  2675,
        23284,  2007,  1015,  2079,  2546,  1007,  3065,  2008,  1996,  9679,
         4140,  2483,  2003,  1017,  2043,  1060,  2003,  3671,  1012,   102])"
866,1,"['variance', 'symmetric distributions', 'distributions', 'distribution', 'kurtosis', 'case', 'symmetric', 'asymmetric']", Pearsons Kurtosis Measure,seg_205,"the dependency of kurtosis on variance is more pronounced for symmetric distributions than for others (asymmetric and truncated distributions). the amount by which spread is reduced when kurtosis is increased depends also on whether frequency is moved from both the shoulders of a distribution to the center or only from one side (left or right) to the center, in which case the reduction of variance could be minimal. if one is interested only in the peakedness of distributions, a truncated measure that eliminates the contribution of the tail(s) may be more appropriate. the truncation point can be setup equidistant from the mode for symmetric distributions.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  1996, 24394,  1997,  9679, 12650,  2006, 23284,  2003,  2062,
         8793,  2005, 19490, 20611,  2084,  2005,  2500,  1006,  2004, 24335,
        12589,  1998, 25449, 20611,  1007,  1012,  1996,  3815,  2011,  2029,
         3659,  2003,  4359,  2043,  9679, 12650,  2003,  3445,  9041,  2036,
         2006,  3251,  6075,  2003,  2333,  2013,  2119,  1996,  4065,  1997,
         1037,  4353,  2000,  1996,  2415,  2030,  2069,  2013,  2028,  2217,
         1006,  2187,  2030,  2157,  1007,  2000,  1996,  2415,  1010,  1999,
         2029,  2553,  1996,  7312,  1997, 23284,  2071,  2022, 10124,  1012,
         2065,  2028,  2003,  4699,  2069,  1999,  1996,  6601,  2791,  1997,
        20611,  1010,  1037, 25449,  5468,  2008, 11027,  2015,  1996,  6691,
         1997,  1996,  5725,  1006,  1055,  1007,  2089,  2022,  2062,  6413,
         1012,  1996, 19817,  4609, 10719,  2391,  2064,  2022, 16437,  1041,
        15549, 10521,  5794,  2102,  2013,  1996,  5549,  2005, 19490, 20611,
         1012,   102])"
867,1,"['normal distribution', 'standard normal distribution', 'standard normal', 'normal', 'standard', 'distribution']", Pearsons Kurtosis Measure,seg_205,"for the standard normal distribution, 2 is 3. however, there exist many other distributions that also have 2 = 3. for example, the tukey distribution with = 5.2",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  2005,  1996,  3115,  3671,  4353,  1010,  1016,  2003,  1017,
         1012,  2174,  1010,  2045,  4839,  2116,  2060, 20611,  2008,  2036,
         2031,  1016,  1027,  1017,  1012,  2005,  2742,  1010,  1996, 10722,
        14839,  4353,  2007,  1027,  1019,  1012,  1016,   102])"
868,1,['gamma'], Pearsons Kurtosis Measure,seg_205,and double gamma law with   = 0.5 ∗ (1 +√,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  1998,  3313, 13091,  2375,  2007,  1027,  1014,  1012,  1019,
         1598,  1006,  1015,  1009,  1600,   102])"
869,1,"['tail', 'probability', 'tails', 'distributions', 'distribution', 'kurtosis']", Pearsons Kurtosis Measure,seg_205,"13) all have 2 = 3, although their shapes are different [77, 78]. this is because pearson’s kurtosis measure encapsulates both the peakedness and tail weight(s) of a distribution. this is easy to understand using truncated distributions. a left-truncated distribution tails off slower than their nontruncated counterparts. truncating a distribution at left or right tail also increases the peak probability by f (x)∕(1 − ) where is the probability of truncated part.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([12874,  2015,  9679, 12650,  5468])","tensor([  101,  2410,  1007,  2035,  2031,  1016,  1027,  1017,  1010,  2348,
         2037, 10466,  2024,  2367,  1031,  6255,  1010,  6275,  1033,  1012,
         2023,  2003,  2138, 12874,  1521,  1055,  9679, 12650,  5468,  4372,
        17695, 23722,  8520,  2119,  1996,  6601,  2791,  1998,  5725,  3635,
         1006,  1055,  1007,  1997,  1037,  4353,  1012,  2023,  2003,  3733,
         2000,  3305,  2478, 25449, 20611,  1012,  1037,  2187,  1011, 25449,
         4353, 17448,  2125, 12430,  2084,  2037,  2512, 16344,  4609, 12921,
        14562,  1012, 19817,  4609, 18252,  1037,  4353,  2012,  2187,  2030,
         2157,  5725,  2036,  7457,  1996,  4672,  9723,  2011,  1042,  1006,
         1060,  1007,   100,  1006,  1015,  1597,  1007,  2073,  2003,  1996,
         9723,  1997, 25449,  2112,  1012,   102])"
870,1,"['kurtosis', 'pearson']", SkewnessKurtosis Bounds,seg_207,"several researchers have studied the d = (skewness−excess kurtosis) quantity from various perspectives. see for example references 79, and 80. pearson obtained the bound  1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([15315,  7974,  2791, 18569, 25950, 19202])","tensor([  101,  2195,  6950,  2031,  3273,  1996,  1040,  1027,  1006, 15315,
         7974,  2791, 22543, 10288,  9623,  2015,  9679, 12650,  1007, 11712,
         2013,  2536, 15251,  1012,  2156,  2005,  2742,  7604,  6535,  1010,
         1998,  3770,  1012, 12874,  4663,  1996,  5391,  1015,   102])"
871,1,"['bernoulli', 'distributions', 'bernoulli distributions']", SkewnessKurtosis Bounds,seg_207,2 −  2 ≤ 2 for bernoulli distributions. this was further improved by several,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([15315,  7974,  2791, 18569, 25950, 19202])","tensor([  101,  1016,  1597,  1016,  1608,  1016,  2005, 16595,  7140,  6894,
        20611,  1012,  2023,  2001,  2582,  5301,  2011,  2195,   102])"
872,1,['distribution'], SkewnessKurtosis Bounds,seg_207,"researchers. if the distribution is infinitely divisible,  1",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([15315,  7974,  2791, 18569, 25950, 19202])","tensor([  101,  6950,  1012,  2065,  1996,  4353,  2003, 25773,  4487, 11365,
         7028,  1010,  1015,   102])"
873,1,"['symmetric distributions', 'poisson distributions', 'symmetric', 'normal distribution', 'poisson', 'normal', 'normal and poisson distributions', 'test', 'moment', 'kurtosis', 'range', 'normal distributions', 'distributions', 'distribution', 'inequality']", SkewnessKurtosis Bounds,seg_207,"for normal and poisson distributions [81]. this property was used in reference 82 to distinguish poisson or normal distributions from other infinite divisible distributions. a similar quantity is c = skewness/kurtosis (for kurtosis≠ 0), which is well behaved for symmetric distributions in general and the normal distribution in particular. see reference 83 for some inequalities, reference 54 in the context of minimizing information divergence under moment constraints, reference 84 for a studentized range based test and reference 85 for a right and left inequality order, and reference 86 for skewness-invariant measures of kurtosis.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([15315,  7974,  2791, 18569, 25950, 19202])","tensor([  101,  2005,  3671,  1998, 13433, 24077, 20611,  1031,  6282,  1033,
         1012,  2023,  3200,  2001,  2109,  1999,  4431,  6445,  2000, 10782,
        13433, 24077,  2030,  3671, 20611,  2013,  2060, 10709,  4487, 11365,
         7028, 20611,  1012,  1037,  2714, 11712,  2003,  1039,  1027, 15315,
         7974,  2791,  1013,  9679, 12650,  1006,  2005,  9679, 12650,  1027,
         1014,  1007,  1010,  2029,  2003,  2092, 26979,  2005, 19490, 20611,
         1999,  2236,  1998,  1996,  3671,  4353,  1999,  3327,  1012,  2156,
         4431,  6640,  2005,  2070,  1999,  2063, 26426,  6447,  1010,  4431,
         5139,  1999,  1996,  6123,  1997,  7163,  4328,  6774,  2592, 17856,
        17905,  2104,  2617, 14679,  1010,  4431,  6391,  2005,  1037,  3076,
         3550,  2846,  2241,  3231,  1998,  4431,  5594,  2005,  1037,  2157,
         1998,  2187, 16440,  2344,  1010,  1998,  4431,  6564,  2005, 15315,
         7974,  2791,  1011, 23915,  5761,  1997,  9679, 12650,  1012,   102])"
874,1,['kurtosis'], Lkurtosis,seg_209,"this is a generalization of kurtosis, introduced by hosking [53], that uses l-moments (denoted by  ′",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1048, 18569, 25950])","tensor([  101,  2023,  2003,  1037,  2236,  3989,  1997,  9679, 12650,  1010,
         3107,  2011,  7570, 29334,  2290,  1031,  5187,  1033,  1010,  2008,
         3594,  1048,  1011,  5312,  1006, 19537,  2011,  1531,   102])"
875,1,"['mean', 'linear combination', 'linear', 'order statistic', 'random variable', 'random', 'expectation', 'combination', 'statistic', 'variable']", Lkurtosis,seg_209,"ks). for a real-valued random variable x with finite mean  , we define the l-moment as expectation of linear combination of order statistic as follows (see page 4–10). let x(",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 1048, 18569, 25950])","tensor([  101, 29535,  1007,  1012,  2005,  1037,  2613,  1011, 11126,  6721,
         8023,  1060,  2007, 10713,  2812,  1010,  2057,  9375,  1996,  1048,
         1011,  2617,  2004, 17626,  1997,  7399,  5257,  1997,  2344, 28093,
         6553,  2004,  4076,  1006,  2156,  3931,  1018,  1516,  2184,  1007,
         1012,  2292,  1060,  1006,   102])"
876,1,"['order statistic', 'random sample', 'sample', 'random', 'statistic']", Lkurtosis,seg_209,n k) denote the kth order statistic of a random sample of size n.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0.])","tensor([ 1048, 18569, 25950])","tensor([  101,  1050,  1047,  1007, 19090,  1996,  1047,  2705,  2344, 28093,
         6553,  1997,  1037,  6721,  7099,  1997,  2946,  1050,  1012,   102])"
877,1,['coefficients'], Lkurtosis,seg_209,4 1)). note that the coefficients of x(,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 1048, 18569, 25950])","tensor([  101,  1018,  1015,  1007,  1007,  1012,  3602,  2008,  1996, 21374,
         1997,  1060,  1006,   102])"
878,0,[], Lkurtosis,seg_209,"j k) are the rows of pascal’s triangle with alternating signs. the l-skewness is then defined as  3 =  3∕ 2. similarly, l-kurtosis is defined as  4 =  4∕ 2",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 1048, 18569, 25950])","tensor([  101,  1046,  1047,  1007,  2024,  1996, 10281,  1997, 17878,  1521,
         1055,  9546,  2007, 15122,  5751,  1012,  1996,  1048,  1011, 15315,
         7974,  2791,  2003,  2059,  4225,  2004,  1017,  1027,   100,  1016,
         1012,  6660,  1010,  1048,  1011,  9679, 12650,  2003,  4225,  2004,
         1018,  1027,   100,  1016,   102])"
879,1,"['linear combination', 'linear', 'order statistics', 'expectation', 'statistics', 'combination']", Lkurtosis,seg_209,"2. as both are expectation of linear combination of order statistics, they are unit-less measures.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 1048, 18569, 25950])","tensor([  101,  1016,  1012,  2004,  2119,  2024, 17626,  1997,  7399,  5257,
         1997,  2344,  6747,  1010,  2027,  2024,  3131,  1011,  2625,  5761,
         1012,   102])"
880,1,"['case', 'interval', 'tails', 'normal', 'limit', 'independent', 'kurtosis', 'ratio scale', 'data']", Spectral Kurtosis SK,seg_211,"as mentioned earlier, kurtosis can clearly distinguish between peakedness and flatness in numeric data in the interval or ratio scale. it is a quantified real number (+ve or −ve) whose magnitude represents the amount of departure of a distribution from the shoulders toward the center and tails. this property of kurtosis can be used to predict machine faults (using past data) [87], in fault diagnosis of equipments or independent parts and materials [88, 89] damage assessment of structures [90], crack detection of isotropic plates, machine diagnostics and prognostics [91], modular classification of digital signals, and so on. as an example, they can be used to warn an operator on machine overloads or wear and tear beyond a threshold. consider an aircraft or helicopter with a fixed weight limit on the cargo and passenger compartments, respectively. if either or both of these sections exceed the weight limit, resulting in an overall overweight, the bearings sound during takeoff due to the excess weight acting down can slightly deviate from the normal takeoff sound at the same ground speed (in the case of aircraft). similarly, by analyzing acoustic signals, one can distinguish between human footsteps from background noise (impurities) or identify submarines from whales in deep water. seismic sensors and geophones use such signals to automatically measure the movement of objects or to distinguish between possible objects (such as vehicles, humans, other animals, or objects) and direction of movement (moving toward, away from or along a trajectory around the sensor).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17435,  9679, 12650, 15315])","tensor([  101,  2004,  3855,  3041,  1010,  9679, 12650,  2064,  4415, 10782,
         2090,  6601,  2791,  1998,  4257,  2791,  1999, 16371, 25531,  2951,
         1999,  1996, 13483,  2030,  6463,  4094,  1012,  2009,  2003,  1037,
        24110,  3775, 10451,  2613,  2193,  1006,  1009,  2310,  2030,  1597,
         3726,  1007,  3005, 10194,  5836,  1996,  3815,  1997,  6712,  1997,
         1037,  4353,  2013,  1996,  4065,  2646,  1996,  2415,  1998, 17448,
         1012,  2023,  3200,  1997,  9679, 12650,  2064,  2022,  2109,  2000,
        16014,  3698, 19399,  1006,  2478,  2627,  2951,  1007,  1031,  6584,
         1033,  1010,  1999,  6346, 11616,  1997,  3941,  2015,  2030,  2981,
         3033,  1998,  4475,  1031,  6070,  1010,  6486,  1033,  4053,  7667,
         1997,  5090,  1031,  3938,  1033,  1010,  8579, 10788,  1997, 11163,
        13181, 24330,  7766,  1010,  3698, 16474,  2015,  1998,  4013, 26745,
        10074,  2015,  1031,  6205,  1033,  1010, 19160,  5579,  1997,  3617,
         7755,  1010,  1998,  2061,  2006,  1012,  2004,  2019,  2742,  1010,
         2027,  2064,  2022,  2109,  2000, 11582,  2019,  6872,  2006,  3698,
         2058, 11066,  2015,  2030,  4929,  1998,  7697,  3458,  1037, 11207,
         1012,  5136,  2019,  2948,  2030,  7739,  2007,  1037,  4964,  3635,
         5787,  2006,  1996,  6636,  1998,  4628, 27998,  1010,  4414,  1012,
         2065,  2593,  2030,  2119,  1997,  2122,  5433, 13467,  1996,  3635,
         5787,  1010,  4525,  1999,  2019,  3452,  2058, 11179,  1010,  1996,
        21714,  2614,  2076, 19744,  2349,  2000,  1996,  9987,  3635,  3772,
         2091,  2064,  3621, 14386,  3686,  2013,  1996,  3671, 19744,  2614,
         2012,  1996,  2168,  2598,  3177,  1006,  1999,  1996,  2553,  1997,
         2948,  1007,  1012,  6660,  1010,  2011, 20253,  6490,  7755,  1010,
         2028,  2064, 10782,  2090,  2529,  9717,  2013,  4281,  5005,  1006,
        17727, 29366,  1007,  2030,  6709, 12622,  2013, 17967,  1999,  2784,
         2300,  1012, 22630, 13907,  1998, 20248, 19093,  2224,  2107,  7755,
         2000,  8073,  5468,  1996,  2929,  1997,  5200,  2030,  2000, 10782,
         2090,  2825,  5200,  1006,  2107,  2004,  4683,  1010,  4286,  1010,
         2060,  4176,  1010,  2030,  5200,  1007,  1998,  3257,  1997,  2929,
         1006,  3048,  2646,  1010,  2185,  2013,  2030,  2247,  1037, 22793,
         2105,  1996, 13617,  1007,  1012,   102])"
881,1,"['deviation', 'cumulants', 'frequency', 'normal', 'kurtosis']", Spectral Kurtosis SK,seg_211,definition 4.4 spectral kurtosis (sk) is a ratio-measure defined in the frequency domain of a signal that reveals the deviation from gaussianity of the spectral components with intent to separate randomly occurring signals from normal ones using cumulants.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([17435,  9679, 12650, 15315])","tensor([  101,  6210,  1018,  1012,  1018, 17435,  9679, 12650,  1006, 15315,
         1007,  2003,  1037,  6463,  1011,  5468,  4225,  1999,  1996,  6075,
         5884,  1997,  1037,  4742,  2008,  7657,  1996, 24353,  2013, 11721,
        17854, 25443,  3723,  1997,  1996, 17435,  6177,  2007,  7848,  2000,
         3584, 18154, 10066,  7755,  2013,  3671,  3924,  2478, 13988,  7068,
         7666,  1012,   102])"
882,1,"['transform', 'fourier transform', 'frequency transforms', 'frequency', 'transformed', 'data', 'discrete']", Spectral Kurtosis SK,seg_211,"the above-mentioned definition assumes that original data are transformed into a band-delimited frequency domain using one of the popular frequency transforms such as discrete fourier transform (dft), discrete wavelet transform (dwt), and so on. a simpler definition that hides the technical details is as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17435,  9679, 12650, 15315])","tensor([  101,  1996,  2682,  1011,  3855,  6210, 15980,  2008,  2434,  2951,
         2024,  8590,  2046,  1037,  2316,  1011,  3972, 27605,  3064,  6075,
         5884,  2478,  2028,  1997,  1996,  2759,  6075, 21743,  2107,  2004,
        16246, 26899, 10938,  1006,  1040,  6199,  1007,  1010, 16246,  4400,
         7485, 10938,  1006,  1040, 26677,  1007,  1010,  1998,  2061,  2006,
         1012,  1037, 16325,  6210,  2008, 17382,  1996,  4087,  4751,  2003,
         2004,  4076,  1024,   102])"
883,1,"['kurtosis', 'frequency']", Spectral Kurtosis SK,seg_211,definition 4.5 the spectral kurtosis of a signal is the kurtosis of its sampled frequency components.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([17435,  9679, 12650, 15315])","tensor([  101,  6210,  1018,  1012,  1019,  1996, 17435,  9679, 12650,  1997,
         1037,  4742,  2003,  1996,  9679, 12650,  1997,  2049, 18925,  6075,
         6177,  1012,   102])"
884,1,"['frequency', 'random process', 'transformed', 'random', 'process', 'discrete']", Spectral Kurtosis SK,seg_211,"let x[n] denote a real-time discrete random process where the index n denotes the time. let x[m] denote the transformed signal in the frequency domain. then, the sk of x[n] is defined as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17435,  9679, 12650, 15315])","tensor([  101,  2292,  1060,  1031,  1050,  1033, 19090,  1037,  2613,  1011,
         2051, 16246,  6721,  2832,  2073,  1996,  5950,  1050, 14796,  1996,
         2051,  1012,  2292,  1060,  1031,  1049,  1033, 19090,  1996,  8590,
         4742,  1999,  1996,  6075,  5884,  1012,  2059,  1010,  1996, 15315,
         1997,  1060,  1031,  1050,  1033,  2003,  4225,  2004,   102])"
885,1,"['cumulants', 'stationary', 'random process', 'cumulant', 'random', 'process', 'case']", Spectral Kurtosis SK,seg_211,"where  r is the rth order cumulant and x∗[m] denotes the complex conjugate. in the case where x[n] is a stationary random process, nonnull cumulants of x[m] will have as many complex conjugate terms as nonconjugate terms.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17435,  9679, 12650, 15315])","tensor([  101,  2073,  1054,  2003,  1996, 19387,  2232,  2344, 13988,  7068,
         3372,  1998,  1060, 30125,  1031,  1049,  1033, 14796,  1996,  3375,
         9530,  9103,  5867,  1012,  1999,  1996,  2553,  2073,  1060,  1031,
         1050,  1033,  2003,  1037, 17337,  6721,  2832,  1010,  2512, 11231,
         3363, 13988,  7068,  7666,  1997,  1060,  1031,  1049,  1033,  2097,
         2031,  2004,  2116,  3375,  9530,  9103,  5867,  3408,  2004,  2512,
         8663,  9103,  5867,  3408,  1012,   102])"
886,1,"['outliers', 'harmonics', 'independent', 'discrete']", Detecting Faults Using SK,seg_213,"rotating machines typically exhibit nonstationary vibration signatures that are easy to detect using sk [92]. the popularity of sk comes from its proved effectiveness in real-time signal detection and removal of noise (impurities, harmonics, outliers, or deviants). in time-varying discrete signals, it can distinguish between constant amplitude harmonics, time-varying amplitude harmonics, and noise. in addition, it is conceptually simple and easy to compute. its value is independent of the noise present in the input signal. this is why it has been applied in a variety of fields such as astronomy, industrial robotics, and deep-sea explorations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([25952, 19399,  2478, 15315])","tensor([  101, 13618,  6681,  4050,  8327,  2512, 20100,  5649, 17880, 16442,
         2008,  2024,  3733,  2000, 11487,  2478, 15315,  1031,  6227,  1033,
         1012,  1996,  6217,  1997, 15315,  3310,  2013,  2049,  4928, 12353,
         1999,  2613,  1011,  2051,  4742, 10788,  1998,  8208,  1997,  5005,
         1006, 17727, 29366,  1010, 19452,  2015,  1010,  2041, 14355,  2015,
         1010,  2030, 14386, 11390,  1007,  1012,  1999,  2051,  1011,  9671,
        16246,  7755,  1010,  2009,  2064, 10782,  2090,  5377, 22261, 19452,
         2015,  1010,  2051,  1011,  9671, 22261, 19452,  2015,  1010,  1998,
         5005,  1012,  1999,  2804,  1010,  2009,  2003, 17158,  2135,  3722,
         1998,  3733,  2000, 24134,  1012,  2049,  3643,  2003,  2981,  1997,
         1996,  5005,  2556,  1999,  1996,  7953,  4742,  1012,  2023,  2003,
         2339,  2009,  2038,  2042,  4162,  1999,  1037,  3528,  1997,  4249,
         2107,  2004, 12799,  1010,  3919, 21331,  1010,  1998,  2784,  1011,
         2712,  8993,  2015,  1012,   102])"
887,1,"['precision', 'transform', 'fourier transform', 'frequency', 'event', 'transformed', 'harmonics', 'harmonic', 'deviations', 'data']", Detecting Faults Using SK,seg_213,"consider a healthy induction motor running at a constant speed. the harmonic components of such asynchronous machines are constant amplitude harmonics. the sk of such faulty machines can be compared with healthy ones to identify possible deviations [93]. this means that the data generated by a healthy machine is stored for future use and compared continuously with current data generated while it is presumably operating under fault (such as cracks, defunct components, or lubricant depletion) to detect any possible deviations. owing to the heterogeneity of working conditions, a healthy data vector is used instead of a single data instances. these data are usually bandpass filtered and transformed into the frequency domain (usually using short time fourier transform (stft) or wavelet transforms [90] and processed in a fixed time window. the sk of both these data is found and compared to detect defects. another application is to detect and remove (if present) radio-frequency interference (rfi) in radio astronomy and gps. the precision of such event or object identification can be improved using multiple receivers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([25952, 19399,  2478, 15315])","tensor([  101,  5136,  1037,  7965, 15946,  5013,  2770,  2012,  1037,  5377,
         3177,  1012,  1996, 19452,  6177,  1997,  2107,  2004,  6038,  2818,
         4948,  3560,  6681,  2024,  5377, 22261, 19452,  2015,  1012,  1996,
        15315,  1997,  2107, 28927,  6681,  2064,  2022,  4102,  2007,  7965,
         3924,  2000,  6709,  2825, 24353,  2015,  1031,  6109,  1033,  1012,
         2023,  2965,  2008,  1996,  2951,  7013,  2011,  1037,  7965,  3698,
         2003,  8250,  2005,  2925,  2224,  1998,  4102, 10843,  2007,  2783,
         2951,  7013,  2096,  2009,  2003, 10712,  4082,  2104,  6346,  1006,
         2107,  2004, 15288,  1010, 11984,  6177,  1010,  2030, 11320, 23736,
         9336,  2102,  2139, 10814,  3508,  1007,  2000, 11487,  2151,  2825,
        24353,  2015,  1012, 11427,  2000,  1996, 21770, 10624,  6914, 20175,
         2100,  1997,  2551,  3785,  1010,  1037,  7965,  2951,  9207,  2003,
         2109,  2612,  1997,  1037,  2309,  2951, 12107,  1012,  2122,  2951,
         2024,  2788,  2316, 15194, 21839,  1998,  8590,  2046,  1996,  6075,
         5884,  1006,  2788,  2478,  2460,  2051, 26899, 10938,  1006,  2358,
         6199,  1007,  2030,  4400,  7485, 21743,  1031,  3938,  1033,  1998,
        13995,  1999,  1037,  4964,  2051,  3332,  1012,  1996, 15315,  1997,
         2119,  2122,  2951,  2003,  2179,  1998,  4102,  2000, 11487, 18419,
         1012,  2178,  4646,  2003,  2000, 11487,  1998,  6366,  1006,  2065,
         2556,  1007,  2557,  1011,  6075, 11099,  1006, 21792,  2072,  1007,
         1999,  2557, 12799,  1998, 14658,  1012,  1996, 11718,  1997,  2107,
         2724,  2030,  4874,  8720,  2064,  2022,  5301,  2478,  3674, 19278,
         1012,   102])"
888,1,"['precision', 'function', 'frequencies', 'variation', 'frequency', 'frequency band', 'kurtosis']", Detecting Faults Using SK,seg_213,sk can be used to measure the impulsiveness of signals (variation of frequencies) as a function of frequencies in a band-filtered domain [94]. they can give an indication on the most impulsive part of a vibrating signal. kurtosis of each frequency band can be used to improve the precision in a time or frequency decomposed signal. see references 95–98 for applications to fault diagnosis.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([25952, 19399,  2478, 15315])","tensor([  101, 15315,  2064,  2022,  2109,  2000,  5468,  1996, 17727, 23004,
         2791,  1997,  7755,  1006,  8386,  1997, 13139,  1007,  2004,  1037,
         3853,  1997, 13139,  1999,  1037,  2316,  1011, 21839,  5884,  1031,
         6365,  1033,  1012,  2027,  2064,  2507,  2019, 12407,  2006,  1996,
         2087, 17727, 23004,  2112,  1997,  1037, 24987,  4742,  1012,  9679,
        12650,  1997,  2169,  6075,  2316,  2064,  2022,  2109,  2000,  5335,
         1996, 11718,  1999,  1037,  2051,  2030,  6075, 21933,  8737, 24768,
         4742,  1012,  2156,  7604,  5345,  1516,  5818,  2005,  5097,  2000,
         6346, 11616,  1012,   102])"
889,1,"['continuous', 'mean', 'moment', 'continuous distributions', 'distance metric', 'distributions', 'sample', 'kurtosis', 'distribution', 'discrete distributions', 'second moment', 'discrete']", Multivariate Kurtosis,seg_215,"the kurtosis concept has been extended to multivariate distributions by many researchers. see references 49, 99–101. the following discussion is on multivariate continuous distributions, although the concept is valid for discrete distributions. let and σ denote the mean vector and variance–covariance matrix of a multivariate distribution in ℝd. then, the classical kurtosis measure [99] is defined as d = e{[(x − )′σ−1(x − )]2}. as e{[(x − )′σ−1(x − )]} is the squared mahalanobis distance metric, this represents the second moment of mahalanobis’ squared distance. the sample analog is obtained by replacing by the mean vector x",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4800, 10755, 13143,  9679, 12650])","tensor([  101,  1996,  9679, 12650,  4145,  2038,  2042,  3668,  2000,  4800,
        10755, 13143, 20611,  2011,  2116,  6950,  1012,  2156,  7604,  4749,
         1010,  5585,  1516,  7886,  1012,  1996,  2206,  6594,  2003,  2006,
         4800, 10755, 13143,  7142, 20611,  1010,  2348,  1996,  4145,  2003,
         9398,  2005, 16246, 20611,  1012,  2292,  1998,  1173, 19090,  1996,
         2812,  9207,  1998, 23284,  1516,  2522, 10755, 28335,  8185,  1997,
         1037,  4800, 10755, 13143,  4353,  1999,  1579,  2094,  1012,  2059,
         1010,  1996,  4556,  9679, 12650,  5468,  1031,  5585,  1033,  2003,
         4225,  2004,  1040,  1027,  1041,  1063,  1031,  1006,  1060,  1597,
         1007,  1531,  1173, 27944,  1006,  1060,  1597,  1007,  1033,  1016,
         1065,  1012,  2004,  1041,  1063,  1031,  1006,  1060,  1597,  1007,
         1531,  1173, 27944,  1006,  1060,  1597,  1007,  1033,  1065,  2003,
         1996, 19942, 27913,  6761, 18477,  3292, 12046,  1010,  2023,  5836,
         1996,  2117,  2617,  1997, 27913,  6761, 18477,  1521, 19942,  3292,
         1012,  1996,  7099, 11698,  2003,  4663,  2011,  6419,  2011,  1996,
         2812,  9207,  1060,   102])"
890,1,"['sample', 'kurtosis']", Multivariate Kurtosis,seg_215,and σ by the sample variance–covariance matrix. a discussion of source separation using kurtosis maximization can be found in reference 102.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4800, 10755, 13143,  9679, 12650])","tensor([  101,  1998,  1173,  2011,  1996,  7099, 23284,  1516,  2522, 10755,
        28335,  8185,  1012,  1037,  6594,  1997,  3120,  8745,  2478,  9679,
        12650, 20446,  3989,  2064,  2022,  2179,  1999,  4431,  9402,  1012,
          102])"
891,1,"['tail', 'data', 'lack of symmetry', 'symmetry', 'skewness', 'normal', 'statistical', 'kurtosis', 'symmetric']", SUMMARY,seg_217,this chapter discussed several measures of skewness and kurtosis. most of the popular statistical techniques are devised for the symmetric bell-shaped data (which is technically called normal data). the skewness captures the lack of symmetry in the data trend. kurtosis captures the tail thickness in the data trend. financial and health data are also known to exhibit thick tailness.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2023,  3127,  6936,  2195,  5761,  1997, 15315,  7974,  2791,
         1998,  9679, 12650,  1012,  2087,  1997,  1996,  2759,  7778,  5461,
         2024, 14917,  2005,  1996, 19490,  4330,  1011,  5044,  2951,  1006,
         2029,  2003, 10892,  2170,  3671,  2951,  1007,  1012,  1996, 15315,
         7974,  2791, 19566,  1996,  3768,  1997, 14991,  1999,  1996,  2951,
         9874,  1012,  9679, 12650, 19566,  1996,  5725, 14983,  1999,  1996,
         2951,  9874,  1012,  3361,  1998,  2740,  2951,  2024,  2036,  2124,
         2000,  8327,  4317,  5725,  2791,  1012,   102])"
892,1,"['simulation', 'functions', 'skewness', 'distributions', 'kurtosis', 'moments', 'statistics', 'distribution', 'statistical', 'asymptotic']", SUMMARY,seg_217,"most of the popular measures of skewness and kurtosis are based on the central moments or functions of it. however, it is well known that the moments do not always determine a distribution uniquely. several examples to support this fact are available in the literature (see references 60 and 103. this leads to skewness and kurtosis measures based on other statistics than moments. √ 1 and 2 are routinely used in statistical analysis [104]. asymptotic distributions of skewness and kurtosis coefficients are discussed in reference 105, an application in regenerative simulation in reference 106, and rain-drop diameter distribution in reference 107. an application of fuzzy mean-variance-skewness to portfolio selection models can be found in reference 108. a visualizing discussion can be found in reference 109.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2087,  1997,  1996,  2759,  5761,  1997, 15315,  7974,  2791,
         1998,  9679, 12650,  2024,  2241,  2006,  1996,  2430,  5312,  2030,
         4972,  1997,  2009,  1012,  2174,  1010,  2009,  2003,  2092,  2124,
         2008,  1996,  5312,  2079,  2025,  2467,  5646,  1037,  4353, 20640,
         1012,  2195,  4973,  2000,  2490,  2023,  2755,  2024,  2800,  1999,
         1996,  3906,  1006,  2156,  7604,  3438,  1998,  9800,  1012,  2023,
         5260,  2000, 15315,  7974,  2791,  1998,  9679, 12650,  5761,  2241,
         2006,  2060,  6747,  2084,  5312,  1012,  1600,  1015,  1998,  1016,
         2024, 19974,  2109,  1999,  7778,  4106,  1031,  9645,  1033,  1012,
         2004, 24335, 13876, 20214, 20611,  1997, 15315,  7974,  2791,  1998,
         9679, 12650, 21374,  2024,  6936,  1999,  4431,  8746,  1010,  2019,
         4646,  1999, 19723, 24454,  8082, 12504,  1999,  4431, 10114,  1010,
         1998,  4542,  1011,  4530,  6705,  4353,  1999,  4431, 10550,  1012,
         2019,  4646,  1997, 18001,  2812,  1011, 23284,  1011, 15315,  7974,
         2791,  2000, 11103,  4989,  4275,  2064,  2022,  2179,  1999,  4431,
        10715,  1012,  1037,  5107,  6026,  6594,  2064,  2022,  2179,  1999,
         4431, 11518,  1012,   102])"
893,1,"['symmetry', 'lack of symmetry', 'skewness']", SUMMARY,seg_217,a) skewness is a measure of the lack of symmetry,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1037,  1007, 15315,  7974,  2791,  2003,  1037,  5468,  1997,
         1996,  3768,  1997, 14991,   102])"
894,1,"['moment', 'data']", SUMMARY,seg_217,b) third moment measures the asymmetry of data,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1038,  1007,  2353,  2617,  5761,  1996,  2004, 24335, 24327,
         1997,  2951,   102])"
895,1,"['symmetry', 'skewness', 'median']", SUMMARY,seg_217,c) zero skewness indicates symmetry around the median,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1039,  1007,  5717, 15315,  7974,  2791,  7127, 14991,  2105,
         1996,  3991,   102])"
896,1,"['tail', 'long left tail', 'skewness']", SUMMARY,seg_217,d) positive skewness indicates a long left tail,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1040,  1007,  3893, 15315,  7974,  2791,  7127,  1037,  2146,
         2187,  5725,   102])"
897,1,"['observation', 'coefficient', 'skewness', 'sample', 'coefficient of skewness']", SUMMARY,seg_217,e) every sample observation contributes to the coefficient of skewness,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1041,  1007,  2296,  7099,  8089, 16605,  2000,  1996, 19064,
         1997, 15315,  7974,  2791,   102])"
898,1,"['kurtosis', 'data', 'variance']", SUMMARY,seg_217,f) kurtosis measures are useless in providing variance of data,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1042,  1007,  9679, 12650,  5761,  2024, 11809,  1999,  4346,
        23284,  1997,  2951,   102])"
899,1,"['skewness coefficient', 'change of scale', 'coefficient', 'skewness', 'transformation', 'independent']", SUMMARY,seg_217,g) the skewness coefficient is independent of change of scale transformation,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1043,  1007,  1996, 15315,  7974,  2791, 19064,  2003,  2981,
         1997,  2689,  1997,  4094,  8651,   102])"
900,1,"['kurtosis', 'data']", SUMMARY,seg_217,h) truncating data at left end increases kurtosis,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1044,  1007, 19817,  4609, 18252,  2951,  2012,  2187,  2203,
         7457,  9679, 12650,   102])"
901,1,"['skewed', 'symmetric']", SUMMARY,seg_217,i) a left-truncation of symmetric law makes it positively skewed,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0.])",tensor([12654]),"tensor([  101,  1045,  1007,  1037,  2187,  1011, 19817,  4609, 10719,  1997,
        19490,  2375,  3084,  2009, 13567, 15315,  7974,  2098,   102])"
902,1,"['frequency', 'transformed', 'kurtosis', 'data']", SUMMARY,seg_217,j) spectral kurtosis uses frequency transformed data.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1046,  1007, 17435,  9679, 12650,  3594,  6075,  8590,  2951,
         1012,   102])"
903,1,['skewness'], SUMMARY,seg_217,"4.2 prove that bowley’s skewness 4.4 if pearson’s   is zero, one can",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  1016,  6011,  2008,  4605,  3240,  1521,  1055,
        15315,  7974,  2791,  1018,  1012,  1018,  2065, 12874,  1521,  1055,
         2003,  5717,  1010,  2028,  2064,   102])"
904,1,['data'], SUMMARY,seg_217,measure varies between −1 and infer that the__ (a) data distribu-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 5468, 9783, 2090, 1597, 2487, 1998, 1999, 7512, 2008, 1996, 1035,
        1035, 1006, 1037, 1007, 2951, 4487, 3367, 3089, 8569, 1011,  102])"
905,1,"['symmetric', 'distribution']", SUMMARY,seg_217,+1. tion is symmetric (b) distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1009,  1015,  1012, 14841,  2239,  2003, 19490,  1006,  1038,
         1007,  4353,   102])"
906,1,['distributions'], SUMMARY,seg_217,is mesokurtic (c) x = mode but 4.3 for bell-shaped distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  2003,  2033,  6499, 18569,  4588,  1006,  1039,  1007,  1060,
         1027,  5549,  2021,  1018,  1012,  1017,  2005,  4330,  1011,  5044,
        20611,   102])"
907,1,"['skewness', 'distribution']", SUMMARY,seg_217,distribution need not be symmetprove that the skewness measures are zeros. ric (d) distribution is bell-shaped,tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4353,  2342,  2025,  2022, 25353, 20058, 25856, 17597,  2008,
         1996, 15315,  7974,  2791,  5761,  2024,  5717,  2015,  1012, 26220,
         1006,  1040,  1007,  4353,  2003,  4330,  1011,  5044,   102])"
908,1,"['kurtosis', 'skewness']", SUMMARY,seg_217,4.5 show that the kurtosis of stan4.13 what is the value of skewness for,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  1019,  2265,  2008,  1996,  9679, 12650,  1997,
         9761,  2549,  1012,  2410,  2054,  2003,  1996,  3643,  1997, 15315,
         7974,  2791,  2005,   102])"
909,1,"['continuous', 'parameter', 'normal distribution', 'standard normal', 'uniform distribution', 'convergence', 'distributions', 'normal', 'standard', 'distribution', 'asymptotic', 'symmetric']", SUMMARY,seg_217,"dard normal distribution is 3. disthe following distributions? cuss how this helps in asymptotic a) bell-shaped distribution b) convergence of other distributions continuous uniform distribution, that tend to standard normal for c) symmetric triangular distribularge parameter values. tion.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 18243,  2094,  3671,  4353,  2003,  1017,  1012,  4487,  3367,
         5369,  2206, 20611,  1029, 12731,  4757,  2129,  2023,  7126,  1999,
         2004, 24335, 13876, 20214,  1037,  1007,  4330,  1011,  5044,  4353,
         1038,  1007, 19143,  1997,  2060, 20611,  7142,  6375,  4353,  1010,
         2008,  7166,  2000,  3115,  3671,  2005,  1039,  1007, 19490, 14023,
         4487,  3367,  3089, 28808,  3351, 16381,  5300,  1012, 14841,  2239,
         1012,   102])"
910,1,['range'], SUMMARY,seg_217,4.6 what are some desirable qualities 4.14 what is the range of possible val-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  1020,  2054,  2024,  2070, 16166, 11647,  1018,
         1012,  2403,  2054,  2003,  1996,  2846,  1997,  2825, 11748,  1011,
          102])"
911,1,['skewness'], SUMMARY,seg_217,of a good measure of skewness? ues of pearson’s skewness mea-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1037,  2204,  5468,  1997, 15315,  7974,  2791,  1029,
         1057,  2229,  1997, 12874,  1521,  1055, 15315,  7974,  2791,  2033,
         2050,  1011,   102])"
912,1,"['distributions', 'sample', 'expected value']", SUMMARY,seg_217,metry using the 5-number suma zero value indicate? what is mary of a sample. its expected value for bell-shaped distributions? what is a disadvan4.8 arrange the following distributage of this measure?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2777,  2854,  2478,  1996,  1019,  1011,  2193,  7680,  2050,
         5717,  3643,  5769,  1029,  2054,  2003,  2984,  1997,  1037,  7099,
         1012,  2049,  3517,  3643,  2005,  4330,  1011,  5044, 20611,  1029,
         2054,  2003,  1037,  4487,  3736,  2094,  6212,  2549,  1012,  1022,
        13621,  1996,  2206,  4487,  3367,  3089,  8569, 26702,  1997,  2023,
         5468,  1029,   102])"
913,0,[], SUMMARY,seg_217,tions according to increasing lev-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 14841,  5644,  2429,  2000,  4852, 23310,  1011,   102])"
914,1,"['skewed', 'normal distribution', 'range', 'standard normal distribution', 'gamma', 'standard normal', 'cauchy', 'skewness', 'normal', 'gamma distribution', 'standard', 'cauchy distribution', 'distribution', 'kurtosis', 'parameters']", SUMMARY,seg_217,"els of kurtosis (called kurtosis 4.15 what is the range of values for ordering) (i) student’s t distrithe standard skewness and kurtobution with n 25, (ii) standard sis measures? what is the reason cauchy distribution, (iii) standard for defining the kurtosis measure normal and (iv) double exponen2 as 2 − 3? derive its value for tial (v) gamma distribution with standard normal distribution. parameters (10, 2) 4.16 what does a distribution of marks 4.9 consider the distribution of marks in an exam skewed to the left indi-",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3449,  2015,  1997,  9679, 12650,  1006,  2170,  9679, 12650,
         1018,  1012,  2321,  2054,  2003,  1996,  2846,  1997,  5300,  2005,
        13063,  1007,  1006,  1045,  1007,  3076,  1521,  1055,  1056,  4487,
         3367, 24292,  2063,  3115, 15315,  7974,  2791,  1998,  9679, 16429,
        13700,  2007,  1050,  2423,  1010,  1006,  2462,  1007,  3115, 24761,
         5761,  1029,  2054,  2003,  1996,  3114,  6187, 10875,  2100,  4353,
         1010,  1006,  3523,  1007,  3115,  2005, 12854,  1996,  9679, 12650,
         5468,  3671,  1998,  1006,  4921,  1007,  3313, 16258, 10224,  2475,
         2004,  1016,  1597,  1017,  1029, 18547,  2049,  3643,  2005, 27339,
         2140,  1006,  1058,  1007, 13091,  4353,  2007,  3115,  3671,  4353,
         1012, 11709,  1006,  2184,  1010,  1016,  1007,  1018,  1012,  2385,
         2054,  2515,  1037,  4353,  1997,  6017,  1018,  1012,  1023,  5136,
         1996,  4353,  1997,  6017,  1999,  2019, 11360, 15315,  7974,  2098,
         2000,  1996,  2187, 27427,  2072,  1011,   102])"
915,1,['skewness'], SUMMARY,seg_217,"obtained in an exam. what type cate? of skewness is exhibited in the following situations? (i) the exam 4.17 when is the bowley measure was easy for majority of stuand galton measure of skewness dents, (ii) the exam was difficult equal?.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4663,  1999,  2019, 11360,  1012,  2054,  2828,  4937,  2063,
         1029,  1997, 15315,  7974,  2791,  2003,  8176,  1999,  1996,  2206,
         8146,  1029,  1006,  1045,  1007,  1996, 11360,  1018,  1012,  2459,
         2043,  2003,  1996,  4605,  3240,  5468,  2001,  3733,  2005,  3484,
         1997, 24646,  5685, 14891,  2669,  5468,  1997, 15315,  7974,  2791,
        21418,  2015,  1010,  1006,  2462,  1007,  1996, 11360,  2001,  3697,
         5020,  1029,  1012,   102])"
916,1,"['symmetric distribution', 'symmetric', 'distribution']", SUMMARY,seg_217,"for majority of students, and (iii) 4.18 if a symmetric distribution is questions that carry around 50 of left-truncated, will the new distri-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2005,  3484,  1997,  2493,  1010,  1998,  1006,  3523,  1007,
         1018,  1012,  2324,  2065,  1037, 19490,  4353,  2003,  3980,  2008,
         4287,  2105,  2753,  1997,  2187,  1011, 25449,  1010,  2097,  1996,
         2047,  4487,  3367,  3089,  1011,   102])"
917,0,[], SUMMARY,seg_217,the marks were easy questions. bution be positively or negatively,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1996,  6017,  2020,  3733,  3980,  1012,  2021,  3258,  2022,
        13567,  2030, 19762,   102])"
918,1,['skewed'], SUMMARY,seg_217,4.10 what is the 5-number summary skewed? will it change disper-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  2184,  2054,  2003,  1996,  1019,  1011,  2193,
        12654, 15315,  7974,  2098,  1029,  2097,  2009,  2689,  4487, 17668,
         1011,   102])"
919,1,"['change of scale', 'gamma', 'skewness', 'moments', 'sample', 'kurtosis']", SUMMARY,seg_217,of a sample? can you check the sion?. skewness and kurtosis of the sam4.19 does the skewness and kurtosis ple using the 5-number summary? get affected by the change of scale 4.11 find the moments of gamma distransformation y = c ∗ x? does,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1037,  7099,  1029,  2064,  2017,  4638,  1996,  9033,
         2239,  1029,  1012, 15315,  7974,  2791,  1998,  9679, 12650,  1997,
         1996,  3520,  2549,  1012,  2539,  2515,  1996, 15315,  7974,  2791,
         1998,  9679, 12650, 20228,  2063,  2478,  1996,  1019,  1011,  2193,
        12654,  1029,  2131,  5360,  2011,  1996,  2689,  1997,  4094,  1018,
         1012,  2340,  2424,  1996,  5312,  1997, 13091,  4487, 20528,  3619,
        14192,  3370,  1061,  1027,  1039,  1598,  1060,  1029,  2515,   102])"
920,1,"['quantile', 'kurtosis', 'skewness']", SUMMARY,seg_217,"tribution, and obtain the measures the quantile based measures get of skewness and kurtosis. affected?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13012, 29446,  1010,  1998,  6855,  1996,  5761,  1996, 24110,
        15286,  2241,  5761,  2131,  1997, 15315,  7974,  2791,  1998,  9679,
        12650,  1012,  5360,  1029,   102])"
921,1,"['kurtosis', 'statistic']", SUMMARY,seg_217,4.12 if the sign of kurtosis statistic is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  2260,  2065,  1996,  3696,  1997,  9679, 12650,
        28093,  6553,  2003,   102])"
922,1,"['skewed data', 'skewed', 'normal distribution', 'leptokurtic', 'normal', 'distribution', 'data']", SUMMARY,seg_217,"positive, it indicates (a) leptokurtic 4.20 what value does cqd = (q3 − distribution (b) mesokurtic distriq1)∕(q3 + q1) take for (i) symmetric data? (ii) for positively bution (c) platykurtic distribution skewed data? (d) normal distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  3893,  1010,  2009,  7127,  1006,  1037,  1007,  3393, 13876,
        21940, 28228,  2278,  1018,  1012,  2322,  2054,  3643,  2515,  1039,
         4160,  2094,  1027,  1006,  1053,  2509,  1597,  4353,  1006,  1038,
         1007,  2033,  6499, 18569,  4588,  4487,  3367,  3089,  4160,  2487,
         1007,   100,  1006,  1053,  2509,  1009,  1053,  2487,  1007,  2202,
         2005,  1006,  1045,  1007, 19490,  2951,  1029,  1006,  2462,  1007,
         2005, 13567,  2021,  3258,  1006,  1039,  1007, 20228,  4017, 15922,
        19585,  2594,  4353, 15315,  7974,  2098,  2951,  1029,  1006,  1040,
         1007,  3671,  4353,  1012,   102])"
923,1,"['skewness', 'population']", SUMMARY,seg_217,4.21 show that the population skewmeasure the skewness? what does,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  2538,  2265,  2008,  1996,  2313, 15315,  7974,
         4168,  3022,  5397,  1996, 15315,  7974,  2791,  1029,  2054,  2515,
          102])"
924,0,[], SUMMARY,seg_217,ness can be expressed as  1(x) = high values indicate?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 23384,  2064,  2022,  5228,  2004,  1015,  1006,  1060,  1007,
         1027,  2152,  5300,  5769,  1029,   102])"
925,1,['percentile'], SUMMARY,seg_217,"[e(x4) − 4 e(x) + 6 2e(x2) − 4.29 prove that the kth percentile is 3 4]∕d4, where d = std.dev. given by pk = l+(n*k/100−m)*",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1031,  1041,  1006,  1060,  2549,  1007,  1597,  1018,  1041,
         1006,  1060,  1007,  1009,  1020,  1016,  2063,  1006,  1060,  2475,
         1007,  1597,  1018,  1012,  2756,  6011,  2008,  1996,  1047,  2705,
         3867,  9463,  2003,  1017,  1018,  1033,   100,  1010,  2073,  1040,
         1027,  2358,  2094,  1012, 16475,  1012,  2445,  2011,  1052,  2243,
         1027,  1048,  1009,  1006,  1050,  1008,  1047,  1013,  2531, 22543,
         2213,  1007,  1008,   102])"
926,1,"['limit', 'range']", SUMMARY,seg_217,"4.22 what is the range of moore’s kurc/f, where l = lower limit of per-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  2570,  2054,  2003,  1996,  2846,  1997,  5405,
         1521,  1055, 13970, 11890,  1013,  1042,  1010,  2073,  1048,  1027,
         2896,  5787,  1997,  2566,  1011,   102])"
927,1,"['frequency', 'percentile']", SUMMARY,seg_217,"tosis measure? what are the possicentile class, m is the cumulative ble value ranges? frequency up to (but excluding) percentile class, c is class width 4.23 comment on the statement “kur- and f is the frequency of percentile",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  2000,  6190,  5468,  1029,  2054,  2024,  1996, 13433, 18719,
        13013,  9463,  2465,  1010,  1049,  2003,  1996, 23260,  1038,  2571,
         3643,  8483,  1029,  6075,  2039,  2000,  1006,  2021, 13343,  1007,
         3867,  9463,  2465,  1010,  1039,  2003,  2465,  9381,  1018,  1012,
         2603,  7615,  2006,  1996,  4861,  1523, 13970,  2099,  1011,  1998,
         1042,  2003,  1996,  6075,  1997,  3867,  9463,   102])"
928,1,['variance'], SUMMARY,seg_217,tosis and variance (spread) are class. inversely related.” 4.30 which of the following measures 4.24 what is the relation between quar-,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2000,  6190,  1998, 23284,  1006,  3659,  1007,  2024,  2465,
         1012, 19262,  2135,  3141,  1012,  1524,  1018,  1012,  2382,  2029,
         1997,  1996,  2206,  5761,  1018,  1012,  2484,  2054,  2003,  1996,
         7189,  2090, 24209,  2906,  1011,   102])"
929,1,['percentiles'], SUMMARY,seg_217,tiles and percentiles? uses  4∕ 2,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13262,  1998,  3867,  9463,  2015,  1029,  3594,   100,  1016,
          102])"
930,1,['dispersion'], SUMMARY,seg_217,"2? (a) dispersion, (b)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1029,  1006,  1037,  1007,  4487, 17668, 10992,  1010,
         1006,  1038,  1007,   102])"
931,1,"['location', 'kurtosis']", SUMMARY,seg_217,"skewness, (c) kurtosis, (and d) 4.25 give the mathematical expression location",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101, 15315,  7974,  2791,  1010,  1006,  1039,  1007,  9679, 12650,
         1010,  1006,  1998,  1040,  1007,  1018,  1012,  2423,  2507,  1996,
         8045,  3670,  3295,   102])"
932,1,"['quartiles', 'skewness']", SUMMARY,seg_217,to convert deciles into quartiles. 4.31 find skewness for bragg reflec-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2000, 10463, 11703,  9463,  2015,  2046, 24209,  8445,  9463,
         2015,  1012,  1018,  1012,  2861,  2424, 15315,  7974,  2791,  2005,
        23678, 25416,  2571,  2278,  1011,   102])"
933,1,"['continuous', 'data']", SUMMARY,seg_217,"4.26 when is the continuous uniform tion of x-ray data {0.0795,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1018,  1012,  2656,  2043,  2003,  1996,  7142,  6375, 14841,
         2239,  1997,  1060,  1011,  4097,  2951,  1063,  1014,  1012,  5718,
         2683,  2629,  1010,   102])"
934,1,['skewness'], SUMMARY,seg_217,2 ≤  2 + 5/6. 4.32 find skewness for the seeds,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1016,  1608,  1016,  1009,  1019,  1013,  1020,  1012,  1018,
         1012,  3590,  2424, 15315,  7974,  2791,  2005,  1996,  8079,   102])"
935,1,['data'], SUMMARY,seg_217,example data (p. 3–31) given in 4.28 consider a measure defined as chapter 3,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2742, 2951, 1006, 1052, 1012, 1017, 1516, 2861, 1007, 2445, 1999,
        1018, 1012, 2654, 5136, 1037, 5468, 4225, 2004, 3127, 1017,  102])"
936,1,['skewness'], SUMMARY,seg_217,q = (q2 − q0)∕(q4 − q2) where q0 = x(1) is the first-order statis4.33 prove that the skewness can,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1053,  1027,  1006,  1053,  2475,  1597,  1053,  2692,  1007,
          100,  1006,  1053,  2549,  1597,  1053,  2475,  1007,  2073,  1053,
         2692,  1027,  1060,  1006,  1015,  1007,  2003,  1996,  2034,  1011,
         2344, 28093,  2483,  2549,  1012,  3943,  6011,  2008,  1996, 15315,
         7974,  2791,  2064,   102])"
937,1,['quartiles'], SUMMARY,seg_217,"tic, q4 = x(n) and other q′ is are be increased using one-sided the quartiles. can it be used to truncation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2278,  1010,  1053,  2549,  1027,  1060,  1006,  1050,
         1007,  1998,  2060,  1053,  1531,  2003,  2024,  2022,  3445,  2478,
         2028,  1011, 11536,  1996, 24209,  8445,  9463,  2015,  1012,  2064,
         2009,  2022,  2109,  2000, 19817,  4609, 10719,  1012,   102])"
938,0,[], PROBABILITY,seg_219,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([9723]),"tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
939,1,['probability'], PROBABILITY,seg_219,◾ comprehend the concept of probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])",tensor([9723]),"tensor([  101,   100, 22346,  1996,  4145,  1997,  9723,   102])"
940,1,['probability'], PROBABILITY,seg_219,◾ explore different ways to express probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([9723]),"tensor([ 101,  100, 8849, 2367, 3971, 2000, 4671, 9723,  102])"
941,1,['probability'], PROBABILITY,seg_219,◾ understand various approaches to probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])",tensor([9723]),"tensor([ 101,  100, 3305, 2536, 8107, 2000, 9723,  102])"
942,1,"['events', 'probabilities']", PROBABILITY,seg_219,◾ grasp the meaning of events and how to assign probabilities to them,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])",tensor([9723]),"tensor([  101,   100, 10616,  1996,  3574,  1997,  2824,  1998,  2129,  2000,
        23911,  4013,  3676, 14680,  2000,  2068,   102])"
943,0,[], PROBABILITY,seg_219,◾ apply various counting rules and selection techniques,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([9723]),"tensor([  101,   100,  6611,  2536, 10320,  3513,  1998,  4989,  5461,   102])"
944,1,"['events', 'independent events', 'dependent', 'independent']", PROBABILITY,seg_219,◾ differentiate between dependent and independent events,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0.])",tensor([9723]),"tensor([  101,   100, 21032,  2090,  7790,  1998,  2981,  2824,   102])"
945,1,"['conditional probability', 'probability', 'bayes', 'bayes theorem', 'conditional']", PROBABILITY,seg_219,◾ understand conditional probability including bayes theorem,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 1., 0.])",tensor([9723]),"tensor([  101,   100,  3305, 18462,  9723,  2164,  3016,  2229,  9872,   102])"
946,1,['probabilities'], PROBABILITY,seg_219,◾ practice computations of probabilities for a variety of problems,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,   100,  3218, 22334,  2015,  1997,  4013,  3676, 14680,  2005,
         1037,  3528,  1997,  3471,   102])"
947,1,['probability'], INTRODUCTION,seg_221,"probability had its humble beginning in gambling and games of chance. the theoretical foundations of probability were laid by several 17th and 18th century mathematicians. prominent among them are the french mathematicians blaise pascal (1623–1662) and pierre de fermat (1601–1665), dutch astronomer christian huygens (1629–1695), english mathematician and physicist isaac newton (1642–1727), french mathematicians abraham de moivre (1667–1754), pierre simon laplace",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([4955]),"tensor([  101,  9723,  2018,  2049, 15716,  2927,  1999, 12219,  1998,  2399,
         1997,  3382,  1012,  1996,  9373, 10100,  1997,  9723,  2020,  4201,
         2011,  2195,  5550,  1998,  4985,  2301, 29374,  1012,  4069,  2426,
         2068,  2024,  1996,  2413, 29374,  1038, 25122, 17878,  1006, 29056,
         1516, 25909,  1007,  1998,  5578,  2139, 10768, 17830,  2102,  1006,
         8148,  2487,  1516, 27676,  1007,  1010,  3803, 15211,  3017, 15876,
         2100, 21230,  1006, 27882,  1516, 29140,  1007,  1010,  2394, 13235,
         1998, 13702,  7527,  8446,  1006, 24061,  1516, 25350,  1007,  1010,
         2413, 29374,  8181,  2139, 25175, 12229,  1006, 27643,  1516, 22593,
         1007,  1010,  5578,  4079,  5001, 19217,   102])"
948,1,['poisson'], INTRODUCTION,seg_221,"(1749–1827), simeon-denis poisson (1781–1840), german mathematician leibnitz gottfried (1646–1716), and so on to name a few.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([4955]),"tensor([  101,  1006, 24704,  1516, 12309,  1007,  1010, 24371,  1011, 11064,
        13433, 24077,  1006, 16788,  1516,  8905,  1007,  1010,  2446, 13235,
        26947, 24700,  8838, 26142,  1006, 28783,  1516, 28204,  1007,  1010,
         1998,  2061,  2006,  2000,  2171,  1037,  2261,  1012,   102])"
949,1,"['uncertainty', 'probability', 'levels', 'quantitative']", INTRODUCTION,seg_221,definition 5.1 probability is a quantitative ratio capturing the possible levels of uncertainty or chance.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0.])",tensor([4955]),"tensor([  101,  6210,  1019,  1012,  1015,  9723,  2003,  1037, 20155,  6463,
        11847,  1996,  2825,  3798,  1997, 12503,  2030,  3382,  1012,   102])"
950,1,"['estimation', 'population', 'frequency', 'sampling', 'statistics', 'statistical', 'probability', 'random sample', 'quality control', 'random sampling', 'distributions', 'control', 'sample', 'random']", INTRODUCTION,seg_221,"it is encountered in almost all applied sciences such as statistical physics, quantum mechanics, bioinformatics, and various branches of engineering. the study of probability became an essential part of statistics owing to the obvious reason that probability is deep rooted in a great majority of statistical models and procedures. for example, random sampling, frequency distributions, reliability and gaming models, estimation and inference, statistical quality control, and so on are based on the foundations of probability. chances play a prominent role in characterizing a random sample from an unknown population. there exist many approaches to define and use probability. we begin with the most popular approaches. a thorough understanding of these approaches is essential for students to apply probability to solve real-life problems.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([4955]),"tensor([  101,  2009,  2003,  8567,  1999,  2471,  2035,  4162,  4163,  2107,
         2004,  7778,  5584,  1010,  8559,  9760,  1010, 16012,  2378, 14192,
        17592,  1010,  1998,  2536,  5628,  1997,  3330,  1012,  1996,  2817,
         1997,  9723,  2150,  2019,  6827,  2112,  1997,  6747, 11427,  2000,
         1996,  5793,  3114,  2008,  9723,  2003,  2784, 15685,  1999,  1037,
         2307,  3484,  1997,  7778,  4275,  1998,  8853,  1012,  2005,  2742,
         1010,  6721, 16227,  1010,  6075, 20611,  1010, 15258,  1998, 10355,
         4275,  1010, 24155,  1998, 28937,  1010,  7778,  3737,  2491,  1010,
         1998,  2061,  2006,  2024,  2241,  2006,  1996, 10100,  1997,  9723,
         1012,  9592,  2377,  1037,  4069,  2535,  1999,  2839,  6026,  1037,
         6721,  7099,  2013,  2019,  4242,  2313,  1012,  2045,  4839,  2116,
         8107,  2000,  9375,  1998,  2224,  9723,  1012,  2057,  4088,  2007,
         1996,  2087,  2759,  8107,  1012,  1037, 16030,  4824,  1997,  2122,
         8107,  2003,  6827,  2005,  2493,  2000,  6611,  9723,  2000,  9611,
         2613,  1011,  2166,  3471,  1012,   102])"
951,1,"['cases', 'permutation', 'set', 'probability', 'results', 'combination', 'set theory', 'urn models']", INTRODUCTION,seg_221,"the greatest challenge in solving a probability problem is that there are usually many ways to solve it but no obvious way to verify the results. suppose that a student is presented with a probability problem. the first thing to decide is which of the approaches is the most appropriate one to solve it. there are several set theoretic laws, rules, permutation and combination, urn models, principle of inclusion and exclusion, and so on that are used to solve probability problems. fundamental laws of set theory give rise to analogous laws of probability. majority of these approaches are classical, as exemplified in the following discussion. the answer obtained in a problem can be verified only in some particular cases where the numbers involved are small.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([4955]),"tensor([  101,  1996,  4602,  4119,  1999, 13729,  1037,  9723,  3291,  2003,
         2008,  2045,  2024,  2788,  2116,  3971,  2000,  9611,  2009,  2021,
         2053,  5793,  2126,  2000, 20410,  1996,  3463,  1012,  6814,  2008,
         1037,  3076,  2003,  3591,  2007,  1037,  9723,  3291,  1012,  1996,
         2034,  2518,  2000,  5630,  2003,  2029,  1997,  1996,  8107,  2003,
         1996,  2087,  6413,  2028,  2000,  9611,  2009,  1012,  2045,  2024,
         2195,  2275, 14833, 13465,  2594,  4277,  1010,  3513,  1010,  2566,
        28120,  3370,  1998,  5257,  1010, 24471,  2078,  4275,  1010,  6958,
         1997, 10502,  1998, 15945,  1010,  1998,  2061,  2006,  2008,  2024,
         2109,  2000,  9611,  9723,  3471,  1012,  8050,  4277,  1997,  2275,
         3399,  2507,  4125,  2000, 19639,  4277,  1997,  9723,  1012,  3484,
         1997,  2122,  8107,  2024,  4556,  1010,  2004, 28593,  1999,  1996,
         2206,  6594,  1012,  1996,  3437,  4663,  1999,  1037,  3291,  2064,
         2022, 20119,  2069,  1999,  2070,  3327,  3572,  2073,  1996,  3616,
         2920,  2024,  2235,  1012,   102])"
952,1,"['uncertainty', 'probability', 'events', 'random', 'experiments', 'quantitative']", PROBABILITY,seg_223,definition 5.2 probability is a quantitative measure of uncertainty or chance associated with future events or random experiments.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0.])",tensor([9723]),"tensor([  101,  6210,  1019,  1012,  1016,  9723,  2003,  1037, 20155,  5468,
         1997, 12503,  2030,  3382,  3378,  2007,  2925,  2824,  2030,  6721,
         7885,  1012,   102])"
953,1,"['estimation theory', 'estimation', 'probability', 'outcomes']", PROBABILITY,seg_223,"in gambling or games of uncertain outcomes, it is referred to as “the odds.” for example, it may be mentioned that the odds are three to two that a horse will win a race. in estimation theory, it is called the “likelihood.” the reliability in engineering and plausibility in management refers to probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([9723]),"tensor([  101,  1999, 12219,  2030,  2399,  1997,  9662, 13105,  1010,  2009,
         2003,  3615,  2000,  2004,  1523,  1996, 10238,  1012,  1524,  2005,
         2742,  1010,  2009,  2089,  2022,  3855,  2008,  1996, 10238,  2024,
         2093,  2000,  2048,  2008,  1037,  3586,  2097,  2663,  1037,  2679,
         1012,  1999, 24155,  3399,  1010,  2009,  2003,  2170,  1996,  1523,
        16593,  1012,  1524,  1996, 15258,  1999,  3330,  1998, 20228, 20559,
        13464,  1999,  2968,  5218,  2000,  9723,  1012,   102])"
954,1,"['outcomes', 'condition', 'population', 'associated', 'events', 'samples', 'probability', 'random sample', 'random variables', 'process', 'variates', 'random samples', 'range', 'sample', 'random', 'variables']", PROBABILITY,seg_223,"probability is always associated with one or more future events, a happening, an unknown process, or a working condition. probability is also associated with random samples, random variables, and uncertain outcomes. the “likelihood” that is mentioned earlier associates a probability to a random sample drawn from a population with a known functional form. probability associated with random variates is mathematical expressions that return a real number in [0,1] range for each possible value",tensor(1),"tensor([0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])",tensor([9723]),"tensor([  101,  9723,  2003,  2467,  3378,  2007,  2028,  2030,  2062,  2925,
         2824,  1010,  1037,  6230,  1010,  2019,  4242,  2832,  1010,  2030,
         1037,  2551,  4650,  1012,  9723,  2003,  2036,  3378,  2007,  6721,
         8168,  1010,  6721, 10857,  1010,  1998,  9662, 13105,  1012,  1996,
         1523, 16593,  1524,  2008,  2003,  3855,  3041,  9228,  1037,  9723,
         2000,  1037,  6721,  7099,  4567,  2013,  1037,  2313,  2007,  1037,
         2124,  8360,  2433,  1012,  9723,  3378,  2007,  6721, 13075, 13143,
         2015,  2003,  8045, 11423,  2008,  2709,  1037,  2613,  2193,  1999,
         1031,  1014,  1010,  1015,  1033,  2846,  2005,  2169,  2825,  3643,
          102])"
955,1,"['table', 'method', 'bandwidth', 'location', 'uncertainties', 'events', 'data', 'parameter', 'probability', 'level', 'range', 'simple events', 'set', 'numerical', 'event', 'random', 'likelihood', 'experiment']", PROBABILITY,seg_223,"of the variate. these can be too low for some x values when the range of the variate is infinite or for particular parameter values. in numerical probability problems that are discussed in the following sections, it represents the chance of a specified event as a real number. this probability is the same irrespective of the method used to arrive at it. to simplify our discussion, we assume the chance mechanism as logically fine grained. the chance mechanism may be a fine-grained event (likelihood of error-free transmission of a data packet, chance of winning a game, likelihood that two political contestants will address the same location or share the same podium, etc.), a random phenomenon (chance that an electronic component will fail in a computer), or an experiment (probability of survival after a surgery, probability that a new drug will be more effective than the existing ones). note that in each of them there exist many levels of uncertainties. for example, transmission of a data packet depends on network bandwidth, transmission media, network congestion, and the proper functioning of other hardware or software components. thus, there are multiple interacting simple events involved in the main event see table 5.1 for a set of symbols). in all probability problems, we will unambiguously identify the events at the root level. probability is a ratio-measure. a “probability of zero” indicates an impossibility. a ‘probability of one’ indicates a complete certainty (in common parlance “in all probability” denotes a very likely or certain event). these occur quite often in theoretical problems but are a rarity in practice.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([9723]),"tensor([  101,  1997,  1996, 13075, 13143,  1012,  2122,  2064,  2022,  2205,
         2659,  2005,  2070,  1060,  5300,  2043,  1996,  2846,  1997,  1996,
        13075, 13143,  2003, 10709,  2030,  2005,  3327, 16381,  5300,  1012,
         1999, 15973,  9723,  3471,  2008,  2024,  6936,  1999,  1996,  2206,
         5433,  1010,  2009,  5836,  1996,  3382,  1997,  1037,  9675,  2724,
         2004,  1037,  2613,  2193,  1012,  2023,  9723,  2003,  1996,  2168,
        20868,  6072,  5051, 15277,  1997,  1996,  4118,  2109,  2000,  7180,
         2012,  2009,  1012,  2000, 21934, 28250,  2256,  6594,  1010,  2057,
         7868,  1996,  3382,  7337,  2004, 11177,  2135,  2986,  8982,  2098,
         1012,  1996,  3382,  7337,  2089,  2022,  1037,  2986,  1011,  8982,
         2098,  2724,  1006, 16593,  1997,  7561,  1011,  2489,  6726,  1997,
         1037,  2951, 14771,  1010,  3382,  1997,  3045,  1037,  2208,  1010,
        16593,  2008,  2048,  2576, 10584,  2097,  4769,  1996,  2168,  3295,
         2030,  3745,  1996,  2168, 14502,  1010,  4385,  1012,  1007,  1010,
         1037,  6721,  9575,  1006,  3382,  2008,  2019,  4816,  6922,  2097,
         8246,  1999,  1037,  3274,  1007,  1010,  2030,  2019,  7551,  1006,
         9723,  1997,  7691,  2044,  1037,  5970,  1010,  9723,  2008,  1037,
         2047,  4319,  2097,  2022,  2062,  4621,  2084,  1996,  4493,  3924,
         1007,  1012,  3602,  2008,  1999,  2169,  1997,  2068,  2045,  4839,
         2116,  3798,  1997,  9662,  7368,  1012,  2005,  2742,  1010,  6726,
         1997,  1037,  2951, 14771,  9041,  2006,  2897, 20235,  1010,  6726,
         2865,  1010,  2897, 20176,  1010,  1998,  1996,  5372, 12285,  1997,
         2060,  8051,  2030,  4007,  6177,  1012,  2947,  1010,  2045,  2024,
         3674, 21935,  3722,  2824,  2920,  1999,  1996,  2364,  2724,  2156,
         2795,  1019,  1012,  1015,  2005,  1037,  2275,  1997,  9255,  1007,
         1012,  1999,  2035,  9723,  3471,  1010,  2057,  2097, 14477, 14905,
         8004, 28078,  6709,  1996,  2824,  2012,  1996,  7117,  2504,  1012,
         9723,  2003,  1037,  6463,  1011,  5468,  1012,  1037,  1523,  9723,
         1997,  5717,  1524,  7127,  2019, 17727, 15094, 13464,  1012,  1037,
         1520,  9723,  1997,  2028,  1521,  7127,  1037,  3143, 15855,  1006,
         1999,  2691, 11968, 23078,  1523,  1999,  2035,  9723,  1524, 14796,
         1037,  2200,  3497,  2030,  3056,  2724,  1007,  1012,  2122,  5258,
         3243,  2411,  1999,  9373,  3471,  2021,  2024,  1037, 10958, 15780,
         1999,  3218,  1012,   102])"
956,1,"['probability', 'processes', 'events', 'failure', 'control', 'quality control']", PROBABILITY,seg_223,"probabilities encountered in some fields are extremely small. consider manufactured products from a company that has implemented six-sigma. as all processes are streamlined and quality control techniques ensure stringent restrictions, chances of defects in newly manufactured items are extremely small. other examples are survival chances in some terminal diseases, chances of product returns in newly introduced items (like new models of cell phones), chances of natural calamities in some locations, and so on. each of these events has a “complementary event” (defined below) for which the corresponding probability is quite high (close to 1). for instance, probability that an electronics component will work without failure is high. this shows that the magnitude of probability depends on how we define events.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([9723]),"tensor([  101,  4013,  3676, 14680,  8567,  1999,  2070,  4249,  2024,  5186,
         2235,  1012,  5136,  7609,  3688,  2013,  1037,  2194,  2008,  2038,
         7528,  2416,  1011, 13201,  1012,  2004,  2035,  6194,  2024, 29445,
         1998,  3737,  2491,  5461,  5676,  5164,  4765,  9259,  1010,  9592,
         1997, 18419,  1999,  4397,  7609,  5167,  2024,  5186,  2235,  1012,
         2060,  4973,  2024,  7691,  9592,  1999,  2070,  5536,  7870,  1010,
         9592,  1997,  4031,  5651,  1999,  4397,  3107,  5167,  1006,  2066,
         2047,  4275,  1997,  3526, 11640,  1007,  1010,  9592,  1997,  3019,
        10250, 10631,  7368,  1999,  2070,  5269,  1010,  1998,  2061,  2006,
         1012,  2169,  1997,  2122,  2824,  2038,  1037,  1523, 21053,  2724,
         1524,  1006,  4225,  2917,  1007,  2005,  2029,  1996,  7978,  9723,
         2003,  3243,  2152,  1006,  2485,  2000,  1015,  1007,  1012,  2005,
         6013,  1010,  9723,  2008,  2019,  8139,  6922,  2097,  2147,  2302,
         4945,  2003,  2152,  1012,  2023,  3065,  2008,  1996, 10194,  1997,
         9723,  9041,  2006,  2129,  2057,  9375,  2824,  1012,   102])"
957,1,"['tail', 'probability', 'functions', 'information', 'percentage', 'tail areas']", DIFFERENT WAYS TO EXPRESS PROBABILITY,seg_225,"it was mentioned in section 5.2 (p. 112) that probability is a real number between 0 and 1. the information content in probability statements can be expressed in multiple ways. popular ways to express a probability are (i) fractional form, (ii) decimal form, (iii) scientific form, (iv) percentage form, (v) literal form, (vi) pictorial form, and (vii) as tail areas under empirical curves or functions [2].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2367, 3971, 2000, 4671, 9723])","tensor([  101,  2009,  2001,  3855,  1999,  2930,  1019,  1012,  1016,  1006,
         1052,  1012, 11176,  1007,  2008,  9723,  2003,  1037,  2613,  2193,
         2090,  1014,  1998,  1015,  1012,  1996,  2592,  4180,  1999,  9723,
         8635,  2064,  2022,  5228,  1999,  3674,  3971,  1012,  2759,  3971,
         2000,  4671,  1037,  9723,  2024,  1006,  1045,  1007, 12884,  2389,
         2433,  1010,  1006,  2462,  1007, 26066,  2433,  1010,  1006,  3523,
         1007,  4045,  2433,  1010,  1006,  4921,  1007,  7017,  2433,  1010,
         1006,  1058,  1007, 18204,  2433,  1010,  1006,  6819,  1007, 28304,
         2433,  1010,  1998,  1006,  8890,  1007,  2004,  5725,  2752,  2104,
        17537, 10543,  2030,  4972,  1031,  1016,  1033,  1012,   102])"
958,1,"['cases', 'probability', 'factors', 'case']", DIFFERENT WAYS TO EXPRESS PROBABILITY,seg_225,"the fractional form represents a probability as a fraction p/q where p and q are assumed to be without common factors (called proper form of a fraction). the decimal form represents a probability in the form 0.dddd where “d” denotes a decimal digit that may or may not repeat. in case of repeating fractions, the digits repeat either individually or as a group. for example 1∕3 = 0.333 is a single digit repeating fraction (here the digits that are underlined denotes the repeating part). consider 5∕11 = 0.4545. this is a double-digit repeating fraction (the repeating part 45 is underlined). such repeating fractions are encountered in several applications. the fractional form has the advantages that it is easy to remember and compact for permanent computer storage. fortunately, the decimal form of probability can be converted into its fractional equivalent by some simple algorithms described in the following. for this, we consider three cases depending on whether any of the trailing digits cyclically repeat or not.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2367, 3971, 2000, 4671, 9723])","tensor([  101,  1996, 12884,  2389,  2433,  5836,  1037,  9723,  2004,  1037,
        12884,  1052,  1013,  1053,  2073,  1052,  1998,  1053,  2024,  5071,
         2000,  2022,  2302,  2691,  5876,  1006,  2170,  5372,  2433,  1997,
         1037, 12884,  1007,  1012,  1996, 26066,  2433,  5836,  1037,  9723,
         1999,  1996,  2433,  1014,  1012, 20315, 14141,  2073,  1523,  1040,
         1524, 14796,  1037, 26066, 15340,  2008,  2089,  2030,  2089,  2025,
         9377,  1012,  1999,  2553,  1997, 15192, 12884,  2015,  1010,  1996,
        16648,  9377,  2593, 14258,  2030,  2004,  1037,  2177,  1012,  2005,
         2742,   100,  1027,  1014,  1012, 21211,  2003,  1037,  2309, 15340,
        15192, 12884,  1006,  2182,  1996, 16648,  2008,  2024,  2104, 18194,
        14796,  1996, 15192,  2112,  1007,  1012,  5136,   100,  1027,  1014,
         1012,  3429, 19961,  1012,  2023,  2003,  1037,  3313,  1011, 15340,
        15192, 12884,  1006,  1996, 15192,  2112,  3429,  2003,  2104, 18194,
         1007,  1012,  2107, 15192, 12884,  2015,  2024,  8567,  1999,  2195,
         5097,  1012,  1996, 12884,  2389,  2433,  2038,  1996, 12637,  2008,
         2009,  2003,  3733,  2000,  3342,  1998,  9233,  2005,  4568,  3274,
         5527,  1012, 14599,  1010,  1996, 26066,  2433,  1997,  9723,  2064,
         2022,  4991,  2046,  2049, 12884,  2389,  5662,  2011,  2070,  3722,
        13792,  2649,  1999,  1996,  2206,  1012,  2005,  2023,  1010,  2057,
         5136,  2093,  3572,  5834,  2006,  3251,  2151,  1997,  1996, 12542,
        16648, 23750,  3973,  9377,  2030,  2025,  1012,   102])"
959,1,"['interval', 'method', 'greatest common divisor', 'algorithm']", Converting Nonrepeating Decimals to Fractions,seg_227,"suppose we have a non-repeating decimal number. how do we convert it into the equivalent fractional form p/q? as the trailing decimal digits do not repeat, multiply the decimal number by an appropriate power of 10 (say m = 10k) to remove all decimal places. let the number after multiplication be n. find the greatest common divisor (gcd) of m and n (say p = gcd(m, n)). if p ≠ 1 and p ≠ n, divide both m and n by p to get the answer. this method will work only when the number (n) is divisible by 2, 5, or their multiples (such as 4, 10, and so on.). we can only give approximate result when the trailing decimal digits cyclically repeat over a wide interval. we summarize it as an algorithm for positive fraction in the following. extension to negative fractions is straightforward. line 6 in the listing means that the result is returned in the form p/q.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  6814,  2057,  2031,  1037,  2512,  1011, 15192, 26066,  2193,
         1012,  2129,  2079,  2057, 10463,  2009,  2046,  1996,  5662, 12884,
         2389,  2433,  1052,  1013,  1053,  1029,  2004,  1996, 12542, 26066,
        16648,  2079,  2025,  9377,  1010,  4800, 22086,  1996, 26066,  2193,
         2011,  2019,  6413,  2373,  1997,  2184,  1006,  2360,  1049,  1027,
         2184,  2243,  1007,  2000,  6366,  2035, 26066,  3182,  1012,  2292,
         1996,  2193,  2044, 24856,  2022,  1050,  1012,  2424,  1996,  4602,
         2691,  4487, 11365,  2953,  1006,  1043, 19797,  1007,  1997,  1049,
         1998,  1050,  1006,  2360,  1052,  1027,  1043, 19797,  1006,  1049,
         1010,  1050,  1007,  1007,  1012,  2065,  1052,  1027,  1015,  1998,
         1052,  1027,  1050,  1010, 11443,  2119,  1049,  1998,  1050,  2011,
         1052,  2000,  2131,  1996,  3437,  1012,  2023,  4118,  2097,  2147,
         2069,  2043,  1996,  2193,  1006,  1050,  1007,  2003,  4487, 11365,
         7028,  2011,  1016,  1010,  1019,  1010,  2030,  2037,  3674,  2015,
         1006,  2107,  2004,  1018,  1010,  2184,  1010,  1998,  2061,  2006,
         1012,  1007,  1012,  2057,  2064,  2069,  2507, 15796,  2765,  2043,
         1996, 12542, 26066, 16648, 23750,  3973,  9377,  2058,  1037,  2898,
        13483,  1012,  2057,  7680,  7849,  4697,  2009,  2004,  2019,  9896,
         2005,  3893, 12884,  1999,  1996,  2206,  1012,  5331,  2000,  4997,
        12884,  2015,  2003, 19647,  1012,  2240,  1020,  1999,  1996, 10328,
         2965,  2008,  1996,  2765,  2003,  2513,  1999,  1996,  2433,  1052,
         1013,  1053,  1012,   102])"
960,0,[], Converting Nonrepeating Decimals to Fractions,seg_227,example 5.1 decimal to fractional form example-1,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2742,  1019,  1012,  1015, 26066,  2000, 12884,  2389,  2433,
         2742,  1011,  1015,   102])"
961,1,['probabilities'], Converting Nonrepeating Decimals to Fractions,seg_227,"express the following probabilities in fractional form p/q: (i) 0.18, (ii) 0.0015, (iii) 0.125, (iv) 0.29, (v) 0.032",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  4671,  1996,  2206,  4013,  3676, 14680,  1999, 12884,  2389,
         2433,  1052,  1013,  1053,  1024,  1006,  1045,  1007,  1014,  1012,
         2324,  1010,  1006,  2462,  1007,  1014,  1012, 25604,  2629,  1010,
         1006,  3523,  1007,  1014,  1012,  8732,  1010,  1006,  4921,  1007,
         1014,  1012,  2756,  1010,  1006,  1058,  1007,  1014,  1012,  6021,
         2475,   102])"
962,1,['case'], Converting Nonrepeating Decimals to Fractions,seg_227,"solution 5.1 we need to multiply 0.18 by 100 to discard all decimal digits. thus, n = 18,m = 100. the gcd(18,100) is 2. dividing both 18 and 100 by 2 gives the answer as 9/50. (ii) in this case, we have n = 15 and m = 10, 000. the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  5576,  1019,  1012,  1015,  2057,  2342,  2000,  4800, 22086,
         1014,  1012,  2324,  2011,  2531,  2000,  5860,  4232,  2035, 26066,
        16648,  1012,  2947,  1010,  1050,  1027,  2324,  1010,  1049,  1027,
         2531,  1012,  1996,  1043, 19797,  1006,  2324,  1010,  2531,  1007,
         2003,  1016,  1012, 16023,  2119,  2324,  1998,  2531,  2011,  1016,
         3957,  1996,  3437,  2004,  1023,  1013,  2753,  1012,  1006,  2462,
         1007,  1999,  2023,  2553,  1010,  2057,  2031,  1050,  1027,  2321,
         1998,  1049,  1027,  2184,  1010,  2199,  1012,  1996,   102])"
963,1,['case'], Converting Nonrepeating Decimals to Fractions,seg_227,"gcd(15,10,000)= 5. dividing both 15 and 10,000 by 5 gives the resulting fractional form as 3/2000. (iii) here n = 125,m = 1000, and gcd(125,1000)= 125. dividing by 125 gives the resulting fractional form as 1/8. (iv) here n = 29, m = 100, and gcd(29,100)= 1 (as 29 is a prime). hence, the resulting fractional form is 29/100. (v) in this case, we have n = 32 and m = 103 = 1000, gcd(32, 1000)= 8 giving the result 4/125.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1043, 19797,  1006,  2321,  1010,  2184,  1010,  2199,  1007,
         1027,  1019,  1012, 16023,  2119,  2321,  1998,  2184,  1010,  2199,
         2011,  1019,  3957,  1996,  4525, 12884,  2389,  2433,  2004,  1017,
         1013,  2456,  1012,  1006,  3523,  1007,  2182,  1050,  1027,  8732,
         1010,  1049,  1027,  6694,  1010,  1998,  1043, 19797,  1006,  8732,
         1010,  6694,  1007,  1027,  8732,  1012, 16023,  2011,  8732,  3957,
         1996,  4525, 12884,  2389,  2433,  2004,  1015,  1013,  1022,  1012,
         1006,  4921,  1007,  2182,  1050,  1027,  2756,  1010,  1049,  1027,
         2531,  1010,  1998,  1043, 19797,  1006,  2756,  1010,  2531,  1007,
         1027,  1015,  1006,  2004,  2756,  2003,  1037,  3539,  1007,  1012,
         6516,  1010,  1996,  4525, 12884,  2389,  2433,  2003,  2756,  1013,
         2531,  1012,  1006,  1058,  1007,  1999,  2023,  2553,  1010,  2057,
         2031,  1050,  1027,  3590,  1998,  1049,  1027,  9800,  1027,  6694,
         1010,  1043, 19797,  1006,  3590,  1010,  6694,  1007,  1027,  1022,
         3228,  1996,  2765,  1018,  1013,  8732,  1012,   102])"
964,0,[], Converting Nonrepeating Decimals to Fractions,seg_227,algorithm 5.1 convert a non-repeating decimal number into fractional form,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  9896,  1019,  1012,  1015, 10463,  1037,  2512,  1011, 15192,
        26066,  2193,  2046, 12884,  2389,  2433,   102])"
965,0,[], Converting Nonrepeating Decimals to Fractions,seg_227,1: input the decimal number into x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1015,  1024,  7953,  1996, 26066,  2193,  2046,  1060,   102])"
966,0,[], Converting Nonrepeating Decimals to Fractions,seg_227,2: count the total number of decimal places k in x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  2512,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1016,  1024,  4175,  1996,  2561,  2193,  1997, 26066,  3182,
         1047,  1999,  1060,   102])"
967,1,"['set', 'cases', 'case']", Converting Repeating Decimals to Fractions,seg_229,"this is more challenging than the nonrepeating case. here we consider two cases. in the first case, the repeating block starts as the very first digit. if a set of trailing digits repeat cyclically within a reasonable size, we identify the decimal number as p = 0.dd where d is the cyclically repeating part. as done earlier, we multiply it by m = 10k to move the decimal point to the right position of the last digit of the first repeating block (k is the size of the repeating block). let the resulting value be y = 10k ∗ p. compute z = y − p, which is devoid of fractions. now find r = gcd(z,m − 1). divide both z and m − 1 by r to get the desired fractional representation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2023,  2003,  2062, 10368,  2084,  1996,  2512,  2890,  5051,
         5844,  2553,  1012,  2182,  2057,  5136,  2048,  3572,  1012,  1999,
         1996,  2034,  2553,  1010,  1996, 15192,  3796,  4627,  2004,  1996,
         2200,  2034, 15340,  1012,  2065,  1037,  2275,  1997, 12542, 16648,
         9377, 23750,  3973,  2306,  1037,  9608,  2946,  1010,  2057,  6709,
         1996, 26066,  2193,  2004,  1052,  1027,  1014,  1012, 20315,  2073,
         1040,  2003,  1996, 23750,  3973, 15192,  2112,  1012,  2004,  2589,
         3041,  1010,  2057,  4800, 22086,  2009,  2011,  1049,  1027,  2184,
         2243,  2000,  2693,  1996, 26066,  2391,  2000,  1996,  2157,  2597,
         1997,  1996,  2197, 15340,  1997,  1996,  2034, 15192,  3796,  1006,
         1047,  2003,  1996,  2946,  1997,  1996, 15192,  3796,  1007,  1012,
         2292,  1996,  4525,  3643,  2022,  1061,  1027,  2184,  2243,  1598,
         1052,  1012, 24134,  1062,  1027,  1061,  1597,  1052,  1010,  2029,
         2003, 22808,  1997, 12884,  2015,  1012,  2085,  2424,  1054,  1027,
         1043, 19797,  1006,  1062,  1010,  1049,  1597,  1015,  1007,  1012,
        11443,  2119,  1062,  1998,  1049,  1597,  1015,  2011,  1054,  2000,
         2131,  1996,  9059, 12884,  2389,  6630,  1012,   102])"
968,0,[], Converting Repeating Decimals to Fractions,seg_229,example 5.2 decimal to fractional form example-2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2742,  1019,  1012,  1016, 26066,  2000, 12884,  2389,  2433,
         2742,  1011,  1016,   102])"
969,1,['probabilities'], Converting Repeating Decimals to Fractions,seg_229,"express the following probabilities in fractional form p/q: (i) 0.666, (ii) 0.1818, (iii) 0.315 315",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  4671,  1996,  2206,  4013,  3676, 14680,  1999, 12884,  2389,
         2433,  1052,  1013,  1053,  1024,  1006,  1045,  1007,  1014,  1012,
         5764,  2575,  1010,  1006,  2462,  1007,  1014,  1012, 12094,  1010,
         1006,  3523,  1007,  1014,  1012, 22904, 22904,   102])"
970,0,[], Converting Repeating Decimals to Fractions,seg_229,"solution 5.2 (i) let p = 0.666. here the first digit itself repeats indefinitely. hence d = 6 (repeating block), k = 1 (its size). multiply p by m = 10 to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  5576,  1019,  1012,  1016,  1006,  1045,  1007,  2292,  1052,
         1027,  1014,  1012,  5764,  2575,  1012,  2182,  1996,  2034, 15340,
         2993, 17993, 20733,  1012,  6516,  1040,  1027,  1020,  1006, 15192,
         3796,  1007,  1010,  1047,  1027,  1015,  1006,  2049,  2946,  1007,
         1012,  4800, 22086,  1052,  2011,  1049,  1027,  2184,  2000,  2131,
          102])"
971,1,['algorithm'], Converting Repeating Decimals to Fractions,seg_229,"y = 6.66. subtract p from y to get z = 6. as m − 1 = 9, r = gcd(z,m − 1) = gcd(6, 9) = 3. divide numerator and denominator by 3 to get the fractional equivalent as (6/3)/(9/3) = 2/3. this is of the form p/q without common factors. (ii) let p = 0.1818. here d = 18, k = 2, so that m = 100 (as there are two digits that cyclically repeats) and y = 18.1818. compute z = y − p = 18, and r = gcd(z,m − 1) = gcd(18, 99) = 9. divide both z and m − 1 by r to get p = 2∕11. (iii) here d = 315 repeats indefinitely. hence, we need to multiply by m = 103 = 1000 to move the decimal place. this gives z = 315,m = 1000, r = gcd(315, 999) = 9. the answer is (315/9)/(999/9)= 35/111. we give below an algorithm for this purpose.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1061,  1027,  1020,  1012,  5764,  1012,  4942,  6494,  6593,
         1052,  2013,  1061,  2000,  2131,  1062,  1027,  1020,  1012,  2004,
         1049,  1597,  1015,  1027,  1023,  1010,  1054,  1027,  1043, 19797,
         1006,  1062,  1010,  1049,  1597,  1015,  1007,  1027,  1043, 19797,
         1006,  1020,  1010,  1023,  1007,  1027,  1017,  1012, 11443, 16371,
         5017,  8844,  1998,  7939, 20936, 27413,  2011,  1017,  2000,  2131,
         1996, 12884,  2389,  5662,  2004,  1006,  1020,  1013,  1017,  1007,
         1013,  1006,  1023,  1013,  1017,  1007,  1027,  1016,  1013,  1017,
         1012,  2023,  2003,  1997,  1996,  2433,  1052,  1013,  1053,  2302,
         2691,  5876,  1012,  1006,  2462,  1007,  2292,  1052,  1027,  1014,
         1012, 12094,  1012,  2182,  1040,  1027,  2324,  1010,  1047,  1027,
         1016,  1010,  2061,  2008,  1049,  1027,  2531,  1006,  2004,  2045,
         2024,  2048, 16648,  2008, 23750,  3973, 17993,  1007,  1998,  1061,
         1027,  2324,  1012, 12094,  1012, 24134,  1062,  1027,  1061,  1597,
         1052,  1027,  2324,  1010,  1998,  1054,  1027,  1043, 19797,  1006,
         1062,  1010,  1049,  1597,  1015,  1007,  1027,  1043, 19797,  1006,
         2324,  1010,  5585,  1007,  1027,  1023,  1012, 11443,  2119,  1062,
         1998,  1049,  1597,  1015,  2011,  1054,  2000,  2131,  1052,  1027,
          100,  1012,  1006,  3523,  1007,  2182,  1040,  1027, 22904, 17993,
        20733,  1012,  6516,  1010,  2057,  2342,  2000,  4800, 22086,  2011,
         1049,  1027,  9800,  1027,  6694,  2000,  2693,  1996, 26066,  2173,
         1012,  2023,  3957,  1062,  1027, 22904,  1010,  1049,  1027,  6694,
         1010,  1054,  1027,  1043, 19797,  1006, 22904,  1010, 25897,  1007,
         1027,  1023,  1012,  1996,  3437,  2003,  1006, 22904,  1013,  1023,
         1007,  1013,  1006, 25897,  1013,  1023,  1007,  1027,  3486,  1013,
        11118,  1012,  2057,  2507,  2917,  2019,  9896,  2005,  2023,  3800,
         1012,   102])"
972,0,[], Converting Repeating Decimals to Fractions,seg_229,algorithm 5.2 convert a repeating decimal number into fractional form,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  9896,  1019,  1012,  1016, 10463,  1037, 15192, 26066,  2193,
         2046, 12884,  2389,  2433,   102])"
973,0,[], Converting Repeating Decimals to Fractions,seg_229,1: input the decimal number into x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1015,  1024,  7953,  1996, 26066,  2193,  2046,  1060,   102])"
974,0,[], Converting Repeating Decimals to Fractions,seg_229,{∗ assumption: blocks of digits repeat starting with the first digit ∗},tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1063,  1598, 11213,  1024,  5991,  1997, 16648,  9377,  3225,
         2007,  1996,  2034, 15340,  1598,  1065,   102])"
975,0,[], Converting Repeating Decimals to Fractions,seg_229,2: count the total number of decimal places k in x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1016,  1024,  4175,  1996,  2561,  2193,  1997, 26066,  3182,
         1047,  1999,  1060,   102])"
976,0,[], Converting Repeating Decimals to Fractions,seg_229,3: find the repeating cycle length k in x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1017,  1024,  2424,  1996, 15192,  5402,  3091,  1047,  1999,
         1060,   102])"
977,0,[], Converting Repeating Decimals to Fractions,seg_229,4: multiply x by 10k to make it an integer followed by a fraction (say y),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1018,  1024,  4800, 22086,  1060,  2011,  2184,  2243,  2000,
         2191,  2009,  2019, 16109,  2628,  2011,  1037, 12884,  1006,  2360,
         1061,  1007,   102])"
978,0,[], Converting Repeating Decimals to Fractions,seg_229,5: subtract x from y to get an integer z,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401, 15192, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1019,  1024,  4942,  6494,  6593,  1060,  2013,  1061,  2000,
         2131,  2019, 16109,  1062,   102])"
979,1,['case'], Converting TailRepeating Decimals to Fractions,seg_231,"this is a variant of the aforementioned in which the trailing digits repeat cyclically, after a nonrepeating block of digits. this is the hardest case to consider. we identify the decimal number as p = 0. d1dd where d1 is the non-repeating part and d is the cyclically repeating part. note that d1 can be a single digit or zero too (as in 0.633, 0.01515). as done earlier, we multiply p by m = 10n (where n is the number of digits in d1) to move the decimal point to the right position of the last digit of d1. let y = p ∗ 10n. next multiply y by 10k to move the decimal point to the right position of the first block of repeating digits and store it in z. then q = z − y is devoid of fractions. next find r = gcd(q, 10n(10k − 1)). divide both q and 10n(10k − 1) by r to get the desired fractional representation. these are explained in the following sections.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2023,  2003,  1037,  8349,  1997,  1996, 17289,  1999,  2029,
         1996, 12542, 16648,  9377, 23750,  3973,  1010,  2044,  1037,  2512,
         2890,  5051,  5844,  3796,  1997, 16648,  1012,  2023,  2003,  1996,
        18263,  2553,  2000,  5136,  1012,  2057,  6709,  1996, 26066,  2193,
         2004,  1052,  1027,  1014,  1012,  1040,  2487, 14141,  2073,  1040,
         2487,  2003,  1996,  2512,  1011, 15192,  2112,  1998,  1040,  2003,
         1996, 23750,  3973, 15192,  2112,  1012,  3602,  2008,  1040,  2487,
         2064,  2022,  1037,  2309, 15340,  2030,  5717,  2205,  1006,  2004,
         1999,  1014,  1012,  6191,  2509,  1010,  1014,  1012,  5890, 22203,
         2629,  1007,  1012,  2004,  2589,  3041,  1010,  2057,  4800, 22086,
         1052,  2011,  1049,  1027,  2184,  2078,  1006,  2073,  1050,  2003,
         1996,  2193,  1997, 16648,  1999,  1040,  2487,  1007,  2000,  2693,
         1996, 26066,  2391,  2000,  1996,  2157,  2597,  1997,  1996,  2197,
        15340,  1997,  1040,  2487,  1012,  2292,  1061,  1027,  1052,  1598,
         2184,  2078,  1012,  2279,  4800, 22086,  1061,  2011,  2184,  2243,
         2000,  2693,  1996, 26066,  2391,  2000,  1996,  2157,  2597,  1997,
         1996,  2034,  3796,  1997, 15192, 16648,  1998,  3573,  2009,  1999,
         1062,  1012,  2059,  1053,  1027,  1062,  1597,  1061,  2003, 22808,
         1997, 12884,  2015,  1012,  2279,  2424,  1054,  1027,  1043, 19797,
         1006,  1053,  1010,  2184,  2078,  1006,  2184,  2243,  1597,  1015,
         1007,  1007,  1012, 11443,  2119,  1053,  1998,  2184,  2078,  1006,
         2184,  2243,  1597,  1015,  1007,  2011,  1054,  2000,  2131,  1996,
         9059, 12884,  2389,  6630,  1012,  2122,  2024,  4541,  1999,  1996,
         2206,  5433,  1012,   102])"
980,1,['tail'], Converting TailRepeating Decimals to Fractions,seg_231,algorithm 5.3 convert tail repeating decimal into a fraction,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  9896,  1019,  1012,  1017, 10463,  5725, 15192, 26066,  2046,
         1037, 12884,   102])"
981,0,[], Converting TailRepeating Decimals to Fractions,seg_231,1: input the decimal number into x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1015,  1024,  7953,  1996, 26066,  2193,  2046,  1060,   102])"
982,0,[], Converting TailRepeating Decimals to Fractions,seg_231,{∗ assumption: blocks of digits repeat after a non-repeating block ∗},tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1063,  1598, 11213,  1024,  5991,  1997, 16648,  9377,  2044,
         1037,  2512,  1011, 15192,  3796,  1598,  1065,   102])"
983,0,['n'], Converting TailRepeating Decimals to Fractions,seg_231,"2: find the repeating cycle length k in x, and non-repeating block length n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1016,  1024,  2424,  1996, 15192,  5402,  3091,  1047,  1999,
         1060,  1010,  1998,  2512,  1011, 15192,  3796,  3091,  1050,   102])"
984,0,[], Converting TailRepeating Decimals to Fractions,seg_231,3: multiply x by 10n to make it an integer followed by a repeating fraction (say y),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1017,  1024,  4800, 22086,  1060,  2011,  2184,  2078,  2000,
         2191,  2009,  2019, 16109,  2628,  2011,  1037, 15192, 12884,  1006,
         2360,  1061,  1007,   102])"
985,0,[], Converting TailRepeating Decimals to Fractions,seg_231,4: multiply y by 10k to make it an integer followed by a fraction (say z),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1018,  1024,  4800, 22086,  1061,  2011,  2184,  2243,  2000,
         2191,  2009,  2019, 16109,  2628,  2011,  1037, 12884,  1006,  2360,
         1062,  1007,   102])"
986,0,[], Converting TailRepeating Decimals to Fractions,seg_231,5: subtract y from z to get an integer q,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1019,  1024,  4942,  6494,  6593,  1061,  2013,  1062,  2000,
         2131,  2019, 16109,  1053,   102])"
987,0,[], Converting TailRepeating Decimals to Fractions,seg_231,example 5.3 decimal to fractional form example-3,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2742,  1019,  1012,  1017, 26066,  2000, 12884,  2389,  2433,
         2742,  1011,  1017,   102])"
988,1,['probabilities'], Converting TailRepeating Decimals to Fractions,seg_231,"convert the following probabilities (i) 0.6333 (ii) 0.21515, (iii) 0.0571428 571428 into the form p/q.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101, 10463,  1996,  2206,  4013,  3676, 14680,  1006,  1045,  1007,
         1014,  1012,  6191, 22394,  1006,  2462,  1007,  1014,  1012, 17405,
        16068,  1010,  1006,  3523,  1007,  1014,  1012,  5709,  2581, 16932,
        22407,  5401, 16932, 22407,  2046,  1996,  2433,  1052,  1013,  1053,
         1012,   102])"
989,1,['case'], Converting TailRepeating Decimals to Fractions,seg_231,"solution 5.3 let x = 0.6333. as the nonrepeating block is of size 1, first multiply x by 10 to get y = 6.333, then multiply y by 10 to get z = 63.33. subtract y from z to get q = 63 − 6 = 57. find r = gcd(57, 10 ∗ (10 − 1)) = gcd(57, 90) = 3. divide both 57 and 90 by 3 to get p = (57∕3)∕(90∕3) = 19∕30. in part (ii) p = 0.21515. here repeating cycle length is k= 2 digits, and nonrepeating block size is n = 1 so that 10k = 100, 10k+n = 1000, and [10n(10k − 1)] = 990. this gives q = 215 − 2 = 213. form the fraction p = 213∕990. find the gcd as m = gcd(213, 990) = 3. divide both the numerator and denominator of p by 3 to get the required answer p = 71∕330. in case (iii), we have k = 6 and n = 1, so that 10k = 1000000, and [10n(10k − 1)] = 9999900. this gives q = 571428, and p = 571428∕9999900. next, we need to find the gcd(571428,9999900). we write 571428 = 22 ∗ 33 ∗ 11 ∗ 13 ∗ 37 and 9999900 = 22 ∗ 32 ∗ 52 ∗ 37, from which the gcd is 2857140. divide both the numerator and denominator of p by 2857140 to get the required answer p = 2∕35.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  5576,  1019,  1012,  1017,  2292,  1060,  1027,  1014,  1012,
         6191, 22394,  1012,  2004,  1996,  2512,  2890,  5051,  5844,  3796,
         2003,  1997,  2946,  1015,  1010,  2034,  4800, 22086,  1060,  2011,
         2184,  2000,  2131,  1061,  1027,  1020,  1012, 21211,  1010,  2059,
         4800, 22086,  1061,  2011,  2184,  2000,  2131,  1062,  1027,  6191,
         1012,  3943,  1012,  4942,  6494,  6593,  1061,  2013,  1062,  2000,
         2131,  1053,  1027,  6191,  1597,  1020,  1027,  5401,  1012,  2424,
         1054,  1027,  1043, 19797,  1006,  5401,  1010,  2184,  1598,  1006,
         2184,  1597,  1015,  1007,  1007,  1027,  1043, 19797,  1006,  5401,
         1010,  3938,  1007,  1027,  1017,  1012, 11443,  2119,  5401,  1998,
         3938,  2011,  1017,  2000,  2131,  1052,  1027,  1006,   100,  1007,
          100,  1006,   100,  1007,  1027,   100,  1012,  1999,  2112,  1006,
         2462,  1007,  1052,  1027,  1014,  1012, 17405, 16068,  1012,  2182,
        15192,  5402,  3091,  2003,  1047,  1027,  1016, 16648,  1010,  1998,
         2512,  2890,  5051,  5844,  3796,  2946,  2003,  1050,  1027,  1015,
         2061,  2008,  2184,  2243,  1027,  2531,  1010,  2184,  2243,  1009,
         1050,  1027,  6694,  1010,  1998,  1031,  2184,  2078,  1006,  2184,
         2243,  1597,  1015,  1007,  1033,  1027,  5585,  2692,  1012,  2023,
         3957,  1053,  1027, 17405,  1597,  1016,  1027, 19883,  1012,  2433,
         1996, 12884,  1052,  1027,   100,  1012,  2424,  1996,  1043, 19797,
         2004,  1049,  1027,  1043, 19797,  1006, 19883,  1010,  5585,  2692,
         1007,  1027,  1017,  1012, 11443,  2119,  1996, 16371,  5017,  8844,
         1998,  7939, 20936, 27413,  1997,  1052,  2011,  1017,  2000,  2131,
         1996,  3223,  3437,  1052,  1027,   100,  1012,  1999,  2553,  1006,
         3523,  1007,  1010,  2057,  2031,  1047,  1027,  1020,  1998,  1050,
         1027,  1015,  1010,  2061,  2008,  2184,  2243,  1027,  6694,  8889,
         2692,  1010,  1998,  1031,  2184,  2078,  1006,  2184,  2243,  1597,
         1015,  1007,  1033,  1027, 25897,  2683, 21057,  2692,  1012,  2023,
         3957,  1053,  1027,  5401, 16932, 22407,  1010,  1998,  1052,  1027,
          100,  1012,  2279,  1010,  2057,  2342,  2000,  2424,  1996,  1043,
        19797,  1006,  5401, 16932, 22407,  1010, 25897,  2683, 21057,  2692,
         1007,  1012,  2057,  4339,  5401, 16932, 22407,  1027,  2570,  1598,
         3943,  1598,  2340,  1598,  2410,  1598,  4261,  1998, 25897,  2683,
        21057,  2692,  1027,  2570,  1598,  3590,  1598,  4720,  1598,  4261,
         1010,  2013,  2029,  1996,  1043, 19797,  2003, 21777,  2581, 16932,
         2692,  1012, 11443,  2119,  1996, 16371,  5017,  8844,  1998,  7939,
        20936, 27413,  1997,  1052,  2011, 21777,  2581, 16932,  2692,  2000,
         2131,  1996,  3223,  3437,  1052,  1027,   100,  1012,   102])"
990,0,[], Converting TailRepeating Decimals to Fractions,seg_231,example 5.4 repeating decimals to fractional form,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2742,  1019,  1012,  1018, 15192, 26066,  2015,  2000, 12884,
         2389,  2433,   102])"
991,1,['probabilities'], Converting TailRepeating Decimals to Fractions,seg_231,"convert the probabilities (i) 0.01515, (ii) 0.006363 into fractional form.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101, 10463,  1996,  4013,  3676, 14680,  1006,  1045,  1007,  1014,
         1012,  5890, 22203,  2629,  1010,  1006,  2462,  1007,  1014,  1012,
         4002,  2575, 21619,  2509,  2046, 12884,  2389,  2433,  1012,   102])"
992,1,['case'], Converting TailRepeating Decimals to Fractions,seg_231,"solution 5.4 let x = 0.01515. here the repeating cycle length is k= 2 digits, and n= 1 so that 10k = 100 and 10n(10k − 1) = 990. multiply x by 10n to make it an integer (in this case 0) followed by a fraction as y= 0.1515. next multiply y by 10k to make it an integer (in this case 15) followed by a fraction as z = 10k+n ∗ x = 0.1515 ∗ 100 = 15.1515. now subtract y from z to get an integer q=z−y = 15.1515 − 0.1515 = 15. form the fraction p = q/[10n(10k − 1)] = 15/990. find the gcd of z and 10n(10k − 1) as m = gcd(z, 10n(10k − 1)) = gcd(15,990)= 15. finally, divide both the numerator and denominator of p by 15 to get the required answer p= 1/66. (ii) here also k= 2 digits, so that 10k = 100. proceed as earlier and find the gcd of 63 and 99 as gcd(63,99) = 9. divide both 63 and 99 by 9 to get the answer 7/11.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  5576,  1019,  1012,  1018,  2292,  1060,  1027,  1014,  1012,
         5890, 22203,  2629,  1012,  2182,  1996, 15192,  5402,  3091,  2003,
         1047,  1027,  1016, 16648,  1010,  1998,  1050,  1027,  1015,  2061,
         2008,  2184,  2243,  1027,  2531,  1998,  2184,  2078,  1006,  2184,
         2243,  1597,  1015,  1007,  1027,  5585,  2692,  1012,  4800, 22086,
         1060,  2011,  2184,  2078,  2000,  2191,  2009,  2019, 16109,  1006,
         1999,  2023,  2553,  1014,  1007,  2628,  2011,  1037, 12884,  2004,
         1061,  1027,  1014,  1012, 16528,  2629,  1012,  2279,  4800, 22086,
         1061,  2011,  2184,  2243,  2000,  2191,  2009,  2019, 16109,  1006,
         1999,  2023,  2553,  2321,  1007,  2628,  2011,  1037, 12884,  2004,
         1062,  1027,  2184,  2243,  1009,  1050,  1598,  1060,  1027,  1014,
         1012, 16528,  2629,  1598,  2531,  1027,  2321,  1012, 16528,  2629,
         1012,  2085,  4942,  6494,  6593,  1061,  2013,  1062,  2000,  2131,
         2019, 16109,  1053,  1027,  1062, 22543,  2100,  1027,  2321,  1012,
        16528,  2629,  1597,  1014,  1012, 16528,  2629,  1027,  2321,  1012,
         2433,  1996, 12884,  1052,  1027,  1053,  1013,  1031,  2184,  2078,
         1006,  2184,  2243,  1597,  1015,  1007,  1033,  1027,  2321,  1013,
         5585,  2692,  1012,  2424,  1996,  1043, 19797,  1997,  1062,  1998,
         2184,  2078,  1006,  2184,  2243,  1597,  1015,  1007,  2004,  1049,
         1027,  1043, 19797,  1006,  1062,  1010,  2184,  2078,  1006,  2184,
         2243,  1597,  1015,  1007,  1007,  1027,  1043, 19797,  1006,  2321,
         1010,  5585,  2692,  1007,  1027,  2321,  1012,  2633,  1010, 11443,
         2119,  1996, 16371,  5017,  8844,  1998,  7939, 20936, 27413,  1997,
         1052,  2011,  2321,  2000,  2131,  1996,  3223,  3437,  1052,  1027,
         1015,  1013,  5764,  1012,  1006,  2462,  1007,  2182,  2036,  1047,
         1027,  1016, 16648,  1010,  2061,  2008,  2184,  2243,  1027,  2531,
         1012, 10838,  2004,  3041,  1998,  2424,  1996,  1043, 19797,  1997,
         6191,  1998,  5585,  2004,  1043, 19797,  1006,  6191,  1010,  5585,
         1007,  1027,  1023,  1012, 11443,  2119,  6191,  1998,  5585,  2011,
         1023,  2000,  2131,  1996,  3437,  1021,  1013,  2340,  1012,   102])"
993,1,"['cases', 'algorithm']", Converting TailRepeating Decimals to Fractions,seg_231,"we could improve upon our gcd in some particular cases. for example, if q is an odd number, gcd(q, [10n(10k − 1)]) is the same as gcd(q, [(10k − 1)]). if the nonzero digits in the nonrepeating block is an exact divisor of the repeating block, we could reduce it to the above-mentioned form. consider x = 0.00021 4242, in which the nonrepeating block has a 21, which divides the repeating block 42 42. this reduces to x = 0.0000102020 in which the nonrepeating block has nonzero digit as a single 1, and the repeating block is “02” of length 2 (or nonrepeating block “10” followed by repeating digits “20”). when there are several leading zeros in the nonrepeating block as in this example, we could consider the nonrepeating block as the nonzero digits (by simply sliding the decimal place over all zeros) and make a final adjustment to the result. this is described in the following algorithm.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2057,  2071,  5335,  2588,  2256,  1043, 19797,  1999,  2070,
         3327,  3572,  1012,  2005,  2742,  1010,  2065,  1053,  2003,  2019,
         5976,  2193,  1010,  1043, 19797,  1006,  1053,  1010,  1031,  2184,
         2078,  1006,  2184,  2243,  1597,  1015,  1007,  1033,  1007,  2003,
         1996,  2168,  2004,  1043, 19797,  1006,  1053,  1010,  1031,  1006,
         2184,  2243,  1597,  1015,  1007,  1033,  1007,  1012,  2065,  1996,
         2512,  6290,  2080, 16648,  1999,  1996,  2512,  2890,  5051,  5844,
         3796,  2003,  2019,  6635,  4487, 11365,  2953,  1997,  1996, 15192,
         3796,  1010,  2057,  2071,  5547,  2009,  2000,  1996,  2682,  1011,
         3855,  2433,  1012,  5136,  1060,  1027,  1014,  1012,  2199, 17465,
         4413, 20958,  1010,  1999,  2029,  1996,  2512,  2890,  5051,  5844,
         3796,  2038,  1037,  2538,  1010,  2029, 20487,  1996, 15192,  3796,
         4413,  4413,  1012,  2023, 13416,  2000,  1060,  1027,  1014,  1012,
         2199, 24096,  2692, 11387, 11387,  1999,  2029,  1996,  2512,  2890,
         5051,  5844,  3796,  2038,  2512,  6290,  2080, 15340,  2004,  1037,
         2309,  1015,  1010,  1998,  1996, 15192,  3796,  2003,  1523,  6185,
         1524,  1997,  3091,  1016,  1006,  2030,  2512,  2890,  5051,  5844,
         3796,  1523,  2184,  1524,  2628,  2011, 15192, 16648,  1523,  2322,
         1524,  1007,  1012,  2043,  2045,  2024,  2195,  2877,  5717,  2015,
         1999,  1996,  2512,  2890,  5051,  5844,  3796,  2004,  1999,  2023,
         2742,  1010,  2057,  2071,  5136,  1996,  2512,  2890,  5051,  5844,
         3796,  2004,  1996,  2512,  6290,  2080, 16648,  1006,  2011,  3432,
         8058,  1996, 26066,  2173,  2058,  2035,  5717,  2015,  1007,  1998,
         2191,  1037,  2345, 19037,  2000,  1996,  2765,  1012,  2023,  2003,
         2649,  1999,  1996,  2206,  9896,  1012,   102])"
994,1,['tail'], Converting TailRepeating Decimals to Fractions,seg_231,algorithm 5.4 tail repeating decimal with many leading zeros into p/q form,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  9896,  1019,  1012,  1018,  5725, 15192, 26066,  2007,  2116,
         2877,  5717,  2015,  2046,  1052,  1013,  1053,  2433,   102])"
995,0,[], Converting TailRepeating Decimals to Fractions,seg_231,1: input the decimal number into x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1015,  1024,  7953,  1996, 26066,  2193,  2046,  1060,   102])"
996,0,[], Converting TailRepeating Decimals to Fractions,seg_231,"{∗ assumption: blocks of digits repeat after a non-repeating block, the first few of",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1063,  1598, 11213,  1024,  5991,  1997, 16648,  9377,  2044,
         1037,  2512,  1011, 15192,  3796,  1010,  1996,  2034,  2261,  1997,
          102])"
997,0,[], Converting TailRepeating Decimals to Fractions,seg_231,"2: find the repeating cycle length k in x, and block size of leading zeros of length",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1016,  1024,  2424,  1996, 15192,  5402,  3091,  1047,  1999,
         1060,  1010,  1998,  3796,  2946,  1997,  2877,  5717,  2015,  1997,
         3091,   102])"
998,0,['n'], Converting TailRepeating Decimals to Fractions,seg_231,"m, and non-repeating nonzero-digit block of length n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1049,  1010,  1998,  2512,  1011, 15192,  2512,  6290,  2080,
         1011, 15340,  3796,  1997,  3091,  1050,   102])"
999,0,[], Converting TailRepeating Decimals to Fractions,seg_231,3: multiply x by 10m to move the decimal place over the zeros (say y),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1017,  1024,  4800, 22086,  1060,  2011,  2184,  2213,  2000,
         2693,  1996, 26066,  2173,  2058,  1996,  5717,  2015,  1006,  2360,
         1061,  1007,   102])"
1000,0,[], Converting TailRepeating Decimals to Fractions,seg_231,4: multiply y by 10n to make it an integer followed by a repeating fraction (say z),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1018,  1024,  4800, 22086,  1061,  2011,  2184,  2078,  2000,
         2191,  2009,  2019, 16109,  2628,  2011,  1037, 15192, 12884,  1006,
         2360,  1062,  1007,   102])"
1001,0,[], Converting TailRepeating Decimals to Fractions,seg_231,5: multiply z by 10k to make it an integer followed by a fraction (say t),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1019,  1024,  4800, 22086,  1062,  2011,  2184,  2243,  2000,
         2191,  2009,  2019, 16109,  2628,  2011,  1037, 12884,  1006,  2360,
         1056,  1007,   102])"
1002,0,[], Converting TailRepeating Decimals to Fractions,seg_231,6: subtract z from t to get an integer q,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1020,  1024,  4942,  6494,  6593,  1062,  2013,  1056,  2000,
         2131,  2019, 16109,  1053,   102])"
1003,1,['tail'], Converting TailRepeating Decimals to Fractions,seg_231,example 5.5 tail repeating decimal to fractional form,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2742,  1019,  1012,  1019,  5725, 15192, 26066,  2000, 12884,
         2389,  2433,   102])"
1004,0,[], Converting TailRepeating Decimals to Fractions,seg_231,convert the decimal 0.00022 4545 to fractional form.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101, 10463,  1996, 26066,  1014,  1012,  2199, 19317,  3429, 19961,
         2000, 12884,  2389,  2433,  1012,   102])"
1005,0,['n'], Converting TailRepeating Decimals to Fractions,seg_231,"solution 5.5 here repeating block is of length k= 2, nonrepeating block is of length n= 2 (5–“3 zeros”), and m is 3 (as there are three leading zeros). first multiply x by 10m. we have 10k = 100, 10k+n = 10, 000, and 10n(10k − 1) = 9900. this gives q = 2245 − 22 = 2223, and p= 2223/9900000. next, find m=gcd(2223, 9900000)= 9. dividing both the numerator and denominator of p by 9 gives p = 247∕1100000, which is the required answer.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  5576,  1019,  1012,  1019,  2182, 15192,  3796,  2003,  1997,
         3091,  1047,  1027,  1016,  1010,  2512,  2890,  5051,  5844,  3796,
         2003,  1997,  3091,  1050,  1027,  1016,  1006,  1019,  1516,  1523,
         1017,  5717,  2015,  1524,  1007,  1010,  1998,  1049,  2003,  1017,
         1006,  2004,  2045,  2024,  2093,  2877,  5717,  2015,  1007,  1012,
         2034,  4800, 22086,  1060,  2011,  2184,  2213,  1012,  2057,  2031,
         2184,  2243,  1027,  2531,  1010,  2184,  2243,  1009,  1050,  1027,
         2184,  1010,  2199,  1010,  1998,  2184,  2078,  1006,  2184,  2243,
         1597,  1015,  1007,  1027,  5585,  8889,  1012,  2023,  3957,  1053,
         1027, 19711,  2629,  1597,  2570,  1027, 19015,  2509,  1010,  1998,
         1052,  1027, 19015,  2509,  1013,  5585,  8889,  8889,  2692,  1012,
         2279,  1010,  2424,  1049,  1027,  1043, 19797,  1006, 19015,  2509,
         1010,  5585,  8889,  8889,  2692,  1007,  1027,  1023,  1012, 16023,
         2119,  1996, 16371,  5017,  8844,  1998,  7939, 20936, 27413,  1997,
         1052,  2011,  1023,  3957,  1052,  1027,   100,  1010,  2029,  2003,
         1996,  3223,  3437,  1012,   102])"
1006,0,[], Converting TailRepeating Decimals to Fractions,seg_231,"the repeating block may be too long for some fractions, especially involving ratios of primes. consider 2/17= 0.1176470588235294 117.., which repeats itself after 16 decimal places. similarly, there are many fractions for which the cycle of digits repeats well beyond the calculator display. consider 7/29 = 0.2413 7931 0344 8275 8620 6896 5517 241, and so on, which repeats after 28 decimal places! (they are in general of the form k/(k*n+ 1) with cycle block size k*n). we could either approximate such decimals or employ other algorithms.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  1996, 15192,  3796,  2089,  2022,  2205,  2146,  2005,  2070,
        12884,  2015,  1010,  2926,  5994, 21879,  1997,  3539,  2015,  1012,
         5136,  1016,  1013,  2459,  1027,  1014,  1012, 12567, 21084, 19841,
        27814,  2620, 21926, 25746,  2683,  2549, 12567,  1012,  1012,  1010,
         2029, 17993,  2993,  2044,  2385, 26066,  3182,  1012,  6660,  1010,
         2045,  2024,  2116, 12884,  2015,  2005,  2029,  1996,  5402,  1997,
        16648, 17993,  2092,  3458,  1996, 10250, 19879,  4263,  4653,  1012,
         5136,  1021,  1013,  2756,  1027,  1014,  1012, 22343,  2509,  6535,
        21486,  6021, 22932,  6445, 23352,  6564, 11387,  6273,  2683,  2575,
         4583, 16576, 22343,  1010,  1998,  2061,  2006,  1010,  2029, 17993,
         2044,  2654, 26066,  3182,   999,  1006,  2027,  2024,  1999,  2236,
         1997,  1996,  2433,  1047,  1013,  1006,  1047,  1008,  1050,  1009,
         1015,  1007,  2007,  5402,  3796,  2946,  1047,  1008,  1050,  1007,
         1012,  2057,  2071,  2593, 15796,  2107, 26066,  2015,  2030, 12666,
         2060, 13792,  1012,   102])"
1007,1,"['approximation', 'case']", Converting TailRepeating Decimals to Fractions,seg_231,"if we truncate it at the wrong decimal place (say 8th or 16th place), the resulting fraction will not come even close to the true value (7/29 in the above-mentioned example). for example, truncating at second decimal place gives 6/25 and truncating at 12th decimal place gives 30172413793/125000000000. an astute reader will notice that our original digits are repeated after a nonrepeating block of length 4. this property can be used to approximate the fractional value using the second algorithm given earlier. this means that we may sometimes be able to approximate a nonrepeating decimal number (or a repeating decimal with a large cycle length) by dividing it by a small number. in the above-mentioned case, we get the approximation as 3017/12500 = 0.24136. this is correct to the fourth decimal place.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  2065,  2057, 19817,  4609, 16280,  2009,  2012,  1996,  3308,
        26066,  2173,  1006,  2360,  5893,  2030,  5767,  2173,  1007,  1010,
         1996,  4525, 12884,  2097,  2025,  2272,  2130,  2485,  2000,  1996,
         2995,  3643,  1006,  1021,  1013,  2756,  1999,  1996,  2682,  1011,
         3855,  2742,  1007,  1012,  2005,  2742,  1010, 19817,  4609, 18252,
         2012,  2117, 26066,  2173,  3957,  1020,  1013,  2423,  1998, 19817,
         4609, 18252,  2012,  5940, 26066,  2173,  3957, 19123,  2581, 18827,
        17134,  2581,  2683,  2509,  1013,  8732,  8889,  8889,  8889,  8889,
         2692,  1012,  2019,  2004, 24518,  8068,  2097,  5060,  2008,  2256,
         2434, 16648,  2024,  5567,  2044,  1037,  2512,  2890,  5051,  5844,
         3796,  1997,  3091,  1018,  1012,  2023,  3200,  2064,  2022,  2109,
         2000, 15796,  1996, 12884,  2389,  3643,  2478,  1996,  2117,  9896,
         2445,  3041,  1012,  2023,  2965,  2008,  2057,  2089,  2823,  2022,
         2583,  2000, 15796,  1037,  2512,  2890,  5051,  5844, 26066,  2193,
         1006,  2030,  1037, 15192, 26066,  2007,  1037,  2312,  5402,  3091,
         1007,  2011, 16023,  2009,  2011,  1037,  2235,  2193,  1012,  1999,
         1996,  2682,  1011,  3855,  2553,  1010,  2057,  2131,  1996, 20167,
         2004, 19123,  2581,  1013,  8732,  8889,  1027,  1014,  1012, 22343,
        21619,  1012,  2023,  2003,  6149,  2000,  1996,  2959, 26066,  2173,
         1012,   102])"
1008,1,"['locations', 'memory', 'method', 'data']", Converting TailRepeating Decimals to Fractions,seg_231,"assuming that all our decimal numbers are positive, we could store any decimal number in just two memory locations (one for storing p and the other for storing q). signed decimals need an extra 1 bit to store the sign as 0 for positive and 1 for negative. as an unsigned int type can store numbers between 0 and 65,535 in just 2 bytes of memory, we could represent a great majority of fractions that we encounter in practice using this method, provided that both the numerator and denominator are less than 65,536. we could use the unsigned long int data type (4 bytes of memory) when larger numbers are involved, as it can store up to 4,294,967,295.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101, 10262,  2008,  2035,  2256, 26066,  3616,  2024,  3893,  1010,
         2057,  2071,  3573,  2151, 26066,  2193,  1999,  2074,  2048,  3638,
         5269,  1006,  2028,  2005, 23977,  1052,  1998,  1996,  2060,  2005,
        23977,  1053,  1007,  1012,  2772, 26066,  2015,  2342,  2019,  4469,
         1015,  2978,  2000,  3573,  1996,  3696,  2004,  1014,  2005,  3893,
         1998,  1015,  2005,  4997,  1012,  2004,  2019, 27121, 20014,  2828,
         2064,  3573,  3616,  2090,  1014,  1998,  3515,  1010,  5187,  2629,
         1999,  2074,  1016, 27507,  1997,  3638,  1010,  2057,  2071,  5050,
         1037,  2307,  3484,  1997, 12884,  2015,  2008,  2057,  8087,  1999,
         3218,  2478,  2023,  4118,  1010,  3024,  2008,  2119,  1996, 16371,
         5017,  8844,  1998,  7939, 20936, 27413,  2024,  2625,  2084,  3515,
         1010,  5187,  2575,  1012,  2057,  2071,  2224,  1996, 27121,  2146,
        20014,  2951,  2828,  1006,  1018, 27507,  1997,  3638,  1007,  2043,
         3469,  3616,  2024,  2920,  1010,  2004,  2009,  2064,  3573,  2039,
         2000,  1018,  1010, 28135,  1010,  5986,  2581,  1010, 21679,  1012,
          102])"
1009,1,"['geometric probability', 'geometric', 'probability']", Converting TailRepeating Decimals to Fractions,seg_231,percentage form of probability is obtained by multiplying the decimal form by 100. these are usually used in conversations and correspondences. scientific form is preferred when a probability is too small with several leading zeros. the pictorial form is used in geometric probability problems.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([16401,  5725,  2890,  5051,  5844, 26066,  2015,  2000, 12884,  2015])","tensor([  101,  7017,  2433,  1997,  9723,  2003,  4663,  2011,  4800, 22086,
         2075,  1996, 26066,  2433,  2011,  2531,  1012,  2122,  2024,  2788,
         2109,  1999, 11450,  1998, 11061,  2015,  1012,  4045,  2433,  2003,
         6871,  2043,  1037,  9723,  2003,  2205,  2235,  2007,  2195,  2877,
         5717,  2015,  1012,  1996, 28304,  2433,  2003,  2109,  1999, 14965,
         9723,  3471,  1012,   102])"
1010,1,"['probability', 'experimental', 'experiments', 'statistics']", SAMPLE SPACE,seg_233,"random experiments are at the core of experimental probability. here, the word “ex- periment” has a different meaning in statistics than its literal meaning. a simple",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  6721,  7885,  2024,  2012,  1996,  4563,  1997,  6388,  9723,
         1012,  2182,  1010,  1996,  2773,  1523,  4654,  1011,  2566, 14428,
         3372,  1524,  2038,  1037,  2367,  3574,  1999,  6747,  2084,  2049,
        18204,  3574,  1012,  1037,  3722,   102])"
1011,1,"['observation', 'statistics', 'experiment']", SAMPLE SPACE,seg_233,"measurement of a physical or other characteristics of an object, a count of objects that satisfy one or more conditions, an observation of the duration of a phenomena (like the lifetime of a device) can all be considered as an experiment in statistics.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([7099, 2686])","tensor([  101, 10903,  1997,  1037,  3558,  2030,  2060,  6459,  1997,  2019,
         4874,  1010,  1037,  4175,  1997,  5200,  2008, 13225,  2028,  2030,
         2062,  3785,  1010,  2019,  8089,  1997,  1996,  9367,  1997,  1037,
        13352,  1006,  2066,  1996,  6480,  1997,  1037,  5080,  1007,  2064,
         2035,  2022,  2641,  2004,  2019,  7551,  1999,  6747,  1012,   102])"
1012,1,"['outcomes', 'random', 'experiments']", SAMPLE SPACE,seg_233,definition 5.3 random experiments are those that are repeated under identical conditions every time and always produce one among several outcomes.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([7099, 2686])","tensor([  101,  6210,  1019,  1012,  1017,  6721,  7885,  2024,  2216,  2008,
         2024,  5567,  2104,  7235,  3785,  2296,  2051,  1998,  2467,  3965,
         2028,  2426,  2195, 13105,  1012,   102])"
1013,1,"['vary', 'outcomes', 'factors', 'experiments', 'observation', 'trial', 'results', 'sample', 'random', 'levels', 'experiment', 'measurement', 'measurements']", SAMPLE SPACE,seg_233,"here, the clause “under identical conditions” needs some scrutiny. it only means that the conditions are replicable and statistically insignificant. for example, consider the measurement of the storage of water in a reservoir. if measurements are taken over a period of time (say on successive days or weekends), the conditions may not be exactly identical in the strict scientific sense. owing to the pull exerted by celestial bodies on the surface of the earth, the reservoir levels could go up when the moon has just passed overhead. this gravitational pull is more in the equatorial region when the moon and the sun are both oriented in more or less the same direction over the place of observation (this is why very high tides occur on some days), which is maximum during the closest approach of the moon to the earth. similarly, the amount of water evaporated depends on the day-time temperature, wind speed, humidity, and reservoir area among other things. it is our tacit assumption that random experiments are conducted in rapid succession or in short duration of time. extraneous factors, if any, that could affect the measurements should be accurately maintained in highly sensitive and time-dependent scientific experiments. these are often negligible when the sample is collected over a short duration. the purpose of an experiment could also be the identification of such differences (as in agricultural experiments). the qualifier “random” indicates that the outcomes are unpredictable until the results are observed. in other words, the results will vary from trial to trial even when the conditions of the experiment are the same.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  2182,  1010,  1996, 11075,  1523,  2104,  7235,  3785,  1524,
         3791,  2070, 17423,  1012,  2009,  2069,  2965,  2008,  1996,  3785,
         2024, 15059,  3468,  1998,  7778,  2135, 27018,  1012,  2005,  2742,
         1010,  5136,  1996, 10903,  1997,  1996,  5527,  1997,  2300,  1999,
         1037,  8071,  1012,  2065, 11702,  2024,  2579,  2058,  1037,  2558,
         1997,  2051,  1006,  2360,  2006, 11165,  2420,  2030, 13499,  1007,
         1010,  1996,  3785,  2089,  2025,  2022,  3599,  7235,  1999,  1996,
         9384,  4045,  3168,  1012, 11427,  2000,  1996,  4139,  4654, 28728,
         2011, 17617,  4230,  2006,  1996,  3302,  1997,  1996,  3011,  1010,
         1996,  8071,  3798,  2071,  2175,  2039,  2043,  1996,  4231,  2038,
         2074,  2979,  8964,  1012,  2023, 19790,  4139,  2003,  2062,  1999,
         1996, 21333,  2555,  2043,  1996,  4231,  1998,  1996,  3103,  2024,
         2119,  8048,  1999,  2062,  2030,  2625,  1996,  2168,  3257,  2058,
         1996,  2173,  1997,  8089,  1006,  2023,  2003,  2339,  2200,  2152,
        22487,  5258,  2006,  2070,  2420,  1007,  1010,  2029,  2003,  4555,
         2076,  1996,  7541,  3921,  1997,  1996,  4231,  2000,  1996,  3011,
         1012,  6660,  1010,  1996,  3815,  1997,  2300,  9345, 17822,  4383,
         9041,  2006,  1996,  2154,  1011,  2051,  4860,  1010,  3612,  3177,
         1010, 18213,  1010,  1998,  8071,  2181,  2426,  2060,  2477,  1012,
         2009,  2003,  2256, 11937, 26243, 11213,  2008,  6721,  7885,  2024,
         4146,  1999,  5915,  8338,  2030,  1999,  2460,  9367,  1997,  2051,
         1012,  4469, 23585,  2271,  5876,  1010,  2065,  2151,  1010,  2008,
         2071,  7461,  1996, 11702,  2323,  2022, 14125,  5224,  1999,  3811,
         7591,  1998,  2051,  1011,  7790,  4045,  7885,  1012,  2122,  2024,
         2411, 11265, 25394, 18507,  2043,  1996,  7099,  2003,  5067,  2058,
         1037,  2460,  9367,  1012,  1996,  3800,  1997,  2019,  7551,  2071,
         2036,  2022,  1996,  8720,  1997,  2107,  5966,  1006,  2004,  1999,
         4910,  7885,  1007,  1012,  1996, 10981,  1523,  6721,  1524,  7127,
         2008,  1996, 13105,  2024, 21446,  2127,  1996,  3463,  2024,  5159,
         1012,  1999,  2060,  2616,  1010,  1996,  3463,  2097,  8137,  2013,
         3979,  2000,  3979,  2130,  2043,  1996,  3785,  1997,  1996,  7551,
         2024,  1996,  2168,  1012,   102])"
1014,1,"['sample space', 'set', 'outcomes', 'sample', 'random', 'experiment']", SAMPLE SPACE,seg_233,definition 5.4 the set of all possible outcomes of a random experiment is called its sample space.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([7099, 2686])","tensor([  101,  6210,  1019,  1012,  1018,  1996,  2275,  1997,  2035,  2825,
        13105,  1997,  1037,  6721,  7551,  2003,  2170,  2049,  7099,  2686,
         1012,   102])"
1015,1,"['mean', 'complement', 'sample space', 'set', 'probability', 'event', 'sample', 'null set', 'complement of an event', 'arithmetic mean']", SAMPLE SPACE,seg_233,"the sample space itself is an event because it always occurs. by convention, it is indicated by the greek symbol ω (pronounced capital omega). its complement is denoted by ωc =   (the null set, pronounced small phi). the complement of an event x is denoted as x′ ,x, or xc. as x is used in subsequent chapters to denote the arithmetic mean, we will use xc for complement. the very first step in solving any probability problem is to identify the sample space. these are quite often easy to find. we illustrate it with various examples.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  1996,  7099,  2686,  2993,  2003,  2019,  2724,  2138,  2009,
         2467,  5158,  1012,  2011,  4680,  1010,  2009,  2003,  5393,  2011,
         1996,  3306,  6454,  1179,  1006,  8793,  3007, 14827,  1007,  1012,
         2049, 13711,  2003, 19537,  2011,  1179,  2278,  1027,  1006,  1996,
        19701,  2275,  1010,  8793,  2235, 13569,  1007,  1012,  1996, 13711,
         1997,  2019,  2724,  1060,  2003, 19537,  2004,  1060,  1531,  1010,
         1060,  1010,  2030,  1060,  2278,  1012,  2004,  1060,  2003,  2109,
         1999,  4745,  9159,  2000, 19090,  1996, 20204,  2812,  1010,  2057,
         2097,  2224,  1060,  2278,  2005, 13711,  1012,  1996,  2200,  2034,
         3357,  1999, 13729,  2151,  9723,  3291,  2003,  2000,  6709,  1996,
         7099,  2686,  1012,  2122,  2024,  3243,  2411,  3733,  2000,  2424,
         1012,  2057, 19141,  2009,  2007,  2536,  4973,  1012,   102])"
1016,1,"['sample', 'experiment', 'sample space']", SAMPLE SPACE,seg_233,example 5.6 sample space for simple experiment,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.])","tensor([7099, 2686])","tensor([ 101, 2742, 1019, 1012, 1020, 7099, 2686, 2005, 3722, 7551,  102])"
1017,1,"['sample space', 'sample', 'experiment']", SAMPLE SPACE,seg_233,what is the sample space of an experiment of throwing two fair coins?,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([ 101, 2054, 2003, 1996, 7099, 2686, 1997, 2019, 7551, 1997, 6886, 2048,
        4189, 7824, 1029,  102])"
1018,1,"['tail', 'sample', 'sample space']", SAMPLE SPACE,seg_233,"solution 5.6 denote a head turning up by h and a tail turning up by t. then, the sample space is {hh, ht, th, tt} where hh denotes that both throws resulted in heads, and so on. here “h” and “t” are simply labels. we could assign any",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  5576,  1019,  1012,  1020, 19090,  1037,  2132,  3810,  2039,
         2011,  1044,  1998,  1037,  5725,  3810,  2039,  2011,  1056,  1012,
         2059,  1010,  1996,  7099,  2686,  2003,  1063,  1044,  2232,  1010,
         1044,  2102,  1010, 16215,  1010, 23746,  1065,  2073,  1044,  2232,
        14796,  2008,  2119, 11618,  4504,  1999,  4641,  1010,  1998,  2061,
         2006,  1012,  2182,  1523,  1044,  1524,  1998,  1523,  1056,  1524,
         2024,  3432, 10873,  1012,  2057,  2071, 23911,  2151,   102])"
1019,1,"['tail', 'sample', 'sample space']", SAMPLE SPACE,seg_233,"label we wish (because the english letter h is a silent syllable in spanish (words) and is pronounced differently in greek, russian, etc.). for example, if head is denoted by a “1” and the tail by a “0,” our sample space becomes {11, 10, 01, 00}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  3830,  2057,  4299,  1006,  2138,  1996,  2394,  3661,  1044,
         2003,  1037,  4333, 16353,  1999,  3009,  1006,  2616,  1007,  1998,
         2003,  8793, 11543,  1999,  3306,  1010,  2845,  1010,  4385,  1012,
         1007,  1012,  2005,  2742,  1010,  2065,  2132,  2003, 19537,  2011,
         1037,  1523,  1015,  1524,  1998,  1996,  5725,  2011,  1037,  1523,
         1014,  1010,  1524,  2256,  7099,  2686,  4150,  1063,  2340,  1010,
         2184,  1010,  5890,  1010,  4002,  1065,  1012,   102])"
1020,0,[], SAMPLE SPACE,seg_233,example 5.7 circuits in series in a device,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([7099, 2686])","tensor([  101,  2742,  1019,  1012,  1021, 13782,  1999,  2186,  1999,  1037,
         5080,   102])"
1021,1,"['sample', 'sample space']", SAMPLE SPACE,seg_233,"there are two circuits in series in a device, both of which can be open or closed. identify the sample space when the device is turned on.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  2045,  2024,  2048, 13782,  1999,  2186,  1999,  1037,  5080,
         1010,  2119,  1997,  2029,  2064,  2022,  2330,  2030,  2701,  1012,
         6709,  1996,  7099,  2686,  2043,  1996,  5080,  2003,  2357,  2006,
         1012,   102])"
1022,0,[], SAMPLE SPACE,seg_233,"solution 5.7 denote the open circuit by a 0 and closed circuit by a 1. then, the possibilities are {00, 01, 10, 11} where 00 indicates that both circuits are open and 11 indicates that both are closed.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([7099, 2686])","tensor([  101,  5576,  1019,  1012,  1021, 19090,  1996,  2330,  4984,  2011,
         1037,  1014,  1998,  2701,  4984,  2011,  1037,  1015,  1012,  2059,
         1010,  1996, 12020,  2024,  1063,  4002,  1010,  5890,  1010,  2184,
         1010,  2340,  1065,  2073,  4002,  7127,  2008,  2119, 13782,  2024,
         2330,  1998,  2340,  7127,  2008,  2119,  2024,  2701,  1012,   102])"
1023,0,[], SAMPLE SPACE,seg_233,example 5.8 balls in urns,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([7099, 2686])","tensor([  101,  2742,  1019,  1012,  1022,  7395,  1999, 24471,  3619,   102])"
1024,1,"['sample', 'sample space']", SAMPLE SPACE,seg_233,find the sample space for (i) drawing two balls from an urn containing three red and two blue balls that are indistinguishable except for the color (ii) two throws of a dice that result in a sum of 10.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  2424,  1996,  7099,  2686,  2005,  1006,  1045,  1007,  5059,
         2048,  7395,  2013,  2019, 24471,  2078,  4820,  2093,  2417,  1998,
         2048,  2630,  7395,  2008,  2024, 27427,  2923,  2075, 27020, 25459,
         2571,  3272,  2005,  1996,  3609,  1006,  2462,  1007,  2048, 11618,
         1997,  1037, 18740,  2008,  2765,  1999,  1037,  7680,  1997,  2184,
         1012,   102])"
1025,1,"['cases', 'sample space', 'sample']", SAMPLE SPACE,seg_233,"solution 5.8 (i) denote the red ball by r and blue ball by b. the possible outcomes are {r, r}, {r, b}, {b, r}, {b, b}, (ii) denote the numbers on the die by {1, 2, 3, 4, 5, 6}. then the possible 36 values in the sample space are {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5},{1, 6}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, … , {5, 6}, and {6, 6}. here {1, 6} and {6, 1} are considered to be different, even if the two dice are thrown simultaneously. for part (ii), the favorable cases are {(5,5), (4,6), (6,4)}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7099, 2686])","tensor([  101,  5576,  1019,  1012,  1022,  1006,  1045,  1007, 19090,  1996,
         2417,  3608,  2011,  1054,  1998,  2630,  3608,  2011,  1038,  1012,
         1996,  2825, 13105,  2024,  1063,  1054,  1010,  1054,  1065,  1010,
         1063,  1054,  1010,  1038,  1065,  1010,  1063,  1038,  1010,  1054,
         1065,  1010,  1063,  1038,  1010,  1038,  1065,  1010,  1006,  2462,
         1007, 19090,  1996,  3616,  2006,  1996,  3280,  2011,  1063,  1015,
         1010,  1016,  1010,  1017,  1010,  1018,  1010,  1019,  1010,  1020,
         1065,  1012,  2059,  1996,  2825,  4029,  5300,  1999,  1996,  7099,
         2686,  2024,  1063,  1015,  1010,  1015,  1065,  1010,  1063,  1015,
         1010,  1016,  1065,  1010,  1063,  1015,  1010,  1017,  1065,  1010,
         1063,  1015,  1010,  1018,  1065,  1010,  1063,  1015,  1010,  1019,
         1065,  1010,  1063,  1015,  1010,  1020,  1065,  1010,  1063,  1016,
         1010,  1015,  1065,  1010,  1063,  1016,  1010,  1016,  1065,  1010,
         1063,  1016,  1010,  1017,  1065,  1010,  1063,  1016,  1010,  1018,
         1065,  1010,  1063,  1016,  1010,  1019,  1065,  1010,  1063,  1016,
         1010,  1020,  1065,  1010,  1529,  1010,  1063,  1019,  1010,  1020,
         1065,  1010,  1998,  1063,  1020,  1010,  1020,  1065,  1012,  2182,
         1063,  1015,  1010,  1020,  1065,  1998,  1063,  1020,  1010,  1015,
         1065,  2024,  2641,  2000,  2022,  2367,  1010,  2130,  2065,  1996,
         2048, 18740,  2024,  6908,  7453,  1012,  2005,  2112,  1006,  2462,
         1007,  1010,  1996, 11119,  3572,  2024,  1063,  1006,  1019,  1010,
         1019,  1007,  1010,  1006,  1018,  1010,  1020,  1007,  1010,  1006,
         1020,  1010,  1018,  1007,  1065,  1012,   102])"
1026,1,"['sample space', 'absolute value', 'sample spaces', 'event', 'sample', 'random', 'experiment']", SAMPLE SPACE,seg_233,"the sample space obviously depends on the defined event. if an event u is defined as the sum of the numbers that show up when two dice are thrown, the sample space of u becomes {2, 3, 4, 5, 6, 7, 8, 9, 0, 11, 12}. if another event v is defined as the absolute value of the difference between the numbers that show up, the sample space of v becomes {0, 1, 2, 3, 4, 5}. this shows that multiple sample spaces can be obtained on the same random experiment.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([7099, 2686])","tensor([  101,  1996,  7099,  2686,  5525,  9041,  2006,  1996,  4225,  2724,
         1012,  2065,  2019,  2724,  1057,  2003,  4225,  2004,  1996,  7680,
         1997,  1996,  3616,  2008,  2265,  2039,  2043,  2048, 18740,  2024,
         6908,  1010,  1996,  7099,  2686,  1997,  1057,  4150,  1063,  1016,
         1010,  1017,  1010,  1018,  1010,  1019,  1010,  1020,  1010,  1021,
         1010,  1022,  1010,  1023,  1010,  1014,  1010,  2340,  1010,  2260,
         1065,  1012,  2065,  2178,  2724,  1058,  2003,  4225,  2004,  1996,
         7619,  3643,  1997,  1996,  4489,  2090,  1996,  3616,  2008,  2265,
         2039,  1010,  1996,  7099,  2686,  1997,  1058,  4150,  1063,  1014,
         1010,  1015,  1010,  1016,  1010,  1017,  1010,  1018,  1010,  1019,
         1065,  1012,  2023,  3065,  2008,  3674,  7099,  7258,  2064,  2022,
         4663,  2006,  1996,  2168,  6721,  7551,  1012,   102])"
1027,1,"['recurrence relations', 'recurrence', 'venn diagrams', 'probability', 'venn', 'combinations', 'urn models', 'permutations']", MATHEMATICAL BACKGROUND,seg_235,"probability problems are unlike the problems in other sciences. beginning students sometimes find it difficult to solve probability problems because there are either several ways or no obvious way to solve it. different problems may require a different approach, concept, or tool. there are many such tools and techniques needed to solve every problem in probability. examples are venn diagrams, permutations and combinations, principle of inclusion and exclusion, urn models, recurrence relations,",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0.,
        0.])","tensor([8045, 4281])","tensor([  101,  9723,  3471,  2024,  4406,  1996,  3471,  1999,  2060,  4163,
         1012,  2927,  2493,  2823,  2424,  2009,  3697,  2000,  9611,  9723,
         3471,  2138,  2045,  2024,  2593,  2195,  3971,  2030,  2053,  5793,
         2126,  2000,  9611,  2009,  1012,  2367,  3471,  2089,  5478,  1037,
         2367,  3921,  1010,  4145,  1010,  2030,  6994,  1012,  2045,  2024,
         2116,  2107,  5906,  1998,  5461,  2734,  2000,  9611,  2296,  3291,
         1999,  9723,  1012,  4973,  2024,  2310, 10695, 26309,  1010,  2566,
        28120, 10708,  1998, 14930,  1010,  6958,  1997, 10502,  1998, 15945,
         1010, 24471,  2078,  4275,  1010, 28667,  3126, 24413,  4262,  1010,
          102])"
1028,1,"['conditional', 'events', 'sampling', 'geometric', 'probability distributions', 'probability', 'independence', 'combination', 'without replacement', 'bipartite graphs', 'event', 'distributions', 'event algebra', 'replacement']", MATHEMATICAL BACKGROUND,seg_235,"divide and conquer or decrease and conquer principles, sampling with and without replacement, bipartite graphs, and de’morgan’s laws to name a few. in addition, independence of events, conditional events, and other event algebra discussed in the following sections may be needed individually or in combination in some problems. there are still other problems that can be solved easily by geometric reasoning, properties of probability distributions, and so on. a thorough understanding of these tools and techniques are essential to solve all probability problems with ease. the following section first describes the essential tools and then applies it to individual problems.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8045, 4281])","tensor([  101, 11443,  1998, 16152,  2030,  9885,  1998, 16152,  6481,  1010,
        16227,  2007,  1998,  2302,  6110,  1010, 12170, 19362, 23096, 19287,
         1010,  1998,  2139,  1521,  5253,  1521,  1055,  4277,  2000,  2171,
         1037,  2261,  1012,  1999,  2804,  1010,  4336,  1997,  2824,  1010,
        18462,  2824,  1010,  1998,  2060,  2724, 11208,  6936,  1999,  1996,
         2206,  5433,  2089,  2022,  2734, 14258,  2030,  1999,  5257,  1999,
         2070,  3471,  1012,  2045,  2024,  2145,  2060,  3471,  2008,  2064,
         2022, 13332,  4089,  2011, 14965, 13384,  1010,  5144,  1997,  9723,
        20611,  1010,  1998,  2061,  2006,  1012,  1037, 16030,  4824,  1997,
         2122,  5906,  1998,  5461,  2024,  6827,  2000,  9611,  2035,  9723,
         3471,  2007,  7496,  1012,  1996,  2206,  2930,  2034,  5577,  1996,
         6827,  5906,  1998,  2059, 12033,  2009,  2000,  3265,  3471,  1012,
          102])"
1029,1,"['complement', 'homogeneous', 'sets', 'probability theory', 'set', 'probability', 'cardinality', 'set theory']", Sets and Mappings,seg_237,"a set is a collection of distinguishable elements logically considered as a group. the elements may be homogeneous or heterogeneous. for example, consider fruits and vegetables as two separate sets. the fruit set can comprise of apples, oranges, berries, bananas, and the like, whereas the vegetable set may consist of potatoes, tomatoes, carrots, and so on. total number of distinct elements in a set s is called the size of the set or its cardinality. it is denoted as |s|. this is always an integer ≥1. to extend the set theory to various situations involving intersect and complement operations, we will denote an empty set (without any elements in it) by the greek symbol (pronounced “small phi”). the size of the empty set by convention is zero (i.e., | | = 0). the totality of all elements under consideration in a set is called the universal set, super-set, or set space. it is symbolically denoted by ω. any element of ω is called a member or point of the set and is denoted by . multiple elements can be combined to get subsets of the set ω. in probability theory, our main interest is in counting proper subsets of ω.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  1037,  2275,  2003,  1037,  3074,  1997, 10782,  3085,  3787,
        11177,  2135,  2641,  2004,  1037,  2177,  1012,  1996,  3787,  2089,
         2022, 24854,  2030, 21770, 10624,  6914, 14769,  1012,  2005,  2742,
         1010,  5136, 10962,  1998, 11546,  2004,  2048,  3584,  4520,  1012,
         1996,  5909,  2275,  2064, 15821,  1997, 18108,  1010,  4589,  2015,
         1010, 22681,  1010, 26191,  1010,  1998,  1996,  2066,  1010,  6168,
         1996, 15415,  2275,  2089,  8676,  1997, 14629,  1010, 12851,  1010,
        25659,  2015,  1010,  1998,  2061,  2006,  1012,  2561,  2193,  1997,
         5664,  3787,  1999,  1037,  2275,  1055,  2003,  2170,  1996,  2946,
         1997,  1996,  2275,  2030,  2049,  7185,  3012,  1012,  2009,  2003,
        19537,  2004,  1064,  1055,  1064,  1012,  2023,  2003,  2467,  2019,
        16109,  1609,  2487,  1012,  2000,  7949,  1996,  2275,  3399,  2000,
         2536,  8146,  5994, 29261,  1998, 13711,  3136,  1010,  2057,  2097,
        19090,  2019,  4064,  2275,  1006,  2302,  2151,  3787,  1999,  2009,
         1007,  2011,  1996,  3306,  6454,  1006,  8793,  1523,  2235, 13569,
         1524,  1007,  1012,  1996,  2946,  1997,  1996,  4064,  2275,  2011,
         4680,  2003,  5717,  1006,  1045,  1012,  1041,  1012,  1010,  1064,
         1064,  1027,  1014,  1007,  1012,  1996,  2561,  3012,  1997,  2035,
         3787,  2104,  9584,  1999,  1037,  2275,  2003,  2170,  1996,  5415,
         2275,  1010,  3565,  1011,  2275,  1010,  2030,  2275,  2686,  1012,
         2009,  2003, 12613,  3973, 19537,  2011,  1179,  1012,  2151,  5783,
         1997,  1179,  2003,  2170,  1037,  2266,  2030,  2391,  1997,  1996,
         2275,  1998,  2003, 19537,  2011,  1012,  3674,  3787,  2064,  2022,
         4117,  2000,  2131, 16745,  2015,  1997,  1996,  2275,  1179,  1012,
         1999,  9723,  3399,  1010,  2256,  2364,  3037,  2003,  1999, 10320,
         5372, 16745,  2015,  1997,  1179,  1012,   102])"
1030,1,"['set', 'null set', 'set ']", Sets and Mappings,seg_237,definition 5.5 the collection of all subsets of a set s (including the null set   and the set itself) is called the power-set (it is denoted by 2s and has 2|s| elements).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  6210,  1019,  1012,  1019,  1996,  3074,  1997,  2035, 16745,
         2015,  1997,  1037,  2275,  1055,  1006,  2164,  1996, 19701,  2275,
         1998,  1996,  2275,  2993,  1007,  2003,  2170,  1996,  2373,  1011,
         2275,  1006,  2009,  2003, 19537,  2011,  1016,  2015,  1998,  2038,
         1016,  1064,  1055,  1064,  3787,  1007,  1012,   102])"
1031,1,['cardinality'], Sets and Mappings,seg_237,example 5.9 cardinality of power-set,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([ 101, 2742, 1019, 1012, 1023, 7185, 3012, 1997, 2373, 1011, 2275,  102])"
1032,1,"['set', 'cardinality', 'power set']", Sets and Mappings,seg_237,use induction to prove that the power set p(s) of a finite set s has cardinality 2|s|.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  2224, 15946,  2000,  6011,  2008,  1996,  2373,  2275,  1052,
         1006,  1055,  1007,  1997,  1037, 10713,  2275,  1055,  2038,  7185,
         3012,  1016,  1064,  1055,  1064,  1012,   102])"
1033,1,"['sets', 'set', 'cardinality']", Sets and Mappings,seg_237,"solution 5.9 consider a singleton set s (with just one element, say b). its power-set is { , b} of cardinality 2. next consider a set with two elements s = {a, b}. its power-set is { , {a}, {b}, {a, b}} of cardinality 4. thus, the assumption is true for n = 1, 2 where n is the number of elements in the set. assume that it is true for an arbitrary set s of size k   2. obviously, cardinality of s is 2|s| = 2|k| = 2k. label all elements currently in s by a group symbol  . now add a single new element x to s to make it s′ = { , x} of cardinality |s′| = k + 1. the power-set of s′ comprises the power-set of s, plus new subsets formed by adding x to each of them. as sets are unordered collections, adding x to each subset of   produces at most 2|s| new subsets. thus, the total number of subsets in s′ is 2|s| + 2|s| = 2 ∗ 2|s| = 2|s|+1 = 2k+1 = 2|s′|. this shows that if",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  5576,  1019,  1012,  1023,  5136,  1037, 28159,  2275,  1055,
         1006,  2007,  2074,  2028,  5783,  1010,  2360,  1038,  1007,  1012,
         2049,  2373,  1011,  2275,  2003,  1063,  1010,  1038,  1065,  1997,
         7185,  3012,  1016,  1012,  2279,  5136,  1037,  2275,  2007,  2048,
         3787,  1055,  1027,  1063,  1037,  1010,  1038,  1065,  1012,  2049,
         2373,  1011,  2275,  2003,  1063,  1010,  1063,  1037,  1065,  1010,
         1063,  1038,  1065,  1010,  1063,  1037,  1010,  1038,  1065,  1065,
         1997,  7185,  3012,  1018,  1012,  2947,  1010,  1996, 11213,  2003,
         2995,  2005,  1050,  1027,  1015,  1010,  1016,  2073,  1050,  2003,
         1996,  2193,  1997,  3787,  1999,  1996,  2275,  1012,  7868,  2008,
         2009,  2003,  2995,  2005,  2019, 15275,  2275,  1055,  1997,  2946,
         1047,  1016,  1012,  5525,  1010,  7185,  3012,  1997,  1055,  2003,
         1016,  1064,  1055,  1064,  1027,  1016,  1064,  1047,  1064,  1027,
         1016,  2243,  1012,  3830,  2035,  3787,  2747,  1999,  1055,  2011,
         1037,  2177,  6454,  1012,  2085,  5587,  1037,  2309,  2047,  5783,
         1060,  2000,  1055,  2000,  2191,  2009,  1055,  1531,  1027,  1063,
         1010,  1060,  1065,  1997,  7185,  3012,  1064,  1055,  1531,  1064,
         1027,  1047,  1009,  1015,  1012,  1996,  2373,  1011,  2275,  1997,
         1055,  1531,  8681,  1996,  2373,  1011,  2275,  1997,  1055,  1010,
         4606,  2047, 16745,  2015,  2719,  2011,  5815,  1060,  2000,  2169,
         1997,  2068,  1012,  2004,  4520,  2024, 27776, 26764,  2098,  6407,
         1010,  5815,  1060,  2000,  2169, 16745,  1997,  7137,  2012,  2087,
         1016,  1064,  1055,  1064,  2047, 16745,  2015,  1012,  2947,  1010,
         1996,  2561,  2193,  1997, 16745,  2015,  1999,  1055,  1531,  2003,
         1016,  1064,  1055,  1064,  1009,  1016,  1064,  1055,  1064,  1027,
         1016,  1598,  1016,  1064,  1055,  1064,  1027,  1016,  1064,  1055,
         1064,  1009,  1015,  1027,  1016,  2243,  1009,  1015,  1027,  1016,
         1064,  1055,  1531,  1064,  1012,  2023,  3065,  2008,  2065,   102])"
1034,0,['n'], Sets and Mappings,seg_237,"the assumption is true for n = k, it is true for n = k + 1. by induction, it is true for all positive integers n ≥ 1.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  1996, 11213,  2003,  2995,  2005,  1050,  1027,  1047,  1010,
         2009,  2003,  2995,  2005,  1050,  1027,  1047,  1009,  1015,  1012,
         2011, 15946,  1010,  2009,  2003,  2995,  2005,  2035,  3893, 24028,
         1050,  1609,  1015,  1012,   102])"
1035,0,[], Sets and Mappings,seg_237,example 5.10 powerset example-2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4520,  1998, 12375,  2015])","tensor([ 101, 2742, 1019, 1012, 2184, 4204, 3388, 2742, 1011, 1016,  102])"
1036,1,['set'], Sets and Mappings,seg_237,"find the power-set of the set s = {a, b, c}",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([ 101, 2424, 1996, 2373, 1011, 2275, 1997, 1996, 2275, 1055, 1027, 1063,
        1037, 1010, 1038, 1010, 1039, 1065,  102])"
1037,0,[], Sets and Mappings,seg_237,solution 5.10 we will tackle the problem by the divide-and-conquer approach. first consider all one-element subsets. there are three singleton subsets,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  5576,  1019,  1012,  2184,  2057,  2097, 11147,  1996,  3291,
         2011,  1996, 11443,  1011,  1998,  1011, 16152,  3921,  1012,  2034,
         5136,  2035,  2028,  1011,  5783, 16745,  2015,  1012,  2045,  2024,
         2093, 28159, 16745,  2015,   102])"
1038,1,"['set', 'null set', 'set ']", Sets and Mappings,seg_237,"two-element subsets as {a, b}, {a, c}, {b, c} (see section 5.9.5 in page 145). to this add the null set   (with no elements), and the set s itself to get the power-set",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  2048,  1011,  5783, 16745,  2015,  2004,  1063,  1037,  1010,
         1038,  1065,  1010,  1063,  1037,  1010,  1039,  1065,  1010,  1063,
         1038,  1010,  1039,  1065,  1006,  2156,  2930,  1019,  1012,  1023,
         1012,  1019,  1999,  3931, 13741,  1007,  1012,  2000,  2023,  5587,
         1996, 19701,  2275,  1006,  2007,  2053,  3787,  1007,  1010,  1998,
         1996,  2275,  1055,  2993,  2000,  2131,  1996,  2373,  1011,  2275,
          102])"
1039,0,[], Sets and Mappings,seg_237,having 2|s| = 23 = 8 elements. this is pictorially shown in figure 5.1.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  2383,  1016,  1064,  1055,  1064,  1027,  2603,  1027,  1022,
         3787,  1012,  2023,  2003, 28304,  2135,  3491,  1999,  3275,  1019,
         1012,  1015,  1012,   102])"
1040,1,"['set', 'probability', 'probability theory']", Sets and Mappings,seg_237,a special decomposition of a finite set s is of importance in probability theory. this is called the partition of s or set partition.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  1037,  2569, 22511,  1997,  1037, 10713,  2275,  1055,  2003,
         1997,  5197,  1999,  9723,  3399,  1012,  2023,  2003,  2170,  1996,
        13571,  1997,  1055,  2030,  2275, 13571,  1012,   102])"
1041,1,"['set', 'mutually exclusive']", Sets and Mappings,seg_237,"definition 5.6 a partition of a finite set s with at least two distinct elements is a collection of mutually exclusive and collectively exhaustive subsets s1, s2, … , sm such that s = s1 ∪ s2 ∪ · · · ,∪ sm = ∪m",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  6210,  1019,  1012,  1020,  1037, 13571,  1997,  1037, 10713,
         2275,  1055,  2007,  2012,  2560,  2048,  5664,  3787,  2003,  1037,
         3074,  1997, 20271,  7262,  1998, 13643, 15095,  3512, 16745,  2015,
         1055,  2487,  1010,  1055,  2475,  1010,  1529,  1010, 15488,  2107,
         2008,  1055,  1027,  1055,  2487,  1605,  1055,  2475,  1605,  1087,
         1087,  1087,  1010,  1605, 15488,  1027,  1605,  2213,   102])"
1042,1,['set'], Sets and Mappings,seg_237,"i=1si, and si ∩ sj =   for all i ≠ j. note that   and s are not counted in a set partition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  1045,  1027,  1015,  5332,  1010,  1998,  9033,  1604,  1055,
         3501,  1027,  2005,  2035,  1045,  1027,  1046,  1012,  3602,  2008,
         1998,  1055,  2024,  2025,  8897,  1999,  1037,  2275, 13571,  1012,
          102])"
1043,1,"['set', 'distribution']", Sets and Mappings,seg_237,"each element of a set partition can be mapped to a real number pi. if this mapped number has the property that they add up to 1 (∑ipi = 1), it is called a distribution defined over s.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4520,  1998, 12375,  2015])","tensor([  101,  2169,  5783,  1997,  1037,  2275, 13571,  2064,  2022, 17715,
         2000,  1037,  2613,  2193, 14255,  1012,  2065,  2023, 17715,  2193,
         2038,  1996,  3200,  2008,  2027,  5587,  2039,  2000,  1015,  1006,
          100,  1027,  1015,  1007,  1010,  2009,  2003,  2170,  1037,  4353,
         4225,  2058,  1055,  1012,   102])"
1044,1,"['interaction', 'sets', 'venn diagrams', 'events', 'venn', 'euler diagrams', 'discrete', 'case', 'continuous', 'probability', 'probabilities', 'interactions', 'graphical', 'sample space', 'set', 'event', 'sample', 'venn diagram']", Venn Diagrams,seg_239,"the british mathematician and cleric john venn (1834–1923) introduced venn diagrams in 1881 for representing sets and operations on them. they became instantly popular because there are just two symbols used in its graphical representation—a rectangle denotes the universal set u, and one or more labeled circles or ellipses drawn wholly within the rectangle denote subsets of u. event interactions are represented by intersecting labeled circles (see figures 5.2 and 5.3). the area that is common to intersecting circles can map the actual amount of interaction of the events. in most of the problems, this need not be so fine-grained because the venn diagram is not used to compute the probabilities directly; rather it is a visual device simply to ascertain if events interact or not. sets without common elements are drawn as nonintersecting circles. this is useful when the number of events is small (say 2–6). the importance of venn diagrams in probability arises because events (both discrete and continuous) that underlie probabilities are easily represented by sets. they are valuable tools in breaking complex probability problems involving multiple intersecting events into simpler subproblems that are easy to solve. venn diagrams have been extended by many researchers to suit problems in engineering, geology, chemistry, and other sciences. examples are karnaugh maps, euler diagrams, johnston diagrams, edwards’ venn diagrams, and peirce diagrams. euler diagrams are an extension of venn diagrams to represent more than one sample space (see reference 110). venn diagrams may not be easy to comprehend when there are too many intersecting events. in such a case, we could form a hierarchical venn diagram by labeling events with a common denomination to the top of the hierarchy.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 1., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2310, 10695, 26309])","tensor([  101,  1996,  2329, 13235,  1998, 29307,  2198,  2310, 10695,  1006,
        10700,  1516,  4927,  1007,  3107,  2310, 10695, 26309,  1999,  7005,
         2005,  5052,  4520,  1998,  3136,  2006,  2068,  1012,  2027,  2150,
         6880,  2759,  2138,  2045,  2024,  2074,  2048,  9255,  2109,  1999,
         2049, 20477,  6630,  1517,  1037, 28667, 23395, 14796,  1996,  5415,
         2275,  1057,  1010,  1998,  2028,  2030,  2062, 12599,  7925,  2030,
         3449, 15000,  8583,  4567, 12590,  2306,  1996, 28667, 23395, 19090,
        16745,  2015,  1997,  1057,  1012,  2724, 10266,  2024,  3421,  2011,
        27294, 12599,  7925,  1006,  2156,  4481,  1019,  1012,  1016,  1998,
         1019,  1012,  1017,  1007,  1012,  1996,  2181,  2008,  2003,  2691,
         2000, 27294,  7925,  2064,  4949,  1996,  5025,  3815,  1997,  8290,
         1997,  1996,  2824,  1012,  1999,  2087,  1997,  1996,  3471,  1010,
         2023,  2342,  2025,  2022,  2061,  2986,  1011,  8982,  2098,  2138,
         1996,  2310, 10695, 16403,  2003,  2025,  2109,  2000, 24134,  1996,
         4013,  3676, 14680,  3495,  1025,  2738,  2009,  2003,  1037,  5107,
         5080,  3432,  2000,  2004, 17119, 18249,  2065,  2824, 11835,  2030,
         2025,  1012,  4520,  2302,  2691,  3787,  2024,  4567,  2004,  2512,
        18447,  2545, 22471,  2075,  7925,  1012,  2023,  2003,  6179,  2043,
         1996,  2193,  1997,  2824,  2003,  2235,  1006,  2360,  1016,  1516,
         1020,  1007,  1012,  1996,  5197,  1997,  2310, 10695, 26309,  1999,
         9723, 18653,  2138,  2824,  1006,  2119, 16246,  1998,  7142,  1007,
         2008,  2104,  8751,  4013,  3676, 14680,  2024,  4089,  3421,  2011,
         4520,  1012,  2027,  2024,  7070,  5906,  1999,  4911,  3375,  9723,
         3471,  5994,  3674, 27294,  2824,  2046, 16325,  4942, 21572,  3468,
         5244,  2008,  2024,  3733,  2000,  9611,  1012,  2310, 10695, 26309,
         2031,  2042,  3668,  2011,  2116,  6950,  2000,  4848,  3471,  1999,
         3330,  1010, 13404,  1010,  6370,  1010,  1998,  2060,  4163,  1012,
         4973,  2024, 10556, 12789,  8953,  7341,  1010,  7327,  3917, 26309,
         1010, 10773, 26309,  1010,  7380,  1521,  2310, 10695, 26309,  1010,
         1998, 26850, 19170, 26309,  1012,  7327,  3917, 26309,  2024,  2019,
         5331,  1997,  2310, 10695, 26309,  2000,  5050,  2062,  2084,  2028,
         7099,  2686,  1006,  2156,  4431,  7287,  1007,  1012,  2310, 10695,
        26309,  2089,  2025,  2022,  3733,  2000, 22346,  2043,  2045,  2024,
         2205,  2116, 27294,  2824,  1012,  1999,  2107,  1037,  2553,  1010,
         2057,  2071,  2433,  1037, 25835,  2310, 10695, 16403,  2011, 28847,
         2824,  2007,  1037,  2691, 18683,  2000,  1996,  2327,  1997,  1996,
        12571,  1012,   102])"
1045,1,"['union', 'events']", Venn Diagrams,seg_239,example 5.11 union of events,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0.])","tensor([ 2310, 10695, 26309])","tensor([ 101, 2742, 1019, 1012, 2340, 2586, 1997, 2824,  102])"
1046,1,['percentage'], Venn Diagrams,seg_239,"sixty percentage of the people in an office read newspaper “a,” and 50% read newspaper “b.” if 10% of the people read neither “a” nor “b,” what percentage of the people read both newspapers?",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2310, 10695, 26309])","tensor([ 101, 8442, 7017, 1997, 1996, 2111, 1999, 2019, 2436, 3191, 3780, 1523,
        1037, 1010, 1524, 1998, 2753, 1003, 3191, 3780, 1523, 1038, 1012, 1524,
        2065, 2184, 1003, 1997, 1996, 2111, 3191, 4445, 1523, 1037, 1524, 4496,
        1523, 1038, 1010, 1524, 2054, 7017, 1997, 1996, 2111, 3191, 2119, 6399,
        1029,  102])"
1047,1,"['percentage', 'event', 'venn', 'venn diagram']", Venn Diagrams,seg_239,"solution 5.11 this problem is easily solved using a venn diagram. let “a” denote the event that people read newspaper “a” and “b” denote the event that they read newspaper “b.” then a ∪ b denotes the event that people read either of the newspapers and a ∩ b denotes the event that people read both newspapers. as this problem involves count or percentage, the event and count can be considered as synonymous. as the number of people who reads either of them is given as a ∪ b, the number of people who read neither is u-a ∪ b = 10% (given). from this, we get 10 = 100 − [(60 + 50) − a ∩ b] or a ∩ b = 20%. hence, 20% of the people read both newspapers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2310, 10695, 26309])","tensor([  101,  5576,  1019,  1012,  2340,  2023,  3291,  2003,  4089, 13332,
         2478,  1037,  2310, 10695, 16403,  1012,  2292,  1523,  1037,  1524,
        19090,  1996,  2724,  2008,  2111,  3191,  3780,  1523,  1037,  1524,
         1998,  1523,  1038,  1524, 19090,  1996,  2724,  2008,  2027,  3191,
         3780,  1523,  1038,  1012,  1524,  2059,  1037,  1605,  1038, 14796,
         1996,  2724,  2008,  2111,  3191,  2593,  1997,  1996,  6399,  1998,
         1037,  1604,  1038, 14796,  1996,  2724,  2008,  2111,  3191,  2119,
         6399,  1012,  2004,  2023,  3291,  7336,  4175,  2030,  7017,  1010,
         1996,  2724,  1998,  4175,  2064,  2022,  2641,  2004, 22594,  1012,
         2004,  1996,  2193,  1997,  2111,  2040,  9631,  2593,  1997,  2068,
         2003,  2445,  2004,  1037,  1605,  1038,  1010,  1996,  2193,  1997,
         2111,  2040,  3191,  4445,  2003,  1057,  1011,  1037,  1605,  1038,
         1027,  2184,  1003,  1006,  2445,  1007,  1012,  2013,  2023,  1010,
         2057,  2131,  2184,  1027,  2531,  1597,  1031,  1006,  3438,  1009,
         2753,  1007,  1597,  1037,  1604,  1038,  1033,  2030,  1037,  1604,
         1038,  1027,  2322,  1003,  1012,  6516,  1010,  2322,  1003,  1997,
         1996,  2111,  3191,  2119,  6399,  1012,   102])"
1048,1,"['cases', 'outcomes', 'quantitative', 'discretization', 'disjoint', 'categorical variable', 'mutually exclusive', 'data', 'case', 'continuous', 'probability', 'nonlinear', 'categorical', 'experiment', 'variables', 'variable']", Tree Diagrams,seg_241,"several probability problems involve mutually exclusive subcases or subevents. these are best represented as rooted trees or forests (a collection of disjoint trees is called a forest). a tree in computer science is a nonlinear data structure with a distinguished node called the root. a pictorial representation of trees makes it much easy to comprehend. for this purpose, the root is always drawn either at the top or at the left. a tree is a special case of a graph. although a graph can be directed or undirected, a tree is almost always undirected. the branches (straight lines) drawn from a node represent subproblems, subsets, or subcases. this representation can sometimes decompose a complex probability problem into two or more simple ones or as a hierarchy of subproblems. each such subcase can be further broken down into smaller trees. this subdivision usually uses a categorical variable such as sex and religion or outcomes of an experiment. quantitative variables could also be used to subdivide a node into smaller subtrees if (i) the number of cases are small or (ii) discretization is used to categorize the continuous variable.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 3392, 26309])","tensor([  101,  2195,  9723,  3471,  9125, 20271,  7262,  4942, 18382,  2015,
         2030,  4942, 18697,  7666,  1012,  2122,  2024,  2190,  3421,  2004,
        15685,  3628,  2030,  6138,  1006,  1037,  3074,  1997,  4487,  2015,
         5558, 18447,  3628,  2003,  2170,  1037,  3224,  1007,  1012,  1037,
         3392,  1999,  3274,  2671,  2003,  1037, 27400,  2951,  3252,  2007,
         1037,  5182, 13045,  2170,  1996,  7117,  1012,  1037, 28304,  6630,
         1997,  3628,  3084,  2009,  2172,  3733,  2000, 22346,  1012,  2005,
         2023,  3800,  1010,  1996,  7117,  2003,  2467,  4567,  2593,  2012,
         1996,  2327,  2030,  2012,  1996,  2187,  1012,  1037,  3392,  2003,
         1037,  2569,  2553,  1997,  1037, 10629,  1012,  2348,  1037, 10629,
         2064,  2022,  2856,  2030,  6151,  7442, 10985,  1010,  1037,  3392,
         2003,  2471,  2467,  6151,  7442, 10985,  1012,  1996,  5628,  1006,
         3442,  3210,  1007,  4567,  2013,  1037, 13045,  5050,  4942, 21572,
         3468,  5244,  1010, 16745,  2015,  1010,  2030,  4942, 18382,  2015,
         1012,  2023,  6630,  2064,  2823, 21933,  8737,  9232,  1037,  3375,
         9723,  3291,  2046,  2048,  2030,  2062,  3722,  3924,  2030,  2004,
         1037, 12571,  1997,  4942, 21572,  3468,  5244,  1012,  2169,  2107,
         4942, 18382,  2064,  2022,  2582,  3714,  2091,  2046,  3760,  3628,
         1012,  2023, 12572,  2788,  3594,  1037,  4937, 27203,  8023,  2107,
         2004,  3348,  1998,  4676,  2030, 13105,  1997,  2019,  7551,  1012,
        20155, 10857,  2071,  2036,  2022,  2109,  2000,  4942,  4305, 17258,
         2063,  1037, 13045,  2046,  3760,  4942, 13334,  2015,  2065,  1006,
         1045,  1007,  1996,  2193,  1997,  3572,  2024,  2235,  2030,  1006,
         2462,  1007,  5860, 13465,  3989,  2003,  2109,  2000,  4937, 20265,
        25709,  1996,  7142,  8023,  1012,   102])"
1049,1,['experiment'], Tree Diagrams,seg_241,example 5.12 tree-diagram for coin toss experiment,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 3392, 26309])","tensor([  101,  2742,  1019,  1012,  2260,  3392,  1011, 16403,  2005,  9226,
        10055,  7551,   102])"
1050,1,"['sample', 'tree diagram', 'sample space']", Tree Diagrams,seg_241,a fair coin is tossed three times. draw the tree diagram and find the sample space.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 3392, 26309])","tensor([  101,  1037,  4189,  9226,  2003,  7463,  2093,  2335,  1012,  4009,
         1996,  3392, 16403,  1998,  2424,  1996,  7099,  2686,  1012,   102])"
1051,1,"['sample space', 'outcomes', 'union', 'sample']", Tree Diagrams,seg_241,"solution 5.12 as there are just two possible outcomes in each throw, we denote it by two branches from the nodes. consider the first throw. it could result in either an h or a t. the second and subsequent throws are denoted as further branching as in the figure. the sample space is obtained as the union of labels at the leaf nodes as {hhh, hht, hth, htt, thh, tht, tth, ttt}. this is pictorially shown in figure 5.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 3392, 26309])","tensor([  101,  5576,  1019,  1012,  2260,  2004,  2045,  2024,  2074,  2048,
         2825, 13105,  1999,  2169,  5466,  1010,  2057, 19090,  2009,  2011,
         2048,  5628,  2013,  1996, 14164,  1012,  5136,  1996,  2034,  5466,
         1012,  2009,  2071,  2765,  1999,  2593,  2019,  1044,  2030,  1037,
         1056,  1012,  1996,  2117,  1998,  4745, 11618,  2024, 19537,  2004,
         2582, 23346,  2004,  1999,  1996,  3275,  1012,  1996,  7099,  2686,
         2003,  4663,  2004,  1996,  2586,  1997, 10873,  2012,  1996,  7053,
        14164,  2004,  1063,  1044, 23644,  1010,  1044, 11039,  1010,  1044,
         2705,  1010,  1044,  4779,  1010, 16215,  2232,  1010, 16215,  2102,
         1010, 23746,  2232,  1010, 23746,  2102,  1065,  1012,  2023,  2003,
        28304,  2135,  3491,  1999,  3275,  1019,  1012,  1018,  1012,   102])"
1052,0,[], Tree Diagrams,seg_241,"in some problems, there exist more than one way to draw a tree. sometimes, the tree is formed by the occurrence of a related happening as in sports tournaments in which the winning team encounters other players or opponents.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3392, 26309])","tensor([  101,  1999,  2070,  3471,  1010,  2045,  4839,  2062,  2084,  2028,
         2126,  2000,  4009,  1037,  3392,  1012,  2823,  1010,  1996,  3392,
         2003,  2719,  2011,  1996, 14404,  1997,  1037,  3141,  6230,  2004,
         1999,  2998,  8504,  1999,  2029,  1996,  3045,  2136, 11340,  2060,
         2867,  2030,  7892,  1012,   102])"
1053,1,"['sets', 'probability', 'ordinal', 'nominal', 'bipartite graph']", Bipartite Graphs,seg_243,a bipartite graph consists of two sets of nodes (say v and w) such that each node in v is connected to some node in w and vice versa. this means that nodes in v are not connected to other nodes in v and similarly nodes in w are not connected to other nodes in w. the elements of v and w are nominal or ordinal type in most of the applications. the bipartite graph is extremely useful in simplifying some of the probability problems.,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([12170, 19362, 23096, 19287])","tensor([  101,  1037, 12170, 19362, 23096, 10629,  3774,  1997,  2048,  4520,
         1997, 14164,  1006,  2360,  1058,  1998,  1059,  1007,  2107,  2008,
         2169, 13045,  1999,  1058,  2003,  4198,  2000,  2070, 13045,  1999,
         1059,  1998,  3580, 18601,  1012,  2023,  2965,  2008, 14164,  1999,
         1058,  2024,  2025,  4198,  2000,  2060, 14164,  1999,  1058,  1998,
         6660, 14164,  1999,  1059,  2024,  2025,  4198,  2000,  2060, 14164,
         1999,  1059,  1012,  1996,  3787,  1997,  1058,  1998,  1059,  2024,
        15087,  2030,  2030, 18979,  2140,  2828,  1999,  2087,  1997,  1996,
         5097,  1012,  1996, 12170, 19362, 23096, 10629,  2003,  5186,  6179,
         1999, 21934, 28250,  2075,  2070,  1997,  1996,  9723,  3471,  1012,
          102])"
1054,0,[], Bipartite Graphs,seg_243,example 5.13 jobs and applicants,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([12170, 19362, 23096, 19287])","tensor([  101,  2742,  1019,  1012,  2410,  5841,  1998, 17362,   102])"
1055,1,"['sets', 'bipartite graphs', 'model']", Bipartite Graphs,seg_243,a company has five vacancies that require different skill sets for which 10 applications are received. describe how bipartite graphs can be used to model the matching of applicants and jobs.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12170, 19362, 23096, 19287])","tensor([  101,  1037,  2194,  2038,  2274, 12436,  9336,  9243,  2008,  5478,
         2367,  8066,  4520,  2005,  2029,  2184,  5097,  2024,  2363,  1012,
         6235,  2129, 12170, 19362, 23096, 19287,  2064,  2022,  2109,  2000,
         2944,  1996,  9844,  1997, 17362,  1998,  5841,  1012,   102])"
1056,1,"['sets', 'set', 'nominal', 'bipartite graph']", Bipartite Graphs,seg_243,"solution 5.13 here, both sets are nominal type. represent 10 applicants by 10 labeled nodes on the left and five jobs by five nodes on the right. make a link among the two sets of nodes if the skill set of ith applicant fits the job j. for each job j, if there is only a single applicant, remove it from the bipartite graph. if the remaining graph is a forest, we could identify groups of applicants that are clustered in groups of jobs (or a single job). otherwise, the bipartite graph will show the choices for hiring applicants.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12170, 19362, 23096, 19287])","tensor([  101,  5576,  1019,  1012,  2410,  2182,  1010,  2119,  4520,  2024,
        15087,  2828,  1012,  5050,  2184, 17362,  2011,  2184, 12599, 14164,
         2006,  1996,  2187,  1998,  2274,  5841,  2011,  2274, 14164,  2006,
         1996,  2157,  1012,  2191,  1037,  4957,  2426,  1996,  2048,  4520,
         1997, 14164,  2065,  1996,  8066,  2275,  1997,  2009,  2232, 23761,
        16142,  1996,  3105,  1046,  1012,  2005,  2169,  3105,  1046,  1010,
         2065,  2045,  2003,  2069,  1037,  2309, 23761,  1010,  6366,  2009,
         2013,  1996, 12170, 19362, 23096, 10629,  1012,  2065,  1996,  3588,
        10629,  2003,  1037,  3224,  1010,  2057,  2071,  6709,  2967,  1997,
        17362,  2008,  2024, 25221,  1999,  2967,  1997,  5841,  1006,  2030,
         1037,  2309,  3105,  1007,  1012,  4728,  1010,  1996, 12170, 19362,
        23096, 10629,  2097,  2265,  1996,  9804,  2005, 14763, 17362,  1012,
          102])"
1057,1,"['cases', 'disjoint', 'bipartite graphs', 'bipartite graph']", Bipartite Forests,seg_245,"these are special cases of bipartite graphs in which the entire graph can be decomposed into two or more disjoint bipartite graphs. the smallest possible bipartite graph is one in which one node on the left is connected to just one node on the right. in the jobs and applicants example, if one applicant is connected to one job and there are no other links between these two nodes, this can be removed as there are no other choices. hence, bipartite forests decompose a larger problem into smaller subproblems that can be independently solved.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12170, 19362, 23096,  6138])","tensor([  101,  2122,  2024,  2569,  3572,  1997, 12170, 19362, 23096, 19287,
         1999,  2029,  1996,  2972, 10629,  2064,  2022, 21933,  8737, 24768,
         2046,  2048,  2030,  2062,  4487,  2015,  5558, 18447, 12170, 19362,
        23096, 19287,  1012,  1996, 10479,  2825, 12170, 19362, 23096, 10629,
         2003,  2028,  1999,  2029,  2028, 13045,  2006,  1996,  2187,  2003,
         4198,  2000,  2074,  2028, 13045,  2006,  1996,  2157,  1012,  1999,
         1996,  5841,  1998, 17362,  2742,  1010,  2065,  2028, 23761,  2003,
         4198,  2000,  2028,  3105,  1998,  2045,  2024,  2053,  2060,  6971,
         2090,  2122,  2048, 14164,  1010,  2023,  2064,  2022,  3718,  2004,
         2045,  2024,  2053,  2060,  9804,  1012,  6516,  1010, 12170, 19362,
        23096,  6138, 21933,  8737,  9232,  1037,  3469,  3291,  2046,  3760,
         4942, 21572,  3468,  5244,  2008,  2064,  2022,  9174, 13332,  1012,
          102])"
1058,1,"['associated', 'set', 'probability', 'events', 'null set', 'set theory']", EVENTS,seg_247,"there are many types of events encountered in probability and related fields. a good understanding of them can greatly simplify some of the probability problems. in addition, they provide a parallel between the axioms of set theory and probability. we assume in the subsequent discussions that p( ) = 0 (probability associated with the null set is zero), and p(ω) = 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  2045,  2024,  2116,  4127,  1997,  2824,  8567,  1999,  9723,
         1998,  3141,  4249,  1012,  1037,  2204,  4824,  1997,  2068,  2064,
         6551, 21934, 28250,  2070,  1997,  1996,  9723,  3471,  1012,  1999,
         2804,  1010,  2027,  3073,  1037,  5903,  2090,  1996, 22260, 29178,
         1997,  2275,  3399,  1998,  9723,  1012,  2057,  7868,  1999,  1996,
         4745, 10287,  2008,  1052,  1006,  1007,  1027,  1014,  1006,  9723,
         3378,  2007,  1996, 19701,  2275,  2003,  5717,  1007,  1010,  1998,
         1052,  1006,  1179,  1007,  1027,  1015,  1012,   102])"
1059,1,"['sample space', 'event', 'outcome', 'sample', 'experiment']", EVENTS,seg_247,definition 5.7 an event is a well-defined outcome of an experiment or a subset of a sample space.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])",tensor([2824]),"tensor([  101,  6210,  1019,  1012,  1021,  2019,  2724,  2003,  1037,  2092,
         1011,  4225,  9560,  1997,  2019,  7551,  2030,  1037, 16745,  1997,
         1037,  7099,  2686,  1012,   102])"
1060,1,"['trial', 'associated', 'set', 'probability', 'events', 'outcomes', 'event', 'outcome', 'random', 'experiment']", EVENTS,seg_247,"the literal meaning of an event is a thing that happens. in probability, an event is a well-defined outcome associated with a random experiment or a trial. set theoretically, events are subsets of the set of all possible outcomes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])",tensor([2824]),"tensor([  101,  1996, 18204,  3574,  1997,  2019,  2724,  2003,  1037,  2518,
         2008,  6433,  1012,  1999,  9723,  1010,  2019,  2724,  2003,  1037,
         2092,  1011,  4225,  9560,  3378,  2007,  1037,  6721,  7551,  2030,
         1037,  3979,  1012,  2275, 22634,  1010,  2824,  2024, 16745,  2015,
         1997,  1996,  2275,  1997,  2035,  2825, 13105,  1012,   102])"
1061,1,"['outcomes', 'outcome', 'condition', 'independent', 'events', 'discrete', 'continuous', 'probability', 'sample spaces', 'sample space', 'set', 'sample', 'random', 'experiment']", EVENTS,seg_247,"objective probability has two basic building blocks. first, there should be a random experiment that generates uncertain outcomes. these can be discrete or continuous. a unique label is assigned to each outcome of the experiment to distinguish among themselves. secondly, we must have events that are either single outcomes or a collection of outcomes that satisfy a user-specified condition or criterion. the set of all possible outcomes of a random experiment is called sample space. the sample space is specific to each random experiment. it may or may not depend on time. most of the problems that are encountered below are time independent sample spaces.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([2824]),"tensor([  101,  7863,  9723,  2038,  2048,  3937,  2311,  5991,  1012,  2034,
         1010,  2045,  2323,  2022,  1037,  6721,  7551,  2008, 19421,  9662,
        13105,  1012,  2122,  2064,  2022, 16246,  2030,  7142,  1012,  1037,
         4310,  3830,  2003,  4137,  2000,  2169,  9560,  1997,  1996,  7551,
         2000, 10782,  2426,  3209,  1012, 16378,  1010,  2057,  2442,  2031,
         2824,  2008,  2024,  2593,  2309, 13105,  2030,  1037,  3074,  1997,
        13105,  2008, 13225,  1037,  5310,  1011,  9675,  4650,  2030, 19229,
         1012,  1996,  2275,  1997,  2035,  2825, 13105,  1997,  1037,  6721,
         7551,  2003,  2170,  7099,  2686,  1012,  1996,  7099,  2686,  2003,
         3563,  2000,  2169,  6721,  7551,  1012,  2009,  2089,  2030,  2089,
         2025, 12530,  2006,  2051,  1012,  2087,  1997,  1996,  3471,  2008,
         2024,  8567,  2917,  2024,  2051,  2981,  7099,  7258,  1012,   102])"
1062,1,"['trial', 'associated', 'probability', 'events', 'event', 'experiment', 'discrete']", EVENTS,seg_247,"each discrete event is uniquely identified by a label, a symbol, a number, or other identifying mark. there are no hard and fast rules to name events. event labels are usually denoted by capital letters of an alphabet (english, greek, etc.). we can combine events and denote them by other labels or abbreviated letters. one experimenter may label the events resulting in a single toss of a coin as {h, t} while another may label it as {1, 0}. these labels are meant to distinguish the events among themselves. if you conduct such a trial or experiment, every event will eventually occur. some events that have high chance of occurring materializes more. thus, the probability associated with each event can tell us which are more likely to materialize than others.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  2169, 16246,  2724,  2003, 20640,  4453,  2011,  1037,  3830,
         1010,  1037,  6454,  1010,  1037,  2193,  1010,  2030,  2060, 12151,
         2928,  1012,  2045,  2024,  2053,  2524,  1998,  3435,  3513,  2000,
         2171,  2824,  1012,  2724, 10873,  2024,  2788, 19537,  2011,  3007,
         4144,  1997,  2019, 12440,  1006,  2394,  1010,  3306,  1010,  4385,
         1012,  1007,  1012,  2057,  2064, 11506,  2824,  1998, 19090,  2068,
         2011,  2060, 10873,  2030, 12066,  4144,  1012,  2028,  7551,  2121,
         2089,  3830,  1996,  2824,  4525,  1999,  1037,  2309, 10055,  1997,
         1037,  9226,  2004,  1063,  1044,  1010,  1056,  1065,  2096,  2178,
         2089,  3830,  2009,  2004,  1063,  1015,  1010,  1014,  1065,  1012,
         2122, 10873,  2024,  3214,  2000, 10782,  1996,  2824,  2426,  3209,
         1012,  2065,  2017,  6204,  2107,  1037,  3979,  2030,  7551,  1010,
         2296,  2724,  2097,  2776,  5258,  1012,  2070,  2824,  2008,  2031,
         2152,  3382,  1997, 10066,  3430, 10057,  2062,  1012,  2947,  1010,
         1996,  9723,  3378,  2007,  2169,  2724,  2064,  2425,  2149,  2029,
         2024,  2062,  3497,  2000,  3430,  4697,  2084,  2500,  1012,   102])"
1063,1,['event'], EVENTS,seg_247,example 5.14 event identification,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0.])",tensor([2824]),"tensor([ 101, 2742, 1019, 1012, 2403, 2724, 8720,  102])"
1064,1,['events'], EVENTS,seg_247,consider contaminants in drinking water sources collected from different parts of a city. describe what are some possible events and how to combine them.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  5136,  9530, 15464,  3981,  7666,  1999,  5948,  2300,  4216,
         5067,  2013,  2367,  3033,  1997,  1037,  2103,  1012,  6235,  2054,
         2024,  2070,  2825,  2824,  1998,  2129,  2000, 11506,  2068,  1012,
          102])"
1065,1,"['event', 'sample', 'simple event', 'limit']", EVENTS,seg_247,"solution 5.14 assume that there are a dozen possible contaminants in drinking water. label each contaminant by a unique letter. then a simple event can be defined as “presence of contaminant in drinking water above the prescribed limit.” for instance, let “a” denote the presence of arsenic above its permitted limit and let “c” denote the presence of chromium, and so on. if a sample contains both arsenic and chromium (and not the others), it can be labeled as “ac”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([2824]),"tensor([  101,  5576,  1019,  1012,  2403,  7868,  2008,  2045,  2024,  1037,
         6474,  2825,  9530, 15464,  3981,  7666,  1999,  5948,  2300,  1012,
         3830,  2169,  9530, 15464,  3981,  3372,  2011,  1037,  4310,  3661,
         1012,  2059,  1037,  3722,  2724,  2064,  2022,  4225,  2004,  1523,
         3739,  1997,  9530, 15464,  3981,  3372,  1999,  5948,  2300,  2682,
         1996, 16250,  5787,  1012,  1524,  2005,  6013,  1010,  2292,  1523,
         1037,  1524, 19090,  1996,  3739,  1997, 29596,  2682,  2049,  7936,
         5787,  1998,  2292,  1523,  1039,  1524, 19090,  1996,  3739,  1997,
        10381, 21716,  5007,  1010,  1998,  2061,  2006,  1012,  2065,  1037,
         7099,  3397,  2119, 29596,  1998, 10381, 21716,  5007,  1006,  1998,
         2025,  1996,  2500,  1007,  1010,  2009,  2064,  2022, 12599,  2004,
         1523,  9353,  1524,   102])"
1066,1,"['combination', 'event']", EVENTS,seg_247,or “ca.” this type of concatenated labeling is inconvenient when there are a large number of possibilities. a solution is to give separate codes of fixed size or numbers to each combination event.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([2824]),"tensor([  101,  2030,  1523,  6187,  1012,  1524,  2023,  2828,  1997,  9530,
        16280, 23854, 28847,  2003,  4297,  2239,  8159, 11638,  2043,  2045,
         2024,  1037,  2312,  2193,  1997, 12020,  1012,  1037,  5576,  2003,
         2000,  2507,  3584,  9537,  1997,  4964,  2946,  2030,  3616,  2000,
         2169,  5257,  2724,  1012,   102])"
1067,1,"['events', 'failure', 'outcomes', 'failures', 'probabilistic', 'predicted', 'data']", Deterministic and Probabilistic Events,seg_249,"events may be deterministic or probabilistic. outcomes of deterministic events are always predictable using mathematical equations or various laws of physics, chemistry, or logic. for instance, chances of getting six spades in a hand of 10 cards is exactly predictable as the number of spades in any deck of cards is 13. the reservoir capacity example given in page 5–18 is predictable using the position of the sun and path of the moon. probabilistic events can be predicted by past analysis of outcomes. an aircraft’s engine failure can be predicted well in advance if past data on engine failures are available for specific engines of certain age and type.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28283, 25300, 10074,  1998,  4013,  3676, 27965,  4588,  2824])","tensor([  101,  2824,  2089,  2022, 28283, 25300, 10074,  2030,  4013,  3676,
        27965,  4588,  1012, 13105,  1997, 28283, 25300, 10074,  2824,  2024,
         2467, 21425,  2478,  8045, 11380,  2030,  2536,  4277,  1997,  5584,
         1010,  6370,  1010,  2030,  7961,  1012,  2005,  6013,  1010,  9592,
         1997,  2893,  2416, 23288,  2015,  1999,  1037,  2192,  1997,  2184,
         5329,  2003,  3599, 21425,  2004,  1996,  2193,  1997, 23288,  2015,
         1999,  2151,  5877,  1997,  5329,  2003,  2410,  1012,  1996,  8071,
         3977,  2742,  2445,  1999,  3931,  1019,  1516,  2324,  2003, 21425,
         2478,  1996,  2597,  1997,  1996,  3103,  1998,  4130,  1997,  1996,
         4231,  1012,  4013,  3676, 27965,  4588,  2824,  2064,  2022, 10173,
         2011,  2627,  4106,  1997, 13105,  1012,  2019,  2948,  1521,  1055,
         3194,  4945,  2064,  2022, 10173,  2092,  1999,  5083,  2065,  2627,
         2951,  2006,  3194, 15428,  2024,  2800,  2005,  3563,  5209,  1997,
         3056,  2287,  1998,  2828,  1012,   102])"
1068,1,"['continuous', 'probability', 'events', 'discrete']", Discrete Versus Continuous Events,seg_251,"events can be discrete or continuous. in probability problems (especially textbook examples), we seldom encounter continuous events. however, continuous events are encountered in engineering applications.",tensor(1),"tensor([0., 1., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([  101,  2824,  2064,  2022, 16246,  2030,  7142,  1012,  1999,  9723,
         3471,  1006,  2926, 16432,  4973,  1007,  1010,  2057, 15839,  8087,
         7142,  2824,  1012,  2174,  1010,  7142,  2824,  2024,  8567,  1999,
         3330,  5097,  1012,   102])"
1069,1,"['continuous', 'events']", Discrete Versus Continuous Events,seg_251,example 5.15 continuous events,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([ 101, 2742, 1019, 1012, 2321, 7142, 2824,  102])"
1070,1,"['continuous', 'events']", Discrete Versus Continuous Events,seg_251,give examples of continuous events.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([ 101, 2507, 4973, 1997, 7142, 2824, 1012,  102])"
1071,1,"['continuous', 'complement', 'sample space', 'probability', 'complementary event', 'event', 'level', 'sample', 'complement of an event', 'variable', 'case']", Discrete Versus Continuous Events,seg_251,"solution 5.15 consider a microchip that has just been manufactured. its lifetime (in hours) is an event that can take any positive value. the sample space in this case is s = {t|t ≥ 0} and the variable involved is time. let f denote the event that it does not fail during the first c = 1000 hours of operation. then p(f) = p(t c). this probability becomes smaller as c is increased. consider a swimming pool with an optimal capacity. if the water inflow and outflow are ignored, the amount of water in the pool (say in cubic feet or inches) can be considered as a continuous sample space. the complementary event in this case is the optimal level less the current capacity. both of them are continuous. in general, if the sample space is continuous, the complement of an event defined on the sample space is also continuous.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([  101,  5576,  1019,  1012,  2321,  5136,  1037, 12702,  5428,  2361,
         2008,  2038,  2074,  2042,  7609,  1012,  2049,  6480,  1006,  1999,
         2847,  1007,  2003,  2019,  2724,  2008,  2064,  2202,  2151,  3893,
         3643,  1012,  1996,  7099,  2686,  1999,  2023,  2553,  2003,  1055,
         1027,  1063,  1056,  1064,  1056,  1609,  1014,  1065,  1998,  1996,
         8023,  2920,  2003,  2051,  1012,  2292,  1042, 19090,  1996,  2724,
         2008,  2009,  2515,  2025,  8246,  2076,  1996,  2034,  1039,  1027,
         6694,  2847,  1997,  3169,  1012,  2059,  1052,  1006,  1042,  1007,
         1027,  1052,  1006,  1056,  1039,  1007,  1012,  2023,  9723,  4150,
         3760,  2004,  1039,  2003,  3445,  1012,  5136,  1037,  5742,  4770,
         2007,  2019, 15502,  3977,  1012,  2065,  1996,  2300,  1999, 12314,
         1998,  2041, 12314,  2024,  6439,  1010,  1996,  3815,  1997,  2300,
         1999,  1996,  4770,  1006,  2360,  1999, 11919,  2519,  2030,  5282,
         1007,  2064,  2022,  2641,  2004,  1037,  7142,  7099,  2686,  1012,
         1996, 21053,  2724,  1999,  2023,  2553,  2003,  1996, 15502,  2504,
         2625,  1996,  2783,  3977,  1012,  2119,  1997,  2068,  2024,  7142,
         1012,  1999,  2236,  1010,  2065,  1996,  7099,  2686,  2003,  7142,
         1010,  1996, 13711,  1997,  2019,  2724,  4225,  2006,  1996,  7099,
         2686,  2003,  2036,  7142,  1012,   102])"
1072,1,"['location', 'associated', 'probability', 'processes', 'events', 'variations', 'frequency', 'variables', 'random', 'experiments', 'data']", Discrete Versus Continuous Events,seg_251,"probabilistic events are associated with random experiments, random variations in some processes (like manufacturing), or unknown variations in some variables (probability that an air-bag in a car will fail to inflate upon a collision depends on the speed at impact and various circuitry characteristics. probability of a rain or snow (at an appropriate location) tomorrow depends on hundreds of interacting atmospheric variables). one need not understand the variables that drive a phenomenon to predict the probability. past data collected over a period of time can be used in such situations using the frequency approach. in this chapter, we are more interested in probability mechanisms involved in random experiments.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([  101,  4013,  3676, 27965,  4588,  2824,  2024,  3378,  2007,  6721,
         7885,  1010,  6721,  8358,  1999,  2070,  6194,  1006,  2066,  5814,
         1007,  1010,  2030,  4242,  8358,  1999,  2070, 10857,  1006,  9723,
         2008,  2019,  2250,  1011,  4524,  1999,  1037,  2482,  2097,  8246,
         2000,  1999, 10258,  3686,  2588,  1037, 12365,  9041,  2006,  1996,
         3177,  2012,  4254,  1998,  2536,  4984,  2854,  6459,  1012,  9723,
         1997,  1037,  4542,  2030,  4586,  1006,  2012,  2019,  6413,  3295,
         1007,  4826,  9041,  2006,  5606,  1997, 21935, 12483, 10857,  1007,
         1012,  2028,  2342,  2025,  3305,  1996, 10857,  2008,  3298,  1037,
         9575,  2000, 16014,  1996,  9723,  1012,  2627,  2951,  5067,  2058,
         1037,  2558,  1997,  2051,  2064,  2022,  2109,  1999,  2107,  8146,
         2478,  1996,  6075,  3921,  1012,  1999,  2023,  3127,  1010,  2057,
         2024,  2062,  4699,  1999,  9723, 10595,  2920,  1999,  6721,  7885,
         1012,   102])"
1073,1,"['probability', 'event', 'outcome', 'random', 'results', 'experiment']", Discrete Versus Continuous Events,seg_251,"each event of a random experiment is mapped to a probability between 0 and 1. this is denoted by p(a) where a is the event label, name, or token; and p() is the notation for probability. an event is said to occur if the outcome of a random experiment results in that event.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([  101,  2169,  2724,  1997,  1037,  6721,  7551,  2003, 17715,  2000,
         1037,  9723,  2090,  1014,  1998,  1015,  1012,  2023,  2003, 19537,
         2011,  1052,  1006,  1037,  1007,  2073,  1037,  2003,  1996,  2724,
         3830,  1010,  2171,  1010,  2030, 19204,  1025,  1998,  1052,  1006,
         1007,  2003,  1996, 14869,  2005,  9723,  1012,  2019,  2724,  2003,
         2056,  2000,  5258,  2065,  1996,  9560,  1997,  1037,  6721,  7551,
         3463,  1999,  2008,  2724,  1012,   102])"
1074,1,"['combination', 'event']", Discrete Versus Continuous Events,seg_251,example 5.16 combination event examples,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([ 101, 2742, 1019, 1012, 2385, 5257, 2724, 4973,  102])"
1075,1,"['failures', 'events']", Discrete Versus Continuous Events,seg_251,give examples of events defined on each of the following: (i) software-controlled machine failures and (ii) viscous flow through a pipe.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([  101,  2507,  4973,  1997,  2824,  4225,  2006,  2169,  1997,  1996,
         2206,  1024,  1006,  1045,  1007,  4007,  1011,  4758,  3698, 15428,
         1998,  1006,  2462,  1007, 25292, 27199,  4834,  2083,  1037,  8667,
         1012,   102])"
1076,1,"['vary', 'events', 'variations', 'average', 'combination', 'case']", Discrete Versus Continuous Events,seg_251,"solution 5.16 machines may fail due to (i) mechanical faults, (ii) electrical faults, (iii) software faults, (iv) wrong handling or wrong initial settings, and (vi) other reasons. let these be denoted by events m, e, s, h and o. combination events can then be represented as described earlier. in the case of viscous flow, we could define events using flow-rate or average amount of liquid transported since last overhaul work. this could vary slightly depending on the pressure applied, viscosity of liquid, surface corrosion, and outside temperature variations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([  101,  5576,  1019,  1012,  2385,  6681,  2089,  8246,  2349,  2000,
         1006,  1045,  1007,  6228, 19399,  1010,  1006,  2462,  1007,  5992,
        19399,  1010,  1006,  3523,  1007,  4007, 19399,  1010,  1006,  4921,
         1007,  3308,  8304,  2030,  3308,  3988, 10906,  1010,  1998,  1006,
         6819,  1007,  2060,  4436,  1012,  2292,  2122,  2022, 19537,  2011,
         2824,  1049,  1010,  1041,  1010,  1055,  1010,  1044,  1998,  1051,
         1012,  5257,  2824,  2064,  2059,  2022,  3421,  2004,  2649,  3041,
         1012,  1999,  1996,  2553,  1997, 25292, 27199,  4834,  1010,  2057,
         2071,  9375,  2824,  2478,  4834,  1011,  3446,  2030,  2779,  3815,
         1997,  6381,  9687,  2144,  2197, 18181,  2147,  1012,  2023,  2071,
         8137,  3621,  5834,  2006,  1996,  3778,  4162,  1010, 25292, 13186,
         3012,  1997,  6381,  1010,  3302, 24625,  1010,  1998,  2648,  4860,
         8358,  1012,   102])"
1077,1,"['probability', 'events', 'interval', 'probabilities', 'event']", Discrete Versus Continuous Events,seg_251,"almost certain events have probability one. as examples, the probability that an email message with a correctly specified address will be delivered to an existing person within a reasonable time interval is 1 (unless the recipient’s mailbox is full or the server is down, the probability of which are small), probability that a payment for an online transaction processed and approved through a payment gateway will be credited to the merchant’s account is 1. uncertain or unlikely events have probability near 0. for instance, the probability that an atm machine will eject an amount larger than requested by a customer is zero. a probability of 0.5 implies a “fifty–fifty” chance for the occurrence or nonoccurrence of an event. experimentalists, managers, and practitioners are more interested in probabilities that deviate much away from 0.5 owing to this simple reason.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6431,  7142,  2824])","tensor([  101,  2471,  3056,  2824,  2031,  9723,  2028,  1012,  2004,  4973,
         1010,  1996,  9723,  2008,  2019, 10373,  4471,  2007,  1037, 11178,
         9675,  4769,  2097,  2022,  5359,  2000,  2019,  4493,  2711,  2306,
         1037,  9608,  2051, 13483,  2003,  1015,  1006,  4983,  1996,  7799,
         1521,  1055,  5653,  8758,  2003,  2440,  2030,  1996,  8241,  2003,
         2091,  1010,  1996,  9723,  1997,  2029,  2024,  2235,  1007,  1010,
         9723,  2008,  1037,  7909,  2005,  2019,  3784, 12598, 13995,  1998,
         4844,  2083,  1037,  7909, 11909,  2097,  2022,  5827,  2000,  1996,
         6432,  1521,  1055,  4070,  2003,  1015,  1012,  9662,  2030,  9832,
         2824,  2031,  9723,  2379,  1014,  1012,  2005,  6013,  1010,  1996,
         9723,  2008,  2019, 27218,  3698,  2097,  1041, 20614,  2019,  3815,
         3469,  2084,  7303,  2011,  1037,  8013,  2003,  5717,  1012,  1037,
         9723,  1997,  1014,  1012,  1019, 12748,  1037,  1523,  5595,  1516,
         5595,  1524,  3382,  2005,  1996, 14404,  2030,  2512, 10085, 10841,
        14343,  5897,  1997,  2019,  2724,  1012,  6388,  5130,  1010, 10489,
         1010,  1998, 14617,  2024,  2062,  4699,  1999,  4013,  3676, 14680,
         2008, 14386,  3686,  2172,  2185,  2013,  1014,  1012,  1019, 11427,
         2000,  2023,  3722,  3114,  1012,   102])"
1078,1,"['probability', 'events']", Event Categories,seg_253,there are many types of events encountered in probability problems.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([2724, 7236])","tensor([ 101, 2045, 2024, 2116, 4127, 1997, 2824, 8567, 1999, 9723, 3471, 1012,
         102])"
1079,1,"['cases', 'simple events', 'set', 'compound', 'events', 'event', 'simple event', 'compound event', 'compound events']", Event Categories,seg_253,"1. simple and compound events a simple event (also called elementary event) cannot be decomposed into simpler events. all compound events are built using either simple events or other compound events using event operations. in most cases, a compound event can be sliced up into several fine-grained simple events. consider the working condition of a device. it may be defective (d) or nondefective (n). these are simple events. an event can comprise of a set of items. consider the tossing of two dice, each with six faces marked 1–6. the possible events are {(1,1), (1,2), ..., (6,6)}.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2724, 7236])","tensor([  101,  1015,  1012,  3722,  1998,  7328,  2824,  1037,  3722,  2724,
         1006,  2036,  2170,  4732,  2724,  1007,  3685,  2022, 21933,  8737,
        24768,  2046, 16325,  2824,  1012,  2035,  7328,  2824,  2024,  2328,
         2478,  2593,  3722,  2824,  2030,  2060,  7328,  2824,  2478,  2724,
         3136,  1012,  1999,  2087,  3572,  1010,  1037,  7328,  2724,  2064,
         2022, 15920,  2039,  2046,  2195,  2986,  1011,  8982,  2098,  3722,
         2824,  1012,  5136,  1996,  2551,  4650,  1997,  1037,  5080,  1012,
         2009,  2089,  2022, 28829,  1006,  1040,  1007,  2030,  2512,  3207,
        25969,  3512,  1006,  1050,  1007,  1012,  2122,  2024,  3722,  2824,
         1012,  2019,  2724,  2064, 15821,  1997,  1037,  2275,  1997,  5167,
         1012,  5136,  1996, 15021,  1997,  2048, 18740,  1010,  2169,  2007,
         2416,  5344,  4417,  1015,  1516,  1020,  1012,  1996,  2825,  2824,
         2024,  1063,  1006,  1015,  1010,  1015,  1007,  1010,  1006,  1015,
         1010,  1016,  1007,  1010,  1012,  1012,  1012,  1010,  1006,  1020,
         1010,  1020,  1007,  1065,  1012,   102])"
1080,1,"['disjoint', 'events', 'mutually exclusive events', 'mutually exclusive']", Event Categories,seg_253,"2. mutually exclusive events events are mutually exclusive if they are disjoint. symbolically, two events a and b are mutually exclusive or disjoint if a∩b =   or equivalently",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2724, 7236])","tensor([  101,  1016,  1012, 20271,  7262,  2824,  2824,  2024, 20271,  7262,
         2065,  2027,  2024,  4487,  2015,  5558, 18447,  1012, 12613,  3973,
         1010,  2048,  2824,  1037,  1998,  1038,  2024, 20271,  7262,  2030,
         4487,  2015,  5558, 18447,  2065,  1037, 30131,  2497,  1027,  2030,
         5662,  2135,   102])"
1081,1,"['tail', 'set', 'events', 'probability', 'disjoint', 'event', 'mutually exclusive events', 'experiment', 'mutually exclusive']", Event Categories,seg_253,"p(a∩b) = 0. in the coin-tossing experiment, the mutually exclusive events are head and tail. this definition can be extended to any number of events. let a1,a2, … ,an be n events. if n   2, they are totally mutually exclusive if p(a1 ∩ a2 ∩ · · · ∩ an) =  . if they are totally mutually exclusive, they need not be pairwise mutually exclusive. for instance, events a and b can have a common portion and b,c can have a common portion, but a and c can be disjoint. this implies that p(a ∩ c) =  . as   ∩ x is   where x is any other event, we can simply add events to totally mutually exclusive events. suppose b = a. incorporating b to p(a ∩ c) =   we get p(a ∩ b ∩ c) =   although a ∩ b = a. a set of events is minimally mutually exclusive if there are events a1,a2, … ,ak such that p(a1 ∩ a2 ∩ · · · ∩ ak) =  , but this relationship does not hold for any m   k. the mutually exclusivity property is extremely useful in decomposing some of the complex probability problems into simpler ones.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2724, 7236])","tensor([  101,  1052,  1006,  1037, 30131,  2497,  1007,  1027,  1014,  1012,
         1999,  1996,  9226,  1011, 15021,  7551,  1010,  1996, 20271,  7262,
         2824,  2024,  2132,  1998,  5725,  1012,  2023,  6210,  2064,  2022,
         3668,  2000,  2151,  2193,  1997,  2824,  1012,  2292, 17350,  1010,
        22441,  1010,  1529,  1010,  2019,  2022,  1050,  2824,  1012,  2065,
         1050,  1016,  1010,  2027,  2024,  6135, 20271,  7262,  2065,  1052,
         1006, 17350,  1604, 22441,  1604,  1087,  1087,  1087,  1604,  2019,
         1007,  1027,  1012,  2065,  2027,  2024,  6135, 20271,  7262,  1010,
         2027,  2342,  2025,  2022,  3940, 14244, 20271,  7262,  1012,  2005,
         6013,  1010,  2824,  1037,  1998,  1038,  2064,  2031,  1037,  2691,
         4664,  1998,  1038,  1010,  1039,  2064,  2031,  1037,  2691,  4664,
         1010,  2021,  1037,  1998,  1039,  2064,  2022,  4487,  2015,  5558,
        18447,  1012,  2023, 12748,  2008,  1052,  1006,  1037,  1604,  1039,
         1007,  1027,  1012,  2004,  1604,  1060,  2003,  2073,  1060,  2003,
         2151,  2060,  2724,  1010,  2057,  2064,  3432,  5587,  2824,  2000,
         6135, 20271,  7262,  2824,  1012,  6814,  1038,  1027,  1037,  1012,
        13543,  1038,  2000,  1052,  1006,  1037,  1604,  1039,  1007,  1027,
         2057,  2131,  1052,  1006,  1037,  1604,  1038,  1604,  1039,  1007,
         1027,  2348,  1037,  1604,  1038,  1027,  1037,  1012,  1037,  2275,
         1997,  2824,  2003, 10124,  2135, 20271,  7262,  2065,  2045,  2024,
         2824, 17350,  1010, 22441,  1010,  1529,  1010, 17712,  2107,  2008,
         1052,  1006, 17350,  1604, 22441,  1604,  1087,  1087,  1087,  1604,
        17712,  1007,  1027,  1010,  2021,  2023,  3276,  2515,  2025,  2907,
         2005,  2151,  1049,  1047,  1012,  1996, 20271,  4654, 20464,  2271,
         7730,  3200,  2003,  5186,  6179,  1999, 21933,  8737, 18606,  2070,
         1997,  1996,  3375,  9723,  3471,  2046, 16325,  3924,  1012,   102])"
1082,1,['events'], Event Categories,seg_253,3. equally likely events (eles),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2724, 7236])","tensor([ 101, 1017, 1012, 8053, 3497, 2824, 1006, 3449, 2229, 1007,  102])"
1083,1,"['cases', 'outcomes', 'prime number', 'experiments', 'cardinality', 'independent', 'events', 'probability', 'unbiased', 'probabilities', 'results', 'sample space', 'event', 'sample', 'random', 'experiment']", Event Categories,seg_253,"if every event of an experiment has an equal chance of occurring, they are called equally likely events (eles). probability problems are greatly simplified in such situations. examples are dice and coin tosses. consider the outcomes of an unbiased coin (with two possible events h and t), tosses of a six-faced die, a regular prism with four faces, or a regular pyramid with five faces. the probability of any event occurring in ele is one divided by the total number of events in the sample space. consider a regular five-faced pyramid with faces numbered from 1 to 5 that is tossed to a hard surface. as there is a unique face (at the bottom) on which it will rest, we can define an event as “face number that is hidden at the bottom.” then, each of the faces is equally likely with probability 1/5. two or more independent experiments with ele may be combined. let v denote an event defined on the sample space ω of n equally likely outcomes. then p(v) = |v|/n where |v| denotes the cardinality of v (number of favorable elementary events in v). consider two tosses of our pyramid. define an event that v=“the sum of the numbers at the bottom is even.” there are 5×5 = 25 total possibilities. the 13 favorable cases are (1,1), (1,3), (1,5), (2,2), (2,4), (3,1), (3,3), (3,5), (4,2), (4,4), (5,1), (5,3), and (5,5). hence p(v) = 13/25. next consider the toss of a fair die. let v be the event that the face that shows up is a prime number. the favorable cases are v = {1, 2, 3, 5} with |v| = 4. this gives p(v) = 4∕6 = 2∕3. these results are summarized in the following theorem. equally likely principle (elp): if the sample spaceω of a random experiment consists of a finite number of equally likely outcomes, then any non-null event e defined on ω has probability of occurrence |e|∕|ω|. these probabilities can easily be calculated directly using the count-and-conquer techniques or indirectly calculated using one of the do-little principles (section 5.6.4 (p. 131), section 5.15.4(p. 159)).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2724, 7236])","tensor([  101,  2065,  2296,  2724,  1997,  2019,  7551,  2038,  2019,  5020,
         3382,  1997, 10066,  1010,  2027,  2024,  2170,  8053,  3497,  2824,
         1006,  3449,  2229,  1007,  1012,  9723,  3471,  2024,  6551, 11038,
         1999,  2107,  8146,  1012,  4973,  2024, 18740,  1998,  9226, 10055,
         2229,  1012,  5136,  1996, 13105,  1997,  2019,  4895, 11607,  6924,
         9226,  1006,  2007,  2048,  2825,  2824,  1044,  1998,  1056,  1007,
         1010, 10055,  2229,  1997,  1037,  2416,  1011,  4320,  3280,  1010,
         1037,  3180, 26113,  2007,  2176,  5344,  1010,  2030,  1037,  3180,
        11918,  2007,  2274,  5344,  1012,  1996,  9723,  1997,  2151,  2724,
        10066,  1999,  3449,  2063,  2003,  2028,  4055,  2011,  1996,  2561,
         2193,  1997,  2824,  1999,  1996,  7099,  2686,  1012,  5136,  1037,
         3180,  2274,  1011,  4320, 11918,  2007,  5344,  8597,  2013,  1015,
         2000,  1019,  2008,  2003,  7463,  2000,  1037,  2524,  3302,  1012,
         2004,  2045,  2003,  1037,  4310,  2227,  1006,  2012,  1996,  3953,
         1007,  2006,  2029,  2009,  2097,  2717,  1010,  2057,  2064,  9375,
         2019,  2724,  2004,  1523,  2227,  2193,  2008,  2003,  5023,  2012,
         1996,  3953,  1012,  1524,  2059,  1010,  2169,  1997,  1996,  5344,
         2003,  8053,  3497,  2007,  9723,  1015,  1013,  1019,  1012,  2048,
         2030,  2062,  2981,  7885,  2007,  3449,  2063,  2089,  2022,  4117,
         1012,  2292,  1058, 19090,  2019,  2724,  4225,  2006,  1996,  7099,
         2686,  1179,  1997,  1050,  8053,  3497, 13105,  1012,  2059,  1052,
         1006,  1058,  1007,  1027,  1064,  1058,  1064,  1013,  1050,  2073,
         1064,  1058,  1064, 14796,  1996,  7185,  3012,  1997,  1058,  1006,
         2193,  1997, 11119,  4732,  2824,  1999,  1058,  1007,  1012,  5136,
         2048, 10055,  2229,  1997,  2256, 11918,  1012,  9375,  2019,  2724,
         2008,  1058,  1027,  1523,  1996,  7680,  1997,  1996,  3616,  2012,
         1996,  3953,  2003,  2130,  1012,  1524,  2045,  2024,  1019, 26306,
         2629,  1027,  2423,  2561, 12020,  1012,  1996,  2410, 11119,  3572,
         2024,  1006,  1015,  1010,  1015,  1007,  1010,  1006,  1015,  1010,
         1017,  1007,  1010,  1006,  1015,  1010,  1019,  1007,  1010,  1006,
         1016,  1010,  1016,  1007,  1010,  1006,  1016,  1010,  1018,  1007,
         1010,  1006,  1017,  1010,  1015,  1007,  1010,  1006,  1017,  1010,
         1017,  1007,  1010,  1006,  1017,  1010,  1019,  1007,  1010,  1006,
         1018,  1010,  1016,  1007,  1010,  1006,  1018,  1010,  1018,  1007,
         1010,  1006,  1019,  1010,  1015,  1007,  1010,  1006,  1019,  1010,
         1017,  1007,  1010,  1998,  1006,  1019,  1010,  1019,  1007,  1012,
         6516,  1052,  1006,  1058,  1007,  1027,  2410,  1013,  2423,  1012,
         2279,  5136,  1996, 10055,  1997,  1037,  4189,  3280,  1012,  2292,
         1058,  2022,  1996,  2724,  2008,  1996,  2227,  2008,  3065,  2039,
         2003,  1037,  3539,  2193,  1012,  1996, 11119,  3572,  2024,  1058,
         1027,  1063,  1015,  1010,  1016,  1010,  1017,  1010,  1019,  1065,
         2007,  1064,  1058,  1064,  1027,  1018,  1012,  2023,  3957,  1052,
         1006,  1058,  1007,  1027,   100,  1027,   100,  1012,  2122,  3463,
         2024, 22539,  1999,  1996,  2206,  9872,  1012,  8053,  3497,  6958,
         1006,  3449,  2361,  1007,  1024,  2065,  1996,  7099,  2686, 29739,
         1997,  1037,  6721,  7551,  3774,  1997,  1037, 10713,  2193,  1997,
         8053,  3497, 13105,  1010,  2059,  2151,  2512,  1011, 19701,  2724,
         1041,  4225,  2006,  1179,  2038,  9723,  1997, 14404,  1064,  1041,
         1064,   100,  1064,  1179,  1064,  1012,  2122,  4013,  3676, 14680,
         2064,  4089,  2022, 10174,  3495,  2478,  1996,  4175,  1011,  1998,
         1011, 16152,  5461,  2030, 17351, 10174,  2478,  2028,  1997,  1996,
         2079,   102])"
1084,1,['events'], Event Categories,seg_253,4. complementary events,tensor(1),"tensor([0., 0., 0., 0., 1., 0.])","tensor([2724, 7236])","tensor([  101,  1018,  1012, 21053,  2824,   102])"
1085,1,"['complement', 'events', 'outcomes', 'event', 'sample']", Event Categories,seg_253,complementary events are those that do not include the outcomes of another event. this complement operation is taken with respect to the entire sample,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([2724, 7236])","tensor([  101, 21053,  2824,  2024,  2216,  2008,  2079,  2025,  2421,  1996,
        13105,  1997,  2178,  2724,  1012,  2023, 13711,  3169,  2003,  2579,
         2007,  4847,  2000,  1996,  2972,  7099,   102])"
1086,1,"['complement', 'sample space', 'set', 'complementary event', 'events', 'probability', 'outcomes', 'event', 'outcome', 'sample', 'complement of an event']", Event Categories,seg_253,"space ω. this means that complement of an event belongs to the sample space. some probability problems can be substantially simplified by the complementary event principle. one common example is those problems that contain at least one outcome. if the number of outcomes is large, we could take the complement of the event to get a simple favorable set. a related operator is event difference (denoted by −), which is taken with respect to another event. thus, x-y represents an event that contains events in x but not in y. consider the event v defined on the toss of a fair die. the complementary event comprises vc = {4, 6}.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([2724, 7236])","tensor([  101,  2686,  1179,  1012,  2023,  2965,  2008, 13711,  1997,  2019,
         2724,  7460,  2000,  1996,  7099,  2686,  1012,  2070,  9723,  3471,
         2064,  2022, 12381, 11038,  2011,  1996, 21053,  2724,  6958,  1012,
         2028,  2691,  2742,  2003,  2216,  3471,  2008,  5383,  2012,  2560,
         2028,  9560,  1012,  2065,  1996,  2193,  1997, 13105,  2003,  2312,
         1010,  2057,  2071,  2202,  1996, 13711,  1997,  1996,  2724,  2000,
         2131,  1037,  3722, 11119,  2275,  1012,  1037,  3141,  6872,  2003,
         2724,  4489,  1006, 19537,  2011,  1597,  1007,  1010,  2029,  2003,
         2579,  2007,  4847,  2000,  2178,  2724,  1012,  2947,  1010,  1060,
         1011,  1061,  5836,  2019,  2724,  2008,  3397,  2824,  1999,  1060,
         2021,  2025,  1999,  1061,  1012,  5136,  1996,  2724,  1058,  4225,
         2006,  1996, 10055,  1997,  1037,  4189,  3280,  1012,  1996, 21053,
         2724,  8681, 18315,  1027,  1063,  1018,  1010,  1020,  1065,  1012,
          102])"
1087,1,"['dependence', 'events', 'independent events', 'event', 'dependent', 'combinations', 'independent']", Event Categories,seg_253,"5. dependent and independent events events may be dependent on one another. this dependence can be due to a shared property or some underlying commonalities. two or more events are independent if the occurrence of one in no way affects the occurrence of others. consider the following examples: (i) let x denote the event that an e-commerce customer at a video store has “red hair” and y denote the event that the order is for “adventure movie.” then, x and y are independent. (ii) consider a school kid with six shirts, five pants, and three ties. wearing any of the combinations are independent events. however, the decision to choose a shirt that matches the color of the pants or a tie that matches the shirt color may preclude some possibilities. thus, the events may be considered as dependent. see 5.15.7 in page 163 for further discussion.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([2724, 7236])","tensor([  101,  1019,  1012,  7790,  1998,  2981,  2824,  2824,  2089,  2022,
         7790,  2006,  2028,  2178,  1012,  2023, 18642,  2064,  2022,  2349,
         2000,  1037,  4207,  3200,  2030,  2070, 10318,  2691, 11475,  7368,
         1012,  2048,  2030,  2062,  2824,  2024,  2981,  2065,  1996, 14404,
         1997,  2028,  1999,  2053,  2126, 13531,  1996, 14404,  1997,  2500,
         1012,  5136,  1996,  2206,  4973,  1024,  1006,  1045,  1007,  2292,
         1060, 19090,  1996,  2724,  2008,  2019,  1041,  1011,  6236,  8013,
         2012,  1037,  2678,  3573,  2038,  1523,  2417,  2606,  1524,  1998,
         1061, 19090,  1996,  2724,  2008,  1996,  2344,  2003,  2005,  1523,
         6172,  3185,  1012,  1524,  2059,  1010,  1060,  1998,  1061,  2024,
         2981,  1012,  1006,  2462,  1007,  5136,  1037,  2082,  4845,  2007,
         2416, 11344,  1010,  2274,  6471,  1010,  1998,  2093,  7208,  1012,
         4147,  2151,  1997,  1996, 14930,  2024,  2981,  2824,  1012,  2174,
         1010,  1996,  3247,  2000,  5454,  1037,  3797,  2008,  3503,  1996,
         3609,  1997,  1996,  6471,  2030,  1037,  5495,  2008,  3503,  1996,
         3797,  3609,  2089,  3653, 20464, 12672,  2070, 12020,  1012,  2947,
         1010,  1996,  2824,  2089,  2022,  2641,  2004,  7790,  1012,  2156,
         1019,  1012,  2321,  1012,  1021,  1999,  3931, 17867,  2005,  2582,
         6594,  1012,   102])"
1088,1,"['tail', 'geometric', 'sample space', 'geometric distribution', 'probability', 'events', 'event', 'sample', 'dependent', 'condition', 'experiment', 'distribution', 'conditional']", Event Categories,seg_253,"6. conditional events events may depend conditionally on other events. these are called conditional events. in other words, you have knowledge that some other event has occurred. this filters out a subset of the sample space, thereby reducing the computational burden. consider a simple experiment of throwing a fair coin until you get the first head. as the coin is fair, probability of getting a head in the first throw is 1/2. the event of head occurring in the second throw is conditional on the first throw resulting in a tail. similarly for subsequent events. these are the sequence of events considered in geometric distribution. consider an electronic board with a parallel circuit in each of which there are three components. if any component in one circuit fails, the device will continue operating. however if at least one component in both circuits fails, the device will stop working. thus, the nonworking condition of a device is conditionally dependent on both circuits in the board.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2724, 7236])","tensor([  101,  1020,  1012, 18462,  2824,  2824,  2089, 12530, 18462,  2135,
         2006,  2060,  2824,  1012,  2122,  2024,  2170, 18462,  2824,  1012,
         1999,  2060,  2616,  1010,  2017,  2031,  3716,  2008,  2070,  2060,
         2724,  2038,  4158,  1012,  2023, 17736,  2041,  1037, 16745,  1997,
         1996,  7099,  2686,  1010,  8558,  8161,  1996, 15078, 10859,  1012,
         5136,  1037,  3722,  7551,  1997,  6886,  1037,  4189,  9226,  2127,
         2017,  2131,  1996,  2034,  2132,  1012,  2004,  1996,  9226,  2003,
         4189,  1010,  9723,  1997,  2893,  1037,  2132,  1999,  1996,  2034,
         5466,  2003,  1015,  1013,  1016,  1012,  1996,  2724,  1997,  2132,
        10066,  1999,  1996,  2117,  5466,  2003, 18462,  2006,  1996,  2034,
         5466,  4525,  1999,  1037,  5725,  1012,  6660,  2005,  4745,  2824,
         1012,  2122,  2024,  1996,  5537,  1997,  2824,  2641,  1999, 14965,
         4353,  1012,  5136,  2019,  4816,  2604,  2007,  1037,  5903,  4984,
         1999,  2169,  1997,  2029,  2045,  2024,  2093,  6177,  1012,  2065,
         2151,  6922,  1999,  2028,  4984, 11896,  1010,  1996,  5080,  2097,
         3613,  4082,  1012,  2174,  2065,  2012,  2560,  2028,  6922,  1999,
         2119, 13782, 11896,  1010,  1996,  5080,  2097,  2644,  2551,  1012,
         2947,  1010,  1996,  2512, 21398,  4650,  1997,  1037,  5080,  2003,
        18462,  2135,  7790,  2006,  2119, 13782,  1999,  1996,  2604,  1012,
          102])"
1089,1,"['complement', 'sample space', 'events', 'event', 'sample', 'combination', 'discrete']", DoLittle Principle for Events,seg_255,complementary events are sometimes easy to find when the sample space consists of a large number of discrete events as in the above-mentioned example. these are especially true in “at least k” and “at most k” type problems (or a combination of both) that can be considerably simplified by taking the complement or opposite event. it is also called complement-and-conquer principle. it has two versions—a count version,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  2005,  2824])","tensor([  101, 21053,  2824,  2024,  2823,  3733,  2000,  2424,  2043,  1996,
         7099,  2686,  3774,  1997,  1037,  2312,  2193,  1997, 16246,  2824,
         2004,  1999,  1996,  2682,  1011,  3855,  2742,  1012,  2122,  2024,
         2926,  2995,  1999,  1523,  2012,  2560,  1047,  1524,  1998,  1523,
         2012,  2087,  1047,  1524,  2828,  3471,  1006,  2030,  1037,  5257,
         1997,  2119,  1007,  2008,  2064,  2022,  9839, 11038,  2011,  2635,
         1996, 13711,  2030,  4500,  2724,  1012,  2009,  2003,  2036,  2170,
        13711,  1011,  1998,  1011, 16152,  6958,  1012,  2009,  2038,  2048,
         4617,  1517,  1037,  4175,  2544,   102])"
1090,1,"['probability', 'events']", DoLittle Principle for Events,seg_255,to count the complementary events and a probability version to obtain the probability of complementary events. both of them are related.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  2005,  2824])","tensor([  101,  2000,  4175,  1996, 21053,  2824,  1998,  1037,  9723,  2544,
         2000,  6855,  1996,  9723,  1997, 21053,  2824,  1012,  2119,  1997,
         2068,  2024,  3141,  1012,   102])"
1091,1,"['outcomes', 'compound events', 'complement', 'associated', 'events', 'union', 'logical operators', 'probability', 'compound', 'sample space', 'set', 'event', 'sample', 'random', 'experiment', 'combinations']", EVENT ALGEBRA,seg_257,"every random experiment involves two or more events. events are usually combined using the logical operators {and, or, not}. combining events using or operator often increases the probability, while combining events using and operator often decreases the probability. if a and b are two events, p(a or b) = p(a) only when b is a proper subset of a. similarly p(a and b) = p(a) only when a and b are exactly identical. the not operator may or may not increase the probability—this depends on how big a chunk of the sample space is spanned by the defined event. the events resulting from applying a not operator to another event is called its complement. for example, consider the throw of a six-faced die numbered 1–6. if event x is defined as “an even number shows up,” then it has probability 0.5 as the possible outcomes are x = {2, 4, 6}. its complement event also has probability 0.5, as the not operator returns xc = {1, 3, 5}. next consider the event “the number that shows up is a prime.” this has associated probability 4/6 = 2/3 as the possible outcomes are {1, 2, 3, 5}. its complement event consists of {4, 6} with probability 2/6 = 1/3. here, the complementation has reduced the probability. unless otherwise stated, the complement is always taken with respect to the entire sample space ω. in other words, the not operator is to be interpreted as anything that remains in the sample space other than those in the considered event or subspace. sometimes, we seek the probability of occurrence of event combinations. events can be combined using set theoretic operations union (∪), intersections (∩), complements, and differences. any of these can be combined to produce compound events.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2724, 11208])","tensor([  101,  2296,  6721,  7551,  7336,  2048,  2030,  2062,  2824,  1012,
         2824,  2024,  2788,  4117,  2478,  1996, 11177,  9224,  1063,  1998,
         1010,  2030,  1010,  2025,  1065,  1012, 11566,  2824,  2478,  2030,
         6872,  2411,  7457,  1996,  9723,  1010,  2096, 11566,  2824,  2478,
         1998,  6872,  2411, 17913,  1996,  9723,  1012,  2065,  1037,  1998,
         1038,  2024,  2048,  2824,  1010,  1052,  1006,  1037,  2030,  1038,
         1007,  1027,  1052,  1006,  1037,  1007,  2069,  2043,  1038,  2003,
         1037,  5372, 16745,  1997,  1037,  1012,  6660,  1052,  1006,  1037,
         1998,  1038,  1007,  1027,  1052,  1006,  1037,  1007,  2069,  2043,
         1037,  1998,  1038,  2024,  3599,  7235,  1012,  1996,  2025,  6872,
         2089,  2030,  2089,  2025,  3623,  1996,  9723,  1517,  2023,  9041,
         2006,  2129,  2502,  1037, 20000,  1997,  1996,  7099,  2686,  2003,
        18212,  2011,  1996,  4225,  2724,  1012,  1996,  2824,  4525,  2013,
        11243,  1037,  2025,  6872,  2000,  2178,  2724,  2003,  2170,  2049,
        13711,  1012,  2005,  2742,  1010,  5136,  1996,  5466,  1997,  1037,
         2416,  1011,  4320,  3280,  8597,  1015,  1516,  1020,  1012,  2065,
         2724,  1060,  2003,  4225,  2004,  1523,  2019,  2130,  2193,  3065,
         2039,  1010,  1524,  2059,  2009,  2038,  9723,  1014,  1012,  1019,
         2004,  1996,  2825, 13105,  2024,  1060,  1027,  1063,  1016,  1010,
         1018,  1010,  1020,  1065,  1012,  2049, 13711,  2724,  2036,  2038,
         9723,  1014,  1012,  1019,  1010,  2004,  1996,  2025,  6872,  5651,
         1060,  2278,  1027,  1063,  1015,  1010,  1017,  1010,  1019,  1065,
         1012,  2279,  5136,  1996,  2724,  1523,  1996,  2193,  2008,  3065,
         2039,  2003,  1037,  3539,  1012,  1524,  2023,  2038,  3378,  9723,
         1018,  1013,  1020,  1027,  1016,  1013,  1017,  2004,  1996,  2825,
        13105,  2024,  1063,  1015,  1010,  1016,  1010,  1017,  1010,  1019,
         1065,  1012,  2049, 13711,  2724,  3774,  1997,  1063,  1018,  1010,
         1020,  1065,  2007,  9723,  1016,  1013,  1020,  1027,  1015,  1013,
         1017,  1012,  2182,  1010,  1996, 13711,  3370,  2038,  4359,  1996,
         9723,  1012,  4983,  4728,  3090,  1010,  1996, 13711,  2003,  2467,
         2579,  2007,  4847,  2000,  1996,  2972,  7099,  2686,  1179,  1012,
         1999,  2060,  2616,  1010,  1996,  2025,  6872,  2003,  2000,  2022,
        10009,  2004,  2505,  2008,  3464,  1999,  1996,  7099,  2686,  2060,
         2084,  2216,  1999,  1996,  2641,  2724,  2030, 24807, 10732,  1012,
         2823,  1010,  2057,  6148,  1996,  9723,  1997, 14404,  1997,  2724,
        14930,  1012,  2824,  2064,  2022,  4117,  2478,  2275, 14833, 13465,
         2594,  3136,  2586,  1006,  1605,  1007,  1010, 26540,  1006,  1604,
         1007,  1010, 13711,  2015,  1010,  1998,  5966,  1012,  2151,  1997,
         2122,  2064,  2022,  4117,  2000,  3965,  7328,  2824,  1012,   102])"
1092,1,"['set theory', 'set', 'probability', 'events', 'event', 'intersection', 'union', 'joint', 'discrete']", Laws of Events,seg_259,"there are several laws of events that are direct descendants of corresponding laws of set theory. these laws are helpful to solve some of the discrete probability problems. more importantly, they form the theoretical foundations on which classical probability theory is built up. most of the axioms of probability are direct generalizations of corresponding event axioms. union of events represents the occurrence of either or both of them, whereas intersection of two events represents their joint occurrence (both occur).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  2045,  2024,  2195,  4277,  1997,  2824,  2008,  2024,  3622,
         8481,  1997,  7978,  4277,  1997,  2275,  3399,  1012,  2122,  4277,
         2024, 14044,  2000,  9611,  2070,  1997,  1996, 16246,  9723,  3471,
         1012,  2062, 14780,  1010,  2027,  2433,  1996,  9373, 10100,  2006,
         2029,  4556,  9723,  3399,  2003,  2328,  2039,  1012,  2087,  1997,
         1996, 22260, 29178,  1997,  9723,  2024,  3622,  2236, 22318,  1997,
         7978,  2724, 22260, 29178,  1012,  2586,  1997,  2824,  5836,  1996,
        14404,  1997,  2593,  2030,  2119,  1997,  2068,  1010,  6168,  6840,
         1997,  2048,  2824,  5836,  2037,  4101, 14404,  1006,  2119,  5258,
         1007,  1012,   102])"
1093,0,[], Laws of Events,seg_259,"consider a commercial flight that is scheduled for departure at a fixed time. a delay in departure can happen due to many reasons:–(i) technical problems with the aircraft, (ii) delay in one or more connecting flights that have passengers for current flight, (iii) delay of flight crew in reporting for duty (iv) delay in security checking, (v) delay due to runway problems or congestion, and (vi) other reasons.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4277, 1997, 2824])","tensor([  101,  5136,  1037,  3293,  3462,  2008,  2003,  5115,  2005,  6712,
         2012,  1037,  4964,  2051,  1012,  1037,  8536,  1999,  6712,  2064,
         4148,  2349,  2000,  2116,  4436,  1024,  1516,  1006,  1045,  1007,
         4087,  3471,  2007,  1996,  2948,  1010,  1006,  2462,  1007,  8536,
         1999,  2028,  2030,  2062,  7176,  7599,  2008,  2031,  5467,  2005,
         2783,  3462,  1010,  1006,  3523,  1007,  8536,  1997,  3462,  3626,
         1999,  7316,  2005,  4611,  1006,  4921,  1007,  8536,  1999,  3036,
         9361,  1010,  1006,  1058,  1007,  8536,  2349,  2000,  9271,  3471,
         2030, 20176,  1010,  1998,  1006,  6819,  1007,  2060,  4436,  1012,
          102])"
1094,1,"['events', 'intersection', 'union', 'independent']", Laws of Events,seg_259,assume that each of these is independent occurrences. form meaningful events using union and intersection of events.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0.,
        1., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  7868,  2008,  2169,  1997,  2122,  2003,  2981, 27247,  1012,
         2433, 15902,  2824,  2478,  2586,  1998,  6840,  1997,  2824,  1012,
          102])"
1095,1,"['events', 'union', 'event', 'combination', 'independent']", Laws of Events,seg_259,"solution 5.17 let t, v, w, x, y, and z denote each of the six events. as each of them are independent, a union represents an “either or” situation. for example, t ∪ v represents the event that the flight is delayed either due to technical problems with the aircraft or connecting flights are delayed. the event t ∪ v ∪ w ∪ x ∪ y denotes the event that there is a likely flight delay due to the occurrence of individual events or a combination of events mentioned. the event t ∩ v denotes that there is technical problem with the aircraft and connecting flights are delayed. if all events are represented by single character labels, we could drop the ∩ operator and represent multiple event occurrences by a concatenated label. for instance, w ∩ x ∩ y can be represented as wxy. this is just a new name or label given to a combination of events.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  5576,  1019,  1012,  2459,  2292,  1056,  1010,  1058,  1010,
         1059,  1010,  1060,  1010,  1061,  1010,  1998,  1062, 19090,  2169,
         1997,  1996,  2416,  2824,  1012,  2004,  2169,  1997,  2068,  2024,
         2981,  1010,  1037,  2586,  5836,  2019,  1523,  2593,  2030,  1524,
         3663,  1012,  2005,  2742,  1010,  1056,  1605,  1058,  5836,  1996,
         2724,  2008,  1996,  3462,  2003,  8394,  2593,  2349,  2000,  4087,
         3471,  2007,  1996,  2948,  2030,  7176,  7599,  2024,  8394,  1012,
         1996,  2724,  1056,  1605,  1058,  1605,  1059,  1605,  1060,  1605,
         1061, 14796,  1996,  2724,  2008,  2045,  2003,  1037,  3497,  3462,
         8536,  2349,  2000,  1996, 14404,  1997,  3265,  2824,  2030,  1037,
         5257,  1997,  2824,  3855,  1012,  1996,  2724,  1056,  1604,  1058,
        14796,  2008,  2045,  2003,  4087,  3291,  2007,  1996,  2948,  1998,
         7176,  7599,  2024,  8394,  1012,  2065,  2035,  2824,  2024,  3421,
         2011,  2309,  2839, 10873,  1010,  2057,  2071,  4530,  1996,  1604,
         6872,  1998,  5050,  3674,  2724, 27247,  2011,  1037,  9530, 16280,
        23854,  3830,  1012,  2005,  6013,  1010,  1059,  1604,  1060,  1604,
         1061,  2064,  2022,  3421,  2004,  1059, 18037,  1012,  2023,  2003,
         2074,  1037,  2047,  2171,  2030,  3830,  2445,  2000,  1037,  5257,
         1997,  2824,  1012,   102])"
1096,1,"['sets', 'set', 'probability', 'bayes', 'law of total probability', 'bayes theorem', 'total probability']", Laws of Events,seg_259,"5.7.1.1 law of total probability let x and y be two nonempty sets with common elements. then, we can partition the set x into two parts as x = x ∩ y + x ∩ y , where x ∩ y contains members of x with both traits and x ∩ y contains members of x without the trait of y. in terms of probability, this is written as p(x) = p(x ∩ y) + p(x ∩ y). similarly, y = y ∩ x + y ∩ x gives p(y) = p(y ∩ x) + p(y ∩ x). this result is used in the derivation of bayes theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([4277, 1997, 2824])","tensor([  101,  1019,  1012,  1021,  1012,  1015,  1012,  1015,  2375,  1997,
         2561,  9723,  2292,  1060,  1998,  1061,  2022,  2048,  3904, 27718,
         2100,  4520,  2007,  2691,  3787,  1012,  2059,  1010,  2057,  2064,
        13571,  1996,  2275,  1060,  2046,  2048,  3033,  2004,  1060,  1027,
         1060,  1604,  1061,  1009,  1060,  1604,  1061,  1010,  2073,  1060,
         1604,  1061,  3397,  2372,  1997,  1060,  2007,  2119, 12955,  1998,
         1060,  1604,  1061,  3397,  2372,  1997,  1060,  2302,  1996, 18275,
         1997,  1061,  1012,  1999,  3408,  1997,  9723,  1010,  2023,  2003,
         2517,  2004,  1052,  1006,  1060,  1007,  1027,  1052,  1006,  1060,
         1604,  1061,  1007,  1009,  1052,  1006,  1060,  1604,  1061,  1007,
         1012,  6660,  1010,  1061,  1027,  1061,  1604,  1060,  1009,  1061,
         1604,  1060,  3957,  1052,  1006,  1061,  1007,  1027,  1052,  1006,
         1061,  1604,  1060,  1007,  1009,  1052,  1006,  1061,  1604,  1060,
         1007,  1012,  2023,  2765,  2003,  2109,  1999,  1996, 29280,  1997,
         3016,  2229,  9872,  1012,   102])"
1097,1,"['commutative laws', 'set', 'disjoint', 'events', 'states', 'event', 'commutative law', 'event algebra', 'set theory']", Laws of Events,seg_259,"5.7.1.2 commutative laws the literal meaning of “commutative” is “unchanged in result by a reordering of operands.” these are meaningful for binary operators that take two operands. these laws are formed in event algebra and set theory using ∪ and ∩ set-theoretic operators. simply put, these laws state that the events on either side of these operators can be swapped. let x and y denote two events. then, the commutative law states that x ∪ y = y ∪ x and x ∩ y = y ∩ x. in example 2.17, t ∪ v and v ∪ t represent the same event. similarly, w ∩ x and x ∩ w represent the same thing. humans can easily conceive the meaning of these expressions by perception. this is especially easy when the events are disjoint. however, the law holds even when two events overlap. they are more useful when more than two events are involved.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  1019,  1012,  1021,  1012,  1015,  1012,  1016,  4012, 28120,
         8082,  4277,  1996, 18204,  3574,  1997,  1523,  4012, 28120,  8082,
         1524,  2003,  1523, 15704,  1999,  2765,  2011,  1037,  2128,  8551,
         7999,  1997,  3850, 18376,  1012,  1524,  2122,  2024, 15902,  2005,
        12441,  9224,  2008,  2202,  2048,  3850, 18376,  1012,  2122,  4277,
         2024,  2719,  1999,  2724, 11208,  1998,  2275,  3399,  2478,  1605,
         1998,  1604,  2275,  1011, 14833, 13465,  2594,  9224,  1012,  3432,
         2404,  1010,  2122,  4277,  2110,  2008,  1996,  2824,  2006,  2593,
         2217,  1997,  2122,  9224,  2064,  2022, 29176,  1012,  2292,  1060,
         1998,  1061, 19090,  2048,  2824,  1012,  2059,  1010,  1996,  4012,
        28120,  8082,  2375,  2163,  2008,  1060,  1605,  1061,  1027,  1061,
         1605,  1060,  1998,  1060,  1604,  1061,  1027,  1061,  1604,  1060,
         1012,  1999,  2742,  1016,  1012,  2459,  1010,  1056,  1605,  1058,
         1998,  1058,  1605,  1056,  5050,  1996,  2168,  2724,  1012,  6660,
         1010,  1059,  1604,  1060,  1998,  1060,  1604,  1059,  5050,  1996,
         2168,  2518,  1012,  4286,  2064,  4089,  9530,  3401,  3512,  1996,
         3574,  1997,  2122, 11423,  2011, 10617,  1012,  2023,  2003,  2926,
         3733,  2043,  1996,  2824,  2024,  4487,  2015,  5558, 18447,  1012,
         2174,  1010,  1996,  2375,  4324,  2130,  2043,  2048,  2824, 17702,
         1012,  2027,  2024,  2062,  6179,  2043,  2062,  2084,  2048,  2824,
         2024,  2920,  1012,   102])"
1098,0,[], Laws of Events,seg_259,example 5.18 weight-loss program,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4277, 1997, 2824])","tensor([ 101, 2742, 1019, 1012, 2324, 3635, 1011, 3279, 2565,  102])"
1099,1,"['combinations', 'event', 'commutative law', 'average', 'combination']", Laws of Events,seg_259,"consider a weight-loss clinic for over fat people that offers three programs:– (i) restricted diet (rd) program that can decrease the weight on the average by 10 pounds in 4 weeks, (ii) a fat-burning exercise regime (er) with a thermal belt that sheds on the average 8.5 pounds in 4 weeks, (iii) a bariatric surgery (bs) program that sheds on the average 16 pounds in 4 weeks. a patient can opt for either individual programs or for a combination. does the commutative law make sense in this example? describe the following event combinations in plain english:– (i) er∩bs and (ii) rd∪bs.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  5136,  1037,  3635,  1011,  3279,  9349,  2005,  2058,  6638,
         2111,  2008,  4107,  2093,  3454,  1024,  1516,  1006,  1045,  1007,
         7775,  8738,  1006, 16428,  1007,  2565,  2008,  2064,  9885,  1996,
         3635,  2006,  1996,  2779,  2011,  2184,  7038,  1999,  1018,  3134,
         1010,  1006,  2462,  1007,  1037,  6638,  1011,  5255,  6912,  6939,
         1006,  9413,  1007,  2007,  1037,  9829,  5583,  2008, 25999,  2006,
         1996,  2779,  1022,  1012,  1019,  7038,  1999,  1018,  3134,  1010,
         1006,  3523,  1007,  1037, 22466,  4017,  7277,  5970,  1006, 18667,
         1007,  2565,  2008, 25999,  2006,  1996,  2779,  2385,  7038,  1999,
         1018,  3134,  1012,  1037,  5776,  2064, 23569,  2005,  2593,  3265,
         3454,  2030,  2005,  1037,  5257,  1012,  2515,  1996,  4012, 28120,
         8082,  2375,  2191,  3168,  1999,  2023,  2742,  1029,  6235,  1996,
         2206,  2724, 14930,  1999,  5810,  2394,  1024,  1516,  1006,  1045,
         1007,  9413, 30131,  5910,  1998,  1006,  2462,  1007, 16428, 30132,
         5910,  1012,   102])"
1100,1,"['events', 'union', 'intersection']", Laws of Events,seg_259,"solution 5.18 as events represent various programs offered by the clinic, the intersection of events indicate the programs for which a patient has opted. thus, er∩bs indicates that a patient is registered in both er and bs programs. however, union of events in this problem does not make sense. if the events are defined in terms of counts (total number of people registered for the program), then union of events make sense. for instance, er∪bs indicates the total number of people registered for either of the programs or both.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([4277, 1997, 2824])","tensor([  101,  5576,  1019,  1012,  2324,  2004,  2824,  5050,  2536,  3454,
         3253,  2011,  1996,  9349,  1010,  1996,  6840,  1997,  2824,  5769,
         1996,  3454,  2005,  2029,  1037,  5776,  2038, 12132,  1012,  2947,
         1010,  9413, 30131,  5910,  7127,  2008,  1037,  5776,  2003,  5068,
         1999,  2119,  9413,  1998, 18667,  3454,  1012,  2174,  1010,  2586,
         1997,  2824,  1999,  2023,  3291,  2515,  2025,  2191,  3168,  1012,
         2065,  1996,  2824,  2024,  4225,  1999,  3408,  1997,  9294,  1006,
         2561,  2193,  1997,  2111,  5068,  2005,  1996,  2565,  1007,  1010,
         2059,  2586,  1997,  2824,  2191,  3168,  1012,  2005,  6013,  1010,
         9413, 30132,  5910,  7127,  1996,  2561,  2193,  1997,  2111,  5068,
         2005,  2593,  1997,  1996,  3454,  2030,  2119,  1012,   102])"
1101,1,"['disjoint', 'events', 'states', 'associative law', 'commutative law', 'associative laws', 'case']", Laws of Events,seg_259,"5.7.1.3 associative laws let x, y, and z denote three distinct events. then, the associative law states that x ∪ (y ∪ z) = (x ∪ y) ∪ z and x ∩ (y ∩ z) = (x ∩ y) ∩ z. the meaning of each of them is that the flight is delayed due to a delay in security checking or a delay due to runway problems or congestion or due to other reasons. here, the operator that is commuted is the same. as in the case of commutative law, humans can easily conceive the meaning when the events are disjoint.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  1019,  1012,  1021,  1012,  1015,  1012,  1017,  4632, 10085,
         2401,  6024,  4277,  2292,  1060,  1010,  1061,  1010,  1998,  1062,
        19090,  2093,  5664,  2824,  1012,  2059,  1010,  1996,  4632, 10085,
         2401,  6024,  2375,  2163,  2008,  1060,  1605,  1006,  1061,  1605,
         1062,  1007,  1027,  1006,  1060,  1605,  1061,  1007,  1605,  1062,
         1998,  1060,  1604,  1006,  1061,  1604,  1062,  1007,  1027,  1006,
         1060,  1604,  1061,  1007,  1604,  1062,  1012,  1996,  3574,  1997,
         2169,  1997,  2068,  2003,  2008,  1996,  3462,  2003,  8394,  2349,
         2000,  1037,  8536,  1999,  3036,  9361,  2030,  1037,  8536,  2349,
         2000,  9271,  3471,  2030, 20176,  2030,  2349,  2000,  2060,  4436,
         1012,  2182,  1010,  1996,  6872,  2008,  2003, 26704,  2003,  1996,
         2168,  1012,  2004,  1999,  1996,  2553,  1997,  4012, 28120,  8082,
         2375,  1010,  4286,  2064,  4089,  9530,  3401,  3512,  1996,  3574,
         2043,  1996,  2824,  2024,  4487,  2015,  5558, 18447,  1012,   102])"
1102,1,"['events', 'states', 'event', 'distributive law', 'distributive laws', 'combinations']", Laws of Events,seg_259,"5.7.1.4 distributive laws the name distributive comes from the fact that two nonidentical event combinations are simplified by distributing one of the operators. let x, y, and z denote three events. then, the distributive law states that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  1019,  1012,  1021,  1012,  1015,  1012,  1018,  4487,  3367,
         3089,  8569,  6024,  4277,  1996,  2171,  4487,  3367,  3089,  8569,
         6024,  3310,  2013,  1996,  2755,  2008,  2048,  2512,  5178, 16778,
         9289,  2724, 14930,  2024, 11038,  2011, 20083,  2028,  1997,  1996,
         9224,  1012,  2292,  1060,  1010,  1061,  1010,  1998,  1062, 19090,
         2093,  2824,  1012,  2059,  1010,  1996,  4487,  3367,  3089,  8569,
         6024,  2375,  2163,  2008,   102])"
1103,1,"['sample space', 'compound', 'events', 'intersection', 'sample', 'compound events']", Laws of Events,seg_259,where the ∪ operator outside the parenthesis in the first expression is distributed and the∩ operator outside the parenthesis in the second expression is distributed. this law is more meaningful when some events have a “combined effect.” set-theoretically this means that the intersection of some of the events is non-null. these rules are extremely useful in reducing the favorable sample space of compound events.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  2073,  1996,  1605,  6872,  2648,  1996,  6687, 24124,  1999,
         1996,  2034,  3670,  2003,  5500,  1998,  1996, 30131,  6872,  2648,
         1996,  6687, 24124,  1999,  1996,  2117,  3670,  2003,  5500,  1012,
         2023,  2375,  2003,  2062, 15902,  2043,  2070,  2824,  2031,  1037,
         1523,  4117,  3466,  1012,  1524,  2275,  1011, 22634,  2023,  2965,
         2008,  1996,  6840,  1997,  2070,  1997,  1996,  2824,  2003,  2512,
         1011, 19701,  1012,  2122,  3513,  2024,  5186,  6179,  1999,  8161,
         1996, 11119,  7099,  2686,  1997,  7328,  2824,  1012,   102])"
1104,1,"['distributive law', 'associative law', 'case']", Laws of Events,seg_259,"in the case of associative law, we had the same operator (either ∪ or ∩). if the operators are different, we get the distributive law given below discussion.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  1999,  1996,  2553,  1997,  4632, 10085,  2401,  6024,  2375,
         1010,  2057,  2018,  1996,  2168,  6872,  1006,  2593,  1605,  2030,
         1604,  1007,  1012,  2065,  1996,  9224,  2024,  2367,  1010,  2057,
         2131,  1996,  4487,  3367,  3089,  8569,  6024,  2375,  2445,  2917,
         6594,  1012,   102])"
1105,1,['distributive laws'], Laws of Events,seg_259,example 5.19 distributive laws,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.])","tensor([4277, 1997, 2824])","tensor([ 101, 2742, 1019, 1012, 2539, 4487, 3367, 3089, 8569, 6024, 4277,  102])"
1106,1,"['distributive law', 'statistics']", Laws of Events,seg_259,"consider the pre-requisite courses for enrolling in a statistics course. a student who has finished college algebra (x) is eligible, as also those who have finished both of computer science 100 (y) and maths 104 (z). express this using distributive law.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 1., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  5136,  1996,  3653,  1011,  2128, 24871,  5352,  2005, 25612,
         2075,  1999,  1037,  6747,  2607,  1012,  1037,  3076,  2040,  2038,
         2736,  2267, 11208,  1006,  1060,  1007,  2003,  7792,  1010,  2004,
         2036,  2216,  2040,  2031,  2736,  2119,  1997,  3274,  2671,  2531,
         1006,  1061,  1007,  1998,  8785,  2015,  9645,  1006,  1062,  1007,
         1012,  4671,  2023,  2478,  4487,  3367,  3089,  8569,  6024,  2375,
         1012,   102])"
1107,1,"['events', 'condition']", Laws of Events,seg_259,"solution 5.19 label the events as x, y, and z. then, the condition can be expressed as x ∪ (y ∩ z).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4277, 1997, 2824])","tensor([ 101, 5576, 1019, 1012, 2539, 3830, 1996, 2824, 2004, 1060, 1010, 1061,
        1010, 1998, 1062, 1012, 2059, 1010, 1996, 4650, 2064, 2022, 5228, 2004,
        1060, 1605, 1006, 1061, 1604, 1062, 1007, 1012,  102])"
1108,1,"['combinations', 'event']", Laws of Events,seg_259,example 5.20 event combinations,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  2742,  1019,  1012,  2322,  2724, 14930,   102])"
1109,1,"['combinations', 'event']", Laws of Events,seg_259,consider example 5.18 given earlier. describe the following event combinations in plain english:– (i) rd ∩ (bs ∪ er) and (ii) (er ∩ rd) ∪ bs,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4277, 1997, 2824])","tensor([  101,  5136,  2742,  1019,  1012,  2324,  2445,  3041,  1012,  6235,
         1996,  2206,  2724, 14930,  1999,  5810,  2394,  1024,  1516,  1006,
         1045,  1007, 16428,  1604,  1006, 18667,  1605,  9413,  1007,  1998,
         1006,  2462,  1007,  1006,  9413,  1604, 16428,  1007,  1605, 18667,
          102])"
1110,0,[], Laws of Events,seg_259,"solution 5.20 as the operator inside the bracket in (i) is ∪, the meaning is to select a weight-loss program with rd and either bs or er. similarly, the meaning of (ii) is to opt for a program with either bs alone or both er and rd.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([4277, 1997, 2824])","tensor([  101,  5576,  1019,  1012,  2322,  2004,  1996,  6872,  2503,  1996,
        21605,  1999,  1006,  1045,  1007,  2003,  1605,  1010,  1996,  3574,
         2003,  2000,  7276,  1037,  3635,  1011,  3279,  2565,  2007, 16428,
         1998,  2593, 18667,  2030,  9413,  1012,  6660,  1010,  1996,  3574,
         1997,  1006,  2462,  1007,  2003,  2000, 23569,  2005,  1037,  2565,
         2007,  2593, 18667,  2894,  2030,  2119,  9413,  1998, 16428,  1012,
          102])"
1111,1,"['complement', 'compound', 'events', 'compound events']", DeMorgans Laws,seg_261,"these laws relate the complement of compound events in terms of individual complements. in the following section, we use overline to denote complements.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 9703, 16998,  2015,  4277])","tensor([  101,  2122,  4277, 14396,  1996, 13711,  1997,  7328,  2824,  1999,
         3408,  1997,  3265, 13711,  2015,  1012,  1999,  1996,  2206,  2930,
         1010,  2057,  2224,  2058,  4179,  2000, 19090, 13711,  2015,  1012,
          102])"
1112,1,"['complement', 'union', 'intersection']", DeMorgans Laws,seg_261,rule 1 complement of an intersection is the union of their complements.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 9703, 16998,  2015,  4277])","tensor([  101,  3627,  1015, 13711,  1997,  2019,  6840,  2003,  1996,  2586,
         1997,  2037, 13711,  2015,  1012,   102])"
1113,1,"['events', 'percentage']", DeMorgans Laws,seg_261,"let a and b be two arbitrary events. then a ∩ b = a ∪ b. consider the newspaper readership problem. if there are just two newspapers and the percentage of people who read both of them are known, the percentage of people who read neither of them can be found using the above-mentioned law.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9703, 16998,  2015,  4277])","tensor([  101,  2292,  1037,  1998,  1038,  2022,  2048, 15275,  2824,  1012,
         2059,  1037,  1604,  1038,  1027,  1037,  1605,  1038,  1012,  5136,
         1996,  3780,  8141,  5605,  3291,  1012,  2065,  2045,  2024,  2074,
         2048,  6399,  1998,  1996,  7017,  1997,  2111,  2040,  3191,  2119,
         1997,  2068,  2024,  2124,  1010,  1996,  7017,  1997,  2111,  2040,
         3191,  4445,  1997,  2068,  2064,  2022,  2179,  2478,  1996,  2682,
         1011,  3855,  2375,  1012,   102])"
1114,1,"['complement', 'union', 'intersection']", DeMorgans Laws,seg_261,rule 2 complement of a union is the intersection of their complements.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 9703, 16998,  2015,  4277])","tensor([  101,  3627,  1016, 13711,  1997,  1037,  2586,  2003,  1996,  6840,
         1997,  2037, 13711,  2015,  1012,   102])"
1115,1,['events'], DeMorgans Laws,seg_261,"symbolically, a ∪ b = a ∩ b. these rules can be extended to any number of events",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0.])","tensor([ 9703, 16998,  2015,  4277])","tensor([  101, 12613,  3973,  1010,  1037,  1605,  1038,  1027,  1037,  1604,
         1038,  1012,  2122,  3513,  2064,  2022,  3668,  2000,  2151,  2193,
         1997,  2824,   102])"
1116,1,"['venn', 'venn diagrams']", DeMorgans Laws,seg_261,i=1ai. these are proved using induction and venn diagrams.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 9703, 16998,  2015,  4277])","tensor([  101,  1045,  1027, 20720,  2072,  1012,  2122,  2024,  4928,  2478,
        15946,  1998,  2310, 10695, 26309,  1012,   102])"
1117,1,"['observation', 'linear', 'probability', 'events', 'sample spaces', 'sample', 'discrete']", BASIC COUNTING PRINCIPLES,seg_263,"a great majority of probability problems can be solved by a good mastery of a few counting principles. these are more applicable to discrete sample spaces in 1d and 2d than for others. they are intended to count the number of objects, events, possibilities, occurrences, or arrangements that satisfy zero or more properties or constraints. there are a myriad of constraints possible. these may be related to adjacency, occupancy, linear or circular arrangement, observation of some events, and so on.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 3937, 10320,  6481])","tensor([  101,  1037,  2307,  3484,  1997,  9723,  3471,  2064,  2022, 13332,
         2011,  1037,  2204, 26364,  1997,  1037,  2261, 10320,  6481,  1012,
         2122,  2024,  2062, 12711,  2000, 16246,  7099,  7258,  1999,  1015,
         2094,  1998, 14134,  2084,  2005,  2500,  1012,  2027,  2024,  3832,
         2000,  4175,  1996,  2193,  1997,  5200,  1010,  2824,  1010, 12020,
         1010, 27247,  1010,  2030,  7565,  2008, 13225,  5717,  2030,  2062,
         5144,  2030, 14679,  1012,  2045,  2024,  1037, 25028,  1997, 14679,
         2825,  1012,  2122,  2089,  2022,  3141,  2000,  4748,  3900, 27524,
         5666,  1010,  1051,  9468,  6279, 11656,  1010,  7399,  2030,  8206,
         6512,  1010,  8089,  1997,  2070,  2824,  1010,  1998,  2061,  2006,
         1012,   102])"
1118,1,"['cases', 'set', 'disjoint', 'events', 'event', 'mutually exclusive', 'case']", Rule of Sums ROS,seg_265,"this is also known as the principle of disjunctive counting. consider a set s of objects that has been divided into disjoint subsets s1, s2, … , sm so that s = s1 ∪ s2 ∪ · · · ∪ sm. if there are n1 favorable cases for an event in s1, n2 favorable cases for the same event in s2, and so on, nm favorable cases for the same event in sm, then the total number of favorable cases for the event in s is n1 + n2 + · · · + nm. symbolically, this can be written as |s| = |s1 ∪ s2 ∪ · · · ∪ sm| = |s1| ∪ |s2| ∪ · · · ∪ |sm|. another way to state it is as follows:– there are m cases or events with no common options (i.e., they are mutually exclusive). if ith case or event can occur in ni ways, then the total number of options or ways in which one of them can occur is n1 + n2 + · · · + nm. the principle of inclusion and exclusion (p. 158) is an extension when at least two of the subsets have common elements.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3627,  1997, 20571, 20996,  2015])","tensor([  101,  2023,  2003,  2036,  2124,  2004,  1996,  6958,  1997,  4487,
         2015, 19792, 15277, 10320,  1012,  5136,  1037,  2275,  1055,  1997,
         5200,  2008,  2038,  2042,  4055,  2046,  4487,  2015,  5558, 18447,
        16745,  2015,  1055,  2487,  1010,  1055,  2475,  1010,  1529,  1010,
        15488,  2061,  2008,  1055,  1027,  1055,  2487,  1605,  1055,  2475,
         1605,  1087,  1087,  1087,  1605, 15488,  1012,  2065,  2045,  2024,
         1050,  2487, 11119,  3572,  2005,  2019,  2724,  1999,  1055,  2487,
         1010,  1050,  2475, 11119,  3572,  2005,  1996,  2168,  2724,  1999,
         1055,  2475,  1010,  1998,  2061,  2006,  1010, 13221, 11119,  3572,
         2005,  1996,  2168,  2724,  1999, 15488,  1010,  2059,  1996,  2561,
         2193,  1997, 11119,  3572,  2005,  1996,  2724,  1999,  1055,  2003,
         1050,  2487,  1009,  1050,  2475,  1009,  1087,  1087,  1087,  1009,
        13221,  1012, 12613,  3973,  1010,  2023,  2064,  2022,  2517,  2004,
         1064,  1055,  1064,  1027,  1064,  1055,  2487,  1605,  1055,  2475,
         1605,  1087,  1087,  1087,  1605, 15488,  1064,  1027,  1064,  1055,
         2487,  1064,  1605,  1064,  1055,  2475,  1064,  1605,  1087,  1087,
         1087,  1605,  1064, 15488,  1064,  1012,  2178,  2126,  2000,  2110,
         2009,  2003,  2004,  4076,  1024,  1516,  2045,  2024,  1049,  3572,
         2030,  2824,  2007,  2053,  2691,  7047,  1006,  1045,  1012,  1041,
         1012,  1010,  2027,  2024, 20271,  7262,  1007,  1012,  2065,  2009,
         2232,  2553,  2030,  2724,  2064,  5258,  1999,  9152,  3971,  1010,
         2059,  1996,  2561,  2193,  1997,  7047,  2030,  3971,  1999,  2029,
         2028,  1997,  2068,  2064,  5258,  2003,  1050,  2487,  1009,  1050,
         2475,  1009,  1087,  1087,  1087,  1009, 13221,  1012,  1996,  6958,
         1997, 10502,  1998, 15945,  1006,  1052,  1012, 17696,  1007,  2003,
         2019,  5331,  2043,  2012,  2560,  2048,  1997,  1996, 16745,  2015,
         2031,  2691,  3787,  1012,   102])"
1119,0,[], Rule of Sums ROS,seg_265,example 5.21 breakfast choices,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3627,  1997, 20571, 20996,  2015])","tensor([ 101, 2742, 1019, 1012, 2538, 6350, 9804,  102])"
1120,0,[], Rule of Sums ROS,seg_265,"the mcdonalds restaurant offers eight varieties of breakfast, whereas burger king offers six varieties. joe has a choice of going either to mcdonalds or to burger king on any day (but not both) for breakfast. how many choices of breakfast are possible?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 3627,  1997, 20571, 20996,  2015])","tensor([  101,  1996,  9383,  2015,  4825,  4107,  2809,  9903,  1997,  6350,
         1010,  6168, 15890,  2332,  4107,  2416,  9903,  1012,  3533,  2038,
         1037,  3601,  1997,  2183,  2593,  2000,  9383,  2015,  2030,  2000,
        15890,  2332,  2006,  2151,  2154,  1006,  2021,  2025,  2119,  1007,
         2005,  6350,  1012,  2129,  2116,  9804,  1997,  6350,  2024,  2825,
         1029,   102])"
1121,1,['rule of sums'], Rule of Sums ROS,seg_265,"solution 5.21 this problem can be cast using rule of sums (ros), where s1= the choices available at mcdonald’s and s2 = the choices available at burger king. total possible choices are |s1| + |s2| = 8 + 6 = 14.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3627,  1997, 20571, 20996,  2015])","tensor([  101,  5576,  1019,  1012,  2538,  2023,  3291,  2064,  2022,  3459,
         2478,  3627,  1997, 20571,  1006, 20996,  2015,  1007,  1010,  2073,
         1055,  2487,  1027,  1996,  9804,  2800,  2012,  9383,  1521,  1055,
         1998,  1055,  2475,  1027,  1996,  9804,  2800,  2012, 15890,  2332,
         1012,  2561,  2825,  9804,  2024,  1064,  1055,  2487,  1064,  1009,
         1064,  1055,  2475,  1064,  1027,  1022,  1009,  1020,  1027,  2403,
         1012,   102])"
1122,1,"['cases', 'probability', 'outcomes', 'outcome', 'independent', 'experiment', 'experiments']", Principle of Counting POC,seg_267,"this is also called multiplication law of counting (mloc) or multiplication principle. it has direct applications in counting the number of occurrences of outcomes of experiments such that the first experiment can result in n1 possible outcomes, and for each outcome, there exist another independent experiment with n2 possible outcomes, and so on. it is also useful in classical approach to probability in which we need to count the favorable number of cases of an experiment.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  2023,  2003,  2036,  2170, 24856,  2375,  1997, 10320,  1006,
        19875, 10085,  1007,  2030, 24856,  6958,  1012,  2009,  2038,  3622,
         5097,  1999, 10320,  1996,  2193,  1997, 27247,  1997, 13105,  1997,
         7885,  2107,  2008,  1996,  2034,  7551,  2064,  2765,  1999,  1050,
         2487,  2825, 13105,  1010,  1998,  2005,  2169,  9560,  1010,  2045,
         4839,  2178,  2981,  7551,  2007,  1050,  2475,  2825, 13105,  1010,
         1998,  2061,  2006,  1012,  2009,  2003,  2036,  6179,  1999,  4556,
         3921,  2000,  9723,  1999,  2029,  2057,  2342,  2000,  4175,  1996,
        11119,  2193,  1997,  3572,  1997,  2019,  7551,  1012,   102])"
1123,0,['n'], Principle of Counting POC,seg_267,"lemma 1 if one thing (or activity) can be done in “m” ways, and another in succession in “n” ways, the two together can be done in m ∗ n different ways.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  3393, 14760,  1015,  2065,  2028,  2518,  1006,  2030,  4023,
         1007,  2064,  2022,  2589,  1999,  1523,  1049,  1524,  3971,  1010,
         1998,  2178,  1999,  8338,  1999,  1523,  1050,  1524,  3971,  1010,
         1996,  2048,  2362,  2064,  2022,  2589,  1999,  1049,  1598,  1050,
         2367,  3971,  1012,   102])"
1124,0,[], Principle of Counting POC,seg_267,example 5.22 computer file types,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([ 101, 2742, 1019, 1012, 2570, 3274, 5371, 4127,  102])"
1125,0,[], Principle of Counting POC,seg_267,"a software allows an image to be saved in three different file types (as .jpeg, .gif, or .tiff) in four different resolutions. how many possible ways are there to save the image?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1037,  4007,  4473,  2019,  3746,  2000,  2022,  5552,  1999,
         2093,  2367,  5371,  4127,  1006,  2004,  1012, 16545, 13910,  1010,
         1012, 21025,  2546,  1010,  2030,  1012, 14841,  4246,  1007,  1999,
         2176,  2367, 18853,  1012,  2129,  2116,  2825,  3971,  2024,  2045,
         2000,  3828,  1996,  3746,  1029,   102])"
1126,1,['independent'], Principle of Counting POC,seg_267,"solution 5.22 as the file types and resolutions are independent, there are 3 * 4= 12 different ways to save the image.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  5576,  1019,  1012,  2570,  2004,  1996,  5371,  4127,  1998,
        18853,  2024,  2981,  1010,  2045,  2024,  1017,  1008,  1018,  1027,
         2260,  2367,  3971,  2000,  3828,  1996,  3746,  1012,   102])"
1127,0,[], Principle of Counting POC,seg_267,"a car manufacturer offers eight exterior colors and four interior designs. how many varieties of cars can be produced if (i) each of them can be manufactured in luxury and sedan models? (ii) if each of them can be made as petrol, diesel and hybrid (electric) versions?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1037,  2482,  7751,  4107,  2809,  8829,  6087,  1998,  2176,
         4592,  5617,  1012,  2129,  2116,  9903,  1997,  3765,  2064,  2022,
         2550,  2065,  1006,  1045,  1007,  2169,  1997,  2068,  2064,  2022,
         7609,  1999,  9542,  1998, 15134,  4275,  1029,  1006,  2462,  1007,
         2065,  2169,  1997,  2068,  2064,  2022,  2081,  2004, 17141,  1010,
         7937,  1998,  8893,  1006,  3751,  1007,  4617,  1029,   102])"
1128,1,"['events', 'case', 'design']", Principle of Counting POC,seg_267,"solution 5.23 we define three events as follows:– (i) e= {exterior color}, (ii) i= {interior design}, and (iii) m= {model}. as the number of possibilities for e is 8, i is 4, and m is 2, by the principle of counting there exist 8× 4× 2= 64 possible choices. for case (ii), there are three types (petrol, diesel, and hybrid) so that the number of ways is 8× 4× 3= 96.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  5576,  1019,  1012,  2603,  2057,  9375,  2093,  2824,  2004,
         4076,  1024,  1516,  1006,  1045,  1007,  1041,  1027,  1063,  8829,
         3609,  1065,  1010,  1006,  2462,  1007,  1045,  1027,  1063,  4592,
         2640,  1065,  1010,  1998,  1006,  3523,  1007,  1049,  1027,  1063,
         2944,  1065,  1012,  2004,  1996,  2193,  1997, 12020,  2005,  1041,
         2003,  1022,  1010,  1045,  2003,  1018,  1010,  1998,  1049,  2003,
         1016,  1010,  2011,  1996,  6958,  1997, 10320,  2045,  4839,  1022,
        26306,  1018, 26306,  1016,  1027,  4185,  2825,  9804,  1012,  2005,
         2553,  1006,  2462,  1007,  1010,  2045,  2024,  2093,  4127,  1006,
        17141,  1010,  7937,  1010,  1998,  8893,  1007,  2061,  2008,  1996,
         2193,  1997,  3971,  2003,  1022, 26306,  1018, 26306,  1017,  1027,
         5986,  1012,   102])"
1129,0,[], Principle of Counting POC,seg_267,"in some problems, we may have to combine both ros and poc multiple times to reach a final result. this is illustrated in the following example.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1999,  2070,  3471,  1010,  2057,  2089,  2031,  2000, 11506,
         2119, 20996,  2015,  1998, 13433,  2278,  3674,  2335,  2000,  3362,
         1037,  2345,  2765,  1012,  2023,  2003,  7203,  1999,  1996,  2206,
         2742,  1012,   102])"
1130,0,[], Principle of Counting POC,seg_267,example 5.24 multiple choice exam,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  2742,  1019,  1012,  2484,  3674,  3601, 11360,   102])"
1131,0,[], Principle of Counting POC,seg_267,"a multiple choice exam has 15 questions, each with 4 answer choices (say a, b, c, and d). how many possible ways are there to answer the questions assuming that multiple markings are not allowed, and (i) all questions are to be answered and (ii) questions can be skipped (kept unanswered).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1037,  3674,  3601, 11360,  2038,  2321,  3980,  1010,  2169,
         2007,  1018,  3437,  9804,  1006,  2360,  1037,  1010,  1038,  1010,
         1039,  1010,  1998,  1040,  1007,  1012,  2129,  2116,  2825,  3971,
         2024,  2045,  2000,  3437,  1996,  3980, 10262,  2008,  3674, 13967,
         2024,  2025,  3039,  1010,  1998,  1006,  1045,  1007,  2035,  3980,
         2024,  2000,  2022,  4660,  1998,  1006,  2462,  1007,  3980,  2064,
         2022, 16791,  1006,  2921, 14477,  3619, 13777,  2098,  1007,  1012,
          102])"
1132,1,['combination'], Principle of Counting POC,seg_267,"solution 5.24 as the questions are independently answered, any of the questions can be marked in four ways. hence, the total possible answer combination",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([ 101, 5576, 1019, 1012, 2484, 2004, 1996, 3980, 2024, 9174, 4660, 1010,
        2151, 1997, 1996, 3980, 2064, 2022, 4417, 1999, 2176, 3971, 1012, 6516,
        1010, 1996, 2561, 2825, 3437, 5257,  102])"
1133,1,"['combinations', 'case']", Principle of Counting POC,seg_267,"in (i) is 415. for instance, if there are just 2 questions, the 16 answer choices are (a,a), (a,b), (a,c), (a,d), (b,a), (b,b), (b,c), (b,d), (c,a), (c,b), (c,c), (c,d), (d,a), (d,b), (d,c), and (d,d), where the first letter denotes the answer for question-1 and second letter is the answer for question-2. in case (ii), suppose that k questions are answered and (15-k) are skipped. as any of the questions can be answered in four ways, there are 4k answer combinations for k answered questions. however, the k questions can be any among the 15 questions. a stu-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1999,  1006,  1045,  1007,  2003, 24690,  1012,  2005,  6013,
         1010,  2065,  2045,  2024,  2074,  1016,  3980,  1010,  1996,  2385,
         3437,  9804,  2024,  1006,  1037,  1010,  1037,  1007,  1010,  1006,
         1037,  1010,  1038,  1007,  1010,  1006,  1037,  1010,  1039,  1007,
         1010,  1006,  1037,  1010,  1040,  1007,  1010,  1006,  1038,  1010,
         1037,  1007,  1010,  1006,  1038,  1010,  1038,  1007,  1010,  1006,
         1038,  1010,  1039,  1007,  1010,  1006,  1038,  1010,  1040,  1007,
         1010,  1006,  1039,  1010,  1037,  1007,  1010,  1006,  1039,  1010,
         1038,  1007,  1010,  1006,  1039,  1010,  1039,  1007,  1010,  1006,
         1039,  1010,  1040,  1007,  1010,  1006,  1040,  1010,  1037,  1007,
         1010,  1006,  1040,  1010,  1038,  1007,  1010,  1006,  1040,  1010,
         1039,  1007,  1010,  1998,  1006,  1040,  1010,  1040,  1007,  1010,
         2073,  1996,  2034,  3661, 14796,  1996,  3437,  2005,  3160,  1011,
         1015,  1998,  2117,  3661,  2003,  1996,  3437,  2005,  3160,  1011,
         1016,  1012,  1999,  2553,  1006,  2462,  1007,  1010,  6814,  2008,
         1047,  3980,  2024,  4660,  1998,  1006,  2321,  1011,  1047,  1007,
         2024, 16791,  1012,  2004,  2151,  1997,  1996,  3980,  2064,  2022,
         4660,  1999,  2176,  3971,  1010,  2045,  2024,  1018,  2243,  3437,
        14930,  2005,  1047,  4660,  3980,  1012,  2174,  1010,  1996,  1047,
         3980,  2064,  2022,  2151,  2426,  1996,  2321,  3980,  1012,  1037,
        24646,  1011,   102])"
1134,0,[], Principle of Counting POC,seg_267,dent could select arbitrary k questions in ( 1 k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101, 21418,  2071,  7276, 15275,  1047,  3980,  1999,  1006,  1015,
         1047,   102])"
1135,1,['combinations'], Principle of Counting POC,seg_267,"145). by the multiplication principle, the total number of possible combinations",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101, 13741,  1007,  1012,  2011,  1996, 24856,  6958,  1010,  1996,
         2561,  2193,  1997,  2825, 14930,   102])"
1136,1,['range'], Principle of Counting POC,seg_267,5) ∗ 4k. by summing this expression over the possible range of k gives,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([ 101, 1019, 1007, 1598, 1018, 2243, 1012, 2011, 7680, 6562, 2023, 3670,
        2058, 1996, 2825, 2846, 1997, 1047, 3957,  102])"
1137,0,[], Principle of Counting POC,seg_267,"5) ∗ 4k. here, k = 0 means that none of the questions",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([ 101, 1019, 1007, 1598, 1018, 2243, 1012, 2182, 1010, 1047, 1027, 1014,
        2965, 2008, 3904, 1997, 1996, 3980,  102])"
1138,0,[], Principle of Counting POC,seg_267,"are answered. this can be done in just one way. similarly, k= 15 means that all",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([ 101, 2024, 4660, 1012, 2023, 2064, 2022, 2589, 1999, 2074, 2028, 2126,
        1012, 6660, 1010, 1047, 1027, 2321, 2965, 2008, 2035,  102])"
1139,0,[], Principle of Counting POC,seg_267,questions are answered (in one way only). this is of the form ∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([ 101, 3980, 2024, 4660, 1006, 1999, 2028, 2126, 2069, 1007, 1012, 2023,
        2003, 1997, 1996, 2433,  100,  102])"
1140,1,"['combinations', 'binomial']", Principle of Counting POC,seg_267,"n =0 ( n k) ∗ xk, which is the binomial expansion of (x + 1)n. thus, the above-mentioned sum is (4 + 1)15 = 515. if there are just two questions, we have nine new combinations in addition to the 16 listed earlier as (*,a), (*,b), (*,c), (*,d), (a,*), (b,*), (c,*), (d,*), and (*,*), where “*” indicates an unanswered question and (*,*) means that both questions are skipped. this gives a total of 16 + 9 = 25 = 52 combinations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1050,  1027,  1014,  1006,  1050,  1047,  1007,  1598,  1060,
         2243,  1010,  2029,  2003,  1996,  8026, 20936,  2389,  4935,  1997,
         1006,  1060,  1009,  1015,  1007,  1050,  1012,  2947,  1010,  1996,
         2682,  1011,  3855,  7680,  2003,  1006,  1018,  1009,  1015,  1007,
         2321,  1027,  4868,  2629,  1012,  2065,  2045,  2024,  2074,  2048,
         3980,  1010,  2057,  2031,  3157,  2047, 14930,  1999,  2804,  2000,
         1996,  2385,  3205,  3041,  2004,  1006,  1008,  1010,  1037,  1007,
         1010,  1006,  1008,  1010,  1038,  1007,  1010,  1006,  1008,  1010,
         1039,  1007,  1010,  1006,  1008,  1010,  1040,  1007,  1010,  1006,
         1037,  1010,  1008,  1007,  1010,  1006,  1038,  1010,  1008,  1007,
         1010,  1006,  1039,  1010,  1008,  1007,  1010,  1006,  1040,  1010,
         1008,  1007,  1010,  1998,  1006,  1008,  1010,  1008,  1007,  1010,
         2073,  1523,  1008,  1524,  7127,  2019, 14477,  3619, 13777,  2098,
         3160,  1998,  1006,  1008,  1010,  1008,  1007,  2965,  2008,  2119,
         3980,  2024, 16791,  1012,  2023,  3957,  1037,  2561,  1997,  2385,
         1009,  1023,  1027,  2423,  1027,  4720, 14930,  1012,   102])"
1141,0,[], Principle of Counting POC,seg_267,example 5.25 cloth washing,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  2742,  1019,  1012,  2423,  8416, 12699,   102])"
1142,0,[], Principle of Counting POC,seg_267,"a schoolchild has 10 colorless and 6 colored dresses to be washed on a weekend. colored dresses are of two types—red and blue. both of them cannot be loaded into the same washing cycle due to color dissolving. the color-less dresses can be washed in any of the three settings: (i) hot, (ii) lukewarm, and (iii) cold and rinsed after the wash cycle in two settings (lukewarm-rinse or cold-rinse); whereas the colored dresses of same color can all be washed and rinsed in a cold or lukewarm wash only. how many ways are there to wash all the clothes?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1037,  2082, 19339,  2038,  2184,  3609,  3238,  1998,  1020,
         6910, 14464,  2000,  2022,  8871,  2006,  1037,  5353,  1012,  6910,
        14464,  2024,  1997,  2048,  4127,  1517,  2417,  1998,  2630,  1012,
         2119,  1997,  2068,  3685,  2022,  8209,  2046,  1996,  2168, 12699,
         5402,  2349,  2000,  3609,  4487, 24137, 25780,  1012,  1996,  3609,
         1011,  2625, 14464,  2064,  2022,  8871,  1999,  2151,  1997,  1996,
         2093, 10906,  1024,  1006,  1045,  1007,  2980,  1010,  1006,  2462,
         1007,  5355,  9028,  2213,  1010,  1998,  1006,  3523,  1007,  3147,
         1998, 15544, 27730,  2044,  1996,  9378,  5402,  1999,  2048, 10906,
         1006,  5355,  9028,  2213,  1011, 15544, 12325,  2030,  3147,  1011,
        15544, 12325,  1007,  1025,  6168,  1996,  6910, 14464,  1997,  2168,
         3609,  2064,  2035,  2022,  8871,  1998, 15544, 27730,  1999,  1037,
         3147,  2030,  5355,  9028,  2213,  9378,  2069,  1012,  2129,  2116,
         3971,  2024,  2045,  2000,  9378,  2035,  1996,  4253,  1029,   102])"
1143,1,['cases'], Principle of Counting POC,seg_267,"solution 5.25 this problem is most easily solved using a tree. there are two branches at the top for colored and colorless. the colored branch is further broken down as red and blue. first consider colorless dresses. they cannot be mixed with colored ones due to color staining. thus, there exist three ways to wash them and two ways to rinse them. by the poc, there exist 3× 2= 6 ways to wash them. next consider colored clothes. how many of the colored ones are red or blue is not known. let c of them be red and 6-c blue. the c red ones can be washed in four ways {c-c, c-l, l-c, l-l}, where c indicates a cold and l indicates a lukewarm wash or rinse in the first and second place. similarly 6-c blue clothes have four washing choices. thus, there are eight choices for the colored clothes. adding both cases together, we get the answer as 6+ 8= 14 choices.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  5576,  1019,  1012,  2423,  2023,  3291,  2003,  2087,  4089,
        13332,  2478,  1037,  3392,  1012,  2045,  2024,  2048,  5628,  2012,
         1996,  2327,  2005,  6910,  1998,  3609,  3238,  1012,  1996,  6910,
         3589,  2003,  2582,  3714,  2091,  2004,  2417,  1998,  2630,  1012,
         2034,  5136,  3609,  3238, 14464,  1012,  2027,  3685,  2022,  3816,
         2007,  6910,  3924,  2349,  2000,  3609, 21101,  2075,  1012,  2947,
         1010,  2045,  4839,  2093,  3971,  2000,  9378,  2068,  1998,  2048,
         3971,  2000, 15544, 12325,  2068,  1012,  2011,  1996, 13433,  2278,
         1010,  2045,  4839,  1017, 26306,  1016,  1027,  1020,  3971,  2000,
         9378,  2068,  1012,  2279,  5136,  6910,  4253,  1012,  2129,  2116,
         1997,  1996,  6910,  3924,  2024,  2417,  2030,  2630,  2003,  2025,
         2124,  1012,  2292,  1039,  1997,  2068,  2022,  2417,  1998,  1020,
         1011,  1039,  2630,  1012,  1996,  1039,  2417,  3924,  2064,  2022,
         8871,  1999,  2176,  3971,  1063,  1039,  1011,  1039,  1010,  1039,
         1011,  1048,  1010,  1048,  1011,  1039,  1010,  1048,  1011,  1048,
         1065,  1010,  2073,  1039,  7127,  1037,  3147,  1998,  1048,  7127,
         1037,  5355,  9028,  2213,  9378,  2030, 15544, 12325,  1999,  1996,
         2034,  1998,  2117,  2173,  1012,  6660,  1020,  1011,  1039,  2630,
         4253,  2031,  2176, 12699,  9804,  1012,  2947,  1010,  2045,  2024,
         2809,  9804,  2005,  1996,  6910,  4253,  1012,  5815,  2119,  3572,
         2362,  1010,  2057,  2131,  1996,  3437,  2004,  1020,  1009,  1022,
         1027,  2403,  9804,  1012,   102])"
1144,1,"['table', 'outcomes', 'probabilities', 'experiments']", Principle of Counting POC,seg_267,"in some experiments, each of the outcomes has an equal number of occurrences (see table 5.2). in other words, the probabilities are equally likely. these are much easier to solve as illustrated in the following.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1999,  2070,  7885,  1010,  2169,  1997,  1996, 13105,  2038,
         2019,  5020,  2193,  1997, 27247,  1006,  2156,  2795,  1019,  1012,
         1016,  1007,  1012,  1999,  2060,  2616,  1010,  1996,  4013,  3676,
        14680,  2024,  8053,  3497,  1012,  2122,  2024,  2172,  6082,  2000,
         9611,  2004,  7203,  1999,  1996,  2206,  1012,   102])"
1145,0,[], Principle of Counting POC,seg_267,example 5.26 car license plates,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([ 101, 2742, 1019, 1012, 2656, 2482, 6105, 7766,  102])"
1146,0,[], Principle of Counting POC,seg_267,a car license plate comprises of two english capital letters followed by four digits. how many license plates are possible if (i) each of the letters and digits can be repeated and (ii) only digits can be repeated.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  1037,  2482,  6105,  5127,  8681,  1997,  2048,  2394,  3007,
         4144,  2628,  2011,  2176, 16648,  1012,  2129,  2116,  6105,  7766,
         2024,  2825,  2065,  1006,  1045,  1007,  2169,  1997,  1996,  4144,
         1998, 16648,  2064,  2022,  5567,  1998,  1006,  2462,  1007,  2069,
        16648,  2064,  2022,  5567,  1012,   102])"
1147,1,['case'], Principle of Counting POC,seg_267,"solution 5.26 there are 26 capital english letters and 10 digits (between 0 and 9). as repetitions are allowed for (i) there are (26 × 26) × (10 × 10 × 10 × 10) = 676 × 104 possible ways. our assumption is that lower case letters are not used on license plates (which need not be true in some countries). as letter repetitions are not allowed for (ii), there are (26 × 25) × (10 × 10 × 10 × 10) = 650 × 104 possible ways.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  5576,  1019,  1012,  2656,  2045,  2024,  2656,  3007,  2394,
         4144,  1998,  2184, 16648,  1006,  2090,  1014,  1998,  1023,  1007,
         1012,  2004, 23318,  2015,  2024,  3039,  2005,  1006,  1045,  1007,
         2045,  2024,  1006,  2656,  1095,  2656,  1007,  1095,  1006,  2184,
         1095,  2184,  1095,  2184,  1095,  2184,  1007,  1027,  6163,  2575,
         1095,  9645,  2825,  3971,  1012,  2256, 11213,  2003,  2008,  2896,
         2553,  4144,  2024,  2025,  2109,  2006,  6105,  7766,  1006,  2029,
         2342,  2025,  2022,  2995,  1999,  2070,  3032,  1007,  1012,  2004,
         3661, 23318,  2015,  2024,  2025,  3039,  2005,  1006,  2462,  1007,
         1010,  2045,  2024,  1006,  2656,  1095,  2423,  1007,  1095,  1006,
         2184,  1095,  2184,  1095,  2184,  1095,  2184,  1007,  1027, 13757,
         1095,  9645,  2825,  3971,  1012,   102])"
1148,0,[], Principle of Counting POC,seg_267,example 5.27 cylindrical number lock,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  2742,  1019,  1012,  2676, 18797,  2193,  5843,   102])"
1149,1,['set'], Principle of Counting POC,seg_267,"consider a cylindrical number lock on a briefcase with three wheels or rings. assume that each of the wheels is marked with the digits 0–6 (total seven digits or rollings possible). using a lever, a user can set the lock to any desired number (formed by the three digits chosen in succession from the wheels, say from left to right). what is the total number of possible lock codes?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  5136,  1037, 18797,  2193,  5843,  2006,  1037, 21793,  2007,
         2093,  7787,  2030,  7635,  1012,  7868,  2008,  2169,  1997,  1996,
         7787,  2003,  4417,  2007,  1996, 16648,  1014,  1516,  1020,  1006,
         2561,  2698, 16648,  2030,  5291,  2015,  2825,  1007,  1012,  2478,
         1037, 15929,  1010,  1037,  5310,  2064,  2275,  1996,  5843,  2000,
         2151,  9059,  2193,  1006,  2719,  2011,  1996,  2093, 16648,  4217,
         1999,  8338,  2013,  1996,  7787,  1010,  2360,  2013,  2187,  2000,
         2157,  1007,  1012,  2054,  2003,  1996,  2561,  2193,  1997,  2825,
         5843,  9537,  1029,   102])"
1150,1,"['combinations', 'independent']", Principle of Counting POC,seg_267,"solution 5.27 as there are three independent wheels, each with seven possibilities, the total number of combinations is 7 × 7 × 7 = 343. thus, the briefcase can be locked in 343 possible ways.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10320, 13433,  2278])","tensor([  101,  5576,  1019,  1012,  2676,  2004,  2045,  2024,  2093,  2981,
         7787,  1010,  2169,  2007,  2698, 12020,  1010,  1996,  2561,  2193,
         1997, 14930,  2003,  1021,  1095,  1021,  1095,  1021,  1027, 27810,
         1012,  2947,  1010,  1996, 21793,  2064,  2022,  5299,  1999, 27810,
         2825,  3971,  1012,   102])"
1151,1,"['sets', 'probability', 'method', 'discrete']", Complete Enumeration,seg_269,"as the name implies, this method enumerates (count one by one) all possibilities. this is more relevant in discrete probability problems involving throws of a coin or dice, arrangement of digits, alphabets, assignments of elements in two finite sets, spin of a numbered wheel, and so on. sometimes, we need to enumerate only a small subset by eliminating commonalities as in the following problem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  2004,  1996,  2171, 12748,  1010,  2023,  4118,  4372, 17897,
        20370,  1006,  4175,  2028,  2011,  2028,  1007,  2035, 12020,  1012,
         2023,  2003,  2062,  7882,  1999, 16246,  9723,  3471,  5994, 11618,
         1997,  1037,  9226,  2030, 18740,  1010,  6512,  1997, 16648,  1010,
        12440,  2015,  1010, 14799,  1997,  3787,  1999,  2048, 10713,  4520,
         1010,  6714,  1997,  1037,  8597,  5217,  1010,  1998,  2061,  2006,
         1012,  2823,  1010,  2057,  2342,  2000,  4372, 17897, 11657,  2069,
         1037,  2235, 16745,  2011, 15349,  2691, 11475,  7368,  2004,  1999,
         1996,  2206,  3291,  1012,   102])"
1152,0,[], Complete Enumeration,seg_269,"how many ways are there for a leap year (with 366 days) to have (i) 53 sundays?, (ii) 53 saturdays and 53 sundays?, (iii) exactly 52 saturdays and 52 sundays?, (iv) exactly 53 fridays or 53 sundays?, and (v) exactly 52 tuesdays and 52 thursdays?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  2129,  2116,  3971,  2024,  2045,  2005,  1037, 11679,  2095,
         1006,  2007,  4029,  2575,  2420,  1007,  2000,  2031,  1006,  1045,
         1007,  5187, 14803,  1029,  1010,  1006,  2462,  1007,  5187, 18860,
         1998,  5187, 14803,  1029,  1010,  1006,  3523,  1007,  3599,  4720,
        18860,  1998,  4720, 14803,  1029,  1010,  1006,  4921,  1007,  3599,
         5187, 26587,  2030,  5187, 14803,  1029,  1010,  1998,  1006,  1058,
         1007,  3599,  4720,  9857,  2015,  1998,  4720,  9432,  2015,  1029,
          102])"
1153,1,"['cases', 'complement', 'combinations', 'complete enumeration']", Complete Enumeration,seg_269,"solution 5.28 as 52 × 7 = 364, every year will have 52 weekdays each for sure. there is an extra day (strictly speaking 1.24219879 days) for nonleap years, and there are two extra days in leap years (the 0.24 days add up to approximately 1 day in 4 years and is counted as february 29 to get a leap-year). as these two extra days are consecutive, we can do a complete enumeration of these days as (sunday, monday), (monday, tuesday), (tuesday, wednesday), (wednesday, thursday), (thursday, friday), (friday, saturday), and (saturday, sunday). these are the only seven possible combinations for the extra 2 days. (i) as sunday occurs in two of the seven combinations, the number of ways a leap year will have 53 sundays is 2. (ii) as (saturday, sunday) occurs once, the desired number of favorable cases is 1. (iii) neither saturday nor sunday occurs in four out of the seven possible pairs. (iv) there exist four pairs containing either a friday or a sunday. (v) there are three favorable cases, namely, (sunday, monday), (friday, saturday), and (saturday, sunday) using the complement rule.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  5576,  1019,  1012,  2654,  2004,  4720,  1095,  1021,  1027,
         4029,  2549,  1010,  2296,  2095,  2097,  2031,  4720, 19759,  2169,
         2005,  2469,  1012,  2045,  2003,  2019,  4469,  2154,  1006,  9975,
         4092,  1015,  1012, 22431, 16147,  2620,  2581,  2683,  2420,  1007,
         2005,  2512, 19738,  2361,  2086,  1010,  1998,  2045,  2024,  2048,
         4469,  2420,  1999, 11679,  2086,  1006,  1996,  1014,  1012,  2484,
         2420,  5587,  2039,  2000,  3155,  1015,  2154,  1999,  1018,  2086,
         1998,  2003,  8897,  2004,  2337,  2756,  2000,  2131,  1037, 11679,
         1011,  2095,  1007,  1012,  2004,  2122,  2048,  4469,  2420,  2024,
         5486,  1010,  2057,  2064,  2079,  1037,  3143,  4372, 17897,  8156,
         1997,  2122,  2420,  2004,  1006,  4465,  1010,  6928,  1007,  1010,
         1006,  6928,  1010,  9857,  1007,  1010,  1006,  9857,  1010,  9317,
         1007,  1010,  1006,  9317,  1010,  9432,  1007,  1010,  1006,  9432,
         1010,  5958,  1007,  1010,  1006,  5958,  1010,  5095,  1007,  1010,
         1998,  1006,  5095,  1010,  4465,  1007,  1012,  2122,  2024,  1996,
         2069,  2698,  2825, 14930,  2005,  1996,  4469,  1016,  2420,  1012,
         1006,  1045,  1007,  2004,  4465,  5158,  1999,  2048,  1997,  1996,
         2698, 14930,  1010,  1996,  2193,  1997,  3971,  1037, 11679,  2095,
         2097,  2031,  5187, 14803,  2003,  1016,  1012,  1006,  2462,  1007,
         2004,  1006,  5095,  1010,  4465,  1007,  5158,  2320,  1010,  1996,
         9059,  2193,  1997, 11119,  3572,  2003,  1015,  1012,  1006,  3523,
         1007,  4445,  5095,  4496,  4465,  5158,  1999,  2176,  2041,  1997,
         1996,  2698,  2825,  7689,  1012,  1006,  4921,  1007,  2045,  4839,
         2176,  7689,  4820,  2593,  1037,  5958,  2030,  1037,  4465,  1012,
         1006,  1058,  1007,  2045,  2024,  2093, 11119,  3572,  1010,  8419,
         1010,  1006,  4465,  1010,  6928,  1007,  1010,  1006,  5958,  1010,
         5095,  1007,  1010,  1998,  1006,  5095,  1010,  4465,  1007,  2478,
         1996, 13711,  3627,  1012,   102])"
1154,0,[], Complete Enumeration,seg_269,example 5.29 roots of quadratic equation,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  2742,  1019,  1012,  2756,  6147,  1997, 17718, 23671,  8522,
          102])"
1155,1,['coefficients'], Complete Enumeration,seg_269,"consider a quadratic equation px2 + qx + r = 0, whose nonzero coefficients (p, q, r) are determined by the number that turns up when a die with six faces numbered 1–6 is thrown. find the number of ways in which (i) the equation will have real roots, (ii) equal roots, (iii) imaginary roots, (iv) both integer roots, and (vi) exactly one integer root.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  5136,  1037, 17718, 23671,  8522,  1052,  2595,  2475,  1009,
         1053,  2595,  1009,  1054,  1027,  1014,  1010,  3005,  2512,  6290,
         2080, 21374,  1006,  1052,  1010,  1053,  1010,  1054,  1007,  2024,
         4340,  2011,  1996,  2193,  2008,  4332,  2039,  2043,  1037,  3280,
         2007,  2416,  5344,  8597,  1015,  1516,  1020,  2003,  6908,  1012,
         2424,  1996,  2193,  1997,  3971,  1999,  2029,  1006,  1045,  1007,
         1996,  8522,  2097,  2031,  2613,  6147,  1010,  1006,  2462,  1007,
         5020,  6147,  1010,  1006,  3523,  1007, 15344,  6147,  1010,  1006,
         4921,  1007,  2119, 16109,  6147,  1010,  1998,  1006,  6819,  1007,
         3599,  2028, 16109,  7117,  1012,   102])"
1156,1,"['cases', 'coefficients', 'condition', 'complete enumeration', 'case']", Complete Enumeration,seg_269,"solution 5.29 as each of the coefficients p, q, r is determined by the number that shows up in the throw of a die, we need three throws to decide them (say choose p first, then q, and finally r). we do a complete enumeration as follows. as each of them can be in {1, 2, 3, 4, 5, 6}, there exist a total number of 6 × 6 × 6 = 63 = 216 equations by the poc. (i) we know that the condition for real roots is q2 − 4pr ≥ 0. as repetitions are allowed, the least value of 4pr is 4 × 1 × 1 = 4. however, q2 is greater than 4 when q = 3, 4, 5, 6. this means that there exist four favorable cases when p= r= 1 (and five cases if q = 2 is also counted in which case we have equal roots). next consider (p= 2 and r= 1) or (p= 1 and r= 2). in both cases 4pr= 8, and q2 is greater than 8 when q = (3, 4, 5, 6). proceed similarly with (p= 3 and r = 1), (p= 1 and r= 3), or (p= 2 and r= 2). in the first two cases 4pr = 12 and q2 is greater than 12 for q= (4, 5, 6). for (p= 2 and r= 2), (p= 1 and r= 4), or (p= 4 and r= 1) 4pr= 16 and q= (5,6). for (p= 1 and r= 5) or (p= 5 and r= 1) 4pr= 20 and q= (5,6). similarly for (p= 1 and r= 6), (p= 6 and r= 1), (p= 2 and r= 3) and (p= 3 and r= 2), 4pr= 24 and q= (5,6). finally",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  5576,  1019,  1012,  2756,  2004,  2169,  1997,  1996, 21374,
         1052,  1010,  1053,  1010,  1054,  2003,  4340,  2011,  1996,  2193,
         2008,  3065,  2039,  1999,  1996,  5466,  1997,  1037,  3280,  1010,
         2057,  2342,  2093, 11618,  2000,  5630,  2068,  1006,  2360,  5454,
         1052,  2034,  1010,  2059,  1053,  1010,  1998,  2633,  1054,  1007,
         1012,  2057,  2079,  1037,  3143,  4372, 17897,  8156,  2004,  4076,
         1012,  2004,  2169,  1997,  2068,  2064,  2022,  1999,  1063,  1015,
         1010,  1016,  1010,  1017,  1010,  1018,  1010,  1019,  1010,  1020,
         1065,  1010,  2045,  4839,  1037,  2561,  2193,  1997,  1020,  1095,
         1020,  1095,  1020,  1027,  6191,  1027, 20294, 11380,  2011,  1996,
        13433,  2278,  1012,  1006,  1045,  1007,  2057,  2113,  2008,  1996,
         4650,  2005,  2613,  6147,  2003,  1053,  2475,  1597,  1018, 18098,
         1609,  1014,  1012,  2004, 23318,  2015,  2024,  3039,  1010,  1996,
         2560,  3643,  1997,  1018, 18098,  2003,  1018,  1095,  1015,  1095,
         1015,  1027,  1018,  1012,  2174,  1010,  1053,  2475,  2003,  3618,
         2084,  1018,  2043,  1053,  1027,  1017,  1010,  1018,  1010,  1019,
         1010,  1020,  1012,  2023,  2965,  2008,  2045,  4839,  2176, 11119,
         3572,  2043,  1052,  1027,  1054,  1027,  1015,  1006,  1998,  2274,
         3572,  2065,  1053,  1027,  1016,  2003,  2036,  8897,  1999,  2029,
         2553,  2057,  2031,  5020,  6147,  1007,  1012,  2279,  5136,  1006,
         1052,  1027,  1016,  1998,  1054,  1027,  1015,  1007,  2030,  1006,
         1052,  1027,  1015,  1998,  1054,  1027,  1016,  1007,  1012,  1999,
         2119,  3572,  1018, 18098,  1027,  1022,  1010,  1998,  1053,  2475,
         2003,  3618,  2084,  1022,  2043,  1053,  1027,  1006,  1017,  1010,
         1018,  1010,  1019,  1010,  1020,  1007,  1012, 10838,  6660,  2007,
         1006,  1052,  1027,  1017,  1998,  1054,  1027,  1015,  1007,  1010,
         1006,  1052,  1027,  1015,  1998,  1054,  1027,  1017,  1007,  1010,
         2030,  1006,  1052,  1027,  1016,  1998,  1054,  1027,  1016,  1007,
         1012,  1999,  1996,  2034,  2048,  3572,  1018, 18098,  1027,  2260,
         1998,  1053,  2475,  2003,  3618,  2084,  2260,  2005,  1053,  1027,
         1006,  1018,  1010,  1019,  1010,  1020,  1007,  1012,  2005,  1006,
         1052,  1027,  1016,  1998,  1054,  1027,  1016,  1007,  1010,  1006,
         1052,  1027,  1015,  1998,  1054,  1027,  1018,  1007,  1010,  2030,
         1006,  1052,  1027,  1018,  1998,  1054,  1027,  1015,  1007,  1018,
        18098,  1027,  2385,  1998,  1053,  1027,  1006,  1019,  1010,  1020,
         1007,  1012,  2005,  1006,  1052,  1027,  1015,  1998,  1054,  1027,
         1019,  1007,  2030,  1006,  1052,  1027,  1019,  1998,  1054,  1027,
         1015,  1007,  1018, 18098,  1027,  2322,  1998,  1053,  1027,  1006,
         1019,  1010,  1020,  1007,  1012,  6660,  2005,  1006,  1052,  1027,
         1015,  1998,  1054,  1027,  1020,  1007,  1010,  1006,  1052,  1027,
         1020,  1998,  1054,  1027,  1015,  1007,  1010,  1006,  1052,  1027,
         1016,  1998,  1054,  1027,  1017,  1007,  1998,  1006,  1052,  1027,
         1017,  1998,  1054,  1027,  1016,  1007,  1010,  1018, 18098,  1027,
         2484,  1998,  1053,  1027,  1006,  1019,  1010,  1020,  1007,  1012,
         2633,   102])"
1157,1,['cases'], Complete Enumeration,seg_269,"for (p= 2 and r= 4) or (p= 4 and r= 2), 4pr= 32 and q= (6). for (p= 3 and r= 3), real roots are not possible as 4pr= 36. summing the counts, we get the total number of cases as 38. in addition, there are five cases (given the following discussion) for the roots to be equal.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  2005,  1006,  1052,  1027,  1016,  1998,  1054,  1027,  1018,
         1007,  2030,  1006,  1052,  1027,  1018,  1998,  1054,  1027,  1016,
         1007,  1010,  1018, 18098,  1027,  3590,  1998,  1053,  1027,  1006,
         1020,  1007,  1012,  2005,  1006,  1052,  1027,  1017,  1998,  1054,
         1027,  1017,  1007,  1010,  2613,  6147,  2024,  2025,  2825,  2004,
         1018, 18098,  1027,  4029,  1012,  7680,  6562,  1996,  9294,  1010,
         2057,  2131,  1996,  2561,  2193,  1997,  3572,  2004,  4229,  1012,
         1999,  2804,  1010,  2045,  2024,  2274,  3572,  1006,  2445,  1996,
         2206,  6594,  1007,  2005,  1996,  6147,  2000,  2022,  5020,  1012,
          102])"
1158,1,"['cases', 'complement', 'table', 'case']", Complete Enumeration,seg_269,"there exists (38 + 5) = 43 ways (see table 5.3). in case (ii), the five favorable cases are (1,2,1), (1,4,4), (2,4,2), (3,6,3), and (4,4,1). a quadratic equation can have either real roots or equal roots or imaginary roots only. hence, the favorable cases for (iii) can be directly obtained using complement rule as 216 − 43 = 173. consider case (iv). both roots are integers in two cases: (a) both q and q2 − 4pr are odd and (b) both are even. the 10 favorable cases are (1,2,1),(1,3,2),(1,4,3),(1,4,4),(1,5,4),(1,5,6),(1,6,5),(2,4,2), (2,6,4),(3,6,3). (v) the eight favorable cases are (2,3,1), (2,5,2), (2,5,3), (3,4,1), (3,5,2), (4,5,1), (4,6,2), and (5,6,1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3143,  4372, 17897,  8156])","tensor([  101,  2045,  6526,  1006,  4229,  1009,  1019,  1007,  1027,  4724,
         3971,  1006,  2156,  2795,  1019,  1012,  1017,  1007,  1012,  1999,
         2553,  1006,  2462,  1007,  1010,  1996,  2274, 11119,  3572,  2024,
         1006,  1015,  1010,  1016,  1010,  1015,  1007,  1010,  1006,  1015,
         1010,  1018,  1010,  1018,  1007,  1010,  1006,  1016,  1010,  1018,
         1010,  1016,  1007,  1010,  1006,  1017,  1010,  1020,  1010,  1017,
         1007,  1010,  1998,  1006,  1018,  1010,  1018,  1010,  1015,  1007,
         1012,  1037, 17718, 23671,  8522,  2064,  2031,  2593,  2613,  6147,
         2030,  5020,  6147,  2030, 15344,  6147,  2069,  1012,  6516,  1010,
         1996, 11119,  3572,  2005,  1006,  3523,  1007,  2064,  2022,  3495,
         4663,  2478, 13711,  3627,  2004, 20294,  1597,  4724,  1027, 19410,
         1012,  5136,  2553,  1006,  4921,  1007,  1012,  2119,  6147,  2024,
        24028,  1999,  2048,  3572,  1024,  1006,  1037,  1007,  2119,  1053,
         1998,  1053,  2475,  1597,  1018, 18098,  2024,  5976,  1998,  1006,
         1038,  1007,  2119,  2024,  2130,  1012,  1996,  2184, 11119,  3572,
         2024,  1006,  1015,  1010,  1016,  1010,  1015,  1007,  1010,  1006,
         1015,  1010,  1017,  1010,  1016,  1007,  1010,  1006,  1015,  1010,
         1018,  1010,  1017,  1007,  1010,  1006,  1015,  1010,  1018,  1010,
         1018,  1007,  1010,  1006,  1015,  1010,  1019,  1010,  1018,  1007,
         1010,  1006,  1015,  1010,  1019,  1010,  1020,  1007,  1010,  1006,
         1015,  1010,  1020,  1010,  1019,  1007,  1010,  1006,  1016,  1010,
         1018,  1010,  1016,  1007,  1010,  1006,  1016,  1010,  1020,  1010,
         1018,  1007,  1010,  1006,  1017,  1010,  1020,  1010,  1017,  1007,
         1012,  1006,  1058,  1007,  1996,  2809, 11119,  3572,  2024,  1006,
         1016,  1010,  1017,  1010,  1015,  1007,  1010,  1006,  1016,  1010,
         1019,  1010,  1016,  1007,  1010,  1006,  1016,  1010,  1019,  1010,
         1017,  1007,  1010,  1006,  1017,  1010,  1018,  1010,  1015,  1007,
         1010,  1006,  1017,  1010,  1019,  1010,  1016,  1007,  1010,  1006,
         1018,  1010,  1019,  1010,  1015,  1007,  1010,  1006,  1018,  1010,
         1020,  1010,  1016,  1007,  1010,  1998,  1006,  1019,  1010,  1020,
         1010,  1015,  1007,  1012,   102])"
1159,1,"['permutation', 'linear', 'set', 'probability', 'permutations']", PERMUTATIONS AND COMBINATIONS,seg_271,"the literal meaning of permutation is an ordering or arrangement. mathematically, a permutation of a set s is a one-to-one mapping of s onto itself. in other words, it is the total number of arrangements of a set of elements. the elements being arranged are all uniquely distinguishable to the human eye. this arrangement can be linear (in 1d) or circular (in 2d space). an ordered subset of a larger set is also called a permutation. as a great majority of probability problems are valid in 1d or 2d only, we will not discuss higher dimensional permutations. consider a set of three students {amy, john, and mary}. denoting each of them by their first letter, there are six ways to arrange them linearly as {a,j,m}, {a,m,j}, {j,a,m}, {j,m,a}, {m,a,j}, and {m,j,a}. these are the only possible linear permutations.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0.])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  1996, 18204,  3574,  1997,  2566, 28120,  3370,  2003,  2019,
        13063,  2030,  6512,  1012,  8045,  2135,  1010,  1037,  2566, 28120,
         3370,  1997,  1037,  2275,  1055,  2003,  1037,  2028,  1011,  2000,
         1011,  2028, 12375,  1997,  1055,  3031,  2993,  1012,  1999,  2060,
         2616,  1010,  2009,  2003,  1996,  2561,  2193,  1997,  7565,  1997,
         1037,  2275,  1997,  3787,  1012,  1996,  3787,  2108,  5412,  2024,
         2035, 20640, 10782,  3085,  2000,  1996,  2529,  3239,  1012,  2023,
         6512,  2064,  2022,  7399,  1006,  1999,  1015,  2094,  1007,  2030,
         8206,  1006,  1999, 14134,  2686,  1007,  1012,  2019,  3641, 16745,
         1997,  1037,  3469,  2275,  2003,  2036,  2170,  1037,  2566, 28120,
         3370,  1012,  2004,  1037,  2307,  3484,  1997,  9723,  3471,  2024,
         9398,  1999,  1015,  2094,  2030, 14134,  2069,  1010,  2057,  2097,
         2025,  6848,  3020,  8789,  2566, 28120, 10708,  1012,  5136,  1037,
         2275,  1997,  2093,  2493,  1063,  6864,  1010,  2198,  1010,  1998,
         2984,  1065,  1012,  7939, 20656,  2169,  1997,  2068,  2011,  2037,
         2034,  3661,  1010,  2045,  2024,  2416,  3971,  2000, 13621,  2068,
         7399,  2135,  2004,  1063,  1037,  1010,  1046,  1010,  1049,  1065,
         1010,  1063,  1037,  1010,  1049,  1010,  1046,  1065,  1010,  1063,
         1046,  1010,  1037,  1010,  1049,  1065,  1010,  1063,  1046,  1010,
         1049,  1010,  1037,  1065,  1010,  1063,  1049,  1010,  1037,  1010,
         1046,  1065,  1010,  1998,  1063,  1049,  1010,  1046,  1010,  1037,
         1065,  1012,  2122,  2024,  1996,  2069,  2825,  7399,  2566, 28120,
        10708,  1012,   102])"
1160,1,"['set', 'permutation']", PERMUTATIONS AND COMBINATIONS,seg_271,"definition 5.8 a permutation is an arrangement of the whole or part (with at least two elements) of a finite set of distinguishable elements without repetition, where the order is considered as important.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  6210,  1019,  1012,  1022,  1037,  2566, 28120,  3370,  2003,
         2019,  6512,  1997,  1996,  2878,  2030,  2112,  1006,  2007,  2012,
         2560,  2048,  3787,  1007,  1997,  1037, 10713,  2275,  1997, 10782,
         3085,  3787,  2302, 23318,  1010,  2073,  1996,  2344,  2003,  2641,
         2004,  2590,  1012,   102])"
1161,1,"['permutation', 'replacement', 'permutations']", PERMUTATIONS AND COMBINATIONS,seg_271,"there is no universally accepted notation for permutations. the four most widely used notations are npr,pr,n,p(r, n) and pnr , where both n and r are integers such that r ≤ n. permutation can also be interpreted as selection of elements from a group without replacement.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  2045,  2003,  2053, 21186,  3970, 14869,  2005,  2566, 28120,
        10708,  1012,  1996,  2176,  2087,  4235,  2109, 14869,  2015,  2024,
        21411,  1010, 10975,  1010,  1050,  1010,  1052,  1006,  1054,  1010,
         1050,  1007,  1998,  1052, 16118,  1010,  2073,  2119,  1050,  1998,
         1054,  2024, 24028,  2107,  2008,  1054,  1608,  1050,  1012,  2566,
        28120,  3370,  2064,  2036,  2022, 10009,  2004,  4989,  1997,  3787,
         2013,  1037,  2177,  2302,  6110,  1012,   102])"
1162,1,['permutations'], PERMUTATIONS AND COMBINATIONS,seg_271,theorem 5.1 prove that the total number of permutations of r objects from among n distinguishable objects is npr where r ≤ n.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  9872,  1019,  1012,  1015,  6011,  2008,  1996,  2561,  2193,
         1997,  2566, 28120, 10708,  1997,  1054,  5200,  2013,  2426,  1050,
        10782,  3085,  5200,  2003, 21411,  2073,  1054,  1608,  1050,  1012,
          102])"
1163,1,['set'], PERMUTATIONS AND COMBINATIONS,seg_271,"proof: as there are n elements initially, there exist n ways to choose the first element. now there are (n − 1) elements remaining, as one element is already removed from the set. thus, there are (n − 1) ways to select the second object. continuing in like fashion r times, we see that there are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([ 101, 6947, 1024, 2004, 2045, 2024, 1050, 3787, 3322, 1010, 2045, 4839,
        1050, 3971, 2000, 5454, 1996, 2034, 5783, 1012, 2085, 2045, 2024, 1006,
        1050, 1597, 1015, 1007, 3787, 3588, 1010, 2004, 2028, 5783, 2003, 2525,
        3718, 2013, 1996, 2275, 1012, 2947, 1010, 2045, 2024, 1006, 1050, 1597,
        1015, 1007, 3971, 2000, 7276, 1996, 2117, 4874, 1012, 5719, 1999, 2066,
        4827, 1054, 2335, 1010, 2057, 2156, 2008, 2045, 2024,  102])"
1164,1,"['falling factorial', 'table', 'pochhammer notation', 'without replacement', 'samples', 'replacement', 'factorial']", PERMUTATIONS AND COMBINATIONS,seg_271,ways to choose r objects from n objects ((n)r is the pochhammer notation for falling factorial). this is the same as the number of samples of size r without replacement from n distinguishable objects (see table 5.4).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  3971,  2000,  5454,  1054,  5200,  2013,  1050,  5200,  1006,
         1006,  1050,  1007,  1054,  2003,  1996, 13433,  2818, 19742, 14869,
         2005,  4634,  5387,  4818,  1007,  1012,  2023,  2003,  1996,  2168,
         2004,  1996,  2193,  1997,  8168,  1997,  2946,  1054,  2302,  6110,
         2013,  1050, 10782,  3085,  5200,  1006,  2156,  2795,  1019,  1012,
         1018,  1007,  1012,   102])"
1165,1,['set'], PERMUTATIONS AND COMBINATIONS,seg_271,lemma 2 a set of n distinguishable objects can be linearly arranged among themselves in n! ways.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  3393, 14760,  1016,  1037,  2275,  1997,  1050, 10782,  3085,
         5200,  2064,  2022,  7399,  2135,  5412,  2426,  3209,  1999,  1050,
          999,  3971,  1012,   102])"
1166,0,['n'], PERMUTATIONS AND COMBINATIONS,seg_271,"proof: mark the positions of n objects. the first position can be filled by any of them (in n possible ways). once this position is filled, there are (n − 1) objects remaining and (n−1) positions to put them into. next we fix second of the (n−1) possible positions. there are (n-1) ways to choose an object to this position. thus, the first two positions can be filled in n*(n−1) ways. continuing this way we find that for filling the last position, we have only one choice. hence, the total number of ways to fill all the positions is npn = n ∗ (n − 1) ∗ (n − 2) ∗ · · · ∗ 2 ∗ 1 = n!∕(n − n)! = n! ways (as 0! = 1 by convention).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  6947,  1024,  2928,  1996,  4460,  1997,  1050,  5200,  1012,
         1996,  2034,  2597,  2064,  2022,  3561,  2011,  2151,  1997,  2068,
         1006,  1999,  1050,  2825,  3971,  1007,  1012,  2320,  2023,  2597,
         2003,  3561,  1010,  2045,  2024,  1006,  1050,  1597,  1015,  1007,
         5200,  3588,  1998,  1006,  1050, 27944,  1007,  4460,  2000,  2404,
         2068,  2046,  1012,  2279,  2057,  8081,  2117,  1997,  1996,  1006,
         1050, 27944,  1007,  2825,  4460,  1012,  2045,  2024,  1006,  1050,
         1011,  1015,  1007,  3971,  2000,  5454,  2019,  4874,  2000,  2023,
         2597,  1012,  2947,  1010,  1996,  2034,  2048,  4460,  2064,  2022,
         3561,  1999,  1050,  1008,  1006,  1050, 27944,  1007,  3971,  1012,
         5719,  2023,  2126,  2057,  2424,  2008,  2005,  8110,  1996,  2197,
         2597,  1010,  2057,  2031,  2069,  2028,  3601,  1012,  6516,  1010,
         1996,  2561,  2193,  1997,  3971,  2000,  6039,  2035,  1996,  4460,
         2003, 27937,  2078,  1027,  1050,  1598,  1006,  1050,  1597,  1015,
         1007,  1598,  1006,  1050,  1597,  1016,  1007,  1598,  1087,  1087,
         1087,  1598,  1016,  1598,  1015,  1027,  1050,   999,   100,  1006,
         1050,  1597,  1050,  1007,   999,  1027,  1050,   999,  3971,  1006,
         2004,  1014,   999,  1027,  1015,  2011,  4680,  1007,  1012,   102])"
1167,0,[], PERMUTATIONS AND COMBINATIONS,seg_271,example 5.30 national flags,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([ 101, 2742, 1019, 1012, 2382, 2120, 9245,  102])"
1168,0,[], PERMUTATIONS AND COMBINATIONS,seg_271,a political summit is attended by delegates from five countries. all five national flags are to be arranged in a row at the entrance. in how many ways can this be done?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120, 10708,  1998, 14930])","tensor([  101,  1037,  2576,  6465,  2003,  3230,  2011, 10284,  2013,  2274,
         3032,  1012,  2035,  2274,  2120,  9245,  2024,  2000,  2022,  5412,
         1999,  1037,  5216,  2012,  1996,  4211,  1012,  1999,  2129,  2116,
         3971,  2064,  2023,  2022,  2589,  1029,   102])"
1169,0,[], Permutations with Restrictions,seg_273,"in most of the practical applications, we have restrictions on the elements. the most common restriction is duplicates (property restriction) discussed in the following. other types of restrictions include adjacency restrictions, locational restrictions (such as fixed positions), and end point (extreme position) restrictions.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120, 10708,  2007,  9259])","tensor([  101,  1999,  2087,  1997,  1996,  6742,  5097,  1010,  2057,  2031,
         9259,  2006,  1996,  3787,  1012,  1996,  2087,  2691, 16840,  2003,
        24473,  2015,  1006,  3200, 16840,  1007,  6936,  1999,  1996,  2206,
         1012,  2060,  4127,  1997,  9259,  2421,  4748,  3900, 27524,  5666,
         9259,  1010,  3295,  2389,  9259,  1006,  2107,  2004,  4964,  4460,
         1007,  1010,  1998,  2203,  2391,  1006,  6034,  2597,  1007,  9259,
         1012,   102])"
1170,0,[], Permutations with Restrictions,seg_273,example 5.31 book arrangement,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120, 10708,  2007,  9259])","tensor([ 101, 2742, 1019, 1012, 2861, 2338, 6512,  102])"
1171,0,[], Permutations with Restrictions,seg_273,"a schoolchild has five books, one each on mathematics, gaming, english, physics, and biology. how many ways are there to arrange the books on a rectangular rack if (i) no order is maintained among them?, (ii) the leftmost book must be gaming book?, (iii) the left-most and right-most places are occupied by mathematics and physics books?, (iv) physics and mathematics books are always adjacent, and (v) english and biology books cannot be next to each other?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120, 10708,  2007,  9259])","tensor([  101,  1037,  2082, 19339,  2038,  2274,  2808,  1010,  2028,  2169,
         2006,  5597,  1010, 10355,  1010,  2394,  1010,  5584,  1010,  1998,
         7366,  1012,  2129,  2116,  3971,  2024,  2045,  2000, 13621,  1996,
         2808,  2006,  1037, 10806, 14513,  2065,  1006,  1045,  1007,  2053,
         2344,  2003,  5224,  2426,  2068,  1029,  1010,  1006,  2462,  1007,
         1996,  2187, 11800,  2338,  2442,  2022, 10355,  2338,  1029,  1010,
         1006,  3523,  1007,  1996,  2187,  1011,  2087,  1998,  2157,  1011,
         2087,  3182,  2024,  4548,  2011,  5597,  1998,  5584,  2808,  1029,
         1010,  1006,  4921,  1007,  5584,  1998,  5597,  2808,  2024,  2467,
         5516,  1010,  1998,  1006,  1058,  1007,  2394,  1998,  7366,  2808,
         3685,  2022,  2279,  2000,  2169,  2060,  1029,   102])"
1172,1,"['complement', 'event', 'case']", Permutations with Restrictions,seg_273,"solution 5.31 (i) if no order is maintained among them, the possible number of ways is 5! = 120. in case (ii), the gaming book occupies a fixed position. there are four books to be arranged. this can be done in 4!= 24 ways. in case (iii), two places are preoccupied. the remaining three books can be arranged in 3! = 6 ways. in case (iv), we consider physics and mathematics as a single logical bundle. then, it reduces to arranging four books among themselves. this can be done in 4! = 24 ways. the easiest way to tackle (v) is using the do-little principle (complement-and-conquer). we consider the complement event that english and biology books are together. as it is similar to case (iv), there are 24 possibilities. the required answer is then found using the complement as 5! − 4! = 120 − 24 = 96.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120, 10708,  2007,  9259])","tensor([  101,  5576,  1019,  1012,  2861,  1006,  1045,  1007,  2065,  2053,
         2344,  2003,  5224,  2426,  2068,  1010,  1996,  2825,  2193,  1997,
         3971,  2003,  1019,   999,  1027,  6036,  1012,  1999,  2553,  1006,
         2462,  1007,  1010,  1996, 10355,  2338, 14133,  1037,  4964,  2597,
         1012,  2045,  2024,  2176,  2808,  2000,  2022,  5412,  1012,  2023,
         2064,  2022,  2589,  1999,  1018,   999,  1027,  2484,  3971,  1012,
         1999,  2553,  1006,  3523,  1007,  1010,  2048,  3182,  2024, 23962,
         1012,  1996,  3588,  2093,  2808,  2064,  2022,  5412,  1999,  1017,
          999,  1027,  1020,  3971,  1012,  1999,  2553,  1006,  4921,  1007,
         1010,  2057,  5136,  5584,  1998,  5597,  2004,  1037,  2309, 11177,
        14012,  1012,  2059,  1010,  2009, 13416,  2000, 19018,  2176,  2808,
         2426,  3209,  1012,  2023,  2064,  2022,  2589,  1999,  1018,   999,
         1027,  2484,  3971,  1012,  1996, 25551,  2126,  2000, 11147,  1006,
         1058,  1007,  2003,  2478,  1996,  2079,  1011,  2210,  6958,  1006,
        13711,  1011,  1998,  1011, 16152,  1007,  1012,  2057,  5136,  1996,
        13711,  2724,  2008,  2394,  1998,  7366,  2808,  2024,  2362,  1012,
         2004,  2009,  2003,  2714,  2000,  2553,  1006,  4921,  1007,  1010,
         2045,  2024,  2484, 12020,  1012,  1996,  3223,  3437,  2003,  2059,
         2179,  2478,  1996, 13711,  2004,  1019,   999,  1597,  1018,   999,
         1027,  6036,  1597,  2484,  1027,  5986,  1012,   102])"
1173,0,['n'], Permutation of Alike Objects,seg_275,"if there are n things of which n1 of them are of one kind, n2 of them are of another kind, … , nk of them are of kth kind, then there are",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  2065,  2045,  2024,  1050,  2477,  1997,  2029,  1050,  2487,
         1997,  2068,  2024,  1997,  2028,  2785,  1010,  1050,  2475,  1997,
         2068,  2024,  1997,  2178,  2785,  1010,  1529,  1010, 25930,  1997,
         2068,  2024,  1997,  1047,  2705,  2785,  1010,  2059,  2045,  2024,
          102])"
1174,1,"['coefficient', 'multinomial', 'permutations']", Permutation of Alike Objects,seg_275,"different permutations, where n = n1 + n2 + · · · + nk. this is called the multinomial coefficient. it can alternately be written as",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  2367,  2566, 28120, 10708,  1010,  2073,  1050,  1027,  1050,
         2487,  1009,  1050,  2475,  1009,  1087,  1087,  1087,  1009, 25930,
         1012,  2023,  2003,  2170,  1996,  4800,  3630, 10092,  2140, 19064,
         1012,  2009,  2064, 23554,  2022,  2517,  2004,   102])"
1175,0,[], Permutation of Alike Objects,seg_275,"where the missing operator is a “*.” some of the ni in this theorem can be one. when all of the ni’s are 1’s, the denominator reduces to 1 and we get the number",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  2073,  1996,  4394,  6872,  2003,  1037,  1523,  1008,  1012,
         1524,  2070,  1997,  1996,  9152,  1999,  2023,  9872,  2064,  2022,
         2028,  1012,  2043,  2035,  1997,  1996,  9152,  1521,  1055,  2024,
         1015,  1521,  1055,  1010,  1996,  7939, 20936, 27413, 13416,  2000,
         1015,  1998,  2057,  2131,  1996,  2193,   102])"
1176,1,['permutations'], Permutation of Alike Objects,seg_275,"of permutations as n!. this result can be stated alternately as follows. the number of possible divisions of n distinct objects into r groups of respective sizes n1, n2, … , nr",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  1997,  2566, 28120, 10708,  2004,  1050,   999,  1012,  2023,
         2765,  2064,  2022,  3090, 23554,  2004,  4076,  1012,  1996,  2193,
         1997,  2825,  5908,  1997,  1050,  5664,  5200,  2046,  1054,  2967,
         1997,  7972, 10826,  1050,  2487,  1010,  1050,  2475,  1010,  1529,
         1010, 17212,   102])"
1177,1,"['coefficients', 'multinomial']", Permutation of Alike Objects,seg_275,"n is ( n1,n2,… nr ) = n!∕[n1! ∗ n2! ∗ · · · ∗ nr!]. multinomial coefficients are further discussed in chapter 6.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  1050,  2003,  1006,  1050,  2487,  1010,  1050,  2475,  1010,
         1529, 17212,  1007,  1027,  1050,   999,   100,  1031,  1050,  2487,
          999,  1598,  1050,  2475,   999,  1598,  1087,  1087,  1087,  1598,
        17212,   999,  1033,  1012,  4800,  3630, 10092,  2140, 21374,  2024,
         2582,  6936,  1999,  3127,  1020,  1012,   102])"
1178,0,[], Permutation of Alike Objects,seg_275,example 5.32 shelving of books,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  2742,  1019,  1012,  3590,  2016, 25780,  1997,  2808,   102])"
1179,1,['statistics'], Permutation of Alike Objects,seg_275,"a library has received a shipment of 12 books of which 2 are duplicate copies of a statistics book, 4 are duplicate copies of a database book, and 3 each are duplicate copies of c programming book and java programming book. these need to be kept on a reserve shelf. in how many ways, can this be arranged?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  1037,  3075,  2038,  2363,  1037, 22613,  1997,  2260,  2808,
         1997,  2029,  1016,  2024, 24473,  4809,  1997,  1037,  6747,  2338,
         1010,  1018,  2024, 24473,  4809,  1997,  1037,  7809,  2338,  1010,
         1998,  1017,  2169,  2024, 24473,  4809,  1997,  1039,  4730,  2338,
         1998,  9262,  4730,  2338,  1012,  2122,  2342,  2000,  2022,  2921,
         2006,  1037,  3914, 11142,  1012,  1999,  2129,  2116,  3971,  1010,
         2064,  2023,  2022,  5412,  1029,   102])"
1180,0,[], Permutation of Alike Objects,seg_275,example 5.33 train coaches,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([ 101, 2742, 1019, 1012, 3943, 3345, 7850,  102])"
1181,0,[], Permutation of Alike Objects,seg_275,a train has five ordinary coaches and three ac coaches in addition to an engine. how many ways are there to connect the coaches if the engine is always at the front?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([ 101, 1037, 3345, 2038, 2274, 6623, 7850, 1998, 2093, 9353, 7850, 1999,
        2804, 2000, 2019, 3194, 1012, 2129, 2116, 3971, 2024, 2045, 2000, 7532,
        1996, 7850, 2065, 1996, 3194, 2003, 2467, 2012, 1996, 2392, 1029,  102])"
1182,1,['permutations'], Permutation of Alike Objects,seg_275,"solution 5.33 this problem is most easily solved using permutations of alike objects. the eight coaches can be considered as objects of which five are of one kind and three are of another kind. hence using the above-mentioned theorem, the total number of possibilities is 8!/(5!*3!) = 336/6 = 56 ways.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2566, 28120,  3370,  1997, 11455,  5200])","tensor([  101,  5576,  1019,  1012,  3943,  2023,  3291,  2003,  2087,  4089,
        13332,  2478,  2566, 28120, 10708,  1997, 11455,  5200,  1012,  1996,
         2809,  7850,  2064,  2022,  2641,  2004,  5200,  1997,  2029,  2274,
         2024,  1997,  2028,  2785,  1998,  2093,  2024,  1997,  2178,  2785,
         1012,  6516,  2478,  1996,  2682,  1011,  3855,  9872,  1010,  1996,
         2561,  2193,  1997, 12020,  2003,  1022,   999,  1013,  1006,  1019,
          999,  1008,  1017,   999,  1007,  1027, 27954,  1013,  1020,  1027,
         5179,  3971,  1012,   102])"
1183,1,"['table', 'permutation', 'permutations']", Cyclic Permutations,seg_277,"if the permutations of distinguishable objects occur along a “logical circle,” it is called cyclic or circular permutation. here, logical circle means that the objects can be thought of as forming an imaginary circle (although physically it can be any closed shape including a triangle, square, rectangle, or pentagon). the circle can be rotated by fixing the objects in place. hence, it is not the circle, but the order of occurrence of objects that is more important. as an example, if several people sit around a rectangular table, we could consider it as a logical circle as long as the sides of the table are not distinguished or considered with respect to the persons.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23750,  2566, 28120, 10708])","tensor([  101,  2065,  1996,  2566, 28120, 10708,  1997, 10782,  3085,  5200,
         5258,  2247,  1037,  1523, 11177,  4418,  1010,  1524,  2009,  2003,
         2170, 23750,  2030,  8206,  2566, 28120,  3370,  1012,  2182,  1010,
        11177,  4418,  2965,  2008,  1996,  5200,  2064,  2022,  2245,  1997,
         2004,  5716,  2019, 15344,  4418,  1006,  2348,  8186,  2009,  2064,
         2022,  2151,  2701,  4338,  2164,  1037,  9546,  1010,  2675,  1010,
        28667, 23395,  1010,  2030, 20864,  1007,  1012,  1996,  4418,  2064,
         2022, 20931,  2011, 15887,  1996,  5200,  1999,  2173,  1012,  6516,
         1010,  2009,  2003,  2025,  1996,  4418,  1010,  2021,  1996,  2344,
         1997, 14404,  1997,  5200,  2008,  2003,  2062,  2590,  1012,  2004,
         2019,  2742,  1010,  2065,  2195,  2111,  4133,  2105,  1037, 10806,
         2795,  1010,  2057,  2071,  5136,  2009,  2004,  1037, 11177,  4418,
         2004,  2146,  2004,  1996,  3903,  1997,  1996,  2795,  2024,  2025,
         5182,  2030,  2641,  2007,  4847,  2000,  1996,  5381,  1012,   102])"
1184,1,['permutations'], Cyclic Permutations,seg_277,lemma 3 the number of permutations of n distinguishable objects along a circle is (n − 1)!.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23750,  2566, 28120, 10708])","tensor([  101,  3393, 14760,  1017,  1996,  2193,  1997,  2566, 28120, 10708,
         1997,  1050, 10782,  3085,  5200,  2247,  1037,  4418,  2003,  1006,
         1050,  1597,  1015,  1007,   999,  1012,   102])"
1185,0,['n'], Cyclic Permutations,seg_277,proof: keep any one of the objects as fixed. there are (n − 1) others remaining. they can be arranged among themselves in (n − 1)! ways.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708])","tensor([ 101, 6947, 1024, 2562, 2151, 2028, 1997, 1996, 5200, 2004, 4964, 1012,
        2045, 2024, 1006, 1050, 1597, 1015, 1007, 2500, 3588, 1012, 2027, 2064,
        2022, 5412, 2426, 3209, 1999, 1006, 1050, 1597, 1015, 1007,  999, 3971,
        1012,  102])"
1186,0,[], Cyclic Permutations,seg_277,example 5.34 roundtable seating,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708])","tensor([  101,  2742,  1019,  1012,  4090,  2461, 10880, 10747,   102])"
1187,1,['table'], Cyclic Permutations,seg_277,"how many ways are there to seat four people w,x,y,z around a circular table?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([23750,  2566, 28120, 10708])","tensor([ 101, 2129, 2116, 3971, 2024, 2045, 2000, 2835, 2176, 2111, 1059, 1010,
        1060, 1010, 1061, 1010, 1062, 2105, 1037, 8206, 2795, 1029,  102])"
1188,0,[], Cyclic Permutations,seg_277,example 5.35 circular arrangement,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708])","tensor([ 101, 2742, 1019, 1012, 3486, 8206, 6512,  102])"
1189,1,['table'], Cyclic Permutations,seg_277,"suppose that n boys and n girls are to be seated around a circular table. (i) how many ways can this be done if no two of the same sex are seated next to each other, (ii) there are no restrictions on males and females?, and (iii) three or more pairs of boys cannot be together, but at most two pairs of boys are allowed?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([23750,  2566, 28120, 10708])","tensor([ 101, 6814, 2008, 1050, 3337, 1998, 1050, 3057, 2024, 2000, 2022, 8901,
        2105, 1037, 8206, 2795, 1012, 1006, 1045, 1007, 2129, 2116, 3971, 2064,
        2023, 2022, 2589, 2065, 2053, 2048, 1997, 1996, 2168, 3348, 2024, 8901,
        2279, 2000, 2169, 2060, 1010, 1006, 2462, 1007, 2045, 2024, 2053, 9259,
        2006, 3767, 1998, 3801, 1029, 1010, 1998, 1006, 3523, 1007, 2093, 2030,
        2062, 7689, 1997, 3337, 3685, 2022, 2362, 1010, 2021, 2012, 2087, 2048,
        7689, 1997, 3337, 2024, 3039, 1029,  102])"
1190,1,"['complement', 'permutation', 'case']", Cyclic Permutations,seg_277,"solution 5.35 first fix the n boys around the circle with an empty chair between them. this can be done in (n − 1)! ways, as they can be rearranged among themselves using circular permutation formula given earlier. as there are n empty chairs, the n girls can be circularly arranged in (n − 1)! ways. this gives a total of (n − 1)!2 possible ways. (ii) if there are no restrictions, we need to arrange 2n persons along a circle. this can be done in (2n − 1)! ways. case (iii) is most easily solved using the do-little principle. the complement of the problem is to find the number of ways in which any three males are together. mark the group of three males by m. then, there are n − 3 remaining males (plus one m). they can be arranged among themselves in (n − 3 + 1 − 1)! = (n − 3)!",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23750,  2566, 28120, 10708])","tensor([  101,  5576,  1019,  1012,  3486,  2034,  8081,  1996,  1050,  3337,
         2105,  1996,  4418,  2007,  2019,  4064,  3242,  2090,  2068,  1012,
         2023,  2064,  2022,  2589,  1999,  1006,  1050,  1597,  1015,  1007,
          999,  3971,  1010,  2004,  2027,  2064,  2022,  4373, 24388,  2098,
         2426,  3209,  2478,  8206,  2566, 28120,  3370,  5675,  2445,  3041,
         1012,  2004,  2045,  2024,  1050,  4064,  8397,  1010,  1996,  1050,
         3057,  2064,  2022,  8206,  2135,  5412,  1999,  1006,  1050,  1597,
         1015,  1007,   999,  3971,  1012,  2023,  3957,  1037,  2561,  1997,
         1006,  1050,  1597,  1015,  1007,   999,  1016,  2825,  3971,  1012,
         1006,  2462,  1007,  2065,  2045,  2024,  2053,  9259,  1010,  2057,
         2342,  2000, 13621,  1016,  2078,  5381,  2247,  1037,  4418,  1012,
         2023,  2064,  2022,  2589,  1999,  1006,  1016,  2078,  1597,  1015,
         1007,   999,  3971,  1012,  2553,  1006,  3523,  1007,  2003,  2087,
         4089, 13332,  2478,  1996,  2079,  1011,  2210,  6958,  1012,  1996,
        13711,  1997,  1996,  3291,  2003,  2000,  2424,  1996,  2193,  1997,
         3971,  1999,  2029,  2151,  2093,  3767,  2024,  2362,  1012,  2928,
         1996,  2177,  1997,  2093,  3767,  2011,  1049,  1012,  2059,  1010,
         2045,  2024,  1050,  1597,  1017,  3588,  3767,  1006,  4606,  2028,
         1049,  1007,  1012,  2027,  2064,  2022,  5412,  2426,  3209,  1999,
         1006,  1050,  1597,  1017,  1009,  1015,  1597,  1015,  1007,   999,
         1027,  1006,  1050,  1597,  1017,  1007,   999,   102])"
1191,0,[], Cyclic Permutations,seg_277,ways. as the three males can be fixed in ( 3,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708])","tensor([ 101, 3971, 1012, 2004, 1996, 2093, 3767, 2064, 2022, 4964, 1999, 1006,
        1017,  102])"
1192,0,['n'], Cyclic Permutations,seg_277,"n) ways, the total number of ways is",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708])","tensor([ 101, 1050, 1007, 3971, 1010, 1996, 2561, 2193, 1997, 3971, 2003,  102])"
1193,1,['complement'], Cyclic Permutations,seg_277,n) ∗ (n − 3)! ways. take complement from (n − 1)!2 ways to get the desired,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23750,  2566, 28120, 10708])","tensor([  101,  1050,  1007,  1598,  1006,  1050,  1597,  1017,  1007,   999,
         3971,  1012,  2202, 13711,  2013,  1006,  1050,  1597,  1015,  1007,
          999,  1016,  3971,  2000,  2131,  1996,  9059,   102])"
1194,0,['n'], Cyclic Permutations of Subsets,seg_279,"consider n distinct objects. if r is an integer between 1 and n, there are (r − 1)! ( n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([23750,  2566, 28120, 10708,  1997, 16745,  2015])","tensor([  101,  5136,  1050,  5664,  5200,  1012,  2065,  1054,  2003,  2019,
        16109,  2090,  1015,  1998,  1050,  1010,  2045,  2024,  1006,  1054,
         1597,  1015,  1007,   999,  1006,  1050,   102])"
1195,0,[], Cyclic Permutations of Subsets,seg_279,r) different ways to circularly permute the r objects.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708,  1997, 16745,  2015])","tensor([  101,  1054,  1007,  2367,  3971,  2000,  8206,  2135,  2566, 26746,
         1996,  1054,  5200,  1012,   102])"
1196,0,[], Cyclic Permutations of Subsets,seg_279,example 5.36 train coaches,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708,  1997, 16745,  2015])","tensor([ 101, 2742, 1019, 1012, 4029, 3345, 7850,  102])"
1197,0,[], Cyclic Permutations of Subsets,seg_279,"a train has five ordinary coaches and three ac coaches in addition to the engine. how many ways are there to connect the coaches if (i) the coach immediately behind the engine and the rear-end coach are both ordinary?, (ii) if all ac coaches cannot be together?, (iii) at most three ordinary coaches can be together?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23750,  2566, 28120, 10708,  1997, 16745,  2015])","tensor([ 101, 1037, 3345, 2038, 2274, 6623, 7850, 1998, 2093, 9353, 7850, 1999,
        2804, 2000, 1996, 3194, 1012, 2129, 2116, 3971, 2024, 2045, 2000, 7532,
        1996, 7850, 2065, 1006, 1045, 1007, 1996, 2873, 3202, 2369, 1996, 3194,
        1998, 1996, 4373, 1011, 2203, 2873, 2024, 2119, 6623, 1029, 1010, 1006,
        2462, 1007, 2065, 2035, 9353, 7850, 3685, 2022, 2362, 1029, 1010, 1006,
        3523, 1007, 2012, 2087, 2093, 6623, 7850, 2064, 2022, 2362, 1029,  102])"
1198,1,"['case', 'permutations']", Cyclic Permutations of Subsets,seg_279,"solution 5.36 denote ordinary coach by o and ac coach by c. this problem has restrictions. in case (i), two of the five “o coaches” are fixed. this leaves three o and three c coaches remaining to be connected. using permutations",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0.])","tensor([23750,  2566, 28120, 10708,  1997, 16745,  2015])","tensor([  101,  5576,  1019,  1012,  4029, 19090,  6623,  2873,  2011,  1051,
         1998,  9353,  2873,  2011,  1039,  1012,  2023,  3291,  2038,  9259,
         1012,  1999,  2553,  1006,  1045,  1007,  1010,  2048,  1997,  1996,
         2274,  1523,  1051,  7850,  1524,  2024,  4964,  1012,  2023,  3727,
         2093,  1051,  1998,  2093,  1039,  7850,  3588,  2000,  2022,  4198,
         1012,  2478,  2566, 28120, 10708,   102])"
1199,1,"['complementary event', 'event']", Cyclic Permutations of Subsets,seg_279,"of alike objects, the answer is 6!/(3!*3!)= 20 ways. (ii) fix the five o coaches with an empty space in-between them. there are two extra empty spaces at the beginning and end (extremes behind the engine). this gives a total of six empty spaces where we could place three c coaches together. total number of ways in which five o coaches and three c coaches can be connected together is 8!/(5!*3!)= 56 ways. by subtracting the number of ways in which all the ac coaches are together, we get the answer to part (ii) as 56 − 6 = 50. (iii) the complementary event of “at most three ordinary coaches can be together” is either four coaches are together or all five coaches are together. these are more easier to count. number of ways in which four coaches are together is found as follows: fix the three c coaches with a space in between them (including beginning and end). we can place four o coaches in four ways. the remaining one o coach can be placed in three ways. this gives a total of 4 × 3 = 12 ways. next consider all five coaches together. these can be placed in four different ways. by the ros principle, total number of ways for the complementary event is 12+ 4= 16 ways. hence, the desired number of ways is 8!/(5!*3!)−16= 56−16= 40 ways.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([23750,  2566, 28120, 10708,  1997, 16745,  2015])","tensor([  101,  1997, 11455,  5200,  1010,  1996,  3437,  2003,  1020,   999,
         1013,  1006,  1017,   999,  1008,  1017,   999,  1007,  1027,  2322,
         3971,  1012,  1006,  2462,  1007,  8081,  1996,  2274,  1051,  7850,
         2007,  2019,  4064,  2686,  1999,  1011,  2090,  2068,  1012,  2045,
         2024,  2048,  4469,  4064,  7258,  2012,  1996,  2927,  1998,  2203,
         1006, 28800,  2369,  1996,  3194,  1007,  1012,  2023,  3957,  1037,
         2561,  1997,  2416,  4064,  7258,  2073,  2057,  2071,  2173,  2093,
         1039,  7850,  2362,  1012,  2561,  2193,  1997,  3971,  1999,  2029,
         2274,  1051,  7850,  1998,  2093,  1039,  7850,  2064,  2022,  4198,
         2362,  2003,  1022,   999,  1013,  1006,  1019,   999,  1008,  1017,
          999,  1007,  1027,  5179,  3971,  1012,  2011,  4942,  6494, 11873,
         1996,  2193,  1997,  3971,  1999,  2029,  2035,  1996,  9353,  7850,
         2024,  2362,  1010,  2057,  2131,  1996,  3437,  2000,  2112,  1006,
         2462,  1007,  2004,  5179,  1597,  1020,  1027,  2753,  1012,  1006,
         3523,  1007,  1996, 21053,  2724,  1997,  1523,  2012,  2087,  2093,
         6623,  7850,  2064,  2022,  2362,  1524,  2003,  2593,  2176,  7850,
         2024,  2362,  2030,  2035,  2274,  7850,  2024,  2362,  1012,  2122,
         2024,  2062,  6082,  2000,  4175,  1012,  2193,  1997,  3971,  1999,
         2029,  2176,  7850,  2024,  2362,  2003,  2179,  2004,  4076,  1024,
         8081,  1996,  2093,  1039,  7850,  2007,  1037,  2686,  1999,  2090,
         2068,  1006,  2164,  2927,  1998,  2203,  1007,  1012,  2057,  2064,
         2173,  2176,  1051,  7850,  1999,  2176,  3971,  1012,  1996,  3588,
         2028,  1051,  2873,  2064,  2022,  2872,  1999,  2093,  3971,  1012,
         2023,  3957,  1037,  2561,  1997,  1018,  1095,  1017,  1027,  2260,
         3971,  1012,  2279,  5136,  2035,  2274,  7850,  2362,  1012,  2122,
         2064,  2022,  2872,  1999,  2176,  2367,  3971,  1012,  2011,  1996,
        20996,  2015,  6958,  1010,  2561,  2193,  1997,  3971,  2005,  1996,
        21053,  2724,  2003,  2260,  1009,  1018,  1027,  2385,  3971,  1012,
         6516,  1010,  1996,  9059,  2193,  1997,  3971,  2003,  1022,   999,
         1013,  1006,  1019,   999,  1008,  1017,   999,  1007,  1597, 16048,
         1027,  5179, 27944,  2575,  1027,  2871,  3971,  1012,   102])"
1200,1,"['permutation', 'combinations', 'combination', 'permutations']", Combinations,seg_281,"permutation is an arrangement technique in which the order of elements matters, but order of elements does not matter in combinations. this means that if x and y are two elements, xy and yx are considered the same in combination but not in permutations. the combination of n things taken r at a time was introduced in chapter 1. it is",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([14930]),"tensor([  101,  2566, 28120,  3370,  2003,  2019,  6512,  6028,  1999,  2029,
         1996,  2344,  1997,  3787,  5609,  1010,  2021,  2344,  1997,  3787,
         2515,  2025,  3043,  1999, 14930,  1012,  2023,  2965,  2008,  2065,
         1060,  1998,  1061,  2024,  2048,  3787,  1010,  1060,  2100,  1998,
         1061,  2595,  2024,  2641,  1996,  2168,  1999,  5257,  2021,  2025,
         1999,  2566, 28120, 10708,  1012,  1996,  5257,  1997,  1050,  2477,
         2579,  1054,  2012,  1037,  2051,  2001,  3107,  1999,  3127,  1015,
         1012,  2009,  2003,   102])"
1201,0,['n'], Combinations,seg_281,denoted by ( n,tensor(0),"tensor([0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101, 19537,  2011,  1006,  1050,   102])"
1202,1,"['without replacement', 'replacement', 'combination', 'permutations']", Combinations,seg_281,"this denotes the number of ways in which r objects can be selected from n distinguishable objects without regard to order and without replacement. for a fixed r, there exist r! permutations that give the same combination. hence,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([14930]),"tensor([  101,  2023, 14796,  1996,  2193,  1997,  3971,  1999,  2029,  1054,
         5200,  2064,  2022,  3479,  2013,  1050, 10782,  3085,  5200,  2302,
         7634,  2000,  2344,  1998,  2302,  6110,  1012,  2005,  1037,  4964,
         1054,  1010,  2045,  4839,  1054,   999,  2566, 28120, 10708,  2008,
         2507,  1996,  2168,  5257,  1012,  6516,  1010,   102])"
1203,1,['cases'], Combinations,seg_281,particular cases are ( n,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0.])",tensor([14930]),"tensor([ 101, 3327, 3572, 2024, 1006, 1050,  102])"
1204,0,[], Combinations,seg_281,example 5.37 pilot choices,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([ 101, 2742, 1019, 1012, 4261, 4405, 9804,  102])"
1205,0,[], Combinations,seg_281,"a flight has to be scheduled using a pilot. there are 12 persons in the pool for the pilot among whom 8 are males, 5 of the 8 speak english and spanish, and the rest 3 speak english only. two of the four females speak english and spanish, and the rest of them speak english only. how many ways are there to select a pilot",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([14930]),"tensor([ 101, 1037, 3462, 2038, 2000, 2022, 5115, 2478, 1037, 4405, 1012, 2045,
        2024, 2260, 5381, 1999, 1996, 4770, 2005, 1996, 4405, 2426, 3183, 1022,
        2024, 3767, 1010, 1019, 1997, 1996, 1022, 3713, 2394, 1998, 3009, 1010,
        1998, 1996, 2717, 1017, 3713, 2394, 2069, 1012, 2048, 1997, 1996, 2176,
        3801, 3713, 2394, 1998, 3009, 1010, 1998, 1996, 2717, 1997, 2068, 3713,
        2394, 2069, 1012, 2129, 2116, 3971, 2024, 2045, 2000, 7276, 1037, 4405,
         102])"
1206,0,[], Combinations,seg_281,"and a copilot such that (i) there is one male and one female, both speak spanish? (ii) two males, at least one of whom speak spanish?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  1998,  1037,  8872, 22360,  2102,  2107,  2008,  1006,  1045,
         1007,  2045,  2003,  2028,  3287,  1998,  2028,  2931,  1010,  2119,
         3713,  3009,  1029,  1006,  2462,  1007,  2048,  3767,  1010,  2012,
         2560,  2028,  1997,  3183,  3713,  3009,  1029,   102])"
1207,1,"['events', 'event']", Combinations,seg_281,"solution 5.37 define events a, b as follows:–a: = event that the pilot candidate is male and b: = event that the candidate speaks spanish. we seek the number of possibilities of the event a ∩ b. there are five out of eight males who speak",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([14930]),"tensor([  101,  5576,  1019,  1012,  4261,  9375,  2824,  1037,  1010,  1038,
         2004,  4076,  1024,  1516,  1037,  1024,  1027,  2724,  2008,  1996,
         4405,  4018,  2003,  3287,  1998,  1038,  1024,  1027,  2724,  2008,
         1996,  4018,  8847,  3009,  1012,  2057,  6148,  1996,  2193,  1997,
        12020,  1997,  1996,  2724,  1037,  1604,  1038,  1012,  2045,  2024,
         2274,  2041,  1997,  2809,  3767,  2040,  3713,   102])"
1208,0,[], Combinations,seg_281,spanish and english. the number of ways to choose a bilingual male is ( 1,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  3009,  1998,  2394,  1012,  1996,  2193,  1997,  3971,  2000,
         5454,  1037, 17636,  3287,  2003,  1006,  1015,   102])"
1209,1,"['cases', 'product rule']", Combinations,seg_281,"similarly, number of ways to choose a bilingual female is 2. by the product rule, total number of ways is 5*2 = 10. (ii) as there are five males who speak spanish, we consider the two cases: (i) both chosen persons speak spanish. (ii) only one",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([  101,  6660,  1010,  2193,  1997,  3971,  2000,  5454,  1037, 17636,
         2931,  2003,  1016,  1012,  2011,  1996,  4031,  3627,  1010,  2561,
         2193,  1997,  3971,  2003,  1019,  1008,  1016,  1027,  2184,  1012,
         1006,  2462,  1007,  2004,  2045,  2024,  2274,  3767,  2040,  3713,
         3009,  1010,  2057,  5136,  1996,  2048,  3572,  1024,  1006,  1045,
         1007,  2119,  4217,  5381,  3713,  3009,  1012,  1006,  2462,  1007,
         2069,  2028,   102])"
1210,1,['cases'], Combinations,seg_281,of them speak spanish. the favorable cases for (i) is ( 2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([  101,  1997,  2068,  3713,  3009,  1012,  1996, 11119,  3572,  2005,
         1006,  1045,  1007,  2003,  1006,  1016,   102])"
1211,1,['cases'], Combinations,seg_281,"3) = 5 ∗ 3 = 15. by the ros principle, the total favorable cases are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([14930]),"tensor([  101,  1017,  1007,  1027,  1019,  1598,  1017,  1027,  2321,  1012,
         2011,  1996, 20996,  2015,  6958,  1010,  1996,  2561, 11119,  3572,
         2024,   102])"
1212,0,[], Combinations,seg_281,find the number of ways of obtaining a hand of cards in a poker game.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  2424,  1996,  2193,  1997,  3971,  1997, 11381,  1037,  2192,
         1997,  5329,  1999,  1037, 11662,  2208,  1012,   102])"
1213,1,['combination'], Combinations,seg_281,solution 5.38 this problem is easy to solve using combination law. as a hand,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])",tensor([14930]),"tensor([ 101, 5576, 1019, 1012, 4229, 2023, 3291, 2003, 3733, 2000, 9611, 2478,
        5257, 2375, 1012, 2004, 1037, 2192,  102])"
1214,0,[], Combinations,seg_281,"contains five cards in a poker game, the number of ways is ( 5 5",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  3397,  2274,  5329,  1999,  1037, 11662,  2208,  1010,  1996,
         2193,  1997,  3971,  2003,  1006,  1019,  1019,   102])"
1215,1,['plot'], Combinations,seg_281,example 5.39 irrigation plot,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0.])",tensor([14930]),"tensor([  101,  2742,  1019,  1012,  4464, 12442,  5436,   102])"
1216,1,"['sample', 'random', 'plot']", Combinations,seg_281,"an irrigation plot is divided into 6 × 6 blocks of equal size (with 36 subplots). a sample of four subplots is to be selected at random. what is the number of ways in which the four subplots will (i) lie along any row or column, (ii) lie along the main diagonal or parallel to the main diagonal (from top left to bottom right), (iii) they stick together as a 2 × 2 subplot anywhere, and (iv) if nine subplots are selected, find the number of ways they stick together as 3 × 3 subplots.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([14930]),"tensor([  101,  2019, 12442,  5436,  2003,  4055,  2046,  1020,  1095,  1020,
         5991,  1997,  5020,  2946,  1006,  2007,  4029,  4942, 24759, 12868,
         1007,  1012,  1037,  7099,  1997,  2176,  4942, 24759, 12868,  2003,
         2000,  2022,  3479,  2012,  6721,  1012,  2054,  2003,  1996,  2193,
         1997,  3971,  1999,  2029,  1996,  2176,  4942, 24759, 12868,  2097,
         1006,  1045,  1007,  4682,  2247,  2151,  5216,  2030,  5930,  1010,
         1006,  2462,  1007,  4682,  2247,  1996,  2364, 19754,  2030,  5903,
         2000,  1996,  2364, 19754,  1006,  2013,  2327,  2187,  2000,  3953,
         2157,  1007,  1010,  1006,  3523,  1007,  2027,  6293,  2362,  2004,
         1037,  1016,  1095,  1016,  4942, 24759,  4140,  5973,  1010,  1998,
         1006,  4921,  1007,  2065,  3157,  4942, 24759, 12868,  2024,  3479,
         1010,  2424,  1996,  2193,  1997,  3971,  2027,  6293,  2362,  2004,
         1017,  1095,  1017,  4942, 24759, 12868,  1012,   102])"
1217,1,['plots'], Combinations,seg_281,solution 5.39 total number of ways to select four subplots from 36 plots is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([14930]),"tensor([  101,  5576,  1019,  1012,  4464,  2561,  2193,  1997,  3971,  2000,
         7276,  2176,  4942, 24759, 12868,  2013,  4029, 14811,  2003,   102])"
1218,1,['case'], Combinations,seg_281,"6). in case (i), there are two possibilities to consider (1) they lie along the rows",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([  101,  1020,  1007,  1012,  1999,  2553,  1006,  1045,  1007,  1010,
         2045,  2024,  2048, 12020,  2000,  5136,  1006,  1015,  1007,  2027,
         4682,  2247,  1996, 10281,   102])"
1219,1,['case'], Combinations,seg_281,"and (2) they lie along the columns. in the first case, there are ( 4",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])",tensor([14930]),"tensor([ 101, 1998, 1006, 1016, 1007, 2027, 4682, 2247, 1996, 7753, 1012, 1999,
        1996, 2034, 2553, 1010, 2045, 2024, 1006, 1018,  102])"
1220,1,"['symmetry', 'case']", Combinations,seg_281,"all four to lie along any fixed row. as there are six rows, the total number of ways is 6 × 15 = 90 ways. owing to symmetry, there are 90 ways for the columns too. this gives 180 total possibilities. in case (ii), the main diagonal (with six slots), its immediate above and below diagonals with five slots and those at distance 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([  101,  2035,  2176,  2000,  4682,  2247,  2151,  4964,  5216,  1012,
         2004,  2045,  2024,  2416, 10281,  1010,  1996,  2561,  2193,  1997,
         3971,  2003,  1020,  1095,  2321,  1027,  3938,  3971,  1012, 11427,
         2000, 14991,  1010,  2045,  2024,  3938,  3971,  2005,  1996,  7753,
         2205,  1012,  2023,  3957,  8380,  2561, 12020,  1012,  1999,  2553,
         1006,  2462,  1007,  1010,  1996,  2364, 19754,  1006,  2007,  2416,
        19832,  1007,  1010,  2049,  6234,  2682,  1998,  2917, 19754,  2015,
         2007,  2274, 19832,  1998,  2216,  2012,  3292,  1016,   102])"
1221,0,[], Combinations,seg_281,from it (with four slots) are the only favorable positions. there exist ( 4,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  2013,  2009,  1006,  2007,  2176, 19832,  1007,  2024,  1996,
         2069, 11119,  4460,  1012,  2045,  4839,  1006,  1018,   102])"
1222,0,[], Combinations,seg_281,"ways for the main diagonal, ( 4",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  3971,  2005,  1996,  2364, 19754,  1010,  1006,  1018,   102])"
1223,0,[], Combinations,seg_281,5) = 5 ways for its immediate above and below,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([ 101, 1019, 1007, 1027, 1019, 3971, 2005, 2049, 6234, 2682, 1998, 2917,
         102])"
1224,0,[], Combinations,seg_281,"diagonals, and ( 4",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101, 19754,  2015,  1010,  1998,  1006,  1018,   102])"
1225,0,[], Combinations,seg_281,4) = 1 way each for distance 2 diagonals. by the ros princi-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  1018,  1007,  1027,  1015,  2126,  2169,  2005,  3292,  1016,
        19754,  2015,  1012,  2011,  1996, 20996,  2015, 26927, 12273,  2072,
         1011,   102])"
1226,1,['case'], Combinations,seg_281,"ple, total number of ways is 15 + 2*5 + 2*1 = 27 ways. for case (iii), we fix the 2 × 2 subplot as a square and use cell (2,2) (second column in second row) as an “anchor” for alignment. this anchor can be aligned in a 5 × 5 subplots giving 25 possible ways. similarly for case (iv), consider cell (3,3) as the anchor. this can be anchored along a 4 × 4 matrix of subplots giving a total of 16 possible ways.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([  101, 20228,  2063,  1010,  2561,  2193,  1997,  3971,  2003,  2321,
         1009,  1016,  1008,  1019,  1009,  1016,  1008,  1015,  1027,  2676,
         3971,  1012,  2005,  2553,  1006,  3523,  1007,  1010,  2057,  8081,
         1996,  1016,  1095,  1016,  4942, 24759,  4140,  2004,  1037,  2675,
         1998,  2224,  3526,  1006,  1016,  1010,  1016,  1007,  1006,  2117,
         5930,  1999,  2117,  5216,  1007,  2004,  2019,  1523,  8133,  1524,
         2005, 12139,  1012,  2023,  8133,  2064,  2022, 13115,  1999,  1037,
         1019,  1095,  1019,  4942, 24759, 12868,  3228,  2423,  2825,  3971,
         1012,  6660,  2005,  2553,  1006,  4921,  1007,  1010,  5136,  3526,
         1006,  1017,  1010,  1017,  1007,  2004,  1996,  8133,  1012,  2023,
         2064,  2022, 14453,  2247,  1037,  1018,  1095,  1018,  8185,  1997,
         4942, 24759, 12868,  3228,  1037,  2561,  1997,  2385,  2825,  3971,
         1012,   102])"
1227,0,[], Combinations,seg_281,example 5.40 plant operators,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([ 101, 2742, 1019, 1012, 2871, 3269, 9224,  102])"
1228,0,[], Combinations,seg_281,"a small production plant needs eight operators, two shipping and handling persons, two clerks, and one supervisor for a day. if there are 10 operators, four shipping and handling persons, three clerks, and two supervisors available for work, how many ways are there to staff the plant?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  1037,  2235,  2537,  3269,  3791,  2809,  9224,  1010,  2048,
         7829,  1998,  8304,  5381,  1010,  2048, 26706,  1010,  1998,  2028,
        12366,  2005,  1037,  2154,  1012,  2065,  2045,  2024,  2184,  9224,
         1010,  2176,  7829,  1998,  8304,  5381,  1010,  2093, 26706,  1010,
         1998,  2048, 22565,  2800,  2005,  2147,  1010,  2129,  2116,  3971,
         2024,  2045,  2000,  3095,  1996,  3269,  1029,   102])"
1229,1,['disjoint'], Combinations,seg_281,"solution 5.40 as each of the jobs are disjoint, we could apply the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0.])",tensor([14930]),"tensor([  101,  5576,  1019,  1012,  2871,  2004,  2169,  1997,  1996,  5841,
         2024,  4487,  2015,  5558, 18447,  1010,  2057,  2071,  6611,  1996,
          102])"
1230,0,[], Combinations,seg_281,above-mentioned principle and get the answer as ( 1 8,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([ 101, 2682, 1011, 3855, 6958, 1998, 2131, 1996, 3437, 2004, 1006, 1015,
        1022,  102])"
1231,0,[], Combinations,seg_281,example 5.41 chess players,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([ 101, 2742, 1019, 1012, 4601, 7433, 2867,  102])"
1232,0,[], Combinations,seg_281,"a college has 10 chess players of which 6 are males and 4 are females. two students are to be sent for an inter-collegiate festival. how many ways are there to send a team of 2 if: – (i) the gender is not considered, (ii) exactly one is a male, (iii) at least one must be female, and (iv) both are females?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([ 101, 1037, 2267, 2038, 2184, 7433, 2867, 1997, 2029, 1020, 2024, 3767,
        1998, 1018, 2024, 3801, 1012, 2048, 2493, 2024, 2000, 2022, 2741, 2005,
        2019, 6970, 1011, 9234, 2782, 1012, 2129, 2116, 3971, 2024, 2045, 2000,
        4604, 1037, 2136, 1997, 1016, 2065, 1024, 1516, 1006, 1045, 1007, 1996,
        5907, 2003, 2025, 2641, 1010, 1006, 2462, 1007, 3599, 2028, 2003, 1037,
        3287, 1010, 1006, 3523, 1007, 2012, 2560, 2028, 2442, 2022, 2931, 1010,
        1998, 1006, 4921, 1007, 2119, 2024, 3801, 1029,  102])"
1233,1,['case'], Combinations,seg_281,"solution 5.41 for case (i), the total number of possibilities is ( 1 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([14930]),"tensor([  101,  5576,  1019,  1012,  4601,  2005,  2553,  1006,  1045,  1007,
         1010,  1996,  2561,  2193,  1997, 12020,  2003,  1006,  1015,  1016,
          102])"
1234,1,"['cases', 'case']", Combinations,seg_281,"9∕2 = 45. in case (ii), the total favorable cases is ( 1 6) ∗ ( 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([  101,   100,  1027,  3429,  1012,  1999,  2553,  1006,  2462,  1007,
         1010,  1996,  2561, 11119,  3572,  2003,  1006,  1015,  1020,  1007,
         1598,  1006,  1015,   102])"
1235,1,['case'], Combinations,seg_281,"4) = 24. in case (iii),",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([ 101, 1018, 1007, 1027, 2484, 1012, 1999, 2553, 1006, 3523, 1007, 1010,
         102])"
1236,0,[], Combinations,seg_281,there are two possibilities {fm and ff}. the possible ways for fm is found,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  2045,  2024,  2048, 12020,  1063,  4718,  1998, 21461,  1065,
         1012,  1996,  2825,  3971,  2005,  4718,  2003,  2179,   102])"
1237,0,[], Combinations,seg_281,above as 24. possible ways for ff is ( 2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([  101,  2682,  2004,  2484,  1012,  2825,  3971,  2005, 21461,  2003,
         1006,  1016,   102])"
1238,0,[], Combinations,seg_281,4) = 6. adding these two gives the,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([14930]),"tensor([ 101, 1018, 1007, 1027, 1020, 1012, 5815, 2122, 2048, 3957, 1996,  102])"
1239,1,['case'], Combinations,seg_281,"answer as 24 + 6 = 30. in case (iv), answer to this is found above as ( 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([14930]),"tensor([ 101, 3437, 2004, 2484, 1009, 1020, 1027, 2382, 1012, 1999, 2553, 1006,
        4921, 1007, 1010, 3437, 2000, 2023, 2003, 2179, 2682, 2004, 1006, 1016,
         102])"
1240,1,"['sets', 'probability', 'events', 'probabilities', 'level']", PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,this is one of the most widely used principles when events or sets interact (have subsets or subevents in common). it has two interpretations:– in terms of counts and in terms of probabilities. both are analogous at the conceptual level. we discuss the count version below. the extension to probability is given in a later section. the count version provides an answer to the query “how many elements or objects are there in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  2023,  2003,  2028,  1997,  1996,  2087,  4235,  2109,  6481,
         2043,  2824,  2030,  4520, 11835,  1006,  2031, 16745,  2015,  2030,
         4942, 18697,  7666,  1999,  2691,  1007,  1012,  2009,  2038,  2048,
        15931,  1024,  1516,  1999,  3408,  1997,  9294,  1998,  1999,  3408,
         1997,  4013,  3676, 14680,  1012,  2119,  2024, 19639,  2012,  1996,
        17158,  2504,  1012,  2057,  6848,  1996,  4175,  2544,  2917,  1012,
         1996,  5331,  2000,  9723,  2003,  2445,  1999,  1037,  2101,  2930,
         1012,  1996,  4175,  2544,  3640,  2019,  3437,  2000,  1996, 23032,
         1523,  2129,  2116,  3787,  2030,  5200,  2024,  2045,  1999,   102])"
1241,1,"['sets', 'union']", PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,"the union of a finite number of sets, some of which have elements or properties in common?.”",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  1996,  2586,  1997,  1037, 10713,  2193,  1997,  4520,  1010,
         2070,  1997,  2029,  2031,  3787,  2030,  5144,  1999,  2691,  1029,
         1012,  1524,   102])"
1242,1,['sets'], PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,"theorem 5.2 if a1, a2, … , an are finite sets, some of which have common elements, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  9872,  1019,  1012,  1016,  2065, 17350,  1010, 22441,  1010,
         1529,  1010,  2019,  2024, 10713,  4520,  1010,  2070,  1997,  2029,
         2031,  2691,  3787,  1010,  2059,   102])"
1243,1,"['cardinalities', 'sets', 'summation']", PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,"where vertical bars denote the cardinalities (number of elements) of respective sets, and i   j, and so on, on the summation sign denotes that the sum is carried out only for those values of indices satisfying respective conditions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  2073,  7471,  6963, 19090,  1996,  7185,  6447,  1006,  2193,
         1997,  3787,  1007,  1997,  7972,  4520,  1010,  1998,  1045,  1046,
         1010,  1998,  2061,  2006,  1010,  2006,  1996,  7680, 28649,  3696,
        14796,  2008,  1996,  7680,  2003,  3344,  2041,  2069,  2005,  2216,
         5300,  1997, 29299, 17087,  7972,  3785,  1012,   102])"
1244,1,"['results', 'sets', 'case']", PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,"proof: consider the special case with just two sets say x and y. the above-mentioned theorem takes the form |x ∪ y| = |x| + |y| − |x ∩ y|. if x and y do not overlap, then x ∩ y =   so that |x ∩ y| = 0, and the results follow. if x = y , then x ∩ y = x = y , so that the negative term cancels out with one of the x or y giving the result. next, suppose that x and y overlap (with c common elements where c ≥ 1) and x ≠ y . in counting |x| + |y|, the c common elements are counted twice. hence, we need to subtract one of the c counts to get the number of elements in x ∪ y . this gives |x ∪ y| = |x| + |y| − |x ∩ y|. assume that the theorem is true for an arbitrary m. consider",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  6947,  1024,  5136,  1996,  2569,  2553,  2007,  2074,  2048,
         4520,  2360,  1060,  1998,  1061,  1012,  1996,  2682,  1011,  3855,
         9872,  3138,  1996,  2433,  1064,  1060,  1605,  1061,  1064,  1027,
         1064,  1060,  1064,  1009,  1064,  1061,  1064,  1597,  1064,  1060,
         1604,  1061,  1064,  1012,  2065,  1060,  1998,  1061,  2079,  2025,
        17702,  1010,  2059,  1060,  1604,  1061,  1027,  2061,  2008,  1064,
         1060,  1604,  1061,  1064,  1027,  1014,  1010,  1998,  1996,  3463,
         3582,  1012,  2065,  1060,  1027,  1061,  1010,  2059,  1060,  1604,
         1061,  1027,  1060,  1027,  1061,  1010,  2061,  2008,  1996,  4997,
         2744, 17542,  2015,  2041,  2007,  2028,  1997,  1996,  1060,  2030,
         1061,  3228,  1996,  2765,  1012,  2279,  1010,  6814,  2008,  1060,
         1998,  1061, 17702,  1006,  2007,  1039,  2691,  3787,  2073,  1039,
         1609,  1015,  1007,  1998,  1060,  1027,  1061,  1012,  1999, 10320,
         1064,  1060,  1064,  1009,  1064,  1061,  1064,  1010,  1996,  1039,
         2691,  3787,  2024,  8897,  3807,  1012,  6516,  1010,  2057,  2342,
         2000,  4942,  6494,  6593,  2028,  1997,  1996,  1039,  9294,  2000,
         2131,  1996,  2193,  1997,  3787,  1999,  1060,  1605,  1061,  1012,
         2023,  3957,  1064,  1060,  1605,  1061,  1064,  1027,  1064,  1060,
         1064,  1009,  1064,  1061,  1064,  1597,  1064,  1060,  1604,  1061,
         1064,  1012,  7868,  2008,  1996,  9872,  2003,  2995,  2005,  2019,
        15275,  1049,  1012,  5136,   102])"
1245,1,"['case', 'union', 'intersection']", PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,write a = a1 ∪ a2 ∪ · · ·ai ∪ · · ·am. then (5.9) becomes |a ∪ am+1|. expand it using the special case to obtain |a ∪ am+1| = |a| + |am+1| − |a ∩ am+1|. substitute for a = a1 ∪ a2 ∪ · · ·ai ∪ · · ·am and use the fact that intersection distributes over union operator to get the rhs as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  4339,  1037,  1027, 17350,  1605, 22441,  1605,  1087,  1087,
         1087,  9932,  1605,  1087,  1087,  1087,  2572,  1012,  2059,  1006,
         1019,  1012,  1023,  1007,  4150,  1064,  1037,  1605,  2572,  1009,
         1015,  1064,  1012,  7818,  2009,  2478,  1996,  2569,  2553,  2000,
         6855,  1064,  1037,  1605,  2572,  1009,  1015,  1064,  1027,  1064,
         1037,  1064,  1009,  1064,  2572,  1009,  1015,  1064,  1597,  1064,
         1037,  1604,  2572,  1009,  1015,  1064,  1012,  7681,  2005,  1037,
         1027, 17350,  1605, 22441,  1605,  1087,  1087,  1087,  9932,  1605,
         1087,  1087,  1087,  2572,  1998,  2224,  1996,  2755,  2008,  6840,
        16062,  2015,  2058,  2586,  6872,  2000,  2131,  1996,  1054,  7898,
         2004,   102])"
1246,1,['sets'], PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,"corollary 1 if a1,a2, … an are finite sets, some of which have common elements, then |a1 ∩ a2 ∩ · · ·ai ∩ · · ·an| = | u| −∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  2522, 28402,  5649,  1015,  2065, 17350,  1010, 22441,  1010,
         1529,  2019,  2024, 10713,  4520,  1010,  2070,  1997,  2029,  2031,
         2691,  3787,  1010,  2059,  1064, 17350,  1604, 22441,  1604,  1087,
         1087,  1087,  9932,  1604,  1087,  1087,  1087,  2019,  1064,  1027,
         1064,  1057,  1064,   100,   102])"
1247,0,[], PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,example 5.42 divisible integers,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  2742,  1019,  1012,  4413,  4487, 11365,  7028, 24028,   102])"
1248,0,[], PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,"how many integers between 1 and 100 are divisible by 3, 5 or 7?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  2129,  2116, 24028,  2090,  1015,  1998,  2531,  2024,  4487,
        11365,  7028,  2011,  1017,  1010,  1019,  2030,  1021,  1029,   102])"
1249,1,"['table', 'set', 'events', 'results']", PRINCIPLE OF INCLUSION AND EXCLUSION PIE,seg_283,"solution 5.42 let s denote the set of 100 integers s = {1, 2, 3, … , 100}. define three events as follows:– (i) e1 = count of all integers in s that are divisible by 3, (ii) e2 = count of all integers in s that are divisible by 5, and (iii) e3 = count of all integers in s that are divisible by 7. then, e1 ∩ e2 is the count of all integers in s that are divisible by both 3 and 5, and so on. using the pie principle e1 ∪ e2 ∪ e3 is the set of integers divisible by 3, 5, or 7. the results needed to compute this are given in table 5.5. using (5.11),",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6958,  1997, 10502,  1998, 15945, 11345])","tensor([  101,  5576,  1019,  1012,  4413,  2292,  1055, 19090,  1996,  2275,
         1997,  2531, 24028,  1055,  1027,  1063,  1015,  1010,  1016,  1010,
         1017,  1010,  1529,  1010,  2531,  1065,  1012,  9375,  2093,  2824,
         2004,  4076,  1024,  1516,  1006,  1045,  1007,  1041,  2487,  1027,
         4175,  1997,  2035, 24028,  1999,  1055,  2008,  2024,  4487, 11365,
         7028,  2011,  1017,  1010,  1006,  2462,  1007,  1041,  2475,  1027,
         4175,  1997,  2035, 24028,  1999,  1055,  2008,  2024,  4487, 11365,
         7028,  2011,  1019,  1010,  1998,  1006,  3523,  1007,  1041,  2509,
         1027,  4175,  1997,  2035, 24028,  1999,  1055,  2008,  2024,  4487,
        11365,  7028,  2011,  1021,  1012,  2059,  1010,  1041,  2487,  1604,
         1041,  2475,  2003,  1996,  4175,  1997,  2035, 24028,  1999,  1055,
         2008,  2024,  4487, 11365,  7028,  2011,  2119,  1017,  1998,  1019,
         1010,  1998,  2061,  2006,  1012,  2478,  1996, 11345,  6958,  1041,
         2487,  1605,  1041,  2475,  1605,  1041,  2509,  2003,  1996,  2275,
         1997, 24028,  4487, 11365,  7028,  2011,  1017,  1010,  1019,  1010,
         2030,  1021,  1012,  1996,  3463,  2734,  2000, 24134,  2023,  2024,
         2445,  1999,  2795,  1019,  1012,  1019,  1012,  2478,  1006,  1019,
         1012,  2340,  1007,  1010,   102])"
1250,1,"['recurrence relations', 'recurrence', 'discrete', 'probabilities', 'distributions', 'recurrence relation', 'discrete distributions', 'parameters', 'case']", RECURRENCE RELATIONS,seg_285,"a recurrence relation is a recursive relationship that relates the nth term of a sequence or task in terms of lower order terms. if the nth term is related to the (n − 1)th term, it is called first-order recurrence. most of the recurrence relations encountered in this book are first order recurrences. if the nth term is related to two prior terms, it is called second-order recurrence. a special case is the recurrence relation connecting successive probabilities of discrete distributions. these are formed by reducing one of the integer parameters. these are explained in subsequent sections.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0.,
        0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  4262])","tensor([  101,  1037, 28667,  3126, 24413,  7189,  2003,  1037, 28667,  9236,
         3512,  3276,  2008, 14623,  1996, 23961,  2232,  2744,  1997,  1037,
         5537,  2030,  4708,  1999,  3408,  1997,  2896,  2344,  3408,  1012,
         2065,  1996, 23961,  2232,  2744,  2003,  3141,  2000,  1996,  1006,
         1050,  1597,  1015,  1007, 16215,  2744,  1010,  2009,  2003,  2170,
         2034,  1011,  2344, 28667,  3126, 24413,  1012,  2087,  1997,  1996,
        28667,  3126, 24413,  4262,  8567,  1999,  2023,  2338,  2024,  2034,
         2344, 28667,  3126, 24413,  2015,  1012,  2065,  1996, 23961,  2232,
         2744,  2003,  3141,  2000,  2048,  3188,  3408,  1010,  2009,  2003,
         2170,  2117,  1011,  2344, 28667,  3126, 24413,  1012,  1037,  2569,
         2553,  2003,  1996, 28667,  3126, 24413,  7189,  7176, 11165,  4013,
         3676, 14680,  1997, 16246, 20611,  1012,  2122,  2024,  2719,  2011,
         8161,  2028,  1997,  1996, 16109, 11709,  1012,  2122,  2024,  4541,
         1999,  4745,  5433,  1012,   102])"
1251,1,"['sets', 'table']", Derangements and Matching Problems,seg_287,"matching problems comprise two sets of objects (such as husband and wife, person and hat, person and overcoat, and letter and envelope) that have a one-to-one correspondence among themselves. these types of problems seem to have fascinated mathematicians for centuries. the first “person and hat” problem was documented by de montfort in reference 111. they arise in many situations. for example, consider 13 cards numbered 1–13 without duplicates that are kept face down on a table.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  9844,  3471, 15821,  2048,  4520,  1997,  5200,  1006,  2107,
         2004,  3129,  1998,  2564,  1010,  2711,  1998,  6045,  1010,  2711,
         1998,  2058, 16531,  1010,  1998,  3661,  1998, 11255,  1007,  2008,
         2031,  1037,  2028,  1011,  2000,  1011,  2028, 11061,  2426,  3209,
         1012,  2122,  4127,  1997,  3471,  4025,  2000,  2031, 15677, 29374,
         2005,  4693,  1012,  1996,  2034,  1523,  2711,  1998,  6045,  1524,
         3291,  2001,  8832,  2011,  2139, 18318, 13028,  1999,  4431, 11118,
         1012,  2027, 13368,  1999,  2116,  8146,  1012,  2005,  2742,  1010,
         5136,  2410,  5329,  8597,  1015,  1516,  2410,  2302, 24473,  2015,
         2008,  2024,  2921,  2227,  2091,  2006,  1037,  2795,  1012,   102])"
1252,1,"['probability', 'bipartite graph']", Derangements and Matching Problems,seg_287,"a person utters a number between 1 and 13 and then picks up a card and notes the number. this is repeated 13 times, such that each time a different number is uttered. obviously, after 12 tries, the last number can easily be guessed. in how many ways, can the person get k(  13) correct matches? as another example, suppose that there are n books kept on a book rack in some specific order (say in alphabetical order of first author name, increasing order of accession numbers, or using call numbers). during the “library-hour,” kids take out all the books and return it arbitrarily back to the rack. what is the chance that exactly k of the books are returned back to their original position? what is the probability that none of the books are in their proper position? these problems can easily be modeled by the bipartite graph described in p. 126. in such a mapping, the first pair of the n objects are represented as n nodes on the left (say s), and the second pair is represented by n nodes on the right (say t). each node in s can be connected to at most 1 node in t. an undirected arc from node i in s to node j in t denotes a new order or assignment. a perfect match (original order is maintained) is indicated by a forest in which each node in s is connected to the matching node in t. these are easy to solve when n is small. in the following discussion, it is assumed that n is fairly large. a few of the situations where such problems arise are listed in the following:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  1037,  2711, 14395,  2015,  1037,  2193,  2090,  1015,  1998,
         2410,  1998,  2059, 11214,  2039,  1037,  4003,  1998,  3964,  1996,
         2193,  1012,  2023,  2003,  5567,  2410,  2335,  1010,  2107,  2008,
         2169,  2051,  1037,  2367,  2193,  2003, 20947,  1012,  5525,  1010,
         2044,  2260,  5363,  1010,  1996,  2197,  2193,  2064,  4089,  2022,
        11445,  1012,  1999,  2129,  2116,  3971,  1010,  2064,  1996,  2711,
         2131,  1047,  1006,  2410,  1007,  6149,  3503,  1029,  2004,  2178,
         2742,  1010,  6814,  2008,  2045,  2024,  1050,  2808,  2921,  2006,
         1037,  2338, 14513,  1999,  2070,  3563,  2344,  1006,  2360,  1999,
        12440,  7476,  2344,  1997,  2034,  3166,  2171,  1010,  4852,  2344,
         1997, 16993,  3616,  1010,  2030,  2478,  2655,  3616,  1007,  1012,
         2076,  1996,  1523,  3075,  1011,  3178,  1010,  1524,  4268,  2202,
         2041,  2035,  1996,  2808,  1998,  2709,  2009, 12098, 16313, 19848,
         6588,  2067,  2000,  1996, 14513,  1012,  2054,  2003,  1996,  3382,
         2008,  3599,  1047,  1997,  1996,  2808,  2024,  2513,  2067,  2000,
         2037,  2434,  2597,  1029,  2054,  2003,  1996,  9723,  2008,  3904,
         1997,  1996,  2808,  2024,  1999,  2037,  5372,  2597,  1029,  2122,
         3471,  2064,  4089,  2022, 14440,  2011,  1996, 12170, 19362, 23096,
        10629,  2649,  1999,  1052,  1012, 14010,  1012,  1999,  2107,  1037,
        12375,  1010,  1996,  2034,  3940,  1997,  1996,  1050,  5200,  2024,
         3421,  2004,  1050, 14164,  2006,  1996,  2187,  1006,  2360,  1055,
         1007,  1010,  1998,  1996,  2117,  3940,  2003,  3421,  2011,  1050,
        14164,  2006,  1996,  2157,  1006,  2360,  1056,  1007,  1012,  2169,
        13045,  1999,  1055,  2064,  2022,  4198,  2000,  2012,  2087,  1015,
        13045,  1999,  1056,  1012,  2019,  6151,  7442, 10985,  8115,  2013,
        13045,  1045,  1999,  1055,  2000, 13045,  1046,  1999,  1056, 14796,
         1037,  2047,  2344,  2030,  8775,  1012,  1037,  3819,  2674,  1006,
         2434,  2344,  2003,  5224,  1007,  2003,  5393,  2011,  1037,  3224,
         1999,  2029,  2169, 13045,  1999,  1055,  2003,  4198,  2000,  1996,
         9844, 13045,  1999,  1056,  1012,  2122,  2024,  3733,  2000,  9611,
         2043,  1050,  2003,  2235,  1012,  1999,  1996,  2206,  6594,  1010,
         2009,  2003,  5071,  2008,  1050,  2003,  7199,  2312,  1012,  1037,
         2261,  1997,  1996,  8146,  2073,  2107,  3471, 13368,  2024,  3205,
         1999,  1996,  2206,  1024,   102])"
1253,1,['paired'], Derangements and Matching Problems,seg_287,assume that the men and women are randomly paired for a dance. a complete match occurs if each couple happens to be paired together.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  7868,  2008,  1996,  2273,  1998,  2308,  2024, 18154, 12739,
         2005,  1037,  3153,  1012,  1037,  3143,  2674,  5158,  2065,  2169,
         3232,  6433,  2000,  2022, 12739,  2362,  1012,   102])"
1254,0,['n'], Derangements and Matching Problems,seg_287,2. suppose that n letters are to be sent to n different people in n envelopes. the,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  1016,  1012,  6814,  2008,  1050,  4144,  2024,  2000,  2022,
         2741,  2000,  1050,  2367,  2111,  1999,  1050, 11255,  2015,  1012,
         1996,   102])"
1255,0,[], Derangements and Matching Problems,seg_287,"addresses are already printed on the envelope, and the letters are shuffled. an absent-minded clerk randomly puts the letters, one each, into the n envelopes. a complete match occurs if each letter is put in its correct envelope.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101, 11596,  2024,  2525,  6267,  2006,  1996, 11255,  1010,  1998,
         1996,  4144,  2024, 18764,  1012,  2019,  9962,  1011, 13128,  7805,
        18154,  8509,  1996,  4144,  1010,  2028,  2169,  1010,  2046,  1996,
         1050, 11255,  2015,  1012,  1037,  3143,  2674,  5158,  2065,  2169,
         3661,  2003,  2404,  1999,  2049,  6149, 11255,  1012,   102])"
1256,0,['n'], Derangements and Matching Problems,seg_287,3. suppose n people with overcoats go for a party. they give the coat to the waiter,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  1017,  1012,  6814,  1050,  2111,  2007,  2058, 16531,  2015,
         2175,  2005,  1037,  2283,  1012,  2027,  2507,  1996,  5435,  2000,
         1996, 15610,   102])"
1257,0,[], Derangements and Matching Problems,seg_287,"for safe keeping. while leaving the party, the waiter randomly grabs a coat and gives it to the people. a complete match occurs if each person gets his or her own coat.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  2005,  3647,  4363,  1012,  2096,  2975,  1996,  2283,  1010,
         1996, 15610, 18154, 13273,  1037,  5435,  1998,  3957,  2009,  2000,
         1996,  2111,  1012,  1037,  3143,  2674,  5158,  2065,  2169,  2711,
         4152,  2010,  2030,  2014,  2219,  5435,  1012,   102])"
1258,0,['n'], Derangements and Matching Problems,seg_287,4. a defective electronic device has n exactly looking parts. a repair person,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  1018,  1012,  1037, 28829,  4816,  5080,  2038,  1050,  3599,
         2559,  3033,  1012,  1037,  7192,  2711,   102])"
1259,1,['tests'], Derangements and Matching Problems,seg_287,"removes each of them without labeling them, tests it individually, and returns them back to the original positions arbitrarily. a complete match occurs if each part ends up in its correct slot.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101, 20362,  2169,  1997,  2068,  2302, 28847,  2068,  1010,  5852,
         2009, 14258,  1010,  1998,  5651,  2068,  2067,  2000,  1996,  2434,
         4460, 12098, 16313, 19848,  6588,  1012,  1037,  3143,  2674,  5158,
         2065,  2169,  2112,  4515,  2039,  1999,  2049,  6149, 10453,  1012,
          102])"
1260,1,['derangement'], Derangements and Matching Problems,seg_287,"each of these problems is mathematically equivalent. if none of them match, it is called a derangement. they can be modeled by different techniques such as recurrence relations and using inclusion–exclusion principle.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  2169,  1997,  2122,  3471,  2003,  8045,  2135,  5662,  1012,
         2065,  3904,  1997,  2068,  2674,  1010,  2009,  2003,  2170,  1037,
         4315, 22043,  3672,  1012,  2027,  2064,  2022, 14440,  2011,  2367,
         5461,  2107,  2004, 28667,  3126, 24413,  4262,  1998,  2478, 10502,
         1516, 15945,  6958,  1012,   102])"
1261,1,['derangements'], Derangements and Matching Problems,seg_287,theorem 5.3 total number of derangements of n elements is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  9872,  1019,  1012,  1017,  2561,  2193,  1997,  4315, 22043,
         8163,  1997,  1050,  3787,  2003,   102])"
1262,1,['event'], Derangements and Matching Problems,seg_287,proof: this can be proved in many ways. we give the following two simple proofs. the first one uses the pie principle. let ai denote the event that ith object is cor-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  6947,  1024,  2023,  2064,  2022,  4928,  1999,  2116,  3971,
         1012,  2057,  2507,  1996,  2206,  2048,  3722,  6947,  2015,  1012,
         1996,  2034,  2028,  3594,  1996, 11345,  6958,  1012,  2292,  9932,
        19090,  1996,  2724,  2008,  2009,  2232,  4874,  2003,  2522,  2099,
         1011,   102])"
1263,1,['paired'], Derangements and Matching Problems,seg_287,"rectly paired with matching pair (ith letter is put in its correct envelope, etc.). let ai",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101, 28667, 14626, 12739,  2007,  9844,  3940,  1006,  2009,  2232,
         3661,  2003,  2404,  1999,  2049,  6149, 11255,  1010,  4385,  1012,
         1007,  1012,  2292,  9932,   102])"
1264,1,"['complement', 'paired', 'complementary event', 'derangement', 'event']", Derangements and Matching Problems,seg_287,"denote the complementary event. then a1a2 denotes that the first two objects are not paired with their matches. the event a1a2 … an denotes that none of the objects are matched with their peers. this is what is meant by a derangement. by generalized demorgan’s law, we have a1 ∩ a2 ∩ … ∩ an = [a1 ∪ a2 ∪ · · ·ai ∪ · · ·an]c, where the superscript denotes the complement. using the “do-little” principle (section 5.6.4 (p. 131)), the complementary event a1 ∪ a2 ∪ … ∪ an on the rhs is much easier to evaluate. using the pie principle, this can be expanded as",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101, 19090,  1996, 21053,  2724,  1012,  2059, 17350,  2050,  2475,
        14796,  2008,  1996,  2034,  2048,  5200,  2024,  2025, 12739,  2007,
         2037,  3503,  1012,  1996,  2724, 17350,  2050,  2475,  1529,  2019,
        14796,  2008,  3904,  1997,  1996,  5200,  2024, 10349,  2007,  2037,
        12746,  1012,  2023,  2003,  2054,  2003,  3214,  2011,  1037,  4315,
        22043,  3672,  1012,  2011, 18960,  9703, 16998,  1521,  1055,  2375,
         1010,  2057,  2031, 17350,  1604, 22441,  1604,  1529,  1604,  2019,
         1027,  1031, 17350,  1605, 22441,  1605,  1087,  1087,  1087,  9932,
         1605,  1087,  1087,  1087,  2019,  1033,  1039,  1010,  2073,  1996,
         3565, 22483, 14796,  1996, 13711,  1012,  2478,  1996,  1523,  2079,
         1011,  2210,  1524,  6958,  1006,  2930,  1019,  1012,  1020,  1012,
         1018,  1006,  1052,  1012, 14677,  1007,  1007,  1010,  1996, 21053,
         2724, 17350,  1605, 22441,  1605,  1529,  1605,  2019,  2006,  1996,
         1054,  7898,  2003,  2172,  6082,  2000, 16157,  1012,  2478,  1996,
        11345,  6958,  1010,  2023,  2064,  2022,  4423,  2004,   102])"
1265,1,['paired'], Derangements and Matching Problems,seg_287,"there are n ways in which ith object can be paired with its match. for any two arbitrary pairs (i,j), there are n(n − 1) ways to pair them using the multiplication law.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  2045,  2024,  1050,  3971,  1999,  2029,  2009,  2232,  4874,
         2064,  2022, 12739,  2007,  2049,  2674,  1012,  2005,  2151,  2048,
        15275,  7689,  1006,  1045,  1010,  1046,  1007,  1010,  2045,  2024,
         1050,  1006,  1050,  1597,  1015,  1007,  3971,  2000,  3940,  2068,
         2478,  1996, 24856,  2375,  1012,   102])"
1266,0,[], Derangements and Matching Problems,seg_287,"owing to the restriction on i and j, there are ( 2",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101, 11427,  2000,  1996, 16840,  2006,  1045,  1998,  1046,  1010,
         2045,  2024,  1006,  1016,   102])"
1267,1,['paired'], Derangements and Matching Problems,seg_287,the number of ways in which k items are paired with their peers is (n − k)!. substitute in equation (5.13) to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  1996,  2193,  1997,  3971,  1999,  2029,  1047,  5167,  2024,
        12739,  2007,  2037, 12746,  2003,  1006,  1050,  1597,  1047,  1007,
          999,  1012,  7681,  1999,  8522,  1006,  1019,  1012,  2410,  1007,
         2000,  2131,   102])"
1268,1,['factor'], Derangements and Matching Problems,seg_287,"expand ( n i ) = n!∕(i!(n − i)!), take n! as common factor, subtract from n! and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([ 101, 7818, 1006, 1050, 1045, 1007, 1027, 1050,  999,  100, 1006, 1045,
         999, 1006, 1050, 1597, 1045, 1007,  999, 1007, 1010, 2202, 1050,  999,
        2004, 2691, 5387, 1010, 4942, 6494, 6593, 2013, 1050,  999, 1998,  102])"
1269,1,['approximation'], Derangements and Matching Problems,seg_287,"n =0 (−1)i∕i!. if n is large, n!/e is a good approximation to equation (5.14) because e−1 = ∑k",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  1050,  1027,  1014,  1006,  1597,  2487,  1007,   100,   999,
         1012,  2065,  1050,  2003,  2312,  1010,  1050,   999,  1013,  1041,
         2003,  1037,  2204, 20167,  2000,  8522,  1006,  1019,  1012,  2403,
         1007,  2138,  1041, 27944,  1027,   100,   102])"
1270,1,"['recurrence relations', 'recurrence', 'cases', 'paired', 'set', 'derangement', 'derangements', 'condition']", Derangements and Matching Problems,seg_287,"∞ =0 (−1)k∕k!. the derangement problem is easy to solve using recurrence relations. let un denote the number of derangements of n objects and sn denote the corresponding set. fix any two objects say p and q. there are four possibilities:– (i) both p and q are paired with their own match, (ii) either p or q is paired with own partner, (iii) p is paired with q’s match and q is paired with p’s, and (iv) only one of p or q is paired with the other’s match. obviously, options 1 and 2 do not belong to sn because they violate the derangement condition. only favorable cases are options 3 and 4. consider option 3 first. as they are not matched to their peers, the remaining (n − 2) objects can be deranged in un−2 ways. obviously, sn−2 is a subset of sn. object p can be matched to (n− 1) other objects j (excluding its peer say (i). this automatically determines one such match for q as i. thus, there are (n − 1) ways in which pairs of objects that occupy each others’ place can be formed. if one among the fixed objects occupy another place but not vice versa, there exist un−1 ways in which others can go wrong. this gives the recurrence un = (n− 1)*(un−1 + un−2). write the rhs as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  1601,  1027,  1014,  1006,  1597,  2487,  1007,   100,   999,
         1012,  1996,  4315, 22043,  3672,  3291,  2003,  3733,  2000,  9611,
         2478, 28667,  3126, 24413,  4262,  1012,  2292,  4895, 19090,  1996,
         2193,  1997,  4315, 22043,  8163,  1997,  1050,  5200,  1998,  1055,
         2078, 19090,  1996,  7978,  2275,  1012,  8081,  2151,  2048,  5200,
         2360,  1052,  1998,  1053,  1012,  2045,  2024,  2176, 12020,  1024,
         1516,  1006,  1045,  1007,  2119,  1052,  1998,  1053,  2024, 12739,
         2007,  2037,  2219,  2674,  1010,  1006,  2462,  1007,  2593,  1052,
         2030,  1053,  2003, 12739,  2007,  2219,  4256,  1010,  1006,  3523,
         1007,  1052,  2003, 12739,  2007,  1053,  1521,  1055,  2674,  1998,
         1053,  2003, 12739,  2007,  1052,  1521,  1055,  1010,  1998,  1006,
         4921,  1007,  2069,  2028,  1997,  1052,  2030,  1053,  2003, 12739,
         2007,  1996,  2060,  1521,  1055,  2674,  1012,  5525,  1010,  7047,
         1015,  1998,  1016,  2079,  2025,  7141,  2000,  1055,  2078,  2138,
         2027, 23640,  1996,  4315, 22043,  3672,  4650,  1012,  2069, 11119,
         3572,  2024,  7047,  1017,  1998,  1018,  1012,  5136,  5724,  1017,
         2034,  1012,  2004,  2027,  2024,  2025, 10349,  2000,  2037, 12746,
         1010,  1996,  3588,  1006,  1050,  1597,  1016,  1007,  5200,  2064,
         2022,  4315, 22043,  2094,  1999,  4895, 22543,  2475,  3971,  1012,
         5525,  1010,  1055,  2078, 22543,  2475,  2003,  1037, 16745,  1997,
         1055,  2078,  1012,  4874,  1052,  2064,  2022, 10349,  2000,  1006,
         1050, 22543,  1015,  1007,  2060,  5200,  1046,  1006, 13343,  2049,
         8152,  2360,  1006,  1045,  1007,  1012,  2023,  8073, 16463,  2028,
         2107,  2674,  2005,  1053,  2004,  1045,  1012,  2947,  1010,  2045,
         2024,  1006,  1050,  1597,  1015,  1007,  3971,  1999,  2029,  7689,
         1997,  5200,  2008, 11494,  2169,  2500,  1521,  2173,  2064,  2022,
         2719,  1012,  2065,  2028,  2426,  1996,  4964,  5200, 11494,  2178,
         2173,  2021,  2025,  3580, 18601,  1010,  2045,  4839,  4895, 27944,
         3971,  1999,  2029,  2500,  2064,  2175,  3308,  1012,  2023,  3957,
         1996, 28667,  3126, 24413,  4895,  1027,  1006,  1050, 22543,  1015,
         1007,  1008,  1006,  4895, 27944,  1009,  4895, 22543,  2475,  1007,
         1012,  4339,  1996,  1054,  7898,  2004,   102])"
1271,1,['results'], Derangements and Matching Problems,seg_287,repeated application of equation (5.16) results in un − n ∗ un−1 = (−1)n−2(u2 − 2u1). substitute u1 = 0 and u2 = 1 to get un − n ∗ un−1 = (−1)n. divide throughout by n! and cancel out n from the second term to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  5567,  4646,  1997,  8522,  1006,  1019,  1012,  2385,  1007,
         3463,  1999,  4895,  1597,  1050,  1598,  4895, 27944,  1027,  1006,
         1597,  2487,  1007,  1050, 22543,  2475,  1006, 23343,  1597,  1016,
         2226,  2487,  1007,  1012,  7681,  1057,  2487,  1027,  1014,  1998,
        23343,  1027,  1015,  2000,  2131,  4895,  1597,  1050,  1598,  4895,
        27944,  1027,  1006,  1597,  2487,  1007,  1050,  1012, 11443,  2802,
         2011,  1050,   999,  1998, 17542,  2041,  1050,  2013,  1996,  2117,
         2744,  2000,  2131,   102])"
1272,1,"['derangement', 'derangements']", Derangements and Matching Problems,seg_287,"replace n successively by (n − 1), (n − 2), ..., 2 and add them together to get (un∕n!) = {1∕2! − 1∕3! + · · · (−1)n∕n!}. add and subtract 1 in the rhs and write it as 1−1/1! to get the final result. for two objects (a,b), there is only one derangement (namely (b,a)) with d2 = 1. for three objects say (a,b,c), there exist two derangements (b,c,a) and (c,a,b) so that d3 = 2. similarly d4 = 6 and so on.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  5672,  1050, 24288,  2011,  1006,  1050,  1597,  1015,  1007,
         1010,  1006,  1050,  1597,  1016,  1007,  1010,  1012,  1012,  1012,
         1010,  1016,  1998,  5587,  2068,  2362,  2000,  2131,  1006,   100,
          999,  1007,  1027,  1063,   100,   999,  1597,   100,   999,  1009,
         1087,  1087,  1087,  1006,  1597,  2487,  1007,   100,   999,  1065,
         1012,  5587,  1998,  4942,  6494,  6593,  1015,  1999,  1996,  1054,
         7898,  1998,  4339,  2009,  2004,  1015, 27944,  1013,  1015,   999,
         2000,  2131,  1996,  2345,  2765,  1012,  2005,  2048,  5200,  1006,
         1037,  1010,  1038,  1007,  1010,  2045,  2003,  2069,  2028,  4315,
        22043,  3672,  1006,  8419,  1006,  1038,  1010,  1037,  1007,  1007,
         2007,  1040,  2475,  1027,  1015,  1012,  2005,  2093,  5200,  2360,
         1006,  1037,  1010,  1038,  1010,  1039,  1007,  1010,  2045,  4839,
         2048,  4315, 22043,  8163,  1006,  1038,  1010,  1039,  1010,  1037,
         1007,  1998,  1006,  1039,  1010,  1037,  1010,  1038,  1007,  2061,
         2008,  1040,  2509,  1027,  1016,  1012,  6660,  1040,  2549,  1027,
         1020,  1998,  2061,  2006,  1012,   102])"
1273,0,[], Derangements and Matching Problems,seg_287,example 5.43 hat-check problem,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([ 101, 2742, 1019, 1012, 4724, 6045, 1011, 4638, 3291,  102])"
1274,0,[], Derangements and Matching Problems,seg_287,"there are n customers at a club, each of whom wears a cap. each member puts his cap in a basket while entering the club in the evening. while going out, each one picks a cap randomly and walks out. what is the possible number of ways that (i) all of them picks their own cap, (ii) no one picks their own cap, and (iii) exactly half of them gets back their own hats (where n is even)?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  2045,  2024,  1050,  6304,  2012,  1037,  2252,  1010,  2169,
         1997,  3183, 11651,  1037,  6178,  1012,  2169,  2266,  8509,  2010,
         6178,  1999,  1037, 10810,  2096,  5738,  1996,  2252,  1999,  1996,
         3944,  1012,  2096,  2183,  2041,  1010,  2169,  2028, 11214,  1037,
         6178, 18154,  1998,  7365,  2041,  1012,  2054,  2003,  1996,  2825,
         2193,  1997,  3971,  2008,  1006,  1045,  1007,  2035,  1997,  2068,
        11214,  2037,  2219,  6178,  1010,  1006,  2462,  1007,  2053,  2028,
        11214,  2037,  2219,  6178,  1010,  1998,  1006,  3523,  1007,  3599,
         2431,  1997,  2068,  4152,  2067,  2037,  2219, 16717,  1006,  2073,
         1050,  2003,  2130,  1007,  1029,   102])"
1275,1,['derangement'], Derangements and Matching Problems,seg_287,"solution 5.43 number the caps from 1 to n. the total number of possible ways to arrange the n caps is n!. out of this, there is only one way in which everyone can get their own caps, so that the answer to (i) is 1 out of n!, (ii) number of ways in which no one picks their own hat is the derangement dn, and (iii) if exactly half of them gets back their own hats, the other half do not get their hat. this can",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4315, 22043,  8163,  1998,  9844,  3471])","tensor([  101,  5576,  1019,  1012,  4724,  2193,  1996,  9700,  2013,  1015,
         2000,  1050,  1012,  1996,  2561,  2193,  1997,  2825,  3971,  2000,
        13621,  1996,  1050,  9700,  2003,  1050,   999,  1012,  2041,  1997,
         2023,  1010,  2045,  2003,  2069,  2028,  2126,  1999,  2029,  3071,
         2064,  2131,  2037,  2219,  9700,  1010,  2061,  2008,  1996,  3437,
         2000,  1006,  1045,  1007,  2003,  1015,  2041,  1997,  1050,   999,
         1010,  1006,  2462,  1007,  2193,  1997,  3971,  1999,  2029,  2053,
         2028, 11214,  2037,  2219,  6045,  2003,  1996,  4315, 22043,  3672,
         1040,  2078,  1010,  1998,  1006,  3523,  1007,  2065,  3599,  2431,
         1997,  2068,  4152,  2067,  2037,  2219, 16717,  1010,  1996,  2060,
         2431,  2079,  2025,  2131,  2037,  6045,  1012,  2023,  2064,   102])"
1276,1,"['set', 'model', 'urn model']", URN MODELS,seg_289,an urn model is a conceptual framework for representing a set of problems that satisfy the following conditions:–,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  2019, 24471,  2078,  2944,  2003,  1037, 17158,  7705,  2005,
         5052,  1037,  2275,  1997,  3471,  2008, 13225,  1996,  2206,  3785,
         1024,  1516,   102])"
1277,0,[], URN MODELS,seg_289,"• problem involves a collection of (preferably three or more) items, where each item belongs to a group or has a type, and elements of the same group or type are indistinguishable;",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([24471,  2078,  4275])","tensor([  101,  1528,  3291,  7336,  1037,  3074,  1997,  1006,  9544,  8231,
         2093,  2030,  2062,  1007,  5167,  1010,  2073,  2169,  8875,  7460,
         2000,  1037,  2177,  2030,  2038,  1037,  2828,  1010,  1998,  3787,
         1997,  1996,  2168,  2177,  2030,  2828,  2024, 27427,  2923,  2075,
        27020, 25459,  2571,  1025,   102])"
1278,1,['random'], URN MODELS,seg_289,"• all items are put together or assigned as a whole such that any subset of them can be selected at random, without looking at their type;",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  1528,  2035,  5167,  2024,  2404,  2362,  2030,  4137,  2004,
         1037,  2878,  2107,  2008,  2151, 16745,  1997,  2068,  2064,  2022,
         3479,  2012,  6721,  1010,  2302,  2559,  2012,  2037,  2828,  1025,
          102])"
1279,0,[], URN MODELS,seg_289,"• each of the groups are distinguishable, but their order or arrangement is unimportant.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([24471,  2078,  4275])","tensor([  101,  1528,  2169,  1997,  1996,  2967,  2024, 10782,  3085,  1010,
         2021,  2037,  2344,  2030,  6512,  2003,  4895,  5714,  6442,  4630,
         1012,   102])"
1280,1,"['model', 'urn model']", URN MODELS,seg_289,there are a large number of problems that can be cast as urn model. these are also called occupancy problems.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  2045,  2024,  1037,  2312,  2193,  1997,  3471,  2008,  2064,
         2022,  3459,  2004, 24471,  2078,  2944,  1012,  2122,  2024,  2036,
         2170,  1051,  9468,  6279, 11656,  3471,  1012,   102])"
1281,0,[], URN MODELS,seg_289,example 5.44 unique id numbers,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([24471,  2078,  4275])","tensor([ 101, 2742, 1019, 1012, 4008, 4310, 8909, 3616,  102])"
1282,0,[], URN MODELS,seg_289,a university wishes to assign a unique 4 digit id number to each of the enrolled students with the following restrictions that the student number cannot start with digit “0.” what is the maximum number of ids that can be generated if (i) the digits can be repeated any number of times and (ii) digits cannot be repeated?.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([24471,  2078,  4275])","tensor([  101,  1037,  2118,  8996,  2000, 23911,  1037,  4310,  1018, 15340,
         8909,  2193,  2000,  2169,  1997,  1996,  8302,  2493,  2007,  1996,
         2206,  9259,  2008,  1996,  3076,  2193,  3685,  2707,  2007, 15340,
         1523,  1014,  1012,  1524,  2054,  2003,  1996,  4555,  2193,  1997,
         8909,  2015,  2008,  2064,  2022,  7013,  2065,  1006,  1045,  1007,
         1996, 16648,  2064,  2022,  5567,  2151,  2193,  1997,  2335,  1998,
         1006,  2462,  1007, 16648,  3685,  2022,  5567,  1029,  1012,   102])"
1283,1,"['multiplication rule', 'case']", URN MODELS,seg_289,"solution 5.44 consider the four positions as four numbered urns arranged along a line. we can fill these urns from left to right. as the student number cannot start with digit “0,” the first urn can be filled in nine ways (with digits one through nine). in case (i), we are allowed to repeat the already used digit. this means that the second, third, and fourth urns can be filled with any of the 10 digits. this gives 9 ∗ 103 = 9000 possible numbers. in case (ii), the first urn can be filled in nine ways as before. the second urn can be filled in nine ways as digits cannot be repeated. similarly, the third and fourth urns can be filled in eight and seven ways, respectively. by the multiplication rule, we get the answer as 9*9*8*7 = 4536 ways. thus, up to 4536 student, id numbers can be generated if digits are not repeated.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  5576,  1019,  1012,  4008,  5136,  1996,  2176,  4460,  2004,
         2176,  8597, 24471,  3619,  5412,  2247,  1037,  2240,  1012,  2057,
         2064,  6039,  2122, 24471,  3619,  2013,  2187,  2000,  2157,  1012,
         2004,  1996,  3076,  2193,  3685,  2707,  2007, 15340,  1523,  1014,
         1010,  1524,  1996,  2034, 24471,  2078,  2064,  2022,  3561,  1999,
         3157,  3971,  1006,  2007, 16648,  2028,  2083,  3157,  1007,  1012,
         1999,  2553,  1006,  1045,  1007,  1010,  2057,  2024,  3039,  2000,
         9377,  1996,  2525,  2109, 15340,  1012,  2023,  2965,  2008,  1996,
         2117,  1010,  2353,  1010,  1998,  2959, 24471,  3619,  2064,  2022,
         3561,  2007,  2151,  1997,  1996,  2184, 16648,  1012,  2023,  3957,
         1023,  1598,  9800,  1027,  7706,  2692,  2825,  3616,  1012,  1999,
         2553,  1006,  2462,  1007,  1010,  1996,  2034, 24471,  2078,  2064,
         2022,  3561,  1999,  3157,  3971,  2004,  2077,  1012,  1996,  2117,
        24471,  2078,  2064,  2022,  3561,  1999,  3157,  3971,  2004, 16648,
         3685,  2022,  5567,  1012,  6660,  1010,  1996,  2353,  1998,  2959,
        24471,  3619,  2064,  2022,  3561,  1999,  2809,  1998,  2698,  3971,
         1010,  4414,  1012,  2011,  1996, 24856,  3627,  1010,  2057,  2131,
         1996,  3437,  2004,  1023,  1008,  1023,  1008,  1022,  1008,  1021,
         1027,  3429, 21619,  3971,  1012,  2947,  1010,  2039,  2000,  3429,
        21619,  3076,  1010,  8909,  3616,  2064,  2022,  7013,  2065, 16648,
         2024,  2025,  5567,  1012,   102])"
1284,1,['table'], URN MODELS,seg_289,"theorem 5.4 total number of ways in which n indistinguishable balls can be put in k distinguishable urns (see table 5.6) where none of the urns can be empty, and maximum capacity of each urn is n is kn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  9872,  1019,  1012,  1018,  2561,  2193,  1997,  3971,  1999,
         2029,  1050, 27427,  2923,  2075, 27020, 25459,  2571,  7395,  2064,
         2022,  2404,  1999,  1047, 10782,  3085, 24471,  3619,  1006,  2156,
         2795,  1019,  1012,  1020,  1007,  2073,  3904,  1997,  1996, 24471,
         3619,  2064,  2022,  4064,  1010,  1998,  4555,  3977,  1997,  2169,
        24471,  2078,  2003,  1050,  2003, 14161,  1012,   102])"
1285,1,['linear'], URN MODELS,seg_289,"proof: as the urns are distinguishable, arrange them in a linear order. start with the leftmost urn. we can put any of the balls there. thus, there are n ways. this is true for each of the k urns. by the multiplication law, the total number of ways is kn.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  6947,  1024,  2004,  1996, 24471,  3619,  2024, 10782,  3085,
         1010, 13621,  2068,  1999,  1037,  7399,  2344,  1012,  2707,  2007,
         1996,  2187, 11800, 24471,  2078,  1012,  2057,  2064,  2404,  2151,
         1997,  1996,  7395,  2045,  1012,  2947,  1010,  2045,  2024,  1050,
         3971,  1012,  2023,  2003,  2995,  2005,  2169,  1997,  1996,  1047,
        24471,  3619,  1012,  2011,  1996, 24856,  2375,  1010,  1996,  2561,
         2193,  1997,  3971,  2003, 14161,  1012,   102])"
1286,0,[], URN MODELS,seg_289,example 5.45 common birthday,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([24471,  2078,  4275])","tensor([ 101, 2742, 1019, 1012, 3429, 2691, 5798,  102])"
1287,1,"['probability', 'events']", URN MODELS,seg_289,"suppose that there are n − 1 ( 365) other persons along with you in a room, none of whom are twins. how many ways are there for each of the following events to realize assuming that leap-years are not accounted for? (i) none of the people shares a common birthday, (ii) at least one other person in the room shares a birthday with you, (iii) at most three people share a common birthday, and (iv) find the value of n such that the probability for at least two persons to share a common birthday is 0.6?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  6814,  2008,  2045,  2024,  1050,  1597,  1015,  1006, 19342,
         1007,  2060,  5381,  2247,  2007,  2017,  1999,  1037,  2282,  1010,
         3904,  1997,  3183,  2024,  8178,  1012,  2129,  2116,  3971,  2024,
         2045,  2005,  2169,  1997,  1996,  2206,  2824,  2000,  5382, 10262,
         2008, 11679,  1011,  2086,  2024,  2025, 14729,  2005,  1029,  1006,
         1045,  1007,  3904,  1997,  1996,  2111,  6661,  1037,  2691,  5798,
         1010,  1006,  2462,  1007,  2012,  2560,  2028,  2060,  2711,  1999,
         1996,  2282,  6661,  1037,  5798,  2007,  2017,  1010,  1006,  3523,
         1007,  2012,  2087,  2093,  2111,  3745,  1037,  2691,  5798,  1010,
         1998,  1006,  4921,  1007,  2424,  1996,  3643,  1997,  1050,  2107,
         2008,  1996,  9723,  2005,  2012,  2560,  2048,  5381,  2000,  3745,
         1037,  2691,  5798,  2003,  1014,  1012,  1020,  1029,   102])"
1288,1,['table'], URN MODELS,seg_289,solution 5.45 this can be cast in the urn-model framework by assuming days of the year consecutively numbered as urns and people as balls (table 5.6). then,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  5576,  1019,  1012,  3429,  2023,  2064,  2022,  3459,  1999,
         1996, 24471,  2078,  1011,  2944,  7705,  2011, 10262,  2420,  1997,
         1996,  2095,  5486,  2135,  8597,  2004, 24471,  3619,  1998,  2111,
         2004,  7395,  1006,  2795,  1019,  1012,  1020,  1007,  1012,  2059,
          102])"
1289,1,"['complementary event', 'event', 'case']", URN MODELS,seg_289,"case (i): “none have a common birthday” means that all birthdays are different. this is the same as the number of ways to choose n different days from 365 days, which is (365)n. (ii) the complementary event of “at least one other person” is that discussed in case (i). as the total number of ways for the birthdays of n persons is 365n, the required answer is 365n − (365)n. (iii) at most three people will have common birthdays if either two or three people have the same birthday.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([24471,  2078,  4275])","tensor([  101,  2553,  1006,  1045,  1007,  1024,  1523,  3904,  2031,  1037,
         2691,  5798,  1524,  2965,  2008,  2035,  5798,  2015,  2024,  2367,
         1012,  2023,  2003,  1996,  2168,  2004,  1996,  2193,  1997,  3971,
         2000,  5454,  1050,  2367,  2420,  2013, 19342,  2420,  1010,  2029,
         2003,  1006, 19342,  1007,  1050,  1012,  1006,  2462,  1007,  1996,
        21053,  2724,  1997,  1523,  2012,  2560,  2028,  2060,  2711,  1524,
         2003,  2008,  6936,  1999,  2553,  1006,  1045,  1007,  1012,  2004,
         1996,  2561,  2193,  1997,  3971,  2005,  1996,  5798,  2015,  1997,
         1050,  5381,  2003, 19342,  2078,  1010,  1996,  3223,  3437,  2003,
        19342,  2078,  1597,  1006, 19342,  1007,  1050,  1012,  1006,  3523,
         1007,  2012,  2087,  2093,  2111,  2097,  2031,  2691,  5798,  2015,
         2065,  2593,  2048,  2030,  2093,  2111,  2031,  1996,  2168,  5798,
         1012,   102])"
1290,1,['partitions'], PARTITIONS,seg_291,we saw in section 5.9.5 (p. 5–63) that the number of partitions of n things into two,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([13571,  2015])","tensor([  101,  2057,  2387,  1999,  2930,  1019,  1012,  1023,  1012,  1019,
         1006,  1052,  1012,  1019,  1516,  6191,  1007,  2008,  1996,  2193,
         1997, 13571,  2015,  1997,  1050,  2477,  2046,  2048,   102])"
1291,1,"['recurrence', 'set', 'partitions', 'stirling number']", PARTITIONS,seg_291,"divide a finite set s of size n elements into all possible subsets. this is not to be confused with set partitions defined in section 5.5.1 in page 122. the trivial subsets are s itself and one-element subsets. for simplicity, consider a set with three elements s = {1, 2, 3}. then, the seven possible partitions are {{1},{2},{3},{1,2},{1,3},{2,3}}, and {1,2,3}. when s has four elements, there are m = 15 partitions. in general, when there are n elements, there exist s(n, k) partitions, where s(n, k) is called the stirling number of second kind. these numbers satisfy the recurrence s(n, k) = s(n − 1, k − 1) + k ∗ s(n − 1, k), where s(n, 1) = s(n, n) = 1, s(n, 2) = 2n−1 − 1.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([13571,  2015])","tensor([  101, 11443,  1037, 10713,  2275,  1055,  1997,  2946,  1050,  3787,
         2046,  2035,  2825, 16745,  2015,  1012,  2023,  2003,  2025,  2000,
         2022,  5457,  2007,  2275, 13571,  2015,  4225,  1999,  2930,  1019,
         1012,  1019,  1012,  1015,  1999,  3931, 13092,  1012,  1996, 20610,
        16745,  2015,  2024,  1055,  2993,  1998,  2028,  1011,  5783, 16745,
         2015,  1012,  2005, 17839,  1010,  5136,  1037,  2275,  2007,  2093,
         3787,  1055,  1027,  1063,  1015,  1010,  1016,  1010,  1017,  1065,
         1012,  2059,  1010,  1996,  2698,  2825, 13571,  2015,  2024,  1063,
         1063,  1015,  1065,  1010,  1063,  1016,  1065,  1010,  1063,  1017,
         1065,  1010,  1063,  1015,  1010,  1016,  1065,  1010,  1063,  1015,
         1010,  1017,  1065,  1010,  1063,  1016,  1010,  1017,  1065,  1065,
         1010,  1998,  1063,  1015,  1010,  1016,  1010,  1017,  1065,  1012,
         2043,  1055,  2038,  2176,  3787,  1010,  2045,  2024,  1049,  1027,
         2321, 13571,  2015,  1012,  1999,  2236,  1010,  2043,  2045,  2024,
         1050,  3787,  1010,  2045,  4839,  1055,  1006,  1050,  1010,  1047,
         1007, 13571,  2015,  1010,  2073,  1055,  1006,  1050,  1010,  1047,
         1007,  2003,  2170,  1996, 15597,  2193,  1997,  2117,  2785,  1012,
         2122,  3616, 13225,  1996, 28667,  3126, 24413,  1055,  1006,  1050,
         1010,  1047,  1007,  1027,  1055,  1006,  1050,  1597,  1015,  1010,
         1047,  1597,  1015,  1007,  1009,  1047,  1598,  1055,  1006,  1050,
         1597,  1015,  1010,  1047,  1007,  1010,  2073,  1055,  1006,  1050,
         1010,  1015,  1007,  1027,  1055,  1006,  1050,  1010,  1050,  1007,
         1027,  1015,  1010,  1055,  1006,  1050,  1010,  1016,  1007,  1027,
         1016,  2078, 27944,  1597,  1015,  1012,   102])"
1292,1,"['set', 'probability', 'events', 'mutually exclusive', 'axiomatic approach']", AXIOMATIC APPROACH,seg_293,"with the solid mathematical footing given earlier, we are ready to define the axiomatic approach to probability. consider a finite set of mutually exclusive and collectively exhaustive set of events ai such that ∪n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([22260, 18994, 12070,  3921])","tensor([  101,  2007,  1996,  5024,  8045, 22849,  2445,  3041,  1010,  2057,
         2024,  3201,  2000,  9375,  1996, 22260, 18994, 12070,  3921,  2000,
         9723,  1012,  5136,  1037, 10713,  2275,  1997, 20271,  7262,  1998,
        13643, 15095,  3512,  2275,  1997,  2824,  9932,  2107,  2008,  1605,
         2078,   102])"
1293,1,"['function', 'sample space', 'probability', 'events', 'sample', 'random', 'experiment', 'axiomatic approach']", AXIOMATIC APPROACH,seg_293,"i=1ai = ω. the literal meaning of an axiom is “a statement that is always true or obviously true.” events lie at the core of axiomatic approach. we break the sample space of a random experiment into events that do not occur together. then, we define probability as a real valued function that obeys certain conditions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([22260, 18994, 12070,  3921])","tensor([  101,  1045,  1027, 20720,  2072,  1027,  1179,  1012,  1996, 18204,
         3574,  1997,  2019, 22260, 18994,  2003,  1523,  1037,  4861,  2008,
         2003,  2467,  2995,  2030,  5525,  2995,  1012,  1524,  2824,  4682,
         2012,  1996,  4563,  1997, 22260, 18994, 12070,  3921,  1012,  2057,
         3338,  1996,  7099,  2686,  1997,  1037,  6721,  7551,  2046,  2824,
         2008,  2079,  2025,  5258,  2362,  1012,  2059,  1010,  2057,  9375,
         9723,  2004,  1037,  2613, 11126,  3853,  2008, 15470,  2015,  3056,
         3785,  1012,   102])"
1294,1,"['probability measure', 'function', 'sample space', 'probability', 'outcome', 'sample', 'random', 'experiment']", Probability Measure,seg_295,a probability measure has two fundamental ingredients. a sample space ω of outcomes of a random experiment and a function that maps each elementary outcome ai to a real number between 0 and 1 such that they add up to 1. these are stated as three axioms:–,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 5468])","tensor([  101,  1037,  9723,  5468,  2038,  2048,  8050, 12760,  1012,  1037,
         7099,  2686,  1179,  1997, 13105,  1997,  1037,  6721,  7551,  1998,
         1037,  3853,  2008,  7341,  2169,  4732,  9560,  9932,  2000,  1037,
         2613,  2193,  2090,  1014,  1998,  1015,  2107,  2008,  2027,  5587,
         2039,  2000,  1015,  1012,  2122,  2024,  3090,  2004,  2093, 22260,
        29178,  1024,  1516,   102])"
1295,1,"['disjoint', 'events', 'disjoint events']", Probability Measure,seg_295,"3. if ai is a sequence of disjoint events, then p(∪n i=1ai) = ∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 5468])","tensor([  101,  1017,  1012,  2065,  9932,  2003,  1037,  5537,  1997,  4487,
         2015,  5558, 18447,  2824,  1010,  2059,  1052,  1006,  1605,  2078,
         1045,  1027, 20720,  2072,  1007,  1027,   100,   102])"
1296,1,"['probability measure', 'function', 'probability', 'events', 'mutually exclusive events', 'mutually exclusive']", Probability Measure,seg_295,the third axiom can be extended to countably infinite collective mutually exclusive events. such a function is called a probability measure.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([9723, 5468])","tensor([  101,  1996,  2353, 22260, 18994,  2064,  2022,  3668,  2000,  4175,
         8231, 10709,  7268, 20271,  7262,  2824,  1012,  2107,  1037,  3853,
         2003,  2170,  1037,  9723,  5468,  1012,   102])"
1297,1,['set'], Probability Measure,seg_295,the postulation p( ) = 0 follows because ω ∪ = ω and p(ω) = 1. a direct consequence of these axioms is the following set of properties that are stated in set theoretic symbols and operators.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 5468])","tensor([  101,  1996,  2695,  9513,  1052,  1006,  1007,  1027,  1014,  4076,
         2138,  1179,  1605,  1027,  1179,  1998,  1052,  1006,  1179,  1007,
         1027,  1015,  1012,  1037,  3622,  9509,  1997,  2122, 22260, 29178,
         2003,  1996,  2206,  2275,  1997,  5144,  2008,  2024,  3090,  1999,
         2275, 14833, 13465,  2594,  9255,  1998,  9224,  1012,   102])"
1298,1,"['sample space', 'events', 'sample']", Probability Measure,seg_295,"theorem 5.5 if x and y two arbitrary events defined on a sample space, then (i) 0 ≤ p(x) ≤ 1, (ii) 0 ≤ p(y) ≤ 1, (iii) if x ⊂ y → p(x) ≤ p(y), and (iv) p(x ∪ y) = p(x) + p(y) − p(x ∩ y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 5468])","tensor([  101,  9872,  1019,  1012,  1019,  2065,  1060,  1998,  1061,  2048,
        15275,  2824,  4225,  2006,  1037,  7099,  2686,  1010,  2059,  1006,
         1045,  1007,  1014,  1608,  1052,  1006,  1060,  1007,  1608,  1015,
         1010,  1006,  2462,  1007,  1014,  1608,  1052,  1006,  1061,  1007,
         1608,  1015,  1010,  1006,  3523,  1007,  2065,  1060,  1610,  1061,
         1585,  1052,  1006,  1060,  1007,  1608,  1052,  1006,  1061,  1007,
         1010,  1998,  1006,  4921,  1007,  1052,  1006,  1060,  1605,  1061,
         1007,  1027,  1052,  1006,  1060,  1007,  1009,  1052,  1006,  1061,
         1007,  1597,  1052,  1006,  1060,  1604,  1061,  1007,  1012,   102])"
1299,1,['results'], Probability Measure,seg_295,"proof: the first two results follows from the above-mentioned theorem. to prove the third result, we write x + (y − x) = y . then apply the third axiom to get p(x) + p(y − x) = p(y). as p(y − x) ≥ 0, it follows that p(x) ≤ p(y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 5468])","tensor([  101,  6947,  1024,  1996,  2034,  2048,  3463,  4076,  2013,  1996,
         2682,  1011,  3855,  9872,  1012,  2000,  6011,  1996,  2353,  2765,
         1010,  2057,  4339,  1060,  1009,  1006,  1061,  1597,  1060,  1007,
         1027,  1061,  1012,  2059,  6611,  1996,  2353, 22260, 18994,  2000,
         2131,  1052,  1006,  1060,  1007,  1009,  1052,  1006,  1061,  1597,
         1060,  1007,  1027,  1052,  1006,  1061,  1007,  1012,  2004,  1052,
         1006,  1061,  1597,  1060,  1007,  1609,  1014,  1010,  2009,  4076,
         2008,  1052,  1006,  1060,  1007,  1608,  1052,  1006,  1061,  1007,
         1012,   102])"
1300,1,['disjoint'], Probability Measure,seg_295,"to prove (iv), write x ∪ y as the disjoint unions as x ∪ y = (x ∩ yc) ∪ (y ∩ xc) ∪ (x ∩ y). as the subsets on the rhs are disjoint, axiom 3 can be applied to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 5468])","tensor([  101,  2000,  6011,  1006,  4921,  1007,  1010,  4339,  1060,  1605,
         1061,  2004,  1996,  4487,  2015,  5558, 18447,  9209,  2004,  1060,
         1605,  1061,  1027,  1006,  1060,  1604,  1061,  2278,  1007,  1605,
         1006,  1061,  1604,  1060,  2278,  1007,  1605,  1006,  1060,  1604,
         1061,  1007,  1012,  2004,  1996, 16745,  2015,  2006,  1996,  1054,
         7898,  2024,  4487,  2015,  5558, 18447,  1010, 22260, 18994,  1017,
         2064,  2022,  4162,  2000,  2131,   102])"
1301,1,"['probability', 'addition rule']", Probability Measure,seg_295,"add and subtract p(x ∩ y) on the rhs and combine p(x ∩ yc) + p(x ∩ y) as p(x). similarly, write p(x ∩ y) as p(y ∩ x) and combine p(y ∩ xc) + p(y ∩ x) as p(y). substitute the values on the rhs to get p(x) + p(y) − p(x ∩ y). this is known as the addition rule of probability.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 0.])","tensor([9723, 5468])","tensor([  101,  5587,  1998,  4942,  6494,  6593,  1052,  1006,  1060,  1604,
         1061,  1007,  2006,  1996,  1054,  7898,  1998, 11506,  1052,  1006,
         1060,  1604,  1061,  2278,  1007,  1009,  1052,  1006,  1060,  1604,
         1061,  1007,  2004,  1052,  1006,  1060,  1007,  1012,  6660,  1010,
         4339,  1052,  1006,  1060,  1604,  1061,  1007,  2004,  1052,  1006,
         1061,  1604,  1060,  1007,  1998, 11506,  1052,  1006,  1061,  1604,
         1060,  2278,  1007,  1009,  1052,  1006,  1061,  1604,  1060,  1007,
         2004,  1052,  1006,  1061,  1007,  1012,  7681,  1996,  5300,  2006,
         1996,  1054,  7898,  2000,  2131,  1052,  1006,  1060,  1007,  1009,
         1052,  1006,  1061,  1007,  1597,  1052,  1006,  1060,  1604,  1061,
         1007,  1012,  2023,  2003,  2124,  2004,  1996,  2804,  3627,  1997,
         9723,  1012,   102])"
1302,1,"['probability measure', 'range', 'sample space', 'set', 'probability', 'events', 'probabilities', 'sample']", Probability Space,seg_297,"a probability space is a triplet {ω, ,ℙ}, where ω is the sample space,   the set of events defined on ω, and ℙ the probability measure that maps events in   → [0, 1] such that p(ω) = 1,p(a) ∈ [0, 1]∀a ∈  , which is countably additive. this forms the foundation for several theoretical studies in probability. note that all three are related, but second and third components are more related than others. this is because the third component is a mapping from elementary events of ω to the real line [0,1]. in other words, ℙ has domain   and range [0,1] (it is assumed here that the probabilities",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0.])","tensor([9723, 2686])","tensor([  101,  1037,  9723,  2686,  2003,  1037,  6420,  2102,  1063,  1179,
         1010,  1010,   100,  1065,  1010,  2073,  1179,  2003,  1996,  7099,
         2686,  1010,  1996,  2275,  1997,  2824,  4225,  2006,  1179,  1010,
         1998,   100,  1996,  9723,  5468,  2008,  7341,  2824,  1999,  1585,
         1031,  1014,  1010,  1015,  1033,  2107,  2008,  1052,  1006,  1179,
         1007,  1027,  1015,  1010,  1052,  1006,  1037,  1007,  1596,  1031,
         1014,  1010,  1015,  1033,   100,  1596,  1010,  2029,  2003,  4175,
         8231, 29167,  1012,  2023,  3596,  1996,  3192,  2005,  2195,  9373,
         2913,  1999,  9723,  1012,  3602,  2008,  2035,  2093,  2024,  3141,
         1010,  2021,  2117,  1998,  2353,  6177,  2024,  2062,  3141,  2084,
         2500,  1012,  2023,  2003,  2138,  1996,  2353,  6922,  2003,  1037,
        12375,  2013,  4732,  2824,  1997,  1179,  2000,  1996,  2613,  2240,
         1031,  1014,  1010,  1015,  1033,  1012,  1999,  2060,  2616,  1010,
          100,  2038,  5884,  1998,  2846,  1031,  1014,  1010,  1015,  1033,
         1006,  2009,  2003,  5071,  2182,  2008,  1996,  4013,  3676, 14680,
          102])"
1303,1,"['random', 'experiment', 'percentages']", Probability Space,seg_297,are represented as decimals and not as percentages). it is used to mathematically represent a random phenomenon or an unknown experiment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([9723, 2686])","tensor([  101,  2024,  3421,  2004, 26066,  2015,  1998,  2025,  2004,  7017,
         2015,  1007,  1012,  2009,  2003,  2109,  2000,  8045,  2135,  5050,
         1037,  6721,  9575,  2030,  2019,  4242,  7551,  1012,   102])"
1304,1,"['sample space', 'associated', 'set', 'probability', 'events', 'event', 'sample', 'experiment', 'model']", Probability Space,seg_297,"a probability model is a triplet ℙ = (ω, s, p(x)), where ω is the sample space, s a set of events associated with an experiment, and p(x) the probability associated with each event in s such that ∑ip(xi) = 1.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([9723, 2686])","tensor([ 101, 1037, 9723, 2944, 2003, 1037, 6420, 2102,  100, 1027, 1006, 1179,
        1010, 1055, 1010, 1052, 1006, 1060, 1007, 1007, 1010, 2073, 1179, 2003,
        1996, 7099, 2686, 1010, 1055, 1037, 2275, 1997, 2824, 3378, 2007, 2019,
        7551, 1010, 1998, 1052, 1006, 1060, 1007, 1996, 9723, 3378, 2007, 2169,
        2724, 1999, 1055, 2107, 2008,  100, 1006, 8418, 1007, 1027, 1015, 1012,
         102])"
1305,1,"['sample space', 'conditional', 'probability', 'events', 'outcomes', 'states', 'event', 'sample', 'random', 'experiment', 'mutually exclusive']", THE CLASSICAL APPROACH,seg_299,"the sample space ω is well-defined and often enumerable in the classical approach. in addition, there are no conditional events involved. assume that there are n equally likely, mutually exclusive, and collectively exhaustive outcomes of a random experiment. if m of them are favorable to an event e, the classical approach states that the desired probability is m upon n (i.e., p = m∕n). symbolically, this can be written as",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([1996, 4556, 3921])","tensor([  101,  1996,  7099,  2686,  1179,  2003,  2092,  1011,  4225,  1998,
         2411,  4372, 17897, 16670,  1999,  1996,  4556,  3921,  1012,  1999,
         2804,  1010,  2045,  2024,  2053, 18462,  2824,  2920,  1012,  7868,
         2008,  2045,  2024,  1050,  8053,  3497,  1010, 20271,  7262,  1010,
         1998, 13643, 15095,  3512, 13105,  1997,  1037,  6721,  7551,  1012,
         2065,  1049,  1997,  2068,  2024, 11119,  2000,  2019,  2724,  1041,
         1010,  1996,  4556,  3921,  2163,  2008,  1996,  9059,  9723,  2003,
         1049,  2588,  1050,  1006,  1045,  1012,  1041,  1012,  1010,  1052,
         1027,   100,  1007,  1012, 12613,  3973,  1010,  2023,  2064,  2022,
         2517,  2004,   102])"
1306,1,['outcomes'], THE CLASSICAL APPROACH,seg_299,p(e) = number of outcomes favorable to e∕ total number of outcomes in ω.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([1996, 4556, 3921])","tensor([  101,  1052,  1006,  1041,  1007,  1027,  2193,  1997, 13105, 11119,
         2000,   100,  2561,  2193,  1997, 13105,  1999,  1179,  1012,   102])"
1307,1,"['sample', 'sample space']", THE CLASSICAL APPROACH,seg_299,this definition holds only when the sample space is finite.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([1996, 4556, 3921])","tensor([  101,  2023,  6210,  4324,  2069,  2043,  1996,  7099,  2686,  2003,
        10713,  1012,   102])"
1308,1,"['probability', 'events', 'probabilities', 'union']", Counting Techniques in Classical Probability,seg_301,"several counting techniques were discussed in section 5.8 (starting p. 135). these form the foundation of the classical approach. some of the counting techniques developed there have direct analogs in probability. consider for example, the principle of inclusion and exclusion discussed in page 147. it was mentioned there that the pie has two variants in terms of counts and probabilities. the “probability version” given below has direct application in finding the probability of a union of events, at least some of which have common elements.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10320,  5461,  1999,  4556,  9723])","tensor([  101,  2195, 10320,  5461,  2020,  6936,  1999,  2930,  1019,  1012,
         1022,  1006,  3225,  1052,  1012, 11502,  1007,  1012,  2122,  2433,
         1996,  3192,  1997,  1996,  4556,  3921,  1012,  2070,  1997,  1996,
        10320,  5461,  2764,  2045,  2031,  3622, 11698,  2015,  1999,  9723,
         1012,  5136,  2005,  2742,  1010,  1996,  6958,  1997, 10502,  1998,
        15945,  6936,  1999,  3931, 16471,  1012,  2009,  2001,  3855,  2045,
         2008,  1996, 11345,  2038,  2048, 10176,  1999,  3408,  1997,  9294,
         1998,  4013,  3676, 14680,  1012,  1996,  1523,  9723,  2544,  1524,
         2445,  2917,  2038,  3622,  4646,  1999,  4531,  1996,  9723,  1997,
         1037,  2586,  1997,  2824,  1010,  2012,  2560,  2070,  1997,  2029,
         2031,  2691,  3787,  1012,   102])"
1309,1,"['probability', 'events', 'probabilities']", Assigning Probabilities to Events,seg_303,it is fairly straightforward to find probabilities of events by the classical approach. first find the total number of possible events say n. then find the number of favorable events say m. then divide m by n to get the probability.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101,  2009,  2003,  7199, 19647,  2000,  2424,  4013,  3676, 14680,
         1997,  2824,  2011,  1996,  4556,  3921,  1012,  2034,  2424,  1996,
         2561,  2193,  1997,  2825,  2824,  2360,  1050,  1012,  2059,  2424,
         1996,  2193,  1997, 11119,  2824,  2360,  1049,  1012,  2059, 11443,
         1049,  2011,  1050,  2000,  2131,  1996,  9723,  1012,   102])"
1310,1,"['probability', 'cases']", Assigning Probabilities to Events,seg_303,"lemma 4 classical probability = number of favorable cases/total number of cases (p = m∕n, where m = # favorable cases, n = total number of cases).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101,  3393, 14760,  1018,  4556,  9723,  1027,  2193,  1997, 11119,
         3572,  1013,  2561,  2193,  1997,  3572,  1006,  1052,  1027,   100,
         1010,  2073,  1049,  1027,  1001, 11119,  3572,  1010,  1050,  1027,
         2561,  2193,  1997,  3572,  1007,  1012,   102])"
1311,1,['estimated'], Assigning Probabilities to Events,seg_303,"numerator can be either enumerated, estimated by other means, or evaluated recursively in most of the problems. these are exemplified in the following.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101, 16371,  5017,  8844,  2064,  2022,  2593,  4372, 17897,  9250,
         1010,  4358,  2011,  2060,  2965,  1010,  2030, 16330, 28667,  9236,
        14547,  1999,  2087,  1997,  1996,  3471,  1012,  2122,  2024, 28593,
         1999,  1996,  2206,  1012,   102])"
1312,1,"['probability', 'without replacement', 'prime number', 'random', 'replacement']", Assigning Probabilities to Events,seg_303,a box contains cards marked with numbers 1–10. (a) what is the probability that a number drawn at random is (i) prime number and (ii) divisible by 3. (b) what is the probability that the sum of two numbers drawn at random without replacement is (i) even and (ii) odd integer greater than or equal to 15.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101,  1037,  3482,  3397,  5329,  4417,  2007,  3616,  1015,  1516,
         2184,  1012,  1006,  1037,  1007,  2054,  2003,  1996,  9723,  2008,
         1037,  2193,  4567,  2012,  6721,  2003,  1006,  1045,  1007,  3539,
         2193,  1998,  1006,  2462,  1007,  4487, 11365,  7028,  2011,  1017,
         1012,  1006,  1038,  1007,  2054,  2003,  1996,  9723,  2008,  1996,
         7680,  1997,  2048,  3616,  4567,  2012,  6721,  2302,  6110,  2003,
         1006,  1045,  1007,  2130,  1998,  1006,  2462,  1007,  5976, 16109,
         3618,  2084,  2030,  5020,  2000,  2321,  1012,   102])"
1313,1,"['cases', 'sample space', 'replacement', 'probability', 'without replacement', 'prime numbers', 'sample', 'conditional', 'case']", Assigning Probabilities to Events,seg_303,"solution 5.46 the sample space is well defined. there are no conditional probabilities involved. total favorable cases are easy to enumerate. hence, we could easily find the probability by dividing the total favorable cases by the number of points in the sample space. for case (a), we need to enumerate all prime numbers. there are 5 of them as {1,2,3,5,7} are all primes. hence, required probability by lemma 8 is 5/10 = 1/2. in case (ii), the favorable cases are {3,6,9}. from this, the required probability follows easily as 3/10. in part (b), we are drawing the cards without replacement. total number of ways to draw two num-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101,  5576,  1019,  1012,  4805,  1996,  7099,  2686,  2003,  2092,
         4225,  1012,  2045,  2024,  2053, 18462,  4013,  3676, 14680,  2920,
         1012,  2561, 11119,  3572,  2024,  3733,  2000,  4372, 17897, 11657,
         1012,  6516,  1010,  2057,  2071,  4089,  2424,  1996,  9723,  2011,
        16023,  1996,  2561, 11119,  3572,  2011,  1996,  2193,  1997,  2685,
         1999,  1996,  7099,  2686,  1012,  2005,  2553,  1006,  1037,  1007,
         1010,  2057,  2342,  2000,  4372, 17897, 11657,  2035,  3539,  3616,
         1012,  2045,  2024,  1019,  1997,  2068,  2004,  1063,  1015,  1010,
         1016,  1010,  1017,  1010,  1019,  1010,  1021,  1065,  2024,  2035,
         3539,  2015,  1012,  6516,  1010,  3223,  9723,  2011,  3393, 14760,
         1022,  2003,  1019,  1013,  2184,  1027,  1015,  1013,  1016,  1012,
         1999,  2553,  1006,  2462,  1007,  1010,  1996, 11119,  3572,  2024,
         1063,  1017,  1010,  1020,  1010,  1023,  1065,  1012,  2013,  2023,
         1010,  1996,  3223,  9723,  4076,  4089,  2004,  1017,  1013,  2184,
         1012,  1999,  2112,  1006,  1038,  1007,  1010,  2057,  2024,  5059,
         1996,  5329,  2302,  6110,  1012,  2561,  2193,  1997,  3971,  2000,
         4009,  2048, 16371,  2213,  1011,   102])"
1314,0,[], Assigning Probabilities to Events,seg_303,0). as the sum of two numbers is even when both are even or,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([ 101, 1014, 1007, 1012, 2004, 1996, 7680, 1997, 2048, 3616, 2003, 2130,
        2043, 2119, 2024, 2130, 2030,  102])"
1315,1,"['cases', 'sample space', 'probability', 'sample']", Assigning Probabilities to Events,seg_303,"both are odd, we can easily enumerate the 20 favorable cases in the sample space as s= {(1,3),(1,5),(1,7),(1,9),(3,5),(3,7),(3,9),(5,7),(5,9),(7,9),(2,4),(2,6),(2,8), (2,10), (4,6),(4,8),(4,10),(6,8),(6,10),(8,10)}. the required probability is then 20∕( 1 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101,  2119,  2024,  5976,  1010,  2057,  2064,  4089,  4372, 17897,
        11657,  1996,  2322, 11119,  3572,  1999,  1996,  7099,  2686,  2004,
         1055,  1027,  1063,  1006,  1015,  1010,  1017,  1007,  1010,  1006,
         1015,  1010,  1019,  1007,  1010,  1006,  1015,  1010,  1021,  1007,
         1010,  1006,  1015,  1010,  1023,  1007,  1010,  1006,  1017,  1010,
         1019,  1007,  1010,  1006,  1017,  1010,  1021,  1007,  1010,  1006,
         1017,  1010,  1023,  1007,  1010,  1006,  1019,  1010,  1021,  1007,
         1010,  1006,  1019,  1010,  1023,  1007,  1010,  1006,  1021,  1010,
         1023,  1007,  1010,  1006,  1016,  1010,  1018,  1007,  1010,  1006,
         1016,  1010,  1020,  1007,  1010,  1006,  1016,  1010,  1022,  1007,
         1010,  1006,  1016,  1010,  2184,  1007,  1010,  1006,  1018,  1010,
         1020,  1007,  1010,  1006,  1018,  1010,  1022,  1007,  1010,  1006,
         1018,  1010,  2184,  1007,  1010,  1006,  1020,  1010,  1022,  1007,
         1010,  1006,  1020,  1010,  2184,  1007,  1010,  1006,  1022,  1010,
         2184,  1007,  1065,  1012,  1996,  3223,  9723,  2003,  2059,   100,
         1006,  1015,  1016,   102])"
1316,1,"['cases', 'sample space', 'sample', 'case']", Assigning Probabilities to Events,seg_303,"0) = 20∕45 = 4∕9. in case (ii), the favorable cases in the sample space",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101,  1014,  1007,  1027,   100,  1027,   100,  1012,  1999,  2553,
         1006,  2462,  1007,  1010,  1996, 11119,  3572,  1999,  1996,  7099,
         2686,   102])"
1317,1,"['sample space', 'probability', 'sample']", Assigning Probabilities to Events,seg_303,"are (5,10),(7,10),(9,10),(6,9),(8,9),(7,8),(9,8). hence, the required probability by lemma 8 is p = total favorable cases/number of points in the sample space = 7/( 1 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([23911,  2075,  4013,  3676, 14680,  2000,  2824])","tensor([  101,  2024,  1006,  1019,  1010,  2184,  1007,  1010,  1006,  1021,
         1010,  2184,  1007,  1010,  1006,  1023,  1010,  2184,  1007,  1010,
         1006,  1020,  1010,  1023,  1007,  1010,  1006,  1022,  1010,  1023,
         1007,  1010,  1006,  1021,  1010,  1022,  1007,  1010,  1006,  1023,
         1010,  1022,  1007,  1012,  6516,  1010,  1996,  3223,  9723,  2011,
         3393, 14760,  1022,  2003,  1052,  1027,  2561, 11119,  3572,  1013,
         2193,  1997,  2685,  1999,  1996,  7099,  2686,  1027,  1021,  1013,
         1006,  1015,  1016,   102])"
1318,0,[], Rules of Probability,seg_305,this section refreshes some of the rules that are necessary for laying a foundation for subsequent discussions.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3513, 1997, 9723])","tensor([  101,  2023,  2930, 25416, 21898,  2229,  2070,  1997,  1996,  3513,
         2008,  2024,  4072,  2005, 10201,  1037,  3192,  2005,  4745, 10287,
         1012,   102])"
1319,1,['probability'], Rules of Probability,seg_305,rule 3 probability is always between 0 and 1 (0 ≤ p(a) ≤ 1).,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([ 101, 3627, 1017, 9723, 2003, 2467, 2090, 1014, 1998, 1015, 1006, 1014,
        1608, 1052, 1006, 1037, 1007, 1608, 1015, 1007, 1012,  102])"
1320,1,"['probability', 'interval', 'percentage', 'method']", Rules of Probability,seg_305,"in section 5.2, we have seen various ways to express probability. all of the methods described there (except the percentage method) map the probability into the interval [0,1].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  1999,  2930,  1019,  1012,  1016,  1010,  2057,  2031,  2464,
         2536,  3971,  2000,  4671,  9723,  1012,  2035,  1997,  1996,  4725,
         2649,  2045,  1006,  3272,  1996,  7017,  4118,  1007,  4949,  1996,
         9723,  2046,  1996, 13483,  1031,  1014,  1010,  1015,  1033,  1012,
          102])"
1321,1,"['probability', 'sample', 'sample space']", Rules of Probability,seg_305,rule 4 probability of the entire sample space is 1. that is p(ω) = 1.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([ 101, 3627, 1018, 9723, 1997, 1996, 2972, 7099, 2686, 2003, 1015, 1012,
        2008, 2003, 1052, 1006, 1179, 1007, 1027, 1015, 1012,  102])"
1322,1,"['probability', 'events']", Rules of Probability,seg_305,the proof follows trivially because the probability of all the events occurring is certainty.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  1996,  6947,  4076, 20610,  2135,  2138,  1996,  9723,  1997,
         2035,  1996,  2824, 10066,  2003, 15855,  1012,   102])"
1323,1,"['probability', 'disjoint', 'events', 'probabilities', 'disjoint events']", Rules of Probability,seg_305,"rule 5 probability of occurrence of either of two disjoint events is the sum of their individual probabilities (i.e., p(a ∪ b) = p(a) + p(b)).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  3627,  1019,  9723,  1997, 14404,  1997,  2593,  1997,  2048,
         4487,  2015,  5558, 18447,  2824,  2003,  1996,  7680,  1997,  2037,
         3265,  4013,  3676, 14680,  1006,  1045,  1012,  1041,  1012,  1010,
         1052,  1006,  1037,  1605,  1038,  1007,  1027,  1052,  1006,  1037,
         1007,  1009,  1052,  1006,  1038,  1007,  1007,  1012,   102])"
1324,0,[], Rules of Probability,seg_305,example 5.47 playing card problem,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3513, 1997, 9723])","tensor([ 101, 2742, 1019, 1012, 4700, 2652, 4003, 3291,  102])"
1325,1,['probability'], Rules of Probability,seg_305,what is the probability that a card selected from a deck of playing cards will be either an ace or a queen?,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([ 101, 2054, 2003, 1996, 9723, 2008, 1037, 4003, 3479, 2013, 1037, 5877,
        1997, 2652, 5329, 2097, 2022, 2593, 2019, 9078, 2030, 1037, 3035, 1029,
         102])"
1326,1,"['disjoint', 'events', 'disjoint events', 'event']", Rules of Probability,seg_305,"solution 5.47 let “a” denote the event that it is an ace and “b” denote the event that it is a queen. these two are disjoint events. hence, the required probability by rule 5 is p(a) + p(b). but p(a) = 4∕52 = 1∕13 = p(b). the answer follows as 2/13. this rule can be extended to any number of disjoint events. let a1,a2, … ,an be disjoint events. then (p(a1 ∪ a2 · · · ∪ an) = ∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([3513, 1997, 9723])","tensor([  101,  5576,  1019,  1012,  4700,  2292,  1523,  1037,  1524, 19090,
         1996,  2724,  2008,  2009,  2003,  2019,  9078,  1998,  1523,  1038,
         1524, 19090,  1996,  2724,  2008,  2009,  2003,  1037,  3035,  1012,
         2122,  2048,  2024,  4487,  2015,  5558, 18447,  2824,  1012,  6516,
         1010,  1996,  3223,  9723,  2011,  3627,  1019,  2003,  1052,  1006,
         1037,  1007,  1009,  1052,  1006,  1038,  1007,  1012,  2021,  1052,
         1006,  1037,  1007,  1027,   100,  1027,   100,  1027,  1052,  1006,
         1038,  1007,  1012,  1996,  3437,  4076,  2004,  1016,  1013,  2410,
         1012,  2023,  3627,  2064,  2022,  3668,  2000,  2151,  2193,  1997,
         4487,  2015,  5558, 18447,  2824,  1012,  2292, 17350,  1010, 22441,
         1010,  1529,  1010,  2019,  2022,  4487,  2015,  5558, 18447,  2824,
         1012,  2059,  1006,  1052,  1006, 17350,  1605, 22441,  1087,  1087,
         1087,  1605,  2019,  1007,  1027,   100,   102])"
1327,1,['product rule'], Rules of Probability,seg_305,rule 6 product rule,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])","tensor([3513, 1997, 9723])","tensor([ 101, 3627, 1020, 4031, 3627,  102])"
1328,1,"['probability', 'events', 'independent events', 'independent']", Rules of Probability,seg_305,"if a and b are two independent events, the probability of occurrence of both of these events is the product of their individual probabilities:– p(a ∩ b) = p(a)p(b).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  2065,  1037,  1998,  1038,  2024,  2048,  2981,  2824,  1010,
         1996,  9723,  1997, 14404,  1997,  2119,  1997,  2122,  2824,  2003,
         1996,  4031,  1997,  2037,  3265,  4013,  3676, 14680,  1024,  1516,
         1052,  1006,  1037,  1604,  1038,  1007,  1027,  1052,  1006,  1037,
         1007,  1052,  1006,  1038,  1007,  1012,   102])"
1329,1,"['probability', 'events', 'independent events', 'probabilities', 'independent']", Rules of Probability,seg_305,"proof: as the events are independent, the occurrence of a has nothing to do with the occurrence of b. the probability of occurrences of a and b is the product of their individual probabilities. this rule can be generalized to any number of independent events as p(a1a2 · · ·an) = p(a1)p(a2)...p(an).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  6947,  1024,  2004,  1996,  2824,  2024,  2981,  1010,  1996,
        14404,  1997,  1037,  2038,  2498,  2000,  2079,  2007,  1996, 14404,
         1997,  1038,  1012,  1996,  9723,  1997, 27247,  1997,  1037,  1998,
         1038,  2003,  1996,  4031,  1997,  2037,  3265,  4013,  3676, 14680,
         1012,  2023,  3627,  2064,  2022, 18960,  2000,  2151,  2193,  1997,
         2981,  2824,  2004,  1052,  1006, 17350,  2050,  2475,  1087,  1087,
         1087,  2019,  1007,  1027,  1052,  1006, 17350,  1007,  1052,  1006,
        22441,  1007,  1012,  1012,  1012,  1052,  1006,  2019,  1007,  1012,
          102])"
1330,0,[], Rules of Probability,seg_305,example 5.48 furniture making,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([3513, 1997, 9723])","tensor([ 101, 2742, 1019, 1012, 4466, 7390, 2437,  102])"
1331,1,"['probabilities', 'process']", Rules of Probability,seg_305,"a furniture is made through three processes:–(i) cutting process, (ii) drilling process, and (iii) assembly and finishing process. the respective probabilities of a defect in each of the stages are 1/60, 1/20, and 1/80. find the probability that a finished furniture is (i) defective and (ii) has no cutting or drilling defect.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  1037,  7390,  2003,  2081,  2083,  2093,  6194,  1024,  1516,
         1006,  1045,  1007,  6276,  2832,  1010,  1006,  2462,  1007, 15827,
         2832,  1010,  1998,  1006,  3523,  1007,  3320,  1998,  5131,  2832,
         1012,  1996,  7972,  4013,  3676, 14680,  1997,  1037, 21262,  1999,
         2169,  1997,  1996,  5711,  2024,  1015,  1013,  3438,  1010,  1015,
         1013,  2322,  1010,  1998,  1015,  1013,  3770,  1012,  2424,  1996,
         9723,  2008,  1037,  2736,  7390,  2003,  1006,  1045,  1007, 28829,
         1998,  1006,  2462,  1007,  2038,  2053,  6276,  2030, 15827, 21262,
         1012,   102])"
1332,1,"['probability', 'processes', 'independent']", Rules of Probability,seg_305,"solution 5.48 assume that the processes are independent. the probability that it is defective is 1/60*1/20*1/80 = 1/96,000. (ii) probability that it has no cutting or drilling defect is (1 − 1∕60) ∗ (1 − 1∕20) = 0.93416.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  5576,  1019,  1012,  4466,  7868,  2008,  1996,  6194,  2024,
         2981,  1012,  1996,  9723,  2008,  2009,  2003, 28829,  2003,  1015,
         1013,  3438,  1008,  1015,  1013,  2322,  1008,  1015,  1013,  3770,
         1027,  1015,  1013,  5986,  1010,  2199,  1012,  1006,  2462,  1007,
         9723,  2008,  2009,  2038,  2053,  6276,  2030, 15827, 21262,  2003,
         1006,  1015,  1597,   100,  1007,  1598,  1006,  1015,  1597,   100,
         1007,  1027,  1014,  1012,  6109, 23632,  2575,  1012,   102])"
1333,0,[], Rules of Probability,seg_305,rule 7 sum rule,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([3513, 1997, 9723])","tensor([ 101, 3627, 1021, 7680, 3627,  102])"
1334,1,"['probability', 'events', 'independent']", Rules of Probability,seg_305,the probability of occurrence of either of two events (not necessarily independent) is p(a ∪ b) = p(a) + p(b) − p(a ∩ b).,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  1996,  9723,  1997, 14404,  1997,  2593,  1997,  2048,  2824,
         1006,  2025,  9352,  2981,  1007,  2003,  1052,  1006,  1037,  1605,
         1038,  1007,  1027,  1052,  1006,  1037,  1007,  1009,  1052,  1006,
         1038,  1007,  1597,  1052,  1006,  1037,  1604,  1038,  1007,  1012,
          102])"
1335,1,"['events', 'intersection']", Rules of Probability,seg_305,"proof follows trivially using the principle of inclusion and exclusion. let “x” denote the common intersection of events a and b(x = a ∩ b). then p(a) + p(b)will contain the “x” portion twice. therefore, we need to subtract it once to get p(a ∪ b). another proof appears in theorem 5.5 (p. 155).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  6947,  4076, 20610,  2135,  2478,  1996,  6958,  1997, 10502,
         1998, 15945,  1012,  2292,  1523,  1060,  1524, 19090,  1996,  2691,
         6840,  1997,  2824,  1037,  1998,  1038,  1006,  1060,  1027,  1037,
         1604,  1038,  1007,  1012,  2059,  1052,  1006,  1037,  1007,  1009,
         1052,  1006,  1038,  1007,  2097,  5383,  1996,  1523,  1060,  1524,
         4664,  3807,  1012,  3568,  1010,  2057,  2342,  2000,  4942,  6494,
         6593,  2009,  2320,  2000,  2131,  1052,  1006,  1037,  1605,  1038,
         1007,  1012,  2178,  6947,  3544,  1999,  9872,  1019,  1012,  1019,
         1006,  1052,  1012, 14168,  1007,  1012,   102])"
1336,1,"['probability', 'complement', 'event']", Rules of Probability,seg_305,"the probability of non-occurrence of an event is the complement of the probability of occurrence. symbolically, p(a) = 1 − p(a).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  1996,  9723,  1997,  2512,  1011, 14404,  1997,  2019,  2724,
         2003,  1996, 13711,  1997,  1996,  9723,  1997, 14404,  1012, 12613,
         3973,  1010,  1052,  1006,  1037,  1007,  1027,  1015,  1597,  1052,
         1006,  1037,  1007,  1012,   102])"
1337,1,"['complement', 'sample space', 'probability', 'events', 'event', 'union', 'sample', 'complement of an event', 'probability of the event']", Rules of Probability,seg_305,"the complement of an event comprises all events in the sample space ω except the event. as the probability of the sample space is 1, it follows that the probability of the event union the probability of its complement is 1. symbolically p(a) + p(a) = 1, from which the result follows.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  1996, 13711,  1997,  2019,  2724,  8681,  2035,  2824,  1999,
         1996,  7099,  2686,  1179,  3272,  1996,  2724,  1012,  2004,  1996,
         9723,  1997,  1996,  7099,  2686,  2003,  1015,  1010,  2009,  4076,
         2008,  1996,  9723,  1997,  1996,  2724,  2586,  1996,  9723,  1997,
         2049, 13711,  2003,  1015,  1012, 12613,  3973,  1052,  1006,  1037,
         1007,  1009,  1052,  1006,  1037,  1007,  1027,  1015,  1010,  2013,
         2029,  1996,  2765,  4076,  1012,   102])"
1338,1,"['sample space', 'events', 'sample']", Rules of Probability,seg_305,"theorem 5.6 if a1,a2, … ,an are events defined on a sample space, at least some of which have common elements, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  9872,  1019,  1012,  1020,  2065, 17350,  1010, 22441,  1010,
         1529,  1010,  2019,  2024,  2824,  4225,  2006,  1037,  7099,  2686,
         1010,  2012,  2560,  2070,  1997,  2029,  2031,  2691,  3787,  1010,
         2059,   102])"
1339,1,"['events', 'case']", Rules of Probability,seg_305,proof: consider a special case with just two events say x and y. we know that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3513, 1997, 9723])","tensor([ 101, 6947, 1024, 5136, 1037, 2569, 2553, 2007, 2074, 2048, 2824, 2360,
        1060, 1998, 1061, 1012, 2057, 2113, 2008,  102])"
1340,1,"['sample space', 'disjoint', 'events', 'disjoint events', 'sample', 'results']", Rules of Probability,seg_305,"divide both sides by the total number of points in the sample space and swap the lhs and rhs. then, the above-mentioned expression takes the form p( x ∪ y) = p(x) + p(y) − p(x ∩ y). if x and y are disjoint events, then x ∩ y =   so that p(x ∩ y) = 0, and the results follow. next assume that the result is true for an arbitrary m   2. then p(∪iam",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101, 11443,  2119,  3903,  2011,  1996,  2561,  2193,  1997,  2685,
         1999,  1996,  7099,  2686,  1998, 19948,  1996,  1048,  7898,  1998,
         1054,  7898,  1012,  2059,  1010,  1996,  2682,  1011,  3855,  3670,
         3138,  1996,  2433,  1052,  1006,  1060,  1605,  1061,  1007,  1027,
         1052,  1006,  1060,  1007,  1009,  1052,  1006,  1061,  1007,  1597,
         1052,  1006,  1060,  1604,  1061,  1007,  1012,  2065,  1060,  1998,
         1061,  2024,  4487,  2015,  5558, 18447,  2824,  1010,  2059,  1060,
         1604,  1061,  1027,  2061,  2008,  1052,  1006,  1060,  1604,  1061,
         1007,  1027,  1014,  1010,  1998,  1996,  3463,  3582,  1012,  2279,
         7868,  2008,  1996,  2765,  2003,  2995,  2005,  2019, 15275,  1049,
         1016,  1012,  2059,  1052,  1006,  1605, 25107,   102])"
1341,1,['probabilities'], Rules of Probability,seg_305,"as done earlier, divide by |ω| to get the probabilities as p(∪m",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  2004,  2589,  3041,  1010, 11443,  2011,  1064,  1179,  1064,
         2000,  2131,  1996,  4013,  3676, 14680,  2004,  1052,  1006,  1605,
         2213,   102])"
1342,0,[], Rules of Probability,seg_305,"i=1(ai ∩ am+1). now apply the above-mentioned equation to get the rhs in desired form. thus, the result follows by induction.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3513, 1997, 9723])","tensor([  101,  1045,  1027,  1015,  1006,  9932,  1604,  2572,  1009,  1015,
         1007,  1012,  2085,  6611,  1996,  2682,  1011,  3855,  8522,  2000,
         2131,  1996,  1054,  7898,  1999,  9059,  2433,  1012,  2947,  1010,
         1996,  2765,  4076,  2011, 15946,  1012,   102])"
1343,1,['sets'], Rules of Probability,seg_305,"corollary 2 if a1,a2, … an are finite sets, some of which have common elements, then |a1 ∩ a2 ∩ · · ·ai ∩ · · ·an| = |u| −∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3513, 1997, 9723])","tensor([  101,  2522, 28402,  5649,  1016,  2065, 17350,  1010, 22441,  1010,
         1529,  2019,  2024, 10713,  4520,  1010,  2070,  1997,  2029,  2031,
         2691,  3787,  1010,  2059,  1064, 17350,  1604, 22441,  1604,  1087,
         1087,  1087,  9932,  1604,  1087,  1087,  1087,  2019,  1064,  1027,
         1064,  1057,  1064,   100,   102])"
1344,1,"['sample space', 'probability', 'events', 'sample', 'numerical', 'discrete']", DoLittle Principle of Probability,seg_307,it was mentioned in section 5.6.4 (p. 131) that complementary events are sometimes easy to find when the sample space consists of a large number of discrete events as in the above-mentioned example. these are especially true in “at least k” and “at most k” type problems. these are called the do-little (or complement-and-conquer) principle of probability. see page 162 and 166 for numerical examples.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  2009,  2001,  3855,  1999,  2930,  1019,  1012,  1020,  1012,
         1018,  1006,  1052,  1012, 14677,  1007,  2008, 21053,  2824,  2024,
         2823,  3733,  2000,  2424,  2043,  1996,  7099,  2686,  3774,  1997,
         1037,  2312,  2193,  1997, 16246,  2824,  2004,  1999,  1996,  2682,
         1011,  3855,  2742,  1012,  2122,  2024,  2926,  2995,  1999,  1523,
         2012,  2560,  1047,  1524,  1998,  1523,  2012,  2087,  1047,  1524,
         2828,  3471,  1012,  2122,  2024,  2170,  1996,  2079,  1011,  2210,
         1006,  2030, 13711,  1011,  1998,  1011, 16152,  1007,  6958,  1997,
         9723,  1012,  2156,  3931, 17832,  1998, 18610,  2005, 15973,  4973,
         1012,   102])"
1345,0,[], DoLittle Principle of Probability,seg_307,example 5.49 multiple choice exam,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  2742,  1019,  1012,  4749,  3674,  3601, 11360,   102])"
1346,1,['probability'], DoLittle Principle of Probability,seg_307,"a multiple choice exam has 15 questions, each with 4 answer choices (say a,b,c,d). if a student guesses the answer to every question, what is the probability of getting at least two questions correct?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  1037,  3674,  3601, 11360,  2038,  2321,  3980,  1010,  2169,
         2007,  1018,  3437,  9804,  1006,  2360,  1037,  1010,  1038,  1010,
         1039,  1010,  1040,  1007,  1012,  2065,  1037,  3076,  3984,  2229,
         1996,  3437,  2000,  2296,  3160,  1010,  2054,  2003,  1996,  9723,
         1997,  2893,  2012,  2560,  2048,  3980,  6149,  1029,   102])"
1347,1,"['complement', 'probability', 'event', 'independent']", DoLittle Principle of Probability,seg_307,"solution 5.49 here, the keyword is “at least 2.” the complement event is 0 or 1 correct answers that are much easier to find. as there are four choices, probability of guessing the answer is 1/4 (so that the probability of incorrect answer is 3/4). we can consider the 15 questions as independent. this gives the probability of 0 correct answers as (3∕4)15 = 0.0133635. now consider getting at",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  5576,  1019,  1012,  4749,  2182,  1010,  1996,  3145, 18351,
         2003,  1523,  2012,  2560,  1016,  1012,  1524,  1996, 13711,  2724,
         2003,  1014,  2030,  1015,  6149,  6998,  2008,  2024,  2172,  6082,
         2000,  2424,  1012,  2004,  2045,  2024,  2176,  9804,  1010,  9723,
         1997, 16986,  1996,  3437,  2003,  1015,  1013,  1018,  1006,  2061,
         2008,  1996,  9723,  1997, 16542,  3437,  2003,  1017,  1013,  1018,
         1007,  1012,  2057,  2064,  5136,  1996,  2321,  3980,  2004,  2981,
         1012,  2023,  3957,  1996,  9723,  1997,  1014,  6149,  6998,  2004,
         1006,   100,  1007,  2321,  1027,  1014,  1012,  5890, 22394,  2575,
        19481,  1012,  2085,  5136,  2893,  2012,   102])"
1348,0,[], DoLittle Principle of Probability,seg_307,"least one correct answer. this correct answer may correspond to any of the questions 1 through 15 (in other words, there exist 15 possibilities). hence, this has",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  2560,  2028,  6149,  3437,  1012,  2023,  6149,  3437,  2089,
        17254,  2000,  2151,  1997,  1996,  3980,  1015,  2083,  2321,  1006,
         1999,  2060,  2616,  1010,  2045,  4839,  2321, 12020,  1007,  1012,
         6516,  1010,  2023,  2038,   102])"
1349,0,[], DoLittle Principle of Probability,seg_307,probability ( 1 1,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([ 101, 9723, 1006, 1015, 1015,  102])"
1350,0,[], DoLittle Principle of Probability,seg_307,abilities from 1 gives the required answer of getting at least two questions correct as 1 − 0.0668173 − 0.0133635 = 1 − 0.080181 = 0.919819.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  7590,  2013,  1015,  3957,  1996,  3223,  3437,  1997,  2893,
         2012,  2560,  2048,  3980,  6149,  2004,  1015,  1597,  1014,  1012,
         5757,  2575,  2620, 16576,  2509,  1597,  1014,  1012,  5890, 22394,
         2575, 19481,  1027,  1015,  1597,  1014,  1012,  5511, 24096,  2620,
         2487,  1027,  1014,  1012,  6205,  2683,  2620, 16147,  1012,   102])"
1351,0,[], DoLittle Principle of Probability,seg_307,example 5.50 at least type problem,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([ 101, 2742, 1019, 1012, 2753, 2012, 2560, 2828, 3291,  102])"
1352,1,['probability'], DoLittle Principle of Probability,seg_307,there are 10 students in a class. what is the probability that at least two of them have a common birthday if none were born in a leap-year?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  2045,  2024,  2184,  2493,  1999,  1037,  2465,  1012,  2054,
         2003,  1996,  9723,  2008,  2012,  2560,  2048,  1997,  2068,  2031,
         1037,  2691,  5798,  2065,  3904,  2020,  2141,  1999,  1037, 11679,
         1011,  2095,  1029,   102])"
1353,1,"['cases', 'probability', 'complementary event', 'event']", DoLittle Principle of Probability,seg_307,"solution 5.50 here, the keyword is again “at least 2.” the complementary event is “none of them have a common birthday.” this means that each student has a different birthday. arrange the students in an arbitrary order. the first student has 365 choices. having fixed the birthday of first student, there are 364 choices for the second student and so on. thus, by the multiplication principle, total number of ways (favorable cases) in which all birthdays are different is m = 365*364*363*356. total number of ways in which the birthdays can be distributed (including those counted above) is n = 36510. the required probability (in which all birthdays are different) is obtained by dividing m by n. note that one of the 365’s cancel out from the numerator and denominator giving the answer as (364)9∕3659 = 0.88305. subtract this from 1 to get the probability that at least two of them have a common birthday. in general, if there are m students, the probability for all birthdays to be different is (364)m−1∕365m−1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  5576,  1019,  1012,  2753,  2182,  1010,  1996,  3145, 18351,
         2003,  2153,  1523,  2012,  2560,  1016,  1012,  1524,  1996, 21053,
         2724,  2003,  1523,  3904,  1997,  2068,  2031,  1037,  2691,  5798,
         1012,  1524,  2023,  2965,  2008,  2169,  3076,  2038,  1037,  2367,
         5798,  1012, 13621,  1996,  2493,  1999,  2019, 15275,  2344,  1012,
         1996,  2034,  3076,  2038, 19342,  9804,  1012,  2383,  4964,  1996,
         5798,  1997,  2034,  3076,  1010,  2045,  2024,  4029,  2549,  9804,
         2005,  1996,  2117,  3076,  1998,  2061,  2006,  1012,  2947,  1010,
         2011,  1996, 24856,  6958,  1010,  2561,  2193,  1997,  3971,  1006,
        11119,  3572,  1007,  1999,  2029,  2035,  5798,  2015,  2024,  2367,
         2003,  1049,  1027, 19342,  1008,  4029,  2549,  1008,  4029,  2509,
         1008, 27509,  1012,  2561,  2193,  1997,  3971,  1999,  2029,  1996,
         5798,  2015,  2064,  2022,  5500,  1006,  2164,  2216,  8897,  2682,
         1007,  2003,  1050,  1027, 19342, 10790,  1012,  1996,  3223,  9723,
         1006,  1999,  2029,  2035,  5798,  2015,  2024,  2367,  1007,  2003,
         4663,  2011, 16023,  1049,  2011,  1050,  1012,  3602,  2008,  2028,
         1997,  1996, 19342,  1521,  1055, 17542,  2041,  2013,  1996, 16371,
         5017,  8844,  1998,  7939, 20936, 27413,  3228,  1996,  3437,  2004,
         1006,  4029,  2549,  1007,   100,  1027,  1014,  1012,  6070, 14142,
         2629,  1012,  4942,  6494,  6593,  2023,  2013,  1015,  2000,  2131,
         1996,  9723,  2008,  2012,  2560,  2048,  1997,  2068,  2031,  1037,
         2691,  5798,  1012,  1999,  2236,  1010,  2065,  2045,  2024,  1049,
         2493,  1010,  1996,  9723,  2005,  2035,  5798,  2015,  2000,  2022,
         2367,  2003,  1006,  4029,  2549,  1007,   100,  1012,   102])"
1354,0,[], DoLittle Principle of Probability,seg_307,example 5.51 shipping container,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  2742,  1019,  1012,  4868,  7829, 11661,   102])"
1355,1,['probability'], DoLittle Principle of Probability,seg_307,a shipping container is loaded with 50 food cartons. the probability that any of the cartons will get damaged during transshipment is 0.003 = 3/1000. what is the probability of finding at least one defective carton when the container reaches its destination?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  1037,  7829, 11661,  2003,  8209,  2007,  2753,  2833, 11122,
         5644,  1012,  1996,  9723,  2008,  2151,  1997,  1996, 11122,  5644,
         2097,  2131,  5591,  2076,  9099,  9650,  3672,  2003,  1014,  1012,
         4002,  2509,  1027,  1017,  1013,  6694,  1012,  2054,  2003,  1996,
         9723,  1997,  4531,  2012,  2560,  2028, 28829, 11122,  2239,  2043,
         1996, 11661,  6561,  2049,  7688,  1029,   102])"
1356,1,['probability'], DoLittle Principle of Probability,seg_307,"solution 5.51 as the probability that it will get damaged during shipment is 0.003, the probability that it will not be damaged is 0.997. hence, the probability that at least one of them gets damaged = 1-probability that none of them is damaged = 1 − (0.997)50 = 1 − 0.8605 = 0.1395.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  5576,  1019,  1012,  4868,  2004,  1996,  9723,  2008,  2009,
         2097,  2131,  5591,  2076, 22613,  2003,  1014,  1012,  4002,  2509,
         1010,  1996,  9723,  2008,  2009,  2097,  2025,  2022,  5591,  2003,
         1014,  1012,  5585,  2581,  1012,  6516,  1010,  1996,  9723,  2008,
         2012,  2560,  2028,  1997,  2068,  4152,  5591,  1027,  1015,  1011,
         9723,  2008,  3904,  1997,  2068,  2003,  5591,  1027,  1015,  1597,
         1006,  1014,  1012,  5585,  2581,  1007,  2753,  1027,  1015,  1597,
         1014,  1012,  6564,  2692,  2629,  1027,  1014,  1012, 16621,  2629,
         1012,   102])"
1357,0,[], DoLittle Principle of Probability,seg_307,example 5.52 defective circuits,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  2742,  1019,  1012,  4720, 28829, 13782,   102])"
1358,1,['probability'], DoLittle Principle of Probability,seg_307,"an electronic board has three parallel circuits, each of which contains three, eight, and five components. the probability for each component to malfunction is 0.0015. the board will stop working when at least one of the parallel circuits has a defect. what is the probability that the board does not work?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  2019,  4816,  2604,  2038,  2093,  5903, 13782,  1010,  2169,
         1997,  2029,  3397,  2093,  1010,  2809,  1010,  1998,  2274,  6177,
         1012,  1996,  9723,  2005,  2169,  6922,  2000, 15451, 11263, 27989,
         2003,  1014,  1012, 25604,  2629,  1012,  1996,  2604,  2097,  2644,
         2551,  2043,  2012,  2560,  2028,  1997,  1996,  5903, 13782,  2038,
         1037, 21262,  1012,  2054,  2003,  1996,  9723,  2008,  1996,  2604,
         2515,  2025,  2147,  1029,   102])"
1359,1,"['probability', 'probabilities']", DoLittle Principle of Probability,seg_307,"solution 5.52 probability that at least one of the circuits does not work = 1-probability that none of them are defective. probability that the first circuit is not defective = 0.99853. similarly, the corresponding probabilities for second and third circuits can be found.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2079, 15909,  9286,  6958,  1997,  9723])","tensor([  101,  5576,  1019,  1012,  4720,  9723,  2008,  2012,  2560,  2028,
         1997,  1996, 13782,  2515,  2025,  2147,  1027,  1015,  1011,  9723,
         2008,  3904,  1997,  2068,  2024, 28829,  1012,  9723,  2008,  1996,
         2034,  4984,  2003,  2025, 28829,  1027,  1014,  1012,  5585, 27531,
         2509,  1012,  6660,  1010,  1996,  7978,  4013,  3676, 14680,  2005,
         2117,  1998,  2353, 13782,  2064,  2022,  2179,  1012,   102])"
1360,1,"['cases', 'permutation', 'probability', 'events', 'probabilities', 'event', 'random', 'experiment', 'experiments', 'axiomatic approach', 'case']", Permutation and Combination in Classical Approach,seg_309,"permutation is useful to solve a variety of probability problems involving placement of objects (such as books, people, and electronic components). probabilities can be assigned to the events that make up a random experiment using the axiomatic approach. this is easily done in the case of equally likely experiments using the classical approach. when the favorable cases for an event involve counting several arrangements, we can use the techniques developed in the permutation and combination theorems.",tensor(1),"tensor([0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  2566, 28120,  3370,  2003,  6179,  2000,  9611,  1037,  3528,
         1997,  9723,  3471,  5994, 11073,  1997,  5200,  1006,  2107,  2004,
         2808,  1010,  2111,  1010,  1998,  4816,  6177,  1007,  1012,  4013,
         3676, 14680,  2064,  2022,  4137,  2000,  1996,  2824,  2008,  2191,
         2039,  1037,  6721,  7551,  2478,  1996, 22260, 18994, 12070,  3921,
         1012,  2023,  2003,  4089,  2589,  1999,  1996,  2553,  1997,  8053,
         3497,  7885,  2478,  1996,  4556,  3921,  1012,  2043,  1996, 11119,
         3572,  2005,  2019,  2724,  9125, 10320,  2195,  7565,  1010,  2057,
         2064,  2224,  1996,  5461,  2764,  1999,  1996,  2566, 28120,  3370,
         1998,  5257,  9872,  2015,  1012,   102])"
1361,1,['probability'], Permutation and Combination in Classical Approach,seg_309,"consider example 5.28 in page 139. what is the probability for a leap year with 366 days to have (i) 53 sundays?, (ii) 53 saturdays and 53 sundays?, (iii) exactly 52 saturdays and 52 sundays?, (iv) exactly 53 fridays or 53 sundays?, and (v) exactly 52 tuesdays and 52 thursdays?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5136,  2742,  1019,  1012,  2654,  1999,  3931, 16621,  1012,
         2054,  2003,  1996,  9723,  2005,  1037, 11679,  2095,  2007,  4029,
         2575,  2420,  2000,  2031,  1006,  1045,  1007,  5187, 14803,  1029,
         1010,  1006,  2462,  1007,  5187, 18860,  1998,  5187, 14803,  1029,
         1010,  1006,  3523,  1007,  3599,  4720, 18860,  1998,  4720, 14803,
         1029,  1010,  1006,  4921,  1007,  3599,  5187, 26587,  2030,  5187,
        14803,  1029,  1010,  1998,  1006,  1058,  1007,  3599,  4720,  9857,
         2015,  1998,  4720,  9432,  2015,  1029,   102])"
1362,1,"['cases', 'complement', 'probability', 'combinations']", Permutation and Combination in Classical Approach,seg_309,"solution 5.53 as mentioned before, there are only seven possible combinations for the extra 2 days. (i) as sunday occurs in two of the seven combinations, the probability that a leap year will have 53 sundays is 2/7. (ii) as (saturday, sunday) occurs once, the desired probability is 1/7. (iii) as neither saturday nor sunday occurs in four out of the seven possible pairs, the desired probability is 4/7. (iv) there exist four pairs containing either a friday or a sunday required probability is 4/7. (v) there are three favorable cases, namely, (sunday, monday), (friday, saturday), and (saturday, sunday) using the complement rule. hence, the answer is 3/7.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5576,  1019,  1012,  5187,  2004,  3855,  2077,  1010,  2045,
         2024,  2069,  2698,  2825, 14930,  2005,  1996,  4469,  1016,  2420,
         1012,  1006,  1045,  1007,  2004,  4465,  5158,  1999,  2048,  1997,
         1996,  2698, 14930,  1010,  1996,  9723,  2008,  1037, 11679,  2095,
         2097,  2031,  5187, 14803,  2003,  1016,  1013,  1021,  1012,  1006,
         2462,  1007,  2004,  1006,  5095,  1010,  4465,  1007,  5158,  2320,
         1010,  1996,  9059,  9723,  2003,  1015,  1013,  1021,  1012,  1006,
         3523,  1007,  2004,  4445,  5095,  4496,  4465,  5158,  1999,  2176,
         2041,  1997,  1996,  2698,  2825,  7689,  1010,  1996,  9059,  9723,
         2003,  1018,  1013,  1021,  1012,  1006,  4921,  1007,  2045,  4839,
         2176,  7689,  4820,  2593,  1037,  5958,  2030,  1037,  4465,  3223,
         9723,  2003,  1018,  1013,  1021,  1012,  1006,  1058,  1007,  2045,
         2024,  2093, 11119,  3572,  1010,  8419,  1010,  1006,  4465,  1010,
         6928,  1007,  1010,  1006,  5958,  1010,  5095,  1007,  1010,  1998,
         1006,  5095,  1010,  4465,  1007,  2478,  1996, 13711,  3627,  1012,
         6516,  1010,  1996,  3437,  2003,  1017,  1013,  1021,  1012,   102])"
1363,0,[], Permutation and Combination in Classical Approach,seg_309,example 5.54 roots of quadratic equation,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  2742,  1019,  1012,  5139,  6147,  1997, 17718, 23671,  8522,
          102])"
1364,1,['probability'], Permutation and Combination in Classical Approach,seg_309,"consider the quadratic equation px2 + qx + r = 0 considered in example 5.29 (p. 139). find the probability that (i) the equation will have real roots, (ii) equal roots, (iii) imaginary roots, (iv) both integer roots, and (v) exactly one integer root.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5136,  1996, 17718, 23671,  8522,  1052,  2595,  2475,  1009,
         1053,  2595,  1009,  1054,  1027,  1014,  2641,  1999,  2742,  1019,
         1012,  2756,  1006,  1052,  1012, 16621,  1007,  1012,  2424,  1996,
         9723,  2008,  1006,  1045,  1007,  1996,  8522,  2097,  2031,  2613,
         6147,  1010,  1006,  2462,  1007,  5020,  6147,  1010,  1006,  3523,
         1007, 15344,  6147,  1010,  1006,  4921,  1007,  2119, 16109,  6147,
         1010,  1998,  1006,  1058,  1007,  3599,  2028, 16109,  7117,  1012,
          102])"
1365,1,"['cases', 'coefficients']", Permutation and Combination in Classical Approach,seg_309,"solution 5.54 as each of the coefficients p,q,r is determined by the number that shows up in the throw of a die, we need three throws to decide them (say choose p first, then q, and finally r). in example 5.29, we found that there exists (38 + 5) = 43 ways for the equation to have real roots. hence, the answer to (i) is 43/216. (ii) as the five favorable cases are (1,2,1), (1,4,4), (2,4,2), (3,6,3), and (4,4,1), answer to (ii) is 5/216. a quadratic equation can have real roots, equal roots, or imaginary",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5576,  1019,  1012,  5139,  2004,  2169,  1997,  1996, 21374,
         1052,  1010,  1053,  1010,  1054,  2003,  4340,  2011,  1996,  2193,
         2008,  3065,  2039,  1999,  1996,  5466,  1997,  1037,  3280,  1010,
         2057,  2342,  2093, 11618,  2000,  5630,  2068,  1006,  2360,  5454,
         1052,  2034,  1010,  2059,  1053,  1010,  1998,  2633,  1054,  1007,
         1012,  1999,  2742,  1019,  1012,  2756,  1010,  2057,  2179,  2008,
         2045,  6526,  1006,  4229,  1009,  1019,  1007,  1027,  4724,  3971,
         2005,  1996,  8522,  2000,  2031,  2613,  6147,  1012,  6516,  1010,
         1996,  3437,  2000,  1006,  1045,  1007,  2003,  4724,  1013, 20294,
         1012,  1006,  2462,  1007,  2004,  1996,  2274, 11119,  3572,  2024,
         1006,  1015,  1010,  1016,  1010,  1015,  1007,  1010,  1006,  1015,
         1010,  1018,  1010,  1018,  1007,  1010,  1006,  1016,  1010,  1018,
         1010,  1016,  1007,  1010,  1006,  1017,  1010,  1020,  1010,  1017,
         1007,  1010,  1998,  1006,  1018,  1010,  1018,  1010,  1015,  1007,
         1010,  3437,  2000,  1006,  2462,  1007,  2003,  1019,  1013, 20294,
         1012,  1037, 17718, 23671,  8522,  2064,  2031,  2613,  6147,  1010,
         5020,  6147,  1010,  2030, 15344,   102])"
1366,1,"['probability', 'cases', 'complement', 'case']", Permutation and Combination in Classical Approach,seg_309,"roots only. hence, the favorable cases for case (iii) can be directly obtained using complement rule as 216 − 43 = 173. this gives the probability for case (iii) as 173/216. consider case (iv). both roots are integers in 10 favorable cases, so that the required probability is 10/216 = 5/108. (v) there are eight favorable cases so that the probability is 8/216 = 1/27.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  6147,  2069,  1012,  6516,  1010,  1996, 11119,  3572,  2005,
         2553,  1006,  3523,  1007,  2064,  2022,  3495,  4663,  2478, 13711,
         3627,  2004, 20294,  1597,  4724,  1027, 19410,  1012,  2023,  3957,
         1996,  9723,  2005,  2553,  1006,  3523,  1007,  2004, 19410,  1013,
        20294,  1012,  5136,  2553,  1006,  4921,  1007,  1012,  2119,  6147,
         2024, 24028,  1999,  2184, 11119,  3572,  1010,  2061,  2008,  1996,
         3223,  9723,  2003,  2184,  1013, 20294,  1027,  1019,  1013, 10715,
         1012,  1006,  1058,  1007,  2045,  2024,  2809, 11119,  3572,  2061,
         2008,  1996,  9723,  2003,  1022,  1013, 20294,  1027,  1015,  1013,
         2676,  1012,   102])"
1367,1,['tails'], Permutation and Combination in Classical Approach,seg_309,example 5.55 equal number of heads and tails in coin toss,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  2742,  1019,  1012,  4583,  5020,  2193,  1997,  4641,  1998,
        17448,  1999,  9226, 10055,   102])"
1368,1,"['tails', 'probability', 'unbiased']", Permutation and Combination in Classical Approach,seg_309,an unbiased coin is tossed 2n times where n ≥ 1. what is the probability of observing an equal number of heads and tails?,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  2019,  4895, 11607,  6924,  9226,  2003,  7463,  1016,  2078,
         2335,  2073,  1050,  1609,  1015,  1012,  2054,  2003,  1996,  9723,
         1997, 14158,  2019,  5020,  2193,  1997,  4641,  1998, 17448,  1029,
          102])"
1369,1,"['tails', 'trials']", Permutation and Combination in Classical Approach,seg_309,"solution 5.55 as we are interested in “an equal number of heads and tails,” this can be considered as an arrangement of n heads and n tails in 2n trials.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5576,  1019,  1012,  4583,  2004,  2057,  2024,  4699,  1999,
         1523,  2019,  5020,  2193,  1997,  4641,  1998, 17448,  1010,  1524,
         2023,  2064,  2022,  2641,  2004,  2019,  6512,  1997,  1050,  4641,
         1998,  1050, 17448,  1999,  1016,  2078,  7012,  1012,   102])"
1370,1,['tails'], Permutation and Combination in Classical Approach,seg_309,n) ways in which n heads and n tails can occur. each of them,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  1050,  1007,  3971,  1999,  2029,  1050,  4641,  1998,  1050,
        17448,  2064,  5258,  1012,  2169,  1997,  2068,   102])"
1371,1,"['probability', 'associated']", Permutation and Combination in Classical Approach,seg_309,"has the associated probability pnqn where q = 1 − p. by the ros principle, the",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  2038,  1996,  3378,  9723,  1052,  2078,  4160,  2078,  2073,
         1053,  1027,  1015,  1597,  1052,  1012,  2011,  1996, 20996,  2015,
         6958,  1010,  1996,   102])"
1372,1,['unbiased'], Permutation and Combination in Classical Approach,seg_309,"n) pnqn. as we are given that the coin is unbiased, p = q = 0.5.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  1050,  1007,  1052,  2078,  4160,  2078,  1012,  2004,  2057,
         2024,  2445,  2008,  1996,  9226,  2003,  4895, 11607,  6924,  1010,
         1052,  1027,  1053,  1027,  1014,  1012,  1019,  1012,   102])"
1373,0,['n'], Permutation and Combination in Classical Approach,seg_309,substitute in the above-mentioned equation to get the answer as ( 2 n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([ 101, 7681, 1999, 1996, 2682, 1011, 3855, 8522, 2000, 2131, 1996, 3437,
        2004, 1006, 1016, 1050,  102])"
1374,0,[], Permutation and Combination in Classical Approach,seg_309,example 5.56 common birthday,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([ 101, 2742, 1019, 1012, 5179, 2691, 5798,  102])"
1375,1,['probability'], Permutation and Combination in Classical Approach,seg_309,suppose that there are n ( 365) passengers in a plane. what is the probability that at least two people have a common birthday? what is the minimum value of n such that the probability that (i) none will have a common birthday is 0.4313? (ii) two or more people will share a common birthday is at least 0.9?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  6814,  2008,  2045,  2024,  1050,  1006, 19342,  1007,  5467,
         1999,  1037,  4946,  1012,  2054,  2003,  1996,  9723,  2008,  2012,
         2560,  2048,  2111,  2031,  1037,  2691,  5798,  1029,  2054,  2003,
         1996,  6263,  3643,  1997,  1050,  2107,  2008,  1996,  9723,  2008,
         1006,  1045,  1007,  3904,  2097,  2031,  1037,  2691,  5798,  2003,
         1014,  1012,  4724, 17134,  1029,  1006,  2462,  1007,  2048,  2030,
         2062,  2111,  2097,  3745,  1037,  2691,  5798,  2003,  2012,  2560,
         1014,  1012,  1023,  1029,   102])"
1376,1,"['complement', 'sample space', 'probability', 'event', 'sample']", Permutation and Combination in Classical Approach,seg_309,"solution 5.56 assume that the birthdays are randomly distributed, and none were born on february 29 of a leap year. then we could consider the 365 days as the equivalent of numbered urns. a person whose birthday is january 10 is assigned to 10th urn, and one whose birthday is december 26 is assigned to urn 360. the desired probability is found by enumerating the number of ways in which these urns can be filled by people such that at least two people are assigned to an urn. this sample space is not easy to enumerate. next apply the “complement-and-conquer” principle. consider the complement event. as a common birthday occurs with at least two people, the complement event is that none of the passengers have a common birthday. this is equivalent to counting the number of ways in which people can be assigned to urns such that each urn is either empty or has at most one assigned person. this event is greatly simplified. the total number of ways in which birthdays of n passengers may fall among the 365 days is 365n. order the persons arbitrarily from 1 to n. there are 365 possibilities for the first person’s birthday. as that day is taken, the second person’s birthday can fall in 364 days, and so on. as our assumption is that n 365,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5576,  1019,  1012,  5179,  7868,  2008,  1996,  5798,  2015,
         2024, 18154,  5500,  1010,  1998,  3904,  2020,  2141,  2006,  2337,
         2756,  1997,  1037, 11679,  2095,  1012,  2059,  2057,  2071,  5136,
         1996, 19342,  2420,  2004,  1996,  5662,  1997,  8597, 24471,  3619,
         1012,  1037,  2711,  3005,  5798,  2003,  2254,  2184,  2003,  4137,
         2000,  6049, 24471,  2078,  1010,  1998,  2028,  3005,  5798,  2003,
         2285,  2656,  2003,  4137,  2000, 24471,  2078,  9475,  1012,  1996,
         9059,  9723,  2003,  2179,  2011,  4372, 17897, 15172,  1996,  2193,
         1997,  3971,  1999,  2029,  2122, 24471,  3619,  2064,  2022,  3561,
         2011,  2111,  2107,  2008,  2012,  2560,  2048,  2111,  2024,  4137,
         2000,  2019, 24471,  2078,  1012,  2023,  7099,  2686,  2003,  2025,
         3733,  2000,  4372, 17897, 11657,  1012,  2279,  6611,  1996,  1523,
        13711,  1011,  1998,  1011, 16152,  1524,  6958,  1012,  5136,  1996,
        13711,  2724,  1012,  2004,  1037,  2691,  5798,  5158,  2007,  2012,
         2560,  2048,  2111,  1010,  1996, 13711,  2724,  2003,  2008,  3904,
         1997,  1996,  5467,  2031,  1037,  2691,  5798,  1012,  2023,  2003,
         5662,  2000, 10320,  1996,  2193,  1997,  3971,  1999,  2029,  2111,
         2064,  2022,  4137,  2000, 24471,  3619,  2107,  2008,  2169, 24471,
         2078,  2003,  2593,  4064,  2030,  2038,  2012,  2087,  2028,  4137,
         2711,  1012,  2023,  2724,  2003,  6551, 11038,  1012,  1996,  2561,
         2193,  1997,  3971,  1999,  2029,  5798,  2015,  1997,  1050,  5467,
         2089,  2991,  2426,  1996, 19342,  2420,  2003, 19342,  2078,  1012,
         2344,  1996,  5381, 12098, 16313, 19848,  6588,  2013,  1015,  2000,
         1050,  1012,  2045,  2024, 19342, 12020,  2005,  1996,  2034,  2711,
         1521,  1055,  5798,  1012,  2004,  2008,  2154,  2003,  2579,  1010,
         1996,  2117,  2711,  1521,  1055,  5798,  2064,  2991,  1999,  4029,
         2549,  2420,  1010,  1998,  2061,  2006,  1012,  2004,  2256, 11213,
         2003,  2008,  1050, 19342,  1010,   102])"
1377,1,"['probability', 'pochhammer notation']", Permutation and Combination in Classical Approach,seg_309,"the last person’s birthday can be chosen in 365*364*363*...*(365 − n + 1)ways. this can be denoted using factorials as 365!∕(365 − n)! or using pochhammer notation as (365)n. thus, the number of ways in which each person’s birthday is different is 365!/(365 − n)! because we do not care which person’s birthday is on a particular date. from this, the probability that each of the birthdays is different is obtained as p = 365!∕((365 − n)!365n) = (365)n∕365n. hence, the probability that at least two people have a common birthday is 1 − p = 1 − (365)n∕365n. for part (i), we need to find n such that (365)n∕365n ≃ 0.4313. take log of both sides and try successive values to get n = 25. in part (ii), we have to find that value of n for which 1 − p = 1 − (365)n∕365n ≤ 0.1. for n = 40, the probability that all birthdays are different is 0.108768, and for n = 41, it is 0.0968. hence n = 41.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  1996,  2197,  2711,  1521,  1055,  5798,  2064,  2022,  4217,
         1999, 19342,  1008,  4029,  2549,  1008,  4029,  2509,  1008,  1012,
         1012,  1012,  1008,  1006, 19342,  1597,  1050,  1009,  1015,  1007,
         3971,  1012,  2023,  2064,  2022, 19537,  2478,  5387, 26340,  2004,
        19342,   999,   100,  1006, 19342,  1597,  1050,  1007,   999,  2030,
         2478, 13433,  2818, 19742, 14869,  2004,  1006, 19342,  1007,  1050,
         1012,  2947,  1010,  1996,  2193,  1997,  3971,  1999,  2029,  2169,
         2711,  1521,  1055,  5798,  2003,  2367,  2003, 19342,   999,  1013,
         1006, 19342,  1597,  1050,  1007,   999,  2138,  2057,  2079,  2025,
         2729,  2029,  2711,  1521,  1055,  5798,  2003,  2006,  1037,  3327,
         3058,  1012,  2013,  2023,  1010,  1996,  9723,  2008,  2169,  1997,
         1996,  5798,  2015,  2003,  2367,  2003,  4663,  2004,  1052,  1027,
        19342,   999,   100,  1006,  1006, 19342,  1597,  1050,  1007,   999,
        19342,  2078,  1007,  1027,  1006, 19342,  1007,   100,  1012,  6516,
         1010,  1996,  9723,  2008,  2012,  2560,  2048,  2111,  2031,  1037,
         2691,  5798,  2003,  1015,  1597,  1052,  1027,  1015,  1597,  1006,
        19342,  1007,   100,  1012,  2005,  2112,  1006,  1045,  1007,  1010,
         2057,  2342,  2000,  2424,  1050,  2107,  2008,  1006, 19342,  1007,
          100,   100,  1014,  1012,  4724, 17134,  1012,  2202,  8833,  1997,
         2119,  3903,  1998,  3046, 11165,  5300,  2000,  2131,  1050,  1027,
         2423,  1012,  1999,  2112,  1006,  2462,  1007,  1010,  2057,  2031,
         2000,  2424,  2008,  3643,  1997,  1050,  2005,  2029,  1015,  1597,
         1052,  1027,  1015,  1597,  1006, 19342,  1007,   100,  1608,  1014,
         1012,  1015,  1012,  2005,  1050,  1027,  2871,  1010,  1996,  9723,
         2008,  2035,  5798,  2015,  2024,  2367,  2003,  1014,  1012, 10715,
         2581,  2575,  2620,  1010,  1998,  2005,  1050,  1027,  4601,  1010,
         2009,  2003,  1014,  1012,  5641,  2575,  2620,  1012,  6516,  1050,
         1027,  4601,  1012,   102])"
1378,0,[], Permutation and Combination in Classical Approach,seg_309,example 5.57 no common birthday,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([ 101, 2742, 1019, 1012, 5401, 2053, 2691, 5798,  102])"
1379,1,['probability'], Permutation and Combination in Classical Approach,seg_309,consider the above-mentioned example where n   365. what is the probability that (i) none have a birthday on sundays?. (ii) exactly k persons have a common birthday on the x’mas day?.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5136,  1996,  2682,  1011,  3855,  2742,  2073,  1050, 19342,
         1012,  2054,  2003,  1996,  9723,  2008,  1006,  1045,  1007,  3904,
         2031,  1037,  5798,  2006, 14803,  1029,  1012,  1006,  2462,  1007,
         3599,  1047,  5381,  2031,  1037,  2691,  5798,  2006,  1996,  1060,
         1521, 16137,  2154,  1029,  1012,   102])"
1380,1,"['probability', 'case']", Permutation and Combination in Classical Approach,seg_309,"solution 5.57 (i) a year has either 52 or 53 sundays (if 1 january is a sunday, then that year will have 53 sundays, as 31 december is also sunday). in the former case, there are 365 − 52 = 313 days that are not sundays. hence, the total number of possibilities is 313n. in the later case, there are 312 days that are not sundays with 312n possibilities. thus, the probability is either (312∕365)n or (313∕365)n depending on whether january 1st is a sunday or not. (ii) as k persons birthday fall on an x’mas day, there are n − k persons whose birthday",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  5576,  1019,  1012,  5401,  1006,  1045,  1007,  1037,  2095,
         2038,  2593,  4720,  2030,  5187, 14803,  1006,  2065,  1015,  2254,
         2003,  1037,  4465,  1010,  2059,  2008,  2095,  2097,  2031,  5187,
        14803,  1010,  2004,  2861,  2285,  2003,  2036,  4465,  1007,  1012,
         1999,  1996,  2280,  2553,  1010,  2045,  2024, 19342,  1597,  4720,
         1027, 22997,  2420,  2008,  2024,  2025, 14803,  1012,  6516,  1010,
         1996,  2561,  2193,  1997, 12020,  2003, 22997,  2078,  1012,  1999,
         1996,  2101,  2553,  1010,  2045,  2024, 21036,  2420,  2008,  2024,
         2025, 14803,  2007, 21036,  2078, 12020,  1012,  2947,  1010,  1996,
         9723,  2003,  2593,  1006,   100,  1007,  1050,  2030,  1006,   100,
         1007,  1050,  5834,  2006,  3251,  2254,  3083,  2003,  1037,  4465,
         2030,  2025,  1012,  1006,  2462,  1007,  2004,  1047,  5381,  5798,
         2991,  2006,  2019,  1060,  1521, 16137,  2154,  1010,  2045,  2024,
         1050,  1597,  1047,  5381,  3005,  5798,   102])"
1381,0,['n'], Permutation and Combination in Classical Approach,seg_309,falls on other 364 days. there are ( n k) ways for k persons to have birthday on,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([ 101, 4212, 2006, 2060, 4029, 2549, 2420, 1012, 2045, 2024, 1006, 1050,
        1047, 1007, 3971, 2005, 1047, 5381, 2000, 2031, 5798, 2006,  102])"
1382,1,['probability'], Permutation and Combination in Classical Approach,seg_309,"x’mas day and (364)n−k ways for other birthdays. hence, the required probability",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0.])","tensor([ 2566, 28120,  3370,  1998,  5257,  1999,  4556,  3921])","tensor([  101,  1060,  1521, 16137,  2154,  1998,  1006,  4029,  2549,  1007,
         1050, 22543,  2243,  3971,  2005,  2060,  5798,  2015,  1012,  6516,
         1010,  1996,  3223,  9723,   102])"
1383,1,['events'], Sequentially Dependent Events,seg_311,"events cyclically repeat in some applications. consider a working traffic light. in each cycle, the signal changes color from green (g) to yellow (y) to red (r) and then to green. hence, the events are {g, y, r}. these are not equally likely because the duration of these signals are preset based on the traffic density in different directions. assume that green signal is shown for 50 seconds, yellow for 5 seconds, and red for 35 seconds in one direction. then p(green) = 50/90 = 5/9, p(yellow) = 5/90 = 1/18, and p(red) = 35/90 = 7/18. this may differ in other directions.",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([25582,  2135,  7790,  2824])","tensor([  101,  2824, 23750,  3973,  9377,  1999,  2070,  5097,  1012,  5136,
         1037,  2551,  4026,  2422,  1012,  1999,  2169,  5402,  1010,  1996,
         4742,  3431,  3609,  2013,  2665,  1006,  1043,  1007,  2000,  3756,
         1006,  1061,  1007,  2000,  2417,  1006,  1054,  1007,  1998,  2059,
         2000,  2665,  1012,  6516,  1010,  1996,  2824,  2024,  1063,  1043,
         1010,  1061,  1010,  1054,  1065,  1012,  2122,  2024,  2025,  8053,
         3497,  2138,  1996,  9367,  1997,  2122,  7755,  2024,  3653, 13462,
         2241,  2006,  1996,  4026,  4304,  1999,  2367,  7826,  1012,  7868,
         2008,  2665,  4742,  2003,  3491,  2005,  2753,  3823,  1010,  3756,
         2005,  1019,  3823,  1010,  1998,  2417,  2005,  3486,  3823,  1999,
         2028,  3257,  1012,  2059,  1052,  1006,  2665,  1007,  1027,  2753,
         1013,  3938,  1027,  1019,  1013,  1023,  1010,  1052,  1006,  3756,
         1007,  1027,  1019,  1013,  3938,  1027,  1015,  1013,  2324,  1010,
         1998,  1052,  1006,  2417,  1007,  1027,  3486,  1013,  3938,  1027,
         1021,  1013,  2324,  1012,  2023,  2089, 11234,  1999,  2060,  7826,
         1012,   102])"
1384,1,"['probability', 'events', 'independence', 'random', 'condition', 'experiments']", Independence of Events,seg_313,"independence of events is an important condition to check, as this can considerably simplify probability calculations. this is most often intuitively clear to humans but not to machines. independence of events is often assumed in random experiments.",tensor(1),"tensor([0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([4336, 1997, 2824])","tensor([  101,  4336,  1997,  2824,  2003,  2019,  2590,  4650,  2000,  4638,
         1010,  2004,  2023,  2064,  9839, 21934, 28250,  9723, 16268,  1012,
         2023,  2003,  2087,  2411, 29202,  2135,  3154,  2000,  4286,  2021,
         2025,  2000,  6681,  1012,  4336,  1997,  2824,  2003,  2411,  5071,
         1999,  6721,  7885,  1012,   102])"
1385,1,"['events', 'event', 'independent']", Independence of Events,seg_313,definition 5.9 two events “a” and “b” are independent if the occurrence of either of them is not influenced by prior knowledge about the occurrence of the other event.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([4336, 1997, 2824])","tensor([  101,  6210,  1019,  1012,  1023,  2048,  2824,  1523,  1037,  1524,
         1998,  1523,  1038,  1524,  2024,  2981,  2065,  1996, 14404,  1997,
         2593,  1997,  2068,  2003,  2025,  5105,  2011,  3188,  3716,  2055,
         1996, 14404,  1997,  1996,  2060,  2724,  1012,   102])"
1386,1,"['probability', 'events', 'independence', 'independent']", Independence of Events,seg_313,"symbolically, we denote it as p(a and b) = p(a) ∗ p(b). note that independence is a “logical relation” among events, but it is mathematically cast using the probability notation. this can also be expressed as p(a) = p(a|b) (or p(b) = p(b|a)), where the vertical bar denotes conditioning (it is read as “probability of a equals probability of a given b,” etc.). the first notation is easier than others to generalize the concept to n events. symbolically events e1,e2, … ,en are independent if p(e1 ∩ e2 · · · ∩ en) = p(e1) ∗ p(e2) ∗ · · · ∗ p(en).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4336, 1997, 2824])","tensor([  101, 12613,  3973,  1010,  2057, 19090,  2009,  2004,  1052,  1006,
         1037,  1998,  1038,  1007,  1027,  1052,  1006,  1037,  1007,  1598,
         1052,  1006,  1038,  1007,  1012,  3602,  2008,  4336,  2003,  1037,
         1523, 11177,  7189,  1524,  2426,  2824,  1010,  2021,  2009,  2003,
         8045,  2135,  3459,  2478,  1996,  9723, 14869,  1012,  2023,  2064,
         2036,  2022,  5228,  2004,  1052,  1006,  1037,  1007,  1027,  1052,
         1006,  1037,  1064,  1038,  1007,  1006,  2030,  1052,  1006,  1038,
         1007,  1027,  1052,  1006,  1038,  1064,  1037,  1007,  1007,  1010,
         2073,  1996,  7471,  3347, 14796, 14372,  1006,  2009,  2003,  3191,
         2004,  1523,  9723,  1997,  1037, 19635,  9723,  1997,  1037,  2445,
         1038,  1010,  1524,  4385,  1012,  1007,  1012,  1996,  2034, 14869,
         2003,  6082,  2084,  2500,  2000,  2236,  4697,  1996,  4145,  2000,
         1050,  2824,  1012, 12613,  3973,  2824,  1041,  2487,  1010,  1041,
         2475,  1010,  1529,  1010,  4372,  2024,  2981,  2065,  1052,  1006,
         1041,  2487,  1604,  1041,  2475,  1087,  1087,  1087,  1604,  4372,
         1007,  1027,  1052,  1006,  1041,  2487,  1007,  1598,  1052,  1006,
         1041,  2475,  1007,  1598,  1087,  1087,  1087,  1598,  1052,  1006,
         4372,  1007,  1012,   102])"
1387,0,[], Independence of Events,seg_313,example 5.58 student selection,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([4336, 1997, 2824])","tensor([ 101, 2742, 1019, 1012, 5388, 3076, 4989,  102])"
1388,1,['probability'], Independence of Events,seg_313,"one class has 5 girls and 10 boys. another class has 8 girls and 7 boys. if one student each is selected from both classes, what is the probability that (i) both are boys, (ii) both are girls, and (iii) one boy and one girl?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([4336, 1997, 2824])","tensor([ 101, 2028, 2465, 2038, 1019, 3057, 1998, 2184, 3337, 1012, 2178, 2465,
        2038, 1022, 3057, 1998, 1021, 3337, 1012, 2065, 2028, 3076, 2169, 2003,
        3479, 2013, 2119, 4280, 1010, 2054, 2003, 1996, 9723, 2008, 1006, 1045,
        1007, 2119, 2024, 3337, 1010, 1006, 2462, 1007, 2119, 2024, 3057, 1010,
        1998, 1006, 3523, 1007, 2028, 2879, 1998, 2028, 2611, 1029,  102])"
1389,1,"['probability', 'events', 'event', 'independent']", Independence of Events,seg_313,"solution 5.58 let “ai” denote the event of selecting a boy and “bi” denote the event of selecting a girl from ith class. p(a1) = 10∕15 = 2∕3 and p(a2) = 7∕15. the probability that both are boys = 2/3*7/15 = 14/45, (ii) probability that both are girls= 1/3*8/15 = 8/45, and (iii) one boy and one girl can come in two ways (boy from first class or second class). thus, the probability that one is a boy and other is a girl is (2/3)*(8/15) + (1/3)*(7/15) = 23/45 as the events “a” and “b” are independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([4336, 1997, 2824])","tensor([  101,  5576,  1019,  1012,  5388,  2292,  1523,  9932,  1524, 19090,
         1996,  2724,  1997, 17739,  1037,  2879,  1998,  1523, 12170,  1524,
        19090,  1996,  2724,  1997, 17739,  1037,  2611,  2013,  2009,  2232,
         2465,  1012,  1052,  1006, 17350,  1007,  1027,   100,  1027,   100,
         1998,  1052,  1006, 22441,  1007,  1027,   100,  1012,  1996,  9723,
         2008,  2119,  2024,  3337,  1027,  1016,  1013,  1017,  1008,  1021,
         1013,  2321,  1027,  2403,  1013,  3429,  1010,  1006,  2462,  1007,
         9723,  2008,  2119,  2024,  3057,  1027,  1015,  1013,  1017,  1008,
         1022,  1013,  2321,  1027,  1022,  1013,  3429,  1010,  1998,  1006,
         3523,  1007,  2028,  2879,  1998,  2028,  2611,  2064,  2272,  1999,
         2048,  3971,  1006,  2879,  2013,  2034,  2465,  2030,  2117,  2465,
         1007,  1012,  2947,  1010,  1996,  9723,  2008,  2028,  2003,  1037,
         2879,  1998,  2060,  2003,  1037,  2611,  2003,  1006,  1016,  1013,
         1017,  1007,  1008,  1006,  1022,  1013,  2321,  1007,  1009,  1006,
         1015,  1013,  1017,  1007,  1008,  1006,  1021,  1013,  2321,  1007,
         1027,  2603,  1013,  3429,  2004,  1996,  2824,  1523,  1037,  1524,
         1998,  1523,  1038,  1524,  2024,  2981,  1012,   102])"
1390,0,[], Independence of Events,seg_313,example 5.59 restaurant menu,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([4336, 1997, 2824])","tensor([  101,  2742,  1019,  1012,  5354,  4825, 12183,   102])"
1391,1,['probability'], Independence of Events,seg_313,"a restaurant offers 6 varieties of soup; of which 4 are vegetarian and 2 are nonveg soups; 10 varieties of the main course meal; of which 8 are nonveg and the rest 2 are vegetarian meals. if 80% of the customers take vegetarian soup, and among those 90% orders nonveg main meal, what is the probability that a randomly chosen customer will order a veg soup followed by a vegetarian main meal? if 95% of the people who orders nonveg soup also orders nonveg meals, what is the probability that a randomly chosen customer will eat vegetarian meal?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4336, 1997, 2824])","tensor([  101,  1037,  4825,  4107,  1020,  9903,  1997, 11350,  1025,  1997,
         2029,  1018,  2024, 23566,  1998,  1016,  2024,  2512,  3726,  2290,
        11350,  2015,  1025,  2184,  9903,  1997,  1996,  2364,  2607,  7954,
         1025,  1997,  2029,  1022,  2024,  2512,  3726,  2290,  1998,  1996,
         2717,  1016,  2024, 23566, 12278,  1012,  2065,  3770,  1003,  1997,
         1996,  6304,  2202, 23566, 11350,  1010,  1998,  2426,  2216,  3938,
         1003,  4449,  2512,  3726,  2290,  2364,  7954,  1010,  2054,  2003,
         1996,  9723,  2008,  1037, 18154,  4217,  8013,  2097,  2344,  1037,
         2310,  2290, 11350,  2628,  2011,  1037, 23566,  2364,  7954,  1029,
         2065,  5345,  1003,  1997,  1996,  2111,  2040,  4449,  2512,  3726,
         2290, 11350,  2036,  4449,  2512,  3726,  2290, 12278,  1010,  2054,
         2003,  1996,  9723,  2008,  1037, 18154,  4217,  8013,  2097,  4521,
        23566,  7954,  1029,   102])"
1392,1,"['table', 'probability', 'events']", Independence of Events,seg_313,"solution 5.59 as there are interacting events, this problem is easy to crack using a table. probability that a randomly chosen customer will order a nonveg soup is 80%. probability that this is followed by vegetarian main meal is 0.80*0.10 = 0.08 or 8%. from table 5.7, we see that 20% of the customer’s order nonveg soup, among which 95% (or 19 customers) order nonveg main meal. this means that only 1% of the customers who order nonveg soup also orders veg meal. hence, the probability that a randomly chosen customer will eat vegetarian meal (irrespective of soup type) is 8 + 1 = 9%.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4336, 1997, 2824])","tensor([  101,  5576,  1019,  1012,  5354,  2004,  2045,  2024, 21935,  2824,
         1010,  2023,  3291,  2003,  3733,  2000,  8579,  2478,  1037,  2795,
         1012,  9723,  2008,  1037, 18154,  4217,  8013,  2097,  2344,  1037,
         2512,  3726,  2290, 11350,  2003,  3770,  1003,  1012,  9723,  2008,
         2023,  2003,  2628,  2011, 23566,  2364,  7954,  2003,  1014,  1012,
         3770,  1008,  1014,  1012,  2184,  1027,  1014,  1012,  5511,  2030,
         1022,  1003,  1012,  2013,  2795,  1019,  1012,  1021,  1010,  2057,
         2156,  2008,  2322,  1003,  1997,  1996,  8013,  1521,  1055,  2344,
         2512,  3726,  2290, 11350,  1010,  2426,  2029,  5345,  1003,  1006,
         2030,  2539,  6304,  1007,  2344,  2512,  3726,  2290,  2364,  7954,
         1012,  2023,  2965,  2008,  2069,  1015,  1003,  1997,  1996,  6304,
         2040,  2344,  2512,  3726,  2290, 11350,  2036,  4449,  2310,  2290,
         7954,  1012,  6516,  1010,  1996,  9723,  2008,  1037, 18154,  4217,
         8013,  2097,  4521, 23566,  7954,  1006, 20868,  6072,  5051, 15277,
         1997, 11350,  2828,  1007,  2003,  1022,  1009,  1015,  1027,  1023,
         1003,  1012,   102])"
1393,1,"['conditional', 'events', 'continuous random variables', 'discrete', 'continuous', 'probability', 'probabilities', 'independence', 'random variables', 'random', 'conditional probabilities', 'variables', 'joint']", Independent Random Variables,seg_315,independence of events discussed earlier can be expressed in terms of conditional probabilities as p(x|y = y) = p(x). this immediately leads to independence of random variables. let x and y be discrete or continuous random variables. we define the independence in terms of probability of joint occurrence and individual occurrences as follows:,tensor(1),"tensor([0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  4336,  1997,  2824,  6936,  3041,  2064,  2022,  5228,  1999,
         3408,  1997, 18462,  4013,  3676, 14680,  2004,  1052,  1006,  1060,
         1064,  1061,  1027,  1061,  1007,  1027,  1052,  1006,  1060,  1007,
         1012,  2023,  3202,  5260,  2000,  4336,  1997,  6721, 10857,  1012,
         2292,  1060,  1998,  1061,  2022, 16246,  2030,  7142,  6721, 10857,
         1012,  2057,  9375,  1996,  4336,  1999,  3408,  1997,  9723,  1997,
         4101, 14404,  1998,  3265, 27247,  2004,  4076,  1024,   102])"
1394,1,"['random', 'random variables', 'variables', 'independent']", Independent Random Variables,seg_315,definition 5.10 two random variables x and y are independent if p(xy) = p(x) ∗ p(y).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  6210,  1019,  1012,  2184,  2048,  6721, 10857,  1060,  1998,
         1061,  2024,  2981,  2065,  1052,  1006,  1060,  2100,  1007,  1027,
         1052,  1006,  1060,  1007,  1598,  1052,  1006,  1061,  1007,  1012,
          102])"
1395,1,"['random', 'random variables', 'variables']", Independent Random Variables,seg_315,this definition can be extended to any number of random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2023,  6210,  2064,  2022,  3668,  2000,  2151,  2193,  1997,
         6721, 10857,  1012,   102])"
1396,1,"['probability', 'functions', 'independence', 'random', 'random variables', 'distribution', 'variables']", Independent Random Variables,seg_315,"as random variables have probability and distribution functions, we have several choices to define independence. two random variables x and y are independent if any of the following conditions is satisfied:– (i) f (x|y = y) = f (x), (ii) f (y|x = x) = f (y), (iii) f(x,y) = f(x) ∗ f(y), (iv) f(x|y = y) = f(x), and (v) f(y|x = x) = f(y). in addition, generating functions can also be used.",tensor(1),"tensor([0., 0., 1., 1., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2004,  6721, 10857,  2031,  9723,  1998,  4353,  4972,  1010,
         2057,  2031,  2195,  9804,  2000,  9375,  4336,  1012,  2048,  6721,
        10857,  1060,  1998,  1061,  2024,  2981,  2065,  2151,  1997,  1996,
         2206,  3785,  2003,  8510,  1024,  1516,  1006,  1045,  1007,  1042,
         1006,  1060,  1064,  1061,  1027,  1061,  1007,  1027,  1042,  1006,
         1060,  1007,  1010,  1006,  2462,  1007,  1042,  1006,  1061,  1064,
         1060,  1027,  1060,  1007,  1027,  1042,  1006,  1061,  1007,  1010,
         1006,  3523,  1007,  1042,  1006,  1060,  1010,  1061,  1007,  1027,
         1042,  1006,  1060,  1007,  1598,  1042,  1006,  1061,  1007,  1010,
         1006,  4921,  1007,  1042,  1006,  1060,  1064,  1061,  1027,  1061,
         1007,  1027,  1042,  1006,  1060,  1007,  1010,  1998,  1006,  1058,
         1007,  1042,  1006,  1061,  1064,  1060,  1027,  1060,  1007,  1027,
         1042,  1006,  1061,  1007,  1012,  1999,  2804,  1010, 11717,  4972,
         2064,  2036,  2022,  2109,  1012,   102])"
1397,1,"['simulation', 'estimated', 'outcomes', 'simulated', 'experimental', 'ratio measure', 'data', 'trial', 'frequencies', 'probability', 'trials', 'event', 'random', 'likelihood', 'experiment']", Independent Random Variables,seg_315,"an “empirical” probability is estimated after an experimental trial using known or observed frequencies of outcomes. here, the assumption is that the trials are independent. it may also be estimated using a computer simulation. experimental probability is derived numerically through the use of existing or simulated data. in the coin-tossing example, if we toss the coin 100 times and observe the number of heads that turn up, we could find the experimental probability of observing a head. objective probability is a ratio measure that expresses the likelihood of an event occurring in many repeated and identical trials of a random experiment.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2019,  1523, 17537,  1524,  9723,  2003,  4358,  2044,  2019,
         6388,  3979,  2478,  2124,  2030,  5159, 13139,  1997, 13105,  1012,
         2182,  1010,  1996, 11213,  2003,  2008,  1996,  7012,  2024,  2981,
         1012,  2009,  2089,  2036,  2022,  4358,  2478,  1037,  3274, 12504,
         1012,  6388,  9723,  2003,  5173, 15973,  2135,  2083,  1996,  2224,
         1997,  4493,  2030, 23599,  2951,  1012,  1999,  1996,  9226,  1011,
        15021,  2742,  1010,  2065,  2057, 10055,  1996,  9226,  2531,  2335,
         1998, 11949,  1996,  2193,  1997,  4641,  2008,  2735,  2039,  1010,
         2057,  2071,  2424,  1996,  6388,  9723,  1997, 14158,  1037,  2132,
         1012,  7863,  9723,  2003,  1037,  6463,  5468,  2008, 16783,  1996,
        16593,  1997,  2019,  2724, 10066,  1999,  2116,  5567,  1998,  7235,
         7012,  1997,  1037,  6721,  7551,  1012,   102])"
1398,0,[], Independent Random Variables,seg_315,example 5.60 birthday sharing,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2981,  6721, 10857])","tensor([ 101, 2742, 1019, 1012, 3438, 5798, 6631,  102])"
1399,1,['probability'], Independent Random Variables,seg_315,"a class has 60 students, of which 20 are males. find (i) probability that the birthday of at least one student falls on a sunday. (ii) probability that at least three female students will share the same birthday on wednesday. (iii) probability that at most two male students will have their birthday on a weekend.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([ 101, 1037, 2465, 2038, 3438, 2493, 1010, 1997, 2029, 2322, 2024, 3767,
        1012, 2424, 1006, 1045, 1007, 9723, 2008, 1996, 5798, 1997, 2012, 2560,
        2028, 3076, 4212, 2006, 1037, 4465, 1012, 1006, 2462, 1007, 9723, 2008,
        2012, 2560, 2093, 2931, 2493, 2097, 3745, 1996, 2168, 5798, 2006, 9317,
        1012, 1006, 3523, 1007, 9723, 2008, 2012, 2087, 2048, 3287, 2493, 2097,
        2031, 2037, 5798, 2006, 1037, 5353, 1012,  102])"
1400,1,['probability'], Independent Random Variables,seg_315,"solution 5.60 we assume that there are 52 weeks in a year (52 × 7 = 364 days). as the extra day in a year can be a sunday (for nonleap years) with probability 1/7 and other days with probability 6/7, we get the exact probability as follows. the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  5576,  1019,  1012,  3438,  2057,  7868,  2008,  2045,  2024,
         4720,  3134,  1999,  1037,  2095,  1006,  4720,  1095,  1021,  1027,
         4029,  2549,  2420,  1007,  1012,  2004,  1996,  4469,  2154,  1999,
         1037,  2095,  2064,  2022,  1037,  4465,  1006,  2005,  2512, 19738,
         2361,  2086,  1007,  2007,  9723,  1015,  1013,  1021,  1998,  2060,
         2420,  2007,  9723,  1020,  1013,  1021,  1010,  2057,  2131,  1996,
         6635,  9723,  2004,  4076,  1012,  1996,   102])"
1401,1,['probability'], Independent Random Variables,seg_315,"probability that the birthday of an arbitrary student falls on a sunday is p = 1∕7 and the probability that it does not fall on a sunday is q = 6∕7. to answer (i), we use the complement-and-conquer principle (p. 131), which is the probability that none of the student birthdays fall on a sunday. hence, the required probability is 1 − q60 = 1 − (6∕7)60. this answer is not exact. for non-leap years, the extra day can be a sunday with probability 1/7, we get the exact result as (6∕7)[1 − (6∕7)60] + (1∕7)[1 − (53∕365)60]. for leap years, the multipliers are 5/7 and 2/7. (ii) using do-little principle, the answer is one-probability that less than two female students share a birthday on wednesday. as there are 40 female",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  9723,  2008,  1996,  5798,  1997,  2019, 15275,  3076,  4212,
         2006,  1037,  4465,  2003,  1052,  1027,   100,  1998,  1996,  9723,
         2008,  2009,  2515,  2025,  2991,  2006,  1037,  4465,  2003,  1053,
         1027,   100,  1012,  2000,  3437,  1006,  1045,  1007,  1010,  2057,
         2224,  1996, 13711,  1011,  1998,  1011, 16152,  6958,  1006,  1052,
         1012, 14677,  1007,  1010,  2029,  2003,  1996,  9723,  2008,  3904,
         1997,  1996,  3076,  5798,  2015,  2991,  2006,  1037,  4465,  1012,
         6516,  1010,  1996,  3223,  9723,  2003,  1015,  1597,  1053, 16086,
         1027,  1015,  1597,  1006,   100,  1007,  3438,  1012,  2023,  3437,
         2003,  2025,  6635,  1012,  2005,  2512,  1011, 11679,  2086,  1010,
         1996,  4469,  2154,  2064,  2022,  1037,  4465,  2007,  9723,  1015,
         1013,  1021,  1010,  2057,  2131,  1996,  6635,  2765,  2004,  1006,
          100,  1007,  1031,  1015,  1597,  1006,   100,  1007,  3438,  1033,
         1009,  1006,   100,  1007,  1031,  1015,  1597,  1006,   100,  1007,
         3438,  1033,  1012,  2005, 11679,  2086,  1010,  1996,  4800, 24759,
        10136,  2024,  1019,  1013,  1021,  1998,  1016,  1013,  1021,  1012,
         1006,  2462,  1007,  2478,  2079,  1011,  2210,  6958,  1010,  1996,
         3437,  2003,  2028,  1011,  9723,  2008,  2625,  2084,  2048,  2931,
         2493,  3745,  1037,  5798,  2006,  9317,  1012,  2004,  2045,  2024,
         2871,  2931,   102])"
1402,0,[], Independent Random Variables,seg_315,"other possibilities (only one student’s birthday is on wednesday or none have their birthday on wednesday) are irrelevant. (iii) the answer can be broken into three groups: (a) none have their birthday on a weekend, (b) only one male student has birthday on a weekend, and (c) exactly two male students have birth-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2981,  6721, 10857])","tensor([  101,  2060, 12020,  1006,  2069,  2028,  3076,  1521,  1055,  5798,
         2003,  2006,  9317,  2030,  3904,  2031,  2037,  5798,  2006,  9317,
         1007,  2024, 22537,  1012,  1006,  3523,  1007,  1996,  3437,  2064,
         2022,  3714,  2046,  2093,  2967,  1024,  1006,  1037,  1007,  3904,
         2031,  2037,  5798,  2006,  1037,  5353,  1010,  1006,  1038,  1007,
         2069,  2028,  3287,  3076,  2038,  5798,  2006,  1037,  5353,  1010,
         1998,  1006,  1039,  1007,  3599,  2048,  3287,  2493,  2031,  4182,
         1011,   102])"
1403,0,[], Independent Random Variables,seg_315,example 5.61 chessboard squares,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2981,  6721, 10857])","tensor([  101,  2742,  1019,  1012,  6079,  7433,  6277, 14320,   102])"
1404,1,"['probability', 'random']", Independent Random Variables,seg_315,"if two squares are chosen at random on a chessboard, what is the probability that they will form a rectangle?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  2065,  2048, 14320,  2024,  4217,  2012,  6721,  2006,  1037,
         7433,  6277,  1010,  2054,  2003,  1996,  9723,  2008,  2027,  2097,
         2433,  1037, 28667, 23395,  1029,   102])"
1405,1,"['cases', 'events']", Independent Random Variables,seg_315,"solution 5.61 there are 64 squares in total on the chessboard. the chosen squares will form a rectangle when they are adjacent and either horizontally or vertically aligned (but not diagonally). let these be denoted by events x and y. the total favorable cases for x to materialize on any row are seven (as this could happen in (1,2),(2,3), ..., (7,8)) squares. as there are eight rows, the total number of favorable cases for x is 8 × 7 = 56. similarly, there are 56 cases for vertical alignment along any of the columns. thus, the total number of favorable cases is 56 + 56 = 112. total number of ways to choose",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  5576,  1019,  1012,  6079,  2045,  2024,  4185, 14320,  1999,
         2561,  2006,  1996,  7433,  6277,  1012,  1996,  4217, 14320,  2097,
         2433,  1037, 28667, 23395,  2043,  2027,  2024,  5516,  1998,  2593,
        23190,  2030, 20018, 13115,  1006,  2021,  2025, 19754,  2135,  1007,
         1012,  2292,  2122,  2022, 19537,  2011,  2824,  1060,  1998,  1061,
         1012,  1996,  2561, 11119,  3572,  2005,  1060,  2000,  3430,  4697,
         2006,  2151,  5216,  2024,  2698,  1006,  2004,  2023,  2071,  4148,
         1999,  1006,  1015,  1010,  1016,  1007,  1010,  1006,  1016,  1010,
         1017,  1007,  1010,  1012,  1012,  1012,  1010,  1006,  1021,  1010,
         1022,  1007,  1007, 14320,  1012,  2004,  2045,  2024,  2809, 10281,
         1010,  1996,  2561,  2193,  1997, 11119,  3572,  2005,  1060,  2003,
         1022,  1095,  1021,  1027,  5179,  1012,  6660,  1010,  2045,  2024,
         5179,  3572,  2005,  7471, 12139,  2247,  2151,  1997,  1996,  7753,
         1012,  2947,  1010,  1996,  2561,  2193,  1997, 11119,  3572,  2003,
         5179,  1009,  5179,  1027, 11176,  1012,  2561,  2193,  1997,  3971,
         2000,  5454,   102])"
1406,0,[], Independent Random Variables,seg_315,two squares on a chessboard of 64 squares is ( 6 2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2981,  6721, 10857])","tensor([  101,  2048, 14320,  2006,  1037,  7433,  6277,  1997,  4185, 14320,
         2003,  1006,  1020,  1016,   102])"
1407,0,[], Independent Random Variables,seg_315,"4). hence, the required",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2981,  6721, 10857])","tensor([ 101, 1018, 1007, 1012, 6516, 1010, 1996, 3223,  102])"
1408,1,"['sample space', 'sample']", Independent Random Variables,seg_315,probability = total favorable cases/number of points in the sample space = 112∕( 6 2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2981,  6721, 10857])","tensor([  101,  9723,  1027,  2561, 11119,  3572,  1013,  2193,  1997,  2685,
         1999,  1996,  7099,  2686,  1027,   100,  1006,  1020,  1016,   102])"
1409,1,"['probability', 'outcomes', 'event', 'trials', 'random', 'experiment']", FREQUENCY APPROACH,seg_317,"consider a random experiment that is conducted n times under identical conditions. if an event x occurs r times out of the n equally likely outcomes, the ratio r/n can be considered as the probability of occurrence of the event x. this probability may fluctuate for small values of n but will stabilize for large values. symbolically, p(x) = r∕n = number of favorable cases/total number of trials.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([6075, 3921])","tensor([  101,  5136,  1037,  6721,  7551,  2008,  2003,  4146,  1050,  2335,
         2104,  7235,  3785,  1012,  2065,  2019,  2724,  1060,  5158,  1054,
         2335,  2041,  1997,  1996,  1050,  8053,  3497, 13105,  1010,  1996,
         6463,  1054,  1013,  1050,  2064,  2022,  2641,  2004,  1996,  9723,
         1997, 14404,  1997,  1996,  2724,  1060,  1012,  2023,  9723,  2089,
        19857,  6593, 20598,  2005,  2235,  5300,  1997,  1050,  2021,  2097,
        27790,  2005,  2312,  5300,  1012, 12613,  3973,  1010,  1052,  1006,
         1060,  1007,  1027,   100,  1027,  2193,  1997, 11119,  3572,  1013,
         2561,  2193,  1997,  7012,  1012,   102])"
1410,1,"['sample space', 'probability', 'frequency', 'probabilities', 'distributions', 'trials', 'sample', 'random']", FREQUENCY APPROACH,seg_317,"definition 5.11 probabilities computed using frequency distributions or random trials that are repeated under identical conditions are called empirical probability. this approach can be used when the sample space is fuzzy, uncountable, or even unknown.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6075, 3921])","tensor([  101,  6210,  1019,  1012,  2340,  4013,  3676, 14680, 24806,  2478,
         6075, 20611,  2030,  6721,  7012,  2008,  2024,  5567,  2104,  7235,
         3785,  2024,  2170, 17537,  9723,  1012,  2023,  3921,  2064,  2022,
         2109,  2043,  1996,  7099,  2686,  2003, 18001,  1010,  4895,  3597,
        16671,  3085,  1010,  2030,  2130,  4242,  1012,   102])"
1411,1,"['probability', 'table', 'range']", FREQUENCY APPROACH,seg_317,"the bmi values of 200 patients are given in table 5.8. find the probability that a new patient will have a bmi in the range (i) “24–27,” (ii) between 21 and 27, and (iii) at least 30?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([6075, 3921])","tensor([ 101, 1996, 1038, 4328, 5300, 1997, 3263, 5022, 2024, 2445, 1999, 2795,
        1019, 1012, 1022, 1012, 2424, 1996, 9723, 2008, 1037, 2047, 5776, 2097,
        2031, 1037, 1038, 4328, 1999, 1996, 2846, 1006, 1045, 1007, 1523, 2484,
        1516, 2676, 1010, 1524, 1006, 2462, 1007, 2090, 2538, 1998, 2676, 1010,
        1998, 1006, 3523, 1007, 2012, 2560, 2382, 1029,  102])"
1412,1,"['range', 'table', 'frequency', 'estimates', 'probabilities', 'relative frequency', 'sample', 'sample size']", FREQUENCY APPROACH,seg_317,"solution 5.62 from the table, the relative frequency of patients with bmi in the range “24–27” is p = 67∕200, which is the required answer. for part (ii) by the frequency approach, we get p = (56 + 67)∕200 = 123∕200; for part (iii) by the frequency approach, we get p = (11 + 2)∕200 = 0.065. the probabilities obtained are only estimates of the towards true value. if the sample size is increased from 200 to 2000, some of these probabilities may improve slightly toward true value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6075, 3921])","tensor([  101,  5576,  1019,  1012,  5786,  2013,  1996,  2795,  1010,  1996,
         5816,  6075,  1997,  5022,  2007,  1038,  4328,  1999,  1996,  2846,
         1523,  2484,  1516,  2676,  1524,  2003,  1052,  1027,   100,  1010,
         2029,  2003,  1996,  3223,  3437,  1012,  2005,  2112,  1006,  2462,
         1007,  2011,  1996,  6075,  3921,  1010,  2057,  2131,  1052,  1027,
         1006,  5179,  1009,  6163,  1007,   100,  1027,   100,  1025,  2005,
         2112,  1006,  3523,  1007,  2011,  1996,  6075,  3921,  1010,  2057,
         2131,  1052,  1027,  1006,  2340,  1009,  1016,  1007,   100,  1027,
         1014,  1012,  5757,  2629,  1012,  1996,  4013,  3676, 14680,  4663,
         2024,  2069, 10035,  1997,  1996,  2875,  2995,  3643,  1012,  2065,
         1996,  7099,  2946,  2003,  3445,  2013,  3263,  2000,  2456,  1010,
         2070,  1997,  2122,  4013,  3676, 14680,  2089,  5335,  3621,  2646,
         2995,  3643,  1012,   102])"
1413,0,[], FREQUENCY APPROACH,seg_317,example 5.63 newspaper readership,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([6075, 3921])","tensor([ 101, 2742, 1019, 1012, 6191, 3780, 8141, 5605,  102])"
1414,1,['probability'], FREQUENCY APPROACH,seg_317,consider the example 11 in page 5–26. what is the probability that a randomly chosen person reads either of the newspapers?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6075, 3921])","tensor([  101,  5136,  1996,  2742,  2340,  1999,  3931,  1019,  1516,  2656,
         1012,  2054,  2003,  1996,  9723,  2008,  1037, 18154,  4217,  2711,
         9631,  2593,  1997,  1996,  6399,  1029,   102])"
1415,1,"['probability', 'events']", FREQUENCY APPROACH,seg_317,"solution 5.63 define the events a and b as before. the required probability is p(a ∪ b) = p(a) + p(b) − p(a ∩ b). as we are given that p(a ∩ b) = 0.10, we could directly obtain p(a ∪ b) as 1 − p(a ∩ b) = 1 − 0.10 = 0.90.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6075, 3921])","tensor([ 101, 5576, 1019, 1012, 6191, 9375, 1996, 2824, 1037, 1998, 1038, 2004,
        2077, 1012, 1996, 3223, 9723, 2003, 1052, 1006, 1037, 1605, 1038, 1007,
        1027, 1052, 1006, 1037, 1007, 1009, 1052, 1006, 1038, 1007, 1597, 1052,
        1006, 1037, 1604, 1038, 1007, 1012, 2004, 2057, 2024, 2445, 2008, 1052,
        1006, 1037, 1604, 1038, 1007, 1027, 1014, 1012, 2184, 1010, 2057, 2071,
        3495, 6855, 1052, 1006, 1037, 1605, 1038, 1007, 2004, 1015, 1597, 1052,
        1006, 1037, 1604, 1038, 1007, 1027, 1015, 1597, 1014, 1012, 2184, 1027,
        1014, 1012, 3938, 1012,  102])"
1416,0,[], FREQUENCY APPROACH,seg_317,example 5.64 human blood groups,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([6075, 3921])","tensor([ 101, 2742, 1019, 1012, 4185, 2529, 2668, 2967,  102])"
1417,1,"['probability', 'percentage']", FREQUENCY APPROACH,seg_317,"the human blood is categorized into four groups called “a,” “b,” “o,” and “ab” using the presence of an antigen on the cell marker. suppose that the percentage of people with these blood groups is 40, 12, 43, and 5, respectively. find the probability that (i) two persons getting married are of blood group “a,” (ii) two persons getting married are of the same blood group, and (iii) a child will be born with blood group “o.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([6075, 3921])","tensor([  101,  1996,  2529,  2668,  2003, 20427,  2046,  2176,  2967,  2170,
         1523,  1037,  1010,  1524,  1523,  1038,  1010,  1524,  1523,  1051,
         1010,  1524,  1998,  1523, 11113,  1524,  2478,  1996,  3739,  1997,
         2019, 28873,  2006,  1996,  3526, 12115,  1012,  6814,  2008,  1996,
         7017,  1997,  2111,  2007,  2122,  2668,  2967,  2003,  2871,  1010,
         2260,  1010,  4724,  1010,  1998,  1019,  1010,  4414,  1012,  2424,
         1996,  9723,  2008,  1006,  1045,  1007,  2048,  5381,  2893,  2496,
         2024,  1997,  2668,  2177,  1523,  1037,  1010,  1524,  1006,  2462,
         1007,  2048,  5381,  2893,  2496,  2024,  1997,  1996,  2168,  2668,
         2177,  1010,  1998,  1006,  3523,  1007,  1037,  2775,  2097,  2022,
         2141,  2007,  2668,  2177,  1523,  1051,  1012,  1524,   102])"
1418,1,"['cases', 'table', 'probability', 'product rule', 'frequency', 'probabilities']", FREQUENCY APPROACH,seg_317,"solution 5.64 using the frequency approach, we expect the probability of any person with blood group “a” as 0.40. denote this as p(a) = 0.40. thus, the probability that both couples are of type “a” is 0.4*0.4 = 0.16 by the product rule. (ii) we need to add the probabilities for each couple to be of the same type. this gives p = 0.4 ∗ 0.4 + 0.12 ∗ 0.12 + 0.43 ∗ 0.43 + 0.05 ∗ 0.05 = 0.3618. (iii) assuming that all possible blood types are present among the parents, there are 16 possibilities. from the table 5.9 page 173, we see that an “o” occurs in nine cases. hence, the required probability is 9/16.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([6075, 3921])","tensor([  101,  5576,  1019,  1012,  4185,  2478,  1996,  6075,  3921,  1010,
         2057,  5987,  1996,  9723,  1997,  2151,  2711,  2007,  2668,  2177,
         1523,  1037,  1524,  2004,  1014,  1012,  2871,  1012, 19090,  2023,
         2004,  1052,  1006,  1037,  1007,  1027,  1014,  1012,  2871,  1012,
         2947,  1010,  1996,  9723,  2008,  2119,  6062,  2024,  1997,  2828,
         1523,  1037,  1524,  2003,  1014,  1012,  1018,  1008,  1014,  1012,
         1018,  1027,  1014,  1012,  2385,  2011,  1996,  4031,  3627,  1012,
         1006,  2462,  1007,  2057,  2342,  2000,  5587,  1996,  4013,  3676,
        14680,  2005,  2169,  3232,  2000,  2022,  1997,  1996,  2168,  2828,
         1012,  2023,  3957,  1052,  1027,  1014,  1012,  1018,  1598,  1014,
         1012,  1018,  1009,  1014,  1012,  2260,  1598,  1014,  1012,  2260,
         1009,  1014,  1012,  4724,  1598,  1014,  1012,  4724,  1009,  1014,
         1012,  5709,  1598,  1014,  1012,  5709,  1027,  1014,  1012,  4029,
        15136,  1012,  1006,  3523,  1007, 10262,  2008,  2035,  2825,  2668,
         4127,  2024,  2556,  2426,  1996,  3008,  1010,  2045,  2024,  2385,
        12020,  1012,  2013,  1996,  2795,  1019,  1012,  1023,  3931, 19410,
         1010,  2057,  2156,  2008,  2019,  1523,  1051,  1524,  5158,  1999,
         3157,  3572,  1012,  6516,  1010,  1996,  3223,  9723,  2003,  1023,
         1013,  2385,  1012,   102])"
1419,1,"['probability', 'data', 'entropy']", Entropy Versus Probability,seg_319,"entropy is a term that originated in data communication. it is a measure of the uncertainty in a system. small entropy values indicate the presence of structure and large entropy values indicate randomness. probability and entropy are inversely related. this means that the probability of certainty is 1 while entropy of certainty is 0. while the probability quantifies the degree of belief, the entropy quantifies the lack of pattern or organization. it is used in data communications, decision tree induction, and many other fields [2].",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23077,  6431,  9723])","tensor([  101, 23077,  2003,  1037,  2744,  2008,  7940,  1999,  2951,  4807,
         1012,  2009,  2003,  1037,  5468,  1997,  1996, 12503,  1999,  1037,
         2291,  1012,  2235, 23077,  5300,  5769,  1996,  3739,  1997,  3252,
         1998,  2312, 23077,  5300,  5769,  6721,  2791,  1012,  9723,  1998,
        23077,  2024, 19262,  2135,  3141,  1012,  2023,  2965,  2008,  1996,
         9723,  1997, 15855,  2003,  1015,  2096, 23077,  1997, 15855,  2003,
         1014,  1012,  2096,  1996,  9723, 24110,  3775, 14213,  1996,  3014,
         1997,  6772,  1010,  1996, 23077, 24110,  3775, 14213,  1996,  3768,
         1997,  5418,  2030,  3029,  1012,  2009,  2003,  2109,  1999,  2951,
         4806,  1010,  3247,  3392, 15946,  1010,  1998,  2116,  2060,  4249,
         1031,  1016,  1033,  1012,   102])"
1420,1,"['conditional probability', 'sample space', 'probability', 'bayes', 'events', 'event', 'bayes theorem', 'sample', 'random', 'random variables', 'condition', 'variables', 'conditional']", BAYES THEOREM,seg_321,"this theorem was invented by the english mathematician and cleric thomas bayes (1702–1761) but was published posthumously in 1763. the basic ingredient of bayes theorem is conditional probability. here, the word “conditional” implies that an event depends on one or more conditions being fulfilled. usually, the condition is the occurrence of another event. conditional probability concept is always based on two or more events (in the same sample space) or random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0.])","tensor([3016, 2229, 9872])","tensor([  101,  2023,  9872,  2001,  8826,  2011,  1996,  2394, 13235,  1998,
        29307,  2726,  3016,  2229,  1006, 26776,  1516, 21364,  1007,  2021,
         2001,  2405, 12770,  1999, 18432,  1012,  1996,  3937, 21774,  1997,
         3016,  2229,  9872,  2003, 18462,  9723,  1012,  2182,  1010,  1996,
         2773,  1523, 18462,  1524, 12748,  2008,  2019,  2724,  9041,  2006,
         2028,  2030,  2062,  3785,  2108, 16829,  1012,  2788,  1010,  1996,
         4650,  2003,  1996, 14404,  1997,  2178,  2724,  1012, 18462,  9723,
         4145,  2003,  2467,  2241,  2006,  2048,  2030,  2062,  2824,  1006,
         1999,  1996,  2168,  7099,  2686,  1007,  2030,  6721, 10857,  1012,
          102])"
1421,1,"['conditional probability', 'sample space', 'probability', 'event', 'sample', 'conditional']", BAYES THEOREM,seg_321,definition 5.12 conditional probability is the probability of occurrence of an event with prior knowledge or assumption about another event defined on the same sample space.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  6210,  1019,  1012,  2260, 18462,  9723,  2003,  1996,  9723,
         1997, 14404,  1997,  2019,  2724,  2007,  3188,  3716,  2030, 11213,
         2055,  2178,  2724,  4225,  2006,  1996,  2168,  7099,  2686,  1012,
          102])"
1422,0,[], BAYES THEOREM,seg_321,example 5.65 soxes and colors,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3016, 2229, 9872])","tensor([ 101, 2742, 1019, 1012, 3515, 9175, 2229, 1998, 6087,  102])"
1423,1,"['probability', 'conditional probability', 'conditional']", BAYES THEOREM,seg_321,"suppose that a drawer contains n pairs of soxes. all soxes are exactly alike except for the color. in utter darkness, a boy wishes to grab just enough number of soxes so that at least two of them are of the same color (he need not have to go and grab another one). what is the minimum number of soxes to grab if (i) there are only two possible colors ((black and white), (ii) there are three possible colors?, (iii) what is the probability of obtaining two whites in a grab of size 3?, and (iv) a kid grabs four soxes. one of them is found to be a black. what is the conditional probability that the other three together will make two matching pairs?.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  6814,  2008,  1037, 13065,  3397,  1050,  7689,  1997,  9175,
         2229,  1012,  2035,  9175,  2229,  2024,  3599, 11455,  3272,  2005,
         1996,  3609,  1012,  1999, 14395,  4768,  1010,  1037,  2879,  8996,
         2000,  6723,  2074,  2438,  2193,  1997,  9175,  2229,  2061,  2008,
         2012,  2560,  2048,  1997,  2068,  2024,  1997,  1996,  2168,  3609,
         1006,  2002,  2342,  2025,  2031,  2000,  2175,  1998,  6723,  2178,
         2028,  1007,  1012,  2054,  2003,  1996,  6263,  2193,  1997,  9175,
         2229,  2000,  6723,  2065,  1006,  1045,  1007,  2045,  2024,  2069,
         2048,  2825,  6087,  1006,  1006,  2304,  1998,  2317,  1007,  1010,
         1006,  2462,  1007,  2045,  2024,  2093,  2825,  6087,  1029,  1010,
         1006,  3523,  1007,  2054,  2003,  1996,  9723,  1997, 11381,  2048,
        12461,  1999,  1037,  6723,  1997,  2946,  1017,  1029,  1010,  1998,
         1006,  4921,  1007,  1037,  4845, 13273,  2176,  9175,  2229,  1012,
         2028,  1997,  2068,  2003,  2179,  2000,  2022,  1037,  2304,  1012,
         2054,  2003,  1996, 18462,  9723,  2008,  1996,  2060,  2093,  2362,
         2097,  2191,  2048,  9844,  7689,  1029,  1012,   102])"
1424,1,['cases'], BAYES THEOREM,seg_321,solution 5.65 let the two colors be black (b) and white (w). minimum grabs cannot be 2 as they could be of opposite color. let it be three. the possible cases,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  5576,  1019,  1012,  3515,  2292,  1996,  2048,  6087,  2022,
         2304,  1006,  1038,  1007,  1998,  2317,  1006,  1059,  1007,  1012,
         6263, 13273,  3685,  2022,  1016,  2004,  2027,  2071,  2022,  1997,
         4500,  3609,  1012,  2292,  2009,  2022,  2093,  1012,  1996,  2825,
         3572,   102])"
1425,1,"['cases', 'probability', 'permutations', 'combination', 'case']", BAYES THEOREM,seg_321,"are {b,b,b}, {b,b,w}, {b,w,b}, {w,b,b}, {b,w,w}, {w,b,w}, {w,w,b}, and {w,w,w}. because the order is unimportant, some of these are exactly identical. (i) as every combination should include either two blacks or two whites, the minimum number of soxes to grab is 3. for case (ii), let the three colors be black (b), red (r), and white (w). if the minimum number of soxes grabbed is 3, there is only one case {b,r,w} (or its permutations) where a match cannot occur. however, if the minimum number of soxes grabbed is 4, a match will always occur. (iii) the answer is easily seen to be 0.5 from above. (iv) as one of them is black, the other three should contain two whites and one black to make two matching pairs or all three blacks. the favorable cases are {b,w,w}, {w,b,w},{w,w,b}, and {b,b,b}. the required probability is 4/8 = 1/2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  2024,  1063,  1038,  1010,  1038,  1010,  1038,  1065,  1010,
         1063,  1038,  1010,  1038,  1010,  1059,  1065,  1010,  1063,  1038,
         1010,  1059,  1010,  1038,  1065,  1010,  1063,  1059,  1010,  1038,
         1010,  1038,  1065,  1010,  1063,  1038,  1010,  1059,  1010,  1059,
         1065,  1010,  1063,  1059,  1010,  1038,  1010,  1059,  1065,  1010,
         1063,  1059,  1010,  1059,  1010,  1038,  1065,  1010,  1998,  1063,
         1059,  1010,  1059,  1010,  1059,  1065,  1012,  2138,  1996,  2344,
         2003,  4895,  5714,  6442,  4630,  1010,  2070,  1997,  2122,  2024,
         3599,  7235,  1012,  1006,  1045,  1007,  2004,  2296,  5257,  2323,
         2421,  2593,  2048, 10823,  2030,  2048, 12461,  1010,  1996,  6263,
         2193,  1997,  9175,  2229,  2000,  6723,  2003,  1017,  1012,  2005,
         2553,  1006,  2462,  1007,  1010,  2292,  1996,  2093,  6087,  2022,
         2304,  1006,  1038,  1007,  1010,  2417,  1006,  1054,  1007,  1010,
         1998,  2317,  1006,  1059,  1007,  1012,  2065,  1996,  6263,  2193,
         1997,  9175,  2229,  4046,  2003,  1017,  1010,  2045,  2003,  2069,
         2028,  2553,  1063,  1038,  1010,  1054,  1010,  1059,  1065,  1006,
         2030,  2049,  2566, 28120, 10708,  1007,  2073,  1037,  2674,  3685,
         5258,  1012,  2174,  1010,  2065,  1996,  6263,  2193,  1997,  9175,
         2229,  4046,  2003,  1018,  1010,  1037,  2674,  2097,  2467,  5258,
         1012,  1006,  3523,  1007,  1996,  3437,  2003,  4089,  2464,  2000,
         2022,  1014,  1012,  1019,  2013,  2682,  1012,  1006,  4921,  1007,
         2004,  2028,  1997,  2068,  2003,  2304,  1010,  1996,  2060,  2093,
         2323,  5383,  2048, 12461,  1998,  2028,  2304,  2000,  2191,  2048,
         9844,  7689,  2030,  2035,  2093, 10823,  1012,  1996, 11119,  3572,
         2024,  1063,  1038,  1010,  1059,  1010,  1059,  1065,  1010,  1063,
         1059,  1010,  1038,  1010,  1059,  1065,  1010,  1063,  1059,  1010,
         1059,  1010,  1038,  1065,  1010,  1998,  1063,  1038,  1010,  1038,
         1010,  1038,  1065,  1012,  1996,  3223,  9723,  2003,  1018,  1013,
         1022,  1027,  1015,  1013,  1016,  1012,   102])"
1426,1,"['conditional probability', 'observation', 'probability', 'hypothesis', 'conditional']", BAYES THEOREM,seg_321,"bayes theorem is a convenient way to compute the conditional probability of a hypothesis h given that an observation (evidence) e has occurred using the probability of an observation, given that a hypothesis has occurred.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  3016,  2229,  9872,  2003,  1037, 14057,  2126,  2000, 24134,
         1996, 18462,  9723,  1997,  1037, 10744,  1044,  2445,  2008,  2019,
         8089,  1006,  3350,  1007,  1041,  2038,  4158,  2478,  1996,  9723,
         1997,  2019,  8089,  1010,  2445,  2008,  1037, 10744,  2038,  4158,
         1012,   102])"
1427,1,"['probability', 'joint', 'hypothesis']", BAYES THEOREM,seg_321,lemma 5 probability of hypothesis given evidence is the ratio of joint occurrence of hypothesis and evidence over probability of evidence. p(h|e) = p(h ∩ e)∕p(e).,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  3393, 14760,  1019,  9723,  1997, 10744,  2445,  3350,  2003,
         1996,  6463,  1997,  4101, 14404,  1997, 10744,  1998,  3350,  2058,
         9723,  1997,  3350,  1012,  1052,  1006,  1044,  1064,  1041,  1007,
         1027,  1052,  1006,  1044,  1604,  1041,  1007,   100,  1006,  1041,
         1007,  1012,   102])"
1428,1,"['probability', 'probabilities', 'hypothesis']", BAYES THEOREM,seg_321,corollary 3 the unconditional probability of hypothesis is the sum of the products of the probabilities of hypothesis given evidence and probability of evidence; and probability of hypothesis given no evidence and probability of no-evidence. p(h) = p(h|e).p(e) + p(h|e).p(e).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  2522, 28402,  5649,  1017,  1996,  4895,  8663, 27064,  9723,
         1997, 10744,  2003,  1996,  7680,  1997,  1996,  3688,  1997,  1996,
         4013,  3676, 14680,  1997, 10744,  2445,  3350,  1998,  9723,  1997,
         3350,  1025,  1998,  9723,  1997, 10744,  2445,  2053,  3350,  1998,
         9723,  1997,  2053,  1011,  3350,  1012,  1052,  1006,  1044,  1007,
         1027,  1052,  1006,  1044,  1064,  1041,  1007,  1012,  1052,  1006,
         1041,  1007,  1009,  1052,  1006,  1044,  1064,  1041,  1007,  1012,
         1052,  1006,  1041,  1007,  1012,   102])"
1429,1,"['posterior', 'probability', 'bayes', 'probabilities', 'bayes theorem', 'prior probabilities', 'likelihood', 'posterior probability']", BAYES THEOREM,seg_321,"here, p(h|e) is the posterior probability. these can be obtained from each other with the help of prior probabilities and likelihood as given by bayes theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 0.])","tensor([3016, 2229, 9872])","tensor([  101,  2182,  1010,  1052,  1006,  1044,  1064,  1041,  1007,  2003,
         1996, 15219,  9723,  1012,  2122,  2064,  2022,  4663,  2013,  2169,
         2060,  2007,  1996,  2393,  1997,  3188,  4013,  3676, 14680,  1998,
        16593,  2004,  2445,  2011,  3016,  2229,  9872,  1012,   102])"
1430,1,"['posterior', 'associated', 'probability', 'estimated', 'bayes', 'information', 'probabilities', 'bayes theorem', 'sample', 'risks', 'likelihood', 'posterior probability', 'data']", Bayes Theorem for Conditional Probability,seg_323,"this theorem is also known as the law of inverse probability. bayes theorem is used to calculate posterior probability in terms of priors. in other words, bayes theorem analyzes the root causes and associated risks of alternatives using empirical data to come up with the best plausible aposteriori probability or probability of occurrence of hypothetical causes. conceptually, posterior = likelihood × prior/evidence where likelihood is estimated from sample data or found by other means. it expresses aposteriori probability in terms of apriori probabilities using newly acquired information.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2023,  9872,  2003,  2036,  2124,  2004,  1996,  2375,  1997,
        19262,  9723,  1012,  3016,  2229,  9872,  2003,  2109,  2000, 18422,
        15219,  9723,  1999,  3408,  1997,  3188,  2015,  1012,  1999,  2060,
         2616,  1010,  3016,  2229,  9872, 17908,  2015,  1996,  7117,  5320,
         1998,  3378, 10831,  1997, 15955,  2478, 17537,  2951,  2000,  2272,
         2039,  2007,  1996,  2190, 24286,  9706, 14122, 11124, 10050,  9723,
         2030,  9723,  1997, 14404,  1997, 25613,  5320,  1012, 17158,  2135,
         1010, 15219,  1027, 16593,  1095,  3188,  1013,  3350,  2073, 16593,
         2003,  4358,  2013,  7099,  2951,  2030,  2179,  2011,  2060,  2965,
         1012,  2009, 16783,  9706, 14122, 11124, 10050,  9723,  1999,  3408,
         1997, 19804, 25346,  2072,  4013,  3676, 14680,  2478,  4397,  3734,
         2592,  1012,   102])"
1431,1,"['probability', 'events', 'outcomes']", Bayes Theorem for Conditional Probability,seg_323,"let x and y be two arbitrary events. suppose that y has already occurred. if x and y have some outcomes in common, x will occur iff x ∩ y occurs. this is symbolically denoted as p(x|y) = p(x ∩ y)∕p(y). cross-multiply to get p(x ∩ y) = p(y) ∗ p(x|y). as x and y are arbitrary, this can also be expressed as p(x ∩ y) = p(x) ∗ p(y|x). this is the multiplicative law of probability discussed earlier. in p(x|y) = p(x ∩ y)∕p(y), replace the numerator p(x ∩ y) by p(x).p(y|x). substitute in the aforementioned to get p(x|y) = p(x).p(y|x)∕p(y). using the law of total probability (page 133), we have p(y) = p(y ∩ x) + p(y ∩ x). reorder the events to get p(y) = p(x ∩ y) + p(x ∩ y). now write p(x ∩ y) = p(x) ∗ p(y|x) and p(x ∩ y) = p(x) ∗ p(y|x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2292,  1060,  1998,  1061,  2022,  2048, 15275,  2824,  1012,
         6814,  2008,  1061,  2038,  2525,  4158,  1012,  2065,  1060,  1998,
         1061,  2031,  2070, 13105,  1999,  2691,  1010,  1060,  2097,  5258,
         2065,  2546,  1060,  1604,  1061,  5158,  1012,  2023,  2003, 12613,
         3973, 19537,  2004,  1052,  1006,  1060,  1064,  1061,  1007,  1027,
         1052,  1006,  1060,  1604,  1061,  1007,   100,  1006,  1061,  1007,
         1012,  2892,  1011,  4800, 22086,  2000,  2131,  1052,  1006,  1060,
         1604,  1061,  1007,  1027,  1052,  1006,  1061,  1007,  1598,  1052,
         1006,  1060,  1064,  1061,  1007,  1012,  2004,  1060,  1998,  1061,
         2024, 15275,  1010,  2023,  2064,  2036,  2022,  5228,  2004,  1052,
         1006,  1060,  1604,  1061,  1007,  1027,  1052,  1006,  1060,  1007,
         1598,  1052,  1006,  1061,  1064,  1060,  1007,  1012,  2023,  2003,
         1996,  4800, 24759, 25184,  2375,  1997,  9723,  6936,  3041,  1012,
         1999,  1052,  1006,  1060,  1064,  1061,  1007,  1027,  1052,  1006,
         1060,  1604,  1061,  1007,   100,  1006,  1061,  1007,  1010,  5672,
         1996, 16371,  5017,  8844,  1052,  1006,  1060,  1604,  1061,  1007,
         2011,  1052,  1006,  1060,  1007,  1012,  1052,  1006,  1061,  1064,
         1060,  1007,  1012,  7681,  1999,  1996, 17289,  2000,  2131,  1052,
         1006,  1060,  1064,  1061,  1007,  1027,  1052,  1006,  1060,  1007,
         1012,  1052,  1006,  1061,  1064,  1060,  1007,   100,  1006,  1061,
         1007,  1012,  2478,  1996,  2375,  1997,  2561,  9723,  1006,  3931,
        14506,  1007,  1010,  2057,  2031,  1052,  1006,  1061,  1007,  1027,
         1052,  1006,  1061,  1604,  1060,  1007,  1009,  1052,  1006,  1061,
         1604,  1060,  1007,  1012,  2128,  8551,  2121,  1996,  2824,  2000,
         2131,  1052,  1006,  1061,  1007,  1027,  1052,  1006,  1060,  1604,
         1061,  1007,  1009,  1052,  1006,  1060,  1604,  1061,  1007,  1012,
         2085,  4339,  1052,  1006,  1060,  1604,  1061,  1007,  1027,  1052,
         1006,  1060,  1007,  1598,  1052,  1006,  1061,  1064,  1060,  1007,
         1998,  1052,  1006,  1060,  1604,  1061,  1007,  1027,  1052,  1006,
         1060,  1007,  1598,  1052,  1006,  1061,  1064,  1060,  1007,  1012,
          102])"
1432,1,"['bayes', 'hypothesis', 'bayes theorem']", Bayes Theorem for Conditional Probability,seg_323,"this is the simplest form of bayes theorem. using the hypothesis and evidence notation used earlier, if the nonoccurrence of the hypothesis is denoted by p(h), we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2023,  2003,  1996, 21304,  2433,  1997,  3016,  2229,  9872,
         1012,  2478,  1996, 10744,  1998,  3350, 14869,  2109,  3041,  1010,
         2065,  1996,  2512, 10085, 10841, 14343,  5897,  1997,  1996, 10744,
         2003, 19537,  2011,  1052,  1006,  1044,  1007,  1010,  2057,  2131,
          102])"
1433,1,"['events', 'event']", Bayes Theorem for Conditional Probability,seg_323,"next consider n events a1,a2, … ,an. let b be an event that spans at least two of the a′",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2279,  5136,  1050,  2824, 17350,  1010, 22441,  1010,  1529,
         1010,  2019,  1012,  2292,  1038,  2022,  2019,  2724,  2008, 14798,
         2012,  2560,  2048,  1997,  1996,  1037,  1531,   102])"
1434,1,"['probability', 'bayes', 'estimate', 'information', 'probabilities', 'bayes theorem']", Bayes Theorem for Conditional Probability,seg_323,"is. if the apriori probabilities of occurrence of p(b|ai) are known, we could utilize the information in obtaining an estimate of the aposteriori probability using bayes theorem. symbolically, it can be written as p(ai|b) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2003,  1012,  2065,  1996, 19804, 25346,  2072,  4013,  3676,
        14680,  1997, 14404,  1997,  1052,  1006,  1038,  1064,  9932,  1007,
         2024,  2124,  1010,  2057,  2071, 16462,  1996,  2592,  1999, 11381,
         2019, 10197,  1997,  1996,  9706, 14122, 11124, 10050,  9723,  2478,
         3016,  2229,  9872,  1012, 12613,  3973,  1010,  2009,  2064,  2022,
         2517,  2004,  1052,  1006,  9932,  1064,  1038,  1007,  1027,   102])"
1435,1,"['set', 'probability', 'data', 'case']", Bayes Theorem for Conditional Probability,seg_323,"proof: let ai denote possible explanations for a given set of data b. as the data size increases, the probability p(b|ai)p(ai) increases. if a is decomposed as a = a1 ∪ a2 ∪ · · ·an, then b can be represented as b = ba1 ∪ ba2 ∪ · · · ∪ ban. thus p(b) = ∑ip(bai) = ∑ip(ai).p(b|ai). as p(ai|b) = p(ai).p(b|ai)∕p(b), the proof follows by substituting the value for p(b). this proves the theorem for the general case.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  6947,  1024,  2292,  9932, 19090,  2825, 17959,  2005,  1037,
         2445,  2275,  1997,  2951,  1038,  1012,  2004,  1996,  2951,  2946,
         7457,  1010,  1996,  9723,  1052,  1006,  1038,  1064,  9932,  1007,
         1052,  1006,  9932,  1007,  7457,  1012,  2065,  1037,  2003, 21933,
         8737, 24768,  2004,  1037,  1027, 17350,  1605, 22441,  1605,  1087,
         1087,  1087,  2019,  1010,  2059,  1038,  2064,  2022,  3421,  2004,
         1038,  1027,  8670,  2487,  1605,  8670,  2475,  1605,  1087,  1087,
         1087,  1605,  7221,  1012,  2947,  1052,  1006,  1038,  1007,  1027,
          100,  1006, 21790,  1007,  1027,   100,  1006,  9932,  1007,  1012,
         1052,  1006,  1038,  1064,  9932,  1007,  1012,  2004,  1052,  1006,
         9932,  1064,  1038,  1007,  1027,  1052,  1006,  9932,  1007,  1012,
         1052,  1006,  1038,  1064,  9932,  1007,   100,  1006,  1038,  1007,
         1010,  1996,  6947,  4076,  2011,  4942, 21532,  1996,  3643,  2005,
         1052,  1006,  1038,  1007,  1012,  2023, 16481,  1996,  9872,  2005,
         1996,  2236,  2553,  1012,   102])"
1436,1,"['hypotheses', 'probability', 'bayes', 'estimate', 'event', 'bayes theorem', 'hypothesis', 'case']", Bayes Theorem for Conditional Probability,seg_323,"in multiple hypotheses situations, bayes theorem provides a “best” estimate for the probability of evidence under the assumption that each hypothesis is true. a generalization to the three event case easily follows as p(ab|c) = p(a|bc) ∗ p(b|c) = p(b|ac) ∗ p(a|c).",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  1999,  3674,  1044, 22571, 14573, 23072,  8146,  1010,  3016,
         2229,  9872,  3640,  1037,  1523,  2190,  1524, 10197,  2005,  1996,
         9723,  1997,  3350,  2104,  1996, 11213,  2008,  2169, 10744,  2003,
         2995,  1012,  1037,  2236,  3989,  2000,  1996,  2093,  2724,  2553,
         4089,  4076,  2004,  1052,  1006, 11113,  1064,  1039,  1007,  1027,
         1052,  1006,  1037,  1064,  4647,  1007,  1598,  1052,  1006,  1038,
         1064,  1039,  1007,  1027,  1052,  1006,  1038,  1064,  9353,  1007,
         1598,  1052,  1006,  1037,  1064,  1039,  1007,  1012,   102])"
1437,0,[], Bayes Theorem for Conditional Probability,seg_323,example 5.66 atm cash withdrawal,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2742,  1019,  1012,  5764, 27218,  5356, 10534,   102])"
1438,1,"['probability', 'information']", Bayes Theorem for Conditional Probability,seg_323,"consider cash withdrawals at an atm booth. from analysis of prior fraudulent transaction, a bank has found that the probability of any transaction to be fraudulent is one in thousand (p(fraud)= 0.001), 90% of fraudulent transactions are for amounts above 2000 (i.e., p(amount 2000|fraud) = 0.90), and 99% of cash withdrawals for amounts 2000 are genuine. using this information, what is the probability that a transaction is fraudulent, given that the withdrawal amount is 4000?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  5136,  5356, 10534,  2015,  2012,  2019, 27218,  9065,  1012,
         2013,  4106,  1997,  3188, 27105, 12598,  1010,  1037,  2924,  2038,
         2179,  2008,  1996,  9723,  1997,  2151, 12598,  2000,  2022, 27105,
         2003,  2028,  1999,  4595,  1006,  1052,  1006,  9861,  1007,  1027,
         1014,  1012, 25604,  1007,  1010,  3938,  1003,  1997, 27105, 11817,
         2024,  2005,  8310,  2682,  2456,  1006,  1045,  1012,  1041,  1012,
         1010,  1052,  1006,  3815,  2456,  1064,  9861,  1007,  1027,  1014,
         1012,  3938,  1007,  1010,  1998,  5585,  1003,  1997,  5356, 10534,
         2015,  2005,  8310,  2456,  2024, 10218,  1012,  2478,  2023,  2592,
         1010,  2054,  2003,  1996,  9723,  2008,  1037, 12598,  2003, 27105,
         1010,  2445,  2008,  1996, 10534,  3815,  2003, 20143,  1029,   102])"
1439,1,"['bayes', 'bayes theorem']", Bayes Theorem for Conditional Probability,seg_323,"solution 5.66 we have p(fraud) = 0.001, p(amount   2000|fraud) = 0.90, p(amount   2000|not fraud) = 0.99 by bayes theorem, p(fraud| amount 2000) = p(fraud) * p(amount   2000|fraud)/[p(fraud) * p(amount   2000|fraud) + p(not fraud) * p(amount   2000| not fraud)] = 0.001 * 0.90 / [0.001 * 0.90 + 0.999 * 0.99] = 0.0009/(0.0009 + 0.98901) = 0.90917 e-3 = 0.000909.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  5576,  1019,  1012,  5764,  2057,  2031,  1052,  1006,  9861,
         1007,  1027,  1014,  1012, 25604,  1010,  1052,  1006,  3815,  2456,
         1064,  9861,  1007,  1027,  1014,  1012,  3938,  1010,  1052,  1006,
         3815,  2456,  1064,  2025,  9861,  1007,  1027,  1014,  1012,  5585,
         2011,  3016,  2229,  9872,  1010,  1052,  1006,  9861,  1064,  3815,
         2456,  1007,  1027,  1052,  1006,  9861,  1007,  1008,  1052,  1006,
         3815,  2456,  1064,  9861,  1007,  1013,  1031,  1052,  1006,  9861,
         1007,  1008,  1052,  1006,  3815,  2456,  1064,  9861,  1007,  1009,
         1052,  1006,  2025,  9861,  1007,  1008,  1052,  1006,  3815,  2456,
         1064,  2025,  9861,  1007,  1033,  1027,  1014,  1012, 25604,  1008,
         1014,  1012,  3938,  1013,  1031,  1014,  1012, 25604,  1008,  1014,
         1012,  3938,  1009,  1014,  1012, 25897,  1008,  1014,  1012,  5585,
         1033,  1027,  1014,  1012,  2199,  2683,  1013,  1006,  1014,  1012,
         2199,  2683,  1009,  1014,  1012,  5818, 21057,  2487,  1007,  1027,
         1014,  1012,  3938,  2683, 16576,  1041,  1011,  1017,  1027,  1014,
         1012,  2199, 21057,  2683,  1012,   102])"
1440,1,"['bayes', 'bayes theorem']", Bayes Theorem for Conditional Probability,seg_323,"5.17.1.1 odds-likelihood ratio form of bayes theorem in some applications, we are interested in finding the ratio of the likelihoods",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  1019,  1012,  2459,  1012,  1015,  1012,  1015, 10238,  1011,
        16593,  6463,  2433,  1997,  3016,  2229,  9872,  1999,  2070,  5097,
         1010,  2057,  2024,  4699,  1999,  4531,  1996,  6463,  1997,  1996,
        16593,  2015,   102])"
1441,0,[], Bayes Theorem for Conditional Probability,seg_323,p(hypothesis1| evidence) p(hypothesis1)p(evidence/hypothesis1) = . (5.23) p(hypothesis2| evidence) p(hypothesis2)p(evidence/hypothesis2),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  1052,  1006, 10744,  2487,  1064,  3350,  1007,  1052,  1006,
        10744,  2487,  1007,  1052,  1006,  3350,  1013, 10744,  2487,  1007,
         1027,  1012,  1006,  1019,  1012,  2603,  1007,  1052,  1006, 10744,
         2475,  1064,  3350,  1007,  1052,  1006, 10744,  2475,  1007,  1052,
         1006,  3350,  1013, 10744,  2475,  1007,   102])"
1442,0,[], Bayes Theorem for Conditional Probability,seg_323,example 5.67 blood type of parents,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([ 101, 2742, 1019, 1012, 6163, 2668, 2828, 1997, 3008,  102])"
1443,1,"['probability', 'combination', 'probabilities']", Bayes Theorem for Conditional Probability,seg_323,"table 5.10 gives the break-down of the actual count of patients who visited a clinic, with the combination blood type of parents, where columns denote father’s and rows denote mother’s blood type1. a newly admitted patient only knows that her father was “o” blood type. find the probabilities that (i) her mother had blood type ab and (ii) mother was also “o” blood type. (iii) if another patient knows only that mother’s blood type is ab, what is the probability that the father’s blood type is a or o?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2795,  1019,  1012,  2184,  3957,  1996,  3338,  1011,  2091,
         1997,  1996,  5025,  4175,  1997,  5022,  2040,  4716,  1037,  9349,
         1010,  2007,  1996,  5257,  2668,  2828,  1997,  3008,  1010,  2073,
         7753, 19090,  2269,  1521,  1055,  1998, 10281, 19090,  2388,  1521,
         1055,  2668,  2828,  2487,  1012,  1037,  4397,  4914,  5776,  2069,
         4282,  2008,  2014,  2269,  2001,  1523,  1051,  1524,  2668,  2828,
         1012,  2424,  1996,  4013,  3676, 14680,  2008,  1006,  1045,  1007,
         2014,  2388,  2018,  2668,  2828, 11113,  1998,  1006,  2462,  1007,
         2388,  2001,  2036,  1523,  1051,  1524,  2668,  2828,  1012,  1006,
         3523,  1007,  2065,  2178,  5776,  4282,  2069,  2008,  2388,  1521,
         1055,  2668,  2828,  2003, 11113,  1010,  2054,  2003,  1996,  9723,
         2008,  1996,  2269,  1521,  1055,  2668,  2828,  2003,  1037,  2030,
         1051,  1029,   102])"
1444,1,"['event', 'table']", Bayes Theorem for Conditional Probability,seg_323,"solution 5.67 let x denote the event that father was “o” blood type. let yi denote the event that mother’s blood type is as given on the ith row of table 5.10. from the table 5.9 below, we find that if father is of type “o” and mother is of type “ab,” there are two possibilities for the child to have blood types a or b.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  5576,  1019,  1012,  6163,  2292,  1060, 19090,  1996,  2724,
         2008,  2269,  2001,  1523,  1051,  1524,  2668,  2828,  1012,  2292,
        12316, 19090,  1996,  2724,  2008,  2388,  1521,  1055,  2668,  2828,
         2003,  2004,  2445,  2006,  1996,  2009,  2232,  5216,  1997,  2795,
         1019,  1012,  2184,  1012,  2013,  1996,  2795,  1019,  1012,  1023,
         2917,  1010,  2057,  2424,  2008,  2065,  2269,  2003,  1997,  2828,
         1523,  1051,  1524,  1998,  2388,  2003,  1997,  2828,  1523, 11113,
         1010,  1524,  2045,  2024,  2048, 12020,  2005,  1996,  2775,  2000,
         2031,  2668,  4127,  1037,  2030,  1038,  1012,   102])"
1445,1,"['table', 'bayes', 'bayes theorem']", Bayes Theorem for Conditional Probability,seg_323,"from the above-mentioned table, we get p(y1) = 183∕456,p(y2) = 52∕456, p(y3) = 200∕456, and p(y4) = 21∕456. similarly p(x|y1) = 68∕183,p(x|y2) = 23∕52,p(x|y3) = 72∕200,p(x|y4) = 9∕21. for question (i), we need to find p(yi|x) for i = 4 and 3. using bayes theorem p(yi|x)=",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2013,  1996,  2682,  1011,  3855,  2795,  1010,  2057,  2131,
         1052,  1006,  1061,  2487,  1007,  1027,   100,  1010,  1052,  1006,
         1061,  2475,  1007,  1027,   100,  1010,  1052,  1006,  1061,  2509,
         1007,  1027,   100,  1010,  1998,  1052,  1006,  1061,  2549,  1007,
         1027,   100,  1012,  6660,  1052,  1006,  1060,  1064,  1061,  2487,
         1007,  1027,   100,  1010,  1052,  1006,  1060,  1064,  1061,  2475,
         1007,  1027,   100,  1010,  1052,  1006,  1060,  1064,  1061,  2509,
         1007,  1027,   100,  1010,  1052,  1006,  1060,  1064,  1061,  2549,
         1007,  1027,   100,  1012,  2005,  3160,  1006,  1045,  1007,  1010,
         2057,  2342,  2000,  2424,  1052,  1006, 12316,  1064,  1060,  1007,
         2005,  1045,  1027,  1018,  1998,  1017,  1012,  2478,  3016,  2229,
         9872,  1052,  1006, 12316,  1064,  1060,  1007,  1027,   102])"
1446,1,['probability'], Bayes Theorem for Conditional Probability,seg_323,"is 21/456 * 9/21= 9/456. substitute the values to get the answer to p(y4|x) = 9∕456∕[172∕456] = 9∕172. for part (ii), the numerator is p(y3).p(x|y3) = 200∕456 ∗ 72∕200 = 72∕456, so that the required probability is 72/172. as the gcd(72,172)= 4, divide both numerator and denominator by the gcd to get the answer as 18/43.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  2003,  2538,  1013,  3429,  2575,  1008,  1023,  1013,  2538,
         1027,  1023,  1013,  3429,  2575,  1012,  7681,  1996,  5300,  2000,
         2131,  1996,  3437,  2000,  1052,  1006,  1061,  2549,  1064,  1060,
         1007,  1027,   100,  1031,   100,  1033,  1027,   100,  1012,  2005,
         2112,  1006,  2462,  1007,  1010,  1996, 16371,  5017,  8844,  2003,
         1052,  1006,  1061,  2509,  1007,  1012,  1052,  1006,  1060,  1064,
         1061,  2509,  1007,  1027,   100,  1598,   100,  1027,   100,  1010,
         2061,  2008,  1996,  3223,  9723,  2003,  5824,  1013, 18253,  1012,
         2004,  1996,  1043, 19797,  1006,  5824,  1010, 18253,  1007,  1027,
         1018,  1010, 11443,  2119, 16371,  5017,  8844,  1998,  7939, 20936,
        27413,  2011,  1996,  1043, 19797,  2000,  2131,  1996,  3437,  2004,
         2324,  1013,  4724,  1012,   102])"
1447,1,"['table', 'bayes', 'event', 'bayes theorem']", Bayes Theorem for Conditional Probability,seg_323,"(ii) let y denote the event that mother’s blood type is ab. let xi denote the event that father’s blood type is as given on the ith column of table 5.10. as done earlier, we get p(x1) = 200∕456,p(x2) = 59∕456,p(x3) = 172∕456, and p(x4) = 25∕456. similarly p(y|x1) = 8∕200,p(y|x2) = 2∕59,p(y|x3) = 9∕172, and p(y|x4) = 2∕25. for part (iii), we need to find p(xi|y) for i = 1 and 3 (blood group “a” or “o”). using bayes theorem, this is p(xi|y)=",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  1006,  2462,  1007,  2292,  1061, 19090,  1996,  2724,  2008,
         2388,  1521,  1055,  2668,  2828,  2003, 11113,  1012,  2292,  8418,
        19090,  1996,  2724,  2008,  2269,  1521,  1055,  2668,  2828,  2003,
         2004,  2445,  2006,  1996,  2009,  2232,  5930,  1997,  2795,  1019,
         1012,  2184,  1012,  2004,  2589,  3041,  1010,  2057,  2131,  1052,
         1006,  1060,  2487,  1007,  1027,   100,  1010,  1052,  1006,  1060,
         2475,  1007,  1027,   100,  1010,  1052,  1006,  1060,  2509,  1007,
         1027,   100,  1010,  1998,  1052,  1006,  1060,  2549,  1007,  1027,
          100,  1012,  6660,  1052,  1006,  1061,  1064,  1060,  2487,  1007,
         1027,   100,  1010,  1052,  1006,  1061,  1064,  1060,  2475,  1007,
         1027,   100,  1010,  1052,  1006,  1061,  1064,  1060,  2509,  1007,
         1027,   100,  1010,  1998,  1052,  1006,  1061,  1064,  1060,  2549,
         1007,  1027,   100,  1012,  2005,  2112,  1006,  3523,  1007,  1010,
         2057,  2342,  2000,  2424,  1052,  1006,  8418,  1064,  1061,  1007,
         2005,  1045,  1027,  1015,  1998,  1017,  1006,  2668,  2177,  1523,
         1037,  1524,  2030,  1523,  1051,  1524,  1007,  1012,  2478,  3016,
         2229,  9872,  1010,  2023,  2003,  1052,  1006,  8418,  1064,  1061,
         1007,  1027,   102])"
1448,1,['probabilities'], Bayes Theorem for Conditional Probability,seg_323,"the denominator is 200/456 * 8/200 + 59/456 * 2/59 + 172/456 * 9/172 + 25/456 * 2/25 = 21/456. the numerator is 200/456 * 8/200 = 8/456. substitute the above-mentioned values to get the answer for blood group of father = “a” as (8/456)/(21/456) = 8/21. answer for father’s blood group “o” differs only in the numerator. as the numerator is 172/456 * 9/172 = 9/456, we get the answer for subpart as (9/456)/(21/456) = 9/21. add these two probabilities to get the answer that father is of type a or o as 8/21 + 9/21 = 17/21 = 0.809523 809523.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  1996,  7939, 20936, 27413,  2003,  3263,  1013,  3429,  2575,
         1008,  1022,  1013,  3263,  1009,  5354,  1013,  3429,  2575,  1008,
         1016,  1013,  5354,  1009, 18253,  1013,  3429,  2575,  1008,  1023,
         1013, 18253,  1009,  2423,  1013,  3429,  2575,  1008,  1016,  1013,
         2423,  1027,  2538,  1013,  3429,  2575,  1012,  1996, 16371,  5017,
         8844,  2003,  3263,  1013,  3429,  2575,  1008,  1022,  1013,  3263,
         1027,  1022,  1013,  3429,  2575,  1012,  7681,  1996,  2682,  1011,
         3855,  5300,  2000,  2131,  1996,  3437,  2005,  2668,  2177,  1997,
         2269,  1027,  1523,  1037,  1524,  2004,  1006,  1022,  1013,  3429,
         2575,  1007,  1013,  1006,  2538,  1013,  3429,  2575,  1007,  1027,
         1022,  1013,  2538,  1012,  3437,  2005,  2269,  1521,  1055,  2668,
         2177,  1523,  1051,  1524, 12980,  2069,  1999,  1996, 16371,  5017,
         8844,  1012,  2004,  1996, 16371,  5017,  8844,  2003, 18253,  1013,
         3429,  2575,  1008,  1023,  1013, 18253,  1027,  1023,  1013,  3429,
         2575,  1010,  2057,  2131,  1996,  3437,  2005,  4942, 19362,  2102,
         2004,  1006,  1023,  1013,  3429,  2575,  1007,  1013,  1006,  2538,
         1013,  3429,  2575,  1007,  1027,  1023,  1013,  2538,  1012,  5587,
         2122,  2048,  4013,  3676, 14680,  2000,  2131,  1996,  3437,  2008,
         2269,  2003,  1997,  2828,  1037,  2030,  1051,  2004,  1022,  1013,
         2538,  1009,  1023,  1013,  2538,  1027,  2459,  1013,  2538,  1027,
         1014,  1012,  3770,  2683, 25746,  2509,  3770,  2683, 25746,  2509,
         1012,   102])"
1449,1,"['conditional probability', 'probability', 'product rule', 'conditional']", Bayes Theorem for Conditional Probability,seg_323,"5.17.1.2 product rule for conditional probability p(ab|c) = p(a|c) ⋅ p(b|ac) = p(b|c).p(a|bc), where ab denotes a ∩ b, and so on.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 3016,  2229,  9872,  2005, 18462,  9723])","tensor([  101,  1019,  1012,  2459,  1012,  1015,  1012,  1016,  4031,  3627,
         2005, 18462,  9723,  1052,  1006, 11113,  1064,  1039,  1007,  1027,
         1052,  1006,  1037,  1064,  1039,  1007,  1614,  1052,  1006,  1038,
         1064,  9353,  1007,  1027,  1052,  1006,  1038,  1064,  1039,  1007,
         1012,  1052,  1006,  1037,  1064,  4647,  1007,  1010,  2073, 11113,
        14796,  1037,  1604,  1038,  1010,  1998,  2061,  2006,  1012,   102])"
1450,1,"['data', 'probabilities', 'statistical', 'decision theory']", Bayes Classification Rule,seg_325,"consider two propositions a and b whose apriori probabilities are known. let u(a) and u(b) denote the utilities of propositions a and b, respectively. then, a is preferred over b if u(a) u(b). in data mining applications, bayes’ rule is used to specify how the learning system updates its beliefs as new data instances arrive. this is the basic principle of statistical decision theory.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([3016, 2229, 5579, 3627])","tensor([  101,  5136,  2048, 14848,  2015,  1037,  1998,  1038,  3005, 19804,
        25346,  2072,  4013,  3676, 14680,  2024,  2124,  1012,  2292,  1057,
         1006,  1037,  1007,  1998,  1057,  1006,  1038,  1007, 19090,  1996,
        16548,  1997, 14848,  2015,  1037,  1998,  1038,  1010,  4414,  1012,
         2059,  1010,  1037,  2003,  6871,  2058,  1038,  2065,  1057,  1006,
         1037,  1007,  1057,  1006,  1038,  1007,  1012,  1999,  2951,  5471,
         5097,  1010,  3016,  2229,  1521,  3627,  2003,  2109,  2000, 20648,
         2129,  1996,  4083,  2291, 14409,  2049,  9029,  2004,  2047,  2951,
        12107,  7180,  1012,  2023,  2003,  1996,  3937,  6958,  1997,  7778,
         3247,  3399,  1012,   102])"
1451,1,['utility'], Bayes Classification Rule,seg_325,"5.17.2.1 rule of expected utility assuming a as the action and b as the consequence, this rule gives the utility of a as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([3016, 2229, 5579, 3627])","tensor([  101,  1019,  1012,  2459,  1012,  1016,  1012,  1015,  3627,  1997,
         3517,  9710, 10262,  1037,  2004,  1996,  2895,  1998,  1038,  2004,
         1996,  9509,  1010,  2023,  3627,  3957,  1996,  9710,  1997,  1037,
         2004,   102])"
1452,1,"['estimated', 'prior probabilities', 'probabilities']", Bayes Classification Rule,seg_325,"a disadvantage of this approach is that they depend on prior probabilities of propositions explicitly. if these are unknown, they need to be estimated (using point esti-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([3016, 2229, 5579, 3627])","tensor([  101,  1037, 20502,  1997,  2023,  3921,  2003,  2008,  2027, 12530,
         2006,  3188,  4013,  3676, 14680,  1997, 14848,  2015, 12045,  1012,
         2065,  2122,  2024,  4242,  1010,  2027,  2342,  2000,  2022,  4358,
         1006,  2478,  2391,  9765,  2072,  1011,   102])"
1453,1,"['sampling', 'process', 'algorithm']", Bayes Classification Rule,seg_325,"2 mation, em algorithm , stochastic sampling, or parametric approximations) before starting the decision process.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([3016, 2229, 5579, 3627])","tensor([  101,  1016, 13523,  3258,  1010,  7861,  9896,  1010,  2358, 11663,
        20875, 16227,  1010,  2030, 11498, 12589, 20167,  2015,  1007,  2077,
         3225,  1996,  3247,  2832,  1012,   102])"
1454,1,"['probabilities', 'data', 'entropy']", Bayes Classification Rule,seg_325,"now consider the problem of classifying a dichotomous attribute using data instances. if the two attribute values are “yes” and “no,” we could obtain a measure of entropy using the probabilities of yes and no responses as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([3016, 2229, 5579, 3627])","tensor([  101,  2085,  5136,  1996,  3291,  1997, 26268,  2075,  1037,  4487,
         9905, 20389,  3560, 17961,  2478,  2951, 12107,  1012,  2065,  1996,
         2048, 17961,  5300,  2024,  1523,  2748,  1524,  1998,  1523,  2053,
         1010,  1524,  2057,  2071,  6855,  1037,  5468,  1997, 23077,  2478,
         1996,  4013,  3676, 14680,  1997,  2748,  1998,  2053, 10960,  2004,
          102])"
1455,1,['range'], Bayes Classification Rule,seg_325,"as the logarithm of a number in the range (0,1) is negative, it combines with the minus sign to return a positive number.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3016, 2229, 5579, 3627])","tensor([  101,  2004,  1996,  8833,  8486,  2705,  2213,  1997,  1037,  2193,
         1999,  1996,  2846,  1006,  1014,  1010,  1015,  1007,  2003,  4997,
         1010,  2009, 13585,  2007,  1996, 15718,  3696,  2000,  2709,  1037,
         3893,  2193,  1012,   102])"
1456,1,"['probability', 'confidence', 'average', 'urn models']", SUMMARY,seg_327,"this chapter introduced the concepts, tools, and techniques of probability in an intuitive way. several examples drawn from different fields help the readers in honing the problem-solving skills, and applying it with confidence to practical problems. several self-understanding and concrete examples make the book accessible to even average students. see reference 112 for a historical review, references 113 and 114 for theoretical aspects, reference 115 for urn models, and references 116–120 for further examples.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2023,  3127,  3107,  1996,  8474,  1010,  5906,  1010,  1998,
         5461,  1997,  9723,  1999,  2019, 29202,  2126,  1012,  2195,  4973,
         4567,  2013,  2367,  4249,  2393,  1996,  8141,  1999, 10189,  2075,
         1996,  3291,  1011, 13729,  4813,  1010,  1998, 11243,  2009,  2007,
         7023,  2000,  6742,  3471,  1012,  2195,  2969,  1011,  4824,  1998,
         5509,  4973,  2191,  1996,  2338,  7801,  2000,  2130,  2779,  2493,
         1012,  2156,  4431, 11176,  2005,  1037,  3439,  3319,  1010,  7604,
        12104,  1998, 12457,  2005,  9373,  5919,  1010,  4431, 10630,  2005,
        24471,  2078,  4275,  1010,  1998,  7604, 12904,  1516,  6036,  2005,
         2582,  4973,  1012,   102])"
1457,1,"['dependence', 'conditional probability', 'uncertainty', 'probability', 'prediction', 'outcomes', 'outcome', 'level', 'dependent', 'experiments', 'conditional', 'data']", SUMMARY,seg_327,"data uncertainty prevail in most experiments. with scientific rules and regulations of probability, the exactitude and their remedies in the data could be understood and interpreted. two or more outcomes in an application might be dependent. as explained in this chapter, the level of their dependence could be calculated and utilized. when two outcomes are dependent, the prediction of one outcome becomes more precise based on the occurrence of a connected outcome using conditional probability. this type of prediction is the basic foundation of decision making in engineering and applied sciences.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2951, 12503,  3653,  3567,  4014,  1999,  2087,  7885,  1012,
         2007,  4045,  3513,  1998,  7040,  1997,  9723,  1010,  1996,  6635,
        18679,  1998,  2037,  2128,  7583,  3111,  1999,  1996,  2951,  2071,
         2022,  5319,  1998, 10009,  1012,  2048,  2030,  2062, 13105,  1999,
         2019,  4646,  2453,  2022,  7790,  1012,  2004,  4541,  1999,  2023,
         3127,  1010,  1996,  2504,  1997,  2037, 18642,  2071,  2022, 10174,
         1998, 12550,  1012,  2043,  2048, 13105,  2024,  7790,  1010,  1996,
        17547,  1997,  2028,  9560,  4150,  2062, 10480,  2241,  2006,  1996,
        14404,  1997,  1037,  4198,  9560,  2478, 18462,  9723,  1012,  2023,
         2828,  1997, 17547,  2003,  1996,  3937,  3192,  1997,  3247,  2437,
         1999,  3330,  1998,  4162,  4163,  1012,   102])"
1458,1,"['probability', 'discrete', 'event']", SUMMARY,seg_327,"a) a probability of 0.5 is realized only for discrete event,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  1007,  1037,  9723,  1997,  1014,  1012,  1019,  2003,
         3651,  2069,  2005, 16246,  2724,  1010,   102])"
1459,1,['probabilities'], SUMMARY,seg_327,"b) addition and subtraction are the only operations on probabilities,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1038,  1007,  2804,  1998,  4942,  6494,  7542,  2024,  1996,
         2069,  3136,  2006,  4013,  3676, 14680,  1010,   102])"
1460,1,"['probability', 'event', 'venn diagram', 'venn', 'probability of an event']", SUMMARY,seg_327,"c) a venn diagram can quantify the probability of an event,",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1039,  1007,  1037,  2310, 10695, 16403,  2064, 24110, 27351,
         1996,  9723,  1997,  2019,  2724,  1010,   102])"
1461,1,"['probability', 'events']", SUMMARY,seg_327,"e) combining events using or operator often increases the probability,",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1041,  1007, 11566,  2824,  2478,  2030,  6872,  2411,  7457,
         1996,  9723,  1010,   102])"
1462,1,"['venn diagrams', 'events', 'venn', 'discrete']", SUMMARY,seg_327,"f) venn diagrams can represent only discrete events,",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1042,  1007,  2310, 10695, 26309,  2064,  5050,  2069, 16246,
         2824,  1010,   102])"
1463,0,[], SUMMARY,seg_327,5.2 the mechanism that generates 5.9 convert to fractional form p/q (i),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  1016,  1996,  7337,  2008, 19421,  1019,  1012,
         1023, 10463,  2000, 12884,  2389,  2433,  1052,  1013,  1053,  1006,
         1045,  1007,   102])"
1464,1,"['sample space', 'outcomes', 'event', 'sample', 'random', 'experiment', 'combination']", SUMMARY,seg_327,"uncertain outcomes is called 0.2727 (ii) 0.428571 428571, (iii) 0.285714 285714, (iv) 0.809523 (a) event (b) random experiment 809523 (c) sample space (d) combination",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  9662, 13105,  2003,  2170,  1014,  1012, 24231,  2581,  1006,
         2462,  1007,  1014,  1012,  4413, 27531,  2581,  2487,  4413, 27531,
         2581,  2487,  1010,  1006,  3523,  1007,  1014,  1012, 21777,  2581,
        16932, 21777,  2581, 16932,  1010,  1006,  4921,  1007,  1014,  1012,
         3770,  2683, 25746,  2509,  1006,  1037,  1007,  2724,  1006,  1038,
         1007,  6721,  7551,  3770,  2683, 25746,  2509,  1006,  1039,  1007,
         7099,  2686,  1006,  1040,  1007,  5257,   102])"
1465,1,"['event', 'mutually exclusive', 'permutations']", SUMMARY,seg_327,5.10 an event e1 can happen in m 5.3 permutations of objects in which ways and a mutually exclusive,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  2184,  2019,  2724,  1041,  2487,  2064,  4148,
         1999,  1049,  1019,  1012,  1017,  2566, 28120, 10708,  1997,  5200,
         1999,  2029,  3971,  1998,  1037, 20271,  7262,   102])"
1466,1,['event'], SUMMARY,seg_327,nothing is in its original position is event e2 can happen in n ways. in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 2498, 2003, 1999, 2049, 2434, 2597, 2003, 2724, 1041, 2475, 2064,
        4148, 1999, 1050, 3971, 1012, 1999,  102])"
1467,1,"['derangement', 'combination']", SUMMARY,seg_327,"(a) power-set (b) circular perhow many ways, can e1 and e2 mutation (c) combination (d) happen? derangement.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])",tensor([12654]),"tensor([  101,  1006,  1037,  1007,  2373,  1011,  2275,  1006,  1038,  1007,
         8206,  2566, 14406,  2116,  3971,  1010,  2064,  1041,  2487,  1998,
         1041,  2475, 16221,  1006,  1039,  1007,  5257,  1006,  1040,  1007,
         4148,  1029,  4315, 22043,  3672,  1012,   102])"
1468,1,['outcomes'], SUMMARY,seg_327,5.11 an elevator starts with six girls 5.4 the identifiable outcomes of a ranfrom the ground floor to all other,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  2340,  2019,  7764,  4627,  2007,  2416,  3057,
         1019,  1012,  1018,  1996, 27800, 13105,  1997,  1037,  2743, 19699,
         5358,  1996,  2598,  2723,  2000,  2035,  2060,   102])"
1469,1,"['probability', 'events', 'event', 'experiment']", SUMMARY,seg_327,"dom experiment is called floors of a four storeyed building. (a) event (b) probability (c) samif all disembarks, define appropriple space (d) power-set ate events.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101, 14383,  7551,  2003,  2170,  8158,  1997,  1037,  2176, 11676,
         2098,  2311,  1012,  1006,  1037,  1007,  2724,  1006,  1038,  1007,
         9723,  1006,  1039,  1007, 17015,  2546,  2035,  4487,  3366, 11201,
        19987,  1010,  9375, 10439, 18981, 29443,  2571,  2686,  1006,  1040,
         1007,  2373,  1011,  2275,  8823,  2824,  1012,   102])"
1470,1,"['sets', 'probability', 'outcomes', 'sample']", SUMMARY,seg_327,5.5 decimal form of probability 5.12 sets of outcomes of a sample,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  1019, 26066,  2433,  1997,  9723,  1019,  1012,
         2260,  4520,  1997, 13105,  1997,  1037,  7099,   102])"
1471,1,"['cardinality', 'event', 'range']", SUMMARY,seg_327,always take values in the range space meeting some specifications (a) −1 to +1 (b) 0 to 1 (c) −0.5 is (a) subspace (b) partition (c) to +0.5 (d) any positive value cardinality (d) event,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  2467,  2202,  5300,  1999,  1996,  2846,  2686,  3116,  2070,
        15480,  1006,  1037,  1007,  1597,  2487,  2000,  1009,  1015,  1006,
         1038,  1007,  1014,  2000,  1015,  1006,  1039,  1007,  1597,  2692,
         1012,  1019,  2003,  1006,  1037,  1007, 24807, 10732,  1006,  1038,
         1007, 13571,  1006,  1039,  1007,  2000,  1009,  1014,  1012,  1019,
         1006,  1040,  1007,  2151,  3893,  3643,  7185,  3012,  1006,  1040,
         1007,  2724,   102])"
1472,1,['random'], SUMMARY,seg_327,5.6 a pharmacist has six medicine 5.13 if 4 squares are chosen at random,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  1020,  1037,  6887, 27292,  6305,  2923,  2038,
         2416,  4200,  1019,  1012,  2410,  2065,  1018, 14320,  2024,  4217,
         2012,  6721,   102])"
1473,0,[], SUMMARY,seg_327,"packs, three of which are of one on a chessboard, what is the probkind, two of another kind and a last ability that they will form a bigger one of a single kind. how many square?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 15173,  1010,  2093,  1997,  2029,  2024,  1997,  2028,  2006,
         1037,  7433,  6277,  1010,  2054,  2003,  1996,  4013,  2497, 18824,
         1010,  2048,  1997,  2178,  2785,  1998,  1037,  2197,  3754,  2008,
         2027,  2097,  2433,  1037,  7046,  2028,  1997,  1037,  2309,  2785,
         1012,  2129,  2116,  2675,  1029,   102])"
1474,0,[], SUMMARY,seg_327,ways are there to arrange them on 5.14 a man has five pairs of soxes of,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  3971,  2024,  2045,  2000, 13621,  2068,  2006,  1019,  1012,
         2403,  1037,  2158,  2038,  2274,  7689,  1997,  9175,  2229,  1997,
          102])"
1475,0,[], SUMMARY,seg_327,a shelf? different styles and colors. one,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1037, 11142,  1029,  2367,  6782,  1998,  6087,  1012,  2028,
          102])"
1476,0,[], SUMMARY,seg_327,"5.7 a video store has nine cassettes, of night when the power was off, he",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  1021,  1037,  2678,  3573,  2038,  3157, 13903,
         2015,  1010,  1997,  2305,  2043,  1996,  2373,  2001,  2125,  1010,
         2002,   102])"
1477,1,"['probability', 'random']", SUMMARY,seg_327,"selects two soxes at random. find which four are of one kind, three the probability that they form a are of a second kind, and two are matching pair. of a third kind to be arranged on a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 27034,  2048,  9175,  2229,  2012,  6721,  1012,  2424,  2029,
         2176,  2024,  1997,  2028,  2785,  1010,  2093,  1996,  9723,  2008,
         2027,  2433,  1037,  2024,  1997,  1037,  2117,  2785,  1010,  1998,
         2048,  2024,  9844,  3940,  1012,  1997,  1037,  2353,  2785,  2000,
         2022,  5412,  2006,  1037,   102])"
1478,1,"['set', 'events']", SUMMARY,seg_327,"rack. in how many ways, can this 5.15 consider a set of ordered events",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0.])",tensor([12654]),"tensor([  101, 14513,  1012,  1999,  2129,  2116,  3971,  1010,  2064,  2023,
         1019,  1012,  2321,  5136,  1037,  2275,  1997,  3641,  2824,   102])"
1479,1,"['random', 'experiment']", SUMMARY,seg_327,be done? of a random experiment. express,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2022, 2589, 1029, 1997, 1037, 6721, 7551, 1012, 4671,  102])"
1480,1,"['probability', 'events', 'multinomial']", SUMMARY,seg_327,following events using probability 5.8 evaluate the multinomial coeffi-,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2206,  2824,  2478,  9723,  1019,  1012,  1022, 16157,  1996,
         4800,  3630, 10092,  2140, 24873, 26989,  1011,   102])"
1481,0,[], SUMMARY,seg_327,5.16 prove or disprove the following: crust is fixed as thick how many,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  2385,  6011,  2030,  4487, 13102, 17597,  1996,
         2206,  1024, 19116,  2003,  4964,  2004,  4317,  2129,  2116,   102])"
1482,0,[], SUMMARY,seg_327,6 × 8 pieces of equal size. the 5.18 there are 60 students in a class. bar can be broken only along a,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1020, 1095, 1022, 4109, 1997, 5020, 2946, 1012, 1996, 1019, 1012,
        2324, 2045, 2024, 3438, 2493, 1999, 1037, 2465, 1012, 3347, 2064, 2022,
        3714, 2069, 2247, 1037,  102])"
1483,1,['probability'], SUMMARY,seg_327,what is the probability that (i) two straight line horizontally or verti-,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2054,  2003,  1996,  9723,  2008,  1006,  1045,  1007,  2048,
         3442,  2240, 23190,  2030,  2310, 28228,  1011,   102])"
1484,0,[], SUMMARY,seg_327,or more students share the same cally but not diagonally. if the bars,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2030,  2062,  2493,  3745,  1996,  2168,  2655,  2100,  2021,
         2025, 19754,  2135,  1012,  2065,  1996,  6963,   102])"
1485,1,['probability'], SUMMARY,seg_327,"birthday? (ii) there are exactly k are broken one at a time, what is days in which no one’s birthday the probability of obtaining eight falls? 2 × 3 pieces in seven tries?. 5.19 how many people are there in a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5798,  1029,  1006,  2462,  1007,  2045,  2024,  3599,  1047,
         2024,  3714,  2028,  2012,  1037,  2051,  1010,  2054,  2003,  2420,
         1999,  2029,  2053,  2028,  1521,  1055,  5798,  1996,  9723,  1997,
        11381,  2809,  4212,  1029,  1016,  1095,  1017,  4109,  1999,  2698,
         5363,  1029,  1012,  1019,  1012,  2539,  2129,  2116,  2111,  2024,
         2045,  1999,  1037,   102])"
1486,1,['probability'], SUMMARY,seg_327,"5.26 a school kid has 10 varieties of room to have the probability that shirt, 7 varieties of pants, and 5 two or more people will have the same birthday is (i) greater than varieties of tie. in how many ways, 0.5? and (ii) less than 0.75? can the kid dress up?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1019, 1012, 2656, 1037, 2082, 4845, 2038, 2184, 9903, 1997, 2282,
        2000, 2031, 1996, 9723, 2008, 3797, 1010, 1021, 9903, 1997, 6471, 1010,
        1998, 1019, 2048, 2030, 2062, 2111, 2097, 2031, 1996, 2168, 5798, 2003,
        1006, 1045, 1007, 3618, 2084, 9903, 1997, 5495, 1012, 1999, 2129, 2116,
        3971, 1010, 1014, 1012, 1019, 1029, 1998, 1006, 2462, 1007, 2625, 2084,
        1014, 1012, 4293, 1029, 2064, 1996, 4845, 4377, 2039, 1029,  102])"
1487,0,['n'], SUMMARY,seg_327,5.20 a diabetes medicine comes as 5.27 consider n tosses of a die with,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  2322,  1037, 14671,  4200,  3310,  2004,  1019,
         1012,  2676,  5136,  1050, 10055,  2229,  1997,  1037,  3280,  2007,
          102])"
1488,0,[], SUMMARY,seg_327,"a tablet, capsule, nasal spray, or faces numbered 1–6. what is the injection. if each of them is availprobability that the top face numable in regular and generic variber is greater than the bottom face eties, in how many ways, can it be number?.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1037, 13855,  1010, 18269,  1010, 19077, 12509,  1010,  2030,
         5344,  8597,  1015,  1516,  1020,  1012,  2054,  2003,  1996, 13341,
         1012,  2065,  2169,  1997,  2068,  2003, 24608, 21572,  3676,  8553,
         2008,  1996,  2327,  2227, 16371, 24088,  1999,  3180,  1998, 12391,
        13075, 20755,  2099,  2003,  3618,  2084,  1996,  3953,  2227,  3802,
         3111,  1010,  1999,  2129,  2116,  3971,  1010,  2064,  2009,  2022,
         2193,  1029,  1012,   102])"
1489,1,['sets'], SUMMARY,seg_327,prescribed? 5.28 an electronic circuit has n2 com5.21 let x and y be two finite sets. ponents that look identical. a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 16250,  1029,  1019,  1012,  2654,  2019,  4816,  4984,  2038,
         1050,  2475,  4012,  2629,  1012,  2538,  2292,  1060,  1998,  1061,
         2022,  2048, 10713,  4520,  1012, 13433, 21576,  2015,  2008,  2298,
         7235,  1012,  1037,   102])"
1490,1,['set'], SUMMARY,seg_327,define x ⊕ y as the set of all eletechnician has time to inspect all ments in x or y but not in both. except n of the components in any,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  9375,  1060,  1612,  1061,  2004,  1996,  2275,  1997,  2035,
         3449, 12870,  2818,  8713,  2937,  2038,  2051,  2000, 22459,  2035,
         2273,  3215,  1999,  1060,  2030,  1061,  2021,  2025,  1999,  2119,
         1012,  3272,  1050,  1997,  1996,  6177,  1999,  2151,   102])"
1491,0,[], SUMMARY,seg_327,"verify whether ⊕ is commutative trip. if the components are chosen,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 20410,  3251,  1612,  2003,  4012, 28120,  8082,  4440,  1012,
         2065,  1996,  6177,  2024,  4217,  1010,   102])"
1492,0,[], SUMMARY,seg_327,and associative. one after another find the number,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1998,  4632, 10085,  2401,  6024,  1012,  2028,  2044,  2178,
         2424,  1996,  2193,   102])"
1493,1,['events'], SUMMARY,seg_327,"of ways to choose the components 5.22 if x and y are nondisjoint events,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  3971,  2000,  5454,  1996,  6177,  1019,  1012,  2570,
         2065,  1060,  1998,  1061,  2024,  2512, 10521,  5558, 18447,  2824,
         1010,   102])"
1494,0,[], SUMMARY,seg_327,"prove (i) p(x ∪ y) + p(x ∩ y) = in any trip. using stirling’s forp(x) + p(y), (ii) p[(x ∩ y) ∪ mula for factorials obtain a simpli(y ∩ x)] = p(x) + p(y) − 2 ∗ fied expression for it.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  6011,  1006,  1045,  1007,  1052,  1006,  1060,  1605,  1061,
         1007,  1009,  1052,  1006,  1060,  1604,  1061,  1007,  1027,  1999,
         2151,  4440,  1012,  2478, 15597,  1521,  1055,  2005,  2361,  1006,
         1060,  1007,  1009,  1052,  1006,  1061,  1007,  1010,  1006,  2462,
         1007,  1052,  1031,  1006,  1060,  1604,  1061,  1007,  1605, 14163,
         2721,  2005,  5387, 26340,  6855,  1037, 21934, 24759,  2072,  1006,
         1061,  1604,  1060,  1007,  1033,  1027,  1052,  1006,  1060,  1007,
         1009,  1052,  1006,  1061,  1007,  1597,  1016,  1598, 10882,  2098,
         3670,  2005,  2009,  1012,   102])"
1495,1,"['sample', 'sample space']", SUMMARY,seg_327,p(x ∩ y) 5.29 describe a suitable sample space,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([ 101, 1052, 1006, 1060, 1604, 1061, 1007, 1019, 1012, 2756, 6235, 1037,
        7218, 7099, 2686,  102])"
1496,1,['events'], SUMMARY,seg_327,"5.23 if x and y are nondisjoint events, ω for the following experi-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  2603,  2065,  1060,  1998,  1061,  2024,  2512,
        10521,  5558, 18447,  2824,  1010,  1179,  2005,  1996,  2206,  4654,
         4842,  2072,  1011,   102])"
1497,1,"['absolute value', 'probabilities']", SUMMARY,seg_327,"arrange the following probabilities ments:–(i) absolute value of the in increasing order of magnitude: difference between the numbers at p(x),p(x ∩ y),p(x ∪ y),p(x) + the top and bottom when a die is",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13621,  1996,  2206,  4013,  3676, 14680,  2273,  3215,  1024,
         1516,  1006,  1045,  1007,  7619,  3643,  1997,  1996,  1999,  4852,
         2344,  1997, 10194,  1024,  4489,  2090,  1996,  3616,  2012,  1052,
         1006,  1060,  1007,  1010,  1052,  1006,  1060,  1604,  1061,  1007,
         1010,  1052,  1006,  1060,  1605,  1061,  1007,  1010,  1052,  1006,
         1060,  1007,  1009,  1996,  2327,  1998,  3953,  2043,  1037,  3280,
         2003,   102])"
1498,1,['event'], SUMMARY,seg_327,"taining m white and n red balls; eties of crust (thin crust, medium, (iii) two dice are thrown and an and thick crust), 4 varieties of event is specified as “the number cheese, and 12 varieties of toppings. how many different variat top of second die is greater than eties of pizzas can be ordered?. if the one on the first die.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13843,  5582,  1049,  2317,  1998,  1050,  2417,  7395,  1025,
         3802,  3111,  1997, 19116,  1006,  4857, 19116,  1010,  5396,  1010,
         1006,  3523,  1007,  2048, 18740,  2024,  6908,  1998,  2019,  1998,
         4317, 19116,  1007,  1010,  1018,  9903,  1997,  2724,  2003,  9675,
         2004,  1523,  1996,  2193,  8808,  1010,  1998,  2260,  9903,  1997,
        22286,  2015,  1012,  2129,  2116,  2367, 13075,  2401,  2102,  2327,
         1997,  2117,  3280,  2003,  3618,  2084,  3802,  3111,  1997, 10733,
         2015,  2064,  2022,  3641,  1029,  1012,  2065,  1996,  2028,  2006,
         1996,  2034,  3280,  1012,  1524,   102])"
1499,0,[], SUMMARY,seg_327,5.30 a committee consists of five memeach winning person gets an,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1019, 1012, 2382, 1037, 2837, 3774, 1997, 2274, 2033, 4168, 6776,
        3045, 2711, 4152, 2019,  102])"
1500,1,"['probability', 'expected value', 'trials']", SUMMARY,seg_327,"bers of whom the three males are amount of 1 from the loser. find (x, y, z) and the females are (u,v). the expected value of the amount if a meeting is attended by only owned by the winner at nth game. three members, what is the probwhat is the probability of (i) p ability that (i) at least one female winning the game?, (ii) the game is present; (ii) if v was present in being over in 120 plays?, and (iii) both have 50:50 in n trials. the meeting, what is the probabil-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2022,  2869,  1997,  3183,  1996,  2093,  3767,  2024,  3815,
         1997,  1015,  2013,  1996, 10916,  1012,  2424,  1006,  1060,  1010,
         1061,  1010,  1062,  1007,  1998,  1996,  3801,  2024,  1006,  1057,
         1010,  1058,  1007,  1012,  1996,  3517,  3643,  1997,  1996,  3815,
         2065,  1037,  3116,  2003,  3230,  2011,  2069,  3079,  2011,  1996,
         3453,  2012, 23961,  2232,  2208,  1012,  2093,  2372,  1010,  2054,
         2003,  1996,  4013,  2497,  2860, 12707,  2003,  1996,  9723,  1997,
         1006,  1045,  1007,  1052,  3754,  2008,  1006,  1045,  1007,  2012,
         2560,  2028,  2931,  3045,  1996,  2208,  1029,  1010,  1006,  2462,
         1007,  1996,  2208,  2003,  2556,  1025,  1006,  2462,  1007,  2065,
         1058,  2001,  2556,  1999,  2108,  2058,  1999,  6036,  3248,  1029,
         1010,  1998,  1006,  3523,  1007,  2119,  2031,  2753,  1024,  2753,
         1999,  1050,  7012,  1012,  1996,  3116,  1010,  2054,  2003,  1996,
         4013,  3676, 14454,  1011,   102])"
1501,0,[], SUMMARY,seg_327,"ity that y and z were also present? 5.35 there are 160 customers who buy how many ways are there to form electronics, and 120 customers",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 2009, 2100, 2008, 1061, 1998, 1062, 2020, 2036, 2556, 1029, 1019,
        1012, 3486, 2045, 2024, 8148, 6304, 2040, 4965, 2129, 2116, 3971, 2024,
        2045, 2000, 2433, 8139, 1010, 1998, 6036, 6304,  102])"
1502,0,[], SUMMARY,seg_327,"a subcommittee of size 3 compriswho buy other items. among the ing (i) at least two males, (ii) at 160 customers, 30 also buy other most one female?, and (iii) exactly items. if nine customers are ran-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1037, 18052,  1997,  2946,  1017,  4012, 18098,  2483,  2860,
         6806,  4965,  2060,  5167,  1012,  2426,  1996, 13749,  1006,  1045,
         1007,  2012,  2560,  2048,  3767,  1010,  1006,  2462,  1007,  2012,
         8148,  6304,  1010,  2382,  2036,  4965,  2060,  2087,  2028,  2931,
         1029,  1010,  1998,  1006,  3523,  1007,  3599,  5167,  1012,  2065,
         3157,  6304,  2024,  2743,  1011,   102])"
1503,0,[], SUMMARY,seg_327,"two males? domly chosen, what is the prob-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2048,  3767,  1029, 14383,  2135,  4217,  1010,  2054,  2003,
         1996,  4013,  2497,  1011,   102])"
1504,0,[], SUMMARY,seg_327,ability that (i) a customer who 5.31 a furniture shop makes a vari-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  3754,  2008,  1006,  1045,  1007,  1037,  8013,  2040,  1019,
         1012,  2861,  1037,  7390,  4497,  3084,  1037, 13075,  2072,  1011,
          102])"
1505,1,['process'], SUMMARY,seg_327,"bought only other items will get ety of furnitures. each piece goes selected? and (ii) a customer through three processes:–(i) cutwho bought both items will get ting process, (ii) drilling process, selected? and (iii) assembly and finish-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4149,  2069,  2060,  5167,  2097,  2131,  3802,  2100,  1997,
         7390,  2015,  1012,  2169,  3538,  3632,  3479,  1029,  1998,  1006,
         2462,  1007,  1037,  8013,  2083,  2093,  6194,  1024,  1516,  1006,
         1045,  1007,  3013,  2860,  6806,  4149,  2119,  5167,  2097,  2131,
        28642,  2832,  1010,  1006,  2462,  1007, 15827,  2832,  1010,  3479,
         1029,  1998,  1006,  3523,  1007,  3320,  1998,  3926,  1011,   102])"
1506,1,['process'], SUMMARY,seg_327,ing process. a quality inspector 5.36 a safe locker has two locks. an inspects each furniture before it is intruder has gained access to “n”,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13749,  2832,  1012,  1037,  3737,  7742,  1019,  1012,  4029,
         1037,  3647, 12625,  2038,  2048, 11223,  1012,  2019, 22459,  2015,
         2169,  7390,  2077,  2009,  2003, 22841,  2038,  4227,  3229,  2000,
         1523,  1050,  1524,   102])"
1507,1,"['probability', 'random']", SUMMARY,seg_327,"shipped. the respective probabilkeys. if two keys are chosen at ity of a defect in each of the stages random each time, (i) what is the is 1/60, 1/20 and 1/80. if a finished probability that the intruder will",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 12057,  1012,  1996,  7972,  4013,  3676, 14454, 14839,  2015,
         1012,  2065,  2048,  6309,  2024,  4217,  2012,  2009,  2100,  1997,
         1037, 21262,  1999,  2169,  1997,  1996,  5711,  6721,  2169,  2051,
         1010,  1006,  1045,  1007,  2054,  2003,  1996,  2003,  1015,  1013,
         3438,  1010,  1015,  1013,  2322,  1998,  1015,  1013,  3770,  1012,
         2065,  1037,  2736,  9723,  2008,  1996, 22841,  2097,   102])"
1508,1,['probability'], SUMMARY,seg_327,"furniture is found to be defective, be able to open the locker in first what is the probability that (i) it is try and (ii) the locker in third try?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  7390,  2003,  2179,  2000,  2022, 28829,  1010,  2022,  2583,
         2000,  2330,  1996, 12625,  1999,  2034,  2054,  2003,  1996,  9723,
         2008,  1006,  1045,  1007,  2009,  2003,  3046,  1998,  1006,  2462,
         1007,  1996, 12625,  1999,  2353,  3046,  1029,   102])"
1509,0,[], SUMMARY,seg_327,a cutting defect and (ii) it is due 5.37 if x ∪ y is translated into words,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1037,  6276, 21262,  1998,  1006,  2462,  1007,  2009,  2003,
         2349,  1019,  1012,  4261,  2065,  1060,  1605,  1061,  2003,  5421,
         2046,  2616,   102])"
1510,1,['event'], SUMMARY,seg_327,"cess? and y occurs,” x − y as “x but 5.32 is the event x ∪ y defined when not y occurs,” x as “x does",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([ 101, 8292, 4757, 1029, 1998, 1061, 5158, 1010, 1524, 1060, 1597, 1061,
        2004, 1523, 1060, 2021, 1019, 1012, 3590, 2003, 1996, 2724, 1060, 1605,
        1061, 4225, 2043, 2025, 1061, 5158, 1010, 1524, 1060, 2004, 1523, 1060,
        2515,  102])"
1511,1,"['continuous', 'discrete']", SUMMARY,seg_327,"either of them is discrete and the not occur,” translate the following other is continuous? is the concept expressions into words:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2593,  1997,  2068,  2003, 16246,  1998,  1996,  2025,  5258,
         1010,  1524, 17637,  1996,  2206,  2060,  2003,  7142,  1029,  2003,
         1996,  4145, 11423,  2046,  2616,  1024,   102])"
1512,1,"['events', 'independence']", SUMMARY,seg_327,"of independence defined for con(i) x ∩ y (ii) x − x ∩ y , and (iii) tinuous events? x ∪ y − x ∩ y .",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([ 101, 1997, 4336, 4225, 2005, 9530, 1006, 1045, 1007, 1060, 1604, 1061,
        1006, 2462, 1007, 1060, 1597, 1060, 1604, 1061, 1010, 1998, 1006, 3523,
        1007, 9543, 8918, 2824, 1029, 1060, 1605, 1061, 1597, 1060, 1604, 1061,
        1012,  102])"
1513,0,['n'], SUMMARY,seg_327,5.33 there are n different tasks to be 5.38 a train has 3 general (unreserved),tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([12654]),"tensor([  101,  1019,  1012,  3943,  2045,  2024,  1050,  2367,  8518,  2000,
         2022,  1019,  1012,  4229,  1037,  3345,  2038,  1017,  2236,  1006,
         4895,  6072, 25944,  1007,   102])"
1514,0,['n'], SUMMARY,seg_327,"assigned to m employees where compartments, 12 reserved n   m. how many ways are there coaches, and a pantry car in if every employee is assigned at addition to the engine. out of",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  4137,  2000,  1049,  5126,  2073, 27998,  1010,  2260,  9235,
         1050,  1049,  1012,  2129,  2116,  3971,  2024,  2045,  7850,  1010,
         1998,  1037, 27796,  2482,  1999,  2065,  2296,  7904,  2003,  4137,
         2012,  2804,  2000,  1996,  3194,  1012,  2041,  1997,   102])"
1515,0,[], SUMMARY,seg_327,"least one task? 12 reserved coaches, 3 are ac",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 2560, 2028, 4708, 1029, 2260, 9235, 7850, 1010, 1017, 2024, 9353,
         102])"
1516,0,[], SUMMARY,seg_327,5.34 two persons p and q play a game coaches and the rest are ordi-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1019, 1012, 4090, 2048, 5381, 1052, 1998, 1053, 2377, 1037, 2208,
        7850, 1998, 1996, 2717, 2024, 2030, 4305, 1011,  102])"
1517,1,['probability'], SUMMARY,seg_327,"with respective initial amounts of nary coaches. how many ways are 70 and 30. probability of p winthere to connect the coaches if (i) ning is p, and for q it is 1−p. the pantry car can never be the first",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  2007,  7972,  3988,  8310,  1997,  6583,  2854,  7850,  1012,
         2129,  2116,  3971,  2024,  3963,  1998,  2382,  1012,  9723,  1997,
         1052,  2663, 12399,  2063,  2000,  7532,  1996,  7850,  2065,  1006,
         1045,  1007,  9152,  3070,  2003,  1052,  1010,  1998,  2005,  1053,
         2009,  2003,  1015, 22543,  2361,  1012,  1996, 27796,  2482,  2064,
         2196,  2022,  1996,  2034,   102])"
1518,0,[], SUMMARY,seg_327,or last and (ii) the coach immedihow many ways are there for seatately behind the engine and the ing arrangement in the aircraft?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2030,  2197,  1998,  1006,  2462,  1007,  1996,  2873, 10047,
         7583, 19190,  5004,  2116,  3971,  2024,  2045,  2005,  2835, 28239,
         2369,  1996,  3194,  1998,  1996, 13749,  6512,  1999,  1996,  2948,
         1029,   102])"
1519,0,[], SUMMARY,seg_327,rear-end coach are both ordinary?. 5.43 there are 22 people in a hospi(iii) if all ac coaches cannot be tal including 2 twins who were,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  4373,  1011,  2203,  2873,  2024,  2119,  6623,  1029,  1012,
         1019,  1012,  4724,  2045,  2024,  2570,  2111,  1999,  1037,  7570,
        13102,  2072,  1006,  3523,  1007,  2065,  2035,  9353,  7850,  3685,
         2022, 21368,  2164,  1016,  8178,  2040,  2020,   102])"
1520,0,[], SUMMARY,seg_327,together? born on the same day. what is the,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 2362, 1029, 2141, 2006, 1996, 2168, 2154, 1012, 2054, 2003, 1996,
         102])"
1521,0,[], SUMMARY,seg_327,mathematical expression to find 5.39 a university wishes to assign a,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  8045,  3670,  2000,  2424,  1019,  1012,  4464,  1037,  2118,
         8996,  2000, 23911,  1037,   102])"
1522,1,['probability'], SUMMARY,seg_327,"the probability that at least three unique 6 digit number to each persons have the same birthday? of the enrolled students with the at most two people have the same following restrictions that :– (i) birthday? no-one except the twins the student number cannot start have a common birthday? with digit “0,” (ii) digits cannot be",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  9723,  2008,  2012,  2560,  2093,  4310,  1020, 15340,
         2193,  2000,  2169,  5381,  2031,  1996,  2168,  5798,  1029,  1997,
         1996,  8302,  2493,  2007,  1996,  2012,  2087,  2048,  2111,  2031,
         1996,  2168,  2206,  9259,  2008,  1024,  1516,  1006,  1045,  1007,
         5798,  1029,  2053,  1011,  2028,  3272,  1996,  8178,  1996,  3076,
         2193,  3685,  2707,  2031,  1037,  2691,  5798,  1029,  2007, 15340,
         1523,  1014,  1010,  1524,  1006,  2462,  1007, 16648,  3685,  2022,
          102])"
1523,0,[], SUMMARY,seg_327,"repeated in the first three places, 5.44 a customer needs change for a 10 but repetition is allowed in subdollar bill in 5 dollar, 2 dollar, and sequent digits. how many student 1 dollar bills. how many ways are numbers can be generated? there to make the change?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  5567,  1999,  1996,  2034,  2093,  3182,  1010,  1019,  1012,
         4008,  1037,  8013,  3791,  2689,  2005,  1037,  2184,  2021, 23318,
         2003,  3039,  1999,  4942,  3527, 17305,  3021,  1999,  1019,  7922,
         1010,  1016,  7922,  1010,  1998,  7367, 15417, 16648,  1012,  2129,
         2116,  3076,  1015,  7922,  8236,  1012,  2129,  2116,  3971,  2024,
         3616,  2064,  2022,  7013,  1029,  2045,  2000,  2191,  1996,  2689,
         1029,   102])"
1524,0,[], SUMMARY,seg_327,5.40 a fruit merchant has five bas5.45 use the pie principle to find,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  2871,  1037,  5909,  6432,  2038,  2274, 19021,
         2629,  1012,  3429,  2224,  1996, 11345,  6958,  2000,  2424,   102])"
1525,0,[], SUMMARY,seg_327,"kets of apples (all of one kind), how many integer solutions exist",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 17710,  3215,  1997, 18108,  1006,  2035,  1997,  2028,  2785,
         1007,  1010,  2129,  2116, 16109,  7300,  4839,   102])"
1526,0,[], SUMMARY,seg_327,"three baskets of oranges (all of one for the equation x1 + x2 + x3 = 11 kind), and two baskets of bananas where x1 ≤ 3, x2 ≤ 4, and x3 ≤ 6.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([12654]),"tensor([  101,  2093, 25946,  1997,  4589,  2015,  1006,  2035,  1997,  2028,
         2005,  1996,  8522,  1060,  2487,  1009,  1060,  2475,  1009,  1060,
         2509,  1027,  2340,  2785,  1007,  1010,  1998,  2048, 25946,  1997,
        26191,  2073,  1060,  2487,  1608,  1017,  1010,  1060,  2475,  1608,
         1018,  1010,  1998,  1060,  2509,  1608,  1020,  1012,   102])"
1527,0,[], SUMMARY,seg_327,to be displayed in front of the 5.46 a street has 10 houses on one shop. (i) how many ways can this side and 12 houses on the other be put if all of them are placed side. each of the houses should in one straight line (ii) if they are be numbered sequentially by start-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2000,  2022,  6913,  1999,  2392,  1997,  1996,  1019,  1012,
         4805,  1037,  2395,  2038,  2184,  3506,  2006,  2028,  4497,  1012,
         1006,  1045,  1007,  2129,  2116,  3971,  2064,  2023,  2217,  1998,
         2260,  3506,  2006,  1996,  2060,  2022,  2404,  2065,  2035,  1997,
         2068,  2024,  2872,  2217,  1012,  2169,  1997,  1996,  3506,  2323,
         1999,  2028,  3442,  2240,  1006,  2462,  1007,  2065,  2027,  2024,
         2022,  8597, 25582,  2135,  2011,  2707,  1011,   102])"
1528,0,[], SUMMARY,seg_327,arranged as a circle? ing from either end of the road,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  5412,  2004,  1037,  4418,  1029, 13749,  2013,  2593,  2203,
         1997,  1996,  2346,   102])"
1529,0,[], SUMMARY,seg_327,5.41 a restaurant offers 5 varieties of with three digits. how many ways,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  4601,  1037,  4825,  4107,  1019,  9903,  1997,
         2007,  2093, 16648,  1012,  2129,  2116,  3971,   102])"
1530,0,[], SUMMARY,seg_327,"soup, 10 varieties of the main can this be done if only the digcourse meal, and 5 varieties of ice its {0,1,2,3,4,5} are used? if all cream or cake after meal. how houses on one side get even house many choices are possible for a numbers and all houses on the person who will take any of the other side get odd numbers? if 0 choices? how many choices are cannot be used as a first digit for possible if a person does not take numbering.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 11350,  1010,  2184,  9903,  1997,  1996,  2364,  2064,  2023,
         2022,  2589,  2065,  2069,  1996, 10667,  3597, 28393,  7954,  1010,
         1998,  1019,  9903,  1997,  3256,  2049,  1063,  1014,  1010,  1015,
         1010,  1016,  1010,  1017,  1010,  1018,  1010,  1019,  1065,  2024,
         2109,  1029,  2065,  2035,  6949,  2030,  9850,  2044,  7954,  1012,
         2129,  3506,  2006,  2028,  2217,  2131,  2130,  2160,  2116,  9804,
         2024,  2825,  2005,  1037,  3616,  1998,  2035,  3506,  2006,  1996,
         2711,  2040,  2097,  2202,  2151,  1997,  1996,  2060,  2217,  2131,
         5976,  3616,  1029,  2065,  1014,  9804,  1029,  2129,  2116,  9804,
         2024,  3685,  2022,  2109,  2004,  1037,  2034, 15340,  2005,  2825,
         2065,  1037,  2711,  2515,  2025,  2202, 15200,  1012,   102])"
1531,0,[], SUMMARY,seg_327,"2 of the 10 varieties of the main 5.47 a rocket can fail independently course and 3 varieties of ice-cream due to navigation error(ne),",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1016,  1997,  1996,  2184,  9903,  1997,  1996,  2364,  1019,
         1012,  4700,  1037,  7596,  2064,  8246,  9174,  2607,  1998,  1017,
         9903,  1997,  3256,  1011,  6949,  2349,  2000,  9163,  7561,  1006,
        11265,  1007,  1010,   102])"
1532,0,[], SUMMARY,seg_327,"choices? software error(se), or hardware",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 9804, 1029, 4007, 7561, 1006, 7367, 1007, 1010, 2030, 8051,  102])"
1533,1,['probability'], SUMMARY,seg_327,5.42 the passenger area of a jumbo-jet fault(hf). the probability of ne,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  4413,  1996,  4628,  2181,  1997,  1037, 18414,
        13344,  1011,  6892,  6346,  1006,  1044,  2546,  1007,  1012,  1996,
         9723,  1997, 11265,   102])"
1534,1,"['probability', 'errors']", SUMMARY,seg_327,"can be divided into an execuis twice as large as that of se, and tive section (xs) and an economy the probability of se is three times section (es). there are three difas large as hf. assume that it ferent ways in which xs can be failed. (i) if there were no navigaarranged and five different ways in tion errors, what is the probability which es can be arranged. total that it was due to one of the other",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2064,  2022,  4055,  2046,  2019,  4654,  8586, 27020,  3807,
         2004,  2312,  2004,  2008,  1997,  7367,  1010,  1998, 14841,  3726,
         2930,  1006,  1060,  2015,  1007,  1998,  2019,  4610,  1996,  9723,
         1997,  7367,  2003,  2093,  2335,  2930,  1006,  9686,  1007,  1012,
         2045,  2024,  2093,  4487,  7011,  2015,  2312,  2004,  1044,  2546,
         1012,  7868,  2008,  2009, 10768, 22787,  3971,  1999,  2029,  1060,
         2015,  2064,  2022,  3478,  1012,  1006,  1045,  1007,  2065,  2045,
         2020,  2053,  6583,  5737,  3654,  2906, 24388,  2098,  1998,  2274,
         2367,  3971,  1999, 14841,  2239, 10697,  1010,  2054,  2003,  1996,
         9723,  2029,  9686,  2064,  2022,  5412,  1012,  2561,  2008,  2009,
         2001,  2349,  2000,  2028,  1997,  1996,  2060,   102])"
1535,1,"['probability', 'coefficients']", SUMMARY,seg_327,"faults? (ii) what is the probability px2 − qx + r = 0 is formed, whose that it was due to hardware faults nonzero coefficients (p, q, r) are given that there was no software determined by the number that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101, 19399,  1029,  1006,  2462,  1007,  2054,  2003,  1996,  9723,
         1052,  2595,  2475,  1597,  1053,  2595,  1009,  1054,  1027,  1014,
         2003,  2719,  1010,  3005,  2008,  2009,  2001,  2349,  2000,  8051,
        19399,  2512,  6290,  2080, 21374,  1006,  1052,  1010,  1053,  1010,
         1054,  1007,  2024,  2445,  2008,  2045,  2001,  2053,  4007,  4340,
         2011,  1996,  2193,  2008,   102])"
1536,1,['probability'], SUMMARY,seg_327,fault? turns up when this die is thrown. what is the probability that the 5.48 there are four blood group types roots are real if the numbers that,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 6346, 1029, 4332, 2039, 2043, 2023, 3280, 2003, 6908, 1012, 2054,
        2003, 1996, 9723, 2008, 1996, 1019, 1012, 4466, 2045, 2024, 2176, 2668,
        2177, 4127, 6147, 2024, 2613, 2065, 1996, 3616, 2008,  102])"
1537,0,[], SUMMARY,seg_327,"of rh-factors {+, −}. assume ing are 3 and 4?. what is the probthat all of them are equally likely. ability that the roots are equal? among a group of 50 students,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1997,  1054,  2232,  1011,  5876,  1063,  1009,  1010,  1597,
         1065,  1012,  7868, 13749,  2024,  1017,  1998,  1018,  1029,  1012,
         2054,  2003,  1996,  4013, 19279, 12707,  2035,  1997,  2068,  2024,
         8053,  3497,  1012,  3754,  2008,  1996,  6147,  2024,  5020,  1029,
         2426,  1037,  2177,  1997,  2753,  2493,  1010,   102])"
1538,1,['probability'], SUMMARY,seg_327,"what is the probability that (i) 5.52 a class comprises 35 males and 25 there are at least 5 students with females. if five students each have o blood group.(ii) probability for to give a seminar randomly each at least 10 students with +ve day, find the probability that (i) all rh-factor and blood group a or b. five of them on a day are males",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2054,  2003,  1996,  9723,  2008,  1006,  1045,  1007,  1019,
         1012,  4720,  1037,  2465,  8681,  3486,  3767,  1998,  2423,  2045,
         2024,  2012,  2560,  1019,  2493,  2007,  3801,  1012,  2065,  2274,
         2493,  2169,  2031,  1051,  2668,  2177,  1012,  1006,  2462,  1007,
         9723,  2005,  2000,  2507,  1037, 18014, 18154,  2169,  2012,  2560,
         2184,  2493,  2007,  1009,  2310,  2154,  1010,  2424,  1996,  9723,
         2008,  1006,  1045,  1007,  2035,  1054,  2232,  1011,  5387,  1998,
         2668,  2177,  1037,  2030,  1038,  1012,  2274,  1997,  2068,  2006,
         1037,  2154,  2024,  3767,   102])"
1539,0,[], SUMMARY,seg_327,and (ii) three are males and rest 5.49 consider a quadratic equation,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1998,  1006,  2462,  1007,  2093,  2024,  3767,  1998,  2717,
         1019,  1012,  4749,  5136,  1037, 17718, 23671,  8522,   102])"
1540,1,['coefficients'], SUMMARY,seg_327,"px2 + qx + r = 0, whose nonzero females. how many ways are there if at least two boys are to give the coefficients are determined by the seminar each day? number that turns up when a die",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1052,  2595,  2475,  1009,  1053,  2595,  1009,  1054,  1027,
         1014,  1010,  3005,  2512,  6290,  2080,  3801,  1012,  2129,  2116,
         3971,  2024,  2045,  2065,  2012,  2560,  2048,  3337,  2024,  2000,
         2507,  1996, 21374,  2024,  4340,  2011,  1996, 18014,  2169,  2154,
         1029,  2193,  2008,  4332,  2039,  2043,  1037,  3280,   102])"
1541,1,['probability'], SUMMARY,seg_327,"is thrown. find the probability that 5.53 a trailer truck has 10 identi(i) the discriminant b2 − 4 ∗ a ∗ c cal looking wheels. a mechanic is an integer, (ii) the roots are interemoves the brake pedals for gers, (iii) at least one integer root, cleaning and returns them back to and (iv) there are no real roots. the wheels after some time. what",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2003,  6908,  1012,  2424,  1996,  9723,  2008,  1019,  1012,
         5187,  1037,  9117,  4744,  2038,  2184,  8909,  4765,  2072,  1006,
         1045,  1007,  1996,  5860, 20026,  3981,  3372,  1038,  2475,  1597,
         1018,  1598,  1037,  1598,  1039, 10250,  2559,  7787,  1012,  1037,
        15893,  2003,  2019, 16109,  1010,  1006,  2462,  1007,  1996,  6147,
         2024,  6970,  6633, 21818,  2015,  1996, 13428, 15749,  2015,  2005,
        16216,  2869,  1010,  1006,  3523,  1007,  2012,  2560,  2028, 16109,
         7117,  1010,  9344,  1998,  5651,  2068,  2067,  2000,  1998,  1006,
         4921,  1007,  2045,  2024,  2053,  2613,  6147,  1012,  1996,  7787,
         2044,  2070,  2051,  1012,  2054,   102])"
1542,1,['probability'], SUMMARY,seg_327,is the probability that (i) all brake 5.50 a family has n friends. they,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  2003,  1996,  9723,  2008,  1006,  1045,  1007,  2035, 13428,
         1019,  1012,  2753,  1037,  2155,  2038,  1050,  2814,  1012,  2027,
          102])"
1543,0,[], SUMMARY,seg_327,pedals are returned to their correct invite m (1 m n∕7) friends wheels? and (ii) none of the brake randomly on each day from sunpedals match their corresponding day to saturday to their house wheels? where some of the invited guests,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])",tensor([12654]),"tensor([  101, 15749,  2015,  2024,  2513,  2000,  2037,  6149, 13260,  1049,
         1006,  1015,  1049,   100,  1007,  2814,  7787,  1029,  1998,  1006,
         2462,  1007,  3904,  1997,  1996, 13428, 18154,  2006,  2169,  2154,
         2013,  3103,  5669,  9777,  2674,  2037,  7978,  2154,  2000,  5095,
         2000,  2037,  2160,  7787,  1029,  2073,  2070,  1997,  1996,  4778,
         6368,   102])"
1544,1,['sets'], SUMMARY,seg_327,"may overlap on different days, but 5.54 an online examination has n questhe group as a whole are different tions, which are taken together by on each day (no identical groups m (≥2) students sitting in a cominvited twice). for instance, if puter laboratory. to avoid copym = 2 and {x,y} are invited on ing, the instructor sets it up in such sunday, {x,z} or {y ,z} may be a way that the questions for each invited on another day. what is the student are generated using unique",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2089, 17702,  2006,  2367,  2420,  1010,  2021,  1019,  1012,
         5139,  2019,  3784,  7749,  2038,  1050,  8795,  5369,  2177,  2004,
         1037,  2878,  2024,  2367, 14841,  5644,  1010,  2029,  2024,  2579,
         2362,  2011,  2006,  2169,  2154,  1006,  2053,  7235,  2967,  1049,
         1006,  1609,  2475,  1007,  2493,  3564,  1999,  1037,  4012,  2378,
        25217,  2094,  3807,  1007,  1012,  2005,  6013,  1010,  2065,  2404,
         2121,  5911,  1012,  2000,  4468,  6100,  2213,  1027,  1016,  1998,
         1063,  1060,  1010,  1061,  1065,  2024,  4778,  2006, 13749,  1010,
         1996,  9450,  4520,  2009,  2039,  1999,  2107,  4465,  1010,  1063,
         1060,  1010,  1062,  1065,  2030,  1063,  1061,  1010,  1062,  1065,
         2089,  2022,  1037,  2126,  2008,  1996,  3980,  2005,  2169,  4778,
         2006,  2178,  2154,  1012,  2054,  2003,  1996,  3076,  2024,  7013,
         2478,  4310,   102])"
1545,1,"['random numbers', 'random']", SUMMARY,seg_327,minimum and maximum number random numbers between 1 and of friends who visit the house in n (so that the same question is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 6263, 1998, 4555, 2193, 6721, 3616, 2090, 1015, 1998, 1997, 2814,
        2040, 3942, 1996, 2160, 1999, 1050, 1006, 2061, 2008, 1996, 2168, 3160,
        2003,  102])"
1546,0,[], SUMMARY,seg_327,"a week? not displayed twice, and adjacent",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1037, 2733, 1029, 2025, 6913, 3807, 1010, 1998, 5516,  102])"
1547,0,[], SUMMARY,seg_327,5.51 consider a die with six faces. they students may get different ques-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  4868,  5136,  1037,  3280,  2007,  2416,  5344,
         1012,  2027,  2493,  2089,  2131,  2367, 10861,  2015,  1011,   102])"
1548,1,['probability'], SUMMARY,seg_327,"are not numbered from 1 to 6, but tion orders). find the probability it is known that two of the numthat (i) all questions are generbers repeat once (resulting in four ated in exactly the same order to numbers). a quadratic equation two students sitting next to each",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2024,  2025,  8597,  2013,  1015,  2000,  1020,  1010,  2021,
        14841,  2239,  4449,  1007,  1012,  2424,  1996,  9723,  2009,  2003,
         2124,  2008,  2048,  1997,  1996, 16371, 20492, 12707,  1006,  1045,
         1007,  2035,  3980,  2024,  4962, 20473,  2015,  9377,  2320,  1006,
         4525,  1999,  2176,  8823,  2094,  1999,  3599,  1996,  2168,  2344,
         2000,  3616,  1007,  1012,  1037, 17718, 23671,  8522,  2048,  2493,
         3564,  2279,  2000,  2169,   102])"
1549,1,['probability'], SUMMARY,seg_327,"other?. (ii) exactly k of the ques5.58 two exactly identical deck of tions are generated the same order cards is shuffled. then, two cards to two students sitting next to each each are drawn from the pool other?. (iii) all questions are genand kept face down. a player is erated differently for two or more allowed to take one pair of face students? down cards at a time until k identical pairs are obtained. what is the 5.55 assume that n pairs of husbands probability of obtaining k match-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2060,  1029,  1012,  1006,  2462,  1007,  3599,  1047,  1997,
         1996, 10861,  2015,  2629,  1012,  5388,  2048,  3599,  7235,  5877,
         1997, 14841,  5644,  2024,  7013,  1996,  2168,  2344,  5329,  2003,
        18764,  1012,  2059,  1010,  2048,  5329,  2000,  2048,  2493,  3564,
         2279,  2000,  2169,  2169,  2024,  4567,  2013,  1996,  4770,  2060,
         1029,  1012,  1006,  3523,  1007,  2035,  3980,  2024,  8991,  5685,
         2921,  2227,  2091,  1012,  1037,  2447,  2003,  3690,  3064, 11543,
         2005,  2048,  2030,  2062,  3039,  2000,  2202,  2028,  3940,  1997,
         2227,  2493,  1029,  2091,  5329,  2012,  1037,  2051,  2127,  1047,
         7235,  7689,  2024,  4663,  1012,  2054,  2003,  1996,  1019,  1012,
         4583,  7868,  2008,  1050,  7689,  1997, 19089,  9723,  1997, 11381,
         1047,  2674,  1011,   102])"
1550,1,"['probability', 'random', 'paired']", SUMMARY,seg_327,"and wives enter a club, each one ing pairs? wearing a hat. the hats are handed 5.59 an urn contains m blue and n over to a waitress for keeping. red balls. a second urn contains after a short while, all n pairs of a blue and b red balls. two balls people assemble for a dance each are drawn at random from the first one wearing a hat. if the waiter urn and put into the second urn. distributes the hats at random, and then, a ball is drawn from the secthe dancing pairs are formed at ond urn. find the probability that random, find the probability that (i) it is blue and (ii) it is red. (i) no couple are properly paired,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1998, 10403,  4607,  1037,  2252,  1010,  2169,  2028, 13749,
         7689,  1029,  4147,  1037,  6045,  1012,  1996, 16717,  2024,  4375,
         1019,  1012,  5354,  2019, 24471,  2078,  3397,  1049,  2630,  1998,
         1050,  2058,  2000,  1037, 13877,  2005,  4363,  1012,  2417,  7395,
         1012,  1037,  2117, 24471,  2078,  3397,  2044,  1037,  2460,  2096,
         1010,  2035,  1050,  7689,  1997,  1037,  2630,  1998,  1038,  2417,
         7395,  1012,  2048,  7395,  2111, 21365,  2005,  1037,  3153,  2169,
         2024,  4567,  2012,  6721,  2013,  1996,  2034,  2028,  4147,  1037,
         6045,  1012,  2065,  1996, 15610, 24471,  2078,  1998,  2404,  2046,
         1996,  2117, 24471,  2078,  1012, 16062,  2015,  1996, 16717,  2012,
         6721,  1010,  1998,  2059,  1010,  1037,  3608,  2003,  4567,  2013,
         1996, 17831,  5369,  5613,  7689,  2024,  2719,  2012,  2006,  2094,
        24471,  2078,  1012,  2424,  1996,  9723,  2008,  6721,  1010,  2424,
         1996,  9723,  2008,  1006,  1045,  1007,  2009,  2003,  2630,  1998,
         1006,  2462,  1007,  2009,  2003,  2417,  1012,  1006,  1045,  1007,
         2053,  3232,  2024,  7919, 12739,  1010,   102])"
1551,1,"['probability', 'random']", SUMMARY,seg_327,"and nobody gets their own hat; 5.60 there are n pairs of shoes in a box (ii) exactly k of the couple are (total 2n shoes). if m( n) shoes matched, but no one get their are chosen at random from the matching hat; (iii) exactly k of box without looking at the shoe, the hats are matched, but no coufind the probability that (i) none ple are matched; (iv) exactly k of of the m shoes have a matching the couple and m of the hats are pair, (ii) at most two of them have matched; and (v) all husbands and a matching pair, and (iii) in how wives are matched but none of the many ways can you choose m pairs",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1998,  6343,  4152,  2037,  2219,  6045,  1025,  1019,  1012,
         3438,  2045,  2024,  1050,  7689,  1997,  6007,  1999,  1037,  3482,
         1006,  2462,  1007,  3599,  1047,  1997,  1996,  3232,  2024,  1006,
         2561,  1016,  2078,  6007,  1007,  1012,  2065,  1049,  1006,  1050,
         1007,  6007, 10349,  1010,  2021,  2053,  2028,  2131,  2037,  2024,
         4217,  2012,  6721,  2013,  1996,  9844,  6045,  1025,  1006,  3523,
         1007,  3599,  1047,  1997,  3482,  2302,  2559,  2012,  1996, 10818,
         1010,  1996, 16717,  2024, 10349,  1010,  2021,  2053,  2522, 16093,
        22254,  1996,  9723,  2008,  1006,  1045,  1007,  3904, 20228,  2063,
         2024, 10349,  1025,  1006,  4921,  1007,  3599,  1047,  1997,  1997,
         1996,  1049,  6007,  2031,  1037,  9844,  1996,  3232,  1998,  1049,
         1997,  1996, 16717,  2024,  3940,  1010,  1006,  2462,  1007,  2012,
         2087,  2048,  1997,  2068,  2031, 10349,  1025,  1998,  1006,  1058,
         1007,  2035, 19089,  1998,  1037,  9844,  3940,  1010,  1998,  1006,
         3523,  1007,  1999,  2129, 10403,  2024, 10349,  2021,  3904,  1997,
         1996,  2116,  3971,  2064,  2017,  5454,  1049,  7689,   102])"
1552,0,['n'], SUMMARY,seg_327,hats are matched. (  n) such that at least one match-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 16717,  2024, 10349,  1012,  1006,  1050,  1007,  2107,  2008,
         2012,  2560,  2028,  2674,  1011,   102])"
1553,1,"['biased', 'probability']", SUMMARY,seg_327,ing pair is obtained. 5.56 a biased coin has probability p of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13749,  3940,  2003,  4663,  1012,  1019,  1012,  5179,  1037,
        25352,  9226,  2038,  9723,  1052,  1997,   102])"
1554,1,"['replacement', 'probability', 'events', 'without replacement', 'outcomes', 'conditional']", SUMMARY,seg_327,"heads showing up. if it is tossed 12 5.61 a lottery selects the winner by times, find the conditional probadrawing 5 numbers between 1 and bility that for each of the follow39 randomly. find probability of ing if it is known that a total of six the following events if (i) none of heads have been obtained: (i) the the numbers can repeat (all numfirst four outcomes are htht and bers are unique or it is like sam(ii) they are ttth. pling without replacement) and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4641,  4760,  2039,  1012,  2065,  2009,  2003,  7463,  2260,
         1019,  1012,  6079,  1037, 15213, 27034,  1996,  3453,  2011,  2335,
         1010,  2424,  1996, 18462,  4013,  9024,  2527,  9328,  1019,  3616,
         2090,  1015,  1998, 12170, 18605,  2008,  2005,  2169,  1997,  1996,
         3582, 23499, 18154,  1012,  2424,  9723,  1997, 13749,  2065,  2009,
         2003,  2124,  2008,  1037,  2561,  1997,  2416,  1996,  2206,  2824,
         2065,  1006,  1045,  1007,  3904,  1997,  4641,  2031,  2042,  4663,
         1024,  1006,  1045,  1007,  1996,  1996,  3616,  2064,  9377,  1006,
         2035, 16371,  2213,  8873, 12096,  2176, 13105,  2024,  1044,  2705,
         2102,  1998,  2022,  2869,  2024,  4310,  2030,  2009,  2003,  2066,
         3520,  1006,  2462,  1007,  2027,  2024, 23746,  2705,  1012, 20228,
         2075,  2302,  6110,  1007,  1998,   102])"
1555,0,[], SUMMARY,seg_327,"(ii) numbers can repeat: (a) all 5 5.57 a telephone number has eight dignumbers are odd, (b) all numbers",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1006,  2462,  1007,  3616,  2064,  9377,  1024,  1006,  1037,
         1007,  2035,  1019,  1019,  1012,  5401,  1037,  7026,  2193,  2038,
         2809, 10667, 19172, 17198,  2024,  5976,  1010,  1006,  1038,  1007,
         2035,  3616,   102])"
1556,1,"['probability', 'error', 'independent']", SUMMARY,seg_327,"its. what is the probability for are below 25, (c) at least 2 numeach of the following, if startbers are above 30, and (d) none of ing (leftmost) digits cannot be the numbers are primes. zeros? (i) four or more digits are repeated?, (ii) at most six digits 5.62 a device is manufactured in m are repeated?, and (iii) none of the independent successive steps. digits are repeated? probability of making an error at",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2049,  1012,  2054,  2003,  1996,  9723,  2005,  2024,  2917,
         2423,  1010,  1006,  1039,  1007,  2012,  2560,  1016, 16371,  4168,
         6776,  1997,  1996,  2206,  1010,  2065,  2707, 17198,  2024,  2682,
         2382,  1010,  1998,  1006,  1040,  1007,  3904,  1997, 13749,  1006,
         2187, 11800,  1007, 16648,  3685,  2022,  1996,  3616,  2024,  3539,
         2015,  1012,  5717,  2015,  1029,  1006,  1045,  1007,  2176,  2030,
         2062, 16648,  2024,  5567,  1029,  1010,  1006,  2462,  1007,  2012,
         2087,  2416, 16648,  1019,  1012,  5786,  1037,  5080,  2003,  7609,
         1999,  1049,  2024,  5567,  1029,  1010,  1998,  1006,  3523,  1007,
         3904,  1997,  1996,  2981, 11165,  4084,  1012, 16648,  2024,  5567,
         1029,  9723,  1997,  2437,  2019,  7561,  2012,   102])"
1557,1,['probability'], SUMMARY,seg_327,"step k is pk. find the probability and 7? and (ii) at least by 3 and 7 that out of n manufactured items, but not by 5?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 3357, 1047, 2003, 1052, 2243, 1012, 2424, 1996, 9723, 1998, 1021,
        1029, 1998, 1006, 2462, 1007, 2012, 2560, 2011, 1017, 1998, 1021, 2008,
        2041, 1997, 1050, 7609, 5167, 1010, 2021, 2025, 2011, 1019, 1029,  102])"
1558,1,"['events', 'independent']", SUMMARY,seg_327,"(ii) at most two are defectives, p(b|a) = p(a ∩ b) or (ii) p(ac) ∗ (iii) a lot contains between two p(bc) = p(ac ∩ bc) when events and five defectives, and (iv) none a and b are independent. are defectives. 5.68 a faulty electronics appliance has 5.63 consider a quadratic equation eight exactly looking components.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  2462,  1007,  2012,  2087,  2048,  2024, 28829,  2015,
         1010,  1052,  1006,  1038,  1064,  1037,  1007,  1027,  1052,  1006,
         1037,  1604,  1038,  1007,  2030,  1006,  2462,  1007,  1052,  1006,
         9353,  1007,  1598,  1006,  3523,  1007,  1037,  2843,  3397,  2090,
         2048,  1052,  1006,  4647,  1007,  1027,  1052,  1006,  9353,  1604,
         4647,  1007,  2043,  2824,  1998,  2274, 28829,  2015,  1010,  1998,
         1006,  4921,  1007,  3904,  1037,  1998,  1038,  2024,  2981,  1012,
         2024, 28829,  2015,  1012,  1019,  1012,  6273,  1037, 28927,  8139,
        10439, 15204,  3401,  2038,  1019,  1012,  6191,  5136,  1037, 17718,
        23671,  8522,  2809,  3599,  2559,  6177,  1012,   102])"
1559,1,['samples'], SUMMARY,seg_327,"px2 − qx + r = 0, whose nonzero bob samples four components",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0.])",tensor([12654]),"tensor([ 101, 1052, 2595, 2475, 1597, 1053, 2595, 1009, 1054, 1027, 1014, 1010,
        3005, 2512, 6290, 2080, 3960, 8168, 2176, 6177,  102])"
1560,1,"['probability', 'tests', 'samples']", SUMMARY,seg_327,"coefficients (p, q, r) are deterarbitrarily, tests each of them indimined by the number that turns vidually, writes his initial “b” up when a regular pyramid with on each of them and puts them five faces numbered 1–5 is thrown. back. after he is finished, peter find the number of ways in which comes and samples three compo(i) the equation will have real nents arbitrarily and does the same roots, (ii) equal roots, (iii) imagitesting, writes his initial “p” on nary roots, (iv) both integer roots, each of the 3 and puts them back. and (vi) exactly one integer root. what is the probability that (i)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 21374,  1006,  1052,  1010,  1053,  1010,  1054,  1007,  2024,
        28283,  2906, 16313, 19848,  6588,  1010,  5852,  2169,  1997,  2068,
        27427, 27605,  7228,  2011,  1996,  2193,  2008,  4332,  6819,  8566,
         3973,  1010,  7009,  2010,  3988,  1523,  1038,  1524,  2039,  2043,
         1037,  3180, 11918,  2007,  2006,  2169,  1997,  2068,  1998,  8509,
         2068,  2274,  5344,  8597,  1015,  1516,  1019,  2003,  6908,  1012,
         2067,  1012,  2044,  2002,  2003,  2736,  1010,  2848,  2424,  1996,
         2193,  1997,  3971,  1999,  2029,  3310,  1998,  8168,  2093,  4012,
         6873,  1006,  1045,  1007,  1996,  8522,  2097,  2031,  2613, 11265,
         7666, 12098, 16313, 19848,  6588,  1998,  2515,  1996,  2168,  6147,
         1010,  1006,  2462,  1007,  5020,  6147,  1010,  1006,  3523,  1007,
        10047, 22974, 22199,  2075,  1010,  7009,  2010,  3988,  1523,  1052,
         1524,  2006,  6583,  2854,  6147,  1010,  1006,  4921,  1007,  2119,
        16109,  6147,  1010,  2169,  1997,  1996,  1017,  1998,  8509,  2068,
         2067,  1012,  1998,  1006,  6819,  1007,  3599,  2028, 16109,  7117,
         1012,  2054,  2003,  1996,  9723,  2008,  1006,  1045,  1007,   102])"
1561,0,[], SUMMARY,seg_327,5.64 a software company has 8 vb none of the components have both,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1019, 1012, 4185, 1037, 4007, 2194, 2038, 1022, 1058, 2497, 3904,
        1997, 1996, 6177, 2031, 2119,  102])"
1562,0,[], SUMMARY,seg_327,"experts, 5 c++ experts, 10 java marks, (ii)exactly two of the comexperts, and 4 c# expert programponents will have marks “p” and mers. a new project that requires “b”? and (iii) at least two of them 3 vb, 2 java, and 3 c++ experts is have both the marks?.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  8519,  1010,  1019,  1039,  1009,  1009,  8519,  1010,  2184,
         9262,  6017,  1010,  1006,  2462,  1007,  3599,  2048,  1997,  1996,
         2272,  2595,  4842,  3215,  1010,  1998,  1018,  1039,  1001,  6739,
         2565, 29513,  7666,  2097,  2031,  6017,  1523,  1052,  1524,  1998,
        21442,  2015,  1012,  1037,  2047,  2622,  2008,  5942,  1523,  1038,
         1524,  1029,  1998,  1006,  3523,  1007,  2012,  2560,  2048,  1997,
         2068,  1017,  1058,  2497,  1010,  1016,  9262,  1010,  1998,  1017,
         1039,  1009,  1009,  8519,  2003,  2031,  2119,  1996,  6017,  1029,
         1012,   102])"
1563,0,[], SUMMARY,seg_327,"to be initiated. in how many ways 5.69 a group of 12 school kids are on can the team be formed? if another a sightseeing trip. the instructor project requires two each of vb wants to stock enough drinks of and c# experts, three each of c++ each kind. there are seven stuand java experts, how many ways dents who drink coffee, four stuare there to form the team? dents who drink tea, nine students",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])",tensor([12654]),"tensor([  101,  2000,  2022,  7531,  1012,  1999,  2129,  2116,  3971,  1019,
         1012,  6353,  1037,  2177,  1997,  2260,  2082,  4268,  2024,  2006,
         2064,  1996,  2136,  2022,  2719,  1029,  2065,  2178,  1037, 15925,
         4402,  2075,  4440,  1012,  1996,  9450,  2622,  5942,  2048,  2169,
         1997,  1058,  2497,  4122,  2000,  4518,  2438,  8974,  1997,  1998,
         1039,  1001,  8519,  1010,  2093,  2169,  1997,  1039,  1009,  1009,
         2169,  2785,  1012,  2045,  2024,  2698, 24646,  5685,  9262,  8519,
         1010,  2129,  2116,  3971, 21418,  2015,  2040,  4392,  4157,  1010,
         2176, 24646, 12069,  2045,  2000,  2433,  1996,  2136,  1029, 21418,
         2015,  2040,  4392,  5572,  1010,  3157,  2493,   102])"
1564,1,['coefficient'], SUMMARY,seg_327,"5.65 the simple matching coefficient who drink fruit juice, three stu-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  3515,  1996,  3722,  9844, 19064,  2040,  4392,
         5909, 10869,  1010,  2093, 24646,  1011,   102])"
1565,1,['coefficient'], SUMMARY,seg_327,"(smc) used in cluster analysis dents who drink coffee and tea, is a similarity coefficient defined four who drinks coffee and juice, on binary strings as smc(x, y) = and two who drink tea and juice.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006, 15488,  2278,  1007,  2109,  1999,  9324,  4106, 21418,
         2015,  2040,  4392,  4157,  1998,  5572,  1010,  2003,  1037, 14402,
        19064,  4225,  2176,  2040,  8974,  4157,  1998, 10869,  1010,  2006,
        12441,  7817,  2004, 15488,  2278,  1006,  1060,  1010,  1061,  1007,
         1027,  1998,  2048,  2040,  4392,  5572,  1998, 10869,  1012,   102])"
1566,1,"['probability', 'random', 'data']", SUMMARY,seg_327,"1 (number of positions in which x (i) how many students drink all and y match), where d= total numthree beverages? (ii) a student is ber of bits or the size of the data. selected at random and is found to if x and y are d bits long, what is drink fruit juice. what is the probthe probability that (i) smc takes ability that student does not drink the value 1, (ii) smc takes the coffee.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1006,  2193,  1997,  4460,  1999,  2029,  1060,  1006,
         1045,  1007,  2129,  2116,  2493,  4392,  2035,  1998,  1061,  2674,
         1007,  1010,  2073,  1040,  1027,  2561, 16371, 20492, 28362,  2063,
        21705,  1029,  1006,  2462,  1007,  1037,  3076,  2003,  2022,  2099,
         1997,  9017,  2030,  1996,  2946,  1997,  1996,  2951,  1012,  3479,
         2012,  6721,  1998,  2003,  2179,  2000,  2065,  1060,  1998,  1061,
         2024,  1040,  9017,  2146,  1010,  2054,  2003,  4392,  5909, 10869,
         1012,  2054,  2003,  1996,  4013, 19279,  5369,  9723,  2008,  1006,
         1045,  1007, 15488,  2278,  3138,  3754,  2008,  3076,  2515,  2025,
         4392,  1996,  3643,  1015,  1010,  1006,  2462,  1007, 15488,  2278,
         3138,  1996,  4157,  1012,   102])"
1567,0,[], SUMMARY,seg_327,(d even). with respective male and female,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1006, 1040, 2130, 1007, 1012, 2007, 7972, 3287, 1998, 2931,  102])"
1568,1,['test'], SUMMARY,seg_327,"and 200 are divisible by (i) 3, 5, (32,12). an aptitude test is given",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1998,  3263,  2024,  4487, 11365,  7028,  2011,  1006,  1045,
         1007,  1017,  1010,  1019,  1010,  1006,  3590,  1010,  2260,  1007,
         1012,  2019, 26794, 18679,  3231,  2003,  2445,   102])"
1569,1,['probability'], SUMMARY,seg_327,"in all the three classes. if a girl total ocean area. the probable hit scored the highest marks followed point is 85% in ocean. what is the by two boys overall, what is the probability that it will (i) fall in the probability that (i) all came from atlantic ocean and (ii) it will hit y?. (ii) female topper came from land mass or atlantic?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1999,  2035,  1996,  2093,  4280,  1012,  2065,  1037,  2611,
         2561,  4153,  2181,  1012,  1996, 15596,  2718,  3195,  1996,  3284,
         6017,  2628,  2391,  2003,  5594,  1003,  1999,  4153,  1012,  2054,
         2003,  1996,  2011,  2048,  3337,  3452,  1010,  2054,  2003,  1996,
         9723,  2008,  2009,  2097,  1006,  1045,  1007,  2991,  1999,  1996,
         9723,  2008,  1006,  1045,  1007,  2035,  2234,  2013,  4448,  4153,
         1998,  1006,  2462,  1007,  2009,  2097,  2718,  1061,  1029,  1012,
         1006,  2462,  1007,  2931,  2327,  4842,  2234,  2013,  2455,  3742,
         2030,  4448,  1029,   102])"
1570,1,['tests'], SUMMARY,seg_327,z and males came from x and y? 5.75 two medical tests are being devel-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1062,  1998,  3767,  2234,  2013,  1060,  1998,  1061,  1029,
         1019,  1012,  4293,  2048,  2966,  5852,  2024,  2108, 16475,  2884,
         1011,   102])"
1571,0,[], SUMMARY,seg_327,5.71 the underground water supply oped for a new virus infection.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1019, 1012, 6390, 1996, 5230, 2300, 4425, 6728, 2098, 2005, 1037,
        2047, 7865, 8985, 1012,  102])"
1572,1,"['probability', 'test']", SUMMARY,seg_327,system in a city in northern latthe first test t1 has probability itude has 5 major pipes and 50 of identifying the presence of the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2291,  1999,  1037,  2103,  1999,  2642,  2474,  4779,  5369,
         2034,  3231,  1056,  2487,  2038,  9723,  2009, 12672,  2038,  1019,
         2350, 12432,  1998,  2753,  1997, 12151,  1996,  3739,  1997,  1996,
          102])"
1573,1,"['cases', 'test']", SUMMARY,seg_327,minor pipes with respective probavirus in 99% of the cases but is bilities of cracks in a year as pois expensive. the second test t2 is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3576, 12432,  2007,  7972,  4013,  3676, 23350,  1999,  5585,
         1003,  1997,  1996,  3572,  2021,  2003, 12170, 15909,  3111,  1997,
        15288,  1999,  1037,  2095,  2004, 13433,  2483,  6450,  1012,  1996,
         2117,  3231,  1056,  2475,  2003,   102])"
1574,1,"['cases', 'rate', 'probability', 'test', 'false positive']", SUMMARY,seg_327,"(1/1000) and pois (1/200). what cheap, but it can detect the disis the probability of one major and ease in 96% of the cases. the first two minor cracks in a year? if a test has a false positive rate of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  1015,  1013,  6694,  1007,  1998, 13433,  2483,  1006,
         1015,  1013,  3263,  1007,  1012,  2054, 10036,  1010,  2021,  2009,
         2064, 11487,  1996,  4487,  6190,  1996,  9723,  1997,  2028,  2350,
         1998,  7496,  1999,  5986,  1003,  1997,  1996,  3572,  1012,  1996,
         2034,  2048,  3576, 15288,  1999,  1037,  2095,  1029,  2065,  1037,
         3231,  2038,  1037,  6270,  3893,  3446,  1997,   102])"
1575,1,['test'], SUMMARY,seg_327,"crack has indeed occurred, what is 0.05, whereas the second test has",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 8579, 2038, 5262, 4158, 1010, 2054, 2003, 1014, 1012, 5709, 1010,
        6168, 1996, 2117, 3231, 2038,  102])"
1576,1,"['probability', 'false positive', 'rate']", SUMMARY,seg_327,the probability that both of them a false positive rate of 0.06. if a,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1996, 9723, 2008, 2119, 1997, 2068, 1037, 6270, 3893, 3446, 1997,
        1014, 1012, 5757, 1012, 2065, 1037,  102])"
1577,0,[], SUMMARY,seg_327,"have cracked? person is tested positive using t2,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 2031, 9630, 1029, 2711, 2003, 7718, 3893, 2478, 1056, 2475, 1010,
         102])"
1578,1,['probability'], SUMMARY,seg_327,5.72 a tourist has to visit n tourist-spots what is the probability that the dis-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1019, 1012, 5824, 1037, 7538, 2038, 2000, 3942, 1050, 7538, 1011,
        7516, 2054, 2003, 1996, 9723, 2008, 1996, 4487, 2015, 1011,  102])"
1579,1,['tests'], SUMMARY,seg_327,in a city. in how many possible ease is truly present? if both tests order can this be visited if (i) all of show positive what is the proba-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1999, 1037, 2103, 1012, 1999, 2129, 2116, 2825, 7496, 2003, 5621,
        2556, 1029, 2065, 2119, 5852, 2344, 2064, 2023, 2022, 4716, 2065, 1006,
        1045, 1007, 2035, 1997, 2265, 3893, 2054, 2003, 1996, 4013, 3676, 1011,
         102])"
1580,0,['n'], SUMMARY,seg_327,"them are visited on a single day?, bility that the person truly has the (ii) n∕2 each in two days (for n disease. even)?, and (iii) m of them on first day and rest on second day. 5.76 there are nine rings, all of which",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2068,  2024,  4716,  2006,  1037,  2309,  2154,  1029,  1010,
        12170, 18605,  2008,  1996,  2711,  5621,  2038,  1996,  1006,  2462,
         1007,   100,  2169,  1999,  2048,  2420,  1006,  2005,  1050,  4295,
         1012,  2130,  1007,  1029,  1010,  1998,  1006,  3523,  1007,  1049,
         1997,  2068,  2006,  2034,  2154,  1998,  2717,  2006,  2117,  2154,
         1012,  1019,  1012,  6146,  2045,  2024,  3157,  7635,  1010,  2035,
         1997,  2029,   102])"
1581,1,['probability'], SUMMARY,seg_327,have exactly identical look. three 5.73 if the probability of head showof them are gold and the rest are,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2031,  3599,  7235,  2298,  1012,  2093,  1019,  1012,  6421,
         2065,  1996,  9723,  1997,  2132,  2265, 11253,  2068,  2024,  2751,
         1998,  1996,  2717,  2024,   102])"
1582,1,"['probability', 'trials', 'trial']", SUMMARY,seg_327,"the probability that (i) the second what is the probability of identihead is obtained in an odd numfying the three gold rings in (i) bered trial and (ii) the third head is two weightings?, (ii) three weightobtained in at least 10 and at most ings?, and (iii) four weightings? 15 trials.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  9723,  2008,  1006,  1045,  1007,  1996,  2117,  2054,
         2003,  1996,  9723,  1997,  8909,  4765, 19190, 13775,  2003,  4663,
         1999,  2019,  5976, 16371,  2213, 14116,  1996,  2093,  2751,  7635,
         1999,  1006,  1045,  1007,  2022,  5596,  3979,  1998,  1006,  2462,
         1007,  1996,  2353,  2132,  2003,  2048,  3635,  8613,  1029,  1010,
         1006,  2462,  1007,  2093,  3635, 16429, 28055,  1999,  2012,  2560,
         2184,  1998,  2012,  2087, 13749,  2015,  1029,  1010,  1998,  1006,
         3523,  1007,  2176,  3635,  8613,  1029,  2321,  7012,  1012,   102])"
1583,0,[], SUMMARY,seg_327,5.74 a satellite that failed to reach orbit 5.77 a container has 12 machinery,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  6356,  1037,  5871,  2008,  3478,  2000,  3362,
         8753,  1019,  1012,  6255,  1037, 11661,  2038,  2260, 10394,   102])"
1584,1,"['probability', 'random', 'probability theory']", SUMMARY,seg_327,"is falling down to the earth. some parts, all looking alike. seven of internal parts made of steel, titathem are known to be good, three nium, and beryllium that have a of them have mild defect, and the high melting point are likely to rest have severe defect. two parts make through the descent withare selected at random. find probout burning up. the exact locaability that (i) both of them are tion where it will hit the surface good and (ii) one is good and other is unknown owing to its eccentric has mild defect? path. assume that 70% of earth 5.78 a course on probability theory surface is covered with water. the atlantic ocean is 16.67% of the is attended by 28 students with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2003,  4634,  2091,  2000,  1996,  3011,  1012,  2070,  3033,
         1010,  2035,  2559, 11455,  1012,  2698,  1997,  4722,  3033,  2081,
         1997,  3886,  1010, 14841, 29336, 29122,  2024,  2124,  2000,  2022,
         2204,  1010,  2093,  9152,  2819,  1010,  1998,  2022, 23320, 21816,
         2008,  2031,  1037,  1997,  2068,  2031, 10256, 21262,  1010,  1998,
         1996,  2152, 13721,  2391,  2024,  3497,  2000,  2717,  2031,  5729,
        21262,  1012,  2048,  3033,  2191,  2083,  1996,  6934,  2007, 12069,
         3479,  2012,  6721,  1012,  2424,  4013,  5092,  4904,  5255,  2039,
         1012,  1996,  6635,  8840,  3540,  8010,  2008,  1006,  1045,  1007,
         2119,  1997,  2068,  2024, 14841,  2239,  2073,  2009,  2097,  2718,
         1996,  3302,  2204,  1998,  1006,  2462,  1007,  2028,  2003,  2204,
         1998,  2060,  2003,  4242, 11427,  2000,  2049, 18080,  2038, 10256,
        21262,  1029,  4130,  1012,  7868,  2008,  3963,  1003,  1997,  3011,
         1019,  1012,  6275,  1037,  2607,  2006,  9723,  3399,  3302,  2003,
         3139,  2007,  2300,  1012,  1996,  4448,  4153,  2003,  2385,  1012,
         6163,  1003,  1997,  1996,  2003,  3230,  2011,  2654,  2493,  2007,
          102])"
1585,1,['probability'], SUMMARY,seg_327,"statistics major or computer scibirthday with you?. if m among ence major. if there are 18 statisthe n people are males, find the tics majors and 14 computer probability that at least one male science majors, how many are shares the birthday with you.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6747,  2350,  2030,  3274, 16596, 17706,  2705, 10259,  2007,
         2017,  1029,  1012,  2065,  1049,  2426,  4372,  3401,  2350,  1012,
         2065,  2045,  2024,  2324, 28093,  2923,  5369,  1050,  2111,  2024,
         3767,  1010,  2424,  1996, 14841,  6169, 15279,  1998,  2403,  3274,
         9723,  2008,  2012,  2560,  2028,  3287,  2671, 15279,  1010,  2129,
         2116,  2024,  6661,  1996,  5798,  2007,  2017,  1012,   102])"
1586,1,['table'], SUMMARY,seg_327,"double majors? 5.80 using table 5.9 (p. 5.9), com-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3313, 15279,  1029,  1019,  1012,  3770,  2478,  2795,  1019,
         1012,  1023,  1006,  1052,  1012,  1019,  1012,  1023,  1007,  1010,
         4012,  1011,   102])"
1587,1,"['probability', 'conditional probability', 'conditional']", SUMMARY,seg_327,5.79 suppose you are in a room with n pute the conditional probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  6535,  6814,  2017,  2024,  1999,  1037,  2282,
         2007,  1050,  2404,  2063,  1996, 18462,  9723,   102])"
1588,0,['o'], SUMMARY,seg_327,other people. what is the probathat parent blood types are a or b bility that no one else shares the given that child’s type is o.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2060,  2111,  1012,  2054,  2003,  1996,  4013, 14479, 12707,
         6687,  2668,  4127,  2024,  1037,  2030,  1038, 12170, 18605,  2008,
         2053,  2028,  2842,  6661,  1996,  2445,  2008,  2775,  1521,  1055,
         2828,  2003,  1051,  1012,   102])"
1589,1,['independent'], SUMMARY,seg_327,"5.81 if x and y are independent, which of the following are also independent? (a) x",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1019, 1012, 6282, 2065, 1060, 1998, 1061, 2024, 2981, 1010, 2029,
        1997, 1996, 2206, 2024, 2036, 2981, 1029, 1006, 1037, 1007, 1060,  102])"
1590,1,"['probability', 'table']", SUMMARY,seg_327,5.82 the customer breakdown to a store is given in table 5.11. find the probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  6445,  1996,  8013, 12554,  2000,  1037,  3573,
         2003,  2445,  1999,  2795,  1019,  1012,  2340,  1012,  2424,  1996,
         9723,   102])"
1591,1,"['conditional probability', 'probability', 'conditional']", SUMMARY,seg_327,"that (i) a randomly chosen customer to the store is a female and (ii) conditional probability that a customer will visit the store on friday, given that the customer is male.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  2008,  1006,  1045,  1007,  1037, 18154,  4217,  8013,  2000,
         1996,  3573,  2003,  1037,  2931,  1998,  1006,  2462,  1007, 18462,
         9723,  2008,  1037,  8013,  2097,  3942,  1996,  3573,  2006,  5958,
         1010,  2445,  2008,  1996,  8013,  2003,  3287,  1012,   102])"
1592,0,[], SUMMARY,seg_327,5.83 cancer incidence among first-hand smokers and second-hand smokers (who,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1019,  1012,  6640,  4456, 18949,  2426,  2034,  1011,  2192,
         5610,  2869,  1998,  2117,  1011,  2192,  5610,  2869,  1006,  2040,
          102])"
1593,1,"['probability', 'table']", SUMMARY,seg_327,are exposed to smokers inside enclosed areas) are given in table 5.12. a new patient is found to be a nonsmoker. what is the probability that he has benign cancer? a retiree is having malignant tumor. find the probability that he is a smoker.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2024,  6086,  2000,  5610,  2869,  2503, 10837,  2752,  1007,
         2024,  2445,  1999,  2795,  1019,  1012,  2260,  1012,  1037,  2047,
         5776,  2003,  2179,  2000,  2022,  1037,  2512, 25855,  5484,  1012,
         2054,  2003,  1996,  9723,  2008,  2002,  2038, 28378,  4456,  1029,
         1037, 11036,  2063,  2003,  2383, 16007, 27881, 13656,  1012,  2424,
         1996,  9723,  2008,  2002,  2003,  1037,  5610,  2099,  1012,   102])"
1594,1,['events'], SUMMARY,seg_327,"5.84 if a1,a2, … an are finite events, some of which have overlaps, prove that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  6391,  2065, 17350,  1010, 22441,  1010,  1529,
         2019,  2024, 10713,  2824,  1010,  2070,  1997,  2029,  2031, 17702,
         2015,  1010,  6011,  2008,   102])"
1595,0,[], SUMMARY,seg_327,where summations are carried out using conditions specified.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2073,  7680, 28649,  2015,  2024,  3344,  2041,  2478,  3785,
         9675,  1012,   102])"
1596,1,['processes'], SUMMARY,seg_327,5.85 a mineral is extracted using two processes p1 and p2. two types of impurities,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1019,  1012,  5594,  1037,  9754,  2003, 15901,  2478,  2048,
         6194,  1052,  2487,  1998,  1052,  2475,  1012,  2048,  4127,  1997,
        17727, 29366,   102])"
1597,1,"['table', 'probability', 'process', 'data']", SUMMARY,seg_327,"in the mineral are examined by a quality inspector. data appear in table 5.13. a lot produced by process p1 is randomly selected. find the probability that it contains impurity b. if a lot is known to contain impurity a, what is the chance that it was produced by process p2?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1999,  1996,  9754,  2024,  8920,  2011,  1037,  3737,  7742,
         1012,  2951,  3711,  1999,  2795,  1019,  1012,  2410,  1012,  1037,
         2843,  2550,  2011,  2832,  1052,  2487,  2003, 18154,  3479,  1012,
         2424,  1996,  9723,  2008,  2009,  3397, 17727, 25137,  1038,  1012,
         2065,  1037,  2843,  2003,  2124,  2000,  5383, 17727, 25137,  1037,
         1010,  2054,  2003,  1996,  3382,  2008,  2009,  2001,  2550,  2011,
         2832,  1052,  2475,  1029,   102])"
1598,0,[], DISCRETE DISTRIBUTIONS,seg_329,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16246, 20611])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
1599,1,"['binomial', 'binomial theorem']", DISCRETE DISTRIBUTIONS,seg_329,◾ understand binomial theorem and its forms,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([16246, 20611])","tensor([  101,   100,  3305,  8026, 20936,  2389,  9872,  1998,  2049,  3596,
          102])"
1600,1,"['distribution', 'bernoulli', 'trials', 'bernoulli trials', 'bernoulli distribution']", DISCRETE DISTRIBUTIONS,seg_329,◾ explain bernoulli trials and bernoulli distribution,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 1., 0.])","tensor([16246, 20611])","tensor([  101,   100,  4863, 16595,  7140,  6894,  7012,  1998, 16595,  7140,
         6894,  4353,   102])"
1601,1,"['binomial distribution', 'binomial', 'distribution']", DISCRETE DISTRIBUTIONS,seg_329,◾ describe binomial distribution and its properties,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([16246, 20611])","tensor([  101,   100,  6235,  8026, 20936,  2389,  4353,  1998,  2049,  5144,
          102])"
1602,1,"['poisson', 'poisson distribution', 'distribution']", DISCRETE DISTRIBUTIONS,seg_329,◾ apply poisson distribution in practical situations,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([16246, 20611])","tensor([  101,   100,  6611, 13433, 24077,  4353,  1999,  6742,  8146,   102])"
1603,1,"['hypergeometric distribution', 'geometric', 'hypergeometric', 'distribution']", DISCRETE DISTRIBUTIONS,seg_329,"◾ understand geometric, hypergeometric distribution, and its properties",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([16246, 20611])","tensor([  101,   100,  3305, 14965,  1010, 23760,  3351, 28993,  4353,  1010,
         1998,  2049,  5144,   102])"
1604,1,"['negative binomial distribution', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", DISCRETE DISTRIBUTIONS,seg_329,◾ describe negative binomial distribution and its properties,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([16246, 20611])","tensor([  101,   100,  6235,  4997,  8026, 20936,  2389,  4353,  1998,  2049,
         5144,   102])"
1605,1,"['multinomial', 'multinomial distribution', 'distribution']", DISCRETE DISTRIBUTIONS,seg_329,◾ describe logarithmic and multinomial distribution and its properties,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([16246, 20611])","tensor([  101,   100,  6235,  8833,  8486,  2705,  7712,  1998,  4800,  3630,
        10092,  2140,  4353,  1998,  2049,  5144,   102])"
1606,1,"['power method', 'distributions', 'method', 'discrete distributions', 'discrete']", DISCRETE DISTRIBUTIONS,seg_329,◾ apply the power method to find the md of discrete distributions,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([16246, 20611])","tensor([  101,   100,  6611,  1996,  2373,  4118,  2000,  2424,  1996,  9108,
         1997, 16246, 20611,   102])"
1607,1,"['continuous', 'function', 'discrete random variable', 'sample space', 'discrete', 'interval', 'random variable', 'sample', 'random', 'random variables', 'experiment', 'variables', 'variable']", DISCRETE RANDOM VARIABLES,seg_331,"a real-valued function defined on the sample space of a random experiment is called a random variable. we denote the random variables by capital english letters (x, y, etc.) and particular values by lowercase letters (x, y, etc.). random variables can be discrete or continuous. a random variable that can take a countable number of possible values in a finite or infinite interval is called a discrete random variable. in most of the applications, the values assumed are positive (x ≥1) or nonnegative (x ≥ 0) integers that are equispaced. theoretically, this is not a restriction. consider, for example,",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6721, 10857])","tensor([  101,  1037,  2613,  1011, 11126,  3853,  4225,  2006,  1996,  7099,
         2686,  1997,  1037,  6721,  7551,  2003,  2170,  1037,  6721,  8023,
         1012,  2057, 19090,  1996,  6721, 10857,  2011,  3007,  2394,  4144,
         1006,  1060,  1010,  1061,  1010,  4385,  1012,  1007,  1998,  3327,
         5300,  2011,  2896, 18382,  4144,  1006,  1060,  1010,  1061,  1010,
         4385,  1012,  1007,  1012,  6721, 10857,  2064,  2022, 16246,  2030,
         7142,  1012,  1037,  6721,  8023,  2008,  2064,  2202,  1037,  4175,
         3085,  2193,  1997,  2825,  5300,  1999,  1037, 10713,  2030, 10709,
        13483,  2003,  2170,  1037, 16246,  6721,  8023,  1012,  1999,  2087,
         1997,  1996,  5097,  1010,  1996,  5300,  5071,  2024,  3893,  1006,
         1060,  1609,  2487,  1007,  2030,  2512,  2638, 26792,  1006,  1060,
         1609,  1014,  1007, 24028,  2008,  2024,  1041, 15549, 23058,  2094,
         1012, 22634,  1010,  2023,  2003,  2025,  1037, 16840,  1012,  5136,
         1010,  2005,  2742,  1010,   102])"
1608,1,"['table', 'random variable', 'random', 'variable']", DISCRETE RANDOM VARIABLES,seg_331,"the portion of a fruit (say apples) taken by a person at a dining table per day. if it is cut evenly and eaten by different family members, the random variable of interest takes values 0, 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6721, 10857])","tensor([  101,  1996,  4664,  1997,  1037,  5909,  1006,  2360, 18108,  1007,
         2579,  2011,  1037,  2711,  2012,  1037,  7759,  2795,  2566,  2154,
         1012,  2065,  2009,  2003,  3013, 18030,  1998,  8828,  2011,  2367,
         2155,  2372,  1010,  1996,  6721,  8023,  1997,  3037,  3138,  5300,
         1014,  1010,  1015,   102])"
1609,1,"['continuous', 'change of origin', 'discrete', 'transformation', 'continuous distributions', 'distributions', 'displaced distributions', 'discrete distributions', 'variable']", DISCRETE RANDOM VARIABLES,seg_331,"2 , 1, 1 1 2 , 2, and so on. similarly, if an employer allows an employee to take either a half-day leave or a full-day leave only, the variable of interest takes integer or half-integer values. however, the majority of discrete distributions discussed in the following are defined on “counts” or “occurrences” that can take nonnegative integer values (0, 1, 2, … ). displaced distributions are those obtained by a change of origin transformation (y = x ± c). the constant c is assumed to be a nonzero integer for discrete distributions and a real number for continuous distributions. left-truncated distributions are exceptions in which the starting value is offset by a positive integer.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6721, 10857])","tensor([  101,  1016,  1010,  1015,  1010,  1015,  1015,  1016,  1010,  1016,
         1010,  1998,  2061,  2006,  1012,  6660,  1010,  2065,  2019, 11194,
         4473,  2019,  7904,  2000,  2202,  2593,  1037,  2431,  1011,  2154,
         2681,  2030,  1037,  2440,  1011,  2154,  2681,  2069,  1010,  1996,
         8023,  1997,  3037,  3138, 16109,  2030,  2431,  1011, 16109,  5300,
         1012,  2174,  1010,  1996,  3484,  1997, 16246, 20611,  6936,  1999,
         1996,  2206,  2024,  4225,  2006,  1523,  9294,  1524,  2030,  1523,
        27247,  1524,  2008,  2064,  2202,  2512,  2638, 26792, 16109,  5300,
         1006,  1014,  1010,  1015,  1010,  1016,  1010,  1529,  1007,  1012,
        12936, 20611,  2024,  2216,  4663,  2011,  1037,  2689,  1997,  4761,
         8651,  1006,  1061,  1027,  1060,  1081,  1039,  1007,  1012,  1996,
         5377,  1039,  2003,  5071,  2000,  2022,  1037,  2512,  6290,  2080,
        16109,  2005, 16246, 20611,  1998,  1037,  2613,  2193,  2005,  7142,
        20611,  1012,  2187,  1011, 25449, 20611,  2024, 11790,  1999,  2029,
         1996,  3225,  3643,  2003, 16396,  2011,  1037,  3893, 16109,  1012,
          102])"
1610,1,"['incomplete beta', 'functions', 'hypergeometric', 'hypergeometric distributions', 'poisson distributions', 'poisson', 'statistics', 'negative binomial distributions', 'statistical', 'geometric', 'binomial', 'case', 'continuous', 'discrete', 'probability', 'binomial distributions', 'probabilities', 'negative binomial', 'random variables', 'discrete distributions', 'range', 'gamma', 'discrete random variables', 'distributions', 'random', 'distribution', 'variables']", DISCRETE RANDOM VARIABLES,seg_331,"this chapter discusses popular discrete distributions. the x values are assumed to be equispaced integers, unless otherwise noted. the domain of x can be finite (as in binomial, discrete uniform, and hypergeometric distributions (hgds)) or infinite (as in poisson, geometric, and negative binomial distributions). in the case of infinite range, we naturally expect the probabilities to tail-off to zero beyond a cutoff. discrete distributions with finite range are more popular in practical applications, whereas those with infinite range are more important theoretically. this is because some statistical distributions with finite range asymptotically converge to discrete distributions with infinite range as shown below. the cumulative distribution functions (cdfs) of discrete random variables are step functions. the cdf of binomial, negative binomial, and poisson distributions can be expressed as continuous functions such as the incomplete beta and gamma functions as shown below. it may be noted that there exist many more statistical distributions than those mentioned below (see references 121–123. here, we discuss only those that are widely used in the applications of probability and statistics in everyday life.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0.])","tensor([16246,  6721, 10857])","tensor([  101,  2023,  3127, 15841,  2759, 16246, 20611,  1012,  1996,  1060,
         5300,  2024,  5071,  2000,  2022,  1041, 15549, 23058,  2094, 24028,
         1010,  4983,  4728,  3264,  1012,  1996,  5884,  1997,  1060,  2064,
         2022, 10713,  1006,  2004,  1999,  8026, 20936,  2389,  1010, 16246,
         6375,  1010,  1998, 23760,  3351, 28993, 20611,  1006,  1044,  2290,
         5104,  1007,  1007,  2030, 10709,  1006,  2004,  1999, 13433, 24077,
         1010, 14965,  1010,  1998,  4997,  8026, 20936,  2389, 20611,  1007,
         1012,  1999,  1996,  2553,  1997, 10709,  2846,  1010,  2057,  8100,
         5987,  1996,  4013,  3676, 14680,  2000,  5725,  1011,  2125,  2000,
         5717,  3458,  1037,  3013,  7245,  1012, 16246, 20611,  2007, 10713,
         2846,  2024,  2062,  2759,  1999,  6742,  5097,  1010,  6168,  2216,
         2007, 10709,  2846,  2024,  2062,  2590, 22634,  1012,  2023,  2003,
         2138,  2070,  7778, 20611,  2007, 10713,  2846,  2004, 24335, 13876,
        20214,  3973, 28314,  2000, 16246, 20611,  2007, 10709,  2846,  2004,
         3491,  2917,  1012,  1996, 23260,  4353,  4972,  1006,  3729, 10343,
         1007,  1997, 16246,  6721, 10857,  2024,  3357,  4972,  1012,  1996,
         3729,  2546,  1997,  8026, 20936,  2389,  1010,  4997,  8026, 20936,
         2389,  1010,  1998, 13433, 24077, 20611,  2064,  2022,  5228,  2004,
         7142,  4972,  2107,  2004,  1996, 12958,  8247,  1998, 13091,  4972,
         2004,  3491,  2917,  1012,  2009,  2089,  2022,  3264,  2008,  2045,
         4839,  2116,  2062,  7778, 20611,  2084,  2216,  3855,  2917,  1006,
         2156,  7604, 12606,  1516, 13138,  1012,  2182,  1010,  2057,  6848,
         2069,  2216,  2008,  2024,  4235,  2109,  1999,  1996,  5097,  1997,
         9723,  1998,  6747,  1999, 10126,  2166,  1012,   102])"
1611,1,"['distribution', 'statistical', 'binomial', 'binomial theorem']", BINOMIAL THEOREM,seg_333,"the binomial theorem with positive and negative exponents has many applications in statistical distribution theory. this section provides an overview of this theorem, which will be used in the sequel. we first consider an expansion for integer powers of a sum or difference of two quantities. more specifically, if n is a positive integer, and x and y are nonzero real numbers, the power (x + y)n can be expressed as a sum of n + 1 quantities in either of two ways as follows:",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  1996,  8026, 20936,  2389,  9872,  2007,  3893,  1998,  4997,
        16258, 21576,  2015,  2038,  2116,  5097,  1999,  7778,  4353,  3399,
         1012,  2023,  2930,  3640,  2019, 19184,  1997,  2023,  9872,  1010,
         2029,  2097,  2022,  2109,  1999,  1996,  8297,  1012,  2057,  2034,
         5136,  2019,  4935,  2005, 16109,  4204,  1997,  1037,  7680,  2030,
         4489,  1997,  2048, 12450,  1012,  2062,  4919,  1010,  2065,  1050,
         2003,  1037,  3893, 16109,  1010,  1998,  1060,  1998,  1061,  2024,
         2512,  6290,  2080,  2613,  3616,  1010,  1996,  2373,  1006,  1060,
         1009,  1061,  1007,  1050,  2064,  2022,  5228,  2004,  1037,  7680,
         1997,  1050,  1009,  1015, 12450,  1999,  2593,  1997,  2048,  3971,
         2004,  4076,  1024,   102])"
1612,0,['n'], BINOMIAL THEOREM,seg_333,k) denotes n!∕(k!(n − k)!. this is most easily proved by induction on n (see,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  1047,  1007, 14796,  1050,   999,   100,  1006,  1047,   999,
         1006,  1050,  1597,  1047,  1007,   999,  1012,  2023,  2003,  2087,
         4089,  4928,  2011, 15946,  2006,  1050,  1006,  2156,   102])"
1613,1,['function'], BINOMIAL THEOREM,seg_333,"exercise). here, the indexvar k is used as an exponent and a function (in ( n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  6912,  1007,  1012,  2182,  1010,  1996,  5950, 10755,  1047,
         2003,  2109,  2004,  2019, 16258, 21576,  1998,  1037,  3853,  1006,
         1999,  1006,  1050,   102])"
1614,1,"['binomial coefficients', 'coefficients', 'binomial']", BINOMIAL THEOREM,seg_333,"k) (also denoted as nck, see page 1–16) are called binomial coefficients,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  1047,  1007,  1006,  2036, 19537,  2004, 13316,  2243,  1010,
         2156,  3931,  1015,  1516,  2385,  1007,  2024,  2170,  8026, 20936,
         2389, 21374,  1010,   102])"
1615,1,['case'], BINOMIAL THEOREM,seg_333,which are always integers when n and k are integers. the special case ( 0,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  2029,  2024,  2467, 24028,  2043,  1050,  1998,  1047,  2024,
        24028,  1012,  1996,  2569,  2553,  1006,  1014,   102])"
1616,1,['case'], BINOMIAL THEOREM,seg_333,"to be 1 by convention. in the particular case when x = y = 1, the aforementioned",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  2000,  2022,  1015,  2011,  4680,  1012,  1999,  1996,  3327,
         2553,  2043,  1060,  1027,  1061,  1027,  1015,  1010,  1996, 17289,
          102])"
1617,1,['coefficients'], BINOMIAL THEOREM,seg_333,"n k), the coefficients in the above-mentioned",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  1050,  1047,  1007,  1010,  1996, 21374,  1999,  1996,  2682,
         1011,  3855,   102])"
1618,1,['symmetric'], BINOMIAL THEOREM,seg_333,expansion are symmetric (hence 2n = ∑k,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  4935,  2024, 19490,  1006,  6516,  1016,  2078,  1027,   100,
          102])"
1619,0,['n'], BINOMIAL THEOREM,seg_333,"n k), which follows by summing in",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  9872])","tensor([ 101, 1050, 1047, 1007, 1010, 2029, 4076, 2011, 7680, 6562, 1999,  102])"
1620,1,['coefficients'], BINOMIAL THEOREM,seg_333,"reverse). if n is odd, there are (n + 1) terms with (n + 1)∕2 coefficients symmetrically",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  7901,  1007,  1012,  2065,  1050,  2003,  5976,  1010,  2045,
         2024,  1006,  1050,  1009,  1015,  1007,  3408,  2007,  1006,  1050,
         1009,  1015,  1007,   100, 21374, 23476,  2135,   102])"
1621,1,['coefficients'], BINOMIAL THEOREM,seg_333,"placed. for instance, if n = 5, there are three coefficients ( 0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  2872,  1012,  2005,  6013,  1010,  2065,  1050,  1027,  1019,
         1010,  2045,  2024,  2093, 21374,  1006,  1014,   102])"
1622,1,"['coefficients', 'symmetric']", BINOMIAL THEOREM,seg_333,"5) = 10. if n is even, there are n∕2 symmetric coefficients with a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  1019,  1007,  1027,  2184,  1012,  2065,  1050,  2003,  2130,
         1010,  2045,  2024,   100, 19490, 21374,  2007,  1037,   102])"
1623,1,['coefficient'], BINOMIAL THEOREM,seg_333,unique middle coefficient ( n∕,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  4310,  2690, 19064,  1006,   100,   102])"
1624,0,['n'], BINOMIAL THEOREM,seg_333,"n 2). if y is negative, we write x − y as x + (−y) and the above-mentioned expansion gives",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  9872])","tensor([ 101, 1050, 1016, 1007, 1012, 2065, 1061, 2003, 4997, 1010, 2057, 4339,
        1060, 1597, 1061, 2004, 1060, 1009, 1006, 1597, 2100, 1007, 1998, 1996,
        2682, 1011, 3855, 4935, 3957,  102])"
1625,0,[], BINOMIAL THEOREM,seg_333,"when the index n in the above-mentioned expansion is negative, we get an infinite series as given below:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  2043,  1996,  5950,  1050,  1999,  1996,  2682,  1011,  3855,
         4935,  2003,  4997,  1010,  2057,  2131,  2019, 10709,  2186,  2004,
         2445,  2917,  1024,   102])"
1626,1,['case'], BINOMIAL THEOREM,seg_333,"in the particular case when y = 1, we get",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([ 101, 1999, 1996, 3327, 2553, 2043, 1061, 1027, 1015, 1010, 2057, 2131,
         102])"
1627,1,"['associated', 'probability', 'interval', 'events', 'probabilities', 'distributions', 'distribution', 'statistical', 'total probability']", BINOMIAL THEOREM,seg_333,"we have not placed any restrictions on x and y values in the above-mentioned expansions, other than that they are nonzero real numbers. as the total probability of statistical distributions must sum to unity, we make the restriction that x + y = 1. these are usually denoted by p and q (or   and 1 −  ) instead of x and y in statistical applications. this implies that q = 1 − p, so that both p and q lie in the interval [0, 1]. as shown in the following, p and q are the probabilities associated with the occurrence or nonoccurrence of well-defined events in distribution theory.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  9872])","tensor([  101,  2057,  2031,  2025,  2872,  2151,  9259,  2006,  1060,  1998,
         1061,  5300,  1999,  1996,  2682,  1011,  3855,  4935,  2015,  1010,
         2060,  2084,  2008,  2027,  2024,  2512,  6290,  2080,  2613,  3616,
         1012,  2004,  1996,  2561,  9723,  1997,  7778, 20611,  2442,  7680,
         2000,  8499,  1010,  2057,  2191,  1996, 16840,  2008,  1060,  1009,
         1061,  1027,  1015,  1012,  2122,  2024,  2788, 19537,  2011,  1052,
         1998,  1053,  1006,  2030,  1998,  1015,  1597,  1007,  2612,  1997,
         1060,  1998,  1061,  1999,  7778,  5097,  1012,  2023, 12748,  2008,
         1053,  1027,  1015,  1597,  1052,  1010,  2061,  2008,  2119,  1052,
         1998,  1053,  4682,  1999,  1996, 13483,  1031,  1014,  1010,  1015,
         1033,  1012,  2004,  3491,  1999,  1996,  2206,  1010,  1052,  1998,
         1053,  2024,  1996,  4013,  3676, 14680,  3378,  2007,  1996, 14404,
         2030,  2512, 10085, 10841, 14343,  5897,  1997,  2092,  1011,  4225,
         2824,  1999,  4353,  3399,  1012,   102])"
1628,1,['coefficients'], Recurrence Relation for Binomial Coefficients,seg_335,binomial coefficients satisfy many recurrences. these are most often proved by,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  8026, 20936,  2389, 21374, 13225,  2116, 28667,  3126, 24413,
         2015,  1012,  2122,  2024,  2087,  2411,  4928,  2011,   102])"
1629,0,[], Recurrence Relation for Binomial Coefficients,seg_335,r) denotes the number of ways of choosing r,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  1054,  1007, 14796,  1996,  2193,  1997,  3971,  1997, 10549,
         1054,   102])"
1630,1,"['without replacement', 'replacement']", Recurrence Relation for Binomial Coefficients,seg_335,objects from among n objects without replacement. we give only the simplest and most popular recurrences in the following:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  5200,  2013,  2426,  1050,  5200,  2302,  6110,  1012,  2057,
         2507,  2069,  1996, 21304,  1998,  2087,  2759, 28667,  3126, 24413,
         2015,  1999,  1996,  2206,  1024,   102])"
1631,0,[], Recurrence Relation for Binomial Coefficients,seg_335,"this is known as pascal’s identity. as the only arithmetic operation involved is addition, this always returns an integer result.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  2023,  2003,  2124,  2004, 17878,  1521,  1055,  4767,  1012,
         2004,  1996,  2069, 20204,  3169,  2920,  2003,  2804,  1010,  2023,
         2467,  5651,  2019, 16109,  2765,  1012,   102])"
1632,1,"['recurrence', 'coefficients', 'error']", Recurrence Relation for Binomial Coefficients,seg_335,"this recurrence simultaneously decrements both the arguments and is useful in computing the coefficients for small r values. it is used in chapter 8, example 8.35 (p. 8–11). as shown in the following, this could result in approximations owing to truncation error resulting from (n/r). a remedy is suggested below.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  2023, 28667,  3126, 24413,  7453, 11703, 28578, 11187,  2119,
         1996,  9918,  1998,  2003,  6179,  1999,  9798,  1996, 21374,  2005,
         2235,  1054,  5300,  1012,  2009,  2003,  2109,  1999,  3127,  1022,
         1010,  2742,  1022,  1012,  3486,  1006,  1052,  1012,  1022,  1516,
         2340,  1007,  1012,  2004,  3491,  1999,  1996,  2206,  1010,  2023,
         2071,  2765,  1999, 20167,  2015, 11427,  2000, 19817,  4609, 10719,
         7561,  4525,  2013,  1006,  1050,  1013,  1054,  1007,  1012,  1037,
        19519,  2003,  4081,  2917,  1012,   102])"
1633,0,['n'], Recurrence Relation for Binomial Coefficients,seg_335,n 1) this form is useful when n is large and r is small.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([ 101, 1050, 1015, 1007, 2023, 2433, 2003, 6179, 2043, 1050, 2003, 2312,
        1998, 1054, 2003, 2235, 1012,  102])"
1634,1,"['binomial distribution', 'binomial', 'distribution']", Recurrence Relation for Binomial Coefficients,seg_335,"this form is useful when n is very large and r is close to n, so that the decrementing of n is continued until n becomes r. it is used to simplify the md of binomial distribution (p. 6–23).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  2023,  2433,  2003,  6179,  2043,  1050,  2003,  2200,  2312,
         1998,  1054,  2003,  2485,  2000,  1050,  1010,  2061,  2008,  1996,
        11703, 28578, 26951,  1997,  1050,  2003,  2506,  2127,  1050,  4150,
         1054,  1012,  2009,  2003,  2109,  2000, 21934, 28250,  1996,  9108,
         1997,  8026, 20936,  2389,  4353,  1006,  1052,  1012,  1020,  1516,
         2603,  1007,  1012,   102])"
1635,1,"['negative binomial distribution', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", Recurrence Relation for Binomial Coefficients,seg_335,this is used in negative binomial distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  2023,  2003,  2109,  1999,  4997,  8026, 20936,  2389,  4353,
         1012,   102])"
1636,0,['n'], Recurrence Relation for Binomial Coefficients,seg_335,this form is useful when n and m are large and close-by.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([ 101, 2023, 2433, 2003, 6179, 2043, 1050, 1998, 1049, 2024, 2312, 1998,
        2485, 1011, 2011, 1012,  102])"
1637,1,"['factorial moments', 'combinations', 'moments', 'combination', 'factorial']", Recurrence Relation for Binomial Coefficients,seg_335,this combines multiple summations of combinations into a single combination. it is used in finding factorial moments (see page 6–45).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  2023, 13585,  3674,  7680, 28649,  2015,  1997, 14930,  2046,
         1037,  2309,  5257,  1012,  2009,  2003,  2109,  1999,  4531,  5387,
         4818,  5312,  1006,  2156,  3931,  1020,  1516,  3429,  1007,  1012,
          102])"
1638,1,"['factorial moments', 'distributions', 'discrete distributions', 'moments', 'convolution', 'factorial', 'discrete']", Recurrence Relation for Binomial Coefficients,seg_335,this is called vandermonde convolution. it is used in deriving factorial moments of some discrete distributions (see page 6–82).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  2023,  2003,  2170,  3158,  4063, 11442,  2063,  9530,  6767,
         7630,  3508,  1012,  2009,  2003,  2109,  1999,  4315, 14966,  5387,
         4818,  5312,  1997,  2070, 16246, 20611,  1006,  2156,  3931,  1020,
         1516,  6445,  1007,  1012,   102])"
1639,1,['coefficients'], Recurrence Relation for Binomial Coefficients,seg_335,binomial coefficients evaluated by a computer can sometimes result in approx-,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  8026, 20936,  2389, 21374, 16330,  2011,  1037,  3274,  2064,
         2823,  2765,  1999, 22480,  1011,   102])"
1640,0,[], Recurrence Relation for Binomial Coefficients,seg_335,"imations. for instance, ( 3",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101, 10047, 10708,  1012,  2005,  6013,  1010,  1006,  1017,   102])"
1641,1,['error'], Recurrence Relation for Binomial Coefficients,seg_335,1 ) = 1.6666666 ∗ 2 ∗ 3 = 9.999999999999) owing to truncation error. this is because the expression inside the bracket is forcibly evaluated. if the order of evalu-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  1015,  1007,  1027,  1015,  1012,  5764, 28756, 28756,  2575,
         1598,  1016,  1598,  1017,  1027,  1023,  1012, 25897,  2683,  2683,
         2683,  2683,  2683,  2683,  2683,  2683,  2683,  1007, 11427,  2000,
        19817,  4609, 10719,  7561,  1012,  2023,  2003,  2138,  1996,  3670,
         2503,  1996, 21605,  2003, 20951, 16330,  1012,  2065,  1996,  2344,
         1997,  9345,  7630,  1011,   102])"
1642,0,['n'], Recurrence Relation for Binomial Coefficients,seg_335,ation is modified as ( n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([ 101, 2012, 3258, 2003, 6310, 2004, 1006, 1050,  102])"
1643,0,[], Recurrence Relation for Binomial Coefficients,seg_335,"1) ∕r without parenthesis, we will get the correct",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101,  1015,  1007,   100,  2302,  6687, 24124,  1010,  2057,  2097,
         2131,  1996,  6149,   102])"
1644,0,[], Recurrence Relation for Binomial Coefficients,seg_335,"integer result. alternatively, use pascal’s identity (1). it always returns an integer as it involves only additions (see reference 22).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([28667,  3126, 24413,  7189,  2005,  8026, 20936,  2389, 21374])","tensor([  101, 16109,  2765,  1012, 14084,  1010,  2224, 17878,  1521,  1055,
         4767,  1006,  1015,  1007,  1012,  2009,  2467,  5651,  2019, 16109,
         2004,  2009,  7336,  2069, 13134,  1006,  2156,  4431,  2570,  1007,
         1012,   102])"
1645,1,"['bernoulli', 'distributions', 'distribution', 'statistical', 'binomial', 'bernoulli distribution', 'binomial theorem']", Distributions Obtainable from Binomial Theorem,seg_337,"there are many statistical distributions that are derived from the above-mentioned form of the binomial theorem. taking n = 1, x = p, and y = q = 1 − p, we get the bernoulli distribution (section 6.4). setting n  1 to be an integer, x = p and y = q",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20611,  6855,  3085,  2013,  8026, 20936,  2389,  9872])","tensor([  101,  2045,  2024,  2116,  7778, 20611,  2008,  2024,  5173,  2013,
         1996,  2682,  1011,  3855,  2433,  1997,  1996,  8026, 20936,  2389,
         9872,  1012,  2635,  1050,  1027,  1015,  1010,  1060,  1027,  1052,
         1010,  1998,  1061,  1027,  1053,  1027,  1015,  1597,  1052,  1010,
         2057,  2131,  1996, 16595,  7140,  6894,  4353,  1006,  2930,  1020,
         1012,  1018,  1007,  1012,  4292,  1050,  1015,  2000,  2022,  2019,
        16109,  1010,  1060,  1027,  1052,  1998,  1061,  1027,  1053,   102])"
1646,1,"['negative binomial distribution', 'range', 'geometric distribution', 'coefficients', 'negative binomial', 'binomial theorem', 'results', 'distribution', 'geometric', 'binomial', 'case', 'discrete', 'binomial distribution']", Distributions Obtainable from Binomial Theorem,seg_337,"= 1 − p, results in the binomial distribution (section 6.5). putting n = −1, p = −p, q = q, we get f (x) = 1∕(q − p), which is a special case of discrete uniform distribution. setting n = −m, x = p, and y = q = 1 − p results in the negative binomial distribution (section 6.8). writing (x + y)n as xn(1 + y∕x)n, putting y/x = −q, 1/x = p, and n = −1 we get the geometric distribution (which has infinite range). put n = −1 and write (x − y)−1 as 1∕x (1 − y∕x)−1. setting y∕x = , taking logarithm and expanding using − log(1 − x) = x + x2∕2 + x3∕3 + · · · results in logarithmic series distribution. write (1 + y)n = (1 + y)n1 ∗ (1 + y)n2 where n1 + n2 = n. expand each one using binomial theorem, equate identical coefficients on both sides and divide rhs by lhs constant to get the hgd.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20611,  6855,  3085,  2013,  8026, 20936,  2389,  9872])","tensor([  101,  1027,  1015,  1597,  1052,  1010,  3463,  1999,  1996,  8026,
        20936,  2389,  4353,  1006,  2930,  1020,  1012,  1019,  1007,  1012,
         5128,  1050,  1027,  1597,  2487,  1010,  1052,  1027,  1597,  2361,
         1010,  1053,  1027,  1053,  1010,  2057,  2131,  1042,  1006,  1060,
         1007,  1027,   100,  1006,  1053,  1597,  1052,  1007,  1010,  2029,
         2003,  1037,  2569,  2553,  1997, 16246,  6375,  4353,  1012,  4292,
         1050,  1027,  1597,  2213,  1010,  1060,  1027,  1052,  1010,  1998,
         1061,  1027,  1053,  1027,  1015,  1597,  1052,  3463,  1999,  1996,
         4997,  8026, 20936,  2389,  4353,  1006,  2930,  1020,  1012,  1022,
         1007,  1012,  3015,  1006,  1060,  1009,  1061,  1007,  1050,  2004,
         1060,  2078,  1006,  1015,  1009,   100,  1007,  1050,  1010,  5128,
         1061,  1013,  1060,  1027,  1597,  4160,  1010,  1015,  1013,  1060,
         1027,  1052,  1010,  1998,  1050,  1027,  1597,  2487,  2057,  2131,
         1996, 14965,  4353,  1006,  2029,  2038, 10709,  2846,  1007,  1012,
         2404,  1050,  1027,  1597,  2487,  1998,  4339,  1006,  1060,  1597,
         1061,  1007,  1597,  2487,  2004,   100,  1006,  1015,  1597,   100,
         1007,  1597,  2487,  1012,  4292,   100,  1027,  1010,  2635,  8833,
         8486,  2705,  2213,  1998,  9186,  2478,  1597,  8833,  1006,  1015,
         1597,  1060,  1007,  1027,  1060,  1009,   100,  1009,   100,  1009,
         1087,  1087,  1087,  3463,  1999,  8833,  8486,  2705,  7712,  2186,
         4353,  1012,  4339,  1006,  1015,  1009,  1061,  1007,  1050,  1027,
         1006,  1015,  1009,  1061,  1007,  1050,  2487,  1598,  1006,  1015,
         1009,  1061,  1007,  1050,  2475,  2073,  1050,  2487,  1009,  1050,
         2475,  1027,  1050,  1012,  7818,  2169,  2028,  2478,  8026, 20936,
         2389,  9872,  1010,  1041, 16211,  2618,  7235, 21374,  2006,  2119,
         3903,  1998, 11443,  1054,  7898,  2011,  1048,  7898,  5377,  2000,
         2131,  1996,  1044,  2290,  2094,  1012,   102])"
1647,1,"['curve', 'binomial distribution', 'mean', 'associated', 'poisson', 'integer part', 'geometric', 'binomial', 'discrete', 'deviation', 'probability', 'negative binomial', 'discrete distributions', 'lorenz curve', 'distributions', 'geometric distributions', 'distribution']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"finding the md of discrete distributions is a laborious task, as it requires a lot of arithmetical work. it is also called the mean absolute deviation or l1-norm. the md is closely associated with the lorenz curve used in econometrics, gini index and pietra ratio used in economics and finance, and in reliability engineering. in 1730, the french mathematician abraham de moivre (1667–1754) gave a surprisingly simple and computationally appealing closed-form expression for the md of a binomial distribution (which is given in p. 201). this is perhaps the very first published work on md. this was followed by several interesting investigations, which are given in the summary section (p. 201). johnson [125] surmised that the md of some discrete distributions can be put in the form 2 2 fm, where 2 = 2 and fm is the probability mass evaluated at the integer part of the mean m = ⌊ ⌋. this holds good for poisson, binomial, negative binomial, and geometric distributions. kamat [126] generalized johnson’s result to several discrete distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  4531,  1996,  9108,  1997, 16246, 20611,  2003,  1037,  4450,
         6313,  4708,  1010,  2004,  2009,  5942,  1037,  2843,  1997, 20204,
         2389,  2147,  1012,  2009,  2003,  2036,  2170,  1996,  2812,  7619,
        24353,  2030,  1048,  2487,  1011, 13373,  1012,  1996,  9108,  2003,
         4876,  3378,  2007,  1996, 28779,  2480,  7774,  2109,  1999, 17338,
         3630, 12589,  2015,  1010, 18353,  2072,  5950,  1998, 11345,  6494,
         6463,  2109,  1999,  5543,  1998,  5446,  1010,  1998,  1999, 15258,
         3330,  1012,  1999, 23272,  1010,  1996,  2413, 13235,  8181,  2139,
        25175, 12229,  1006, 27643,  1516, 22593,  1007,  2435,  1037, 10889,
         3722,  1998, 15078,  2135, 16004,  2701,  1011,  2433,  3670,  2005,
         1996,  9108,  1997,  1037,  8026, 20936,  2389,  4353,  1006,  2029,
         2003,  2445,  1999,  1052,  1012, 16345,  1007,  1012,  2023,  2003,
         3383,  1996,  2200,  2034,  2405,  2147,  2006,  9108,  1012,  2023,
         2001,  2628,  2011,  2195,  5875,  9751,  1010,  2029,  2024,  2445,
         1999,  1996, 12654,  2930,  1006,  1052,  1012, 16345,  1007,  1012,
         3779,  1031,  8732,  1033,  7505, 28732,  2094,  2008,  1996,  9108,
         1997,  2070, 16246, 20611,  2064,  2022,  2404,  1999,  1996,  2433,
         1016,  1016,  4718,  1010,  2073,  1016,  1027,  1016,  1998,  4718,
         2003,  1996,  9723,  3742, 16330,  2012,  1996, 16109,  2112,  1997,
         1996,  2812,  1049,  1027,   100,   100,  1012,  2023,  4324,  2204,
         2005, 13433, 24077,  1010,  8026, 20936,  2389,  1010,  4997,  8026,
        20936,  2389,  1010,  1998, 14965, 20611,  1012, 27829,  4017,  1031,
        14010,  1033, 18960,  3779,  1521,  1055,  2765,  2000,  2195, 16246,
        20611,  1012,   102])"
1648,1,"['mean', 'deviation', 'discrete', 'distributions', 'medoid', 'deviations', 'discrete distributions', 'median', 'case']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,the following theorem greatly simplifies the work and is very helpful to find the md of a variety of discrete distributions. it can easily be extended to the multivariate case and for other types of mean deviations such as mean deviation from the median and medoid.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1.,
        0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  1996,  2206,  9872,  6551, 21934, 24759, 14144,  1996,  2147,
         1998,  2003,  2200, 14044,  2000,  2424,  1996,  9108,  1997,  1037,
         3528,  1997, 16246, 20611,  1012,  2009,  2064,  4089,  2022,  3668,
         2000,  1996,  4800, 10755, 13143,  2553,  1998,  2005,  2060,  4127,
         1997,  2812, 24353,  2015,  2107,  2004,  2812, 24353,  2013,  1996,
         3991,  1998, 19960,  9314,  1012,   102])"
1649,1,"['tails', 'distribution', 'discrete distribution', 'discrete']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,theorem 6.1 the md of any discrete distribution that tails off to the left is expressed,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  9872,  1020,  1012,  1015,  1996,  9108,  1997,  2151, 16246,
         4353,  2008, 17448,  2125,  2000,  1996,  2187,  2003,  5228,   102])"
1650,1,"['mean', 'arithmetic mean', 'limit', 'distribution']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"where ll is the lower limit of the distribution,   the arithmetic mean, and f(x) the cdf.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2073,  2222,  2003,  1996,  2896,  5787,  1997,  1996,  4353,
         1010,  1996, 20204,  2812,  1010,  1998,  1042,  1006,  1060,  1007,
         1996,  3729,  2546,  1012,   102])"
1651,0,[], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,proof: by definition ul,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  6947,  1024,  2011,  6210, 17359,   102])"
1652,1,"['limit', 'distribution']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,where ll is the lower and ul the upper limit of the distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2073,  2222,  2003,  1996,  2896,  1998, 17359,  1996,  3356,
         5787,  1997,  1996,  4353,  1012,   102])"
1653,1,"['summation', 'range']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,split the range of summation from ll to   − 1 and   to ul and note that |x −  | =   − x for x    . this gives,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  3975,  1996,  2846,  1997,  7680, 28649,  2013,  2222,  2000,
         1597,  1015,  1998,  2000, 17359,  1998,  3602,  2008,  1064,  1060,
         1597,  1064,  1027,  1597,  1060,  2005,  1060,  1012,  2023,  3957,
          102])"
1654,1,"['expectation operator', 'expectation']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"as e(x) =  , we can write e(x −  ) = 0, where e() is the expectation operator. expanding e(x −  ) as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2004,  1041,  1006,  1060,  1007,  1027,  1010,  2057,  2064,
         4339,  1041,  1006,  1060,  1597,  1007,  1027,  1014,  1010,  2073,
         1041,  1006,  1007,  2003,  1996, 17626,  6872,  1012,  9186,  1041,
         1006,  1060,  1597,  1007,  2004,   102])"
1655,1,"['summation', 'range']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"as done earlier, split the range of summation from ll to   − 1 and   to ul to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2004,  2589,  3041,  1010,  3975,  1996,  2846,  1997,  7680,
        28649,  2013,  2222,  2000,  1597,  1015,  1998,  2000, 17359,  2000,
         2131,   102])"
1656,0,[], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,split this into two sums to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  3975,  2023,  2046,  2048, 20571,  2000,  2131,   102])"
1657,1,"['random', 'random variables', 'variables']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"as the md is always positive, the first term in (6.11) is greater than the second for positive random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2004,  1996,  9108,  2003,  2467,  3893,  1010,  1996,  2034,
         2744,  1999,  1006,  1020,  1012,  2340,  1007,  2003,  3618,  2084,
         1996,  2117,  2005,  3893,  6721, 10857,  1012,   102])"
1658,1,['summation'], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,expand the summation inside the bracket in reverse order of indexvar as,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  7818,  1996,  7680, 28649,  2503,  1996, 21605,  1999,  7901,
         2344,  1997,  5950, 10755,  2004,   102])"
1659,0,[], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,collect the first term from each expression on the rhs to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([ 101, 8145, 1996, 2034, 2744, 2013, 2169, 3670, 2006, 1996, 1054, 7898,
        2000, 2131,  102])"
1660,1,['expectations'], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"where f(  − 1) = p(  − 1) + p(  − 2) + · · · + p(ll) so that both partial expectations are bounded, for finite  . now substitute in (6.11). the  f(  − 1) term cancels out, leaving behind",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2073,  1042,  1006,  1597,  1015,  1007,  1027,  1052,  1006,
         1597,  1015,  1007,  1009,  1052,  1006,  1597,  1016,  1007,  1009,
         1087,  1087,  1087,  1009,  1052,  1006,  2222,  1007,  2061,  2008,
         2119,  7704, 10908,  2024, 10351,  1010,  2005, 10713,  1012,  2085,
         7681,  1999,  1006,  1020,  1012,  2340,  1007,  1012,  1996,  1042,
         1006,  1597,  1015,  1007,  2744, 17542,  2015,  2041,  1010,  2975,
         2369,   102])"
1661,0,[], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,which is same expression obtained above.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([ 101, 2029, 2003, 2168, 3670, 4663, 2682, 1012,  102])"
1662,0,[], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,write (6.14) as two summations,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  4339,  1006,  1020,  1012,  2403,  1007,  2004,  2048,  7680,
        28649,  2015,   102])"
1663,1,"['mean', 'symmetric', 'distribution']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"if the mean   is a half-integer, a correction term f(⌊ ⌋) must be added to get the correct md. if the distribution of x is symmetric, we can write the aforementioned",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2065,  1996,  2812,  2003,  1037,  2431,  1011, 16109,  1010,
         1037, 18140,  2744,  1042,  1006,   100,   100,  1007,  2442,  2022,
         2794,  2000,  2131,  1996,  6149,  9108,  1012,  2065,  1996,  4353,
         1997,  1060,  2003, 19490,  1010,  2057,  2064,  4339,  1996, 17289,
          102])"
1664,1,"['function', 'tails', 'distribution']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"where s(x) is the survival function. if the distribution tails off to the right extreme, the aforementioned is evaluated as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2073,  1055,  1006,  1060,  1007,  2003,  1996,  7691,  3853,
         1012,  2065,  1996,  4353, 17448,  2125,  2000,  1996,  2157,  6034,
         1010,  1996, 17289,  2003, 16330,  2004,   102])"
1665,1,"['functions', 'coefficient', 'method', 'mean', 'bivariate', 'discrete', 'case', 'function', 'deviation', 'probability', 'results', 'discrete distributions', 'distributions', 'distribution', 'summation']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"if the mean   is neither an integer nor a half-integer, the summation is carried out to the nearest integer. in this case, the results are only approximate (see example 6.40 in p. 6–78). nevertheless, the above-mentioned theorem is of enormous use, as it can be easily extended to find the md of bivariate and multivariate discrete distributions. there are two other novel methods to find the mean deviation. the first one uses generating functions (chapter 9, section 9.4, p. 9–11) to fetch a single coefficient of t −1 in the power series expansion of (1 − t)−2px(t), where px(t) is the probability generating function. this works best for discrete distributions. the second method is using the inverse of distribution functions (chapter 10, section 10.10, p. 10–9), the discrete analog of which is obtained by replacing integration by summation.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2065,  1996,  2812,  2003,  4445,  2019, 16109,  4496,  1037,
         2431,  1011, 16109,  1010,  1996,  7680, 28649,  2003,  3344,  2041,
         2000,  1996,  7205, 16109,  1012,  1999,  2023,  2553,  1010,  1996,
         3463,  2024,  2069, 15796,  1006,  2156,  2742,  1020,  1012,  2871,
         1999,  1052,  1012,  1020,  1516,  6275,  1007,  1012,  6600,  1010,
         1996,  2682,  1011,  3855,  9872,  2003,  1997,  8216,  2224,  1010,
         2004,  2009,  2064,  2022,  4089,  3668,  2000,  2424,  1996,  9108,
         1997, 12170, 10755, 13143,  1998,  4800, 10755, 13143, 16246, 20611,
         1012,  2045,  2024,  2048,  2060,  3117,  4725,  2000,  2424,  1996,
         2812, 24353,  1012,  1996,  2034,  2028,  3594, 11717,  4972,  1006,
         3127,  1023,  1010,  2930,  1023,  1012,  1018,  1010,  1052,  1012,
         1023,  1516,  2340,  1007,  2000, 18584,  1037,  2309, 19064,  1997,
         1056,  1597,  2487,  1999,  1996,  2373,  2186,  4935,  1997,  1006,
         1015,  1597,  1056,  1007,  1597,  2475,  2361,  2595,  1006,  1056,
         1007,  1010,  2073,  1052,  2595,  1006,  1056,  1007,  2003,  1996,
         9723, 11717,  3853,  1012,  2023,  2573,  2190,  2005, 16246, 20611,
         1012,  1996,  2117,  4118,  2003,  2478,  1996, 19262,  1997,  4353,
         4972,  1006,  3127,  2184,  1010,  2930,  2184,  1012,  2184,  1010,
         1052,  1012,  2184,  1516,  1023,  1007,  1010,  1996, 16246, 11698,
         1997,  2029,  2003,  4663,  2011,  6419,  8346,  2011,  7680, 28649,
         1012,   102])"
1666,1,"['tail', 'variance', 'probability', 'tail probability', 'distribution', 'discrete distribution', 'discrete']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,example 6.1 variance of discrete distribution as tail probability,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2742,  1020,  1012,  1015, 23284,  1997, 16246,  4353,  2004,
         5725,  9723,   102])"
1667,1,"['tail', 'mean', 'variance', 'probabilities', 'distributions', 'tail probabilities', 'discrete distributions', 'discrete']", MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,prove that the variance of discrete distributions can be expressed in terms of tail probabilities when the mean is an integer or a half-integer.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  6011,  2008,  1996, 23284,  1997, 16246, 20611,  2064,  2022,
         5228,  1999,  3408,  1997,  5725,  4013,  3676, 14680,  2043,  1996,
         2812,  2003,  2019, 16109,  2030,  1037,  2431,  1011, 16109,  1012,
          102])"
1668,1,['probability'], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"l   s(x). equating johnson’s result that md = 2 2fm, where  2 =  2 and fm is the probability mass evaluated at the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  1048,  1055,  1006,  1060,  1007,  1012,  1041, 16211,  3436,
         3779,  1521,  1055,  2765,  2008,  9108,  1027,  1016,  1016, 16715,
         1010,  2073,  1016,  1027,  1016,  1998,  4718,  2003,  1996,  9723,
         3742, 16330,  2012,  1996,   102])"
1669,1,['mean'], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,integer part of the mean m = ⌊ ⌋ we get  2 ∗ fm = ∑  x=,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101, 16109,  2112,  1997,  1996,  2812,  1049,  1027,   100,   100,
         2057,  2131,  1016,  1598,  4718,  1027,   100,  1060,  1027,   102])"
1670,1,['table'], MEAN DEVIATION OF DISCRETE DISTRIBUTIONS,seg_339,"when m = ⌊ ⌋ is a half-integer, the correction term mentioned earlier must be applied (table 6.1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997, 16246, 20611])","tensor([  101,  2043,  1049,  1027,   100,   100,  2003,  1037,  2431,  1011,
        16109,  1010,  1996, 18140,  2744,  3855,  3041,  2442,  2022,  4162,
         1006,  2795,  1020,  1012,  1015,  1007,  1012,   102])"
1671,1,"['incomplete beta', 'functions', 'hypergeometric', 'hypergeometric functions', 'normal distribution', 'continuous distributions', 'beta function', 'normal', 'negative binomial distributions', 'binomial', 'discrete', 'continuous', 'function', 'deviation', 'binomial distributions', 'negative binomial', 'gamma', 'distributions', 'distribution']", Recurrence Relation for Mean Deviation,seg_341,"mean deviation of some distributions involves complicated terms. in the above-mentioned theorem, we have obtained an expression for md in terms of cdf. it is possible to develop recurrences for md in those situations where the cdf has closed-form expressions in terms of incomplete beta or gamma functions, normal distribution, confluent hypergeometric functions, or orthogonal polynomials. this argument applies to both discrete and continuous distributions. as examples, the cdf of binomial and negative binomial distributions are expressed in terms of incomplete beta functions. however, the beta function satisfies several recurrences like",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  2812, 24353])","tensor([  101,  2812, 24353,  1997,  2070, 20611,  7336,  8552,  3408,  1012,
         1999,  1996,  2682,  1011,  3855,  9872,  1010,  2057,  2031,  4663,
         2019,  3670,  2005,  9108,  1999,  3408,  1997,  3729,  2546,  1012,
         2009,  2003,  2825,  2000,  4503, 28667,  3126, 24413,  2015,  2005,
         9108,  1999,  2216,  8146,  2073,  1996,  3729,  2546,  2038,  2701,
         1011,  2433, 11423,  1999,  3408,  1997, 12958,  8247,  2030, 13091,
         4972,  1010,  3671,  4353,  1010,  9530, 10258, 24997,  2102, 23760,
         3351, 28993,  4972,  1010,  2030, 28721, 28175,  1012,  2023,  6685,
        12033,  2000,  2119, 16246,  1998,  7142, 20611,  1012,  2004,  4973,
         1010,  1996,  3729,  2546,  1997,  8026, 20936,  2389,  1998,  4997,
         8026, 20936,  2389, 20611,  2024,  5228,  1999,  3408,  1997, 12958,
         8247,  4972,  1012,  2174,  1010,  1996,  8247,  3853,  2938,  2483,
        14213,  2195, 28667,  3126, 24413,  2015,  2066,   102])"
1672,1,"['recurrence', 'function', 'beta function', 'results']", Recurrence Relation for Mean Deviation,seg_341,"equation (6.20) allows one to successively reduce the first argument of beta function, which in turn results in a recurrence for the md. similarly",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  2812, 24353])","tensor([  101,  8522,  1006,  1020,  1012,  2322,  1007,  4473,  2028,  2000,
        24288,  5547,  1996,  2034,  6685,  1997,  8247,  3853,  1010,  2029,
         1999,  2735,  3463,  1999,  1037, 28667,  3126, 24413,  2005,  1996,
         9108,  1012,  6660,   102])"
1673,1,"['recurrence', 'results', 'parameters']", Recurrence Relation for Mean Deviation,seg_341,"ix(a + 1, b − 1) = [1 + bx∕(a(1 − x))] ix(a, b) − bx∕[a(1 − x)] ix(a − 1, b + 1). (6.22) equation (6.21) allows one to successively reduce both parameters, which results in another recurrence for md.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([28667,  3126, 24413,  7189,  2005,  2812, 24353])","tensor([  101, 11814,  1006,  1037,  1009,  1015,  1010,  1038,  1597,  1015,
         1007,  1027,  1031,  1015,  1009,   100,  1006,  1037,  1006,  1015,
         1597,  1060,  1007,  1007,  1033, 11814,  1006,  1037,  1010,  1038,
         1007,  1597,   100,  1031,  1037,  1006,  1015,  1597,  1060,  1007,
         1033, 11814,  1006,  1037,  1597,  1015,  1010,  1038,  1009,  1015,
         1007,  1012,  1006,  1020,  1012,  2570,  1007,  8522,  1006,  1020,
         1012,  2538,  1007,  4473,  2028,  2000, 24288,  5547,  2119, 11709,
         1010,  2029,  3463,  1999,  2178, 28667,  3126, 24413,  2005,  9108,
         1012,   102])"
1674,1,"['success', 'bernoulli', 'probability', 'failure', 'outcome', 'random', 'results', 'experiment', 'distribution', 'bernoulli distribution']", BERNOULLI DISTRIBUTION,seg_343,the bernoulli distribution results from a random experiment in which each outcome is either a success (denoted by 1) with probability p or a failure (denoted by 0) with a probability q so that p + q = 1. this means that fixing the value of p automatically,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  1996, 16595,  7140,  6894,  4353,  3463,  2013,  1037,  6721,
         7551,  1999,  2029,  2169,  9560,  2003,  2593,  1037,  3112,  1006,
        19537,  2011,  1015,  1007,  2007,  9723,  1052,  2030,  1037,  4945,
         1006, 19537,  2011,  1014,  1007,  2007,  1037,  9723,  1053,  2061,
         2008,  1052,  1009,  1053,  1027,  1015,  1012,  2023,  2965,  2008,
        15887,  1996,  3643,  1997,  1052,  8073,   102])"
1675,1,"['density function', 'bernoulli random variable', 'outcomes', 'condition', 'bernoulli', 'probability density function', 'failure', 'random variable', 'trial', 'function', 'probability', 'hypothesis', 'bernoulli distribution', 'success', 'random', 'experiment', 'distribution', 'bernoulli trial', 'variable']", BERNOULLI DISTRIBUTION,seg_343,"fixes the value of q. a question that naturally arises is what should be chosen as p?. this is not an issue because p and q are simply place holders for probabilities. it depends more on the research hypothesis. here, the meaning of the word success and failure should not be taken literally – it simply means two dichotomous outcomes of an experiment. in engineering, it can denote faulty or nonfaulty, working or defunct, closed or open (as in electrical circuits), and detected or undetected (radioactivity, smoke, abnormality, etc.). if we wish to check if something is faulty, we choose p as the probability of a fault. in medical sciences, p is chosen as the probability of the presence of a symptom or condition. thus, this distribution finds applications in a variety of fields. it is named after the swiss mathematician jacques bernoulli (1654–1705). such an experiment is known as a bernoulli trial. the probability density function (pdf) of a bernoulli random variable is given by f (x; p) = pxq(1−x), x = 0 or 1, and 0 ≤ q = 1 − p ≤ 1. we will denote the bernoulli distribution by ber(p). this could also be expressed in the following convenient form:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  8081,  2229,  1996,  3643,  1997,  1053,  1012,  1037,  3160,
         2008,  8100, 18653,  2003,  2054,  2323,  2022,  4217,  2004,  1052,
         1029,  1012,  2023,  2003,  2025,  2019,  3277,  2138,  1052,  1998,
         1053,  2024,  3432,  2173, 13304,  2005,  4013,  3676, 14680,  1012,
         2009,  9041,  2062,  2006,  1996,  2470, 10744,  1012,  2182,  1010,
         1996,  3574,  1997,  1996,  2773,  3112,  1998,  4945,  2323,  2025,
         2022,  2579,  6719,  1516,  2009,  3432,  2965,  2048,  4487,  9905,
        20389,  3560, 13105,  1997,  2019,  7551,  1012,  1999,  3330,  1010,
         2009,  2064, 19090, 28927,  2030,  2512,  7011, 11314,  2100,  1010,
         2551,  2030, 11984,  1010,  2701,  2030,  2330,  1006,  2004,  1999,
         5992, 13782,  1007,  1010,  1998, 11156,  2030,  6151, 12870, 10985,
         1006,  2557, 18908,  7730,  1010,  5610,  1010, 19470,  3012,  1010,
         4385,  1012,  1007,  1012,  2065,  2057,  4299,  2000,  4638,  2065,
         2242,  2003, 28927,  1010,  2057,  5454,  1052,  2004,  1996,  9723,
         1997,  1037,  6346,  1012,  1999,  2966,  4163,  1010,  1052,  2003,
         4217,  2004,  1996,  9723,  1997,  1996,  3739,  1997,  1037, 25353,
        27718,  5358,  2030,  4650,  1012,  2947,  1010,  2023,  4353,  4858,
         5097,  1999,  1037,  3528,  1997,  4249,  1012,  2009,  2003,  2315,
         2044,  1996,  5364, 13235,  7445, 16595,  7140,  6894,  1006, 27445,
         1516, 29326,  1007,  1012,  2107,  2019,  7551,  2003,  2124,  2004,
         1037, 16595,  7140,  6894,  3979,  1012,  1996,  9723,  4304,  3853,
         1006, 11135,  1007,  1997,  1037, 16595,  7140,  6894,  6721,  8023,
         2003,  2445,  2011,  1042,  1006,  1060,  1025,  1052,  1007,  1027,
         1052,  2595,  4160,  1006,  1015, 22543,  2595,  1007,  1010,  1060,
         1027,  1014,  2030,  1015,  1010,  1998,  1014,  1608,  1053,  1027,
         1015,  1597,  1052,  1608,  1015,  1012,  2057,  2097, 19090,  1996,
        16595,  7140,  6894,  4353,  2011,  2022,  2099,  1006,  1052,  1007,
         1012,  2023,  2071,  2036,  2022,  5228,  1999,  1996,  2206, 14057,
         2433,  1024,   102])"
1676,1,"['mean', 'distribution', 'variance', 'bernoulli', 'bernoulli distribution']", BERNOULLI DISTRIBUTION,seg_343,"the mean and variance of a bernoulli distribution are   = p,  2 = pq. as the only values of x are 0 and 1, we get the mean as e(x) = 0∗q + 1∗p = p. similarly, e(x2) = 02 ∗ q + 12 ∗ p = p, so that the variance becomes e(x2) − e(x)2 = p − p2 = p(1 − p) = pq.  1 = (1 − 2p)∕√(pq),  2 = 3 + (1 − 6p)∕pq.",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  1996,  2812,  1998, 23284,  1997,  1037, 16595,  7140,  6894,
         4353,  2024,  1027,  1052,  1010,  1016,  1027,  1052,  4160,  1012,
         2004,  1996,  2069,  5300,  1997,  1060,  2024,  1014,  1998,  1015,
         1010,  2057,  2131,  1996,  2812,  2004,  1041,  1006,  1060,  1007,
         1027,  1014, 30125,  4160,  1009,  1015, 30125,  2361,  1027,  1052,
         1012,  6660,  1010,  1041,  1006,  1060,  2475,  1007,  1027,  6185,
         1598,  1053,  1009,  2260,  1598,  1052,  1027,  1052,  1010,  2061,
         2008,  1996, 23284,  4150,  1041,  1006,  1060,  2475,  1007,  1597,
         1041,  1006,  1060,  1007,  1016,  1027,  1052,  1597,  1052,  2475,
         1027,  1052,  1006,  1015,  1597,  1052,  1007,  1027,  1052,  4160,
         1012,  1015,  1027,  1006,  1015,  1597,  1016,  2361,  1007,   100,
         1006,  1052,  4160,  1007,  1010,  1016,  1027,  1017,  1009,  1006,
         1015,  1597,  1020,  2361,  1007,   100,  1012,   102])"
1677,1,"['parameter', 'function', 'bernoulli', 'probability', 'estimated', 'estimate', 'trials', 'moments', 'bernoulli trials', 'experiments', 'distribution', 'successes']", BERNOULLI DISTRIBUTION,seg_343,"bernoulli distribution has only one unknown parameter p. this unknown probability is usually estimated either from past experiments or from empirical studies. if we observe k successes in n bernoulli trials, an estimate of p is obtained as p = k∕n. the probability generating function is easily obtained as px(t) = (q + pt), and characteristic function is (t) = q + peit. hence, all moments about zero are p.",tensor(1),"tensor([0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101, 16595,  7140,  6894,  4353,  2038,  2069,  2028,  4242, 16381,
         1052,  1012,  2023,  4242,  9723,  2003,  2788,  4358,  2593,  2013,
         2627,  7885,  2030,  2013, 17537,  2913,  1012,  2065,  2057, 11949,
         1047, 14152,  1999,  1050, 16595,  7140,  6894,  7012,  1010,  2019,
        10197,  1997,  1052,  2003,  4663,  2004,  1052,  1027,   100,  1012,
         1996,  9723, 11717,  3853,  2003,  4089,  4663,  2004,  1052,  2595,
         1006,  1056,  1007,  1027,  1006,  1053,  1009, 13866,  1007,  1010,
         1998,  8281,  3853,  2003,  1006,  1056,  1007,  1027,  1053,  1009,
        26850,  2102,  1012,  6516,  1010,  2035,  5312,  2055,  5717,  2024,
         1052,  1012,   102])"
1678,1,"['probability distributions', 'bernoulli', 'probability', 'negative binomial', 'distributions', 'trials', 'bernoulli trials', 'independent', 'geometric distributions', 'geometric', 'binomial']", BERNOULLI DISTRIBUTION,seg_343,"there are many other probability distributions based on bernoulli trials. for example, the binomial, negative binomial, and geometric distributions mentioned earlier; success-run distributions are all defined in terms of independent bernoulli trials.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  2045,  2024,  2116,  2060,  9723, 20611,  2241,  2006, 16595,
         7140,  6894,  7012,  1012,  2005,  2742,  1010,  1996,  8026, 20936,
         2389,  1010,  4997,  8026, 20936,  2389,  1010,  1998, 14965, 20611,
         3855,  3041,  1025,  3112,  1011,  2448, 20611,  2024,  2035,  4225,
         1999,  3408,  1997,  2981, 16595,  7140,  6894,  7012,  1012,   102])"
1679,1,"['bernoulli', 'bernoulli distribution', 'distribution']", BERNOULLI DISTRIBUTION,seg_343,example 6.2 cdf of bernoulli distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  2742,  1020,  1012,  1016,  3729,  2546,  1997, 16595,  7140,
         6894,  4353,   102])"
1680,1,"['probability', 'variable']", BERNOULLI DISTRIBUTION,seg_343,suppose p denotes the probability of a trait in a group of persons. define a random variable x that takes the value 1 if trait is present and is 0 otherwise. find the pdf and cdf of x.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  6814,  1052, 14796,  1996,  9723,  1997,  1037, 18275,  1999,
         1037,  2177,  1997,  5381,  1012,  9375,  1037,  6721,  8023,  1060,
         2008,  3138,  1996,  3643,  1015,  2065, 18275,  2003,  2556,  1998,
         2003,  1014,  4728,  1012,  2424,  1996, 11135,  1998,  3729,  2546,
         1997,  1060,  1012,   102])"
1681,1,"['outcomes', 'random variable', 'random', 'variable']", BERNOULLI DISTRIBUTION,seg_343,solution 6.2 assign a random variable x to the two possible outcomes as p(trait) = p and p(trait not present) = q = 1 − p. the pdf is expressed as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  5576,  1020,  1012,  1016, 23911,  1037,  6721,  8023,  1060,
         2000,  1996,  2048,  2825, 13105,  2004,  1052,  1006, 18275,  1007,
         1027,  1052,  1998,  1052,  1006, 18275,  2025,  2556,  1007,  1027,
         1053,  1027,  1015,  1597,  1052,  1012,  1996, 11135,  2003,  5228,
         2004,   102])"
1682,0,[], BERNOULLI DISTRIBUTION,seg_343,"as there are only two possible values, the cdf is obtained as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([16595,  7140,  6894,  4353])","tensor([ 101, 2004, 2045, 2024, 2069, 2048, 2825, 5300, 1010, 1996, 3729, 2546,
        2003, 4663, 2004,  102])"
1683,1,"['cases', 'table']", BERNOULLI DISTRIBUTION,seg_343,"the p = 0 or p = 1 cases are called degenerate cases, as there is no randomness involved. see table 6.2 for summary of properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  1996,  1052,  1027,  1014,  2030,  1052,  1027,  1015,  3572,
         2024,  2170,  2139,  6914, 22139,  3572,  1010,  2004,  2045,  2003,
         2053,  6721,  2791,  2920,  1012,  2156,  2795,  1020,  1012,  1016,
         2005, 12654,  1997,  5144,  1012,   102])"
1684,1,"['bernoulli', 'random', 'random variables', 'variables']", BERNOULLI DISTRIBUTION,seg_343,example 6.3 product of two bernoulli random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  2742,  1020,  1012,  1017,  4031,  1997,  2048, 16595,  7140,
         6894,  6721, 10857,   102])"
1685,1,['distribution'], BERNOULLI DISTRIBUTION,seg_343,"if x and y are iid ber(p), find the distribution of u = x ∗ y",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([ 101, 2065, 1060, 1998, 1061, 2024, 2462, 2094, 2022, 2099, 1006, 1052,
        1007, 1010, 2424, 1996, 4353, 1997, 1057, 1027, 1060, 1598, 1061,  102])"
1686,1,"['bernoulli', 'probability', 'probability of success', 'probabilities', 'success']", BERNOULLI DISTRIBUTION,seg_343,"solution 6.3 x and y both takes the values 1 with probability p, and 0 with probability q = 1 − p. hence, xy takes the value 0 when either or both of x and y take the value 0 with probability q2 + qp + pq. here, q2 is the probability that both of them takes the value 0, and qp and pq are the probabilities that either of them takes value 0 and other takes the value 1. write q2 + qp = q[q + p] and use q + p = 1 to get q. next combine q with pq to get q + pq = q(1 + p). write q as (1 − p) to get (1 − p) ∗ (1 + p) = 1 − p2. probability that xy takes the value 1 is p2. hence, xy is bernoulli with probability of success p2. this can be extended to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([  101,  5576,  1020,  1012,  1017,  1060,  1998,  1061,  2119,  3138,
         1996,  5300,  1015,  2007,  9723,  1052,  1010,  1998,  1014,  2007,
         9723,  1053,  1027,  1015,  1597,  1052,  1012,  6516,  1010,  1060,
         2100,  3138,  1996,  3643,  1014,  2043,  2593,  2030,  2119,  1997,
         1060,  1998,  1061,  2202,  1996,  3643,  1014,  2007,  9723,  1053,
         2475,  1009,  1053,  2361,  1009,  1052,  4160,  1012,  2182,  1010,
         1053,  2475,  2003,  1996,  9723,  2008,  2119,  1997,  2068,  3138,
         1996,  3643,  1014,  1010,  1998,  1053,  2361,  1998,  1052,  4160,
         2024,  1996,  4013,  3676, 14680,  2008,  2593,  1997,  2068,  3138,
         3643,  1014,  1998,  2060,  3138,  1996,  3643,  1015,  1012,  4339,
         1053,  2475,  1009,  1053,  2361,  1027,  1053,  1031,  1053,  1009,
         1052,  1033,  1998,  2224,  1053,  1009,  1052,  1027,  1015,  2000,
         2131,  1053,  1012,  2279, 11506,  1053,  2007,  1052,  4160,  2000,
         2131,  1053,  1009,  1052,  4160,  1027,  1053,  1006,  1015,  1009,
         1052,  1007,  1012,  4339,  1053,  2004,  1006,  1015,  1597,  1052,
         1007,  2000,  2131,  1006,  1015,  1597,  1052,  1007,  1598,  1006,
         1015,  1009,  1052,  1007,  1027,  1015,  1597,  1052,  2475,  1012,
         9723,  2008,  1060,  2100,  3138,  1996,  3643,  1015,  2003,  1052,
         2475,  1012,  6516,  1010,  1060,  2100,  2003, 16595,  7140,  6894,
         2007,  9723,  1997,  3112,  1052,  2475,  1012,  2023,  2064,  2022,
         3668,  2000,   102])"
1687,1,['case'], BERNOULLI DISTRIBUTION,seg_343,the case ∏i,tensor(1),"tensor([0., 0., 1., 0., 0.])","tensor([16595,  7140,  6894,  4353])","tensor([ 101, 1996, 2553,  100,  102])"
1688,1,"['distribution', 'bernoulli', 'trials', 'bernoulli distribution', 'independent']", BINOMIAL DISTRIBUTION,seg_345,binomial distribution is a natural extension of bernoulli distribution for two or more independent trials (n   1). it was first derived in its present form by the swiss,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  8026, 20936,  2389,  4353,  2003,  1037,  3019,  5331,  1997,
        16595,  7140,  6894,  4353,  2005,  2048,  2030,  2062,  2981,  7012,
         1006,  1050,  1015,  1007,  1012,  2009,  2001,  2034,  5173,  1999,
         2049,  2556,  2433,  2011,  1996,  5364,   102])"
1689,1,"['successes', 'bernoulli', 'trials', 'random', 'bernoulli trials', 'random variables', 'variables', 'binomial', 'independent']", BINOMIAL DISTRIBUTION,seg_345,"mathematician jacques bernoulli (1654–1705), which was published posthumously in 1713 [127], although the binomial expansion (for arbitrary n) was studied by blaise pascal [128]. it can be interpreted in terms of random trials or in terms of random variables. consider n independent bernoulli trials. we assume that the trials have already occurred. we are interested in knowing how many successes have taken place among the n trials. this number is any integer from 0 to n inclusive. assuming",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101, 13235,  7445, 16595,  7140,  6894,  1006, 27445,  1516, 29326,
         1007,  1010,  2029,  2001,  2405, 12770,  1999, 27016,  1031, 13029,
         1033,  1010,  2348,  1996,  8026, 20936,  2389,  4935,  1006,  2005,
        15275,  1050,  1007,  2001,  3273,  2011,  1038, 25122, 17878,  1031,
        11899,  1033,  1012,  2009,  2064,  2022, 10009,  1999,  3408,  1997,
         6721,  7012,  2030,  1999,  3408,  1997,  6721, 10857,  1012,  5136,
         1050,  2981, 16595,  7140,  6894,  7012,  1012,  2057,  7868,  2008,
         1996,  7012,  2031,  2525,  4158,  1012,  2057,  2024,  4699,  1999,
         4209,  2129,  2116, 14152,  2031,  2579,  2173,  2426,  1996,  1050,
         7012,  1012,  2023,  2193,  2003,  2151, 16109,  2013,  1014,  2000,
         1050, 18678,  1012, 10262,   102])"
1690,1,['successes'], BINOMIAL DISTRIBUTION,seg_345,"that there are x successes, this can happen at any of the n positions in ( n",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2008,  2045,  2024,  1060, 14152,  1010,  2023,  2064,  4148,
         2012,  2151,  1997,  1996,  1050,  4460,  1999,  1006,  1050,   102])"
1691,1,"['trial', 'probability', 'probability of success', 'failures', 'successes', 'success']", BINOMIAL DISTRIBUTION,seg_345,"x) ways. since the probability of success remains the same from trial to trial, the probability of x successes and n − x failures is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1060,  1007,  3971,  1012,  2144,  1996,  9723,  1997,  3112,
         3464,  1996,  2168,  2013,  3979,  2000,  3979,  1010,  1996,  9723,
         1997,  1060, 14152,  1998,  1050,  1597,  1060, 15428,  2003,  2445,
         2011,   102])"
1692,1,"['distribution', 'exponential', 'binomial', 'binomial distribution']", BINOMIAL DISTRIBUTION,seg_345,it is called binomial distribution because it is the xth term in the binomial expansion of (p + q)n. it belongs to the exponential family.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  2009,  2003,  2170,  8026, 20936,  2389,  4353,  2138,  2009,
         2003,  1996,  1060,  2705,  2744,  1999,  1996,  8026, 20936,  2389,
         4935,  1997,  1006,  1052,  1009,  1053,  1007,  1050,  1012,  2009,
         7460,  2000,  1996, 27258,  2155,  1012,   102])"
1693,1,"['parameter', 'bernoulli', 'random variable', 'trials', 'parameters', 'random', 'bernoulli trials', 'random variables', 'distribution', 'variables', 'binomial', 'variable', 'binomial distribution']", BINOMIAL DISTRIBUTION,seg_345,"the random variable interpretation of binomial distribution is based on independent bernoulli trials. let x1,x2, … ,xn be a sequence of iid bernoulli random variables with the same parameter p. then, the sum x = x1 + x2 + · · · + xn has a binomial distribution with parameters n and p. we denote this as bino(n, p).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8026, 20936,  2389,  4353])","tensor([  101,  1996,  6721,  8023,  7613,  1997,  8026, 20936,  2389,  4353,
         2003,  2241,  2006,  2981, 16595,  7140,  6894,  7012,  1012,  2292,
         1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,  1060,  2078,
         2022,  1037,  5537,  1997,  2462,  2094, 16595,  7140,  6894,  6721,
        10857,  2007,  1996,  2168, 16381,  1052,  1012,  2059,  1010,  1996,
         7680,  1060,  1027,  1060,  2487,  1009,  1060,  2475,  1009,  1087,
         1087,  1087,  1009,  1060,  2078,  2038,  1037,  8026, 20936,  2389,
         4353,  2007, 11709,  1050,  1998,  1052,  1012,  2057, 19090,  2023,
         2004,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  1012,   102])"
1694,1,"['trial', 'table', 'probability', 'probability of success', 'trials', 'distribution', 'parameters', 'success']", Properties of Binomial Distribution,seg_347,"there are two parameters for this distribution (see figure 6.1 and table 6.3), namely the number of trials (n   1; an integer), and the probability of success in each trial",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2045,  2024,  2048, 11709,  2005,  2023,  4353,  1006,  2156,
         3275,  1020,  1012,  1015,  1998,  2795,  1020,  1012,  1017,  1007,
         1010,  8419,  1996,  2193,  1997,  7012,  1006,  1050,  1015,  1025,
         2019, 16109,  1007,  1010,  1998,  1996,  9723,  1997,  3112,  1999,
         2169,  3979,   102])"
1695,1,"['trial', 'with replacement', 'distribution', 'probability', 'populations', 'population', 'sample', 'sampling', 'independent', 'replacement', 'binomial', 'binomial distribution']", Properties of Binomial Distribution,seg_347,"(p), which is a real number between 0 and 1. this probability remains the same from trial to trial, which are independent. this distribution is encountered in sampling with replacement from large populations. if p denotes the probability of observing some characteristic (there are x individuals that have the characteristic in the population, so that p = x∕n where n is the population size), the number of individuals in a sample of size n from that population has the characteristic is given by a binomial distribution bino(n, p).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1006,  1052,  1007,  1010,  2029,  2003,  1037,  2613,  2193,
         2090,  1014,  1998,  1015,  1012,  2023,  9723,  3464,  1996,  2168,
         2013,  3979,  2000,  3979,  1010,  2029,  2024,  2981,  1012,  2023,
         4353,  2003,  8567,  1999, 16227,  2007,  6110,  2013,  2312,  7080,
         1012,  2065,  1052, 14796,  1996,  9723,  1997, 14158,  2070,  8281,
         1006,  2045,  2024,  1060,  3633,  2008,  2031,  1996,  8281,  1999,
         1996,  2313,  1010,  2061,  2008,  1052,  1027,   100,  2073,  1050,
         2003,  1996,  2313,  2946,  1007,  1010,  1996,  2193,  1997,  3633,
         1999,  1037,  7099,  1997,  2946,  1050,  2013,  2008,  2313,  2038,
         1996,  8281,  2003,  2445,  2011,  1037,  8026, 20936,  2389,  4353,
         8026,  2080,  1006,  1050,  1010,  1052,  1007,  1012,   102])"
1696,1,"['mean', 'variance', 'table', 'trials', 'moments', 'results', 'independent', 'distribution', 'binomial', 'binomial distribution']", Properties of Binomial Distribution,seg_347,"6.5.1.1 moments as the trials are independent, and x = x1 + x2 + … + xn, the mean is e(x) = p + p + .. + p = np. similarly, the variance of x is v(x) = v(x1) + v(x2) + … + v(xn) = pq + pq + … + pq = npq. hence  1 = e(x) = np,var(x) = npq =  1 ∗ q. note that when p → 0 from above, q → 1 from below and the variance →  1. this results in a distribution with the same mean and variance (table 6.3). if np =   is a constant, we could reparametrize the binomial distribution by putting   = np to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1020,  1012,  1019,  1012,  1015,  1012,  1015,  5312,  2004,
         1996,  7012,  2024,  2981,  1010,  1998,  1060,  1027,  1060,  2487,
         1009,  1060,  2475,  1009,  1529,  1009,  1060,  2078,  1010,  1996,
         2812,  2003,  1041,  1006,  1060,  1007,  1027,  1052,  1009,  1052,
         1009,  1012,  1012,  1009,  1052,  1027, 27937,  1012,  6660,  1010,
         1996, 23284,  1997,  1060,  2003,  1058,  1006,  1060,  1007,  1027,
         1058,  1006,  1060,  2487,  1007,  1009,  1058,  1006,  1060,  2475,
         1007,  1009,  1529,  1009,  1058,  1006,  1060,  2078,  1007,  1027,
         1052,  4160,  1009,  1052,  4160,  1009,  1529,  1009,  1052,  4160,
         1027, 27937,  4160,  1012,  6516,  1015,  1027,  1041,  1006,  1060,
         1007,  1027, 27937,  1010, 13075,  1006,  1060,  1007,  1027, 27937,
         4160,  1027,  1015,  1598,  1053,  1012,  3602,  2008,  2043,  1052,
         1585,  1014,  2013,  2682,  1010,  1053,  1585,  1015,  2013,  2917,
         1998,  1996, 23284,  1585,  1015,  1012,  2023,  3463,  1999,  1037,
         4353,  2007,  1996,  2168,  2812,  1998, 23284,  1006,  2795,  1020,
         1012,  1017,  1007,  1012,  2065, 27937,  1027,  2003,  1037,  5377,
         1010,  2057,  2071, 16360,  5400, 11368, 25709,  1996,  8026, 20936,
         2389,  4353,  2011,  5128,  1027, 27937,  2000,  2131,   102])"
1697,1,"['mean', 'symmetry', 'variance']", Properties of Binomial Distribution,seg_347,"with mean   and variance  (n −  )∕n. the symmetry of variance for fixed n indicates that the variance of bino(n, p) and bino(n, q) are the same.",tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2007,  2812,  1998, 23284,  1006,  1050,  1597,  1007,   100,
         1012,  1996, 14991,  1997, 23284,  2005,  4964,  1050,  7127,  2008,
         1996, 23284,  1997,  8026,  2080,  1006,  1050,  1010,  1052,  1007,
         1998,  8026,  2080,  1006,  1050,  1010,  1053,  1007,  2024,  1996,
         2168,  1012,   102])"
1698,1,"['variance', 'distribution', 'binomial', 'binomial distribution']", Properties of Binomial Distribution,seg_347,example 6.4 maximum variance of a binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2742,  1020,  1012,  1018,  4555, 23284,  1997,  1037,  8026,
        20936,  2389,  4353,   102])"
1699,1,"['function', 'variance', 'distribution', 'binomial', 'binomial distribution']", Properties of Binomial Distribution,seg_347,"prove that the maximum variance of a binomial distribution bino(n, p) as a function of p is n∕4.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  6011,  2008,  1996,  4555, 23284,  1997,  1037,  8026, 20936,
         2389,  4353,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  2004,
         1037,  3853,  1997,  1052,  2003,   100,  1012,   102])"
1700,1,['variance'], Properties of Binomial Distribution,seg_347,"solution 6.4 we know that the variance is given by v(n, p) = npq = np − np2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  5576,  1020,  1012,  1018,  2057,  2113,  2008,  1996, 23284,
         2003,  2445,  2011,  1058,  1006,  1050,  1010,  1052,  1007,  1027,
        27937,  4160,  1027, 27937,  1597, 27937,  2475,  1012,   102])"
1701,0,[], Properties of Binomial Distribution,seg_347,"differentiating with respect to p, we get  ",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2367, 15370,  2007,  4847,  2000,  1052,  1010,  2057,  2131,
          102])"
1702,1,['limit'], Properties of Binomial Distribution,seg_347,"and solving for p gives p = 1/2. as the second derivative is −2n, this indeed gives the maxima. substitute in the above to get v(n, p) = n*(1/2)*(1/2) = n/4. this can be increased without limit by letting n → ∞ (see discussion in page 6–54).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1998, 13729,  2005,  1052,  3957,  1052,  1027,  1015,  1013,
         1016,  1012,  2004,  1996,  2117, 13819,  2003,  1597,  2475,  2078,
         1010,  2023,  5262,  3957,  1996, 20446,  2050,  1012,  7681,  1999,
         1996,  2682,  2000,  2131,  1058,  1006,  1050,  1010,  1052,  1007,
         1027,  1050,  1008,  1006,  1015,  1013,  1016,  1007,  1008,  1006,
         1015,  1013,  1016,  1007,  1027,  1050,  1013,  1018,  1012,  2023,
         2064,  2022,  3445,  2302,  5787,  2011,  5599,  1050,  1585,  1601,
         1006,  2156,  6594,  1999,  3931,  1020,  1516,  5139,  1007,  1012,
          102])"
1703,1,"['moment', 'discrete', 'ordinal', 'random variable', 'probabilities', 'level', 'random', 'likelihood', 'distribution', 'discrete distribution', 'variable']", Properties of Binomial Distribution,seg_347,"the ratio of two probabilities of a discrete distribution at distinct ordinal (x) values provides the relative likelihood of the random variable taking a value at one level versus the other. this is useful to calculate the probabilities recursively, locate the mode, and develop moment recurrences [129].",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  6463,  1997,  2048,  4013,  3676, 14680,  1997,  1037,
        16246,  4353,  2012,  5664,  2030, 18979,  2140,  1006,  1060,  1007,
         5300,  3640,  1996,  5816, 16593,  1997,  1996,  6721,  8023,  2635,
         1037,  3643,  2012,  2028,  2504,  6431,  1996,  2060,  1012,  2023,
         2003,  6179,  2000, 18422,  1996,  4013,  3676, 14680, 28667,  9236,
        14547,  1010, 12453,  1996,  5549,  1010,  1998,  4503,  2617, 28667,
         3126, 24413,  2015,  1031, 14378,  1033,  1012,   102])"
1704,1,"['binomial distribution', 'binomial', 'distribution']", Properties of Binomial Distribution,seg_347,example 6.5 mode of binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2742,  1020,  1012,  1019,  5549,  1997,  8026, 20936,  2389,
         4353,   102])"
1705,1,"['binomial distribution', 'binomial', 'distribution']", Properties of Binomial Distribution,seg_347,find the mode of the binomial distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2424,  1996,  5549,  1997,  1996,  8026, 20936,  2389,  4353,
         1012,   102])"
1706,0,[], Properties of Binomial Distribution,seg_347,solution 6.5 consider the ratio,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([ 101, 5576, 1020, 1012, 1019, 5136, 1996, 6463,  102])"
1707,1,"['unimodal', 'distribution', 'binomial', 'binomial distribution']", Properties of Binomial Distribution,seg_347,"add and subtract xq in the numerator and combine −xp − xq to get −x. then the ratio becomes 1 + [(n + 1)p − x]∕(xq). the bracketed expression in the numerator is positive when (n + 1)p x and negative otherwise. if (n + 1)p = x, the bracketed expression vanishes giving two modes at x − 1 and x. otherwise, the mode is ⌊(n + 1)p⌋. this shows that the binomial distribution is unimodal for all values of p and n, except when (n + 1)p is an integer.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  5587,  1998,  4942,  6494,  6593,  1060,  4160,  1999,  1996,
        16371,  5017,  8844,  1998, 11506,  1597,  2595,  2361,  1597,  1060,
         4160,  2000,  2131,  1597,  2595,  1012,  2059,  1996,  6463,  4150,
         1015,  1009,  1031,  1006,  1050,  1009,  1015,  1007,  1052,  1597,
         1060,  1033,   100,  1006,  1060,  4160,  1007,  1012,  1996, 21605,
         2098,  3670,  1999,  1996, 16371,  5017,  8844,  2003,  3893,  2043,
         1006,  1050,  1009,  1015,  1007,  1052,  1060,  1998,  4997,  4728,
         1012,  2065,  1006,  1050,  1009,  1015,  1007,  1052,  1027,  1060,
         1010,  1996, 21605,  2098,  3670, 25887,  2229,  3228,  2048, 11583,
         2012,  1060,  1597,  1015,  1998,  1060,  1012,  4728,  1010,  1996,
         5549,  2003,   100,  1006,  1050,  1009,  1015,  1007,  1052,   100,
         1012,  2023,  3065,  2008,  1996,  8026, 20936,  2389,  4353,  2003,
         4895, 16339,  9305,  2005,  2035,  5300,  1997,  1052,  1998,  1050,
         1010,  3272,  2043,  1006,  1050,  1009,  1015,  1007,  1052,  2003,
         2019, 16109,  1012,   102])"
1708,1,['moments'], Moment Recurrences,seg_349,"low order moments could be obtained using the density recurrences fx(n, p)∕fx(n − 1, p) = (n∕(n − x))q, which upon cross multiplication and rearrangement becomes",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2659,  2344,  5312,  2071,  2022,  4663,  2478,  1996,  4304,
        28667,  3126, 24413,  2015, 23292,  1006,  1050,  1010,  1052,  1007,
          100,  1006,  1050,  1597,  1015,  1010,  1052,  1007,  1027,  1006,
          100,  1006,  1050,  1597,  1060,  1007,  1007,  1053,  1010,  2029,
         2588,  2892, 24856,  1998,  4373, 24388, 13665,  4150,   102])"
1709,1,"['moments', 'range']", Moment Recurrences,seg_349,"multiply both sides of (6.25) by xk, denote the moments by  k(n, p), and sum over the range of x to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  4800, 22086,  2119,  3903,  1997,  1006,  1020,  1012,  2423,
         1007,  2011,  1060,  2243,  1010, 19090,  1996,  5312,  2011,  1047,
         1006,  1050,  1010,  1052,  1007,  1010,  1998,  7680,  2058,  1996,
         2846,  1997,  1060,  2000,  2131,   102])"
1710,1,['moments'], Moment Recurrences,seg_349,"put k = 1, to get  2(n, p) = n[ 1(n, p) − q 1(n − 1, p). substituting  1(n, p) = np,  1(n − 1, p) = (n − 1)p, the rhs becomes n[np − q(n − 1)p] = np[np + q]. higher order moments are obtained similarly.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2404,  1047,  1027,  1015,  1010,  2000,  2131,  1016,  1006,
         1050,  1010,  1052,  1007,  1027,  1050,  1031,  1015,  1006,  1050,
         1010,  1052,  1007,  1597,  1053,  1015,  1006,  1050,  1597,  1015,
         1010,  1052,  1007,  1012,  4942, 21532,  1015,  1006,  1050,  1010,
         1052,  1007,  1027, 27937,  1010,  1015,  1006,  1050,  1597,  1015,
         1010,  1052,  1007,  1027,  1006,  1050,  1597,  1015,  1007,  1052,
         1010,  1996,  1054,  7898,  4150,  1050,  1031, 27937,  1597,  1053,
         1006,  1050,  1597,  1015,  1007,  1052,  1033,  1027, 27937,  1031,
        27937,  1009,  1053,  1033,  1012,  3020,  2344,  5312,  2024,  4663,
         6660,  1012,   102])"
1711,1,"['recurrence', 'moment', 'moment recurrence', 'binomial']", Moment Recurrences,seg_349,example 6.6 binomial ordinary moment recurrence,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2742,  1020,  1012,  1020,  8026, 20936,  2389,  6623,  2617,
        28667,  3126, 24413,   102])"
1712,1,"['recurrence', 'moments', 'distribution', 'binomial', 'binomial distribution']", Moment Recurrences,seg_349,prove that the ordinary moments of a binomial distribution satisfy the recurrence,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  6011,  2008,  1996,  6623,  5312,  1997,  1037,  8026, 20936,
         2389,  4353, 13225,  1996, 28667,  3126, 24413,   102])"
1713,0,[], Moment Recurrences,seg_349,solution 6.6 write,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([ 101, 5576, 1020, 1012, 1020, 4339,  102])"
1714,0,[], Moment Recurrences,seg_349,  multiply throughout by pq and rearrange to get  k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  4800, 22086,  2802,  2011,  1052,  4160,  1998,  4373, 24388,
         2063,  2000,  2131,  1047,   102])"
1715,1,"['recurrence', 'moment', 'moment recurrence', 'binomial']", Moment Recurrences,seg_349,example 6.7 binomial central moment recurrence,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2742,  1020,  1012,  1021,  8026, 20936,  2389,  2430,  2617,
        28667,  3126, 24413,   102])"
1716,1,"['recurrence', 'moments', 'distribution', 'binomial', 'binomial distribution']", Moment Recurrences,seg_349,prove that the central moments of a binomial distribution satisfy the recurrence,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  6011,  2008,  1996,  2430,  5312,  1997,  1037,  8026, 20936,
         2389,  4353, 13225,  1996, 28667,  3126, 24413,   102])"
1717,0,[], Moment Recurrences,seg_349,solution 6.7 consider,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([ 101, 5576, 1020, 1012, 1021, 5136,  102])"
1718,1,['functions'], Moment Recurrences,seg_349,note that there are three functions of p on the rhs (as q = 1 − p). differentiate both sides with respect to p using chain rule to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  3602,  2008,  2045,  2024,  2093,  4972,  1997,  1052,  2006,
         1996,  1054,  7898,  1006,  2004,  1053,  1027,  1015,  1597,  1052,
         1007,  1012, 21032,  2119,  3903,  2007,  4847,  2000,  1052,  2478,
         4677,  3627,  2000,  2131,   102])"
1719,1,"['recurrence', 'moment', 'moment recurrence', 'binomial']", Moment Recurrences,seg_349,example 6.8 binomial central moment recurrence,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2742,  1020,  1012,  1022,  8026, 20936,  2389,  2430,  2617,
        28667,  3126, 24413,   102])"
1720,1,"['recurrence', 'moments', 'distribution', 'binomial', 'binomial distribution']", Moment Recurrences,seg_349,prove that the central moments of a binomial distribution satisfy the recurrence,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  6011,  2008,  1996,  2430,  5312,  1997,  1037,  8026, 20936,
         2389,  4353, 13225,  1996, 28667,  3126, 24413,   102])"
1721,0,[], Moment Recurrences,seg_349,solution 6.8 write,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([ 101, 5576, 1020, 1012, 1022, 4339,  102])"
1722,1,"['range', 'binomial', 'binomial theorem']", Moment Recurrences,seg_349,"consider equation (6.25) as (n − x)fx(n, p) = nqfx(n − 1, p). write (n − x) as n(p + q) − x = nq − (x − np) on the lhs. multiply throughout by (x − np)k, write (x − np) = [(x − (n − 1)p) − p] on the rhs, expand using binomial theorem and sum over the proper range to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  5136,  8522,  1006,  1020,  1012,  2423,  1007,  2004,  1006,
         1050,  1597,  1060,  1007, 23292,  1006,  1050,  1010,  1052,  1007,
         1027,  1050,  4160,  2546,  2595,  1006,  1050,  1597,  1015,  1010,
         1052,  1007,  1012,  4339,  1006,  1050,  1597,  1060,  1007,  2004,
         1050,  1006,  1052,  1009,  1053,  1007,  1597,  1060,  1027,  1050,
         4160,  1597,  1006,  1060,  1597, 27937,  1007,  2006,  1996,  1048,
         7898,  1012,  4800, 22086,  2802,  2011,  1006,  1060,  1597, 27937,
         1007,  1047,  1010,  4339,  1006,  1060,  1597, 27937,  1007,  1027,
         1031,  1006,  1060,  1597,  1006,  1050,  1597,  1015,  1007,  1052,
         1007,  1597,  1052,  1033,  2006,  1996,  1054,  7898,  1010,  7818,
         2478,  8026, 20936,  2389,  9872,  1998,  7680,  2058,  1996,  5372,
         2846,  2000,  2131,   102])"
1723,1,"['factorial moment', 'moment', 'moment ', 'factorial']", Moment Recurrences,seg_349,theorem 6.2 the factorial moment  (r) is given by  (r) = n(r)pr.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  9872,  1020,  1012,  1016,  1996,  5387,  4818,  2617,  1006,
         1054,  1007,  2003,  2445,  2011,  1006,  1054,  1007,  1027,  1050,
         1006,  1054,  1007, 10975,  1012,   102])"
1724,1,"['factorial moment', 'moment', 'factorial']", Moment Recurrences,seg_349,proof: consider the expression for factorial moment as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([ 101, 6947, 1024, 5136, 1996, 3670, 2005, 5387, 4818, 2617, 2004,  102])"
1725,1,['range'], Moment Recurrences,seg_349,substitute the pdf and sum over the proper range of x to get the rhs as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  7681,  1996, 11135,  1998,  7680,  2058,  1996,  5372,  2846,
         1997,  1060,  2000,  2131,  1996,  1054,  7898,  2004,   102])"
1726,1,"['factorial moments', 'moments', 'stirling number', 'factorial']", Moment Recurrences,seg_349,"where s(r, i) is the stirling number of first kind. the factorial moments are found",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2073,  1055,  1006,  1054,  1010,  1045,  1007,  2003,  1996,
        15597,  2193,  1997,  2034,  2785,  1012,  1996,  5387,  4818,  5312,
         2024,  2179,   102])"
1727,1,['stirling numbers'], Moment Recurrences,seg_349,using stirling numbers as r,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2478, 15597,  3616,  2004,  1054,   102])"
1728,1,['moment'], Moment Recurrences,seg_349,′ denotes the ith ordinary moment. the reverse relationship is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  1531, 14796,  1996,  2009,  2232,  6623,  2617,  1012,  1996,
         7901,  3276,  2003,   102])"
1729,1,['stirling number'], Moment Recurrences,seg_349,"where s(r, i) is the stirling number of second kind. this allows us to write",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2073,  1055,  1006,  1054,  1010,  1045,  1007,  2003,  1996,
        15597,  2193,  1997,  2117,  2785,  1012,  2023,  4473,  2149,  2000,
         4339,   102])"
1730,1,"['mean', 'deviation', 'distribution', 'binomial', 'binomial distribution']", Moment Recurrences,seg_349,theorem 6.3 prove that the mean deviation from the mean of a binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 1.,
        1., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  9872,  1020,  1012,  1017,  6011,  2008,  1996,  2812, 24353,
         2013,  1996,  2812,  1997,  1037,  8026, 20936,  2389,  4353,   102])"
1731,0,[], Moment Recurrences,seg_349,where   is the largest integer less than np (symbolically   = ⌊np⌋).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2073,  2003,  1996,  2922, 16109,  2625,  2084, 27937,  1006,
        12613,  3973,  1027,   100, 27937,   100,  1007,  1012,   102])"
1732,0,['n'], Moment Recurrences,seg_349,"proof: by definition, n n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([ 101, 6947, 1024, 2011, 6210, 1010, 1050, 1050,  102])"
1733,0,[], Moment Recurrences,seg_349,"split the rhs into two sums for x ≤ np and x   np, respectively:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  3975,  1996,  1054,  7898,  2046,  2048, 20571,  2005,  1060,
         1608, 27937,  1998,  1060, 27937,  1010,  4414,  1024,   102])"
1734,0,[], Moment Recurrences,seg_349,in the aforementioned to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  1999,  1996, 17289,  2000,  2131,   102])"
1735,0,[], Moment Recurrences,seg_349,x) and cancel out common terms to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  1060,  1007,  1998, 17542,  2041,  2691,  3408,  2000,  2131,
          102])"
1736,1,['factor'], Moment Recurrences,seg_349,"taking npq as common factor, we notice that the alternate terms in the left and right sums of 6.50 cancel out giving",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2635, 27937,  4160,  2004,  2691,  5387,  1010,  2057,  5060,
         2008,  1996,  6585,  3408,  1999,  1996,  2187,  1998,  2157, 20571,
         1997,  1020,  1012,  2753, 17542,  2041,  3228,   102])"
1737,1,"['summation', 'case']", Moment Recurrences,seg_349,"when np is an integer. if np is noninteger, we carry out the summation up to   = ⌊np⌋ so that the last term of the lhs remains (all others are canceled out). in this case, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2043, 27937,  2003,  2019, 16109,  1012,  2065, 27937,  2003,
         2512, 18447, 26320,  1010,  2057,  4287,  2041,  1996,  7680, 28649,
         2039,  2000,  1027,   100, 27937,   100,  2061,  2008,  1996,  2197,
         2744,  1997,  1996,  1048,  7898,  3464,  1006,  2035,  2500,  2024,
        13261,  2041,  1007,  1012,  1999,  2023,  2553,  1010,  2057,  2131,
          102])"
1738,1,"['method', 'power method']", Moment Recurrences,seg_349,"where   = ⌊np⌋ is the greatest integer ≤np. this is the form obtained originally by de moivre and subsequently by bertrand [131]. johnson [125], diaconis and zabell [132] among others have discussed other equivalent forms and approximations. in section 6.5.6, page 208, we provide a new method to find the md using the power method introduced in section 6.3, page 189.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2073,  1027,   100, 27937,   100,  2003,  1996,  4602, 16109,
         1608, 16275,  1012,  2023,  2003,  1996,  2433,  4663,  2761,  2011,
         2139, 25175, 12229,  1998,  3525,  2011, 20586,  1031, 14677,  1033,
         1012,  3779,  1031,  8732,  1033,  1010, 22939,  8663,  2483,  1998,
        23564, 17327,  1031, 14078,  1033,  2426,  2500,  2031,  6936,  2060,
         5662,  3596,  1998, 20167,  2015,  1012,  1999,  2930,  1020,  1012,
         1019,  1012,  1020,  1010,  3931, 18512,  1010,  2057,  3073,  1037,
         2047,  4118,  2000,  2424,  1996,  9108,  2478,  1996,  2373,  4118,
         3107,  1999,  2930,  1020,  1012,  1017,  1010,  3931, 20500,  1012,
          102])"
1739,1,"['functions', 'results']", Moment Recurrences,seg_349,"6.5.2.1 generating functions generating functions are extensively discussed in chapter 9. here we give the main results, which are proved in that chapter.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  1020,  1012,  1019,  1012,  1016,  1012,  1015, 11717,  4972,
        11717,  4972,  2024,  8077,  6936,  1999,  3127,  1023,  1012,  2182,
         2057,  2507,  1996,  2364,  3463,  1010,  2029,  2024,  4928,  1999,
         2008,  3127,  1012,   102])"
1740,1,"['function', 'moment', 'probability', 'moment generating function']", Moment Recurrences,seg_349,"theorem 6.4 the probability generating function is px(t) = (q + pt)n, and the moment generating function is mx(t) = (q + pet)n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  9872,  1020,  1012,  1018,  1996,  9723, 11717,  3853,  2003,
         1052,  2595,  1006,  1056,  1007,  1027,  1006,  1053,  1009, 13866,
         1007,  1050,  1010,  1998,  1996,  2617, 11717,  3853,  2003, 25630,
         1006,  1056,  1007,  1027,  1006,  1053,  1009,  9004,  1007,  1050,
         1012,   102])"
1741,0,[], Moment Recurrences,seg_349,proof: the pgf is,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  6947,  1024,  1996, 18720,  2546,  2003,   102])"
1742,1,"['expectation operator', 'expectation']", Moment Recurrences,seg_349,"where e() is the expectation operator. the mgf is found similarly by replacing tx by etx. see also chapter 9, page 379.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413,  2015])","tensor([  101,  2073,  1041,  1006,  1007,  2003,  1996, 17626,  6872,  1012,
         1996, 11460,  2546,  2003,  2179,  6660,  2011,  6419, 19067,  2011,
         3802,  2595,  1012,  2156,  2036,  3127,  1023,  1010,  3931,  4261,
         2683,  1012,   102])"
1743,1,"['table', 'probability', 'probability of success', 'random', 'binomial', 'success', 'independent']", Additivity Property,seg_351,"if x1 ∼ bino(n1, p) and x2 ∼ bino(n2, p) are independent binomial random variables with the same probability of success p, the sum x = x1 + x2 is distributed as bino(n1 + n2, p) (table 6.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2065,  1060,  2487,   100,  8026,  2080,  1006,  1050,  2487,
         1010,  1052,  1007,  1998,  1060,  2475,   100,  8026,  2080,  1006,
         1050,  2475,  1010,  1052,  1007,  2024,  2981,  8026, 20936,  2389,
         6721, 10857,  2007,  1996,  2168,  9723,  1997,  3112,  1052,  1010,
         1996,  7680,  1060,  1027,  1060,  2487,  1009,  1060,  2475,  2003,
         5500,  2004,  8026,  2080,  1006,  1050,  2487,  1009,  1050,  2475,
         1010,  1052,  1007,  1006,  2795,  1020,  1012,  1018,  1007,  1012,
          102])"
1744,1,"['bernoulli', 'probability', 'probability of success', 'trials', 'bernoulli trials', 'independent', 'distribution', 'binomial', 'success', 'binomial distribution']", Additivity Property,seg_351,"proof: the easiest way to prove the above-mentioned result is using the mgf. as x1 and x2 are independent, mx1+x2 (t) = mx1 (t) ∗ mx2 (t). substituting mx(t) = (q + pet)n, the rhs becomes (q + pet)n1 ∗ (q + pet)n2 = (q + pet)n1+n2 , which is the mgf of bino(n1 + n2, p). an interpretation of this result in terms of bernoulli trials is the following – “if there are n1 independent bernoulli trials with the same probability of success p and another n2 independent bernoulli trials with the same probability of success, they can be combined in any desired order to produce a binomial distribution of size n1 + n2.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  6947,  1024,  1996, 25551,  2126,  2000,  6011,  1996,  2682,
         1011,  3855,  2765,  2003,  2478,  1996, 11460,  2546,  1012,  2004,
         1060,  2487,  1998,  1060,  2475,  2024,  2981,  1010, 25630,  2487,
         1009,  1060,  2475,  1006,  1056,  1007,  1027, 25630,  2487,  1006,
         1056,  1007,  1598, 25630,  2475,  1006,  1056,  1007,  1012,  4942,
        21532, 25630,  1006,  1056,  1007,  1027,  1006,  1053,  1009,  9004,
         1007,  1050,  1010,  1996,  1054,  7898,  4150,  1006,  1053,  1009,
         9004,  1007,  1050,  2487,  1598,  1006,  1053,  1009,  9004,  1007,
         1050,  2475,  1027,  1006,  1053,  1009,  9004,  1007,  1050,  2487,
         1009,  1050,  2475,  1010,  2029,  2003,  1996, 11460,  2546,  1997,
         8026,  2080,  1006,  1050,  2487,  1009,  1050,  2475,  1010,  1052,
         1007,  1012,  2019,  7613,  1997,  2023,  2765,  1999,  3408,  1997,
        16595,  7140,  6894,  7012,  2003,  1996,  2206,  1516,  1523,  2065,
         2045,  2024,  1050,  2487,  2981, 16595,  7140,  6894,  7012,  2007,
         1996,  2168,  9723,  1997,  3112,  1052,  1998,  2178,  1050,  2475,
         2981, 16595,  7140,  6894,  7012,  2007,  1996,  2168,  9723,  1997,
         3112,  1010,  2027,  2064,  2022,  4117,  1999,  2151,  9059,  2344,
         2000,  3965,  1037,  8026, 20936,  2389,  4353,  1997,  2946,  1050,
         2487,  1009,  1050,  2475,  1012,  1524,   102])"
1745,1,"['random variable', 'random', 'variable']", Additivity Property,seg_351,"another way of stating the above-mentioned theorem is that if x + y is distributed as bino(n1 + n2, p), and either of x or of y is distributed as bino(n1, p), the other random variable must be bino(n2, p) (or ber(p) is n2 = 1). this",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101, 2178, 2126, 1997, 5517, 1996, 2682, 1011, 3855, 9872, 2003, 2008,
        2065, 1060, 1009, 1061, 2003, 5500, 2004, 8026, 2080, 1006, 1050, 2487,
        1009, 1050, 2475, 1010, 1052, 1007, 1010, 1998, 2593, 1997, 1060, 2030,
        1997, 1061, 2003, 5500, 2004, 8026, 2080, 1006, 1050, 2487, 1010, 1052,
        1007, 1010, 1996, 2060, 6721, 8023, 2442, 2022, 8026, 2080, 1006, 1050,
        2475, 1010, 1052, 1007, 1006, 2030, 2022, 2099, 1006, 1052, 1007, 2003,
        1050, 2475, 1027, 1015, 1007, 1012, 2023,  102])"
1746,1,"['probability', 'binomial distributions', 'probability of success', 'distributions', 'independent', 'binomial', 'success']", Additivity Property,seg_351,"result can be extended to any number of independent binomial distributions with the same probability of success. symbolically, if xi ∼ bino(ni, p), then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2765,  2064,  2022,  3668,  2000,  2151,  2193,  1997,  2981,
         8026, 20936,  2389, 20611,  2007,  1996,  2168,  9723,  1997,  3112,
         1012, 12613,  3973,  1010,  2065,  8418,   100,  8026,  2080,  1006,
         9152,  1010,  1052,  1007,  1010,  2059,   102])"
1747,0,[], Additivity Property,seg_351,"∑ixi ∼ bino(∑ini, p).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101,  100,  100, 8026, 2080, 1006,  100, 1010, 1052, 1007, 1012,  102])"
1748,1,['distribution'], Additivity Property,seg_351,example 6.9 distribution of y = n − x,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101, 2742, 1020, 1012, 1023, 4353, 1997, 1061, 1027, 1050, 1597, 1060,
         102])"
1749,1,"['mean', 'variance', 'distribution', 'parameters', 'binomial', 'binomial distribution']", Additivity Property,seg_351,"if x has a binomial distribution with parameters n and p, derive the distribution of y = n − x and obtain its pgf and mgf. obtain the mean and variance. what is the additive property for y?",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2065,  1060,  2038,  1037,  8026, 20936,  2389,  4353,  2007,
        11709,  1050,  1998,  1052,  1010, 18547,  1996,  4353,  1997,  1061,
         1027,  1050,  1597,  1060,  1998,  6855,  2049, 18720,  2546,  1998,
        11460,  2546,  1012,  6855,  1996,  2812,  1998, 23284,  1012,  2054,
         2003,  1996, 29167,  3200,  2005,  1061,  1029,   102])"
1750,1,['range'], Additivity Property,seg_351,"solution 6.9 as x takes the values 0, 1, …, n; y also takes the same values in reverse. thus, the range of x and y are the same.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101, 5576, 1020, 1012, 1023, 2004, 1060, 3138, 1996, 5300, 1014, 1010,
        1015, 1010, 1529, 1010, 1050, 1025, 1061, 2036, 3138, 1996, 2168, 5300,
        1999, 7901, 1012, 2947, 1010, 1996, 2846, 1997, 1060, 1998, 1061, 2024,
        1996, 2168, 1012,  102])"
1751,1,['binomial'], Additivity Property,seg_351,y) qypn−y. this is the pdf of a binomial,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1061,  1007,  1053, 22571,  2078, 22543,  2100,  1012,  2023,
         2003,  1996, 11135,  1997,  1037,  8026, 20936,  2389,   102])"
1752,0,[], Additivity Property,seg_351,"distribution with p and q reversed. hence y = n − x ∼ bino(n, q), so that all properties are obtained by swapping the roles of p and q in the corresponding property of bino(n,p). the pgf is",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  4353,  2007,  1052,  1998,  1053, 11674,  1012,  6516,  1061,
         1027,  1050,  1597,  1060,   100,  8026,  2080,  1006,  1050,  1010,
         1053,  1007,  1010,  2061,  2008,  2035,  5144,  2024,  4663,  2011,
        19948,  4691,  1996,  4395,  1997,  1052,  1998,  1053,  1999,  1996,
         7978,  3200,  1997,  8026,  2080,  1006,  1050,  1010,  1052,  1007,
         1012,  1996, 18720,  2546,  2003,   102])"
1753,1,"['mean', 'function', 'variance', 'cumulant', 'random', 'variates', 'binomial']", Additivity Property,seg_351,"similarly, the mgf is my (t) = e(ety) = (p + qet)n. from this, the cumulant generating function follows as n ∗ ln (q + pet). the mean and variance are nq and npq, respectively. this shows that x and y have the same variance, but the mean is nq = n(1 − p) = n − np. as it is binomial distributed, the additive property remains the same. this means that if y and z are bino(n1, q) and bino(n2, q) random variates, then y + z is distributed as bino(n1 + n2, q), provided q (or equivalently p = 1 − q) is the same.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  6660,  1010,  1996, 11460,  2546,  2003,  2026,  1006,  1056,
         1007,  1027,  1041,  1006,  3802,  2100,  1007,  1027,  1006,  1052,
         1009,  1053,  3388,  1007,  1050,  1012,  2013,  2023,  1010,  1996,
        13988,  7068,  3372, 11717,  3853,  4076,  2004,  1050,  1598,  1048,
         2078,  1006,  1053,  1009,  9004,  1007,  1012,  1996,  2812,  1998,
        23284,  2024,  1050,  4160,  1998, 27937,  4160,  1010,  4414,  1012,
         2023,  3065,  2008,  1060,  1998,  1061,  2031,  1996,  2168, 23284,
         1010,  2021,  1996,  2812,  2003,  1050,  4160,  1027,  1050,  1006,
         1015,  1597,  1052,  1007,  1027,  1050,  1597, 27937,  1012,  2004,
         2009,  2003,  8026, 20936,  2389,  5500,  1010,  1996, 29167,  3200,
         3464,  1996,  2168,  1012,  2023,  2965,  2008,  2065,  1061,  1998,
         1062,  2024,  8026,  2080,  1006,  1050,  2487,  1010,  1053,  1007,
         1998,  8026,  2080,  1006,  1050,  2475,  1010,  1053,  1007,  6721,
        13075, 13143,  2015,  1010,  2059,  1061,  1009,  1062,  2003,  5500,
         2004,  8026,  2080,  1006,  1050,  2487,  1009,  1050,  2475,  1010,
         1053,  1007,  1010,  3024,  1053,  1006,  2030,  5662,  2135,  1052,
         1027,  1015,  1597,  1053,  1007,  2003,  1996,  2168,  1012,   102])"
1754,1,"['successes', 'failures', 'trials', 'distribution', 'binomial', 'binomial distribution']", Distribution of the Difference of Successes and Failures,seg_353,"the number of successes and failures in a binomial distribution is related through n. if there are x successes, there exist n − x failures and vice versa. in other words, they must add up to the total number of trials. the following example derives the distribution of the absolute difference of them.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  1996,  2193,  1997, 14152,  1998, 15428,  1999,  1037,  8026,
        20936,  2389,  4353,  2003,  3141,  2083,  1050,  1012,  2065,  2045,
         2024,  1060, 14152,  1010,  2045,  4839,  1050,  1597,  1060, 15428,
         1998,  3580, 18601,  1012,  1999,  2060,  2616,  1010,  2027,  2442,
         5587,  2039,  2000,  1996,  2561,  2193,  1997,  7012,  1012,  1996,
         2206,  2742, 12153,  1996,  4353,  1997,  1996,  7619,  4489,  1997,
         2068,  1012,   102])"
1755,1,['distribution'], Distribution of the Difference of Successes and Failures,seg_353,example 6.10 distribution of u = |x − y|∕2.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([ 101, 2742, 1020, 1012, 2184, 4353, 1997, 1057, 1027, 1064, 1060, 1597,
        1061, 1064,  100, 1012,  102])"
1756,1,"['bernoulli', 'probability', 'tails', 'probability of success', 'failures', 'trials', 'bernoulli trials', 'distribution', 'successes', 'success', 'independent']", Distribution of the Difference of Successes and Failures,seg_353,let x denotes the number of successes (or heads) and y denotes the number of failures (or tails) in n independent bernoulli trials with the same probability of success p. find the distribution of u = |x − y|∕2 for n even.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  2292,  1060, 14796,  1996,  2193,  1997, 14152,  1006,  2030,
         4641,  1007,  1998,  1061, 14796,  1996,  2193,  1997, 15428,  1006,
         2030, 17448,  1007,  1999,  1050,  2981, 16595,  7140,  6894,  7012,
         2007,  1996,  2168,  9723,  1997,  3112,  1052,  1012,  2424,  1996,
         4353,  1997,  1057,  1027,  1064,  1060,  1597,  1061,  1064,   100,
         2005,  1050,  2130,  1012,   102])"
1757,1,['probability'], Distribution of the Difference of Successes and Failures,seg_353,"solution 6.10 obviously, u takes the values (0, 1, … , n∕2). as n is even, it can take the value 0 in just one way – when both x and y are n∕2. the probability of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([ 101, 5576, 1020, 1012, 2184, 5525, 1010, 1057, 3138, 1996, 5300, 1006,
        1014, 1010, 1015, 1010, 1529, 1010,  100, 1007, 1012, 2004, 1050, 2003,
        2130, 1010, 2009, 2064, 2202, 1996, 3643, 1014, 1999, 2074, 2028, 2126,
        1516, 2043, 2119, 1060, 1998, 1061, 2024,  100, 1012, 1996, 9723, 1997,
         102])"
1758,1,['case'], Distribution of the Difference of Successes and Failures,seg_353,this case is (n 2,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([ 101, 2023, 2553, 2003, 1006, 1050, 1016,  102])"
1759,1,"['probability', 'failures', 'successes']", Distribution of the Difference of Successes and Failures,seg_353,"other values are materialized. first consider the number of successes exceeding the number of failures by x. let t be the number of failures (so that the number of successes is t + x). then t = (n − x)∕2, and t + x = (n + x)∕2. probability of this happening is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  2060,  5300,  2024, 27075,  1012,  2034,  5136,  1996,  2193,
         1997, 14152, 17003,  1996,  2193,  1997, 15428,  2011,  1060,  1012,
         2292,  1056,  2022,  1996,  2193,  1997, 15428,  1006,  2061,  2008,
         1996,  2193,  1997, 14152,  2003,  1056,  1009,  1060,  1007,  1012,
         2059,  1056,  1027,  1006,  1050,  1597,  1060,  1007,   100,  1010,
         1998,  1056,  1009,  1060,  1027,  1006,  1050,  1009,  1060,  1007,
          100,  1012,  9723,  1997,  2023,  6230,  2003,   102])"
1760,1,"['probability', 'failures', 'successes']", Distribution of the Difference of Successes and Failures,seg_353,"for x = 2, 4, .., n. next consider the number of failures exceeding the number of successes by x. let t be the number of failures. then t = (n + x)∕2 and t − x = (n − x)∕2. probability of this happening is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  2005,  1060,  1027,  1016,  1010,  1018,  1010,  1012,  1012,
         1010,  1050,  1012,  2279,  5136,  1996,  2193,  1997, 15428, 17003,
         1996,  2193,  1997, 14152,  2011,  1060,  1012,  2292,  1056,  2022,
         1996,  2193,  1997, 15428,  1012,  2059,  1056,  1027,  1006,  1050,
         1009,  1060,  1007,   100,  1998,  1056,  1597,  1060,  1027,  1006,
         1050,  1597,  1060,  1007,   100,  1012,  9723,  1997,  2023,  6230,
         2003,   102])"
1761,0,['n'], Distribution of the Difference of Successes and Failures,seg_353,"n x), this becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([ 101, 1050, 1060, 1007, 1010, 2023, 4150,  102])"
1762,1,['probability'], Distribution of the Difference of Successes and Failures,seg_353,"for x = 2, 4, …, n. adding (6.55) and (6.57) gives the probability of u assuming the value u as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  2005,  1060,  1027,  1016,  1010,  1018,  1010,  1529,  1010,
         1050,  1012,  5815,  1006,  1020,  1012,  4583,  1007,  1998,  1006,
         1020,  1012,  5401,  1007,  3957,  1996,  9723,  1997,  1057, 10262,
         1996,  3643,  1057,  2004,   102])"
1763,1,['factor'], Distribution of the Difference of Successes and Failures,seg_353,take qn as a common factor and write (q∕p)t = (p∕q)−t to get the alternate form,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([ 101, 2202, 1053, 2078, 2004, 1037, 2691, 5387, 1998, 4339, 1006,  100,
        1007, 1056, 1027, 1006,  100, 1007, 1597, 2102, 2000, 2131, 1996, 6585,
        2433,  102])"
1764,1,"['sample', 'table']", Distribution of the Difference of Successes and Failures,seg_353,"t ) ∕2n−1. a similar result could be derived when n is odd. see table 6.5 for some sample values, and exercise 6.11 (p. 247).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  1056,  1007,   100,  1012,  1037,  2714,  2765,  2071,  2022,
         5173,  2043,  1050,  2003,  5976,  1012,  2156,  2795,  1020,  1012,
         1019,  2005,  2070,  7099,  5300,  1010,  1998,  6912,  1020,  1012,
         2340,  1006,  1052,  1012, 23380,  1007,  1012,   102])"
1765,1,"['table', 'failures', 'trials', 'distribution', 'successes']", Distribution of the Difference of Successes and Failures,seg_353,"there is another way to derive the above-mentioned distribution using a result in chapter 10 (p. 401). let there be x successes and (n − x) failures in n trials (table 6.6). then s − f = x − (n − x) = 2x − n = y(say), where s denotes the successes and f",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  2045,  2003,  2178,  2126,  2000, 18547,  1996,  2682,  1011,
         3855,  4353,  2478,  1037,  2765,  1999,  3127,  2184,  1006,  1052,
         1012, 22649,  1007,  1012,  2292,  2045,  2022,  1060, 14152,  1998,
         1006,  1050,  1597,  1060,  1007, 15428,  1999,  1050,  7012,  1006,
         2795,  1020,  1012,  1020,  1007,  1012,  2059,  1055,  1597,  1042,
         1027,  1060,  1597,  1006,  1050,  1597,  1060,  1007,  1027,  1016,
         2595,  1597,  1050,  1027,  1061,  1006,  2360,  1007,  1010,  2073,
         1055, 14796,  1996, 14152,  1998,  1042,   102])"
1766,1,['failures'], Distribution of the Difference of Successes and Failures,seg_353,"denotes the failures. clearly, y takes the values −n,−n + 2, … , 0, …, n − 2, n.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101, 14796,  1996, 15428,  1012,  4415,  1010,  1061,  3138,  1996,
         5300,  1597,  2078,  1010,  1597,  2078,  1009,  1016,  1010,  1529,
         1010,  1014,  1010,  1529,  1010,  1050,  1597,  1016,  1010,  1050,
         1012,   102])"
1767,1,['distribution'], Distribution of the Difference of Successes and Failures,seg_353,n p(y = y) = p(2x − n = y) = p(x = (n + y)∕2) = ( (n + y)∕2) p(n+y)∕2q(n−y)∕2. (6.59) the distribution of |y| is given in section 10.4.1 as f (y) + f (−y). put y = −y in equation (6.59) and add to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([  101,  1050,  1052,  1006,  1061,  1027,  1061,  1007,  1027,  1052,
         1006,  1016,  2595,  1597,  1050,  1027,  1061,  1007,  1027,  1052,
         1006,  1060,  1027,  1006,  1050,  1009,  1061,  1007,   100,  1007,
         1027,  1006,  1006,  1050,  1009,  1061,  1007,   100,  1007,  1052,
         1006,  1050,  1009,  1061,  1007,   100,  1006,  1050, 22543,  2100,
         1007,   100,  1012,  1006,  1020,  1012,  5354,  1007,  1996,  4353,
         1997,  1064,  1061,  1064,  2003,  2445,  1999,  2930,  2184,  1012,
         1018,  1012,  1015,  2004,  1042,  1006,  1061,  1007,  1009,  1042,
         1006,  1597,  2100,  1007,  1012,  2404,  1061,  1027,  1597,  2100,
         1999,  8522,  1006,  1020,  1012,  5354,  1007,  1998,  5587,  2000,
         2131,   102])"
1768,1,['factors'], Distribution of the Difference of Successes and Failures,seg_353,n x) and take common factors outside to get the above-mentioned form,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  1996,  4489,  1997, 14152,  1998, 15428])","tensor([ 101, 1050, 1060, 1007, 1998, 2202, 2691, 5876, 2648, 2000, 2131, 1996,
        2682, 1011, 3855, 2433,  102])"
1769,1,"['recurrence', 'probabilities', 'distribution', 'binomial', 'binomial distribution']", Algorithm for Binomial Distribution,seg_355,successive probabilities of the binomial distribution are found using the recurrence,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101, 11165,  4013,  3676, 14680,  1997,  1996,  8026, 20936,  2389,
         4353,  2024,  2179,  2478,  1996, 28667,  3126, 24413,   102])"
1770,0,[], Algorithm for Binomial Distribution,seg_355,qn. this could also be written as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([ 101, 1053, 2078, 1012, 2023, 2071, 2036, 2022, 2517, 2004,  102])"
1771,0,['n'], Algorithm for Binomial Distribution,seg_355,reduce the number of iterations by starting with f (n) = (,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  5547,  1996,  2193,  1997, 27758,  2015,  2011,  3225,  2007,
         1042,  1006,  1050,  1007,  1027,  1006,   102])"
1772,0,['n'], Algorithm for Binomial Distribution,seg_355,n) pn = pn and recurring,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  1050,  1007,  1052,  2078,  1027,  1052,  2078,  1998, 10694,
          102])"
1773,0,[], Algorithm for Binomial Distribution,seg_355,backward using the relationship f (x − 1) = q,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([ 101, 8848, 2478, 1996, 3276, 1042, 1006, 1060, 1597, 1015, 1007, 1027,
        1053,  102])"
1774,0,[], Algorithm for Binomial Distribution,seg_355,example 6.11 winning group,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([ 101, 2742, 1020, 1012, 2340, 3045, 2177,  102])"
1775,1,"['probability', 'independent']", Algorithm for Binomial Distribution,seg_355,"a class has b boys and g girls, both ≥ 2. a competition is conducted between the boys (who form group g1) and the girls (who form group g2), where each competition is independent of others and it is between the groups. if there are n prizes to be distributed to the winning groups, find (i) probability that girls bag more prizes than boys, (ii) number of prizes bagged by boys is odd, (iii) number of prizes bagged by girls is even number, and (iv) boys get no prizes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  1037,  2465,  2038,  1038,  3337,  1998,  1043,  3057,  1010,
         2119,  1609,  1016,  1012,  1037,  2971,  2003,  4146,  2090,  1996,
         3337,  1006,  2040,  2433,  2177,  1043,  2487,  1007,  1998,  1996,
         3057,  1006,  2040,  2433,  2177,  1043,  2475,  1007,  1010,  2073,
         2169,  2971,  2003,  2981,  1997,  2500,  1998,  2009,  2003,  2090,
         1996,  2967,  1012,  2065,  2045,  2024,  1050, 11580,  2000,  2022,
         5500,  2000,  1996,  3045,  2967,  1010,  2424,  1006,  1045,  1007,
         9723,  2008,  3057,  4524,  2062, 11580,  2084,  3337,  1010,  1006,
         2462,  1007,  2193,  1997, 11580,  4524,  5999,  2011,  3337,  2003,
         5976,  1010,  1006,  3523,  1007,  2193,  1997, 11580,  4524,  5999,
         2011,  3057,  2003,  2130,  2193,  1010,  1998,  1006,  4921,  1007,
         3337,  2131,  2053, 11580,  1012,   102])"
1776,1,"['probability', 'distribution']", Algorithm for Binomial Distribution,seg_355,"solution 6.11 as there are b boys and g girls, the proportion of boys is b∕(b + g) and that of girls is g∕(b + g). as there are n prizes, the distribution of the prizes in favor of the boys is a bino(n, b∕(b + g)), where we have assumed that a “suc- cess” corresponds to the boys winning a prize. we assume that this probability remains the same because the prizes are distributed to the groups independently. (i) probability that girls bag more prizes than boys = probability that boys get less prizes than girls = pr[x n−x] = pr[2x   n] = pr[x   n/2]",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  5576,  1020,  1012,  2340,  2004,  2045,  2024,  1038,  3337,
         1998,  1043,  3057,  1010,  1996, 10817,  1997,  3337,  2003,   100,
         1006,  1038,  1009,  1043,  1007,  1998,  2008,  1997,  3057,  2003,
          100,  1006,  1038,  1009,  1043,  1007,  1012,  2004,  2045,  2024,
         1050, 11580,  1010,  1996,  4353,  1997,  1996, 11580,  1999,  5684,
         1997,  1996,  3337,  2003,  1037,  8026,  2080,  1006,  1050,  1010,
          100,  1006,  1038,  1009,  1043,  1007,  1007,  1010,  2073,  2057,
         2031,  5071,  2008,  1037,  1523, 10514,  2278,  1011,  8292,  4757,
         1524, 14788,  2000,  1996,  3337,  3045,  1037,  3396,  1012,  2057,
         7868,  2008,  2023,  9723,  3464,  1996,  2168,  2138,  1996, 11580,
         2024,  5500,  2000,  1996,  2967,  9174,  1012,  1006,  1045,  1007,
         9723,  2008,  3057,  4524,  2062, 11580,  2084,  3337,  1027,  9723,
         2008,  3337,  2131,  2625, 11580,  2084,  3057,  1027, 10975,  1031,
         1060,  1050, 22543,  2595,  1033,  1027, 10975,  1031,  1016,  2595,
         1050,  1033,  1027, 10975,  1031,  1060,  1050,  1013,  1016,  1033,
          102])"
1777,1,['summation'], Algorithm for Binomial Distribution,seg_355,"= ∑ piqn−i, where p = b∕(b + g) and the summation is from 0 to i=0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  1027,   100, 14255,  4160,  2078, 22543,  2072,  1010,  2073,
         1052,  1027,   100,  1006,  1038,  1009,  1043,  1007,  1998,  1996,
         7680, 28649,  2003,  2013,  1014,  2000,  1045,  1027,  1014,   102])"
1778,1,"['binomial', 'binomial theorem']", Algorithm for Binomial Distribution,seg_355,"consider the expression (p + q)n − (p − q)n. expanding using binomial theorem and canceling out all even terms, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  5136,  1996,  3670,  1006,  1052,  1009,  1053,  1007,  1050,
         1597,  1006,  1052,  1597,  1053,  1007,  1050,  1012,  9186,  2478,
         8026, 20936,  2389,  9872,  1998, 17542,  2075,  2041,  2035,  2130,
         3408,  1010,  2057,  2131,   102])"
1779,1,['probability'], Algorithm for Binomial Distribution,seg_355,"hence, the required probability is 1 2 [(p + q)n − (p − q)n]. however, p + q = 1 and p − q = b∕(b + g) − g∕(b + g) = (b − g)∕(b + g). substitute in the aforementioned to get the required probability as 1 2 [1 − [(b − g)∕(b + g)]n]. when the number of boys is less than that of girls, the second term can be negative for",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  6516,  1010,  1996,  3223,  9723,  2003,  1015,  1016,  1031,
         1006,  1052,  1009,  1053,  1007,  1050,  1597,  1006,  1052,  1597,
         1053,  1007,  1050,  1033,  1012,  2174,  1010,  1052,  1009,  1053,
         1027,  1015,  1998,  1052,  1597,  1053,  1027,   100,  1006,  1038,
         1009,  1043,  1007,  1597,   100,  1006,  1038,  1009,  1043,  1007,
         1027,  1006,  1038,  1597,  1043,  1007,   100,  1006,  1038,  1009,
         1043,  1007,  1012,  7681,  1999,  1996, 17289,  2000,  2131,  1996,
         3223,  9723,  2004,  1015,  1016,  1031,  1015,  1597,  1031,  1006,
         1038,  1597,  1043,  1007,   100,  1006,  1038,  1009,  1043,  1007,
         1033,  1050,  1033,  1012,  2043,  1996,  2193,  1997,  3337,  2003,
         2625,  2084,  2008,  1997,  3057,  1010,  1996,  2117,  2744,  2064,
         2022,  4997,  2005,   102])"
1780,1,"['binomial', 'binomial theorem']", Algorithm for Binomial Distribution,seg_355,"where we have swapped the roles of p and q. to evaluate this sum, consider the expression (p + q)n + (q − p)n. expanding using binomial theorem, all",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  2073,  2057,  2031, 29176,  1996,  4395,  1997,  1052,  1998,
         1053,  1012,  2000, 16157,  2023,  7680,  1010,  5136,  1996,  3670,
         1006,  1052,  1009,  1053,  1007,  1050,  1009,  1006,  1053,  1597,
         1052,  1007,  1050,  1012,  9186,  2478,  8026, 20936,  2389,  9872,
         1010,  2035,   102])"
1781,0,[], Algorithm for Binomial Distribution,seg_355,". hence, the required prob-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([ 101, 1012, 6516, 1010, 1996, 3223, 4013, 2497, 1011,  102])"
1782,1,['probability'], Algorithm for Binomial Distribution,seg_355,ability is 1 2 [1 + [(g − b)∕(b + g)]n]. (iv) probability that boys get no prizes = qn = [g∕(b + g)]n.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  3754,  2003,  1015,  1016,  1031,  1015,  1009,  1031,  1006,
         1043,  1597,  1038,  1007,   100,  1006,  1038,  1009,  1043,  1007,
         1033,  1050,  1033,  1012,  1006,  4921,  1007,  9723,  2008,  3337,
         2131,  2053, 11580,  1027,  1053,  2078,  1027,  1031,   100,  1006,
         1038,  1009,  1043,  1007,  1033,  1050,  1012,   102])"
1783,1,['probability'], Algorithm for Binomial Distribution,seg_355,consider rolling a die 20 times. what is the probability of getting at least 10 sixes?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([ 101, 5136, 5291, 1037, 3280, 2322, 2335, 1012, 2054, 2003, 1996, 9723,
        1997, 2893, 2012, 2560, 2184, 2416, 2229, 1029,  102])"
1784,1,"['probability', 'distribution']", Algorithm for Binomial Distribution,seg_355,"solution 6.12 the probability p of getting a six on any roll is 1/6, and the count x of sixes has a b(20, 1/6) distribution. hence, the required probability is obtained",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([ 101, 5576, 1020, 1012, 2260, 1996, 9723, 1052, 1997, 2893, 1037, 2416,
        2006, 2151, 4897, 2003, 1015, 1013, 1020, 1010, 1998, 1996, 4175, 1060,
        1997, 2416, 2229, 2038, 1037, 1038, 1006, 2322, 1010, 1015, 1013, 1020,
        1007, 4353, 1012, 6516, 1010, 1996, 3223, 9723, 2003, 4663,  102])"
1785,1,['probabilities'], Algorithm for Binomial Distribution,seg_355,by summing the individual probabilities as∑x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 9896,  2005,  8026, 20936,  2389,  4353])","tensor([  101,  2011,  7680,  6562,  1996,  3265,  4013,  3676, 14680,   100,
          102])"
1786,1,"['binomial distribution', 'binomial', 'distribution']", Tail Probabilities,seg_357,"the cdf of a binomial distribution bino(n, p) is fx(n, p) = ∑k",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1996,  3729,  2546,  1997,  1037,  8026, 20936,  2389,  4353,
         8026,  2080,  1006,  1050,  1010,  1052,  1007,  2003, 23292,  1006,
         1050,  1010,  1052,  1007,  1027,   100,   102])"
1787,1,"['incomplete beta', 'function', 'beta function', 'incomplete beta function', 'method', 'distribution', 'binomial', 'binomial distribution']", Tail Probabilities,seg_357,"k) pkq(n−k). we could compute this by the straightforward method of adding the successive probabilities. however, for large n and k, this method is very inefficient. a better approach is to use the relationship between the binomial distribution and the incomplete beta function as follows.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1047,  1007,  1052,  2243,  4160,  1006,  1050, 22543,  2243,
         1007,  1012,  2057,  2071, 24134,  2023,  2011,  1996, 19647,  4118,
         1997,  5815,  1996, 11165,  4013,  3676, 14680,  1012,  2174,  1010,
         2005,  2312,  1050,  1998,  1047,  1010,  2023,  4118,  2003,  2200,
         1999, 12879,  8873, 23402,  3372,  1012,  1037,  2488,  3921,  2003,
         2000,  2224,  1996,  3276,  2090,  1996,  8026, 20936,  2389,  4353,
         1998,  1996, 12958,  8247,  3853,  2004,  4076,  1012,   102])"
1788,1,"['function', 'discrete', 'continuous']", Tail Probabilities,seg_357,"(see chapter 7, section 7.6, p. 7–36). the lhs of equation (6.63) is a discrete sum, whereas the rhs is a continuous function of p. when k   np∕2, this is computed as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1006,  2156,  3127,  1021,  1010,  2930,  1021,  1012,  1020,
         1010,  1052,  1012,  1021,  1516,  4029,  1007,  1012,  1996,  1048,
         7898,  1997,  8522,  1006,  1020,  1012,  6191,  1007,  2003,  1037,
        16246,  7680,  1010,  6168,  1996,  1054,  7898,  2003,  1037,  7142,
         3853,  1997,  1052,  1012,  2043,  1047,   100,  1010,  2023,  2003,
        24806,  2004,   102])"
1789,1,"['tail', 'tail probabilities', 'probabilities']", Tail Probabilities,seg_357,"fx(k) = 1 − ip(k + 1, n − k). alternatively, the tail probabilities (sf) can be expressed",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101, 23292,  1006,  1047,  1007,  1027,  1015,  1597, 12997,  1006,
         1047,  1009,  1015,  1010,  1050,  1597,  1047,  1007,  1012, 14084,
         1010,  1996,  5725,  4013,  3676, 14680,  1006, 16420,  1007,  2064,
         2022,  5228,   102])"
1790,1,"['gamma', 'functions']", Tail Probabilities,seg_357,"replacing the factorials by gamma functions, this is seen to be equivalent to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  6419,  1996,  5387, 26340,  2011, 13091,  4972,  1010,  2023,
         2003,  2464,  2000,  2022,  5662,  2000,   102])"
1791,1,"['incomplete beta', 'function', 'beta function', 'incomplete beta function']", Tail Probabilities,seg_357,"as the incomplete beta function is widely tabulated, it is far easier to evaluate the rhs. this is especially useful when n is large and k is not near n.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2004,  1996, 12958,  8247,  3853,  2003,  4235, 21628,  8898,
         1010,  2009,  2003,  2521,  6082,  2000, 16157,  1996,  1054,  7898,
         1012,  2023,  2003,  2926,  6179,  2043,  1050,  2003,  2312,  1998,
         1047,  2003,  2025,  2379,  1050,  1012,   102])"
1792,1,"['power method', 'method', 'distribution', 'binomial', 'binomial distribution']", Tail Probabilities,seg_357,find the md of binomial distribution using the power method in section 6.1 (p. 189).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2424,  1996,  9108,  1997,  8026, 20936,  2389,  4353,  2478,
         1996,  2373,  4118,  1999,  2930,  1020,  1012,  1015,  1006,  1052,
         1012, 20500,  1007,  1012,   102])"
1793,1,"['mean', 'limit', 'distribution', 'binomial', 'binomial distribution']", Tail Probabilities,seg_357,"solution 6.13 we know that the mean of binomial distribution is np. the lower limit ll for the bino(n, p) is x = 0, so that xf(x) = 0. hence using theorem 6.1, the md is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  5576,  1020,  1012,  2410,  2057,  2113,  2008,  1996,  2812,
         1997,  8026, 20936,  2389,  4353,  2003, 27937,  1012,  1996,  2896,
         5787,  2222,  2005,  1996,  8026,  2080,  1006,  1050,  1010,  1052,
         1007,  2003,  1060,  1027,  1014,  1010,  2061,  2008,  1060,  2546,
         1006,  1060,  1007,  1027,  1014,  1012,  6516,  2478,  9872,  1020,
         1012,  1015,  1010,  1996,  9108,  2003,  2445,  2011,   102])"
1794,1,"['results', 'table']", Tail Probabilities,seg_357,"the results obtained by equation (6.66) and theorem 6.1 are given in the table 6.7 (see also table 6.1). both results totally tally when np is an integer or half-integer (with the correction term). otherwise, the results are only approximate when np is small, but the accuracy increases for large np values.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1996,  3463,  4663,  2011,  8522,  1006,  1020,  1012,  5764,
         1007,  1998,  9872,  1020,  1012,  1015,  2024,  2445,  1999,  1996,
         2795,  1020,  1012,  1021,  1006,  2156,  2036,  2795,  1020,  1012,
         1015,  1007,  1012,  2119,  3463,  6135, 19552,  2043, 27937,  2003,
         2019, 16109,  2030,  2431,  1011, 16109,  1006,  2007,  1996, 18140,
         2744,  1007,  1012,  4728,  1010,  1996,  3463,  2024,  2069, 15796,
         2043, 27937,  2003,  2235,  1010,  2021,  1996, 10640,  7457,  2005,
         2312, 27937,  5300,  1012,   102])"
1795,1,['limit'], Tail Probabilities,seg_357,"if n is large and p is small, the first few f(x) terms in equation (6.66) could be nearly zeros. a solution is to start the iterations at x =   − 1 and recur backward or start the iterations at a higher integer from lower limit ll and recur forward.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2065,  1050,  2003,  2312,  1998,  1052,  2003,  2235,  1010,
         1996,  2034,  2261,  1042,  1006,  1060,  1007,  3408,  1999,  8522,
         1006,  1020,  1012,  5764,  1007,  2071,  2022,  3053,  5717,  2015,
         1012,  1037,  5576,  2003,  2000,  2707,  1996, 27758,  2015,  2012,
         1060,  1027,  1597,  1015,  1998, 28667,  3126,  8848,  2030,  2707,
         1996, 27758,  2015,  2012,  1037,  3020, 16109,  2013,  2896,  5787,
         2222,  1998, 28667,  3126,  2830,  1012,   102])"
1796,1,"['curve', 'symmetric', 'tail areas', 'normal', 'binomial', 'probability', 'approximation', 'normal approximation', 'probabilities', 'probability of success', 'tables', 'central limit theorem', 'parameters', 'success', 'tail', 'variance', 'limit', 'distribution']", Approximations,seg_359,"as there are two parameters for this distribution, the binomial tables are lengthy and cumbersome. when the probability of success p is very close to 0.5, the distribution is nearly symmetric (see figure 6.6, p. 6–61). from figure 6.6, it is evident that the normal approximation is not good for x values away from the modal value (10) when n is small due to the disparity in the variance. if we reduce the variance of the approximating normal, the peak probabilities will increase. when n is large, the central limit theorem can be used to approximate binomial by a normal curve. the accuracy depends both on n and whether the value of p is close to 0.5. not only the probabilities but also the cumulative probabilities can also be approximated using normal tail areas. this approximation is quite good when p is near 0.5 rather than near 0 or 1 (use the normal approximation when np 10 or np(1 − p) 10 or both np and n(1 − p) are 5). symbolically, p[x ≤ k] = z(√",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20167,  2015])","tensor([  101,  2004,  2045,  2024,  2048, 11709,  2005,  2023,  4353,  1010,
         1996,  8026, 20936,  2389,  7251,  2024, 12401,  1998, 13988, 17198,
         8462,  1012,  2043,  1996,  9723,  1997,  3112,  1052,  2003,  2200,
         2485,  2000,  1014,  1012,  1019,  1010,  1996,  4353,  2003,  3053,
        19490,  1006,  2156,  3275,  1020,  1012,  1020,  1010,  1052,  1012,
         1020,  1516,  6079,  1007,  1012,  2013,  3275,  1020,  1012,  1020,
         1010,  2009,  2003, 10358,  2008,  1996,  3671, 20167,  2003,  2025,
         2204,  2005,  1060,  5300,  2185,  2013,  1996, 16913,  2389,  3643,
         1006,  2184,  1007,  2043,  1050,  2003,  2235,  2349,  2000,  1996,
         4487, 27694,  3012,  1999,  1996, 23284,  1012,  2065,  2057,  5547,
         1996, 23284,  1997,  1996, 22480, 22835,  3671,  1010,  1996,  4672,
         4013,  3676, 14680,  2097,  3623,  1012,  2043,  1050,  2003,  2312,
         1010,  1996,  2430,  5787,  9872,  2064,  2022,  2109,  2000, 15796,
         8026, 20936,  2389,  2011,  1037,  3671,  7774,  1012,  1996, 10640,
         9041,  2119,  2006,  1050,  1998,  3251,  1996,  3643,  1997,  1052,
         2003,  2485,  2000,  1014,  1012,  1019,  1012,  2025,  2069,  1996,
         4013,  3676, 14680,  2021,  2036,  1996, 23260,  4013,  3676, 14680,
         2064,  2036,  2022, 15796,  2094,  2478,  3671,  5725,  2752,  1012,
         2023, 20167,  2003,  3243,  2204,  2043,  1052,  2003,  2379,  1014,
         1012,  1019,  2738,  2084,  2379,  1014,  2030,  1015,  1006,  2224,
         1996,  3671, 20167,  2043, 27937,  2184,  2030, 27937,  1006,  1015,
         1597,  1052,  1007,  2184,  2030,  2119, 27937,  1998,  1050,  1006,
         1015,  1597,  1052,  1007,  2024,  1019,  1007,  1012, 12613,  3973,
         1010,  1052,  1031,  1060,  1608,  1047,  1033,  1027,  1062,  1006,
         1600,   102])"
1797,1,['standard'], Approximations,seg_359,"p q ), where z() is the standard",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([20167,  2015])","tensor([ 101, 1052, 1053, 1007, 1010, 2073, 1062, 1006, 1007, 2003, 1996, 3115,
         102])"
1798,1,"['continuity correction', 'precision', 'approximation', 'distribution', 'discrete distribution', 'discrete']", Approximations,seg_359,"normal distribution. as this is an approximation of a discrete distribution by a continuous one, a continuity correction could improve the precision for small n. this gives us",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([20167,  2015])","tensor([  101,  3671,  4353,  1012,  2004,  2023,  2003,  2019, 20167,  1997,
         1037, 16246,  4353,  2011,  1037,  7142,  2028,  1010,  1037, 13717,
        18140,  2071,  5335,  1996, 11718,  2005,  2235,  1050,  1012,  2023,
         3957,  2149,   102])"
1799,1,['normal'], Approximations,seg_359,"(6.67) see reference 133 for normal approximations, references 123, 133–135 for further discussions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([20167,  2015])","tensor([  101,  1006,  1020,  1012,  6163,  1007,  2156,  4431, 14506,  2005,
         3671, 20167,  2015,  1010,  7604, 13138,  1010, 14506,  1516, 11502,
         2005,  2582, 10287,  1012,   102])"
1800,1,"['poisson', 'distribution', 'poisson distribution', 'binomial', 'binomial distribution']", Limiting Form of Binomial Distribution,seg_361,"the binomial distribution tends to the poisson law (p. 6–67) when n → ∞, p → 0 such that np remains a constant. this result was known to s.d. poisson (1837), which is why the limiting distribution is called poisson distribution. this is easily derived from the pdf as follows (see figures 6.3 and 6.7). write the pdf as",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  8026, 20936,  2389,  4353, 12102,  2000,  1996, 13433,
        24077,  2375,  1006,  1052,  1012,  1020,  1516,  6163,  1007,  2043,
         1050,  1585,  1601,  1010,  1052,  1585,  1014,  2107,  2008, 27937,
         3464,  1037,  5377,  1012,  2023,  2765,  2001,  2124,  2000,  1055,
         1012,  1040,  1012, 13433, 24077,  1006,  9713,  1007,  1010,  2029,
         2003,  2339,  1996, 14879,  4353,  2003,  2170, 13433, 24077,  4353,
         1012,  2023,  2003,  4089,  5173,  2013,  1996, 11135,  2004,  4076,
         1006,  2156,  4481,  1020,  1012,  1017,  1998,  1020,  1012,  1021,
         1007,  1012,  4339,  1996, 11135,  2004,   102])"
1801,0,[], Limiting Form of Binomial Distribution,seg_361,"multiply the numerator and denominator by nk, combine it in the numerator with pk and write qn−k as (1 − p)n ∗ (1 − p)−k to obtain:",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  4800, 22086,  1996, 16371,  5017,  8844,  1998,  7939, 20936,
        27413,  2011, 25930,  1010, 11506,  2009,  1999,  1996, 16371,  5017,
         8844,  2007,  1052,  2243,  1998,  4339,  1053,  2078, 22543,  2243,
         2004,  1006,  1015,  1597,  1052,  1007,  1050,  1598,  1006,  1015,
         1597,  1052,  1007,  1597,  2243,  2000,  6855,  1024,   102])"
1802,0,['n'], Limiting Form of Binomial Distribution,seg_361,"according to our assumption, np is a constant (say  ) so that p =  ∕n. substitute in the aforementioned and let n → ∞",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2429,  2000,  2256, 11213,  1010, 27937,  2003,  1037,  5377,
         1006,  2360,  1007,  2061,  2008,  1052,  1027,   100,  1012,  7681,
         1999,  1996, 17289,  1998,  2292,  1050,  1585,  1601,   102])"
1803,0,[], Limiting Form of Binomial Distribution,seg_361,"if k is finite, the multipliers all tend to 1 and (1 −  ∕n)−k also tends to 1. the last term",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2065,  1047,  2003, 10713,  1010,  1996,  4800, 24759, 10136,
         2035,  7166,  2000,  1015,  1998,  1006,  1015,  1597,   100,  1007,
         1597,  2243,  2036, 12102,  2000,  1015,  1012,  1996,  2197,  2744,
          102])"
1804,1,['limit'], Limiting Form of Binomial Distribution,seg_361,"lt tends to e−  using the result that (1 − x∕n)n = e−x. hence in the limit, the rhs",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  8318, 12102,  2000,  1041, 22543,  2478,  1996,  2765,  2008,
         1006,  1015,  1597,   100,  1007,  1050,  1027,  1041, 22543,  2595,
         1012,  6516,  1999,  1996,  5787,  1010,  1996,  1054,  7898,   102])"
1805,1,"['poisson', 'poisson distribution', 'distribution']", Limiting Form of Binomial Distribution,seg_361,n → ∞ tends to the poisson distribution e−  k∕k!. we could write this in more meaningful form as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1050,  1585,  1601, 12102,  2000,  1996, 13433, 24077,  4353,
         1041, 22543,   100,   999,  1012,  2057,  2071,  4339,  2023,  1999,
         2062, 15902,  2433,  2004,   102])"
1806,1,"['rate', 'linear', 'convergence', 'probabilities', 'poisson', 'distribution', 'asymptotic', 'binomial', 'binomial distribution']", Limiting Form of Binomial Distribution,seg_361,"where o(np2∕2) is the asymptotic notation [8, 22]. an interpretation of this result is that the binomial distribution tends to the poisson law when p → 0 faster than n → ∞. in other words, the convergence rate is quadratic in p and linear in n. this allows us to approximate the binomial probabilities by the poisson probabilities even for very small n values (say n   10), provided that p is comparatively small.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2073,  1051,  1006,   100,  1007,  2003,  1996,  2004, 24335,
        13876, 20214, 14869,  1031,  1022,  1010,  2570,  1033,  1012,  2019,
         7613,  1997,  2023,  2765,  2003,  2008,  1996,  8026, 20936,  2389,
         4353, 12102,  2000,  1996, 13433, 24077,  2375,  2043,  1052,  1585,
         1014,  5514,  2084,  1050,  1585,  1601,  1012,  1999,  2060,  2616,
         1010,  1996, 19143,  3446,  2003, 17718, 23671,  1999,  1052,  1998,
         7399,  1999,  1050,  1012,  2023,  4473,  2149,  2000, 15796,  1996,
         8026, 20936,  2389,  4013,  3676, 14680,  2011,  1996, 13433, 24077,
         4013,  3676, 14680,  2130,  2005,  2200,  2235,  1050,  5300,  1006,
         2360,  1050,  2184,  1007,  1010,  3024,  2008,  1052,  2003, 20172,
         2235,  1012,   102])"
1807,0,[], Limiting Form of Binomial Distribution,seg_361,"the above-mentioned result can also be proved using the pgf. we know that px(t; n, p) = (q + pt)n. write q = 1 − p and take logarithm of both sides to get log(px(t; n, p)) = n log(1 − p(1 − t)). write n = −(−n) on the rhs and expand as an infinite series using − log(1 − x) = x + x2∕2 + x3∕3 + · · · to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  2682,  1011,  3855,  2765,  2064,  2036,  2022,  4928,
         2478,  1996, 18720,  2546,  1012,  2057,  2113,  2008,  1052,  2595,
         1006,  1056,  1025,  1050,  1010,  1052,  1007,  1027,  1006,  1053,
         1009, 13866,  1007,  1050,  1012,  4339,  1053,  1027,  1015,  1597,
         1052,  1998,  2202,  8833,  8486,  2705,  2213,  1997,  2119,  3903,
         2000,  2131,  8833,  1006,  1052,  2595,  1006,  1056,  1025,  1050,
         1010,  1052,  1007,  1007,  1027,  1050,  8833,  1006,  1015,  1597,
         1052,  1006,  1015,  1597,  1056,  1007,  1007,  1012,  4339,  1050,
         1027,  1597,  1006,  1597,  2078,  1007,  2006,  1996,  1054,  7898,
         1998,  7818,  2004,  2019, 10709,  2186,  2478,  1597,  8833,  1006,
         1015,  1597,  1060,  1007,  1027,  1060,  1009,   100,  1009,   100,
         1009,  1087,  1087,  1087,  2000,  2131,   102])"
1808,1,"['poisson', 'poisson distribution', 'distribution']", Limiting Form of Binomial Distribution,seg_361,"write np =   and take negative sign inside the bracket. then, the rhs becomes log(px(t; n, p)) =  (t − 1) − np2(t − 1)2∕2 + · · ·. when exponentiated, the first term becomes the pgf of a poisson distribution (p. 6–69). the rest of the terms contain higher order powers of the form npr∕r for r ≥ 2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  4339, 27937,  1027,  1998,  2202,  4997,  3696,  2503,  1996,
        21605,  1012,  2059,  1010,  1996,  1054,  7898,  4150,  8833,  1006,
         1052,  2595,  1006,  1056,  1025,  1050,  1010,  1052,  1007,  1007,
         1027,  1006,  1056,  1597,  1015,  1007,  1597, 27937,  2475,  1006,
         1056,  1597,  1015,  1007,   100,  1009,  1087,  1087,  1087,  1012,
         2043, 16258, 21576, 15070,  1010,  1996,  2034,  2744,  4150,  1996,
        18720,  2546,  1997,  1037, 13433, 24077,  4353,  1006,  1052,  1012,
         1020,  1516,  6353,  1007,  1012,  1996,  2717,  1997,  1996,  3408,
         5383,  3020,  2344,  4204,  1997,  1996,  2433,   100,  2005,  1054,
         1609,  1016,  1012,   102])"
1809,1,"['success', 'parameter', 'probability', 'tails', 'approximation', 'random variable', 'probabilities', 'probability of success', 'poisson', 'random', 'distribution', 'binomial', 'variable', 'binomial distribution']", Limiting Form of Binomial Distribution,seg_361,"we have assumed that p → 0 in the above-mentioned proof. this limiting behavior of p is used only to fix the poisson parameter. this has the implication that we could approximate both the left-tail and right-tail areas, as well as individual probabilities using the above-mentioned approximation. if p is not quite small, we use the random variable y = n − x, which was shown to have a binomial distribution (see example in p. 6–27) with probability of success q = 1 − p, so that we could still approximate probabilities in both tails when p is very close to 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2057,  2031,  5071,  2008,  1052,  1585,  1014,  1999,  1996,
         2682,  1011,  3855,  6947,  1012,  2023, 14879,  5248,  1997,  1052,
         2003,  2109,  2069,  2000,  8081,  1996, 13433, 24077, 16381,  1012,
         2023,  2038,  1996, 25323,  2008,  2057,  2071, 15796,  2119,  1996,
         2187,  1011,  5725,  1998,  2157,  1011,  5725,  2752,  1010,  2004,
         2092,  2004,  3265,  4013,  3676, 14680,  2478,  1996,  2682,  1011,
         3855, 20167,  1012,  2065,  1052,  2003,  2025,  3243,  2235,  1010,
         2057,  2224,  1996,  6721,  8023,  1061,  1027,  1050,  1597,  1060,
         1010,  2029,  2001,  3491,  2000,  2031,  1037,  8026, 20936,  2389,
         4353,  1006,  2156,  2742,  1999,  1052,  1012,  1020,  1516,  2676,
         1007,  2007,  9723,  1997,  3112,  1053,  1027,  1015,  1597,  1052,
         1010,  2061,  2008,  2057,  2071,  2145, 15796,  4013,  3676, 14680,
         1999,  2119, 17448,  2043,  1052,  2003,  2200,  2485,  2000,  1015,
         1012,   102])"
1810,1,"['symmetry', 'precision', 'mean', 'normal distribution', 'poisson', 'normal', 'approximation', 'normal approximation', 'probabilities', 'central limit theorem', 'variance', 'distributions', 'sample', 'limit', 'distribution']", Limiting Form of Binomial Distribution,seg_361,"when p is near 0.5, a normal approximation is better than the poisson approximation due to the symmetry. however, a correction to the poisson probabilities could improve the precision. for large values of n, the distributions of the count x and the sample proportion are approximately normal. this result follows from the central limit theorem. the mean and variance for the approximately normal distribution of x are np and np(1 − p), identical to the mean and variance of the binomial(n, p) distribution. similarly, the mean and variance for the approximately normal distribution of the sample proportion are p and (p(1 − p)∕n).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2043,  1052,  2003,  2379,  1014,  1012,  1019,  1010,  1037,
         3671, 20167,  2003,  2488,  2084,  1996, 13433, 24077, 20167,  2349,
         2000,  1996, 14991,  1012,  2174,  1010,  1037, 18140,  2000,  1996,
        13433, 24077,  4013,  3676, 14680,  2071,  5335,  1996, 11718,  1012,
         2005,  2312,  5300,  1997,  1050,  1010,  1996, 20611,  1997,  1996,
         4175,  1060,  1998,  1996,  7099, 10817,  2024,  3155,  3671,  1012,
         2023,  2765,  4076,  2013,  1996,  2430,  5787,  9872,  1012,  1996,
         2812,  1998, 23284,  2005,  1996,  3155,  3671,  4353,  1997,  1060,
         2024, 27937,  1998, 27937,  1006,  1015,  1597,  1052,  1007,  1010,
         7235,  2000,  1996,  2812,  1998, 23284,  1997,  1996,  8026, 20936,
         2389,  1006,  1050,  1010,  1052,  1007,  4353,  1012,  6660,  1010,
         1996,  2812,  1998, 23284,  2005,  1996,  3155,  3671,  4353,  1997,
         1996,  7099, 10817,  2024,  1052,  1998,  1006,  1052,  1006,  1015,
         1597,  1052,  1007,   100,  1007,  1012,   102])"
1811,0,[], Limiting Form of Binomial Distribution,seg_361,example 6.14 political parties,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([ 101, 2742, 1020, 1012, 2403, 2576, 4243,  102])"
1812,1,['probability'], Limiting Form of Binomial Distribution,seg_361,"consider a group of n individuals who support one of two political parties say p1 and p2. assuming that none of the votes are invalid, what is the probability that a candidate of party p1 wins over the other candidate?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  5136,  1037,  2177,  1997,  1050,  3633,  2040,  2490,  2028,
         1997,  2048,  2576,  4243,  2360,  1052,  2487,  1998,  1052,  2475,
         1012, 10262,  2008,  3904,  1997,  1996,  4494,  2024, 19528,  1010,
         2054,  2003,  1996,  9723,  2008,  1037,  4018,  1997,  2283,  1052,
         2487,  5222,  2058,  1996,  2060,  4018,  1029,   102])"
1813,0,[], Limiting Form of Binomial Distribution,seg_361,"solution 6.14 if the voting decision of an individual is not influenced by the decision of another (for example, husband’s and wife’s decision or decision",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([ 101, 5576, 1020, 1012, 2403, 2065, 1996, 6830, 3247, 1997, 2019, 3265,
        2003, 2025, 5105, 2011, 1996, 3247, 1997, 2178, 1006, 2005, 2742, 1010,
        3129, 1521, 1055, 1998, 2564, 1521, 1055, 3247, 2030, 3247,  102])"
1814,1,"['random variable', 'random', 'binomial', 'variable']", Limiting Form of Binomial Distribution,seg_361,"among friends), the proportion of individuals who support one of two political parties can be regarded as a binomial distributed random variable with probability p. to find winning chances, we need to consider whether n is odd or even. if n is odd, p1 will win if the number of votes received is ≥n+1 . thus, the required 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2426,  2814,  1007,  1010,  1996, 10817,  1997,  3633,  2040,
         2490,  2028,  1997,  2048,  2576,  4243,  2064,  2022,  5240,  2004,
         1037,  8026, 20936,  2389,  5500,  6721,  8023,  2007,  9723,  1052,
         1012,  2000,  2424,  3045,  9592,  1010,  2057,  2342,  2000,  5136,
         3251,  1050,  2003,  5976,  2030,  2130,  1012,  2065,  1050,  2003,
         5976,  1010,  1052,  2487,  2097,  2663,  2065,  1996,  2193,  1997,
         4494,  2363,  2003,  1609,  2078,  1009,  1015,  1012,  2947,  1010,
         1996,  3223,  1016,   102])"
1815,1,"['probability', 'summation']", Limiting Form of Binomial Distribution,seg_361,"x) pxqn−x, where p = probability that the vote is in favor 2 of the candidate of p1. if n is even, the summation needs to be carried out from",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1060,  1007,  1052,  2595,  4160,  2078, 22543,  2595,  1010,
         2073,  1052,  1027,  9723,  2008,  1996,  3789,  2003,  1999,  5684,
         1016,  1997,  1996,  4018,  1997,  1052,  2487,  1012,  2065,  1050,
         2003,  2130,  1010,  1996,  7680, 28649,  3791,  2000,  2022,  3344,
         2041,  2013,   102])"
1816,0,[], Limiting Form of Binomial Distribution,seg_361,example 6.15 malfunctioning electronic device,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2742,  1020,  1012,  2321, 15451, 11263, 27989,  2075,  4816,
         5080,   102])"
1817,1,"['probability', 'observations']", Limiting Form of Binomial Distribution,seg_361,consider an electronic device containing n transistors from the same manufacturer. the probability of each transistor malfunctioning is known from previous observations over a long period of time to be p. find the probability that (i) at most three transistors malfunction and (ii) none of the transistors malfunction.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  5136,  2019,  4816,  5080,  4820,  1050,  9099, 20483,  2869,
         2013,  1996,  2168,  7751,  1012,  1996,  9723,  1997,  2169,  9099,
        20483,  2099, 15451, 11263, 27989,  2075,  2003,  2124,  2013,  3025,
         9420,  2058,  1037,  2146,  2558,  1997,  2051,  2000,  2022,  1052,
         1012,  2424,  1996,  9723,  2008,  1006,  1045,  1007,  2012,  2087,
         2093,  9099, 20483,  2869, 15451, 11263, 27989,  1998,  1006,  2462,
         1007,  3904,  1997,  1996,  9099, 20483,  2869, 15451, 11263, 27989,
         1012,   102])"
1818,1,"['binomial', 'independent']", Limiting Form of Binomial Distribution,seg_361,"solution 6.15 we assume that the transistors malfunction independent of each other. then, the number of transistors that malfunction has a binomial distribu-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  5576,  1020,  1012,  2321,  2057,  7868,  2008,  1996,  9099,
        20483,  2869, 15451, 11263, 27989,  2981,  1997,  2169,  2060,  1012,
         2059,  1010,  1996,  2193,  1997,  9099, 20483,  2869,  2008, 15451,
        11263, 27989,  2038,  1037,  8026, 20936,  2389,  4487,  3367,  3089,
         8569,  1011,   102])"
1819,1,['probability'], Limiting Form of Binomial Distribution,seg_361,"tion. hence, the required probability is p[x ≤ 3] = ∑x",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101, 14841,  2239,  1012,  6516,  1010,  1996,  3223,  9723,  2003,
         1052,  1031,  1060,  1608,  1017,  1033,  1027,   100,   102])"
1820,1,['probability'], Limiting Form of Binomial Distribution,seg_361,x) pxqn−x. probability,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  1060,  1007,  1052,  2595,  4160,  2078, 22543,  2595,  1012,
         9723,   102])"
1821,0,[], Limiting Form of Binomial Distribution,seg_361,that none of them malfunction is ( 0,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2008,  3904,  1997,  2068, 15451, 11263, 27989,  2003,  1006,
         1014,   102])"
1822,1,"['bernoulli', 'trials', 'dependent', 'bernoulli trials']", Limiting Form of Binomial Distribution,seg_361,"see reference 136 for dependent bernoulli trials and references 135, 137, and 138 for further examples.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([14879,  2433,  1997,  8026, 20936,  2389,  4353])","tensor([  101,  2156,  4431, 15407,  2005,  7790, 16595,  7140,  6894,  7012,
         1998,  7604, 11502,  1010, 14989,  1010,  1998, 15028,  2005,  2582,
         4973,  1012,   102])"
1823,1,"['discrete', 'probability', 'uniform distribution', 'outcomes', 'random variable', 'random', 'discrete uniform distribution', 'distribution', 'variable']", DISCRETE UNIFORM DISTRIBUTION,seg_363,a random variable that takes equal probability for each of the outcomes has a discrete uniform distribution (duni[n]). the pdf is given by,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6375,  4353])","tensor([  101,  1037,  6721,  8023,  2008,  3138,  5020,  9723,  2005,  2169,
         1997,  1996, 13105,  2038,  1037, 16246,  6375,  4353,  1006, 24654,
         2072,  1031,  1050,  1033,  1007,  1012,  1996, 11135,  2003,  2445,
         2011,   102])"
1824,1,"['range', 'distribution', 'bernoulli', 'bernoulli distribution', 'discrete']", DISCRETE UNIFORM DISTRIBUTION,seg_363,"for n = 2, we get the bernoulli distribution with p = 1∕2. as each of the probabilities is equal, f (x)∕f (x + k) = 1 for all k in the range. it is also called discrete",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([16246,  6375,  4353])","tensor([  101,  2005,  1050,  1027,  1016,  1010,  2057,  2131,  1996, 16595,
         7140,  6894,  4353,  2007,  1052,  1027,   100,  1012,  2004,  2169,
         1997,  1996,  4013,  3676, 14680,  2003,  5020,  1010,  1042,  1006,
         1060,  1007,   100,  1006,  1060,  1009,  1047,  1007,  1027,  1015,
         2005,  2035,  1047,  1999,  1996,  2846,  1012,  2009,  2003,  2036,
         2170, 16246,   102])"
1825,1,"['uniform distribution', 'discrete uniform distribution', 'discrete', 'distribution']", DISCRETE UNIFORM DISTRIBUTION,seg_363,"rectangular distribution. a displaced discrete uniform distribution duni[a, b] (where b   a) can be defined as f (x) = pr[x = a + k] = 1∕n, for k = 0, 1, 2, … ,b−a (or f (x) = pr[x = k] = 1∕n for k = a, a + 1, a + 2, … , b − 1). choosing a = 0, b = n gives another form of the distribution as f (x) = 1∕(n + 1), for x = 0, 1, 2, … , n. in general, we could shift the origin by c (positive or negative) to get the generalized duni(n) as f (x) = pr[x = k] = 1∕n, for k = c, c + 1, …, c + n − 1.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6375,  4353])","tensor([  101, 10806,  4353,  1012,  1037, 12936, 16246,  6375,  4353, 24654,
         2072,  1031,  1037,  1010,  1038,  1033,  1006,  2073,  1038,  1037,
         1007,  2064,  2022,  4225,  2004,  1042,  1006,  1060,  1007,  1027,
        10975,  1031,  1060,  1027,  1037,  1009,  1047,  1033,  1027,   100,
         1010,  2005,  1047,  1027,  1014,  1010,  1015,  1010,  1016,  1010,
         1529,  1010,  1038, 22543,  2050,  1006,  2030,  1042,  1006,  1060,
         1007,  1027, 10975,  1031,  1060,  1027,  1047,  1033,  1027,   100,
         2005,  1047,  1027,  1037,  1010,  1037,  1009,  1015,  1010,  1037,
         1009,  1016,  1010,  1529,  1010,  1038,  1597,  1015,  1007,  1012,
        10549,  1037,  1027,  1014,  1010,  1038,  1027,  1050,  3957,  2178,
         2433,  1997,  1996,  4353,  2004,  1042,  1006,  1060,  1007,  1027,
          100,  1006,  1050,  1009,  1015,  1007,  1010,  2005,  1060,  1027,
         1014,  1010,  1015,  1010,  1016,  1010,  1529,  1010,  1050,  1012,
         1999,  2236,  1010,  2057,  2071,  5670,  1996,  4761,  2011,  1039,
         1006,  3893,  2030,  4997,  1007,  2000,  2131,  1996, 18960, 24654,
         2072,  1006,  1050,  1007,  2004,  1042,  1006,  1060,  1007,  1027,
        10975,  1031,  1060,  1027,  1047,  1033,  1027,   100,  1010,  2005,
         1047,  1027,  1039,  1010,  1039,  1009,  1015,  1010,  1529,  1010,
         1039,  1009,  1050,  1597,  1015,  1012,   102])"
1826,1,['mean'], DISCRETE UNIFORM DISTRIBUTION,seg_363,find the cdf of duni[n] and obtain the mean using e(x) = ∑kp(x ≥ k).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6375,  4353])","tensor([  101,  2424,  1996,  3729,  2546,  1997, 24654,  2072,  1031,  1050,
         1033,  1998,  6855,  1996,  2812,  2478,  1041,  1006,  1060,  1007,
         1027,   100,  1006,  1060,  1609,  1047,  1007,  1012,   102])"
1827,1,"['method', 'power method', 'distribution']", DISCRETE UNIFORM DISTRIBUTION,seg_363,find the md of duni[n] distribution using the power method in section 6.1 (p. 6–7) when n is odd.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([16246,  6375,  4353])","tensor([  101,  2424,  1996,  9108,  1997, 24654,  2072,  1031,  1050,  1033,
         4353,  2478,  1996,  2373,  4118,  1999,  2930,  1020,  1012,  1015,
         1006,  1052,  1012,  1020,  1516,  1021,  1007,  2043,  1050,  2003,
         5976,  1012,   102])"
1828,1,"['mean', 'distribution']", DISCRETE UNIFORM DISTRIBUTION,seg_363,"solution 6.17 we know that the mean of duni[n] distribution is c = (n + 1)∕2. using theorem 6.1, the md is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([16246,  6375,  4353])","tensor([  101,  5576,  1020,  1012,  2459,  2057,  2113,  2008,  1996,  2812,
         1997, 24654,  2072,  1031,  1050,  1033,  4353,  2003,  1039,  1027,
         1006,  1050,  1009,  1015,  1007,   100,  1012,  2478,  9872,  1020,
         1012,  1015,  1010,  1996,  9108,  2003,  2445,  2011,   102])"
1829,1,['summation'], DISCRETE UNIFORM DISTRIBUTION,seg_363,take (1∕n) outside the summation and evaluate∑x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([16246,  6375,  4353])","tensor([  101,  2202,  1006,   100,  1007,  2648,  1996,  7680, 28649,  1998,
          100,   102])"
1830,1,"['parameter', 'distribution']", Properties of Discrete Uniform Distribution,seg_365,this distribution has a single parameter. the mgf is easy to find as,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  2023,  4353,  2038,  1037,  2309, 16381,  1012,  1996, 11460,
         2546,  2003,  3733,  2000,  2424,  2004,   102])"
1831,0,[], Properties of Discrete Uniform Distribution,seg_365,for t ≠ 0 and = 1 for t = 0. the pgf is obtained by replacing et in the above by t as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  2005,  1056,  1027,  1014,  1998,  1027,  1015,  2005,  1056,
         1027,  1014,  1012,  1996, 18720,  2546,  2003,  4663,  2011,  6419,
         3802,  1999,  1996,  2682,  2011,  1056,  2004,   102])"
1832,1,"['function', 'characteristic function']", Properties of Discrete Uniform Distribution,seg_365,t 1−tn px(t) = . the characteristic function is written as  x(t) = (1 − eitn)∕[n(e−it −,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  1056,  1015, 22543,  2102,  2078,  1052,  2595,  1006,  1056,
         1007,  1027,  1012,  1996,  8281,  3853,  2003,  2517,  2004,  1060,
         1006,  1056,  1007,  1027,  1006,  1015,  1597,  1041,  4183,  2078,
         1007,   100,  1031,  1050,  1006,  1041, 22543,  4183,  1597,   102])"
1833,1,['mean'], Properties of Discrete Uniform Distribution,seg_365,"n 1−t 1)], where we have divided both numerator and denominator by et. the mean and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  1050,  1015, 22543,  2102,  1015,  1007,  1033,  1010,  2073,
         2057,  2031,  4055,  2119, 16371,  5017,  8844,  1998,  7939, 20936,
        27413,  2011,  3802,  1012,  1996,  2812,  1998,   102])"
1834,1,"['kurtosis', 'coefficient']", Properties of Discrete Uniform Distribution,seg_365,variance are easily seen to be e(x) = (n + 1)∕2 and v(x) = (n2 − 1)∕12. the coefficient of kurtosis is  2 = 3,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101, 23284,  2024,  4089,  2464,  2000,  2022,  1041,  1006,  1060,
         1007,  1027,  1006,  1050,  1009,  1015,  1007,   100,  1998,  1058,
         1006,  1060,  1007,  1027,  1006,  1050,  2475,  1597,  1015,  1007,
          100,  1012,  1996, 19064,  1997,  9679, 12650,  2003,  1016,  1027,
         1017,   102])"
1835,1,"['table', 'probability', 'probabilities', 'distributions', 'discrete']", Properties of Discrete Uniform Distribution,seg_365,4 −1 ). this shows that it is always platykurtic. truncated discrete uniform distributions are of the same type with the probabilities simply enlarged (because dividing by the truncated sum of probabilities simply enlarges each individual probability. see table 6.5).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  1018,  1597,  2487,  1007,  1012,  2023,  3065,  2008,  2009,
         2003,  2467, 20228,  4017, 15922, 19585,  2594,  1012, 25449, 16246,
         6375, 20611,  2024,  1997,  1996,  2168,  2828,  2007,  1996,  4013,
         3676, 14680,  3432, 11792,  1006,  2138, 16023,  2011,  1996, 25449,
         7680,  1997,  4013,  3676, 14680,  3432,  4372,  8017,  8449,  2169,
         3265,  9723,  1012,  2156,  2795,  1020,  1012,  1019,  1007,  1012,
          102])"
1836,1,"['function', 'variance']", Properties of Discrete Uniform Distribution,seg_365,example 6.18 variance as a function of   for the duni(n),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  2742,  1020,  1012,  2324, 23284,  2004,  1037,  3853,  1997,
         2005,  1996, 24654,  2072,  1006,  1050,  1007,   102])"
1837,1,"['function', 'variance']", Properties of Discrete Uniform Distribution,seg_365,express the variance of duni(n) as a function of   alone,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  4671,  1996, 23284,  1997, 24654,  2072,  1006,  1050,  1007,
         2004,  1037,  3853,  1997,  2894,   102])"
1838,1,"['mean', 'variance', 'estimated', 'estimate', 'distribution', 'data']", Properties of Discrete Uniform Distribution,seg_365,"solution 6.18 we know that = (n + 1)∕2 and 2 = (n2 − 1)∕12. from = (n + 1)∕2, we get n = 2 ∗ − 1. write 2 = (n2 − 1)∕12 = (n − 1)(n + 1)∕12. substitute for (n + 1)∕2 = to get 2 = [(2 ∗ − 1) − 1] ∗ ∕6 = ( − 1) ∗ ∕3. if the variance of a duni(n) distribution is estimated from data, we can obtain an estimate of the mean as follows. write the aforementioned as a quadratic equation x2 − x − 3k = 0, where x = and k = 2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  5576,  1020,  1012,  2324,  2057,  2113,  2008,  1027,  1006,
         1050,  1009,  1015,  1007,   100,  1998,  1016,  1027,  1006,  1050,
         2475,  1597,  1015,  1007,   100,  1012,  2013,  1027,  1006,  1050,
         1009,  1015,  1007,   100,  1010,  2057,  2131,  1050,  1027,  1016,
         1598,  1597,  1015,  1012,  4339,  1016,  1027,  1006,  1050,  2475,
         1597,  1015,  1007,   100,  1027,  1006,  1050,  1597,  1015,  1007,
         1006,  1050,  1009,  1015,  1007,   100,  1012,  7681,  2005,  1006,
         1050,  1009,  1015,  1007,   100,  1027,  2000,  2131,  1016,  1027,
         1031,  1006,  1016,  1598,  1597,  1015,  1007,  1597,  1015,  1033,
         1598,   100,  1027,  1006,  1597,  1015,  1007,  1598,   100,  1012,
         2065,  1996, 23284,  1997,  1037, 24654,  2072,  1006,  1050,  1007,
         4353,  2003,  4358,  2013,  2951,  1010,  2057,  2064,  6855,  2019,
        10197,  1997,  1996,  2812,  2004,  4076,  1012,  4339,  1996, 17289,
         2004,  1037, 17718, 23671,  8522,  1060,  2475,  1597,  1060,  1597,
         1017,  2243,  1027,  1014,  1010,  2073,  1060,  1027,  1998,  1047,
         1027,  1016,  1012,   102])"
1839,1,['estimate'], Properties of Discrete Uniform Distribution,seg_365,"  = (1 +√ 1 + 12 ∗  2)∕2. alternatively, we could first estimate n from vari-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  1027,  1006,  1015,  1009,  1600,  1015,  1009,  2260,  1598,
         1016,  1007,   100,  1012, 14084,  1010,  2057,  2071,  2034, 10197,
         1050,  2013, 13075,  2072,  1011,   102])"
1840,1,"['mean', 'table']", Properties of Discrete Uniform Distribution,seg_365,ance as n = √ 1 + 12 ∗  2 and obtain the mean as (n + 1)∕2 (see table 6.8).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([ 101, 2019, 3401, 2004, 1050, 1027, 1600, 1015, 1009, 2260, 1598, 1016,
        1998, 6855, 1996, 2812, 2004, 1006, 1050, 1009, 1015, 1007,  100, 1006,
        2156, 2795, 1020, 1012, 1022, 1007, 1012,  102])"
1841,1,"['factorial moments', 'moments', 'factorial']", Properties of Discrete Uniform Distribution,seg_365,example 6.19 factorial moments of duni(n),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  2742,  1020,  1012,  2539,  5387,  4818,  5312,  1997, 24654,
         2072,  1006,  1050,  1007,   102])"
1842,1,"['mean', 'factorial moments', 'moments', 'factorial']", Properties of Discrete Uniform Distribution,seg_365,"find the factorial moments of duni[n], and obtain the mean.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  2424,  1996,  5387,  4818,  5312,  1997, 24654,  2072,  1031,
         1050,  1033,  1010,  1998,  6855,  1996,  2812,  1012,   102])"
1843,0,[], Properties of Discrete Uniform Distribution,seg_365,solution 6.19 by definition,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([ 101, 5576, 1020, 1012, 2539, 2011, 6210,  102])"
1844,1,"['vary', 'summation']", Properties of Discrete Uniform Distribution,seg_365,"as (1∕n) is a constant while summing with respect to x, take it outside the summation and adjust the indexvar to vary from k to n. this gives  (k) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  2004,  1006,   100,  1007,  2003,  1037,  5377,  2096,  7680,
         6562,  2007,  4847,  2000,  1060,  1010,  2202,  2009,  2648,  1996,
         7680, 28649,  1998, 14171,  1996,  5950, 10755,  2000,  8137,  2013,
         1047,  2000,  1050,  1012,  2023,  3957,  1006,  1047,  1007,  1027,
          102])"
1845,1,['distribution'], Properties of Discrete Uniform Distribution,seg_365,example 6.20 distribution of u = x+y.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([ 101, 2742, 1020, 1012, 2322, 4353, 1997, 1057, 1027, 1060, 1009, 1061,
        1012,  102])"
1846,1,"['range', 'distribution']", Properties of Discrete Uniform Distribution,seg_365,"if x and y are iid duni(n) with the same range, find the distribution of u = x + y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2462,  2094, 24654,  2072,
         1006,  1050,  1007,  2007,  1996,  2168,  2846,  1010,  2424,  1996,
         4353,  1997,  1057,  1027,  1060,  1009,  1061,  1012,   102])"
1847,1,"['loss', 'independence']", Properties of Discrete Uniform Distribution,seg_365,"solution 6.20 without loss of generality, we assume that x and y take values 1, 2, … ,n. then pr[x + y = k] = pr[x = t ∩ y = k − t] = pr[x = t] ∩ pr[y = k − t] due to independence. as t is arbitrary, this becomes ∑t",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 16246,  6375,  4353])","tensor([  101,  5576,  1020,  1012,  2322,  2302,  3279,  1997,  2236,  3012,
         1010,  2057,  7868,  2008,  1060,  1998,  1061,  2202,  5300,  1015,
         1010,  1016,  1010,  1529,  1010,  1050,  1012,  2059, 10975,  1031,
         1060,  1009,  1061,  1027,  1047,  1033,  1027, 10975,  1031,  1060,
         1027,  1056,  1604,  1061,  1027,  1047,  1597,  1056,  1033,  1027,
        10975,  1031,  1060,  1027,  1056,  1033,  1604, 10975,  1031,  1061,
         1027,  1047,  1597,  1056,  1033,  2349,  2000,  4336,  1012,  2004,
         1056,  2003, 15275,  1010,  2023,  4150,   100,   102])"
1848,1,"['with replacement', 'random sampling', 'probability', 'population', 'sample', 'random', 'sampling', 'distribution', 'replacement', 'probability distribution']", An Application,seg_367,"the duni(n) is used in lotteries and random sampling. let there be m prizes in a lottery. if n tickets are sold, the chance that an arbitrary ticket will win a prize is m∕n. if each ticket is printed with the same number of digits (say the width is 6), and each of the digits (0, 1, ..., 9) is equally likely, the pdf of kth digit is duni(10). similarly, in random sampling with replacement, if the population has n elements, the probability distribution of the kth item in the sample is 1∕n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([2019, 4646])","tensor([  101,  1996, 24654,  2072,  1006,  1050,  1007,  2003,  2109,  1999,
         2843,  3334,  3111,  1998,  6721, 16227,  1012,  2292,  2045,  2022,
         1049, 11580,  1999,  1037, 15213,  1012,  2065,  1050,  9735,  2024,
         2853,  1010,  1996,  3382,  2008,  2019, 15275,  7281,  2097,  2663,
         1037,  3396,  2003,   100,  1012,  2065,  2169,  7281,  2003,  6267,
         2007,  1996,  2168,  2193,  1997, 16648,  1006,  2360,  1996,  9381,
         2003,  1020,  1007,  1010,  1998,  2169,  1997,  1996, 16648,  1006,
         1014,  1010,  1015,  1010,  1012,  1012,  1012,  1010,  1023,  1007,
         2003,  8053,  3497,  1010,  1996, 11135,  1997,  1047,  2705, 15340,
         2003, 24654,  2072,  1006,  2184,  1007,  1012,  6660,  1010,  1999,
         6721, 16227,  2007,  6110,  1010,  2065,  1996,  2313,  2038,  1050,
         3787,  1010,  1996,  9723,  4353,  1997,  1996,  1047,  2705,  8875,
         1999,  1996,  7099,  2003,   100,  1012,   102])"
1849,1,"['outcome', 'experiments', 'independent', 'geometric distribution', 'bernoulli', 'random variable', 'failures', 'bernoulli trials', 'geometric', 'trial', 'probability', 'probability of success', 'trials', 'results', 'success', 'random', 'distribution', 'variable']", GEOMETRIC DISTRIBUTION,seg_369,"consider a sequence of independent bernoulli trials with the same probability of success p. we observe the outcome of each trial, and either continues it if it is not a success or stop it if it is a success. this means that if the first trial results in a success with probability p, we stop further trials. if not, we continue observing failures until the first success is observed. let x denotes the number of trials needed to get the first success. naturally x is a random variable that can theoretically take any value from 0 to ∞. in summary, practical experiments that result in a geometric distribution can be characterized by the following properties:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  5136,  1037,  5537,  1997,  2981, 16595,  7140,  6894,  7012,
         2007,  1996,  2168,  9723,  1997,  3112,  1052,  1012,  2057, 11949,
         1996,  9560,  1997,  2169,  3979,  1010,  1998,  2593,  4247,  2009,
         2065,  2009,  2003,  2025,  1037,  3112,  2030,  2644,  2009,  2065,
         2009,  2003,  1037,  3112,  1012,  2023,  2965,  2008,  2065,  1996,
         2034,  3979,  3463,  1999,  1037,  3112,  2007,  9723,  1052,  1010,
         2057,  2644,  2582,  7012,  1012,  2065,  2025,  1010,  2057,  3613,
        14158, 15428,  2127,  1996,  2034,  3112,  2003,  5159,  1012,  2292,
         1060, 14796,  1996,  2193,  1997,  7012,  2734,  2000,  2131,  1996,
         2034,  3112,  1012,  8100,  1060,  2003,  1037,  6721,  8023,  2008,
         2064, 22634,  2202,  2151,  3643,  2013,  1014,  2000,  1601,  1012,
         1999, 12654,  1010,  6742,  7885,  2008,  2765,  1999,  1037, 14965,
         4353,  2064,  2022,  7356,  2011,  1996,  2206,  5144,  1024,   102])"
1850,1,"['bernoulli', 'trials', 'bernoulli trials', 'experiment']", GEOMETRIC DISTRIBUTION,seg_369,1. the experiment consists of a series of iid bernoulli trials,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  1015,  1012,  1996,  7551,  3774,  1997,  1037,  2186,  1997,
         2462,  2094, 16595,  7140,  6894,  7012,   102])"
1851,1,"['limit', 'trials']", GEOMETRIC DISTRIBUTION,seg_369,2. the trials can be repeated independently without limit (as many times as neces-,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([14965,  4353])","tensor([  101,  1016,  1012,  1996,  7012,  2064,  2022,  5567,  9174,  2302,
         5787,  1006,  2004,  2116,  2335,  2004, 26785,  2229,  1011,   102])"
1852,1,"['trial', 'outcome']", GEOMETRIC DISTRIBUTION,seg_369,"sary) under identical conditions. the outcome of one trial has no effect on the outcome of any other, including next trial",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([14965,  4353])","tensor([  101, 18906,  2100,  1007,  2104,  7235,  3785,  1012,  1996,  9560,
         1997,  2028,  3979,  2038,  2053,  3466,  2006,  1996,  9560,  1997,
         2151,  2060,  1010,  2164,  2279,  3979,   102])"
1853,1,"['probability', 'probability of success', 'success', 'trial']", GEOMETRIC DISTRIBUTION,seg_369,"3. the probability of success, p, remains the same from trial to trial until the exper-",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([ 101, 1017, 1012, 1996, 9723, 1997, 3112, 1010, 1052, 1010, 3464, 1996,
        2168, 2013, 3979, 2000, 3979, 2127, 1996, 4654, 4842, 1011,  102])"
1854,0,[], GEOMETRIC DISTRIBUTION,seg_369,iment is over.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101, 10047,  4765,  2003,  2058,  1012,   102])"
1855,1,"['random variable', 'trials', 'random', 'variable']", GEOMETRIC DISTRIBUTION,seg_369,4. the random variable x denotes the number of trials needed to obtain the first,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1018,  1012,  1996,  6721,  8023,  1060, 14796,  1996,  2193,
         1997,  7012,  2734,  2000,  6855,  1996,  2034,   102])"
1856,1,"['success', 'geometric distribution', 'probability', 'random variable', 'failures', 'probabilities', 'probability of success', 'independence', 'random', 'trials', 'distribution', 'geometric', 'variable']", GEOMETRIC DISTRIBUTION,seg_369,"if the probability of success is reasonably high, we expect the number of trials to get the first success to be a small number. this means that if p = 0.9, the number of trials needed is much less than if p = 0.5 in general. let xk denote the random variable for observing the first success. if a success is obtained after getting x failures, the probability is qxp by the independence of the trials. this is called the geometric distribution (see figure 6.3). it gets its name from the fact that the pdf is a geometric progression with first term p and common difference q with closed form (p∕(1 − q)). in other words, the individual probabilities (divided by the first probability p) form a geometric progression. some authors define the pdf of a geometric",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0.])","tensor([14965,  4353])","tensor([  101,  2065,  1996,  9723,  1997,  3112,  2003, 16286,  2152,  1010,
         2057,  5987,  1996,  2193,  1997,  7012,  2000,  2131,  1996,  2034,
         3112,  2000,  2022,  1037,  2235,  2193,  1012,  2023,  2965,  2008,
         2065,  1052,  1027,  1014,  1012,  1023,  1010,  1996,  2193,  1997,
         7012,  2734,  2003,  2172,  2625,  2084,  2065,  1052,  1027,  1014,
         1012,  1019,  1999,  2236,  1012,  2292,  1060,  2243, 19090,  1996,
         6721,  8023,  2005, 14158,  1996,  2034,  3112,  1012,  2065,  1037,
         3112,  2003,  4663,  2044,  2893,  1060, 15428,  1010,  1996,  9723,
         2003,  1053,  2595,  2361,  2011,  1996,  4336,  1997,  1996,  7012,
         1012,  2023,  2003,  2170,  1996, 14965,  4353,  1006,  2156,  3275,
         1020,  1012,  1017,  1007,  1012,  2009,  4152,  2049,  2171,  2013,
         1996,  2755,  2008,  1996, 11135,  2003,  1037, 14965, 14967,  2007,
         2034,  2744,  1052,  1998,  2691,  4489,  1053,  2007,  2701,  2433,
         1006,   100,  1006,  1015,  1597,  1053,  1007,  1007,  1012,  1999,
         2060,  2616,  1010,  1996,  3265,  4013,  3676, 14680,  1006,  4055,
         2011,  1996,  2034,  9723,  1052,  1007,  2433,  1037, 14965, 14967,
         1012,  2070,  6048,  9375,  1996, 11135,  1997,  1037, 14965,   102])"
1857,1,['cases'], GEOMETRIC DISTRIBUTION,seg_369,"distribution as f (x; p) = qx−1p, where x = 1, 2, …,∞. we could combine the above-mentioned two cases and write the pdf as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  4353,  2004,  1042,  1006,  1060,  1025,  1052,  1007,  1027,
         1053,  2595, 27944,  2361,  1010,  2073,  1060,  1027,  1015,  1010,
         1016,  1010,  1529,  1010,  1601,  1012,  2057,  2071, 11506,  1996,
         2682,  1011,  3855,  2048,  3572,  1998,  4339,  1996, 11135,  2004,
          102])"
1858,0,[], GEOMETRIC DISTRIBUTION,seg_369,"⎧qx−1p if x ranges from 1, 2, 3, … ,∞ ⎪ f (x; p) = qxp if x ranges from 0, 1, 2, … ,∞ ⎨⎪0 elsewhere. ⎩",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([ 101,  100, 2065, 1060, 8483, 2013, 1015, 1010, 1016, 1010, 1017, 1010,
        1529, 1010, 1601,  100, 1042, 1006, 1060, 1025, 1052, 1007, 1027, 1053,
        2595, 2361, 2065, 1060, 8483, 2013, 1014, 1010, 1015, 1010, 1016, 1010,
        1529, 1010, 1601,  100, 6974, 1012,  100,  102])"
1859,1,"['location', 'mean', 'change of origin', 'polya distribution', 'variance', 'distribution', 'case', 'transformation', 'location measures']", GEOMETRIC DISTRIBUTION,seg_369,"the second form follows easily by a change of origin transformation y = x − 1 in the first form. the mean, mode, and other location measures are simply displaced in this case (see the following discussion). the variance remains the same because v(x − 1) = v(x). the polya distribution",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  1996,  2117,  2433,  4076,  4089,  2011,  1037,  2689,  1997,
         4761,  8651,  1061,  1027,  1060,  1597,  1015,  1999,  1996,  2034,
         2433,  1012,  1996,  2812,  1010,  5549,  1010,  1998,  2060,  3295,
         5761,  2024,  3432, 12936,  1999,  2023,  2553,  1006,  2156,  1996,
         2206,  6594,  1007,  1012,  1996, 23284,  3464,  1996,  2168,  2138,
         1058,  1006,  1060,  1597,  1015,  1007,  1027,  1058,  1006,  1060,
         1007,  1012,  1996, 26572,  2050,  4353,   102])"
1860,1,['mean'], GEOMETRIC DISTRIBUTION,seg_369,"is obtained by setting the mean q∕p =   so that 1∕p = (1 +  ) or p = 1∕(1 +  ). now substitute in qx−1p, multiply numerator and denominator by   to get the above-mentioned form (figure 6.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2003,  4663,  2011,  4292,  1996,  2812,   100,  1027,  2061,
         2008,   100,  1027,  1006,  1015,  1009,  1007,  2030,  1052,  1027,
          100,  1006,  1015,  1009,  1007,  1012,  2085,  7681,  1999,  1053,
         2595, 27944,  2361,  1010,  4800, 22086, 16371,  5017,  8844,  1998,
         7939, 20936, 27413,  2011,  2000,  2131,  1996,  2682,  1011,  3855,
         2433,  1006,  3275,  1020,  1012,  1018,  1007,  1012,   102])"
1861,1,"['trial', 'parameter', 'probability', 'interval', 'probability of success', 'distribution', 'success']", GEOMETRIC DISTRIBUTION,seg_369,"this can be considered as the distribution of waiting time until the occurrence of first success. consider a sequence of customers in a service queue. assume that either a new customer joins the queue (with probability p) or none arrives (with probability q = 1 − p) in a short-enough time interval. the time t until the next arrival is distributed as geo(p). it has a single parameter p, the probability of success in each trial.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2023,  2064,  2022,  2641,  2004,  1996,  4353,  1997,  3403,
         2051,  2127,  1996, 14404,  1997,  2034,  3112,  1012,  5136,  1037,
         5537,  1997,  6304,  1999,  1037,  2326, 24240,  1012,  7868,  2008,
         2593,  1037,  2047,  8013,  9794,  1996, 24240,  1006,  2007,  9723,
         1052,  1007,  2030,  3904,  8480,  1006,  2007,  9723,  1053,  1027,
         1015,  1597,  1052,  1007,  1999,  1037,  2460,  1011,  2438,  2051,
        13483,  1012,  1996,  2051,  1056,  2127,  1996,  2279,  5508,  2003,
         5500,  2004, 20248,  1006,  1052,  1007,  1012,  2009,  2038,  1037,
         2309, 16381,  1052,  1010,  1996,  9723,  1997,  3112,  1999,  2169,
         3979,  1012,   102])"
1862,1,"['negative binomial distribution', 'parameter', 'negative binomial', 'distributions', 'distribution', 'geometric', 'variates', 'binomial', 'case', 'binomial distribution']", GEOMETRIC DISTRIBUTION,seg_369,"6.7.0.1 relationship with other distributions it is a special case of the negative binomial distribution when r = 1. if x1,x2, … ,xn are iid geometric variates with parameter p, then y = x1 + x2 + … + xn has a negative binomial distribution with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0.])","tensor([14965,  4353])","tensor([  101,  1020,  1012,  1021,  1012,  1014,  1012,  1015,  3276,  2007,
         2060, 20611,  2009,  2003,  1037,  2569,  2553,  1997,  1996,  4997,
         8026, 20936,  2389,  4353,  2043,  1054,  1027,  1015,  1012,  2065,
         1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,  1060,  2078,
         2024,  2462,  2094, 14965, 13075, 13143,  2015,  2007, 16381,  1052,
         1010,  2059,  1061,  1027,  1060,  2487,  1009,  1060,  2475,  1009,
         1529,  1009,  1060,  2078,  2038,  1037,  4997,  8026, 20936,  2389,
         4353,  2007,   102])"
1863,1,"['exponential', 'exponential distribution', 'discrete', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,"parameters n,p. this is easily proved using the mgf. it can also be considered as the discrete analog of the exponential distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101, 11709,  1050,  1010,  1052,  1012,  2023,  2003,  4089,  4928,
         2478,  1996, 11460,  2546,  1012,  2009,  2064,  2036,  2022,  2641,
         2004,  1996, 16246, 11698,  1997,  1996, 27258,  4353,  1012,   102])"
1864,1,"['mean', 'variance', 'functions', 'moments']", GEOMETRIC DISTRIBUTION,seg_369,"6.7.0.2 moments and generating functions the mean and variance are   = 1∕p,  2 = q∕p2 if f (x; p) = qx−1p, with support x = 1, 2, … ; and q∕p, q∕p2 if f (y; p) = qyp with support y = 0, 1, 2, … . the mean is easily obtained",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1020,  1012,  1021,  1012,  1014,  1012,  1016,  5312,  1998,
        11717,  4972,  1996,  2812,  1998, 23284,  2024,  1027,   100,  1010,
         1016,  1027,   100,  2065,  1042,  1006,  1060,  1025,  1052,  1007,
         1027,  1053,  2595, 27944,  2361,  1010,  2007,  2490,  1060,  1027,
         1015,  1010,  1016,  1010,  1529,  1025,  1998,   100,  1010,   100,
         2065,  1042,  1006,  1061,  1025,  1052,  1007,  1027,  1053, 22571,
         2007,  2490,  1061,  1027,  1014,  1010,  1015,  1010,  1016,  1010,
         1529,  1012,  1996,  2812,  2003,  4089,  4663,   102])"
1865,1,"['moments', 'mean', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,"if the pdf is taken as f (x; p) = qx−1p, the mean is 1∕p. the ordinary moments of this distribution are easy to find using pgf or mgf. we find higher order moments using the mgf technique.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2065,  1996, 11135,  2003,  2579,  2004,  1042,  1006,  1060,
         1025,  1052,  1007,  1027,  1053,  2595, 27944,  2361,  1010,  1996,
         2812,  2003,   100,  1012,  1996,  6623,  5312,  1997,  2023,  4353,
         2024,  3733,  2000,  2424,  2478, 18720,  2546,  2030, 11460,  2546,
         1012,  2057,  2424,  3020,  2344,  5312,  2478,  1996, 11460,  2546,
         6028,  1012,   102])"
1866,1,"['function', 'range', 'characteristic function']", GEOMETRIC DISTRIBUTION,seg_369,(the mgf for range 1 to ∞ is pet∕(1 − qet)). the characteristic function is obtained from the mgf as φx(t) = p∕(1 − qeit).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1006,  1996, 11460,  2546,  2005,  2846,  1015,  2000,  1601,
         2003,   100,  1006,  1015,  1597,  1053,  3388,  1007,  1007,  1012,
         1996,  8281,  3853,  2003,  4663,  2013,  1996, 11460,  2546,  2004,
         1176,  2595,  1006,  1056,  1007,  1027,   100,  1006,  1015,  1597,
         1053, 20175,  1007,  1012,   102])"
1867,1,"['geometric distribution', 'moments', 'distribution', 'geometric']", GEOMETRIC DISTRIBUTION,seg_369,example 6.21 moments of geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  2742,  1020,  1012,  2538,  5312,  1997, 14965,  4353,   102])"
1868,1,"['moments', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,obtain the moments of geo(p) distribution using mgf,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  6855,  1996,  5312,  1997, 20248,  1006,  1052,  1007,  4353,
         2478, 11460,  2546,   102])"
1869,1,['variance'], GEOMETRIC DISTRIBUTION,seg_369,"from which mx ′′(0) = q∕p2 + q2∕p2, so that the variance is q∕p2. the cdf is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2013,  2029, 25630,  1531,  1531,  1006,  1014,  1007,  1027,
          100,  1009,   100,  1010,  2061,  2008,  1996, 23284,  2003,   100,
         1012,  1996,  3729,  2546,  2003,   102])"
1870,1,['probability'], GEOMETRIC DISTRIBUTION,seg_369,"x =0 qkp = p[1 + q + q2 + · · · + qx]. as q is a probability, each power of q is between 0 and 1. hence, the above-mentioned series converges for all values of q, giving the summed value p[1 − qx+1]∕[1 − q]. as (1 − q) = p, the p in the numerator and denominator cancels out giving the cdf as f(x) = [1 − qx+1].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1060,  1027,  1014,  1053,  2243,  2361,  1027,  1052,  1031,
         1015,  1009,  1053,  1009,  1053,  2475,  1009,  1087,  1087,  1087,
         1009,  1053,  2595,  1033,  1012,  2004,  1053,  2003,  1037,  9723,
         1010,  2169,  2373,  1997,  1053,  2003,  2090,  1014,  1998,  1015,
         1012,  6516,  1010,  1996,  2682,  1011,  3855,  2186, 28314,  2015,
         2005,  2035,  5300,  1997,  1053,  1010,  3228,  1996,  7680,  7583,
         3643,  1052,  1031,  1015,  1597,  1053,  2595,  1009,  1015,  1033,
          100,  1031,  1015,  1597,  1053,  1033,  1012,  2004,  1006,  1015,
         1597,  1053,  1007,  1027,  1052,  1010,  1996,  1052,  1999,  1996,
        16371,  5017,  8844,  1998,  7939, 20936, 27413, 17542,  2015,  2041,
         3228,  1996,  3729,  2546,  2004,  1042,  1006,  1060,  1007,  1027,
         1031,  1015,  1597,  1053,  2595,  1009,  1015,  1033,  1012,   102])"
1871,1,"['mean', 'deviation', 'geometric distribution', 'distribution', 'geometric']", GEOMETRIC DISTRIBUTION,seg_369,example 6.22 mean deviation of geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  2742,  1020,  1012,  2570,  2812, 24353,  1997, 14965,  4353,
          102])"
1872,1,"['geometric', 'geometric distribution', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,find the md of geometric distribution using theorem 6.1 (p. 189).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([14965,  4353])","tensor([  101,  2424,  1996,  9108,  1997, 14965,  4353,  2478,  9872,  1020,
         1012,  1015,  1006,  1052,  1012, 20500,  1007,  1012,   102])"
1873,1,"['mean', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,"solution 6.22 we know that the mean of geo(p) distribution is   = q∕p. using theorem 6.1, the md is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  5576,  1020,  1012,  2570,  2057,  2113,  2008,  1996,  2812,
         1997, 20248,  1006,  1052,  1007,  4353,  2003,  1027,   100,  1012,
         2478,  9872,  1020,  1012,  1015,  1010,  1996,  9108,  2003,  2445,
         2011,   102])"
1874,0,[], GEOMETRIC DISTRIBUTION,seg_369,combine with the first term to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101, 11506,  2007,  1996,  2034,  2744,  2000,  2131,   102])"
1875,0,[], GEOMETRIC DISTRIBUTION,seg_369,write q = 1 − p in the exponent to get an alternate expression,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101,  4339,  1053,  1027,  1015,  1597,  1052,  1999,  1996, 16258,
        21576,  2000,  2131,  2019,  6585,  3670,   102])"
1876,1,"['exponential', 'exponential distribution', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,example 6.23 y = ⌊x⌋ of an exponential distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  2742,  1020,  1012,  2603,  1061,  1027,   100,  1060,   100,
         1997,  2019, 27258,  4353,   102])"
1877,1,"['exponential', 'exponential distribution', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,"if x has an exponential distribution, find the distribution of y = ⌊x⌋.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([14965,  4353])","tensor([  101,  2065,  1060,  2038,  2019, 27258,  4353,  1010,  2424,  1996,
         4353,  1997,  1061,  1027,   100,  1060,   100,  1012,   102])"
1878,1,['continuous'], GEOMETRIC DISTRIBUTION,seg_369,"solution 6.23 as x is continuous, pr[y = y] = pr[y ≤ x y + 1]. now consider",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  5576,  1020,  1012,  2603,  2004,  1060,  2003,  7142,  1010,
        10975,  1031,  1061,  1027,  1061,  1033,  1027, 10975,  1031,  1061,
         1608,  1060,  1061,  1009,  1015,  1033,  1012,  2085,  5136,   102])"
1879,1,"['probability', 'geometric', 'probability of success', 'success']", GEOMETRIC DISTRIBUTION,seg_369,"write exp(− y) as [exp(− )]y. then, equation (6.89) is of the form qyp = (1 − q)qy, where q = exp(− ). this is the pdf of a geometric distribution with probability of success p = 1 − q = [1 − exp(− )]. hence, y = ⌊x⌋ is geo([1 − exp(− )]).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  4339,  4654,  2361,  1006,  1597,  1061,  1007,  2004,  1031,
         4654,  2361,  1006,  1597,  1007,  1033,  1061,  1012,  2059,  1010,
         8522,  1006,  1020,  1012,  6486,  1007,  2003,  1997,  1996,  2433,
         1053, 22571,  1027,  1006,  1015,  1597,  1053,  1007,  1053,  2100,
         1010,  2073,  1053,  1027,  4654,  2361,  1006,  1597,  1007,  1012,
         2023,  2003,  1996, 11135,  1997,  1037, 14965,  4353,  2007,  9723,
         1997,  3112,  1052,  1027,  1015,  1597,  1053,  1027,  1031,  1015,
         1597,  4654,  2361,  1006,  1597,  1007,  1033,  1012,  6516,  1010,
         1061,  1027,   100,  1060,   100,  2003, 20248,  1006,  1031,  1015,
         1597,  4654,  2361,  1006,  1597,  1007,  1033,  1007,  1012,   102])"
1880,1,"['geometric distribution', 'moments', 'distribution', 'geometric']", GEOMETRIC DISTRIBUTION,seg_369,example 6.24 moments of geometric distribution qx∕2p,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2742,  1020,  1012,  2484,  5312,  1997, 14965,  4353,   100,
          102])"
1881,1,"['mean', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,find the mean of a distribution defined as,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([14965,  4353])","tensor([ 101, 2424, 1996, 2812, 1997, 1037, 4353, 4225, 2004,  102])"
1882,0,[], GEOMETRIC DISTRIBUTION,seg_369,"q p if x ranges from 0, 2, 4, 6, …,∞ f (x; p) = { 0",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([14965,  4353])","tensor([ 101, 1053, 1052, 2065, 1060, 8483, 2013, 1014, 1010, 1016, 1010, 1018,
        1010, 1020, 1010, 1529, 1010, 1601, 1042, 1006, 1060, 1025, 1052, 1007,
        1027, 1063, 1014,  102])"
1883,1,['factor'], GEOMETRIC DISTRIBUTION,seg_369,solution 6.24 by definition e(x) = ∑xxqx∕2p = p[2q + 4q2 + 6q3 + · · ·]. take 2q as common factor and simplify using,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  5576,  1020,  1012,  2484,  2011,  6210,  1041,  1006,  1060,
         1007,  1027,   100,  1027,  1052,  1031,  1016,  4160,  1009,  1018,
         4160,  2475,  1009,  1020,  4160,  2509,  1009,  1087,  1087,  1087,
         1033,  1012,  2202,  1016,  4160,  2004,  2691,  5387,  1998, 21934,
        28250,  2478,   102])"
1884,1,"['geometric probability', 'geometric', 'probability']", GEOMETRIC DISTRIBUTION,seg_369,example 6.25 geometric probability exceeding 1∕p,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2742,  1020,  1012,  2423, 14965,  9723, 17003,   100,   102])"
1885,1,"['probability', 'mean']", GEOMETRIC DISTRIBUTION,seg_369,if x ∼ geo(p) find the probability that x takes values larger than the mean.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2065,  1060,   100, 20248,  1006,  1052,  1007,  2424,  1996,
         9723,  2008,  1060,  3138,  5300,  3469,  2084,  1996,  2812,  1012,
          102])"
1886,1,"['probability', 'integer part']", GEOMETRIC DISTRIBUTION,seg_369,"solution 6.25 let ⌊1∕p⌋ denote the integer part. then, the required probability is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  5576,  1020,  1012,  2423,  2292,   100,   100,   100, 19090,
         1996, 16109,  2112,  1012,  2059,  1010,  1996,  3223,  9723,  2003,
          102])"
1887,1,"['factorial moments', 'geometric distribution', 'moments', 'distribution', 'geometric', 'factorial']", GEOMETRIC DISTRIBUTION,seg_369,example 6.26 factorial moments of geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0.])","tensor([14965,  4353])","tensor([  101,  2742,  1020,  1012,  2656,  5387,  4818,  5312,  1997, 14965,
         4353,   102])"
1888,1,"['factorial moments', 'moments', 'distribution', 'factorial']", GEOMETRIC DISTRIBUTION,seg_369,obtain the factorial moments of geo(p) distribution.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  6855,  1996,  5387,  4818,  5312,  1997, 20248,  1006,  1052,
         1007,  4353,  1012,   102])"
1889,0,[], GEOMETRIC DISTRIBUTION,seg_369,solution 6.26 differentiate the identify ∑x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101,  5576,  1020,  1012,  2656, 21032,  1996,  6709,   100,   102])"
1890,1,"['factorial moments', 'moments', 'factorial']", GEOMETRIC DISTRIBUTION,seg_369,"∞ =0 qx = 1∕(1 − q) with respect to q multiple times to obtain the factorial moments. differentiating it once, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1601,  1027,  1014,  1053,  2595,  1027,   100,  1006,  1015,
         1597,  1053,  1007,  2007,  4847,  2000,  1053,  3674,  2335,  2000,
         6855,  1996,  5387,  4818,  5312,  1012,  2367, 15370,  2009,  2320,
         1010,  2057,  2131,   102])"
1891,0,[], GEOMETRIC DISTRIBUTION,seg_369,"multiply both sides by pq. then, the lhs becomes ∑x",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101,  4800, 22086,  2119,  3903,  2011,  1052,  4160,  1012,  2059,
         1010,  1996,  1048,  7898,  4150,   100,   102])"
1892,1,['results'], GEOMETRIC DISTRIBUTION,seg_369,∞ =0 xqxp = e(x). the rhs is pq∕p2 = q∕p. differentiating it again results in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([14965,  4353])","tensor([  101,  1601,  1027,  1014,  1060,  4160,  2595,  2361,  1027,  1041,
         1006,  1060,  1007,  1012,  1996,  1054,  7898,  2003,   100,  1027,
          100,  1012,  2367, 15370,  2009,  2153,  3463,  1999,   102])"
1893,0,[], GEOMETRIC DISTRIBUTION,seg_369,multiply both sides by q2p and simplify to get e[x(x − 1)] = 2q2∕p2. differentiating k times gives,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101,  4800, 22086,  2119,  3903,  2011,  1053,  2475,  2361,  1998,
        21934, 28250,  2000,  2131,  1041,  1031,  1060,  1006,  1060,  1597,
         1015,  1007,  1033,  1027,   100,  1012,  2367, 15370,  1047,  2335,
         3957,   102])"
1894,0,[], GEOMETRIC DISTRIBUTION,seg_369,multiply both sides by qkp to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([14965,  4353])","tensor([  101,  4800, 22086,  2119,  3903,  2011,  1053,  2243,  2361,  2000,
         2131,   102])"
1895,1,"['geometric', 'geometric distribution', 'distribution']", GEOMETRIC DISTRIBUTION,seg_369,we could reparameterize the geometric distribution by putting   = q∕p to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2057,  2071, 16360,  5400, 22828,  4697,  1996, 14965,  4353,
         2011,  5128,  1027,   100,  2000,  2131,   102])"
1896,1,"['mean', 'geometric distribution', 'variance', 'distribution', 'geometric']", GEOMETRIC DISTRIBUTION,seg_369,with mean   and variance  (1 +  ). left truncated geometric distribution is obtained by truncating at a positive integer k. the resulting pdf is f (x; p) = qx+kp∕[1 −∑y,tensor(1),"tensor([0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14965,  4353])","tensor([  101,  2007,  2812,  1998, 23284,  1006,  1015,  1009,  1007,  1012,
         2187, 25449, 14965,  4353,  2003,  4663,  2011, 19817,  4609, 18252,
         2012,  1037,  3893, 16109,  1047,  1012,  1996,  4525, 11135,  2003,
         1042,  1006,  1060,  1025,  1052,  1007,  1027,  1053,  2595,  1009,
          100,  1031,  1015,   100,   102])"
1897,1,"['change of origin', 'geometric distribution', 'bernoulli', 'failures', 'trials', 'densities', 'bernoulli trials', 'distribution', 'geometric', 'successes', 'transformation', 'independent']", Properties of Geometric Distribution,seg_371,"both the above-mentioned densities in equation 6.7 are related through a change of origin transformation y = x−1. this simply displaces the distribution to the left or right. using e(y) = e(x) − 1, we get e(y) = (1∕p − 1) = (1 − p)∕p = q∕p. variance remains the same because v(y) = v(x). as 2 = ∕p , the distribution is over-dispersed. similarly, z = min(x1,x2, … ,xn) has the same geometric distribution. a geometric distribution of order k is an extension:–in a sequence of independent bernoulli trials, we look for the first consecutive block of k successes (either in the beginning itself or surrounded by failures). for example, in ssffsfssf sssf, an sss occurs at position 10.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2119,  1996,  2682,  1011,  3855,  7939, 24279,  1999,  8522,
         1020,  1012,  1021,  2024,  3141,  2083,  1037,  2689,  1997,  4761,
         8651,  1061,  1027,  1060, 27944,  1012,  2023,  3432,  4487, 13102,
        19217,  2015,  1996,  4353,  2000,  1996,  2187,  2030,  2157,  1012,
         2478,  1041,  1006,  1061,  1007,  1027,  1041,  1006,  1060,  1007,
         1597,  1015,  1010,  2057,  2131,  1041,  1006,  1061,  1007,  1027,
         1006,   100,  1597,  1015,  1007,  1027,  1006,  1015,  1597,  1052,
         1007,   100,  1027,   100,  1012, 23284,  3464,  1996,  2168,  2138,
         1058,  1006,  1061,  1007,  1027,  1058,  1006,  1060,  1007,  1012,
         2004,  1016,  1027,   100,  1010,  1996,  4353,  2003,  2058,  1011,
        15484,  1012,  6660,  1010,  1062,  1027,  8117,  1006,  1060,  2487,
         1010,  1060,  2475,  1010,  1529,  1010,  1060,  2078,  1007,  2038,
         1996,  2168, 14965,  4353,  1012,  1037, 14965,  4353,  1997,  2344,
         1047,  2003,  2019,  5331,  1024,  1516,  1999,  1037,  5537,  1997,
         2981, 16595,  7140,  6894,  7012,  1010,  2057,  2298,  2005,  1996,
         2034,  5486,  3796,  1997,  1047, 14152,  1006,  2593,  1999,  1996,
         2927,  2993,  2030,  5129,  2011, 15428,  1007,  1012,  2005,  2742,
         1010,  1999,  7020, 21807, 10343, 22747,  7020, 22747,  1010,  2019,
         7020,  2015,  5158,  2012,  2597,  2184,  1012,   102])"
1898,1,"['function', 'leptokurtic', 'geometric distribution', 'table', 'probability', 'skewness', 'characteristic function', 'distribution', 'geometric', 'kurtosis', 'symmetric']", Properties of Geometric Distribution,seg_371,"coefficient of skewness is  1 = (2 − p)∕√q. as the numerator never vanishes for valid values of 0 ≤ p ≤ 1, the geometric distribution is never symmetric (in fact, it is always positively queued). the kurtosis is  2 = (p2 + 6q)∕q = 6 + p2∕q. as p2∕q can never be negative, the distribution is always leptokurtic. probability generating function is p∕(1 − qs) and the characteristic function is p∕(1 − qeit) (see table 6.9).",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101, 19064,  1997, 15315,  7974,  2791,  2003,  1015,  1027,  1006,
         1016,  1597,  1052,  1007,   100,  1012,  2004,  1996, 16371,  5017,
         8844,  2196, 25887,  2229,  2005,  9398,  5300,  1997,  1014,  1608,
         1052,  1608,  1015,  1010,  1996, 14965,  4353,  2003,  2196, 19490,
         1006,  1999,  2755,  1010,  2009,  2003,  2467, 13567, 24240,  2094,
         1007,  1012,  1996,  9679, 12650,  2003,  1016,  1027,  1006,  1052,
         2475,  1009,  1020,  4160,  1007,   100,  1027,  1020,  1009,   100,
         1012,  2004,   100,  2064,  2196,  2022,  4997,  1010,  1996,  4353,
         2003,  2467,  3393, 13876, 21940, 28228,  2278,  1012,  9723, 11717,
         3853,  2003,   100,  1006,  1015,  1597,  1053,  2015,  1007,  1998,
         1996,  8281,  3853,  2003,   100,  1006,  1015,  1597,  1053, 20175,
         1007,  1006,  2156,  2795,  1020,  1012,  1023,  1007,  1012,   102])"
1899,1,"['mean', 'variance', 'observations', 'distributions', 'population', 'sample', 'sample variance', 'statistical', 'population variance', 'expected value', 'sample mean']", Properties of Geometric Distribution,seg_371,"in chapter 3, it was mentioned that the sample variance is a measure of the spread of observations around the sample mean. as the expected value of a constant multiple of the sample variance is the population variance (e(s2) = ((n−1)/n) 2), we categorize statistical distributions using the boundedness property of population variance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  1999,  3127,  1017,  1010,  2009,  2001,  3855,  2008,  1996,
         7099, 23284,  2003,  1037,  5468,  1997,  1996,  3659,  1997,  9420,
         2105,  1996,  7099,  2812,  1012,  2004,  1996,  3517,  3643,  1997,
         1037,  5377,  3674,  1997,  1996,  7099, 23284,  2003,  1996,  2313,
        23284,  1006,  1041,  1006,  1055,  2475,  1007,  1027,  1006,  1006,
         1050, 27944,  1007,  1013,  1050,  1007,  1016,  1007,  1010,  2057,
         4937, 20265, 25709,  7778, 20611,  2478,  1996, 10351,  2791,  3200,
         1997,  2313, 23284,  1012,   102])"
1900,1,"['functions', 'coefficient', 'correlation coefficient', 'correlation', 'double exponential', 'population', 'asymptotic', 'logistic', 'mean', 'linear combination', 'cumulants', 'geometric distribution', 'bernoulli', 'populations', 'poisson', 'normal', 'samples', 'negative binomial distributions', 'extreme value', 'statistical', 'population variance', 'binomial', 'noncentral', 'geometric', 'parameter', 'function', 'linear', 'uniform distribution', 'binomial distributions', 'negative binomial', 'nonlinear', 'results', 'parameters', 'combination', 'variance', 'extreme value distributions', 'normal distributions', 'distributions', 'moments', 'limit', 'geometric distributions', 'distribution', 'exponential']", Properties of Geometric Distribution,seg_371,"several statistical distributions have a single unknown parameter. examples are bernoulli, geometric, poisson, 2, exponential, rayleigh, and t distributions. the population variance is a linear function of this parameter for poisson ( = ), 2(= 2n), and other distributions. it is a nonlinear function for exponential (1∕ 2), t (n∕(n − 2)) and geometric distributions ((1 − p)∕p2). for normal distributions, it is 2. it is the square of a parameter for double exponential and logistic distributions, constant multiple of the square for rayleigh and extreme value distributions, and square of the difference of the parameters for uniform distribution. it is a quadratic for binomial (np(1 − p)) distribution. it is a linear combination of parameters for noncentral 2(2(n + 2 )). this discussion shows that the variance can be increased without limit by increasing the respective parameter(s) in the numerator or decreasing the parameters in the denominator for some distributions. however, there are some statistical distributions with strictly bounded parameter values, whose variance is either a ratio of parameters or a function of two or more unknown parameters (e.g., as transcendental functions), and cannot be increased without limit. examples are the beta-i(a, b) with variance ab∕[(a + b)2(a + b + 1)], student’s t (n∕(n − 2) for n 2), and the distribution of the correlation coefficient. this has interesting implications in the asymptotics of statistical distributions with respect to a subset of the parameter space. for example, the variance of both geometric and negative binomial distributions can be increased without limit by letting p → 0. we could reparametrize these distributions appropriately to have this asymptotic behavior at the extreme right end of the parameter space. for instance, let = q∕p for the geometric distribution, so that p = 1∕(1 + ). then p → 0 is equivalent to → ∞. these distributions have a characteristic property that the variance is greater than the mean. similar results could be obtained for higher order moments and cumulants. naturally, we expect this property to hold in samples drawn from such populations. such samples are called over-dispersion samples (s2 ≥ x).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 1., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2195,  7778, 20611,  2031,  1037,  2309,  4242, 16381,  1012,
         4973,  2024, 16595,  7140,  6894,  1010, 14965,  1010, 13433, 24077,
         1010,  1016,  1010, 27258,  1010,  4097, 13615,  1010,  1998,  1056,
        20611,  1012,  1996,  2313, 23284,  2003,  1037,  7399,  3853,  1997,
         2023, 16381,  2005, 13433, 24077,  1006,  1027,  1007,  1010,  1016,
         1006,  1027,  1016,  2078,  1007,  1010,  1998,  2060, 20611,  1012,
         2009,  2003,  1037, 27400,  3853,  2005, 27258,  1006,   100,  1016,
         1007,  1010,  1056,  1006,   100,  1006,  1050,  1597,  1016,  1007,
         1007,  1998, 14965, 20611,  1006,  1006,  1015,  1597,  1052,  1007,
          100,  1007,  1012,  2005,  3671, 20611,  1010,  2009,  2003,  1016,
         1012,  2009,  2003,  1996,  2675,  1997,  1037, 16381,  2005,  3313,
        27258,  1998,  8833,  6553, 20611,  1010,  5377,  3674,  1997,  1996,
         2675,  2005,  4097, 13615,  1998,  6034,  3643, 20611,  1010,  1998,
         2675,  1997,  1996,  4489,  1997,  1996, 11709,  2005,  6375,  4353,
         1012,  2009,  2003,  1037, 17718, 23671,  2005,  8026, 20936,  2389,
         1006, 27937,  1006,  1015,  1597,  1052,  1007,  1007,  4353,  1012,
         2009,  2003,  1037,  7399,  5257,  1997, 11709,  2005,  2512, 13013,
         7941,  1016,  1006,  1016,  1006,  1050,  1009,  1016,  1007,  1007,
         1012,  2023,  6594,  3065,  2008,  1996, 23284,  2064,  2022,  3445,
         2302,  5787,  2011,  4852,  1996,  7972, 16381,  1006,  1055,  1007,
         1999,  1996, 16371,  5017,  8844,  2030, 16922,  1996, 11709,  1999,
         1996,  7939, 20936, 27413,  2005,  2070, 20611,  1012,  2174,  1010,
         2045,  2024,  2070,  7778, 20611,  2007,  9975, 10351, 16381,  5300,
         1010,  3005, 23284,  2003,  2593,  1037,  6463,  1997, 11709,  2030,
         1037,  3853,  1997,  2048,  2030,  2062,  4242, 11709,  1006,  1041,
         1012,  1043,  1012,  1010,  2004,  9099, 23865, 21050,  4972,  1007,
         1010,  1998,  3685,  2022,  3445,  2302,  5787,  1012,  4973,  2024,
         1996,  8247,  1011,  1045,  1006,  1037,  1010,  1038,  1007,  2007,
        23284,   100,  1031,  1006,  1037,  1009,  1038,  1007,  1016,  1006,
         1037,  1009,  1038,  1009,  1015,  1007,  1033,  1010,  3076,  1521,
         1055,  1056,  1006,   100,  1006,  1050,  1597,  1016,  1007,  2005,
         1050,  1016,  1007,  1010,  1998,  1996,  4353,  1997,  1996, 16902,
        19064,  1012,  2023,  2038,  5875, 13494,  1999,  1996,  2004, 24335,
        13876, 20214,  2015,  1997,  7778, 20611,  2007,  4847,  2000,  1037,
        16745,  1997,  1996, 16381,  2686,  1012,  2005,  2742,  1010,  1996,
        23284,  1997,  2119, 14965,  1998,  4997,  8026, 20936,  2389, 20611,
         2064,  2022,  3445,  2302,  5787,  2011,  5599,  1052,  1585,  1014,
         1012,  2057,  2071, 16360,  5400, 11368, 25709,  2122, 20611, 23263,
         2000,  2031,  2023,  2004, 24335, 13876, 20214,  5248,  2012,  1996,
         6034,  2157,  2203,  1997,  1996, 16381,  2686,  1012,  2005,  6013,
         1010,  2292,  1027,   100,  2005,  1996, 14965,  4353,  1010,  2061,
         2008,  1052,  1027,   100,  1006,  1015,  1009,  1007,  1012,  2059,
         1052,  1585,  1014,  2003,  5662,  2000,  1585,  1601,  1012,  2122,
        20611,  2031,  1037,  8281,  3200,  2008,  1996, 23284,  2003,  3618,
         2084,  1996,  2812,  1012,  2714,  3463,  2071,  2022,  4663,  2005,
         3020,  2344,  5312,  1998, 13988,  7068,  7666,  1012,  8100,  1010,
         2057,  5987,  2023,  3200,  2000,  2907,  1999,  8168,  4567,  2013,
         2107,  7080,  1012,  2107,  8168,  2024,  2170,  2058,  1011,  4487,
        17668, 10992,  8168,  1006,  1055,  2475,  1609,  1060,  1007,  1012,
          102])"
1901,1,"['negative binomial distribution', 'parameter', 'function', 'variates', 'geometric distribution', 'random numbers', 'negative binomial', 'characteristic function', 'random number', 'random', 'distribution', 'geometric', 'parameters', 'binomial', 'binomial distribution']", Properties of Geometric Distribution,seg_371,"let x1,x2, … ,xn be iid geometric random variates with common parameter p. then, y = x1 + x2 + … + xn has a negative binomial distribution with parameters n,p. this is easily proved using the characteristic function. this property can be used to generate random numbers from negative binomial distribution using a random number generator for geometric distribution. similarly, z = min(x1,x2, …,xn) has the same geometric distribution. see reference 139 for characterizations and reference 140 for applications.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2292,  1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,
         1060,  2078,  2022,  2462,  2094, 14965,  6721, 13075, 13143,  2015,
         2007,  2691, 16381,  1052,  1012,  2059,  1010,  1061,  1027,  1060,
         2487,  1009,  1060,  2475,  1009,  1529,  1009,  1060,  2078,  2038,
         1037,  4997,  8026, 20936,  2389,  4353,  2007, 11709,  1050,  1010,
         1052,  1012,  2023,  2003,  4089,  4928,  2478,  1996,  8281,  3853,
         1012,  2023,  3200,  2064,  2022,  2109,  2000,  9699,  6721,  3616,
         2013,  4997,  8026, 20936,  2389,  4353,  2478,  1037,  6721,  2193,
        13103,  2005, 14965,  4353,  1012,  6660,  1010,  1062,  1027,  8117,
         1006,  1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,  1060,
         2078,  1007,  2038,  1996,  2168, 14965,  4353,  1012,  2156,  4431,
        16621,  2005, 23191,  2015,  1998,  4431,  8574,  2005,  5097,  1012,
          102])"
1902,1,"['geometric', 'geometric distribution', 'variance', 'distribution']", Properties of Geometric Distribution,seg_371,example 6.27 variance of geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2742,  1020,  1012,  2676, 23284,  1997, 14965,  4353,   102])"
1903,1,"['mean', 'function', 'variance', 'geometric distribution', 'distribution', 'geometric', 'asymptotic']", Properties of Geometric Distribution,seg_371,prove that the ratio of variance to the mean of a geometric distribution is 1∕p. express the variance as a function of   and discuss the asymptotic behavior.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  6011,  2008,  1996,  6463,  1997, 23284,  2000,  1996,  2812,
         1997,  1037, 14965,  4353,  2003,   100,  1012,  4671,  1996, 23284,
         2004,  1037,  3853,  1997,  1998,  6848,  1996,  2004, 24335, 13876,
        20214,  5248,  1012,   102])"
1904,1,"['mean', 'function', 'variance', 'trials', 'limit', 'success']", Properties of Geometric Distribution,seg_371,"solution 6.27 we know that the variance is q∕p2 = (1 − p)∕p2 and mean is q∕p. as p→ 0, numerator of variance→ 1 and the denominator→ 0. the ratio  2∕  = (q∕p2)∕(q∕p) = 1∕p, which is obviously   1 as 0   p   1. thus, the ratio tends to ∞. this has the interpretation that as p→ 0, the number of trials needed to get the first success increases without limit. the variance is expressed as a function of the mean as  2 =  (1 +  ).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  5576,  1020,  1012,  2676,  2057,  2113,  2008,  1996, 23284,
         2003,   100,  1027,  1006,  1015,  1597,  1052,  1007,   100,  1998,
         2812,  2003,   100,  1012,  2004,  1052, 30113,  1014,  1010, 16371,
         5017,  8844,  1997, 23284, 30113,  1015,  1998,  1996,  7939, 20936,
        27413, 30113,  1014,  1012,  1996,  6463,   100,  1027,  1006,   100,
         1007,   100,  1006,   100,  1007,  1027,   100,  1010,  2029,  2003,
         5525,  1015,  2004,  1014,  1052,  1015,  1012,  2947,  1010,  1996,
         6463, 12102,  2000,  1601,  1012,  2023,  2038,  1996,  7613,  2008,
         2004,  1052, 30113,  1014,  1010,  1996,  2193,  1997,  7012,  2734,
         2000,  2131,  1996,  2034,  3112,  7457,  2302,  5787,  1012,  1996,
        23284,  2003,  5228,  2004,  1037,  3853,  1997,  1996,  2812,  2004,
         1016,  1027,  1006,  1015,  1009,  1007,  1012,   102])"
1905,1,"['conditional distribution', 'distribution', 'geometric', 'conditional']", Properties of Geometric Distribution,seg_371,example 6.28 conditional distribution of geometric laws,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2742,  1020,  1012,  2654, 18462,  4353,  1997, 14965,  4277,
          102])"
1906,1,"['conditional', 'conditional distribution', 'distribution']", Properties of Geometric Distribution,seg_371,"if x and y are iid geo(p), find the conditional distribution of (x|x + y = n).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2462,  2094, 20248,  1006,
         1052,  1007,  1010,  2424,  1996, 18462,  4353,  1997,  1006,  1060,
         1064,  1060,  1009,  1061,  1027,  1050,  1007,  1012,   102])"
1907,1,['independent'], Properties of Geometric Distribution,seg_371,"solution 6.28 as x and y are independent,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([ 101, 5576, 1020, 1012, 2654, 2004, 1060, 1998, 1061, 2024, 2981, 1010,
         102])"
1908,1,['limit'], Properties of Geometric Distribution,seg_371,n =0 p[x = k]p[y = n − k] (here we have terminated the upper limit at n because y is positive) =∑k,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  1050,  1027,  1014,  1052,  1031,  1060,  1027,  1047,  1033,
         1052,  1031,  1061,  1027,  1050,  1597,  1047,  1033,  1006,  2182,
         2057,  2031, 12527,  1996,  3356,  5787,  2012,  1050,  2138,  1061,
         2003,  3893,  1007,  1027,   100,   102])"
1909,1,"['uniform distribution', 'discrete uniform distribution', 'discrete', 'distribution']", Properties of Geometric Distribution,seg_371,which is the pdf of a discrete uniform distribution duni((n+1)).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2029,  2003,  1996, 11135,  1997,  1037, 16246,  6375,  4353,
        24654,  2072,  1006,  1006,  1050,  1009,  1015,  1007,  1007,  1012,
          102])"
1910,1,"['geometric', 'probabilities']", Properties of Geometric Distribution,seg_371,example 6.29 geometric probabilities,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2742,  1020,  1012,  2756, 14965,  4013,  3676, 14680,   102])"
1911,0,[], Properties of Geometric Distribution,seg_371,"if x∼ geo(p), find the following probabilities:– (i) x takes even values and (ii) x takes odd values.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  2065,   100, 20248,  1006,  1052,  1007,  1010,  2424,  1996,
         2206,  4013,  3676, 14680,  1024,  1516,  1006,  1045,  1007,  1060,
         3138,  2130,  5300,  1998,  1006,  2462,  1007,  1060,  3138,  5976,
         5300,  1012,   102])"
1912,1,"['geometric', 'probabilities', 'geometric distribution', 'distribution']", Properties of Geometric Distribution,seg_371,"solution 6.29 as the geometric distribution takes x = 0, 1, 2, … ∞ values, both the above-mentioned probabilities are evaluated as infinite sums. (i) p[x is even] = q0p + q2p + · · · = p[1 + q2 + q4 + · · · ] = p∕(1 − q2) = 1∕(1 + q). (ii) p[x is odd] = q1p + q3p + · · · = qp[1 + q2 + q4 + · · · ] = qp∕(1 − q2) = q/(1+q), which could also be obtained from (i) because p[x is even] = 1−p[x is odd] = 1−[1/(1+q)] = q/(1+q).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 14965,  4353])","tensor([  101,  5576,  1020,  1012,  2756,  2004,  1996, 14965,  4353,  3138,
         1060,  1027,  1014,  1010,  1015,  1010,  1016,  1010,  1529,  1601,
         5300,  1010,  2119,  1996,  2682,  1011,  3855,  4013,  3676, 14680,
         2024, 16330,  2004, 10709, 20571,  1012,  1006,  1045,  1007,  1052,
         1031,  1060,  2003,  2130,  1033,  1027,  1053,  2692,  2361,  1009,
         1053,  2475,  2361,  1009,  1087,  1087,  1087,  1027,  1052,  1031,
         1015,  1009,  1053,  2475,  1009,  1053,  2549,  1009,  1087,  1087,
         1087,  1033,  1027,   100,  1006,  1015,  1597,  1053,  2475,  1007,
         1027,   100,  1006,  1015,  1009,  1053,  1007,  1012,  1006,  2462,
         1007,  1052,  1031,  1060,  2003,  5976,  1033,  1027,  1053,  2487,
         2361,  1009,  1053,  2509,  2361,  1009,  1087,  1087,  1087,  1027,
         1053,  2361,  1031,  1015,  1009,  1053,  2475,  1009,  1053,  2549,
         1009,  1087,  1087,  1087,  1033,  1027,   100,  1006,  1015,  1597,
         1053,  2475,  1007,  1027,  1053,  1013,  1006,  1015,  1009,  1053,
         1007,  1010,  2029,  2071,  2036,  2022,  4663,  2013,  1006,  1045,
         1007,  2138,  1052,  1031,  1060,  2003,  2130,  1033,  1027,  1015,
        22543,  2361,  1031,  1060,  2003,  5976,  1033,  1027,  1015, 22543,
         1031,  1015,  1013,  1006,  1015,  1009,  1053,  1007,  1033,  1027,
         1053,  1013,  1006,  1015,  1009,  1053,  1007,  1012,   102])"
1913,1,"['function', 'density function', 'geometric']", Memoryless Property,seg_373,the geometric density function possesses an interesting property called memory-less property.,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3638, 3238, 3200])","tensor([  101,  1996, 14965,  4304,  3853, 14882,  2019,  5875,  3200,  2170,
         3638,  1011,  2625,  3200,  1012,   102])"
1914,0,[], Memoryless Property,seg_373,"substituting the pdf, this becomes ∑x",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3638, 3238, 3200])","tensor([  101,  4942, 21532,  1996, 11135,  1010,  2023,  4150,   100,   102])"
1915,0,['n'], Memoryless Property,seg_373,"∞ =m+1 qxp = qn (see the following), which is pr(x n). the above-mentioned result holds even if the operator is replaced by ≥.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3638, 3238, 3200])","tensor([  101,  1601,  1027,  1049,  1009,  1015,  1053,  2595,  2361,  1027,
         1053,  2078,  1006,  2156,  1996,  2206,  1007,  1010,  2029,  2003,
        10975,  1006,  1060,  1050,  1007,  1012,  1996,  2682,  1011,  3855,
         2765,  4324,  2130,  2065,  1996,  6872,  2003,  2999,  2011,  1609,
         1012,   102])"
1916,1,['probabilities'], Tail Probabilities,seg_375,the survival probabilities from x = c is,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1996,  7691,  4013,  3676, 14680,  2013,  1060,  1027,  1039,
         2003,   102])"
1917,1,['probabilities'], Tail Probabilities,seg_375,"as q   1, this goes down to zero for large c. the left-tail probabilities can be found from complementation as pr[0 ≤ x ≤ c] = 1 − pr[x   c] = 1 − qc.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2004,  1053,  1015,  1010,  2023,  3632,  2091,  2000,  5717,
         2005,  2312,  1039,  1012,  1996,  2187,  1011,  5725,  4013,  3676,
        14680,  2064,  2022,  2179,  2013, 13711,  3370,  2004, 10975,  1031,
         1014,  1608,  1060,  1608,  1039,  1033,  1027,  1015,  1597, 10975,
         1031,  1060,  1039,  1033,  1027,  1015,  1597, 25196,  1012,   102])"
1918,1,"['geometric distribution', 'random', 'random number', 'samples', 'distribution', 'geometric']", Random Samples,seg_377,"random samples from this distribution can be generated using a uniform random number u in (0,1) by first finding a c such that 1 − qc−1   u   1 − qc. subtract 1 from each term and change the sign to get qc+1   1 − u   qc−1. now consider qc   1 − u. as 1−u and u have the same distribution, taking log we get c ∗ log(q)   log(u) from which c   log(u)∕ log(q). similarly, taking log of both sides of 1 − u   qc−1, we get (c − 1) log(q)   log(1 − u) or equivalently c   1 + log(u)∕ log(q). combine both the conditions to get c = ⌊1 + log(u)∕ log(q)⌋. this value being an integer is returned as the random variate from the geometric distribution.",tensor(1),"tensor([0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([6721, 8168])","tensor([  101,  6721,  8168,  2013,  2023,  4353,  2064,  2022,  7013,  2478,
         1037,  6375,  6721,  2193,  1057,  1999,  1006,  1014,  1010,  1015,
         1007,  2011,  2034,  4531,  1037,  1039,  2107,  2008,  1015,  1597,
        25196, 27944,  1057,  1015,  1597, 25196,  1012,  4942,  6494,  6593,
         1015,  2013,  2169,  2744,  1998,  2689,  1996,  3696,  2000,  2131,
        25196,  1009,  1015,  1015,  1597,  1057, 25196, 27944,  1012,  2085,
         5136, 25196,  1015,  1597,  1057,  1012,  2004,  1015, 22543,  2226,
         1998,  1057,  2031,  1996,  2168,  4353,  1010,  2635,  8833,  2057,
         2131,  1039,  1598,  8833,  1006,  1053,  1007,  8833,  1006,  1057,
         1007,  2013,  2029,  1039,  8833,  1006,  1057,  1007,   100,  8833,
         1006,  1053,  1007,  1012,  6660,  1010,  2635,  8833,  1997,  2119,
         3903,  1997,  1015,  1597,  1057, 25196, 27944,  1010,  2057,  2131,
         1006,  1039,  1597,  1015,  1007,  8833,  1006,  1053,  1007,  8833,
         1006,  1015,  1597,  1057,  1007,  2030,  5662,  2135,  1039,  1015,
         1009,  8833,  1006,  1057,  1007,   100,  8833,  1006,  1053,  1007,
         1012, 11506,  2119,  1996,  3785,  2000,  2131,  1039,  1027,   100,
         1015,  1009,  8833,  1006,  1057,  1007,   100,  8833,  1006,  1053,
         1007,   100,  1012,  2023,  3643,  2108,  2019, 16109,  2003,  2513,
         2004,  1996,  6721, 13075, 13143,  2013,  1996, 14965,  4353,  1012,
          102])"
1919,1,"['probabilities', 'distribution']", NEGATIVE BINOMIAL DISTRIBUTION,seg_379,"this distribution gets its name from the fact that the successive probabilities are obtained from the infinite series expansion of the expression pk(1 − q)−k, where q = 1 − p and p   0 (see also exercise 6.20, p. 6–97).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2023,  4353,  4152,  2049,  2171,  2013,  1996,  2755,  2008,
         1996, 11165,  4013,  3676, 14680,  2024,  4663,  2013,  1996, 10709,
         2186,  4935,  1997,  1996,  3670,  1052,  2243,  1006,  1015,  1597,
         1053,  1007,  1597,  2243,  1010,  2073,  1053,  1027,  1015,  1597,
         1052,  1998,  1052,  1014,  1006,  2156,  2036,  6912,  1020,  1012,
         2322,  1010,  1052,  1012,  1020,  1516,  5989,  1007,  1012,   102])"
1920,1,"['trial', 'bernoulli', 'probability', 'failures', 'trials', 'bernoulli trials', 'successes', 'success', 'independent']", NEGATIVE BINOMIAL DISTRIBUTION,seg_379,"consider a sequence of independent bernoulli trials. instead of counting the number of trials needed to get the first success, we count the number of trials needed to get the kth success, where k is a fixed constant integer greater than 1 known in advance (we are actually counting the number of failures, as the number of successes is fixed at k). hence, in x + k − 1 trials, we have observed k − 1 successes, and the (x + k)th trial must result in the kth success. the probability of occurrence is thus",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  5136,  1037,  5537,  1997,  2981, 16595,  7140,  6894,  7012,
         1012,  2612,  1997, 10320,  1996,  2193,  1997,  7012,  2734,  2000,
         2131,  1996,  2034,  3112,  1010,  2057,  4175,  1996,  2193,  1997,
         7012,  2734,  2000,  2131,  1996,  1047,  2705,  3112,  1010,  2073,
         1047,  2003,  1037,  4964,  5377, 16109,  3618,  2084,  1015,  2124,
         1999,  5083,  1006,  2057,  2024,  2941, 10320,  1996,  2193,  1997,
        15428,  1010,  2004,  1996,  2193,  1997, 14152,  2003,  4964,  2012,
         1047,  1007,  1012,  6516,  1010,  1999,  1060,  1009,  1047,  1597,
         1015,  7012,  1010,  2057,  2031,  5159,  1047,  1597,  1015, 14152,
         1010,  1998,  1996,  1006,  1060,  1009,  1047,  1007, 16215,  3979,
         2442,  2765,  1999,  1996,  1047,  2705,  3112,  1012,  1996,  9723,
         1997, 14404,  2003,  2947,   102])"
1921,0,['n'], NEGATIVE BINOMIAL DISTRIBUTION,seg_379,"n x), the pdf becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  1050,  1060,  1007,  1010,  1996, 11135,  4150,   102])"
1922,1,['geometric'], NEGATIVE BINOMIAL DISTRIBUTION,seg_379,"for x = 0, 1, 2, … and k = 1, 2, … . for k = 1, this reduces to the geometric distri-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2005,  1060,  1027,  1014,  1010,  1015,  1010,  1016,  1010,
         1529,  1998,  1047,  1027,  1015,  1010,  1016,  1010,  1529,  1012,
         2005,  1047,  1027,  1015,  1010,  2023, 13416,  2000,  1996, 14965,
         4487,  3367,  3089,  1011,   102])"
1923,0,[], NEGATIVE BINOMIAL DISTRIBUTION,seg_379,is not restricted to be an integer. put y = x + k in equation (6.99) to get an alternate,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 4997,  8026, 20936,  2389,  4353])","tensor([  101,  2003,  2025,  7775,  2000,  2022,  2019, 16109,  1012,  2404,
         1061,  1027,  1060,  1009,  1047,  1999,  8522,  1006,  1020,  1012,
         5585,  1007,  2000,  2131,  2019,  6585,   102])"
1924,0,[], Properties of Negative Binomial Distribution,seg_381,"x−1), the pdf can be written alternatively as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1060, 27944,  1007,  1010,  1996, 11135,  2064,  2022,  2517,
        14084,  2004,   102])"
1925,0,[], Properties of Negative Binomial Distribution,seg_381,differentiating with respect to t and putting t = 0 gives e(x) = kq∕p.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  2367, 15370,  2007,  4847,  2000,  1056,  1998,  5128,  1056,
         1027,  1014,  3957,  1041,  1006,  1060,  1007,  1027,   100,  1012,
          102])"
1926,0,[], Properties of Negative Binomial Distribution,seg_381,example 6.30 candidate interviews,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([ 101, 2742, 1020, 1012, 2382, 4018, 7636,  102])"
1927,1,"['set', 'probability']", Properties of Negative Binomial Distribution,seg_381,"a company requires k candidates with a rare skill set, see figure 6.6 for p = 0.2, 0.8. as there is a scarcity of local candidates perfectly matching the required skill set, the company decides to conduct a walk-in interview until all k candidates have been found. if the probability of a candidate who matches perfectly is p, find the expected number of candidates interviewed, assuming that several candidates whose skill set is not completely matching also walks-in.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1037,  2194,  5942,  1047,  5347,  2007,  1037,  4678,  8066,
         2275,  1010,  2156,  3275,  1020,  1012,  1020,  2005,  1052,  1027,
         1014,  1012,  1016,  1010,  1014,  1012,  1022,  1012,  2004,  2045,
         2003,  1037, 11228, 12972,  1997,  2334,  5347,  6669,  9844,  1996,
         3223,  8066,  2275,  1010,  1996,  2194,  7288,  2000,  6204,  1037,
         3328,  1011,  1999,  4357,  2127,  2035,  1047,  5347,  2031,  2042,
         2179,  1012,  2065,  1996,  9723,  1997,  1037,  4018,  2040,  3503,
         6669,  2003,  1052,  1010,  2424,  1996,  3517,  2193,  1997,  5347,
        10263,  1010, 10262,  2008,  2195,  5347,  3005,  8066,  2275,  2003,
         2025,  3294,  9844,  2036,  7365,  1011,  1999,  1012,   102])"
1928,1,"['set', 'probability', 'negative binomial', 'distribution', 'parameters', 'binomial']", Properties of Negative Binomial Distribution,seg_381,"solution 6.30 we are given that the probability of perfect match is p. each interviewed candidate is either rejected if the skill set is not 100% match or hired. as the company needs k such candidates, the distribution of finding all k candidates is negative binomial with parameters (k,p). the expected number of candidates is kq∕p. owing to the rarity of the sought skill set, p is small so that q∕p is large. for instance, if p = 0.1, q∕p = 9 and if p = 0.005, q∕p = 199.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  5576,  1020,  1012,  2382,  2057,  2024,  2445,  2008,  1996,
         9723,  1997,  3819,  2674,  2003,  1052,  1012,  2169, 10263,  4018,
         2003,  2593,  5837,  2065,  1996,  8066,  2275,  2003,  2025,  2531,
         1003,  2674,  2030,  5086,  1012,  2004,  1996,  2194,  3791,  1047,
         2107,  5347,  1010,  1996,  4353,  1997,  4531,  2035,  1047,  5347,
         2003,  4997,  8026, 20936,  2389,  2007, 11709,  1006,  1047,  1010,
         1052,  1007,  1012,  1996,  3517,  2193,  1997,  5347,  2003,   100,
         1012, 11427,  2000,  1996, 10958, 15780,  1997,  1996,  4912,  8066,
         2275,  1010,  1052,  2003,  2235,  2061,  2008,   100,  2003,  2312,
         1012,  2005,  6013,  1010,  2065,  1052,  1027,  1014,  1012,  1015,
         1010,   100,  1027,  1023,  1998,  2065,  1052,  1027,  1014,  1012,
         4002,  2629,  1010,   100,  1027, 20713,  1012,   102])"
1929,1,"['factorial moment', 'factorial moments', 'moment', 'falling factorial', 'moments', 'factorial']", Properties of Negative Binomial Distribution,seg_381,6.8.1.1 factorial moments the falling factorial moments are easier to find than ordinary moments. let  (r) denote the rth factorial moment.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1020,  1012,  1022,  1012,  1015,  1012,  1015,  5387,  4818,
         5312,  1996,  4634,  5387,  4818,  5312,  2024,  6082,  2000,  2424,
         2084,  6623,  5312,  1012,  2292,  1006,  1054,  1007, 19090,  1996,
        19387,  2232,  5387,  4818,  2617,  1012,   102])"
1930,1,"['factorial moment', 'moment', 'moment ', 'factorial']", Properties of Negative Binomial Distribution,seg_381,theorem 6.6 the factorial moment  (r) is given by  (r) = k(r) (q∕p)r.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([ 101, 9872, 1020, 1012, 1020, 1996, 5387, 4818, 2617, 1006, 1054, 1007,
        2003, 2445, 2011, 1006, 1054, 1007, 1027, 1047, 1006, 1054, 1007, 1006,
         100, 1007, 1054, 1012,  102])"
1931,1,['range'], Properties of Negative Binomial Distribution,seg_381,k+x−1 over the proper range of x to get the rhs as ∑xx(x − 1) … (x − r + 1)( x ) pkqx.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1047,  1009,  1060, 27944,  2058,  1996,  5372,  2846,  1997,
         1060,  2000,  2131,  1996,  1054,  7898,  2004,   100,  1006,  1060,
         1597,  1015,  1007,  1529,  1006,  1060,  1597,  1054,  1009,  1015,
         1007,  1006,  1060,  1007,  1052,  2243,  4160,  2595,  1012,   102])"
1932,0,[], Properties of Negative Binomial Distribution,seg_381,put y = x − r in equation (6.103) and rearrange the indexvar. this gives,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  2404,  1061,  1027,  1060,  1597,  1054,  1999,  8522,  1006,
         1020,  1012,  9800,  1007,  1998,  4373, 24388,  2063,  1996,  5950,
        10755,  1012,  2023,  3957,   102])"
1933,1,"['gamma', 'function', 'gamma function']", Properties of Negative Binomial Distribution,seg_381,"the infinite sum in equation (6.104) is easily seen to be (1 − q)−(k+r). as (1 − q) = p, the pk cancels out giving  (r) = e[x(r)] = k(r)(q∕p)r. this can be written in terms of gamma function as  (r) = [γ(k + r)∕γ(k)] (q∕p)r.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996, 10709,  7680,  1999,  8522,  1006,  1020,  1012,  9645,
         1007,  2003,  4089,  2464,  2000,  2022,  1006,  1015,  1597,  1053,
         1007,  1597,  1006,  1047,  1009,  1054,  1007,  1012,  2004,  1006,
         1015,  1597,  1053,  1007,  1027,  1052,  1010,  1996,  1052,  2243,
        17542,  2015,  2041,  3228,  1006,  1054,  1007,  1027,  1041,  1031,
         1060,  1006,  1054,  1007,  1033,  1027,  1047,  1006,  1054,  1007,
         1006,   100,  1007,  1054,  1012,  2023,  2064,  2022,  2517,  1999,
         3408,  1997, 13091,  3853,  2004,  1006,  1054,  1007,  1027,  1031,
         1157,  1006,  1047,  1009,  1054,  1007,   100,  1006,  1047,  1007,
         1033,  1006,   100,  1007,  1054,  1012,   102])"
1934,1,"['incomplete beta', 'binomial distribution', 'negative binomial distribution', 'tail areas', 'beta function', 'poisson', 'binomial', 'parameter', 'function', 'binomial distributions', 'negative binomial', 'tail', 'distributions', 'incomplete beta function', 'distribution', 'f distribution']", Properties of Negative Binomial Distribution,seg_381,"6.8.1.2 relationship with other distributions tail areas of binomial and negative binomial distributions are related. consider equation (6.101). then pr[y ≥ n − c] = pr[x ≤ c], where x is distributed as bino(n, p) and y as nbino(c, p). as k → ∞ and p →1 such that k(1 − p) is a constant, the negative binomial distribution approaches a poisson law with parameter = k(1 − p). similarly, nbino(k, p∕k) as k → ∞ tends to the poisson law exp(− ) x∕x! [121] with complexity o(kq2∕2). this means that “the negative binomial distribution tends to the poisson law when p →1 faster than k → ∞.” if k is an integer or a half-integer, the sf can be written as pr[y y] = i1−p(y, k), where i(a, b) denotes the incomplete beta function. this can also be written in terms of an f distribution as pr[y y] = ft(2k, 2y) where t = p ∗ y∕(q ∗ k).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1.,
        0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1020,  1012,  1022,  1012,  1015,  1012,  1016,  3276,  2007,
         2060, 20611,  5725,  2752,  1997,  8026, 20936,  2389,  1998,  4997,
         8026, 20936,  2389, 20611,  2024,  3141,  1012,  5136,  8522,  1006,
         1020,  1012,  7886,  1007,  1012,  2059, 10975,  1031,  1061,  1609,
         1050,  1597,  1039,  1033,  1027, 10975,  1031,  1060,  1608,  1039,
         1033,  1010,  2073,  1060,  2003,  5500,  2004,  8026,  2080,  1006,
         1050,  1010,  1052,  1007,  1998,  1061,  2004,  1050, 21891,  1006,
         1039,  1010,  1052,  1007,  1012,  2004,  1047,  1585,  1601,  1998,
         1052,  1585,  2487,  2107,  2008,  1047,  1006,  1015,  1597,  1052,
         1007,  2003,  1037,  5377,  1010,  1996,  4997,  8026, 20936,  2389,
         4353,  8107,  1037, 13433, 24077,  2375,  2007, 16381,  1027,  1047,
         1006,  1015,  1597,  1052,  1007,  1012,  6660,  1010,  1050, 21891,
         1006,  1047,  1010,   100,  1007,  2004,  1047,  1585,  1601, 12102,
         2000,  1996, 13433, 24077,  2375,  4654,  2361,  1006,  1597,  1007,
          100,   999,  1031, 12606,  1033,  2007, 11619,  1051,  1006,   100,
         1007,  1012,  2023,  2965,  2008,  1523,  1996,  4997,  8026, 20936,
         2389,  4353, 12102,  2000,  1996, 13433, 24077,  2375,  2043,  1052,
         1585,  2487,  5514,  2084,  1047,  1585,  1601,  1012,  1524,  2065,
         1047,  2003,  2019, 16109,  2030,  1037,  2431,  1011, 16109,  1010,
         1996, 16420,  2064,  2022,  2517,  2004, 10975,  1031,  1061,  1061,
         1033,  1027,  1045,  2487, 22543,  2361,  1006,  1061,  1010,  1047,
         1007,  1010,  2073,  1045,  1006,  1037,  1010,  1038,  1007, 14796,
         1996, 12958,  8247,  3853,  1012,  2023,  2064,  2036,  2022,  2517,
         1999,  3408,  1997,  2019,  1042,  4353,  2004, 10975,  1031,  1061,
         1061,  1033,  1027,  3027,  1006,  1016,  2243,  1010,  1016,  2100,
         1007,  2073,  1056,  1027,  1052,  1598,   100,  1006,  1053,  1598,
         1047,  1007,  1012,   102])"
1935,1,"['negative binomial distribution', 'parameter', 'negative binomial', 'distributions', 'independent', 'geometric distributions', 'distribution', 'geometric', 'binomial', 'binomial distribution']", Properties of Negative Binomial Distribution,seg_381,"proposition 1 the negative binomial distribution can be regarded as a sum of k independent geometric distributions with the same parameter p. we know from section 6.7.0.2 in p. 216 that the mgf of a geo(p) distribution is given by mx(t) = p∕(1 − qet). hence, the mgf of k iid geo(p) is given by my (t) = [p∕(1 − qet)]k.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101, 14848,  1015,  1996,  4997,  8026, 20936,  2389,  4353,  2064,
         2022,  5240,  2004,  1037,  7680,  1997,  1047,  2981, 14965, 20611,
         2007,  1996,  2168, 16381,  1052,  1012,  2057,  2113,  2013,  2930,
         1020,  1012,  1021,  1012,  1014,  1012,  1016,  1999,  1052,  1012,
        20294,  2008,  1996, 11460,  2546,  1997,  1037, 20248,  1006,  1052,
         1007,  4353,  2003,  2445,  2011, 25630,  1006,  1056,  1007,  1027,
          100,  1006,  1015,  1597,  1053,  3388,  1007,  1012,  6516,  1010,
         1996, 11460,  2546,  1997,  1047,  2462,  2094, 20248,  1006,  1052,
         1007,  2003,  2445,  2011,  2026,  1006,  1056,  1007,  1027,  1031,
          100,  1006,  1015,  1597,  1053,  3388,  1007,  1033,  1047,  1012,
          102])"
1936,1,"['poisson', 'gamma mixture of the poisson parameter', 'gamma', 'parameter']", Properties of Negative Binomial Distribution,seg_381,example 6.31 gamma mixture of the poisson parameter,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  2742,  1020,  1012,  2861, 13091,  8150,  1997,  1996, 13433,
        24077, 16381,   102])"
1937,1,"['poisson', 'parameter', 'distribution']", Properties of Negative Binomial Distribution,seg_381,"prove that a gamma(m, p) mixture of the poisson parameter ( ) gives rise to a nbino(p,m∕(m + 1)) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  6011,  2008,  1037, 13091,  1006,  1049,  1010,  1052,  1007,
         8150,  1997,  1996, 13433, 24077, 16381,  1006,  1007,  3957,  4125,
         2000,  1037,  1050, 21891,  1006,  1052,  1010,   100,  1006,  1049,
         1009,  1015,  1007,  1007,  4353,  1012,   102])"
1938,1,"['poisson', 'gamma', 'variates']", Properties of Negative Binomial Distribution,seg_381,"solution 6.31 the pdf of poisson and gamma variates are, respectively,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  5576,  1020,  1012,  2861,  1996, 11135,  1997, 13433, 24077,
         1998, 13091, 13075, 13143,  2015,  2024,  1010,  4414,  1010,   102])"
1939,1,['distribution'], Properties of Negative Binomial Distribution,seg_381,the unconditional distribution is obtained as f (x) =,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  4895,  8663, 27064,  4353,  2003,  4663,  2004,  1042,
         1006,  1060,  1007,  1027,   102])"
1940,0,[], Properties of Negative Binomial Distribution,seg_381,this upon rearrangement becomes,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  2023,  2588,  4373, 24388, 13665,  4150,   102])"
1941,1,"['binomial', 'variance', 'negative binomial']", Properties of Negative Binomial Distribution,seg_381,example 6.32 variance of negative binomial,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  2742,  1020,  1012,  3590, 23284,  1997,  4997,  8026, 20936,
         2389,   102])"
1942,1,"['mean', 'variance', 'negative binomial', 'random', 'binomial']", Properties of Negative Binomial Distribution,seg_381,prove that the ratio of variance to the mean of a negative binomial random variable is 1∕p.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  6011,  2008,  1996,  6463,  1997, 23284,  2000,  1996,  2812,
         1997,  1037,  4997,  8026, 20936,  2389,  6721,  8023,  2003,   100,
         1012,   102])"
1943,1,"['parameter', 'mean', 'limit', 'variance']", Properties of Negative Binomial Distribution,seg_381,"solution 6.32 we know that the variance is given by v(r, p) = kq∕p2. obviously, this can be increased by increasing the parameter k without limit. as the mean is kq∕p, the ratio of variance to the mean is (kq∕p2)/(kq∕p) = 1∕p, which is obviously greater than 1 (as 0 p 1). this gives p ∗ 2 = .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  5576,  1020,  1012,  3590,  2057,  2113,  2008,  1996, 23284,
         2003,  2445,  2011,  1058,  1006,  1054,  1010,  1052,  1007,  1027,
          100,  1012,  5525,  1010,  2023,  2064,  2022,  3445,  2011,  4852,
         1996, 16381,  1047,  2302,  5787,  1012,  2004,  1996,  2812,  2003,
          100,  1010,  1996,  6463,  1997, 23284,  2000,  1996,  2812,  2003,
         1006,   100,  1007,  1013,  1006,   100,  1007,  1027,   100,  1010,
         2029,  2003,  5525,  3618,  2084,  1015,  1006,  2004,  1014,  1052,
         1015,  1007,  1012,  2023,  3957,  1052,  1598,  1016,  1027,  1012,
          102])"
1944,1,"['negative binomial distribution', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", Properties of Negative Binomial Distribution,seg_381,find the md of negative binomial distribution using theorem 6.1 (p. 189).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  2424,  1996,  9108,  1997,  4997,  8026, 20936,  2389,  4353,
         2478,  9872,  1020,  1012,  1015,  1006,  1052,  1012, 20500,  1007,
         1012,   102])"
1945,1,"['negative binomial distribution', 'mean', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", Properties of Negative Binomial Distribution,seg_381,"solution 6.33 we know that the mean of negative binomial distribution is   = kq/p. using theorem 6.1, the md is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  5576,  1020,  1012,  3943,  2057,  2113,  2008,  1996,  2812,
         1997,  4997,  8026, 20936,  2389,  4353,  2003,  1027,  1047,  4160,
         1013,  1052,  1012,  2478,  9872,  1020,  1012,  1015,  1010,  1996,
         9108,  2003,  2445,  2011,   102])"
1946,1,"['incomplete beta', 'function', 'beta function', 'incomplete beta function']", Properties of Negative Binomial Distribution,seg_381,"k+c−1 where i(a, b) is the incomplete beta function. this simplifies to 2c( c )",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101,  1047,  1009,  1039, 27944,  2073,  1045,  1006,  1037,  1010,
         1038,  1007,  2003,  1996, 12958,  8247,  3853,  1012,  2023, 21934,
        24759, 14144,  2000,  1016,  2278,  1006,  1039,  1007,   102])"
1947,1,"['probability', 'mean', 'integer part']", Properties of Negative Binomial Distribution,seg_381,"qcpk−1 = 2 2 ∗ fc, where fc is the probability mass evaluated at the integer part of the mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0.])","tensor([ 5144,  1997,  4997,  8026, 20936,  2389,  4353])","tensor([  101, 25196,  2361,  2243, 27944,  1027,  1016,  1016,  1598,  4429,
         1010,  2073,  4429,  2003,  1996,  9723,  3742, 16330,  2012,  1996,
        16109,  2112,  1997,  1996,  2812,  1012,   102])"
1948,1,"['recurrence', 'moments']", Moment Recurrence,seg_383,the central moments satisfy the recurrence,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 0.])","tensor([ 2617, 28667,  3126, 24413])","tensor([  101,  1996,  2430,  5312, 13225,  1996, 28667,  3126, 24413,   102])"
1949,1,['independent'], Moment Recurrence,seg_383,"k+x−1 as ( x ) is independent of p, and q = 1 − p, write the aforementioned as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413])","tensor([  101,  1047,  1009,  1060, 27944,  2004,  1006,  1060,  1007,  2003,
         2981,  1997,  1052,  1010,  1998,  1053,  1027,  1015,  1597,  1052,
         1010,  4339,  1996, 17289,  2004,   102])"
1950,1,['function'], Moment Recurrence,seg_383,differentiate the expression within the curly brackets with respect to p using the function of a function rule to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413])","tensor([  101, 21032,  1996,  3670,  2306,  1996, 17546, 19719,  2007,  4847,
         2000,  1052,  2478,  1996,  3853,  1997,  1037,  3853,  3627,  2000,
         2131,   102])"
1951,0,[], Moment Recurrence,seg_383,combine the last two terms as [k(1 − p) − px] = −p(x − k(1 − p)∕p) = −p(x + k − k∕p) to get −p (x + k − k∕p)r+1pk−1(1 − p)x−1. multiply and divide by pq and combine the terms as −(1∕q) (x + k − k∕p)r+1pk(1 − p)x. this gives,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413])","tensor([  101, 11506,  1996,  2197,  2048,  3408,  2004,  1031,  1047,  1006,
         1015,  1597,  1052,  1007,  1597,  1052,  2595,  1033,  1027,  1597,
         2361,  1006,  1060,  1597,  1047,  1006,  1015,  1597,  1052,  1007,
          100,  1007,  1027,  1597,  2361,  1006,  1060,  1009,  1047,  1597,
          100,  1007,  2000,  2131,  1597,  2361,  1006,  1060,  1009,  1047,
         1597,   100,  1007,  1054,  1009,  1015,  2361,  2243, 27944,  1006,
         1015,  1597,  1052,  1007,  1060, 27944,  1012,  4800, 22086,  1998,
        11443,  2011,  1052,  4160,  1998, 11506,  1996,  3408,  2004,  1597,
         1006,   100,  1007,  1006,  1060,  1009,  1047,  1597,   100,  1007,
         1054,  1009,  1015,  2361,  2243,  1006,  1015,  1597,  1052,  1007,
         1060,  1012,  2023,  3957,   102])"
1952,0,[], Moment Recurrence,seg_383,cross-multiply and rearrange the expressions to get the result.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 28667,  3126, 24413])","tensor([  101,  2892,  1011,  4800, 22086,  1998,  4373, 24388,  2063,  1996,
        11423,  2000,  2131,  1996,  2765,  1012,   102])"
1953,1,"['random', 'random variables', 'variables']", Moment Recurrence,seg_383,"theorem 6.7 additivity theorem: if x1 ∼ nb(n1, p) and x2 ∼ nb(n2, p) are independent nb random variables, then x1 + x2 ∼ nb(n1 + n2, p)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413])","tensor([  101,  9872,  1020,  1012,  1021,  5587, 25090, 24872,  9872,  1024,
         2065,  1060,  2487,   100,  1050,  2497,  1006,  1050,  2487,  1010,
         1052,  1007,  1998,  1060,  2475,   100,  1050,  2497,  1006,  1050,
         2475,  1010,  1052,  1007,  2024,  2981,  1050,  2497,  6721, 10857,
         1010,  2059,  1060,  2487,  1009,  1060,  2475,   100,  1050,  2497,
         1006,  1050,  2487,  1009,  1050,  2475,  1010,  1052,  1007,   102])"
1954,1,['method'], Moment Recurrence,seg_383,"proof: this is most easily proved by the mgf method. we have seen in equation 6.103 that mgf is [p∕(1 − qet)]k. as p is the same, replace k by n1 and n2 and take the product to get the result. this result can be extended to any number of nbin(ri, p) as follows: if xi ∼ nbin(ri, p), then ∑ixi ∼ nbin(∑iri, p). the pgf is obtained by replacing et by t.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 2617, 28667,  3126, 24413])","tensor([  101,  6947,  1024,  2023,  2003,  2087,  4089,  4928,  2011,  1996,
        11460,  2546,  4118,  1012,  2057,  2031,  2464,  1999,  8522,  1020,
         1012,  9800,  2008, 11460,  2546,  2003,  1031,   100,  1006,  1015,
         1597,  1053,  3388,  1007,  1033,  1047,  1012,  2004,  1052,  2003,
         1996,  2168,  1010,  5672,  1047,  2011,  1050,  2487,  1998,  1050,
         2475,  1998,  2202,  1996,  4031,  2000,  2131,  1996,  2765,  1012,
         2023,  2765,  2064,  2022,  3668,  2000,  2151,  2193,  1997,  1050,
         8428,  1006, 15544,  1010,  1052,  1007,  2004,  4076,  1024,  2065,
         8418,   100,  1050,  8428,  1006, 15544,  1010,  1052,  1007,  1010,
         2059,   100,   100,  1050,  8428,  1006,   100,  1010,  1052,  1007,
         1012,  1996, 18720,  2546,  2003,  4663,  2011,  6419,  3802,  2011,
         1056,  1012,   102])"
1955,1,"['incomplete beta', 'tail', 'function', 'table', 'probabilities', 'beta function', 'tail probabilities', 'random', 'incomplete beta function', 'distribution', 'binomial', 'binomial distribution']", Tail Probabilities,seg_385,"as the random variate extends to ∞, the right-tail probabilities are more challenging to evaluate (table 6.10 and figure 6.6). the left-tail probabilities of nbin(r, p) are related to the right-tail probabilities of binomial distribution as fk(r, p) = p(x ≤ k) = p(y ≥ r) = 1-bino(k + r, p). the upper tail probabilities of an nb distribution can be expressed in terms of the incomplete beta function as",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2004,  1996,  6721, 13075, 13143,  8908,  2000,  1601,  1010,
         1996,  2157,  1011,  5725,  4013,  3676, 14680,  2024,  2062, 10368,
         2000, 16157,  1006,  2795,  1020,  1012,  2184,  1998,  3275,  1020,
         1012,  1020,  1007,  1012,  1996,  2187,  1011,  5725,  4013,  3676,
        14680,  1997,  1050,  8428,  1006,  1054,  1010,  1052,  1007,  2024,
         3141,  2000,  1996,  2157,  1011,  5725,  4013,  3676, 14680,  1997,
         8026, 20936,  2389,  4353,  2004, 14352,  1006,  1054,  1010,  1052,
         1007,  1027,  1052,  1006,  1060,  1608,  1047,  1007,  1027,  1052,
         1006,  1061,  1609,  1054,  1007,  1027,  1015,  1011,  8026,  2080,
         1006,  1047,  1009,  1054,  1010,  1052,  1007,  1012,  1996,  3356,
         5725,  4013,  3676, 14680,  1997,  2019,  1050,  2497,  4353,  2064,
         2022,  5228,  1999,  3408,  1997,  1996, 12958,  8247,  3853,  2004,
          102])"
1956,1,"['tail', 'tail probabilities', 'complement', 'probabilities']", Tail Probabilities,seg_385,the lower tail probabilities can be found from the complement rule as,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  1996,  2896,  5725,  4013,  3676, 14680,  2064,  2022,  2179,
         2013,  1996, 13711,  3627,  2004,   102])"
1957,1,"['tail', 'f distribution', 'tail areas', 'distribution']", Tail Probabilities,seg_385,this can also be expressed as tail areas of an f distribution (a. meyer [141]; see also guenther [142].,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2023,  2064,  2036,  2022,  5228,  2004,  5725,  2752,  1997,
         2019,  1042,  4353,  1006,  1037,  1012, 11527,  1031, 15471,  1033,
         1025,  2156,  2036, 19739,  4765,  5886,  1031, 16087,  1033,  1012,
          102])"
1958,1,"['probabilities', 'binomial', 'negative binomial']", Tail Probabilities,seg_385,example 6.34 negative binomial probabilities,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 1., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2742,  1020,  1012,  4090,  4997,  8026, 20936,  2389,  4013,
         3676, 14680,   102])"
1959,0,[], Tail Probabilities,seg_385,"if x∼ nbin (r, p), find the following probabilities:– (i) x takes even values and (ii) x takes odd values",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2065,   100,  1050,  8428,  1006,  1054,  1010,  1052,  1007,
         1010,  2424,  1996,  2206,  4013,  3676, 14680,  1024,  1516,  1006,
         1045,  1007,  1060,  3138,  2130,  5300,  1998,  1006,  2462,  1007,
         1060,  3138,  5976,  5300,   102])"
1960,1,['coefficients'], Tail Probabilities,seg_385,this can be simplified and expanded into an even polynomial in t with the corresponding coefficients giving the desired sum. (ii) the pgf for x taking odd values is 1 2 [px(t) − px(−t)]. substitute for px(t) to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2023,  2064,  2022, 11038,  1998,  4423,  2046,  2019,  2130,
        17505,  1999,  1056,  2007,  1996,  7978, 21374,  3228,  1996,  9059,
         7680,  1012,  1006,  2462,  1007,  1996, 18720,  2546,  2005,  1060,
         2635,  5976,  5300,  2003,  1015,  1016,  1031,  1052,  2595,  1006,
         1056,  1007,  1597,  1052,  2595,  1006,  1597,  2102,  1007,  1033,
         1012,  7681,  2005,  1052,  2595,  1006,  1056,  1007,  2000,  2131,
          102])"
1961,1,"['coefficients', 'probabilities']", Tail Probabilities,seg_385,proceed as above and expand as an odd polynomial in t whose coefficients give desired probabilities.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0.])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101, 10838,  2004,  2682,  1998,  7818,  2004,  2019,  5976, 17505,
         1999,  1056,  3005, 21374,  2507,  9059,  4013,  3676, 14680,  1012,
          102])"
1962,0,[], Tail Probabilities,seg_385,see references 143 and 144 for a generalizations and reference 145 for mle.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5725,  4013,  3676, 14680])","tensor([  101,  2156,  7604, 16065,  1998, 14748,  2005,  1037,  2236, 22318,
         1998,  4431, 13741,  2005, 19875,  2063,  1012,   102])"
1963,1,"['interval', 'events', 'poisson', 'random', 'intervals', 'model', 'distribution', 'poisson distribution', 'discrete']", POISSON DISTRIBUTION,seg_387,"the poisson distribution was invented by s.d. poisson (1781–1840) in 1838 as counts (arrivals) of random discrete occurrences in a fixed time interval. it can be used to model temporal, spatial or spatiotemporal rare events that are open-ended. for example, it is used to predict the number of telephone calls received in a small time interval, number of accidents in a time period, number of automobiles coming at a gas station, number of natural disasters (like earthquakes) in a year, and so on. these are all temporal models with different time intervals. examples of spatial frame of reference include predicting defects in newly manufactured items such as clothing sheets, paper rolls or newsprints, cables and wires, and micro-chips. spatiotemporal applications include predicting earthquakes and tsunamis in a particular region over a time period, outbreak of epidemics in a geographical region over a time period, and so on. it is also used in many engineering fields. the unit of the time period in these",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  1996, 13433, 24077,  4353,  2001,  8826,  2011,  1055,  1012,
         1040,  1012, 13433, 24077,  1006, 16788,  1516,  8905,  1007,  1999,
         9931,  2004,  9294,  1006, 25470,  1007,  1997,  6721, 16246, 27247,
         1999,  1037,  4964,  2051, 13483,  1012,  2009,  2064,  2022,  2109,
         2000,  2944, 15850,  1010, 13589,  2030, 14690, 25185,  6633, 17822,
         2389,  4678,  2824,  2008,  2024,  2330,  1011,  3092,  1012,  2005,
         2742,  1010,  2009,  2003,  2109,  2000, 16014,  1996,  2193,  1997,
         7026,  4455,  2363,  1999,  1037,  2235,  2051, 13483,  1010,  2193,
         1997, 13436,  1999,  1037,  2051,  2558,  1010,  2193,  1997, 19207,
         2746,  2012,  1037,  3806,  2276,  1010,  2193,  1997,  3019, 18665,
         1006,  2066, 17932,  1007,  1999,  1037,  2095,  1010,  1998,  2061,
         2006,  1012,  2122,  2024,  2035, 15850,  4275,  2007,  2367,  2051,
        14025,  1012,  4973,  1997, 13589,  4853,  1997,  4431,  2421, 29458,
        18419,  1999,  4397,  7609,  5167,  2107,  2004,  5929,  8697,  1010,
         3259,  9372,  2030,  2739, 16550,  2015,  1010, 15196,  1998, 14666,
         1010,  1998, 12702,  1011, 11772,  1012, 14690, 25185,  6633, 17822,
         2389,  5097,  2421, 29458, 17932,  1998, 19267,  2015,  1999,  1037,
         3327,  2555,  2058,  1037,  2051,  2558,  1010,  8293,  1997, 16311,
         2015,  1999,  1037, 10056,  2555,  2058,  1037,  2051,  2558,  1010,
         1998,  2061,  2006,  1012,  2009,  2003,  2036,  2109,  1999,  2116,
         3330,  4249,  1012,  1996,  3131,  1997,  1996,  2051,  2558,  1999,
         2122,   102])"
1964,1,['poisson'], POISSON DISTRIBUTION,seg_387,cases is implicitly assumed by the modeler. a wrong choice of the time period may lead to convoluted poisson models.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  3572,  2003, 24655,  2135,  5071,  2011,  1996,  2944,  2121,
         1012,  1037,  3308,  3601,  1997,  1996,  2051,  2558,  2089,  2599,
         2000,  9530,  6767,  7630,  3064, 13433, 24077,  4275,  1012,   102])"
1965,0,[], POISSON DISTRIBUTION,seg_387,the pdf is given by,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([13433, 24077,  4353])","tensor([  101,  1996, 11135,  2003,  2445,  2011,   102])"
1966,1,['range'], POISSON DISTRIBUTION,seg_387,"where e is the natural logarithm. obviously, summing over the range of x values",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([ 101, 2073, 1041, 2003, 1996, 3019, 8833, 8486, 2705, 2213, 1012, 5525,
        1010, 7680, 6562, 2058, 1996, 2846, 1997, 1060, 5300,  102])"
1967,1,"['function', 'exponential']", POISSON DISTRIBUTION,seg_387,"∞ =0 e−  x∕x! = e− (1 +   +  2∕2! + · · · ) = e− e  = 1, where the indexvar is varied as an exponent and a function. it belongs to the exponential family.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  1601,  1027,  1014,  1041, 22543,   100,   999,  1027,  1041,
        22543,  1006,  1015,  1009,  1009,   100,   999,  1009,  1087,  1087,
         1087,  1007,  1027,  1041, 22543,  1041,  1027,  1015,  1010,  2073,
         1996,  5950, 10755,  2003,  9426,  2004,  2019, 16258, 21576,  1998,
         1037,  3853,  1012,  2009,  7460,  2000,  1996, 27258,  2155,  1012,
          102])"
1968,1,"['cases', 'case', 'probability', 'approximation', 'probability of success', 'trials', 'poisson', 'condition', 'distribution', 'binomial', 'data', 'success', 'binomial distribution']", POISSON DISTRIBUTION,seg_387,"it can be considered as the limiting case of a binomial distribution as shown in section 6.5.8 in page 6–37. most of the textbooks give this limiting behavior as follows: “when n, the number of trials is large, and p, the probability of success is small, such that np remains a constant , then bino(n, p) → pois( ).” johnson et al. [123, 306] mentions in page 152 that “it is the largeness of n and smallness of p that are important.” the product = np can remain a constant in two limiting cases: (i) n → ∞ faster than p → 0 and (ii) p → 0 faster than n → ∞. as shown in section 6.5.8, this limiting property is valid only when np remains finite, and np2∕2 and higher order terms are negligible. we give the revised rule that “the binomial distribution tends to the poisson law when p tends to zero faster than n tends to infinity.” thus, the poisson approximation is valid even for low values of n, provided that p is comparatively very small. in most practical applications, the value of n is at the hands of a researcher, and the value of p is observed from the data. when p is near 0.5, the above-mentioned condition may not hold. in such cases, a correction term is needed to get higher accuracy for the approximation. consider equation (6.72) in page 6–38, which is reproduced in the following:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101,  2009,  2064,  2022,  2641,  2004,  1996, 14879,  2553,  1997,
         1037,  8026, 20936,  2389,  4353,  2004,  3491,  1999,  2930,  1020,
         1012,  1019,  1012,  1022,  1999,  3931,  1020,  1516,  4261,  1012,
         2087,  1997,  1996, 18841,  2507,  2023, 14879,  5248,  2004,  4076,
         1024,  1523,  2043,  1050,  1010,  1996,  2193,  1997,  7012,  2003,
         2312,  1010,  1998,  1052,  1010,  1996,  9723,  1997,  3112,  2003,
         2235,  1010,  2107,  2008, 27937,  3464,  1037,  5377,  1010,  2059,
         8026,  2080,  1006,  1050,  1010,  1052,  1007,  1585, 13433,  2483,
         1006,  1007,  1012,  1524,  3779,  3802,  2632,  1012,  1031, 13138,
         1010, 24622,  1033,  9704,  1999,  3931, 15017,  2008,  1523,  2009,
         2003,  1996,  2312,  2791,  1997,  1050,  1998,  2235,  2791,  1997,
         1052,  2008,  2024,  2590,  1012,  1524,  1996,  4031,  1027, 27937,
         2064,  3961,  1037,  5377,  1999,  2048, 14879,  3572,  1024,  1006,
         1045,  1007,  1050,  1585,  1601,  5514,  2084,  1052,  1585,  1014,
         1998,  1006,  2462,  1007,  1052,  1585,  1014,  5514,  2084,  1050,
         1585,  1601,  1012,  2004,  3491,  1999,  2930,  1020,  1012,  1019,
         1012,  1022,  1010,  2023, 14879,  3200,  2003,  9398,  2069,  2043,
        27937,  3464, 10713,  1010,  1998,   100,  1998,  3020,  2344,  3408,
         2024, 11265, 25394, 18507,  1012,  2057,  2507,  1996,  8001,  3627,
         2008,  1523,  1996,  8026, 20936,  2389,  4353, 12102,  2000,  1996,
        13433, 24077,  2375,  2043,  1052, 12102,  2000,  5717,  5514,  2084,
         1050, 12102,  2000, 15579,  1012,  1524,  2947,  1010,  1996, 13433,
        24077, 20167,  2003,  9398,  2130,  2005,  2659,  5300,  1997,  1050,
         1010,  3024,  2008,  1052,  2003, 20172,  2200,  2235,  1012,  1999,
         2087,  6742,  5097,  1010,  1996,  3643,  1997,  1050,  2003,  2012,
         1996,  2398,  1997,  1037, 10753,  1010,  1998,  1996,  3643,  1997,
         1052,  2003,  5159,  2013,  1996,  2951,  1012,  2043,  1052,  2003,
         2379,  1014,  1012,  1019,  1010,  1996,  2682,  1011,  3855,  4650,
         2089,  2025,  2907,  1012,  1999,  2107,  3572,  1010,  1037, 18140,
         2744,  2003,  2734,  2000,  2131,  3020, 10640,  2005,  1996, 20167,
         1012,  5136,  8522,  1006,  1020,  1012,  5824,  1007,  1999,  3931,
         1020,  1516,  4229,  1010,  2029,  2003, 22296,  1999,  1996,  2206,
         1024,   102])"
1969,0,[], POISSON DISTRIBUTION,seg_387,"keeping first term intact, and collecting constant terms from the rest, we get the rhs as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13433, 24077,  4353])","tensor([  101,  4363,  2034,  2744, 10109,  1010,  1998,  9334,  5377,  3408,
         2013,  1996,  2717,  1010,  2057,  2131,  1996,  1054,  7898,  2004,
          102])"
1970,1,"['poisson', 'poisson distribution', 'distribution']", POISSON DISTRIBUTION,seg_387,"exponentiating lhs and rhs, we see that the first term becomes the pgf of the poisson distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([13433, 24077,  4353])","tensor([  101, 16258, 21576, 15370,  1048,  7898,  1998,  1054,  7898,  1010,
         2057,  2156,  2008,  1996,  2034,  2744,  4150,  1996, 18720,  2546,
         1997,  1996, 13433, 24077,  4353,  1012,   102])"
1971,1,"['mean', 'parameter', 'variance', 'distributions', 'distribution', 'noncentral']", Properties of Poisson Distribution,seg_389,"this distribution has a single parameter  , which is both the mean and variance of the distribution. it is easy to compute for small   values. it is an excellent choice for forming mixture distributions (like noncentral  2 distribution).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2023,  4353,  2038,  1037,  2309, 16381,  1010,  2029,  2003,
         2119,  1996,  2812,  1998, 23284,  1997,  1996,  4353,  1012,  2009,
         2003,  3733,  2000, 24134,  2005,  2235,  5300,  1012,  2009,  2003,
         2019,  6581,  3601,  2005,  5716,  8150, 20611,  1006,  2066,  2512,
        13013,  7941,  1016,  4353,  1007,  1012,   102])"
1972,1,"['poisson', 'random', 'random variables', 'variables', 'independent']", Properties of Poisson Distribution,seg_389,the difference of two independent poisson random variables has the skellam distribution with pdf (see figure 6.5),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  1996,  4489,  1997,  2048,  2981, 13433, 24077,  6721, 10857,
         2038,  1996, 15315,  8411,  2213,  4353,  2007, 11135,  1006,  2156,
         3275,  1020,  1012,  1019,  1007,   102])"
1973,1,"['modified bessel function', 'function', 'bessel function']", Properties of Poisson Distribution,seg_389,where ix() is the modified bessel function of the first kind.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2073, 11814,  1006,  1007,  2003,  1996,  6310,  2022, 21218,
         3853,  1997,  1996,  2034,  2785,  1012,   102])"
1974,1,"['moments', 'moment']", Properties of Poisson Distribution,seg_389,6.9.1.1 moments and mgf the first moment is readily obtained as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  1020,  1012,  1023,  1012,  1015,  1012,  1015,  5312,  1998,
        11460,  2546,  1996,  2034,  2617,  2003, 12192,  4663,  2004,   102])"
1975,1,"['moment', 'second moment']", Properties of Poisson Distribution,seg_389,"using em ∗ en = em+n, the aforementioned reduces to  . to find the second moment e(x2), write x2 as x ∗ (x − 1) + x to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2478,  7861,  1598,  4372,  1027,  7861,  1009,  1050,  1010,
         1996, 17289, 13416,  2000,  1012,  2000,  2424,  1996,  2117,  2617,
         1041,  1006,  1060,  2475,  1007,  1010,  4339,  1060,  2475,  2004,
         1060,  1598,  1006,  1060,  1597,  1015,  1007,  1009,  1060,  2000,
         2131,   102])"
1976,1,"['factorial moment', 'factorial moments', 'moment', 'variance', 'poisson', 'moments', 'distribution', 'poisson distribution', 'factorial']", Properties of Poisson Distribution,seg_389,"from this, the variance is found as v(x) = e(x2) − e(x)2 = . factorial moments of a poisson distribution are easier to find because of the presence of x! in the denominator of the pdf. the rth factorial moment is",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2013,  2023,  1010,  1996, 23284,  2003,  2179,  2004,  1058,
         1006,  1060,  1007,  1027,  1041,  1006,  1060,  2475,  1007,  1597,
         1041,  1006,  1060,  1007,  1016,  1027,  1012,  5387,  4818,  5312,
         1997,  1037, 13433, 24077,  4353,  2024,  6082,  2000,  2424,  2138,
         1997,  1996,  3739,  1997,  1060,   999,  1999,  1996,  7939, 20936,
        27413,  1997,  1996, 11135,  1012,  1996, 19387,  2232,  5387,  4818,
         2617,  2003,   102])"
1977,1,['moments'], Properties of Poisson Distribution,seg_389,"′ ′ higher order moments can be obtained from this as  2 =  2 +  ,  3 =  3 + 3 2 +  .",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([ 101, 1531, 1531, 3020, 2344, 5312, 2064, 2022, 4663, 2013, 2023, 2004,
        1016, 1027, 1016, 1009, 1010, 1017, 1027, 1017, 1009, 1017, 1016, 1009,
        1012,  102])"
1978,1,"['function', 'moment', 'moment generating function']", Properties of Poisson Distribution,seg_389,6.9.1.2 moment generating function the moment generating function is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  1020,  1012,  1023,  1012,  1015,  1012,  1016,  2617, 11717,
         3853,  1996,  2617, 11717,  3853,  2003,   102])"
1979,1,"['poisson', 'poisson distribution', 'distribution']", Properties of Poisson Distribution,seg_389,example 6.35 mode of poisson distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2742,  1020,  1012,  3486,  5549,  1997, 13433, 24077,  4353,
          102])"
1980,1,"['poisson', 'bimodal', 'poisson distribution', 'distribution']", Properties of Poisson Distribution,seg_389,"prove that the mode of the poisson distribution is ⌊ ⌋ if   is noninteger and is bimodal with the modes located at [  − 1,  ] otherwise.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  6011,  2008,  1996,  5549,  1997,  1996, 13433, 24077,  4353,
         2003,   100,   100,  2065,  2003,  2512, 18447, 26320,  1998,  2003,
        12170,  5302,  9305,  2007,  1996, 11583,  2284,  2012,  1031,  1597,
         1015,  1010,  1033,  4728,  1012,   102])"
1981,1,"['prime number', 'integer part']", Properties of Poisson Distribution,seg_389,"solution 6.35 consider the ratio fx(k,  )∕fx(k − 1,  ) =  ∕k. if k ≤  , the lhs is strictly increasing. otherwise, it is strictly decreasing. if   is integer,  ∕k will assume the last integer value at k =   (if   is a prime number, this occurs only once, but if it is composite, the ratio could be integer for more than one value of k). thus, if   is an integer, the rhs becomes 1 when k =   giving fx( ,  ) = fx(  − 1,  ) (we have simply substituted k =  ). thus, the maximum occurs at k =   − 1 and  . otherwise, there is a single mode at [ ], the integer part.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  5576,  1020,  1012,  3486,  5136,  1996,  6463, 23292,  1006,
         1047,  1010,  1007,   100,  1006,  1047,  1597,  1015,  1010,  1007,
         1027,   100,  1012,  2065,  1047,  1608,  1010,  1996,  1048,  7898,
         2003,  9975,  4852,  1012,  4728,  1010,  2009,  2003,  9975, 16922,
         1012,  2065,  2003, 16109,  1010,   100,  2097,  7868,  1996,  2197,
        16109,  3643,  2012,  1047,  1027,  1006,  2065,  2003,  1037,  3539,
         2193,  1010,  2023,  5158,  2069,  2320,  1010,  2021,  2065,  2009,
         2003, 12490,  1010,  1996,  6463,  2071,  2022, 16109,  2005,  2062,
         2084,  2028,  3643,  1997,  1047,  1007,  1012,  2947,  1010,  2065,
         2003,  2019, 16109,  1010,  1996,  1054,  7898,  4150,  1015,  2043,
         1047,  1027,  3228, 23292,  1006,  1010,  1007,  1027, 23292,  1006,
         1597,  1015,  1010,  1007,  1006,  2057,  2031,  3432, 17316,  1047,
         1027,  1007,  1012,  2947,  1010,  1996,  4555,  5158,  2012,  1047,
         1027,  1597,  1015,  1998,  1012,  4728,  1010,  2045,  2003,  1037,
         2309,  5549,  2012,  1031,  1033,  1010,  1996, 16109,  2112,  1012,
          102])"
1982,0,[], Properties of Poisson Distribution,seg_389,example 6.36 defectives in shipment,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2742,  1020,  1012,  4029, 28829,  2015,  1999, 22613,   102])"
1983,1,"['parameter', 'probability', 'poisson', 'tables']", Properties of Poisson Distribution,seg_389,"consider a collection of items such as light bulbs and transistors, of which some are known to be defective with probability p = 0.001. let the number of defectives in a shipment follow a poisson law with parameter (tables 6.11 and 6.12). how is p and related? what is the probability of finding (i) no defectives and (ii) at least two defective items in a shipment containing 20 items?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  5136,  1037,  3074,  1997,  5167,  2107,  2004,  2422, 25548,
         1998,  9099, 20483,  2869,  1010,  1997,  2029,  2070,  2024,  2124,
         2000,  2022, 28829,  2007,  9723,  1052,  1027,  1014,  1012, 25604,
         1012,  2292,  1996,  2193,  1997, 28829,  2015,  1999,  1037, 22613,
         3582,  1037, 13433, 24077,  2375,  2007, 16381,  1006,  7251,  1020,
         1012,  2340,  1998,  1020,  1012,  2260,  1007,  1012,  2129,  2003,
         1052,  1998,  3141,  1029,  2054,  2003,  1996,  9723,  1997,  4531,
         1006,  1045,  1007,  2053, 28829,  2015,  1998,  1006,  2462,  1007,
         2012,  2560,  2048, 28829,  5167,  1999,  1037, 22613,  4820,  2322,
         5167,  1029,   102])"
1984,1,"['probability', 'complement', 'event']", Properties of Poisson Distribution,seg_389,"solution 6.36 if n is the number of items in the shipment, p and   are related as np =  . to find the probability of at least two defectives, we use the complement-and-conquer rule. the complement event is that of finding",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  5576,  1020,  1012,  4029,  2065,  1050,  2003,  1996,  2193,
         1997,  5167,  1999,  1996, 22613,  1010,  1052,  1998,  2024,  3141,
         2004, 27937,  1027,  1012,  2000,  2424,  1996,  9723,  1997,  2012,
         2560,  2048, 28829,  2015,  1010,  2057,  2224,  1996, 13711,  1011,
         1998,  1011, 16152,  3627,  1012,  1996, 13711,  2724,  2003,  2008,
         1997,  4531,   102])"
1985,1,"['probability', 'complement', 'probabilities']", Properties of Poisson Distribution,seg_389,"either 0 or 1 defective. the corresponding probabilities are e− and e− . as n = 20, n ∗ p = 20 ∗ 0.001 = 0.02. (i) the probability of finding no defectives = e−0.02 = 0.98019867 and (ii) substitute for to get e−0.02 + 0.02 ∗ e−0.02 = 0.9801986 + 0.0196039 = 0.9998 as the complement probability. from this, the required answer follows as 1−0.9998 = 0.0002",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2593,  1014,  2030,  1015, 28829,  1012,  1996,  7978,  4013,
         3676, 14680,  2024,  1041, 22543,  1998,  1041, 22543,  1012,  2004,
         1050,  1027,  2322,  1010,  1050,  1598,  1052,  1027,  2322,  1598,
         1014,  1012, 25604,  1027,  1014,  1012,  6185,  1012,  1006,  1045,
         1007,  1996,  9723,  1997,  4531,  2053, 28829,  2015,  1027,  1041,
        22543,  2692,  1012,  6185,  1027,  1014,  1012, 25195, 16147, 20842,
         2581,  1998,  1006,  2462,  1007,  7681,  2005,  2000,  2131,  1041,
        22543,  2692,  1012,  6185,  1009,  1014,  1012,  6185,  1598,  1041,
        22543,  2692,  1012,  6185,  1027,  1014,  1012, 25195, 16147, 20842,
         1009,  1014,  1012,  5890,  2683, 16086, 23499,  1027,  1014,  1012,
        25897,  2620,  2004,  1996, 13711,  9723,  1012,  2013,  2023,  1010,
         1996,  3223,  3437,  4076,  2004,  1015, 22543,  2692,  1012, 25897,
         2620,  1027,  1014,  1012,  2199,  2475,   102])"
1986,1,['additivity property'], Properties of Poisson Distribution,seg_389,"6.9.1.3 additivity property if x1 ∼ pois( 1) and x2 ∼ pois( 2) are independent, then x1 + x2 ∼ pois( 1 + 2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  1020,  1012,  1023,  1012,  1015,  1012,  1017,  5587, 25090,
        24872,  3200,  2065,  1060,  2487,   100, 13433,  2483,  1006,  1015,
         1007,  1998,  1060,  2475,   100, 13433,  2483,  1006,  1016,  1007,
         2024,  2981,  1010,  2059,  1060,  2487,  1009,  1060,  2475,   100,
        13433,  2483,  1006,  1015,  1009,  1016,  1007,  1012,   102])"
1987,1,"['table', 'random', 'random variables', 'variables']", Properties of Poisson Distribution,seg_389,we get mx1+x2 (t) = e( 1+ 2)(et−1). this result can be extended to an arbitrary number of random variables (see table 6.11).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2057,  2131, 25630,  2487,  1009,  1060,  2475,  1006,  1056,
         1007,  1027,  1041,  1006,  1015,  1009,  1016,  1007,  1006,  3802,
        27944,  1007,  1012,  2023,  2765,  2064,  2022,  3668,  2000,  2019,
        15275,  2193,  1997,  6721, 10857,  1006,  2156,  2795,  1020,  1012,
         2340,  1007,  1012,   102])"
1988,1,['distribution'], Properties of Poisson Distribution,seg_389,example 6.37 distribution of x1|(x1 + x2 = n),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([ 101, 2742, 1020, 1012, 4261, 4353, 1997, 1060, 2487, 1064, 1006, 1060,
        2487, 1009, 1060, 2475, 1027, 1050, 1007,  102])"
1989,1,"['independent', 'distribution']", Properties of Poisson Distribution,seg_389,"if x1 ∼ pois( 1) and x2 ∼ pois( 2) are independent, then the distribution of x1|(x1 + x2 = n) is bino(n,  1∕( 1 +  2)).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2065,  1060,  2487,   100, 13433,  2483,  1006,  1015,  1007,
         1998,  1060,  2475,   100, 13433,  2483,  1006,  1016,  1007,  2024,
         2981,  1010,  2059,  1996,  4353,  1997,  1060,  2487,  1064,  1006,
         1060,  2487,  1009,  1060,  2475,  1027,  1050,  1007,  2003,  8026,
         2080,  1006,  1050,  1010,   100,  1006,  1015,  1009,  1016,  1007,
         1007,  1012,   102])"
1990,1,"['probability', 'conditional probability', 'conditional']", Properties of Poisson Distribution,seg_389,solution 6.37 consider the conditional probability p[x1|(x1 + x2 = n)] = p[x1 = x1] ∩ p[x2 = n − x1]∕p(x1 + x2 = n). substitute the density to get e− 1 1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  5576,  1020,  1012,  4261,  5136,  1996, 18462,  9723,  1052,
         1031,  1060,  2487,  1064,  1006,  1060,  2487,  1009,  1060,  2475,
         1027,  1050,  1007,  1033,  1027,  1052,  1031,  1060,  2487,  1027,
         1060,  2487,  1033,  1604,  1052,  1031,  1060,  2475,  1027,  1050,
         1597,  1060,  2487,  1033,   100,  1006,  1060,  2487,  1009,  1060,
         2475,  1027,  1050,  1007,  1012,  7681,  1996,  4304,  2000,  2131,
         1041, 22543,  1015,  1015,   102])"
1991,0,[], Properties of Poisson Distribution,seg_389,mon terms from the numerator and denominator and writing ( 1 +  2)n in the denominator as ( 1 +  2)x1 ∗ ( 1 +  2)n−x1 this becomes,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101, 12256,  3408,  2013,  1996, 16371,  5017,  8844,  1998,  7939,
        20936, 27413,  1998,  3015,  1006,  1015,  1009,  1016,  1007,  1050,
         1999,  1996,  7939, 20936, 27413,  2004,  1006,  1015,  1009,  1016,
         1007,  1060,  2487,  1598,  1006,  1015,  1009,  1016,  1007,  1050,
        22543,  2595,  2487,  2023,  4150,   102])"
1992,1,"['probability', 'probability of success', 'binomial', 'success']", Properties of Poisson Distribution,seg_389,which is the binomial pdf with probability of success p =  1∕( 1 +  2).,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2029,  2003,  1996,  8026, 20936,  2389, 11135,  2007,  9723,
         1997,  3112,  1052,  1027,   100,  1006,  1015,  1009,  1016,  1007,
         1012,   102])"
1993,1,"['poisson', 'probabilities']", Properties of Poisson Distribution,seg_389,example 6.38 poisson probabilities,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2742,  1020,  1012,  4229, 13433, 24077,  4013,  3676, 14680,
          102])"
1994,0,['e'], Properties of Poisson Distribution,seg_389,above-mentioned sum in the square bracket is then cosh( ) = 1 2 (e  + e− ). from,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2682,  1011,  3855,  7680,  1999,  1996,  2675, 21605,  2003,
         2059,  2522,  4095,  1006,  1007,  1027,  1015,  1016,  1006,  1041,
         1009,  1041, 22543,  1007,  1012,  2013,   102])"
1995,1,['probability'], Properties of Poisson Distribution,seg_389,"this, we get the required probability as e−  ∗ 1 2 (e  + e− ) = 1 2 (1 + e−2 ) (ii) p[x",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2023,  1010,  2057,  2131,  1996,  3223,  9723,  2004,  1041,
        22543,  1598,  1015,  1016,  1006,  1041,  1009,  1041, 22543,  1007,
         1027,  1015,  1016,  1006,  1015,  1009,  1041, 22543,  2475,  1007,
         1006,  2462,  1007,  1052,  1031,  1060,   102])"
1996,1,"['conditional', 'conditional distribution', 'distribution']", Properties of Poisson Distribution,seg_389,example 6.39 conditional distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2742,  1020,  1012,  4464, 18462,  4353,   102])"
1997,1,"['random variable', 'random', 'conditional distribution', 'distribution', 'conditional', 'variable']", Properties of Poisson Distribution,seg_389,"if x ∼ pois( ), find the conditional distribution of the random variable (i) x|x is even and (ii) x|x is odd.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2065,  1060,   100, 13433,  2483,  1006,  1007,  1010,  2424,
         1996, 18462,  4353,  1997,  1996,  6721,  8023,  1006,  1045,  1007,
         1060,  1064,  1060,  2003,  2130,  1998,  1006,  2462,  1007,  1060,
         1064,  1060,  2003,  5976,  1012,   102])"
1998,1,"['random variable', 'poisson', 'random', 'variable']", Properties of Poisson Distribution,seg_389,"solution 6.39 let y denote the random variable obtained by conditioning x to even values and z denote the random variable obtained by conditioning x to odd values. as the poisson variate takes values x = 0, 1, 2, … the variate y takes the values y = 0, 2, 4, 6, … ∞, and z takes the values y = 1, 3, 5, … ∞. using above-mentioned example,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  5576,  1020,  1012,  4464,  2292,  1061, 19090,  1996,  6721,
         8023,  4663,  2011, 14372,  1060,  2000,  2130,  5300,  1998,  1062,
        19090,  1996,  6721,  8023,  4663,  2011, 14372,  1060,  2000,  5976,
         5300,  1012,  2004,  1996, 13433, 24077, 13075, 13143,  3138,  5300,
         1060,  1027,  1014,  1010,  1015,  1010,  1016,  1010,  1529,  1996,
        13075, 13143,  1061,  3138,  1996,  5300,  1061,  1027,  1014,  1010,
         1016,  1010,  1018,  1010,  1020,  1010,  1529,  1601,  1010,  1998,
         1062,  3138,  1996,  5300,  1061,  1027,  1015,  1010,  1017,  1010,
         1019,  1010,  1529,  1601,  1012,  2478,  2682,  1011,  3855,  2742,
         1010,   102])"
1999,1,"['probability', 'conditional probability', 'conditional']", Properties of Poisson Distribution,seg_389,"from conditional probability, p[x = k|x is even] = p[x = k ∩ x is even]/p[x is even] = f(y) = 2e−  y∕[y!(1 + e−2 )]. this gives",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  2013, 18462,  9723,  1010,  1052,  1031,  1060,  1027,  1047,
         1064,  1060,  2003,  2130,  1033,  1027,  1052,  1031,  1060,  1027,
         1047,  1604,  1060,  2003,  2130,  1033,  1013,  1052,  1031,  1060,
         2003,  2130,  1033,  1027,  1042,  1006,  1061,  1007,  1027,  1016,
         2063, 22543,   100,  1031,  1061,   999,  1006,  1015,  1009,  1041,
        22543,  2475,  1007,  1033,  1012,  2023,  3957,   102])"
2000,1,"['tail', 'function', 'gamma', 'gamma function', 'probabilities', 'distributions', 'poisson', 'tail probabilities', 'distribution', 'poisson distribution']", Properties of Poisson Distribution,seg_389,6.9.1.4 relationship with other distributions the tail probabilities of a poisson distribution is related to the incomplete gamma function as follows:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  1020,  1012,  1023,  1012,  1015,  1012,  1018,  3276,  2007,
         2060, 20611,  1996,  5725,  4013,  3676, 14680,  1997,  1037, 13433,
        24077,  4353,  2003,  3141,  2000,  1996, 12958, 13091,  3853,  2004,
         4076,  1024,   102])"
2001,1,"['gamma', 'function', 'gamma function']", Properties of Poisson Distribution,seg_389,theorem 6.8 prove that the survival function of pois( ) is related to incomplete gamma function as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  9872,  1020,  1012,  1022,  6011,  2008,  1996,  7691,  3853,
         1997, 13433,  2483,  1006,  1007,  2003,  3141,  2000, 12958, 13091,
         3853,  2004,   102])"
2002,1,['range'], Properties of Poisson Distribution,seg_389,"∞ e−xxrdx. put y = x −  , so that the range becomes 0 to ∞, and we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  1601,  1041, 22543, 20348,  4103,  2595,  1012,  2404,  1061,
         1027,  1060,  1597,  1010,  2061,  2008,  1996,  2846,  4150,  1014,
         2000,  1601,  1010,  1998,  2057,  2131,   102])"
2003,1,['independent'], Properties of Poisson Distribution,seg_389,take constants independent of y outside the integral to get e   ∫0,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([ 101, 2202, 5377, 2015, 2981, 1997, 1061, 2648, 1996, 9897, 2000, 2131,
        1041,  100,  102])"
2004,1,"['function', 'probability', 'poisson', 'distribution', 'poisson distribution']", Properties of Poisson Distribution,seg_389,1)amma function is the survival probability of poisson distribution. this proves,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  1015,  1007,  2572,  2863,  3853,  2003,  1996,  7691,  9723,
         1997, 13433, 24077,  4353,  1012,  2023, 16481,   102])"
2005,1,"['function', 'fisher', 'degrees of freedom', 'poisson', 'poisson sum', 'distribution']", Properties of Poisson Distribution,seg_389,theorem 6.9 prove that the survival function of a central chi-square distribution with even degrees of freedom is a poisson sum (fisher [146]) as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  9872,  1020,  1012,  1023,  6011,  2008,  1996,  7691,  3853,
         1997,  1037,  2430,  9610,  1011,  2675,  4353,  2007,  2130,  5445,
         1997,  4071,  2003,  1037, 13433, 24077,  7680,  1006,  8731,  1031,
        16333,  1033,  1007,  2004,   102])"
2006,1,"['gamma', 'distributions', 'gamma distributions']", Properties of Poisson Distribution,seg_389,"proof: the proof follows easily because the  2 and gamma distributions are related as  2n ≡ gamma(n∕2, 1∕2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  6947,  1024,  1996,  6947,  4076,  4089,  2138,  1996,  1016,
         1998, 13091, 20611,  2024,  3141,  2004,  1016,  2078,  1607, 13091,
         1006,   100,  1010,   100,  1007,  1012,   102])"
2007,1,"['poisson', 'probabilities']", Properties of Poisson Distribution,seg_389,"putting n = 2m, we find that the cdf of central  2 with even df can be expressed as a sum of poisson probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997, 13433, 24077,  4353])","tensor([  101,  5128,  1050,  1027,  1016,  2213,  1010,  2057,  2424,  2008,
         1996,  3729,  2546,  1997,  2430,  1016,  2007,  2130,  1040,  2546,
         2064,  2022,  5228,  2004,  1037,  7680,  1997, 13433, 24077,  4013,
         3676, 14680,  1012,   102])"
2008,1,"['recurrence', 'probabilities']", Algorithms for Poisson Distribution,seg_391,individual probabilities can be calculated using the forward recurrence,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  3265,  4013,  3676, 14680,  2064,  2022, 10174,  2478,  1996,
         2830, 28667,  3126, 24413,   102])"
2009,1,"['loss', 'precision', 'distribution', 'probabilities', 'memory', 'distributions', 'poisson', 'poisson distribution', 'poisson distributions', 'algorithm', 'error']", Algorithms for Poisson Distribution,seg_391,"when   is large, e−  is too small. this may result in loss of precision or even underflow (in computer memory). as subsequent terms are calculated using the first term, error may propagate throughout the subsequent computation steps. a solution is to use the log-recursive algorithm suggested in reference 4. another possibility is an algorithm that starts with the mode of the poisson distribution, which then iteratively calculates subsequent values leftward (reverse) and rightward (forward). this may be combined with the log-recursive algorithm to provide a reliable and robust algorithm for poisson distributions, and other mixture distributions that use poisson weighting [4, 5]. the left-tail probabilities (cdf) fc( ) = ∑j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  2043,  2003,  2312,  1010,  1041, 22543,  2003,  2205,  2235,
         1012,  2023,  2089,  2765,  1999,  3279,  1997, 11718,  2030,  2130,
         2104, 12314,  1006,  1999,  3274,  3638,  1007,  1012,  2004,  4745,
         3408,  2024, 10174,  2478,  1996,  2034,  2744,  1010,  7561,  2089,
        17678, 16098,  2618,  2802,  1996,  4745, 22334,  4084,  1012,  1037,
         5576,  2003,  2000,  2224,  1996,  8833,  1011, 28667,  9236,  3512,
         9896,  4081,  1999,  4431,  1018,  1012,  2178,  6061,  2003,  2019,
         9896,  2008,  4627,  2007,  1996,  5549,  1997,  1996, 13433, 24077,
         4353,  1010,  2029,  2059,  2009, 25284,  2135, 18422,  2015,  4745,
         5300,  2187,  7652,  1006,  7901,  1007,  1998,  2157,  7652,  1006,
         2830,  1007,  1012,  2023,  2089,  2022,  4117,  2007,  1996,  8833,
         1011, 28667,  9236,  3512,  9896,  2000,  3073,  1037, 10539,  1998,
        15873,  9896,  2005, 13433, 24077, 20611,  1010,  1998,  2060,  8150,
        20611,  2008,  2224, 13433, 24077,  3635,  2075,  1031,  1018,  1010,
         1019,  1033,  1012,  1996,  2187,  1011,  5725,  4013,  3676, 14680,
         1006,  3729,  2546,  1007,  4429,  1006,  1007,  1027,   100,   102])"
2010,0,[], Algorithms for Poisson Distribution,seg_391,"c =0 p(j) converge rapidly for small   values. cdf can be evaluated efficiently using fc( ) =  (c + 1,  )∕γ(c + 1), where  (c + 1,  ) = ∫ ",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1039,  1027,  1014,  1052,  1006,  1046,  1007, 28314,  5901,
         2005,  2235,  5300,  1012,  3729,  2546,  2064,  2022, 16330, 18228,
         2478,  4429,  1006,  1007,  1027,  1006,  1039,  1009,  1015,  1010,
         1007,   100,  1006,  1039,  1009,  1015,  1007,  1010,  2073,  1006,
         1039,  1009,  1015,  1010,  1007,  1027,   100,   102])"
2011,1,['gamma'], Algorithms for Poisson Distribution,seg_391,∞ e−ttcdt is the incomplete gamma integral.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1601,  1041, 22543,  4779, 19797,  2102,  2003,  1996, 12958,
        13091,  9897,  1012,   102])"
2012,1,"['power method', 'poisson', 'method', 'distribution', 'poisson distribution']", Algorithms for Poisson Distribution,seg_391,find the md of poisson distribution using the power method section 6.1 (p. 189). see figure 6.5.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  2424,  1996,  9108,  1997, 13433, 24077,  4353,  2478,  1996,
         2373,  4118,  2930,  1020,  1012,  1015,  1006,  1052,  1012, 20500,
         1007,  1012,  2156,  3275,  1020,  1012,  1019,  1012,   102])"
2013,1,"['mean', 'poisson', 'limit', 'distribution', 'poisson distribution']", Algorithms for Poisson Distribution,seg_391,"solution 6.40 we know that the mean of poisson distribution is  . the lower limit ll is x = 0, so that xf(x) = 0. hence using theorem 6.1, the md is given by  −1 c",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  5576,  1020,  1012,  2871,  2057,  2113,  2008,  1996,  2812,
         1997, 13433, 24077,  4353,  2003,  1012,  1996,  2896,  5787,  2222,
         2003,  1060,  1027,  1014,  1010,  2061,  2008,  1060,  2546,  1006,
         1060,  1007,  1027,  1014,  1012,  6516,  2478,  9872,  1020,  1012,
         1015,  1010,  1996,  9108,  2003,  2445,  2011,  1597,  2487,  1039,
          102])"
2014,1,['table'], Algorithms for Poisson Distribution,seg_391,where c = ⌊  − 1⌋. see table 6.12.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([ 101, 2073, 1039, 1027,  100, 1597, 1015,  100, 1012, 2156, 2795, 1020,
        1012, 2260, 1012,  102])"
2015,1,"['approximation', 'poisson', 'distribution', 'poisson distribution', 'binomial', 'binomial distribution']", Algorithms for Poisson Distribution,seg_391,"6.9.2.1 approximations the poisson distribution provides a good approximation to the binomial distribution b(n, p) when p is small, provided   = np   10, and n is large enough. the accuracy of this approximation increases as p tends to zero. as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1020,  1012,  1023,  1012,  1016,  1012,  1015, 20167,  2015,
         1996, 13433, 24077,  4353,  3640,  1037,  2204, 20167,  2000,  1996,
         8026, 20936,  2389,  4353,  1038,  1006,  1050,  1010,  1052,  1007,
         2043,  1052,  2003,  2235,  1010,  3024,  1027, 27937,  2184,  1010,
         1998,  1050,  2003,  2312,  2438,  1012,  1996, 10640,  1997,  2023,
        20167,  7457,  2004,  1052, 12102,  2000,  5717,  1012,  2004,   102])"
2016,1,"['dependent', 'rate']", Algorithms for Poisson Distribution,seg_391,"mentioned earlier, this limiting behavior is more dependent on the rate at which p → 0 faster than n → ∞ (see figure 6.7).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  3855,  3041,  1010,  2023, 14879,  5248,  2003,  2062,  7790,
         2006,  1996,  3446,  2012,  2029,  1052,  1585,  1014,  5514,  2084,
         1050,  1585,  1601,  1006,  2156,  3275,  1020,  1012,  1021,  1007,
         1012,   102])"
2017,1,"['variance', 'normal', 'distribution']", Algorithms for Poisson Distribution,seg_391,"as the variance of the distribution is  , normal approximations are not appli-",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  2004,  1996, 23284,  1997,  1996,  4353,  2003,  1010,  3671,
        20167,  2015,  2024,  2025, 10439,  3669,  1011,   102])"
2018,1,"['continuity correction', 'normal']", Algorithms for Poisson Distribution,seg_391,  is approximately normal. the continuity correction can be applied as before to get,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  2003,  3155,  3671,  1012,  1996, 13717, 18140,  2064,  2022,
         4162,  2004,  2077,  2000,  2131,   102])"
2019,1,"['transformation', 'variance']", Algorithms for Poisson Distribution,seg_391,p[(x;  )≤k] = pr[z≤ k− ±0.5 ]. the square root transformation is a variance stabiliz-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1052,  1031,  1006,  1060,  1025,  1007,  1608,  2243,  1033,
         1027, 10975,  1031,  1062, 30135,  1047, 22543,  1081,  2692,  1012,
         1019,  1033,  1012,  1996,  2675,  7117,  8651,  2003,  1037, 23284,
        17079, 18622,  2480,  1011,   102])"
2020,1,"['observation', 'distribution', 'transformation']", Algorithms for Poisson Distribution,seg_391,"≥ ≥ √   ing transformation for this distribution. many approximations have appeared in the literature based on this observation. for example, the anscombe [147] approxima-",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1609,  1609,  1600, 13749,  8651,  2005,  2023,  4353,  1012,
         2116, 20167,  2015,  2031,  2596,  1999,  1996,  3906,  2241,  2006,
         2023,  8089,  1012,  2005,  2742,  1010,  1996,  2019,  9363, 18552,
         1031, 16471,  1033, 22480,  9581,  1011,   102])"
2021,1,"['probabilities', 'poisson', 'transformation', 'normality']", Algorithms for Poisson Distribution,seg_391,"x +√ x + 1 transformation to normality suggested by freeman and tukey [148] . as the poisson left-tail areas are related to the  2 right-tail areas, the individual poisson probabilities can be approximated using the  2 probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1060,  1009,  1600,  1060,  1009,  1015,  8651,  2000,  3671,
         3012,  4081,  2011, 11462,  1998, 10722, 14839,  1031, 16459,  1033,
         1012,  2004,  1996, 13433, 24077,  2187,  1011,  5725,  2752,  2024,
         3141,  2000,  1996,  1016,  2157,  1011,  5725,  2752,  1010,  1996,
         3265, 13433, 24077,  4013,  3676, 14680,  2064,  2022, 15796,  2094,
         2478,  1996,  1016,  4013,  3676, 14680,  1012,   102])"
2022,1,"['uncertainty', 'probability', 'interval', 'poisson', 'distribution', 'poisson distribution']", Algorithms for Poisson Distribution,seg_391,"6.9.2.2 applications the poisson distribution has been applied to various problems involving high uncertainty (low probability of occurrence). examples are the number of false fire alarms in a building, number of flaws in a sheet roll of newly manufactured fabric, number of phone calls received by a telephone operator in a fixed time interval, number of natural calamities such as earthquakes and tsunamis in a fixed time interval (say 1 month), number of epidemics in a locality, number of deaths due to a rare disease, and so on.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1020,  1012,  1023,  1012,  1016,  1012,  1016,  5097,  1996,
        13433, 24077,  4353,  2038,  2042,  4162,  2000,  2536,  3471,  5994,
         2152, 12503,  1006,  2659,  9723,  1997, 14404,  1007,  1012,  4973,
         2024,  1996,  2193,  1997,  6270,  2543, 29034,  1999,  1037,  2311,
         1010,  2193,  1997, 21407,  1999,  1037,  7123,  4897,  1997,  4397,
         7609,  8313,  1010,  2193,  1997,  3042,  4455,  2363,  2011,  1037,
         7026,  6872,  1999,  1037,  4964,  2051, 13483,  1010,  2193,  1997,
         3019, 10250, 10631,  7368,  2107,  2004, 17932,  1998, 19267,  2015,
         1999,  1037,  4964,  2051, 13483,  1006,  2360,  1015,  3204,  1007,
         1010,  2193,  1997, 16311,  2015,  1999,  1037, 10246,  1010,  2193,
         1997,  6677,  2349,  2000,  1037,  4678,  4295,  1010,  1998,  2061,
         2006,  1012,   102])"
2023,0,[], Algorithms for Poisson Distribution,seg_391,example 6.41 structural damage,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([ 101, 2742, 1020, 1012, 4601, 8332, 4053,  102])"
2024,1,"['probability', 'probabilities']", Algorithms for Poisson Distribution,seg_391,"a dam is built to withstand water pressure and mild tremors. let x denote the number of damages resulting from a major quake. if x is distributed as pois(0.008), find the following probabilities: (i) probability of no damage, (ii) probability of at least two damages, and (iii) probability of at most four damages.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  1037,  5477,  2003,  2328,  2000, 19319,  2300,  3778,  1998,
        10256, 27734,  2015,  1012,  2292,  1060, 19090,  1996,  2193,  1997,
        12394,  4525,  2013,  1037,  2350, 27785,  1012,  2065,  1060,  2003,
         5500,  2004, 13433,  2483,  1006,  1014,  1012,  4002,  2620,  1007,
         1010,  2424,  1996,  2206,  4013,  3676, 14680,  1024,  1006,  1045,
         1007,  9723,  1997,  2053,  4053,  1010,  1006,  2462,  1007,  9723,
         1997,  2012,  2560,  2048, 12394,  1010,  1998,  1006,  3523,  1007,
         9723,  1997,  2012,  2087,  2176, 12394,  1012,   102])"
2025,1,['probability'], Algorithms for Poisson Distribution,seg_391,"solution 6.41 the pdf is f (x,  ) = e−0.008(0.008)x∕x!, for x = 0, 1, 2 … . answer to (i) is p0 = e−0.008(0.008)0∕0! = e−0.008 = 0.9920. answer to (ii) is 1 − p(0) − p(1) = 1 − 0.992032 − 0.007936 = 1 − 0.99996817 = 3.18298e − 05. (iii) probability of at most four damages =∑x",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13792,  2005, 13433, 24077,  4353])","tensor([  101,  5576,  1020,  1012,  4601,  1996, 11135,  2003,  1042,  1006,
         1060,  1010,  1007,  1027,  1041, 22543,  2692,  1012,  4002,  2620,
         1006,  1014,  1012,  4002,  2620,  1007,   100,   999,  1010,  2005,
         1060,  1027,  1014,  1010,  1015,  1010,  1016,  1529,  1012,  3437,
         2000,  1006,  1045,  1007,  2003,  1052,  2692,  1027,  1041, 22543,
         2692,  1012,  4002,  2620,  1006,  1014,  1012,  4002,  2620,  1007,
          100,   999,  1027,  1041, 22543,  2692,  1012,  4002,  2620,  1027,
         1014,  1012,  5585, 11387,  1012,  3437,  2000,  1006,  2462,  1007,
         2003,  1015,  1597,  1052,  1006,  1014,  1007,  1597,  1052,  1006,
         1015,  1007,  1027,  1015,  1597,  1014,  1012,  5585, 11387, 16703,
         1597,  1014,  1012,  4002,  2581,  2683, 21619,  1027,  1015,  1597,
         1014,  1012, 25897,  2683,  2575,  2620, 16576,  1027,  1017,  1012,
        11523,  2620,  2063,  1597,  5709,  1012,  1006,  3523,  1007,  9723,
         1997,  2012,  2087,  2176, 12394,  1027,   100,   102])"
2026,1,"['poisson', 'distribution', 'poisson distribution', 'discrete']", Truncated Poisson Distribution,seg_393,"a useful distribution in epidemiological studies is a poisson distribution truncated at 0. it is also used in search engine optimization. assume that a user query returns a large number of matches that are displayed by a search engine in discrete screenfuls of say 10 matches each. then, the number of pages viewed by a surfer can be modeled as a zero-truncated poisson law or a zipf law [2]. the pdf is given by",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([25449, 13433, 24077,  4353])","tensor([  101,  1037,  6179,  4353,  1999,  4958,  5178,  4328, 10091,  2913,
         2003,  1037, 13433, 24077,  4353, 25449,  2012,  1014,  1012,  2009,
         2003,  2036,  2109,  1999,  3945,  3194, 20600,  1012,  7868,  2008,
         1037,  5310, 23032,  5651,  1037,  2312,  2193,  1997,  3503,  2008,
         2024,  6913,  2011,  1037,  3945,  3194,  1999, 16246,  3898,  3993,
         2015,  1997,  2360,  2184,  3503,  2169,  1012,  2059,  1010,  1996,
         2193,  1997,  5530,  7021,  2011,  1037, 27747,  2064,  2022, 14440,
         2004,  1037,  5717,  1011, 25449, 13433, 24077,  2375,  2030,  1037,
        14101,  2546,  2375,  1031,  1016,  1033,  1012,  1996, 11135,  2003,
         2445,  2011,   102])"
2027,1,"['mean', 'rate', 'variance', 'dispersion', 'poisson', 'distribution', 'poisson distribution']", Truncated Poisson Distribution,seg_393,"where the second expression is obtained from the first by multiplying the numerator and denominator by e . the mean and variance are  ∕(1 − e− ). see shanmugam [149]–[151] for incidence rate restricted poisson distribution, reference 152 for spinned poisson distribution, and reference 46 for a discussion on poisson dispersion.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 0., 0.])","tensor([25449, 13433, 24077,  4353])","tensor([  101,  2073,  1996,  2117,  3670,  2003,  4663,  2013,  1996,  2034,
         2011,  4800, 22086,  2075,  1996, 16371,  5017,  8844,  1998,  7939,
        20936, 27413,  2011,  1041,  1012,  1996,  2812,  1998, 23284,  2024,
          100,  1006,  1015,  1597,  1041, 22543,  1007,  1012,  2156, 17137,
        12274, 22864,  1031, 17332,  1033,  1516,  1031, 16528,  1033,  2005,
        18949,  3446,  7775, 13433, 24077,  4353,  1010,  4431, 15017,  2005,
         6714,  7228, 13433, 24077,  4353,  1010,  1998,  4431,  4805,  2005,
         1037,  6594,  2006, 13433, 24077,  4487, 17668, 10992,  1012,   102])"
2028,1,"['sample', 'without replacement', 'replacement']", HYPERGEOMETRIC DISTRIBUTION,seg_395,"consider a “lot” containing n items of which k are of one kind, and the rest (n − k) are of another kind. we assume that the two kinds are indistinguishable. suppose we sample n items without replacement from the lot. the number of items x of first kind is then given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23760,  3351, 28993,  4353])","tensor([  101,  5136,  1037,  1523,  2843,  1524,  4820,  1050,  5167,  1997,
         2029,  1047,  2024,  1997,  2028,  2785,  1010,  1998,  1996,  2717,
         1006,  1050,  1597,  1047,  1007,  2024,  1997,  2178,  2785,  1012,
         2057,  7868,  2008,  1996,  2048,  7957,  2024, 27427,  2923,  2075,
        27020, 25459,  2571,  1012,  6814,  2057,  7099,  1050,  5167,  2302,
         6110,  2013,  1996,  2843,  1012,  1996,  2193,  1997,  5167,  1060,
         1997,  2034,  2785,  2003,  2059,  2445,  2011,   102])"
2029,1,['parameters'], HYPERGEOMETRIC DISTRIBUTION,seg_395,"this is called the hgd, which has three parameters k,n and n. this can be derived using the following argument. as there are k items of one kind, we can choose x",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([23760,  3351, 28993,  4353])","tensor([  101,  2023,  2003,  2170,  1996,  1044,  2290,  2094,  1010,  2029,
         2038,  2093, 11709,  1047,  1010,  1050,  1998,  1050,  1012,  2023,
         2064,  2022,  5173,  2478,  1996,  2206,  6685,  1012,  2004,  2045,
         2024,  1047,  5167,  1997,  2028,  2785,  1010,  2057,  2064,  5454,
         1060,   102])"
2030,0,['n'], HYPERGEOMETRIC DISTRIBUTION,seg_395,"x) ways. to make the count to n, we need to select further n − x",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23760,  3351, 28993,  4353])","tensor([ 101, 1060, 1007, 3971, 1012, 2000, 2191, 1996, 4175, 2000, 1050, 1010,
        2057, 2342, 2000, 7276, 2582, 1050, 1597, 1060,  102])"
2031,0,['n'], HYPERGEOMETRIC DISTRIBUTION,seg_395,"items. however, these can be selected from (n − k) items of second kind in (n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23760,  3351, 28993,  4353])","tensor([ 101, 5167, 1012, 2174, 1010, 2122, 2064, 2022, 3479, 2013, 1006, 1050,
        1597, 1047, 1007, 5167, 1997, 2117, 2785, 1999, 1006, 1050,  102])"
2032,1,['product rule'], HYPERGEOMETRIC DISTRIBUTION,seg_395,"ways. using the product rule for selection (chapter 5), the total number of ways is the expression in the numerator of equation (6.136). to make it a pdf, we need to divide",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23760,  3351, 28993,  4353])","tensor([  101,  3971,  1012,  2478,  1996,  4031,  3627,  2005,  4989,  1006,
         3127,  1019,  1007,  1010,  1996,  2561,  2193,  1997,  3971,  2003,
         1996,  3670,  1999,  1996, 16371,  5017,  8844,  1997,  8522,  1006,
         1020,  1012, 15407,  1007,  1012,  2000,  2191,  2009,  1037, 11135,
         1010,  2057,  2342,  2000, 11443,   102])"
2033,0,['n'], HYPERGEOMETRIC DISTRIBUTION,seg_395,"it by the total number of ways to select n items, namely (n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([23760,  3351, 28993,  4353])","tensor([ 101, 2009, 2011, 1996, 2561, 2193, 1997, 3971, 2000, 7276, 1050, 5167,
        1010, 8419, 1006, 1050,  102])"
2034,1,"['bernoulli', 'failures', 'trials', 'bernoulli trials', 'distribution', 'successes', 'independent']", HYPERGEOMETRIC DISTRIBUTION,seg_395,"n ). we have not made any assumptions on the items being sampled. in practical applications of this distribution, it could be defective and nondefective items, marked and unmarked items, successes and failures in independent bernoulli trials, and so on.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([23760,  3351, 28993,  4353])","tensor([  101,  1050,  1007,  1012,  2057,  2031,  2025,  2081,  2151, 17568,
         2006,  1996,  5167,  2108, 18925,  1012,  1999,  6742,  5097,  1997,
         2023,  4353,  1010,  2009,  2071,  2022, 28829,  1998,  2512,  3207,
        25969,  3512,  5167,  1010,  4417,  1998, 25779,  5167,  1010, 14152,
         1998, 15428,  1999,  2981, 16595,  7140,  6894,  7012,  1010,  1998,
         2061,  2006,  1012,   102])"
2035,1,"['binomial coefficients', 'symmetry', 'coefficients', 'sampling', 'binomial']", HYPERGEOMETRIC DISTRIBUTION,seg_395,"as the expression involves binomial coefficients, there is a natural symmetry involved in the above-mentioned pdf. instead of sampling x items from the first kind, we could take x items from the second kind and (n − x) items from the first kind. this gives us the alternate pdf:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23760,  3351, 28993,  4353])","tensor([  101,  2004,  1996,  3670,  7336,  8026, 20936,  2389, 21374,  1010,
         2045,  2003,  1037,  3019, 14991,  2920,  1999,  1996,  2682,  1011,
         3855, 11135,  1012,  2612,  1997, 16227,  1060,  5167,  2013,  1996,
         2034,  2785,  1010,  2057,  2071,  2202,  1060,  5167,  2013,  1996,
         2117,  2785,  1998,  1006,  1050,  1597,  1060,  1007,  5167,  2013,
         1996,  2034,  2785,  1012,  2023,  3957,  2149,  1996,  6585, 11135,
         1024,   102])"
2036,1,"['combination', 'range']", HYPERGEOMETRIC DISTRIBUTION,seg_395,"to impose the range for both these forms, we modify the range of x values as 0, 1, 2, … ,min(m,n − m, n). as all combination terms must exist, x varies between max(0, n + m − n) and min(m,n).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23760,  3351, 28993,  4353])","tensor([  101,  2000, 17607,  1996,  2846,  2005,  2119,  2122,  3596,  1010,
         2057, 19933,  1996,  2846,  1997,  1060,  5300,  2004,  1014,  1010,
         1015,  1010,  1016,  1010,  1529,  1010,  8117,  1006,  1049,  1010,
         1050,  1597,  1049,  1010,  1050,  1007,  1012,  2004,  2035,  5257,
         3408,  2442,  4839,  1010,  1060,  9783,  2090,  4098,  1006,  1014,
         1010,  1050,  1009,  1049,  1597,  1050,  1007,  1998,  8117,  1006,
         1049,  1010,  1050,  1007,  1012,   102])"
2037,1,"['recurrence', 'parameters', 'distribution']", Properties of Hypergeometric Distribution,seg_397,"this distribution has three parameters, all of which are integers. the recurrence relation for the pdf is",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  2023,  4353,  2038,  2093, 11709,  1010,  2035,  1997,  2029,
         2024, 24028,  1012,  1996, 28667,  3126, 24413,  7189,  2005,  1996,
        11135,  2003,   102])"
2038,1,['parameters'], Properties of Hypergeometric Distribution,seg_397,"as the parameters are all related, the following symmetries follow easily (i) h(x; k, n,n) = h(x; n, k,n), (ii) h(x; k, n,n) = h(k − x; k,n − n,n), and (iii) h(x; k, n,n) = h(n − x;n − k, n,n). replace x by x − 1 in equation (6.138) to",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  2004,  1996, 11709,  2024,  2035,  3141,  1010,  1996,  2206,
        25353, 20058, 21011,  3582,  4089,  1006,  1045,  1007,  1044,  1006,
         1060,  1025,  1047,  1010,  1050,  1010,  1050,  1007,  1027,  1044,
         1006,  1060,  1025,  1050,  1010,  1047,  1010,  1050,  1007,  1010,
         1006,  2462,  1007,  1044,  1006,  1060,  1025,  1047,  1010,  1050,
         1010,  1050,  1007,  1027,  1044,  1006,  1047,  1597,  1060,  1025,
         1047,  1010,  1050,  1597,  1050,  1010,  1050,  1007,  1010,  1998,
         1006,  3523,  1007,  1044,  1006,  1060,  1025,  1047,  1010,  1050,
         1010,  1050,  1007,  1027,  1044,  1006,  1050,  1597,  1060,  1025,
         1050,  1597,  1047,  1010,  1050,  1010,  1050,  1007,  1012,  5672,
         1060,  2011,  1060,  1597,  1015,  1999,  8522,  1006,  1020,  1012,
        15028,  1007,  2000,   102])"
2039,1,"['factorial moment', 'moment', 'falling factorial', 'moments', 'factorial']", Moments of Hypergeometric Distribution,seg_399,factorial moments are easier to find due to the x! in the denominator (of both the forms (6.136) and (6.137)). the rth falling factorial moment,tensor(1),"tensor([0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  5387,  4818,  5312,  2024,  6082,  2000,  2424,  2349,  2000,
         1996,  1060,   999,  1999,  1996,  7939, 20936, 27413,  1006,  1997,
         2119,  1996,  3596,  1006,  1020,  1012, 15407,  1007,  1998,  1006,
         1020,  1012, 14989,  1007,  1007,  1012,  1996, 19387,  2232,  4634,
         5387,  4818,  2617,   102])"
2040,1,['summation'], Moments of Hypergeometric Distribution,seg_399,cancel out x(x − 1) … (x − r + 1) from x! in the denominator and write (k)x = k(k − 1) · · · (k − r + 1)(k)x−r and take it outside the summation. this,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101, 17542,  2041,  1060,  1006,  1060,  1597,  1015,  1007,  1529,
         1006,  1060,  1597,  1054,  1009,  1015,  1007,  2013,  1060,   999,
         1999,  1996,  7939, 20936, 27413,  1998,  4339,  1006,  1047,  1007,
         1060,  1027,  1047,  1006,  1047,  1597,  1015,  1007,  1087,  1087,
         1087,  1006,  1047,  1597,  1054,  1009,  1015,  1007,  1006,  1047,
         1007,  1060, 22543,  2099,  1998,  2202,  2009,  2648,  1996,  7680,
        28649,  1012,  2023,   102])"
2041,0,[], Moments of Hypergeometric Distribution,seg_399,k). change the indexvar using u = x − r to,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  1047,  1007,  1012,  2689,  1996,  5950, 10755,  2478,  1057,
         1027,  1060,  1597,  1054,  2000,   102])"
2042,0,[], Moments of Hypergeometric Distribution,seg_399,"using vandermonde’s identity (p. 6–6), this becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  2478,  3158,  4063, 11442,  2063,  1521,  1055,  4767,  1006,
         1052,  1012,  1020,  1516,  1020,  1007,  1010,  2023,  4150,   102])"
2043,1,"['mean', 'hypergeometric functions', 'variance', 'functions', 'hypergeometric', 'distribution']", Moments of Hypergeometric Distribution,seg_399,"the mean is easily obtained from the above by putting r = 1 as nk∕n. the variance is (nk∕n)(1 − k∕n)(n − n)∕(n − 1). replace nk∕n on the rhs by   and write the multiplier as (1 − m∕n) ∗ [(n − n)∕(n − 1)]. this shows that  2     as both (1 − m∕n) and (n − n)∕(n − 1) are fractions. the mode of the distribution is ⌊(k + 1)(n + 1)∕(n + 2)⌋, which is greater than the mean. the mgf does not have simple form but is expressed in terms of hypergeometric functions as",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  1996,  2812,  2003,  4089,  4663,  2013,  1996,  2682,  2011,
         5128,  1054,  1027,  1015,  2004,   100,  1012,  1996, 23284,  2003,
         1006,   100,  1007,  1006,  1015,  1597,   100,  1007,  1006,  1050,
         1597,  1050,  1007,   100,  1006,  1050,  1597,  1015,  1007,  1012,
         5672,   100,  2006,  1996,  1054,  7898,  2011,  1998,  4339,  1996,
         4800, 24759,  3771,  2004,  1006,  1015,  1597,   100,  1007,  1598,
         1031,  1006,  1050,  1597,  1050,  1007,   100,  1006,  1050,  1597,
         1015,  1007,  1033,  1012,  2023,  3065,  2008,  1016,  2004,  2119,
         1006,  1015,  1597,   100,  1007,  1998,  1006,  1050,  1597,  1050,
         1007,   100,  1006,  1050,  1597,  1015,  1007,  2024, 12884,  2015,
         1012,  1996,  5549,  1997,  1996,  4353,  2003,   100,  1006,  1047,
         1009,  1015,  1007,  1006,  1050,  1009,  1015,  1007,   100,  1006,
         1050,  1009,  1016,  1007,   100,  1010,  2029,  2003,  3618,  2084,
         1996,  2812,  1012,  1996, 11460,  2546,  2515,  2025,  2031,  3722,
         2433,  2021,  2003,  5228,  1999,  3408,  1997, 23760,  3351, 28993,
         4972,  2004,   102])"
2044,1,"['coefficient of skewness', 'coefficient', 'skewness', 'covariance']", Moments of Hypergeometric Distribution,seg_399,"n−n covariance is given by cov(xi, xj) = npipj n−1 . the coefficient of skewness is as follows:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  1050, 22543,  2078,  2522, 10755, 28335,  2003,  2445,  2011,
         2522,  2615,  1006,  8418,  1010,  1060,  3501,  1007,  1027, 27937,
        11514,  3501,  1050, 27944,  1012,  1996, 19064,  1997, 15315,  7974,
         2791,  2003,  2004,  4076,  1024,   102])"
2045,1,['table'], Moments of Hypergeometric Distribution,seg_399,see table 6.13 for more properties.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([ 101, 2156, 2795, 1020, 1012, 2410, 2005, 2062, 5144, 1012,  102])"
2046,1,"['hypergeometric', 'random', 'distribution', 'independent']", Moments of Hypergeometric Distribution,seg_399,"theorem 6.10 if x and y are independent bino(m, p) and bino(n, p) random variables, then the distribution of x|x + y = n is hypergeometric and is independent of p.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  9872,  1020,  1012,  2184,  2065,  1060,  1998,  1061,  2024,
         2981,  8026,  2080,  1006,  1049,  1010,  1052,  1007,  1998,  8026,
         2080,  1006,  1050,  1010,  1052,  1007,  6721, 10857,  1010,  2059,
         1996,  4353,  1997,  1060,  1064,  1060,  1009,  1061,  1027,  1050,
         2003, 23760,  3351, 28993,  1998,  2003,  2981,  1997,  1052,  1012,
          102])"
2047,1,"['probability', 'random variable', 'random', 'conditional distribution', 'distribution', 'conditional', 'variable']", Moments of Hypergeometric Distribution,seg_399,"proof: consider the random variable z = x + y . as the probability p is the same, this is distributed as bino(n + m, p). the conditional distribution of x given z = k is p[x = x|z = k] =",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  6947,  1024,  5136,  1996,  6721,  8023,  1062,  1027,  1060,
         1009,  1061,  1012,  2004,  1996,  9723,  1052,  2003,  1996,  2168,
         1010,  2023,  2003,  5500,  2004,  8026,  2080,  1006,  1050,  1009,
         1049,  1010,  1052,  1007,  1012,  1996, 18462,  4353,  1997,  1060,
         2445,  1062,  1027,  1047,  2003,  1052,  1031,  1060,  1027,  1060,
         1064,  1062,  1027,  1047,  1033,  1027,   102])"
2048,1,['independent'], Moments of Hypergeometric Distribution,seg_399,"as x and y are independent, x + y ∼ bino(m + n, p). hence, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([ 101, 2004, 1060, 1998, 1061, 2024, 2981, 1010, 1060, 1009, 1061,  100,
        8026, 2080, 1006, 1049, 1009, 1050, 1010, 1052, 1007, 1012, 6516, 1010,
        2057, 2131,  102])"
2049,0,[], Moments of Hypergeometric Distribution,seg_399,this reduces to (m,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([  101,  2023, 13416,  2000,  1006,  1049,   102])"
2050,1,['independent'], Moments of Hypergeometric Distribution,seg_399,n). this obviously is independent of p.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5312,  1997, 23760,  3351, 28993,  4353])","tensor([ 101, 1050, 1007, 1012, 2023, 5525, 2003, 2981, 1997, 1052, 1012,  102])"
2051,1,"['tail', 'probability', 'probabilities', 'poisson', 'tail probabilities', 'distribution', 'poisson distribution', 'parameters', 'binomial', 'binomial distribution']", Approximations for Hypergeometric Distribution,seg_401,"hypergeometric probabilities can be approximated by the binomial distribution. when n and k are large, p = k∕n is not near 0 or 1, and n is small with respect to both k and n − k, the hgd is approximately a bino(n, k∕n). if k∕n is small and n is large, the probability can be approximated using a poisson distribution. closed-form expressions for tail probabilities do not exist, except for particular values of the parameters. however in general",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([20167,  2015,  2005, 23760,  3351, 28993,  4353])","tensor([  101, 23760,  3351, 28993,  4013,  3676, 14680,  2064,  2022, 15796,
         2094,  2011,  1996,  8026, 20936,  2389,  4353,  1012,  2043,  1050,
         1998,  1047,  2024,  2312,  1010,  1052,  1027,   100,  2003,  2025,
         2379,  1014,  2030,  1015,  1010,  1998,  1050,  2003,  2235,  2007,
         4847,  2000,  2119,  1047,  1998,  1050,  1597,  1047,  1010,  1996,
         1044,  2290,  2094,  2003,  3155,  1037,  8026,  2080,  1006,  1050,
         1010,   100,  1007,  1012,  2065,   100,  2003,  2235,  1998,  1050,
         2003,  2312,  1010,  1996,  9723,  2064,  2022, 15796,  2094,  2478,
         1037, 13433, 24077,  4353,  1012,  2701,  1011,  2433, 11423,  2005,
         5725,  4013,  3676, 14680,  2079,  2025,  4839,  1010,  3272,  2005,
         3327,  5300,  1997,  1996, 11709,  1012,  2174,  1999,  2236,   102])"
2052,1,['distribution'], NEGATIVE HYPERGEOMETRIC DISTRIBUTION,seg_403,this distribution is also called markov–polya distribution. the pdf is given by,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4997, 23760,  3351, 28993,  4353])","tensor([  101,  2023,  4353,  2003,  2036,  2170, 28003,  2615,  1516, 26572,
         2050,  4353,  1012,  1996, 11135,  2003,  2445,  2011,   102])"
2053,1,"['mean', 'variance', 'distribution', 'binomial', 'case', 'binomial distribution']", NEGATIVE HYPERGEOMETRIC DISTRIBUTION,seg_403,"for x = 0, 1, 2, … , n where a, b, n are integers. the mean and variance are given by   = e(x) = an∕(a + b), variance =  2 = abn(a + b + n)∕[(a + b)2(a + b + 1)]. replace an/(a + b) on the rhs by  , we get  2 =   ∗ b(a + b + n)∕[(a + b)(a + b + 1)]. write the rhs as   ∗[b/(a+b)*(a+b+n)/(a+b+1)]. beta binomial distribution discussed in the following is a special case when k and (n − k) are integers.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4997, 23760,  3351, 28993,  4353])","tensor([  101,  2005,  1060,  1027,  1014,  1010,  1015,  1010,  1016,  1010,
         1529,  1010,  1050,  2073,  1037,  1010,  1038,  1010,  1050,  2024,
        24028,  1012,  1996,  2812,  1998, 23284,  2024,  2445,  2011,  1027,
         1041,  1006,  1060,  1007,  1027,   100,  1006,  1037,  1009,  1038,
         1007,  1010, 23284,  1027,  1016,  1027, 11113,  2078,  1006,  1037,
         1009,  1038,  1009,  1050,  1007,   100,  1031,  1006,  1037,  1009,
         1038,  1007,  1016,  1006,  1037,  1009,  1038,  1009,  1015,  1007,
         1033,  1012,  5672,  2019,  1013,  1006,  1037,  1009,  1038,  1007,
         2006,  1996,  1054,  7898,  2011,  1010,  2057,  2131,  1016,  1027,
         1598,  1038,  1006,  1037,  1009,  1038,  1009,  1050,  1007,   100,
         1031,  1006,  1037,  1009,  1038,  1007,  1006,  1037,  1009,  1038,
         1009,  1015,  1007,  1033,  1012,  4339,  1996,  1054,  7898,  2004,
         1598,  1031,  1038,  1013,  1006,  1037,  1009,  1038,  1007,  1008,
         1006,  1037,  1009,  1038,  1009,  1050,  1007,  1013,  1006,  1037,
         1009,  1038,  1009,  1015,  1007,  1033,  1012,  8247,  8026, 20936,
         2389,  4353,  6936,  1999,  1996,  2206,  2003,  1037,  2569,  2553,
         2043,  1047,  1998,  1006,  1050,  1597,  1047,  1007,  2024, 24028,
         1012,   102])"
2054,1,"['success', 'probability', 'random variable', 'probability of success', 'random', 'conditional distribution', 'distribution', 'conditional', 'binomial', 'variable', 'binomial distribution']", BETA BINOMIAL DISTRIBUTION,seg_405,"this distribution can be obtained as the conditional distribution of binomial distribution in which the probability of success is distributed according to the beta law. consider the binomial distributed random variable with pdf bx(n, p) =",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([  101,  2023,  4353,  2064,  2022,  4663,  2004,  1996, 18462,  4353,
         1997,  8026, 20936,  2389,  4353,  1999,  2029,  1996,  9723,  1997,
         3112,  2003,  5500,  2429,  2000,  1996,  8247,  2375,  1012,  5136,
         1996,  8026, 20936,  2389,  5500,  6721,  8023,  2007, 11135,  1038,
         2595,  1006,  1050,  1010,  1052,  1007,  1027,   102])"
2055,1,"['continuous', 'continuous random variable', 'range', 'random variable', 'random', 'variable']", BETA BINOMIAL DISTRIBUTION,seg_405,"xr)0 ≤ p ≤ 1. as p is a continuous random variable in the range (0,1), we obtain",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([ 101, 1060, 2099, 1007, 1014, 1608, 1052, 1608, 1015, 1012, 2004, 1052,
        2003, 1037, 7142, 6721, 8023, 1999, 1996, 2846, 1006, 1014, 1010, 1015,
        1007, 1010, 2057, 6855,  102])"
2056,1,"['joint probability', 'joint', 'probability', 'distribution']", BETA BINOMIAL DISTRIBUTION,seg_405,the unconditional distribution of x by integrating out p from the joint probability,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([  101,  1996,  4895,  8663, 27064,  4353,  1997,  1060,  2011, 22380,
         2041,  1052,  2013,  1996,  4101,  9723,   102])"
2057,1,['distribution'], BETA BINOMIAL DISTRIBUTION,seg_405,"γ(a)γ(b) distribution and using the expansion b(a, b) = as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([ 101, 1157, 1006, 1037, 1007, 1157, 1006, 1038, 1007, 4353, 1998, 2478,
        1996, 4935, 1038, 1006, 1037, 1010, 1038, 1007, 1027, 2004,  102])"
2058,1,"['mean', 'bayesian', 'conditional expectation', 'expectation', 'conditional']", BETA BINOMIAL DISTRIBUTION,seg_405,"this form is widely used in bayesian analysis. the mean   is most easily obtained from the conditional expectation as e(x) = e[e(x|p)] = ne(p) = na∕(a + b) = np,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([  101,  2023,  2433,  2003,  4235,  2109,  1999,  3016, 25253,  4106,
         1012,  1996,  2812,  2003,  2087,  4089,  4663,  2013,  1996, 18462,
        17626,  2004,  1041,  1006,  1060,  1007,  1027,  1041,  1031,  1041,
         1006,  1060,  1064,  1052,  1007,  1033,  1027, 11265,  1006,  1052,
         1007,  1027,   100,  1006,  1037,  1009,  1038,  1007,  1027, 27937,
         1010,   102])"
2059,1,"['moment', 'moment ']", BETA BINOMIAL DISTRIBUTION,seg_405,a where p = (a+b) . the second raw moment  2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([ 101, 1037, 2073, 1052, 1027, 1006, 1037, 1009, 1038, 1007, 1012, 1996,
        2117, 6315, 2617, 1016,  102])"
2060,1,['variance'], BETA BINOMIAL DISTRIBUTION,seg_405,which the variance follows as  2 = npq + n(n−1)pq where q = 1 − p. this can also,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([  101,  2029,  1996, 23284,  4076,  2004,  1016,  1027, 27937,  4160,
         1009,  1050,  1006,  1050, 27944,  1007,  1052,  4160,  2073,  1053,
         1027,  1015,  1597,  1052,  1012,  2023,  2064,  2036,   102])"
2061,1,"['parameter', 'table', 'bayesian', 'trials']", BETA BINOMIAL DISTRIBUTION,seg_405,"a+b+1 be written as npq(a + b + n)∕(a + b + 1). in bayesian analysis, this is written as n (1 − )[1 + (n − 1) ], where = p and = 1∕(a + b + 1) is the pairwise correlation between the trials called overdispersion parameter. this form is obtained from the previous one by writing a + b + n as a + b + 1 + (n − 1) and dividing by the denominator a + b + 1 (see table 6.14).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([  101,  1037,  1009,  1038,  1009,  1015,  2022,  2517,  2004, 27937,
         4160,  1006,  1037,  1009,  1038,  1009,  1050,  1007,   100,  1006,
         1037,  1009,  1038,  1009,  1015,  1007,  1012,  1999,  3016, 25253,
         4106,  1010,  2023,  2003,  2517,  2004,  1050,  1006,  1015,  1597,
         1007,  1031,  1015,  1009,  1006,  1050,  1597,  1015,  1007,  1033,
         1010,  2073,  1027,  1052,  1998,  1027,   100,  1006,  1037,  1009,
         1038,  1009,  1015,  1007,  2003,  1996,  3940, 14244, 16902,  2090,
         1996,  7012,  2170,  2058, 10521,  7347,  3258, 16381,  1012,  2023,
         2433,  2003,  4663,  2013,  1996,  3025,  2028,  2011,  3015,  1037,
         1009,  1038,  1009,  1050,  2004,  1037,  1009,  1038,  1009,  1015,
         1009,  1006,  1050,  1597,  1015,  1007,  1998, 16023,  2011,  1996,
         7939, 20936, 27413,  1037,  1009,  1038,  1009,  1015,  1006,  2156,
         2795,  1020,  1012,  2403,  1007,  1012,   102])"
2062,0,[], BETA BINOMIAL DISTRIBUTION,seg_405,see reference 153 for properties and generalizations.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8247,  8026, 20936,  2389,  4353])","tensor([  101,  2156,  4431, 16710,  2005,  5144,  1998,  2236, 22318,  1012,
          102])"
2063,1,"['negative binomial distribution', 'parameter', 'table', 'negative binomial', 'distribution', 'binomial', 'case', 'binomial distribution']", LOGARITHMIC SERIES DISTRIBUTION,seg_407,this is a special case of the left-truncated negative binomial distribution where the zero class has been omitted and the parameter k tends to one (table 6.14).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([8833, 8486, 2705, 7712, 2186, 4353])","tensor([  101,  2023,  2003,  1037,  2569,  2553,  1997,  1996,  2187,  1011,
        25449,  4997,  8026, 20936,  2389,  4353,  2073,  1996,  5717,  2465,
         2038,  2042, 16647,  1998,  1996, 16381,  1047, 12102,  2000,  2028,
         1006,  2795,  1020,  1012,  2403,  1007,  1012,   102])"
2064,1,"['continuous', 'function', 'distribution', 'discrete distribution', 'discrete']", LOGARITHMIC SERIES DISTRIBUTION,seg_407,"although log() is a continuous function, this is a discrete distribution with infinite support. it has pdf",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([8833, 8486, 2705, 7712, 2186, 4353])","tensor([  101,  2348,  8833,  1006,  1007,  2003,  1037,  7142,  3853,  1010,
         2023,  2003,  1037, 16246,  4353,  2007, 10709,  2490,  1012,  2009,
         2038, 11135,   102])"
2065,0,[], LOGARITHMIC SERIES DISTRIBUTION,seg_407,an alternate parametrization is as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([8833, 8486, 2705, 7712, 2186, 4353])","tensor([  101,  2019,  6585, 11498, 11368, 26910,  2003,  2004,   102])"
2066,1,"['factorial moment', 'mean', 'factorial moments', 'moment', 'parameter', 'variance', 'moments', 'logarithmic distribution', 'distribution', 'model', 'factorial']", Properties of Logarithmic Distribution,seg_409,"the logarithmic distribution has a single parameter p. the mean is = q∕[−plog(p)]. as 0 p 1, log(p) is negative, thereby canceling out negative sign. variance is 2 = −q(q + log(p))∕[(p log(p))2]. in terms of , this is 2 = (1∕p − ) or equivalently 2 + 2 = ∕p. cross-multiply to get p = ∕( 2 + 2). this shows that the variance is less than the mean for (1∕p − ) 1 or equivalently p 1∕(1 + ). for the alternate representation (6.13), the mean is = a ∕(1 − ) and variance is (1 − a )∕(1 − ). to fit the model, compute x and s2 and find p̂ = x∕(x2 + s2). as the variance is +ve, q − log(p). the factorial moments are easier to find than central moments. the kth factorial moment is given by",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([5144, 1997, 8833, 8486, 2705, 7712, 4353])","tensor([  101,  1996,  8833,  8486,  2705,  7712,  4353,  2038,  1037,  2309,
        16381,  1052,  1012,  1996,  2812,  2003,  1027,   100,  1031,  1597,
        24759,  8649,  1006,  1052,  1007,  1033,  1012,  2004,  1014,  1052,
         1015,  1010,  8833,  1006,  1052,  1007,  2003,  4997,  1010,  8558,
        17542,  2075,  2041,  4997,  3696,  1012, 23284,  2003,  1016,  1027,
         1597,  4160,  1006,  1053,  1009,  8833,  1006,  1052,  1007,  1007,
          100,  1031,  1006,  1052,  8833,  1006,  1052,  1007,  1007,  1016,
         1033,  1012,  1999,  3408,  1997,  1010,  2023,  2003,  1016,  1027,
         1006,   100,  1597,  1007,  2030,  5662,  2135,  1016,  1009,  1016,
         1027,   100,  1012,  2892,  1011,  4800, 22086,  2000,  2131,  1052,
         1027,   100,  1006,  1016,  1009,  1016,  1007,  1012,  2023,  3065,
         2008,  1996, 23284,  2003,  2625,  2084,  1996,  2812,  2005,  1006,
          100,  1597,  1007,  1015,  2030,  5662,  2135,  1052,   100,  1006,
         1015,  1009,  1007,  1012,  2005,  1996,  6585,  6630,  1006,  1020,
         1012,  2410,  1007,  1010,  1996,  2812,  2003,  1027,  1037,   100,
         1006,  1015,  1597,  1007,  1998, 23284,  2003,  1006,  1015,  1597,
         1037,  1007,   100,  1006,  1015,  1597,  1007,  1012,  2000,  4906,
         1996,  2944,  1010, 24134,  1060,  1998,  1055,  2475,  1998,  2424,
         1052,  1027,   100,  1006,  1060,  2475,  1009,  1055,  2475,  1007,
         1012,  2004,  1996, 23284,  2003,  1009,  2310,  1010,  1053,  1597,
         8833,  1006,  1052,  1007,  1012,  1996,  5387,  4818,  5312,  2024,
         6082,  2000,  2424,  2084,  2430,  5312,  1012,  1996,  1047,  2705,
         5387,  4818,  2617,  2003,  2445,  2011,   102])"
2067,1,"['table', 'distribution']", Properties of Logarithmic Distribution,seg_409,"the chf is given by  (t) = ln (1 − qeit)∕ ln (1 − q). as the values assumed by x are integers, it is used in those modeling situations involving counts. for instance, the number of items of a product purchased by a customer in a given period of time can be modeled by this distribution. see table 6.15 for more properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8833, 8486, 2705, 7712, 4353])","tensor([  101,  1996, 10381,  2546,  2003,  2445,  2011,  1006,  1056,  1007,
         1027,  1048,  2078,  1006,  1015,  1597,  1053, 20175,  1007,   100,
         1048,  2078,  1006,  1015,  1597,  1053,  1007,  1012,  2004,  1996,
         5300,  5071,  2011,  1060,  2024, 24028,  1010,  2009,  2003,  2109,
         1999,  2216, 11643,  8146,  5994,  9294,  1012,  2005,  6013,  1010,
         1996,  2193,  1997,  5167,  1997,  1037,  4031,  4156,  2011,  1037,
         8013,  1999,  1037,  2445,  2558,  1997,  2051,  2064,  2022, 14440,
         2011,  2023,  4353,  1012,  2156,  2795,  1020,  1012,  2321,  2005,
         2062,  5144,  1012,   102])"
2068,1,"['categories', 'probabilities', 'distribution', 'binomial', 'binomial distribution']", MULTINOMIAL DISTRIBUTION,seg_411,this distribution can be considered as a generalization of the binomial distribution with n( 2) categories. the corresponding probabilities are denoted as pi for the ith,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  2023,  4353,  2064,  2022,  2641,  2004,  1037,  2236,  3989,
         1997,  1996,  8026, 20936,  2389,  4353,  2007,  1050,  1006,  1016,
         1007,  7236,  1012,  1996,  7978,  4013,  3676, 14680,  2024, 19537,
         2004, 14255,  2005,  1996,  2009,  2232,   102])"
2069,1,"['multinomial', 'multinomial distribution', 'distribution']", MULTINOMIAL DISTRIBUTION,seg_411,"n =1 pi = 1. we denote it by mn(n, p1, p2, … , pn). the pdf of a general multinomial distribution with k classes is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  1050,  1027,  1015, 14255,  1027,  1015,  1012,  2057, 19090,
         2009,  2011, 24098,  1006,  1050,  1010,  1052,  2487,  1010,  1052,
         2475,  1010,  1529,  1010,  1052,  2078,  1007,  1012,  1996, 11135,
         1997,  1037,  2236,  4800,  3630, 10092,  2140,  4353,  2007,  1047,
         4280,  2003,   102])"
2070,1,['product notation'], MULTINOMIAL DISTRIBUTION,seg_411,"where x1 + x2 + … + xk = n and p1 + p2 + … + pk = 1. using the product notation introduced in chapter 1, this can be written as (n!∕∏i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  2073,  1060,  2487,  1009,  1060,  2475,  1009,  1529,  1009,
         1060,  2243,  1027,  1050,  1998,  1052,  2487,  1009,  1052,  2475,
         1009,  1529,  1009,  1052,  2243,  1027,  1015,  1012,  2478,  1996,
         4031, 14869,  3107,  1999,  3127,  1015,  1010,  2023,  2064,  2022,
         2517,  2004,  1006,  1050,   999,   100,   102])"
2071,0,['n'], MULTINOMIAL DISTRIBUTION,seg_411,i . this can n also be written as (,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([ 101, 1045, 1012, 2023, 2064, 1050, 2036, 2022, 2517, 2004, 1006,  102])"
2072,1,"['multinomial', 'coefficient']", MULTINOMIAL DISTRIBUTION,seg_411,"x1, x2, …, xk ), which is called the multinomial coefficient. as the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,  1060,
         2243,  1007,  1010,  2029,  2003,  2170,  1996,  4800,  3630, 10092,
         2140, 19064,  1012,  2004,  1996,   102])"
2073,1,['parameters'], MULTINOMIAL DISTRIBUTION,seg_411,"k =1 pi = 1, there are k parameters. for k = 2, this reduces to bino(n, p).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  1047,  1027,  1015, 14255,  1027,  1015,  1010,  2045,  2024,
         1047, 11709,  1012,  2005,  1047,  1027,  1016,  1010,  2023, 13416,
         2000,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  1012,   102])"
2074,1,"['poisson', 'distribution', 'poisson distribution', 'binomial', 'case', 'binomial distribution']", MULTINOMIAL DISTRIBUTION,seg_411,"as in the case of binomial distribution, we could show that this distribution tends to the multivariate poisson distribution:",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  2004,  1999,  1996,  2553,  1997,  8026, 20936,  2389,  4353,
         1010,  2057,  2071,  2265,  2008,  2023,  4353, 12102,  2000,  1996,
         4800, 10755, 13143, 13433, 24077,  4353,  1024,   102])"
2075,1,"['multinomial', 'multinomial distribution', 'distribution']", MULTINOMIAL DISTRIBUTION,seg_411,"theorem 6.11 if n is large and pi is small such that npi =  i remains a constant, the multinomial distribution approaches e−( 1+ 2+···+ k) n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  9872,  1020,  1012,  2340,  2065,  1050,  2003,  2312,  1998,
        14255,  2003,  2235,  2107,  2008, 27937,  2072,  1027,  1045,  3464,
         1037,  5377,  1010,  1996,  4800,  3630, 10092,  2140,  4353,  8107,
         1041, 22543,  1006,  1015,  1009,  1016,  1009,  1087,  1087,  1087,
         1009,  1047,  1007,  1050,   102])"
2076,1,"['multinomial', 'distribution', 'binomial', 'case', 'binomial distribution']", MULTINOMIAL DISTRIBUTION,seg_411,"proof: the easiest way to prove this result is using pgf. as in the case of binomial distribution, it is easy to derive the pgf of multinomial as (p1t1 + p2t2 + · · · + pktk)n. now proceed as done in section 6.5.8.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4800,  3630, 10092,  2140,  4353])","tensor([  101,  6947,  1024,  1996, 25551,  2126,  2000,  6011,  2023,  2765,
         2003,  2478, 18720,  2546,  1012,  2004,  1999,  1996,  2553,  1997,
         8026, 20936,  2389,  4353,  1010,  2009,  2003,  3733,  2000, 18547,
         1996, 18720,  2546,  1997,  4800,  3630, 10092,  2140,  2004,  1006,
         1052,  2487,  2102,  2487,  1009,  1052,  2475,  2102,  2475,  1009,
         1087,  1087,  1087,  1009,  1052, 25509,  2243,  1007,  1050,  1012,
         2085, 10838,  2004,  2589,  1999,  2930,  1020,  1012,  1019,  1012,
         1022,  1012,   102])"
2077,1,"['correlation', 'distribution', 'covariance', 'binomial', 'binomial distribution']", Properties of Multinomial Distribution,seg_413,"for each class, the means can be obtained using binomial distribution as e(xi) = npi, var(xi) = npiqi, and cov(xi,xj) = −npipj. as the covariance is negative, so is the correlation. this is because when one of them increases, the other must decrease due to the sum constraint on the xi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101,  2005,  2169,  2465,  1010,  1996,  2965,  2064,  2022,  4663,
         2478,  8026, 20936,  2389,  4353,  2004,  1041,  1006,  8418,  1007,
         1027, 27937,  2072,  1010, 13075,  1006,  8418,  1007,  1027, 27937,
        18515,  2072,  1010,  1998,  2522,  2615,  1006,  8418,  1010,  1060,
         3501,  1007,  1027,  1597, 16275, 11514,  3501,  1012,  2004,  1996,
         2522, 10755, 28335,  2003,  4997,  1010,  2061,  2003,  1996, 16902,
         1012,  2023,  2003,  2138,  2043,  2028,  1997,  2068,  7457,  1010,
         1996,  2060,  2442,  9885,  2349,  2000,  1996,  7680, 27142,  2006,
         1996,  8418,   102])"
2078,1,['table'], Properties of Multinomial Distribution,seg_413,′s. the chf is given by  (t) = [1 +∑m j=1 pj(eitj − 1)]n. see table 6.16 for more properties.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101,  1531,  1055,  1012,  1996, 10381,  2546,  2003,  2445,  2011,
         1006,  1056,  1007,  1027,  1031,  1015,  1009,   100,  1046,  1027,
         1015,  1052,  3501,  1006,  1041,  4183,  3501,  1597,  1015,  1007,
         1033,  1050,  1012,  2156,  2795,  1020,  1012,  2385,  2005,  2062,
         5144,  1012,   102])"
2079,1,"['binomial', 'observation', 'marginal', 'probabilities', 'distributions', 'distribution', 'marginal distribution', 'conditional', 'conditional distributions', 'marginal distributions']", Properties of Multinomial Distribution,seg_413,6.14.1.1 marginal and conditional distributions the marginal distributions are binomial that follows easily from the observation that the probabilities are obtained as terms in the expansion of (p1 + p2 + · · · + pn)n . if marginal distribution of xj is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101,  1020,  1012,  2403,  1012,  1015,  1012,  1015, 14785,  1998,
        18462, 20611,  1996, 14785, 20611,  2024,  8026, 20936,  2389,  2008,
         4076,  4089,  2013,  1996,  8089,  2008,  1996,  4013,  3676, 14680,
         2024,  4663,  2004,  3408,  1999,  1996,  4935,  1997,  1006,  1052,
         2487,  1009,  1052,  2475,  1009,  1087,  1087,  1087,  1009,  1052,
         2078,  1007,  1050,  1012,  2065, 14785,  4353,  1997,  1060,  3501,
         2003,   102])"
2080,1,"['binomial', 'missing data', 'variates', 'probability', 'multinomial', 'distributions', 'conditional distribution', 'distribution', 'parameters', 'conditional', 'data', 'multinomial distribution']", Properties of Multinomial Distribution,seg_413,"conditional distributions of multinomials are more important as these are used in the expectation–maximization algorithms (emas) [22]. let xn be a multinomial distribution with k classes defined earlier. suppose we have missing data in an experiment. for convenience, we assume that the first j components are observed, and j + 1 through k classes have missing data (unobserved). to derive the ema for this type of problems, one needs to find the conditional distribution of x|observed variates. the conditional distribution of xi given xj = nj is binomial with parameters n − nj and probability pi∕(1 − pj).",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101, 18462, 20611,  1997,  4800,  3630, 10092,  4877,  2024,  2062,
         2590,  2004,  2122,  2024,  2109,  1999,  1996, 17626,  1516, 20446,
         3989, 13792,  1006,  7861,  3022,  1007,  1031,  2570,  1033,  1012,
         2292,  1060,  2078,  2022,  1037,  4800,  3630, 10092,  2140,  4353,
         2007,  1047,  4280,  4225,  3041,  1012,  6814,  2057,  2031,  4394,
         2951,  1999,  2019,  7551,  1012,  2005, 15106,  1010,  2057,  7868,
         2008,  1996,  2034,  1046,  6177,  2024,  5159,  1010,  1998,  1046,
         1009,  1015,  2083,  1047,  4280,  2031,  4394,  2951,  1006, 27776,
         5910, 25944,  1007,  1012,  2000, 18547,  1996,  7861,  2050,  2005,
         2023,  2828,  1997,  3471,  1010,  2028,  3791,  2000,  2424,  1996,
        18462,  4353,  1997,  1060,  1064,  5159, 13075, 13143,  2015,  1012,
         1996, 18462,  4353,  1997,  8418,  2445,  1060,  3501,  1027, 19193,
         2003,  8026, 20936,  2389,  2007, 11709,  1050,  1597, 19193,  1998,
         9723,   100,  1006,  1015,  1597,  1052,  3501,  1007,  1012,   102])"
2081,1,['probabilities'], Properties of Multinomial Distribution,seg_413,"as xj+1,xj+2, … ,xk are unobserved with respective probabilities pj+1, pj+2, … , pk, we write it using p(a|b) = p(a∩b)/p(b) as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101,  2004,  1060,  3501,  1009,  1015,  1010,  1060,  3501,  1009,
         1016,  1010,  1529,  1010,  1060,  2243,  2024, 27776,  5910, 25944,
         2007,  7972,  4013,  3676, 14680,  1052,  3501,  1009,  1015,  1010,
         1052,  3501,  1009,  1016,  1010,  1529,  1010,  1052,  2243,  1010,
         2057,  4339,  2009,  2478,  1052,  1006,  1037,  1064,  1038,  1007,
         1027,  1052,  1006,  1037, 30131,  2497,  1007,  1013,  1052,  1006,
         1038,  1007,  2004,   102])"
2082,1,"['trials', 'independence']", Properties of Multinomial Distribution,seg_413,"owing to the independence of the trials, this becomes",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101, 11427,  2000,  1996,  4336,  1997,  1996,  7012,  1010,  2023,
         4150,   102])"
2083,1,"['multinomial', 'multinomial distribution', 'distribution']", Properties of Multinomial Distribution,seg_413,"canceling out common terms, this can be simplified to a multinomial distribution. see reference 154 for the mode of multinomial distribution,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101, 17542,  2075,  2041,  2691,  3408,  1010,  2023,  2064,  2022,
        11038,  2000,  1037,  4800,  3630, 10092,  2140,  4353,  1012,  2156,
         4431, 16666,  2005,  1996,  5549,  1997,  4800,  3630, 10092,  2140,
         4353,  1010,   102])"
2084,0,[], Properties of Multinomial Distribution,seg_413,example 6.42 human blood groups,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([ 101, 2742, 1020, 1012, 4413, 2529, 2668, 2967,  102])"
2085,1,['probability'], Properties of Multinomial Distribution,seg_413,"consider the human blood groups example in chapter 5. suppose that the percentage of people with the blood groups {a, b, o, and ab} are 40, 12, 5, and 43, respectively. find the probability that (i) in a group of 60 students, 30 or more are of blood group “a” and (ii) at least 4 persons have blood group o.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101,  5136,  1996,  2529,  2668,  2967,  2742,  1999,  3127,  1019,
         1012,  6814,  2008,  1996,  7017,  1997,  2111,  2007,  1996,  2668,
         2967,  1063,  1037,  1010,  1038,  1010,  1051,  1010,  1998, 11113,
         1065,  2024,  2871,  1010,  2260,  1010,  1019,  1010,  1998,  4724,
         1010,  4414,  1012,  2424,  1996,  9723,  2008,  1006,  1045,  1007,
         1999,  1037,  2177,  1997,  3438,  2493,  1010,  2382,  2030,  2062,
         2024,  1997,  2668,  2177,  1523,  1037,  1524,  1998,  1006,  2462,
         1007,  2012,  2560,  1018,  5381,  2031,  2668,  2177,  1051,  1012,
          102])"
2086,1,"['probability', 'frequency']", Properties of Multinomial Distribution,seg_413,"solution 6.42 using the frequency approach, we expect the probability of any person with blood group “a” as 0.40. denote this as p1 = 0.40. similarly p2 = 0.12, p3 = 0.05, and p4 = 0.43. this gives the pdf as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101,  5576,  1020,  1012,  4413,  2478,  1996,  6075,  3921,  1010,
         2057,  5987,  1996,  9723,  1997,  2151,  2711,  2007,  2668,  2177,
         1523,  1037,  1524,  2004,  1014,  1012,  2871,  1012, 19090,  2023,
         2004,  1052,  2487,  1027,  1014,  1012,  2871,  1012,  6660,  1052,
         2475,  1027,  1014,  1012,  2260,  1010,  1052,  2509,  1027,  1014,
         1012,  5709,  1010,  1998,  1052,  2549,  1027,  1014,  1012,  4724,
         1012,  2023,  3957,  1996, 11135,  2004,   102])"
2087,1,"['marginal', 'probability', 'distribution', 'marginal distribution', 'binomial']", Properties of Multinomial Distribution,seg_413,"0 30 bino(60, 0.40), as the marginal distribution is binomial. (ii) probability of “o” blood group is 5/100 = 1/20. thus, the answer is 1−∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([  101,  1014,  2382,  8026,  2080,  1006,  3438,  1010,  1014,  1012,
         2871,  1007,  1010,  2004,  1996, 14785,  4353,  2003,  8026, 20936,
         2389,  1012,  1006,  2462,  1007,  9723,  1997,  1523,  1051,  1524,
         2668,  2177,  2003,  1019,  1013,  2531,  1027,  1015,  1013,  2322,
         1012,  2947,  1010,  1996,  3437,  2003,   100,   102])"
2088,0,[], Properties of Multinomial Distribution,seg_413,"3 =0 bino(60, 1∕20) =",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  4800,  3630, 10092,  2140,  4353])","tensor([ 101, 1017, 1027, 1014, 8026, 2080, 1006, 3438, 1010,  100, 1007, 1027,
         102])"
2089,1,"['continuous', 'parameter', 'geometric', 'probabilistic modeling', 'probabilistic', 'distributions', 'poisson', 'discrete distributions', 'data', 'discrete']", SUMMARY,seg_415,"the collected data are either count or continuous number type. several important discrete distributions encountered in probabilistic modeling are discussed and summarized in this chapter. some of these are used in subsequent chapters. sometimes, there are competing models (such as poisson with small , geometric or logarithmic distributions that have striking similarities for some parameter values).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  5067,  2951,  2024,  2593,  4175,  2030,  7142,  2193,
         2828,  1012,  2195,  2590, 16246, 20611,  8567,  1999,  4013,  3676,
        27965,  4588, 11643,  2024,  6936,  1998, 22539,  1999,  2023,  3127,
         1012,  2070,  1997,  2122,  2024,  2109,  1999,  4745,  9159,  1012,
         2823,  1010,  2045,  2024,  6637,  4275,  1006,  2107,  2004, 13433,
        24077,  2007,  2235,  1010, 14965,  2030,  8833,  8486,  2705,  7712,
        20611,  2008,  2031,  8478, 12319,  2005,  2070, 16381,  5300,  1007,
         1012,   102])"
2090,1,"['outcomes', 'binomial distribution', 'negative binomial distribution', 'bernoulli', 'geometric', 'binomial', 'probability distribution', 'probability', 'negative binomial', 'random sample', 'quality control', 'process', 'bernoulli distribution', 'control', 'geometric probability', 'sample', 'random', 'distribution']", SUMMARY,seg_415,"a manufactured item might meet engineering specifications (to be a quality item) or is a defective item otherwise. in a quality control inspection of sample items, the outcomes with respect to a specific item follow a bernoulli distribution. the number of quality items in a random sample of n inspected items follows a binomial distribution. if the inspection of items is done until a defective item is encountered, then the number of items inspected until the termination of the inspection follows a geometric probability distribution. if a modification in the inspection process is made such that the inspection of items is continued until an accumulation of a specified number r of defective items, then the number of inspected items follows a negative binomial distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  7609,  8875,  2453,  3113,  3330, 15480,  1006,  2000,
         2022,  1037,  3737,  8875,  1007,  2030,  2003,  1037, 28829,  8875,
         4728,  1012,  1999,  1037,  3737,  2491, 10569,  1997,  7099,  5167,
         1010,  1996, 13105,  2007,  4847,  2000,  1037,  3563,  8875,  3582,
         1037, 16595,  7140,  6894,  4353,  1012,  1996,  2193,  1997,  3737,
         5167,  1999,  1037,  6721,  7099,  1997,  1050, 20456,  5167,  4076,
         1037,  8026, 20936,  2389,  4353,  1012,  2065,  1996, 10569,  1997,
         5167,  2003,  2589,  2127,  1037, 28829,  8875,  2003,  8567,  1010,
         2059,  1996,  2193,  1997,  5167, 20456,  2127,  1996, 18287,  1997,
         1996, 10569,  4076,  1037, 14965,  9723,  4353,  1012,  2065,  1037,
        14080,  1999,  1996, 10569,  2832,  2003,  2081,  2107,  2008,  1996,
        10569,  1997,  5167,  2003,  2506,  2127,  2019, 20299,  1997,  1037,
         9675,  2193,  1054,  1997, 28829,  5167,  1010,  2059,  1996,  2193,
         1997, 20456,  5167,  4076,  1037,  4997,  8026, 20936,  2389,  4353,
         1012,   102])"
2091,1,"['tail', 'mean', 'deviation', 'power method', 'probabilities', 'distributions', 'tail probabilities', 'method', 'distribution', 'binomial', 'binomial distribution']", SUMMARY,seg_415,students and professionals are often interested in the tail probabilities of these distributions and approximations of it for power calculations. these tail probabilities can be obtained in closed form for some of the distributions. this in turn provides an alternative method to compute the mean deviation using the power method introduced in section 6.3 (p. 6–6). several researchers have extended abraham de moivre’s 1730 [130] result on the md of a binomial distribution. the notable ones being by bertrand,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2493,  1998,  8390,  2024,  2411,  4699,  1999,  1996,  5725,
         4013,  3676, 14680,  1997,  2122, 20611,  1998, 20167,  2015,  1997,
         2009,  2005,  2373, 16268,  1012,  2122,  5725,  4013,  3676, 14680,
         2064,  2022,  4663,  1999,  2701,  2433,  2005,  2070,  1997,  1996,
        20611,  1012,  2023,  1999,  2735,  3640,  2019,  4522,  4118,  2000,
        24134,  1996,  2812, 24353,  2478,  1996,  2373,  4118,  3107,  1999,
         2930,  1020,  1012,  1017,  1006,  1052,  1012,  1020,  1516,  1020,
         1007,  1012,  2195,  6950,  2031,  3668,  8181,  2139, 25175, 12229,
         1521,  1055, 23272,  1031,  7558,  1033,  2765,  2006,  1996,  9108,
         1997,  1037,  8026, 20936,  2389,  4353,  1012,  1996,  3862,  3924,
         2108,  2011, 20586,   102])"
2092,1,"['mean', 'deviation', 'probabilities', 'sample', 'distribution', 'sample mean']", SUMMARY,seg_415,"[131], frisch [155], kamat [156], winkler [157], diaconis and zabell [132], jogesh babu and rao [158], pham-gia et al. [159], pham-gia and hung [160] (who also derives the distribution of sample mean absolute deviation), egorychev et al. [161], and so on. in section 6.3 (p. 6–6), we have provided a greatly simplified expression involving either the cdf (left-tail probabilities) or the sf (right-tail probabilities) when the mean   is an integer or half integer.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1031, 14677,  1033,  1010, 10424, 19946,  1031, 14168,  1033,
         1010, 27829,  4017,  1031, 16734,  1033,  1010, 20472,  1031, 17403,
         1033,  1010, 22939,  8663,  2483,  1998, 23564, 17327,  1031, 14078,
         1033,  1010,  8183,  8449,  2232, 20948,  1998, 10546,  1031, 17696,
         1033,  1010,  6887,  3286,  1011, 27699,  3802,  2632,  1012,  1031,
        18914,  1033,  1010,  6887,  3286,  1011, 27699,  1998,  5112,  1031,
         8148,  1033,  1006,  2040,  2036, 12153,  1996,  4353,  1997,  7099,
         2812,  7619, 24353,  1007,  1010, 13059,  2854, 16179,  3802,  2632,
         1012,  1031, 17365,  1033,  1010,  1998,  2061,  2006,  1012,  1999,
         2930,  1020,  1012,  1017,  1006,  1052,  1012,  1020,  1516,  1020,
         1007,  1010,  2057,  2031,  3024,  1037,  6551, 11038,  3670,  5994,
         2593,  1996,  3729,  2546,  1006,  2187,  1011,  5725,  4013,  3676,
        14680,  1007,  2030,  1996, 16420,  1006,  2157,  1011,  5725,  4013,
         3676, 14680,  1007,  2043,  1996,  2812,  2003,  2019, 16109,  2030,
         2431, 16109,  1012,   102])"
2093,1,"['mean', 'variance', 'distribution', 'binomial', 'binomial distribution']", SUMMARY,seg_415,a) for the binomial distribution mean is   variance,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1037,  1007,  2005,  1996,  8026, 20936,  2389,  4353,  2812,
         2003, 23284,   102])"
2094,1,"['bernoulli distribution', 'bernoulli', 'variance', 'distribution']", SUMMARY,seg_415,b) variance of a bernoulli distribution lies between 0 and 1/4,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1038,  1007, 23284,  1997,  1037, 16595,  7140,  6894,  4353,
         3658,  2090,  1014,  1998,  1015,  1013,  1018,   102])"
2095,1,"['poisson', 'bimodal', 'poisson distribution', 'distribution']", SUMMARY,seg_415,c) poisson distribution is bimodal if   is noninteger,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1039,  1007, 13433, 24077,  4353,  2003, 12170,  5302,  9305,
         2065,  2003,  2512, 18447, 26320,   102])"
2096,1,"['poisson', 'distribution', 'poisson distribution']", SUMMARY,seg_415,d) poisson distribution satisfies the memory-less property,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1040,  1007, 13433, 24077,  4353,  2938,  2483, 14213,  1996,
         3638,  1011,  2625,  3200,   102])"
2097,1,"['geometric', 'range', 'geometric distribution', 'distribution']", SUMMARY,seg_415,e) geometric distribution has infinite range,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1041,  1007, 14965,  4353,  2038, 10709,  2846,   102])"
2098,1,"['mean', 'variance', 'distribution']", SUMMARY,seg_415,f) mean of a negative-binomial distribution is always greater than the variance,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0.])",tensor([12654]),"tensor([  101,  1042,  1007,  2812,  1997,  1037,  4997,  1011,  8026, 20936,
         2389,  4353,  2003,  2467,  3618,  2084,  1996, 23284,   102])"
2099,1,['variance'], SUMMARY,seg_415,"g) the variance of bino(n, p) and bino(n, q) are the same",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1043,  1007,  1996, 23284,  1997,  8026,  2080,  1006,  1050,
         1010,  1052,  1007,  1998,  8026,  2080,  1006,  1050,  1010,  1053,
         1007,  2024,  1996,  2168,   102])"
2100,1,"['distributions', 'discrete']", SUMMARY,seg_415,h) truncated discrete uniform distributions are of the same type.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1044,  1007, 25449, 16246,  6375, 20611,  2024,  1997,  1996,
         2168,  2828,  1012,   102])"
2101,1,"['range', 'hypergeometric', 'negative binomial', 'distributions', 'binomial', 'discrete']", SUMMARY,seg_415,6.2 which of the following distributions have infinite range? (a) binomial (b) negative binomial (c) discrete uniform (d) hypergeometric,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        1., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  1016,  2029,  1997,  1996,  2206, 20611,  2031,
        10709,  2846,  1029,  1006,  1037,  1007,  8026, 20936,  2389,  1006,
         1038,  1007,  4997,  8026, 20936,  2389,  1006,  1039,  1007, 16246,
         6375,  1006,  1040,  1007, 23760,  3351, 28993,   102])"
2102,1,"['mean', 'variance', 'variables']", SUMMARY,seg_415,"6.3 if the mean and variance of a binorandom variables, find the prob-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  1017,  2065,  1996,  2812,  1998, 23284,  1997,
         1037,  8026, 18842,  9527, 10857,  1010,  2424,  1996,  4013,  2497,
         1011,   102])"
2103,1,['distribution'], SUMMARY,seg_415,"mial distribution are equal, what is ability of each of the following:",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 8764, 2140, 4353, 2024, 5020, 1010, 2054, 2003, 3754, 1997, 2169,
        1997, 1996, 2206, 1024,  102])"
2104,1,"['negative binomial distribution', 'mean', 'variance', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", SUMMARY,seg_415,p[x   y] (d) p[x|x + y = (n + 6.4 if the mean and variance of a 1)] = 1∕n. negative binomial distribution are,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1052,  1031,  1060,  1061,  1033,  1006,  1040,  1007,  1052,
         1031,  1060,  1064,  1060,  1009,  1061,  1027,  1006,  1050,  1009,
         1020,  1012,  1018,  2065,  1996,  2812,  1998, 23284,  1997,  1037,
         1015,  1007,  1033,  1027,   100,  1012,  4997,  8026, 20936,  2389,
         4353,  2024,   102])"
2105,1,['binomial'], SUMMARY,seg_415,"equal, what is the value of p? 6.9 using the binomial expan-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5020,  1010,  2054,  2003,  1996,  3643,  1997,  1052,  1029,
         1020,  1012,  1023,  2478,  1996,  8026, 20936,  2389,  4654,  9739,
         1011,   102])"
2106,1,['distribution'], SUMMARY,seg_415,6.6 for which distribution is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1020, 1012, 1020, 2005, 2029, 4353, 2003,  102])"
2107,0,[], SUMMARY,seg_415,"f (x)∕f (x + k) = 1 for all k in the 6.10 if x is bino(n, p) prove that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1042, 1006, 1060, 1007,  100, 1006, 1060, 1009, 1047, 1007, 1027,
        1015, 2005, 2035, 1047, 1999, 1996, 1020, 1012, 2184, 2065, 1060, 2003,
        8026, 2080, 1006, 1050, 1010, 1052, 1007, 6011, 2008,  102])"
2108,1,['binomial'], SUMMARY,seg_415,"range?. e(x∕n) = p, and var(x∕n) = 6.7 prove that the binomial distribupq∕n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2846,  1029,  1012,  1041,  1006,   100,  1007,  1027,  1052,
         1010,  1998, 13075,  1006,   100,  1007,  1027,  1020,  1012,  1021,
         6011,  2008,  1996,  8026, 20936,  2389,   100,  1012,   102])"
2109,1,"['mean', 'variance', 'distribution']", SUMMARY,seg_415,"tion attains its maximum at k = 6.11 find the mean and variance of the ⌊(n + 1)p⌋. if k is an integer, then distribution discussed in section there are two maxima at k = (n + 6.5.4, p. 204. 1)p and k = (n + 1)p − 1 = np +",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239, 18759,  2015,  2049,  4555,  2012,  1047,  1027,
         1020,  1012,  2340,  2424,  1996,  2812,  1998, 23284,  1997,  1996,
          100,  1006,  1050,  1009,  1015,  1007,  1052,   100,  1012,  2065,
         1047,  2003,  2019, 16109,  1010,  2059,  4353,  6936,  1999,  2930,
         2045,  2024,  2048, 20446,  2050,  2012,  1047,  1027,  1006,  1050,
         1009,  1020,  1012,  1019,  1012,  1018,  1010,  1052,  1012, 19627,
         1012,  1015,  1007,  1052,  1998,  1047,  1027,  1006,  1050,  1009,
         1015,  1007,  1052,  1597,  1015,  1027, 27937,  1009,   102])"
2110,1,"['geometric', 'distribution']", SUMMARY,seg_415,"binomial distribution nb(k, p) is 6.8 if x and y are independently and identically distributed geometric ⌊(q∕p)(k − 1)⌋.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  8026, 20936,  2389,  4353,  1050,  2497,  1006,  1047,  1010,
         1052,  1007,  2003,  1020,  1012,  1022,  2065,  1060,  1998,  1061,
         2024,  9174,  1998,  7235,  2135,  5500, 14965,   100,  1006,   100,
         1007,  1006,  1047,  1597,  1015,  1007,   100,  1012,   102])"
2111,1,"['tail', 'probabilities', 'tail probabilities', 'binomial', 'independent']", SUMMARY,seg_415,"6.13 if x1,x2, … ,xn are independent 6.23 find tail probabilities of binomial",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  2410,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  2024,  2981,  1020,  1012,  2603,
         2424,  5725,  4013,  3676, 14680,  1997,  8026, 20936,  2389,   102])"
2112,1,"['incomplete beta', 'function', 'beta function', 'distributions', 'incomplete beta function', 'random', 'random variables', 'distribution', 'variables']", SUMMARY,seg_415,"ber(p) random variables, find distributions using incomplete beta function. (i) pr[b(10, 0.4) ≤ the distribution of u = ∏i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  2022,  2099,  1006,  1052,  1007,  6721, 10857,  1010,  2424,
        20611,  2478, 12958,  8247,  3853,  1012,  1006,  1045,  1007, 10975,
         1031,  1038,  1006,  2184,  1010,  1014,  1012,  1018,  1007,  1608,
         1996,  4353,  1997,  1057,  1027,   100,   102])"
2113,1,['variance'], SUMMARY,seg_415,"n =1(1 + 6], (ii) pr[b(22, 0.7) ≥ 18], (iii) kxi), where k is a constant. pr[b(40, 0.2) ≥ 35]. 6.14 prove that variance of duni(n) is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1050,  1027,  1015,  1006,  1015,  1009,  1020,  1033,  1010,
         1006,  2462,  1007, 10975,  1031,  1038,  1006,  2570,  1010,  1014,
         1012,  1021,  1007,  1609,  2324,  1033,  1010,  1006,  3523,  1007,
         1047,  9048,  1007,  1010,  2073,  1047,  2003,  1037,  5377,  1012,
        10975,  1031,  1038,  1006,  2871,  1010,  1014,  1012,  1016,  1007,
         1609,  3486,  1033,  1012,  1020,  1012,  2403,  6011,  2008, 23284,
         1997, 24654,  2072,  1006,  1050,  1007,  2003,   102])"
2114,1,"['change of origin', 'discrete', 'transformation']", SUMMARY,seg_415, 2 =  (  − 1)∕3 where   = (n + 6.24 prove that a change of origin transformation simply displaces 1)∕2. hence or otherwise show the discrete uniform distribu-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1027,  1006,  1597,  1015,  1007,   100,  2073,  1027,
         1006,  1050,  1009,  1020,  1012,  2484,  6011,  2008,  1037,  2689,
         1997,  4761,  8651,  3432,  4487, 13102, 19217,  2015,  1015,  1007,
          100,  1012,  6516,  2030,  4728,  2265,  1996, 16246,  6375,  4487,
         3367,  3089,  8569,  1011,   102])"
2115,1,['variance'], SUMMARY,seg_415,that the variance is greater than the tion to the left or right with,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2008,  1996, 23284,  2003,  3618,  2084,  1996, 14841,  2239,
         2000,  1996,  2187,  2030,  2157,  2007,   102])"
2116,1,['coefficient'], SUMMARY,seg_415,"6.15 show that the coefficient of varia + 1, a + 2, … , a + n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  2321,  2265,  2008,  1996, 19064,  1997, 13075,
         2401,  1009,  1015,  1010,  1037,  1009,  1016,  1010,  1529,  1010,
         1037,  1009,  1050,  1012,   102])"
2117,1,"['distributions', 'binomial', 'discrete']", SUMMARY,seg_415,ation (cv) of a binomial distribu6.25 which of the following discrete tion is cv =√q∕(np). distributions is always leptokur-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2012,  3258,  1006, 26226,  1007,  1997,  1037,  8026, 20936,
         2389,  4487,  3367,  3089,  8569,  2575,  1012,  2423,  2029,  1997,
         1996,  2206, 16246, 14841,  2239,  2003, 26226,  1027,   100,  1006,
        27937,  1007,  1012, 20611,  2003,  2467,  3393, 13876, 21940,  2099,
         1011,   102])"
2118,1,"['moment', 'moment ']", SUMMARY,seg_415,6.16 show that the third moment  3 tic?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  2385,  2265,  2008,  1996,  2353,  2617,  1017,
        14841,  2278,  1029,   102])"
2119,1,"['poisson', 'distribution', 'binomial', 'binomial distribution']", SUMMARY,seg_415,of a binomial distribution is npq (a) binomial (b) poisson (c),tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1037,  8026, 20936,  2389,  4353,  2003, 27937,  4160,
         1006,  1037,  1007,  8026, 20936,  2389,  1006,  1038,  1007, 13433,
        24077,  1006,  1039,  1007,   102])"
2120,1,"['geometric', 'discrete']", SUMMARY,seg_415,(q − p). geometric (d) discrete uniform.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  1053,  1597,  1052,  1007,  1012, 14965,  1006,  1040,
         1007, 16246,  6375,  1012,   102])"
2121,1,"['variance', 'distribution', 'discrete distribution', 'discrete']", SUMMARY,seg_415,6.17 prove that the variance of a bino6.26 for which discrete distribution is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  2459,  6011,  2008,  1996, 23284,  1997,  1037,
         8026,  2080,  2575,  1012,  2656,  2005,  2029, 16246,  4353,  2003,
          102])"
2122,1,"['mean', 'variance', 'distribution', 'geometric', 'covariance', 'binomial', 'discrete']", SUMMARY,seg_415,"mial distribution is always less the variance always greater than than the mean. the mean? (a) binomial (b) poisson (c) geometric (d) discrete 6.18 find the covariance cov(xi,xj) uniform.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  8764,  2140,  4353,  2003,  2467,  2625,  1996, 23284,  2467,
         3618,  2084,  2084,  1996,  2812,  1012,  1996,  2812,  1029,  1006,
         1037,  1007,  8026, 20936,  2389,  1006,  1038,  1007, 13433, 24077,
         1006,  1039,  1007, 14965,  1006,  1040,  1007, 16246,  1020,  1012,
         2324,  2424,  1996,  2522, 10755, 28335,  2522,  2615,  1006,  8418,
         1010,  1060,  3501,  1007,  6375,  1012,   102])"
2123,1,"['multinomial', 'approximation', 'skewness', 'poisson', 'distribution', 'binomial', 'multinomial distribution']", SUMMARY,seg_415,for multinomial distribution. why 6.27 truncation never changes the is it negative?. skewness of which distribution? 6.19 can the poisson approximation to (a) binomial (b) poisson (c),tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2005,  4800,  3630, 10092,  2140,  4353,  1012,  2339,  1020,
         1012,  2676, 19817,  4609, 10719,  2196,  3431,  1996,  2003,  2009,
         4997,  1029,  1012, 15315,  7974,  2791,  1997,  2029,  4353,  1029,
         1020,  1012,  2539,  2064,  1996, 13433, 24077, 20167,  2000,  1006,
         1037,  1007,  8026, 20936,  2389,  1006,  1038,  1007, 13433, 24077,
         1006,  1039,  1007,   102])"
2124,1,"['geometric', 'discrete']", SUMMARY,seg_415,"bino(n, p) be used when n is geometric (d) discrete uniform.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  2022,  2109,
         2043,  1050,  2003, 14965,  1006,  1040,  1007, 16246,  6375,  1012,
          102])"
2125,1,['discrete'], SUMMARY,seg_415,"small? (say n   15)?. if so, under 6.28 which of the following discrete",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  2235,  1029,  1006,  2360,  1050,  2321,  1007,  1029,  1012,
         2065,  2061,  1010,  2104,  1020,  1012,  2654,  2029,  1997,  1996,
         2206, 16246,   102])"
2126,1,"['symmetric', 'distributions']", SUMMARY,seg_415,what conditions?. distributions is never symmetric?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2054,  3785,  1029,  1012, 20611,  2003,  2196, 19490,  1029,
          102])"
2127,1,"['poisson', 'binomial']", SUMMARY,seg_415,"6.20 prove that the nb(k, p) with pdf (a) binomial (b) poisson (c) geo-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  2322,  6011,  2008,  1996,  1050,  2497,  1006,
         1047,  1010,  1052,  1007,  2007, 11135,  1006,  1037,  1007,  8026,
        20936,  2389,  1006,  1038,  1007, 13433, 24077,  1006,  1039,  1007,
        20248,  1011,   102])"
2128,1,['hypergeometric'], SUMMARY,seg_415,−1) pkqx can be obtained metric (d) hypergeometric.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0.])",tensor([12654]),"tensor([  101,  1597,  2487,  1007,  1052,  2243,  4160,  2595,  2064,  2022,
         4663, 12046,  1006,  1040,  1007, 23760,  3351, 28993,  1012,   102])"
2129,1,"['mean', 'variance', 'distributions', 'poisson', 'discrete distributions', 'binomial', 'discrete']", SUMMARY,seg_415,following discrete distributions? 6.21 the mean and variance can never (a) binomial (b) poisson (c) geo-,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2206, 16246, 20611,  1029,  1020,  1012,  2538,  1996,  2812,
         1998, 23284,  2064,  2196,  1006,  1037,  1007,  8026, 20936,  2389,
         1006,  1038,  1007, 13433, 24077,  1006,  1039,  1007, 20248,  1011,
          102])"
2130,1,['distributions'], SUMMARY,seg_415,be equal for which of the folmetric (d) uniform. lowing distributions? (a) bino-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2022,  5020,  2005,  2029,  1997,  1996,  1042,  4747, 12589,
         1006,  1040,  1007,  6375,  1012,  2659,  2075, 20611,  1029,  1006,
         1037,  1007,  8026,  2080,  1011,   102])"
2131,1,"['probabilities', 'negative binomial', 'poisson', 'distribution', 'geometric', 'binomial']", SUMMARY,seg_415,mial (b) poisson (c) geometric 6.30 for which distribution does the (d) negative binomial. individual probabilities (divided,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  8764,  2140,  1006,  1038,  1007, 13433, 24077,  1006,  1039,
         1007, 14965,  1020,  1012,  2382,  2005,  2029,  4353,  2515,  1996,
         1006,  1040,  1007,  4997,  8026, 20936,  2389,  1012,  3265,  4013,
         3676, 14680,  1006,  4055,   102])"
2132,1,"['probability', 'geometric']", SUMMARY,seg_415,by the first probability p) form a 6.22 what is the probability that a fair geometric progression?.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2011,  1996,  2034,  9723,  1052,  1007,  2433,  1037,  1020,
         1012,  2570,  2054,  2003,  1996,  9723,  2008,  1037,  4189, 14965,
        14967,  1029,  1012,   102])"
2133,0,[], SUMMARY,seg_415,coin need to be flipped ten times to,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 9226, 2342, 2000, 2022, 9357, 2702, 2335, 2000,  102])"
2134,1,['normal'], SUMMARY,seg_415,"get the 5th head on 10th flip? 9th 6.31 if x∼ pois( ), prove that log(x) head on 10th flip?. is approximately normal with",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])",tensor([12654]),"tensor([  101,  2131,  1996,  4833,  2132,  2006,  6049, 11238,  1029,  6280,
         1020,  1012,  2861,  2065,   100, 13433,  2483,  1006,  1007,  1010,
         6011,  2008,  8833,  1006,  1060,  1007,  2132,  2006,  6049, 11238,
         1029,  1012,  2003,  3155,  3671,  2007,   102])"
2135,1,"['poisson', 'probability', 'variance']", SUMMARY,seg_415,"mean log( ) as → ∞. what is 6.39 if x ∼ poisson( ), find the probathe variance?. bility that (i) x takes even values, (ii) x takes odd values. 6.32 prove that the probability generat-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2812,  8833,  1006,  1007,  2004,  1585,  1601,  1012,  2054,
         2003,  1020,  1012,  4464,  2065,  1060,   100, 13433, 24077,  1006,
         1007,  1010,  2424,  1996,  4013, 14479,  5369, 23284,  1029,  1012,
        12170, 18605,  2008,  1006,  1045,  1007,  1060,  3138,  2130,  5300,
         1010,  1006,  2462,  1007,  1060,  3138,  5976,  5300,  1012,  1020,
         1012,  3590,  6011,  2008,  1996,  9723, 11416,  2102,  1011,   102])"
2136,1,['function'], SUMMARY,seg_415,"ing function (pgf) of duni(n) is 6.40 if x ∼ geometric(p) find the probpx(t) = (1 − tn)∕[n(1 − t)]. ability that (i) x takes even values,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13749,  3853,  1006, 18720,  2546,  1007,  1997, 24654,  2072,
         1006,  1050,  1007,  2003,  1020,  1012,  2871,  2065,  1060,   100,
        14965,  1006,  1052,  1007,  2424,  1996,  4013,  2497,  2361,  2595,
         1006,  1056,  1007,  1027,  1006,  1015,  1597, 28286,  1007,   100,
         1031,  1050,  1006,  1015,  1597,  1056,  1007,  1033,  1012,  3754,
         2008,  1006,  1045,  1007,  1060,  3138,  2130,  5300,  1010,   102])"
2137,0,[], SUMMARY,seg_415,"(ii) x takes odd values. 6.33 prove that bino(n,  ∕n) →",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1006, 2462, 1007, 1060, 3138, 5976, 5300, 1012, 1020, 1012, 3943,
        6011, 2008, 8026, 2080, 1006, 1050, 1010,  100, 1007, 1585,  102])"
2138,0,[], SUMMARY,seg_415,"pois( ) as n → ∞. what about 6.41 let x ∼ binomial(n, p) and yk ∼ limiting behavior of bino(n, 1 − negative binomial(k, p). prove",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])",tensor([12654]),"tensor([  101, 13433,  2483,  1006,  1007,  2004,  1050,  1585,  1601,  1012,
         2054,  2055,  1020,  1012,  4601,  2292,  1060,   100,  8026, 20936,
         2389,  1006,  1050,  1010,  1052,  1007,  1998,  1061,  2243,   100,
        14879,  5248,  1997,  8026,  2080,  1006,  1050,  1010,  1015,  1597,
         4997,  8026, 20936,  2389,  1006,  1047,  1010,  1052,  1007,  1012,
         6011,   102])"
2139,1,['binomial'], SUMMARY,seg_415,6.34 describe how you can approxi6.42 find x such that the binomial,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  4090,  6235,  2129,  2017,  2064, 22480,  2072,
         2575,  1012,  4413,  2424,  1060,  2107,  2008,  1996,  8026, 20936,
         2389,   102])"
2140,1,"['probabilities', 'poisson', 'distribution', 'poisson distribution', 'binomial']", SUMMARY,seg_415,"mate binomial probabilities using left-tail probabilities (say ) are (i) a poisson distribution when p is b(20, 0.8) with = 0.41145 (ii) not so small, but is near 1 (say b(10, 0.7) with = 0.38278?. 0.98). 6.43 if x ∼ binomial(n, p), find the 6.35 find the mode of negative binocovariance of (x∕n, (n − x)∕n).",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6775,  8026, 20936,  2389,  4013,  3676, 14680,  2478,  2187,
         1011,  5725,  4013,  3676, 14680,  1006,  2360,  1007,  2024,  1006,
         1045,  1007,  1037, 13433, 24077,  4353,  2043,  1052,  2003,  1038,
         1006,  2322,  1010,  1014,  1012,  1022,  1007,  2007,  1027,  1014,
         1012, 27517, 19961,  1006,  2462,  1007,  2025,  2061,  2235,  1010,
         2021,  2003,  2379,  1015,  1006,  2360,  1038,  1006,  2184,  1010,
         1014,  1012,  1021,  1007,  2007,  1027,  1014,  1012,  4229, 22907,
         2620,  1029,  1012,  1014,  1012,  5818,  1007,  1012,  1020,  1012,
         4724,  2065,  1060,   100,  8026, 20936,  2389,  1006,  1050,  1010,
         1052,  1007,  1010,  2424,  1996,  1020,  1012,  3486,  2424,  1996,
         5549,  1997,  4997,  8026, 24163, 10755, 28335,  1997,  1006,   100,
         1010,  1006,  1050,  1597,  1060,  1007,   100,  1007,  1012,   102])"
2141,1,"['mean', 'variance', 'distribution', 'geometric', 'discrete distribution', 'discrete']", SUMMARY,seg_415,"mial nbino(k, p). show that 2 = (1 + ∕k). 6.44 obtain the mean and variance of zero-truncated geometric distribu6.36 if x is a discrete distribution such tion.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  8764,  2140,  1050, 21891,  1006,  1047,  1010,  1052,  1007,
         1012,  2265,  2008,  1016,  1027,  1006,  1015,  1009,   100,  1007,
         1012,  1020,  1012,  4008,  6855,  1996,  2812,  1998, 23284,  1997,
         5717,  1011, 25449, 14965,  4487,  3367,  3089,  8569,  2575,  1012,
         4029,  2065,  1060,  2003,  1037, 16246,  4353,  2107, 14841,  2239,
         1012,   102])"
2142,1,"['uniform distribution', 'skewness', 'distribution', 'discrete']", SUMMARY,seg_415,"that p(x = a) = p and p(x = b) = 1 − p, find distribution of (x − 6.45 what is the skewness of a discrete a)∕(b − a). uniform distribution? show that it",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2008,  1052,  1006,  1060,  1027,  1037,  1007,  1027,  1052,
         1998,  1052,  1006,  1060,  1027,  1038,  1007,  1027,  1015,  1597,
         1052,  1010,  2424,  4353,  1997,  1006,  1060,  1597,  1020,  1012,
         3429,  2054,  2003,  1996, 15315,  7974,  2791,  1997,  1037, 16246,
         1037,  1007,   100,  1006,  1038,  1597,  1037,  1007,  1012,  6375,
         4353,  1029,  2265,  2008,  2009,   102])"
2143,0,[], SUMMARY,seg_415,is always platykurtic. 6.37 if x ∼ geometric(p) find the dis-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([12654]),"tensor([  101,  2003,  2467, 20228,  4017, 15922, 19585,  2594,  1012,  1020,
         1012,  4261,  2065,  1060,   100, 14965,  1006,  1052,  1007,  2424,
         1996,  4487,  2015,  1011,   102])"
2144,0,[], SUMMARY,seg_415,tribution of y = exp(x). 6.46 if x ∼ geometric(p) with pdf,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([12654]),"tensor([  101, 13012, 29446,  1997,  1061,  1027,  4654,  2361,  1006,  1060,
         1007,  1012,  1020,  1012,  4805,  2065,  1060,   100, 14965,  1006,
         1052,  1007,  2007, 11135,   102])"
2145,1,['discrete'], SUMMARY,seg_415,"f (x;  ) = for x = 0, 1, 6.38 if x is discrete with support 1,2,...",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1042,  1006,  1060,  1025,  1007,  1027,  2005,  1060,  1027,
         1014,  1010,  1015,  1010,  1020,  1012,  4229,  2065,  1060,  2003,
        16246,  2007,  2490,  1015,  1010,  1016,  1010,  1012,  1012,  1012,
          102])"
2146,1,['variance'], SUMMARY,seg_415,and variance.,tensor(1),"tensor([0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1998, 23284,  1012,   102])"
2147,1,"['results', 'distribution']", SUMMARY,seg_415,6.47 prove that truncating a duni(n) distribution results in another distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  4700,  6011,  2008, 19817,  4609, 18252,  1037,
        24654,  2072,  1006,  1050,  1007,  4353,  3463,  1999,  2178,  4353,
          102])"
2148,1,"['tails', 'distribution']", SUMMARY,seg_415,"of the same type as follows. if the truncation is at a single point on either extremes, the new distribution is duni(n − 1). if the truncation is at both tails (one point each), the resulting distribution is duni(n − 2). if k points are truncated at both tails, the new distribution is duni(n − 2k).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1996,  2168,  2828,  2004,  4076,  1012,  2065,  1996,
        19817,  4609, 10719,  2003,  2012,  1037,  2309,  2391,  2006,  2593,
        28800,  1010,  1996,  2047,  4353,  2003, 24654,  2072,  1006,  1050,
         1597,  1015,  1007,  1012,  2065,  1996, 19817,  4609, 10719,  2003,
         2012,  2119, 17448,  1006,  2028,  2391,  2169,  1007,  1010,  1996,
         4525,  4353,  2003, 24654,  2072,  1006,  1050,  1597,  1016,  1007,
         1012,  2065,  1047,  2685,  2024, 25449,  2012,  2119, 17448,  1010,
         1996,  2047,  4353,  2003, 24654,  2072,  1006,  1050,  1597,  1016,
         2243,  1007,  1012,   102])"
2149,1,['mean'], SUMMARY,seg_415,"6.48 if x ∼ bino(n, p) where p → 1 for x = 0, 1, 2, … find the mean",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 1020, 1012, 4466, 2065, 1060,  100, 8026, 2080, 1006, 1050, 1010,
        1052, 1007, 2073, 1052, 1585, 1015, 2005, 1060, 1027, 1014, 1010, 1015,
        1010, 1016, 1010, 1529, 2424, 1996, 2812,  102])"
2150,1,['variance'], SUMMARY,seg_415,"from below, find the limiting disand variance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2013,  2917,  1010,  2424,  1996, 14879,  4487,  8791,  2094,
        23284,  1012,   102])"
2151,1,"['mean', 'variance']", SUMMARY,seg_415,tribution of x when n → ∞ and nq 6.51 find the mean and variance of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0.])",tensor([12654]),"tensor([  101, 13012, 29446,  1997,  1060,  2043,  1050,  1585,  1601,  1998,
         1050,  4160,  1020,  1012,  4868,  2424,  1996,  2812,  1998, 23284,
         1997,   102])"
2152,0,[], SUMMARY,seg_415,"remains a constant. truncated nbino(k, p) distribu-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  3464,  1037,  5377,  1012, 25449,  1050, 21891,  1006,  1047,
         1010,  1052,  1007,  4487,  3367,  3089,  8569,  1011,   102])"
2153,1,"['skewness coefficient', 'coefficient', 'skewness']", SUMMARY,seg_415,6.49 obtain the skewness coefficient of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  4749,  6855,  1996, 15315,  7974,  2791, 19064,
         1997,   102])"
2154,1,"['symmetric', 'distribution']", SUMMARY,seg_415,"geometric distribution and argue ( q p)x, x = 1, 2, 3 … . that it is never symmetric.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101, 14965,  4353,  1998,  7475,  1006,  1053,  1052,  1007,  1060,
         1010,  1060,  1027,  1015,  1010,  1016,  1010,  1017,  1529,  1012,
         2008,  2009,  2003,  2196, 19490,  1012,   102])"
2155,1,"['binomial distribution', 'binomial', 'distribution']", SUMMARY,seg_415,with pdf f (x;  ) = e− (1 − e− )x binomial distribution satisfies the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2007, 11135,  1042,  1006,  1060,  1025,  1007,  1027,  1041,
        22543,  1006,  1015,  1597,  1041, 22543,  1007,  1060,  8026, 20936,
         2389,  4353,  2938,  2483, 14213,  1996,   102])"
2156,1,"['bernoulli', 'probability', 'probability of success', 'trials', 'bernoulli trials', 'distribution', 'success', 'independent']", SUMMARY,seg_415,"recurrence (1 + p)(k + 1)fk+1(x) = independent bernoulli trials with p(n + k)fk(x), k = 1, 2, … the same probability of success p. find the distribution of u = (|x − 6.53 prove that the hypergeomety| + 1)∕2 for n odd.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 28667,  3126, 24413,  1006,  1015,  1009,  1052,  1007,  1006,
         1047,  1009,  1015,  1007, 14352,  1009,  1015,  1006,  1060,  1007,
         1027,  2981, 16595,  7140,  6894,  7012,  2007,  1052,  1006,  1050,
         1009,  1047,  1007, 14352,  1006,  1060,  1007,  1010,  1047,  1027,
         1015,  1010,  1016,  1010,  1529,  1996,  2168,  9723,  1997,  3112,
         1052,  1012,  2424,  1996,  4353,  1997,  1057,  1027,  1006,  1064,
         1060,  1597,  1020,  1012,  5187,  6011,  2008,  1996, 23760,  3351,
         8462,  3723,  1064,  1009,  1015,  1007,   100,  2005,  1050,  5976,
         1012,   102])"
2157,1,['distribution'], SUMMARY,seg_415,ric distribution (k x)(n n−,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 26220,  4353,  1006,  1047,  1060,  1007,  1006,  1050,  1050,
        22543,   102])"
2158,1,"['sample', 'random', 'binomial']", SUMMARY,seg_415,"k) ∕(n n ) 6.55 an urn contains 10 red and 6 blue tends to the binomial distribuballs. a sample of five balls is tion bino(n, p) where p = k∕n selected at random. let y denote",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1047,  1007,   100,  1006,  1050,  1050,  1007,  1020,  1012,
         4583,  2019, 24471,  2078,  3397,  2184,  2417,  1998,  1020,  2630,
        12102,  2000,  1996,  8026, 20936,  2389,  4487,  3367,  3089,  8569,
        18510,  1012,  1037,  7099,  1997,  2274,  7395,  2003, 14841,  2239,
         8026,  2080,  1006,  1050,  1010,  1052,  1007,  2073,  1052,  1027,
          100,  3479,  2012,  6721,  1012,  2292,  1061, 19090,   102])"
2159,0,['n'], SUMMARY,seg_415,as n → ∞. the number of red balls in the sam-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 2004, 1050, 1585, 1601, 1012, 1996, 2193, 1997, 2417, 7395, 1999,
        1996, 3520, 1011,  102])"
2160,1,"['function', 'density function']", SUMMARY,seg_415,6.54 let x denote the number of sucple. find the density function of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  5139,  2292,  1060, 19090,  1996,  2193,  1997,
        10514, 21906,  2571,  1012,  2424,  1996,  4304,  3853,  1997,   102])"
2161,1,"['with replacement', 'without replacement', 'tails', 'failures', 'sampling', 'replacement']", SUMMARY,seg_415,cesses (or heads) and y denote the y if sampling is with replacement number of failures (or tails) in n and without replacement.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  8292, 11393,  2015,  1006,  2030,  4641,  1007,  1998,  1061,
        19090,  1996,  1061,  2065, 16227,  2003,  2007,  6110,  2193,  1997,
        15428,  1006,  2030, 17448,  1007,  1999,  1050,  1998,  2302,  6110,
         1012,   102])"
2162,0,[], SUMMARY,seg_415,"6.56 a company does tele marketing to sell its products. three tele-operators x, y,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([12654]),"tensor([  101,  1020,  1012,  5179,  1037,  2194,  2515, 10093,  2063,  5821,
         2000,  5271,  2049,  3688,  1012,  2093, 10093,  2063,  1011,  9224,
         1060,  1010,  1061,  1010,   102])"
2163,1,"['success', 'rate', 'probability', 'deviations', 'standard', 'average', 'standard deviations']", SUMMARY,seg_415,"z contact customers over the telephone and explains the company’s products to them to get possible orders. the average success rate in selling at least one item out of 100 tele-contacts is 12 for x, 7 for y, and 3 for z with respective standard deviations 5, 2, and 1. find the probability for each of the following: (a) x is able to get 20 or more sales orders out of 300 customers and (b) y and z together gets 30–60 orders.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1062,  3967,  6304,  2058,  1996,  7026,  1998,  7607,  1996,
         2194,  1521,  1055,  3688,  2000,  2068,  2000,  2131,  2825,  4449,
         1012,  1996,  2779,  3112,  3446,  1999,  4855,  2012,  2560,  2028,
         8875,  2041,  1997,  2531, 10093,  2063,  1011, 10402,  2003,  2260,
         2005,  1060,  1010,  1021,  2005,  1061,  1010,  1998,  1017,  2005,
         1062,  2007,  7972,  3115, 24353,  2015,  1019,  1010,  1016,  1010,
         1998,  1015,  1012,  2424,  1996,  9723,  2005,  2169,  1997,  1996,
         2206,  1024,  1006,  1037,  1007,  1060,  2003,  2583,  2000,  2131,
         2322,  2030,  2062,  4341,  4449,  2041,  1997,  3998,  6304,  1998,
         1006,  1038,  1007,  1061,  1998,  1062,  2362,  4152,  2382,  1516,
         3438,  4449,  1012,   102])"
2164,1,"['distributions', 'random', 'discrete distributions', 'discrete']", SUMMARY,seg_415,6.57 describe how to generate random 6.60 for which discrete distributions is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  5401,  6235,  2129,  2000,  9699,  6721,  1020,
         1012,  3438,  2005,  2029, 16246, 20611,  2003,   102])"
2165,1,"['mean', 'variance', 'negative binomial', 'binomial']", SUMMARY,seg_415,the variance always less than the numbers from negative binomial mean?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1996, 23284,  2467,  2625,  2084,  1996,  3616,  2013,  4997,
         8026, 20936,  2389,  2812,  1029,   102])"
2166,1,['random'], SUMMARY,seg_415,distribution using a random num-,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4353,  2478,  1037,  6721, 16371,  2213,  1011,   102])"
2167,1,"['geometric', 'independent']", SUMMARY,seg_415,"ber generator for geometric distri6.61 if x1,x2, … ,xm are independent bution. ber(pi), where each pi is either equal to p or equal to q, find the",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2022,  2099, 13103,  2005, 14965,  4487,  3367,  3089,  2575,
         1012,  6079,  2065,  1060,  2487,  1010,  1060,  2475,  1010,  1529,
         1010,  1060,  2213,  2024,  2981,  2021,  3258,  1012,  2022,  2099,
         1006, 14255,  1007,  1010,  2073,  2169, 14255,  2003,  2593,  5020,
         2000,  1052,  2030,  5020,  2000,  1053,  1010,  2424,  1996,   102])"
2168,1,"['random', 'random variables', 'variables', 'independent']", SUMMARY,seg_415,"geometric random variables, find 6.62 if x and y are independent",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101, 14965,  6721, 10857,  1010,  2424,  1020,  1012,  5786,  2065,
         1060,  1998,  1061,  2024,  2981,   102])"
2169,1,"['mean', 'variance', 'distribution']", SUMMARY,seg_415,"bino(n, p) find the distribution of the distribution of zi = min(x1, x|x + y = n. find its mean and x2, … ,xn). variance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  2424,  1996,
         4353,  1997,  1996,  4353,  1997,  1062,  2072,  1027,  8117,  1006,
         1060,  2487,  1010,  1060,  1064,  1060,  1009,  1061,  1027,  1050,
         1012,  2424,  2049,  2812,  1998,  1060,  2475,  1010,  1529,  1010,
         1060,  2078,  1007,  1012, 23284,  1012,   102])"
2170,1,"['discrete', 'variance']", SUMMARY,seg_415,6.59 which of the discrete distribu6.63 prove that the variance of discrete,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  5354,  2029,  1997,  1996, 16246,  4487,  3367,
         3089,  8569,  2575,  1012,  6191,  6011,  2008,  1996, 23284,  1997,
        16246,   102])"
2171,1,"['uniform distribution', 'distribution']", SUMMARY,seg_415,tions satisfy: p(x ≥ s + t)|p(x ≥ uniform distribution is greater,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  5644, 13225,  1024,  1052,  1006,  1060,  1609,  1055,
         1009,  1056,  1007,  1064,  1052,  1006,  1060,  1609,  6375,  4353,
         2003,  3618,   102])"
2172,1,['mean'], SUMMARY,seg_415,s) = p(x ≥ t). than the mean for n   7.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1055, 1007, 1027, 1052, 1006, 1060, 1609, 1056, 1007, 1012, 2084,
        1996, 2812, 2005, 1050, 1021, 1012,  102])"
2173,1,"['mean', 'variance']", SUMMARY,seg_415,6.64 find mean and variance of,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  4185,  2424,  2812,  1998, 23284,  1997,   102])"
2174,1,"['mean', 'deviation']", SUMMARY,seg_415,6.65 find the pdf and cdf of the 6.66 find the mean deviation from the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  3515,  2424,  1996, 11135,  1998,  3729,  2546,
         1997,  1996,  1020,  1012,  5764,  2424,  1996,  2812, 24353,  2013,
         1996,   102])"
2175,1,"['mean', 'geometric distribution', 'uniform distribution', 'distribution', 'geometric']", SUMMARY,seg_415,discrete uniform distribution when mean of a geometric distribution,tensor(1),"tensor([0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101, 16246,  6375,  4353,  2043,  2812,  1997,  1037, 14965,  4353,
          102])"
2176,1,['variance'], SUMMARY,seg_415,"obtain the pgf, and the variance. x = 1, … .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6855,  1996, 18720,  2546,  1010,  1998,  1996, 23284,  1012,
         1060,  1027,  1015,  1010,  1529,  1012,   102])"
2177,1,['multinomial'], SUMMARY,seg_415,"6.67 if x is distributed as bino(n, p) 6.78 prove that in a multinomial dis-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  6163,  2065,  1060,  2003,  5500,  2004,  8026,
         2080,  1006,  1050,  1010,  1052,  1007,  1020,  1012,  6275,  6011,
         2008,  1999,  1037,  4800,  3630, 10092,  2140,  4487,  2015,  1011,
          102])"
2178,1,"['standard', 'variance']", SUMMARY,seg_415,"the variance of (i) standard corr(xi, xj) = −( 1−",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996, 23284,  1997,  1006,  1045,  1007,  3115,  2522, 12171,
         1006,  8418,  1010,  1060,  3501,  1007,  1027,  1597,  1006,  1015,
        22543,   102])"
2179,1,"['independent', 'bernoulli', 'distribution']", SUMMARY,seg_415,uniform distribution? (ii) trun6.79 describe independent bernoulli,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  6375,  4353,  1029,  1006,  2462,  1007, 19817,  4609,  2575,
         1012,  6535,  6235,  2981, 16595,  7140,  6894,   102])"
2180,1,"['uniform distribution', 'trials', 'distribution']", SUMMARY,seg_415,cated uniform distribution? trials. if u = |x − y|∕2 where x,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([ 101, 4937, 2098, 6375, 4353, 1029, 7012, 1012, 2065, 1057, 1027, 1064,
        1060, 1597, 1061, 1064,  100, 2073, 1060,  102])"
2181,1,"['variance', 'failures', 'distribution', 'success']", SUMMARY,seg_415,"and y are the number of success 6.69 prove that the maximum variance and failures, what is distribution of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1998,  1061,  2024,  1996,  2193,  1997,  3112,  1020,  1012,
         6353,  6011,  2008,  1996,  4555, 23284,  1998, 15428,  1010,  2054,
         2003,  4353,  1997,   102])"
2182,1,"['bernoulli', 'bernoulli random variable', 'random variable', 'random', 'binomial', 'variable']", SUMMARY,seg_415,of a bernoulli random variable is u if p = 1∕2? 1/4 and that of a binomial distri-,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1037, 16595,  7140,  6894,  6721,  8023,  2003,  1057,
         2065,  1052,  1027,   100,  1029,  1015,  1013,  1018,  1998,  2008,
         1997,  1037,  8026, 20936,  2389,  4487,  3367,  3089,  1011,   102])"
2183,1,"['negative binomial distribution', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", SUMMARY,seg_415,bution is n∕4. 6.80 if a negative binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  2021,  3258,  2003,   100,  1012,  1020,  1012,  3770,  2065,
         1037,  4997,  8026, 20936,  2389,  4353,   102])"
2184,1,"['successes', 'trials']", SUMMARY,seg_415,is defined as the number of trials 6.70 for which of the following valneeded to produce k successes in n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2003,  4225,  2004,  1996,  2193,  1997,  7012,  1020,  1012,
         3963,  2005,  2029,  1997,  1996,  2206, 11748, 24045,  5732,  2000,
         3965,  1047, 14152,  1999,  1050,   102])"
2185,1,"['recurrence', 'mean', 'moment', 'moment recurrence', 'tails', 'trials', 'geometric']", SUMMARY,seg_415,"ues of p does the geometric distribution qxp tails off slowly? (a) trials, obtain a moment recurrence and find the mean. p = 0.1 (b) p = 0.5 (c) p = 0.8 (d)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1057,  2229,  1997,  1052,  2515,  1996, 14965,  4353,  1053,
         2595,  2361, 17448,  2125,  3254,  1029,  1006,  1037,  1007,  7012,
         1010,  6855,  1037,  2617, 28667,  3126, 24413,  1998,  2424,  1996,
         2812,  1012,  1052,  1027,  1014,  1012,  1015,  1006,  1038,  1007,
         1052,  1027,  1014,  1012,  1019,  1006,  1039,  1007,  1052,  1027,
         1014,  1012,  1022,  1006,  1040,  1007,   102])"
2186,0,[], SUMMARY,seg_415,p = 0.9 6.81 if x ∼ geometric(p) find the prob-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1052,  1027,  1014,  1012,  1023,  1020,  1012,  6282,  2065,
         1060,   100, 14965,  1006,  1052,  1007,  2424,  1996,  4013,  2497,
         1011,   102])"
2187,1,['mean'], SUMMARY,seg_415,ability that x   ⌈| log(p)|⌉ 6.71 obtain an expression for the mean,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 3754, 2008, 1060,  100, 1064, 8833, 1006, 1052, 1007, 1064,  100,
        1020, 1012, 6390, 6855, 2019, 3670, 2005, 1996, 2812,  102])"
2188,1,"['incomplete beta', 'function', 'negative binomial', 'distribution', 'binomial']", SUMMARY,seg_415,"deviation of a negative binomial 6.82 if x and y are iid geo(p), show distribution using incomplete beta p[x − y = 0] = p2∕(1 − q2) = function. p∕(1 + q).",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101, 24353,  1997,  1037,  4997,  8026, 20936,  2389,  1020,  1012,
         6445,  2065,  1060,  1998,  1061,  2024,  2462,  2094, 20248,  1006,
         1052,  1007,  1010,  2265,  4353,  2478, 12958,  8247,  1052,  1031,
         1060,  1597,  1061,  1027,  1014,  1033,  1027,   100,  1006,  1015,
         1597,  1053,  2475,  1007,  1027,  3853,  1012,   100,  1006,  1015,
         1009,  1053,  1007,  1012,   102])"
2189,1,['mean'], SUMMARY,seg_415,"6.72 prove that the mean devia6.83 if x ∼ bino(n, p) find the distri-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  5824,  6011,  2008,  1996,  2812, 14386,  2050,
         2575,  1012,  6640,  2065,  1060,   100,  8026,  2080,  1006,  1050,
         1010,  1052,  1007,  2424,  1996,  4487,  3367,  3089,  1011,   102])"
2190,1,"['poisson', 'mean', 'poisson distribution', 'distribution']", SUMMARY,seg_415,tion from the mean of the bution of y = (x − np)2. find its poisson distribution is 2 ∗ mean and mode. exp(− ) ⌊ ⌋+1∕⌊ ⌋!.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  2013,  1996,  2812,  1997,  1996,  2021,  3258,
         1997,  1061,  1027,  1006,  1060,  1597, 27937,  1007,  1016,  1012,
         2424,  2049, 13433, 24077,  4353,  2003,  1016,  1598,  2812,  1998,
         5549,  1012,  4654,  2361,  1006,  1597,  1007,   100,   100,  1009,
          100,   100,   100,   999,  1012,   102])"
2191,1,"['probability', 'moments']", SUMMARY,seg_415,"6.84 if x ∼ nbino(k, p) find a recur6.73 what is the probability distrirence relation for moments using",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  6391,  2065,  1060,   100,  1050, 21891,  1006,
         1047,  1010,  1052,  1007,  2424,  1037, 28667,  3126,  2575,  1012,
         6421,  2054,  2003,  1996,  9723,  4487,  3367,  3089, 24413,  7189,
         2005,  5312,  2478,   102])"
2192,1,"['failures', 'variance']", SUMMARY,seg_415,"bution of n − x failures in a f (x + 1, k, p) = q ∗ f (x, k, p) ∗ bino(n, p)? what is its variance? (x + k)∕(x + 1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2021,  3258,  1997,  1050,  1597,  1060, 15428,  1999,  1037,
         1042,  1006,  1060,  1009,  1015,  1010,  1047,  1010,  1052,  1007,
         1027,  1053,  1598,  1042,  1006,  1060,  1010,  1047,  1010,  1052,
         1007,  1598,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  1029,
         2054,  2003,  2049, 23284,  1029,  1006,  1060,  1009,  1047,  1007,
          100,  1006,  1060,  1009,  1015,  1007,  1012,   102])"
2193,1,['probability'], SUMMARY,seg_415,"6.74 if xi, i = 1, 2, … , r are iid 6.85 probability that high-rise struc-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1020, 1012, 6356, 2065, 8418, 1010, 1045, 1027, 1015, 1010, 1016,
        1010, 1529, 1010, 1054, 2024, 2462, 2094, 1020, 1012, 5594, 9723, 2008,
        2152, 1011, 4125, 2358, 6820, 2278, 1011,  102])"
2194,1,"['random', 'random variables', 'variables']", SUMMARY,seg_415,"geo(p) random variables, prove r tures in a city center will damage that ∑i=1 xi ∼ nbin(r, p). x other adjacent buildings after an",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101, 20248,  1006,  1052,  1007,  6721, 10857,  1010,  6011,  1054,
        10722,  6072,  1999,  1037,  2103,  2415,  2097,  4053,  2008,   100,
         1027,  1015,  8418,   100,  1050,  8428,  1006,  1054,  1010,  1052,
         1007,  1012,  1060,  2060,  5516,  3121,  2044,  2019,   102])"
2195,1,['probability'], SUMMARY,seg_415,"distribution of (i) x|(x + y = 2n), the probability that it will dam(ii) x|(x − y = n). age three or more buildings in the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 4353, 1997, 1006, 1045, 1007, 1060, 1064, 1006, 1060, 1009, 1061,
        1027, 1016, 2078, 1007, 1010, 1996, 9723, 2008, 2009, 2097, 5477, 1006,
        2462, 1007, 1060, 1064, 1006, 1060, 1597, 1061, 1027, 1050, 1007, 1012,
        2287, 2093, 2030, 2062, 3121, 1999, 1996,  102])"
2196,1,['variance'], SUMMARY,seg_415,vicinity. 6.76 what is the variance of limiting,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  9884,  1012,  1020,  1012,  6146,  2054,  2003,  1996, 23284,
         1997, 14879,   102])"
2197,1,"['mean', 'logarithmic distribution', 'variance', 'distribution']", SUMMARY,seg_415,binomial variate with fixed n when 6.86 if the mean and variance of a p → 0 from above or q → 1 from logarithmic distribution are   =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  8026, 20936,  2389, 13075, 13143,  2007,  4964,  1050,  2043,
         1020,  1012,  6564,  2065,  1996,  2812,  1998, 23284,  1997,  1037,
         1052,  1585,  1014,  2013,  2682,  2030,  1053,  1585,  1015,  2013,
         8833,  8486,  2705,  7712,  4353,  2024,  1027,   102])"
2198,1,"['mean', 'data', 'distribution']", SUMMARY,seg_415," ∕( 2 +  2). how can this be used distribution of u = |x − y|, and to fit the distribution to data? its mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101,  100, 1006, 1016, 1009, 1016, 1007, 1012, 2129, 2064, 2023, 2022,
        2109, 4353, 1997, 1057, 1027, 1064, 1060, 1597, 1061, 1064, 1010, 1998,
        2000, 4906, 1996, 4353, 2000, 2951, 1029, 2049, 2812, 1012,  102])"
2199,0,[], SUMMARY,seg_415,6.87 wavelength w (in nanometer) and stopping potential v of a photo-electric sur-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1020,  1012,  6584, 19934,  1059,  1006,  1999, 28991, 22828,
         1007,  1998,  7458,  4022,  1058,  1997,  1037,  6302,  1011,  3751,
         7505,  1011,   102])"
2200,1,"['table', 'mean', 'logarithmic distribution', 'distribution']", SUMMARY,seg_415,face are given in table 6.17. fit a logarithmic distribution and obtain the mean.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 2227, 2024, 2445, 1999, 2795, 1020, 1012, 2459, 1012, 4906, 1037,
        8833, 8486, 2705, 7712, 4353, 1998, 6855, 1996, 2812, 1012,  102])"
2201,1,['mean'], SUMMARY,seg_415,6.88 it is given that the mean of a binox (n−,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  6070,  2009,  2003,  2445,  2008,  1996,  2812,
         1997,  1037,  8026, 11636,  1006,  1050, 22543,   102])"
2202,1,"['power method', 'variance', 'probability', 'method', 'distribution', 'success']", SUMMARY,seg_415,"x) 6.96 check if f (x) = k ∗ (−1) 2 mial distribution is 6 and variance cos (c)n−2x is a pdf for x = is 4.8. what is the probability of 0, 1, … ⌊n∕2⌋. success p? what is n? 6.97 use the power method introduced 6.89 for which distribution does the in section 6.3, page 6–6 to find the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1060,  1007,  1020,  1012,  5986,  4638,  2065,  1042,  1006,
         1060,  1007,  1027,  1047,  1598,  1006,  1597,  2487,  1007,  1016,
         8764,  2140,  4353,  2003,  1020,  1998, 23284,  2522,  2015,  1006,
         1039,  1007,  1050, 22543,  2475,  2595,  2003,  1037, 11135,  2005,
         1060,  1027,  2003,  1018,  1012,  1022,  1012,  2054,  2003,  1996,
         9723,  1997,  1014,  1010,  1015,  1010,  1529,   100,   100,   100,
         1012,  3112,  1052,  1029,  2054,  2003,  1050,  1029,  1020,  1012,
         5989,  2224,  1996,  2373,  4118,  3107,  1020,  1012,  6486,  2005,
         2029,  4353,  2515,  1996,  1999,  2930,  1020,  1012,  1017,  1010,
         3931,  1020,  1516,  1020,  2000,  2424,  1996,   102])"
2203,1,"['mean', 'deviation', 'distribution', 'transformation']", SUMMARY,seg_415,change of origin transformation mean deviation of truncated binoy = x + 1 and left truncation at mial distribution (truncated at x = x = 0 result in the same law? 0).,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2689,  1997,  4761,  8651,  2812, 24353,  1997, 25449,  8026,
         6977,  1027,  1060,  1009,  1015,  1998,  2187, 19817,  4609, 10719,
         2012,  8764,  2140,  4353,  1006, 25449,  2012,  1060,  1027,  1060,
         1027,  1014,  2765,  1999,  1996,  2168,  2375,  1029,  1014,  1007,
         1012,   102])"
2204,1,"['method', 'power method']", SUMMARY,seg_415,"6.90 prove that bino(n, p) → pois( ) 6.98 use the power method introduced",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  3938,  6011,  2008,  8026,  2080,  1006,  1050,
         1010,  1052,  1007,  1585, 13433,  2483,  1006,  1007,  1020,  1012,
         5818,  2224,  1996,  2373,  4118,  3107,   102])"
2205,1,"['mean', 'deviation', 'approximation', 'distribution']", SUMMARY,seg_415,"when n → ∞ and p2 → 0 and np in section 6.3, page 6–6 to find the remains constant. explain how to mean deviation of truncated poisson distribution (truncated at x = use this approximation when p → 0). 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  2043,  1050,  1585,  1601,  1998,  1052,  2475,  1585,  1014,
         1998, 27937,  1999,  2930,  1020,  1012,  1017,  1010,  3931,  1020,
         1516,  1020,  2000,  2424,  1996,  3464,  5377,  1012,  4863,  2129,
         2000,  2812, 24353,  1997, 25449, 13433, 24077,  4353,  1006, 25449,
         2012,  1060,  1027,  2224,  2023, 20167,  2043,  1052,  1585,  1014,
         1007,  1012,  1015,  1012,   102])"
2206,1,['probability'], SUMMARY,seg_415,"high-rise building uses pipes from for x = 1, 2, … is a pdf for k = two sources. the probability of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2152,  1011,  4125,  2311,  3594, 12432,  2013,  2005,  1060,
         1027,  1015,  1010,  1016,  1010,  1529,  2003,  1037, 11135,  2005,
         1047,  1027,  2048,  4216,  1012,  1996,  9723,  1997,   102])"
2207,0,['n'], SUMMARY,seg_415,1∕  cot( n) becoming defective in 2 years,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,   100, 26046,  1006,  1050,  1007,  3352, 28829,  1999,  1016,
         2086,   102])"
2208,1,['poisson'], SUMMARY,seg_415,6.92 is f (x) = k∕(n + x)2 for x = after installation is poisson dis-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  6227,  2003,  1042,  1006,  1060,  1007,  1027,
          100,  1006,  1050,  1009,  1060,  1007,  1016,  2005,  1060,  1027,
         2044,  8272,  2003, 13433, 24077,  4487,  2015,  1011,   102])"
2209,1,"['probability', 'geometric']", SUMMARY,seg_415,"integer ∈ (−∞,∞), a pdf where tributed with = 0.003 for both. k = 2∕sin2( n)? if 120 pipes from source-one and 185 pipes from source-two are 6.93 prove that the geometric disused, what is the probability that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101, 16109,  1596,  1006,  1597, 30128,  1010,  1601,  1007,  1010,
         1037, 11135,  2073,  7050,  2094,  2007,  1027,  1014,  1012,  4002,
         2509,  2005,  2119,  1012,  1047,  1027,   100,  1006,  1050,  1007,
         1029,  2065,  6036, 12432,  2013,  3120,  1011,  2028,  1998, 15376,
        12432,  2013,  3120,  1011,  2048,  2024,  1020,  1012,  6109,  6011,
         2008,  1996, 14965, 26958,  1010,  2054,  2003,  1996,  9723,  2008,
          102])"
2210,1,['probability'], SUMMARY,seg_415,tribution f (x; p) = qx−1p can be at least one pipe will leak in 2 obtained from f (x; p) = qxp by years? what is the probability that truncation at x = 0. how are the at most 2 will leak?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13012, 29446,  1042,  1006,  1060,  1025,  1052,  1007,  1027,
         1053,  2595, 27944,  2361,  2064,  2022,  2012,  2560,  2028,  8667,
         2097, 17271,  1999,  1016,  4663,  2013,  1042,  1006,  1060,  1025,
         1052,  1007,  1027,  1053,  2595,  2361,  2011,  2086,  1029,  2054,
         2003,  1996,  9723,  2008, 19817,  4609, 10719,  2012,  1060,  1027,
         1014,  1012,  2129,  2024,  1996,  2012,  2087,  1016,  2097, 17271,
         1029,   102])"
2211,1,['variances'], SUMMARY,seg_415,means and variances related? 6.100 a dyeing plant uses six steam,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2965,  1998, 23284,  2015,  3141,  1029,  1020,  1012,  2531,
         1037, 18554,  2075,  3269,  3594,  2416,  5492,   102])"
2212,1,"['probability', 'probability of success', 'success']", SUMMARY,seg_415,6.94 the probability of success p of boilers. the probability of any,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  6365,  1996,  9723,  1997,  3112,  1052,  1997,
        20412,  1012,  1996,  9723,  1997,  2151,   102])"
2213,1,"['poisson', 'poisson distributed']", SUMMARY,seg_415,"boiler exploding in 6 years time a bino(n, p) is given by a root of the quadratic equation x2 − x + is poisson distributed with = cd 1∕10, 000. what is the probabil= 0. find . what are the ity that none of the boilers will c2o",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 15635, 20728,  1999,  1020,  2086,  2051,  1037,  8026,  2080,
         1006,  1050,  1010,  1052,  1007,  2003,  2445,  2011,  1037,  7117,
         1997,  1996, 17718, 23671,  8522,  1060,  2475,  1597,  1060,  1009,
         2003, 13433, 24077,  5500,  2007,  1027,  3729,   100,  1010,  2199,
         1012,  2054,  2003,  1996,  4013,  3676, 14454,  1027,  1014,  1012,
         2424,  1012,  2054,  2024,  1996,  2009,  2100,  2008,  3904,  1997,
         1996, 20412,  2097, 29248,  2080,   102])"
2214,1,['probability'], SUMMARY,seg_415,x) is a boilers with probability of explod-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1060,  1007,  2003,  1037, 20412,  2007,  9723,  1997,  4654,
        24759,  7716,  1011,   102])"
2215,1,['probability'], SUMMARY,seg_415,"the probability that at most two 6.102 a newly manufactured micro-chip boilers explode during 6 years is known to have 0.0001 probabilfrom the time of installation. ity of failing on any whole day (24 hours). find the probability that (i) 6.101 assume that a dam is built to it will last at least 60 days, (ii) it",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  9723,  2008,  2012,  2087,  2048,  1020,  1012,  9402,
         1037,  4397,  7609, 12702,  1011,  9090, 20412, 15044,  2076,  1020,
         2086,  2003,  2124,  2000,  2031,  1014,  1012,  2199,  2487,  4013,
         3676, 14454, 19699,  5358,  1996,  2051,  1997,  8272,  1012,  2009,
         2100,  1997,  7989,  2006,  2151,  2878,  2154,  1006,  2484,  2847,
         1007,  1012,  2424,  1996,  9723,  2008,  1006,  1045,  1007,  1020,
         1012,  7886,  7868,  2008,  1037,  5477,  2003,  2328,  2000,  2009,
         2097,  2197,  2012,  2560,  3438,  2420,  1010,  1006,  2462,  1007,
         2009,   102])"
2216,1,['independent'], SUMMARY,seg_415,"hold 50,000 cubic feet of water. will last between 50 and 100 days, the exceedence in any year has a and (iii) it will last at most 90 days pois(0.018). if the peak flow is (hint: use geo(0.0001)). independent yearly, find the probability of (i) at least three exceedences in a year and (ii) exactly two exceedences in a year.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2907,  2753,  1010,  2199, 11919,  2519,  1997,  2300,  1012,
         2097,  2197,  2090,  2753,  1998,  2531,  2420,  1010,  1996, 13467,
        10127,  1999,  2151,  2095,  2038,  1037,  1998,  1006,  3523,  1007,
         2009,  2097,  2197,  2012,  2087,  3938,  2420, 13433,  2483,  1006,
         1014,  1012,  5890,  2620,  1007,  1012,  2065,  1996,  4672,  4834,
         2003,  1006,  9374,  1024,  2224, 20248,  1006,  1014,  1012,  2199,
         2487,  1007,  1007,  1012,  2981, 12142,  1010,  2424,  1996,  9723,
         1997,  1006,  1045,  1007,  2012,  2560,  2093, 13467, 10127,  2015,
         1999,  1037,  2095,  1998,  1006,  2462,  1007,  3599,  2048, 13467,
        10127,  2015,  1999,  1037,  2095,  1012,   102])"
2217,0,[], SUMMARY,seg_415,6.103 a highway-patrolman is looking for speeding vehicles. it is known from past,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1020,  1012,  9800,  1037,  3307,  1011,  6477,  2386,  2003,
         2559,  2005, 21485,  4683,  1012,  2009,  2003,  2124,  2013,  2627,
          102])"
2218,1,"['set', 'random', 'limit']", SUMMARY,seg_415,"data that the total number of vehicles y going beyond the set speed limit on a stretch of a highway during busy hours is n ∗ f (x; p), where n = total number of vehicles passed during the time period and x has a logarithmic distribution with f (x; p) = qx∕[−x log p] with p = 0.5 and x = 1, 2, … represents the difference in speed in miles per hour beyond the permitted limit (x = (actual speed-speed-limit) in miles per hour to nearest int). if 200 vehicles go above the speed limit in 1 hour, approximately how many vehicles are in the grace bracket x ≤ 5? approximately how many vehicles are ≥ 10 mph above the speed limit?. if an over-speed vehicle is stopped at random, what is the probability that it exceeds 10% of the speed limit?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([12654]),"tensor([  101,  2951,  2008,  1996,  2561,  2193,  1997,  4683,  1061,  2183,
         3458,  1996,  2275,  3177,  5787,  2006,  1037,  7683,  1997,  1037,
         3307,  2076,  5697,  2847,  2003,  1050,  1598,  1042,  1006,  1060,
         1025,  1052,  1007,  1010,  2073,  1050,  1027,  2561,  2193,  1997,
         4683,  2979,  2076,  1996,  2051,  2558,  1998,  1060,  2038,  1037,
         8833,  8486,  2705,  7712,  4353,  2007,  1042,  1006,  1060,  1025,
         1052,  1007,  1027,   100,  1031,  1597,  2595,  8833,  1052,  1033,
         2007,  1052,  1027,  1014,  1012,  1019,  1998,  1060,  1027,  1015,
         1010,  1016,  1010,  1529,  5836,  1996,  4489,  1999,  3177,  1999,
         2661,  2566,  3178,  3458,  1996,  7936,  5787,  1006,  1060,  1027,
         1006,  5025,  3177,  1011,  3177,  1011,  5787,  1007,  1999,  2661,
         2566,  3178,  2000,  7205, 20014,  1007,  1012,  2065,  3263,  4683,
         2175,  2682,  1996,  3177,  5787,  1999,  1015,  3178,  1010,  3155,
         2129,  2116,  4683,  2024,  1999,  1996,  4519, 21605,  1060,  1608,
         1019,  1029,  3155,  2129,  2116,  4683,  2024,  1609,  2184,  5601,
         2682,  1996,  3177,  5787,  1029,  1012,  2065,  2019,  2058,  1011,
         3177,  4316,  2003,  3030,  2012,  6721,  1010,  2054,  2003,  1996,
         9723,  2008,  2009, 23651,  2184,  1003,  1997,  1996,  3177,  5787,
         1029,   102])"
2219,1,['test'], SUMMARY,seg_415,6.104 a civil engineer wishes to test if adding a heated tri-chloride of aluminum to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1020,  1012,  9645,  1037,  2942,  3992,  8996,  2000,  3231,
         2065,  5815,  1037,  9685, 13012,  1011, 19057,  1997, 13061,  2000,
          102])"
2220,1,"['mean', 'probability', 'poisson', 'tests']", SUMMARY,seg_415,"cement mixtures can improve the strength of high-rise structures to withstand powerful earthquakes and aftershocks. from laboratory tests, it is found that the probability of a crack developing in this type of cement is poisson distributed with mean one in 6 thousand. if a building portfolio comprising 10 buildings in a city neighborhood is built using aluminum hardened cement, what is the probability that at least one building will develop cracks after an earthquake? what is the probability that at most two buildings develop cracks?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 11297,  8150,  2015,  2064,  5335,  1996,  3997,  1997,  2152,
         1011,  4125,  5090,  2000, 19319,  3928, 17932,  1998,  2044, 22231,
        10603,  1012,  2013,  5911,  5852,  1010,  2009,  2003,  2179,  2008,
         1996,  9723,  1997,  1037,  8579,  4975,  1999,  2023,  2828,  1997,
        11297,  2003, 13433, 24077,  5500,  2007,  2812,  2028,  1999,  1020,
         4595,  1012,  2065,  1037,  2311, 11103,  9605,  2184,  3121,  1999,
         1037,  2103,  5101,  2003,  2328,  2478, 13061, 15015, 11297,  1010,
         2054,  2003,  1996,  9723,  2008,  2012,  2560,  2028,  2311,  2097,
         4503, 15288,  2044,  2019,  8372,  1029,  2054,  2003,  1996,  9723,
         2008,  2012,  2087,  2048,  3121,  4503, 15288,  1029,   102])"
2221,0,[], SUMMARY,seg_415,6.105 a variety of seed is experimented in a laboratory and is found to have a ger-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1020,  1012,  8746,  1037,  3528,  1997,  6534,  2003, 20918,
         1999,  1037,  5911,  1998,  2003,  2179,  2000,  2031,  1037, 16216,
         2099,  1011,   102])"
2222,1,"['probability', 'rate']", SUMMARY,seg_415,"mination rate of 95% (95 out of 100 seeds will germinate). if 10,000 seeds are sawed in identical conditions at a field, what is the probability that (i) at least 99% will germinate and (ii) between 90% and 98% will germinate.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 19808,  3508,  3446,  1997,  5345,  1003,  1006,  5345,  2041,
         1997,  2531,  8079,  2097, 16216, 27512,  3686,  1007,  1012,  2065,
         2184,  1010,  2199,  8079,  2024,  2387,  2098,  1999,  7235,  3785,
         2012,  1037,  2492,  1010,  2054,  2003,  1996,  9723,  2008,  1006,
         1045,  1007,  2012,  2560,  5585,  1003,  2097, 16216, 27512,  3686,
         1998,  1006,  2462,  1007,  2090,  3938,  1003,  1998,  5818,  1003,
         2097, 16216, 27512,  3686,  1012,   102])"
2223,0,[], CONTINUOUS DISTRIBUTIONS,seg_417,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7142, 20611])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
2224,1,"['continuous', 'continuous distributions', 'distributions']", CONTINUOUS DISTRIBUTIONS,seg_417,◾ understand various continuous distributions,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,   100,  3305,  2536,  7142, 20611,   102])"
2225,1,"['continuous', 'continuous distributions', 'distributions']", CONTINUOUS DISTRIBUTIONS,seg_417,◾ describe basic properties of common continuous distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,   100,  6235,  3937,  5144,  1997,  2691,  7142, 20611,   102])"
2226,1,"['exponential distribution', 'distribution', 'exponential']", CONTINUOUS DISTRIBUTIONS,seg_417,◾ explain memory-less property of exponential distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,   100,  4863,  3638,  1011,  2625,  3200,  1997, 27258,  4353,
          102])"
2227,1,['distributions'], CONTINUOUS DISTRIBUTIONS,seg_417,◾ utilize the limiting behavior of some distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,   100, 16462,  1996, 14879,  5248,  1997,  2070, 20611,   102])"
2228,1,"['incomplete beta', 'gamma', 'functions']", CONTINUOUS DISTRIBUTIONS,seg_417,◾ comprehend the incomplete beta and gamma functions,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,   100, 22346,  1996, 12958,  8247,  1998, 13091,  4972,   102])"
2229,1,"['continuous', 'continuous distributions', 'distributions']", CONTINUOUS DISTRIBUTIONS,seg_417,◾ apply continuous distributions in practical problems,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([  101,   100,  6611,  7142, 20611,  1999,  6742,  3471,   102])"
2230,1,"['continuous', 'continuous distributions', 'power method', 'distributions', 'method']", CONTINUOUS DISTRIBUTIONS,seg_417,◾ use the power method to find the md of continuous distributions,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7142, 20611])","tensor([  101,   100,  2224,  1996,  2373,  4118,  2000,  2424,  1996,  9108,
         1997,  7142, 20611,   102])"
2231,1,"['method', 'power method']", CONTINUOUS DISTRIBUTIONS,seg_417,◾ explore the power method in other applications,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7142, 20611])","tensor([ 101,  100, 8849, 1996, 2373, 4118, 1999, 2060, 5097,  102])"
2232,1,"['continuous', 'distributions', 'quantitative', 'experiments', 'measurement', 'ratio scale', 'data']", INTRODUCTION,seg_419,"continuous distributions are encountered in many industrial experiments and research studies. for example, measurement of quantities (such as height, weight, length, temperature, conductivity, and resistance) on the ratio scale is continuous or quantitative data.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 0., 1., 1., 0., 0.])",tensor([4955]),"tensor([  101,  7142, 20611,  2024,  8567,  1999,  2116,  3919,  7885,  1998,
         2470,  2913,  1012,  2005,  2742,  1010, 10903,  1997, 12450,  1006,
         2107,  2004,  4578,  1010,  3635,  1010,  3091,  1010,  4860,  1010,
         6204,  7730,  1010,  1998,  5012,  1007,  2006,  1996,  6463,  4094,
         2003,  7142,  2030, 20155,  2951,  1012,   102])"
2233,1,"['continuous', 'continuous random variable', 'interval', 'random variable', 'random', 'quantitative', 'data', 'variable']", INTRODUCTION,seg_419,"definition 7.1 the variable that underlies quantitative data is called a continuous random variable, as they can take a continuum of possible values in a finite or infinite interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([4955]),"tensor([  101,  6210,  1021,  1012,  1015,  1996,  8023,  2008,  2104, 11983,
        20155,  2951,  2003,  2170,  1037,  7142,  6721,  8023,  1010,  2004,
         2027,  2064,  2202,  1037, 22961,  1997,  2825,  5300,  1999,  1037,
        10713,  2030, 10709, 13483,  1012,   102])"
2234,1,"['vary', 'discrete random variable', 'probability function', 'random variable', 'statistical', 'discrete', 'continuous', 'function', 'probability', 'level', 'continuous random variable', 'range', 'random', 'limit', 'variable']", INTRODUCTION,seg_419,"this can be thought of as the limiting form of a point probability function, as the possible values of the underlying discrete random variable become more and more of fine granularity. thus, the mark in an exam (say between 0 and 100) is assumed to be a continuous random variable, even if fractional marks are not permitted. in other words, even though marks are not measured at the finest possible granularity level of fractions, it can be modeled by a continuous law. if all students scored between say 50 and 100 in an exam, the observed range for that exam is of course 50≤ x ≤100. this range may vary from exam to exam, so that the lower limit could differ from 50, and the upper limit of 100 is never realized (nobody got a perfect 100). as shown below, this range is in fact immaterial in several statistical procedures.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])",tensor([4955]),"tensor([  101,  2023,  2064,  2022,  2245,  1997,  2004,  1996, 14879,  2433,
         1997,  1037,  2391,  9723,  3853,  1010,  2004,  1996,  2825,  5300,
         1997,  1996, 10318, 16246,  6721,  8023,  2468,  2062,  1998,  2062,
         1997,  2986, 12604,  7934,  3012,  1012,  2947,  1010,  1996,  2928,
         1999,  2019, 11360,  1006,  2360,  2090,  1014,  1998,  2531,  1007,
         2003,  5071,  2000,  2022,  1037,  7142,  6721,  8023,  1010,  2130,
         2065, 12884,  2389,  6017,  2024,  2025,  7936,  1012,  1999,  2060,
         2616,  1010,  2130,  2295,  6017,  2024,  2025,  7594,  2012,  1996,
        10418,  2825, 12604,  7934,  3012,  2504,  1997, 12884,  2015,  1010,
         2009,  2064,  2022, 14440,  2011,  1037,  7142,  2375,  1012,  2065,
         2035,  2493,  3195,  2090,  2360,  2753,  1998,  2531,  1999,  2019,
        11360,  1010,  1996,  5159,  2846,  2005,  2008, 11360,  2003,  1997,
         2607,  2753, 30135,  1060,  1608, 18613,  1012,  2023,  2846,  2089,
         8137,  2013, 11360,  2000, 11360,  1010,  2061,  2008,  1996,  2896,
         5787,  2071, 11234,  2013,  2753,  1010,  1998,  1996,  3356,  5787,
         1997,  2531,  2003,  2196,  3651,  1006,  6343,  2288,  1037,  3819,
         2531,  1007,  1012,  2004,  3491,  2917,  1010,  2023,  2846,  2003,
         1999,  2755, 10047,  8585, 14482,  1999,  2195,  7778,  8853,  1012,
          102])"
2235,1,"['continuous', 'mean', 'vary', 'normally distributed', 'variations', 'treatment', 'distributions', 'normal', 'errors', 'measurement', 'statistical', 'measurements', 'variables']", INTRODUCTION,seg_419,"all continuous variables need not follow a statistical law. however, there are many phenomena that can be approximated by one of the statistical distributions such as the normal law, if not exact. for instance, errors in various measurements are assumed to be normally distributed with zero mean. similarly, measurement variations in physical properties such as diameter, size of manufactured products, and exceedences of dams and reservoirs are assumed to follow a continuous statistical law. this is because they can vary in both directions from an ideal measurement or value called its central value. this chapter introduces the most common continuous univariate distributions. an extensive treatment requires entire volumes by itself. our aim is to summarize the basic properties that are needed in subsequent chapters.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([4955]),"tensor([  101,  2035,  7142, 10857,  2342,  2025,  3582,  1037,  7778,  2375,
         1012,  2174,  1010,  2045,  2024,  2116, 13352,  2008,  2064,  2022,
        15796,  2094,  2011,  2028,  1997,  1996,  7778, 20611,  2107,  2004,
         1996,  3671,  2375,  1010,  2065,  2025,  6635,  1012,  2005,  6013,
         1010, 10697,  1999,  2536, 11702,  2024,  5071,  2000,  2022,  5373,
         5500,  2007,  5717,  2812,  1012,  6660,  1010, 10903,  8358,  1999,
         3558,  5144,  2107,  2004,  6705,  1010,  2946,  1997,  7609,  3688,
         1010,  1998, 13467, 10127,  2015,  1997, 17278,  1998, 22535,  2024,
         5071,  2000,  3582,  1037,  7142,  7778,  2375,  1012,  2023,  2003,
         2138,  2027,  2064,  8137,  1999,  2119,  7826,  2013,  2019,  7812,
        10903,  2030,  3643,  2170,  2049,  2430,  3643,  1012,  2023,  3127,
        13999,  1996,  2087,  2691,  7142,  4895, 28739, 13143, 20611,  1012,
         2019,  4866,  3949,  5942,  2972,  6702,  2011,  2993,  1012,  2256,
         6614,  2003,  2000,  7680,  7849,  4697,  1996,  3937,  5144,  2008,
         2024,  2734,  1999,  4745,  9159,  1012,   102])"
2236,1,"['continuous', 'mean', 'deviation', 'continuous distributions', 'distributions', 'method']", INTRODUCTION,seg_419,"before we proceed to discuss the popular distributions, we first derive a general method to find the mean deviation (md) of continuous distributions. this result will be used extensively throughout the chapter to derive the md of various distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([4955]),"tensor([  101,  2077,  2057, 10838,  2000,  6848,  1996,  2759, 20611,  1010,
         2057,  2034, 18547,  1037,  2236,  4118,  2000,  2424,  1996,  2812,
        24353,  1006,  9108,  1007,  1997,  7142, 20611,  1012,  2023,  2765,
         2097,  2022,  2109,  8077,  2802,  1996,  3127,  2000, 18547,  1996,
         9108,  1997,  2536, 20611,  1012,   102])"
2237,1,"['continuous', 'mean', 'curve', 'deviation', 'continuous distributions', 'distributions', 'sampling', 'distribution', 'model', 'lorenz curve', 'sampling distribution']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"finding the md of continuous distributions is a laborious task, as it requires a lot of meticulous arithmetic work. it is also called the mean absolute deviation or l1-norm from the mean. the md is closely related to the lorenz curve used in econometrics, gini index and pietra ratio used in economics and finance, and in reliability engineering. it is also used as an optimization model for hedging portfolio selection problems [162, 163], fuzzy multisensor object recognition [164], and minimizing job completion times on computer systems [165]. see also jogesh babu and rao [158] for expansions involving the md and pham-gia and hung [160] for the sampling distribution of md.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  4531,  1996,  9108,  1997,  7142, 20611,  2003,  1037,  4450,
         6313,  4708,  1010,  2004,  2009,  5942,  1037,  2843,  1997,  2777,
         2594, 16203, 20204,  2147,  1012,  2009,  2003,  2036,  2170,  1996,
         2812,  7619, 24353,  2030,  1048,  2487,  1011, 13373,  2013,  1996,
         2812,  1012,  1996,  9108,  2003,  4876,  3141,  2000,  1996, 28779,
         2480,  7774,  2109,  1999, 17338,  3630, 12589,  2015,  1010, 18353,
         2072,  5950,  1998, 11345,  6494,  6463,  2109,  1999,  5543,  1998,
         5446,  1010,  1998,  1999, 15258,  3330,  1012,  2009,  2003,  2036,
         2109,  2004,  2019, 20600,  2944,  2005,  2002,  2094,  4726, 11103,
         4989,  3471,  1031, 17832,  1010, 17867,  1033,  1010, 18001,  4800,
         5054, 21748,  4874,  5038,  1031, 17943,  1033,  1010,  1998,  7163,
         4328,  6774,  3105,  6503,  2335,  2006,  3274,  3001,  1031, 13913,
         1033,  1012,  2156,  2036,  8183,  8449,  2232, 20948,  1998, 10546,
         1031, 17696,  1033,  2005,  4935,  2015,  5994,  1996,  9108,  1998,
         6887,  3286,  1011, 27699,  1998,  5112,  1031,  8148,  1033,  2005,
         1996, 16227,  4353,  1997,  9108,  1012,   102])"
2238,1,"['continuous', 'mean', 'deviation', 'continuous distributions', 'table', 'probability', 'distributions', 'medoid', 'normal', 'integer part', 'distribution', 'exponential', 'median', 'case']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"johnson [125] surmised that the md of some continuous distributions can be put in the form 2 2 fm where  2 =  2 and fm is the probability density expression evaluated at the integer part of the mean m = ⌊ ⌋. this holds good for exponential, normal, and  2 distributions. kamat [156] generalized johnson’s result to several continuous distributions, (see table 7.1). the multiplier is distribution specific (see the following discussion). the following theorem greatly simplifies the work and is very helpful to find the md of a variety of univariate continuous distributions. it can easily be extended to the multivariate case and for other types of mds such as mean deviation from the median and medoid.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 1., 1., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  3779,  1031,  8732,  1033,  7505, 28732,  2094,  2008,  1996,
         9108,  1997,  2070,  7142, 20611,  2064,  2022,  2404,  1999,  1996,
         2433,  1016,  1016,  4718,  2073,  1016,  1027,  1016,  1998,  4718,
         2003,  1996,  9723,  4304,  3670, 16330,  2012,  1996, 16109,  2112,
         1997,  1996,  2812,  1049,  1027,   100,   100,  1012,  2023,  4324,
         2204,  2005, 27258,  1010,  3671,  1010,  1998,  1016, 20611,  1012,
        27829,  4017,  1031, 16734,  1033, 18960,  3779,  1521,  1055,  2765,
         2000,  2195,  7142, 20611,  1010,  1006,  2156,  2795,  1021,  1012,
         1015,  1007,  1012,  1996,  4800, 24759,  3771,  2003,  4353,  3563,
         1006,  2156,  1996,  2206,  6594,  1007,  1012,  1996,  2206,  9872,
         6551, 21934, 24759, 14144,  1996,  2147,  1998,  2003,  2200, 14044,
         2000,  2424,  1996,  9108,  1997,  1037,  3528,  1997,  4895, 28739,
        13143,  7142, 20611,  1012,  2009,  2064,  4089,  2022,  3668,  2000,
         1996,  4800, 10755, 13143,  2553,  1998,  2005,  2060,  4127,  1997,
         9108,  2015,  2107,  2004,  2812, 24353,  2013,  1996,  3991,  1998,
        19960,  9314,  1012,   102])"
2239,1,"['mean', 'method', 'deviation', 'power method']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,theorem 7.1 power method to find the mean deviation,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  9872,  1021,  1012,  1015,  2373,  4118,  2000,  2424,  1996,
         2812, 24353,   102])"
2240,1,"['continuous', 'tails', 'continuous distribution', 'distribution']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,the md of any continuous distribution that tails off to the left can be expressed in,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  1996,  9108,  1997,  2151,  7142,  4353,  2008, 17448,  2125,
         2000,  1996,  2187,  2064,  2022,  5228,  1999,   102])"
2241,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,terms of the cdf as  ,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([ 101, 3408, 1997, 1996, 3729, 2546, 2004,  102])"
2242,1,"['mean', 'arithmetic mean', 'limit', 'distribution']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"where ll is the lower limit of the distribution,   the arithmetic mean, and f(x) the cdf.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2073,  2222,  2003,  1996,  2896,  5787,  1997,  1996,  4353,
         1010,  1996, 20204,  2812,  1010,  1998,  1042,  1006,  1060,  1007,
         1996,  3729,  2546,  1012,   102])"
2243,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,proof: by definition ul,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  6947,  1024,  2011,  6210, 17359,   102])"
2244,1,"['limit', 'range', 'distribution']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"where ll is the lower, and ul is the upper limit of the distribution. split the range of integration from ll to  , and   to ul, and note that |x −  | =   − x for x    . this",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2073,  2222,  2003,  1996,  2896,  1010,  1998, 17359,  2003,
         1996,  3356,  5787,  1997,  1996,  4353,  1012,  3975,  1996,  2846,
         1997,  8346,  2013,  2222,  2000,  1010,  1998,  2000, 17359,  1010,
         1998,  3602,  2008,  1064,  1060,  1597,  1064,  1027,  1597,  1060,
         2005,  1060,  1012,  2023,   102])"
2245,1,"['expectation operator', 'expectation']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"as e(x) =  , we can write e(x −  ) = 0, where e() is the expectation operator. expand e(x −  ) as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2004,  1041,  1006,  1060,  1007,  1027,  1010,  2057,  2064,
         4339,  1041,  1006,  1060,  1597,  1007,  1027,  1014,  1010,  2073,
         1041,  1006,  1007,  2003,  1996, 17626,  6872,  1012,  7818,  1041,
         1006,  1060,  1597,  1007,  2004,   102])"
2246,1,['range'], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"as done earlier, split the range of integration from ll to   and   to ul to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2004,  2589,  3041,  1010,  3975,  1996,  2846,  1997,  8346,
         2013,  2222,  2000,  1998,  2000, 17359,  2000,  2131,   102])"
2247,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,split this into two integrals and integrate each of them to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  3975,  2023,  2046,  2048,  9897,  2015,  1998, 17409,  2169,
         1997,  2068,  2000,  2131,   102])"
2248,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,use integration-by-parts to evaluate the second expression. {xf(x) ∣ ,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2224,  8346,  1011,  2011,  1011,  3033,  2000, 16157,  1996,
         2117,  3670,  1012,  1063,  1060,  2546,  1006,  1060,  1007,   100,
          102])"
2249,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,  f(x)dx. the   ∗ f( ) terms cancel out leaving behind,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  1042,  1006,  1060,  1007,  1040,  2595,  1012,  1996,  1598,
         1042,  1006,  1007,  3408, 17542,  2041,  2975,  2369,   102])"
2250,1,"['range', 'tails', 'distributions', 'limit', 'distribution', 'symmetric']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"here x f(x)|ll = ll ∗ f(ll) means that we are to evaluate the limiting value of x ∗ f(x) at the lower limit of the distributions. for those distributions that extend to −∞, this limit is obviously zero. if the lower limit of the distribution is either zero or it tails off to the limit, the first term in equation (7.7) is zero. if f(x) contains expressions of the form (x−ll), then also this term is zero. similarly for distributions with range x ≥ 0 for which the mode is not ll, f(0) → 0 as x → 0. if the distribution is symmetric, equation (7.7) becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2182,  1060,  1042,  1006,  1060,  1007,  1064,  2222,  1027,
         2222,  1598,  1042,  1006,  2222,  1007,  2965,  2008,  2057,  2024,
         2000, 16157,  1996, 14879,  3643,  1997,  1060,  1598,  1042,  1006,
         1060,  1007,  2012,  1996,  2896,  5787,  1997,  1996, 20611,  1012,
         2005,  2216, 20611,  2008,  7949,  2000,  1597, 30128,  1010,  2023,
         5787,  2003,  5525,  5717,  1012,  2065,  1996,  2896,  5787,  1997,
         1996,  4353,  2003,  2593,  5717,  2030,  2009, 17448,  2125,  2000,
         1996,  5787,  1010,  1996,  2034,  2744,  1999,  8522,  1006,  1021,
         1012,  1021,  1007,  2003,  5717,  1012,  2065,  1042,  1006,  1060,
         1007,  3397, 11423,  1997,  1996,  2433,  1006,  1060, 22543,  3363,
         1007,  1010,  2059,  2036,  2023,  2744,  2003,  5717,  1012,  6660,
         2005, 20611,  2007,  2846,  1060,  1609,  1014,  2005,  2029,  1996,
         5549,  2003,  2025,  2222,  1010,  1042,  1006,  1014,  1007,  1585,
         1014,  2004,  1060,  1585,  1014,  1012,  2065,  1996,  4353,  2003,
        19490,  1010,  8522,  1006,  1021,  1012,  1021,  1007,  4150,   102])"
2251,1,"['function', 'tails', 'distribution']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,where s(x) = 1 − f(x) is the survival function (sf). if the distribution tails off to the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2073,  1055,  1006,  1060,  1007,  1027,  1015,  1597,  1042,
         1006,  1060,  1007,  2003,  1996,  7691,  3853,  1006, 16420,  1007,
         1012,  2065,  1996,  4353, 17448,  2125,  2000,  1996,   102])"
2252,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"right, we evaluate this as ul",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2157,  1010,  2057, 16157,  2023,  2004, 17359,   102])"
2253,1,"['tails', 'distributions']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"otherwise, we need to evaluate both the terms in equation (7.7). these situations are illustrated in the numerous md examples throughout the chapter. thus, we could write the aforementioned for distributions that tails off to one of the extremes as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  4728,  1010,  2057,  2342,  2000, 16157,  2119,  1996,  3408,
         1999,  8522,  1006,  1021,  1012,  1021,  1007,  1012,  2122,  8146,
         2024,  7203,  1999,  1996,  3365,  9108,  4973,  2802,  1996,  3127,
         1012,  2947,  1010,  2057,  2071,  4339,  1996, 17289,  2005, 20611,
         2008, 17448,  2125,  2000,  2028,  1997,  1996, 28800,  2004,   102])"
2254,1,"['incomplete beta', 'function', 'beta function', 'incomplete beta function']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"this representation of md in terms of cdf is extremely helpful when one needs to evaluate the md using the cdf or sf. see the example on the md of beta-i distribution, which is represented in terms of incomplete beta function in page 271.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2023,  6630,  1997,  9108,  1999,  3408,  1997,  3729,  2546,
         2003,  5186, 14044,  2043,  2028,  3791,  2000, 16157,  1996,  9108,
         2478,  1996,  3729,  2546,  2030, 16420,  1012,  2156,  1996,  2742,
         2006,  1996,  9108,  1997,  8247,  1011,  1045,  4353,  1010,  2029,
         2003,  3421,  1999,  3408,  1997, 12958,  8247,  3853,  1999,  3931,
        25103,  1012,   102])"
2255,1,"['continuous', 'continuous distributions', 'convergence', 'distributions', 'limit', 'central limit theorems']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"in addition to finding the md of continuous distributions, this formulation has other important applications in proving convergence of distributions and central limit theorems. replace x on the lhs by s = x1 + x2 + · · · + xn. if xi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  1999,  2804,  2000,  4531,  1996,  9108,  1997,  7142, 20611,
         1010,  2023, 20219,  2038,  2060,  2590,  5097,  1999, 13946, 19143,
         1997, 20611,  1998,  2430,  5787,  9872,  2015,  1012,  5672,  1060,
         2006,  1996,  1048,  7898,  2011,  1055,  1027,  1060,  2487,  1009,
         1060,  2475,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  1012,
         2065,  8418,   102])"
2256,1,"['continuous', 'mean', 'continuous random variables', 'random', 'random variables', 'variables']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"distributed continuous random variables, this has mean n  so that the relationship becomes",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  5500,  7142,  6721, 10857,  1010,  2023,  2038,  2812,  1050,
         2061,  2008,  1996,  3276,  4150,   102])"
2257,1,"['continuous', 'mean', 'cases', 'function', 'functions', 'convergence', 'random', 'random variables', 'limit', 'independent', 'asymptotic', 'independent random variables', 'variables', 'arithmetic mean']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"where f(x) and s(x) are cdf and sf of s. dividing both sides by n, we see that the lhs is the arithmetic mean (x1 + x2 + · · · + xn)/n and rhs has an “n” in the denominator and f(x), s(x) are the cdf and sf of the mean rather than x. taking the limit as n → ∞, we see that the rhs tends to zero (because both the integrals are bounded for finite mean (see equation 7.13 given below) and the lhs converges to  . this provides a simple and elegant proof for the asymptotic convergence of independent random variables, which can be extended to other cases. for example, if g(xi) is a continuous function of xi with finite mean   = g( ), replacing xi by g(xi) in equation (7.11) provides a simple proof on the convergence of g(xi) to its mean asymptotically. similarly, md of functions of random variables can be easily obtained from equation (7.1) by replacing x with y = g(x),   with   = g( ), and f(x) with the cdf of y.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2073,  1042,  1006,  1060,  1007,  1998,  1055,  1006,  1060,
         1007,  2024,  3729,  2546,  1998, 16420,  1997,  1055,  1012, 16023,
         2119,  3903,  2011,  1050,  1010,  2057,  2156,  2008,  1996,  1048,
         7898,  2003,  1996, 20204,  2812,  1006,  1060,  2487,  1009,  1060,
         2475,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  1007,  1013,
         1050,  1998,  1054,  7898,  2038,  2019,  1523,  1050,  1524,  1999,
         1996,  7939, 20936, 27413,  1998,  1042,  1006,  1060,  1007,  1010,
         1055,  1006,  1060,  1007,  2024,  1996,  3729,  2546,  1998, 16420,
         1997,  1996,  2812,  2738,  2084,  1060,  1012,  2635,  1996,  5787,
         2004,  1050,  1585,  1601,  1010,  2057,  2156,  2008,  1996,  1054,
         7898, 12102,  2000,  5717,  1006,  2138,  2119,  1996,  9897,  2015,
         2024, 10351,  2005, 10713,  2812,  1006,  2156,  8522,  1021,  1012,
         2410,  2445,  2917,  1007,  1998,  1996,  1048,  7898, 28314,  2015,
         2000,  1012,  2023,  3640,  1037,  3722,  1998, 11552,  6947,  2005,
         1996,  2004, 24335, 13876, 20214, 19143,  1997,  2981,  6721, 10857,
         1010,  2029,  2064,  2022,  3668,  2000,  2060,  3572,  1012,  2005,
         2742,  1010,  2065,  1043,  1006,  8418,  1007,  2003,  1037,  7142,
         3853,  1997,  8418,  2007, 10713,  2812,  1027,  1043,  1006,  1007,
         1010,  6419,  8418,  2011,  1043,  1006,  8418,  1007,  1999,  8522,
         1006,  1021,  1012,  2340,  1007,  3640,  1037,  3722,  6947,  2006,
         1996, 19143,  1997,  1043,  1006,  8418,  1007,  2000,  2049,  2812,
         2004, 24335, 13876, 20214,  3973,  1012,  6660,  1010,  9108,  1997,
         4972,  1997,  6721, 10857,  2064,  2022,  4089,  4663,  2013,  8522,
         1006,  1021,  1012,  1015,  1007,  2011,  6419,  1060,  2007,  1061,
         1027,  1043,  1006,  1060,  1007,  1010,  2007,  1027,  1043,  1006,
         1007,  1010,  1998,  1042,  1006,  1060,  1007,  2007,  1996,  3729,
         2546,  1997,  1061,  1012,   102])"
2258,1,"['continuous', 'function', 'continuous distributions', 'probability', 'functions', 'coefficient', 'distributions', 'method', 'distribution', 'discrete distributions', 'discrete']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"there are two other novel methods to find the md. the first one uses generating functions (chapter 9, section 9.4, p. 381) to fetch a single coefficient of t −1 in the power series expansion of (1 − t)−2px(t), where px(t) is the probability generating function. this works best for discrete distributions. the second method is using the inverse of distribution functions (chapter 10, section 10.4, p. 402). this works best for continuous distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2045,  2024,  2048,  2060,  3117,  4725,  2000,  2424,  1996,
         9108,  1012,  1996,  2034,  2028,  3594, 11717,  4972,  1006,  3127,
         1023,  1010,  2930,  1023,  1012,  1018,  1010,  1052,  1012, 29335,
         1007,  2000, 18584,  1037,  2309, 19064,  1997,  1056,  1597,  2487,
         1999,  1996,  2373,  2186,  4935,  1997,  1006,  1015,  1597,  1056,
         1007,  1597,  2475,  2361,  2595,  1006,  1056,  1007,  1010,  2073,
         1052,  2595,  1006,  1056,  1007,  2003,  1996,  9723, 11717,  3853,
         1012,  2023,  2573,  2190,  2005, 16246, 20611,  1012,  1996,  2117,
         4118,  2003,  2478,  1996, 19262,  1997,  4353,  4972,  1006,  3127,
         2184,  1010,  2930,  2184,  1012,  1018,  1010,  1052,  1012, 28048,
         1007,  1012,  2023,  2573,  2190,  2005,  7142, 20611,  1012,   102])"
2259,1,['median'], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,similar expressions are available for the md around the median as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2714, 11423,  2024,  2800,  2005,  1996,  9108,  2105,  1996,
         3991,  2004,   102])"
2260,1,['median'], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,1 1 2 2 e|x − median| = (f−1(1 − x) − f−1(x))dx = (s−1(x) − s−1(1 − x))dx. ∫0 ∫0 (7.12),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  1015,  1015,  1016,  1016,  1041,  1064,  1060,  1597,  3991,
         1064,  1027,  1006,  1042, 27944,  1006,  1015,  1597,  1060,  1007,
         1597,  1042, 27944,  1006,  1060,  1007,  1007,  1040,  2595,  1027,
         1006,  1055, 27944,  1006,  1060,  1007,  1597,  1055, 27944,  1006,
         1015,  1597,  1060,  1007,  1007,  1040,  2595,  1012,   100,   100,
         1006,  1021,  1012,  2260,  1007,   102])"
2261,1,"['continuous', 'tail', 'continuous distributions', 'variance', 'tail areas', 'distributions']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,theorem 7.2 variance of continuous distributions as tail areas,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  9872,  1021,  1012,  1016, 23284,  1997,  7142, 20611,  2004,
         5725,  2752,   102])"
2262,1,"['continuous', 'tail', 'variance', 'tail areas', 'continuous distribution', 'distribution']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,prove that the variance of a continuous distribution can be expressed in terms of tail areas.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  6011,  2008,  1996, 23284,  1997,  1037,  7142,  4353,  2064,
         2022,  5228,  1999,  3408,  1997,  5725,  2752,  1012,   102])"
2263,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,proof: we found earlier that md = 2 ∫x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([ 101, 6947, 1024, 2057, 2179, 3041, 2008, 9108, 1027, 1016,  100,  102])"
2264,1,"['probability', 'mean', 'integer part']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,cdf and s(x) is the sf. equating johnson’s result that md = c  2 fm where  2 =  2 and fm is the probability mass evaluated at the integer part of the mean m = ⌊ ⌋ we get  2 ∗ cfm = 2 ∫x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  3729,  2546,  1998,  1055,  1006,  1060,  1007,  2003,  1996,
        16420,  1012,  1041, 16211,  3436,  3779,  1521,  1055,  2765,  2008,
         9108,  1027,  1039,  1016,  4718,  2073,  1016,  1027,  1016,  1998,
         4718,  2003,  1996,  9723,  3742, 16330,  2012,  1996, 16109,  2112,
         1997,  1996,  2812,  1049,  1027,   100,   100,  2057,  2131,  1016,
         1598, 12935,  2213,  1027,  1016,   100,   102])"
2265,0,[], MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,an alternate expression given by jones  ; balakrishnan is,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2019,  6585,  3670,  2445,  2011,  3557,  1025, 21451, 23017,
         2078,  2003,   102])"
2266,1,"['table', 'laplace distribution', 'distributions', 'distribution']", MEAN DEVIATION OF CONTINUOUS DISTRIBUTIONS,seg_421,"where ll and ul are the lower and upper limits [166]. see also chapter 8 (p. 363). the constant multiplier (c = 2) proposed by johnson may be different for some continuous distributions (e.g., for laplace distribution c = 1) (see table 7.1). even in those situations, the above-mentioned result holds in general because the rhs of equation (7.13) simply get scaled by the constant (c).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2812, 24353,  1997,  7142, 20611])","tensor([  101,  2073,  2222,  1998, 17359,  2024,  1996,  2896,  1998,  3356,
         6537,  1031, 18610,  1033,  1012,  2156,  2036,  3127,  1022,  1006,
         1052,  1012,  4029,  2509,  1007,  1012,  1996,  5377,  4800, 24759,
         3771,  1006,  1039,  1027,  1016,  1007,  3818,  2011,  3779,  2089,
         2022,  2367,  2005,  2070,  7142, 20611,  1006,  1041,  1012,  1043,
         1012,  1010,  2005,  5001, 19217,  4353,  1039,  1027,  1015,  1007,
         1006,  2156,  2795,  1021,  1012,  1015,  1007,  1012,  2130,  1999,
         2216,  8146,  1010,  1996,  2682,  1011,  3855,  2765,  4324,  1999,
         2236,  2138,  1996,  1054,  7898,  1997,  8522,  1006,  1021,  1012,
         2410,  1007,  3432,  2131, 18953,  2011,  1996,  5377,  1006,  1039,
         1007,  1012,   102])"
2267,1,"['binomial distribution', 'negative binomial distribution', 'normal distribution', 'continuous distributions', 'poisson', 'normal', 'geometric', 'binomial', 'discrete', 'noncentral', 'continuous', 'case', 'standard normal distribution', 'probabilities', 'negative binomial', 'standard', 'discrete distributions', 'range', 'standard normal', 'distributions', 'distribution']", Notion of Infinity,seg_423,"another important point to remember in the study of continuous distributions is the notion of infinity (∞). chapter 6 introduced several discrete distributions that extend to infinity. examples are the poisson, geometric, negative binomial, and logarithmic laws. all of them extend to +∞. here, ∞ is assumed to be a large integer (because discrete distributions take integer values; usually nonnegative). in this chapter, ∞ is assumed to be a large real number (because continuous distributions take real values). this difference is subtle but important because the majority of continuous distributions extend to infinity either at the positive end or both ends. in the discrete case, we write x = 0, 1, … ,∞ (x actually assumes the value ∞), whereas in the continuous case we write it as x ∞ (we seldom write x ≤ ∞). for example, the range for standard normal distribution is written as −∞ z ∞. in the case of mixture distributions that have a discrete part and a continuous part like the noncentral 2 distribution, which is a poisson-weighted sum of central 2 distributions, the continuous part takes precedence. this means that for such distributions the rule reverts to the continuous component, so that the discrete part (i.e., poisson probabilities) assumes all values ∞. if both components of a mixture distribution are discrete (e.g., noncentral negative binomial distribution), the rule reverts to the discrete case.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 9366,  1997, 15579])","tensor([  101,  2178,  2590,  2391,  2000,  3342,  1999,  1996,  2817,  1997,
         7142, 20611,  2003,  1996,  9366,  1997, 15579,  1006,  1601,  1007,
         1012,  3127,  1020,  3107,  2195, 16246, 20611,  2008,  7949,  2000,
        15579,  1012,  4973,  2024,  1996, 13433, 24077,  1010, 14965,  1010,
         4997,  8026, 20936,  2389,  1010,  1998,  8833,  8486,  2705,  7712,
         4277,  1012,  2035,  1997,  2068,  7949,  2000,  1009,  1601,  1012,
         2182,  1010,  1601,  2003,  5071,  2000,  2022,  1037,  2312, 16109,
         1006,  2138, 16246, 20611,  2202, 16109,  5300,  1025,  2788,  2512,
         2638, 26792,  1007,  1012,  1999,  2023,  3127,  1010,  1601,  2003,
         5071,  2000,  2022,  1037,  2312,  2613,  2193,  1006,  2138,  7142,
        20611,  2202,  2613,  5300,  1007,  1012,  2023,  4489,  2003, 11259,
         2021,  2590,  2138,  1996,  3484,  1997,  7142, 20611,  7949,  2000,
        15579,  2593,  2012,  1996,  3893,  2203,  2030,  2119,  4515,  1012,
         1999,  1996, 16246,  2553,  1010,  2057,  4339,  1060,  1027,  1014,
         1010,  1015,  1010,  1529,  1010,  1601,  1006,  1060,  2941, 15980,
         1996,  3643,  1601,  1007,  1010,  6168,  1999,  1996,  7142,  2553,
         2057,  4339,  2009,  2004,  1060,  1601,  1006,  2057, 15839,  4339,
         1060,  1608,  1601,  1007,  1012,  2005,  2742,  1010,  1996,  2846,
         2005,  3115,  3671,  4353,  2003,  2517,  2004,  1597, 30128,  1062,
         1601,  1012,  1999,  1996,  2553,  1997,  8150, 20611,  2008,  2031,
         1037, 16246,  2112,  1998,  1037,  7142,  2112,  2066,  1996,  2512,
        13013,  7941,  1016,  4353,  1010,  2029,  2003,  1037, 13433, 24077,
         1011, 18215,  7680,  1997,  2430,  1016, 20611,  1010,  1996,  7142,
         2112,  3138, 23359,  1012,  2023,  2965,  2008,  2005,  2107, 20611,
         1996,  3627,  7065,  8743,  2015,  2000,  1996,  7142,  6922,  1010,
         2061,  2008,  1996, 16246,  2112,  1006,  1045,  1012,  1041,  1012,
         1010, 13433, 24077,  4013,  3676, 14680,  1007, 15980,  2035,  5300,
         1601,  1012,  2065,  2119,  6177,  1997,  1037,  8150,  4353,  2024,
        16246,  1006,  1041,  1012,  1043,  1012,  1010,  2512, 13013,  7941,
         4997,  8026, 20936,  2389,  4353,  1007,  1010,  1996,  3627,  7065,
         8743,  2015,  2000,  1996, 16246,  2553,  1012,   102])"
2268,1,"['population', 'mean', 'populations', 'poisson', 'sampling', 'poisson distribution', 'data', 'discrete', 'case', 'continuous', 'parameter', 'range', 'variance', 'distributions', 'distribution', 'discrete distribution']", Notion of Infinity,seg_423,"this notion pertains only to the population variate values. if the parameter(s) of a discrete distribution takes any value on the real line, we write it as in the continuous case. for example, the parameter of poisson distribution has range −∞ ∞. sampling from such populations always gives us data values in a finite range. as shown below, this range can be fixed in terms of the mean and variance of the distributions. this is especially suitable for bell-shaped distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 9366,  1997, 15579])","tensor([  101,  2023,  9366,  2566, 18249,  2015,  2069,  2000,  1996,  2313,
        13075, 13143,  5300,  1012,  2065,  1996, 16381,  1006,  1055,  1007,
         1997,  1037, 16246,  4353,  3138,  2151,  3643,  2006,  1996,  2613,
         2240,  1010,  2057,  4339,  2009,  2004,  1999,  1996,  7142,  2553,
         1012,  2005,  2742,  1010,  1996, 16381,  1997, 13433, 24077,  4353,
         2038,  2846,  1597, 30128,  1601,  1012, 16227,  2013,  2107,  7080,
         2467,  3957,  2149,  2951,  5300,  1999,  1037, 10713,  2846,  1012,
         2004,  3491,  2917,  1010,  2023,  2846,  2064,  2022,  4964,  1999,
         3408,  1997,  1996,  2812,  1998, 23284,  1997,  1996, 20611,  1012,
         2023,  2003,  2926,  7218,  2005,  4330,  1011,  5044, 20611,  1012,
          102])"
2269,1,"['continuous', 'range', 'probability', 'interval', 'uniform distribution', 'rectangular distribution', 'distribution']", CONTINUOUS UNIFORM DISTRIBUTION,seg_425,"as the name implies, this distribution assigns a constant probability to each point in a continuous interval. thus, the range is always finite (and quite often small in practical applications). it is also called continuous rectangular or simply rectangular distribution. the pdf of continuous uniform distribution (cuni(a, b)) is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([7142, 6375, 4353])","tensor([  101,  2004,  1996,  2171, 12748,  1010,  2023,  4353, 24022,  1037,
         5377,  9723,  2000,  2169,  2391,  1999,  1037,  7142, 13483,  1012,
         2947,  1010,  1996,  2846,  2003,  2467, 10713,  1006,  1998,  3243,
         2411,  2235,  1999,  6742,  5097,  1007,  1012,  2009,  2003,  2036,
         2170,  7142, 10806,  2030,  3432, 10806,  4353,  1012,  1996, 11135,
         1997,  7142,  6375,  4353,  1006, 12731,  3490,  1006,  1037,  1010,
         1038,  1007,  1007,  2003,  2445,  2011,   102])"
2270,1,"['range', 'interval', 'slope', 'intercept', 'sample', 'distribution', 'case']", CONTINUOUS UNIFORM DISTRIBUTION,seg_425,"considered as an algebraic equation, y = (x − a)∕(b − a) represents a straight line with slope 1∕(b − a) and intercept a∕(a − b). this line is defined only within the interval (a, b) (theoretically, a straight line extends to infinity in both directions). the slope is small when the range (b − a) is large. the slope is large (line is steep) in the limiting case b → a. only the extremes of a sample x(1) and x(n) are sufficient to fit this distribution (figures 7.1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([7142, 6375, 4353])","tensor([  101,  2641,  2004,  2019, 17390,  8522,  1010,  1061,  1027,  1006,
         1060,  1597,  1037,  1007,   100,  1006,  1038,  1597,  1037,  1007,
         5836,  1037,  3442,  2240,  2007,  9663,   100,  1006,  1038,  1597,
         1037,  1007,  1998, 19115,   100,  1006,  1037,  1597,  1038,  1007,
         1012,  2023,  2240,  2003,  4225,  2069,  2306,  1996, 13483,  1006,
         1037,  1010,  1038,  1007,  1006, 22634,  1010,  1037,  3442,  2240,
         8908,  2000, 15579,  1999,  2119,  7826,  1007,  1012,  1996,  9663,
         2003,  2235,  2043,  1996,  2846,  1006,  1038,  1597,  1037,  1007,
         2003,  2312,  1012,  1996,  9663,  2003,  2312,  1006,  2240,  2003,
         9561,  1007,  1999,  1996, 14879,  2553,  1038,  1585,  1037,  1012,
         2069,  1996, 28800,  1997,  1037,  7099,  1060,  1006,  1015,  1007,
         1998,  1060,  1006,  1050,  1007,  2024,  7182,  2000,  4906,  2023,
         4353,  1006,  4481,  1021,  1012,  1015,  1007,  1012,   102])"
2271,1,"['change of origin', 'probability function', 'symmetry', 'median', 'mean', 'interval', 'function', 'probability', 'uniform distribution', 'results', 'standard', 'transformation', 'range', 'moments', 'distribution', 'change of origin and scale']", Properties of Continuous Uniform Distribution,seg_427,"this distribution has a special type of symmetry called flat-symmetry. hence, all odd central moments except the first one are zeros. the median always coincides with the mean, and the mode can be any value within the range. as the probability is constant throughout the interval, the range is always finite (and quite often small). from equation (7.3), we see that a change of origin and scale transformation y = (x − a)∕(b − a) results in the standard uniform distribution. a uniform distribution defined in an interval (c, c +  ) has pdf f (x;  ) = 1∕  for c ≤ x ≤ c +  . take c = 0 to get the standard form f (x;  ) = 1∕ , 0   x    . this is the analog of the duni(n) with probability function f (x;n) = 1∕n, x = 0, 1, 2, · · · ,n − 1 discussed in page 6-41 of chapter 6.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2023,  4353,  2038,  1037,  2569,  2828,  1997, 14991,  2170,
         4257,  1011, 14991,  1012,  6516,  1010,  2035,  5976,  2430,  5312,
         3272,  1996,  2034,  2028,  2024,  5717,  2015,  1012,  1996,  3991,
         2467, 19680,  2015,  2007,  1996,  2812,  1010,  1998,  1996,  5549,
         2064,  2022,  2151,  3643,  2306,  1996,  2846,  1012,  2004,  1996,
         9723,  2003,  5377,  2802,  1996, 13483,  1010,  1996,  2846,  2003,
         2467, 10713,  1006,  1998,  3243,  2411,  2235,  1007,  1012,  2013,
         8522,  1006,  1021,  1012,  1017,  1007,  1010,  2057,  2156,  2008,
         1037,  2689,  1997,  4761,  1998,  4094,  8651,  1061,  1027,  1006,
         1060,  1597,  1037,  1007,   100,  1006,  1038,  1597,  1037,  1007,
         3463,  1999,  1996,  3115,  6375,  4353,  1012,  1037,  6375,  4353,
         4225,  1999,  2019, 13483,  1006,  1039,  1010,  1039,  1009,  1007,
         2038, 11135,  1042,  1006,  1060,  1025,  1007,  1027,   100,  2005,
         1039,  1608,  1060,  1608,  1039,  1009,  1012,  2202,  1039,  1027,
         1014,  2000,  2131,  1996,  3115,  2433,  1042,  1006,  1060,  1025,
         1007,  1027,   100,  1010,  1014,  1060,  1012,  2023,  2003,  1996,
        11698,  1997,  1996, 24654,  2072,  1006,  1050,  1007,  2007,  9723,
         3853,  1042,  1006,  1060,  1025,  1050,  1007,  1027,   100,  1010,
         1060,  1027,  1014,  1010,  1015,  1010,  1016,  1010,  1087,  1087,
         1087,  1010,  1050,  1597,  1015,  6936,  1999,  3931,  1020,  1011,
         4601,  1997,  3127,  1020,  1012,   102])"
2272,1,"['mean', 'functions', 'moments']", Properties of Continuous Uniform Distribution,seg_427,7.3.1.1 moments and generating functions the moments are easy to find using the mgf. the mean is directly obtained as   = [1∕(b − a)] ∫a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  1021,  1012,  1017,  1012,  1015,  1012,  1015,  5312,  1998,
        11717,  4972,  1996,  5312,  2024,  3733,  2000,  2424,  2478,  1996,
        11460,  2546,  1012,  1996,  2812,  2003,  3495,  4663,  2004,  1027,
         1031,   100,  1006,  1038,  1597,  1037,  1007,  1033,   100,   102])"
2273,0,[], Properties of Continuous Uniform Distribution,seg_427,moments using the mgf. by definition,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  5312,  2478,  1996, 11460,  2546,  1012,  2011,  6210,   102])"
2274,1,['moments'], Properties of Continuous Uniform Distribution,seg_427,"to find the moments, we proceed as follows. consider ebt∕t = 1∕t + b + b2t∕2! + · · · + bktk−1∕k! + .. as (1∕t) is common in both ebt∕t and eat∕t, it cancels out. the second term is (b − a)∕(b − a) = 1. thus",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2000,  2424,  1996,  5312,  1010,  2057, 10838,  2004,  4076,
         1012,  5136,   100,  1027,   100,  1009,  1038,  1009,   100,   999,
         1009,  1087,  1087,  1087,  1009,   100,   999,  1009,  1012,  1012,
         2004,  1006,   100,  1007,  2003,  2691,  1999,  2119,   100,  1998,
          100,  1010,  2009, 17542,  2015,  2041,  1012,  1996,  2117,  2744,
         2003,  1006,  1038,  1597,  1037,  1007,   100,  1006,  1038,  1597,
         1037,  1007,  1027,  1015,  1012,  2947,   102])"
2275,1,"['limit', 'independent']", Properties of Continuous Uniform Distribution,seg_427,"if we differentiate equation (7.15) (k − 1) times with respect to t, all terms below the (k − 1)th term will vanish (as they are derivatives of constants independent of t’s) and all terms beyond the kth term will contain powers of t. only the (k − 1)th term is a constant with a (k − 1)! in the numerator, which cancels out with the k! giving a k in the denominator. by taking the limit as t → 0, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2065,  2057, 21032,  8522,  1006,  1021,  1012,  2321,  1007,
         1006,  1047,  1597,  1015,  1007,  2335,  2007,  4847,  2000,  1056,
         1010,  2035,  3408,  2917,  1996,  1006,  1047,  1597,  1015,  1007,
        16215,  2744,  2097, 25887,  1006,  2004,  2027,  2024, 16942,  1997,
         5377,  2015,  2981,  1997,  1056,  1521,  1055,  1007,  1998,  2035,
         3408,  3458,  1996,  1047,  2705,  2744,  2097,  5383,  4204,  1997,
         1056,  1012,  2069,  1996,  1006,  1047,  1597,  1015,  1007, 16215,
         2744,  2003,  1037,  5377,  2007,  1037,  1006,  1047,  1597,  1015,
         1007,   999,  1999,  1996, 16371,  5017,  8844,  1010,  2029, 17542,
         2015,  2041,  2007,  1996,  1047,   999,  3228,  1037,  1047,  1999,
         1996,  7939, 20936, 27413,  1012,  2011,  2635,  1996,  5787,  2004,
         1056,  1585,  1014,  1010,  2057,  2131,   102])"
2276,1,"['moment', 'second moment']", Properties of Continuous Uniform Distribution,seg_427,putting k = 2 gives  1 = (b + a)∕2. the second moment is obtained by putting k = 3 as  2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([ 101, 5128, 1047, 1027, 1016, 3957, 1015, 1027, 1006, 1038, 1009, 1037,
        1007,  100, 1012, 1996, 2117, 2617, 2003, 4663, 2011, 5128, 1047, 1027,
        1017, 2004, 1016,  102])"
2277,1,"['moment', 'table']", Properties of Continuous Uniform Distribution,seg_427,"tral moment as  2 = (b2 − ab + a2)∕3 − (a + b)2∕4. taking 12 as the lcm of 3 and 4, this simplifies to  2 =  2 = (b − a)2∕12. see table 7.2 for further properties.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101, 19817,  2389,  2617,  2004,  1016,  1027,  1006,  1038,  2475,
         1597, 11113,  1009, 22441,  1007,   100,  1597,  1006,  1037,  1009,
         1038,  1007,   100,  1012,  2635,  2260,  2004,  1996, 29215,  2213,
         1997,  1017,  1998,  1018,  1010,  2023, 21934, 24759, 14144,  2000,
         1016,  1027,  1016,  1027,  1006,  1038,  1597,  1037,  1007,   100,
         1012,  2156,  2795,  1021,  1012,  1016,  2005,  2582,  5144,  1012,
          102])"
2278,0,[], Properties of Continuous Uniform Distribution,seg_427,these two equations to get b =   +√,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2122,  2048, 11380,  2000,  2131,  1038,  1027,  1009,  1600,
          102])"
2279,0,[], Properties of Continuous Uniform Distribution,seg_427,"3  . subtracting gives a =   −√ 3  , from",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  1017,  1012,  4942,  6494, 11873,  3957,  1037,  1027,  1597,
        30127,  1017,  1010,  2013,   102])"
2280,0,[], Properties of Continuous Uniform Distribution,seg_427,3) . this allows us to write the pdf in the alternative form as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  1017,  1007,  1012,  2023,  4473,  2149,  2000,  4339,  1996,
        11135,  1999,  1996,  4522,  2433,  2004,   102])"
2281,1,"['even moments', 'moments', 'rectangular distribution', 'distribution']", Properties of Continuous Uniform Distribution,seg_427,example 7.1 even moments of rectangular distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2742,  1021,  1012,  1015,  2130,  5312,  1997, 10806,  4353,
          102])"
2282,1,['moment'], Properties of Continuous Uniform Distribution,seg_427,prove that the kth central moment is zero for k odd and is given by  k = (b − a)k∕[2k(k + 1)] for k even.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([ 101, 6011, 2008, 1996, 1047, 2705, 2430, 2617, 2003, 5717, 2005, 1047,
        5976, 1998, 2003, 2445, 2011, 1047, 1027, 1006, 1038, 1597, 1037, 1007,
         100, 1031, 1016, 2243, 1006, 1047, 1009, 1015, 1007, 1033, 2005, 1047,
        2130, 1012,  102])"
2283,0,[], Properties of Continuous Uniform Distribution,seg_427,solution 7.1 by definition  k = b−,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  5576,  1021,  1012,  1015,  2011,  6210,  1047,  1027,  1038,
        22543,   102])"
2284,1,['jacobian'], Properties of Continuous Uniform Distribution,seg_427,"1 jacobian is  y∕ x = 1, the integral becomes  k = b−a ∫−",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  1015,  6213,  2937,  2003,   100,  1060,  1027,  1015,  1010,
         1996,  9897,  4150,  1047,  1027,  1038, 22543,  2050,   100,   102])"
2285,1,"['function', 'range', 'symmetric']", Properties of Continuous Uniform Distribution,seg_427,"odd, this is an integral of an odd function in symmetric range, which is identically",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  5976,  1010,  2023,  2003,  2019,  9897,  1997,  2019,  5976,
         3853,  1999, 19490,  2846,  1010,  2029,  2003,  7235,  2135,   102])"
2286,1,"['mean', 'deviation', 'rectangular distribution', 'distribution']", Properties of Continuous Uniform Distribution,seg_427,example 7.2 mean deviation of rectangular distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2742,  1021,  1012,  1016,  2812, 24353,  1997, 10806,  4353,
          102])"
2287,1,"['rectangular distribution', 'distribution']", Properties of Continuous Uniform Distribution,seg_427,find the md of rectangular distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2424,  1996,  9108,  1997, 10806,  4353,  1012,   102])"
2288,1,['range'], Properties of Continuous Uniform Distribution,seg_427,b |x −  |∕(b − a)dx. split the range of integration from “a” to   and   to “b” and note that |x −  | =   − x for x   . this gives,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([ 101, 1038, 1064, 1060, 1597, 1064,  100, 1006, 1038, 1597, 1037, 1007,
        1040, 2595, 1012, 3975, 1996, 2846, 1997, 8346, 2013, 1523, 1037, 1524,
        2000, 1998, 2000, 1523, 1038, 1524, 1998, 3602, 2008, 1064, 1060, 1597,
        1064, 1027, 1597, 1060, 2005, 1060, 1012, 2023, 3957,  102])"
2289,0,[], Properties of Continuous Uniform Distribution,seg_427,"   dx − ∫  b  dx. as   = (a + b)∕2, this integral vanishes. what remains is",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  1040,  2595,  1597,   100,  1038,  1040,  2595,  1012,  2004,
         1027,  1006,  1037,  1009,  1038,  1007,   100,  1010,  2023,  9897,
        25887,  2229,  1012,  2054,  3464,  2003,   102])"
2290,1,"['tail', 'limit']", Properties of Continuous Uniform Distribution,seg_427,"next we apply theorem 7.1 (p. 257) to verify our result. as the rectangular distribution does not tail off to zero at the extremes, equation (7.1) seems to be not applicable. however, we know the cdf is (x − a)∕(b − a). if we substitute the lower limit is “a,” in (x − a)∕(b − a), we get zero. hence, theorem 7.1 is applicable. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  2279,  2057,  6611,  9872,  1021,  1012,  1015,  1006,  1052,
         1012, 24368,  1007,  2000, 20410,  2256,  2765,  1012,  2004,  1996,
        10806,  4353,  2515,  2025,  5725,  2125,  2000,  5717,  2012,  1996,
        28800,  1010,  8522,  1006,  1021,  1012,  1015,  1007,  3849,  2000,
         2022,  2025, 12711,  1012,  2174,  1010,  2057,  2113,  1996,  3729,
         2546,  2003,  1006,  1060,  1597,  1037,  1007,   100,  1006,  1038,
         1597,  1037,  1007,  1012,  2065,  2057,  7681,  1996,  2896,  5787,
         2003,  1523,  1037,  1010,  1524,  1999,  1006,  1060,  1597,  1037,
         1007,   100,  1006,  1038,  1597,  1037,  1007,  1010,  2057,  2131,
         5717,  1012,  6516,  1010,  9872,  1021,  1012,  1015,  2003, 12711,
         1012,  2023,  3957,   102])"
2291,1,['limit'], Properties of Continuous Uniform Distribution,seg_427,"c(x − a)dx is (x − a)2∕2|ac . the integral evaluated at the lower limit is obviously zero. as c = (a + b)∕2, the upper limit evaluates to (b − a)2∕8. substitute in equation (7.20). one (b − a) cancels out and we get the md as (b − a)∕4. this tallies with the above-mentioned result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([5144, 1997, 7142, 6375, 4353])","tensor([  101,  1039,  1006,  1060,  1597,  1037,  1007,  1040,  2595,  2003,
         1006,  1060,  1597,  1037,  1007,   100,  1064,  9353,  1012,  1996,
         9897, 16330,  2012,  1996,  2896,  5787,  2003,  5525,  5717,  1012,
         2004,  1039,  1027,  1006,  1037,  1009,  1038,  1007,   100,  1010,
         1996,  3356,  5787, 16157,  2015,  2000,  1006,  1038,  1597,  1037,
         1007,   100,  1012,  7681,  1999,  8522,  1006,  1021,  1012,  2322,
         1007,  1012,  2028,  1006,  1038,  1597,  1037,  1007, 17542,  2015,
         2041,  1998,  2057,  2131,  1996,  9108,  2004,  1006,  1038,  1597,
         1037,  1007,   100,  1012,  2023,  4206,  3111,  2007,  1996,  2682,
         1011,  3855,  2765,  1012,   102])"
2292,1,"['random numbers', 'functions', 'random variable', 'variable transformation', 'continuous', 'results', 'random variables', 'standard', 'transformation', 'continuous random variable', 'distributions', 'random', 'distribution', 'exponential', 'change of variable', 'variables', 'variable']", Relationships with Other Distributions,seg_429,"owing to its relationship with many other distributions, it is extensively used in computer generation of random variables. as mentioned earlier, a simple change of variable transformation y = (x − a)∕(b − a) results in the standard uniform distribution u(0, 1), usually denoted as u(0, 1). if x is any continuous random variable with cdf f(x), then u = f(x) ∼ u[0, 1]. this property is utilized to generate random numbers from a distribution if the expression for its cdf involves simple or invertible arithmetic or transcendental functions. for example, the cdf of an exponential",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101, 11427,  2000,  2049,  3276,  2007,  2116,  2060, 20611,  1010,
         2009,  2003,  8077,  2109,  1999,  3274,  4245,  1997,  6721, 10857,
         1012,  2004,  3855,  3041,  1010,  1037,  3722,  2689,  1997,  8023,
         8651,  1061,  1027,  1006,  1060,  1597,  1037,  1007,   100,  1006,
         1038,  1597,  1037,  1007,  3463,  1999,  1996,  3115,  6375,  4353,
         1057,  1006,  1014,  1010,  1015,  1007,  1010,  2788, 19537,  2004,
         1057,  1006,  1014,  1010,  1015,  1007,  1012,  2065,  1060,  2003,
         2151,  7142,  6721,  8023,  2007,  3729,  2546,  1042,  1006,  1060,
         1007,  1010,  2059,  1057,  1027,  1042,  1006,  1060,  1007,   100,
         1057,  1031,  1014,  1010,  1015,  1033,  1012,  2023,  3200,  2003,
        12550,  2000,  9699,  6721,  3616,  2013,  1037,  4353,  2065,  1996,
         3670,  2005,  2049,  3729,  2546,  7336,  3722,  2030,  1999, 16874,
         7028, 20204,  2030,  9099, 23865, 21050,  4972,  1012,  2005,  2742,
         1010,  1996,  3729,  2546,  1997,  2019, 27258,   102])"
2293,1,"['range', 'random number', 'random', 'distribution', 'case']", Relationships with Other Distributions,seg_429,"− x distribution (given below) is f(x) = 1 − e . equating to a random number u in the range [0,1] and solving for x, we get 1 − e− x = u or x = − log(1 − u)∕ . u(0, 1) is a special case of beta-i(a, b) when a = b = 1.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101,  1597,  1060,  4353,  1006,  2445,  2917,  1007,  2003,  1042,
         1006,  1060,  1007,  1027,  1015,  1597,  1041,  1012,  1041, 16211,
         3436,  2000,  1037,  6721,  2193,  1057,  1999,  1996,  2846,  1031,
         1014,  1010,  1015,  1033,  1998, 13729,  2005,  1060,  1010,  2057,
         2131,  1015,  1597,  1041, 22543,  1060,  1027,  1057,  2030,  1060,
         1027,  1597,  8833,  1006,  1015,  1597,  1057,  1007,   100,  1012,
         1057,  1006,  1014,  1010,  1015,  1007,  2003,  1037,  2569,  2553,
         1997,  8247,  1011,  1045,  1006,  1037,  1010,  1038,  1007,  2043,
         1037,  1027,  1038,  1027,  1015,  1012,   102])"
2294,1,"['random numbers', 'tests', 'errors', 'correction factor', 'nonparametric tests', 'interval', 'factor', 'sampling', 'data', 'test', 'transformation', 'stratified sampling', 'distributions', 'random number', 'random', 'distribution']", Applications,seg_431,"this distribution finds applications in many fields. it is used in nonparametric tests like kolmogorov–smirnov test. the rounding errors resulting from grouping data into classes uses a u(0, 1) to obtain a correction factor known as sheppard’s correction. quantization errors in audio coding use this distribution. it is also used in stratified sampling, nonrandom clustering, and so on. random numbers for other distributions are easy to generate using u[0, 1]. suppose we have a uniform random number generator between 0 and 1. the transformation y = a + (b − a)x gives a random number in the interval [a, b], where x is in [0,1] (if the random number generated is in [0,32767), we could use the mapping a + (b − a)x∕32767 to get a random number in [a, b]).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5097]),"tensor([  101,  2023,  4353,  4858,  5097,  1999,  2116,  4249,  1012,  2009,
         2003,  2109,  1999,  2512, 28689, 12589,  5852,  2066, 12849, 13728,
        22844, 12298,  1516, 15488,  4313, 16693,  3231,  1012,  1996, 26939,
        10697,  4525,  2013, 19765,  2951,  2046,  4280,  3594,  1037,  1057,
         1006,  1014,  1010,  1015,  1007,  2000,  6855,  1037, 18140,  5387,
         2124,  2004, 24976,  1521,  1055, 18140,  1012, 24110,  3775,  9276,
        10697,  1999,  5746, 16861,  2224,  2023,  4353,  1012,  2009,  2003,
         2036,  2109,  1999,  2358,  8609,  7810, 16227,  1010,  2512, 13033,
         5358,  9324,  2075,  1010,  1998,  2061,  2006,  1012,  6721,  3616,
         2005,  2060, 20611,  2024,  3733,  2000,  9699,  2478,  1057,  1031,
         1014,  1010,  1015,  1033,  1012,  6814,  2057,  2031,  1037,  6375,
         6721,  2193, 13103,  2090,  1014,  1998,  1015,  1012,  1996,  8651,
         1061,  1027,  1037,  1009,  1006,  1038,  1597,  1037,  1007,  1060,
         3957,  1037,  6721,  2193,  1999,  1996, 13483,  1031,  1037,  1010,
         1038,  1033,  1010,  2073,  1060,  2003,  1999,  1031,  1014,  1010,
         1015,  1033,  1006,  2065,  1996,  6721,  2193,  7013,  2003,  1999,
         1031,  1014,  1010, 28469,  2575,  2581,  1007,  1010,  2057,  2071,
         2224,  1996, 12375,  1037,  1009,  1006,  1038,  1597,  1037,  1007,
          100,  2000,  2131,  1037,  6721,  2193,  1999,  1031,  1037,  1010,
         1038,  1033,  1007,  1012,   102])"
2295,0,[], Applications,seg_431,example 7.3 estimating proportions,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([5097]),"tensor([  101,  2742,  1021,  1012,  1017,  9765, 22835, 19173,   102])"
2296,1,['probability'], Applications,seg_431,a jar contains a mixture of two liquids l1 and l2 that mixes well in each other (as water and wine or acid and water). all that is known is that “there is at most three times as much of one as the other.” find the probability that (i) l1∕l2 ≤ 2 and (ii) l1∕l2 ≥ 1.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5097]),"tensor([  101,  1037, 15723,  3397,  1037,  8150,  1997,  2048, 26820,  1048,
         2487,  1998,  1048,  2475,  2008, 21109,  2092,  1999,  2169,  2060,
         1006,  2004,  2300,  1998,  4511,  2030,  5648,  1998,  2300,  1007,
         1012,  2035,  2008,  2003,  2124,  2003,  2008,  1523,  2045,  2003,
         2012,  2087,  2093,  2335,  2004,  2172,  1997,  2028,  2004,  1996,
         2060,  1012,  1524,  2424,  1996,  9723,  2008,  1006,  1045,  1007,
          100,  1608,  1016,  1998,  1006,  2462,  1007,   100,  1609,  1015,
         1012,   102])"
2297,1,"['condition', 'uniformly distributed']", Applications,seg_431,"solution 7.3 the given condition is 1 3 ≤ l1∕l2 ≤ 3. let u = l1∕l2. assume that u is uniformly distributed in [1/3, 3]. as 3 − 1∕3 = 8∕3, we take the density",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5097]),"tensor([  101,  5576,  1021,  1012,  1017,  1996,  2445,  4650,  2003,  1015,
         1017,  1608,   100,  1608,  1017,  1012,  2292,  1057,  1027,   100,
         1012,  7868,  2008,  1057,  2003, 27423,  5500,  1999,  1031,  1015,
         1013,  1017,  1010,  1017,  1033,  1012,  2004,  1017,  1597,   100,
         1027,   100,  1010,  2057,  2202,  1996,  4304,   102])"
2298,1,"['continuous', 'distribution']", EXPONENTIAL DISTRIBUTION,seg_433,exponential distribution (exp( )) can be regarded as the continuous analog of geometric distribution. the pdf is given by,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([27258,  4353])","tensor([  101, 27258,  4353,  1006,  4654,  2361,  1006,  1007,  1007,  2064,
         2022,  5240,  2004,  1996,  7142, 11698,  1997, 14965,  4353,  1012,
         1996, 11135,  2003,  2445,  2011,   102])"
2299,1,"['exponential distribution', 'standard', 'distribution', 'exponential']", EXPONENTIAL DISTRIBUTION,seg_433,"−x when   = 1, we get the standard exponential distribution f (x) = e . setting   = 1∕ ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([27258,  4353])","tensor([  101,  1597,  2595,  2043,  1027,  1015,  1010,  2057,  2131,  1996,
         3115, 27258,  4353,  1042,  1006,  1060,  1007,  1027,  1041,  1012,
         4292,  1027,   100,   102])"
2300,0,['e'], EXPONENTIAL DISTRIBUTION,seg_433,"1 −x∕  gives an alternative representation as f (x,  ) =   e . the cdf is given by",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([27258,  4353])","tensor([ 101, 1015,  100, 3957, 2019, 4522, 6630, 2004, 1042, 1006, 1060, 1010,
        1007, 1027, 1041, 1012, 1996, 3729, 2546, 2003, 2445, 2011,  102])"
2301,1,"['parameter', 'mean', 'variance', 'distribution']", Properties of Exponential Distribution,seg_435,"this distribution has a single parameter, which is positive (figure 7.2). variance of this distribution is the square of the mean, as shown in the following. this means that",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5144,  1997, 27258,  4353])","tensor([  101,  2023,  4353,  2038,  1037,  2309, 16381,  1010,  2029,  2003,
         3893,  1006,  3275,  1021,  1012,  1016,  1007,  1012, 23284,  1997,
         2023,  4353,  2003,  1996,  2675,  1997,  1996,  2812,  1010,  2004,
         3491,  1999,  1996,  2206,  1012,  2023,  2965,  2008,   102])"
2302,1,"['kurtosis', 'limit', 'variance', 'table']", Properties of Exponential Distribution,seg_435,"when  → 0, the variance and kurtosis increases without limit. the sf is 1 − cdf = − x e (see table 7.3).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 27258,  4353])","tensor([  101,  2043,  1585,  1014,  1010,  1996, 23284,  1998,  9679, 12650,
         7457,  2302,  5787,  1012,  1996, 16420,  2003,  1015,  1597,  3729,
         2546,  1027,  1597,  1060,  1041,  1006,  2156,  2795,  1021,  1012,
         1017,  1007,  1012,   102])"
2303,1,"['additivity property', 'independent', 'populations', 'exponentially distributed', 'statistical', 'data', 'information', 'gamma distribution', 'random variables', 'exponentially', 'parameters', 'gamma', 'distributions', 'random', 'distribution', 'variables']", Additivity Property,seg_437,"several statistical distributions obey the additivity property. this information is useful while modeling data from two or more identical populations. the sum of k independent exponentially distributed random variables exp( ) has a gamma distribution with parameters k and  . symbolically, if xi are exp( ), then",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2195,  7778, 20611, 15470,  1996,  5587, 25090, 24872,  3200,
         1012,  2023,  2592,  2003,  6179,  2096, 11643,  2951,  2013,  2048,
         2030,  2062,  7235,  7080,  1012,  1996,  7680,  1997,  1047,  2981,
        27258,  2135,  5500,  6721, 10857,  4654,  2361,  1006,  1007,  2038,
         1037, 13091,  4353,  2007, 11709,  1047,  1998,  1012, 12613,  3973,
         1010,  2065,  8418,  2024,  4654,  2361,  1006,  1007,  1010,  2059,
          102])"
2304,1,['table'], Additivity Property,seg_437,"=1 xi ∼ gamma(k,  ). this is most easily proved using the mgf (see table 7.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1027,  1015,  8418,   100, 13091,  1006,  1047,  1010,  1007,
         1012,  2023,  2003,  2087,  4089,  4928,  2478,  1996, 11460,  2546,
         1006,  2156,  2795,  1021,  1012,  1018,  1007,  1012,   102])"
2305,1,"['function', 'functions', 'characteristic function', 'moments']", Additivity Property,seg_437,7.4.2.1 moments and generating functions the characteristic function is readily obtained by integration as x(t; ) =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1021,  1012,  1018,  1012,  1016,  1012,  1015,  5312,  1998,
        11717,  4972,  1996,  8281,  3853,  2003, 12192,  4663,  2011,  8346,
         2004,  1060,  1006,  1056,  1025,  1007,  1027,   102])"
2306,0,[], Additivity Property,seg_437,expand as an infinite series using (1 − x)−1 = 1 + x + x2 + x3 + · · · to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  7818,  2004,  2019, 10709,  2186,  2478,  1006,  1015,  1597,
         1060,  1007,  1597,  2487,  1027,  1015,  1009,  1060,  1009,  1060,
         2475,  1009,  1060,  2509,  1009,  1087,  1087,  1087,  2000,  2131,
          102])"
2307,1,"['mean', 'variance']", Additivity Property,seg_437,"from this, the mean and variance follows as   = 1∕  and  2 = 1∕ 2. alternately, the mean is given by   =   ∫0",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2013,  2023,  1010,  1996,  2812,  1998, 23284,  4076,  2004,
         1027,   100,  1998,  1016,  1027,   100,  1016,  1012, 23554,  1010,
         1996,  2812,  2003,  2445,  2011,  1027,   100,   102])"
2308,0,[], Additivity Property,seg_437,"gamma integral, this becomes   =  γ(2)∕ 2. one   cancels out and we get   = 1∕ ",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101, 13091,  9897,  1010,  2023,  4150,  1027,  1157,  1006,  1016,
         1007,   100,  1016,  1012,  2028, 17542,  2015,  2041,  1998,  2057,
         2131,  1027,   100,   102])"
2309,1,['mean'], Additivity Property,seg_437,"1 −x∕  as γ(2) = 1. for the alternate parametrization f (x,  ) =   e , the mean   =   and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1015,   100,  2004,  1157,  1006,  1016,  1007,  1027,  1015,
         1012,  2005,  1996,  6585, 11498, 11368, 26910,  1042,  1006,  1060,
         1010,  1007,  1027,  1041,  1010,  1996,  2812,  1027,  1998,   102])"
2310,0,[], Additivity Property,seg_437,variance  2 =  2.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101, 23284,  1016,  1027,  1016,  1012,   102])"
2311,1,"['leptokurtic', 'table', 'coefficients', 'exponential distribution', 'skewness', 'results', 'distribution', 'exponential', 'kurtosis', 'asymmetric']", Additivity Property,seg_437,"the coefficients of skewness and kurtosis are 2 and 9, respectively. hence, the distribution is always asymmetric and leptokurtic. putting y = 1∕x results in the inverse exponential distribution with pdf f (y) = ( ∕y2)e− ∕y. see table 7.3 for further properties.",tensor(1),"tensor([0., 0., 1., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1996, 21374,  1997, 15315,  7974,  2791,  1998,  9679, 12650,
         2024,  1016,  1998,  1023,  1010,  4414,  1012,  6516,  1010,  1996,
         4353,  2003,  2467,  2004, 24335, 12589,  1998,  3393, 13876, 21940,
        28228,  2278,  1012,  5128,  1061,  1027,   100,  3463,  1999,  1996,
        19262, 27258,  4353,  2007, 11135,  1042,  1006,  1061,  1007,  1027,
         1006,   100,  1007,  1041, 22543,   100,  1012,  2156,  2795,  1021,
         1012,  1017,  2005,  2582,  5144,  1012,   102])"
2312,1,"['exponential', 'exponential distribution', 'median', 'distribution']", Additivity Property,seg_437,example 7.4 median of exponential distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2742,  1021,  1012,  1018,  3991,  1997, 27258,  4353,   102])"
2313,1,"['exponential', 'exponential distribution', 'median', 'distribution']", Additivity Property,seg_437,"find the median of exponential distribution with pdf f (x,  ) =  e− x.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2424,  1996,  3991,  1997, 27258,  4353,  2007, 11135,  1042,
         1006,  1060,  1010,  1007,  1027,  1041, 22543,  1060,  1012,   102])"
2314,1,['median'], Additivity Property,seg_437,solution 7.4 let m be the median. then ∫m,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101, 5576, 1021, 1012, 1018, 2292, 1049, 2022, 1996, 3991, 1012, 2059,
         100,  102])"
2315,1,['distribution'], Additivity Property,seg_437,"example 7.5 pr(x    ∕2), pr(x   1∕ ) for exp( ) distribution",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2742,  1021,  1012,  1019, 10975,  1006,  1060,   100,  1007,
         1010, 10975,  1006,  1060,   100,  1007,  2005,  4654,  2361,  1006,
         1007,  4353,   102])"
2316,1,"['exponential', 'exponential distribution', 'distribution']", Additivity Property,seg_437,− 2∕2 show that pr[x    ∕2] of the exponential distribution is e . what is the pr[x   1∕ ]?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1597,   100,  2265,  2008, 10975,  1031,  1060,   100,  1033,
         1997,  1996, 27258,  4353,  2003,  1041,  1012,  2054,  2003,  1996,
        10975,  1031,  1060,   100,  1033,  1029,   102])"
2317,1,"['mean', 'function', 'frequency', 'exponential']", Additivity Property,seg_437,"− x solution 7.5 as the sf is e , pr(x ∕2) is easily seen to be the survival − 2∕2 function evaluated for x = ∕2. this upon substitution becomes e . putting x = 1∕ in the sf, we get e−1 = 1∕e. thus, the mean 1∕ of an exponential distribution divides the total frequency in (1 − 1 e )∶1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1597,  1060,  5576,  1021,  1012,  1019,  2004,  1996, 16420,
         2003,  1041,  1010, 10975,  1006,  1060,   100,  1007,  2003,  4089,
         2464,  2000,  2022,  1996,  7691,  1597,   100,  3853, 16330,  2005,
         1060,  1027,   100,  1012,  2023,  2588, 20885,  4150,  1041,  1012,
         5128,  1060,  1027,   100,  1999,  1996, 16420,  1010,  2057,  2131,
         1041, 27944,  1027,   100,  1012,  2947,  1010,  1996,  2812,   100,
         1997,  2019, 27258,  4353, 20487,  1996,  2561,  6075,  1999,  1006,
         1015,  1597,  1015,  1041,  1007,   100,   102])"
2318,1,"['exponential', 'exponential distribution', 'distribution']", Additivity Property,seg_437,e ratio. this is a characteristic property of exponential distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1041,  6463,  1012,  2023,  2003,  1037,  8281,  3200,  1997,
        27258,  4353,  1012,   102])"
2319,0,[], Additivity Property,seg_437,example 7.6 lifetime of components,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101, 2742, 1021, 1012, 1020, 6480, 1997, 6177,  102])"
2320,1,"['mean', 'probability', 'exponentially distributed', 'condition', 'exponentially']", Additivity Property,seg_437,"the lifetime of a component is known to be exponentially distributed with mean   = 320 hours. find the probability that the component has failed in 340 hours, if it is known that it was in good working condition when time of operation was 325 hours.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1996,  6480,  1997,  1037,  6922,  2003,  2124,  2000,  2022,
        27258,  2135,  5500,  2007,  2812,  1027, 13710,  2847,  1012,  2424,
         1996,  9723,  2008,  1996,  6922,  2038,  3478,  1999, 16029,  2847,
         1010,  2065,  2009,  2003,  2124,  2008,  2009,  2001,  1999,  2204,
         2551,  4650,  2043,  2051,  1997,  3169,  2001, 19652,  2847,  1012,
          102])"
2321,1,"['probability', 'conditional probability', 'conditional']", Additivity Property,seg_437,"solution 7.6 let x denote the lifetime. then x ∼ exp(1/320). symbolically, this problem can be stated as p[x 340|x 325]. using conditional probability, this is equivalent to p[325 x 340]∕p[x 325]. in terms",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  5576,  1021,  1012,  1020,  2292,  1060, 19090,  1996,  6480,
         1012,  2059,  1060,   100,  4654,  2361,  1006,  1015,  1013, 13710,
         1007,  1012, 12613,  3973,  1010,  2023,  3291,  2064,  2022,  3090,
         2004,  1052,  1031,  1060, 16029,  1064,  1060, 19652,  1033,  1012,
         2478, 18462,  9723,  1010,  2023,  2003,  5662,  2000,  1052,  1031,
        19652,  1060, 16029,  1033,   100,  1031,  1060, 19652,  1033,  1012,
         1999,  3408,   102])"
2322,0,[], Additivity Property,seg_437,"of the pdf, this becomes ∫3",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1997,  1996, 11135,  1010,  2023,  4150,   100,   102])"
2323,1,"['gamma', 'distributions', 'distribution', 'exponential', 'variates', 'discrete', 'case']", Additivity Property,seg_437,"7.4.2.2 relationship with other distributions it is a special case of gamma distribution with m = 1 (p. 283). if x ∼ exp( ) and b is a constant, then y = x1∕b ∼ weib( , b) (p. 320). the difference of two iid exponential variates is laplace distributed. it is also related to the u(0, 1) distribution [167, 168] and power-law distribution, which is a discrete analog of this distribution [169].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1021,  1012,  1018,  1012,  1016,  1012,  1016,  3276,  2007,
         2060, 20611,  2009,  2003,  1037,  2569,  2553,  1997, 13091,  4353,
         2007,  1049,  1027,  1015,  1006,  1052,  1012, 25504,  1007,  1012,
         2065,  1060,   100,  4654,  2361,  1006,  1007,  1998,  1038,  2003,
         1037,  5377,  1010,  2059,  1061,  1027,   100,   100, 11417,  2497,
         1006,  1010,  1038,  1007,  1006,  1052,  1012, 13710,  1007,  1012,
         1996,  4489,  1997,  2048,  2462,  2094, 27258, 13075, 13143,  2015,
         2003,  5001, 19217,  5500,  1012,  2009,  2003,  2036,  3141,  2000,
         1996,  1057,  1006,  1014,  1010,  1015,  1007,  4353,  1031, 16785,
         1010, 16923,  1033,  1998,  2373,  1011,  2375,  4353,  1010,  2029,
         2003,  1037, 16246, 11698,  1997,  2023,  4353,  1031, 18582,  1033,
         1012,   102])"
2324,0,[], Additivity Property,seg_437,example 7.7 memory-less property,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101, 2742, 1021, 1012, 1021, 3638, 1011, 2625, 3200,  102])"
2325,1,"['exponential distribution', 'distribution', 'exponential']", Additivity Property,seg_437,"prove that the exponential distribution has memory-less property p(x ≥ s + t)|p(x ≥ s) = p(x ≥ t) for s, t ≥ 0.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  6011,  2008,  1996, 27258,  4353,  2038,  3638,  1011,  2625,
         3200,  1052,  1006,  1060,  1609,  1055,  1009,  1056,  1007,  1064,
         1052,  1006,  1060,  1609,  1055,  1007,  1027,  1052,  1006,  1060,
         1609,  1056,  1007,  2005,  1055,  1010,  1056,  1609,  1014,  1012,
          102])"
2326,1,"['parameter', 'exponential distribution', 'random', 'exponential', 'distribution', 'model']", Additivity Property,seg_437,"7.4.2.3 applications this distribution is used to model random proportions and life-time of devices and structures. it has applications in reliability theory and waiting times in queuing theory. for example, the expected life length of a new light bulb can be assumed to follow an exponential distribution with parameter   = 1∕500 hours so that the life time is given by f (x) = (1∕500)(e−x∕500).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1021,  1012,  1018,  1012,  1016,  1012,  1017,  5097,  2023,
         4353,  2003,  2109,  2000,  2944,  6721, 19173,  1998,  2166,  1011,
         2051,  1997,  5733,  1998,  5090,  1012,  2009,  2038,  5097,  1999,
        15258,  3399,  1998,  3403,  2335,  1999, 10861, 25165,  3399,  1012,
         2005,  2742,  1010,  1996,  3517,  2166,  3091,  1997,  1037,  2047,
         2422, 20581,  2064,  2022,  5071,  2000,  3582,  2019, 27258,  4353,
         2007, 16381,  1027,   100,  2847,  2061,  2008,  1996,  2166,  2051,
         2003,  2445,  2011,  1042,  1006,  1060,  1007,  1027,  1006,   100,
         1007,  1006,   100,  1007,  1012,   102])"
2327,1,['event'], Additivity Property,seg_437,"other examples include modeling: (i) lifetime of destructive devices that are (more or less) continuously or regularly in use, such as light bulbs and tubes, electronic chips. (ii) lifetime of nondestructive or reusable devices until next repair work, electronic devices such as computer monitors and lcd screens, microwaves, electrical appliances such as refrigerators, and lifetime of automobile tires. time until the arrival of the next event (such as next telephone call and emergency call) or time until next customer to an office or business.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2060,  4973,  2421, 11643,  1024,  1006,  1045,  1007,  6480,
         1997, 15615,  5733,  2008,  2024,  1006,  2062,  2030,  2625,  1007,
        10843,  2030,  5570,  1999,  2224,  1010,  2107,  2004,  2422, 25548,
         1998, 10868,  1010,  4816, 11772,  1012,  1006,  2462,  1007,  6480,
         1997,  2512,  6155, 18300,  3512,  2030,  2128, 10383,  3468,  5733,
         2127,  2279,  7192,  2147,  1010,  4816,  5733,  2107,  2004,  3274,
        15410,  1998, 27662, 12117,  1010, 18302,  2015,  1010,  5992, 22449,
         2107,  2004, 18097,  2015,  1010,  1998,  6480,  1997,  9935, 13310,
         1012,  2051,  2127,  1996,  5508,  1997,  1996,  2279,  2724,  1006,
         2107,  2004,  2279,  7026,  2655,  1998,  5057,  2655,  1007,  2030,
         2051,  2127,  2279,  8013,  2000,  2019,  2436,  2030,  2449,  1012,
          102])"
2328,1,"['mean', 'deviation', 'exponential distribution', 'distribution', 'exponential']", Additivity Property,seg_437,example 7.8 mean deviation of exponential distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2742,  1021,  1012,  1022,  2812, 24353,  1997, 27258,  4353,
          102])"
2329,1,"['mean', 'deviation', 'exponential distribution', 'distribution', 'exponential']", Additivity Property,seg_437,"find the mean deviation of the exponential distribution f (x,  ) =  e− x.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996, 27258,  4353,  1042,
         1006,  1060,  1010,  1007,  1027,  1041, 22543,  1060,  1012,   102])"
2330,1,"['tail', 'exponential distribution', 'limit', 'distribution', 'exponential']", Additivity Property,seg_437,"solution 7.8 we apply theorem 7.1 (page 267) to find the md. as the exponential distribution does not tail off to zero at the lower limit (i.e., at 0), − x equation (7.1) seems like not applicable.we know that the cdf is 1 − e . if we apply l’hospital’s rule once on x ∗ f(x) we get x exp(− x) + (1 − exp(− x)). as both terms → 0 as x → 0, the limx→0 x ∗ f(x) = 0, and the theorem 7.1 becomes applicable. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  5576,  1021,  1012,  1022,  2057,  6611,  9872,  1021,  1012,
         1015,  1006,  3931, 25491,  1007,  2000,  2424,  1996,  9108,  1012,
         2004,  1996, 27258,  4353,  2515,  2025,  5725,  2125,  2000,  5717,
         2012,  1996,  2896,  5787,  1006,  1045,  1012,  1041,  1012,  1010,
         2012,  1014,  1007,  1010,  1597,  1060,  8522,  1006,  1021,  1012,
         1015,  1007,  3849,  2066,  2025, 12711,  1012,  2057,  2113,  2008,
         1996,  3729,  2546,  2003,  1015,  1597,  1041,  1012,  2065,  2057,
         6611,  1048,  1521,  2902,  1521,  1055,  3627,  2320,  2006,  1060,
         1598,  1042,  1006,  1060,  1007,  2057,  2131,  1060,  4654,  2361,
         1006,  1597,  1060,  1007,  1009,  1006,  1015,  1597,  4654,  2361,
         1006,  1597,  1060,  1007,  1007,  1012,  2004,  2119,  3408,  1585,
         1014,  2004,  1060,  1585,  1014,  1010,  1996, 18525,  2595, 30113,
         2692,  1060,  1598,  1042,  1006,  1060,  1007,  1027,  1014,  1010,
         1998,  1996,  9872,  1021,  1012,  1015,  4150, 12711,  1012,  2023,
         3957,   102])"
2331,0,[], Additivity Property,seg_437,split this into two integrals and evaluate each to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  3975,  2023,  2046,  2048,  9897,  2015,  1998, 16157,  2169,
         2000,  2131,   102])"
2332,1,"['table', 'tails', 'exponential distribution', 'limit', 'distribution', 'exponential']", Additivity Property,seg_437,"where fm =  e−1 =  ∕e. alternatively, use the sf() version as the exponential distribution tails off to the upper limit (table 7.3).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  2073,  4718,  1027,  1041, 27944,  1027,   100,  1012, 14084,
         1010,  2224,  1996, 16420,  1006,  1007,  2544,  2004,  1996, 27258,
         4353, 17448,  2125,  2000,  1996,  3356,  5787,  1006,  2795,  1021,
         1012,  1017,  1007,  1012,   102])"
2333,1,"['exponential', 'exponential distribution', 'distribution']", Additivity Property,seg_437,7.4.2.4 general form the general form of the exponential distribution is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([  101,  1021,  1012,  1018,  1012,  1016,  1012,  1018,  2236,  2433,
         1996,  2236,  2433,  1997,  1996, 27258,  4353,  2003,  2445,  2011,
          102])"
2334,1,"['function', 'characteristic function']", Additivity Property,seg_437,the corresponding characteristic function is,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0.])","tensor([ 5587, 25090, 24872,  3200])","tensor([ 101, 1996, 7978, 8281, 3853, 2003,  102])"
2335,1,"['beta distributions', 'type ii', 'prior distribution', 'beta distribution', 'continuous distributions', 'bayesian', 'statistics', 'model', 'binomial', 'continuous', 'order statistics', 'percentage', 'distributions', 'distribution']", BETA DISTRIBUTION,seg_439,"the beta distribution is widely used in statistics owing to its close relationship with other continuous distributions. it is also used in bayesian models with unknown probabilities, in order statistics and reliability analysis. it is used to model the proportion of fat (by weight) in processed or canned food and percentage of impurities in some manufactured products such as food items, cosmetics, and laboratory chemicals. in bayesian analysis, the prior distribution is assumed to be the beta for binomial proportions. important distributions belonging to the beta family are discussed in the following. these include type i and type ii beta distributions. we will use the respective notations beta-i(a,b) and beta-ii(a,b). beta distributions with three or more parameters are also briefly mentioned.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([8247, 4353])","tensor([  101,  1996,  8247,  4353,  2003,  4235,  2109,  1999,  6747, 11427,
         2000,  2049,  2485,  3276,  2007,  2060,  7142, 20611,  1012,  2009,
         2003,  2036,  2109,  1999,  3016, 25253,  4275,  2007,  4242,  4013,
         3676, 14680,  1010,  1999,  2344,  6747,  1998, 15258,  4106,  1012,
         2009,  2003,  2109,  2000,  2944,  1996, 10817,  1997,  6638,  1006,
         2011,  3635,  1007,  1999, 13995,  2030, 27141,  2833,  1998,  7017,
         1997, 17727, 29366,  1999,  2070,  7609,  3688,  2107,  2004,  2833,
         5167,  1010, 25381,  1010,  1998,  5911, 12141,  1012,  1999,  3016,
        25253,  4106,  1010,  1996,  3188,  4353,  2003,  5071,  2000,  2022,
         1996,  8247,  2005,  8026, 20936,  2389, 19173,  1012,  2590, 20611,
         7495,  2000,  1996,  8247,  2155,  2024,  6936,  1999,  1996,  2206,
         1012,  2122,  2421,  2828,  1045,  1998,  2828,  2462,  8247, 20611,
         1012,  2057,  2097,  2224,  1996,  7972, 14869,  2015,  8247,  1011,
         1045,  1006,  1037,  1010,  1038,  1007,  1998,  8247,  1011,  2462,
         1006,  1037,  1010,  1038,  1007,  1012,  8247, 20611,  2007,  2093,
         2030,  2062, 11709,  2024,  2036,  4780,  3855,  1012,   102])"
2336,1,"['beta distribution', 'standard', 'distribution']", TypeI Beta Distribution,seg_441,"this is also called the standard beta distribution. the pdf of beta-i(a, b) is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2828, 2072, 8247, 4353])","tensor([  101,  2023,  2003,  2036,  2170,  1996,  3115,  8247,  4353,  1012,
         1996, 11135,  1997,  8247,  1011,  1045,  1006,  1037,  1010,  1038,
         1007,  2003,  2445,  2011,   102])"
2337,1,"['function', 'complete beta function', 'beta function', 'results']", TypeI Beta Distribution,seg_441,"where 0   x   1, and b(a, b) is the complete beta function (cbf). particular values for a and b results in a variety of distributional shapes.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([2828, 2072, 8247, 4353])","tensor([  101,  2073,  1014,  1060,  1015,  1010,  1998,  1038,  1006,  1037,
         1010,  1038,  1007,  2003,  1996,  3143,  8247,  3853,  1006, 17324,
         2546,  1007,  1012,  3327,  5300,  2005,  1037,  1998,  1038,  3463,
         1999,  1037,  3528,  1997,  4353,  2389, 10466,  1012,   102])"
2338,1,"['tail', 'parameter', 'range', 'variance', 'symmetry', 'tail areas', 'distribution', 'parameters', 'symmetric']", Properties of TypeI Beta Distribution,seg_443,"this distribution has two parameters, both of which are positive real numbers. the range of x is between 0 and 1. the variance is always bounded, irrespective of the parameter values. put y = 1 − x in the above to get the well-known symmetry relationship fx(a, b) = fy(b, a) or in terms of tail areas ix(a, b) = 1 − i1−x(b, a), where ix(a, b) is described below (p. 277). if a = b, the distribution is symmetric about x = 1∕2. if a = b = 1, it reduces to uniform (rectangular) distribution. when a = b = 1∕2, this distribution reduces to the arc-sine distribution of first kind (section 7.8, p. 279). if b = 1 and a ≠ 1, it reduces to power-series distribution f (x; a) = axa−1 using the resultγ(a + 1) = a ∗ γ(a). put a = + 1, b = + 1 to get an alternate form",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  2023,  4353,  2038,  2048, 11709,  1010,  2119,  1997,  2029,
         2024,  3893,  2613,  3616,  1012,  1996,  2846,  1997,  1060,  2003,
         2090,  1014,  1998,  1015,  1012,  1996, 23284,  2003,  2467, 10351,
         1010, 20868,  6072,  5051, 15277,  1997,  1996, 16381,  5300,  1012,
         2404,  1061,  1027,  1015,  1597,  1060,  1999,  1996,  2682,  2000,
         2131,  1996,  2092,  1011,  2124, 14991,  3276, 23292,  1006,  1037,
         1010,  1038,  1007,  1027,  1042,  2100,  1006,  1038,  1010,  1037,
         1007,  2030,  1999,  3408,  1997,  5725,  2752, 11814,  1006,  1037,
         1010,  1038,  1007,  1027,  1015,  1597,  1045,  2487, 22543,  2595,
         1006,  1038,  1010,  1037,  1007,  1010,  2073, 11814,  1006,  1037,
         1010,  1038,  1007,  2003,  2649,  2917,  1006,  1052,  1012, 25578,
         1007,  1012,  2065,  1037,  1027,  1038,  1010,  1996,  4353,  2003,
        19490,  2055,  1060,  1027,   100,  1012,  2065,  1037,  1027,  1038,
         1027,  1015,  1010,  2009, 13416,  2000,  6375,  1006, 10806,  1007,
         4353,  1012,  2043,  1037,  1027,  1038,  1027,   100,  1010,  2023,
         4353, 13416,  2000,  1996,  8115,  1011,  8254,  2063,  4353,  1997,
         2034,  2785,  1006,  2930,  1021,  1012,  1022,  1010,  1052,  1012,
        25745,  1007,  1012,  2065,  1038,  1027,  1015,  1998,  1037,  1027,
         1015,  1010,  2009, 13416,  2000,  2373,  1011,  2186,  4353,  1042,
         1006,  1060,  1025,  1037,  1007,  1027, 22260,  2050, 27944,  2478,
         1996,  2765, 29721,  1006,  1037,  1009,  1015,  1007,  1027,  1037,
         1598,  1157,  1006,  1037,  1007,  1012,  2404,  1037,  1027,  1009,
         1015,  1010,  1038,  1027,  1009,  1015,  2000,  2131,  2019,  6585,
         2433,   102])"
2339,1,"['moment', 'functions', 'moments']", Properties of TypeI Beta Distribution,seg_443,7.5.2.1 moments and generating functions the moments are easy to find using beta integral. the kth moment can be obtained as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  1021,  1012,  1019,  1012,  1016,  1012,  1015,  5312,  1998,
        11717,  4972,  1996,  5312,  2024,  3733,  2000,  2424,  2478,  8247,
         9897,  1012,  1996,  1047,  2705,  2617,  2064,  2022,  4663,  2004,
          102])"
2340,0,[], Properties of TypeI Beta Distribution,seg_443,"in terms of rising factorials, this becomes  k",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  1999,  3408,  1997,  4803,  5387, 26340,  1010,  2023,  4150,
         1047,   102])"
2341,1,"['mean', 'parameter', 'moment', 'function', 'variance', 'characteristic function', 'parameters', 'second moment', 'symmetric']", Properties of TypeI Beta Distribution,seg_443,"′ = a[k]∕(a + b)[k]. the mean is obtained by putting k = 1 as   = a∕(a + b) = 1 − b∕(a + b). this has the interpretation that increasing the parameter “a” by keeping “b” fixed moves the mean to the right (toward 1). put k = 2 to get the second moment as a(a + 1)∕[(a + b)(a + b + 1)]. the variance is  2 = ab∕[(a + b)2(a + b + 1)]. this is symmetric in the parameters and increasing both “a” and “b” together decreases the variance. if a   1 and b   1, there exist a single mode at (a − 1)∕(a + b − 2). the characteristic function is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  1531,  1027,  1037,  1031,  1047,  1033,   100,  1006,  1037,
         1009,  1038,  1007,  1031,  1047,  1033,  1012,  1996,  2812,  2003,
         4663,  2011,  5128,  1047,  1027,  1015,  2004,  1027,   100,  1006,
         1037,  1009,  1038,  1007,  1027,  1015,  1597,   100,  1006,  1037,
         1009,  1038,  1007,  1012,  2023,  2038,  1996,  7613,  2008,  4852,
         1996, 16381,  1523,  1037,  1524,  2011,  4363,  1523,  1038,  1524,
         4964,  5829,  1996,  2812,  2000,  1996,  2157,  1006,  2646,  1015,
         1007,  1012,  2404,  1047,  1027,  1016,  2000,  2131,  1996,  2117,
         2617,  2004,  1037,  1006,  1037,  1009,  1015,  1007,   100,  1031,
         1006,  1037,  1009,  1038,  1007,  1006,  1037,  1009,  1038,  1009,
         1015,  1007,  1033,  1012,  1996, 23284,  2003,  1016,  1027,   100,
         1031,  1006,  1037,  1009,  1038,  1007,  1016,  1006,  1037,  1009,
         1038,  1009,  1015,  1007,  1033,  1012,  2023,  2003, 19490,  1999,
         1996, 11709,  1998,  4852,  2119,  1523,  1037,  1524,  1998,  1523,
         1038,  1524,  2362, 17913,  1996, 23284,  1012,  2065,  1037,  1015,
         1998,  1038,  1015,  1010,  2045,  4839,  1037,  2309,  5549,  2012,
         1006,  1037,  1597,  1015,  1007,   100,  1006,  1037,  1009,  1038,
         1597,  1016,  1007,  1012,  1996,  8281,  3853,  2003,   102])"
2342,1,"['function', 'hypergeometric function', 'moment', 'hypergeometric']", Properties of TypeI Beta Distribution,seg_443,"where 1f1(a, a + b; it) is the confluent hypergeometric function. the kth central moment can be obtained as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  2073,  1015,  2546,  2487,  1006,  1037,  1010,  1037,  1009,
         1038,  1025,  2009,  1007,  2003,  1996,  9530, 10258, 24997,  2102,
        23760,  3351, 28993,  3853,  1012,  1996,  1047,  2705,  2430,  2617,
         2064,  2022,  4663,  2004,  4076,  1024,   102])"
2343,1,"['function', 'hypergeometric function', 'hypergeometric', 'coefficient', 'skewness', 'coefficient of skewness']", Properties of TypeI Beta Distribution,seg_443,"where 2f1(a, b, c; x) is the hypergeometric function. the coefficient of skewness is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  2073,  1016,  2546,  2487,  1006,  1037,  1010,  1038,  1010,
         1039,  1025,  1060,  1007,  2003,  1996, 23760,  3351, 28993,  3853,
         1012,  1996, 19064,  1997, 15315,  7974,  2791,  2003,   102])"
2344,1,"['mean', 'deviation']", Properties of TypeI Beta Distribution,seg_443,a + b + 1∕[√ ab(a + b + 2)]. mean deviation about the mean is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  1037,  1009,  1038,  1009,   100,  1031,  1600, 11113,  1006,
         1037,  1009,  1038,  1009,  1016,  1007,  1033,  1012,  2812, 24353,
         2055,  1996,  2812,  2003,  2445,  2011,   102])"
2345,1,['table'], Properties of TypeI Beta Distribution,seg_443,see table 7.5 for further properties (figures 7.3 and 7.4).,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([ 101, 2156, 2795, 1021, 1012, 1019, 2005, 2582, 5144, 1006, 4481, 1021,
        1012, 1017, 1998, 1021, 1012, 1018, 1007, 1012,  102])"
2346,1,"['beta distribution', 'mean', 'deviation', 'distribution']", Properties of TypeI Beta Distribution,seg_443,example 7.9 mean deviation of beta distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  2742,  1021,  1012,  1023,  2812, 24353,  1997,  8247,  4353,
          102])"
2347,1,"['beta distribution', 'mean', 'deviation', 'distribution']", Properties of TypeI Beta Distribution,seg_443,find the mean deviation of the beta distribution using theorem 7.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996,  8247,  4353,  2478,
         9872,  1021,  1012,  1015,  1012,   102])"
2348,1,"['beta distribution', 'parameter', 'tail', 'distribution', 'case']", Properties of TypeI Beta Distribution,seg_443,"solution 7.9 as the beta distribution does not tail off to the lower or upper limits for some parameter values (e.g., a = b = 0.25), equation (7.1) seems like not applicable. we know that the cdf is ix(a, b). as done in the case of exponential distribution, using l’hospital’s rule, it is easy to show that x ∗ f(x) → 0, so that the theorem 7.1 is applicable. this gives md = 2 ∫0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  5576,  1021,  1012,  1023,  2004,  1996,  8247,  4353,  2515,
         2025,  5725,  2125,  2000,  1996,  2896,  2030,  3356,  6537,  2005,
         2070, 16381,  5300,  1006,  1041,  1012,  1043,  1012,  1010,  1037,
         1027,  1038,  1027,  1014,  1012,  2423,  1007,  1010,  8522,  1006,
         1021,  1012,  1015,  1007,  3849,  2066,  2025, 12711,  1012,  2057,
         2113,  2008,  1996,  3729,  2546,  2003, 11814,  1006,  1037,  1010,
         1038,  1007,  1012,  2004,  2589,  1999,  1996,  2553,  1997, 27258,
         4353,  1010,  2478,  1048,  1521,  2902,  1521,  1055,  3627,  1010,
         2009,  2003,  3733,  2000,  2265,  2008,  1060,  1598,  1042,  1006,
         1060,  1007,  1585,  1014,  1010,  2061,  2008,  1996,  9872,  1021,
         1012,  1015,  2003, 12711,  1012,  2023,  3957,  9108,  1027,  1016,
          100,   102])"
2349,1,['mean'], Properties of TypeI Beta Distribution,seg_443,"c = a∕(a + b) is the mean. taking u = ix(a, b) and dv = dx, this becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  1039,  1027,   100,  1006,  1037,  1009,  1038,  1007,  2003,
         1996,  2812,  1012,  2635,  1057,  1027, 11814,  1006,  1037,  1010,
         1038,  1007,  1998,  1040,  2615,  1027,  1040,  2595,  1010,  2023,
         4150,   102])"
2350,0,[], Properties of TypeI Beta Distribution,seg_443,this can be simplified using a result in reference 4 as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  2023,  2064,  2022, 11038,  2478,  1037,  2765,  1999,  4431,
         1018,  2004,   102])"
2351,1,"['results', 'table']", Properties of TypeI Beta Distribution,seg_443,"to get md = 2bc∕[(a + b)(a + b + 1)]gc(x; a, b), where c = a∕(a + b). results are compared in table 7.6.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([ 101, 2000, 2131, 9108, 1027,  100, 1031, 1006, 1037, 1009, 1038, 1007,
        1006, 1037, 1009, 1038, 1009, 1015, 1007, 1033, 1043, 2278, 1006, 1060,
        1025, 1037, 1010, 1038, 1007, 1010, 2073, 1039, 1027,  100, 1006, 1037,
        1009, 1038, 1007, 1012, 3463, 2024, 4102, 1999, 2795, 1021, 1012, 1020,
        1012,  102])"
2352,1,"['mean', 'variance']", Properties of TypeI Beta Distribution,seg_443,example 7.10 mean versus variance of beta-i,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  2742,  1021,  1012,  2184,  2812,  6431, 23284,  1997,  8247,
         1011,  1045,   102])"
2353,1,"['mean', 'variance', 'distribution']", Properties of TypeI Beta Distribution,seg_443,prove that the variance can never equal the mean of a beta-i distribution.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  6011,  2008,  1996, 23284,  2064,  2196,  5020,  1996,  2812,
         1997,  1037,  8247,  1011,  1045,  4353,  1012,   102])"
2354,1,"['mean', 'variance']", Properties of TypeI Beta Distribution,seg_443,"solution 7.10 we know that the variance of beta-i can be represented in terms of the mean as  (1 −  )∕(a + b + 1). assume the contrary that the variance can be equal to the mean. put   = x in the above to get x(1 − x)∕(a + b + 1) = x. this simplifies to −x2 = (a + b)x. as the mean cannot be zero (as “a” cannot be zero), there is no solution possible. hence, the variance of beta-i is always less than the mean. alternatively, divide the variance by the mean and argue that as   ∈ (0, 1), 1 −   is always less than 1, showing that the ratio is  1, which implies that  2    .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 2072, 8247, 4353])","tensor([  101,  5576,  1021,  1012,  2184,  2057,  2113,  2008,  1996, 23284,
         1997,  8247,  1011,  1045,  2064,  2022,  3421,  1999,  3408,  1997,
         1996,  2812,  2004,  1006,  1015,  1597,  1007,   100,  1006,  1037,
         1009,  1038,  1009,  1015,  1007,  1012,  7868,  1996, 10043,  2008,
         1996, 23284,  2064,  2022,  5020,  2000,  1996,  2812,  1012,  2404,
         1027,  1060,  1999,  1996,  2682,  2000,  2131,  1060,  1006,  1015,
         1597,  1060,  1007,   100,  1006,  1037,  1009,  1038,  1009,  1015,
         1007,  1027,  1060,  1012,  2023, 21934, 24759, 14144,  2000,  1597,
         2595,  2475,  1027,  1006,  1037,  1009,  1038,  1007,  1060,  1012,
         2004,  1996,  2812,  3685,  2022,  5717,  1006,  2004,  1523,  1037,
         1524,  3685,  2022,  5717,  1007,  1010,  2045,  2003,  2053,  5576,
         2825,  1012,  6516,  1010,  1996, 23284,  1997,  8247,  1011,  1045,
         2003,  2467,  2625,  2084,  1996,  2812,  1012, 14084,  1010, 11443,
         1996, 23284,  2011,  1996,  2812,  1998,  7475,  2008,  2004,  1596,
         1006,  1014,  1010,  1015,  1007,  1010,  1015,  1597,  2003,  2467,
         2625,  2084,  1015,  1010,  4760,  2008,  1996,  6463,  2003,  1015,
         1010,  2029, 12748,  2008,  1016,  1012,   102])"
2355,1,"['beta distribution', 'range', 'distribution', 'transformation']", TypeII Beta Distribution,seg_445,"beta distribution of the second kind (also called type-ii beta distribution or inverted beta distribution (ibd)) is obtained from the above by the transformation y = x∕(1 − x) or equivalently x = y∕(1 + y). when x → 0, y → 0, and when x → 1, y → ∞. hence, the range of y is from 0 to ∞. the pdf is given by",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2828, 6137, 8247, 4353])","tensor([  101,  8247,  4353,  1997,  1996,  2117,  2785,  1006,  2036,  2170,
         2828,  1011,  2462,  8247,  4353,  2030, 20037,  8247,  4353,  1006,
        21307,  2094,  1007,  1007,  2003,  4663,  2013,  1996,  2682,  2011,
         1996,  8651,  1061,  1027,   100,  1006,  1015,  1597,  1060,  1007,
         2030,  5662,  2135,  1060,  1027,   100,  1006,  1015,  1009,  1061,
         1007,  1012,  2043,  1060,  1585,  1014,  1010,  1061,  1585,  1014,
         1010,  1998,  2043,  1060,  1585,  1015,  1010,  1061,  1585,  1601,
         1012,  6516,  1010,  1996,  2846,  1997,  1061,  2003,  2013,  1014,
         2000,  1601,  1012,  1996, 11135,  2003,  2445,  2011,   102])"
2356,1,"['vary', 'range', 'random', 'limit', 'experiments', 'distribution', 'model']", TypeII Beta Distribution,seg_445,"the beta-i distribution is used to model random experiments or occurrences that vary between two finite limits, which are mapped to the (0,1) range, whereas beta-ii is used when upper limit is infinite.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([2828, 6137, 8247, 4353])","tensor([  101,  1996,  8247,  1011,  1045,  4353,  2003,  2109,  2000,  2944,
         6721,  7885,  2030, 27247,  2008,  8137,  2090,  2048, 10713,  6537,
         1010,  2029,  2024, 17715,  2000,  1996,  1006,  1014,  1010,  1015,
         1007,  2846,  1010,  6168,  8247,  1011,  2462,  2003,  2109,  2043,
         3356,  5787,  2003, 10709,  1012,   102])"
2357,1,"['degrees of freedom', 'distribution', 'f distribution', 'beta distributed', 'case']", Properties of TypeII Beta Distribution,seg_447,"this is a special case of the unscaled f distribution (distribution of 2m∕ 2n) or an f with the same degrees of freedom. in other words, put y = (m∕n) ∗ x in f distribution to get beta-ii distribution. if y is beta-ii(a,b) then 1∕y is beta-ii(b, a). this means that 1∕[x∕(1 − x)] = (1 − x)∕x is also beta distributed (see the following discussion).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  2023,  2003,  1037,  2569,  2553,  1997,  1996,  4895, 15782,
         3709,  1042,  4353,  1006,  4353,  1997,   100,  1016,  2078,  1007,
         2030,  2019,  1042,  2007,  1996,  2168,  5445,  1997,  4071,  1012,
         1999,  2060,  2616,  1010,  2404,  1061,  1027,  1006,   100,  1007,
         1598,  1060,  1999,  1042,  4353,  2000,  2131,  8247,  1011,  2462,
         4353,  1012,  2065,  1061,  2003,  8247,  1011,  2462,  1006,  1037,
         1010,  1038,  1007,  2059,   100,  2003,  8247,  1011,  2462,  1006,
         1038,  1010,  1037,  1007,  1012,  2023,  2965,  2008,   100,  1031,
          100,  1006,  1015,  1597,  1060,  1007,  1033,  1027,  1006,  1015,
         1597,  1060,  1007,   100,  2003,  2036,  8247,  5500,  1006,  2156,
         1996,  2206,  6594,  1007,  1012,   102])"
2358,1,"['mean', 'variance', 'functions', 'moments']", Properties of TypeII Beta Distribution,seg_447,7.5.4.1 moments and generating functions the mean and variance are   = a∕(b − 1) and  2 = a(a + b − 1)∕[(b − 1)2(b − 2)] for b   2. consider e(yk),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  1021,  1012,  1019,  1012,  1018,  1012,  1015,  5312,  1998,
        11717,  4972,  1996,  2812,  1998, 23284,  2024,  1027,   100,  1006,
         1038,  1597,  1015,  1007,  1998,  1016,  1027,  1037,  1006,  1037,
         1009,  1038,  1597,  1015,  1007,   100,  1031,  1006,  1038,  1597,
         1015,  1007,  1016,  1006,  1038,  1597,  1016,  1007,  1033,  2005,
         1038,  1016,  1012,  5136,  1041,  1006,  1061,  2243,  1007,   102])"
2359,1,['range'], Properties of TypeII Beta Distribution,seg_447,"put x = y∕(1 + y) so that y = x∕(1 − x), (1 + y) = 1∕(1 − x), and dy∕dx = [(1 − x) − x(−1)]∕(1 − x)2. this simplifies to 1∕(1 − x)2. the range of x is [0,1]. hence, equation (7.36) becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  2404,  1060,  1027,   100,  1006,  1015,  1009,  1061,  1007,
         2061,  2008,  1061,  1027,   100,  1006,  1015,  1597,  1060,  1007,
         1010,  1006,  1015,  1009,  1061,  1007,  1027,   100,  1006,  1015,
         1597,  1060,  1007,  1010,  1998,   100,  1027,  1031,  1006,  1015,
         1597,  1060,  1007,  1597,  1060,  1006,  1597,  2487,  1007,  1033,
          100,  1006,  1015,  1597,  1060,  1007,  1016,  1012,  2023, 21934,
        24759, 14144,  2000,   100,  1006,  1015,  1597,  1060,  1007,  1016,
         1012,  1996,  2846,  1997,  1060,  2003,  1031,  1014,  1010,  1015,
         1033,  1012,  6516,  1010,  8522,  1006,  1021,  1012,  4029,  1007,
         4150,   102])"
2360,1,"['mean', 'moment', 'variance', 'factors', 'factor', 'second moment']", Properties of TypeII Beta Distribution,seg_447,"this is b(a + k, b − k)∕b(a, b). put k = 1 to get the mean as γ(a + 1)γ(b − 1) γ(a + b)∕[γ(a)γ(b)γ(a + b)]. write γ(a + 1) = aγ(a) in the numerator and γ(b) = (b − 1)γ(b − 1) in the denominator and cancel out common factors to get   = a∕(b − 1). put k = 2 to get the second moment as b(a + 2, b − 2)∕b(a, b) = γ(a + 2)γ(b − 2)γ(a + b)∕[γ(a)γ(b)γ(a + b)] = a(a + 1)∕[(b − 1)(b − 2)]. from this, the variance is obtained as a(a + 1)∕[(b − 1)(b − 2)] − a2∕(b − 1)2. take   = a∕(b − 1) as a common factor. this can now be written as  ( a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  2023,  2003,  1038,  1006,  1037,  1009,  1047,  1010,  1038,
         1597,  1047,  1007,   100,  1006,  1037,  1010,  1038,  1007,  1012,
         2404,  1047,  1027,  1015,  2000,  2131,  1996,  2812,  2004,  1157,
         1006,  1037,  1009,  1015,  1007,  1157,  1006,  1038,  1597,  1015,
         1007,  1157,  1006,  1037,  1009,  1038,  1007,   100,  1031,  1157,
         1006,  1037,  1007,  1157,  1006,  1038,  1007,  1157,  1006,  1037,
         1009,  1038,  1007,  1033,  1012,  4339,  1157,  1006,  1037,  1009,
         1015,  1007,  1027,  1037, 29721,  1006,  1037,  1007,  1999,  1996,
        16371,  5017,  8844,  1998,  1157,  1006,  1038,  1007,  1027,  1006,
         1038,  1597,  1015,  1007,  1157,  1006,  1038,  1597,  1015,  1007,
         1999,  1996,  7939, 20936, 27413,  1998, 17542,  2041,  2691,  5876,
         2000,  2131,  1027,   100,  1006,  1038,  1597,  1015,  1007,  1012,
         2404,  1047,  1027,  1016,  2000,  2131,  1996,  2117,  2617,  2004,
         1038,  1006,  1037,  1009,  1016,  1010,  1038,  1597,  1016,  1007,
          100,  1006,  1037,  1010,  1038,  1007,  1027,  1157,  1006,  1037,
         1009,  1016,  1007,  1157,  1006,  1038,  1597,  1016,  1007,  1157,
         1006,  1037,  1009,  1038,  1007,   100,  1031,  1157,  1006,  1037,
         1007,  1157,  1006,  1038,  1007,  1157,  1006,  1037,  1009,  1038,
         1007,  1033,  1027,  1037,  1006,  1037,  1009,  1015,  1007,   100,
         1031,  1006,  1038,  1597,  1015,  1007,  1006,  1038,  1597,  1016,
         1007,  1033,  1012,  2013,  2023,  1010,  1996, 23284,  2003,  4663,
         2004,  1037,  1006,  1037,  1009,  1015,  1007,   100,  1031,  1006,
         1038,  1597,  1015,  1007,  1006,  1038,  1597,  1016,  1007,  1033,
         1597,   100,  1006,  1038,  1597,  1015,  1007,  1016,  1012,  2202,
         1027,   100,  1006,  1038,  1597,  1015,  1007,  2004,  1037,  2691,
         5387,  1012,  2023,  2064,  2085,  2022,  2517,  2004,  1006,  1037,
          102])"
2361,1,"['variance', 'distribution']", Properties of TypeII Beta Distribution,seg_447,"1 2 − ). substitute for inside the bracket and take (b − 1)(b − 2) as common denominator. the numerator simplifies to b − a + 2a − 1 = (a + b − 1). hence, the variance becomes 2 = a(a + b − 1)∕[(b − 1)2(b − 2)]. as (a + 1)∕(b − 2) − = (a + b)∕[(b − 1)(b − 2)], this expression is valid for b 2. unlike the beta-i distribution whose variance is always bounded, the variance of beta-ii can be",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  1015,  1016,  1597,  1007,  1012,  7681,  2005,  2503,  1996,
        21605,  1998,  2202,  1006,  1038,  1597,  1015,  1007,  1006,  1038,
         1597,  1016,  1007,  2004,  2691,  7939, 20936, 27413,  1012,  1996,
        16371,  5017,  8844, 21934, 24759, 14144,  2000,  1038,  1597,  1037,
         1009, 23409,  1597,  1015,  1027,  1006,  1037,  1009,  1038,  1597,
         1015,  1007,  1012,  6516,  1010,  1996, 23284,  4150,  1016,  1027,
         1037,  1006,  1037,  1009,  1038,  1597,  1015,  1007,   100,  1031,
         1006,  1038,  1597,  1015,  1007,  1016,  1006,  1038,  1597,  1016,
         1007,  1033,  1012,  2004,  1006,  1037,  1009,  1015,  1007,   100,
         1006,  1038,  1597,  1016,  1007,  1597,  1027,  1006,  1037,  1009,
         1038,  1007,   100,  1031,  1006,  1038,  1597,  1015,  1007,  1006,
         1038,  1597,  1016,  1007,  1033,  1010,  2023,  3670,  2003,  9398,
         2005,  1038,  1016,  1012,  4406,  1996,  8247,  1011,  1045,  4353,
         3005, 23284,  2003,  2467, 10351,  1010,  1996, 23284,  1997,  8247,
         1011,  2462,  2064,  2022,   102])"
2362,1,"['function', 'gamma', 'gamma function', 'complete gamma function', 'expectation']", Properties of TypeII Beta Distribution,seg_447,increased arbitrarily by keeping b constant (say near 2+) and letting a → ∞. it can also be decreased arbitrarily when (a + 1)∕(b − 2) tends to   = a∕(b − 1). the expectation of [x∕(1 − x)]k is easy to compute in terms of complete gamma function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  3445, 12098, 16313, 19848,  6588,  2011,  4363,  1038,  5377,
         1006,  2360,  2379,  1016,  1009,  1007,  1998,  5599,  1037,  1585,
         1601,  1012,  2009,  2064,  2036,  2022, 10548, 12098, 16313, 19848,
         6588,  2043,  1006,  1037,  1009,  1015,  1007,   100,  1006,  1038,
         1597,  1016,  1007, 12102,  2000,  1027,   100,  1006,  1038,  1597,
         1015,  1007,  1012,  1996, 17626,  1997,  1031,   100,  1006,  1015,
         1597,  1060,  1007,  1033,  1047,  2003,  3733,  2000, 24134,  1999,
         3408,  1997,  3143, 13091,  3853,   102])"
2363,1,['table'], Properties of TypeII Beta Distribution,seg_447,γ(a+k)γ(b−k) as e[x∕(1 − x)]k = . see table 7.7 for further properties.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  1157,  1006,  1037,  1009,  1047,  1007,  1157,  1006,  1038,
        22543,  2243,  1007,  2004,  1041,  1031,   100,  1006,  1015,  1597,
         1060,  1007,  1033,  1047,  1027,  1012,  2156,  2795,  1021,  1012,
         1021,  2005,  2582,  5144,  1012,   102])"
2364,1,['distribution'], Properties of TypeII Beta Distribution,seg_447,example 7.11 the mode of beta-ii distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([ 101, 2742, 1021, 1012, 2340, 1996, 5549, 1997, 8247, 1011, 2462, 4353,
         102])"
2365,1,['distribution'], Properties of TypeII Beta Distribution,seg_447,prove that the mode of beta-ii distribution is (a − 1)∕(b + 1).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([ 101, 6011, 2008, 1996, 5549, 1997, 8247, 1011, 2462, 4353, 2003, 1006,
        1037, 1597, 1015, 1007,  100, 1006, 1038, 1009, 1015, 1007, 1012,  102])"
2366,0,[], Properties of TypeII Beta Distribution,seg_447,solution 7.11 differentiate equation (7.35) (without constant multiplier) with respect to y to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([5144, 1997, 2828, 6137, 8247, 4353])","tensor([  101,  5576,  1021,  1012,  2340, 21032,  8522,  1006,  1021,  1012,
         3486,  1007,  1006,  2302,  5377,  4800, 24759,  3771,  1007,  2007,
         4847,  2000,  1061,  2000,  2131,   102])"
2367,1,"['variates', 'gamma', 'beta distributed', 'random', 'normal', 'random variables', 'gamma random variables', 'variables', 'independent']", Relationship with Other Distributions,seg_449,"put a = b = 1 to get beta(1,1), which is identical to u(0, 1). if x is beta1(a, b) then (1 − x)∕x is beta2(b, a), and x∕(1 − x) is beta2(a, b). if x and y are independent gamma random variables γ(a,  ) and γ(b,  ), then x∕(x + y) is beta(a, b) (see exercise 7.26). as gamma and  2 are related, this result can also be stated in terms of normal variates as follows. if x and y are independent normal variates, then z = x2∕(x2 + y2) is beta distributed. in addition, if x1,x2, · · · ,xk are iid n(0, 1) and z1 = x1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3276,  2007,  2060, 20611])","tensor([  101,  2404,  1037,  1027,  1038,  1027,  1015,  2000,  2131,  8247,
         1006,  1015,  1010,  1015,  1007,  1010,  2029,  2003,  7235,  2000,
         1057,  1006,  1014,  1010,  1015,  1007,  1012,  2065,  1060,  2003,
         8247,  2487,  1006,  1037,  1010,  1038,  1007,  2059,  1006,  1015,
         1597,  1060,  1007,   100,  2003,  8247,  2475,  1006,  1038,  1010,
         1037,  1007,  1010,  1998,   100,  1006,  1015,  1597,  1060,  1007,
         2003,  8247,  2475,  1006,  1037,  1010,  1038,  1007,  1012,  2065,
         1060,  1998,  1061,  2024,  2981, 13091,  6721, 10857,  1157,  1006,
         1037,  1010,  1007,  1998,  1157,  1006,  1038,  1010,  1007,  1010,
         2059,   100,  1006,  1060,  1009,  1061,  1007,  2003,  8247,  1006,
         1037,  1010,  1038,  1007,  1006,  2156,  6912,  1021,  1012,  2656,
         1007,  1012,  2004, 13091,  1998,  1016,  2024,  3141,  1010,  2023,
         2765,  2064,  2036,  2022,  3090,  1999,  3408,  1997,  3671, 13075,
        13143,  2015,  2004,  4076,  1012,  2065,  1060,  1998,  1061,  2024,
         2981,  3671, 13075, 13143,  2015,  1010,  2059,  1062,  1027,   100,
         1006,  1060,  2475,  1009,  1061,  2475,  1007,  2003,  8247,  5500,
         1012,  1999,  2804,  1010,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1087,  1087,  1087,  1010,  1060,  2243,  2024,  2462,  2094,
         1050,  1006,  1014,  1010,  1015,  1007,  1998,  1062,  2487,  1027,
         1060,  2487,   102])"
2368,0,[], Relationship with Other Distributions,seg_449,"2, then each of them are beta-i distributed, as also the product",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3276,  2007,  2060, 20611])","tensor([ 101, 1016, 1010, 2059, 2169, 1997, 2068, 2024, 8247, 1011, 1045, 5500,
        1010, 2004, 2036, 1996, 4031,  102])"
2369,1,['set'], Relationship with Other Distributions,seg_449,of any consecutive set of zj,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 3276,  2007,  2060, 20611])","tensor([ 101, 1997, 2151, 5486, 2275, 1997, 1062, 3501,  102])"
2370,1,"['logistic distribution', 'beta distributed', 'logistic', 'distribution']", Relationship with Other Distributions,seg_449,"′s are beta distributed [167, 171]. the logistic distribution",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 3276,  2007,  2060, 20611])","tensor([  101,  1531,  1055,  2024,  8247,  5500,  1031, 16785,  1010, 18225,
         1033,  1012,  1996,  8833,  6553,  4353,   102])"
2371,1,"['beta distribution', 'logistic distribution', 'uniform distribution', 'order statistic', 'distributions', 'exponential distribution', 'type ii', 'normal', 'statistical', 'distribution', 'exponential', 'beta distributed', 'logistic', 'statistic']", Relationship with Other Distributions,seg_449,"and type ii beta distribution are related as y = − ln(x). if x is beta-i(a, b) then y = ln(x∕(1 − x)) has a generalized logistic distribution [172, 173]. dirichlet distribution is a generalization of beta distribution. order statistic from uniform distribution is beta distributed. in general, jth highest order statistic from a uniform distribution is beta-i(j, n − j + 1). see reference 174 for the beta-generalized exponential distribution, reference 167 for relationships among various statistical distributions, reference 133 for normal approximations, and reference 175 for new properties of this distribution.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 1., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 3276,  2007,  2060, 20611])","tensor([  101,  1998,  2828,  2462,  8247,  4353,  2024,  3141,  2004,  1061,
         1027,  1597,  1048,  2078,  1006,  1060,  1007,  1012,  2065,  1060,
         2003,  8247,  1011,  1045,  1006,  1037,  1010,  1038,  1007,  2059,
         1061,  1027,  1048,  2078,  1006,   100,  1006,  1015,  1597,  1060,
         1007,  1007,  2038,  1037, 18960,  8833,  6553,  4353,  1031, 18253,
         1010, 19410,  1033,  1012, 16101,  7033,  7485,  4353,  2003,  1037,
         2236,  3989,  1997,  8247,  4353,  1012,  2344, 28093,  6553,  2013,
         6375,  4353,  2003,  8247,  5500,  1012,  1999,  2236,  1010,  1046,
         2705,  3284,  2344, 28093,  6553,  2013,  1037,  6375,  4353,  2003,
         8247,  1011,  1045,  1006,  1046,  1010,  1050,  1597,  1046,  1009,
         1015,  1007,  1012,  2156,  4431, 19492,  2005,  1996,  8247,  1011,
        18960, 27258,  4353,  1010,  4431, 16785,  2005,  6550,  2426,  2536,
         7778, 20611,  1010,  4431, 14506,  2005,  3671, 20167,  2015,  1010,
         1998,  4431, 12862,  2005,  2047,  5144,  1997,  2023,  4353,  1012,
          102])"
2372,1,"['random variable', 'distributions', 'random', 'normal', 'distribution', 'variable']", Relationship with Other Distributions,seg_449,"as the random variable takes values in [0,1], any cdf can be substituted for x to get a variety of new distributions [22]. for instance, put x = φ(x), the cdf of a normal variate to get the beta-normal distribution with pdf",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 3276,  2007,  2060, 20611])","tensor([  101,  2004,  1996,  6721,  8023,  3138,  5300,  1999,  1031,  1014,
         1010,  1015,  1033,  1010,  2151,  3729,  2546,  2064,  2022, 17316,
         2005,  1060,  2000,  2131,  1037,  3528,  1997,  2047, 20611,  1031,
         2570,  1033,  1012,  2005,  6013,  1010,  2404,  1060,  1027,  1176,
         1006,  1060,  1007,  1010,  1996,  3729,  2546,  1997,  1037,  3671,
        13075, 13143,  2000,  2131,  1996,  8247,  1011,  3671,  4353,  2007,
        11135,   102])"
2373,1,"['range', 'normal distribution', 'normal', 'distribution']", Relationship with Other Distributions,seg_449,"where b(a, b) is the cbf,  (x) is the pdf and φ(x) is the cdf of normal distribution, so that the range is now extended to −∞   x   ∞.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3276,  2007,  2060, 20611])","tensor([  101,  2073,  1038,  1006,  1037,  1010,  1038,  1007,  2003,  1996,
        17324,  2546,  1010,  1006,  1060,  1007,  2003,  1996, 11135,  1998,
         1176,  1006,  1060,  1007,  2003,  1996,  3729,  2546,  1997,  3671,
         4353,  1010,  2061,  2008,  1996,  2846,  2003,  2085,  3668,  2000,
         1597, 30128,  1060,  1601,  1012,   102])"
2374,1,"['incomplete beta', 'homogeneity', 'tests', 'likelihood ratio', 'populations', 'beta function', 'normal', 'statistics', 'samples', 'model', 'statistic', 'function', 'linear', 'variances', 'linear model', 'incomplete beta function', 'outliers', 'likelihood', 'distribution']", THE INCOMPLETE BETA FUNCTION,seg_451,"the incomplete beta function (ibf) denoted by ix(a, b) or i(x; a, b) has several applications in statistics and engineering. it is used in wind velocity modeling [176], flood water modeling, and soil erosion modeling. it is used to compute bartlett’s statistic for testing homogeneity of variances when unequal samples are drawn from normal populations [177] and in several tests involving likelihood ratio criterion [178]. it is also used in computing the power function of nested tests in linear models [179], approximating the distribution of largest roots in multivariate inference, and detecting two outliers in the same direction in a linear model [180]. its applications to traffic accident proneness are discussed by haight [181].",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 1996, 12958,  8247,  3853])","tensor([  101,  1996, 12958,  8247,  3853,  1006, 21307,  2546,  1007, 19537,
         2011, 11814,  1006,  1037,  1010,  1038,  1007,  2030,  1045,  1006,
         1060,  1025,  1037,  1010,  1038,  1007,  2038,  2195,  5097,  1999,
         6747,  1998,  3330,  1012,  2009,  2003,  2109,  1999,  3612, 10146,
        11643,  1031, 18561,  1033,  1010,  7186,  2300, 11643,  1010,  1998,
         5800, 14173, 11643,  1012,  2009,  2003,  2109,  2000, 24134, 20081,
         1521,  1055, 28093,  6553,  2005,  5604, 24004,  6914, 20175,  2100,
         1997, 23284,  2015,  2043, 16655, 26426,  8168,  2024,  4567,  2013,
         3671,  7080,  1031, 18118,  1033,  1998,  1999,  2195,  5852,  5994,
        16593,  6463, 19229,  1031, 19289,  1033,  1012,  2009,  2003,  2036,
         2109,  1999,  9798,  1996,  2373,  3853,  1997,  9089,  2098,  5852,
         1999,  7399,  4275,  1031, 20311,  1033,  1010, 22480, 22835,  1996,
         4353,  1997,  2922,  6147,  1999,  4800, 10755, 13143, 28937,  1010,
         1998, 25952,  2048,  2041, 14355,  2015,  1999,  1996,  2168,  3257,
         1999,  1037,  7399,  2944,  1031,  8380,  1033,  1012,  2049,  5097,
         2000,  4026,  4926, 13047,  2791,  2024,  6936,  2011, 15030, 13900,
         1031, 18596,  1033,  1012,   102])"
2375,1,"['function', 'distributions', 'distribution', 'statistical', 'binomial', 'binomial distribution']", Tail Areas Using IBF,seg_453,"tail areas of several statistical distributions are related to the beta cdf as discussed below. the survival function of a binomial distribution bino(n, p) is related to the left-tail areas of beta-i distribution as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  5725,  2752,  1997,  2195,  7778, 20611,  2024,  3141,  2000,
         1996,  8247,  3729,  2546,  2004,  6936,  2917,  1012,  1996,  7691,
         3853,  1997,  1037,  8026, 20936,  2389,  4353,  8026,  2080,  1006,
         1050,  1010,  1052,  1007,  2003,  3141,  2000,  1996,  2187,  1011,
         5725,  2752,  1997,  8247,  1011,  1045,  4353,  2004,   102])"
2376,0,[], Tail Areas Using IBF,seg_453,"using the relationship (7.47), the cdf becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([ 101, 2478, 1996, 3276, 1006, 1021, 1012, 4700, 1007, 1010, 1996, 3729,
        2546, 4150,  102])"
2377,0,[], Tail Areas Using IBF,seg_453,"when both a and b are integers, this has a compact representation as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  2043,  2119,  1037,  1998,  1038,  2024, 24028,  1010,  2023,
         2038,  1037,  9233,  6630,  2004,   102])"
2378,1,"['negative binomial distribution', 'function', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", Tail Areas Using IBF,seg_453,the survival function of negative binomial distribution is related as follows,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  1996,  7691,  3853,  1997,  4997,  8026, 20936,  2389,  4353,
         2003,  3141,  2004,  4076,   102])"
2379,1,"['f distribution', 'distribution']", Tail Areas Using IBF,seg_453,the relationship between the cdf of central f distribution and the ibf is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  1996,  3276,  2090,  1996,  3729,  2546,  1997,  2430,  1042,
         4353,  1998,  1996, 21307,  2546,  2003,   102])"
2380,1,['degrees of freedom'], Tail Areas Using IBF,seg_453,"where (m, n) are the numerator and denominator degrees of freedom (dof) and y = mx∕(n + mx). similarly, student’s t cdf is evaluated as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  2073,  1006,  1049,  1010,  1050,  1007,  2024,  1996, 16371,
         5017,  8844,  1998,  7939, 20936, 27413,  5445,  1997,  4071,  1006,
         2079,  2546,  1007,  1998,  1061,  1027,   100,  1006,  1050,  1009,
        25630,  1007,  1012,  6660,  1010,  3076,  1521,  1055,  1056,  3729,
         2546,  2003, 16330,  2004,   102])"
2381,1,"['logistic distribution', 'hypergeometric function', 'hypergeometric', 'coefficient', 'correlation coefficient', 'correlation', 'logistic', 'populations', 'tail areas', 'statistics', 'binomial', 'statistic', 'noncentral', 'function', 'order statistics', 'negative binomial', 'noncentral beta', 'tail', 'distributions', 'noncentral f', 'sample', 'distribution']", Tail Areas Using IBF,seg_453,"the ibf is related to the tail areas of binomial, negative binomial, student’s t, and central f distributions [182]. it is also related to the confluent hypergeometric function, generalized logistic distribution, the distribution of order statistics from uniform populations, and the hotelling’s t2 statistic. the hypergeometric function can be approximated using the ibf also [183]. the dirichlet (and its inverse) distribution can be expressed in terms of the ibf [184]. it is related to the cumulative distribution function (cdf) of noncentral distributions [7, 185–192] and the sample multiple correlation coefficient [193, 194]. for instance, the cdf of singly noncentral beta [179, 195], singly type-ii noncentral beta, doubly noncentral beta [4], noncentral t [188, 196], noncentral f [5, 197, 198], and the sample multiple correlation coefficient [199, 200] could all be evaluated as infinite mixtures of the ibf.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        1., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  1996, 21307,  2546,  2003,  3141,  2000,  1996,  5725,  2752,
         1997,  8026, 20936,  2389,  1010,  4997,  8026, 20936,  2389,  1010,
         3076,  1521,  1055,  1056,  1010,  1998,  2430,  1042, 20611,  1031,
        17691,  1033,  1012,  2009,  2003,  2036,  3141,  2000,  1996,  9530,
        10258, 24997,  2102, 23760,  3351, 28993,  3853,  1010, 18960,  8833,
         6553,  4353,  1010,  1996,  4353,  1997,  2344,  6747,  2013,  6375,
         7080,  1010,  1998,  1996,  3309,  2989,  1521,  1055,  1056,  2475,
        28093,  6553,  1012,  1996, 23760,  3351, 28993,  3853,  2064,  2022,
        15796,  2094,  2478,  1996, 21307,  2546,  2036,  1031, 18677,  1033,
         1012,  1996, 16101,  7033,  7485,  1006,  1998,  2049, 19262,  1007,
         4353,  2064,  2022,  5228,  1999,  3408,  1997,  1996, 21307,  2546,
         1031, 19681,  1033,  1012,  2009,  2003,  3141,  2000,  1996, 23260,
         4353,  3853,  1006,  3729,  2546,  1007,  1997,  2512, 13013,  7941,
        20611,  1031,  1021,  1010, 15376,  1516, 17613,  1033,  1998,  1996,
         7099,  3674, 16902, 19064,  1031, 19984,  1010, 19955,  1033,  1012,
         2005,  6013,  1010,  1996,  3729,  2546,  1997,  6170,  2135,  2512,
        13013,  7941,  8247,  1031, 20311,  1010, 17317,  1033,  1010,  6170,
         2135,  2828,  1011,  2462,  2512, 13013,  7941,  8247,  1010,  2079,
        12083,  2135,  2512, 13013,  7941,  8247,  1031,  1018,  1033,  1010,
         2512, 13013,  7941,  1056,  1031, 19121,  1010, 20035,  1033,  1010,
         2512, 13013,  7941,  1042,  1031,  1019,  1010, 19975,  1010, 20003,
         1033,  1010,  1998,  1996,  7099,  3674, 16902, 19064,  1031, 20713,
         1010,  3263,  1033,  2071,  2035,  2022, 16330,  2004, 10709,  8150,
         2015,  1997,  1996, 21307,  2546,  1012,   102])"
2382,1,"['beta distribution', 'distribution']", Tail Areas Using IBF,seg_453,definition 7.2 the ibf is the left-tail area of the beta distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  6210,  1021,  1012,  1016,  1996, 21307,  2546,  2003,  1996,
         2187,  1011,  5725,  2181,  1997,  1996,  8247,  4353,   102])"
2383,1,['symmetric'], Tail Areas Using IBF,seg_453,"where b(a, b) is the cbf. obviously, i0(a, b) = 0 and i1(a, b) = 1. replace x by (1 − x) and swap a and b to get a symmetric relationship.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  2073,  1038,  1006,  1037,  1010,  1038,  1007,  2003,  1996,
        17324,  2546,  1012,  5525,  1010,  1045,  2692,  1006,  1037,  1010,
         1038,  1007,  1027,  1014,  1998,  1045,  2487,  1006,  1037,  1010,
         1038,  1007,  1027,  1015,  1012,  5672,  1060,  2011,  1006,  1015,
         1597,  1060,  1007,  1998, 19948,  1037,  1998,  1038,  2000,  2131,
         1037, 19490,  3276,  1012,   102])"
2384,1,"['tail', 'symmetry', 'tail areas', 'distributions', 'noncentral beta', 'noncentral']", Tail Areas Using IBF,seg_453,"this symmetry among the tail areas was extended by chattamvelli [196] to noncentral beta, noncentral fisher’s z, and doubly noncentral distributions.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  2023, 14991,  2426,  1996,  5725,  2752,  2001,  3668,  2011,
        11834, 15464, 15985,  3669,  1031, 20035,  1033,  2000,  2512, 13013,
         7941,  8247,  1010,  2512, 13013,  7941,  8731,  1521,  1055,  1062,
         1010,  1998,  2079, 12083,  2135,  2512, 13013,  7941, 20611,  1012,
          102])"
2385,1,"['representations', 'symmetric', 'beta distribution', 'tail areas', 'statistics', 'noncentral', 'test', 'evaluating', 'noncentral beta', 'parameters', 'tail', 'range', 'distributions', 'distribution', 'test statistics']", Tail Areas Using IBF,seg_453,"if the cdf (left-tail area) of a type-ii noncentral beta distribution is denoted as jx(a, b,  ), then the tail areas are related as jx(a, b,  ) = 1 − i1−x(b, a,  ), where iy(b, a,  ) is the cdf of a type-i noncentral beta distribution. we write ix(b) or i(x; b) for the symmetric ibf ix(b, b) [201, 202]. the parameters of an ibf can be any positive real number. simplified expressions exist when either of the parameters is an integer or a half-integer. these representations have a broad range of applications to evaluating or approximating other related distributions and test statistics mentioned earlier.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  2065,  1996,  3729,  2546,  1006,  2187,  1011,  5725,  2181,
         1007,  1997,  1037,  2828,  1011,  2462,  2512, 13013,  7941,  8247,
         4353,  2003, 19537,  2004,  1046,  2595,  1006,  1037,  1010,  1038,
         1010,  1007,  1010,  2059,  1996,  5725,  2752,  2024,  3141,  2004,
         1046,  2595,  1006,  1037,  1010,  1038,  1010,  1007,  1027,  1015,
         1597,  1045,  2487, 22543,  2595,  1006,  1038,  1010,  1037,  1010,
         1007,  1010,  2073,  1045,  2100,  1006,  1038,  1010,  1037,  1010,
         1007,  2003,  1996,  3729,  2546,  1997,  1037,  2828,  1011,  1045,
         2512, 13013,  7941,  8247,  4353,  1012,  2057,  4339, 11814,  1006,
         1038,  1007,  2030,  1045,  1006,  1060,  1025,  1038,  1007,  2005,
         1996, 19490, 21307,  2546, 11814,  1006,  1038,  1010,  1038,  1007,
         1031, 16345,  1010, 16798,  1033,  1012,  1996, 11709,  1997,  2019,
        21307,  2546,  2064,  2022,  2151,  3893,  2613,  2193,  1012, 11038,
        11423,  4839,  2043,  2593,  1997,  1996, 11709,  2003,  2019, 16109,
         2030,  1037,  2431,  1011, 16109,  1012,  2122, 15066,  2031,  1037,
         5041,  2846,  1997,  5097,  2000, 23208,  2030, 22480, 22835,  2060,
         3141, 20611,  1998,  3231,  6747,  3855,  3041,  1012,   102])"
2386,1,"['representations', 'functions']", Tail Areas Using IBF,seg_453,"the ibf has representations in terms of other special functions and orthogonal polynomials [183, 202–205]. for example, it could be expressed in terms of hypergeometric series in the following form:",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  1996, 21307,  2546,  2038, 15066,  1999,  3408,  1997,  2060,
         2569,  4972,  1998, 28721, 28175,  1031, 18677,  1010, 16798,  1516,
        16327,  1033,  1012,  2005,  2742,  1010,  2009,  2071,  2022,  5228,
         1999,  3408,  1997, 23760,  3351, 28993,  2186,  1999,  1996,  2206,
         2433,  1024,   102])"
2387,1,['hypergeometric'], Tail Areas Using IBF,seg_453,where 2f1 denotes the hypergeometric series.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 5725,  2752,  2478, 21307,  2546])","tensor([  101,  2073,  1016,  2546,  2487, 14796,  1996, 23760,  3351, 28993,
         2186,  1012,   102])"
2388,1,"['tables', 'pearson']", Tables,seg_455,"many tables for the ibf are available. see, for example, soper [206], pearson [207], aroian [203], majumder and bhattacharjee [208], and boston and battiste [209].",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([7251]),"tensor([  101,  2116,  7251,  2005,  1996, 21307,  2546,  2024,  2800,  1012,
         2156,  1010,  2005,  2742,  1010,  2061,  4842,  1031, 18744,  1033,
         1010, 12874,  1031, 19843,  1033,  1010, 12098, 25463,  2078,  1031,
        18540,  1033,  1010, 16686,  2819,  4063,  1998,  1038, 12707,  2696,
         7507,  2099, 16963,  1031, 18512,  1033,  1010,  1998,  3731,  1998,
         7151, 16774,  2063,  1031, 19348,  1033,  1012,   102])"
2389,1,"['beta distribution', 'gamma', 'random numbers', 'distributions', 'random', 'gamma distributions', 'distribution']", Tables,seg_455,"random variate generation from beta distribution is accomplished using the relationship between the beta and gamma distributions. hence, if two random numbers are generated from γ(1, a) and γ(1, b), where a b, then the beta variate is given by b(a, b) = γ(1, a)∕[γ(1, a) + γ(1, b)] [22].",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([7251]),"tensor([  101,  6721, 13075, 13143,  4245,  2013,  8247,  4353,  2003,  8885,
         2478,  1996,  3276,  2090,  1996,  8247,  1998, 13091, 20611,  1012,
         6516,  1010,  2065,  2048,  6721,  3616,  2024,  7013,  2013,  1157,
         1006,  1015,  1010,  1037,  1007,  1998,  1157,  1006,  1015,  1010,
         1038,  1007,  1010,  2073,  1037,  1038,  1010,  2059,  1996,  8247,
        13075, 13143,  2003,  2445,  2011,  1038,  1006,  1037,  1010,  1038,
         1007,  1027,  1157,  1006,  1015,  1010,  1037,  1007,   100,  1031,
         1157,  1006,  1015,  1010,  1037,  1007,  1009,  1157,  1006,  1015,
         1010,  1038,  1007,  1033,  1031,  2570,  1033,  1012,   102])"
2390,1,"['beta distribution', 'parameter', 'distribution']", GENERAL BETA DISTRIBUTION,seg_457,general three parameter beta distribution is given by,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([2236, 8247, 4353])","tensor([  101,  2236,  2093, 16381,  8247,  4353,  2003,  2445,  2011,   102])"
2391,1,"['beta distribution', 'transformation', 'distribution']", GENERAL BETA DISTRIBUTION,seg_457,the four-parameter beta distribution is obtained from the above-mentioned representation by the transformation y = (x − a)∕(b − a) to get the pdf,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 8247, 4353])","tensor([  101,  1996,  2176,  1011, 16381,  8247,  4353,  2003,  4663,  2013,
         1996,  2682,  1011,  3855,  6630,  2011,  1996,  8651,  1061,  1027,
         1006,  1060,  1597,  1037,  1007,   100,  1006,  1038,  1597,  1037,
         1007,  2000,  2131,  1996, 11135,   102])"
2392,1,"['location', 'mean', 'variance', 'pochhammer notation', 'skewness', 'coefficient', 'parameters', 'coefficient of skewness']", GENERAL BETA DISTRIBUTION,seg_457,"this has mean (ad + bc)∕(c + d) and variance  2 = cd(b − a)2∕[(c + d + 1)(c + d)2]. the location parameters are “a,”“b” and scale parameters are c and d. coefficient of skewness is 2cd(d − c)∕[(c + d)2(c + d)(3)[cd∕((c + d)(c + d)(2))]], where (c + d)(k) is raising pochhammer notation with (c + d)(3) = (c + d)(c + d + 1)(c + d + 2).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2236, 8247, 4353])","tensor([  101,  2023,  2038,  2812,  1006,  4748,  1009,  4647,  1007,   100,
         1006,  1039,  1009,  1040,  1007,  1998, 23284,  1016,  1027,  3729,
         1006,  1038,  1597,  1037,  1007,   100,  1031,  1006,  1039,  1009,
         1040,  1009,  1015,  1007,  1006,  1039,  1009,  1040,  1007,  1016,
         1033,  1012,  1996,  3295, 11709,  2024,  1523,  1037,  1010,  1524,
         1523,  1038,  1524,  1998,  4094, 11709,  2024,  1039,  1998,  1040,
         1012, 19064,  1997, 15315,  7974,  2791,  2003,  1016, 19797,  1006,
         1040,  1597,  1039,  1007,   100,  1031,  1006,  1039,  1009,  1040,
         1007,  1016,  1006,  1039,  1009,  1040,  1007,  1006,  1017,  1007,
         1031,   100,  1006,  1006,  1039,  1009,  1040,  1007,  1006,  1039,
         1009,  1040,  1007,  1006,  1016,  1007,  1007,  1033,  1033,  1010,
         2073,  1006,  1039,  1009,  1040,  1007,  1006,  1047,  1007,  2003,
         6274, 13433,  2818, 19742, 14869,  2007,  1006,  1039,  1009,  1040,
         1007,  1006,  1017,  1007,  1027,  1006,  1039,  1009,  1040,  1007,
         1006,  1039,  1009,  1040,  1009,  1015,  1007,  1006,  1039,  1009,
         1040,  1009,  1016,  1007,  1012,   102])"
2393,1,"['beta distribution', 'standard', 'distribution', 'symmetric', 'case']", ARCSINE DISTRIBUTION,seg_459,"this is a special case of the beta distribution when a = 1∕2, b = 1∕2. the standard arc-sine distribution (sasd) of first kind has support 0   x   1, is u-shaped and symmetric around x = 1∕2 (see figure 7.5). its pdf is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([29137,  3170,  4353])","tensor([  101,  2023,  2003,  1037,  2569,  2553,  1997,  1996,  8247,  4353,
         2043,  1037,  1027,   100,  1010,  1038,  1027,   100,  1012,  1996,
         3115,  8115,  1011,  8254,  2063,  4353,  1006, 21871,  2094,  1007,
         1997,  2034,  2785,  2038,  2490,  1014,  1060,  1015,  1010,  2003,
         1057,  1011,  5044,  1998, 19490,  2105,  1060,  1027,   100,  1006,
         2156,  3275,  1021,  1012,  1019,  1007,  1012,  2049, 11135,  2003,
         2445,  2011,   102])"
2394,1,['distribution'], ARCSINE DISTRIBUTION,seg_459,"this shows that the above is indeed a pdf. another form of the distribution called arc-sine distribution of second kind has support −1   x   1 with pdf given by (see exercise 7.74, p. 331)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([29137,  3170,  4353])","tensor([  101,  2023,  3065,  2008,  1996,  2682,  2003,  5262,  1037, 11135,
         1012,  2178,  2433,  1997,  1996,  4353,  2170,  8115,  1011,  8254,
         2063,  4353,  1997,  2117,  2785,  2038,  2490,  1597,  2487,  1060,
         1015,  2007, 11135,  2445,  2011,  1006,  2156,  6912,  1021,  1012,
         6356,  1010,  1052,  1012, 27533,  1007,   102])"
2395,1,['range'], ARCSINE DISTRIBUTION,seg_459,"to prove that this is a pdf, integrate over the range to get ∫−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([29137,  3170,  4353])","tensor([  101,  2000,  6011,  2008,  2023,  2003,  1037, 11135,  1010, 17409,
         2058,  1996,  2846,  2000,  2131,   100,   102])"
2396,1,"['moments', 'distribution']", ARCSINE DISTRIBUTION,seg_459,example 7.12 moments of arc-sine distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([29137,  3170,  4353])","tensor([ 101, 2742, 1021, 1012, 2260, 5312, 1997, 8115, 1011, 8254, 2063, 4353,
         102])"
2397,1,"['moment', 'distribution']", ARCSINE DISTRIBUTION,seg_459,find the kth moment of arc-sine distribution of second kind,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([29137,  3170,  4353])","tensor([ 101, 2424, 1996, 1047, 2705, 2617, 1997, 8115, 1011, 8254, 2063, 4353,
        1997, 2117, 2785,  102])"
2398,1,['moment'], ARCSINE DISTRIBUTION,seg_459,solution 7.12 the kth moment is ( ,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([29137,  3170,  4353])","tensor([ 101, 5576, 1021, 1012, 2260, 1996, 1047, 2705, 2617, 2003, 1006,  102])"
2399,1,['function'], ARCSINE DISTRIBUTION,seg_459,"2 2 sink d . as sin( ) is an odd function, the integral vanishes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([29137,  3170,  4353])","tensor([  101,  1016,  1016,  7752,  1040,  1012,  2004,  8254,  1006,  1007,
         2003,  2019,  5976,  3853,  1010,  1996,  9897, 25887,  2229,   102])"
2400,0,[], ARCSINE DISTRIBUTION,seg_459,"when k is odd. when k is even, the integral becomes ( ",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([29137,  3170,  4353])","tensor([ 101, 2043, 1047, 2003, 5976, 1012, 2043, 1047, 2003, 2130, 1010, 1996,
        9897, 4150, 1006,  102])"
2401,0,[], ARCSINE DISTRIBUTION,seg_459,"∫0  ∕2 sinp d  where p = 2k. using integration by parts, this reduces to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([29137,  3170,  4353])","tensor([  101,   100,   100,  8254,  2361,  1040,  2073,  1052,  1027,  1016,
         2243,  1012,  2478,  8346,  2011,  3033,  1010,  2023, 13416,  2000,
          102])"
2402,1,['distribution'], ARCSINE DISTRIBUTION,seg_459,the two-parameter arc-sine distribution (asd) is obtained by putting y = (x − a)∕b in the above as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([29137,  3170,  4353])","tensor([  101,  1996,  2048,  1011, 16381,  8115,  1011,  8254,  2063,  4353,
         1006,  2004,  2094,  1007,  2003,  4663,  2011,  5128,  1061,  1027,
         1006,  1060,  1597,  1037,  1007,   100,  1999,  1996,  2682,  2004,
          102])"
2403,1,"['mean', 'variance', 'skewness', 'kurtosis', 'median']", ARCSINE DISTRIBUTION,seg_459,"it has mean = median = (a + b)∕2, variance (b − a)2∕8, skewness = 0, and excess kurtosis −3∕2.",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([29137,  3170,  4353])","tensor([  101,  2009,  2038,  2812,  1027,  3991,  1027,  1006,  1037,  1009,
         1038,  1007,   100,  1010, 23284,  1006,  1038,  1597,  1037,  1007,
          100,  1010, 15315,  7974,  2791,  1027,  1014,  1010,  1998,  9987,
         9679, 12650,   100,  1012,   102])"
2404,1,"['case', 'distribution']", Properties of ArcSine Distribution,seg_461,1 the sasd-i is a special case of beta type-i distribution. put y = x − to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  1015,  1996, 21871,  2094,  1011,  1045,  2003,  1037,  2569,
         2553,  1997,  8247,  2828,  1011,  1045,  4353,  1012,  2404,  1061,
         1027,  1060,  1597,  2000,  2131,   102])"
2405,1,"['mean', 'variance', 'coefficient', 'skewness', 'kurtosis', 'distribution', 'bimodal', 'coefficient of skewness']", Properties of ArcSine Distribution,seg_461,"the mean is 0.5 and variance is 0.125 for the sasd. as the distribution is symmetric, coefficient of skewness is zero. the kurtosis coefficient is 2 = 3∕2. hence, it is always platykurtic. note that the density is maximum when x is near 0 or 1 with the center as a cusp (u-shaped). hence, there are two modes (bimodal) that are sym-",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  1996,  2812,  2003,  1014,  1012,  1019,  1998, 23284,  2003,
         1014,  1012,  8732,  2005,  1996, 21871,  2094,  1012,  2004,  1996,
         4353,  2003, 19490,  1010, 19064,  1997, 15315,  7974,  2791,  2003,
         5717,  1012,  1996,  9679, 12650, 19064,  2003,  1016,  1027,   100,
         1012,  6516,  1010,  2009,  2003,  2467, 20228,  4017, 15922, 19585,
         2594,  1012,  3602,  2008,  1996,  4304,  2003,  4555,  2043,  1060,
         2003,  2379,  1014,  2030,  1015,  2007,  1996,  2415,  2004,  1037,
        12731, 13102,  1006,  1057,  1011,  5044,  1007,  1012,  6516,  1010,
         2045,  2024,  2048, 11583,  1006, 12170,  5302,  9305,  1007,  2008,
         2024, 25353,  2213,  1011,   102])"
2406,1,['tails'], Properties of ArcSine Distribution,seg_461,metrically placed in the tails. this is the reason why it is platykurtic. the central,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101, 12046,  3973,  2872,  1999,  1996, 17448,  1012,  2023,  2003,
         1996,  3114,  2339,  2009,  2003, 20228,  4017, 15922, 19585,  2594,
         1012,  1996,  2430,   102])"
2407,1,['distribution'], Properties of ArcSine Distribution,seg_461,moments of arc-sine distribution of second kind is  2k = ( 2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([ 101, 5312, 1997, 8115, 1011, 8254, 2063, 4353, 1997, 2117, 2785, 2003,
        1016, 2243, 1027, 1006, 1016,  102])"
2408,1,"['parameter', 'modified bessel function', 'function', 'table', 'bessel function']", Properties of ArcSine Distribution,seg_461,"is mx(t) = et∕2i0(t∕2), where i0(x) is the modified bessel function of first kind. the two parameter asd satisfies an interesting property:–if x ∼ asd(a, b) then cx + d ∼ asd(c ∗ a + d, c ∗ b + d). see references 121 and 134 for other relationships and applications. see table 7.8 for further properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  2003, 25630,  1006,  1056,  1007,  1027,   100,  1006,   100,
         1007,  1010,  2073,  1045,  2692,  1006,  1060,  1007,  2003,  1996,
         6310,  2022, 21218,  3853,  1997,  2034,  2785,  1012,  1996,  2048,
        16381,  2004,  2094,  2938,  2483, 14213,  2019,  5875,  3200,  1024,
         1516,  2065,  1060,   100,  2004,  2094,  1006,  1037,  1010,  1038,
         1007,  2059,  1039,  2595,  1009,  1040,   100,  2004,  2094,  1006,
         1039,  1598,  1037,  1009,  1040,  1010,  1039,  1598,  1038,  1009,
         1040,  1007,  1012,  2156,  7604, 12606,  1998, 15170,  2005,  2060,
         6550,  1998,  5097,  1012,  2156,  2795,  1021,  1012,  1022,  2005,
         2582,  5144,  1012,   102])"
2409,1,"['mean', 'distributions']", Properties of ArcSine Distribution,seg_461,example 7.13 mean of arc-sine distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  2742,  1021,  1012,  2410,  2812,  1997,  8115,  1011,  8254,
         2063, 20611,   102])"
2410,1,"['mean', 'distribution']", Properties of ArcSine Distribution,seg_461,find the mean of arc-sine distribution of first kind.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([ 101, 2424, 1996, 2812, 1997, 8115, 1011, 8254, 2063, 4353, 1997, 2034,
        2785, 1012,  102])"
2411,1,"['beta distribution', 'distribution']", Properties of ArcSine Distribution,seg_461,"this distribution is related to the beta distribution when a = 1∕2, b = 1∕2.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([ 101, 2023, 4353, 2003, 3141, 2000, 1996, 8247, 4353, 2043, 1037, 1027,
         100, 1010, 1038, 1027,  100, 1012,  102])"
2412,1,"['mean', 'deviation', 'distribution']", Properties of ArcSine Distribution,seg_461,example 7.14 mean deviation of arc-sine distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  2742,  1021,  1012,  2403,  2812, 24353,  1997,  8115,  1011,
         8254,  2063,  4353,   102])"
2413,1,"['mean', 'deviation', 'distribution']", Properties of ArcSine Distribution,seg_461,find the mean deviation of the arc-sine distribution using theorem 7.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996,  8115,  1011,  8254,
         2063,  4353,  2478,  9872,  1021,  1012,  1015,  1012,   102])"
2414,1,['mean'], Properties of ArcSine Distribution,seg_461,"2 solution 7.14 we have seen earlier that the cdf is sin−1(√x). as the mean is   0.5, we get the md using theorem 7.1 as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  1016,  5576,  1021,  1012,  2403,  2057,  2031,  2464,  3041,
         2008,  1996,  3729,  2546,  2003,  8254, 27944,  1006,  1600,  2595,
         1007,  1012,  2004,  1996,  2812,  2003,  1014,  1012,  1019,  1010,
         2057,  2131,  1996,  9108,  2478,  9872,  1021,  1012,  1015,  2004,
          102])"
2415,1,['limit'], Properties of ArcSine Distribution,seg_461,put √x = t so that dx = 2tdt. adjust the upper limit of integration as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([ 5144,  1997, 29137,  3170,  4353])","tensor([  101,  2404,  1600,  2595,  1027,  1056,  2061,  2008,  1040,  2595,
         1027,  1016,  2102, 11927,  1012, 14171,  1996,  3356,  5787,  1997,
         8346,  2004,   102])"
2416,1,"['parameter', 'gamma', 'exponential distribution', 'gamma distribution', 'distribution', 'exponential']", GAMMA DISTRIBUTION,seg_463,the two parameter gamma distribution can be considered as a generalization of the exponential distribution. its pdf is given by,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([13091,  4353])","tensor([  101,  1996,  2048, 16381, 13091,  4353,  2064,  2022,  2641,  2004,
         1037,  2236,  3989,  1997,  1996, 27258,  4353,  1012,  2049, 11135,
         2003,  2445,  2011,   102])"
2417,1,"['exponential', 'exponential distribution', 'distribution']", GAMMA DISTRIBUTION,seg_463,"when m = 1, this reduces to the exponential distribution. hence, it is considered a generalization of the exponential distribution. for m = 1∕2, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13091,  4353])","tensor([  101,  2043,  1049,  1027,  1015,  1010,  2023, 13416,  2000,  1996,
        27258,  4353,  1012,  6516,  1010,  2009,  2003,  2641,  1037,  2236,
         3989,  1997,  1996, 27258,  4353,  1012,  2005,  1049,  1027,   100,
         1010,  2057,  2131,   102])"
2418,1,"['parameter', 'shape parameter']", GAMMA DISTRIBUTION,seg_463,"− x fx( ,m) =√ ∕ x e . the parameter   is called scale parameter and m is the shape parameter (see figure 7.8). a reparametrization as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([13091,  4353])","tensor([  101,  1597,  1060, 23292,  1006,  1010,  1049,  1007,  1027,  1600,
          100,  1060,  1041,  1012,  1996, 16381,  2003,  2170,  4094, 16381,
         1998,  1049,  2003,  1996,  4338, 16381,  1006,  2156,  3275,  1021,
         1012,  1022,  1007,  1012,  1037, 16360,  5400, 11368, 26910,  2004,
          102])"
2419,1,"['change of scale', 'transformation']", GAMMA DISTRIBUTION,seg_463,"also exist. a change of scale transformation y =  x (so that dy =  dx) in equation (7.55) gives fy(m) = ym−1e−y∕γ(m) given below. as this form is easier to work with, it is extensively tabulated.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([13091,  4353])","tensor([  101,  2036,  4839,  1012,  1037,  2689,  1997,  4094,  8651,  1061,
         1027,  1060,  1006,  2061,  2008,  1040,  2100,  1027,  1040,  2595,
         1007,  1999,  8522,  1006,  1021,  1012,  4583,  1007,  3957,  1042,
         2100,  1006,  1049,  1007,  1027,   100,  1006,  1049,  1007,  2445,
         2917,  1012,  2004,  2023,  2433,  2003,  6082,  2000,  2147,  2007,
         1010,  2009,  2003,  8077, 21628,  8898,  1012,   102])"
2420,1,"['gamma', 'gamma distribution', 'distribution', 'parameters']", Properties of Gamma Distribution,seg_465,"there are two parameters, both of which are real numbers. for   = 1, we get the one-parameter gamma distribution with pdf",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 5144,  1997, 13091,  4353])","tensor([  101,  2045,  2024,  2048, 11709,  1010,  2119,  1997,  2029,  2024,
         2613,  3616,  1012,  2005,  1027,  1015,  1010,  2057,  2131,  1996,
         2028,  1011, 16381, 13091,  4353,  2007, 11135,   102])"
2421,1,"['leptokurtic', 'coefficient', 'skewness', 'erlang distribution', 'distribution', 'kurtosis', 'coefficient of skewness', 'independent']", Properties of Gamma Distribution,seg_465,"for m an integer, this is called erlang distribution. the coefficient of skewness and kurtosis are 1∕√m and 3(1 + 2∕m), which are both independent of . this distribution is always leptokurtic.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997, 13091,  4353])","tensor([  101,  2005,  1049,  2019, 16109,  1010,  2023,  2003,  2170,  9413,
        25023,  4353,  1012,  1996, 19064,  1997, 15315,  7974,  2791,  1998,
         9679, 12650,  2024,   100,  1998,  1017,  1006,  1015,  1009,   100,
         1007,  1010,  2029,  2024,  2119,  2981,  1997,  1012,  2023,  4353,
         2003,  2467,  3393, 13876, 21940, 28228,  2278,  1012,   102])"
2422,1,"['parameter', 'variates', 'table', 'gamma', 'parameters', 'random', 'shape parameters', 'random variables', 'independent', 'distribution', 'exponential', 'gamma random variables', 'variables', 'additivity property', 'shape parameter']", Properties of Gamma Distribution,seg_465,"7.9.1.1 additivity property this distribution can be obtained as the sum of m independent exponential variates with parameter , resulting in gamma(m, ). if x and y are two independent gamma random variables with the same scale parameter and shape parameters m1 and m2, respectively, their sum x + y is distributed as gamma with the same scale parameter and m1 + m2 as shape parameter. this result can be generalized to any number of independent gamma variates as “the sum of m independent gamma variates with shape parameters mi and the same scale parameter is distributed as gamma(∑imi, ), see table 7.4 in page 269.”",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13091,  4353])","tensor([  101,  1021,  1012,  1023,  1012,  1015,  1012,  1015,  5587, 25090,
        24872,  3200,  2023,  4353,  2064,  2022,  4663,  2004,  1996,  7680,
         1997,  1049,  2981, 27258, 13075, 13143,  2015,  2007, 16381,  1010,
         4525,  1999, 13091,  1006,  1049,  1010,  1007,  1012,  2065,  1060,
         1998,  1061,  2024,  2048,  2981, 13091,  6721, 10857,  2007,  1996,
         2168,  4094, 16381,  1998,  4338, 11709, 23290,  1998, 25525,  1010,
         4414,  1010,  2037,  7680,  1060,  1009,  1061,  2003,  5500,  2004,
        13091,  2007,  1996,  2168,  4094, 16381,  1998, 23290,  1009, 25525,
         2004,  4338, 16381,  1012,  2023,  2765,  2064,  2022, 18960,  2000,
         2151,  2193,  1997,  2981, 13091, 13075, 13143,  2015,  2004,  1523,
         1996,  7680,  1997,  1049,  2981, 13091, 13075, 13143,  2015,  2007,
         4338, 11709,  2771,  1998,  1996,  2168,  4094, 16381,  2003,  5500,
         2004, 13091,  1006,   100,  1010,  1007,  1010,  2156,  2795,  1021,
         1012,  1018,  1999,  3931, 25717,  1012,  1524,   102])"
2423,1,"['gamma', 'functions', 'moments']", Properties of Gamma Distribution,seg_465,7.9.1.2 moments and generating functions the raw moments are easy to find using gamma integral. consider,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13091,  4353])","tensor([  101,  1021,  1012,  1023,  1012,  1015,  1012,  1016,  5312,  1998,
        11717,  4972,  1996,  6315,  5312,  2024,  3733,  2000,  2424,  2478,
        13091,  9897,  1012,  5136,   102])"
2424,1,"['mean', 'function', 'variance', 'gamma', 'characteristic function']", Properties of Gamma Distribution,seg_465,"using gamma integral, this becomes γ(k + m)∕ k+m. from this, we get the mean as   = m∕  and variance  2 = m∕ 2 =  ∕ . this shows that the variance is more than the mean for     1 and vice versa. the characteristic function is",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])","tensor([ 5144,  1997, 13091,  4353])","tensor([  101,  2478, 13091,  9897,  1010,  2023,  4150,  1157,  1006,  1047,
         1009,  1049,  1007,   100,  1047,  1009,  1049,  1012,  2013,  2023,
         1010,  2057,  2131,  1996,  2812,  2004,  1027,   100,  1998, 23284,
         1016,  1027,   100,  1016,  1027,   100,  1012,  2023,  3065,  2008,
         1996, 23284,  2003,  2062,  2084,  1996,  2812,  2005,  1015,  1998,
         3580, 18601,  1012,  1996,  8281,  3853,  2003,   102])"
2425,1,['range'], Properties of Gamma Distribution,seg_465,"put y = (  − it)x, so that dy = (  − it)dx. the range of integration remains the same and we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 13091,  4353])","tensor([ 101, 2404, 1061, 1027, 1006, 1597, 2009, 1007, 1060, 1010, 2061, 2008,
        1040, 2100, 1027, 1006, 1597, 2009, 1007, 1040, 2595, 1012, 1996, 2846,
        1997, 8346, 3464, 1996, 2168, 1998, 2057, 2131,  102])"
2426,0,[], Properties of Gamma Distribution,seg_465,"for t    . by expanding this as an infinite series (see chapter 6), we get (1 − it∕ )−m =",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 5144,  1997, 13091,  4353])","tensor([  101,  2005,  1056,  1012,  2011,  9186,  2023,  2004,  2019, 10709,
         2186,  1006,  2156,  3127,  1020,  1007,  1010,  2057,  2131,  1006,
         1015,  1597,   100,  1007,  1597,  2213,  1027,   102])"
2427,1,"['gamma', 'standard normal', 'random', 'normal', 'gamma distribution', 'standard', 'independent', 'distribution', 'case']", Relationships with Other Distributions,seg_467,"the 2 distribution is a special case of gamma distribution as n2 =gamma(n∕2,1∕2). symbolically, if x1,x2, · · · ,xn are independent standard normal random variables, y = x1",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101,  1996,  1016,  4353,  2003,  1037,  2569,  2553,  1997, 13091,
         4353,  2004,  1050,  2475,  1027, 13091,  1006,   100,  1010,   100,
         1007,  1012, 12613,  3973,  1010,  2065,  1060,  2487,  1010,  1060,
         2475,  1010,  1087,  1087,  1087,  1010,  1060,  2078,  2024,  2981,
         3115,  3671,  6721, 10857,  1010,  1061,  1027,  1060,  2487,   102])"
2428,1,"['gamma', 'gamma distribution', 'distribution', 'change of variable', 'variable', 'independent']", Relationships with Other Distributions,seg_467,"2 + · · · + xn2 ∼ gamma(n∕2, 1∕2). if x1 ∼ gamma(a, b) and x2 ∼ gamma(c, d), are independent, then x1∕(x1 + x2) is distributed as beta-i. inverse gamma distribution is obtained by a simple change of variable y = 1∕x as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101,  1016,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  2475,
          100, 13091,  1006,   100,  1010,   100,  1007,  1012,  2065,  1060,
         2487,   100, 13091,  1006,  1037,  1010,  1038,  1007,  1998,  1060,
         2475,   100, 13091,  1006,  1039,  1010,  1040,  1007,  1010,  2024,
         2981,  1010,  2059,   100,  1006,  1060,  2487,  1009,  1060,  2475,
         1007,  2003,  5500,  2004,  8247,  1011,  1045,  1012, 19262, 13091,
         4353,  2003,  4663,  2011,  1037,  3722,  2689,  1997,  8023,  1061,
         1027,   100,  2004,   102])"
2429,1,"['gamma', 'case', 'distribution']", Relationships with Other Distributions,seg_467,log-gamma distribution is the analog of lnd in the gamma case. the pdf is given by,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101,  8833,  1011, 13091,  4353,  2003,  1996, 11698,  1997,  1048,
         4859,  1999,  1996, 13091,  2553,  1012,  1996, 11135,  2003,  2445,
         2011,   102])"
2430,1,"['probability', 'gamma', 'gamma distributed', 'distribution']", Relationships with Other Distributions,seg_467,"boltzmann distribution in engineering is related to the gamma law. if the quantized energies of a molecule in an ensemble are e1,e2, · · · ,en, the probability that a molecule has energy ei is given by c exp(−ei∕(kt), where k is the boltzmann constant (gas constant divided by avogadro number) and t is the absolute temperature. the sum of the energies is gamma distributed when ei",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101, 10053, 24340,  2078,  4353,  1999,  3330,  2003,  3141,  2000,
         1996, 13091,  2375,  1012,  2065,  1996, 24110, 23355, 19320,  1997,
         1037, 13922,  1999,  2019,  7241,  2024,  1041,  2487,  1010,  1041,
         2475,  1010,  1087,  1087,  1087,  1010,  4372,  1010,  1996,  9723,
         2008,  1037, 13922,  2038,  2943,  1041,  2072,  2003,  2445,  2011,
         1039,  4654,  2361,  1006,   100,  1006,  1047,  2102,  1007,  1010,
         2073,  1047,  2003,  1996, 10053, 24340,  2078,  5377,  1006,  3806,
         5377,  4055,  2011, 20704, 18170, 22196,  2193,  1007,  1998,  1056,
         2003,  1996,  7619,  4860,  1012,  1996,  7680,  1997,  1996, 19320,
         2003, 13091,  5500,  2043,  1041,  2072,   102])"
2431,1,"['table', 'independent']", Relationships with Other Distributions,seg_467,′s are independent. see table 7.9,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([ 101, 1531, 1055, 2024, 2981, 1012, 2156, 2795, 1021, 1012, 1023,  102])"
2432,1,"['gamma', 'distributions', 'gamma distributions', 'median']", Relationships with Other Distributions,seg_467,for further properties. estimating the median of gamma distributions is discussed in reference 211.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101,  2005,  2582,  5144,  1012,  9765, 22835,  1996,  3991,  1997,
        13091, 20611,  2003,  6936,  1999,  4431, 19235,  1012,   102])"
2433,1,"['function', 'gamma', 'gamma function', 'gamma distribution', 'distribution']", Incomplete Gamma Function IGF,seg_469,definition 7.3 the left-tail area of gamma distribution is called the incomplete gamma function. it is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([12958, 13091,  3853,  1045, 25708])","tensor([  101,  6210,  1021,  1012,  1017,  1996,  2187,  1011,  5725,  2181,
         1997, 13091,  4353,  2003,  2170,  1996, 12958, 13091,  3853,  1012,
         2009,  2003,  2445,  2011,   102])"
2434,1,"['function', 'change of scale', 'gamma', 'gamma distribution', 'distribution', 'parameters', 'transformation']", Incomplete Gamma Function IGF,seg_469,"as there are two parameters, a simple change of scale transformation mentioned earlier can be made. this gives one-parameter gamma distribution. the function γ(m) = ∫0",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([12958, 13091,  3853,  1045, 25708])","tensor([  101,  2004,  2045,  2024,  2048, 11709,  1010,  1037,  3722,  2689,
         1997,  4094,  8651,  3855,  3041,  2064,  2022,  2081,  1012,  2023,
         3957,  2028,  1011, 16381, 13091,  4353,  1012,  1996,  3853,  1157,
         1006,  1049,  1007,  1027,   100,   102])"
2435,1,"['recurrence', 'function', 'gamma', 'gamma function', 'complete gamma function']", Incomplete Gamma Function IGF,seg_469,"∞ xm−1e−xdx is called the complete gamma function. when m is an integer, the above-mentioned integral becomes γ(m) = (m − 1)! when m is not an integer, we get the recurrence γ(m) = (m − 1) ∗ γ(m − 1) using integration by parts. the integral with and without the normalizing constant is denoted as  (x;m) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12958, 13091,  3853,  1045, 25708])","tensor([  101,  1601,  1060,  2213, 27944,  2063, 22543,  2595,  2094,  2595,
         2003,  2170,  1996,  3143, 13091,  3853,  1012,  2043,  1049,  2003,
         2019, 16109,  1010,  1996,  2682,  1011,  3855,  9897,  4150,  1157,
         1006,  1049,  1007,  1027,  1006,  1049,  1597,  1015,  1007,   999,
         2043,  1049,  2003,  2025,  2019, 16109,  1010,  2057,  2131,  1996,
        28667,  3126, 24413,  1157,  1006,  1049,  1007,  1027,  1006,  1049,
         1597,  1015,  1007,  1598,  1157,  1006,  1049,  1597,  1015,  1007,
         2478,  8346,  2011,  3033,  1012,  1996,  9897,  2007,  1998,  2302,
         1996,  3671,  6026,  5377,  2003, 19537,  2004,  1006,  1060,  1025,
         1049,  1007,  1027,   102])"
2436,1,['recurrence'], Incomplete Gamma Function IGF,seg_469,these satisfy the recurrence,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0.])","tensor([12958, 13091,  3853,  1045, 25708])","tensor([  101,  2122, 13225,  1996, 28667,  3126, 24413,   102])"
2437,1,"['parameter', 'gamma', 'probabilities', 'poisson', 'shape parameter']", Incomplete Gamma Function IGF,seg_469,"the cdf of gamma is a sum of poisson probabilities when the shape parameter is p−1 an integer: –fx(m, p) = 1 −∑k=0 e− x( x)k∕k!. the corresponding right-tail area is",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12958, 13091,  3853,  1045, 25708])","tensor([  101,  1996,  3729,  2546,  1997, 13091,  2003,  1037,  7680,  1997,
        13433, 24077,  4013,  3676, 14680,  2043,  1996,  4338, 16381,  2003,
         1052, 27944,  2019, 16109,  1024,  1516, 23292,  1006,  1049,  1010,
         1052,  1007,  1027,  1015,   100,  1027,  1014,  1041, 22543,  1060,
         1006,  1060,  1007,   100,   999,  1012,  1996,  7978,  2157,  1011,
         5725,  2181,  2003,   102])"
2438,1,"['function', 'pearson']", Incomplete Gamma Function IGF,seg_469,"for example, pearson [207] tabulated the function i(x, p) = γ(p",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([12958, 13091,  3853,  1045, 25708])","tensor([  101,  2005,  2742,  1010, 12874,  1031, 19843,  1033, 21628,  8898,
         1996,  3853,  1045,  1006,  1060,  1010,  1052,  1007,  1027,  1157,
         1006,  1052,   102])"
2439,1,"['hypergeometric functions', 'function', 'functions', 'hypergeometric', 'error']", Incomplete Gamma Function IGF,seg_469,"it has a representation in terms of confluent hypergeometric functions as  (x; 1, p) = (xp∕p)e−x 1f1(1, p + 1; x) = (xp∕p) 1f1(p, p + 1; −x) and error function as  (x2; 1, 1∕2) = erf(x). see references 121, 213–216 for other properties and relationships.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([12958, 13091,  3853,  1045, 25708])","tensor([  101,  2009,  2038,  1037,  6630,  1999,  3408,  1997,  9530, 10258,
        24997,  2102, 23760,  3351, 28993,  4972,  2004,  1006,  1060,  1025,
         1015,  1010,  1052,  1007,  1027,  1006,   100,  1007,  1041, 22543,
         2595,  1015,  2546,  2487,  1006,  1015,  1010,  1052,  1009,  1015,
         1025,  1060,  1007,  1027,  1006,   100,  1007,  1015,  2546,  2487,
         1006,  1052,  1010,  1052,  1009,  1015,  1025,  1597,  2595,  1007,
         1998,  7561,  3853,  2004,  1006,  1060,  2475,  1025,  1015,  1010,
          100,  1007,  1027,  9413,  2546,  1006,  1060,  1007,  1012,  2156,
         7604, 12606,  1010, 19883,  1516, 20294,  2005,  2060,  5144,  1998,
         6550,  1012,   102])"
2440,0,[], COSINE DISTRIBUTION,seg_471,the pdf is given by,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 2522, 11493,  2063,  4353])","tensor([  101,  1996, 11135,  2003,  2445,  2011,   102])"
2441,1,"['location', 'mean', 'parameter', 'variance', 'symmetric', 'transform', 'table', 'location parameter', 'skewness', 'random sample', 'sample', 'random', 'distribution', 'median']", COSINE DISTRIBUTION,seg_471,"as this distribution is symmetric, the mean, median, and mode coincide at x = a, which is the location parameter; and skewness is zero (table 7.10). the variance depends only on b and is given by 2 = b2[ 2 − 8]. random sample generation: generate u(−1, 1), then transform x = a + 2b sin−1(2u − 1) if u = [0, 1].",tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 11493,  2063,  4353])","tensor([  101,  2004,  2023,  4353,  2003, 19490,  1010,  1996,  2812,  1010,
         3991,  1010,  1998,  5549, 19680,  2012,  1060,  1027,  1037,  1010,
         2029,  2003,  1996,  3295, 16381,  1025,  1998, 15315,  7974,  2791,
         2003,  5717,  1006,  2795,  1021,  1012,  2184,  1007,  1012,  1996,
        23284,  9041,  2069,  2006,  1038,  1998,  2003,  2445,  2011,  1016,
         1027,  1038,  2475,  1031,  1016,  1597,  1022,  1033,  1012,  6721,
         7099,  4245,  1024,  9699,  1057,  1006,  1597,  2487,  1010,  1015,
         1007,  1010,  2059, 10938,  1060,  1027,  1037,  1009,  1016,  2497,
         8254, 27944,  1006,  1016,  2226,  1597,  1015,  1007,  2065,  1057,
         1027,  1031,  1014,  1010,  1015,  1033,  1012,   102])"
2442,1,"['location', 'mean', 'gaussian distribution', 'normal distribution', 'information', 'normal', 'statistics', 'distribution', 'parameters']", THE NORMAL DISTRIBUTION,seg_473,"the normal distribution is perhaps the most widely studied distribution in statistics. it is known by the name gaussian distribution in engineering in honor of the german mathematician carl friedrich gauss (1777–1855). it has two parameters, which are by convention denoted as   and   to indicate that they capture the location (mean) and scale information. the pdf is",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  1996,  3671,  4353,  2003,  3383,  1996,  2087,  4235,  3273,
         4353,  1999,  6747,  1012,  2009,  2003,  2124,  2011,  1996,  2171,
        11721, 17854,  2937,  4353,  1999,  3330,  1999,  3932,  1997,  1996,
         2446, 13235,  5529,  8896, 11721, 17854,  1006, 16144,  1516,  8492,
         1007,  1012,  2009,  2038,  2048, 11709,  1010,  2029,  2024,  2011,
         4680, 19537,  2004,  1998,  2000,  5769,  2008,  2027,  5425,  1996,
         3295,  1006,  2812,  1007,  1998,  4094,  2592,  1012,  1996, 11135,
         2003,   102])"
2443,1,"['mean', 'parameter', 'deviation', 'normal distribution', 'variance', 'standard normal distribution', 'standard normal', 'population', 'normal', 'standard deviation', 'standard', 'distribution', 'population mean', 'population variance', 'population standard deviation']", THE NORMAL DISTRIBUTION,seg_473,"it is denoted by n( ,  2), where the first parameter is always the population mean and second parameter is the population variance. some authors use the notation n( ,  ), where the second parameter is the population standard deviation and z(0, 1) for a standard normal distribution. even if the mean is zero, the first parameter should be specified. thus, n(0,  2) denotes a normal distribution with zero mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0.])","tensor([1996, 3671, 4353])","tensor([  101,  2009,  2003, 19537,  2011,  1050,  1006,  1010,  1016,  1007,
         1010,  2073,  1996,  2034, 16381,  2003,  2467,  1996,  2313,  2812,
         1998,  2117, 16381,  2003,  1996,  2313, 23284,  1012,  2070,  6048,
         2224,  1996, 14869,  1050,  1006,  1010,  1007,  1010,  2073,  1996,
         2117, 16381,  2003,  1996,  2313,  3115, 24353,  1998,  1062,  1006,
         1014,  1010,  1015,  1007,  2005,  1037,  3115,  3671,  4353,  1012,
         2130,  2065,  1996,  2812,  2003,  5717,  1010,  1996,  2034, 16381,
         2323,  2022,  9675,  1012,  2947,  1010,  1050,  1006,  1014,  1010,
         1016,  1007, 14796,  1037,  3671,  4353,  2007,  5717,  2812,  1012,
          102])"
2444,1,"['tail', 'normal distribution', 'standard normal distribution', 'table', 'standard normal', 'approximation', 'tail areas', 'sample', 'normal', 'sample size', 'standard', 'limit', 'distribution', 'central limit theorem', 'transformation']", THE NORMAL DISTRIBUTION,seg_473,"any normal distribution (with arbitrary and ) can be converted into the standard normal form n(0, 1) using the transformation z = (x − )∕ . this is called “standard normalization”. it is applicable for approximation due to central limit theorem, even in nonnormal situations when the sample size is quite large. the reverse transformation is x = z + . this shows that from the table of standard normal distribution, we could obtain the tail areas of any other normal distribution.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  2151,  3671,  4353,  1006,  2007, 15275,  1998,  1007,  2064,
         2022,  4991,  2046,  1996,  3115,  3671,  2433,  1050,  1006,  1014,
         1010,  1015,  1007,  2478,  1996,  8651,  1062,  1027,  1006,  1060,
         1597,  1007,   100,  1012,  2023,  2003,  2170,  1523,  3115,  3671,
         3989,  1524,  1012,  2009,  2003, 12711,  2005, 20167,  2349,  2000,
         2430,  5787,  9872,  1010,  2130,  1999,  2512, 12131,  9067,  8146,
         2043,  1996,  7099,  2946,  2003,  3243,  2312,  1012,  1996,  7901,
         8651,  2003,  1060,  1027,  1062,  1009,  1012,  2023,  3065,  2008,
         2013,  1996,  2795,  1997,  3115,  3671,  4353,  1010,  2057,  2071,
         6855,  1996,  5725,  2752,  1997,  2151,  2060,  3671,  4353,  1012,
          102])"
2445,1,"['probability', 'normal']", THE NORMAL DISTRIBUTION,seg_473,example 7.15 probability of normal deviates,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  2742,  1021,  1012,  2321,  9723,  1997,  3671, 14386,  8520,
          102])"
2446,1,"['mean', 'normally distributed', 'variance', 'standard', 'deviations', 'standard deviations']", THE NORMAL DISTRIBUTION,seg_473,the radius of a batch of pipes is known to be normally distributed with mean 0.5 inch and variance 0.009. what proportions of a batch of 132 pipes have radius more than 2 standard deviations in the higher side?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  1996, 12177,  1997,  1037, 14108,  1997, 12432,  2003,  2124,
         2000,  2022,  5373,  5500,  2007,  2812,  1014,  1012,  1019,  4960,
         1998, 23284,  1014,  1012,  4002,  2683,  1012,  2054, 19173,  1997,
         1037, 14108,  1997, 14078, 12432,  2031, 12177,  2062,  2084,  1016,
         3115, 24353,  2015,  1999,  1996,  3020,  2217,  1029,   102])"
2447,1,"['deviation', 'standard deviation', 'deviations', 'standard', 'standard deviations']", THE NORMAL DISTRIBUTION,seg_473,"solution 7.15 as radius ∼ n(0.5, 0.009), standard deviation is 0.0948683. standard normalize it to get z = (x − 0.5)∕0.0948683. area above 2 standard deviations for n(0, 1) is 1 − 0.9772 = 0.0228. thus, in a batch of 132 pipes, we expect 132*0.0228 = ⌊3.0096⌋ = 3 pipes to have radius more than two standard deviations.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([1996, 3671, 4353])","tensor([  101,  5576,  1021,  1012,  2321,  2004, 12177,   100,  1050,  1006,
         1014,  1012,  1019,  1010,  1014,  1012,  4002,  2683,  1007,  1010,
         3115, 24353,  2003,  1014,  1012,  5641, 18139,  2575,  2620,  2509,
         1012,  3115,  3671,  4697,  2009,  2000,  2131,  1062,  1027,  1006,
         1060,  1597,  1014,  1012,  1019,  1007,   100,  1012,  5641, 18139,
         2575,  2620,  2509,  1012,  2181,  2682,  1016,  3115, 24353,  2015,
         2005,  1050,  1006,  1014,  1010,  1015,  1007,  2003,  1015,  1597,
         1014,  1012,  5989,  2581,  2475,  1027,  1014,  1012,  6185, 22407,
         1012,  2947,  1010,  1999,  1037, 14108,  1997, 14078, 12432,  1010,
         2057,  5987, 14078,  1008,  1014,  1012,  6185, 22407,  1027,   100,
         1017,  1012,  4002,  2683,  2575,   100,  1027,  1017, 12432,  2000,
         2031, 12177,  2062,  2084,  2048,  3115, 24353,  2015,  1012,   102])"
2448,1,"['mean', 'parameter', 'normal distribution', 'variance', 'tails', 'cauchy', 'symmetry', 'distributions', 'normal', 'standard', 'distribution', 'parameters', 'symmetric']", Properties of Normal Distribution,seg_475,"the general normal distribution has two parameters, the second of which is positive (the first parameter by convention is the mean ). the distribution is symmetric about the mean with relatively shorter tails than cauchy and t distributions (see figures 7.6 and 7.7). when the mean = 0 and the variance 2 = 1, it is called the standard normal distribution, which is denoted by z(0, 1) or simply by z. the corresponding pdf and cdf are denoted by (x) and φ(x). owing to symmetry φ(−c) = 1 − φ(c) for",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  1996,  2236,  3671,  4353,  2038,  2048, 11709,  1010,  1996,
         2117,  1997,  2029,  2003,  3893,  1006,  1996,  2034, 16381,  2011,
         4680,  2003,  1996,  2812,  1007,  1012,  1996,  4353,  2003, 19490,
         2055,  1996,  2812,  2007,  4659,  7820, 17448,  2084,  6187, 10875,
         2100,  1998,  1056, 20611,  1006,  2156,  4481,  1021,  1012,  1020,
         1998,  1021,  1012,  1021,  1007,  1012,  2043,  1996,  2812,  1027,
         1014,  1998,  1996, 23284,  1016,  1027,  1015,  1010,  2009,  2003,
         2170,  1996,  3115,  3671,  4353,  1010,  2029,  2003, 19537,  2011,
         1062,  1006,  1014,  1010,  1015,  1007,  2030,  3432,  2011,  1062,
         1012,  1996,  7978, 11135,  1998,  3729,  2546,  2024, 19537,  2011,
         1006,  1060,  1007,  1998,  1176,  1006,  1060,  1007,  1012, 11427,
         2000, 14991,  1176,  1006,  1597,  2278,  1007,  1027,  1015,  1597,
         1176,  1006,  1039,  1007,  2005,   102])"
2449,1,"['mean', 'median']", Properties of Normal Distribution,seg_475,"c   0 and φ(0) = 1∕2, so that median = mean = mode with modal value 1/[ √",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  1039,  1014,  1998,  1176,  1006,  1014,  1007,  1027,   100,
         1010,  2061,  2008,  3991,  1027,  2812,  1027,  5549,  2007, 16913,
         2389,  3643,  1015,  1013,  1031,  1600,   102])"
2450,1,"['functions', 'even moments', 'moments', 'distribution', 'symmetric']", Properties of Normal Distribution,seg_475,"7.11.1.1 moments and generating functions as the distribution is symmetric, all odd central moments are zeros. the even moments are given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  1021,  1012,  2340,  1012,  1015,  1012,  1015,  5312,  1998,
        11717,  4972,  2004,  1996,  4353,  2003, 19490,  1010,  2035,  5976,
         2430,  5312,  2024,  5717,  2015,  1012,  1996,  2130,  5312,  2024,
         2445,  2011,   102])"
2451,1,"['gamma', 'mean', 'deviation']", Properties of Normal Distribution,seg_475,this can easily be proved using gamma integrals (see exercise 7.34 in p. 285). the mean deviation is  √2∕ . the mgf is easily obtained as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  2023,  2064,  4089,  2022,  4928,  2478, 13091,  9897,  2015,
         1006,  2156,  6912,  1021,  1012,  4090,  1999,  1052,  1012, 21777,
         1007,  1012,  1996,  2812, 24353,  2003,   100,  1012,  1996, 11460,
         2546,  2003,  4089,  4663,  2004,   102])"
2452,0,[], Properties of Normal Distribution,seg_475,write the exponent as − 2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  4339,  1996, 16258, 21576,  2004,  1597,  1016,   102])"
2453,0,[], Properties of Normal Distribution,seg_475,"as the integral evaluates to one, we get the desired result mx(t) = et + 2",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  2004,  1996,  9897, 16157,  2015,  2000,  2028,  1010,  2057,
         2131,  1996,  9059,  2765, 25630,  1006,  1056,  1007,  1027,  3802,
         1009,  1016,   102])"
2454,0,[], Properties of Normal Distribution,seg_475,table 7.11 for further properties.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 3671, 4353])","tensor([ 101, 2795, 1021, 1012, 2340, 2005, 2582, 5144, 1012,  102])"
2455,1,"['estimation', 'prediction', 'tests', 'population', 'confidence', 'mean', 'normal distribution', 'observations', 'normal', 'statistical', 'hypotheses', 'random sample', 'confidence intervals', 'parameters', 'sample', 'random', 'statistical inference', 'intervals', 'distribution', 'prediction intervals']", Properties of Normal Distribution,seg_475,"the normal distribution is the basis of many procedures in statistical inference. these include confidence intervals for unknown parameters, prediction intervals for future observations, tests of various hypotheses, and estimation of parameters. given below is a theorem about the mean of a random sample from a normal population, which is used in ci construction and tests about the mean.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 1., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  1996,  3671,  4353,  2003,  1996,  3978,  1997,  2116,  8853,
         1999,  7778, 28937,  1012,  2122,  2421,  7023, 14025,  2005,  4242,
        11709,  1010, 17547, 14025,  2005,  2925,  9420,  1010,  5852,  1997,
         2536,  1044, 22571, 14573, 23072,  1010,  1998, 24155,  1997, 11709,
         1012,  2445,  2917,  2003,  1037,  9872,  2055,  1996,  2812,  1997,
         1037,  6721,  7099,  2013,  1037,  3671,  2313,  1010,  2029,  2003,
         2109,  1999, 25022,  2810,  1998,  5852,  2055,  1996,  2812,  1012,
          102])"
2456,1,"['mean', 'normally distributed', 'sample', 'normal', 'population', 'sample mean']", Properties of Normal Distribution,seg_475,"theorem 7.3 the sample mean xn of any sample of size n ≥ 2 from a normal population n( ,  2) is itself normally distributed as n( ,  2∕n).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([ 101, 9872, 1021, 1012, 1017, 1996, 7099, 2812, 1060, 2078, 1997, 2151,
        7099, 1997, 2946, 1050, 1609, 1016, 2013, 1037, 3671, 2313, 1050, 1006,
        1010, 1016, 1007, 2003, 2993, 5373, 5500, 2004, 1050, 1006, 1010,  100,
        1007, 1012,  102])"
2457,1,"['normal', 'normal distribution', 'distribution']", Properties of Normal Distribution,seg_475,proof: the easiest way to prove this result is using the mgf (or chf) as follows. let mx(t) be the mgf of a normal distribution (chapter 8). then mx(t) = [mx(t∕n)]n = [e t∕n+ 1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  6947,  1024,  1996, 25551,  2126,  2000,  6011,  2023,  2765,
         2003,  2478,  1996, 11460,  2546,  1006,  2030, 10381,  2546,  1007,
         2004,  4076,  1012,  2292, 25630,  1006,  1056,  1007,  2022,  1996,
        11460,  2546,  1997,  1037,  3671,  4353,  1006,  3127,  1022,  1007,
         1012,  2059, 25630,  1006,  1056,  1007,  1027,  1031, 25630,  1006,
          100,  1007,  1033,  1050,  1027,  1031,  1041,   100,  1009,  1015,
          102])"
2458,1,['normal'], Properties of Normal Distribution,seg_475,"2 (t∕n)2 2 ]n = en t∕n+ 1 2 n 2(t∕n)2 = e t+ 1 2 t2( 2∕n), which is the mgf of a normal",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  1016,  1006,   100,  1007,  1016,  1016,  1033,  1050,  1027,
         4372,   100,  1009,  1015,  1016,  1050,  1016,  1006,   100,  1007,
         1016,  1027,  1041,  1056,  1009,  1015,  1016,  1056,  2475,  1006,
          100,  1007,  1010,  2029,  2003,  1996, 11460,  2546,  1997,  1037,
         3671,   102])"
2459,1,"['mean', 'variance']", Properties of Normal Distribution,seg_475,distribution with mean   and variance  2∕n. this proves the result.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  4353,  2007,  2812,  1998, 23284,   100,  1012,  2023, 16481,
         1996,  2765,  1012,   102])"
2460,1,"['mean', 'deviation', 'normal distribution', 'normal', 'distribution']", Properties of Normal Distribution,seg_475,example 7.16 mean deviation of normal distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  2742,  1021,  1012,  2385,  2812, 24353,  1997,  3671,  4353,
          102])"
2461,1,"['mean', 'deviation', 'normal distribution', 'normal', 'distribution']", Properties of Normal Distribution,seg_475,find the mean deviation of the normal distribution using theorem 7.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996,  3671,  4353,  2478,
         9872,  1021,  1012,  1015,  1012,   102])"
2462,1,"['normal distribution', 'tails', 'normal', 'distribution']", Properties of Normal Distribution,seg_475,"solution 7.16 let x ∼ n( ,  2). as the normal distribution tails off to zero at the lower and upper limits, equation (7.1) is applicable. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  5576,  1021,  1012,  2385,  2292,  1060,   100,  1050,  1006,
         1010,  1016,  1007,  1012,  2004,  1996,  3671,  4353, 17448,  2125,
         2000,  5717,  2012,  1996,  2896,  1998,  3356,  6537,  1010,  8522,
         1006,  1021,  1012,  1015,  1007,  2003, 12711,  1012,  2023,  3957,
          102])"
2463,1,['limit'], Properties of Normal Distribution,seg_475,"put z = (x −  )∕ , so that dx =  dz. the lower limit remains the same, but the upper limit in equation (7.73) becomes 0. thus, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 3671, 4353])","tensor([ 101, 2404, 1062, 1027, 1006, 1060, 1597, 1007,  100, 1010, 2061, 2008,
        1040, 2595, 1027, 1040, 2480, 1012, 1996, 2896, 5787, 3464, 1996, 2168,
        1010, 2021, 1996, 3356, 5787, 1999, 8522, 1006, 1021, 1012, 6421, 1007,
        4150, 1014, 1012, 2947, 1010, 2057, 2131,  102])"
2464,0,[], Properties of Normal Distribution,seg_475,"this integral can readily be evaluated using integration by parts. put u = φ(z) and dv = dz, so that du =  (z). this gives",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 3671, 4353])","tensor([  101,  2023,  9897,  2064, 12192,  2022, 16330,  2478,  8346,  2011,
         3033,  1012,  2404,  1057,  1027,  1176,  1006,  1062,  1007,  1998,
         1040,  2615,  1027,  1040,  2480,  1010,  2061,  2008,  4241,  1027,
         1006,  1062,  1007,  1012,  2023,  3957,   102])"
2465,0,[], Properties of Normal Distribution,seg_475,n!2n. then the integral becomes 1∕√ 2 . apply the constant 2  to get the,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 3671, 4353])","tensor([ 101, 1050,  999, 1016, 2078, 1012, 2059, 1996, 9897, 4150,  100, 1016,
        1012, 6611, 1996, 5377, 1016, 2000, 2131, 1996,  102])"
2466,1,"['regression', 'transformed', 'tests', 'population', 'logistic', 'normality', 'mean', 'normally distributed', 'normal distribution', 'multiple regression', 'transform', 'normal', 'statistical', 'data', 'transformation', 'sample', 'distribution', 'error']", Transformations to Normality,seg_477,"normality of parent population is a fundamental assumption in many statistical procedures. for example, error terms in logistic and multiple regression are assumed to be normally distributed with zero mean. normality tests of the sample can reveal whether the data came from a normal distribution or not. when the data are not normally distributed, a simple transformation may sometimes transform it to nearly normal form. for instance, count data are usually transformed using the square root transformation,",tensor(1),"tensor([0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([21865,  2000,  3671,  3012])","tensor([  101,  3671,  3012,  1997,  6687,  2313,  2003,  1037,  8050, 11213,
         1999,  2116,  7778,  8853,  1012,  2005,  2742,  1010,  7561,  3408,
         1999,  8833,  6553,  1998,  3674, 26237,  2024,  5071,  2000,  2022,
         5373,  5500,  2007,  5717,  2812,  1012,  3671,  3012,  5852,  1997,
         1996,  7099,  2064,  7487,  3251,  1996,  2951,  2234,  2013,  1037,
         3671,  4353,  2030,  2025,  1012,  2043,  1996,  2951,  2024,  2025,
         5373,  5500,  1010,  1037,  3722,  8651,  2089,  2823, 10938,  2009,
         2000,  3053,  3671,  2433,  1012,  2005,  6013,  1010,  4175,  2951,
         2024,  2788,  8590,  2478,  1996,  2675,  7117,  8651,  1010,   102])"
2467,1,"['logit transformation', 'transformed', 'logit', 'transformation']", Transformations to Normality,seg_477,1 and proportions are transformed using logit transformation as y = log(p∕q) where,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([21865,  2000,  3671,  3012])","tensor([  101,  1015,  1998, 19173,  2024,  8590,  2478,  8833,  4183,  8651,
         2004,  1061,  1027,  8833,  1006,   100,  1007,  2073,   102])"
2468,1,"['normally distributed', 'linear', 'normal', 'linear combinations', 'variates', 'combinations']", Functions of Normal Variates,seg_479,"any linear combinations of normal variates are normally distributed. symbolically, if x1,x2, · · · ,xk are iid n( i,  i",tensor(1),"tensor([0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2151,  7399, 14930,  1997,  3671, 13075, 13143,  2015,  2024,
         5373,  5500,  1012, 12613,  3973,  1010,  2065,  1060,  2487,  1010,
         1060,  2475,  1010,  1087,  1087,  1087,  1010,  1060,  2243,  2024,
         2462,  2094,  1050,  1006,  1045,  1010,  1045,   102])"
2469,1,['normally distributed'], Functions of Normal Variates,seg_479,k =1 ∓cixi is normally distributed with mean∑i,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 1047, 1027, 1015,  100, 2003, 5373, 5500, 2007,  100,  102])"
2470,0,[], Functions of Normal Variates,seg_479,k =1 ∓ci i and variance∑i,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 1047, 1027, 1015,  100, 1045, 1998,  100,  102])"
2471,1,"['variates', 'normal', 'normally distributed']", Functions of Normal Variates,seg_479,"if x and y are iid normal variates with zero means, then u = xy∕√ x2 + y2 is normally distributed [217, 218]. in addition, if  x2 =  y2, then (x2 − y2)∕(x2 + y2) is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2462,  2094,  3671, 13075,
        13143,  2015,  2007,  5717,  2965,  1010,  2059,  1057,  1027,   100,
         1060,  2475,  1009,  1061,  2475,  2003,  5373,  5500,  1031, 20335,
         1010, 20741,  1033,  1012,  1999,  2804,  1010,  2065,  1060,  2475,
         1027,  1061,  2475,  1010,  2059,  1006,  1060,  2475,  1597,  1061,
         2475,  1007,   100,  1006,  1060,  2475,  1009,  1061,  2475,  1007,
         2003,   102])"
2472,1,"['gamma distributed', 'normally distributed', 'gamma', 'normal', 'independent', 'distribution', 'variates', 'case']", Functions of Normal Variates,seg_479,"also normally distributed. product of independent normal variates has a bessel-type iii distribution. the square of a normal variate is gamma distributed (of which  2 is a special case). in general, if x1,x2, · · · ,xk are iid n(0,  2), then∑i",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2036,  5373,  5500,  1012,  4031,  1997,  2981,  3671, 13075,
        13143,  2015,  2038,  1037,  2022, 21218,  1011,  2828,  3523,  4353,
         1012,  1996,  2675,  1997,  1037,  3671, 13075, 13143,  2003, 13091,
         5500,  1006,  1997,  2029,  1016,  2003,  1037,  2569,  2553,  1007,
         1012,  1999,  2236,  1010,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1087,  1087,  1087,  1010,  1060,  2243,  2024,  2462,  2094,
         1050,  1006,  1014,  1010,  1016,  1007,  1010,   100,   102])"
2473,0,[], Functions of Normal Variates,seg_479," 2 k distributed. as shown in page 276, if z1 = x1",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  1016,  1047,  5500,  1012,  2004,  3491,  1999,  3931, 25113,
         1010,  2065,  1062,  2487,  1027,  1060,  2487,   102])"
2474,1,['set'], Functions of Normal Variates,seg_479,"tributed, as also the product of any consecutive set of zj",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 7050, 2094, 1010, 2004, 2036, 1996, 4031, 1997, 2151, 5486, 2275,
        1997, 1062, 3501,  102])"
2475,1,['beta distributed'], Functions of Normal Variates,seg_479,′s are beta distributed [171].,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  1531,  1055,  2024,  8247,  5500,  1031, 18225,  1033,  1012,
          102])"
2476,1,['distribution'], Functions of Normal Variates,seg_479,"normal distribution is also related to student’s t, snedecor’s f, and fisher’s z distributions [219].",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  3671,  4353,  2003,  2036,  3141,  2000,  3076,  1521,  1055,
         1056,  1010,  1055,  7228,  8586,  2953,  1521,  1055,  1042,  1010,
         1998,  8731,  1521,  1055,  1062, 20611,  1031, 20636,  1033,  1012,
          102])"
2477,1,"['probability', 'populations']", Functions of Normal Variates,seg_479,"example 7.17 probability p(x ≤ y) for two populations n( ,  i",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 2742, 1021, 1012, 2459, 9723, 1052, 1006, 1060, 1608, 1061, 1007,
        2005, 2048, 7080, 1050, 1006, 1010, 1045,  102])"
2478,0,[], Functions of Normal Variates,seg_479,"if x and y are independently distributed as n( , i 2), for i = 1, 2 find the probability p[x ≤ y].",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 2065, 1060, 1998, 1061, 2024, 9174, 5500, 2004, 1050, 1006, 1010,
        1045, 1016, 1007, 1010, 2005, 1045, 1027, 1015, 1010, 1016, 2424, 1996,
        9723, 1052, 1031, 1060, 1608, 1061, 1033, 1012,  102])"
2479,1,['distribution'], Functions of Normal Variates,seg_479,"solution 7.17 as x and y are iid, the distribution of x − y is n(0,  1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 5576, 1021, 1012, 2459, 2004, 1060, 1998, 1061, 2024, 2462, 2094,
        1010, 1996, 4353, 1997, 1060, 1597, 1061, 2003, 1050, 1006, 1014, 1010,
        1015,  102])"
2480,1,['variances'], Functions of Normal Variates,seg_479,"hence p[x ≤ y] = p[x − y ≤ 0] = φ(0) = 0.5, irrespective of the variances.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0.])","tensor([ 4972,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  6516,  1052,  1031,  1060,  1608,  1061,  1033,  1027,  1052,
         1031,  1060,  1597,  1061,  1608,  1014,  1033,  1027,  1176,  1006,
         1014,  1007,  1027,  1014,  1012,  1019,  1010, 20868,  6072,  5051,
        15277,  1997,  1996, 23284,  2015,  1012,   102])"
2481,1,"['cauchy', 'random', 'normal', 'random variables', 'variables', 'cauchy distributed', 'independent']", Relation to Other Distributions,seg_481,"if x and y are independent normal random variables, then x∕y is cauchy distributed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2981,  3671,  6721, 10857,
         1010,  2059,   100,  2003,  6187, 10875,  2100,  5500,  1012,   102])"
2482,0,[], Relation to Other Distributions,seg_481,"this is proved in chapter 10. if x is chi distributed (i.e.,√",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7189,  2000,  2060, 20611])","tensor([ 101, 2023, 2003, 4928, 1999, 3127, 2184, 1012, 2065, 1060, 2003, 9610,
        5500, 1006, 1045, 1012, 1041, 1012, 1010, 1600,  102])"
2483,1,"['curve', 'normally distributed', 'normal distribution', 'normal distributions', 'lognormal', 'convergence', 'distributions', 'sample', 'normal', 'sample size', 'distribution', 'binomial', 'binomial distribution']", Relation to Other Distributions,seg_481,"m2 ) and y is independently distributed as beta((b − 1)∕2, (b − 1)∕2), then the product (2 ∗ y − 1) ∗ x is distributed as n(0, 1) [220]. there are many other distributions that tend to the normal distribution under appropriate limits. for example, the binomial distribution tends to the normal curve when the sample size n becomes large. the convergence is more rapid when p → 1∕2 and n is large. the lognormal and normal distributions (section 7.14, p. 297) are related as follows: if y = log(x) is normally distributed, then x has lnd. the lnd can be obtained from a normal law using the transformation x = ey (p. 298).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101, 25525,  1007,  1998,  1061,  2003,  9174,  5500,  2004,  8247,
         1006,  1006,  1038,  1597,  1015,  1007,   100,  1010,  1006,  1038,
         1597,  1015,  1007,   100,  1007,  1010,  2059,  1996,  4031,  1006,
         1016,  1598,  1061,  1597,  1015,  1007,  1598,  1060,  2003,  5500,
         2004,  1050,  1006,  1014,  1010,  1015,  1007,  1031, 10545,  1033,
         1012,  2045,  2024,  2116,  2060, 20611,  2008,  7166,  2000,  1996,
         3671,  4353,  2104,  6413,  6537,  1012,  2005,  2742,  1010,  1996,
         8026, 20936,  2389,  4353, 12102,  2000,  1996,  3671,  7774,  2043,
         1996,  7099,  2946,  1050,  4150,  2312,  1012,  1996, 19143,  2003,
         2062,  5915,  2043,  1052,  1585,   100,  1998,  1050,  2003,  2312,
         1012,  1996,  8833, 12131,  9067,  1998,  3671, 20611,  1006,  2930,
         1021,  1012,  2403,  1010,  1052,  1012, 27502,  1007,  2024,  3141,
         2004,  4076,  1024,  2065,  1061,  1027,  8833,  1006,  1060,  1007,
         2003,  5373,  5500,  1010,  2059,  1060,  2038,  1048,  4859,  1012,
         1996,  1048,  4859,  2064,  2022,  4663,  2013,  1037,  3671,  2375,
         2478,  1996,  8651,  1060,  1027,  1041,  2100,  1006,  1052,  1012,
        27240,  1007,  1012,   102])"
2484,1,"['tail', 'normal distribution', 'standard normal distribution', 'standard normal', 'tail areas', 'normal', 'standard', 'distribution']", Relation to Other Distributions,seg_481,7.11.4.1 tail areas the cdf of standard normal distribution is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([ 101, 1021, 1012, 2340, 1012, 1018, 1012, 1015, 5725, 2752, 1996, 3729,
        2546, 1997, 3115, 3671, 4353, 2003, 2445, 2011,  102])"
2485,1,"['curve', 'function', 'symmetry', 'normal', 'error']", Relation to Other Distributions,seg_481,"k=0 (−1)kz2k+1∕[(2k + 1)k!2k]. because of the symmetry of the normal curve, the cdf is usually tabulated from 0 to some specified value x. the area of the normal curve from 0 to z is called the error function",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1047,  1027,  1014,  1006,  1597,  2487,  1007,  1047,  2480,
         2475,  2243,  1009,   100,  1031,  1006,  1016,  2243,  1009,  1015,
         1007,  1047,   999,  1016,  2243,  1033,  1012,  2138,  1997,  1996,
        14991,  1997,  1996,  3671,  7774,  1010,  1996,  3729,  2546,  2003,
         2788, 21628,  8898,  2013,  1014,  2000,  2070,  9675,  3643,  1060,
         1012,  1996,  2181,  1997,  1996,  3671,  7774,  2013,  1014,  2000,
         1062,  2003,  2170,  1996,  7561,  3853,   102])"
2486,1,"['complement', 'hypergeometric functions', 'gamma', 'functions', 'hypergeometric', 'change of variable', 'variable']", Relation to Other Distributions,seg_481,"using a simple change of variable, this can be expressed in terms of the incomplete gamma integral as√  (1∕2, z2). the complement of the above-mentioned integral is denoted by erfc(z). the erf(z) can be expressed in terms of confluent hypergeometric functions as",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2478,  1037,  3722,  2689,  1997,  8023,  1010,  2023,  2064,
         2022,  5228,  1999,  3408,  1997,  1996, 12958, 13091,  9897,  2004,
        30127,  1006,   100,  1010,  1062,  2475,  1007,  1012,  1996, 13711,
         1997,  1996,  2682,  1011,  3855,  9897,  2003, 19537,  2011,  9413,
        11329,  1006,  1062,  1007,  1012,  1996,  9413,  2546,  1006,  1062,
         1007,  2064,  2022,  5228,  1999,  3408,  1997,  9530, 10258, 24997,
         2102, 23760,  3351, 28993,  4972,  2004,   102])"
2487,1,"['tails', 'approximation']", Relation to Other Distributions,seg_481,"when the ordinate is in the extreme tails, another approximation as φ(−x) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2043,  1996,  2030, 18979,  2618,  2003,  1999,  1996,  6034,
        17448,  1010,  2178, 20167,  2004,  1176,  1006,  1597,  2595,  1007,
         1027,   102])"
2488,0,[], Relation to Other Distributions,seg_481,can be used. replace −x by +x to get an analogous expression for right-tail areas.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2064,  2022,  2109,  1012,  5672,  1597,  2595,  2011,  1009,
         1060,  2000,  2131,  2019, 19639,  3670,  2005,  2157,  1011,  5725,
         2752,  1012,   102])"
2489,1,"['tail', 'function', 'functions', 'probabilities', 'tail probabilities', 'error']", Relation to Other Distributions,seg_481,−dx2 scaled functions of the form c ∗ e are quite accurate to approximate the tail probabilities. the error function erf(z) has an infinite series expansion as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1597,  2094,  2595,  2475, 18953,  4972,  1997,  1996,  2433,
         1039,  1598,  1041,  2024,  3243,  8321,  2000, 15796,  1996,  5725,
         4013,  3676, 14680,  1012,  1996,  7561,  3853,  9413,  2546,  1006,
         1062,  1007,  2038,  2019, 10709,  2186,  4935,  2004,   102])"
2490,0,[], Relation to Other Distributions,seg_481,this series is rapidly convergent for small z values. see references 134 and 221.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2023,  2186,  2003,  5901, 28314,  3372,  2005,  2235,  1062,
         5300,  1012,  2156,  7604, 15170,  1998, 19594,  1012,   102])"
2491,1,"['normally distributed', 'linear', 'normal', 'linear combinations', 'additivity property', 'variates', 'combinations']", Relation to Other Distributions,seg_481,"7.11.4.2 additivity property as mentioned in section 7.11.3, linear combinations of iid normal variates are normally distributed. if x ∼ n( 1,  1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1021,  1012,  2340,  1012,  1018,  1012,  1016,  5587, 25090,
        24872,  3200,  2004,  3855,  1999,  2930,  1021,  1012,  2340,  1012,
         1017,  1010,  7399, 14930,  1997,  2462,  2094,  3671, 13075, 13143,
         2015,  2024,  5373,  5500,  1012,  2065,  1060,   100,  1050,  1006,
         1015,  1010,  1015,   102])"
2492,1,['independent'], Relation to Other Distributions,seg_481,"are independent, then x ± y ∼ n( 1 ±  2,  1",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([ 101, 2024, 2981, 1010, 2059, 1060, 1081, 1061,  100, 1050, 1006, 1015,
        1081, 1016, 1010, 1015,  102])"
2493,1,"['normally distributed', 'processes', 'results', 'experiments', 'independent']", Relation to Other Distributions,seg_481,"2 +  2 2). this is an important point in practical experiments, where results from two or more processes that are independent and normally distributed need to be combined.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([ 101, 1016, 1009, 1016, 1016, 1007, 1012, 2023, 2003, 2019, 2590, 2391,
        1999, 6742, 7885, 1010, 2073, 3463, 2013, 2048, 2030, 2062, 6194, 2008,
        2024, 2981, 1998, 5373, 5500, 2342, 2000, 2022, 4117, 1012,  102])"
2494,1,"['linear combination', 'linear', 'normal', 'variates', 'combination']", Relation to Other Distributions,seg_481,example 7.18 linear combination of iid normal variates,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2742,  1021,  1012,  2324,  7399,  5257,  1997,  2462,  2094,
         3671, 13075, 13143,  2015,   102])"
2495,1,"['mean', 'functions', 'variance']", Relation to Other Distributions,seg_481,"x ∼ n(10, 3),y ∼ n(15, 6), and z ∼ n(9, 2.5), find the mean and variance of the following functions: (i) u = x − 2y + 3z and (ii) v = 2x − 1.2y − z.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1060,   100,  1050,  1006,  2184,  1010,  1017,  1007,  1010,
         1061,   100,  1050,  1006,  2321,  1010,  1020,  1007,  1010,  1998,
         1062,   100,  1050,  1006,  1023,  1010,  1016,  1012,  1019,  1007,
         1010,  2424,  1996,  2812,  1998, 23284,  1997,  1996,  2206,  4972,
         1024,  1006,  1045,  1007,  1057,  1027,  1060,  1597,  1016,  2100,
         1009,  1017,  2480,  1998,  1006,  2462,  1007,  1058,  1027,  1016,
         2595,  1597,  1015,  1012,  1016,  2100,  1597,  1062,  1012,   102])"
2496,1,"['linear combination', 'combination', 'linear', 'case']", Relation to Other Distributions,seg_481,"solution 7.18 use the linear combination property to get e(u) = 10 − 2 ∗ 15 + 3 ∗ 9 = 37 − 30 = 7, var(u) = 3 + 6 + 2.5 = 11.5 so that u ∼ n(7, 49.5) in the second case, e(v) = 2 ∗ 10 − 1.2 ∗ 15 − 9 = −7 and var(v) = 4 ∗ 3 + 4 ∗ 6 + 9 ∗ 3.5 = 23.14.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  5576,  1021,  1012,  2324,  2224,  1996,  7399,  5257,  3200,
         2000,  2131,  1041,  1006,  1057,  1007,  1027,  2184,  1597,  1016,
         1598,  2321,  1009,  1017,  1598,  1023,  1027,  4261,  1597,  2382,
         1027,  1021,  1010, 13075,  1006,  1057,  1007,  1027,  1017,  1009,
         1020,  1009,  1016,  1012,  1019,  1027,  2340,  1012,  1019,  2061,
         2008,  1057,   100,  1050,  1006,  1021,  1010,  4749,  1012,  1019,
         1007,  1999,  1996,  2117,  2553,  1010,  1041,  1006,  1058,  1007,
         1027,  1016,  1598,  2184,  1597,  1015,  1012,  1016,  1598,  2321,
         1597,  1023,  1027,  1597,  2581,  1998, 13075,  1006,  1058,  1007,
         1027,  1018,  1598,  1017,  1009,  1018,  1598,  1020,  1009,  1023,
         1598,  1017,  1012,  1019,  1027,  2603,  1012,  2403,  1012,   102])"
2497,1,"['interval', 'standard normal', 'method', 'normal', 'standard']", Algorithms,seg_483,"random variate generation: if x is uniform in the interval [0,1] then z = √−2 log x cos(2 x) is distributed as standard normal. this is known as box–muller method [22, 222].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([13792]),"tensor([  101,  6721, 13075, 13143,  4245,  1024,  2065,  1060,  2003,  6375,
         1999,  1996, 13483,  1031,  1014,  1010,  1015,  1033,  2059,  1062,
         1027,  1600, 22543,  2475,  8833,  1060,  2522,  2015,  1006,  1016,
         1060,  1007,  2003,  5500,  2004,  3115,  3671,  1012,  2023,  2003,
         2124,  2004,  3482,  1516, 12304,  4118,  1031,  2570,  1010, 19015,
         1033,  1012,   102])"
2498,1,"['normal', 'normal distribution', 'distribution']", Algorithms,seg_483,example 7.19 truncated normal distribution pdf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([13792]),"tensor([  101,  2742,  1021,  1012,  2539, 25449,  3671,  4353, 11135,   102])"
2499,1,"['distribution', 'normal distribution', 'normal']", Algorithms,seg_483,prove that the pdf of an asymmetrically truncated normal distribution with truncation points a and b is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([13792]),"tensor([  101,  6011,  2008,  1996, 11135,  1997,  2019,  2004, 24335, 12589,
         3973, 25449,  3671,  4353,  2007, 19817,  4609, 10719,  2685,  1037,
         1998,  1038,  2003,   102])"
2500,1,['asymmetric'], Algorithms,seg_483,"solution 7.19 as the truncation point is asymmetric, the area enclosed is ∫a b  ((x −  )∕ )dx. put z = (x −  )∕ , so that dz = dx∕ . the limits are changed as (a −  )∕  and (b −  )∕ . thus",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([13792]),"tensor([  101,  5576,  1021,  1012,  2539,  2004,  1996, 19817,  4609, 10719,
         2391,  2003,  2004, 24335, 12589,  1010,  1996,  2181, 10837,  2003,
          100,  1038,  1006,  1006,  1060,  1597,  1007,   100,  1007,  1040,
         2595,  1012,  2404,  1062,  1027,  1006,  1060,  1597,  1007,   100,
         1010,  2061,  2008,  1040,  2480,  1027,   100,  1012,  1996,  6537,
         2024,  2904,  2004,  1006,  1037,  1597,  1007,   100,  1998,  1006,
         1038,  1597,  1007,   100,  1012,  2947,   102])"
2501,0,[], Algorithms,seg_483,dividing by this quantity gives the pdf as desired.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([13792]),"tensor([  101, 16023,  2011,  2023, 11712,  3957,  1996, 11135,  2004,  9059,
         1012,   102])"
2502,1,"['unimodal', 'cauchy', 'cauchy distribution', 'distribution', 'symmetric']", CAUCHY DISTRIBUTION,seg_485,"the cauchy distribution is named after the french mathematician a. l. cauchy(1789–1857), although it was known to fermat and newton much earlier. it is symmetric, unimodal and has the general pdf",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 6187, 10875,  2100,  4353])","tensor([  101,  1996,  6187, 10875,  2100,  4353,  2003,  2315,  2044,  1996,
         2413, 13235,  1037,  1012,  1048,  1012,  6187, 10875,  2100,  1006,
        13739,  1516,  8204,  1007,  1010,  2348,  2009,  2001,  2124,  2000,
        10768, 17830,  2102,  1998,  8446,  2172,  3041,  1012,  2009,  2003,
        19490,  1010,  4895, 16339,  9305,  1998,  2038,  1996,  2236, 11135,
          102])"
2503,1,"['location', 'parameter', 'location parameter', 'cauchy', 'standard']", CAUCHY DISTRIBUTION,seg_485,the location parameter is “a” and scale parameter is “b.” the standard cauchy distribution (scd) is obtained from the above by putting a = 0 and b = 1:–,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 6187, 10875,  2100,  4353])","tensor([  101,  1996,  3295, 16381,  2003,  1523,  1037,  1524,  1998,  4094,
        16381,  2003,  1523,  1038,  1012,  1524,  1996,  3115,  6187, 10875,
         2100,  4353,  1006,  8040,  2094,  1007,  2003,  4663,  2013,  1996,
         2682,  2011,  5128,  1037,  1027,  1014,  1998,  1038,  1027,  1015,
         1024,  1516,   102])"
2504,0,[], CAUCHY DISTRIBUTION,seg_485,the cdf of scd is,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6187, 10875,  2100,  4353])","tensor([ 101, 1996, 3729, 2546, 1997, 8040, 2094, 2003,  102])"
2505,1,"['cauchy', 'cauchy distribution', 'distribution']", CAUCHY DISTRIBUTION,seg_485,"and that of general cauchy distribution is given by fx(a, b) =",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 6187, 10875,  2100,  4353])","tensor([  101,  1998,  2008,  1997,  2236,  6187, 10875,  2100,  4353,  2003,
         2445,  2011, 23292,  1006,  1037,  1010,  1038,  1007,  1027,   102])"
2506,1,['mean'], Properties of Cauchy Distribution,seg_487,"∞ ∞ x∕(1 + x2)dx does not exist, the mean is undefined. the limiting lt value 1 ∫−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  6187, 10875,  2100,  4353])","tensor([  101,  1601,  1601,   100,  1006,  1015,  1009,  1060,  2475,  1007,
         1040,  2595,  2515,  2025,  4839,  1010,  1996,  2812,  2003,  6151,
        28344,  1012,  1996, 14879,  8318,  3643,  1015,   100,   102])"
2507,1,"['function', 'characteristic function']", Properties of Cauchy Distribution,seg_487,x 2 dx is zero. the characteristic function is  r → ∞ 1+x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997,  6187, 10875,  2100,  4353])","tensor([ 101, 1060, 1016, 1040, 2595, 2003, 5717, 1012, 1996, 8281, 3853, 2003,
        1054, 1585, 1601, 1015, 1009, 1060,  102])"
2508,1,"['tails', 'cauchy', 'cauchy distribution', 'distribution']", Properties of Cauchy Distribution,seg_487,"median and mode of the general cauchy distribution coincide at x = a, with modal value 1∕(b ). if the distribution is truncated in both tails at x = c, the resulting pdf",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  6187, 10875,  2100,  4353])","tensor([  101,  3991,  1998,  5549,  1997,  1996,  2236,  6187, 10875,  2100,
         4353, 19680,  2012,  1060,  1027,  1037,  1010,  2007, 16913,  2389,
         3643,   100,  1006,  1038,  1007,  1012,  2065,  1996,  4353,  2003,
        25449,  1999,  2119, 17448,  2012,  1060,  1027,  1039,  1010,  1996,
         4525, 11135,   102])"
2509,1,"['mean', 'variance']", Properties of Cauchy Distribution,seg_487,1 1 is for −c ≤ x ≤ +c. this has mean 0 and variance c∕tan−1(c) − 1. see,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  6187, 10875,  2100,  4353])","tensor([  101,  1015,  1015,  2003,  2005,  1597,  2278,  1608,  1060,  1608,
         1009,  1039,  1012,  2023,  2038,  2812,  1014,  1998, 23284,   100,
         1006,  1039,  1007,  1597,  1015,  1012,  2156,   102])"
2510,0,[], Properties of Cauchy Distribution,seg_487,(c3 ) f1o+rx2 further properties.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  6187, 10875,  2100,  4353])","tensor([  101,  1006,  1039,  2509,  1007, 20069,  2080,  1009,  1054,  2595,
         2475,  2582,  5144,  1012,   102])"
2511,1,"['cauchy', 'random', 'random variables', 'variables', 'cauchy distributed', 'independent']", Functions of Cauchy Variate,seg_489,"if x1,x2, · · ·xn are independent cauchy distributed random variables, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 1., 1., 0., 0., 0.])","tensor([ 4972,  1997,  6187, 10875,  2100, 13075, 13143])","tensor([  101,  2065,  1060,  2487,  1010,  1060,  2475,  1010,  1087,  1087,
         1087,  1060,  2078,  2024,  2981,  6187, 10875,  2100,  5500,  6721,
        10857,  1010,  2059,   102])"
2512,1,"['mean', 'probability', 'cauchy', 'states', 'limit', 'distribution', 'central limit theorem', 'law of large numbers']", Functions of Cauchy Variate,seg_489,"x = (x1 + x2 + · · · + xn)∕n is also distributed as cauchy. an implication of this result is that the cauchy mean does not obey the central limit theorem or the law of large numbers (the law of large numbers states that sn∕n for scd converges to   in probability, and the clt states that the distribution of sn∕n tends to n(0, 1) as n → ∞).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4972,  1997,  6187, 10875,  2100, 13075, 13143])","tensor([  101,  1060,  1027,  1006,  1060,  2487,  1009,  1060,  2475,  1009,
         1087,  1087,  1087,  1009,  1060,  2078,  1007,   100,  2003,  2036,
         5500,  2004,  6187, 10875,  2100,  1012,  2019, 25323,  1997,  2023,
         2765,  2003,  2008,  1996,  6187, 10875,  2100,  2812,  2515,  2025,
        15470,  1996,  2430,  5787,  9872,  2030,  1996,  2375,  1997,  2312,
         3616,  1006,  1996,  2375,  1997,  2312,  3616,  2163,  2008,   100,
         2005,  8040,  2094, 28314,  2015,  2000,  1999,  9723,  1010,  1998,
         1996, 18856,  2102,  2163,  2008,  1996,  4353,  1997,   100, 12102,
         2000,  1050,  1006,  1014,  1010,  1015,  1007,  2004,  1050,  1585,
         1601,  1007,  1012,   102])"
2513,1,"['function', 'functions', 'uniform distribution', 'cauchy', 'additivity property', 'distribution', 'variates', 'cauchy distributed', 'independent']", Functions of Cauchy Variate,seg_489,"cauchy distribution is related to the uniform distribution u(0, 1) through the tangent function tan( ). more precisely, if u ∼ u(0, 1), then tan( u) has a cauchy distribution. this allows us to find tangent functions of cauchy distributed variates like 2x∕(1 − x2), (3x − x3)∕(1 − 3x2), (4x − x4)∕(1 − 6x2 + x4), and so on, which are, respectively, tan(2x), tan(3x), tan(4x), and so on. these are all cauchy distributed [223–225]. if x and y are iid cauchy variates, (x − y)∕(1 − xy) and (x − 1)∕(x + 1) are identically distributed. it satisfies an additivity property: if x1 ∼ cauchy(0, b1) and x2 ∼ cauchy(0, b2) are independent, then x1 + x2 ∼ cauchy(0, b1 + b2).",tensor(1),"tensor([0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4972,  1997,  6187, 10875,  2100, 13075, 13143])","tensor([  101,  6187, 10875,  2100,  4353,  2003,  3141,  2000,  1996,  6375,
         4353,  1057,  1006,  1014,  1010,  1015,  1007,  2083,  1996, 27250,
         3853,  9092,  1006,  1007,  1012,  2062, 10785,  1010,  2065,  1057,
          100,  1057,  1006,  1014,  1010,  1015,  1007,  1010,  2059,  9092,
         1006,  1057,  1007,  2038,  1037,  6187, 10875,  2100,  4353,  1012,
         2023,  4473,  2149,  2000,  2424, 27250,  4972,  1997,  6187, 10875,
         2100,  5500, 13075, 13143,  2015,  2066,   100,  1006,  1015,  1597,
         1060,  2475,  1007,  1010,  1006,  1017,  2595,  1597,  1060,  2509,
         1007,   100,  1006,  1015,  1597,  1017,  2595,  2475,  1007,  1010,
         1006,  1018,  2595,  1597,  1060,  2549,  1007,   100,  1006,  1015,
         1597,  1020,  2595,  2475,  1009,  1060,  2549,  1007,  1010,  1998,
         2061,  2006,  1010,  2029,  2024,  1010,  4414,  1010,  9092,  1006,
         1016,  2595,  1007,  1010,  9092,  1006,  1017,  2595,  1007,  1010,
         9092,  1006,  1018,  2595,  1007,  1010,  1998,  2061,  2006,  1012,
         2122,  2024,  2035,  6187, 10875,  2100,  5500,  1031, 20802,  1516,
        14993,  1033,  1012,  2065,  1060,  1998,  1061,  2024,  2462,  2094,
         6187, 10875,  2100, 13075, 13143,  2015,  1010,  1006,  1060,  1597,
         1061,  1007,   100,  1006,  1015,  1597,  1060,  2100,  1007,  1998,
         1006,  1060,  1597,  1015,  1007,   100,  1006,  1060,  1009,  1015,
         1007,  2024,  7235,  2135,  5500,  1012,  2009,  2938,  2483, 14213,
         2019,  5587, 25090, 24872,  3200,  1024,  2065,  1060,  2487,   100,
         6187, 10875,  2100,  1006,  1014,  1010, 29491,  1007,  1998,  1060,
         2475,   100,  6187, 10875,  2100,  1006,  1014,  1010,  1038,  2475,
         1007,  2024,  2981,  1010,  2059,  1060,  2487,  1009,  1060,  2475,
          100,  6187, 10875,  2100,  1006,  1014,  1010, 29491,  1009,  1038,
         2475,  1007,  1012,   102])"
2514,1,"['t distribution', 'cauchy', 'cauchy distribution', 'distribution', 'cauchy distributed']", Relation to Other Distributions,seg_491,"the student’s t distribution with 1 dof is identically cauchy distribution. if z is cauchy distributed, then (a + bz) is cauchy distributed.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1996,  3076,  1521,  1055,  1056,  4353,  2007,  1015,  2079,
         2546,  2003,  7235,  2135,  6187, 10875,  2100,  4353,  1012,  2065,
         1062,  2003,  6187, 10875,  2100,  5500,  1010,  2059,  1006,  1037,
         1009,  1038,  2480,  1007,  2003,  6187, 10875,  2100,  5500,  1012,
          102])"
2515,0,[], Relation to Other Distributions,seg_491,many other similar relationships can be found in arnold [224].,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2116,  2060,  2714,  6550,  2064,  2022,  2179,  1999,  7779,
         1031, 19711,  1033,  1012,   102])"
2516,1,['distribution'], INVERSE GAUSSIAN DISTRIBUTION,seg_493,this is also called wald’s distribution (see figure 7.9). the pdf takes many forms,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  2023,  2003,  2036,  2170, 24547,  2094,  1521,  1055,  4353,
         1006,  2156,  3275,  1021,  1012,  1023,  1007,  1012,  1996, 11135,
         3138,  2116,  3596,   102])"
2517,0,[], INVERSE GAUSSIAN DISTRIBUTION,seg_493,expand (x −  )2 as a quadratic and divide each term by  x to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  7818,  1006,  1060,  1597,  1007,  1016,  2004,  1037, 17718,
        23671,  1998, 11443,  2169,  2744,  2011,  1060,  2000,  2131,   102])"
2518,0,[], INVERSE GAUSSIAN DISTRIBUTION,seg_493,take the constant in the exponent as a separate multiplier and put  ∕  =   to get another form,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  2202,  1996,  5377,  1999,  1996, 16258, 21576,  2004,  1037,
         3584,  4800, 24759,  3771,  1998,  2404,   100,  1027,  2000,  2131,
         2178,  2433,   102])"
2519,1,"['standard normal', 'normal', 'standard']", INVERSE GAUSSIAN DISTRIBUTION,seg_493,the cdf is expressible in terms of the standard normal cdf as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([ 101, 1996, 3729, 2546, 2003, 4671, 7028, 1999, 3408, 1997, 1996, 3115,
        3671, 3729, 2546, 2004,  102])"
2520,1,['range'], INVERSE GAUSSIAN DISTRIBUTION,seg_493,7.13.0.1 properties of igd multiply equation (7.90) by eitx and integrate over the range to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  1021,  1012,  2410,  1012,  1014,  1012,  1015,  5144,  1997,
         1045,  2290,  2094,  4800, 22086,  8522,  1006,  1021,  1012,  3938,
         1007,  2011,  1041,  4183,  2595,  1998, 17409,  2058,  1996,  2846,
         2000,  2131,   102])"
2521,1,"['mean', 'deviation', 'variance', 'coefficient', 'skewness', 'coefficient of skewness']", INVERSE GAUSSIAN DISTRIBUTION,seg_493,"the mean is  , but the mode depends on both  ,   as  ((1 + 9∕(4 2))1∕2 − 3∕(2 )) where   =  ∕ . the variance also depends on both  ,   as  2 =  3∕  =  2∕ . the coefficient of skewness is 3√ ∕  so that a practitioner can choose between a variety of distributional shapes. the mean deviation is given by",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0.])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  1996,  2812,  2003,  1010,  2021,  1996,  5549,  9041,  2006,
         2119,  1010,  2004,  1006,  1006,  1015,  1009,   100,  1006,  1018,
         1016,  1007,  1007,   100,  1597,   100,  1006,  1016,  1007,  1007,
         2073,  1027,   100,  1012,  1996, 23284,  2036,  9041,  2006,  2119,
         1010,  2004,  1016,  1027,   100,  1027,   100,  1012,  1996, 19064,
         1997, 15315,  7974,  2791,  2003,  1017, 30127,   100,  2061,  2008,
         1037, 18742,  2064,  5454,  2090,  1037,  3528,  1997,  4353,  2389,
        10466,  1012,  1996,  2812, 24353,  2003,  2445,  2011,   102])"
2522,1,"['linear', 'table', 'linear combinations', 'combinations']", INVERSE GAUSSIAN DISTRIBUTION,seg_493,"this can be simplified as given in table 7.14. linear combinations of igd are igd distributed (see summary table 7.4 (p. 297)). in particular, if xi’s are igd( i,  i) then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  2023,  2064,  2022, 11038,  2004,  2445,  1999,  2795,  1021,
         1012,  2403,  1012,  7399, 14930,  1997,  1045,  2290,  2094,  2024,
         1045,  2290,  2094,  5500,  1006,  2156, 12654,  2795,  1021,  1012,
         1018,  1006,  1052,  1012, 27502,  1007,  1007,  1012,  1999,  3327,
         1010,  2065,  8418,  1521,  1055,  2024,  1045,  2290,  2094,  1006,
         1045,  1010,  1045,  1007,  2059,   102])"
2523,1,"['kurtosis', 'leptokurtic']", INVERSE GAUSSIAN DISTRIBUTION,seg_493,n =1 i∕ i)2). the kurtosis is 3 + 15( ∕ ) showing that it is always leptokurtic. writing the exponent as ( x−,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  1050,  1027,  1015,   100,  1045,  1007,  1016,  1007,  1012,
         1996,  9679, 12650,  2003,  1017,  1009,  2321,  1006,   100,  1007,
         4760,  2008,  2009,  2003,  2467,  3393, 13876, 21940, 28228,  2278,
         1012,  3015,  1996, 16258, 21576,  2004,  1006,  1060, 22543,   102])"
2524,1,['distribution'], INVERSE GAUSSIAN DISTRIBUTION,seg_493,  → ∞ this becomes (−1)2 = 1. the resulting distribution is called one-parameter igd:–,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19262, 11721, 17854,  2937,  4353])","tensor([  101,  1585,  1601,  2023,  4150,  1006,  1597,  2487,  1007,  1016,
         1027,  1015,  1012,  1996,  4525,  4353,  2003,  2170,  2028,  1011,
        16381,  1045,  2290,  2094,  1024,  1516,   102])"
2525,1,"['gamma', 'distribution gamma', 'standard normal', 'normal', 'gamma distribution', 'standard', 'distribution']", Relation to Other Distributions,seg_495,"if x ∼ igd( ,  ) then y =  (x −  )2∕( 2x) has chi-square distribution. if   is held constant and   → ∞, igd( ,  ) approaches a gamma distribution gamma( ∕2, 1∕2). when   = 1, the cdf can be expressed in terms of standard normal cdf as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2065,  1060,   100,  1045,  2290,  2094,  1006,  1010,  1007,
         2059,  1061,  1027,  1006,  1060,  1597,  1007,   100,  1006,  1016,
         2595,  1007,  2038,  9610,  1011,  2675,  4353,  1012,  2065,  2003,
         2218,  5377,  1998,  1585,  1601,  1010,  1045,  2290,  2094,  1006,
         1010,  1007,  8107,  1037, 13091,  4353, 13091,  1006,   100,  1010,
          100,  1007,  1012,  2043,  1027,  1015,  1010,  1996,  3729,  2546,
         2064,  2022,  5228,  1999,  3408,  1997,  3115,  3671,  3729,  2546,
         2004,   102])"
2526,0,[], Relation to Other Distributions,seg_495,see reference 226 for other approximations.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2156,  4431, 21035,  2005,  2060, 20167,  2015,  1012,   102])"
2527,1,"['moments', 'table']", Relation to Other Distributions,seg_495,"the moments and inverse moments are related as e(x∕ )−r = e(x∕ )r+1, where negative index denotes inverse moments. see table 7.14 for further properties.",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1996,  5312,  1998, 19262,  5312,  2024,  3141,  2004,  1041,
         1006,   100,  1007,  1597,  2099,  1027,  1041,  1006,   100,  1007,
         1054,  1009,  1015,  1010,  2073,  4997,  5950, 14796, 19262,  5312,
         1012,  2156,  2795,  1021,  1012,  2403,  2005,  2582,  5144,  1012,
          102])"
2528,1,"['model', 'distribution']", LOGNORMAL DISTRIBUTION,seg_497,"lnd arises in a variety of applications. for example, rare-earth elements and radioactivity, micro-organisms in closed boundary regions, solute mobility in plant cuticles, pesticide distribution in farm lands, time between infection and appearance of symptoms in certain diseases, file sizes on hard disks, and so on follow approximately the lnd. it also has applications in insurance and economics. it is the widely used parametric model in mining engineering for low-concentration mineral deposits.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8833, 12131,  9067,  4353])","tensor([  101,  1048,  4859, 18653,  1999,  1037,  3528,  1997,  5097,  1012,
         2005,  2742,  1010,  4678,  1011,  3011,  3787,  1998,  2557, 18908,
         7730,  1010, 12702,  1011, 11767,  1999,  2701,  6192,  4655,  1010,
        14017, 10421, 12969,  1999,  3269,  3013, 20921,  1010, 20739, 21752,
         4353,  1999,  3888,  4915,  1010,  2051,  2090,  8985,  1998,  3311,
         1997,  8030,  1999,  3056,  7870,  1010,  5371, 10826,  2006,  2524,
        23999,  1010,  1998,  2061,  2006,  3582,  3155,  1996,  1048,  4859,
         1012,  2009,  2036,  2038,  5097,  1999,  5427,  1998,  5543,  1012,
         2009,  2003,  1996,  4235,  2109, 11498, 12589,  2944,  1999,  5471,
         3330,  2005,  2659,  1011,  6693,  9754, 10042,  1012,   102])"
2529,1,"['normal distribution', 'normal', 'distribution', 'transformation']", LOGNORMAL DISTRIBUTION,seg_497,1 −x2∕2 it is obtained from the normal distribution √ 2  e using the transformation y =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([ 8833, 12131,  9067,  4353])","tensor([ 101, 1015,  100, 2009, 2003, 4663, 2013, 1996, 3671, 4353, 1600, 1016,
        1041, 2478, 1996, 8651, 1061, 1027,  102])"
2530,1,['transformed'], LOGNORMAL DISTRIBUTION,seg_497,ex or equivalently x = log(y). this means that the transformed variate is lognormally,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 8833, 12131,  9067,  4353])","tensor([  101,  4654,  2030,  5662,  2135,  1060,  1027,  8833,  1006,  1061,
         1007,  1012,  2023,  2965,  2008,  1996,  8590, 13075, 13143,  2003,
         8833, 12131,  9067,  2135,   102])"
2531,1,"['normally distributed', 'lognormal', 'normal', 'standard', 'distribution', 'lognormal distribution']", LOGNORMAL DISTRIBUTION,seg_497,"distributed. it is important to remember that if x is normally distributed, log(x) is not lognormal (a normal variate extends from −∞ to ∞, but logarithm is undefined for negative argument). this gives  x∕ y = 1∕y, so that the pdf of standard lognormal distribution becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([ 8833, 12131,  9067,  4353])","tensor([  101,  5500,  1012,  2009,  2003,  2590,  2000,  3342,  2008,  2065,
         1060,  2003,  5373,  5500,  1010,  8833,  1006,  1060,  1007,  2003,
         2025,  8833, 12131,  9067,  1006,  1037,  3671, 13075, 13143,  8908,
         2013,  1597, 30128,  2000,  1601,  1010,  2021,  8833,  8486,  2705,
         2213,  2003,  6151, 28344,  2005,  4997,  6685,  1007,  1012,  2023,
         3957,   100,  1061,  1027,   100,  1010,  2061,  2008,  1996, 11135,
         1997,  3115,  8833, 12131,  9067,  4353,  4150,   102])"
2532,1,"['lognormal', 'lognormal distribution', 'distribution']", LOGNORMAL DISTRIBUTION,seg_497,the general form of the lognormal distribution is easily obtained as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 8833, 12131,  9067,  4353])","tensor([  101,  1996,  2236,  2433,  1997,  1996,  8833, 12131,  9067,  4353,
         2003,  4089,  4663,  2004,   102])"
2533,1,"['tail', 'mean', 'normal distribution', 'variance', 'lognormal', 'probabilities', 'tail probabilities', 'normal', 'distribution', 'lognormal distribution', 'transformation']", LOGNORMAL DISTRIBUTION,seg_497,"here,   and  2 are not the mean and variance of lognormal distribution but that of the underlying normal law (from which lnd is obtained by the transformation y = ex). tail probabilities can be easily evaluated using the cdf of a normal distribution. for instance, if y ∼ lognormal(0,1) then p[y   y0] = pr[z   ln(y0)] = 1 − φ(ln(y0)).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8833, 12131,  9067,  4353])","tensor([  101,  2182,  1010,  1998,  1016,  2024,  2025,  1996,  2812,  1998,
        23284,  1997,  8833, 12131,  9067,  4353,  2021,  2008,  1997,  1996,
        10318,  3671,  2375,  1006,  2013,  2029,  1048,  4859,  2003,  4663,
         2011,  1996,  8651,  1061,  1027,  4654,  1007,  1012,  5725,  4013,
         3676, 14680,  2064,  2022,  4089, 16330,  2478,  1996,  3729,  2546,
         1997,  1037,  3671,  4353,  1012,  2005,  6013,  1010,  2065,  1061,
          100,  8833, 12131,  9067,  1006,  1014,  1010,  1015,  1007,  2059,
         1052,  1031,  1061,  1061,  2692,  1033,  1027, 10975,  1031,  1062,
         1048,  2078,  1006,  1061,  2692,  1007,  1033,  1027,  1015,  1597,
         1176,  1006,  1048,  2078,  1006,  1061,  2692,  1007,  1007,  1012,
          102])"
2534,1,"['parameter', 'function', 'distribution']", Properties of Lognormal Distribution,seg_499,this distribution and ig distribution are somewhat similar shaped for small parameter values (figure 7.10). the cdf can be expressed in terms of erf() function as,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([ 5144,  1997,  8833, 12131,  9067,  4353])","tensor([  101,  2023,  4353,  1998,  1045,  2290,  4353,  2024,  5399,  2714,
         5044,  2005,  2235, 16381,  5300,  1006,  3275,  1021,  1012,  2184,
         1007,  1012,  1996,  3729,  2546,  2064,  2022,  5228,  1999,  3408,
         1997,  9413,  2546,  1006,  1007,  3853,  2004,   102])"
2535,1,"['mean', 'standard normal', 'lognormal', 'distributions', 'normal', 'standard', 'lognormal distributions']", Properties of Lognormal Distribution,seg_499,"from this, it is easy to show that the area from the mode to the mean of an lnd is φ( ) − φ(− ), where φ() denotes the cdf of standard normal. this result can be used to characterize lognormal distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0.])","tensor([ 5144,  1997,  8833, 12131,  9067,  4353])","tensor([  101,  2013,  2023,  1010,  2009,  2003,  3733,  2000,  2265,  2008,
         1996,  2181,  2013,  1996,  5549,  2000,  1996,  2812,  1997,  2019,
         1048,  4859,  2003,  1176,  1006,  1007,  1597,  1176,  1006,  1597,
         1007,  1010,  2073,  1176,  1006,  1007, 14796,  1996,  3729,  2546,
         1997,  3115,  3671,  1012,  2023,  2765,  2064,  2022,  2109,  2000,
         2839,  4697,  8833, 12131,  9067, 20611,  1012,   102])"
2536,1,"['quantile', 'standard normal', 'lognormal', 'normal', 'standard', 'quantiles']", Properties of Lognormal Distribution,seg_499,"the quantiles of standard normal and lognormal are related as qp(x) = exp(  +  zp(z)), where zp denotes the corresponding quantile of standard normal variate. replace p by p + 1 and divide by the above-mentioned expression to get",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8833, 12131,  9067,  4353])","tensor([  101,  1996, 24110, 15286,  2015,  1997,  3115,  3671,  1998,  8833,
        12131,  9067,  2024,  3141,  2004,  1053,  2361,  1006,  1060,  1007,
         1027,  4654,  2361,  1006,  1009,  1062,  2361,  1006,  1062,  1007,
         1007,  1010,  2073,  1062,  2361, 14796,  1996,  7978, 24110, 15286,
         1997,  3115,  3671, 13075, 13143,  1012,  5672,  1052,  2011,  1052,
         1009,  1015,  1998, 11443,  2011,  1996,  2682,  1011,  3855,  3670,
         2000,  2131,   102])"
2537,1,"['linear', 'cumulants', 'lognormal', 'approximation', 'moments', 'independent', 'distribution', 'lognormal distribution', 'noncentral']", Properties of Lognormal Distribution,seg_499,"the sum of several independent lnds can be approximated by a scaled lnd. a first-order approximation can be obtained by equating the moments of linear combination with target lognormal distribution as done by patnaik [198] for noncentral 2 distribution. as the cumulants of lnd are more tractable, we could equate the cumulants and obtain a reasonable approximation. there are many other approaches for this purpose. see, for example, references 227–229, and so on.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8833, 12131,  9067,  4353])","tensor([  101,  1996,  7680,  1997,  2195,  2981,  1048, 18376,  2064,  2022,
        15796,  2094,  2011,  1037, 18953,  1048,  4859,  1012,  1037,  2034,
         1011,  2344, 20167,  2064,  2022,  4663,  2011,  1041, 16211,  3436,
         1996,  5312,  1997,  7399,  5257,  2007,  4539,  8833, 12131,  9067,
         4353,  2004,  2589,  2011, 29565,  5480,  1031, 20003,  1033,  2005,
         2512, 13013,  7941,  1016,  4353,  1012,  2004,  1996, 13988,  7068,
         7666,  1997,  1048,  4859,  2024,  2062, 12859,  3085,  1010,  2057,
         2071,  1041, 16211,  2618,  1996, 13988,  7068,  7666,  1998,  6855,
         1037,  9608, 20167,  1012,  2045,  2024,  2116,  2060,  8107,  2005,
         2023,  3800,  1012,  2156,  1010,  2005,  2742,  1010,  7604, 21489,
         1516, 22777,  1010,  1998,  2061,  2006,  1012,   102])"
2538,1,"['lognormal', 'lognormal distribution', 'distribution']", Properties of Lognormal Distribution,seg_499,example 7.20 mode of lognormal distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997,  8833, 12131,  9067,  4353])","tensor([  101,  2742,  1021,  1012,  2322,  5549,  1997,  8833, 12131,  9067,
         4353,   102])"
2539,1,['unimodal'], Properties of Lognormal Distribution,seg_499,prove that lnd is unimodal with the mode at exp(  −  2). what is the modal value?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  8833, 12131,  9067,  4353])","tensor([  101,  6011,  2008,  1048,  4859,  2003,  4895, 16339,  9305,  2007,
         1996,  5549,  2012,  4654,  2361,  1006,  1597,  1016,  1007,  1012,
         2054,  2003,  1996, 16913,  2389,  3643,  1029,   102])"
2540,1,['mean'], Moments,seg_501,the mean is   = e + 2,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([ 101, 1996, 2812, 2003, 1027, 1041, 1009, 1016,  102])"
2541,1,['variance'], Moments,seg_501,1  2 and variance  2 = e2 + 2 (e 2 − 1) = e2  (  − 1) where,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  1015,  1016,  1998, 23284,  1016,  1027,  1041,  2475,  1009,
         1016,  1006,  1041,  1016,  1597,  1015,  1007,  1027,  1041,  2475,
         1006,  1597,  1015,  1007,  2073,   102])"
2542,1,"['independent', 'location', 'mean', 'normality', 'normal distribution', 'lognormal', 'normal', 'parameter', 'random sample', 'random variables', 'central limit theorem', 'parameters', 'variance', 'sample', 'random', 'limit', 'distribution', 'variables']", Moments,seg_501,"= e 2 . the ratio ∕ 2 simplifies to (e 2 − 1). while the variance of the general normal distribution is given by a single-scale parameter 2, the variance of lognormal distribution depends on both the location and scale parameters and 2. as this distribution in the “logarithmic scale” reduces to the normal law, many of the additive properties of the normal distribution have multiplicative analogs for the lnd. for example, the additive form of the central limit theorem that asserts that the mean of a random sample tends to normality for increasing values of n can be stated for ln() as follows: if x1,x2, · · · ,xn are independent lognormal random variables with finite e(log(xi)), then z = (log(sn) − n ∗ e[log(xi)])∕( n ∗ var(log(xi)))1∕2 asymptotically approaches normality, where sn is the product of the xi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  1027,  1041,  1016,  1012,  1996,  6463,   100,  1016, 21934,
        24759, 14144,  2000,  1006,  1041,  1016,  1597,  1015,  1007,  1012,
         2096,  1996, 23284,  1997,  1996,  2236,  3671,  4353,  2003,  2445,
         2011,  1037,  2309,  1011,  4094, 16381,  1016,  1010,  1996, 23284,
         1997,  8833, 12131,  9067,  4353,  9041,  2006,  2119,  1996,  3295,
         1998,  4094, 11709,  1998,  1016,  1012,  2004,  2023,  4353,  1999,
         1996,  1523,  8833,  8486,  2705,  7712,  4094,  1524, 13416,  2000,
         1996,  3671,  2375,  1010,  2116,  1997,  1996, 29167,  5144,  1997,
         1996,  3671,  4353,  2031,  4800, 24759, 25184, 11698,  2015,  2005,
         1996,  1048,  4859,  1012,  2005,  2742,  1010,  1996, 29167,  2433,
         1997,  1996,  2430,  5787,  9872,  2008, 19514,  2008,  1996,  2812,
         1997,  1037,  6721,  7099, 12102,  2000,  3671,  3012,  2005,  4852,
         5300,  1997,  1050,  2064,  2022,  3090,  2005,  1048,  2078,  1006,
         1007,  2004,  4076,  1024,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1087,  1087,  1087,  1010,  1060,  2078,  2024,  2981,  8833,
        12131,  9067,  6721, 10857,  2007, 10713,  1041,  1006,  8833,  1006,
         8418,  1007,  1007,  1010,  2059,  1062,  1027,  1006,  8833,  1006,
         1055,  2078,  1007,  1597,  1050,  1598,  1041,  1031,  8833,  1006,
         8418,  1007,  1033,  1007,   100,  1006,  1050,  1598, 13075,  1006,
         8833,  1006,  8418,  1007,  1007,  1007,   100,  2004, 24335, 13876,
        20214,  3973,  8107,  3671,  3012,  1010,  2073,  1055,  2078,  2003,
         1996,  4031,  1997,  1996,  8418,   102])"
2543,1,['table'], Moments,seg_501,′s. see table 7.15 for,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([ 101, 1531, 1055, 1012, 2156, 2795, 1021, 1012, 2321, 2005,  102])"
2544,1,"['mean', 'deviation', 'lognormal', 'distribution', 'lognormal distribution']", Moments,seg_501,example 7.21 mean deviation of lognormal distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0.])",tensor([5312]),"tensor([  101,  2742,  1021,  1012,  2538,  2812, 24353,  1997,  8833, 12131,
         9067,  4353,   102])"
2545,1,"['mean', 'deviation']", Moments,seg_501,find the mean deviation of lnd using theorem 7.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  2424,  1996,  2812, 24353,  1997,  1048,  4859,  2478,  9872,
         1021,  1012,  1015,  1012,   102])"
2546,1,"['tails', 'lognormal', 'distribution', 'lognormal distribution']", Moments,seg_501,"solution 7.21 let x∼ln( ,  2). as the lognormal distribution tails off to zero at the lower and upper limits, equation (7.1) is applicable. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  5576,  1021,  1012,  2538,  2292,   100,  1006,  1010,  1016,
         1007,  1012,  2004,  1996,  8833, 12131,  9067,  4353, 17448,  2125,
         2000,  5717,  2012,  1996,  2896,  1998,  3356,  6537,  1010,  8522,
         1006,  1021,  1012,  1015,  1007,  2003, 12711,  1012,  2023,  3957,
          102])"
2547,1,['limit'], Moments,seg_501,"put z = ((ln(x) −   −  2∕2), so that dx = ez+ + 2∕2dz. the lower limit in equation (7.100) becomes −∞, and the upper limit is 0 because ln(c) =   + 1 2 2. thus, we get md =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  2404,  1062,  1027,  1006,  1006,  1048,  2078,  1006,  1060,
         1007,  1597,  1597,   100,  1007,  1010,  2061,  2008,  1040,  2595,
         1027,  1041,  2480,  1009,  1009,   100,  1012,  1996,  2896,  5787,
         1999,  8522,  1006,  1021,  1012,  2531,  1007,  4150,  1597, 30128,
         1010,  1998,  1996,  3356,  5787,  2003,  1014,  2138,  1048,  2078,
         1006,  1039,  1007,  1027,  1009,  1015,  1016,  1016,  1012,  2947,
         1010,  2057,  2131,  9108,  1027,   102])"
2548,1,['limit'], Moments,seg_501,"now put (z∕  −  ∕2) =   so that dz =  dv. the upper limit remains the same, but the lower limit becomes − ∕2. upon substitution, the   cancels out from the numerator and denominator and equation (7.103) becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([5312]),"tensor([  101,  2085,  2404,  1006,   100,  1597,   100,  1007,  1027,  2061,
         2008,  1040,  2480,  1027,  1040,  2615,  1012,  1996,  3356,  5787,
         3464,  1996,  2168,  1010,  2021,  1996,  2896,  5787,  4150,  1597,
          100,  1012,  2588, 20885,  1010,  1996, 17542,  2015,  2041,  2013,
         1996, 16371,  5017,  8844,  1998,  7939, 20936, 27413,  1998,  8522,
         1006,  1021,  1012,  9800,  1007,  4150,   102])"
2549,0,[], Moments,seg_501,substitute in equation (7.102) to get the md as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([5312]),"tensor([ 101, 7681, 1999, 8522, 1006, 1021, 1012, 9402, 1007, 2000, 2131, 1996,
        9108, 2004,  102])"
2550,1,"['curve', 'normal']", Moments,seg_501,"divide the area under the normal curve from −∞ to − ∕2,− ∕2 to + ∕2, and from + ∕2 to +∞. we notice that as the total area is unity, the expression (7.105) is simply the middle area from− ∕2 to+ ∕2. hence, it becomes 2∗ φ( ∕2) − 1. substitute for the bracketed expression to get the md as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101, 11443,  1996,  2181,  2104,  1996,  3671,  7774,  2013,  1597,
        30128,  2000,  1597,   100,  1010,  1597,   100,  2000,  1009,   100,
         1010,  1998,  2013,  1009,   100,  2000,  1009,  1601,  1012,  2057,
         5060,  2008,  2004,  1996,  2561,  2181,  2003,  8499,  1010,  1996,
         3670,  1006,  1021,  1012,  8746,  1007,  2003,  3432,  1996,  2690,
         2181,  2013, 22543,   100,  2000,  1009,   100,  1012,  6516,  1010,
         2009,  4150,  1016, 30125,  1176,  1006,   100,  1007,  1597,  1015,
         1012,  7681,  2005,  1996, 21605,  2098,  3670,  2000,  2131,  1996,
         9108,  2004,   102])"
2551,1,"['mean', 'lognormal', 'geometric', 'variates', 'geometric mean']", Moments,seg_501,example 7.22 geometric mean of iid lognormal variates,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.])",tensor([5312]),"tensor([  101,  2742,  1021,  1012,  2570, 14965,  2812,  1997,  2462,  2094,
         8833, 12131,  9067, 13075, 13143,  2015,   102])"
2552,1,"['lognormal', 'random', 'random variables', 'distribution', 'variables', 'independent']", Moments,seg_501,"if x1,x2, · · · ,xn are independent lognormal random variables ln( ,  2), find the distribution of the gm = (x1 ∗ · · · ∗ xn)1∕n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  2065,  1060,  2487,  1010,  1060,  2475,  1010,  1087,  1087,
         1087,  1010,  1060,  2078,  2024,  2981,  8833, 12131,  9067,  6721,
        10857,  1048,  2078,  1006,  1010,  1016,  1007,  1010,  2424,  1996,
         4353,  1997,  1996, 13938,  1027,  1006,  1060,  2487,  1598,  1087,
         1087,  1087,  1598,  1060,  2078,  1007,   100,  1012,   102])"
2553,1,"['normally distributed', 'lognormal', 'normal', 'transformation']", Moments,seg_501,"solution 7.22 as xi is lnd, log(xi) are normally distributed. taking log gives y = log(gm) = (log(x1) + · · · + log(xn))∕n. each component in this expression is normal n( ,  2), so that y is n( ,  2∕n). taking the inverse transformation x = ey shows that gm is lognormal ln( ,  2∕n).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  5576,  1021,  1012,  2570,  2004,  8418,  2003,  1048,  4859,
         1010,  8833,  1006,  8418,  1007,  2024,  5373,  5500,  1012,  2635,
         8833,  3957,  1061,  1027,  8833,  1006, 13938,  1007,  1027,  1006,
         8833,  1006,  1060,  2487,  1007,  1009,  1087,  1087,  1087,  1009,
         8833,  1006,  1060,  2078,  1007,  1007,   100,  1012,  2169,  6922,
         1999,  2023,  3670,  2003,  3671,  1050,  1006,  1010,  1016,  1007,
         1010,  2061,  2008,  1061,  2003,  1050,  1006,  1010,   100,  1007,
         1012,  2635,  1996, 19262,  8651,  1060,  1027,  1041,  2100,  3065,
         2008, 13938,  2003,  8833, 12131,  9067,  1048,  2078,  1006,  1010,
          100,  1007,  1012,   102])"
2554,1,"['lognormal', 'expectation', 'lognormal distribution', 'distribution']", Moments,seg_501,"7.14.2.1 partial expectation of lognormal distribution the partial expectation of lnd has applications in economics, finance, and insurance. it is defined as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  1021,  1012,  2403,  1012,  1016,  1012,  1015,  7704, 17626,
         1997,  8833, 12131,  9067,  4353,  1996,  7704, 17626,  1997,  1048,
         4859,  2038,  5097,  1999,  5543,  1010,  5446,  1010,  1998,  5427,
         1012,  2009,  2003,  4225,  2004,   102])"
2555,1,['function'], Moments,seg_501,consider the survival function form (7.9) of md as,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([ 101, 5136, 1996, 7691, 3853, 2433, 1006, 1021, 1012, 1023, 1007, 1997,
        9108, 2004,  102])"
2556,0,[], Moments,seg_501,"using l’hospital’s rule, the first expression inside the bracket reduces to − s( ). divide throughout by 2 and rearrange equation (7.109) to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([5312]),"tensor([  101,  2478,  1048,  1521,  2902,  1521,  1055,  3627,  1010,  1996,
         2034,  3670,  2503,  1996, 21605, 13416,  2000,  1597,  1055,  1006,
         1007,  1012, 11443,  2802,  2011,  1016,  1998,  4373, 24388,  2063,
         8522,  1006,  1021,  1012, 11518,  1007,  2000,  2131,   102])"
2557,1,['expectation'], Moments,seg_501,"depending on whether k     or k    , the integral between them can be expressed in terms of φ(). this shows that the partial expectation of lnd is related to the md through the sf value at  .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([5312]),"tensor([  101,  5834,  2006,  3251,  1047,  2030,  1047,  1010,  1996,  9897,
         2090,  2068,  2064,  2022,  5228,  1999,  3408,  1997,  1176,  1006,
         1007,  1012,  2023,  3065,  2008,  1996,  7704, 17626,  1997,  1048,
         4859,  2003,  3141,  2000,  1996,  9108,  2083,  1996, 16420,  3643,
         2012,  1012,   102])"
2558,1,['mean'], Fitting Lognormal Distribution,seg_503,we have seen earlier that the mean e(x) = e + 2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11414,  8833, 12131,  9067,  4353])","tensor([ 101, 2057, 2031, 2464, 3041, 2008, 1996, 2812, 1041, 1006, 1060, 1007,
        1027, 1041, 1009, 1016,  102])"
2559,1,['variance'], Fitting Lognormal Distribution,seg_503,1  2 and variance v(x) = e2 + 2 (e 2 −,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([11414,  8833, 12131,  9067,  4353])","tensor([  101,  1015,  1016,  1998, 23284,  1058,  1006,  1060,  1007,  1027,
         1041,  2475,  1009,  1016,  1006,  1041,  1016,  1597,   102])"
2560,1,"['mean', 'estimates', 'sample', 'sample size', 'parameters', 'sample mean']", Fitting Lognormal Distribution,seg_503,"1). take log and solve for   and  2 to get   = ln(e(x)) − 0.5*ln(1+ (var(x)∕e(x)2)), and  2 = ln(1+(var(x)∕e(x)2)). if the sample size is sufficiently large, we could replace e(x) by the sample mean xn, and var(x) by s2n, and obtain estimates of the unknown parameters.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([11414,  8833, 12131,  9067,  4353])","tensor([  101,  1015,  1007,  1012,  2202,  8833,  1998,  9611,  2005,  1998,
         1016,  2000,  2131,  1027,  1048,  2078,  1006,  1041,  1006,  1060,
         1007,  1007,  1597,  1014,  1012,  1019,  1008,  1048,  2078,  1006,
         1015,  1009,  1006, 13075,  1006,  1060,  1007,   100,  1006,  1060,
         1007,  1016,  1007,  1007,  1010,  1998,  1016,  1027,  1048,  2078,
         1006,  1015,  1009,  1006, 13075,  1006,  1060,  1007,   100,  1006,
         1060,  1007,  1016,  1007,  1007,  1012,  2065,  1996,  7099,  2946,
         2003, 12949,  2312,  1010,  2057,  2071,  5672,  1041,  1006,  1060,
         1007,  2011,  1996,  7099,  2812,  1060,  2078,  1010,  1998, 13075,
         1006,  1060,  1007,  2011,  1055,  2475,  2078,  1010,  1998,  6855,
        10035,  1997,  1996,  4242, 11709,  1012,   102])"
2561,1,"['pareto', 'distribution']", PARETO DISTRIBUTION,seg_505,"this distribution is named after the italian economist vilfredo pareto (1848–1923), who studied the income distribution of populace during his lifetime. the pdf is ckcx−(c+1) where x ≥ k, c 0 are constants [230]. for income and wealth distributions, the constant c is greater than 1 (and near 2.0 in developed countries).",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11968, 18903,  4353])","tensor([  101,  2023,  4353,  2003,  2315,  2044,  1996,  3059, 11708,  6819,
        10270, 23417, 11968, 18903,  1006,  7993,  1516,  4927,  1007,  1010,
         2040,  3273,  1996,  3318,  4353,  1997, 22508,  2076,  2010,  6480,
         1012,  1996, 11135,  2003, 23616,  2278,  2595, 22543,  1006,  1039,
         1009,  1015,  1007,  2073,  1060,  1609,  1047,  1010,  1039,  1014,
         2024,  5377,  2015,  1031, 11816,  1033,  1012,  2005,  3318,  1998,
         7177, 20611,  1010,  1996,  5377,  1039,  2003,  3618,  2084,  1015,
         1006,  1998,  2379,  1016,  1012,  1014,  1999,  2764,  3032,  1007,
         1012,   102])"
2562,1,"['function', 'variation', 'coefficient', 'distribution', 'median', 'coefficient of variation']", Properties of Pareto Distribution,seg_507,"the survival function of this distribution takes the simple form s(x) = (k∕x)c. the median is given by k21∕c and coefficient of variation is 1∕√c(c − 2), which is independent of k.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  1996,  7691,  3853,  1997,  2023,  4353,  3138,  1996,  3722,
         2433,  1055,  1006,  1060,  1007,  1027,  1006,   100,  1007,  1039,
         1012,  1996,  3991,  2003,  2445,  2011,   100,  1998, 19064,  1997,
         8386,  2003,   100,  1006,  1039,  1597,  1016,  1007,  1010,  2029,
         2003,  2981,  1997,  1047,  1012,   102])"
2563,1,"['moments', 'functions']", Properties of Pareto Distribution,seg_507,7.15.1.1 moments and generating functions the ordinary and inverse moments are easy to find. moments higher than c do not exist.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  1021,  1012,  2321,  1012,  1015,  1012,  1015,  5312,  1998,
        11717,  4972,  1996,  6623,  1998, 19262,  5312,  2024,  3733,  2000,
         2424,  1012,  5312,  3020,  2084,  1039,  2079,  2025,  4839,  1012,
          102])"
2564,1,"['pareto distribution', 'moments', 'distribution', 'pareto']", Properties of Pareto Distribution,seg_507,example 7.23 moments of pareto distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  2742,  1021,  1012,  2603,  5312,  1997, 11968, 18903,  4353,
          102])"
2565,1,"['moment', 'pareto distribution', 'distribution', 'pareto']", Properties of Pareto Distribution,seg_507,prove that the rth moment of pareto distribution is  r = c ∗ kr∕(c − r) for r   c.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  6011,  2008,  1996, 19387,  2232,  2617,  1997, 11968, 18903,
         4353,  2003,  1054,  1027,  1039,  1598,   100,  1006,  1039,  1597,
         1054,  1007,  2005,  1054,  1039,  1012,   102])"
2566,1,['range'], Properties of Pareto Distribution,seg_507,"solution 7.23 as the range of x is from k to ∞, we have",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([ 101, 5576, 1021, 1012, 2603, 2004, 1996, 2846, 1997, 1060, 2003, 2013,
        1047, 2000, 1601, 1010, 2057, 2031,  102])"
2567,1,"['recurrence', 'mean', 'change of origin', 'transformation', 'variance', 'distributions', 'factor', 'recurrence relation', 'pareto distributions', 'change of origin and scale', 'pareto', 'median']", Properties of Pareto Distribution,seg_507,"as the integrand is a power of x, it converges for r   c to get ckc∕(r − c)(0 − kr−c). the kc cancels out giving  r = c ∗ kr∕(c − r). take c as a common factor from denominator to get  r = kr(1 − r∕c)−1. this gives the recurrence relation  r+1 =  r ∗ k ∗ (c − r)∕(c − r − 1). from this, the mean and variance are easily obtained as   = kc∕(c − 1),  2 = k2c∕[(c − 1)2(c − 2)]. the generalized pareto distributions are obtained by change of origin and scale transformation. this has cdf 1 − (k∕(x + b))c and mode k. median is k ∗ 21∕c.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  2004,  1996, 20014, 13910, 13033,  2003,  1037,  2373,  1997,
         1060,  1010,  2009, 28314,  2015,  2005,  1054,  1039,  2000,  2131,
          100,  1006,  1054,  1597,  1039,  1007,  1006,  1014,  1597,  1047,
         2099, 22543,  2278,  1007,  1012,  1996, 21117, 17542,  2015,  2041,
         3228,  1054,  1027,  1039,  1598,   100,  1006,  1039,  1597,  1054,
         1007,  1012,  2202,  1039,  2004,  1037,  2691,  5387,  2013,  7939,
        20936, 27413,  2000,  2131,  1054,  1027,  1047,  2099,  1006,  1015,
         1597,   100,  1007,  1597,  2487,  1012,  2023,  3957,  1996, 28667,
         3126, 24413,  7189,  1054,  1009,  1015,  1027,  1054,  1598,  1047,
         1598,  1006,  1039,  1597,  1054,  1007,   100,  1006,  1039,  1597,
         1054,  1597,  1015,  1007,  1012,  2013,  2023,  1010,  1996,  2812,
         1998, 23284,  2024,  4089,  4663,  2004,  1027,   100,  1006,  1039,
         1597,  1015,  1007,  1010,  1016,  1027,   100,  1031,  1006,  1039,
         1597,  1015,  1007,  1016,  1006,  1039,  1597,  1016,  1007,  1033,
         1012,  1996, 18960, 11968, 18903, 20611,  2024,  4663,  2011,  2689,
         1997,  4761,  1998,  4094,  8651,  1012,  2023,  2038,  3729,  2546,
         1015,  1597,  1006,   100,  1006,  1060,  1009,  1038,  1007,  1007,
         1039,  1998,  5549,  1047,  1012,  3991,  2003,  1047,  1598,   100,
         1012,   102])"
2568,1,"['mean', 'deviation', 'pareto distribution', 'distribution', 'pareto']", Properties of Pareto Distribution,seg_507,example 7.24 mean deviation of pareto distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  2742,  1021,  1012,  2484,  2812, 24353,  1997, 11968, 18903,
         4353,   102])"
2569,1,"['mean', 'deviation', 'pareto distribution', 'distribution', 'pareto']", Properties of Pareto Distribution,seg_507,"find the mean deviation of the pareto distribution f (x, k, c) = ckcx−(c+1) where x ≥ k.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996, 11968, 18903,  4353,
         1042,  1006,  1060,  1010,  1047,  1010,  1039,  1007,  1027, 23616,
         2278,  2595, 22543,  1006,  1039,  1009,  1015,  1007,  2073,  1060,
         1609,  1047,  1012,   102])"
2570,1,"['tail', 'pareto distribution', 'limit', 'distribution', 'pareto']", Properties of Pareto Distribution,seg_507,"solution 7.24 we apply theorem 7.1 (p. 256) to find the md. note that the pareto distribution is defined for x ≥ k. at x = k, the functional value is 1∕k. as the pdf does not tail off to zero at the lower limit (i.e., at k), equation (7.1) seems like inapplicable. we know that the cdf is 1 − (k∕x)c. if we apply l’hospital’s rule once on x ∗ f(x), we get 1 [1 − (k∕x)c]+x[ckc x−c−1]. the first term → 0 as x → k, whereas the second term tends to c. we need to use the equation (7.7). however, the term x f(x)∣ll=k → 0, so that it reduces to",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  5576,  1021,  1012,  2484,  2057,  6611,  9872,  1021,  1012,
         1015,  1006,  1052,  1012, 17273,  1007,  2000,  2424,  1996,  9108,
         1012,  3602,  2008,  1996, 11968, 18903,  4353,  2003,  4225,  2005,
         1060,  1609,  1047,  1012,  2012,  1060,  1027,  1047,  1010,  1996,
         8360,  3643,  2003,   100,  1012,  2004,  1996, 11135,  2515,  2025,
         5725,  2125,  2000,  5717,  2012,  1996,  2896,  5787,  1006,  1045,
         1012,  1041,  1012,  1010,  2012,  1047,  1007,  1010,  8522,  1006,
         1021,  1012,  1015,  1007,  3849,  2066, 27118,  9397, 19341,  3468,
         1012,  2057,  2113,  2008,  1996,  3729,  2546,  2003,  1015,  1597,
         1006,   100,  1007,  1039,  1012,  2065,  2057,  6611,  1048,  1521,
         2902,  1521,  1055,  3627,  2320,  2006,  1060,  1598,  1042,  1006,
         1060,  1007,  1010,  2057,  2131,  1015,  1031,  1015,  1597,  1006,
          100,  1007,  1039,  1033,  1009,  1060,  1031, 23616,  2278,  1060,
        22543,  2278, 27944,  1033,  1012,  1996,  2034,  2744,  1585,  1014,
         2004,  1060,  1585,  1047,  1010,  6168,  1996,  2117,  2744, 12102,
         2000,  1039,  1012,  2057,  2342,  2000,  2224,  1996,  8522,  1006,
         1021,  1012,  1021,  1007,  1012,  2174,  1010,  1996,  2744,  1060,
         1042,  1006,  1060,  1007,   100,  1027,  1047,  1585,  1014,  1010,
         2061,  2008,  2009, 13416,  2000,   102])"
2571,0,[], Properties of Pareto Distribution,seg_507,d x−cdx}. the expression inside the square bracket simplifies to,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,  1040,  1060, 22543, 19797,  2595,  1065,  1012,  1996,  3670,
         2503,  1996,  2675, 21605, 21934, 24759, 14144,  2000,   102])"
2572,1,['table'], Properties of Pareto Distribution,seg_507,k∕(c − 1) and the integral simplifies to (k∕(1 − c))(c − 1)c−1∕cc−1 + k∕(1 − c). the term k∕(1 − c) cancels with first term k∕(c − 1). take c outside from the second expression to get md = 2k(1 − (1∕c)c−1)/(c-1). see table 7.16 for further properties.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11968, 18903,  4353])","tensor([  101,   100,  1006,  1039,  1597,  1015,  1007,  1998,  1996,  9897,
        21934, 24759, 14144,  2000,  1006,   100,  1006,  1015,  1597,  1039,
         1007,  1007,  1006,  1039,  1597,  1015,  1007,   100,  1009,   100,
         1006,  1015,  1597,  1039,  1007,  1012,  1996,  2744,   100,  1006,
         1015,  1597,  1039,  1007, 17542,  2015,  2007,  2034,  2744,   100,
         1006,  1039,  1597,  1015,  1007,  1012,  2202,  1039,  2648,  2013,
         1996,  2117,  3670,  2000,  2131,  9108,  1027,  1016,  2243,  1006,
         1015,  1597,  1006,   100,  1007,  1039, 27944,  1007,  1013,  1006,
         1039,  1011,  1015,  1007,  1012,  2156,  2795,  1021,  1012,  2385,
         2005,  2582,  5144,  1012,   102])"
2573,1,"['function', 'gamma', 'pareto distribution', 'exponentially distributed', 'exponential distribution', 'distributions', 'results', 'gamma distribution', 'pareto distributions', 'distribution', 'exponential', 'exponentially', 'pareto', 'discrete', 'independent']", Relation to Other Distributions,seg_509,"this distribution is related to exponential distribution as follows: if y is exponentially distributed, then x = k ∗ exp(y∕c) has pareto distribution. the zipf distribution is the discrete analog of pareto distribution. as c → ∞, the pdf approaches dirac’s   function. left truncation results in pareto distributions. the sum of the logarithm of several independent scaled pareto distributions has a gamma distribution. see references 122, 230–233 for further properties.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2023,  4353,  2003,  3141,  2000, 27258,  4353,  2004,  4076,
         1024,  2065,  1061,  2003, 27258,  2135,  5500,  1010,  2059,  1060,
         1027,  1047,  1598,  4654,  2361,  1006,   100,  1007,  2038, 11968,
        18903,  4353,  1012,  1996, 14101,  2546,  4353,  2003,  1996, 16246,
        11698,  1997, 11968, 18903,  4353,  1012,  2004,  1039,  1585,  1601,
         1010,  1996, 11135,  8107, 16101,  6305,  1521,  1055,  3853,  1012,
         2187, 19817,  4609, 10719,  3463,  1999, 11968, 18903, 20611,  1012,
         1996,  7680,  1997,  1996,  8833,  8486,  2705,  2213,  1997,  2195,
         2981, 18953, 11968, 18903, 20611,  2038,  1037, 13091,  4353,  1012,
         2156,  7604, 13092,  1010, 11816,  1516, 22115,  2005,  2582,  5144,
         1012,   102])"
2574,1,"['random numbers', 'method', 'random', 'random number']", Algorithms,seg_511,"as the cdf is 1 − (k∕x)c, it is easy to generate random numbers using the inverse-cdf method. let u be a uniform random number. equate u = 1 − (k∕x)c and solve for x to get (1 − u)1∕c = k∕x or x = k∕(1 − u)1∕c.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([13792]),"tensor([  101,  2004,  1996,  3729,  2546,  2003,  1015,  1597,  1006,   100,
         1007,  1039,  1010,  2009,  2003,  3733,  2000,  9699,  6721,  3616,
         2478,  1996, 19262,  1011,  3729,  2546,  4118,  1012,  2292,  1057,
         2022,  1037,  6375,  6721,  2193,  1012,  1041, 16211,  2618,  1057,
         1027,  1015,  1597,  1006,   100,  1007,  1039,  1998,  9611,  2005,
         1060,  2000,  2131,  1006,  1015,  1597,  1057,  1007,   100,  1027,
          100,  2030,  1060,  1027,   100,  1006,  1015,  1597,  1057,  1007,
          100,  1012,   102])"
2575,1,"['laplace distribution', 'control', 'quality control', 'distribution', 'error']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"this distribution, invented by pierre laplace in 1774, has many applications in quality control, error modeling (called laplacian noise), and inventory control (especially of slow moving items). it is also called laplace distribution.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2023,  4353,  1010,  8826,  2011,  5578,  5001, 19217,  1999,
        17593,  1010,  2038,  2116,  5097,  1999,  3737,  2491,  1010,  7561,
        11643,  1006,  2170,  5001,  2721, 14483,  5005,  1007,  1010,  1998,
        12612,  2491,  1006,  2926,  1997,  4030,  3048,  5167,  1007,  1012,
         2009,  2003,  2036,  2170,  5001, 19217,  4353,  1012,   102])"
2576,1,"['location', 'parameter', 'location parameter', 'standard']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"where “a” is the location parameter and b is the scale parameter. the standard form is obtained by putting a = 0, b = 1 as f (z) = e−|z|.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2073,  1523,  1037,  1524,  2003,  1996,  3295, 16381,  1998,
         1038,  2003,  1996,  4094, 16381,  1012,  1996,  3115,  2433,  2003,
         4663,  2011,  5128,  1037,  1027,  1014,  1010,  1038,  1027,  1015,
         2004,  1042,  1006,  1062,  1007,  1027,  1041, 22543,  1064,  1062,
         1064,  1012,   102])"
2577,1,"['mean', 'variance', 'double exponential distribution', 'exponential distribution', 'distributions', 'moments', 'double exponential', 'distribution', 'exponential']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"7.16.0.1 properties of double exponential distribution this distribution is symmetric around x = a (see figure 7.11). hence 1 and all odd moments are zeros. the mean and variance are = a, and 2 = 2b2. when a = 0, the resulting distribution and that of two iid exponential(b) distributions are the same.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  1021,  1012,  2385,  1012,  1014,  1012,  1015,  5144,  1997,
         3313, 27258,  4353,  2023,  4353,  2003, 19490,  2105,  1060,  1027,
         1037,  1006,  2156,  3275,  1021,  1012,  2340,  1007,  1012,  6516,
         1015,  1998,  2035,  5976,  5312,  2024,  5717,  2015,  1012,  1996,
         2812,  1998, 23284,  2024,  1027,  1037,  1010,  1998,  1016,  1027,
         1016,  2497,  2475,  1012,  2043,  1037,  1027,  1014,  1010,  1996,
         4525,  4353,  1998,  2008,  1997,  2048,  2462,  2094, 27258,  1006,
         1038,  1007, 20611,  2024,  1996,  2168,  1012,   102])"
2578,1,"['even moments', 'moments', 'double exponential', 'exponential']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,example 7.25 even moments of double exponential,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2742,  1021,  1012,  2423,  2130,  5312,  1997,  3313, 27258,
          102])"
2579,1,"['even moments', 'moments', 'double exponential', 'exponential']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,prove that the even moments of double exponential are given by  2k = (2k)!b2k.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  6011,  2008,  1996,  2130,  5312,  1997,  3313, 27258,  2024,
         2445,  2011,  1016,  2243,  1027,  1006,  1016,  2243,  1007,   999,
         1038,  2475,  2243,  1012,   102])"
2580,1,"['moment', 'moments', 'distribution', 'symmetric']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"solution 7.25 as the distribution is symmetric, the odd moments are all zeros. the even moment is given by  2k =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  5576,  1021,  1012,  2423,  2004,  1996,  4353,  2003, 19490,
         1010,  1996,  5976,  5312,  2024,  2035,  5717,  2015,  1012,  1996,
         2130,  2617,  2003,  2445,  2011,  1016,  2243,  1027,   102])"
2581,0,[], DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"as   = a, put y = (x − a) and change the limits accordingly.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3313, 27258,  4353])","tensor([  101,  2004,  1027,  1037,  1010,  2404,  1061,  1027,  1006,  1060,
         1597,  1037,  1007,  1998,  2689,  1996,  6537, 11914,  1012,   102])"
2582,1,['gamma'], DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"put −y = t in the first integral. then, it becomes the second integral. hence  2k = 2 ∫0 ∞ y2k exp(−y∕b)dy. write y2k as y(2k+1)−1. using gamma integral, this",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2404,  1597,  2100,  1027,  1056,  1999,  1996,  2034,  9897,
         1012,  2059,  1010,  2009,  4150,  1996,  2117,  9897,  1012,  6516,
         1016,  2243,  1027,  1016,   100,  1601,  1061,  2475,  2243,  4654,
         2361,  1006,   100,  1007,  1040,  2100,  1012,  4339,  1061,  2475,
         2243,  2004,  1061,  1006,  1016,  2243,  1009,  1015,  1007,  1597,
         2487,  1012,  2478, 13091,  9897,  1010,  2023,   102])"
2583,0,[], DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"by integrating with respect to x, we get the cdf as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 3313, 27258,  4353])","tensor([  101,  2011, 22380,  2007,  4847,  2000,  1060,  1010,  2057,  2131,
         1996,  3729,  2546,  2004,   102])"
2584,1,"['laplace distribution', 'standard', 'distribution']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,the standard form of the laplace distribution is obtained by putting a = 0 and b = 1 in the above.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  1996,  3115,  2433,  1997,  1996,  5001, 19217,  4353,  2003,
         4663,  2011,  5128,  1037,  1027,  1014,  1998,  1038,  1027,  1015,
         1999,  1996,  2682,  1012,   102])"
2585,1,"['function', 'characteristic function']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,the characteristic function is obtained easily as follows:,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([ 101, 1996, 8281, 3853, 2003, 4663, 4089, 2004, 4076, 1024,  102])"
2586,1,"['variable', 'range']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"by splitting the range of integration from −∞ to a and from a to ∞ and changing the variable as y = (x − a)∕b, we get",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2011, 14541,  1996,  2846,  1997,  8346,  2013,  1597, 30128,
         2000,  1037,  1998,  2013,  1037,  2000,  1601,  1998,  5278,  1996,
         8023,  2004,  1061,  1027,  1006,  1060,  1597,  1037,  1007,   100,
         1010,  2057,  2131,   102])"
2587,1,"['mean', 'variance', 'table', 'functions', 'cauchy', 'distributions', 'laplace and cauchy distributions', 'characteristic functions']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"from which the mean and variance can be obtained easily as   = a and  2 = 2b2. for a = 0, b = ±1, this becomes (t) = 1∕(1 + t2), which shows that laplace and cauchy distributions are related through characteristic functions. see table 7.17 for further properties.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1.,
        1., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2013,  2029,  1996,  2812,  1998, 23284,  2064,  2022,  4663,
         4089,  2004,  1027,  1037,  1998,  1016,  1027,  1016,  2497,  2475,
         1012,  2005,  1037,  1027,  1014,  1010,  1038,  1027,  1081,  2487,
         1010,  2023,  4150,  1006,  1056,  1007,  1027,   100,  1006,  1015,
         1009,  1056,  2475,  1007,  1010,  2029,  3065,  2008,  5001, 19217,
         1998,  6187, 10875,  2100, 20611,  2024,  3141,  2083,  8281,  4972,
         1012,  2156,  2795,  1021,  1012,  2459,  2005,  2582,  5144,  1012,
          102])"
2588,1,"['mean', 'deviation', 'laplace distribution', 'distribution']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,example 7.26 mean deviation of laplace distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2742,  1021,  1012,  2656,  2812, 24353,  1997,  5001, 19217,
         4353,   102])"
2589,1,"['mean', 'deviation', 'laplace distribution', 'distribution']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,find the mean deviation of the laplace distribution using theorem 7.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996,  5001, 19217,  4353,
         2478,  9872,  1021,  1012,  1015,  1012,   102])"
2590,1,"['tails', 'laplace distribution', 'distribution']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"solution 7.26 let x∼laplace(a, b). as the laplace distribution tails off to zero at the lower and upper limits, equation (7.1) is applicable. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  5576,  1021,  1012,  2656,  2292,   100,  1006,  1037,  1010,
         1038,  1007,  1012,  2004,  1996,  5001, 19217,  4353, 17448,  2125,
         2000,  5717,  2012,  1996,  2896,  1998,  3356,  6537,  1010,  8522,
         1006,  1021,  1012,  1015,  1007,  2003, 12711,  1012,  2023,  3957,
          102])"
2591,1,['table'], DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,"(see table 7.17, the cdf line). put z = (a − x)∕b, so that dx = −bdz. when x = a, z = 0; but when x = −∞, z becomes +∞. cancel out the 2 to get",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  1006,  2156,  2795,  1021,  1012,  2459,  1010,  1996,  3729,
         2546,  2240,  1007,  1012,  2404,  1062,  1027,  1006,  1037,  1597,
         1060,  1007,   100,  1010,  2061,  2008,  1040,  2595,  1027,  1597,
         2497,  2094,  2480,  1012,  2043,  1060,  1027,  1037,  1010,  1062,
         1027,  1014,  1025,  2021,  2043,  1060,  1027,  1597, 30128,  1010,
         1062,  4150,  1009,  1601,  1012, 17542,  2041,  1996,  1016,  2000,
         2131,   102])"
2592,1,"['mean', 'deviation']", DOUBLE EXPONENTIAL DISTRIBUTION,seg_513,this shows that the mean deviation is b.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 3313, 27258,  4353])","tensor([  101,  2023,  3065,  2008,  1996,  2812, 24353,  2003,  1038,  1012,
          102])"
2593,1,"['laplace distribution', 'standard', 'distribution', 'exponential', 'variates', 'independent']", Relation to Other Distributions,seg_515,"the standard laplace distribution is the distribution of the difference of two independent exponential variates. in general, if xi are two independent exp( ) variates, then y = x1 − x2 has a laplace distribution. the ratio of two iid laplace variates l(0, b1) and l(0, b2) is a central f(2, 2) variate.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1996,  3115,  5001, 19217,  4353,  2003,  1996,  4353,  1997,
         1996,  4489,  1997,  2048,  2981, 27258, 13075, 13143,  2015,  1012,
         1999,  2236,  1010,  2065,  8418,  2024,  2048,  2981,  4654,  2361,
         1006,  1007, 13075, 13143,  2015,  1010,  2059,  1061,  1027,  1060,
         2487,  1597,  1060,  2475,  2038,  1037,  5001, 19217,  4353,  1012,
         1996,  6463,  1997,  2048,  2462,  2094,  5001, 19217, 13075, 13143,
         2015,  1048,  1006,  1014,  1010, 29491,  1007,  1998,  1048,  1006,
         1014,  1010,  1038,  2475,  1007,  2003,  1037,  2430,  1042,  1006,
         1016,  1010,  1016,  1007, 13075, 13143,  1012,   102])"
2594,1,"['table', 'confidence', 'predicted', 'model', 'data', 'sample variance', 'confidence intervals', 'contingency table', 'pearson', 'variance', 'multinomial', 'sample', 'intervals', 'distribution', 'multinomial distribution']", CENTRAL   DISTRIBUTION,seg_517,this distribution has a long history dating back to 1838 when bienayme obtained it as the limiting form of multinomial distribution (see figure 7.12). it was used by karl pearson for contingency table analysis during 1900. it is also used in testing goodness of fit between observed data and predicted model and in constructing confidence intervals for sample variance.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0., 1.,
        1., 0., 0.])","tensor([2430, 4353])","tensor([  101,  2023,  4353,  2038,  1037,  2146,  2381,  5306,  2067,  2000,
         9931,  2043, 29316,  4710,  4168,  4663,  2009,  2004,  1996, 14879,
         2433,  1997,  4800,  3630, 10092,  2140,  4353,  1006,  2156,  3275,
         1021,  1012,  2260,  1007,  1012,  2009,  2001,  2109,  2011,  6382,
        12874,  2005,  9530,  3436, 11916,  2795,  4106,  2076,  5141,  1012,
         2009,  2003,  2036,  2109,  1999,  5604, 15003,  1997,  4906,  2090,
         5159,  2951,  1998, 10173,  2944,  1998,  1999, 15696,  7023, 14025,
         2005,  7099, 23284,  1012,   102])"
2595,1,"['standard normal random variables', 'standard normal', 'random', 'normal', 'random variables', 'standard', 'variables', 'independent']", CENTRAL   DISTRIBUTION,seg_517,"if x1,x2, … ,xn are independent standard normal random variables, the distribution of y = x1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2430, 4353])","tensor([  101,  2065,  1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,
         1060,  2078,  2024,  2981,  3115,  3671,  6721, 10857,  1010,  1996,
         4353,  1997,  1061,  1027,  1060,  2487,   102])"
2596,1,"['parameter', 'distribution']", CENTRAL   DISTRIBUTION,seg_517,2 + · · · + xn2 is called the central  2 distribution. it has only one parameter called dof (n) with pdf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2430, 4353])","tensor([  101,  1016,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  2475,
         2003,  2170,  1996,  2430,  1016,  4353,  1012,  2009,  2038,  2069,
         2028, 16381,  2170,  2079,  2546,  1006,  1050,  1007,  2007, 11135,
          102])"
2597,1,"['gamma', 'gamma distribution', 'distribution', 'case']", CENTRAL   DISTRIBUTION,seg_517,"it is a special case of the gamma distribution gamma(n∕2, 1∕2).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([2430, 4353])","tensor([  101,  2009,  2003,  1037,  2569,  2553,  1997,  1996, 13091,  4353,
        13091,  1006,   100,  1010,   100,  1007,  1012,   102])"
2598,1,['distribution'], CENTRAL   DISTRIBUTION,seg_517,the distribution of√ 2 is known as chi distribution and has pdf,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([2430, 4353])","tensor([  101,  1996,  4353,  1997, 30127,  1016,  2003,  2124,  2004,  9610,
         4353,  1998,  2038, 11135,   102])"
2599,0,[], Properties of Central   Distribution,seg_519,"integrating equation (7.121) with respect to x, we get the cdf as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2430, 4353])","tensor([  101, 22380,  8522,  1006,  1021,  1012, 12606,  1007,  2007,  4847,
         2000,  1060,  1010,  2057,  2131,  1996,  3729,  2546,  2004,   102])"
2600,1,"['recurrence', 'function', 'gamma', 'gamma function', 'change of variable', 'variable']", Properties of Central   Distribution,seg_519,"make the change of variable u = y∕2 to get the above in terms of incomplete gamma function as fn(x) =  (n∕2, x∕2)∕γ(n∕2) = p(n∕2, x∕2). it satisfies the recurrence fn(x) − fn−2(x) = −2 ∗ fn(x).",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  2191,  1996,  2689,  1997,  8023,  1057,  1027,   100,  2000,
         2131,  1996,  2682,  1999,  3408,  1997, 12958, 13091,  3853,  2004,
         1042,  2078,  1006,  1060,  1007,  1027,  1006,   100,  1010,   100,
         1007,   100,  1006,   100,  1007,  1027,  1052,  1006,   100,  1010,
          100,  1007,  1012,  2009,  2938,  2483, 14213,  1996, 28667,  3126,
        24413,  1042,  2078,  1006,  1060,  1007,  1597,  1042,  2078, 22543,
         2475,  1006,  1060,  1007,  1027,  1597,  2475,  1598,  1042,  2078,
         1006,  1060,  1007,  1012,   102])"
2601,1,"['moments', 'functions']", Properties of Central   Distribution,seg_519,7.17.1.1 moments and generating functions the mgf is easily obtained as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  1021,  1012,  2459,  1012,  1015,  1012,  1015,  5312,  1998,
        11717,  4972,  1996, 11460,  2546,  2003,  4089,  4663,  2004,   102])"
2602,1,['moment'], Properties of Central   Distribution,seg_519,"from this, the kth moment is easily obtained as  k",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([ 101, 2013, 2023, 1010, 1996, 1047, 2705, 2617, 2003, 4089, 4663, 2004,
        1047,  102])"
2603,1,"['mean', 'variance', 'table']", Properties of Central   Distribution,seg_519,′ = 2kγ(n∕2 + k)∕γ(n∕2). the mean is n and variance is 2n. see table 7.18 for further properties.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  1531,  1027,  1016,  2243, 29721,  1006,   100,  1009,  1047,
         1007,   100,  1006,   100,  1007,  1012,  1996,  2812,  2003,  1050,
         1998, 23284,  2003,  1016,  2078,  1012,  2156,  2795,  1021,  1012,
         2324,  2005,  2582,  5144,  1012,   102])"
2604,1,"['mean', 'deviation', 'distribution']", Properties of Central   Distribution,seg_519,example 7.27 mean deviation of central  2 distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  2742,  1021,  1012,  2676,  2812, 24353,  1997,  2430,  1016,
         4353,   102])"
2605,1,"['mean', 'deviation', 'distribution']", Properties of Central   Distribution,seg_519,find the mean deviation of the central  2 distribution with pdf fx(n) = xn∕2−1e−x∕2∕[2n∕2γ(n∕2)].,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996,  2430,  1016,  4353,
         2007, 11135, 23292,  1006,  1050,  1007,  1027,   100,  1031,   100,
         1006,   100,  1007,  1033,  1012,   102])"
2606,1,"['tail', 'limit', 'distribution']", Properties of Central   Distribution,seg_519,"solution 7.27 we apply theorem 7.1 (p. 257) to find the md. as the  2 distribution does not tail off to zero at the lower limit (i.e., at 0) for n   3, equation (7.1) seems like not applicable. we know that the cdf is p(n∕2, x∕2). if we apply l’hospital’s rule once on x ∗ f(x), we find that it → 0 as x → 0. as the lim x ∗ f(x) = 0, and the theorem 7.1 becomes applicable. x→0 this gives md = 2 ∫0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  5576,  1021,  1012,  2676,  2057,  6611,  9872,  1021,  1012,
         1015,  1006,  1052,  1012, 24368,  1007,  2000,  2424,  1996,  9108,
         1012,  2004,  1996,  1016,  4353,  2515,  2025,  5725,  2125,  2000,
         5717,  2012,  1996,  2896,  5787,  1006,  1045,  1012,  1041,  1012,
         1010,  2012,  1014,  1007,  2005,  1050,  1017,  1010,  8522,  1006,
         1021,  1012,  1015,  1007,  3849,  2066,  2025, 12711,  1012,  2057,
         2113,  2008,  1996,  3729,  2546,  2003,  1052,  1006,   100,  1010,
          100,  1007,  1012,  2065,  2057,  6611,  1048,  1521,  2902,  1521,
         1055,  3627,  2320,  2006,  1060,  1598,  1042,  1006,  1060,  1007,
         1010,  2057,  2424,  2008,  2009,  1585,  1014,  2004,  1060,  1585,
         1014,  1012,  2004,  1996, 18525,  1060,  1598,  1042,  1006,  1060,
         1007,  1027,  1014,  1010,  1998,  1996,  9872,  1021,  1012,  1015,
         4150, 12711,  1012,  1060, 30113,  2692,  2023,  3957,  9108,  1027,
         1016,   100,   102])"
2607,1,"['critical values', 'median']", Properties of Central   Distribution,seg_519,see references 234 and 235 for properties including the median of 2 and reference 236 for critical values.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  2156,  7604, 22018,  1998, 17825,  2005,  5144,  2164,  1996,
         3991,  1997,  1016,  1998,  4431, 23593,  2005,  4187,  5300,  1012,
          102])"
2608,1,"['table', 'additivity property', 'distribution', 'noncentral', 'independent']", Properties of Central   Distribution,seg_519,"7.17.1.2 additivity property this distribution in particular and its noncentral version in general satisfies a reproductive property given below. if x ∼ 2m and y ∼ 2n are independent, then x + y ∼ 2m+n. this result was proved by helmert [238]. see table 7.4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  1021,  1012,  2459,  1012,  1015,  1012,  1016,  5587, 25090,
        24872,  3200,  2023,  4353,  1999,  3327,  1998,  2049,  2512, 13013,
         7941,  2544,  1999,  2236,  2938,  2483, 14213,  1037, 15124,  3200,
         2445,  2917,  1012,  2065,  1060,   100,  1016,  2213,  1998,  1061,
          100,  1016,  2078,  2024,  2981,  1010,  2059,  1060,  1009,  1061,
          100,  1016,  2213,  1009,  1050,  1012,  2023,  2765,  2001,  4928,
         2011, 16254,  8743,  1031, 22030,  1033,  1012,  2156,  2795,  1021,
         1012,  1018,  1012,   102])"
2609,1,"['mean', 'variance', 'standard normal', 'normal', 'standard']", Properties of Central   Distribution,seg_519,7.17.1.3 approximations wilson and hilferty proved that ( n2∕n)1∕3 is approximately normal with mean (1 − 2∕(9n)) and variance 2∕(9n). this allows the cdf to be expressed in terms of standard normal cdf as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0.])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  1021,  1012,  2459,  1012,  1015,  1012,  1017, 20167,  2015,
         4267,  1998,  7632, 10270, 15010,  4928,  2008,  1006,   100,  1007,
          100,  2003,  3155,  3671,  2007,  2812,  1006,  1015,  1597,   100,
         1006,  1023,  2078,  1007,  1007,  1998, 23284,   100,  1006,  1023,
         2078,  1007,  1012,  2023,  4473,  1996,  3729,  2546,  2000,  2022,
         5228,  1999,  3408,  1997,  3115,  3671,  3729,  2546,  2004,   102])"
2610,0,[], Properties of Central   Distribution,seg_519,"this has been extended by many researchers [239, 240].",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2430, 4353])","tensor([  101,  2023,  2038,  2042,  3668,  2011,  2116,  6950,  1031, 23688,
         1010, 11212,  1033,  1012,   102])"
2611,0,[], Relationships with Other Distributions,seg_521,"if x ∼  2n, then c ∗ x for c   0 is gamma(n∕2, 2c). it is related to the u = u(0, 1) as −2 log(u) ∼  2",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101,  2065,  1060,   100,  1016,  2078,  1010,  2059,  1039,  1598,
         1060,  2005,  1039,  1014,  2003, 13091,  1006,   100,  1010,  1016,
         2278,  1007,  1012,  2009,  2003,  3141,  2000,  1996,  1057,  1027,
         1057,  1006,  1014,  1010,  1015,  1007,  2004,  1597,  2475,  8833,
         1006,  1057,  1007,   100,  1016,   102])"
2612,1,"['distributions', 'poisson', 'normal', 'distribution']", Relationships with Other Distributions,seg_521,"2. the sf of a chi-square distribution is related to the poisson cdf (section 6.9 in p. 229). it is also related to the normal, beta, t, and f distributions (see references 239, 241–245).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 6550,  2007,  2060, 20611])","tensor([  101,  1016,  1012,  1996, 16420,  1997,  1037,  9610,  1011,  2675,
         4353,  2003,  3141,  2000,  1996, 13433, 24077,  3729,  2546,  1006,
         2930,  1020,  1012,  1023,  1999,  1052,  1012, 22777,  1007,  1012,
         2009,  2003,  2036,  3141,  2000,  1996,  3671,  1010,  8247,  1010,
         1056,  1010,  1998,  1042, 20611,  1006,  2156,  7604, 23688,  1010,
        22343,  1516, 21005,  1007,  1012,   102])"
2613,1,"['tests', 'correlation', 'population', 'confidence', 'coefficients', 'normal', 'statistical', 'population variance', 'standard', 'confidence intervals', 'significance', 'correlation coefficients', 'variance', 'standard normal', 'sample', 'statistical inference', 'intervals', 'distribution']", STUDENTS T DISTRIBUTION,seg_523,"this distribution was obtained by william gosset [246] as the distribution of the ratio z∕√ 2(n)∕n where z is a standard normal variate and z and 2(n) are independent. a derivation is given in chapter 11. it is frequently encountered in small sample statistical inference when population variance is unknown. it is used in tests for the means, in testing the significance of correlation coefficients, in constructing confidence intervals, and so on.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([2493, 1056, 4353])","tensor([  101,  2023,  4353,  2001,  4663,  2011,  2520,  2175, 11393,  2102,
         1031, 22376,  1033,  2004,  1996,  4353,  1997,  1996,  6463,   100,
         1016,  1006,  1050,  1007,   100,  2073,  1062,  2003,  1037,  3115,
         3671, 13075, 13143,  1998,  1062,  1998,  1016,  1006,  1050,  1007,
         2024,  2981,  1012,  1037, 29280,  2003,  2445,  1999,  3127,  2340,
         1012,  2009,  2003,  4703,  8567,  1999,  2235,  7099,  7778, 28937,
         2043,  2313, 23284,  2003,  4242,  1012,  2009,  2003,  2109,  1999,
         5852,  2005,  1996,  2965,  1010,  1999,  5604,  1996,  7784,  1997,
        16902, 21374,  1010,  1999, 15696,  7023, 14025,  1010,  1998,  2061,
         2006,  1012,   102])"
2614,1,"['parameter', 'sample', 'statistical inference', 'sample size', 'adjusted', 'statistical']", STUDENTS T DISTRIBUTION,seg_523,"it has a single parameter n called the dof (df), which was described in chapter 3. theoretically, n need not be an integer. as n represents the sample size adjusted for “loss of information,” it is always an integer in statistical inference. the pdf is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([2493, 1056, 4353])","tensor([  101,  2009,  2038,  1037,  2309, 16381,  1050,  2170,  1996,  2079,
         2546,  1006,  1040,  2546,  1007,  1010,  2029,  2001,  2649,  1999,
         3127,  1017,  1012, 22634,  1010,  1050,  2342,  2025,  2022,  2019,
        16109,  1012,  2004,  1050,  5836,  1996,  7099,  2946, 10426,  2005,
         1523,  3279,  1997,  2592,  1010,  1524,  2009,  2003,  2467,  2019,
        16109,  1999,  7778, 28937,  1012,  1996, 11135,  2003,  2445,  2011,
          102])"
2615,1,"['change of origin', 'function', 'symmetric', 'change of origin and scale', 'transformation']", STUDENTS T DISTRIBUTION,seg_523,"where k = γ((n + 1)∕2)∕[√n  γ(n∕2)]. as it is an even function of t, it is always symmetric around t = 0. the more general form is obtained by a change of origin and scale transformation t = (y −  )∕c.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2493, 1056, 4353])","tensor([  101,  2073,  1047,  1027,  1157,  1006,  1006,  1050,  1009,  1015,
         1007,   100,  1007,   100,  1031,  1600,  2078,  1157,  1006,   100,
         1007,  1033,  1012,  2004,  2009,  2003,  2019,  2130,  3853,  1997,
         1056,  1010,  2009,  2003,  2467, 19490,  2105,  1056,  1027,  1014,
         1012,  1996,  2062,  2236,  2433,  2003,  4663,  2011,  1037,  2689,
         1997,  4761,  1998,  4094,  8651,  1056,  1027,  1006,  1061,  1597,
         1007,   100,  1012,   102])"
2616,1,"['mean', 'parameter', 'normal distribution', 'variance', 'standard normal distribution', 'unimodal', 'tails', 'standard normal', 'normal', 'standard', 'distribution', 'symmetric']", Properties of Students T Distribution,seg_525,"it is always symmetric, unimodal with mode t = 0. the modal value is (γ(n + 1)∕2)∕[√n γ(n∕2)]. the mean = 0 if n 1 and does not exist otherwise. it has a single parameter n, which controls both the spread and peakedness. for higher values of n, the flatness in the tails decreases, and the peakedness increases. eventually, it coincides with the standard normal distribution for large n. the variance is n∕(n − 2) if n 2.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2009,  2003,  2467, 19490,  1010,  4895, 16339,  9305,  2007,
         5549,  1056,  1027,  1014,  1012,  1996, 16913,  2389,  3643,  2003,
         1006,  1157,  1006,  1050,  1009,  1015,  1007,   100,  1007,   100,
         1031,  1600,  2078,  1157,  1006,   100,  1007,  1033,  1012,  1996,
         2812,  1027,  1014,  2065,  1050,  1015,  1998,  2515,  2025,  4839,
         4728,  1012,  2009,  2038,  1037,  2309, 16381,  1050,  1010,  2029,
         7711,  2119,  1996,  3659,  1998,  6601,  2791,  1012,  2005,  3020,
         5300,  1997,  1050,  1010,  1996,  4257,  2791,  1999,  1996, 17448,
        17913,  1010,  1998,  1996,  6601,  2791,  7457,  1012,  2776,  1010,
         2009, 19680,  2015,  2007,  1996,  3115,  3671,  4353,  2005,  2312,
         1050,  1012,  1996, 23284,  2003,   100,  1006,  1050,  1597,  1016,
         1007,  2065,  1050,  1016,  1012,   102])"
2617,1,"['kurtosis', 'coefficient', 'distribution']", Properties of Students T Distribution,seg_525,"the distribution is concave upward for |t|   −√(n∕(n + 2)) and concave 6 downward otherwise. for n   4, the kurtosis coefficient is given by  2 = 3 + n−4 ,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  1996,  4353,  2003,  9530, 27454, 10745,  2005,  1064,  1056,
         1064,  1597, 30127,  1006,   100,  1006,  1050,  1009,  1016,  1007,
         1007,  1998,  9530, 27454,  1020, 14047,  4728,  1012,  2005,  1050,
         1018,  1010,  1996,  9679, 12650, 19064,  2003,  2445,  2011,  1016,
         1027,  1017,  1009,  1050, 22543,  2549,  1010,   102])"
2618,1,['leptokurtic'], Properties of Students T Distribution,seg_525,showing that it is always leptokurtic. write the pdf in equation (7.132) as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  4760,  2008,  2009,  2003,  2467,  3393, 13876, 21940, 28228,
         2278,  1012,  4339,  1996, 11135,  1999,  8522,  1006,  1021,  1012,
        14078,  1007,  2004,   102])"
2619,1,"['standard normal', 'distributions', 'normal', 'standard', 'distribution', 'asymmetric']", Properties of Students T Distribution,seg_525,"2 as n → ∞. this shows that the limiting distribution is a standard normal. by factoring the pdf into two asymmetric products, jones ; faddy obtained the skew-t distributions",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  1016,  2004,  1050,  1585,  1601,  1012,  2023,  3065,  2008,
         1996, 14879,  4353,  2003,  1037,  3115,  3671,  1012,  2011,  5387,
         2075,  1996, 11135,  2046,  2048,  2004, 24335, 12589,  3688,  1010,
         3557,  1025,  6904, 14968,  4663,  1996, 15315,  7974,  1011,  1056,
        20611,   102])"
2620,1,"['tail', 'statistical tests', 'tail areas', 'tests', 'distribution', 'statistical']", Properties of Students T Distribution,seg_525,"where k is given by 1∕k = c1∕22c−1b(a, b) and c = (a + b) [247]. see references 146, 248–251 for tail areas, reference 252 for the distribution of the difference of two t-variables, and reference 253 for applications to statistical tests.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2073,  1047,  2003,  2445,  2011,   100,  1027,   100,  1006,
         1037,  1010,  1038,  1007,  1998,  1039,  1027,  1006,  1037,  1009,
         1038,  1007,  1031, 23380,  1033,  1012,  2156,  7604, 16333,  1010,
        24568,  1516, 22582,  2005,  5725,  2752,  1010,  4431, 22898,  2005,
         1996,  4353,  1997,  1996,  4489,  1997,  2048,  1056,  1011, 10857,
         1010,  1998,  4431, 23254,  2005,  5097,  2000,  7778,  5852,  1012,
          102])"
2621,1,"['mean', 'deviation', 't distribution', 'distribution']", Properties of Students T Distribution,seg_525,example 7.28 mean deviation of student’s t distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2742,  1021,  1012,  2654,  2812, 24353,  1997,  3076,  1521,
         1055,  1056,  4353,   102])"
2622,1,"['mean', 'deviation', 't distribution', 'distribution']", Properties of Students T Distribution,seg_525,find the mean deviation of student’s t distribution using theorem 7.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  3076,  1521,  1055,  1056,
         4353,  2478,  9872,  1021,  1012,  1015,  1012,   102])"
2623,1,['symmetric'], Properties of Students T Distribution,seg_525,"solution 7.28 let k = γ((n + 1)∕2)∕[√n γ(n∕2)]. as the student’s t distribution is symmetric around zero, the md is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  5576,  1021,  1012,  2654,  2292,  1047,  1027,  1157,  1006,
         1006,  1050,  1009,  1015,  1007,   100,  1007,   100,  1031,  1600,
         2078,  1157,  1006,   100,  1007,  1033,  1012,  2004,  1996,  3076,
         1521,  1055,  1056,  4353,  2003, 19490,  2105,  5717,  1010,  1996,
         9108,  2003,  2445,  2011,   102])"
2624,0,[], Properties of Students T Distribution,seg_525,"put t2 = n tan2( ) so that t =√n tan( ), and dt =√n sec2( )d . the limits of integration become 0 to  ∕2 and we get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2404,  1056,  2475,  1027,  1050,  9092,  2475,  1006,  1007,
         2061,  2008,  1056,  1027,  1600,  2078,  9092,  1006,  1007,  1010,
         1998, 26718,  1027,  1600,  2078, 10819,  2475,  1006,  1007,  1040,
         1012,  1996,  6537,  1997,  8346,  2468,  1014,  2000,   100,  1998,
         2057,  2131,   102])"
2625,0,[], Properties of Students T Distribution,seg_525,"put cos( ) = t so that sin( )d  = −dt, and the limits are changed as 1 to 0; and",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2404,  2522,  2015,  1006,  1007,  1027,  1056,  2061,  2008,
         8254,  1006,  1007,  1040,  1027,  1597, 11927,  1010,  1998,  1996,
         6537,  2024,  2904,  2004,  1015,  2000,  1014,  1025,  1998,   102])"
2626,1,"['complete beta function', 'function', 'beta function']", Properties of Students T Distribution,seg_525,"as the integral evaluates to 1∕(n − 1), md = 2√n∕[(n − 1)b(1∕2, n∕2)]. expand the complete beta function b(1∕2, n∕2) = γ(1∕2)γ(n∕2)∕γ((n + 1)∕2) and write γ((n + 1)∕2) = ((n − 1)∕2)γ((n − 1)∕2). one (n − 1) cancels out from numerator and denominator giving the alternative expression",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2004,  1996,  9897, 16157,  2015,  2000,   100,  1006,  1050,
         1597,  1015,  1007,  1010,  9108,  1027,   100,  1031,  1006,  1050,
         1597,  1015,  1007,  1038,  1006,   100,  1010,   100,  1007,  1033,
         1012,  7818,  1996,  3143,  8247,  3853,  1038,  1006,   100,  1010,
          100,  1007,  1027,  1157,  1006,   100,  1007,  1157,  1006,   100,
         1007,   100,  1006,  1006,  1050,  1009,  1015,  1007,   100,  1007,
         1998,  4339,  1157,  1006,  1006,  1050,  1009,  1015,  1007,   100,
         1007,  1027,  1006,  1006,  1050,  1597,  1015,  1007,   100,  1007,
         1157,  1006,  1006,  1050,  1597,  1015,  1007,   100,  1007,  1012,
         2028,  1006,  1050,  1597,  1015,  1007, 17542,  2015,  2041,  2013,
        16371,  5017,  8844,  1998,  7939, 20936, 27413,  3228,  1996,  4522,
         3670,   102])"
2627,1,"['t distribution', 'tails', 'distribution']", Properties of Students T Distribution,seg_525,"√n∕ γ((n − 1)∕2)∕γ(n∕2). next we apply the theorem 7.1 to find the md. as the student’s t distribution tails off to zero at the lower and upper limits, equation (7.1) is applicable. this",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,   100,  1157,  1006,  1006,  1050,  1597,  1015,  1007,   100,
         1007,   100,  1006,   100,  1007,  1012,  2279,  2057,  6611,  1996,
         9872,  1021,  1012,  1015,  2000,  2424,  1996,  9108,  1012,  2004,
         1996,  3076,  1521,  1055,  1056,  4353, 17448,  2125,  2000,  5717,
         2012,  1996,  2896,  1998,  3356,  6537,  1010,  8522,  1006,  1021,
         1012,  1015,  1007,  2003, 12711,  1012,  2023,   102])"
2628,0,[], Properties of Students T Distribution,seg_525,as the sf can be expressed in terms of the ibf as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2004,  1996, 16420,  2064,  2022,  5228,  1999,  3408,  1997,
         1996, 21307,  2546,  2004,   102])"
2629,1,['table'], Properties of Students T Distribution,seg_525,"where y = t2∕(n + t2), and sign(t) = −1 for t   0 (see table 7.19, the cdf line), equation (7.139) becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([  101,  2073,  1061,  1027,   100,  1006,  1050,  1009,  1056,  2475,
         1007,  1010,  1998,  3696,  1006,  1056,  1007,  1027,  1597,  2487,
         2005,  1056,  1014,  1006,  2156,  2795,  1021,  1012,  2539,  1010,
         1996,  3729,  2546,  2240,  1007,  1010,  8522,  1006,  1021,  1012,
        16621,  1007,  4150,   102])"
2630,0,[], Properties of Students T Distribution,seg_525,the first term is zero using l’hospital’s rule. take 2n outside the integral to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 2493, 1056, 4353])","tensor([ 101, 1996, 2034, 2744, 2003, 5717, 2478, 1048, 1521, 2902, 1521, 1055,
        3627, 1012, 2202, 1016, 2078, 2648, 1996, 9897, 2000, 2131,  102])"
2631,1,"['cauchy', 'cauchy distribution', 'distribution']", Relation to Other Distributions,seg_527,"for n = 1, it reduces to the cauchy distribution. if x and y are iid  2-distributed",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2005,  1050,  1027,  1015,  1010,  2009, 13416,  2000,  1996,
         6187, 10875,  2100,  4353,  1012,  2065,  1060,  1998,  1061,  2024,
         2462,  2094,  1016,  1011,  5500,   102])"
2632,1,['variables'], Relation to Other Distributions,seg_527,"random variables with the same dof, then (√n∕2)(x − y)∕√",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  6721, 10857,  2007,  1996,  2168,  2079,  2546,  1010,  2059,
         1006,   100,  1007,  1006,  1060,  1597,  1061,  1007,   100,   102])"
2633,1,['variates'], Relation to Other Distributions,seg_527,"tributed [254]. if x is an f variates with ndf , then t = √",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  7050,  2094,  1031, 22234,  1033,  1012,  2065,  1060,  2003,
         2019,  1042, 13075, 13143,  2015,  2007,  1050, 20952,  1010,  2059,
         1056,  1027,  1600,   102])"
2634,1,"['normal', 'normal distribution', 'distribution']", Relation to Other Distributions,seg_527,"n (√ x − 1∕√ x) is student’s t(n). the analog of log normal to normal distribution is the log-student’s t distribution as f (y, n) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1050,  1006,  1600,  1060,  1597,   100,  1060,  1007,  2003,
         3076,  1521,  1055,  1056,  1006,  1050,  1007,  1012,  1996, 11698,
         1997,  8833,  3671,  2000,  3671,  4353,  2003,  1996,  8833,  1011,
         3076,  1521,  1055,  1056,  4353,  2004,  1042,  1006,  1061,  1010,
         1050,  1007,  1027,   102])"
2635,1,"['t distribution', 'distribution']", Relation to Other Distributions,seg_527,where y = log(t) has a student’s t distribution (p. 311).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2073,  1061,  1027,  8833,  1006,  1056,  1007,  2038,  1037,
         3076,  1521,  1055,  1056,  4353,  1006,  1052,  1012, 23532,  1007,
         1012,   102])"
2636,1,"['tests', 'correlation', 'confidence', 'coefficients', 'random variable', 'tail areas', 'statistical', 'hypothesis', 'confidence intervals', 'significance', 'correlation coefficients', 'tail', 'sample', 'random', 'statistical inference', 'intervals', 'distribution', 'variable']", Relation to Other Distributions,seg_527,"7.18.2.1 tail areas the cdf of a student’s t random variable is encountered frequently in small sample statistical inference. for example, it is used in tests for the means, testing the significance of correlation coefficients, and constructing confidence intervals for means. the area under student’s distribution from −t to +t is of special interest in finding two-sided confidence intervals and tests of hypothesis.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1021,  1012,  2324,  1012,  1016,  1012,  1015,  5725,  2752,
         1996,  3729,  2546,  1997,  1037,  3076,  1521,  1055,  1056,  6721,
         8023,  2003,  8567,  4703,  1999,  2235,  7099,  7778, 28937,  1012,
         2005,  2742,  1010,  2009,  2003,  2109,  1999,  5852,  2005,  1996,
         2965,  1010,  5604,  1996,  7784,  1997, 16902, 21374,  1010,  1998,
        15696,  7023, 14025,  2005,  2965,  1012,  1996,  2181,  2104,  3076,
         1521,  1055,  4353,  2013,  1597,  2102,  2000,  1009,  1056,  2003,
         1997,  2569,  3037,  1999,  4531,  2048,  1011, 11536,  7023, 14025,
         1998,  5852,  1997, 10744,  1012,   102])"
2637,1,['transformation'], Relation to Other Distributions,seg_527,this integral can be converted into an ibf by the transformation y = n∕(n + x2),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2023,  9897,  2064,  2022,  4991,  2046,  2019, 21307,  2546,
         2011,  1996,  8651,  1061,  1027,   100,  1006,  1050,  1009,  1060,
         2475,  1007,   102])"
2638,1,['symmetry'], Relation to Other Distributions,seg_527,"owing to the symmetry, the area from ±t to the mode (x = 0) is",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101, 11427,  2000,  1996, 14991,  1010,  1996,  2181,  2013,  1081,
         2102,  2000,  1996,  5549,  1006,  1060,  1027,  1014,  1007,  2003,
          102])"
2639,1,['symmetry'], Relation to Other Distributions,seg_527,"owing to symmetry, the first integral evaluates to 1/2. represent the second integral using equation (7.150) to get",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101, 11427,  2000, 14991,  1010,  1996,  2034,  9897, 16157,  2015,
         2000,  1015,  1013,  1016,  1012,  5050,  1996,  2117,  9897,  2478,
         8522,  1006,  1021,  1012,  5018,  1007,  2000,  2131,   102])"
2640,1,"['t distribution', 'degrees of freedom', 'distribution']", Relation to Other Distributions,seg_527,"2), and i(x; a, b) is the ibf. for even degrees of freedom, the cdf of student’s t distribution can be obtained as fn(t) =:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1016,  1007,  1010,  1998,  1045,  1006,  1060,  1025,  1037,
         1010,  1038,  1007,  2003,  1996, 21307,  2546,  1012,  2005,  2130,
         5445,  1997,  4071,  1010,  1996,  3729,  2546,  1997,  3076,  1521,
         1055,  1056,  4353,  2064,  2022,  4663,  2004,  1042,  2078,  1006,
         1056,  1007,  1027,  1024,   102])"
2641,1,['cases'], Relation to Other Distributions,seg_527,the special cases n = 2 and n = 4 are f2(t) = 1,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([ 101, 1996, 2569, 3572, 1050, 1027, 1016, 1998, 1050, 1027, 1018, 2024,
        1042, 2475, 1006, 1056, 1007, 1027, 1015,  102])"
2642,1,['cauchy'], Relation to Other Distributions,seg_527,"(1 + 2∕(4 + t2))t∕√(4 + t2)]. as mentioned earlier, this reduces to cauchy cdf for n = 1 as 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1006,  1015,  1009,   100,  1006,  1018,  1009,  1056,  2475,
         1007,  1007,   100,  1006,  1018,  1009,  1056,  2475,  1007,  1033,
         1012,  2004,  3855,  3041,  1010,  2023, 13416,  2000,  6187, 10875,
         2100,  3729,  2546,  2005,  1050,  1027,  1015,  2004,  1015,   102])"
2643,1,"['functions', 'even moments', 'moments', 'distribution', 'symmetric']", Relation to Other Distributions,seg_527,"7.18.2.2 moments and generating functions as this distribution is symmetric, all odd moments vanish. the even moments are given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1021,  1012,  2324,  1012,  1016,  1012,  1016,  5312,  1998,
        11717,  4972,  2004,  2023,  4353,  2003, 19490,  1010,  2035,  5976,
         5312, 25887,  1012,  1996,  2130,  5312,  2024,  2445,  2011,   102])"
2644,1,['recurrence'], Relation to Other Distributions,seg_527,this satisfies the first-order recurrence,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2023,  2938,  2483, 14213,  1996,  2034,  1011,  2344, 28667,
         3126, 24413,   102])"
2645,1,"['function', 'characteristic function', 'table']", Relation to Other Distributions,seg_527,repeated application of which gives a closed-form expression (see table 7.19). the characteristic function is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([ 101, 5567, 4646, 1997, 2029, 3957, 1037, 2701, 1011, 2433, 3670, 1006,
        2156, 2795, 1021, 1012, 2539, 1007, 1012, 1996, 8281, 3853, 2003, 2445,
        2011,  102])"
2646,1,"['variable', 'dummy variable']", Relation to Other Distributions,seg_527,"where we have used the variable x instead of t owing to the dummy variable in the chf [255]. upon putting x2∕n = y2, this becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2073,  2057,  2031,  2109,  1996,  8023,  1060,  2612,  1997,
         1056, 11427,  2000,  1996, 24369,  8023,  1999,  1996, 10381,  2546,
         1031, 20637,  1033,  1012,  2588,  5128,   100,  1027,  1061,  2475,
         1010,  2023,  4150,   102])"
2647,1,"['recurrence', 'table']", Relation to Other Distributions,seg_527,"if n is odd (=2m + 1), this reduces to exp(−|t√n|)sn(|t√n|) where s is a polynomial of degree n − 1 that satisfies the recurrence sm+3(t) = sm+1(t) + t2∕(m2 − 1)sm−1(t). see table 7.19 for further properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2065,  1050,  2003,  5976,  1006,  1027,  1016,  2213,  1009,
         1015,  1007,  1010,  2023, 13416,  2000,  4654,  2361,  1006,  1597,
         1064,  1056, 30127,  2078,  1064,  1007,  1055,  2078,  1006,  1064,
         1056, 30127,  2078,  1064,  1007,  2073,  1055,  2003,  1037, 17505,
         1997,  3014,  1050,  1597,  1015,  2008,  2938,  2483, 14213,  1996,
        28667,  3126, 24413, 15488,  1009,  1017,  1006,  1056,  1007,  1027,
        15488,  1009,  1015,  1006,  1056,  1007,  1009,   100,  1006, 25525,
         1597,  1015,  1007, 15488, 27944,  1006,  1056,  1007,  1012,  2156,
         2795,  1021,  1012,  2539,  2005,  2582,  5144,  1012,   102])"
2648,1,"['test statistic', 'statistical tests', 'null distribution', 'variance', 'test', 'population', 'sample', 'tests', 'anova', 'sample variance', 'distribution', 'statistical', 'f distribution', 'statistic', 'normality']", SNEDECORS F DISTRIBUTION,seg_529,"this distribution, named after g.w.snedecor [256], is used extensively in anova and related procedures. this is due to the normality assumption of the population from which sample came, so that the null distribution of the test statistic has an f distribution. it is also used in computing the power of various statistical tests that employ the sample variance.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([1055, 7228, 8586, 5668, 1042, 4353])","tensor([  101,  2023,  4353,  1010,  2315,  2044,  1043,  1012,  1059,  1012,
         1055,  7228,  8586,  2953,  1031, 17273,  1033,  1010,  2003,  2109,
         8077,  1999,  2019,  7103,  1998,  3141,  8853,  1012,  2023,  2003,
         2349,  2000,  1996,  3671,  3012, 11213,  1997,  1996,  2313,  2013,
         2029,  7099,  2234,  1010,  2061,  2008,  1996, 19701,  4353,  1997,
         1996,  3231, 28093,  6553,  2038,  2019,  1042,  4353,  1012,  2009,
         2003,  2036,  2109,  1999,  9798,  1996,  2373,  1997,  2536,  7778,
         5852,  2008, 12666,  1996,  7099, 23284,  1012,   102])"
2649,1,"['variates', 'independent', 'distribution']", SNEDECORS F DISTRIBUTION,seg_529,this is the distribution of the ratio of two independent scaled  2 variates f =,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0.,
        0.])","tensor([1055, 7228, 8586, 5668, 1042, 4353])","tensor([  101,  2023,  2003,  1996,  4353,  1997,  1996,  6463,  1997,  2048,
         2981, 18953,  1016, 13075, 13143,  2015,  1042,  1027,   102])"
2650,1,"['f distribution', 'distribution']", SNEDECORS F DISTRIBUTION,seg_529,"a derivation is given in chapter 11. the unscaled f distribution is the distribution of the ratio  2(m)∕ 2(n), which is beta-ii (m∕2, n∕2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([1055, 7228, 8586, 5668, 1042, 4353])","tensor([  101,  1037, 29280,  2003,  2445,  1999,  3127,  2340,  1012,  1996,
         4895, 15782,  3709,  1042,  4353,  2003,  1996,  4353,  1997,  1996,
         6463,  1016,  1006,  1049,  1007,   100,  1016,  1006,  1050,  1007,
         1010,  2029,  2003,  8247,  1011,  2462,  1006,   100,  1010,   100,
         1007,  1012,   102])"
2651,1,"['functions', 'symmetry', 'normality', 'independent', 'case', 'parameter', 'skewed', 'gamma distribution', 'parameters', 'variates', 'tail', 'gamma', 'moments', 'distribution', 'f distribution', 'long right tail']", Properties of F Distribution,seg_531,"as both the numerator and denominator variates in the definition are 2, this distribution is defined for x 0. owing to symmetry, 1∕f has exactly identical distribution with the dof reversed. the parameters m and n are integers in practical applications. theoretically, the distribution is defined for noninteger dof values as well. the distribution of z = (1∕2) log(f) is more tractable, as it converges to normality faster than f itself. as the 2 distribution is a special case of gamma distribution, the ratio of two properly scaled independent gamma variates has an f distribution [257]. the f distribution has a long right tail and is skewed to the right for small parameter values. several recurrences satisfied by the density, distribution functions, and moments can be found in reference 129.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1042, 4353])","tensor([  101,  2004,  2119,  1996, 16371,  5017,  8844,  1998,  7939, 20936,
        27413, 13075, 13143,  2015,  1999,  1996,  6210,  2024,  1016,  1010,
         2023,  4353,  2003,  4225,  2005,  1060,  1014,  1012, 11427,  2000,
        14991,  1010,   100,  2038,  3599,  7235,  4353,  2007,  1996,  2079,
         2546, 11674,  1012,  1996, 11709,  1049,  1998,  1050,  2024, 24028,
         1999,  6742,  5097,  1012, 22634,  1010,  1996,  4353,  2003,  4225,
         2005,  2512, 18447, 26320,  2079,  2546,  5300,  2004,  2092,  1012,
         1996,  4353,  1997,  1062,  1027,  1006,   100,  1007,  8833,  1006,
         1042,  1007,  2003,  2062, 12859,  3085,  1010,  2004,  2009, 28314,
         2015,  2000,  3671,  3012,  5514,  2084,  1042,  2993,  1012,  2004,
         1996,  1016,  4353,  2003,  1037,  2569,  2553,  1997, 13091,  4353,
         1010,  1996,  6463,  1997,  2048,  7919, 18953,  2981, 13091, 13075,
        13143,  2015,  2038,  2019,  1042,  4353,  1031, 24368,  1033,  1012,
         1996,  1042,  4353,  2038,  1037,  2146,  2157,  5725,  1998,  2003,
        15315,  7974,  2098,  2000,  1996,  2157,  2005,  2235, 16381,  5300,
         1012,  2195, 28667,  3126, 24413,  2015,  8510,  2011,  1996,  4304,
         1010,  4353,  4972,  1010,  1998,  5312,  2064,  2022,  2179,  1999,
         4431, 14378,  1012,   102])"
2652,1,"['mean', 'parameter', 'range', 'functions', 'moments', 'distribution']", Properties of F Distribution,seg_531,"7.19.1.1 moments and generating functions the mean is undefined when n 2, but it is n∕(n − 2) = 1 + 2∕(n − 2) for n 2. this does not depend on the numerator dof parameter m. although the distribution has infinite range, the mean (center of mass) is bounded by 3, and rapidly approaches 1 as n becomes large. the vari-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1042, 4353])","tensor([  101,  1021,  1012,  2539,  1012,  1015,  1012,  1015,  5312,  1998,
        11717,  4972,  1996,  2812,  2003,  6151, 28344,  2043,  1050,  1016,
         1010,  2021,  2009,  2003,   100,  1006,  1050,  1597,  1016,  1007,
         1027,  1015,  1009,   100,  1006,  1050,  1597,  1016,  1007,  2005,
         1050,  1016,  1012,  2023,  2515,  2025, 12530,  2006,  1996, 16371,
         5017,  8844,  2079,  2546, 16381,  1049,  1012,  2348,  1996,  4353,
         2038, 10709,  2846,  1010,  1996,  2812,  1006,  2415,  1997,  3742,
         1007,  2003, 10351,  2011,  1017,  1010,  1998,  5901,  8107,  1015,
         2004,  1050,  4150,  2312,  1012,  1996, 13075,  2072,  1011,   102])"
2653,1,['mean'], Properties of F Distribution,seg_531,"2n2(m+n−2) ance is  2 = m(n−2)2(n−4) , which is defined for n   4. this in terms of the mean is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([5144, 1997, 1042, 4353])","tensor([  101,  1016,  2078,  2475,  1006,  1049,  1009,  1050, 22543,  2475,
         1007,  2019,  3401,  2003,  1016,  1027,  1049,  1006,  1050, 22543,
         2475,  1007,  1016,  1006,  1050, 22543,  2549,  1007,  1010,  2029,
         2003,  4225,  2005,  1050,  1018,  1012,  2023,  1999,  3408,  1997,
         1996,  2812,  2003,   102])"
2654,1,"['mean', 'skewness coefficient', 'coefficient', 'skewness']", Properties of F Distribution,seg_531,"2 2∕(n − 4) ∗ ((m + n − 2)∕m). the mode is [(m − 2)∕m] ∗ [n∕(n + 2)]. as n∕(n − 2) is  1 and n∕(n + 2) is  1, the mode is less than the mean. as n becomes large, the mean tends to 1 but the mode tends to (m − 2)∕m. similarly, the skewness coefficient is undefined for n ≤ 6 (all of these conditions are on n and not on m). for n   6, the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1042, 4353])","tensor([  101,  1016,   100,  1006,  1050,  1597,  1018,  1007,  1598,  1006,
         1006,  1049,  1009,  1050,  1597,  1016,  1007,   100,  1007,  1012,
         1996,  5549,  2003,  1031,  1006,  1049,  1597,  1016,  1007,   100,
         1033,  1598,  1031,   100,  1006,  1050,  1009,  1016,  1007,  1033,
         1012,  2004,   100,  1006,  1050,  1597,  1016,  1007,  2003,  1015,
         1998,   100,  1006,  1050,  1009,  1016,  1007,  2003,  1015,  1010,
         1996,  5549,  2003,  2625,  2084,  1996,  2812,  1012,  2004,  1050,
         4150,  2312,  1010,  1996,  2812, 12102,  2000,  1015,  2021,  1996,
         5549, 12102,  2000,  1006,  1049,  1597,  1016,  1007,   100,  1012,
         6660,  1010,  1996, 15315,  7974,  2791, 19064,  2003,  6151, 28344,
         2005,  1050,  1608,  1020,  1006,  2035,  1997,  2122,  3785,  2024,
         2006,  1050,  1998,  2025,  2006,  1049,  1007,  1012,  2005,  1050,
         1020,  1010,  1996,   102])"
2655,1,"['function', 'skewness coefficient', 'coefficient', 'skewness', 'characteristic function']", Properties of F Distribution,seg_531,2(2m+n−2)√2(n−4) skewness coefficient is  1 = . the characteristic function of f variate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1042, 4353])","tensor([  101,  1016,  1006,  1016,  2213,  1009,  1050, 22543,  2475,  1007,
         1600,  2475,  1006,  1050, 22543,  2549,  1007, 15315,  7974,  2791,
        19064,  2003,  1015,  1027,  1012,  1996,  8281,  3853,  1997,  1042,
        13075, 13143,   102])"
2656,1,"['hypergeometric', 'function', 'hypergeometric function']", Properties of F Distribution,seg_531,"where  (m∕2, 1 − n∕2,−itn∕m) is the confluent hypergeometric function of type-2. a double infinite sum for it is as follows (see references 259 and 260)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1042, 4353])","tensor([  101,  2073,  1006,   100,  1010,  1015,  1597,   100,  1010,   100,
         1007,  2003,  1996,  9530, 10258, 24997,  2102, 23760,  3351, 28993,
         3853,  1997,  2828,  1011,  1016,  1012,  1037,  3313, 10709,  7680,
         2005,  2009,  2003,  2004,  4076,  1006,  2156,  7604, 25191,  1998,
        13539,  1007,   102])"
2657,1,['table'], Properties of F Distribution,seg_531,which is valid for n even. see table 7.20 for further properties.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 1042, 4353])","tensor([ 101, 2029, 2003, 9398, 2005, 1050, 2130, 1012, 2156, 2795, 1021, 1012,
        2322, 2005, 2582, 5144, 1012,  102])"
2658,1,"['t distribution', 'standard normal', 'random', 'normal', 'standard', 'distribution', 'independent']", Relation to Other Distributions,seg_533,"as mentioned earlier, if x ∼ f(m, n), then y = 1∕x is f(n,m). as the t distribution is the ratio of a standard normal to the square root of an independent scaled  2n random variate, the square of t is f distributed with 1 and ndf . if x and y are independent f",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  2004,  3855,  3041,  1010,  2065,  1060,   100,  1042,  1006,
         1049,  1010,  1050,  1007,  1010,  2059,  1061,  1027,   100,  2003,
         1042,  1006,  1050,  1010,  1049,  1007,  1012,  2004,  1996,  1056,
         4353,  2003,  1996,  6463,  1997,  1037,  3115,  3671,  2000,  1996,
         2675,  7117,  1997,  2019,  2981, 18953,  1016,  2078,  6721, 13075,
        13143,  1010,  1996,  2675,  1997,  1056,  2003,  1042,  5500,  2007,
         1015,  1998,  1050, 20952,  1012,  2065,  1060,  1998,  1061,  2024,
         2981,  1042,   102])"
2659,0,[], Relation to Other Distributions,seg_533,"variates with the same df , then t = √",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101, 13075, 13143,  2015,  2007,  1996,  2168,  1040,  2546,  1010,
         2059,  1056,  1027,  1600,   102])"
2660,1,"['tail', 'distribution', 'f distribution', 'binomial', 'binomial distribution']", Relation to Other Distributions,seg_533,n (√ x −√ y) is student’s t(n) [254]. tail area of binomial distribution is related to the f distribution as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1050,  1006,  1600,  1060,  1597, 30127,  1061,  1007,  2003,
         3076,  1521,  1055,  1056,  1006,  1050,  1007,  1031, 22234,  1033,
         1012,  5725,  2181,  1997,  8026, 20936,  2389,  4353,  2003,  3141,
         2000,  1996,  1042,  4353,  2004,   102])"
2661,1,['distribution'], Relation to Other Distributions,seg_533,"(7.160) as the denominator dof n → ∞, the variate m ∗ x approaches a  2m distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1006,  1021,  1012,  8148,  1007,  2004,  1996,  7939, 20936,
        27413,  2079,  2546,  1050,  1585,  1601,  1010,  1996, 13075, 13143,
         1049,  1598,  1060,  8107,  1037,  1016,  2213,  4353,  1012,   102])"
2662,1,"['tail', 'f distribution', 'tail areas', 'distribution']", Relation to Other Distributions,seg_533,"7.19.2.1 tail areas integrating from 0 to +x gives the cdf of a snedecor’s f distribution with (m, n) dof using equation (7.47) as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1021,  1012,  2539,  1012,  1016,  1012,  1015,  5725,  2752,
        22380,  2013,  1014,  2000,  1009,  1060,  3957,  1996,  3729,  2546,
         1997,  1037,  1055,  7228,  8586,  2953,  1521,  1055,  1042,  4353,
         2007,  1006,  1049,  1010,  1050,  1007,  2079,  2546,  2478,  8522,
         1006,  1021,  1012,  4700,  1007,  2004,   102])"
2663,1,"['tail', 'cases', 'tail areas']", Relation to Other Distributions,seg_533,"the tail areas are related as f(x;m, n) = 1∕f(1 − x; n,m). the special cases are",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([ 101, 1996, 5725, 2752, 2024, 3141, 2004, 1042, 1006, 1060, 1025, 1049,
        1010, 1050, 1007, 1027,  100, 1006, 1015, 1597, 1060, 1025, 1050, 1010,
        1049, 1007, 1012, 1996, 2569, 3572, 2024,  102])"
2664,1,['percentile'], Relation to Other Distributions,seg_533,"√ n+mx) , and f(x; 2, 2) = mx∕(n + mx). see references 261–264 for further properties and references 236 and 265 for percentile points.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([ 7189,  2000,  2060, 20611])","tensor([  101,  1600,  1050,  1009, 25630,  1007,  1010,  1998,  1042,  1006,
         1060,  1025,  1016,  1010,  1016,  1007,  1027,   100,  1006,  1050,
         1009, 25630,  1007,  1012,  2156,  7604, 24441,  1516, 21611,  2005,
         2582,  5144,  1998,  7604, 23593,  1998, 20549,  2005,  3867,  9463,
         2685,  1012,   102])"
2665,1,"['f distribution', 'transformation', 'distribution']", FISHERS Z DISTRIBUTION,seg_535,this distribution is obtained as a transformation from the f distribution as,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([8731, 2015, 1062, 4353])","tensor([ 101, 2023, 4353, 2003, 4663, 2004, 1037, 8651, 2013, 1996, 1042, 4353,
        2004,  102])"
2666,1,"['f distribution', 'distribution']", FISHERS Z DISTRIBUTION,seg_535,1 z = log(f). it is also called logarithmic f distribution. a derivation is given in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0.])","tensor([8731, 2015, 1062, 4353])","tensor([  101,  1015,  1062,  1027,  8833,  1006,  1042,  1007,  1012,  2009,
         2003,  2036,  2170,  8833,  8486,  2705,  7712,  1042,  4353,  1012,
         1037, 29280,  2003,  2445,  1999,   102])"
2667,1,['range'], FISHERS Z DISTRIBUTION,seg_535,"2 chapter 11. as the range of f is from 0 to ∞, the range of z is −∞ to ∞ and the pdf is obtained directly from the previous pdf as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([8731, 2015, 1062, 4353])","tensor([  101,  1016,  3127,  2340,  1012,  2004,  1996,  2846,  1997,  1042,
         2003,  2013,  1014,  2000,  1601,  1010,  1996,  2846,  1997,  1062,
         2003,  1597, 30128,  2000,  1601,  1998,  1996, 11135,  2003,  4663,
         3495,  2013,  1996,  3025, 11135,  2004,   102])"
2668,1,"['results', 'noncentral', 'distribution']", FISHERS Z DISTRIBUTION,seg_535,"where b(m∕2, n∕2) is the cbf. the unnormalized z distribution results when f is replaced by the unnormalized f (which is beta-ii). if the f-distribution is noncentral, the corresponding z is singly noncentral. if both chi squares in the f-distribution are noncentral, the corresponding z is called doubly noncentral [4, 266].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([8731, 2015, 1062, 4353])","tensor([  101,  2073,  1038,  1006,   100,  1010,   100,  1007,  2003,  1996,
        17324,  2546,  1012,  1996,  4895, 12131,  9067,  3550,  1062,  4353,
         3463,  2043,  1042,  2003,  2999,  2011,  1996,  4895, 12131,  9067,
         3550,  1042,  1006,  2029,  2003,  8247,  1011,  2462,  1007,  1012,
         2065,  1996,  1042,  1011,  4353,  2003,  2512, 13013,  7941,  1010,
         1996,  7978,  1062,  2003,  6170,  2135,  2512, 13013,  7941,  1012,
         2065,  2119,  9610, 14320,  1999,  1996,  1042,  1011,  4353,  2024,
         2512, 13013,  7941,  1010,  1996,  7978,  1062,  2003,  2170,  2079,
        12083,  2135,  2512, 13013,  7941,  1031,  1018,  1010, 25162,  1033,
         1012,   102])"
2669,1,"['tail', 'tail areas']", Properties of Fishers Z Distribution,seg_537,left tail areas can be expressed in terms of ibf as follows,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8731, 2015, 1062, 4353])","tensor([  101,  2187,  5725,  2752,  2064,  2022,  5228,  1999,  3408,  1997,
        21307,  2546,  2004,  4076,   102])"
2670,1,"['symmetry', 'table']", Properties of Fishers Z Distribution,seg_537,"where c = e2x∕(n + me2x). the cdf satisfies the symmetry relationship zc(m, n) = 1 − z−c(n,m). see table 7.21 for further properties (figures 7.13 and 7.14).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8731, 2015, 1062, 4353])","tensor([  101,  2073,  1039,  1027,   100,  1006,  1050,  1009,  2033,  2475,
         2595,  1007,  1012,  1996,  3729,  2546,  2938,  2483, 14213,  1996,
        14991,  3276,  1062,  2278,  1006,  1049,  1010,  1050,  1007,  1027,
         1015,  1597,  1062, 22543,  2278,  1006,  1050,  1010,  1049,  1007,
         1012,  2156,  2795,  1021,  1012,  2538,  2005,  2582,  5144,  1006,
         4481,  1021,  1012,  2410,  1998,  1021,  1012,  2403,  1007,  1012,
          102])"
2671,1,"['function', 'cumulants', 'gamma', 'gamma function', 'characteristic function', 'moments']", Properties of Fishers Z Distribution,seg_537,"7.20.1.1 moments the characteristic function is (n∕m)it∕2γ((n − it)∕2)γ((m + it)∕2)∕[γ(m∕2)γ(n∕2)]. using the derivatives of gamma function, the first two moments are   = (m − n)∕[2mn] = (1∕n − 1∕m)∕2 and  2 = (m + n)∕[2mn] = (1∕n + 1∕m)∕2 approximately. the cumulants are easier to find in terms of digamma function [60, 267, 268].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8731, 2015, 1062, 4353])","tensor([  101,  1021,  1012,  2322,  1012,  1015,  1012,  1015,  5312,  1996,
         8281,  3853,  2003,  1006,   100,  1007,   100,  1006,  1006,  1050,
         1597,  2009,  1007,   100,  1007,  1157,  1006,  1006,  1049,  1009,
         2009,  1007,   100,  1007,   100,  1031,  1157,  1006,   100,  1007,
         1157,  1006,   100,  1007,  1033,  1012,  2478,  1996, 16942,  1997,
        13091,  3853,  1010,  1996,  2034,  2048,  5312,  2024,  1027,  1006,
         1049,  1597,  1050,  1007,   100,  1031,  1016,  2213,  2078,  1033,
         1027,  1006,   100,  1597,   100,  1007,   100,  1998,  1016,  1027,
         1006,  1049,  1009,  1050,  1007,   100,  1031,  1016,  2213,  2078,
         1033,  1027,  1006,   100,  1009,   100,  1007,   100,  3155,  1012,
         1996, 13988,  7068,  7666,  2024,  6082,  2000,  2424,  1999,  3408,
         1997, 10667,  3286,  2863,  3853,  1031,  3438,  1010, 25491,  1010,
        25143,  1033,  1012,   102])"
2672,1,"['parameters', 'distributions']", Properties of Fishers Z Distribution,seg_537,7.20.1.2 relationship with other distributions when both the parameters,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])","tensor([5144, 1997, 8731, 2015, 1062, 4353])","tensor([  101,  1021,  1012,  2322,  1012,  1015,  1012,  1016,  3276,  2007,
         2060, 20611,  2043,  2119,  1996, 11709,   102])"
2673,1,"['convergence', 'distribution', 'f distribution', 'normality']", Properties of Fishers Z Distribution,seg_537,"n ). convergence of z to normality is faster than the convergence of f distribution. if x ∼ z(m, n) then exp(2z) ∼ f(m, n). the transformation v = (n∕(n + 1))1∕2(z∕b) is approximately distributed as tn , where n = m + n − 1, b2 = 1",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8731, 2015, 1062, 4353])","tensor([  101,  1050,  1007,  1012, 19143,  1997,  1062,  2000,  3671,  3012,
         2003,  5514,  2084,  1996, 19143,  1997,  1042,  4353,  1012,  2065,
         1060,   100,  1062,  1006,  1049,  1010,  1050,  1007,  2059,  4654,
         2361,  1006,  1016,  2480,  1007,   100,  1042,  1006,  1049,  1010,
         1050,  1007,  1012,  1996,  8651,  1058,  1027,  1006,   100,  1006,
         1050,  1009,  1015,  1007,  1007,   100,  1006,   100,  1007,  2003,
         3155,  5500,  2004, 28286,  1010,  2073,  1050,  1027,  1049,  1009,
         1050,  1597,  1015,  1010,  1038,  2475,  1027,  1015,   102])"
2674,1,"['t distribution', 'distribution']", Properties of Fishers Z Distribution,seg_537,2 (1∕m + 1∕n) and tn is student’s t distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([5144, 1997, 8731, 2015, 1062, 4353])","tensor([  101,  1016,  1006,   100,  1009,   100,  1007,  1998, 28286,  2003,
         3076,  1521,  1055,  1056,  4353,  1012,   102])"
2675,1,"['design', 'lognormal', 'distributions', 'weibull', 'distribution', 'model', 'weibull distribution']", WEIBULL DISTRIBUTION,seg_539,"this distribution is named after the swedish physicist w. weibull (1887–1979), who invented it in 1939 in connection with strength of materials, although it was known to rosen and rammler [270]. it finds applications in reliability theory, quality control, strength of materials, and so on [271, 272]. it is used in the design of wind turbines, model wind speed distributions, fading channels in wireless communications, describe the size of particles in motion (such as raindrops), or those being grinded, milled, crushed, or subjected to external pressure (for which another choice is the lognormal law). the one-parameter weibull distribution has pdf",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.])","tensor([11417,  8569,  3363,  4353])","tensor([  101,  2023,  4353,  2003,  2315,  2044,  1996,  4467, 13702,  1059,
         1012, 11417,  8569,  3363,  1006,  6837,  1516,  3245,  1007,  1010,
         2040,  8826,  2009,  1999,  3912,  1999,  4434,  2007,  3997,  1997,
         4475,  1010,  2348,  2009,  2001,  2124,  2000, 21701,  1998,  8223,
        18602,  1031, 13756,  1033,  1012,  2009,  4858,  5097,  1999, 15258,
         3399,  1010,  3737,  2491,  1010,  3997,  1997,  4475,  1010,  1998,
         2061,  2006,  1031, 25103,  1010, 24231,  1033,  1012,  2009,  2003,
         2109,  1999,  1996,  2640,  1997,  3612, 17396,  1010,  2944,  3612,
         3177, 20611,  1010, 14059,  6833,  1999,  9949,  4806,  1010,  6235,
         1996,  2946,  1997,  9309,  1999,  4367,  1006,  2107,  2004,  4542,
        25711,  2015,  1007,  1010,  2030,  2216,  2108, 23088,  2098,  1010,
         4971,  2098,  1010, 10560,  1010,  2030, 13532,  2000,  6327,  3778,
         1006,  2005,  2029,  2178,  3601,  2003,  1996,  8833, 12131,  9067,
         2375,  1007,  1012,  1996,  2028,  1011, 16381, 11417,  8569,  3363,
         4353,  2038, 11135,   102])"
2676,1,"['weibull distribution', 'weibull', 'distribution']", WEIBULL DISTRIBUTION,seg_539,"the two-parameter weibull distribution is obtained from the above by a simple transformation x = y∕b as f (y, a, b) = b",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11417,  8569,  3363,  4353])","tensor([  101,  1996,  2048,  1011, 16381, 11417,  8569,  3363,  4353,  2003,
         4663,  2013,  1996,  2682,  2011,  1037,  3722,  8651,  1060,  1027,
          100,  2004,  1042,  1006,  1061,  1010,  1037,  1010,  1038,  1007,
         1027,  1038,   102])"
2677,1,"['parameter', 'median']", WEIBULL DISTRIBUTION,seg_539,"shape parameter. mode is b( a−1 )1∕a, median is b(log 2)1∕a. this reduces to the above",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11417,  8569,  3363,  4353])","tensor([  101,  4338, 16381,  1012,  5549,  2003,  1038,  1006,  1037, 27944,
         1007,   100,  1010,  3991,  2003,  1038,  1006,  8833,  1016,  1007,
          100,  1012,  2023, 13416,  2000,  1996,  2682,   102])"
2678,1,"['exponential distribution', 'weibull', 'distribution', 'exponential', 'weibull distribution']", WEIBULL DISTRIBUTION,seg_539,"a form when b = 1. we denote it as weib(a, b). it is easy to see that if [(x − a)∕b]c has an exponential distribution, then x has a general weibull distribution. the corre-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([11417,  8569,  3363,  4353])","tensor([  101,  1037,  2433,  2043,  1038,  1027,  1015,  1012,  2057, 19090,
         2009,  2004, 11417,  2497,  1006,  1037,  1010,  1038,  1007,  1012,
         2009,  2003,  3733,  2000,  2156,  2008,  2065,  1031,  1006,  1060,
         1597,  1037,  1007,   100,  1033,  1039,  2038,  2019, 27258,  4353,
         1010,  2059,  1060,  2038,  1037,  2236, 11417,  8569,  3363,  4353,
         1012,  1996,  2522, 14343,  1011,   102])"
2679,1,"['function', 'quantile']", WEIBULL DISTRIBUTION,seg_539,"−x  sponding cdf is easily found as f(x) = 1 − e , from which the quantile function can be obtained as q(u) = [− log(1 − u)]1∕  .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11417,  8569,  3363,  4353])","tensor([  101,  1597,  2595, 11867, 15422,  2075,  3729,  2546,  2003,  4089,
         2179,  2004,  1042,  1006,  1060,  1007,  1027,  1015,  1597,  1041,
         1010,  2013,  2029,  1996, 24110, 15286,  3853,  2064,  2022,  4663,
         2004,  1053,  1006,  1057,  1007,  1027,  1031,  1597,  8833,  1006,
         1015,  1597,  1057,  1007,  1033,   100,  1012,   102])"
2680,1,"['exponential', 'exponential distribution', 'rayleigh distribution', 'distribution']", Properties of Weibull Distribution,seg_541,"the mode of the distribution is 0 for a   1. when a = 1, we get the exponential distribution. it is also related to the rayleigh distribution. if x ∼ weib(a, b) then",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  1996,  5549,  1997,  1996,  4353,  2003,  1014,  2005,  1037,
         1015,  1012,  2043,  1037,  1027,  1015,  1010,  2057,  2131,  1996,
        27258,  4353,  1012,  2009,  2003,  2036,  3141,  2000,  1996,  4097,
        13615,  4353,  1012,  2065,  1060,   100, 11417,  2497,  1006,  1037,
         1010,  1038,  1007,  2059,   102])"
2681,1,"['extreme value', 'extreme value distribution', 'distribution']", Properties of Weibull Distribution,seg_541,"log(x) has extreme value distribution. for a   1, the mode is at (1 − 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([ 101, 8833, 1006, 1060, 1007, 2038, 6034, 3643, 4353, 1012, 2005, 1037,
        1015, 1010, 1996, 5549, 2003, 2012, 1006, 1015, 1597, 1015,  102])"
2682,1,"['model', 'weibull', 'limit']", Properties of Weibull Distribution,seg_541,a )1∕a. this tends to the limit 1 as a → ∞. the three-parameter weibull model has cdf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  1037,  1007,   100,  1012,  2023, 12102,  2000,  1996,  5787,
         1015,  2004,  1037,  1585,  1601,  1012,  1996,  2093,  1011, 16381,
        11417,  8569,  3363,  2944,  2038,  3729,  2546,   102])"
2683,0,[], Properties of Weibull Distribution,seg_541,put c = 0 to get two-parameter version earlier.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  2404,  1039,  1027,  1014,  2000,  2131,  2048,  1011, 16381,
         2544,  3041,  1012,   102])"
2684,1,"['moments', 'moment']", Properties of Weibull Distribution,seg_541,7.21.1.1 moments the kth moment is given by e(xk) = ∫0,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([ 101, 1021, 1012, 2538, 1012, 1015, 1012, 1015, 5312, 1996, 1047, 2705,
        2617, 2003, 2445, 2011, 1041, 1006, 1060, 2243, 1007, 1027,  100,  102])"
2685,1,['mean'], Properties of Weibull Distribution,seg_541,"1). from this, we get the mean as   = bγ( 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  1015,  1007,  1012,  2013,  2023,  1010,  2057,  2131,  1996,
         2812,  2004,  1027,  1038, 29721,  1006,  1015,   102])"
2686,1,"['moment', 'variance', 'table', 'standard', 'second moment']", Properties of Weibull Distribution,seg_541,"a + 1). the second moment is b2γ( 2 a + 1), from this we get the variance as  2 = b2[γ(2∕a + 1) − γ(1∕a + 1)2]. put b = 1 to get the variance of standard form (7.164). see table 7.22 for further properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  1037,  1009,  1015,  1007,  1012,  1996,  2117,  2617,  2003,
         1038,  2475, 29721,  1006,  1016,  1037,  1009,  1015,  1007,  1010,
         2013,  2023,  2057,  2131,  1996, 23284,  2004,  1016,  1027,  1038,
         2475,  1031,  1157,  1006,   100,  1009,  1015,  1007,  1597,  1157,
         1006,   100,  1009,  1015,  1007,  1016,  1033,  1012,  2404,  1038,
         1027,  1015,  2000,  2131,  1996, 23284,  1997,  3115,  2433,  1006,
         1021,  1012, 17943,  1007,  1012,  2156,  2795,  1021,  1012,  2570,
         2005,  2582,  5144,  1012,   102])"
2687,1,"['mean', 'deviation', 'weibull', 'distribution', 'weibull distribution']", Properties of Weibull Distribution,seg_541,example 7.29 mean deviation of weibull distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  2742,  1021,  1012,  2756,  2812, 24353,  1997, 11417,  8569,
         3363,  4353,   102])"
2688,1,"['mean', 'deviation', 'weibull', 'distribution', 'weibull distribution']", Properties of Weibull Distribution,seg_541,find the mean deviation of the weibull distribution using theorem 7.1.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996, 11417,  8569,  3363,
         4353,  2478,  9872,  1021,  1012,  1015,  1012,   102])"
2689,1,"['tail', 'parameter', 'exponential distribution', 'weibull', 'limit', 'distribution', 'exponential', 'weibull distribution', 'case']", Properties of Weibull Distribution,seg_541,"solution 7.29 we apply theorem 7.1 (page 7-5) to find the md. as the weibull distribution does not tail off to the lower limit for some parameter values (e.g., b   1), equation (7.1) seems like not applicable. we know that the cdf is 1 − exp(−( x−c )b). as done in the case of exponential distribution, using a l’hospital’s rule, it is easy to show that x ∗ f(x) → 0, so that the theorem 7.1 is applicable. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  5576,  1021,  1012,  2756,  2057,  6611,  9872,  1021,  1012,
         1015,  1006,  3931,  1021,  1011,  1019,  1007,  2000,  2424,  1996,
         9108,  1012,  2004,  1996, 11417,  8569,  3363,  4353,  2515,  2025,
         5725,  2125,  2000,  1996,  2896,  5787,  2005,  2070, 16381,  5300,
         1006,  1041,  1012,  1043,  1012,  1010,  1038,  1015,  1007,  1010,
         8522,  1006,  1021,  1012,  1015,  1007,  3849,  2066,  2025, 12711,
         1012,  2057,  2113,  2008,  1996,  3729,  2546,  2003,  1015,  1597,
         4654,  2361,  1006,  1597,  1006,  1060, 22543,  2278,  1007,  1038,
         1007,  1012,  2004,  2589,  1999,  1996,  2553,  1997, 27258,  4353,
         1010,  2478,  1037,  1048,  1521,  2902,  1521,  1055,  3627,  1010,
         2009,  2003,  3733,  2000,  2265,  2008,  1060,  1598,  1042,  1006,
         1060,  1007,  1585,  1014,  1010,  2061,  2008,  1996,  9872,  1021,
         1012,  1015,  2003, 12711,  1012,  2023,  3957,   102])"
2690,1,['mean'], Properties of Weibull Distribution,seg_541,where m = bγ(1 + 1 a ) is the mean. split this into two integrals and integrate,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  2073,  1049,  1027,  1038, 29721,  1006,  1015,  1009,  1015,
         1037,  1007,  2003,  1996,  2812,  1012,  3975,  2023,  2046,  2048,
         9897,  2015,  1998, 17409,   102])"
2691,0,[], Properties of Weibull Distribution,seg_541,expand exp(−( x−c )b) as an infinite series and integrate term by term to get a −2∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  7818,  4654,  2361,  1006,  1597,  1006,  1060, 22543,  2278,
         1007,  1038,  1007,  2004,  2019, 10709,  2186,  1998, 17409,  2744,
         2011,  2744,  2000,  2131,  1037,   100,   102])"
2692,1,"['uniform distribution', 'distributions', 'weibull', 'distribution', 'weibull distribution', 'discrete']", Properties of Weibull Distribution,seg_541,"7.21.1.2 relationship with other distributions if [(x − a)∕b]c has an exponential distribution, then x has a general weibull distribution. it is also related to the uniform distribution u(0, 1) as follows: –if x ∼u(0, 1) then y = (− ln(x)∕a)1∕b ∼ weib(a, b). see reference 273 discrete weibull distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0.])","tensor([ 5144,  1997, 11417,  8569,  3363,  4353])","tensor([  101,  1021,  1012,  2538,  1012,  1015,  1012,  1016,  3276,  2007,
         2060, 20611,  2065,  1031,  1006,  1060,  1597,  1037,  1007,   100,
         1033,  1039,  2038,  2019, 27258,  4353,  1010,  2059,  1060,  2038,
         1037,  2236, 11417,  8569,  3363,  4353,  1012,  2009,  2003,  2036,
         3141,  2000,  1996,  6375,  4353,  1057,  1006,  1014,  1010,  1015,
         1007,  2004,  4076,  1024,  1516,  2065,  1060,   100,  1006,  1014,
         1010,  1015,  1007,  2059,  1061,  1027,  1006,  1597,  1048,  2078,
         1006,  1060,  1007,   100,  1007,   100,   100, 11417,  2497,  1006,
         1037,  1010,  1038,  1007,  1012,  2156,  4431, 25371, 16246, 11417,
         8569,  3363,  4353,  1012,   102])"
2693,1,"['random numbers', 'random']", Random Numbers,seg_543,"−(x∕b)a as f(x) = 1 − e , we could generate random numbers using uniform pseudo-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0.])","tensor([6721, 3616])","tensor([  101,  1597,  1006,   100,  1007,  1037,  2004,  1042,  1006,  1060,
         1007,  1027,  1015,  1597,  1041,  1010,  2057,  2071,  9699,  6721,
         3616,  2478,  6375, 18404,  1011,   102])"
2694,1,"['function', 'interval', 'random numbers', 'random']", Random Numbers,seg_543,"−(x∕b)a random numbers in [0,1] as u = 1 − e , which on rearrangement becomes x = b(− log(u))1∕a. notice that the log function takes negative values for the argument in [0, 1]. hence, the − log(u) maps it into the positive interval.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([6721, 3616])","tensor([  101,  1597,  1006,   100,  1007,  1037,  6721,  3616,  1999,  1031,
         1014,  1010,  1015,  1033,  2004,  1057,  1027,  1015,  1597,  1041,
         1010,  2029,  2006,  4373, 24388, 13665,  4150,  1060,  1027,  1038,
         1006,  1597,  8833,  1006,  1057,  1007,  1007,   100,  1012,  5060,
         2008,  1996,  8833,  3853,  3138,  4997,  5300,  2005,  1996,  6685,
         1999,  1031,  1014,  1010,  1015,  1033,  1012,  6516,  1010,  1996,
         1597,  8833,  1006,  1057,  1007,  7341,  2009,  2046,  1996,  3893,
        13483,  1012,   102])"
2695,1,"['rayleigh distribution', 'random', 'normal', 'random variables', 'bivariate', 'distribution', 'variables']", RAYLEIGH DISTRIBUTION,seg_545,"this distribution is named after the british physicist rayleigh (1842–1919). it finds applications in reliability theory and communication systems. see reference 274 for an application of rayleigh distribution to wind turbine modeling. stability of the rayleigh distribution is discussed in reference 275. see references 276 and 277 for the distribution of the product of two iid rayleigh random variables. this distribution can be considered as the distribution of the radial distance of a point on the bivariate normal surface (with zero means) from the origin. in other words, it is the distribution",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  2023,  4353,  2003,  2315,  2044,  1996,  2329, 13702,  4097,
        13615,  1006, 10008,  1516,  4529,  1007,  1012,  2009,  4858,  5097,
         1999, 15258,  3399,  1998,  4807,  3001,  1012,  2156,  4431, 25586,
         2005,  2019,  4646,  1997,  4097, 13615,  4353,  2000,  3612, 14027,
        11643,  1012,  9211,  1997,  1996,  4097, 13615,  4353,  2003,  6936,
         1999,  4431, 17528,  1012,  2156,  7604, 25113,  1998, 25578,  2005,
         1996,  4353,  1997,  1996,  4031,  1997,  2048,  2462,  2094,  4097,
        13615,  6721, 10857,  1012,  2023,  4353,  2064,  2022,  2641,  2004,
         1996,  4353,  1997,  1996, 15255,  3292,  1997,  1037,  2391,  2006,
         1996, 12170, 10755, 13143,  3671,  3302,  1006,  2007,  5717,  2965,
         1007,  2013,  1996,  4761,  1012,  1999,  2060,  2616,  1010,  2009,
         2003,  1996,  4353,   102])"
2696,1,"['normal distribution', 'normal', 'bivariate', 'distribution', 'joint', 'case', 'bivariate normal distribution']", RAYLEIGH DISTRIBUTION,seg_545,"x2 + y2, where (x,y) have a joint bivariate normal distribution. it is a special case of  -distribution. the pdf is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  1060,  2475,  1009,  1061,  2475,  1010,  2073,  1006,  1060,
         1010,  1061,  1007,  2031,  1037,  4101, 12170, 10755, 13143,  3671,
         4353,  1012,  2009,  2003,  1037,  2569,  2553,  1997,  1011,  4353,
         1012,  1996, 11135,  2003,   102])"
2697,1,"['linear', 'normal', 'linear transformation', 'transformation']", RAYLEIGH DISTRIBUTION,seg_545,the corresponding cdf can be expressed in terms of scaled normal pdf as given below. an alternate parametrization can be obtained by the linear transformation y =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  1996,  7978,  3729,  2546,  2064,  2022,  5228,  1999,  3408,
         1997, 18953,  3671, 11135,  2004,  2445,  2917,  1012,  2019,  6585,
        11498, 11368, 26910,  2064,  2022,  4663,  2011,  1996,  7399,  8651,
         1061,  1027,   102])"
2698,1,"['random', 'normal', 'random variables', 'distribution', 'variables', 'independent']", RAYLEIGH DISTRIBUTION,seg_545,"in general, if x1,x2, · · · ,xn are independent normal random variables n(0,  2), the distribution of x = (x1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  1999,  2236,  1010,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1087,  1087,  1087,  1010,  1060,  2078,  2024,  2981,  3671,
         6721, 10857,  1050,  1006,  1014,  1010,  1016,  1007,  1010,  1996,
         4353,  1997,  1060,  1027,  1006,  1060,  2487,   102])"
2699,1,['table'], RAYLEIGH DISTRIBUTION,seg_545,see table 7.23 for further properties. the cdf is given by,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4097, 13615,  4353])","tensor([ 101, 2156, 2795, 1021, 1012, 2603, 2005, 2582, 5144, 1012, 1996, 3729,
        2546, 2003, 2445, 2011,  102])"
2700,1,"['mean', 'deviation', 'distribution', 'rayleigh distribution']", RAYLEIGH DISTRIBUTION,seg_545,example 7.30 mean deviation of rayleigh distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  2742,  1021,  1012,  2382,  2812, 24353,  1997,  4097, 13615,
         4353,   102])"
2701,1,"['mean', 'deviation', 'distribution', 'rayleigh distribution']", RAYLEIGH DISTRIBUTION,seg_545,find the mean deviation of the rayleigh distribution with pdf fx(x; a) =,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  2424,  1996,  2812, 24353,  1997,  1996,  4097, 13615,  4353,
         2007, 11135, 23292,  1006,  1060,  1025,  1037,  1007,  1027,   102])"
2702,1,"['tail', 'limit', 'rayleigh distribution', 'distribution']", RAYLEIGH DISTRIBUTION,seg_545,"solution 7.30 we apply theorem 7.1 (p. 256) to find the md. as the rayleigh distribution does not tail off to zero at the lower limit (i.e., at 0), equation (7.1) seems like not applicable. we know that the cdf is 1 − exp(−x2∕2a2). if we apply l’hospital’s rule once on x ∗ f(x), we find that it → 0 as x → 0. as the limx→0x ∗ f(x) = 0, theorem 7.1 becomes applicable. this gives",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  5576,  1021,  1012,  2382,  2057,  6611,  9872,  1021,  1012,
         1015,  1006,  1052,  1012, 17273,  1007,  2000,  2424,  1996,  9108,
         1012,  2004,  1996,  4097, 13615,  4353,  2515,  2025,  5725,  2125,
         2000,  5717,  2012,  1996,  2896,  5787,  1006,  1045,  1012,  1041,
         1012,  1010,  2012,  1014,  1007,  1010,  8522,  1006,  1021,  1012,
         1015,  1007,  3849,  2066,  2025, 12711,  1012,  2057,  2113,  2008,
         1996,  3729,  2546,  2003,  1015,  1597,  4654,  2361,  1006,   100,
         1007,  1012,  2065,  2057,  6611,  1048,  1521,  2902,  1521,  1055,
         3627,  2320,  2006,  1060,  1598,  1042,  1006,  1060,  1007,  1010,
         2057,  2424,  2008,  2009,  1585,  1014,  2004,  1060,  1585,  1014,
         1012,  2004,  1996, 18525,  2595, 30113,  2692,  2595,  1598,  1042,
         1006,  1060,  1007,  1027,  1014,  1010,  9872,  1021,  1012,  1015,
         4150, 12711,  1012,  2023,  3957,   102])"
2703,1,['limit'], RAYLEIGH DISTRIBUTION,seg_545,split the integral into two parts. the first one integrates to 2m. the second one is −2 ∫0 m exp(−x2∕2a2)dx. put y = x2∕(2a2) so that dy = x∕a2dx. the upper limit of integration becomes m2∕(2a2) =  ∕4. we get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  3975,  1996,  9897,  2046,  2048,  3033,  1012,  1996,  2034,
         2028, 17409,  2015,  2000,  1016,  2213,  1012,  1996,  2117,  2028,
         2003,  1597,  2475,   100,  1049,  4654,  2361,  1006,   100,  1007,
         1040,  2595,  1012,  2404,  1061,  1027,   100,  1006, 23409,  2475,
         1007,  2061,  2008,  1040,  2100,  1027,   100,  1012,  1996,  3356,
         5787,  1997,  8346,  4150,   100,  1006, 23409,  2475,  1007,  1027,
          100,  1012,  2057,  2131,   102])"
2704,1,['gamma'], RAYLEIGH DISTRIBUTION,seg_545,where p() is the incomplete gamma integral. put the value of m to get the md.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4097, 13615,  4353])","tensor([  101,  2073,  1052,  1006,  1007,  2003,  1996, 12958, 13091,  9897,
         1012,  2404,  1996,  3643,  1997,  1049,  2000,  2131,  1996,  9108,
         1012,   102])"
2705,1,"['skewed', 'variance', 'rayleigh distribution', 'skewness', 'standard', 'distribution']", Properties of Rayleigh Distribution,seg_547,"the standard rayleigh distribution is obtained by putting a = 1. as the skewness is 0.63111, it is always positively skewed. variance  2 = 0.27324 2 shows that  2    2 or equivalently  ∕  = 0.5227232. see reference 278 for an application to the distance between pairs of points in wireless networks.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997,  4097, 13615,  4353])","tensor([  101,  1996,  3115,  4097, 13615,  4353,  2003,  4663,  2011,  5128,
         1037,  1027,  1015,  1012,  2004,  1996, 15315,  7974,  2791,  2003,
         1014,  1012,  6191, 14526,  2487,  1010,  2009,  2003,  2467, 13567,
        15315,  7974,  2098,  1012, 23284,  1016,  1027,  1014,  1012, 25371,
        18827,  1016,  3065,  2008,  1016,  1016,  2030,  5662,  2135,   100,
         1027,  1014,  1012,  4720, 22907, 21926,  2475,  1012,  2156,  4431,
        24709,  2005,  2019,  4646,  2000,  1996,  3292,  2090,  7689,  1997,
         2685,  1999,  9949,  6125,  1012,   102])"
2706,1,"['function', 'gamma', 'functions', 'gamma function', 'moments']", Properties of Rayleigh Distribution,seg_547,7.22.1.1 moments and generating functions ordinary moments can be obtained in terms of gamma function as e[xk] =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4097, 13615,  4353])","tensor([  101,  1021,  1012,  2570,  1012,  1015,  1012,  1015,  5312,  1998,
        11717,  4972,  6623,  5312,  2064,  2022,  4663,  1999,  3408,  1997,
        13091,  3853,  2004,  1041,  1031,  1060,  2243,  1033,  1027,   102])"
2707,1,['mean'], Properties of Rayleigh Distribution,seg_547,from which we get the mean as   =  √,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4097, 13615,  4353])","tensor([ 101, 2013, 2029, 2057, 2131, 1996, 2812, 2004, 1027, 1600,  102])"
2708,1,['distributions'], Properties of Rayleigh Distribution,seg_547,"7.22.1.2 relationship with other distributions if x is rayleigh(1), then x2 is  2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  4097, 13615,  4353])","tensor([  101,  1021,  1012,  2570,  1012,  1015,  1012,  1016,  3276,  2007,
         2060, 20611,  2065,  1060,  2003,  4097, 13615,  1006,  1015,  1007,
         1010,  2059,  1060,  2475,  2003,  1016,   102])"
2709,1,"['standard normal random variables', 'standard normal', 'random', 'normal', 'random variables', 'standard', 'distribution', 'variables', 'independent']", CHIDISTRIBUTION,seg_549,"if x1,x2, · · · ,xn are independent standard normal random variables, the distribution",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 1., 0.])","tensor([ 9610, 10521, 18886, 29446])","tensor([  101,  2065,  1060,  2487,  1010,  1060,  2475,  1010,  1087,  1087,
         1087,  1010,  1060,  2078,  2024,  2981,  3115,  3671,  6721, 10857,
         1010,  1996,  4353,   102])"
2710,0,[], CHIDISTRIBUTION,seg_549,"2 + x2 2 + · · · + xn2)1∕2, that is,√  n2 is called a chi-distribution with ndf . the pdf is easily obtained as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9610, 10521, 18886, 29446])","tensor([  101,  1016,  1009,  1060,  2475,  1016,  1009,  1087,  1087,  1087,
         1009,  1060,  2078,  2475,  1007,   100,  1010,  2008,  2003,  1010,
         1600,  1050,  2475,  2003,  2170,  1037,  9610,  1011,  4353,  2007,
         1050, 20952,  1012,  1996, 11135,  2003,  4089,  4663,  2004,   102])"
2711,1,"['normal', 'normal distribution', 'rayleigh distribution', 'distribution']", Properties of ChiDistribution,seg_551,"this distribution reduces to the half-normal or folded normal distribution for n = 1, the rayleigh distribution for n = 2, and the maxwell distribution for n = 3. the rth",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997,  9610, 10521, 18886, 29446])","tensor([  101,  2023,  4353, 13416,  2000,  1996,  2431,  1011,  3671,  2030,
         6999,  3671,  4353,  2005,  1050,  1027,  1015,  1010,  1996,  4097,
        13615,  4353,  2005,  1050,  1027,  1016,  1010,  1998,  1996, 10691,
         4353,  2005,  1050,  1027,  1017,  1012,  1996, 19387,  2232,   102])"
2712,1,['mean'], Properties of ChiDistribution,seg_551,moment is  r = 2r∕2γ((n + r)∕2)∕γ(n∕2). the mean is√,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 5144,  1997,  9610, 10521, 18886, 29446])","tensor([  101,  2617,  2003,  1054,  1027,   100,  1006,  1006,  1050,  1009,
         1054,  1007,   100,  1007,   100,  1006,   100,  1007,  1012,  1996,
         2812,  2003, 30127,   102])"
2713,0,[], Properties of ChiDistribution,seg_551,example 7.31 mode of chi-distribution,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  9610, 10521, 18886, 29446])","tensor([ 101, 2742, 1021, 1012, 2861, 5549, 1997, 9610, 1011, 4353,  102])"
2714,0,[], Properties of ChiDistribution,seg_551,find the mode of chi-distribution with n   1df .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  9610, 10521, 18886, 29446])","tensor([  101,  2424,  1996,  5549,  1997,  9610,  1011,  4353,  2007,  1050,
         1015, 20952,  1012,   102])"
2715,1,['results'], Properties of ChiDistribution,seg_551,"(n − 1)∕x − x. equating to zero results in (n − 1) = x2 so that x =√ n − 1 is the solution. as the second derivative is −(n − 1)∕x2 − 1, which is negative for n   1, this is indeed the mode.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  9610, 10521, 18886, 29446])","tensor([  101,  1006,  1050,  1597,  1015,  1007,   100,  1597,  1060,  1012,
         1041, 16211,  3436,  2000,  5717,  3463,  1999,  1006,  1050,  1597,
         1015,  1007,  1027,  1060,  2475,  2061,  2008,  1060,  1027,  1600,
         1050,  1597,  1015,  2003,  1996,  5576,  1012,  2004,  1996,  2117,
        13819,  2003,  1597,  1006,  1050,  1597,  1015,  1007,   100,  1597,
         1015,  1010,  2029,  2003,  4997,  2005,  1050,  1015,  1010,  2023,
         2003,  5262,  1996,  5549,  1012,   102])"
2716,1,['distribution'], MAXWELL DISTRIBUTION,seg_553,this distribution is frequently encountered in engineering. it is named after the scottish physicist james c. maxwell (1831–1879). the pdf is given by,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([10691,  4353])","tensor([  101,  2023,  4353,  2003,  4703,  8567,  1999,  3330,  1012,  2009,
         2003,  2315,  2044,  1996,  4104, 13702,  2508,  1039,  1012, 10691,
         1006, 10937,  1516,  7449,  1007,  1012,  1996, 11135,  2003,  2445,
         2011,   102])"
2717,1,"['parameter', 'standard', 'distribution']", MAXWELL DISTRIBUTION,seg_553,"here, “a” is a scale parameter. put y = x∕a to get the standard maxwell distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0.])","tensor([10691,  4353])","tensor([  101,  2182,  1010,  1523,  1037,  1524,  2003,  1037,  4094, 16381,
         1012,  2404,  1061,  1027,   100,  2000,  2131,  1996,  3115, 10691,
         4353,  1012,   102])"
2718,1,"['parameter', 'distribution', 'distributions']", Properties of Maxwell Distribution,seg_555,the maxwell and rayleigh distributions are surprisingly similar shaped for small parameter values (figures 7.15 and 7.16). it has an alternate parametrization known as maxwell’s velocity distribution that represents the velocity of a gas molecule as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10691,  4353])","tensor([  101,  1996, 10691,  1998,  4097, 13615, 20611,  2024, 10889,  2714,
         5044,  2005,  2235, 16381,  5300,  1006,  4481,  1021,  1012,  2321,
         1998,  1021,  1012,  2385,  1007,  1012,  2009,  2038,  2019,  6585,
        11498, 11368, 26910,  2124,  2004, 10691,  1521,  1055, 10146,  4353,
         2008,  5836,  1996, 10146,  1997,  1037,  3806, 13922,  2004,   102])"
2719,1,"['mean', 'estimated', 'variance']", Properties of Maxwell Distribution,seg_555,"where a = molecular weight, t = absolute temperature, and k is the boltzmann constant. mean =√8∕( a) and variance 2 = (3 − 8∕ )∕a. the mean velocity of a gaseous molecule at room temperature can then be estimated as x = [8kt∕(a )]1∕2. integration of equation (7.175) allows us to write the cdf in either of the following formats:–",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10691,  4353])","tensor([  101,  2073,  1037,  1027,  8382,  3635,  1010,  1056,  1027,  7619,
         4860,  1010,  1998,  1047,  2003,  1996, 10053, 24340,  2078,  5377,
         1012,  2812,  1027,   100,  1006,  1037,  1007,  1998, 23284,  1016,
         1027,  1006,  1017,  1597,   100,  1007,   100,  1012,  1996,  2812,
        10146,  1997,  1037,  3806, 14769, 13922,  2012,  2282,  4860,  2064,
         2059,  2022,  4358,  2004,  1060,  1027,  1031,   100,  1006,  1037,
         1007,  1033,   100,  1012,  8346,  1997,  8522,  1006,  1021,  1012,
        12862,  1007,  4473,  2149,  2000,  4339,  1996,  3729,  2546,  1999,
         2593,  1997,  1996,  2206, 11630,  1024,  1516,   102])"
2720,1,"['method', 'power method']", Properties of Maxwell Distribution,seg_555,the md is easily obtained using the power method as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5144,  1997, 10691,  4353])","tensor([ 101, 1996, 9108, 2003, 4089, 4663, 2478, 1996, 2373, 4118, 2004,  102])"
2721,1,"['case', 'distribution']", Properties of Maxwell Distribution,seg_555,this distribution is a special case of the chi-distribution that has pdf,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10691,  4353])","tensor([  101,  2023,  4353,  2003,  1037,  2569,  2553,  1997,  1996,  9610,
         1011,  4353,  2008,  2038, 11135,   102])"
2722,1,['table'], Properties of Maxwell Distribution,seg_555,put n = 3 in equation (7.179) to get equation (7.175). see table 7.24 for further properties.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10691,  4353])","tensor([  101,  2404,  1050,  1027,  1017,  1999,  8522,  1006,  1021,  1012,
        20311,  1007,  2000,  2131,  8522,  1006,  1021,  1012, 12862,  1007,
         1012,  2156,  2795,  1021,  1012,  2484,  2005,  2582,  5144,  1012,
          102])"
2723,1,"['linear combination', 'homogeneous', 'linear', 'distributions', 'distribution', 'model', 'plot', 'combination', 'data']", SUMMARY,seg_557,"statistical distributions play an important role in data modeling in various fields, including psychology, education, various branches of engineering, medical sciences, management, and the worldwide web. a single distribution suffices for most modeling situations. a linear combination of homogeneous models (such as normals with different means) is sometimes used. a researcher has to choose the most appropriate model depending on the data to be modeled at hand. a simple data plot can quite often reveal the most appropriate distribution that fits it well.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  7778, 20611,  2377,  2019,  2590,  2535,  1999,  2951, 11643,
         1999,  2536,  4249,  1010,  2164,  6825,  1010,  2495,  1010,  2536,
         5628,  1997,  3330,  1010,  2966,  4163,  1010,  2968,  1010,  1998,
         1996,  4969,  4773,  1012,  1037,  2309,  4353, 10514, 26989,  9623,
         2005,  2087, 11643,  8146,  1012,  1037,  7399,  5257,  1997, 24854,
         4275,  1006,  2107,  2004,  3671,  2015,  2007,  2367,  2965,  1007,
         2003,  2823,  2109,  1012,  1037, 10753,  2038,  2000,  5454,  1996,
         2087,  6413,  2944,  5834,  2006,  1996,  2951,  2000,  2022, 14440,
         2012,  2192,  1012,  1037,  3722,  2951,  5436,  2064,  3243,  2411,
         7487,  1996,  2087,  6413,  4353,  2008, 16142,  2009,  2092,  1012,
          102])"
2724,1,"['probability function', 'exponential distribution', 'memory', 'median', 'mean', 'continuous distributions', 'lognormal', 'weibull', 'normal', 'continuous distribution', 'continuous', 'function', 'deviation', 'probability', 'level', 'variance', 'gamma', 'distributions', 'distribution', 'exponential']", SUMMARY,seg_557,"statistical properties such as the mean, variance, cumulative probability function, median, and mean deviation are obtained in summary format for some commonly employed continuous distribution such as uniform, normal (gaussian), exponential, gamma, weibull, and lognormal among others. the exponential distribution has no memory, whereas other continuous distributions in the above-mentioned list do retain a level of memory.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  7778,  5144,  2107,  2004,  1996,  2812,  1010, 23284,  1010,
        23260,  9723,  3853,  1010,  3991,  1010,  1998,  2812, 24353,  2024,
         4663,  1999, 12654,  4289,  2005,  2070,  4141,  4846,  7142,  4353,
         2107,  2004,  6375,  1010,  3671,  1006, 11721, 17854,  2937,  1007,
         1010, 27258,  1010, 13091,  1010, 11417,  8569,  3363,  1010,  1998,
         8833, 12131,  9067,  2426,  2500,  1012,  1996, 27258,  4353,  2038,
         2053,  3638,  1010,  6168,  2060,  7142, 20611,  1999,  1996,  2682,
         1011,  3855,  2862,  2079,  9279,  1037,  2504,  1997,  3638,  1012,
          102])"
2725,1,"['continuous', 'mean', 'function', 'continuous distributions', 'deviation', 'distributions', 'moments', 'method', 'distribution', 'distribution function']", SUMMARY,seg_557,"ever since the landmark paper of abraham de moivre in 1730 [130], numerous research work had gone into finding the mean deviation of common distributions. see, for example, references 134 and 221, and so on. in reference 166, the authors gave several expressions involving the integral of distribution function that pertains to higher order moments and moments of spacings. in section 7.2, we gave an easy method to find the md of continuous distributions and demonstrated its use throughout this chapter.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2412,  2144,  1996,  8637,  3259,  1997,  8181,  2139, 25175,
        12229,  1999, 23272,  1031,  7558,  1033,  1010,  3365,  2470,  2147,
         2018,  2908,  2046,  4531,  1996,  2812, 24353,  1997,  2691, 20611,
         1012,  2156,  1010,  2005,  2742,  1010,  7604, 15170,  1998, 19594,
         1010,  1998,  2061,  2006,  1012,  1999,  4431, 18610,  1010,  1996,
         6048,  2435,  2195, 11423,  5994,  1996,  9897,  1997,  4353,  3853,
         2008,  2566, 18249,  2015,  2000,  3020,  2344,  5312,  1998,  5312,
         1997, 12403,  6129,  2015,  1012,  1999,  2930,  1021,  1012,  1016,
         1010,  2057,  2435,  2019,  3733,  4118,  2000,  2424,  1996,  9108,
         1997,  7142, 20611,  1998,  7645,  2049,  2224,  2802,  2023,  3127,
         1012,   102])"
2726,1,"['results', 'distribution', 'distributions']", SUMMARY,seg_557,"extensive bibliographies exist for each distribution. see balakrishnan and nevzorov [121], evans et al. [122], johnson, kotz and balakrishnan [60], and hazewinkel [279] for theoretical discussions and properties of these distributions. this chapter gave a bird’s eye view of the main results. separate volumes are",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4866, 12170, 16558,  3695, 14413,  3111,  4839,  2005,  2169,
         4353,  1012,  2156, 21451, 23017,  2078,  1998, 11265,  2615,  6844,
        12298,  1031, 12606,  1033,  1010,  6473,  3802,  2632,  1012,  1031,
        13092,  1033,  1010,  3779,  1010, 12849,  5753,  1998, 21451, 23017,
         2078,  1031,  3438,  1033,  1010,  1998, 16332, 10105, 11705,  1031,
        25745,  1033,  2005,  9373, 10287,  1998,  5144,  1997,  2122, 20611,
         1012,  2023,  3127,  2435,  1037,  4743,  1521,  1055,  3239,  3193,
         1997,  1996,  2364,  3463,  1012,  3584,  6702,  2024,   102])"
2727,1,"['distributions', 'weibull', 'normal', 'pareto distributions', 'pareto']", SUMMARY,seg_557,"available exclusively for some of these distributions. for example, see reference 230 for pareto distributions, reference 272 for weibull distributions, references 221 and 280 for normal and related distributions, and reference 281 for lnd. numerous application papers have also appeared recently.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2800,  7580,  2005,  2070,  1997,  2122, 20611,  1012,  2005,
         2742,  1010,  2156,  4431, 11816,  2005, 11968, 18903, 20611,  1010,
         4431, 24231,  2005, 11417,  8569,  3363, 20611,  1010,  7604, 19594,
         1998, 13427,  2005,  3671,  1998,  3141, 20611,  1010,  1998,  4431,
        22955,  2005,  1048,  4859,  1012,  3365,  4646,  4981,  2031,  2036,
         2596,  3728,  1012,   102])"
2728,1,"['range', 'distribution']", SUMMARY,seg_557,"c) the md of a distribution in the range [a, b] is always within the range",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 1039, 1007, 1996, 9108, 1997, 1037, 4353, 1999, 1996, 2846, 1031,
        1037, 1010, 1038, 1033, 2003, 2467, 2306, 1996, 2846,  102])"
2729,1,"['central limit theorem', 'mean', 'cauchy', 'limit']", SUMMARY,seg_557,d) the central limit theorem is applicable to the cauchy mean,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1040,  1007,  1996,  2430,  5787,  9872,  2003, 12711,  2000,
         1996,  6187, 10875,  2100,  2812,   102])"
2730,1,"['mean', 'geometric', 'lognormal', 'distributions', 'lognormal distributed', 'geometric mean', 'lognormal distributions']", SUMMARY,seg_557,e) geometric mean of lognormal distributions is lognormal distributed,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1041,  1007, 14965,  2812,  1997,  8833, 12131,  9067, 20611,
         2003,  8833, 12131,  9067,  5500,   102])"
2731,1,"['case', 'distribution']", SUMMARY,seg_557,f) maxwell distribution is a special case of chi-distribution,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1042,  1007, 10691,  4353,  2003,  1037,  2569,  2553,  1997,
         9610,  1011,  4353,   102])"
2732,1,"['skewness', 'distribution']", SUMMARY,seg_557,"g) truncated u(a, b) distribution has the same skewness",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1043,  1007, 25449,  1057,  1006,  1037,  1010,  1038,  1007,
         4353,  2038,  1996,  2168, 15315,  7974,  2791,   102])"
2733,1,"['mean', 'variance', 'exponential distribution', 'distribution', 'exponential']", SUMMARY,seg_557,h) variance of exponential distribution is square of the mean.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1044,  1007, 23284,  1997, 27258,  4353,  2003,  2675,  1997,
         1996,  2812,  1012,   102])"
2734,1,"['function', 'beta function']", SUMMARY,seg_557,"7.3 prove that b(a + 1, b) = [a∕(a + b)] b(a, b), where b(a, b) denotes the complete beta function (cbf). what is the value of b(0.5, 0.5)?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  1017,  6011,  2008,  1038,  1006,  1037,  1009,
         1015,  1010,  1038,  1007,  1027,  1031,   100,  1006,  1037,  1009,
         1038,  1007,  1033,  1038,  1006,  1037,  1010,  1038,  1007,  1010,
         2073,  1038,  1006,  1037,  1010,  1038,  1007, 14796,  1996,  3143,
         8247,  3853,  1006, 17324,  2546,  1007,  1012,  2054,  2003,  1996,
         3643,  1997,  1038,  1006,  1014,  1012,  1019,  1010,  1014,  1012,
         1019,  1007,  1029,   102])"
2735,1,"['beta distribution', 'distribution']", SUMMARY,seg_557,prove that p(x   y) =  ∕(  +  ). ters p and q is the beta distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  6011,  2008,  1052,  1006,  1060,  1061,  1007,  1027,   100,
         1006,  1009,  1007,  1012, 28774,  2015,  1052,  1998,  1053,  2003,
         1996,  8247,  4353,   102])"
2736,1,['probability'], SUMMARY,seg_557,"beta-i(p, q) u-shaped? 7.5 if x ∼ exp( ) find the probability",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 8247, 1011, 1045, 1006, 1052, 1010, 1053, 1007, 1057, 1011, 5044,
        1029, 1021, 1012, 1019, 2065, 1060,  100, 4654, 2361, 1006, 1007, 2424,
        1996, 9723,  102])"
2737,1,"['normal', 'normal distribution', 'distribution']", SUMMARY,seg_557,that pr(x − 1∕ )   1. 7.12 prove that the normal distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0.])",tensor([12654]),"tensor([  101,  2008, 10975,  1006,  1060,  1597,   100,  1007,  1015,  1012,
         1021,  1012,  2260,  6011,  2008,  1996,  3671,  4353,   102])"
2738,1,"['change of scale', 'transformation']", SUMMARY,seg_557,a pdf. the change of scale transformation,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1037, 11135,  1012,  1996,  2689,  1997,  4094,  8651,   102])"
2739,1,"['mean', 'median', 'variance']", SUMMARY,seg_557,7.8 prove that mode  median mean butions is the variance the square,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  1022,  6011,  2008,  5549,  3991,  2812,  2021,
         8496,  2003,  1996, 23284,  1996,  2675,   102])"
2740,1,"['mean', 'lognormal', 'distribution', 'exponential', 'lognormal distribution']", SUMMARY,seg_557,for lognormal distribution. of the mean?. (a) exponential (b),tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2005,  8833, 12131,  9067,  4353,  1012,  1997,  1996,  2812,
         1029,  1012,  1006,  1037,  1007, 27258,  1006,  1038,  1007,   102])"
2741,1,"['lognormal', 'normal']", SUMMARY,seg_557,beta (c) normal (d) student’s t 7.9 prove that for the lognormal distri-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  8247,  1006,  1039,  1007,  3671,  1006,  1040,  1007,  3076,
         1521,  1055,  1056,  1021,  1012,  1023,  6011,  2008,  2005,  1996,
         8833, 12131,  9067,  4487,  3367,  3089,  1011,   102])"
2742,0,[], SUMMARY,seg_557,bution mean/median = exp( 2∕2). 7.14 prove that area from 1∕  to   of an,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([12654]),"tensor([ 101, 2021, 3258, 2812, 1013, 3991, 1027, 4654, 2361, 1006,  100, 1007,
        1012, 1021, 1012, 2403, 6011, 2008, 2181, 2013,  100, 2000, 1997, 2019,
         102])"
2743,1,"['range', 'lognormal', 'exponential distribution', 'distribution', 'exponential']", SUMMARY,seg_557,7.10 what is the range of lognormal exponential distribution f (x;  ) =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  2184,  2054,  2003,  1996,  2846,  1997,  8833,
        12131,  9067, 27258,  4353,  1042,  1006,  1060,  1025,  1007,  1027,
          102])"
2744,1,"['lognormal distributed', 'lognormal', 'normal', 'distribution']", SUMMARY,seg_557," e− x is 1 − e− 2 if     1 and distribution? if x is normal, is e − 2 1 log(x) lognormal distributed?. e − otherwise. e",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1041, 22543,  1060,  2003,  1015,  1597,  1041, 22543,  1016,
         2065,  1015,  1998,  4353,  1029,  2065,  1060,  2003,  3671,  1010,
         2003,  1041,  1597,  1016,  1015,  8833,  1006,  1060,  1007,  8833,
        12131,  9067,  5500,  1029,  1012,  1041,  1597,  4728,  1012,  1041,
          102])"
2745,1,"['gamma', 'independent']", SUMMARY,seg_557,7.15 find the area from 0 to   and from 7.26 if x and y are independent gamma,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  2321,  2424,  1996,  2181,  2013,  1014,  2000,
         1998,  2013,  1021,  1012,  2656,  2065,  1060,  1998,  1061,  2024,
         2981, 13091,   102])"
2746,1,"['exponential', 'variables']", SUMMARY,seg_557,"to ∞ of the exponential distrirandom variables γ(a, ) and bution e− x. hence or otherwise γ(b, ), then prove that x∕(x + y) obtain the area from 1∕ to . is beta(a, b).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2000,  1601,  1997,  1996, 27258,  4487,  3367,  3089, 13033,
         5358, 10857,  1157,  1006,  1037,  1010,  1007,  1998,  2021,  3258,
         1041, 22543,  1060,  1012,  6516,  2030,  4728,  1157,  1006,  1038,
         1010,  1007,  1010,  2059,  6011,  2008,   100,  1006,  1060,  1009,
         1061,  1007,  6855,  1996,  2181,  2013,   100,  2000,  1012,  2003,
         8247,  1006,  1037,  1010,  1038,  1007,  1012,   102])"
2747,1,"['standard', 'transformation']", SUMMARY,seg_557,7.16 express the areas of standard nor7.27 what transformation to use to,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1021, 1012, 2385, 4671, 1996, 2752, 1997, 3115, 4496, 2581, 1012,
        2676, 2054, 8651, 2000, 2224, 2000,  102])"
2748,1,"['function', 'standard', 'error']", SUMMARY,seg_557,mal in terms of error function obtain standard arc-sine distribuerf(z) (i) from −c to +c and (ii) −c tion from b∕[ √(x−a)(a+b−x)],tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101, 15451,  1999,  3408,  1997,  7561,  3853,  6855,  3115,  8115,
         1011,  8254,  2063,  4487,  3367,  3089,  8569,  2121,  2546,  1006,
         1062,  1007,  1006,  1045,  1007,  2013,  1597,  2278,  2000,  1009,
         1039,  1998,  1006,  2462,  1007,  1597,  2278, 14841,  2239,  2013,
          100,  1031,  1600,  1006,  1060, 22543,  2050,  1007,  1006,  1037,
         1009,  1038, 22543,  2595,  1007,  1033,   102])"
2749,1,"['moments', 'mean', 'variance']", SUMMARY,seg_557,"tribution of y = (1 − x)∕x and 2 = a(a + b − 1)∕[(b − 1)2(b − obtain its mean and variance. find 2)] (b 2) for the beta-ii disthe ordinary moments. tribution with pdf fy(a, b) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13012, 29446,  1997,  1061,  1027,  1006,  1015,  1597,  1060,
         1007,   100,  1998,  1016,  1027,  1037,  1006,  1037,  1009,  1038,
         1597,  1015,  1007,   100,  1031,  1006,  1038,  1597,  1015,  1007,
         1016,  1006,  1038,  1597,  6855,  2049,  2812,  1998, 23284,  1012,
         2424,  1016,  1007,  1033,  1006,  1038,  1016,  1007,  2005,  1996,
         8247,  1011,  2462,  4487,  3367,  5369,  6623,  5312,  1012, 13012,
        29446,  2007, 11135,  1042,  2100,  1006,  1037,  1010,  1038,  1007,
         1027,   102])"
2750,1,['distribution'], SUMMARY,seg_557,bution is ((m − 2)∕m)(n∕(n + 2)) 7.29 consider a distribution defined as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2021, 3258, 2003, 1006, 1006, 1049, 1597, 1016, 1007,  100, 1007,
        1006,  100, 1006, 1050, 1009, 1016, 1007, 1007, 1021, 1012, 2756, 5136,
        1037, 4353, 4225, 2004,  102])"
2751,0,[], SUMMARY,seg_557,"p 0, q 0. find the normaliz7.19 if xi, i = 1, 2,...,n are iid u(0, 1),",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1052,  1014,  1010,  1053,  1014,  1012,  2424,  1996,  3671,
        10993,  2581,  1012,  2539,  2065,  8418,  1010,  1045,  1027,  1015,
         1010,  1016,  1010,  1012,  1012,  1012,  1010,  1050,  2024,  2462,
         2094,  1057,  1006,  1014,  1010,  1015,  1007,  1010,   102])"
2752,1,"['mean', 'distribution']", SUMMARY,seg_557,"ing constant, the mean and varifind the distribution of s =",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13749,  5377,  1010,  1996,  2812,  1998, 13075, 10128, 22254,
         1996,  4353,  1997,  1055,  1027,   102])"
2753,1,"['mean', 'moment']", SUMMARY,seg_557,7.20 prove that the mean of an expo7.30 find the kth moment of arc-sine,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  2322,  6011,  2008,  1996,  2812,  1997,  2019,
        16258,  2581,  1012,  2382,  2424,  1996,  1047,  2705,  2617,  1997,
         8115,  1011,  8254,  2063,   102])"
2754,1,['distribution'], SUMMARY,seg_557,"nential distribution divides the distribution of first kind given in area in (1 − 1 e ): 1 e ratio. equation (7.8), page 7-40, and obtain the   and  2. 7.21 prove that the characteristic func-",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 11265, 19909,  4353, 20487,  1996,  4353,  1997,  2034,  2785,
         2445,  1999,  2181,  1999,  1006,  1015,  1597,  1015,  1041,  1007,
         1024,  1015,  1041,  6463,  1012,  8522,  1006,  1021,  1012,  1022,
         1007,  1010,  3931,  1021,  1011,  2871,  1010,  1998,  6855,  1996,
         1998,  1016,  1012,  1021,  1012,  2538,  6011,  2008,  1996,  8281,
         4569,  2278,  1011,   102])"
2755,1,"['parameter', 'moment', 'cauchy', 'distribution']", SUMMARY,seg_557,tion of general cauchy distribu7.31 find the kth moment of the two tion is exp(itb-|t|a). parameter arc-sine distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  1997,  2236,  6187, 10875,  2100,  4487,  3367,
         3089,  8569,  2581,  1012,  2861,  2424,  1996,  1047,  2705,  2617,
         1997,  1996,  2048, 14841,  2239,  2003,  4654,  2361,  1006,  2009,
         2497,  1011,  1064,  1056,  1064,  1037,  1007,  1012, 16381,  8115,
         1011,  8254,  2063,  4353,   102])"
2756,1,['moments'], SUMMARY,seg_557,b∕ √(x − a)(a + b − x). 7.22 what are the central moments,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([ 101,  100, 1600, 1006, 1060, 1597, 1037, 1007, 1006, 1037, 1009, 1038,
        1597, 1060, 1007, 1012, 1021, 1012, 2570, 2054, 2024, 1996, 2430, 5312,
         102])"
2757,1,"['moments', 'rectangular distribution', 'distribution']", SUMMARY,seg_557,"of a rectangular distribution 7.32 find first two moments of the discuni(a, b)?. obtain 2. tribution fx( ,m) =√ ∕ x e− x",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1037, 10806,  4353,  1021,  1012,  3590,  2424,  2034,
         2048,  5312,  1997,  1996,  5860, 19496,  1006,  1037,  1010,  1038,
         1007,  1029,  1012,  6855,  1016,  1012, 13012, 29446, 23292,  1006,
         1010,  1049,  1007,  1027,  1600,   100,  1060,  1041, 22543,  1060,
          102])"
2758,1,['range'], SUMMARY,seg_557,with range x ≥ 0. 7.23 prove that a = k − c and b = k + c,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2007, 2846, 1060, 1609, 1014, 1012, 1021, 1012, 2603, 6011, 2008,
        1037, 1027, 1047, 1597, 1039, 1998, 1038, 1027, 1047, 1009, 1039,  102])"
2759,1,['results'], SUMMARY,seg_557,"in cuni(a, b) results in f (x; c) = 7.33 find the constant c of the distri1/(2c) for a−c≤ x ≤ a + c. find bution f (y) = c∕√(1 − 4y 2), for",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1999, 12731,  3490,  1006,  1037,  1010,  1038,  1007,  3463,
         1999,  1042,  1006,  1060,  1025,  1039,  1007,  1027,  1021,  1012,
         3943,  2424,  1996,  5377,  1039,  1997,  1996,  4487,  3367,  3089,
         2487,  1013,  1006,  1016,  2278,  1007,  2005,  1037, 22543,  2278,
        30135,  1060,  1608,  1037,  1009,  1039,  1012,  2424,  2021,  3258,
         1042,  1006,  1061,  1007,  1027,   100,  1006,  1015,  1597,  1018,
         2100,  1016,  1007,  1010,  2005,   102])"
2760,1,['mean'], SUMMARY,seg_557,its mean. −1∕2 ≤ y ≤ 1∕2. find   and  2.,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2049, 2812, 1012,  100, 1608, 1061, 1608,  100, 1012, 2424, 1998,
        1016, 1012,  102])"
2761,1,['moment'], SUMMARY,seg_557,"7.24 which of the following distribu7.34 prove that the rth moment, for r",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  2484,  2029,  1997,  1996,  2206,  4487,  3367,
         3089,  8569,  2581,  1012,  4090,  6011,  2008,  1996, 19387,  2232,
         2617,  1010,  2005,  1054,   102])"
2762,1,"['leptokurtic', 'cauchy', 'normal', 'independent', 'distribution', 'exponential', 'asymmetric']", SUMMARY,seg_557,"tions is always asymmetric and even, of n(0, 1) is  r = 2r∕2γ((r + leptokurtic. (a) exponential (b) 1)∕2)∕√ . beta (c) normal (d) student’s t. 7.35 prove that the distribution of the 7.25 if x ∼u(0, 1), find the distribution sum of n independent cauchy",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101, 14841,  5644,  2003,  2467,  2004, 24335, 12589,  1998,  2130,
         1010,  1997,  1050,  1006,  1014,  1010,  1015,  1007,  2003,  1054,
         1027,   100,  1006,  1006,  1054,  1009,  3393, 13876, 21940, 28228,
         2278,  1012,  1006,  1037,  1007, 27258,  1006,  1038,  1007,  1015,
         1007,   100,  1007,   100,  1012,  8247,  1006,  1039,  1007,  3671,
         1006,  1040,  1007,  3076,  1521,  1055,  1056,  1012,  1021,  1012,
         3486,  6011,  2008,  1996,  4353,  1997,  1996,  1021,  1012,  2423,
         2065,  1060,   100,  1006,  1014,  1010,  1015,  1007,  1010,  2424,
         1996,  4353,  7680,  1997,  1050,  2981,  6187, 10875,  2100,   102])"
2763,1,"['variates', 'normal']", SUMMARY,seg_557,"of y = − log(1 − x). hence prove 1 n variates is f (x) = . that p[y|x x0] = 1 − log(1 − n2+x2 x0) characterizes the u(0, 1) dis7.36 show that the pdf of square root tribution. of a half-standard normal variate",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1061,  1027,  1597,  8833,  1006,  1015,  1597,  1060,
         1007,  1012,  6516,  6011,  1015,  1050, 13075, 13143,  2015,  2003,
         1042,  1006,  1060,  1007,  1027,  1012,  2008,  1052,  1031,  1061,
         1064,  1060,  1060,  2692,  1033,  1027,  1015,  1597,  8833,  1006,
         1015,  1597,  1050,  2475,  1009,  1060,  2475,  1060,  2692,  1007,
         2839, 10057,  1996,  1057,  1006,  1014,  1010,  1015,  1007,  4487,
         2015,  2581,  1012,  4029,  2265,  2008,  1996, 11135,  1997,  2675,
         7117, 13012, 29446,  1012,  1997,  1037,  2431,  1011,  3115,  3671,
        13075, 13143,   102])"
2764,1,['distribution'], SUMMARY,seg_557,"−x4∕2 7.48 consider the lindley distribution (for z   0) is f (x) =√2∕ e , with pdf f (x) =  2 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,   100,  1021,  1012,  4466,  5136,  1996, 11409, 14232,  4353,
         1006,  2005,  1062,  1014,  1007,  2003,  1042,  1006,  1060,  1007,
         1027,   100,  1041,  1010,  2007, 11135,  1042,  1006,  1060,  1007,
         1027,  1016,  1015,   102])"
2765,1,['mean'], SUMMARY,seg_557,"x e− xmx, for x   0. x   0,     0. prove that the mgf is 7.37 prove that if x ∼ weib(p, q), then  2  +t+1 . find the mean and vari-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1060,  1041, 22543,  1060, 22984,  1010,  2005,  1060,  1014,
         1012,  1060,  1014,  1010,  1014,  1012,  6011,  2008,  1996, 11460,
         2546,  2003,  1021,  1012,  4261,  6011,  2008,  2065,  1060,   100,
        11417,  2497,  1006,  1052,  1010,  1053,  1007,  1010,  2059,  1016,
         1009,  1056,  1009,  1015,  1012,  2424,  1996,  2812,  1998, 13075,
         2072,  1011,   102])"
2766,1,"['exponential', 'distribution']", SUMMARY,seg_557,y = (x∕q)p has an exponential  +1 ( +t)2 ance. distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1061,  1027,  1006,   100,  1007,  1052,  2038,  2019, 27258,
         1009,  1015,  1006,  1009,  1056,  1007,  1016,  2019,  3401,  1012,
         4353,  1012,   102])"
2767,1,['cauchy'], SUMMARY,seg_557,"7.49 if x ∼ cauchy( ,  ) with pdf 7.38 if x, y are iid ∼ u[0, 1], find the f (x; ,  ) = 1∕[   (1 + ( x−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  4749,  2065,  1060,   100,  6187, 10875,  2100,
         1006,  1010,  1007,  2007, 11135,  1021,  1012,  4229,  2065,  1060,
         1010,  1061,  2024,  2462,  2094,   100,  1057,  1031,  1014,  1010,
         1015,  1033,  1010,  2424,  1996,  1042,  1006,  1060,  1025,  1010,
         1007,  1027,   100,  1031,  1006,  1015,  1009,  1006,  1060, 22543,
          102])"
2768,1,['distribution'], SUMMARY,seg_557,  )2)] distribution of −2 log(xy). prove that (i) 2x∕(1 − x2) is 7.39 if x ∼cauchy find the distribution identically distributed (ii) 1∕x ∼,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1007, 1016, 1007, 1033, 4353, 1997, 1597, 2475, 8833, 1006, 1060,
        2100, 1007, 1012, 6011, 2008, 1006, 1045, 1007,  100, 1006, 1015, 1597,
        1060, 2475, 1007, 2003, 1021, 1012, 4464, 2065, 1060,  100, 2424, 1996,
        4353, 7235, 2135, 5500, 1006, 2462, 1007,  100,  100,  102])"
2769,1,['cauchy'], SUMMARY,seg_557,"of y = (x − (1∕x))∕2. cauchy( ∕( 2 +  2),  ∕( 2 +",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  1061,  1027,  1006,  1060,  1597,  1006,   100,  1007,
         1007,   100,  1012,  6187, 10875,  2100,  1006,   100,  1006,  1016,
         1009,  1016,  1007,  1010,   100,  1006,  1016,  1009,   102])"
2770,1,['exponential'], SUMMARY,seg_557,7.40 a left-truncated exponential dis2)).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  2871,  1037,  2187,  1011, 25449, 27258,  4487,
         2015,  2475,  1007,  1007,  1012,   102])"
2771,1,"['mean', 'median', 'pareto', 'variance']", SUMMARY,seg_557,tribution with truncation point c has pdf f (x; ) = e− x∕[1 − 7.50 prove that the mean and median e−c] for x c. obtain the mean of pareto law f (x; c) = c∕xc+1 are c∕(c − 1) and 21∕c. find the corand variance. responding mean of power-law 7.41 obtain the pdf for a symmetriusing y = 1∕x.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13012, 29446,  2007, 19817,  4609, 10719,  2391,  1039,  2038,
        11135,  1042,  1006,  1060,  1025,  1007,  1027,  1041, 22543,   100,
         1031,  1015,  1597,  1021,  1012,  2753,  6011,  2008,  1996,  2812,
         1998,  3991,  1041, 22543,  2278,  1033,  2005,  1060,  1039,  1012,
         6855,  1996,  2812,  1997, 11968, 18903,  2375,  1042,  1006,  1060,
         1025,  1039,  1007,  1027,   100,  1009,  1015,  2024,   100,  1006,
         1039,  1597,  1015,  1007,  1998,   100,  1012,  2424,  1996, 17195,
         4859, 23284,  1012, 14120,  2812,  1997,  2373,  1011,  2375,  1021,
         1012,  4601,  6855,  1996, 11135,  2005,  1037, 25353, 20058, 18886,
        18161,  1061,  1027,   100,  1012,   102])"
2772,1,"['cauchy', 'cauchy distribution', 'distribution']", SUMMARY,seg_557,"cally both-side truncated cauchy distribution with the truncation 7.51 if x ∼ cauchy( ,  ) with pdf",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2655,  2100,  2119,  1011,  2217, 25449,  6187, 10875,  2100,
         4353,  2007,  1996, 19817,  4609, 10719,  1021,  1012,  4868,  2065,
         1060,   100,  6187, 10875,  2100,  1006,  1010,  1007,  2007, 11135,
          102])"
2773,1,['variance'], SUMMARY,seg_557,"point  . does the variance exist? f (x; ,  ) = 1∕[   (1 + ( x−  ",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2391,  1012,  2515,  1996, 23284,  4839,  1029,  1042,  1006,
         1060,  1025,  1010,  1007,  1027,   100,  1031,  1006,  1015,  1009,
         1006,  1060, 22543,   102])"
2774,1,"['mean', 'harmonic', 'harmonic mean']", SUMMARY,seg_557,find the pdf of each of (i) 1∕(1 + 7.42 prove that the harmonic mean of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2424,  1996, 11135,  1997,  2169,  1997,  1006,  1045,  1007,
          100,  1006,  1015,  1009,  1021,  1012,  4413,  6011,  2008,  1996,
        19452,  2812,  1997,   102])"
2775,1,"['variates', 'cauchy']", SUMMARY,seg_557,x2) and (ii) x2∕(1 + x2). n iid cauchy variates is cauchy,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 1., 1., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1060,  2475,  1007,  1998,  1006,  2462,  1007,   100,  1006,
         1015,  1009,  1060,  2475,  1007,  1012,  1050,  2462,  2094,  6187,
        10875,  2100, 13075, 13143,  2015,  2003,  6187, 10875,  2100,   102])"
2776,1,"['lognormal', 'lognormal distribution', 'distribution']", SUMMARY,seg_557,"distributed. 7.52 if x has a lognormal distribution,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  5500,  1012,  1021,  1012,  4720,  2065,  1060,  2038,  1037,
         8833, 12131,  9067,  4353,  1010,   102])"
2777,1,['distribution'], SUMMARY,seg_557,"7.43 if x ∼ beta − i(a, b), find the find the distribution of y = xn for",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1021, 1012, 4724, 2065, 1060,  100, 8247, 1597, 1045, 1006, 1037,
        1010, 1038, 1007, 1010, 2424, 1996, 2424, 1996, 4353, 1997, 1061, 1027,
        1060, 2078, 2005,  102])"
2778,1,['distribution'], SUMMARY,seg_557,the distribution of y = exp(x). c]∕  ,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1996, 4353, 1997, 1061, 1027, 4654, 2361, 1006, 1060, 1007, 1012,
        1039, 1033,  100,  102])"
2779,1,"['lognormal', 'median']", SUMMARY,seg_557,7.45 prove that the median and mode of 7.54 show that for a lognormal dis-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  3429,  6011,  2008,  1996,  3991,  1998,  5549,
         1997,  1021,  1012,  5139,  2265,  2008,  2005,  1037,  8833, 12131,
         9067,  4487,  2015,  1011,   102])"
2780,1,['distributions'], SUMMARY,seg_557,"rmal distributions are e  tribution,  k ′ +1∕ k",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 28549,  2389, 20611,  2024,  1041, 13012, 29446,  1010,  1047,
         1531,  1009,   100,  1047,   102])"
2781,1,['distribution'], SUMMARY,seg_557,"7.46 for n( ,  2) distribution, 68.26 of 7.55 verify whether the log-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  4805,  2005,  1050,  1006,  1010,  1016,  1007,
         4353,  1010,  6273,  1012,  2656,  1997,  1021,  1012,  4583, 20410,
         3251,  1996,  8833,  1011,   102])"
2782,1,"['interval', 'normal', 'normal distribution', 'distribution']", SUMMARY,seg_557,the area lies in the interval (  − normal distribution satisfies,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  2181,  3658,  1999,  1996, 13483,  1006,  1597,  3671,
         4353,  2938,  2483, 14213,   102])"
2783,1,"['geometric', 'intervals']", SUMMARY,seg_557,"corresponding intervals for logand hm are the geometric,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  7978, 14025,  2005,  6307,  2094, 20287,  2024,  1996, 14965,
         1010,   102])"
2784,1,"['harmonic', 'distribution']", SUMMARY,seg_557,"normal distribution? arithmetic and harmonic means, 7.47 verify whether f (x; c, d) = respectively.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3671,  4353,  1029, 20204,  1998, 19452,  2965,  1010,  1021,
         1012,  4700, 20410,  3251,  1042,  1006,  1060,  1025,  1039,  1010,
         1040,  1007,  1027,  4414,  1012,   102])"
2785,1,"['beta distribution', 'moment', 'distribution']", SUMMARY,seg_557,"(1 + x)c−1(1 − x)d−1∕[2c+d−1b(c, d)] 7.56 prove that the third moment of is a pdf for −1 x 1, where beta distribution is 3 = 2(b − b(c, d) is the complete beta function. a) 2∕[(a + b)(a + b + 2)].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  1015,  1009,  1060,  1007,  1039, 27944,  1006,  1015,
         1597,  1060,  1007,   100,  1031,  1016,  2278,  1009,  1040, 27944,
         2497,  1006,  1039,  1010,  1040,  1007,  1033,  1021,  1012,  5179,
         6011,  2008,  1996,  2353,  2617,  1997,  2003,  1037, 11135,  2005,
         1597,  2487,  1060,  1015,  1010,  2073,  8247,  4353,  2003,  1017,
         1027,  1016,  1006,  1038,  1597,  1038,  1006,  1039,  1010,  1040,
         1007,  2003,  1996,  3143,  8247,  3853,  1012,  1037,  1007,   100,
         1031,  1006,  1037,  1009,  1038,  1007,  1006,  1037,  1009,  1038,
         1009,  1016,  1007,  1033,  1012,   102])"
2786,1,"['mean', 'harmonic', 'harmonic mean']", SUMMARY,seg_557,7.57 prove that the harmonic mean of n ∑i,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  5401,  6011,  2008,  1996, 19452,  2812,  1997,
         1050,   100,   102])"
2787,1,"['cauchy', 'random', 'random variables', 'variables']", SUMMARY,seg_557,"n =1 c(i, j, n) i exp(− ix), where iid cauchy random variables has c(i, j, n) =∏j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1050,  1027,  1015,  1039,  1006,  1045,  1010,  1046,  1010,
         1050,  1007,  1045,  4654,  2361,  1006,  1597, 11814,  1007,  1010,
         2073,  2462,  2094,  6187, 10875,  2100,  6721, 10857,  2038,  1039,
         1006,  1045,  1010,  1046,  1010,  1050,  1007,  1027,   100,   102])"
2788,1,"['mean', 'deviation']", SUMMARY,seg_557,pdf f (x) = n∕[ (n2 + x2)]. 7.68 prove that the mean deviation of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101, 11135,  1042,  1006,  1060,  1007,  1027,   100,  1031,  1006,
         1050,  2475,  1009,  1060,  2475,  1007,  1033,  1012,  1021,  1012,
         6273,  6011,  2008,  1996,  2812, 24353,  1997,   102])"
2789,1,['lognormal'], SUMMARY,seg_557,"7.58 prove that the lognormal districuni(a, b) is√",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  5388,  6011,  2008,  1996,  8833, 12131,  9067,
         4487,  3367,  7277, 19496,  1006,  1037,  1010,  1038,  1007,  2003,
        30127,   102])"
2790,1,"['deviation', 'unimodal', 'standard deviation', 'standard']", SUMMARY,seg_557,"3 ∕2, where   is bution is unimodal with mode the standard deviation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0.,
        0.])",tensor([12654]),"tensor([  101,  1017,   100,  1010,  2073,  2003,  2021,  3258,  2003,  4895,
        16339,  9305,  2007,  5549,  1996,  3115, 24353,  1012,   102])"
2791,1,"['variables', 'variance']", SUMMARY,seg_557,"exp( − 2). what is the modal 7.69 if x and y are iid ranvalue? dom variables with f (x) = 7.59 prove that the variance of stu1∕[ √(2∕b2) − x2], where |x|",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4654,  2361,  1006,  1597,  1016,  1007,  1012,  2054,  2003,
         1996, 16913,  2389,  1021,  1012,  6353,  2065,  1060,  1998,  1061,
         2024,  2462,  2094,  2743, 10175,  5657,  1029, 14383, 10857,  2007,
         1042,  1006,  1060,  1007,  1027,  1021,  1012,  5354,  6011,  2008,
         1996, 23284,  1997,   100,  1031,  1600,  1006,   100,  1007,  1597,
         1060,  2475,  1033,  1010,  2073,  1064,  1060,  1064,   102])"
2792,1,['distribution'], SUMMARY,seg_557,"dent’s t with n dof is 1 + √ 2∕|b|, prove that (x + y)∕b has (1∕(n∕2 − 1)) if n   2, which → 1 the same distribution as xy . as n → ∞.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101, 21418,  1521,  1055,  1056,  2007,  1050,  2079,  2546,  2003,
         1015,  1009,  1600,   100,  1064,  1038,  1064,  1010,  6011,  2008,
         1006,  1060,  1009,  1061,  1007,   100,  2038,  1006,   100,  1006,
          100,  1597,  1015,  1007,  1007,  2065,  1050,  1016,  1010,  2029,
         1585,  1015,  1996,  2168,  4353,  2004,  1060,  2100,  1012,  2004,
         1050,  1585,  1601,  1012,   102])"
2793,0,[], SUMMARY,seg_557,"7.70 the weight of baggage com7.60 if x is cuni(a, b) find the distripartment of a small aircraft is",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1021,  1012,  3963,  1996,  3635,  1997, 20220,  4012,  2581,
         1012,  3438,  2065,  1060,  2003, 12731,  3490,  1006,  1037,  1010,
         1038,  1007,  2424,  1996,  4487,  3367, 29443,  8445,  3672,  1997,
         1037,  2235,  2948,  2003,   102])"
2794,1,"['mean', 'normally distributed']", SUMMARY,seg_557,bution of y = (2x − (a + b))∕(b − normally distributed with mean,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 2021, 3258, 1997, 1061, 1027, 1006, 1016, 2595, 1597, 1006, 1037,
        1009, 1038, 1007, 1007,  100, 1006, 1038, 1597, 5373, 5500, 2007, 2812,
         102])"
2795,1,['variance'], SUMMARY,seg_557,"a) 1800∼kg and variance 20,64∼kg.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  1007,   100,  1998, 23284,  2322,  1010,   100,  1012,
          102])"
2796,1,['probability'], SUMMARY,seg_557,"7.61 prove that beta-i(a, b) can be find the probability that the bag-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1021, 1012, 6079, 6011, 2008, 8247, 1011, 1045, 1006, 1037, 1010,
        1038, 1007, 2064, 2022, 2424, 1996, 9723, 2008, 1996, 4524, 1011,  102])"
2797,1,"['pareto distribution', 'independent', 'pareto', 'distribution']", SUMMARY,seg_557,has pareto distribution. 7.71 if x and y are independent f vari-,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2038, 11968, 18903,  4353,  1012,  1021,  1012,  6390,  2065,
         1060,  1998,  1061,  2024,  2981,  1042, 13075,  2072,  1011,   102])"
2798,0,[], SUMMARY,seg_557,ates with the same numerator and 7.63 prove that difference of two iid,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  8823,  2015,  2007,  1996,  2168, 16371,  5017,  8844,  1998,
         1021,  1012,  6191,  6011,  2008,  4489,  1997,  2048,  2462,  2094,
          102])"
2799,1,['variates'], SUMMARY,seg_557,"exp( ) variates is laplace(0,  ",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4654,  2361,  1006,  1007, 13075, 13143,  2015,  2003,  5001,
        19217,  1006,  1014,  1010,   102])"
2800,1,['degrees of freedom'], SUMMARY,seg_557,1 ). denominator degrees of freedom,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1015,  1007,  1012,  7939, 20936, 27413,  5445,  1997,  4071,
          102])"
2801,1,"['cauchy', 'cauchy distribution', 'distribution']", SUMMARY,seg_557,generalized cauchy distribution √,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101, 18960,  6187, 10875,  2100,  4353,  1600,   102])"
2802,0,[], SUMMARY,seg_557,y) is student’s t distributed,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1061, 1007, 2003, 3076, 1521, 1055, 1056, 5500,  102])"
2803,1,['degrees of freedom'], SUMMARY,seg_557,with pdf f (x;m) = c∕(1 + x2)m with n degrees of freedom.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2007, 11135,  1042,  1006,  1060,  1025,  1049,  1007,  1027,
          100,  1006,  1015,  1009,  1060,  2475,  1007,  1049,  2007,  1050,
         5445,  1997,  4071,  1012,   102])"
2804,1,['variances'], SUMMARY,seg_557,is c = γ(m)∕[√ γ(m − 1∕2)]. 7.72 prove that the ratio of variances,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  2003,  1039,  1027,  1157,  1006,  1049,  1007,   100,  1031,
         1600,  1157,  1006,  1049,  1597,   100,  1007,  1033,  1012,  1021,
         1012,  5824,  6011,  2008,  1996,  6463,  1997, 23284,  2015,   102])"
2805,1,['exponential'], SUMMARY,seg_557,"constant for the exponential distrin dof is (1 + 1∕n) ∗ (1 − 1∕(n − bution, irrespective of its paramet1)) if n 2.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5377,  2005,  1996, 27258,  4487,  3367,  6657,  2079,  2546,
         2003,  1006,  1015,  1009,   100,  1007,  1598,  1006,  1015,  1597,
          100,  1006,  1050,  1597,  2021,  3258,  1010, 20868,  6072,  5051,
        15277,  1997,  2049, 11498, 11368,  2487,  1007,  1007,  2065,  1050,
         1016,  1012,   102])"
2806,0,[], SUMMARY,seg_557,ric forms. 7.73 prove that the ratio of modal val-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 26220,  3596,  1012,  1021,  1012,  6421,  6011,  2008,  1996,
         6463,  1997, 16913,  2389, 11748,  1011,   102])"
2807,1,['mean'], SUMMARY,seg_557,7.66 prove that the mean tends to the ues of student’s t with n and,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  5764,  6011,  2008,  1996,  2812, 12102,  2000,
         1996,  1057,  2229,  1997,  3076,  1521,  1055,  1056,  2007,  1050,
         1998,   102])"
2808,1,"['moments', 'mean', 'distribution']", SUMMARY,seg_557,"mode from above for a beta-ii (n + 2) dof is (1 − 1∕(n + 1)) ∗ distribution by taking the ratio of √(1 + 2∕n) if n   2. mode to the mean as (1 − 1 a )(1 − 2 7.74 find first two moments of the b+1 ). show that they coincide as arc-sine distribution of second both a, b becomes large. 1 kind with pdf f (y) = for  √ (1−y2) 7.67 if xi for i = 1, 2, · · · , n are −1   y   1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5549,  2013,  2682,  2005,  1037,  8247,  1011,  2462,  1006,
         1050,  1009,  1016,  1007,  2079,  2546,  2003,  1006,  1015,  1597,
          100,  1006,  1050,  1009,  1015,  1007,  1007,  1598,  4353,  2011,
         2635,  1996,  6463,  1997,  1600,  1006,  1015,  1009,   100,  1007,
         2065,  1050,  1016,  1012,  5549,  2000,  1996,  2812,  2004,  1006,
         1015,  1597,  1015,  1037,  1007,  1006,  1015,  1597,  1016,  1021,
         1012,  6356,  2424,  2034,  2048,  5312,  1997,  1996,  1038,  1009,
         1015,  1007,  1012,  2265,  2008,  2027, 19680,  2004,  8115,  1011,
         8254,  2063,  4353,  1997,  2117,  2119,  1037,  1010,  1038,  4150,
         2312,  1012,  1015,  2785,  2007, 11135,  1042,  1006,  1061,  1007,
         1027,  2005,  1600,  1006,  1015, 22543,  2100,  2475,  1007,  1021,
         1012,  6163,  2065,  8418,  2005,  1045,  1027,  1015,  1010,  1016,
         1010,  1087,  1087,  1087,  1010,  1050,  2024,  1597,  2487,  1061,
         1015,  1012,   102])"
2809,1,['variates'], SUMMARY,seg_557,"independent exp( i) variates 7.75 what does b(m∕2, n∕2) − where  i ≠  j for i ≠ j, the sum",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2981,  4654,  2361,  1006,  1045,  1007, 13075, 13143,  2015,
         1021,  1012,  4293,  2054,  2515,  1038,  1006,   100,  1010,   100,
         1007,  1597,  2073,  1045,  1027,  1046,  2005,  1045,  1027,  1046,
         1010,  1996,  7680,   102])"
2810,1,"['lognormal', 'lognormal distribution', 'distribution']", SUMMARY,seg_557,"nx), b() is the complete beta func7.85 prove that the area up to the mode tion and iy(a, b) is the unskilled of lognormal distribution isφ(− ) ibf represent. where φ() is the cdf of underly-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1050,  2595,  1007,  1010,  1038,  1006,  1007,  2003,  1996,
         3143,  8247,  4569,  2278,  2581,  1012,  5594,  6011,  2008,  1996,
         2181,  2039,  2000,  1996,  5549, 14841,  2239,  1998,  1045,  2100,
         1006,  1037,  1010,  1038,  1007,  2003,  1996,  4895,  5488, 11001,
         1997,  8833, 12131,  9067,  4353,  2003, 29736,  1006,  1597,  1007,
        21307,  2546,  5050,  1012,  2073,  1176,  1006,  1007,  2003,  1996,
         3729,  2546,  1997,  2104,  2135,  1011,   102])"
2811,1,['normal'], SUMMARY,seg_557,ing normal. 7.76 show that as n → ∞k = γ((n +,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101, 13749,  3671,  1012,  1021,  1012,  6146,  2265,  2008,  2004,
         1050,  1585,  1601,  2243,  1027,  1157,  1006,  1006,  1050,  1009,
          102])"
2812,0,[], SUMMARY,seg_557,1)∕2)∕[√n  γ(n∕2)] → 1∕√ 2 . 7.86 prove that the mean-median-mode,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1015, 1007,  100, 1007,  100, 1031, 1600, 2078, 1157, 1006,  100,
        1007, 1033, 1585,  100, 1016, 1012, 1021, 1012, 6564, 6011, 2008, 1996,
        2812, 1011, 3991, 1011, 5549,  102])"
2813,1,"['mean', 'lognormal', 'median']", SUMMARY,seg_557,inequality of lognormal distribu7.77 prove that the modal value tion is mode median mean.,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101, 16440,  1997,  8833, 12131,  9067,  4487,  3367,  3089,  8569,
         2581,  1012,  6255,  6011,  2008,  1996, 16913,  2389,  3643, 14841,
         2239,  2003,  5549,  3991,  2812,  1012,   102])"
2814,1,"['mean', 'lognormal', 'distribution', 'inequality', 'lognormal distribution', 'median']", SUMMARY,seg_557,of lognormal distribution is 1 − 2∕2 e . 7.87 prove that the mean–median-mode √ 2 exp( − 2) inequality of central 2 distribu7.78 let x be distributed as lognormal tion is mode median mean.,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1997,  8833, 12131,  9067,  4353,  2003,  1015,  1597,   100,
         1041,  1012,  1021,  1012,  6584,  6011,  2008,  1996,  2812,  1516,
         3991,  1011,  5549,  1600,  1016,  4654,  2361,  1006,  1597,  1016,
         1007, 16440,  1997,  2430,  1016,  4487,  3367,  3089,  8569,  2581,
         1012,  6275,  2292,  1060,  2022,  5500,  2004,  8833, 12131,  9067,
        14841,  2239,  2003,  5549,  3991,  2812,  1012,   102])"
2815,1,"['mean', 'moment', 'variance', 'distribution', 'transformation']", SUMMARY,seg_557,"ln( , ). prove that the mean is = exp( + 1 2 2). if a change of 7.88 find the mean and variance scale transformation y = x∕ is of laplacian distribution with applied, prove that the (r + 1)th pdf f (x; ) = (1∕ √ 2) exp mean of y is exp( 1 2 2r(r + 1)) = √ (− 2|x|∕ ),−∞ x ∞. e(y−r), the rth inverse moment. 7.89 prove that the md of lognor7.79 the fraction (by weight) of impu2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1048,  2078,  1006,  1010,  1007,  1012,  6011,  2008,  1996,
         2812,  2003,  1027,  4654,  2361,  1006,  1009,  1015,  1016,  1016,
         1007,  1012,  2065,  1037,  2689,  1997,  1021,  1012,  6070,  2424,
         1996,  2812,  1998, 23284,  4094,  8651,  1061,  1027,   100,  2003,
         1997,  5001,  2721, 14483,  4353,  2007,  4162,  1010,  6011,  2008,
         1996,  1006,  1054,  1009,  1015,  1007, 16215, 11135,  1042,  1006,
         1060,  1025,  1007,  1027,  1006,   100,  1600,  1016,  1007,  4654,
         2361,  2812,  1997,  1061,  2003,  4654,  2361,  1006,  1015,  1016,
         1016,  2099,  1006,  1054,  1009,  1015,  1007,  1007,  1027,  1600,
         1006,  1597,  1016,  1064,  1060,  1064,   100,  1007,  1010,  1597,
        30128,  1060,  1601,  1012,  1041,  1006,  1061, 22543,  2099,  1007,
         1010,  1996, 19387,  2232, 19262,  2617,  1012,  1021,  1012,  6486,
         6011,  2008,  1996,  9108,  1997,  8833, 12131,  2581,  1012,  6535,
         1996, 12884,  1006,  2011,  3635,  1007,  1997, 17727,  2226,  2475,
          102])"
2816,1,"['mean', 'parameter', 'variance', 'standard normal', 'normal', 'standard', 'distribution', 'parameters', 'average', 'asymmetric']", SUMMARY,seg_557,"mal distribution is 2e + ∕2[2φ rities in a kitchen cleaning liq( ∕2) − 1], where φ(x) is the cdf uid has a beta-i distribution with of standard normal. known parameter a = 2. if the average fraction of impurities is 7.90 for which distribution is the mean 0.18, find the parameter b. what is asymmetric and the variance symthe variance for the impurities?. metric in the parameters? (a) neg-",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101, 15451,  4353,  2003,  1016,  2063,  1009,   100,  1031,  1016,
        29736, 15544,  7368,  1999,  1037,  3829,  9344,  5622,  4160,  1006,
          100,  1007,  1597,  1015,  1033,  1010,  2073,  1176,  1006,  1060,
         1007,  2003,  1996,  3729,  2546, 21318,  2094,  2038,  1037,  8247,
         1011,  1045,  4353,  2007,  1997,  3115,  3671,  1012,  2124, 16381,
         1037,  1027,  1016,  1012,  2065,  1996,  2779, 12884,  1997, 17727,
        29366,  2003,  1021,  1012,  3938,  2005,  2029,  4353,  2003,  1996,
         2812,  1014,  1012,  2324,  1010,  2424,  1996, 16381,  1038,  1012,
         2054,  2003,  2004, 24335, 12589,  1998,  1996, 23284, 25353, 20492,
         5369, 23284,  2005,  1996, 17727, 29366,  1029,  1012, 12046,  1999,
         1996, 11709,  1029,  1006,  1037,  1007, 11265,  2290,  1011,   102])"
2817,1,"['parameter', 'hypergeometric', 'binomial', 'shape parameter']", SUMMARY,seg_557,"ative binomial (b) beta-i(a, b) (c) 7.80 if the shape parameter of a binomial (d) hypergeometric",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        1., 1., 0.])",tensor([12654]),"tensor([  101,  2012,  3512,  8026, 20936,  2389,  1006,  1038,  1007,  8247,
         1011,  1045,  1006,  1037,  1010,  1038,  1007,  1006,  1039,  1007,
         1021,  1012,  3770,  2065,  1996,  4338, 16381,  1997,  1037,  8026,
        20936,  2389,  1006,  1040,  1007, 23760,  3351, 28993,   102])"
2818,1,"['mean', 'function', 'deviation', 'gamma', 'poisson', 'poisson sum', 'distribution']", SUMMARY,seg_557,prove that the survival function 7.91 find the mean deviation of gamma can be expressed as a poisson sum. distribution using the incom-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6011,  2008,  1996,  7691,  3853,  1021,  1012,  6205,  2424,
         1996,  2812, 24353,  1997, 13091,  2064,  2022,  5228,  2004,  1037,
        13433, 24077,  7680,  1012,  4353,  2478,  1996,  4297,  5358,  1011,
          102])"
2819,1,"['function', 'gamma', 'gamma function', 'moments']", SUMMARY,seg_557,plete gamma function (igf) 7.81 show that the ordinary moments,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101, 20228, 12870, 13091,  3853,  1006,  1045, 25708,  1007,  1021,
         1012,  6282,  2265,  2008,  1996,  6623,  5312,   102])"
2820,1,['lognormal'], SUMMARY,seg_557,and theorem 7.1 as md = of lognormal can be found using  r,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1998,  9872,  1021,  1012,  1015,  2004,  9108,  1027,  1997,
         8833, 12131,  9067,  2064,  2022,  2179,  2478,  1054,   102])"
2821,1,['quartiles'], SUMMARY,seg_557,"7.82 prove that the quartiles q1 and q3 7.92 if x is beta-i(a, b), find the dis-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1021,  1012,  6445,  6011,  2008,  1996, 24209,  8445,  9463,
         2015,  1053,  2487,  1998,  1053,  2509,  1021,  1012,  6227,  2065,
         1060,  2003,  8247,  1011,  1045,  1006,  1037,  1010,  1038,  1007,
         1010,  2424,  1996,  4487,  2015,  1011,   102])"
2822,1,"['cauchy', 'cauchy distribution', 'distribution']", SUMMARY,seg_557,"of generalized cauchy distribution tribution of x∕(1 − x) and (1 − are a − b and a + b, respectively. x)∕x.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1997, 18960,  6187, 10875,  2100,  4353, 13012, 29446,  1997,
          100,  1006,  1015,  1597,  1060,  1007,  1998,  1006,  1015,  1597,
         2024,  1037,  1597,  1038,  1998,  1037,  1009,  1038,  1010,  4414,
         1012,  1060,  1007,   100,  1012,   102])"
2823,1,['quartiles'], SUMMARY,seg_557,"7.83 prove that the quartiles q1 and q3 7.93 if x is beta-ii(a, b), find the dis-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1021,  1012,  6640,  6011,  2008,  1996, 24209,  8445,  9463,
         2015,  1053,  2487,  1998,  1053,  2509,  1021,  1012,  6109,  2065,
         1060,  2003,  8247,  1011,  2462,  1006,  1037,  1010,  1038,  1007,
         1010,  2424,  1996,  4487,  2015,  1011,   102])"
2824,1,['distribution'], SUMMARY,seg_557,"and 0.75 for q3. 7.94 if y ∼ tn, find the distribution of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1998,  1014,  1012,  4293,  2005,  1053,  2509,  1012,  1021,
         1012,  6365,  2065,  1061,   100, 28286,  1010,  2424,  1996,  4353,
         1997,   102])"
2825,1,['median'], SUMMARY,seg_557,7.84 prove that area from the median (1/2)+(1/2)*y/√n + y,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1021, 1012, 6391, 6011, 2008, 2181, 2013, 1996, 3991, 1006, 1015,
        1013, 1016, 1007, 1009, 1006, 1015, 1013, 1016, 1007, 1008, 1061, 1013,
        1600, 2078, 1009, 1061,  102])"
2826,1,"['lognormal', 'normal']", SUMMARY,seg_557,"2. to the mode of lognormal distribu7.95 if x ∼ n(0, 1) prove that the distion is φ(0) − φ(− ) where φ() is the normal cdf. tribution of x2 is (√x)∕√x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1012,  2000,  1996,  5549,  1997,  8833, 12131,  9067,
         4487,  3367,  3089,  8569,  2581,  1012,  5345,  2065,  1060,   100,
         1050,  1006,  1014,  1010,  1015,  1007,  6011,  2008,  1996,  4487,
        16643,  2239,  2003,  1176,  1006,  1014,  1007,  1597,  1176,  1006,
         1597,  1007,  2073,  1176,  1006,  1007,  2003,  1996,  3671,  3729,
         2546,  1012, 13012, 29446,  1997,  1060,  2475,  2003,  1006,  1600,
         2595,  1007,   100,  1012,   102])"
2827,1,"['frequency', 'distribution']", SUMMARY,seg_557,7.96 the distribution of age (x) of patients to a clinic is given by the frequency,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 1021, 1012, 5986, 1996, 4353, 1997, 2287, 1006, 1060, 1007, 1997,
        5022, 2000, 1037, 9349, 2003, 2445, 2011, 1996, 6075,  102])"
2828,1,"['mean', 'deviation', 'skewed', 'standard deviation', 'deviations', 'standard', 'distribution', 'standard deviations']", SUMMARY,seg_557,"function f (x) = 12x(100 − x)2∕1004 for 0 ≤ x ≤ 100. prove that the modal age is 33.33, and the mean age is 40. show that the standard deviation is 20 approximately. find the approximate number of patients between two standard deviations from the mean age. is the age distribution positively or negatively skewed?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  3853,  1042,  1006,  1060,  1007,  1027,  2260,  2595,  1006,
         2531,  1597,  1060,  1007,   100,  2005,  1014,  1608,  1060,  1608,
         2531,  1012,  6011,  2008,  1996, 16913,  2389,  2287,  2003,  3943,
         1012,  3943,  1010,  1998,  1996,  2812,  2287,  2003,  2871,  1012,
         2265,  2008,  1996,  3115, 24353,  2003,  2322,  3155,  1012,  2424,
         1996, 15796,  2193,  1997,  5022,  2090,  2048,  3115, 24353,  2015,
         2013,  1996,  2812,  2287,  1012,  2003,  1996,  2287,  4353, 13567,
         2030, 19762, 15315,  7974,  2098,  1029,   102])"
2829,1,['quantiles'], SUMMARY,seg_557,7.97 prove that the quantiles of expo(in inches) from the surface of,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1021,  1012,  5989,  6011,  2008,  1996, 24110, 15286,  2015,
         1997, 16258,  1006,  1999,  5282,  1007,  2013,  1996,  3302,  1997,
          102])"
2830,1,"['function', 'rate', 'coefficient', 'distribution', 'inequality', 'rate function']", SUMMARY,seg_557,"nential distribution is given by thick concrete floors is distributed xp = − ln(1 − p)∕ . find an upper as f (x) = k[1 − erf (x∕(2√ td))], where t is the time in years and bound to p|x − | ≥ k using d is the diffusion coefficient chebychev’s inequality. find (cm2/sec). determine k if time the hazard rate function (t) = is taken as 20 years. find total f (t)∕sf(t), where sf() is the surchloride up to 3 inches from the vival function. surface.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 11265, 19909,  4353,  2003,  2445,  2011,  4317,  5509,  8158,
         2003,  5500, 26726,  1027,  1597,  1048,  2078,  1006,  1015,  1597,
         1052,  1007,   100,  1012,  2424,  2019,  3356,  2004,  1042,  1006,
         1060,  1007,  1027,  1047,  1031,  1015,  1597,  9413,  2546,  1006,
          100,  1006,  1016, 30127, 14595,  1007,  1007,  1033,  1010,  2073,
         1056,  2003,  1996,  2051,  1999,  2086,  1998,  5391,  2000,  1052,
         1064,  1060,  1597,  1064,  1609,  1047,  2478,  1040,  2003,  1996,
        19241, 19064, 18178,  3762, 16179,  1521,  1055, 16440,  1012,  2424,
         1006,  4642,  2475,  1013, 10819,  1007,  1012,  5646,  1047,  2065,
         2051,  1996, 15559,  3446,  3853,  1006,  1056,  1007,  1027,  2003,
         2579,  2004,  2322,  2086,  1012,  2424,  2561,  1042,  1006,  1056,
         1007,   100,  1006,  1056,  1007,  1010,  2073, 16420,  1006,  1007,
         2003,  1996,  7505,  2818, 10626,  5178,  2039,  2000,  1017,  5282,
         2013,  1996, 20022,  2140,  3853,  1012,  3302,  1012,   102])"
2831,1,['continuous'], SUMMARY,seg_557,7.98 if f(x) is the cdf of a continuous 7.100 the annual maintenance cost in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1021, 1012, 5818, 2065, 1042, 1006, 1060, 1007, 2003, 1996, 3729,
        2546, 1997, 1037, 7142, 1021, 1012, 2531, 1996, 3296, 6032, 3465, 1999,
         102])"
2832,1,['variable'], SUMMARY,seg_557,"random variable defined on [0,1], 1000 of a high-rise office complex prove the following: –(i) f(x) is is beta-i(1.2, 0.8) distributed",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 6721, 8023, 4225, 2006, 1031, 1014, 1010, 1015, 1033, 1010, 6694,
        1997, 1037, 2152, 1011, 4125, 2436, 3375, 6011, 1996, 2206, 1024, 1516,
        1006, 1045, 1007, 1042, 1006, 1060, 1007, 2003, 2003, 8247, 1011, 1045,
        1006, 1015, 1012, 1016, 1010, 1014, 1012, 1022, 1007, 5500,  102])"
2833,1,"['exponential', 'standard']", SUMMARY,seg_557,"u(0, 1) distributed, (ii) − ln(f(x)) where x = (1 − 1∕t), t being the has standard exponential distriage (in years) of the building. find bution, and (iii) −2 ln(f(x)) has the (i) maintenance cost (in000)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1057,  1006,  1014,  1010,  1015,  1007,  5500,  1010,  1006,
         2462,  1007,  1597,  1048,  2078,  1006,  1042,  1006,  1060,  1007,
         1007,  2073,  1060,  1027,  1006,  1015,  1597,   100,  1007,  1010,
         1056,  2108,  1996,  2038,  3115, 27258,  4487,  3367,  4360,  3351,
         1006,  1999,  2086,  1007,  1997,  1996,  2311,  1012,  2424,  2021,
         3258,  1010,  1998,  1006,  3523,  1007,  1597,  2475,  1048,  2078,
         1006,  1042,  1006,  1060,  1007,  1007,  2038,  1996,  1006,  1045,
         1007,  6032,  3465,  1006,  1999,  8889,  2692,  1007,   102])"
2834,1,['distribution'], SUMMARY,seg_557,"a chi-square distribution with for the fifth year, (ii) total main-",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([ 101, 1037, 9610, 1011, 2675, 4353, 2007, 2005, 1996, 3587, 2095, 1010,
        1006, 2462, 1007, 2561, 2364, 1011,  102])"
2835,0,[], SUMMARY,seg_557,"two dof. tenance costs for 10 years, and",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 2048, 2079, 2546, 1012, 2702, 6651, 5366, 2005, 2184, 2086, 1010,
        1998,  102])"
2836,0,[], SUMMARY,seg_557,7.99 chloride content in kilogram (iii) maintenance cost for first 3,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1021,  1012,  5585, 19057,  4180,  1999, 11382, 24915,  1006,
         3523,  1007,  6032,  3465,  2005,  2034,  1017,   102])"
2837,0,[], SUMMARY,seg_557,per cubic meter at a distance x years.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2566, 11919,  8316,  2012,  1037,  3292,  1060,  2086,  1012,
          102])"
2838,0,[], MATHEMATICAL EXPECTATION,seg_559,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8045, 17626])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
2839,1,"['mathematical expectation', 'expectation']", MATHEMATICAL EXPECTATION,seg_559,◾ understand the meaning of mathematical expectation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 8045, 17626])","tensor([  101,   100,  3305,  1996,  3574,  1997,  8045, 17626,   102])"
2840,1,"['functions', 'random', 'random variables', 'expectation', 'variables']", MATHEMATICAL EXPECTATION,seg_559,◾ find the expectation of sums and functions of random variables,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 8045, 17626])","tensor([  101,   100,  2424,  1996, 17626,  1997, 20571,  1998,  4972,  1997,
         6721, 10857,   102])"
2841,1,"['moments', 'expected values', 'factorial']", MATHEMATICAL EXPECTATION,seg_559,"◾ derive moments (ordinary, central, factorial) as expected values",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0.])","tensor([ 8045, 17626])","tensor([  101,   100, 18547,  5312,  1006,  6623,  1010,  2430,  1010,  5387,
         4818,  1007,  2004,  3517,  5300,   102])"
2842,1,"['covariance', 'variance', 'expected values']", MATHEMATICAL EXPECTATION,seg_559,◾ interpret variance and covariance as expected values,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0., 1., 1., 0.])","tensor([ 8045, 17626])","tensor([  101,   100, 17841, 23284,  1998,  2522, 10755, 28335,  2004,  3517,
         5300,   102])"
2843,1,"['independence', 'conditional expectation', 'expectation', 'conditional']", MATHEMATICAL EXPECTATION,seg_559,◾ explain conditional expectation and independence,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0.])","tensor([ 8045, 17626])","tensor([  101,   100,  4863, 18462, 17626,  1998,  4336,   102])"
2844,0,[], MATHEMATICAL EXPECTATION,seg_559,◾ apply the concepts learned to practical problems,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8045, 17626])","tensor([ 101,  100, 6611, 1996, 8474, 4342, 2000, 6742, 3471,  102])"
2845,1,"['location', 'sample space', 'data', 'populations', 'information', 'sample', 'population', 'statistical', 'location measures']", MEANING OF EXPECTATION,seg_561,"many location measures were introduced in chapter 2. these measures concisely summarize the information in a sample as a single number (for univariate data). analogous measures are needed to succinctly summarize the characteristics of statistical populations. the population and sample space were defined in chapter 5. in most of the discussions later, the functional form of the population is known precisely. however, theoretically the concept is valid even in those situations where the",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 3574,  1997, 17626])","tensor([  101,  2116,  3295,  5761,  2020,  3107,  1999,  3127,  1016,  1012,
         2122,  5761,  9530, 18380,  2135,  7680,  7849,  4697,  1996,  2592,
         1999,  1037,  7099,  2004,  1037,  2309,  2193,  1006,  2005,  4895,
        28739, 13143,  2951,  1007,  1012, 19639,  5761,  2024,  2734,  2000,
        10514, 14693, 12273, 14626,  7680,  7849,  4697,  1996,  6459,  1997,
         7778,  7080,  1012,  1996,  2313,  1998,  7099,  2686,  2020,  4225,
         1999,  3127,  1019,  1012,  1999,  2087,  1997,  1996, 10287,  2101,
         1010,  1996,  8360,  2433,  1997,  1996,  2313,  2003,  2124, 10785,
         1012,  2174,  1010, 22634,  1996,  4145,  2003,  9398,  2130,  1999,
         2216,  8146,  2073,  1996,   102])"
2846,1,"['mathematical expectation', 'random variable', 'random', 'expectation', 'variable']", MEANING OF EXPECTATION,seg_561,exact form is either unknown or is partially known. the concept of the mathematical expectation (or simply called expectation) relies on a random variable defined below.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 3574,  1997, 17626])","tensor([  101,  6635,  2433,  2003,  2593,  4242,  2030,  2003,  6822,  2124,
         1012,  1996,  4145,  1997,  1996,  8045, 17626,  1006,  2030,  3432,
         2170, 17626,  1007, 16803,  2006,  1037,  6721,  8023,  4225,  2917,
         1012,   102])"
2847,1,"['mathematical expectation', 'discrete', 'discrete random variables', 'random variable', 'random', 'random variables', 'expectation', 'variables', 'variable']", RANDOM VARIABLE,seg_563,the concept of random variable is of prime importance in mathematical expectation. discrete random variables was defined in section 6.1 of chapter 6,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  1996,  4145,  1997,  6721,  8023,  2003,  1997,  3539,  5197,
         1999,  8045, 17626,  1012, 16246,  6721, 10857,  2001,  4225,  1999,
         2930,  1020,  1012,  1015,  1997,  3127,  1020,   102])"
2848,1,"['function', 'sample space', 'associated', 'random variable', 'probabilities', 'outcome', 'sample', 'random', 'experiment', 'variable']", RANDOM VARIABLE,seg_563,definition 8.1 a random variable is a function defined on the sample space of a random experiment that maps each possible outcome of the sample space to real numbers such that the associated probabilities sum to one.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  6210,  1022,  1012,  1015,  1037,  6721,  8023,  2003,  1037,
         3853,  4225,  2006,  1996,  7099,  2686,  1997,  1037,  6721,  7551,
         2008,  7341,  2169,  2825,  9560,  1997,  1996,  7099,  2686,  2000,
         2613,  3616,  2107,  2008,  1996,  3378,  4013,  3676, 14680,  7680,
         2000,  2028,  1012,   102])"
2849,1,"['discrete random variable', 'outcomes', 'outcome', 'independent', 'recurrence', 'random variable', 'bivariate', 'discrete', 'function', 'probability', 'probabilities', 'random variables', 'recurrence relation', 'complete enumeration', 'sample space', 'discrete random variables', 'sample', 'random', 'experiment', 'variables', 'numerical', 'variable']", RANDOM VARIABLE,seg_563,"this concept is easy to understand for discrete random variables as the number of points in the sample space are countably finite. any number of random variables can be defined on a given sample space. these may be related or independent (see figure 8.3). in every random experiment, there are some numerical values of interest. for example, consider the toss of a die. the possible outcomes are the faces numbered {1,2,3,4,5,6}, each with probability 1/6. if x denotes the face that turns up, we express it mathematically as f (x) = 1∕6 for x = 1, 2, … 6. what we have done is to simply assign a mathematical function to each outcome of a random experiment. this is the most common way to define a discrete random variable. for example, f (x) = qxp is a mathematically defined random variable. there is one more way to define discrete random variables. it is called complete enumeration. consider the random variable p(1) = 0.2, p(2) = 0.6, p(3) = 0.2. here, x takes three values {1,2,3}. as the probabilities add up to one, it is a well-defined random variable. this can also be written as p(x = 1) = 0.2, p(x = 2) = 0.6, p(x = 3) = 0.2 for a univariate random variable. this notation can be extended to bivariate and higher-dimensional random variables. it is better suited when the sample space is of small size. the individual probabilities can also be defined using a recurrence relation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0.])","tensor([6721, 8023])","tensor([  101,  2023,  4145,  2003,  3733,  2000,  3305,  2005, 16246,  6721,
        10857,  2004,  1996,  2193,  1997,  2685,  1999,  1996,  7099,  2686,
         2024,  4175,  8231, 10713,  1012,  2151,  2193,  1997,  6721, 10857,
         2064,  2022,  4225,  2006,  1037,  2445,  7099,  2686,  1012,  2122,
         2089,  2022,  3141,  2030,  2981,  1006,  2156,  3275,  1022,  1012,
         1017,  1007,  1012,  1999,  2296,  6721,  7551,  1010,  2045,  2024,
         2070, 15973,  5300,  1997,  3037,  1012,  2005,  2742,  1010,  5136,
         1996, 10055,  1997,  1037,  3280,  1012,  1996,  2825, 13105,  2024,
         1996,  5344,  8597,  1063,  1015,  1010,  1016,  1010,  1017,  1010,
         1018,  1010,  1019,  1010,  1020,  1065,  1010,  2169,  2007,  9723,
         1015,  1013,  1020,  1012,  2065,  1060, 14796,  1996,  2227,  2008,
         4332,  2039,  1010,  2057,  4671,  2009,  8045,  2135,  2004,  1042,
         1006,  1060,  1007,  1027,   100,  2005,  1060,  1027,  1015,  1010,
         1016,  1010,  1529,  1020,  1012,  2054,  2057,  2031,  2589,  2003,
         2000,  3432, 23911,  1037,  8045,  3853,  2000,  2169,  9560,  1997,
         1037,  6721,  7551,  1012,  2023,  2003,  1996,  2087,  2691,  2126,
         2000,  9375,  1037, 16246,  6721,  8023,  1012,  2005,  2742,  1010,
         1042,  1006,  1060,  1007,  1027,  1053,  2595,  2361,  2003,  1037,
         8045,  2135,  4225,  6721,  8023,  1012,  2045,  2003,  2028,  2062,
         2126,  2000,  9375, 16246,  6721, 10857,  1012,  2009,  2003,  2170,
         3143,  4372, 17897,  8156,  1012,  5136,  1996,  6721,  8023,  1052,
         1006,  1015,  1007,  1027,  1014,  1012,  1016,  1010,  1052,  1006,
         1016,  1007,  1027,  1014,  1012,  1020,  1010,  1052,  1006,  1017,
         1007,  1027,  1014,  1012,  1016,  1012,  2182,  1010,  1060,  3138,
         2093,  5300,  1063,  1015,  1010,  1016,  1010,  1017,  1065,  1012,
         2004,  1996,  4013,  3676, 14680,  5587,  2039,  2000,  2028,  1010,
         2009,  2003,  1037,  2092,  1011,  4225,  6721,  8023,  1012,  2023,
         2064,  2036,  2022,  2517,  2004,  1052,  1006,  1060,  1027,  1015,
         1007,  1027,  1014,  1012,  1016,  1010,  1052,  1006,  1060,  1027,
         1016,  1007,  1027,  1014,  1012,  1020,  1010,  1052,  1006,  1060,
         1027,  1017,  1007,  1027,  1014,  1012,  1016,  2005,  1037,  4895,
        28739, 13143,  6721,  8023,  1012,  2023, 14869,  2064,  2022,  3668,
         2000, 12170, 10755, 13143,  1998,  3020,  1011,  8789,  6721, 10857,
         1012,  2009,  2003,  2488, 10897,  2043,  1996,  7099,  2686,  2003,
         1997,  2235,  2946,  1012,  1996,  3265,  4013,  3676, 14680,  2064,
         2036,  2022,  4225,  2478,  1037, 28667,  3126, 24413,  7189,  1012,
          102])"
2850,1,"['function', 'sample space', 'probability', 'ordered pair', 'outcome', 'sample', 'random', 'probability mass function', 'mass function', 'experiment', 'discrete']", RANDOM VARIABLE,seg_563,"definition 8.2 a probability mass function (pmf) defined on the discrete sample space of a random experiment is a mapping that can be represented as an ordered pair {x, f (x)} if for each possible outcome x of the sample space, the following three conditions are satisfied: (i) f (x) ≥ 0∀x values, (ii)∑x f (x) = 1, and (iii) p(x = x) = f (x) unambiguously.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  6210,  1022,  1012,  1016,  1037,  9723,  3742,  3853,  1006,
         7610,  2546,  1007,  4225,  2006,  1996, 16246,  7099,  2686,  1997,
         1037,  6721,  7551,  2003,  1037, 12375,  2008,  2064,  2022,  3421,
         2004,  2019,  3641,  3940,  1063,  1060,  1010,  1042,  1006,  1060,
         1007,  1065,  2065,  2005,  2169,  2825,  9560,  1060,  1997,  1996,
         7099,  2686,  1010,  1996,  2206,  2093,  3785,  2024,  8510,  1024,
         1006,  1045,  1007,  1042,  1006,  1060,  1007,  1609,   100,  5300,
         1010,  1006,  2462,  1007,   100,  1042,  1006,  1060,  1007,  1027,
         1015,  1010,  1998,  1006,  3523,  1007,  1052,  1006,  1060,  1027,
         1060,  1007,  1027,  1042,  1006,  1060,  1007, 14477, 14905,  8004,
        28078,  1012,   102])"
2851,1,"['continuous', 'interval', 'continuous random variables', 'random', 'random variables', 'variables', 'case']", RANDOM VARIABLE,seg_563,"note that in the case of continuous random variables, it is the area in an infinitesimal interval ∫x",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([6721, 8023])","tensor([  101,  3602,  2008,  1999,  1996,  2553,  1997,  7142,  6721, 10857,
         1010,  2009,  2003,  1996,  2181,  1999,  2019, 10709,  5332,  9067,
        13483,   100,   102])"
2852,1,['variable'], RANDOM VARIABLE,seg_563,"  f (x)dx, where   = dx∕2 that represents the value of the variable at x (figure 8.4). this means that pr(x = c) = 0 for a fixed c. thus, we have the following definition.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  1042,  1006,  1060,  1007,  1040,  2595,  1010,  2073,  1027,
          100,  2008,  5836,  1996,  3643,  1997,  1996,  8023,  2012,  1060,
         1006,  3275,  1022,  1012,  1018,  1007,  1012,  2023,  2965,  2008,
        10975,  1006,  1060,  1027,  1039,  1007,  1027,  1014,  2005,  1037,
         4964,  1039,  1012,  2947,  1010,  2057,  2031,  1996,  2206,  6210,
         1012,   102])"
2853,1,"['continuous', 'function', 'density function', 'probability', 'probability density function']", RANDOM VARIABLE,seg_563,definition 8.3 a probability density function (pdf) defined on the continuous,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([6721, 8023])","tensor([  101,  6210,  1022,  1012,  1017,  1037,  9723,  4304,  3853,  1006,
        11135,  1007,  4225,  2006,  1996,  7142,   102])"
2854,1,"['random', 'experiment']", RANDOM VARIABLE,seg_563,sample space of a random experiment is a mapping that can be represented,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  7099,  2686,  1997,  1037,  6721,  7551,  2003,  1037, 12375,
         2008,  2064,  2022,  3421,   102])"
2855,0,[], RANDOM VARIABLE,seg_563,"2 2 f (x)dx} satisfying the following conditions: (i) f (x) ≥ 0∀x values,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([6721, 8023])","tensor([  101,  1016,  1016,  1042,  1006,  1060,  1007,  1040,  2595,  1065,
        17087,  1996,  2206,  3785,  1024,  1006,  1045,  1007,  1042,  1006,
         1060,  1007,  1609,   100,  5300,  1010,   102])"
2856,1,['function'], RANDOM VARIABLE,seg_563,"verify whether a function defined as f (x; c) = 2cx exp(−cx2) over [0,∞) is a pdf.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101, 20410,  3251,  1037,  3853,  4225,  2004,  1042,  1006,  1060,
         1025,  1039,  1007,  1027,  1016,  2278,  2595,  4654,  2361,  1006,
         1597,  2278,  2595,  2475,  1007,  2058,  1031,  1014,  1010,  1601,
         1007,  2003,  1037, 11135,  1012,   102])"
2857,1,['range'], RANDOM VARIABLE,seg_563,"solution 8.1 as exp(−cx2) takes nonnegative values, the above is positive for c   0, proving (i). integrate over the range of x to get 2c ∫0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  5576,  1022,  1012,  1015,  2004,  4654,  2361,  1006,  1597,
         2278,  2595,  2475,  1007,  3138,  2512,  2638, 26792,  5300,  1010,
         1996,  2682,  2003,  3893,  2005,  1039,  1014,  1010, 13946,  1006,
         1045,  1007,  1012, 17409,  2058,  1996,  2846,  1997,  1060,  2000,
         2131,  1016,  2278,   100,   102])"
2858,1,['range'], RANDOM VARIABLE,seg_563,put x2 = t. the range of integration is the same and we get c ∫0,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([6721, 8023])","tensor([ 101, 2404, 1060, 2475, 1027, 1056, 1012, 1996, 2846, 1997, 8346, 2003,
        1996, 2168, 1998, 2057, 2131, 1039,  100,  102])"
2859,1,"['function', 'cumulative distribution function', 'condition', 'distribution', 'distribution function']", RANDOM VARIABLE,seg_563,"c[ exp(−ct) |∞ 0 ] = 1, proving condition (ii). integrate from 0 to y to get the cdf −c (cumulative distribution function) as c[ exp(−ct) |0 y2 ] = 1 − exp(−cy2). now −c consider p(a   x   b) = ∫a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  1039,  1031,  4654,  2361,  1006,  1597,  6593,  1007,  1064,
         1601,  1014,  1033,  1027,  1015,  1010, 13946,  4650,  1006,  2462,
         1007,  1012, 17409,  2013,  1014,  2000,  1061,  2000,  2131,  1996,
         3729,  2546,  1597,  2278,  1006, 23260,  4353,  3853,  1007,  2004,
         1039,  1031,  4654,  2361,  1006,  1597,  6593,  1007,  1064,  1014,
         1061,  2475,  1033,  1027,  1015,  1597,  4654,  2361,  1006,  1597,
         5666,  2475,  1007,  1012,  2085,  1597,  2278,  5136,  1052,  1006,
         1037,  1060,  1038,  1007,  1027,   100,   102])"
2860,1,"['condition', 'transformation']", RANDOM VARIABLE,seg_563,"exp(−ct)dt using the transformation x2 = t. this integrates to c[ exp(−ct) |b2 ] = −c a2 exp(−ca2) − exp(−cb2). putting x = b2 and x = a2 in the cdf, we get (1 − exp(−cb2)) − (1 − exp(−ca2)) = exp(−ca2) − exp(−cb2), which is the same as above. this proves condition (iii). hence it is a pdf for c   0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([6721, 8023])","tensor([  101,  4654,  2361,  1006,  1597,  6593,  1007, 26718,  2478,  1996,
         8651,  1060,  2475,  1027,  1056,  1012,  2023, 17409,  2015,  2000,
         1039,  1031,  4654,  2361,  1006,  1597,  6593,  1007,  1064,  1038,
         2475,  1033,  1027,  1597,  2278, 22441,  4654,  2361,  1006,  1597,
         3540,  2475,  1007,  1597,  4654,  2361,  1006,  1597, 27421,  2475,
         1007,  1012,  5128,  1060,  1027,  1038,  2475,  1998,  1060,  1027,
        22441,  1999,  1996,  3729,  2546,  1010,  2057,  2131,  1006,  1015,
         1597,  4654,  2361,  1006,  1597, 27421,  2475,  1007,  1007,  1597,
         1006,  1015,  1597,  4654,  2361,  1006,  1597,  3540,  2475,  1007,
         1007,  1027,  4654,  2361,  1006,  1597,  3540,  2475,  1007,  1597,
         4654,  2361,  1006,  1597, 27421,  2475,  1007,  1010,  2029,  2003,
         1996,  2168,  2004,  2682,  1012,  2023, 16481,  4650,  1006,  3523,
         1007,  1012,  6516,  2009,  2003,  1037, 11135,  2005,  1039,  1014,
         1012,   102])"
2861,1,"['cumulative distribution function', 'outcomes', 'right tail probabilities', 'random variable', 'discrete', 'case', 'continuous', 'function', 'probability', 'probabilities', 'tail probabilities', 'random variables', 'tail', 'range', 'discrete random variables', 'random', 'distribution', 'distribution function', 'variables', 'summation', 'variable']", Cumulative Distribution Function,seg_565,"the cumulative probabilities are computed by summing individual probabilities from the lowest possible x value to a higher number (see figure 8.2). the implicit assumption here is that the random variable is arranged in increasing order of possible values of the outcomes. symbolically fx(x) = pr[x ≤ x]. using the summation notation introduced in chapter 1, this can be written as fx(x) = ∑k≤xp(k). for x = 1,f(x) = p(x) = p(1). for x = 2,f(x) = p(1) + p(2), and so on. the cdf is a jump (or step) function if x is discrete (figure 8.2). in this case, we call it a cumulative probability function. analogously the right tail probabilities is called the survival function s(x). they are related as f(x) = 1 − s(x). if x is continuous, we use integration instead of summation. thus, irrespective of the nature of the random variable, we can define the cumulative distribution function as the probability that the random variable x takes values less than or equal to x, where x is a specified number within the range. obviously the cdf is an increasing function of x. this means that f(x) − f(x − 1) = p(x) for discrete random variables. in the case of continuous random variables, we have (i) f(x) is a nondecreasing function of x, (ii) limx→llf(x) = 0",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([23260,  4353,  3853])","tensor([  101,  1996, 23260,  4013,  3676, 14680,  2024, 24806,  2011,  7680,
         6562,  3265,  4013,  3676, 14680,  2013,  1996,  7290,  2825,  1060,
         3643,  2000,  1037,  3020,  2193,  1006,  2156,  3275,  1022,  1012,
         1016,  1007,  1012,  1996, 24655, 11213,  2182,  2003,  2008,  1996,
         6721,  8023,  2003,  5412,  1999,  4852,  2344,  1997,  2825,  5300,
         1997,  1996, 13105,  1012, 12613,  3973, 23292,  1006,  1060,  1007,
         1027, 10975,  1031,  1060,  1608,  1060,  1033,  1012,  2478,  1996,
         7680, 28649, 14869,  3107,  1999,  3127,  1015,  1010,  2023,  2064,
         2022,  2517,  2004, 23292,  1006,  1060,  1007,  1027,   100,  1006,
         1047,  1007,  1012,  2005,  1060,  1027,  1015,  1010,  1042,  1006,
         1060,  1007,  1027,  1052,  1006,  1060,  1007,  1027,  1052,  1006,
         1015,  1007,  1012,  2005,  1060,  1027,  1016,  1010,  1042,  1006,
         1060,  1007,  1027,  1052,  1006,  1015,  1007,  1009,  1052,  1006,
         1016,  1007,  1010,  1998,  2061,  2006,  1012,  1996,  3729,  2546,
         2003,  1037,  5376,  1006,  2030,  3357,  1007,  3853,  2065,  1060,
         2003, 16246,  1006,  3275,  1022,  1012,  1016,  1007,  1012,  1999,
         2023,  2553,  1010,  2057,  2655,  2009,  1037, 23260,  9723,  3853,
         1012, 19639,  2135,  1996,  2157,  5725,  4013,  3676, 14680,  2003,
         2170,  1996,  7691,  3853,  1055,  1006,  1060,  1007,  1012,  2027,
         2024,  3141,  2004,  1042,  1006,  1060,  1007,  1027,  1015,  1597,
         1055,  1006,  1060,  1007,  1012,  2065,  1060,  2003,  7142,  1010,
         2057,  2224,  8346,  2612,  1997,  7680, 28649,  1012,  2947,  1010,
        20868,  6072,  5051, 15277,  1997,  1996,  3267,  1997,  1996,  6721,
         8023,  1010,  2057,  2064,  9375,  1996, 23260,  4353,  3853,  2004,
         1996,  9723,  2008,  1996,  6721,  8023,  1060,  3138,  5300,  2625,
         2084,  2030,  5020,  2000,  1060,  1010,  2073,  1060,  2003,  1037,
         9675,  2193,  2306,  1996,  2846,  1012,  5525,  1996,  3729,  2546,
         2003,  2019,  4852,  3853,  1997,  1060,  1012,  2023,  2965,  2008,
         1042,  1006,  1060,  1007,  1597,  1042,  1006,  1060,  1597,  1015,
         1007,  1027,  1052,  1006,  1060,  1007,  2005, 16246,  6721, 10857,
         1012,  1999,  1996,  2553,  1997,  7142,  6721, 10857,  1010,  2057,
         2031,  1006,  1045,  1007,  1042,  1006,  1060,  1007,  2003,  1037,
         2512,  3207, 16748, 21369,  3070,  3853,  1997,  1060,  1010,  1006,
         2462,  1007, 18525,  2595, 30113,  3363,  2546,  1006,  1060,  1007,
         1027,  1014,   102])"
2862,1,"['continuous', 'tail', 'function', 'outcomes', 'probabilities', 'sample', 'random', 'experiment']", Cumulative Distribution Function,seg_565,"ul are the lower and upper limits, and (v) f(x) is continuous function of x on the right, with countable number of discontinuities, if any. property (i) follows trivially due to our implicit assumption that the outcomes of the random experiment are arranged in ascending order of their values. this means that if x1 is strictly less than x2, then all sample points that are part of the left tail up to x1 are automatically part of the left tail up to x2. thus, the sum of probabilities up to x1 is strictly less than that up to x2. other properties follow easily due to the increasing nature of f(x), which must eventually equal 1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([  101, 17359,  2024,  1996,  2896,  1998,  3356,  6537,  1010,  1998,
         1006,  1058,  1007,  1042,  1006,  1060,  1007,  2003,  7142,  3853,
         1997,  1060,  2006,  1996,  2157,  1010,  2007,  4175,  3085,  2193,
         1997, 12532, 16778, 11231,  6447,  1010,  2065,  2151,  1012,  3200,
         1006,  1045,  1007,  4076, 20610,  2135,  2349,  2000,  2256, 24655,
        11213,  2008,  1996, 13105,  1997,  1996,  6721,  7551,  2024,  5412,
         1999, 22316,  2344,  1997,  2037,  5300,  1012,  2023,  2965,  2008,
         2065,  1060,  2487,  2003,  9975,  2625,  2084,  1060,  2475,  1010,
         2059,  2035,  7099,  2685,  2008,  2024,  2112,  1997,  1996,  2187,
         5725,  2039,  2000,  1060,  2487,  2024,  8073,  2112,  1997,  1996,
         2187,  5725,  2039,  2000,  1060,  2475,  1012,  2947,  1010,  1996,
         7680,  1997,  4013,  3676, 14680,  2039,  2000,  1060,  2487,  2003,
         9975,  2625,  2084,  2008,  2039,  2000,  1060,  2475,  1012,  2060,
         5144,  3582,  4089,  2349,  2000,  1996,  4852,  3267,  1997,  1042,
         1006,  1060,  1007,  1010,  2029,  2442,  2776,  5020,  1015,  1012,
          102])"
2863,1,"['tail', 'probabilities']", Cumulative Distribution Function,seg_565,"as the cdf accumulates probabilities from the left tail, it easily follows that for b   a,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([  101,  2004,  1996,  3729,  2546, 27598,  2015,  4013,  3676, 14680,
         2013,  1996,  2187,  5725,  1010,  2009,  4089,  4076,  2008,  2005,
         1038,  1037,  1010,   102])"
2864,1,['discrete'], Cumulative Distribution Function,seg_565,b ⎧⎪f(a) + p(k) if x is discrete; ∑ ⎪ k=a+1 f(b) = ⎨⎪ b,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([  101,  1038,   100,  1006,  1037,  1007,  1009,  1052,  1006,  1047,
         1007,  2065,  1060,  2003, 16246,  1025,   100,   100,  1047,  1027,
         1037,  1009,  1015,  1042,  1006,  1038,  1007,  1027,   100,  1038,
          102])"
2865,1,['continuous'], Cumulative Distribution Function,seg_565,⎪f(a) + f (x)dx if x is continuous. ⎩ ∫a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])","tensor([23260,  4353,  3853])","tensor([ 101,  100, 1006, 1037, 1007, 1009, 1042, 1006, 1060, 1007, 1040, 2595,
        2065, 1060, 2003, 7142, 1012,  100,  100,  102])"
2866,1,"['continuous', 'discrete', 'table', 'random variable', 'random', 'distribution', 'discrete distribution', 'variable']", Cumulative Distribution Function,seg_565,"this gives pr[a x ≤ b] = f(b) − f(a) (table 8.1). the pdf of a continuous distribution can be obtained from the cdf by differentiation with respect to the random variable, and that of a discrete distribution can be obtained from the cdf by differencing. symbolically,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([  101,  2023,  3957, 10975,  1031,  1037,  1060,  1608,  1038,  1033,
         1027,  1042,  1006,  1038,  1007,  1597,  1042,  1006,  1037,  1007,
         1006,  2795,  1022,  1012,  1015,  1007,  1012,  1996, 11135,  1997,
         1037,  7142,  4353,  2064,  2022,  4663,  2013,  1996,  3729,  2546,
         2011, 20582,  2007,  4847,  2000,  1996,  6721,  8023,  1010,  1998,
         2008,  1997,  1037, 16246,  4353,  2064,  2022,  4663,  2013,  1996,
         3729,  2546,  2011, 11234,  2368,  6129,  1012, 12613,  3973,  1010,
          102])"
2867,1,['limit'], Cumulative Distribution Function,seg_565,provided the limit exists.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([ 101, 3024, 1996, 5787, 6526, 1012,  102])"
2868,1,['function'], Cumulative Distribution Function,seg_565,"verify whether a function defined as f(x; c, d) = (1∕(d − c))[dxc − cxd] over [0, 1] is a cdf.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([  101, 20410,  3251,  1037,  3853,  4225,  2004,  1042,  1006,  1060,
         1025,  1039,  1010,  1040,  1007,  1027,  1006,   100,  1006,  1040,
         1597,  1039,  1007,  1007,  1031,  1040,  2595,  2278,  1597,  1039,
         2595,  2094,  1033,  2058,  1031,  1014,  1010,  1015,  1033,  2003,
         1037,  3729,  2546,  1012,   102])"
2869,1,"['factor', 'function']", Cumulative Distribution Function,seg_565,"solution 8.2 differentiate with respect to x to get f (x; c, d) = (1∕(d − c))[cdxc−1 − cdxd−1]. take cd as a common factor to get f (x; c, d) = (cd∕(d − c))[xc−1 − xd−1]. as c   d and 0 ≤ x ≤ 1, the expression inside the square bracket is always positive. this shows that f(x) is a nondecreasing function of x. as ll = 0,f(ll) = f(0) = (1∕(d − c))[0 − 0] = 0, showing that limx→llf(x) = 0. as ul = 1,f(ul) = f(1) = (1∕(d − c))[d − c] = 1, showing that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([  101,  5576,  1022,  1012,  1016, 21032,  2007,  4847,  2000,  1060,
         2000,  2131,  1042,  1006,  1060,  1025,  1039,  1010,  1040,  1007,
         1027,  1006,   100,  1006,  1040,  1597,  1039,  1007,  1007,  1031,
         3729,  2595,  2278, 27944,  1597,  3729,  2595,  2094, 27944,  1033,
         1012,  2202,  3729,  2004,  1037,  2691,  5387,  2000,  2131,  1042,
         1006,  1060,  1025,  1039,  1010,  1040,  1007,  1027,  1006,   100,
         1006,  1040,  1597,  1039,  1007,  1007,  1031,  1060,  2278, 27944,
         1597,  1060,  2094, 27944,  1033,  1012,  2004,  1039,  1040,  1998,
         1014,  1608,  1060,  1608,  1015,  1010,  1996,  3670,  2503,  1996,
         2675, 21605,  2003,  2467,  3893,  1012,  2023,  3065,  2008,  1042,
         1006,  1060,  1007,  2003,  1037,  2512,  3207, 16748, 21369,  3070,
         3853,  1997,  1060,  1012,  2004,  2222,  1027,  1014,  1010,  1042,
         1006,  2222,  1007,  1027,  1042,  1006,  1014,  1007,  1027,  1006,
          100,  1006,  1040,  1597,  1039,  1007,  1007,  1031,  1014,  1597,
         1014,  1033,  1027,  1014,  1010,  4760,  2008, 18525,  2595, 30113,
         3363,  2546,  1006,  1060,  1007,  1027,  1014,  1012,  2004, 17359,
         1027,  1015,  1010,  1042,  1006, 17359,  1007,  1027,  1042,  1006,
         1015,  1007,  1027,  1006,   100,  1006,  1040,  1597,  1039,  1007,
         1007,  1031,  1040,  1597,  1039,  1033,  1027,  1015,  1010,  4760,
         2008,   102])"
2870,1,['interval'], Cumulative Distribution Function,seg_565,"(cd∕(d − c))[1∕c − 1∕d] = 1. here, f(x) does not have discontinuities in the interval [0, 1]. hence all the conditions mentioned above are satisfied, proving that f(x) is indeed a cdf.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([23260,  4353,  3853])","tensor([  101,  1006,   100,  1006,  1040,  1597,  1039,  1007,  1007,  1031,
          100,  1597,   100,  1033,  1027,  1015,  1012,  2182,  1010,  1042,
         1006,  1060,  1007,  2515,  2025,  2031, 12532, 16778, 11231,  6447,
         1999,  1996, 13483,  1031,  1014,  1010,  1015,  1033,  1012,  6516,
         2035,  1996,  3785,  3855,  2682,  2024,  8510,  1010, 13946,  2008,
         1042,  1006,  1060,  1007,  2003,  5262,  1037,  3729,  2546,  1012,
          102])"
2871,1,"['location', 'mean', 'associated', 'average', 'weighted average', 'populations', 'probabilities', 'sample', 'random', 'random variables', 'variables', 'arithmetic mean', 'expected value']", Expected Value,seg_567,"measures of location introduced in chapter 2 refer to a sample. the expected value can be thought of as the arithmetic mean (weighted average) of random variables or populations, where the weights are the probabilities. the mean has a much more broader meaning, as it could be associated with any numeric quantity which may or may not be random. the concept of “expected value” appeared for the first time in the works of christian huygens around 1657.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  5761,  1997,  3295,  3107,  1999,  3127,  1016,  6523,  2000,
         1037,  7099,  1012,  1996,  3517,  3643,  2064,  2022,  2245,  1997,
         2004,  1996, 20204,  2812,  1006, 18215,  2779,  1007,  1997,  6721,
        10857,  2030,  7080,  1010,  2073,  1996, 15871,  2024,  1996,  4013,
         3676, 14680,  1012,  1996,  2812,  2038,  1037,  2172,  2062, 12368,
         3574,  1010,  2004,  2009,  2071,  2022,  3378,  2007,  2151, 16371,
        25531, 11712,  2029,  2089,  2030,  2089,  2025,  2022,  6721,  1012,
         1996,  4145,  1997,  1523,  3517,  3643,  1524,  2596,  2005,  1996,
         2034,  2051,  1999,  1996,  2573,  1997,  3017, 15876,  2100, 21230,
         2105, 13913,  2581,  1012,   102])"
2872,1,"['mean', 'function', 'mathematical expectation', 'random variable', 'event', 'random', 'population', 'experiment', 'expectation', 'variable']", Expected Value,seg_567,"definition 8.4 mathematical expectation is used to concisely quantify the mean value of an event, an experiment, a random variable, or a function of it in a population.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0.])","tensor([3517, 3643])","tensor([  101,  6210,  1022,  1012,  1018,  8045, 17626,  2003,  2109,  2000,
         9530, 18380,  2135, 24110, 27351,  1996,  2812,  3643,  1997,  2019,
         2724,  1010,  2019,  7551,  1010,  1037,  6721,  8023,  1010,  2030,
         1037,  3853,  1997,  2009,  1999,  1037,  2313,  1012,   102])"
2873,1,"['range', 'random', 'random variables', 'population', 'variables', 'average', 'expected value']", Expected Value,seg_567,"it is also called the expected or average value of the argument, or the center of mass in physical sciences. it can be any real number within the range for real-valued random variables. the expected value of integer-valued random variables need not be an integer. it is so called because (i) population may be unknown, (ii) population",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([3517, 3643])","tensor([  101,  2009,  2003,  2036,  2170,  1996,  3517,  2030,  2779,  3643,
         1997,  1996,  6685,  1010,  2030,  1996,  2415,  1997,  3742,  1999,
         3558,  4163,  1012,  2009,  2064,  2022,  2151,  2613,  2193,  2306,
         1996,  2846,  2005,  2613,  1011, 11126,  6721, 10857,  1012,  1996,
         3517,  3643,  1997, 16109,  1011, 11126,  6721, 10857,  2342,  2025,
         2022,  2019, 16109,  1012,  2009,  2003,  2061,  2170,  2138,  1006,
         1045,  1007,  2313,  2089,  2022,  4242,  1010,  1006,  2462,  1007,
         2313,   102])"
2874,1,"['functions', 'population', 'population mean', 'conditional', 'mean', 'expected value', 'populations', 'continuous random variables', 'expectation operator', 'discrete', 'case', 'continuous', 'function', 'random variables', 'expectation', 'parameters', 'distributions', 'random', 'variables', 'conditional distributions']", Expected Value,seg_567,"could be un-enumerable, (iii) it could be a function of the unknown parameters of the population, and (iv) it is just the expected value (and not the exact value) of the population under study. it is defined for discrete as well as continuous random variables, and any well-defined functions of them. it is a scalar for univariate populations, and a vector for multivariate random variables. it is denoted as e(x),e[x], or e x, where e is the expectation operator, followed by the argument. the argument (also called the operand, which is usually an expression or a function in capital letters) of “e” can be any well-defined function of x, including integer and fractional powers of x, or conditional distributions. it can also be another expectation expression. thus, the “e” operator can be recursively nested (section 8.4, p. 358). in the rest of the chapter, we will simply call it the expected value. in the particular case when the argument is x itself, it is called the population mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0.])","tensor([3517, 3643])","tensor([  101,  2071,  2022,  4895,  1011,  4372, 17897, 16670,  1010,  1006,
         3523,  1007,  2009,  2071,  2022,  1037,  3853,  1997,  1996,  4242,
        11709,  1997,  1996,  2313,  1010,  1998,  1006,  4921,  1007,  2009,
         2003,  2074,  1996,  3517,  3643,  1006,  1998,  2025,  1996,  6635,
         3643,  1007,  1997,  1996,  2313,  2104,  2817,  1012,  2009,  2003,
         4225,  2005, 16246,  2004,  2092,  2004,  7142,  6721, 10857,  1010,
         1998,  2151,  2092,  1011,  4225,  4972,  1997,  2068,  1012,  2009,
         2003,  1037, 26743,  2099,  2005,  4895, 28739, 13143,  7080,  1010,
         1998,  1037,  9207,  2005,  4800, 10755, 13143,  6721, 10857,  1012,
         2009,  2003, 19537,  2004,  1041,  1006,  1060,  1007,  1010,  1041,
         1031,  1060,  1033,  1010,  2030,  1041,  1060,  1010,  2073,  1041,
         2003,  1996, 17626,  6872,  1010,  2628,  2011,  1996,  6685,  1012,
         1996,  6685,  1006,  2036,  2170,  1996,  3850,  4859,  1010,  2029,
         2003,  2788,  2019,  3670,  2030,  1037,  3853,  1999,  3007,  4144,
         1007,  1997,  1523,  1041,  1524,  2064,  2022,  2151,  2092,  1011,
         4225,  3853,  1997,  1060,  1010,  2164, 16109,  1998, 12884,  2389,
         4204,  1997,  1060,  1010,  2030, 18462, 20611,  1012,  2009,  2064,
         2036,  2022,  2178, 17626,  3670,  1012,  2947,  1010,  1996,  1523,
         1041,  1524,  6872,  2064,  2022, 28667,  9236, 14547,  9089,  2098,
         1006,  2930,  1022,  1012,  1018,  1010,  1052,  1012,  3486,  2620,
         1007,  1012,  1999,  1996,  2717,  1997,  1996,  3127,  1010,  2057,
         2097,  3432,  2655,  2009,  1996,  3517,  3643,  1012,  1999,  1996,
         3327,  2553,  2043,  1996,  6685,  2003,  1060,  2993,  1010,  2009,
         2003,  2170,  1996,  2313,  2812,  1012,   102])"
2875,1,"['random variable', 'random', 'expected value', 'variable']", Expected Value,seg_567,definition 8.5 the expected value of a univariate random variable is defined as:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0.])","tensor([3517, 3643])","tensor([  101,  6210,  1022,  1012,  1019,  1996,  3517,  3643,  1997,  1037,
         4895, 28739, 13143,  6721,  8023,  2003,  4225,  2004,  1024,   102])"
2876,1,['discrete'], Expected Value,seg_567,⎧ ∞ ⎪ ∑ xkpk if x is discrete; ⎪⎨k=−∞ e(x) = ∞ ∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,   100,  1601,   100,   100,  1060,  2243,  2361,  2243,  2065,
         1060,  2003, 16246,  1025,   100,  1027,  1597, 30128,  1041,  1006,
         1060,  1007,  1027,  1601,  1601,   102])"
2877,1,['continuous'], Expected Value,seg_567,⎪ xf (x)dx = xdf(x) if x is continuous. ⎪⎩∫−∞ ∫−∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,   100,  1060,  2546,  1006,  1060,  1007,  1040,  2595,  1027,
         1060, 20952,  1006,  1060,  1007,  2065,  1060,  2003,  7142,  1012,
          100,   100,   102])"
2878,1,"['binomial distribution', 'random variable', 'poisson', 'expected values', 'geometric', 'binomial', 'discrete', 'case', 'continuous', 'random variables', 'expectation', 'range', 'random', 'distribution', 'variables', 'summation', 'expected value', 'variable']", Expected Value,seg_567,"whenever this sum is absolutely convergent, we call it the expected value of x. this means that ∫ |x|df(x) ∞ in the continuous case, and ∑x|x|f (x) ∞ in the discrete case. although we have indicated the range as −∞ to ∞, the actual range depends on the random variable. for example, as the binomial distribution takes values between 0 and a positive integer n, all expected values of binomial random variables use the summation range from 0 to n. similarly, as the poisson and geometric distributions take values between 0 and ∞, the summation is carried out in this range only. hence the very first step in finding the expectation is to figure out the exact range (figures 8.3, 8.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  7188,  2023,  7680,  2003,  7078, 28314,  3372,  1010,  2057,
         2655,  2009,  1996,  3517,  3643,  1997,  1060,  1012,  2023,  2965,
         2008,   100,  1064,  1060,  1064,  1040,  2546,  1006,  1060,  1007,
         1601,  1999,  1996,  7142,  2553,  1010,  1998,   100,  1064,  1060,
         1064,  1042,  1006,  1060,  1007,  1601,  1999,  1996, 16246,  2553,
         1012,  2348,  2057,  2031,  5393,  1996,  2846,  2004,  1597, 30128,
         2000,  1601,  1010,  1996,  5025,  2846,  9041,  2006,  1996,  6721,
         8023,  1012,  2005,  2742,  1010,  2004,  1996,  8026, 20936,  2389,
         4353,  3138,  5300,  2090,  1014,  1998,  1037,  3893, 16109,  1050,
         1010,  2035,  3517,  5300,  1997,  8026, 20936,  2389,  6721, 10857,
         2224,  1996,  7680, 28649,  2846,  2013,  1014,  2000,  1050,  1012,
         6660,  1010,  2004,  1996, 13433, 24077,  1998, 14965, 20611,  2202,
         5300,  2090,  1014,  1998,  1601,  1010,  1996,  7680, 28649,  2003,
         3344,  2041,  1999,  2023,  2846,  2069,  1012,  6516,  1996,  2200,
         2034,  3357,  1999,  4531,  1996, 17626,  2003,  2000,  3275,  2041,
         1996,  6635,  2846,  1006,  4481,  1022,  1012,  1017,  1010,  1022,
         1012,  1018,  1007,  1012,   102])"
2879,1,['probabilities'], Expected Value,seg_567,"as p′ ks are probabilities that sum to 1 (∑kpk = 1, ∫ f (x)dx = 1), the above sum will almost always converge when∑k",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3517, 3643])","tensor([  101,  2004,  1052,  1531, 29535,  2024,  4013,  3676, 14680,  2008,
         7680,  2000,  1015,  1006,   100,  1027,  1015,  1010,   100,  1042,
         1006,  1060,  1007,  1040,  2595,  1027,  1015,  1007,  1010,  1996,
         2682,  7680,  2097,  2471,  2467, 28314,   100,   102])"
2880,1,"['range', 'random', 'random variables', 'variables', 'expected value', 'case']", Expected Value,seg_567,"∞ ∞ |x|f (x)dx   ∞. on occasion this sum may diverge, in which case we say that the expected value does not exist. this seldom happens for random variables defined over a finite range.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([3517, 3643])","tensor([  101,  1601,  1601,  1064,  1060,  1064,  1042,  1006,  1060,  1007,
         1040,  2595,  1601,  1012,  2006,  6686,  2023,  7680,  2089, 17856,
         3351,  1010,  1999,  2029,  2553,  2057,  2360,  2008,  1996,  3517,
         3643,  2515,  2025,  4839,  1012,  2023, 15839,  6433,  2005,  6721,
        10857,  4225,  2058,  1037, 10713,  2846,  1012,   102])"
2881,1,"['mean', 'function', 'range', 'average', 'weighted average', 'random variable', 'probabilities', 'random', 'expectation', 'expectation operator', 'arithmetic mean', 'expected value', 'variable']", Expected Value,seg_567,"as mentioned earlier, e(x) is a weighted average of all possible values that the variable can take with corresponding probabilities as the weights. in other words, the notation e(x) can be considered as an expectation operator, operating upon the entire range of its argument (which is not shown, but is understood from context). the argument of this expectation operator is quite often a random variable, with the implied meaning that it is the centroid of the argument. as discussed below, the argument could also be any well-defined function of the random variable (e.g., e(x2),e(x−k)). if all weights (pk or f (xk)) are equal (and the range of x is finite), the expected value reduces to the ordinary average (arithmetic mean) of all possible values. for instance, let x take values in the range 1–n and let pk = 1∕n (so that ∑kpk = 1) then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  2004,  3855,  3041,  1010,  1041,  1006,  1060,  1007,  2003,
         1037, 18215,  2779,  1997,  2035,  2825,  5300,  2008,  1996,  8023,
         2064,  2202,  2007,  7978,  4013,  3676, 14680,  2004,  1996, 15871,
         1012,  1999,  2060,  2616,  1010,  1996, 14869,  1041,  1006,  1060,
         1007,  2064,  2022,  2641,  2004,  2019, 17626,  6872,  1010,  4082,
         2588,  1996,  2972,  2846,  1997,  2049,  6685,  1006,  2029,  2003,
         2025,  3491,  1010,  2021,  2003,  5319,  2013,  6123,  1007,  1012,
         1996,  6685,  1997,  2023, 17626,  6872,  2003,  3243,  2411,  1037,
         6721,  8023,  1010,  2007,  1996, 13339,  3574,  2008,  2009,  2003,
         1996, 18120,  3593,  1997,  1996,  6685,  1012,  2004,  6936,  2917,
         1010,  1996,  6685,  2071,  2036,  2022,  2151,  2092,  1011,  4225,
         3853,  1997,  1996,  6721,  8023,  1006,  1041,  1012,  1043,  1012,
         1010,  1041,  1006,  1060,  2475,  1007,  1010,  1041,  1006,  1060,
        22543,  2243,  1007,  1007,  1012,  2065,  2035, 15871,  1006,  1052,
         2243,  2030,  1042,  1006,  1060,  2243,  1007,  1007,  2024,  5020,
         1006,  1998,  1996,  2846,  1997,  1060,  2003, 10713,  1007,  1010,
         1996,  3517,  3643, 13416,  2000,  1996,  6623,  2779,  1006, 20204,
         2812,  1007,  1997,  2035,  2825,  5300,  1012,  2005,  6013,  1010,
         2292,  1060,  2202,  5300,  1999,  1996,  2846,  1015,  1516,  1050,
         1998,  2292,  1052,  2243,  1027,   100,  1006,  2061,  2008,   100,
         1027,  1015,  1007,  2059,   102])"
2882,1,['expected value'], Expected Value,seg_567,"example 8.3 expected value of c/x2,x ≥1",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([ 101, 2742, 1022, 1012, 1017, 3517, 3643, 1997, 1039, 1013, 1060, 2475,
        1010, 1060, 1609, 2487,  102])"
2883,1,"['random variable', 'random', 'expected value', 'variable']", Expected Value,seg_567,"find the expected value of the random variable x with pdf f (x) = c∕x2, x ≥ 1, where c is the normalizing constant.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  2424,  1996,  3517,  3643,  1997,  1996,  6721,  8023,  1060,
         2007, 11135,  1042,  1006,  1060,  1007,  1027,   100,  1010,  1060,
         1609,  1015,  1010,  2073,  1039,  2003,  1996,  3671,  6026,  5377,
         1012,   102])"
2884,1,"['probability', 'total probability']", Expected Value,seg_567,"solution 8.3 as the total probability must be one, c ∫1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([ 101, 5576, 1022, 1012, 1017, 2004, 1996, 2561, 9723, 2442, 2022, 2028,
        1010, 1039,  100,  102])"
2885,1,['expected value'], Expected Value,seg_567,−c[1∕x|∞ 1 ] = 1 giving c = 1. the expected value is e(x) = ∫1,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([ 101, 1597, 2278, 1031,  100, 1064, 1601, 1015, 1033, 1027, 1015, 3228,
        1039, 1027, 1015, 1012, 1996, 3517, 3643, 2003, 1041, 1006, 1060, 1007,
        1027,  100,  102])"
2886,1,"['random', 'experiment', 'experiments', 'average', 'expected value']", Expected Value,seg_567,"in many of the examples given below, we are interested in the expected value of random experiments. in such situations, e(x) can be considered as the average value of the experiment, if it is repeated under identical conditions a large number of times.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([ 101, 1999, 2116, 1997, 1996, 4973, 2445, 2917, 1010, 2057, 2024, 4699,
        1999, 1996, 3517, 3643, 1997, 6721, 7885, 1012, 1999, 2107, 8146, 1010,
        1041, 1006, 1060, 1007, 2064, 2022, 2641, 2004, 1996, 2779, 3643, 1997,
        1996, 7551, 1010, 2065, 2009, 2003, 5567, 2104, 7235, 3785, 1037, 2312,
        2193, 1997, 2335, 1012,  102])"
2887,0,[], Expected Value,seg_567,example 8.4 promotional coupons in cereals pack,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3517, 3643])","tensor([  101,  2742,  1022,  1012,  1018, 10319,  8648,  5644,  1999, 20943,
         2015,  5308,   102])"
2888,1,['probability'], Expected Value,seg_567,"a cereals manufacturer offers a promotional coupon with a new brand of cereals pack. two types of coupons (that carry either 1 point or 2 points) are printed, and exactly one of them is put in each pack. probability that a customer will find a 1-point coupon is p, and a 2-points coupon is q = 1 − p. if a customer purchases n packs of the cereal, what is the expected number of points earned?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  1037, 20943,  2015,  7751,  4107,  1037, 10319,  8648,  2239,
         2007,  1037,  2047,  4435,  1997, 20943,  2015,  5308,  1012,  2048,
         4127,  1997,  8648,  5644,  1006,  2008,  4287,  2593,  1015,  2391,
         2030,  1016,  2685,  1007,  2024,  6267,  1010,  1998,  3599,  2028,
         1997,  2068,  2003,  2404,  1999,  2169,  5308,  1012,  9723,  2008,
         1037,  8013,  2097,  2424,  1037,  1015,  1011,  2391,  8648,  2239,
         2003,  1052,  1010,  1998,  1037,  1016,  1011,  2685,  8648,  2239,
         2003,  1053,  1027,  1015,  1597,  1052,  1012,  2065,  1037,  8013,
        17402,  1050, 15173,  1997,  1996, 20943,  1010,  2054,  2003,  1996,
         3517,  2193,  1997,  2685,  3687,  1029,   102])"
2889,1,"['probability', 'scores', 'probabilities']", Expected Value,seg_567,"solution 8.4 as each pack contains a coupon, the minimum score is n and the maximum score is 2n. these two scores can happen in one way each with respective probabilities pn and qn. the customer can score (n + 1) points in n ways (exactly one cereal pack contains a 2-points coupon, and the rest (n − 1) packs contain 1-point coupons) with probability pn−1q, so that the probability of score",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  5576,  1022,  1012,  1018,  2004,  2169,  5308,  3397,  1037,
         8648,  2239,  1010,  1996,  6263,  3556,  2003,  1050,  1998,  1996,
         4555,  3556,  2003,  1016,  2078,  1012,  2122,  2048,  7644,  2064,
         4148,  1999,  2028,  2126,  2169,  2007,  7972,  4013,  3676, 14680,
         1052,  2078,  1998,  1053,  2078,  1012,  1996,  8013,  2064,  3556,
         1006,  1050,  1009,  1015,  1007,  2685,  1999,  1050,  3971,  1006,
         3599,  2028, 20943,  5308,  3397,  1037,  1016,  1011,  2685,  8648,
         2239,  1010,  1998,  1996,  2717,  1006,  1050,  1597,  1015,  1007,
        15173,  5383,  1015,  1011,  2391,  8648,  5644,  1007,  2007,  9723,
         1052,  2078, 27944,  4160,  1010,  2061,  2008,  1996,  9723,  1997,
         3556,   102])"
2890,0,['n'], Expected Value,seg_567,"n) pn−1q, and so on. hence the expected score is found by summing the",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3517, 3643])","tensor([  101,  1050,  1007,  1052,  2078, 27944,  4160,  1010,  1998,  2061,
         2006,  1012,  6516,  1996,  3517,  3556,  2003,  2179,  2011,  7680,
         6562,  1996,   102])"
2891,1,['probabilities'], Expected Value,seg_567,points earned multiplied by the corresponding probabilities as e(x) = (n ∗ pn +,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  2685,  3687, 28608,  2011,  1996,  7978,  4013,  3676, 14680,
         2004,  1041,  1006,  1060,  1007,  1027,  1006,  1050,  1598,  1052,
         2078,  1009,   102])"
2892,0,['n'], Expected Value,seg_567,binomial expansion for (p + q)n = 1 to simplify the above as n + ( 1,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([3517, 3643])","tensor([  101,  8026, 20936,  2389,  4935,  2005,  1006,  1052,  1009,  1053,
         1007,  1050,  1027,  1015,  2000, 21934, 28250,  1996,  2682,  2004,
         1050,  1009,  1006,  1015,   102])"
2893,0,[], Expected Value,seg_567,example 8.5 coin tossing game,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3517, 3643])","tensor([  101,  2742,  1022,  1012,  1019,  9226, 15021,  2208,   102])"
2894,1,"['tail', 'loss', 'trials', 'expected value']", Expected Value,seg_567,"consider a simple game in which a fair coin is tossed. you win $100 if the head turns up. if it is a tail that turns up, you lose $90. what is your expected loss or gain in one toss? what is the expected value in n ( 2) tosses? does the expected value converge when a sufficiently large number of trials are conducted?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  5136,  1037,  3722,  2208,  1999,  2029,  1037,  4189,  9226,
         2003,  7463,  1012,  2017,  2663,  1002,  2531,  2065,  1996,  2132,
         4332,  2039,  1012,  2065,  2009,  2003,  1037,  5725,  2008,  4332,
         2039,  1010,  2017,  4558,  1002,  3938,  1012,  2054,  2003,  2115,
         3517,  3279,  2030,  5114,  1999,  2028, 10055,  1029,  2054,  2003,
         1996,  3517,  3643,  1999,  1050,  1006,  1016,  1007, 10055,  2229,
         1029,  2515,  1996,  3517,  3643, 28314,  2043,  1037, 12949,  2312,
         2193,  1997,  7012,  2024,  4146,  1029,   102])"
2895,1,['expected value'], Expected Value,seg_567,"solution 8.5 as the coin is fair, p(head) = p(tail) = 1/2. thus, the expected value in one toss = (1∕2) ∗ 100 − (1∕2) ∗ 90 = 50 − 45 = 5, which is a gain. if this game is repeated n times, our expected gain is 5 ∗ n. this expected value is divergent as n → ∞. the expected value can also be a negative number. in the above example, if the winning amount is 90 and losing amount is 100, the expected value is negative. another example is given below:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  5576,  1022,  1012,  1019,  2004,  1996,  9226,  2003,  4189,
         1010,  1052,  1006,  2132,  1007,  1027,  1052,  1006,  5725,  1007,
         1027,  1015,  1013,  1016,  1012,  2947,  1010,  1996,  3517,  3643,
         1999,  2028, 10055,  1027,  1006,   100,  1007,  1598,  2531,  1597,
         1006,   100,  1007,  1598,  3938,  1027,  2753,  1597,  3429,  1027,
         1019,  1010,  2029,  2003,  1037,  5114,  1012,  2065,  2023,  2208,
         2003,  5567,  1050,  2335,  1010,  2256,  3517,  5114,  2003,  1019,
         1598,  1050,  1012,  2023,  3517,  3643,  2003, 17856, 11461,  2004,
         1050,  1585,  1601,  1012,  1996,  3517,  3643,  2064,  2036,  2022,
         1037,  4997,  2193,  1012,  1999,  1996,  2682,  2742,  1010,  2065,
         1996,  3045,  3815,  2003,  3938,  1998,  3974,  3815,  2003,  2531,
         1010,  1996,  3517,  3643,  2003,  4997,  1012,  2178,  2742,  2003,
         2445,  2917,  1024,   102])"
2896,1,"['loss', 'experiment']", Expected Value,seg_567,"consider the experiment of rolling a fair die once. if the number that comes on top is an even integer, you win c units of money. if the number on top is odd, you lose 2*c units of money. what is your expected gain or loss?",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])","tensor([3517, 3643])","tensor([  101,  5136,  1996,  7551,  1997,  5291,  1037,  4189,  3280,  2320,
         1012,  2065,  1996,  2193,  2008,  3310,  2006,  2327,  2003,  2019,
         2130, 16109,  1010,  2017,  2663,  1039,  3197,  1997,  2769,  1012,
         2065,  1996,  2193,  2006,  2327,  2003,  5976,  1010,  2017,  4558,
         1016,  1008,  1039,  3197,  1997,  2769,  1012,  2054,  2003,  2115,
         3517,  5114,  2030,  3279,  1029,   102])"
2897,1,['loss'], Expected Value,seg_567,"solution 8.6 if the number on top is 2, 4, or 6, the winning amount is c. if it is 1, 3, or 5, the losing amount is 2c. as the die is fair, each of them have equal probability 1/6. let x denote the loss or gain. then e(x) = −2c ∗ p(x = 1) + c ∗ p(x = 2) − 2c ∗ p(x = 3) + c ∗ p(x = 4) − 2c ∗ p(x = 5) + c ∗ p(x = 6) = (1∕6)[−6c + 3c] = −(3∕6)c = −c∕2, which is a negative number for c 0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  5576,  1022,  1012,  1020,  2065,  1996,  2193,  2006,  2327,
         2003,  1016,  1010,  1018,  1010,  2030,  1020,  1010,  1996,  3045,
         3815,  2003,  1039,  1012,  2065,  2009,  2003,  1015,  1010,  1017,
         1010,  2030,  1019,  1010,  1996,  3974,  3815,  2003,  1016,  2278,
         1012,  2004,  1996,  3280,  2003,  4189,  1010,  2169,  1997,  2068,
         2031,  5020,  9723,  1015,  1013,  1020,  1012,  2292,  1060, 19090,
         1996,  3279,  2030,  5114,  1012,  2059,  1041,  1006,  1060,  1007,
         1027,  1597,  2475,  2278,  1598,  1052,  1006,  1060,  1027,  1015,
         1007,  1009,  1039,  1598,  1052,  1006,  1060,  1027,  1016,  1007,
         1597,  1016,  2278,  1598,  1052,  1006,  1060,  1027,  1017,  1007,
         1009,  1039,  1598,  1052,  1006,  1060,  1027,  1018,  1007,  1597,
         1016,  2278,  1598,  1052,  1006,  1060,  1027,  1019,  1007,  1009,
         1039,  1598,  1052,  1006,  1060,  1027,  1020,  1007,  1027,  1006,
          100,  1007,  1031,  1597,  2575,  2278,  1009,  1017,  2278,  1033,
         1027,  1597,  1006,   100,  1007,  1039,  1027,   100,  1010,  2029,
         2003,  1037,  4997,  2193,  2005,  1039,  1014,  1012,   102])"
2898,0,[], Expected Value,seg_567,example 8.7 egg hatching,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([3517, 3643])","tensor([  101,  2742,  1022,  1012,  1021,  8288, 11300,  2075,   102])"
2899,1,['table'], Expected Value,seg_567,a farmer hatches between 40 and 50 eggs every week. total number of chickens hatched are given in table 8.2. find the expected number of chickens that will be hatched next week if n eggs are kept for hatching.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([3517, 3643])","tensor([  101,  1037,  7500, 11300,  2229,  2090,  2871,  1998,  2753,  6763,
         2296,  2733,  1012,  2561,  2193,  1997, 21868, 11300,  2098,  2024,
         2445,  1999,  2795,  1022,  1012,  1016,  1012,  2424,  1996,  3517,
         2193,  1997, 21868,  2008,  2097,  2022, 11300,  2098,  2279,  2733,
         2065,  1050,  6763,  2024,  2921,  2005, 11300,  2075,  1012,   102])"
2900,1,"['table', 'probability', 'probabilities', 'expected values', 'population']", Expected Value,seg_567,"solution 8.7 we assume that the eggs are uniformly sampled from a hypothetical population with a constant probability p of hatching. from table 8.2, we get the probabilities of hatching as p1 = 37∕42 = 0.881, p2 = 43∕50 = 0.86, p3 = 0.9592, p4 = 0.88, p5 = 0.8889, p6 = 0.9575, p7 = 0.9167, p8 = 0.8571, p9 = 48∕50 = 0.96, and p10 = 45∕48 = 0.9375. the expected probability of hatching is found as e(p) = [0.881 + 0.86 + 0.9592 + .. + 0.9375]∕10 = 9.09778∕10 = 0.909778. if n eggs are kept for hatching, the expected number of chickens hatched is 0.909778*n. the expected values for n = 40–50 are [36.39,37.30,38.21,39.12,40.03,40.94,41.85, 42.76, 43.67,44.58,45.49]. as the answer must be a whole integer, we could round-off the above values to the nearest integer.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([3517, 3643])","tensor([  101,  5576,  1022,  1012,  1021,  2057,  7868,  2008,  1996,  6763,
         2024, 27423, 18925,  2013,  1037, 25613,  2313,  2007,  1037,  5377,
         9723,  1052,  1997, 11300,  2075,  1012,  2013,  2795,  1022,  1012,
         1016,  1010,  2057,  2131,  1996,  4013,  3676, 14680,  1997, 11300,
         2075,  2004,  1052,  2487,  1027,   100,  1027,  1014,  1012,  6070,
         2487,  1010,  1052,  2475,  1027,   100,  1027,  1014,  1012,  6564,
         1010,  1052,  2509,  1027,  1014,  1012,  5345,  2683,  2475,  1010,
         1052,  2549,  1027,  1014,  1012,  6070,  1010,  1052,  2629,  1027,
         1014,  1012,  6070,  2620,  2683,  1010,  1052,  2575,  1027,  1014,
         1012,  5345, 23352,  1010,  1052,  2581,  1027,  1014,  1012,  6205,
         2575,  2581,  1010,  1052,  2620,  1027,  1014,  1012,  5594,  2581,
         2487,  1010,  1052,  2683,  1027,   100,  1027,  1014,  1012,  5986,
         1010,  1998,  1052, 10790,  1027,   100,  1027,  1014,  1012,  6109,
        23352,  1012,  1996,  3517,  9723,  1997, 11300,  2075,  2003,  2179,
         2004,  1041,  1006,  1052,  1007,  1027,  1031,  1014,  1012,  6070,
         2487,  1009,  1014,  1012,  6564,  1009,  1014,  1012,  5345,  2683,
         2475,  1009,  1012,  1012,  1009,  1014,  1012,  6109, 23352,  1033,
          100,  1027,  1023,  1012,   100,  1027,  1014,  1012,  3938,  2683,
         2581,  2581,  2620,  1012,  2065,  1050,  6763,  2024,  2921,  2005,
        11300,  2075,  1010,  1996,  3517,  2193,  1997, 21868, 11300,  2098,
         2003,  1014,  1012,  3938,  2683,  2581,  2581,  2620,  1008,  1050,
         1012,  1996,  3517,  5300,  2005,  1050,  1027,  2871,  1516,  2753,
         2024,  1031,  4029,  1012,  4464,  1010,  4261,  1012,  2382,  1010,
         4229,  1012,  2538,  1010,  4464,  1012,  2260,  1010,  2871,  1012,
         6021,  1010,  2871,  1012,  6365,  1010,  4601,  1012,  5594,  1010,
         4413,  1012,  6146,  1010,  4724,  1012,  6163,  1010,  4008,  1012,
         5388,  1010,  3429,  1012,  4749,  1033,  1012,  2004,  1996,  3437,
         2442,  2022,  1037,  2878, 16109,  1010,  2057,  2071,  2461,  1011,
         2125,  1996,  2682,  5300,  2000,  1996,  7205, 16109,  1012,   102])"
2901,1,"['range', 'random variable', 'event', 'distributions', 'poisson', 'random', 'geometric distributions', 'distribution', 'geometric', 'summation', 'binomial', 'variable']", Range for Summation or Integration,seg_569,"we have taken the general range for x anywhere on the real line in the above definition. range of x depends upon the random variable. for example, poisson and geometric distributions assume integer values in 0 to ∞, whereas binomial distribution has range 0–n. thus, the range for summation (or integration) collapses to the range of the random variable or event involved (see figure 8.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2846,  2005,  7680, 28649,  2030,  8346])","tensor([  101,  2057,  2031,  2579,  1996,  2236,  2846,  2005,  1060,  5973,
         2006,  1996,  2613,  2240,  1999,  1996,  2682,  6210,  1012,  2846,
         1997,  1060,  9041,  2588,  1996,  6721,  8023,  1012,  2005,  2742,
         1010, 13433, 24077,  1998, 14965, 20611,  7868, 16109,  5300,  1999,
         1014,  2000,  1601,  1010,  6168,  8026, 20936,  2389,  4353,  2038,
         2846,  1014,  1516,  1050,  1012,  2947,  1010,  1996,  2846,  2005,
         7680, 28649,  1006,  2030,  8346,  1007, 25938,  2000,  1996,  2846,
         1997,  1996,  6721,  8023,  2030,  2724,  2920,  1006,  2156,  3275,
         1022,  1012,  1018,  1007,  1012,   102])"
2902,1,['expected value'], Range for Summation or Integration,seg_569,example 8.8 expected value of marks,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 2846,  2005,  7680, 28649,  2030,  8346])","tensor([ 101, 2742, 1022, 1012, 1022, 3517, 3643, 1997, 6017,  102])"
2903,0,['n'], Range for Summation or Integration,seg_569,"a multiple choice exam comprises of 50 questions, each with 5 answers. all correctly marked answers score 1 mark, and all wrong answers get a penalty of 1/4 mark. what is the expected number of marks obtained by a student who guesses n questions?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])","tensor([ 2846,  2005,  7680, 28649,  2030,  8346])","tensor([  101,  1037,  3674,  3601, 11360,  8681,  1997,  2753,  3980,  1010,
         2169,  2007,  1019,  6998,  1012,  2035, 11178,  4417,  6998,  3556,
         1015,  2928,  1010,  1998,  2035,  3308,  6998,  2131,  1037,  6531,
         1997,  1015,  1013,  1018,  2928,  1012,  2054,  2003,  1996,  3517,
         2193,  1997,  6017,  4663,  2011,  1037,  3076,  2040,  3984,  2229,
         1050,  3980,  1029,   102])"
2904,1,['expected value'], Range for Summation or Integration,seg_569,"solution 8.8 assume that the student has actually obtained x correct and (n − x) wrong answers. then the marks obtained is x ∗ 1 − (n − x) ∗ (1∕4) = (5∕4) ∗ x − n∕4 = (5x − n)∕4 = y (say). as xi can take the possible values 0, 1, … , n we get the expected value as e(x) = 1 ∗ 1∕5 + 0 ∗ 4∕5 = 1∕5. now e(y) = (5e(x) − n)∕4 = (5x(n∕5) − n)∕4 = 0. hence the answer is zero. as it is an expected value, the actual score earned when all n questions are attempted could fluctuate around the expected value.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2846,  2005,  7680, 28649,  2030,  8346])","tensor([  101,  5576,  1022,  1012,  1022,  7868,  2008,  1996,  3076,  2038,
         2941,  4663,  1060,  6149,  1998,  1006,  1050,  1597,  1060,  1007,
         3308,  6998,  1012,  2059,  1996,  6017,  4663,  2003,  1060,  1598,
         1015,  1597,  1006,  1050,  1597,  1060,  1007,  1598,  1006,   100,
         1007,  1027,  1006,   100,  1007,  1598,  1060,  1597,   100,  1027,
         1006,  1019,  2595,  1597,  1050,  1007,   100,  1027,  1061,  1006,
         2360,  1007,  1012,  2004,  8418,  2064,  2202,  1996,  2825,  5300,
         1014,  1010,  1015,  1010,  1529,  1010,  1050,  2057,  2131,  1996,
         3517,  3643,  2004,  1041,  1006,  1060,  1007,  1027,  1015,  1598,
          100,  1009,  1014,  1598,   100,  1027,   100,  1012,  2085,  1041,
         1006,  1061,  1007,  1027,  1006,  1019,  2063,  1006,  1060,  1007,
         1597,  1050,  1007,   100,  1027,  1006,  1019,  2595,  1006,   100,
         1007,  1597,  1050,  1007,   100,  1027,  1014,  1012,  6516,  1996,
         3437,  2003,  5717,  1012,  2004,  2009,  2003,  2019,  3517,  3643,
         1010,  1996,  5025,  3556,  3687,  2043,  2035,  1050,  3980,  2024,
         4692,  2071, 19857,  6593, 20598,  2105,  1996,  3517,  3643,  1012,
          102])"
2905,1,"['functions', 'distributions', 'gumbel', 'statistical', 'distribution', 'exponential', 'extreme value', 'expected value', 'logistic']", Expectation Using Distribution Functions,seg_571,"some of the statistical distributions have simple expressions for the cdf. examples are the exponential, logistic, and extreme value (gumbel) distributions. the expected value could be found in terms of the distribution functions as follows:",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 1., 1., 0., 1., 1., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2070,  1997,  1996,  7778, 20611,  2031,  3722, 11423,  2005,
         1996,  3729,  2546,  1012,  4973,  2024,  1996, 27258,  1010,  8833,
         6553,  1010,  1998,  6034,  3643,  1006, 16031,  8671,  1007, 20611,
         1012,  1996,  3517,  3643,  2071,  2022,  2179,  1999,  3408,  1997,
         1996,  4353,  4972,  2004,  4076,  1024,   102])"
2906,1,['discrete'], Expectation Using Distribution Functions,seg_571,"theorem 8.1 if x is discrete, then e(x) = ∑kp(x ≥ k).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  9872,  1022,  1012,  1015,  2065,  1060,  2003, 16246,  1010,
         2059,  1041,  1006,  1060,  1007,  1027,   100,  1006,  1060,  1609,
         1047,  1007,  1012,   102])"
2907,1,['loss'], Expectation Using Distribution Functions,seg_571,"proof: without loss of generality, assume that x takes the values 1,2,.. then",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([ 101, 6947, 1024, 2302, 3279, 1997, 2236, 3012, 1010, 7868, 2008, 1060,
        3138, 1996, 5300, 1015, 1010, 1016, 1010, 1012, 1012, 2059,  102])"
2908,1,['range'], Expectation Using Distribution Functions,seg_571,"as e(x ± c) = e(x) ± c (section 8.3 in page 348), the result follows for arbitrary range of x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2004,  1041,  1006,  1060,  1081,  1039,  1007,  1027,  1041,
         1006,  1060,  1007,  1081,  1039,  1006,  2930,  1022,  1012,  1017,
         1999,  3931,  4090,  2620,  1007,  1010,  1996,  2765,  4076,  2005,
        15275,  2846,  1997,  1060,  1012,   102])"
2909,1,"['incomplete beta', 'function', 'beta function', 'incomplete beta function', 'summation']", Expectation Using Distribution Functions,seg_571,example 8.9 closed form summation of incomplete beta function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2742,  1022,  1012,  1023,  2701,  2433,  7680, 28649,  1997,
        12958,  8247,  3853,   102])"
2910,1,"['incomplete beta', 'function', 'beta function', 'incomplete beta function']", Expectation Using Distribution Functions,seg_571,is the incomplete beta function (ibf) defined in chapter 7 (p. 277).,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2003,  1996, 12958,  8247,  3853,  1006, 21307,  2546,  1007,
         4225,  1999,  3127,  1021,  1006,  1052,  1012, 25578,  1007,  1012,
          102])"
2911,1,"['continuous', 'mean', 'function', 'symmetry', 'error']", Expectation Using Distribution Functions,seg_571,"because from chapter 6, we know that the mean of bino(n, p) is np. note that the ibf is a continuous function of p in equation (8.6), which is being summed. the lhs gives exact result only for small n values, as error could propagate for large n values. for example, if n = 8 and p = 0.9 (equation 8.6 ) gives 7.2, which is exact. for n = 12 and p = 0.5, equation (8.6) gives 5.999756, whereas np = 6. use symmetry relation to get a similar expression",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2138,  2013,  3127,  1020,  1010,  2057,  2113,  2008,  1996,
         2812,  1997,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  2003,
        27937,  1012,  3602,  2008,  1996, 21307,  2546,  2003,  1037,  7142,
         3853,  1997,  1052,  1999,  8522,  1006,  1022,  1012,  1020,  1007,
         1010,  2029,  2003,  2108,  7680,  7583,  1012,  1996,  1048,  7898,
         3957,  6635,  2765,  2069,  2005,  2235,  1050,  5300,  1010,  2004,
         7561,  2071, 17678, 16098,  2618,  2005,  2312,  1050,  5300,  1012,
         2005,  2742,  1010,  2065,  1050,  1027,  1022,  1998,  1052,  1027,
         1014,  1012,  1023,  1006,  8522,  1022,  1012,  1020,  1007,  3957,
         1021,  1012,  1016,  1010,  2029,  2003,  6635,  1012,  2005,  1050,
         1027,  2260,  1998,  1052,  1027,  1014,  1012,  1019,  1010,  8522,
         1006,  1022,  1012,  1020,  1007,  3957,  1019,  1012, 25897, 23352,
         2575,  1010,  6168, 27937,  1027,  1020,  1012,  2224, 14991,  7189,
         2000,  2131,  1037,  2714,  3670,   102])"
2912,0,['n'], Expectation Using Distribution Functions,seg_571,"which is better suited for p   0.5. hence the closed form expression (on the rhs) in equations (8.6) and (8.7) is extremely useful to evaluate sums on the lhs, especially when n is large.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2029,  2003,  2488, 10897,  2005,  1052,  1014,  1012,  1019,
         1012,  6516,  1996,  2701,  2433,  3670,  1006,  2006,  1996,  1054,
         7898,  1007,  1999, 11380,  1006,  1022,  1012,  1020,  1007,  1998,
         1006,  1022,  1012,  1021,  1007,  2003,  5186,  6179,  2000, 16157,
        20571,  2006,  1996,  1048,  7898,  1010,  2926,  2043,  1050,  2003,
         2312,  1012,   102])"
2913,1,['summation'], Expectation Using Distribution Functions,seg_571,example 8.10 closed form for infinite summation of ibf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2742,  1022,  1012,  2184,  2701,  2433,  2005, 10709,  7680,
        28649,  1997, 21307,  2546,   102])"
2914,1,"['tail', 'tail probabilities', 'probabilities']", Expectation Using Distribution Functions,seg_571,"solution 8.10 we have seen in chapter 6 (p. 228) that if x ∼ nbino(k, p), the lower tail probabilities are found as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  5576,  1022,  1012,  2184,  2057,  2031,  2464,  1999,  3127,
         1020,  1006,  1052,  1012, 22238,  1007,  2008,  2065,  1060,   100,
         1050, 21891,  1006,  1047,  1010,  1052,  1007,  1010,  1996,  2896,
         5725,  4013,  3676, 14680,  2024,  2179,  2004,   102])"
2915,1,"['tail', 'tail probability', 'probability']", Expectation Using Distribution Functions,seg_571,upper tail probability (sf) is obtained by subtraction as ∑x,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  3356,  5725,  9723,  1006, 16420,  1007,  2003,  4663,  2011,
         4942,  6494,  7542,  2004,   100,   102])"
2916,1,"['mean', 'symmetry']", Expectation Using Distribution Functions,seg_571,"because the mean of nbino(k, p) is kq/p. using symmetry relation, a similar expression follows easily as",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2138,  1996,  2812,  1997,  1050, 21891,  1006,  1047,  1010,
         1052,  1007,  2003,  1047,  4160,  1013,  1052,  1012,  2478, 14991,
         7189,  1010,  1037,  2714,  3670,  4076,  4089,  2004,   102])"
2917,1,"['tail', 'convergence']", Expectation Using Distribution Functions,seg_571,"although an infinite sum, rapid convergence of equation (8.10) occurs for p values in the right tail ( 0.5, especially for p above 0.80 or equivalently q 0.20) so that it can be truncated at j = 2k, giving the lhs as ∑j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2348,  2019, 10709,  7680,  1010,  5915, 19143,  1997,  8522,
         1006,  1022,  1012,  2184,  1007,  5158,  2005,  1052,  5300,  1999,
         1996,  2157,  5725,  1006,  1014,  1012,  1019,  1010,  2926,  2005,
         1052,  2682,  1014,  1012,  3770,  2030,  5662,  2135,  1053,  1014,
         1012,  2322,  1007,  2061,  2008,  2009,  2064,  2022, 25449,  2012,
         1046,  1027,  1016,  2243,  1010,  3228,  1996,  1048,  7898,  2004,
          100,   102])"
2918,0,[], Expectation Using Distribution Functions,seg_571,"k 0 ip(k, j + 1) for p   0.5. however, the rhs provides a simple and elegant expression, which avoids the expensive evaluation of ibf.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1047,  1014, 12997,  1006,  1047,  1010,  1046,  1009,  1015,
         1007,  2005,  1052,  1014,  1012,  1019,  1012,  2174,  1010,  1996,
         1054,  7898,  3640,  1037,  3722,  1998, 11552,  3670,  1010,  2029,
        26777,  1996,  6450,  9312,  1997, 21307,  2546,  1012,   102])"
2919,1,"['continuous', 'variates']", Expectation Using Distribution Functions,seg_571,example 8.11 e(x) in terms of f(x) for continuous variates,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2742,  1022,  1012,  2340,  1041,  1006,  1060,  1007,  1999,
         3408,  1997,  1042,  1006,  1060,  1007,  2005,  7142, 13075, 13143,
         2015,   102])"
2920,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'variable']", Expectation Using Distribution Functions,seg_571,"if x is a continuous random variable with cdf f(x), then",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([ 101, 2065, 1060, 2003, 1037, 7142, 6721, 8023, 2007, 3729, 2546, 1042,
        1006, 1060, 1007, 1010, 2059,  102])"
2921,1,['function'], Expectation Using Distribution Functions,seg_571,solution 8.11 consider ∫0 ∞[1 − f(x)]dx. as [1 − f(x)] is the survival function,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([ 101, 5576, 1022, 1012, 2340, 5136,  100, 1601, 1031, 1015, 1597, 1042,
        1006, 1060, 1007, 1033, 1040, 2595, 1012, 2004, 1031, 1015, 1597, 1042,
        1006, 1060, 1007, 1033, 2003, 1996, 7691, 3853,  102])"
2922,1,['tail'], Expectation Using Distribution Functions,seg_571,"(right tail area), it can be written as [1 − f(x)] = ∫x",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([ 101, 1006, 2157, 5725, 2181, 1007, 1010, 2009, 2064, 2022, 2517, 2004,
        1031, 1015, 1597, 1042, 1006, 1060, 1007, 1033, 1027,  100,  102])"
2923,0,[], Expectation Using Distribution Functions,seg_571,"t =0 f (t)dxdt. as f (t) is a constant while integrating with respect to x, the inner integral simplifies to t ∗ f (t). thus, the rhs becomes ∫t=",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1056,  1027,  1014,  1042,  1006,  1056,  1007,  1040,  2595,
        11927,  1012,  2004,  1042,  1006,  1056,  1007,  2003,  1037,  5377,
         2096, 22380,  2007,  4847,  2000,  1060,  1010,  1996,  5110,  9897,
        21934, 24759, 14144,  2000,  1056,  1598,  1042,  1006,  1056,  1007,
         1012,  2947,  1010,  1996,  1054,  7898,  4150,   100,  1027,   102])"
2924,1,['results'], Expectation Using Distribution Functions,seg_571,0 ∞ t ∗ f (t)dt. combine both results to get the desired answer.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1014,  1601,  1056,  1598,  1042,  1006,  1056,  1007, 26718,
         1012, 11506,  2119,  3463,  2000,  2131,  1996,  9059,  3437,  1012,
          102])"
2925,1,"['quantile', 'percentiles', 'quartiles', 'distribution', 'quantiles', 'case']", Expectation Using Distribution Functions,seg_571,"the quantiles of a distribution was defined in chapter 3. this includes the quartiles, deciles, and percentiles. we can express the quantiles using the cdf as follows: the kth quantile is that value of x for which f(x) = k∕100. in the case of quartiles, the divisor is 4 so that we get 3 quartiles that divide the total area into 25, 50, and 75 points.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1996, 24110, 15286,  2015,  1997,  1037,  4353,  2001,  4225,
         1999,  3127,  1017,  1012,  2023,  2950,  1996, 24209,  8445,  9463,
         2015,  1010, 11703,  9463,  2015,  1010,  1998,  3867,  9463,  2015,
         1012,  2057,  2064,  4671,  1996, 24110, 15286,  2015,  2478,  1996,
         3729,  2546,  2004,  4076,  1024,  1996,  1047,  2705, 24110, 15286,
         2003,  2008,  3643,  1997,  1060,  2005,  2029,  1042,  1006,  1060,
         1007,  1027,   100,  1012,  1999,  1996,  2553,  1997, 24209,  8445,
         9463,  2015,  1010,  1996,  4487, 11365,  2953,  2003,  1018,  2061,
         2008,  2057,  2131,  1017, 24209,  8445,  9463,  2015,  2008, 11443,
         1996,  2561,  2181,  2046,  2423,  1010,  2753,  1010,  1998,  4293,
         2685,  1012,   102])"
2926,0,[], Expectation Using Distribution Functions,seg_571,"proof: by definition,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([17626,  2478,  4353,  4972])","tensor([ 101, 6947, 1024, 2011, 6210, 1010,  102])"
2927,1,['results'], Expectation Using Distribution Functions,seg_571,t[1 − f(x)]dx. now let t tend to infinity to get the final results as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1056,  1031,  1015,  1597,  1042,  1006,  1060,  1007,  1033,
         1040,  2595,  1012,  2085,  2292,  1056,  7166,  2000, 15579,  2000,
         2131,  1996,  2345,  3463,  2004,   102])"
2928,1,"['poisson', 'poisson distribution', 'distribution']", Expectation Using Distribution Functions,seg_571,example 8.12 e(x) and e(x2) of a poisson distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2742,  1022,  1012,  2260,  1041,  1006,  1060,  1007,  1998,
         1041,  1006,  1060,  2475,  1007,  1997,  1037, 13433, 24077,  4353,
          102])"
2929,1,"['poisson random variable', 'random variable', 'poisson', 'random', 'variable']", Expectation Using Distribution Functions,seg_571,find e(x) and e(x2) for a poisson random variable.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2424,  1041,  1006,  1060,  1007,  1998,  1041,  1006,  1060,
         2475,  1007,  2005,  1037, 13433, 24077,  6721,  8023,  1012,   102])"
2930,1,['summation'], Expectation Using Distribution Functions,seg_571,"∞ =2  x−2∕(x − 2)!. putting x − 2 = y, the summation reduces",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1601,  1027,  1016,   100,  1006,  1060,  1597,  1016,  1007,
          999,  1012,  5128,  1060,  1597,  1016,  1027,  1061,  1010,  1996,
         7680, 28649, 13416,   102])"
2931,0,['e'], Expectation Using Distribution Functions,seg_571,to e  giving  2e− e  =  2. substitute for the second sum from above to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2000,  1041,  3228,  1016,  2063, 22543,  1041,  1027,  1016,
         1012,  7681,  2005,  1996,  2117,  7680,  2013,  2682,  2000,  2131,
          102])"
2932,1,"['tail', 'function', 'gamma', 'gamma function', 'probabilities', 'poisson', 'tail probabilities', 'distribution', 'poisson distribution']", Expectation Using Distribution Functions,seg_571,"e(x2) =  2 +  . from chapter 6, page 234, we know that the tail probabilities of a poisson distribution is related to the incomplete gamma function as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1041,  1006,  1060,  2475,  1007,  1027,  1016,  1009,  1012,
         2013,  3127,  1020,  1010,  3931, 22018,  1010,  2057,  2113,  2008,
         1996,  5725,  4013,  3676, 14680,  1997,  1037, 13433, 24077,  4353,
         2003,  3141,  2000,  1996, 12958, 13091,  3853,  2004,  4076,  1024,
          102])"
2933,1,"['poisson random variable', 'associated', 'events', 'random variable', 'event', 'poisson', 'random', 'expectation', 'variable']", Expectation Using Distribution Functions,seg_571,mathematical expectation can also be defined on events associated with a random variable. consider the event y that a poisson random variable x takes even values. the,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  8045, 17626,  2064,  2036,  2022,  4225,  2006,  2824,  3378,
         2007,  1037,  6721,  8023,  1012,  5136,  1996,  2724,  1061,  2008,
         1037, 13433, 24077,  6721,  8023,  1060,  3138,  2130,  5300,  1012,
         1996,   102])"
2934,0,[], Expectation Using Distribution Functions,seg_571,y even so that u takes all integer values starting with 0. as before e(u) = ∑u,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  1061,  2130,  2061,  2008,  1057,  3138,  2035, 16109,  5300,
         3225,  2007,  1014,  1012,  2004,  2077,  1041,  1006,  1057,  1007,
         1027,   100,   102])"
2935,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'variable']", Expectation Using Distribution Functions,seg_571,"if x is a continuous random variable, and d is a constant, find the unknowns a,b,c such that e[x − d|x   d] = ∫a",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([ 101, 2065, 1060, 2003, 1037, 7142, 6721, 8023, 1010, 1998, 1040, 2003,
        1037, 5377, 1010, 2424, 1996, 4242, 2015, 1037, 1010, 1038, 1010, 1039,
        2107, 2008, 1041, 1031, 1060, 1597, 1040, 1064, 1060, 1040, 1033, 1027,
         100,  102])"
2936,1,"['continuous', 'conditional probability', 'function', 'probability', 'expectation', 'conditional']", Expectation Using Distribution Functions,seg_571,"solution 8.13 consider the probability y = p[x − d|x d]. then p[y ≤ y] = p[x − d|x d ≤ y]. this probability is the same as p[x − d ≤ y|x d]. as x is continuous, this can be written as p[d x y + d|x d]. using the conditional probability formula p[a|b] = p[a ∩ b]∕p[b] this becomes p[d x y + d]∕p[x d]. the numerator can be written in terms of unconditional cdf of x as fx(y + d) − fx(d) if d is positive, and fx(d) − fx(y − d) if d is negative. the denominator being the survival function can be written as 1 − fx(d). now apply equation 8.10 on the expectation of y as e[y] = ∫0 ∞[1 − gy (y)]dy. substitute for gy (y) from the above to get e[y] =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  5576,  1022,  1012,  2410,  5136,  1996,  9723,  1061,  1027,
         1052,  1031,  1060,  1597,  1040,  1064,  1060,  1040,  1033,  1012,
         2059,  1052,  1031,  1061,  1608,  1061,  1033,  1027,  1052,  1031,
         1060,  1597,  1040,  1064,  1060,  1040,  1608,  1061,  1033,  1012,
         2023,  9723,  2003,  1996,  2168,  2004,  1052,  1031,  1060,  1597,
         1040,  1608,  1061,  1064,  1060,  1040,  1033,  1012,  2004,  1060,
         2003,  7142,  1010,  2023,  2064,  2022,  2517,  2004,  1052,  1031,
         1040,  1060,  1061,  1009,  1040,  1064,  1060,  1040,  1033,  1012,
         2478,  1996, 18462,  9723,  5675,  1052,  1031,  1037,  1064,  1038,
         1033,  1027,  1052,  1031,  1037,  1604,  1038,  1033,   100,  1031,
         1038,  1033,  2023,  4150,  1052,  1031,  1040,  1060,  1061,  1009,
         1040,  1033,   100,  1031,  1060,  1040,  1033,  1012,  1996, 16371,
         5017,  8844,  2064,  2022,  2517,  1999,  3408,  1997,  4895,  8663,
        27064,  3729,  2546,  1997,  1060,  2004, 23292,  1006,  1061,  1009,
         1040,  1007,  1597, 23292,  1006,  1040,  1007,  2065,  1040,  2003,
         3893,  1010,  1998, 23292,  1006,  1040,  1007,  1597, 23292,  1006,
         1061,  1597,  1040,  1007,  2065,  1040,  2003,  4997,  1012,  1996,
         7939, 20936, 27413,  2108,  1996,  7691,  3853,  2064,  2022,  2517,
         2004,  1015,  1597, 23292,  1006,  1040,  1007,  1012,  2085,  6611,
         8522,  1022,  1012,  2184,  2006,  1996, 17626,  1997,  1061,  2004,
         1041,  1031,  1061,  1033,  1027,   100,  1601,  1031,  1015,  1597,
         1043,  2100,  1006,  1061,  1007,  1033,  1040,  2100,  1012,  7681,
         2005,  1043,  2100,  1006,  1061,  1007,  2013,  1996,  2682,  2000,
         2131,  1041,  1031,  1061,  1033,  1027,   102])"
2937,1,"['variable', 'change of variable', 'variable transformation', 'transformation']", Expectation Using Distribution Functions,seg_571,∫0 ∞[1 − [fx(y + d)]∕[1 − fx(d)]dy. apply a change of variable transformation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,   100,  1601,  1031,  1015,  1597,  1031, 23292,  1006,  1061,
         1009,  1040,  1007,  1033,   100,  1031,  1015,  1597, 23292,  1006,
         1040,  1007,  1033,  1040,  2100,  1012,  6611,  1037,  2689,  1997,
         8023,  8651,   102])"
2938,1,['variance'], Expectation Using Distribution Functions,seg_571,example 8.14 variance in terms of f(x),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2742,  1022,  1012,  2403, 23284,  1999,  3408,  1997,  1042,
         1006,  1060,  1007,   102])"
2939,1,"['continuous', 'continuous random variable', 'variance', 'random variable', 'random', 'variable']", Expectation Using Distribution Functions,seg_571,"if x is continuous random variable, the variance of x can be expressed as  x2 = ∫0",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2065,  1060,  2003,  7142,  6721,  8023,  1010,  1996, 23284,
         1997,  1060,  2064,  2022,  5228,  2004,  1060,  2475,  1027,   100,
          102])"
2940,1,"['exponential', 'expectation', 'integer part']", Expectation Using Distribution Functions,seg_571,example 8.15 expectation of integer part of exponential,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2742,  1022,  1012,  2321, 17626,  1997, 16109,  2112,  1997,
        27258,   102])"
2941,1,['integer part'], Expectation Using Distribution Functions,seg_571,"if x ∼ exp ( ) find e[⌊x⌋], where ⌊x⌋ denotes the integer part of x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  2065,  1060,   100,  4654,  2361,  1006,  1007,  2424,  1041,
         1031,   100,  1060,   100,  1033,  1010,  2073,   100,  1060,   100,
        14796,  1996, 16109,  2112,  1997,  1060,  1012,   102])"
2942,1,"['mean', 'geometric distribution', 'method', 'integer part', 'distribution', 'geometric']", Expectation Using Distribution Functions,seg_571,"solution 8.15 we have seen in chapter 6, page 218, that the integer part of x has a geometric distribution with q = exp (− ). using the above method, the problem reduces to finding the mean of geo(p), where p = 1 − q = [1 − exp(− )]. hence e(y) = e(⌊x⌋) is exp(− )∕[1 − exp(− )].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  2478,  4353,  4972])","tensor([  101,  5576,  1022,  1012,  2321,  2057,  2031,  2464,  1999,  3127,
         1020,  1010,  3931, 20741,  1010,  2008,  1996, 16109,  2112,  1997,
         1060,  2038,  1037, 14965,  4353,  2007,  1053,  1027,  4654,  2361,
         1006,  1597,  1007,  1012,  2478,  1996,  2682,  4118,  1010,  1996,
         3291, 13416,  2000,  4531,  1996,  2812,  1997, 20248,  1006,  1052,
         1007,  1010,  2073,  1052,  1027,  1015,  1597,  1053,  1027,  1031,
         1015,  1597,  4654,  2361,  1006,  1597,  1007,  1033,  1012,  6516,
         1041,  1006,  1061,  1007,  1027,  1041,  1006,   100,  1060,   100,
         1007,  2003,  4654,  2361,  1006,  1597,  1007,   100,  1031,  1015,
         1597,  4654,  2361,  1006,  1597,  1007,  1033,  1012,   102])"
2943,1,"['functions', 'distributions', 'method', 'random', 'random variables', 'expected values', 'distribution', 'variables', 'expected value']", EXPECTATION OF FUNCTIONS OF RANDOM VARIABLES,seg_573,"in many practical applications, we have to work with simple mathematical functions of random variables. a possible method is to first find the distribution of these functions and then find its expected value. however, the following theorem gives us a simple method to find expected values of functions of random variables without either deriving their distributions or knowing about the exact distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 1., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([17626,  1997,  4972,  1997,  6721, 10857])","tensor([  101,  1999,  2116,  6742,  5097,  1010,  2057,  2031,  2000,  2147,
         2007,  3722,  8045,  4972,  1997,  6721, 10857,  1012,  1037,  2825,
         4118,  2003,  2000,  2034,  2424,  1996,  4353,  1997,  2122,  4972,
         1998,  2059,  2424,  2049,  3517,  3643,  1012,  2174,  1010,  1996,
         2206,  9872,  3957,  2149,  1037,  3722,  4118,  2000,  2424,  3517,
         5300,  1997,  4972,  1997,  6721, 10857,  2302,  2593,  4315, 14966,
         2037, 20611,  2030,  4209,  2055,  1996,  6635, 20611,  1012,   102])"
2944,1,"['summation', 'distribution']", EXPECTATION OF FUNCTIONS OF RANDOM VARIABLES,seg_573,"there is another way to find e[g(x)] if g(x) has a well-defined distribution. instead of using the original pdf inside the summation or integration, we could find the distribution of y = g(x), and find e[y] of this distribution. as an example, let x ∼ n(0, 1) and y = x2. we wish to find 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  4972,  1997,  6721, 10857])","tensor([  101,  2045,  2003,  2178,  2126,  2000,  2424,  1041,  1031,  1043,
         1006,  1060,  1007,  1033,  2065,  1043,  1006,  1060,  1007,  2038,
         1037,  2092,  1011,  4225,  4353,  1012,  2612,  1997,  2478,  1996,
         2434, 11135,  2503,  1996,  7680, 28649,  2030,  8346,  1010,  2057,
         2071,  2424,  1996,  4353,  1997,  1061,  1027,  1043,  1006,  1060,
         1007,  1010,  1998,  2424,  1041,  1031,  1061,  1033,  1997,  2023,
         4353,  1012,  2004,  2019,  2742,  1010,  2292,  1060,   100,  1050,
         1006,  1014,  1010,  1015,  1007,  1998,  1061,  1027,  1060,  2475,
         1012,  2057,  4299,  2000,  2424,  1016,   102])"
2945,1,"['standard normal', 'degree of freedom', 'normal', 'standard', 'distribution', 'expected value']", EXPECTATION OF FUNCTIONS OF RANDOM VARIABLES,seg_573,"∞ ∞ x2 (x)dx, where  ( ) is the standard normal pdf. we know that y = x2 has a central  2 distribution with 1 degree of freedom, whose expected value is 1. hence e[x2] is also 1. this technique may not always work. in the above example, if we wanted e[x2 − 2x + 3], we need to resort to the first approach because x2 − 2x + 3 does not have a simple distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([17626,  1997,  4972,  1997,  6721, 10857])","tensor([  101,  1601,  1601,  1060,  2475,  1006,  1060,  1007,  1040,  2595,
         1010,  2073,  1006,  1007,  2003,  1996,  3115,  3671, 11135,  1012,
         2057,  2113,  2008,  1061,  1027,  1060,  2475,  2038,  1037,  2430,
         1016,  4353,  2007,  1015,  3014,  1997,  4071,  1010,  3005,  3517,
         3643,  2003,  1015,  1012,  6516,  1041,  1031,  1060,  2475,  1033,
         2003,  2036,  1015,  1012,  2023,  6028,  2089,  2025,  2467,  2147,
         1012,  1999,  1996,  2682,  2742,  1010,  2065,  2057,  2359,  1041,
         1031,  1060,  2475,  1597,  1016,  2595,  1009,  1017,  1033,  1010,
         2057,  2342,  2000,  7001,  2000,  1996,  2034,  3921,  2138,  1060,
         2475,  1597,  1016,  2595,  1009,  1017,  2515,  2025,  2031,  1037,
         3722,  4353,  1012,   102])"
2946,1,"['continuous', 'discrete', 'random', 'random variables', 'variables']", Properties of Expectations,seg_575,"let x and y be any two random variables, discrete or continuous, univariate or multivariate. in the following discussion, it is assumed that e(x) and e(y) exist (they are finite).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2292,  1060,  1998,  1061,  2022,  2151,  2048,  6721, 10857,
         1010, 16246,  2030,  7142,  1010,  4895, 28739, 13143,  2030,  4800,
        10755, 13143,  1012,  1999,  1996,  2206,  6594,  1010,  2009,  2003,
         5071,  2008,  1041,  1006,  1060,  1007,  1998,  1041,  1006,  1061,
         1007,  4839,  1006,  2027,  2024, 10713,  1007,  1012,   102])"
2947,1,['expected value'], Properties of Expectations,seg_575,theorem 8.2 the expected value of a constant is constant.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([ 101, 9872, 1022, 1012, 1016, 1996, 3517, 3643, 1997, 1037, 5377, 2003,
        5377, 1012,  102])"
2948,1,"['continuous', 'probabilities', 'distributions', 'summation', 'discrete', 'case']", Properties of Expectations,seg_575,"proof: the proof follows trivially because the constant can be taken outside the summation (discrete case) or integration (continuous case) and what remains is either the summation or integration of probabilities that evaluates to a 1.0. symbolically, e(c) = c. here, c is a scalar constant for univariate distributions, and a constant vector for multivariate distributions. symbolically, e(c) = ∑kcpx=k = c∑kpx=k = c, for the discrete case. if x is continuous, e(c) = ∫xcp(x)dx = c∫xp(x)dx = c.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  1996,  6947,  4076, 20610,  2135,  2138,  1996,
         5377,  2064,  2022,  2579,  2648,  1996,  7680, 28649,  1006, 16246,
         2553,  1007,  2030,  8346,  1006,  7142,  2553,  1007,  1998,  2054,
         3464,  2003,  2593,  1996,  7680, 28649,  2030,  8346,  1997,  4013,
         3676, 14680,  2008, 16157,  2015,  2000,  1037,  1015,  1012,  1014,
         1012, 12613,  3973,  1010,  1041,  1006,  1039,  1007,  1027,  1039,
         1012,  2182,  1010,  1039,  2003,  1037, 26743,  2099,  5377,  2005,
         4895, 28739, 13143, 20611,  1010,  1998,  1037,  5377,  9207,  2005,
         4800, 10755, 13143, 20611,  1012, 12613,  3973,  1010,  1041,  1006,
         1039,  1007,  1027,   100,  1027,  1047,  1027,   100,  1027,  1047,
         1027,  1039,  1010,  2005,  1996, 16246,  2553,  1012,  2065,  1060,
         2003,  7142,  1010,  1041,  1006,  1039,  1007,  1027,   100,  1006,
         1060,  1007,  1040,  2595,  1027,   100,  1006,  1060,  1007,  1040,
         2595,  1027,  1039,  1012,   102])"
2949,1,"['function', 'expected value', 'linear']", Properties of Expectations,seg_575,"theorem 8.3 the expected value of linear function c ∗ x is c times the expected value of x, where c is a nonzero constant and the expected value exists.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([ 5144,  1997, 10908])","tensor([ 101, 9872, 1022, 1012, 1017, 1996, 3517, 3643, 1997, 7399, 3853, 1039,
        1598, 1060, 2003, 1039, 2335, 1996, 3517, 3643, 1997, 1060, 1010, 2073,
        1039, 2003, 1037, 2512, 6290, 2080, 5377, 1998, 1996, 3517, 3643, 6526,
        1012,  102])"
2950,1,"['continuous', 'summation', 'discrete', 'case']", Properties of Expectations,seg_575,"proof: as above, the constant can be taken outside the summation (discrete case) or integration (continuous case) and what remains is either the summation or integration of x that evaluates to e(x). applying the multiplier c gives the result as c ∗ e(x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  2004,  2682,  1010,  1996,  5377,  2064,  2022,
         2579,  2648,  1996,  7680, 28649,  1006, 16246,  2553,  1007,  2030,
         8346,  1006,  7142,  2553,  1007,  1998,  2054,  3464,  2003,  2593,
         1996,  7680, 28649,  2030,  8346,  1997,  1060,  2008, 16157,  2015,
         2000,  1041,  1006,  1060,  1007,  1012, 11243,  1996,  4800, 24759,
         3771,  1039,  3957,  1996,  2765,  2004,  1039,  1598,  1041,  1006,
         1060,  1007,  1012,   102])"
2951,1,"['linear combination', 'linear', 'random variable', 'random', 'expected value', 'variable', 'combination']", Properties of Expectations,seg_575,"theorem 8.4 prove that expected value of linear combination e(a ∗ x + b) = a ∗ e(x) + b for any random variable x, and nonzero constant a.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([ 101, 9872, 1022, 1012, 1018, 6011, 2008, 3517, 3643, 1997, 7399, 5257,
        1041, 1006, 1037, 1598, 1060, 1009, 1038, 1007, 1027, 1037, 1598, 1041,
        1006, 1060, 1007, 1009, 1038, 2005, 2151, 6721, 8023, 1060, 1010, 1998,
        2512, 6290, 2080, 5377, 1037, 1012,  102])"
2952,1,"['continuous', 'discrete', 'expected values']", Properties of Expectations,seg_575,"proof: let x be discrete, and take values x1, x2, … , x∞. from the definition of expected values, e(ax + b) = ∑k(axk + b)pxk = a∑kxkpxk + b∑kpxk = ae(x) + b because∑kpxk = 1. if x is continuous, e(ax + b) = ∫ (ax + b)p(x)dx = a ∫ xp(x)dx +",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  2292,  1060,  2022, 16246,  1010,  1998,  2202,
         5300,  1060,  2487,  1010,  1060,  2475,  1010,  1529,  1010,  1060,
        30128,  1012,  2013,  1996,  6210,  1997,  3517,  5300,  1010,  1041,
         1006, 22260,  1009,  1038,  1007,  1027,   100,  1006, 22260,  2243,
         1009,  1038,  1007,  1052,  2595,  2243,  1027,   100,  1009,   100,
         1027, 29347,  1006,  1060,  1007,  1009,  1038,   100,  1027,  1015,
         1012,  2065,  1060,  2003,  7142,  1010,  1041,  1006, 22260,  1009,
         1038,  1007,  1027,   100,  1006, 22260,  1009,  1038,  1007,  1052,
         1006,  1060,  1007,  1040,  2595,  1027,  1037,   100, 26726,  1006,
         1060,  1007,  1040,  2595,  1009,   102])"
2953,1,"['moment', 'random variable', 'random', 'distribution', 'variable']", Properties of Expectations,seg_575,"b ∫ p(x)dx = ae(x) + b. we have not made any assumption on the distribution of the random variable x in this theorem, but only the existence of the first moment.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  1038,   100,  1052,  1006,  1060,  1007,  1040,  2595,  1027,
        29347,  1006,  1060,  1007,  1009,  1038,  1012,  2057,  2031,  2025,
         2081,  2151, 11213,  2006,  1996,  4353,  1997,  1996,  6721,  8023,
         1060,  1999,  2023,  9872,  1010,  2021,  2069,  1996,  4598,  1997,
         1996,  2034,  2617,  1012,   102])"
2954,1,['binomial'], Properties of Expectations,seg_575,example 8.16 e(n − x) of a binomial,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2742,  1022,  1012,  2385,  1041,  1006,  1050,  1597,  1060,
         1007,  1997,  1037,  8026, 20936,  2389,   102])"
2955,1,"['distribution', 'parameters', 'binomial', 'binomial distribution']", Properties of Expectations,seg_575,"if x has a binomial distribution with parameters n and p (bino(n, p)), find e(n − x), of a binomial distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2065,  1060,  2038,  1037,  8026, 20936,  2389,  4353,  2007,
        11709,  1050,  1998,  1052,  1006,  8026,  2080,  1006,  1050,  1010,
         1052,  1007,  1007,  1010,  2424,  1041,  1006,  1050,  1597,  1060,
         1007,  1010,  1997,  1037,  8026, 20936,  2389,  4353,  1012,   102])"
2956,1,"['random', 'random variables', 'variables']", Properties of Expectations,seg_575,"theorem 8.5 if x and y are two random variables, e(x ± y) = e(x) ± e(y) = e(y ± x) and e(ax ± by) = ae(x) ± be(y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  9872,  1022,  1012,  1019,  2065,  1060,  1998,  1061,  2024,
         2048,  6721, 10857,  1010,  1041,  1006,  1060,  1081,  1061,  1007,
         1027,  1041,  1006,  1060,  1007,  1081,  1041,  1006,  1061,  1007,
         1027,  1041,  1006,  1061,  1081,  1060,  1007,  1998,  1041,  1006,
        22260,  1081,  2011,  1007,  1027, 29347,  1006,  1060,  1007,  1081,
         2022,  1006,  1061,  1007,  1012,   102])"
2957,1,"['random', 'random variables', 'expectation', 'sum of two random variables', 'variables']", Properties of Expectations,seg_575,"proof: the sum of two random variables x and y makes sense only when they are compatible random variables. the first result follows trivially by distributing the summation or integration over the individual components (connected by + or −). the second result can be proved using the fact that e(cx) = ce(x), twice. this is called the linearity property of expectation.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  1996,  7680,  1997,  2048,  6721, 10857,  1060,
         1998,  1061,  3084,  3168,  2069,  2043,  2027,  2024, 11892,  6721,
        10857,  1012,  1996,  2034,  2765,  4076, 20610,  2135,  2011, 20083,
         1996,  7680, 28649,  2030,  8346,  2058,  1996,  3265,  6177,  1006,
         4198,  2011,  1009,  2030,  1597,  1007,  1012,  1996,  2117,  2765,
         2064,  2022,  4928,  2478,  1996,  2755,  2008,  1041,  1006,  1039,
         2595,  1007,  1027,  8292,  1006,  1060,  1007,  1010,  3807,  1012,
         2023,  2003,  2170,  1996,  7399,  3012,  3200,  1997, 17626,  1012,
          102])"
2958,1,"['random', 'random variables', 'independent random variables', 'variables', 'expected value', 'independent']", Properties of Expectations,seg_575,8.3.1.1 expected value of independent random variables we defined independent random variables in chapter 5 as p(xy) = p(x) ∗ p(y).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  1022,  1012,  1017,  1012,  1015,  1012,  1015,  3517,  3643,
         1997,  2981,  6721, 10857,  2057,  4225,  2981,  6721, 10857,  1999,
         3127,  1019,  2004,  1052,  1006,  1060,  2100,  1007,  1027,  1052,
         1006,  1060,  1007,  1598,  1052,  1006,  1061,  1007,  1012,   102])"
2959,1,"['probability', 'functions', 'events', 'outcomes', 'probabilities', 'outcome', 'random', 'results', 'random variables', 'expected values', 'variables', 'independent']", Properties of Expectations,seg_575,"this result is defined in terms of probabilities. as expected values can be considered as functions of random variables with probabilities as weights, we could get analogous results in terms of expected values. two outcomes are independent if knowing the outcome of one does not change the probabilities of the outcomes of the other. when two events are independent, we find the probability of both events happening by multiplying their individual probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2023,  2765,  2003,  4225,  1999,  3408,  1997,  4013,  3676,
        14680,  1012,  2004,  3517,  5300,  2064,  2022,  2641,  2004,  4972,
         1997,  6721, 10857,  2007,  4013,  3676, 14680,  2004, 15871,  1010,
         2057,  2071,  2131, 19639,  3463,  1999,  3408,  1997,  3517,  5300,
         1012,  2048, 13105,  2024,  2981,  2065,  4209,  1996,  9560,  1997,
         2028,  2515,  2025,  2689,  1996,  4013,  3676, 14680,  1997,  1996,
        13105,  1997,  1996,  2060,  1012,  2043,  2048,  2824,  2024,  2981,
         1010,  2057,  2424,  1996,  9723,  1997,  2119,  2824,  6230,  2011,
         4800, 22086,  2075,  2037,  3265,  4013,  3676, 14680,  1012,   102])"
2960,1,"['random', 'random variables', 'independent random variables', 'variables', 'independent']", Properties of Expectations,seg_575,"definition 8.6 if x and y are two independent random variables, then e(xy) = e(x) ∗ e(y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6210,  1022,  1012,  1020,  2065,  1060,  1998,  1061,  2024,
         2048,  2981,  6721, 10857,  1010,  2059,  1041,  1006,  1060,  2100,
         1007,  1027,  1041,  1006,  1060,  1007,  1598,  1041,  1006,  1061,
         1007,  1012,   102])"
2961,1,"['probabilities', 'independence', 'discrete', 'independent']", Properties of Expectations,seg_575,"let x and y be discrete. then e(xy) = ∑k(xkyk)pxk ,yk = ∑kxkykpxk pyk using the above theorem on the independence of probabilities. pairing xk with pxk , this becomes ∑k(xkpxk )(ykpyk ). hence, if x and y are independent, then e[xy] = e[x]e[y].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2292,  1060,  1998,  1061,  2022, 16246,  1012,  2059,  1041,
         1006,  1060,  2100,  1007,  1027,   100,  1006,  1060,  4801,  2243,
         1007,  1052,  2595,  2243,  1010,  1061,  2243,  1027,   100,  1052,
        15922,  2478,  1996,  2682,  9872,  2006,  1996,  4336,  1997,  4013,
         3676, 14680,  1012, 22778,  1060,  2243,  2007,  1052,  2595,  2243,
         1010,  2023,  4150,   100,  1006,  1060,  2243,  2361,  2595,  2243,
         1007,  1006,  1061,  2243,  7685,  2243,  1007,  1012,  6516,  1010,
         2065,  1060,  1998,  1061,  2024,  2981,  1010,  2059,  1041,  1031,
         1060,  2100,  1033,  1027,  1041,  1031,  1060,  1033,  1041,  1031,
         1061,  1033,  1012,   102])"
2962,1,"['random', 'random variables', 'independent random variables', 'variables', 'independent']", Properties of Expectations,seg_575,"theorem 8.6 if x and y are two independent random variables, then p(x ≤ x,y ≤ y) = p(x ≤ x) ∗ pr(y ≤ y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  9872,  1022,  1012,  1020,  2065,  1060,  1998,  1061,  2024,
         2048,  2981,  6721, 10857,  1010,  2059,  1052,  1006,  1060,  1608,
         1060,  1010,  1061,  1608,  1061,  1007,  1027,  1052,  1006,  1060,
         1608,  1060,  1007,  1598, 10975,  1006,  1061,  1608,  1061,  1007,
         1012,   102])"
2963,1,['discrete'], Properties of Expectations,seg_575,proof: let both be discrete. write the lhs as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  2292,  2119,  2022, 16246,  1012,  4339,  1996,
         1048,  7898,  2004,   102])"
2964,1,['summation'], Properties of Expectations,seg_575,"using the properties of summation mentioned in chapter 1, split this into two products as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2478,  1996,  5144,  1997,  7680, 28649,  3855,  1999,  3127,
         1015,  1010,  3975,  2023,  2046,  2048,  3688,  2004,   102])"
2965,1,['independence'], Properties of Expectations,seg_575,due to the independence of x and y.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([ 101, 2349, 2000, 1996, 4336, 1997, 1060, 1998, 1061, 1012,  102])"
2966,1,"['linear combination', 'linear', 'functions', 'factors', 'expected value', 'combination']", Properties of Expectations,seg_575,"theorem 8.7 expected value of a linear combination of scaled functions is the linear combination of expected value of the functions with respective scaling factors. symbolically, e(c1g1(x) + c2g2(x) + · · · +) = c1e(g1(x)) + c2e(g2(x)) + · · · +, where the constants ci’s are any real numbers.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1.,
        0., 1., 1., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  9872,  1022,  1012,  1021,  3517,  3643,  1997,  1037,  7399,
         5257,  1997, 18953,  4972,  2003,  1996,  7399,  5257,  1997,  3517,
         3643,  1997,  1996,  4972,  2007,  7972, 25169,  5876,  1012, 12613,
         3973,  1010,  1041,  1006, 27723,  2290,  2487,  1006,  1060,  1007,
         1009, 29248,  2290,  2475,  1006,  1060,  1007,  1009,  1087,  1087,
         1087,  1009,  1007,  1027, 27723,  2063,  1006,  1043,  2487,  1006,
         1060,  1007,  1007,  1009, 29248,  2063,  1006,  1043,  2475,  1006,
         1060,  1007,  1007,  1009,  1087,  1087,  1087,  1009,  1010,  2073,
         1996,  5377,  2015, 25022,  1521,  1055,  2024,  2151,  2613,  3616,
         1012,   102])"
2967,1,"['continuous', 'range', 'expectations', 'functions', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Properties of Expectations,seg_575,"definition 8.7 if x and y are two independent random variables, and g(x), h(y) are everywhere continuous functions of x and y defined on the range of x and y, then e(g(x) ∗ h(y)) = e(g(x)) ∗ e(h(y)) if the expectations on the rhs exist.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6210,  1022,  1012,  1021,  2065,  1060,  1998,  1061,  2024,
         2048,  2981,  6721, 10857,  1010,  1998,  1043,  1006,  1060,  1007,
         1010,  1044,  1006,  1061,  1007,  2024,  7249,  7142,  4972,  1997,
         1060,  1998,  1061,  4225,  2006,  1996,  2846,  1997,  1060,  1998,
         1061,  1010,  2059,  1041,  1006,  1043,  1006,  1060,  1007,  1598,
         1044,  1006,  1061,  1007,  1007,  1027,  1041,  1006,  1043,  1006,
         1060,  1007,  1007,  1598,  1041,  1006,  1044,  1006,  1061,  1007,
         1007,  2065,  1996, 10908,  2006,  1996,  1054,  7898,  4839,  1012,
          102])"
2968,1,"['continuous', 'summation', 'discrete', 'case']", Properties of Expectations,seg_575,the proof follows exactly as done above using summation in the discrete case and integration in the continuous case.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  1996,  6947,  4076,  3599,  2004,  2589,  2682,  2478,  7680,
        28649,  1999,  1996, 16246,  2553,  1998,  8346,  1999,  1996,  7142,
         2553,  1012,   102])"
2969,1,"['poisson random variable', 'random variable', 'poisson', 'method', 'random', 'expected values', 'variable']", Properties of Expectations,seg_575,prove that e[x2] can be found easily using e[x(x − 1)] and e[x] when the denominator of the random variable involves factorials. find a similar method to find e[x3]. use this technique to find the expected values of a poisson random variable.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6011,  2008,  1041,  1031,  1060,  2475,  1033,  2064,  2022,
         2179,  4089,  2478,  1041,  1031,  1060,  1006,  1060,  1597,  1015,
         1007,  1033,  1998,  1041,  1031,  1060,  1033,  2043,  1996,  7939,
        20936, 27413,  1997,  1996,  6721,  8023,  7336,  5387, 26340,  1012,
         2424,  1037,  2714,  4118,  2000,  2424,  1041,  1031,  1060,  2509,
         1033,  1012,  2224,  2023,  6028,  2000,  2424,  1996,  3517,  5300,
         1997,  1037, 13433, 24077,  6721,  8023,  1012,   102])"
2970,1,"['poisson random variable', 'random variable', 'poisson', 'random', 'expectation', 'expected value', 'variable']", Properties of Expectations,seg_575,"solution 8.17 write x2 = x(x − 1) + x. use the above result to break the expected value of rhs into two terms to get e[x2] = e[x(x − 1)] + e[x]. write x3 = x(x − 1)(x − 2) + 3x(x − 1) + x. take expectation to get e(x3) = e[x(x − 1)(x − 2)] + 3e[x(x − 1)] + e[x]. for a poisson random variable, e[x(x − 1)(x −",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  5576,  1022,  1012,  2459,  4339,  1060,  2475,  1027,  1060,
         1006,  1060,  1597,  1015,  1007,  1009,  1060,  1012,  2224,  1996,
         2682,  2765,  2000,  3338,  1996,  3517,  3643,  1997,  1054,  7898,
         2046,  2048,  3408,  2000,  2131,  1041,  1031,  1060,  2475,  1033,
         1027,  1041,  1031,  1060,  1006,  1060,  1597,  1015,  1007,  1033,
         1009,  1041,  1031,  1060,  1033,  1012,  4339,  1060,  2509,  1027,
         1060,  1006,  1060,  1597,  1015,  1007,  1006,  1060,  1597,  1016,
         1007,  1009,  1017,  2595,  1006,  1060,  1597,  1015,  1007,  1009,
         1060,  1012,  2202, 17626,  2000,  2131,  1041,  1006,  1060,  2509,
         1007,  1027,  1041,  1031,  1060,  1006,  1060,  1597,  1015,  1007,
         1006,  1060,  1597,  1016,  1007,  1033,  1009,  1017,  2063,  1031,
         1060,  1006,  1060,  1597,  1015,  1007,  1033,  1009,  1041,  1031,
         1060,  1033,  1012,  2005,  1037, 13433, 24077,  6721,  8023,  1010,
         1041,  1031,  1060,  1006,  1060,  1597,  1015,  1007,  1006,  1060,
         1597,   102])"
2971,1,"['random', 'random variables', 'variables', 'independent']", Properties of Expectations,seg_575,"theorem 8.8 if x1,x2, … ,xm are independent compatible random variables, then e(c1x1 + c2x2 + · · · + cmxm) = ∑icie(xi).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  9872,  1022,  1012,  1022,  2065,  1060,  2487,  1010,  1060,
         2475,  1010,  1529,  1010,  1060,  2213,  2024,  2981, 11892,  6721,
        10857,  1010,  2059,  1041,  1006, 27723,  2595,  2487,  1009, 29248,
         2595,  2475,  1009,  1087,  1087,  1087,  1009,  4642,  2595,  2213,
         1007,  1027,   100,  1006,  8418,  1007,  1012,   102])"
2972,1,"['expectations', 'random', 'random variables', 'variables']", Properties of Expectations,seg_575,"proof: this follows easily by repeated application of the above result. if x1,x2, … ,xm are m compatible random variables, then e(x1 + x2 + · · · + xm) = e(x1) + e(x2) + · · · + e(xm), provided each of the expectations exist.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  2023,  4076,  4089,  2011,  5567,  4646,  1997,
         1996,  2682,  2765,  1012,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2213,  2024,  1049, 11892,  6721, 10857,
         1010,  2059,  1041,  1006,  1060,  2487,  1009,  1060,  2475,  1009,
         1087,  1087,  1087,  1009,  1060,  2213,  1007,  1027,  1041,  1006,
         1060,  2487,  1007,  1009,  1041,  1006,  1060,  2475,  1007,  1009,
         1087,  1087,  1087,  1009,  1041,  1006,  1060,  2213,  1007,  1010,
         3024,  2169,  1997,  1996, 10908,  4839,  1012,   102])"
2973,1,"['bernoulli', 'random', 'random variables', 'variables']", Properties of Expectations,seg_575,example 8.18 sum of bernoulli random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2742,  1022,  1012,  2324,  7680,  1997, 16595,  7140,  6894,
         6721, 10857,   102])"
2974,1,"['random', 'random variables', 'variables']", Properties of Expectations,seg_575,"solution 8.18 as x and y are compatible, we apply the above theorem to get the result. this theorem can be extended to any number of random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  5576,  1022,  1012,  2324,  2004,  1060,  1998,  1061,  2024,
        11892,  1010,  2057,  6611,  1996,  2682,  9872,  2000,  2131,  1996,
         2765,  1012,  2023,  9872,  2064,  2022,  3668,  2000,  2151,  2193,
         1997,  6721, 10857,  1012,   102])"
2975,1,"['probability', 'expectation', 'success']", Properties of Expectations,seg_575,"proof: the proof follows easily by taking the expectation term by term. if the probability of success is equal (the same probability p for each of them), then e(x1 + x2 + · · · + xm) = mp.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  1996,  6947,  4076,  4089,  2011,  2635,  1996,
        17626,  2744,  2011,  2744,  1012,  2065,  1996,  9723,  1997,  3112,
         2003,  5020,  1006,  1996,  2168,  9723,  1052,  2005,  2169,  1997,
         2068,  1007,  1010,  2059,  1041,  1006,  1060,  2487,  1009,  1060,
         2475,  1009,  1087,  1087,  1087,  1009,  1060,  2213,  1007,  1027,
         6131,  1012,   102])"
2976,1,"['mean', 'random', 'random variables', 'variables']", Properties of Expectations,seg_575,"theorem 8.10 if x1,x2, … ,xn are random variables, each with mean  , the mean",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 1., 0., 0., 1., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  9872,  1022,  1012,  2184,  2065,  1060,  2487,  1010,  1060,
         2475,  1010,  1529,  1010,  1060,  2078,  2024,  6721, 10857,  1010,
         2169,  2007,  2812,  1010,  1996,  2812,   102])"
2977,1,['range'], Properties of Expectations,seg_575,"proof: for simplicity assume that x and y have the same range. consider z = y − x. as x ≤ y , z is always positive. hence e[z] ≥ 0. this means that e(y − x) ≥ 0, or equivalently e[y] ≥ e[x].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  2005, 17839,  7868,  2008,  1060,  1998,  1061,
         2031,  1996,  2168,  2846,  1012,  5136,  1062,  1027,  1061,  1597,
         1060,  1012,  2004,  1060,  1608,  1061,  1010,  1062,  2003,  2467,
         3893,  1012,  6516,  1041,  1031,  1062,  1033,  1609,  1014,  1012,
         2023,  2965,  2008,  1041,  1006,  1061,  1597,  1060,  1007,  1609,
         1014,  1010,  2030,  5662,  2135,  1041,  1031,  1061,  1033,  1609,
         1041,  1031,  1060,  1033,  1012,   102])"
2978,1,"['random', 'random variables', 'variables']", Properties of Expectations,seg_575,"as noted above, the sum on the left makes sense only when the random variables are compatible. any of the “+” can also be replaced by a “−” with the corresponding sign changed on the rhs accordingly.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2004,  3264,  2682,  1010,  1996,  7680,  2006,  1996,  2187,
         3084,  3168,  2069,  2043,  1996,  6721, 10857,  2024, 11892,  1012,
         2151,  1997,  1996,  1523,  1009,  1524,  2064,  2036,  2022,  2999,
         2011,  1037,  1523,  1597,  1524,  2007,  1996,  7978,  3696,  2904,
         2006,  1996,  1054,  7898, 11914,  1012,   102])"
2979,1,"['expected value', 'functions', 'binomial']", Properties of Expectations,seg_575,example 8.19 expected value of functions of binomial,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 1., 1., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2742,  1022,  1012,  2539,  3517,  3643,  1997,  4972,  1997,
         8026, 20936,  2389,   102])"
2980,1,"['distribution', 'parameters', 'binomial', 'binomial distribution']", Properties of Expectations,seg_575,"if x has a binomial distribution with parameters n and p (bino(n, p)), then (i) e(x∕n) = p and (ii) e(n − x)2 = nq[n − p(n − 1)] = nq + n(n − 1)q2.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  2065,  1060,  2038,  1037,  8026, 20936,  2389,  4353,  2007,
        11709,  1050,  1998,  1052,  1006,  8026,  2080,  1006,  1050,  1010,
         1052,  1007,  1007,  1010,  2059,  1006,  1045,  1007,  1041,  1006,
          100,  1007,  1027,  1052,  1998,  1006,  2462,  1007,  1041,  1006,
         1050,  1597,  1060,  1007,  1016,  1027,  1050,  4160,  1031,  1050,
         1597,  1052,  1006,  1050,  1597,  1015,  1007,  1033,  1027,  1050,
         4160,  1009,  1050,  1006,  1050,  1597,  1015,  1007,  1053,  2475,
         1012,   102])"
2981,1,"['moment', 'observation', 'expectation', 'expectation operator', 'second moment']", Properties of Expectations,seg_575,"solution 8.19 the first result follows trivially from the above by replacing c with 1∕n, and taking 1∕n as a constant outside the expectation operator. for (ii) expand the quadratic as e(n − x)2 = e(n2 − 2nx + x2). take term by term expectation to get e(n2) − 2ne(x) + e(x2)). now apply above theorems to get n2 − 2n ∗ np + (np + n(n − 1)p2). this simplifies to nq[n − p(n − 1)]. write p as 1 − q so that [n − p(n − 1)] = n − (1 − q)(n − 1). the n cancels out giving 1 + q(n − 1). substitute in the above to get e(n − x)2 = nq[1 + (n − 1)q] = nq + n(n − 1)q2. this result can also be obtained directly from the observation that n − x has bino(n, q) (example 6.11 1, p. 203) so that its second moment is nq + n(n − 1)q2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  5576,  1022,  1012,  2539,  1996,  2034,  2765,  4076, 20610,
         2135,  2013,  1996,  2682,  2011,  6419,  1039,  2007,   100,  1010,
         1998,  2635,   100,  2004,  1037,  5377,  2648,  1996, 17626,  6872,
         1012,  2005,  1006,  2462,  1007,  7818,  1996, 17718, 23671,  2004,
         1041,  1006,  1050,  1597,  1060,  1007,  1016,  1027,  1041,  1006,
         1050,  2475,  1597,  1016, 26807,  1009,  1060,  2475,  1007,  1012,
         2202,  2744,  2011,  2744, 17626,  2000,  2131,  1041,  1006,  1050,
         2475,  1007,  1597,  1016,  2638,  1006,  1060,  1007,  1009,  1041,
         1006,  1060,  2475,  1007,  1007,  1012,  2085,  6611,  2682,  9872,
         2015,  2000,  2131,  1050,  2475,  1597,  1016,  2078,  1598, 27937,
         1009,  1006, 27937,  1009,  1050,  1006,  1050,  1597,  1015,  1007,
         1052,  2475,  1007,  1012,  2023, 21934, 24759, 14144,  2000,  1050,
         4160,  1031,  1050,  1597,  1052,  1006,  1050,  1597,  1015,  1007,
         1033,  1012,  4339,  1052,  2004,  1015,  1597,  1053,  2061,  2008,
         1031,  1050,  1597,  1052,  1006,  1050,  1597,  1015,  1007,  1033,
         1027,  1050,  1597,  1006,  1015,  1597,  1053,  1007,  1006,  1050,
         1597,  1015,  1007,  1012,  1996,  1050, 17542,  2015,  2041,  3228,
         1015,  1009,  1053,  1006,  1050,  1597,  1015,  1007,  1012,  7681,
         1999,  1996,  2682,  2000,  2131,  1041,  1006,  1050,  1597,  1060,
         1007,  1016,  1027,  1050,  4160,  1031,  1015,  1009,  1006,  1050,
         1597,  1015,  1007,  1053,  1033,  1027,  1050,  4160,  1009,  1050,
         1006,  1050,  1597,  1015,  1007,  1053,  2475,  1012,  2023,  2765,
         2064,  2036,  2022,  4663,  3495,  2013,  1996,  8089,  2008,  1050,
         1597,  1060,  2038,  8026,  2080,  1006,  1050,  1010,  1053,  1007,
         1006,  2742,  1020,  1012,  2340,  1015,  1010,  1052,  1012, 18540,
         1007,  2061,  2008,  2049,  2117,  2617,  2003,  1050,  4160,  1009,
         1050,  1006,  1050,  1597,  1015,  1007,  1053,  2475,  1012,   102])"
2982,0,[], Properties of Expectations,seg_575,example 8.20 expected heads in flips of four coins,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 10908])","tensor([  101,  2742,  1022,  1012,  2322,  3517,  4641,  1999, 11238,  2015,
         1997,  2176,  7824,   102])"
2983,0,[], Properties of Expectations,seg_575,what is the expected number of heads in four flips of a fair coin?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 10908])","tensor([  101,  2054,  2003,  1996,  3517,  2193,  1997,  4641,  1999,  2176,
        11238,  2015,  1997,  1037,  4189,  9226,  1029,   102])"
2984,0,[], Properties of Expectations,seg_575,required expected number is 2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 10908])","tensor([ 101, 3223, 3517, 2193, 2003, 1016,  102])"
2985,1,['expectation'], Properties of Expectations,seg_575,"proof: consider the expression (ax + y∕a)2 = a2x2 + y2∕a2 + 2 ∗ a ∗ (1∕a) ∗ xy = a2x2 + y2∕a2 + 2 ∗ xy . as the lhs being a square is always nonnegative, this can be written as ±2xy ≤ a2x2 + y2∕a2. take expectation of both sides to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 10908])","tensor([  101,  6947,  1024,  5136,  1996,  3670,  1006, 22260,  1009,   100,
         1007,  1016,  1027, 22441,  2595,  2475,  1009,   100,  1009,  1016,
         1598,  1037,  1598,  1006,   100,  1007,  1598,  1060,  2100,  1027,
        22441,  2595,  2475,  1009,   100,  1009,  1016,  1598,  1060,  2100,
         1012,  2004,  1996,  1048,  7898,  2108,  1037,  2675,  2003,  2467,
         2512,  2638, 26792,  1010,  2023,  2064,  2022,  2517,  2004,  1081,
         2475, 18037,  1608, 22441,  2595,  2475,  1009,   100,  1012,  2202,
        17626,  1997,  2119,  3903,  2000,  2131,   102])"
2986,0,[], Properties of Expectations,seg_575,this follows easily by taking y = x.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 10908])","tensor([ 101, 2023, 4076, 4089, 2011, 2635, 1061, 1027, 1060, 1012,  102])"
2987,1,"['functions', 'random', 'random variables', 'exponential', 'variables']", Expectation of Continuous Functions,seg_577,"some applications involve functions of random variables. examples are fractional powers of x, integer powers of x, exponential, logarithmic and trigonometric functions, and other transcendental functions.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  2070,  5097,  9125,  4972,  1997,  6721, 10857,  1012,  4973,
         2024, 12884,  2389,  4204,  1997,  1060,  1010, 16109,  4204,  1997,
         1060,  1010, 27258,  1010,  8833,  8486,  2705,  7712,  1998, 13012,
         7446, 28993,  4972,  1010,  1998,  2060,  9099, 23865, 21050,  4972,
         1012,   102])"
2988,1,['expected value'], Expectation of Continuous Functions,seg_577,example 8.21 expected value of exp( x),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([ 101, 2742, 1022, 1012, 2538, 3517, 3643, 1997, 4654, 2361, 1006, 1060,
        1007,  102])"
2989,1,['expected value'], Expectation of Continuous Functions,seg_577,"if x is bino(n, p) find expected value of exp( x), where   is a nonzero constant.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([ 101, 2065, 1060, 2003, 8026, 2080, 1006, 1050, 1010, 1052, 1007, 2424,
        3517, 3643, 1997, 4654, 2361, 1006, 1060, 1007, 1010, 2073, 2003, 1037,
        2512, 6290, 2080, 5377, 1012,  102])"
2990,1,"['random', 'moment']", Expectation of Continuous Functions,seg_577,"corollary 3 if g(x) is undefined for at least one value of x, then e(g(x)) does not exist. for instance, the first inverse moment e(1∕x) is undefined for all random variables that assume a nonzero value for x = 0 (i.e., f (x = 0) ≠ 0).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  2522, 28402,  5649,  1017,  2065,  1043,  1006,  1060,  1007,
         2003,  6151, 28344,  2005,  2012,  2560,  2028,  3643,  1997,  1060,
         1010,  2059,  1041,  1006,  1043,  1006,  1060,  1007,  1007,  2515,
         2025,  4839,  1012,  2005,  6013,  1010,  1996,  2034, 19262,  2617,
         1041,  1006,   100,  1007,  2003,  6151, 28344,  2005,  2035,  6721,
        10857,  2008,  7868,  1037,  2512,  6290,  2080,  3643,  2005,  1060,
         1027,  1014,  1006,  1045,  1012,  1041,  1012,  1010,  1042,  1006,
         1060,  1027,  1014,  1007,  1027,  1014,  1007,  1012,   102])"
2991,1,"['random', 'random variables', 'variables']", Expectation of Continuous Functions,seg_577,prove that e(1∕x) ≥ 1∕e(x) for positively defined random variables x.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  6011,  2008,  1041,  1006,   100,  1007,  1609,   100,  1006,
         1060,  1007,  2005, 13567,  4225,  6721, 10857,  1060,  1012,   102])"
2992,1,['mean'], Expectation of Continuous Functions,seg_577,solution 8.22 let   be the mean of x. then e[(x −  )(1∕x) − 1∕ ] = e[(x −  )(  − x)∕ x = −e[(x −  )2∕( x) ≤ 0.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([ 101, 5576, 1022, 1012, 2570, 2292, 2022, 1996, 2812, 1997, 1060, 1012,
        2059, 1041, 1031, 1006, 1060, 1597, 1007, 1006,  100, 1007, 1597,  100,
        1033, 1027, 1041, 1031, 1006, 1060, 1597, 1007, 1006, 1597, 1060, 1007,
         100, 1060, 1027, 1597, 2063, 1031, 1006, 1060, 1597, 1007,  100, 1006,
        1060, 1007, 1608, 1014, 1012,  102])"
2993,1,"['continuous', 'function', 'range']", Expectation of Continuous Functions,seg_577,"definition 8.8 if the function g(x) is everywhere continuous in the range of x, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([ 101, 6210, 1022, 1012, 1022, 2065, 1996, 3853, 1043, 1006, 1060, 1007,
        2003, 7249, 7142, 1999, 1996, 2846, 1997, 1060, 1010, 2059,  102])"
2994,1,['discrete'], Expectation of Continuous Functions,seg_577,⎧ ∞ ⎪ ∑ g(x)f (x) if x is discrete; ⎪⎨x=−∞ e(g(x)) = ∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,   100,  1601,   100,   100,  1043,  1006,  1060,  1007,  1042,
         1006,  1060,  1007,  2065,  1060,  2003, 16246,  1025,   100,  1027,
         1597, 30128,  1041,  1006,  1043,  1006,  1060,  1007,  1007,  1027,
         1601,   102])"
2995,1,['continuous'], Expectation of Continuous Functions,seg_577,⎪ g(x)f (x)dx if x is continuous. ⎪⎩∫−∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0.])","tensor([17626,  1997,  7142,  4972])","tensor([ 101,  100, 1043, 1006, 1060, 1007, 1042, 1006, 1060, 1007, 1040, 2595,
        2065, 1060, 2003, 7142, 1012,  100,  102])"
2996,1,"['function', 'expected value']", Expectation of Continuous Functions,seg_577,example 8.23 expected value of a function,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([ 101, 2742, 1022, 1012, 2603, 3517, 3643, 1997, 1037, 3853,  102])"
2997,1,"['poisson', 'poisson distribution', 'distribution']", Expectation of Continuous Functions,seg_577,example 8.24 e((− 1)x) of a poisson distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  2742,  1022,  1012,  2484,  1041,  1006,  1006,  1597,  1015,
         1007,  1060,  1007,  1997,  1037, 13433, 24077,  4353,   102])"
2998,1,['summation'], Expectation of Continuous Functions,seg_577,"∞ =0 (−1)x exp(− ) x∕x!. using the above theorem, we take the constant outside the summation to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  1601,  1027,  1014,  1006,  1597,  2487,  1007,  1060,  4654,
         2361,  1006,  1597,  1007,   100,   999,  1012,  2478,  1996,  2682,
         9872,  1010,  2057,  2202,  1996,  5377,  2648,  1996,  7680, 28649,
         2000,  2131,   102])"
2999,1,"['factor', 'function', 'expected value']", Expectation of Continuous Functions,seg_577,"corollary 4 expected value of a scaled function is the scaling factor times the expected value of the function. symbolically, e(c ∗ g(x)) = c ∗ e(g(x)).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  2522, 28402,  5649,  1018,  3517,  3643,  1997,  1037, 18953,
         3853,  2003,  1996, 25169,  5387,  2335,  1996,  3517,  3643,  1997,
         1996,  3853,  1012, 12613,  3973,  1010,  1041,  1006,  1039,  1598,
         1043,  1006,  1060,  1007,  1007,  1027,  1039,  1598,  1041,  1006,
         1043,  1006,  1060,  1007,  1007,  1012,   102])"
3000,1,"['geometric distribution', 'moments', 'distribution', 'geometric']", Expectation of Continuous Functions,seg_577,example 8.25 moments of geometric distribution qx/2p,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  2742,  1022,  1012,  2423,  5312,  1997, 14965,  4353,  1053,
         2595,  1013,  1016,  2361,   102])"
3001,1,"['mean', 'variance', 'distribution']", Expectation of Continuous Functions,seg_577,find the mean and variance of a distribution defined as,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  2424,  1996,  2812,  1998, 23284,  1997,  1037,  4353,  4225,
         2004,   102])"
3002,0,[], Expectation of Continuous Functions,seg_577,"q p if x ranges from 0, 2, 4, 6, … ,∞ f (x; p) = { 0",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([17626,  1997,  7142,  4972])","tensor([ 101, 1053, 1052, 2065, 1060, 8483, 2013, 1014, 1010, 1016, 1010, 1018,
        1010, 1020, 1010, 1529, 1010, 1601, 1042, 1006, 1060, 1025, 1052, 1007,
        1027, 1063, 1014,  102])"
3003,1,"['expectation', 'standard']", Expectation of Continuous Functions,seg_577,"solution 8.25 put y = x∕2 to get the standard form. take expectation of both sides to get e(y) = e(x)∕2 = q∕p, so that e(x) = 2q∕p. similarly, v(x) = 4 v(y) = 4q∕p2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([17626,  1997,  7142,  4972])","tensor([  101,  5576,  1022,  1012,  2423,  2404,  1061,  1027,   100,  2000,
         2131,  1996,  3115,  2433,  1012,  2202, 17626,  1997,  2119,  3903,
         2000,  2131,  1041,  1006,  1061,  1007,  1027,  1041,  1006,  1060,
         1007,   100,  1027,   100,  1010,  2061,  2008,  1041,  1006,  1060,
         1007,  1027,   100,  1012,  6660,  1010,  1058,  1006,  1060,  1007,
         1027,  1018,  1058,  1006,  1061,  1007,  1027,   100,  1012,   102])"
3004,1,"['parameter', 'variance', 'distributions', 'population', 'normal', 'gumbel', 'parameters']", Variance as Expected Value,seg_579,"the variance is a measure of spread in the population. this is captured in a single parameter for normal, laplace, gumbel, and some other distributions, but is a function of two or more parameters for others.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  1996, 23284,  2003,  1037,  5468,  1997,  3659,  1999,  1996,
         2313,  1012,  2023,  2003,  4110,  1999,  1037,  2309, 16381,  2005,
         3671,  1010,  5001, 19217,  1010, 16031,  8671,  1010,  1998,  2070,
         2060, 20611,  1010,  2021,  2003,  1037,  3853,  1997,  2048,  2030,
         2062, 11709,  2005,  2500,  1012,   102])"
3005,1,"['variance', 'random variable', 'random', 'variable']", Variance as Expected Value,seg_579,definition 8.9 variance of a random variable is  x2 = e[(x − e(x)]2 = e(x2) − e(x)2.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  6210,  1022,  1012,  1023, 23284,  1997,  1037,  6721,  8023,
         2003,  1060,  2475,  1027,  1041,  1031,  1006,  1060,  1597,  1041,
         1006,  1060,  1007,  1033,  1016,  1027,  1041,  1006,  1060,  2475,
         1007,  1597,  1041,  1006,  1060,  1007,  1016,  1012,   102])"
3006,1,"['continuous', 'mean', 'variance', 'population', 'population mean', 'population variance', 'discrete']", Variance as Expected Value,seg_579,"here, e(x) is the population mean, which we denote by  x. if  x = 0, the population variance takes the simple form  x2 = e(x2). the above can be expressed as e[(x − e(x)]2 = ∑k(xk −  )2px(xk) when x is discrete, and ∫x(x −  )2f (x)dx = ∫x(x −  )2df(x) when x is continuous.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  2182,  1010,  1041,  1006,  1060,  1007,  2003,  1996,  2313,
         2812,  1010,  2029,  2057, 19090,  2011,  1060,  1012,  2065,  1060,
         1027,  1014,  1010,  1996,  2313, 23284,  3138,  1996,  3722,  2433,
         1060,  2475,  1027,  1041,  1006,  1060,  2475,  1007,  1012,  1996,
         2682,  2064,  2022,  5228,  2004,  1041,  1031,  1006,  1060,  1597,
         1041,  1006,  1060,  1007,  1033,  1016,  1027,   100,  1006,  1060,
         2243,  1597,  1007,  1016,  2361,  2595,  1006,  1060,  2243,  1007,
         2043,  1060,  2003, 16246,  1010,  1998,   100,  1006,  1060,  1597,
         1007,  1016,  2546,  1006,  1060,  1007,  1040,  2595,  1027,   100,
         1006,  1060,  1597,  1007, 14134,  2546,  1006,  1060,  1007,  2043,
         1060,  2003,  7142,  1012,   102])"
3007,1,['variance'], Variance as Expected Value,seg_579,8.3.3.1 properties of variance,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  1022,  1012,  1017,  1012,  1017,  1012,  1015,  5144,  1997,
        23284,   102])"
3008,1,"['expectation', 'table']", Variance as Expected Value,seg_579,"the proof follows trivially by expanding (x −  )2 = x2 − 2 x +  2, then taking expectation term by term, and using e[x] =   in the middle term (table 8.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  1996,  6947,  4076, 20610,  2135,  2011,  9186,  1006,  1060,
         1597,  1007,  1016,  1027,  1060,  2475,  1597,  1016,  1060,  1009,
         1016,  1010,  2059,  2635, 17626,  2744,  2011,  2744,  1010,  1998,
         2478,  1041,  1031,  1060,  1033,  1027,  1999,  1996,  2690,  2744,
         1006,  2795,  1022,  1012,  1018,  1007,  1012,   102])"
3009,1,"['variance', 'random', 'random variables', 'independent random variables', 'variables', 'independent']", Variance as Expected Value,seg_579,2. the variance of independent random variables are additive. symbolically v(x +,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  1016,  1012,  1996, 23284,  1997,  2981,  6721, 10857,  2024,
        29167,  1012, 12613,  3973,  1058,  1006,  1060,  1009,   102])"
3010,1,"['variates', 'random', 'random variables', 'expectation', 'additivity property', 'independent random variables', 'variables', 'independent']", Variance as Expected Value,seg_579,"y) = v(x) + v(y). this is known as the additivity property, which is valid for any number of independent random variables. we prove it for two variates x and y. by definition, var(x + y) = e[(x + y) − e[x + y]]2. use e[x + y] = e[x] + e[y] in the inner expectation and combine with (x + y) to get rhs as e[(x − e[x]) + (y − e[y])]2. expand as a quadratic to get e[(x − e[x])2 + (y − e[y])2 + 2(x − e[x])(y − e[y])]. now take term by term expectation and use e(x − e[x])(y − e[y]) = 0 (as x and y are independent, e(xy) = e(x) ∗ e(y) so that e(x − e[x])(y − e[y]) = 0) to get the result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  1061,  1007,  1027,  1058,  1006,  1060,  1007,  1009,  1058,
         1006,  1061,  1007,  1012,  2023,  2003,  2124,  2004,  1996,  5587,
        25090, 24872,  3200,  1010,  2029,  2003,  9398,  2005,  2151,  2193,
         1997,  2981,  6721, 10857,  1012,  2057,  6011,  2009,  2005,  2048,
        13075, 13143,  2015,  1060,  1998,  1061,  1012,  2011,  6210,  1010,
        13075,  1006,  1060,  1009,  1061,  1007,  1027,  1041,  1031,  1006,
         1060,  1009,  1061,  1007,  1597,  1041,  1031,  1060,  1009,  1061,
         1033,  1033,  1016,  1012,  2224,  1041,  1031,  1060,  1009,  1061,
         1033,  1027,  1041,  1031,  1060,  1033,  1009,  1041,  1031,  1061,
         1033,  1999,  1996,  5110, 17626,  1998, 11506,  2007,  1006,  1060,
         1009,  1061,  1007,  2000,  2131,  1054,  7898,  2004,  1041,  1031,
         1006,  1060,  1597,  1041,  1031,  1060,  1033,  1007,  1009,  1006,
         1061,  1597,  1041,  1031,  1061,  1033,  1007,  1033,  1016,  1012,
         7818,  2004,  1037, 17718, 23671,  2000,  2131,  1041,  1031,  1006,
         1060,  1597,  1041,  1031,  1060,  1033,  1007,  1016,  1009,  1006,
         1061,  1597,  1041,  1031,  1061,  1033,  1007,  1016,  1009,  1016,
         1006,  1060,  1597,  1041,  1031,  1060,  1033,  1007,  1006,  1061,
         1597,  1041,  1031,  1061,  1033,  1007,  1033,  1012,  2085,  2202,
         2744,  2011,  2744, 17626,  1998,  2224,  1041,  1006,  1060,  1597,
         1041,  1031,  1060,  1033,  1007,  1006,  1061,  1597,  1041,  1031,
         1061,  1033,  1007,  1027,  1014,  1006,  2004,  1060,  1998,  1061,
         2024,  2981,  1010,  1041,  1006,  1060,  2100,  1007,  1027,  1041,
         1006,  1060,  1007,  1598,  1041,  1006,  1061,  1007,  2061,  2008,
         1041,  1006,  1060,  1597,  1041,  1031,  1060,  1033,  1007,  1006,
         1061,  1597,  1041,  1031,  1061,  1033,  1007,  1027,  1014,  1007,
         2000,  2131,  1996,  2765,  1012,   102])"
3011,1,['expectation'], Variance as Expected Value,seg_579,"by definition var(c ∗ x) = e[cx − e(cx)]2. as c is a constant, it can be taken outside the expectation to get c2 ∗ e[x − e(x)]2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  2011,  6210, 13075,  1006,  1039,  1598,  1060,  1007,  1027,
         1041,  1031,  1039,  2595,  1597,  1041,  1006,  1039,  2595,  1007,
         1033,  1016,  1012,  2004,  1039,  2003,  1037,  5377,  1010,  2009,
         2064,  2022,  2579,  2648,  1996, 17626,  2000,  2131, 29248,  1598,
         1041,  1031,  1060,  1597,  1041,  1006,  1060,  1007,  1033,  1016,
         1012,   102])"
3012,1,"['linear', 'variance', 'random', 'results', 'random variables', 'variables']", Variance as Expected Value,seg_579,"by definition var(c ∗ x + b) = e[cx + b − e(cx + b)]2. the +b and −b cancels out giving e[cx − e(cx)]2 = c2 ∗ var(x). replace b by −b to get a similar result. the above two results allow us to find the variance of any linear combination of random variables by finding the var(x) just once, and doing simple arithmetic with the constants to get the desired result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  2011,  6210, 13075,  1006,  1039,  1598,  1060,  1009,  1038,
         1007,  1027,  1041,  1031,  1039,  2595,  1009,  1038,  1597,  1041,
         1006,  1039,  2595,  1009,  1038,  1007,  1033,  1016,  1012,  1996,
         1009,  1038,  1998,  1597,  2497, 17542,  2015,  2041,  3228,  1041,
         1031,  1039,  2595,  1597,  1041,  1006,  1039,  2595,  1007,  1033,
         1016,  1027, 29248,  1598, 13075,  1006,  1060,  1007,  1012,  5672,
         1038,  2011,  1597,  2497,  2000,  2131,  1037,  2714,  2765,  1012,
         1996,  2682,  2048,  3463,  3499,  2149,  2000,  2424,  1996, 23284,
         1997,  2151,  7399,  5257,  1997,  6721, 10857,  2011,  4531,  1996,
        13075,  1006,  1060,  1007,  2074,  2320,  1010,  1998,  2725,  3722,
        20204,  2007,  1996,  5377,  2015,  2000,  2131,  1996,  9059,  2765,
         1012,   102])"
3013,1,"['change of origin', 'transformation', 'variance']", Variance as Expected Value,seg_579,by definition var(x + b) = e[x + b − e(x + b)]2. the +b and −b cancels out giving e[x − e(x)]2 = var(x). replace b by −b to get a similar result. this result shows that a change of origin transformation does not affect the variance.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  2011,  6210, 13075,  1006,  1060,  1009,  1038,  1007,  1027,
         1041,  1031,  1060,  1009,  1038,  1597,  1041,  1006,  1060,  1009,
         1038,  1007,  1033,  1016,  1012,  1996,  1009,  1038,  1998,  1597,
         2497, 17542,  2015,  2041,  3228,  1041,  1031,  1060,  1597,  1041,
         1006,  1060,  1007,  1033,  1016,  1027, 13075,  1006,  1060,  1007,
         1012,  5672,  1038,  2011,  1597,  2497,  2000,  2131,  1037,  2714,
         2765,  1012,  2023,  2765,  3065,  2008,  1037,  2689,  1997,  4761,
         8651,  2515,  2025,  7461,  1996, 23284,  1012,   102])"
3014,1,"['table', 'independent']", Variance as Expected Value,seg_579,m =1 var(xj) if xj’s are independent. this can be proved by induction using the above result 1 (see table 8.4).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  1049,  1027,  1015, 13075,  1006,  1060,  3501,  1007,  2065,
         1060,  3501,  1521,  1055,  2024,  2981,  1012,  2023,  2064,  2022,
         4928,  2011, 15946,  2478,  1996,  2682,  2765,  1015,  1006,  2156,
         2795,  1022,  1012,  1018,  1007,  1012,   102])"
3015,1,"['random', 'random variables', 'variables']", Variance as Expected Value,seg_579,"theorem 8.14 if x1,x2, … ,xn are random variables, each of which are pair-wise",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  9872,  1022,  1012,  2403,  2065,  1060,  2487,  1010,  1060,
         2475,  1010,  1529,  1010,  1060,  2078,  2024,  6721, 10857,  1010,
         2169,  1997,  2029,  2024,  3940,  1011,  7968,   102])"
3016,1,"['mean', 'variance']", Variance as Expected Value,seg_579,"uncorrelated with the same mean   and variance  2, then the variance of xn =  2∕n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  4895, 27108, 16570,  4383,  2007,  1996,  2168,  2812,  1998,
        23284,  1016,  1010,  2059,  1996, 23284,  1997,  1060,  2078,  1027,
          100,  1012,   102])"
3017,1,"['variance', 'distribution', 'binomial', 'binomial distribution']", Variance as Expected Value,seg_579,example 8.26 variance of y = n − x of binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  2742,  1022,  1012,  2656, 23284,  1997,  1061,  1027,  1050,
         1597,  1060,  1997,  8026, 20936,  2389,  4353,   102])"
3018,1,"['variance', 'distribution', 'parameters', 'binomial', 'binomial distribution']", Variance as Expected Value,seg_579,"if x has a binomial distribution with parameters n and p, derive the variance of y = n − x.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  2065,  1060,  2038,  1037,  8026, 20936,  2389,  4353,  2007,
        11709,  1050,  1998,  1052,  1010, 18547,  1996, 23284,  1997,  1061,
         1027,  1050,  1597,  1060,  1012,   102])"
3019,1,['variance'], Variance as Expected Value,seg_579,"solution 8.26 this is already derived in chapter 6 (p. 203). here we use the above property to derive it. var(y) = var(n − x) = var(n) + (−1)2var(x). as the variance of a constant is zero, the rhs simplifies to var(x). hence v(x) = var(y) = npq. this is obtainable directly because n − x ∼ bino(n, q).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  5576,  1022,  1012,  2656,  2023,  2003,  2525,  5173,  1999,
         3127,  1020,  1006,  1052,  1012, 18540,  1007,  1012,  2182,  2057,
         2224,  1996,  2682,  3200,  2000, 18547,  2009,  1012, 13075,  1006,
         1061,  1007,  1027, 13075,  1006,  1050,  1597,  1060,  1007,  1027,
        13075,  1006,  1050,  1007,  1009,  1006,  1597,  2487,  1007,  1016,
        10755,  1006,  1060,  1007,  1012,  2004,  1996, 23284,  1997,  1037,
         5377,  2003,  5717,  1010,  1996,  1054,  7898, 21934, 24759, 14144,
         2000, 13075,  1006,  1060,  1007,  1012,  6516,  1058,  1006,  1060,
         1007,  1027, 13075,  1006,  1061,  1007,  1027, 27937,  4160,  1012,
         2023,  2003,  6855,  3085,  3495,  2138,  1050,  1597,  1060,   100,
         8026,  2080,  1006,  1050,  1010,  1053,  1007,  1012,   102])"
3020,1,['variance'], Variance as Expected Value,seg_579,example 8.27 variance of points earned in cereals coupon,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  2742,  1022,  1012,  2676, 23284,  1997,  2685,  3687,  1999,
        20943,  2015,  8648,  2239,   102])"
3021,1,['variance'], Variance as Expected Value,seg_579,in the cereals coupon example 8.4 in page 342 find the variance on the number of points earned.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  1999,  1996, 20943,  2015,  8648,  2239,  2742,  1022,  1012,
         1018,  1999,  3931,  4090,  2475,  2424,  1996, 23284,  2006,  1996,
         2193,  1997,  2685,  3687,  1012,   102])"
3022,1,"['associated', 'probability', 'event', 'expected value']", Variance as Expected Value,seg_579,"solution 8.27 let xi denote the event associated with ith packet. then xi takes the value 1 with probability p and 2 with probability 1 − p so that the expected value is 1.p + 2.(1 − p) = 2 − p. write this as 1 + (1 − p) = 1 + q. if x ≥ 1 packets are bought, e(x) = x1 + x2 + · · · + xn = n(1 + q). e(x2) = 12 ∗ p + 22 ∗ q = p + 4q = 1 + 3q using p + q = 1. from this v(xi) = e(xi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([23284,  2004,  3517,  3643])","tensor([  101,  5576,  1022,  1012,  2676,  2292,  8418, 19090,  1996,  2724,
         3378,  2007,  2009,  2232, 14771,  1012,  2059,  8418,  3138,  1996,
         3643,  1015,  2007,  9723,  1052,  1998,  1016,  2007,  9723,  1015,
         1597,  1052,  2061,  2008,  1996,  3517,  3643,  2003,  1015,  1012,
         1052,  1009,  1016,  1012,  1006,  1015,  1597,  1052,  1007,  1027,
         1016,  1597,  1052,  1012,  4339,  2023,  2004,  1015,  1009,  1006,
         1015,  1597,  1052,  1007,  1027,  1015,  1009,  1053,  1012,  2065,
         1060,  1609,  1015, 23730,  2024,  4149,  1010,  1041,  1006,  1060,
         1007,  1027,  1060,  2487,  1009,  1060,  2475,  1009,  1087,  1087,
         1087,  1009,  1060,  2078,  1027,  1050,  1006,  1015,  1009,  1053,
         1007,  1012,  1041,  1006,  1060,  2475,  1007,  1027,  2260,  1598,
         1052,  1009,  2570,  1598,  1053,  1027,  1052,  1009,  1018,  4160,
         1027,  1015,  1009,  1017,  4160,  2478,  1052,  1009,  1053,  1027,
         1015,  1012,  2013,  2023,  1058,  1006,  8418,  1007,  1027,  1041,
         1006,  8418,   102])"
3023,1,"['variables', 'symmetric']", Covariance as Expected Value,seg_581,"covariance is a nonstandardized measure of the dependency between the variables involved. we denote it by cov(x,y). the order of the variables x and y is unimportant, as it is symmetric in the variables involved.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  2522, 10755, 28335,  2003,  1037,  2512, 21515,  4232,  3550,
         5468,  1997,  1996, 24394,  2090,  1996, 10857,  2920,  1012,  2057,
        19090,  2009,  2011,  2522,  2615,  1006,  1060,  1010,  1061,  1007,
         1012,  1996,  2344,  1997,  1996, 10857,  1060,  1998,  1061,  2003,
         4895,  5714,  6442,  4630,  1010,  2004,  2009,  2003, 19490,  1999,
         1996, 10857,  2920,  1012,   102])"
3024,1,"['random', 'random variables', 'variables', 'covariance']", Covariance as Expected Value,seg_581,"definition 8.10 covariance of two random variables x and y is cov(x,y) = e(xy) − e(x)e(y) = e(x − e[x])(y − e[y]) = e(y − e[y])(x − e[x]).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  6210,  1022,  1012,  2184,  2522, 10755, 28335,  1997,  2048,
         6721, 10857,  1060,  1998,  1061,  2003,  2522,  2615,  1006,  1060,
         1010,  1061,  1007,  1027,  1041,  1006,  1060,  2100,  1007,  1597,
         1041,  1006,  1060,  1007,  1041,  1006,  1061,  1007,  1027,  1041,
         1006,  1060,  1597,  1041,  1031,  1060,  1033,  1007,  1006,  1061,
         1597,  1041,  1031,  1061,  1033,  1007,  1027,  1041,  1006,  1061,
         1597,  1041,  1031,  1061,  1033,  1007,  1006,  1060,  1597,  1041,
         1031,  1060,  1033,  1007,  1012,   102])"
3025,1,"['covariance', 'quantitative']", Covariance as Expected Value,seg_581,8.3.4.1 properties of covariance covariance satisfies several interesting properties listed below. it is assumed that both x and y are quantitative.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1022,  1012,  1017,  1012,  1018,  1012,  1015,  5144,  1997,
         2522, 10755, 28335,  2522, 10755, 28335,  2938,  2483, 14213,  2195,
         5875,  5144,  3205,  2917,  1012,  2009,  2003,  5071,  2008,  2119,
         1060,  1998,  1061,  2024, 20155,  1012,   102])"
3026,1,"['random', 'random variables', 'independent random variables', 'variables', 'covariance', 'independent']", Covariance as Expected Value,seg_581,1. the covariance of two independent random variables is zero this follows from the above definition because e(xy) = e(x) ∗ e(y) when x and y are independent.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1015,  1012,  1996,  2522, 10755, 28335,  1997,  2048,  2981,
         6721, 10857,  2003,  5717,  2023,  4076,  2013,  1996,  2682,  6210,
         2138,  1041,  1006,  1060,  2100,  1007,  1027,  1041,  1006,  1060,
         1007,  1598,  1041,  1006,  1061,  1007,  2043,  1060,  1998,  1061,
         2024,  2981,  1012,   102])"
3027,1,"['linear combination', 'linear', 'random variable', 'random', 'covariance', 'combination', 'variable', 'independent']", Covariance as Expected Value,seg_581,"2. the covariance of a random variable with an independent linear combination is additive. symbolically, cov(x + y ,z) = cov(x,z) + cov(y ,z). by definition",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1016,  1012,  1996,  2522, 10755, 28335,  1997,  1037,  6721,
         8023,  2007,  2019,  2981,  7399,  5257,  2003, 29167,  1012, 12613,
         3973,  1010,  2522,  2615,  1006,  1060,  1009,  1061,  1010,  1062,
         1007,  1027,  2522,  2615,  1006,  1060,  1010,  1062,  1007,  1009,
         2522,  2615,  1006,  1061,  1010,  1062,  1007,  1012,  2011,  6210,
          102])"
3028,1,"['results', 'independent']", Covariance as Expected Value,seg_581,"as z is independent of x + y ,e(x + y)z = e(xz) + e(yz). also, e(x + y) = e(x) + e(y). substitute in rhs to get e(xz) + e(yz) − [e(x) + e(y)]e(z). rewrite this as [e(xz) − e(x)e(z)] + [e(yz) − e(y)e(z)] = cov(x,z) + cov(y ,z). similar results can be derived for cov(x − y ,z) = cov(x,z) − cov(y ,z) (if z is independent of x − y), cov(x,y + z) = cov(x,y) + cov(x,z) (if x is independent of y + z), and cov(x,y − z) = cov(x,y) − cov(x,z) (if x is independent of y − z).",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  2004,  1062,  2003,  2981,  1997,  1060,  1009,  1061,  1010,
         1041,  1006,  1060,  1009,  1061,  1007,  1062,  1027,  1041,  1006,
         1060,  2480,  1007,  1009,  1041,  1006,  1061,  2480,  1007,  1012,
         2036,  1010,  1041,  1006,  1060,  1009,  1061,  1007,  1027,  1041,
         1006,  1060,  1007,  1009,  1041,  1006,  1061,  1007,  1012,  7681,
         1999,  1054,  7898,  2000,  2131,  1041,  1006,  1060,  2480,  1007,
         1009,  1041,  1006,  1061,  2480,  1007,  1597,  1031,  1041,  1006,
         1060,  1007,  1009,  1041,  1006,  1061,  1007,  1033,  1041,  1006,
         1062,  1007,  1012,  2128, 26373,  2023,  2004,  1031,  1041,  1006,
         1060,  2480,  1007,  1597,  1041,  1006,  1060,  1007,  1041,  1006,
         1062,  1007,  1033,  1009,  1031,  1041,  1006,  1061,  2480,  1007,
         1597,  1041,  1006,  1061,  1007,  1041,  1006,  1062,  1007,  1033,
         1027,  2522,  2615,  1006,  1060,  1010,  1062,  1007,  1009,  2522,
         2615,  1006,  1061,  1010,  1062,  1007,  1012,  2714,  3463,  2064,
         2022,  5173,  2005,  2522,  2615,  1006,  1060,  1597,  1061,  1010,
         1062,  1007,  1027,  2522,  2615,  1006,  1060,  1010,  1062,  1007,
         1597,  2522,  2615,  1006,  1061,  1010,  1062,  1007,  1006,  2065,
         1062,  2003,  2981,  1997,  1060,  1597,  1061,  1007,  1010,  2522,
         2615,  1006,  1060,  1010,  1061,  1009,  1062,  1007,  1027,  2522,
         2615,  1006,  1060,  1010,  1061,  1007,  1009,  2522,  2615,  1006,
         1060,  1010,  1062,  1007,  1006,  2065,  1060,  2003,  2981,  1997,
         1061,  1009,  1062,  1007,  1010,  1998,  2522,  2615,  1006,  1060,
         1010,  1061,  1597,  1062,  1007,  1027,  2522,  2615,  1006,  1060,
         1010,  1061,  1007,  1597,  2522,  2615,  1006,  1060,  1010,  1062,
         1007,  1006,  2065,  1060,  2003,  2981,  1997,  1061,  1597,  1062,
         1007,  1012,   102])"
3029,1,"['change of origin', 'covariance', 'transformation']", Covariance as Expected Value,seg_581,"6. cov((x − a)∕c, (y − b)∕d) = cov(x,y)∕(cd). as the change of origin transformation does not affect the covariance, the lhs is equal to cov(x∕c,y∕d). now apply above result with a = 1∕c, b = 1∕d to get the result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1020,  1012,  2522,  2615,  1006,  1006,  1060,  1597,  1037,
         1007,   100,  1010,  1006,  1061,  1597,  1038,  1007,   100,  1007,
         1027,  2522,  2615,  1006,  1060,  1010,  1061,  1007,   100,  1006,
         3729,  1007,  1012,  2004,  1996,  2689,  1997,  4761,  8651,  2515,
         2025,  7461,  1996,  2522, 10755, 28335,  1010,  1996,  1048,  7898,
         2003,  5020,  2000,  2522,  2615,  1006,   100,  1010,   100,  1007,
         1012,  2085,  6611,  2682,  2765,  2007,  1037,  1027,   100,  1010,
         1038,  1027,   100,  2000,  2131,  1996,  2765,  1012,   102])"
3030,1,"['covariance', 'linear']", Covariance as Expected Value,seg_581,"7. if u = a ∗ x + b ∗ y and v = c ∗ x + d ∗ y , where a, b, c, and d are nonzero constants, then cov(u,v) = a ∗ c x2 + b ∗ d y2 + (a ∗ d + b ∗ c)cov(x,y). this result allows us to find the covariance of two arbitrary linear combinations. the proof follows exactly in the same way as above.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1021,  1012,  2065,  1057,  1027,  1037,  1598,  1060,  1009,
         1038,  1598,  1061,  1998,  1058,  1027,  1039,  1598,  1060,  1009,
         1040,  1598,  1061,  1010,  2073,  1037,  1010,  1038,  1010,  1039,
         1010,  1998,  1040,  2024,  2512,  6290,  2080,  5377,  2015,  1010,
         2059,  2522,  2615,  1006,  1057,  1010,  1058,  1007,  1027,  1037,
         1598,  1039,  1060,  2475,  1009,  1038,  1598,  1040,  1061,  2475,
         1009,  1006,  1037,  1598,  1040,  1009,  1038,  1598,  1039,  1007,
         2522,  2615,  1006,  1060,  1010,  1061,  1007,  1012,  2023,  2765,
         4473,  2149,  2000,  2424,  1996,  2522, 10755, 28335,  1997,  2048,
        15275,  7399, 14930,  1012,  1996,  6947,  4076,  3599,  1999,  1996,
         2168,  2126,  2004,  2682,  1012,   102])"
3031,1,"['random', 'random variables', 'variables', 'covariance']", Covariance as Expected Value,seg_581,"n =1 cov(xj,yk) if the x’s and y’s are independent. this allows us to find the covariance of sums of random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 1., 1., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1050,  1027,  1015,  2522,  2615,  1006,  1060,  3501,  1010,
         1061,  2243,  1007,  2065,  1996,  1060,  1521,  1055,  1998,  1061,
         1521,  1055,  2024,  2981,  1012,  2023,  4473,  2149,  2000,  2424,
         1996,  2522, 10755, 28335,  1997, 20571,  1997,  6721, 10857,  1012,
          102])"
3032,1,['independent'], Covariance as Expected Value,seg_581,"theorem 8.15 if xi and yi are pair-wise independent, and u = c1 ∗ x1 + c2 ∗ x2 + · · · + cn ∗ xn and v = d1 ∗ y1 + d2 ∗ y2 + · · · + dn ∗ yn, then cov(u,v) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  9872,  1022,  1012,  2321,  2065,  8418,  1998, 12316,  2024,
         3940,  1011,  7968,  2981,  1010,  1998,  1057,  1027, 27723,  1598,
         1060,  2487,  1009, 29248,  1598,  1060,  2475,  1009,  1087,  1087,
         1087,  1009, 27166,  1598,  1060,  2078,  1998,  1058,  1027,  1040,
         2487,  1598,  1061,  2487,  1009,  1040,  2475,  1598,  1061,  2475,
         1009,  1087,  1087,  1087,  1009,  1040,  2078,  1598,  1061,  2078,
         1010,  2059,  2522,  2615,  1006,  1057,  1010,  1058,  1007,  1027,
          102])"
3033,0,['n'], Covariance as Expected Value,seg_581,n =1 cidjxiyj. separate the indexvar into two groups as i = j and i ≠ j and write this as ∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1050,  1027,  1015, 28744,  3501,  9048,  2100,  3501,  1012,
         3584,  1996,  5950, 10755,  2046,  2048,  2967,  2004,  1045,  1027,
         1046,  1998,  1045,  1027,  1046,  1998,  4339,  2023,  2004,   100,
          102])"
3034,1,['covariance'], Covariance as Expected Value,seg_581,"n ≠i=1 cidjxiyj. take covariance of both sides to get cov(u,v) = cov[∑k",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1050,  1027,  1045,  1027,  1015, 28744,  3501,  9048,  2100,
         3501,  1012,  2202,  2522, 10755, 28335,  1997,  2119,  3903,  2000,
         2131,  2522,  2615,  1006,  1057,  1010,  1058,  1007,  1027,  2522,
         2615,  1031,   100,   102])"
3035,1,"['covariance', 'summation', 'independent']", Covariance as Expected Value,seg_581,"n ≠i=1 cidjxiyj]. as xi and yi are pair-wise independent, the second sum is zero (by using the theorem 8.8). taking covariance inside the summation in the first term gives the result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 2522, 10755, 28335,  2004,  3517,  3643])","tensor([  101,  1050,  1027,  1045,  1027,  1015, 28744,  3501,  9048,  2100,
         3501,  1033,  1012,  2004,  8418,  1998, 12316,  2024,  3940,  1011,
         7968,  2981,  1010,  1996,  2117,  7680,  2003,  5717,  1006,  2011,
         2478,  1996,  9872,  1022,  1012,  1022,  1007,  1012,  2635,  2522,
        10755, 28335,  2503,  1996,  7680, 28649,  1999,  1996,  2034,  2744,
         3957,  1996,  2765,  1012,   102])"
3036,1,"['mean', 'binomial', 'moment', 'random variable', 'moments', 'random', 'moment ', 'arithmetic mean', 'expected value', 'variable', 'binomial theorem']", Moments as Expected Values,seg_583,"the arithmetic mean of a random variable is the first raw or uncentered moment, which is denoted as   = e(x). we call e(xk) as the kth raw moment and denote it as mk; and e((x −  )k) as the kth central moment  k. here,   is called the pivot. theoretically, the pivot can be any nonzero constant, so long as the expected value exists. by expanding (x −  )k using binomial theorem, it is possible to express the central moments in terms of raw moments as follows:",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([5312, 2004, 3517, 5300])","tensor([  101,  1996, 20204,  2812,  1997,  1037,  6721,  8023,  2003,  1996,
         2034,  6315,  2030,  4895, 13013,  6850,  2617,  1010,  2029,  2003,
        19537,  2004,  1027,  1041,  1006,  1060,  1007,  1012,  2057,  2655,
         1041,  1006,  1060,  2243,  1007,  2004,  1996,  1047,  2705,  6315,
         2617,  1998, 19090,  2009,  2004, 12395,  1025,  1998,  1041,  1006,
         1006,  1060,  1597,  1007,  1047,  1007,  2004,  1996,  1047,  2705,
         2430,  2617,  1047,  1012,  2182,  1010,  2003,  2170,  1996, 14255,
        22994,  1012, 22634,  1010,  1996, 14255, 22994,  2064,  2022,  2151,
         2512,  6290,  2080,  5377,  1010,  2061,  2146,  2004,  1996,  3517,
         3643,  6526,  1012,  2011,  9186,  1006,  1060,  1597,  1007,  1047,
         2478,  8026, 20936,  2389,  9872,  1010,  2009,  2003,  2825,  2000,
         4671,  1996,  2430,  5312,  1999,  3408,  1997,  6315,  5312,  2004,
         4076,  1024,   102])"
3037,1,"['change of origin', 'change of origin and scale', 'transformation']", Moments as Expected Values,seg_583,lemma 2 the change of origin and scale transformation yields  r(c ∗ x + b) = cr ∗  r(x).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5312, 2004, 3517, 5300])","tensor([  101,  3393, 14760,  1016,  1996,  2689,  1997,  4761,  1998,  4094,
         8651, 16189,  1054,  1006,  1039,  1598,  1060,  1009,  1038,  1007,
         1027, 13675,  1598,  1054,  1006,  1060,  1007,  1012,   102])"
3038,0,[], Moments as Expected Values,seg_583,where r is a positive integer.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5312, 2004, 3517, 5300])","tensor([  101,  2073,  1054,  2003,  1037,  3893, 16109,  1012,   102])"
3039,1,['moments'], Moments as Expected Values,seg_583,"here,  r ′ denotes the raw moments given by e[cx + b]r. as r is a positive integer,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5312, 2004, 3517, 5300])","tensor([  101,  2182,  1010,  1054,  1531, 14796,  1996,  6315,  5312,  2445,
         2011,  1041,  1031,  1039,  2595,  1009,  1038,  1033,  1054,  1012,
         2004,  1054,  2003,  1037,  3893, 16109,  1010,   102])"
3040,0,[], Moments as Expected Values,seg_583,we could expand this as a power series to get e[∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([5312, 2004, 3517, 5300])","tensor([ 101, 2057, 2071, 7818, 2023, 2004, 1037, 2373, 2186, 2000, 2131, 1041,
        1031,  100,  102])"
3041,1,['expectation'], Moments as Expected Values,seg_583,constant outside and operate the expectation on each term to get the result.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5312, 2004, 3517, 5300])","tensor([  101,  5377,  2648,  1998,  5452,  1996, 17626,  2006,  2169,  2744,
         2000,  2131,  1996,  2765,  1012,   102])"
3042,1,"['conditional density', 'functions', 'dependent', 'conditional', 'random variable', 'function', 'random variables', 'expectation', 'random', 'density functions', 'conditional expectation', 'variables', 'expected value', 'variable', 'dependent variables']", CONDITIONAL EXPECTATIONS,seg_585,conditional expectation is a useful concept that defines the expected value of a random variable or function thereof by conditioning one or more dependent variables. conditional expectation can also be defined in terms of conditional density functions. the conditional expectation considers a non-null subset of random variables by fixing,tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0.])","tensor([18462, 10908])","tensor([  101, 18462, 17626,  2003,  1037,  6179,  4145,  2008, 11859,  1996,
         3517,  3643,  1997,  1037,  6721,  8023,  2030,  3853, 21739,  2011,
        14372,  2028,  2030,  2062,  7790, 10857,  1012, 18462, 17626,  2064,
         2036,  2022,  4225,  1999,  3408,  1997, 18462,  4304,  4972,  1012,
         1996, 18462, 17626, 10592,  1037,  2512,  1011, 19701, 16745,  1997,
         6721, 10857,  2011, 15887,   102])"
3043,1,"['random', 'random variables', 'variables']", CONDITIONAL EXPECTATIONS,seg_585,some other random variables as constant.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2070,  2060,  6721, 10857,  2004,  5377,  1012,   102])"
3044,1,['discrete'], CONDITIONAL EXPECTATIONS,seg_585,⎧ ∞ ⎪ ∑ yfy(y|x = x) if y is discrete; ⎪⎨x=−∞ e[y|x = x] = ∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,   100,  1601,   100,   100,  1061, 12031,  1006,  1061,  1064,
         1060,  1027,  1060,  1007,  2065,  1061,  2003, 16246,  1025,   100,
         1027,  1597, 30128,  1041,  1031,  1061,  1064,  1060,  1027,  1060,
         1033,  1027,  1601,   102])"
3045,1,['continuous'], CONDITIONAL EXPECTATIONS,seg_585,⎪⎪ yfy(y|x = x)dy if y is continuous. ⎩∫y=−∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,   100,  1061, 12031,  1006,  1061,  1064,  1060,  1027,  1060,
         1007,  1040,  2100,  2065,  1061,  2003,  7142,  1012,   100,  1027,
         1597, 30128,   102])"
3046,1,"['mean', 'function', 'conditional distribution', 'distribution', 'conditional', 'expected value']", CONDITIONAL EXPECTATIONS,seg_585,"thus, the conditional expected value of y for a given value of x = x is the mean of y computed relative to the conditional distribution, which is a function of x.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([18462, 10908])","tensor([  101,  2947,  1010,  1996, 18462,  3517,  3643,  1997,  1061,  2005,
         1037,  2445,  3643,  1997,  1060,  1027,  1060,  2003,  1996,  2812,
         1997,  1061, 24806,  5816,  2000,  1996, 18462,  4353,  1010,  2029,
         2003,  1037,  3853,  1997,  1060,  1012,   102])"
3047,1,['independent'], CONDITIONAL EXPECTATIONS,seg_585,theorem 8.16 show that e(y) = e[e(y|x)] if x and y are independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([18462, 10908])","tensor([ 101, 9872, 1022, 1012, 2385, 2265, 2008, 1041, 1006, 1061, 1007, 1027,
        1041, 1031, 1041, 1006, 1061, 1064, 1060, 1007, 1033, 2065, 1060, 1998,
        1061, 2024, 2981, 1012,  102])"
3048,1,['continuous'], CONDITIONAL EXPECTATIONS,seg_585,proof: for simplicity assume that x and y are continuous. consider the rhs. e[e(y|x)] = ∫x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  6947,  1024,  2005, 17839,  7868,  2008,  1060,  1998,  1061,
         2024,  7142,  1012,  5136,  1996,  1054,  7898,  1012,  1041,  1031,
         1041,  1006,  1061,  1064,  1060,  1007,  1033,  1027,   100,   102])"
3049,1,"['expectation operator', 'expectation']", CONDITIONAL EXPECTATIONS,seg_585,"∞ =−∞ e[y|x = x] fx(x)dx. here we have expanded the outer expectation operator. next, expand the inner expectation operator to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  1601,  1027,  1597, 30128,  1041,  1031,  1061,  1064,  1060,
         1027,  1060,  1033, 23292,  1006,  1060,  1007,  1040,  2595,  1012,
         2182,  2057,  2031,  4423,  1996,  6058, 17626,  6872,  1012,  2279,
         1010,  7818,  1996,  5110, 17626,  6872,  2000,  2131,   102])"
3050,0,[], CONDITIONAL EXPECTATIONS,seg_585,"as fx(x) inside the inner integral is a constant while integrating with respect to y, this cancels out from the numerator and denominator to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462, 10908])","tensor([  101,  2004, 23292,  1006,  1060,  1007,  2503,  1996,  5110,  9897,
         2003,  1037,  5377,  2096, 22380,  2007,  4847,  2000,  1061,  1010,
         2023, 17542,  2015,  2041,  2013,  1996, 16371,  5017,  8844,  1998,
         7939, 20936, 27413,  2000,  2131,   102])"
3051,1,"['function', 'density function', 'range', 'independent']", CONDITIONAL EXPECTATIONS,seg_585,"as x and y are independent, the density function fx,y (x, y) factorizes into fx(x) ∗ fy (y). integrate out f (x) over its entire range to unity, and the remaining expression becomes ∫y",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2004,  1060,  1998,  1061,  2024,  2981,  1010,  1996,  4304,
         3853, 23292,  1010,  1061,  1006,  1060,  1010,  1061,  1007,  5387,
        10057,  2046, 23292,  1006,  1060,  1007,  1598,  1042,  2100,  1006,
         1061,  1007,  1012, 17409,  2041,  1042,  1006,  1060,  1007,  2058,
         2049,  2972,  2846,  2000,  8499,  1010,  1998,  1996,  3588,  3670,
         4150,   100,   102])"
3052,1,['continuous'], CONDITIONAL EXPECTATIONS,seg_585,"proof: as before, assume that x and y are continuous. consider the rhs.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([18462, 10908])","tensor([ 101, 6947, 1024, 2004, 2077, 1010, 7868, 2008, 1060, 1998, 1061, 2024,
        7142, 1012, 5136, 1996, 1054, 7898, 1012,  102])"
3053,0,[], CONDITIONAL EXPECTATIONS,seg_585,"as x is a constant inside the integral over y, this becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462, 10908])","tensor([ 101, 2004, 1060, 2003, 1037, 5377, 2503, 1996, 9897, 2058, 1061, 1010,
        2023, 4150,  102])"
3054,1,['expectation'], CONDITIONAL EXPECTATIONS,seg_585,this integral was shown above as e[y|x = x]. expand the outer expectation operator on the rhs as e[e(xy|x)] = ∫x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2023,  9897,  2001,  3491,  2682,  2004,  1041,  1031,  1061,
         1064,  1060,  1027,  1060,  1033,  1012,  7818,  1996,  6058, 17626,
         6872,  2006,  1996,  1054,  7898,  2004,  1041,  1031,  1041,  1006,
         1060,  2100,  1064,  1060,  1007,  1033,  1027,   100,   102])"
3055,0,[], CONDITIONAL EXPECTATIONS,seg_585,"as fx(x) inside the inner integral is a constant while integrating with respect to y, this cancels out from the numerator and denominator to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462, 10908])","tensor([  101,  2004, 23292,  1006,  1060,  1007,  2503,  1996,  5110,  9897,
         2003,  1037,  5377,  2096, 22380,  2007,  4847,  2000,  1061,  1010,
         2023, 17542,  2015,  2041,  2013,  1996, 16371,  5017,  8844,  1998,
         7939, 20936, 27413,  2000,  2131,   102])"
3056,1,"['continuous', 'case']", CONDITIONAL EXPECTATIONS,seg_585,"proof: we will prove the result for the continuous case. by the above definition, e(y + z|x) = ∫y",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([ 101, 6947, 1024, 2057, 2097, 6011, 1996, 2765, 2005, 1996, 7142, 2553,
        1012, 2011, 1996, 2682, 6210, 1010, 1041, 1006, 1061, 1009, 1062, 1064,
        1060, 1007, 1027,  100,  102])"
3057,1,['condition'], CONDITIONAL EXPECTATIONS,seg_585,example 8.28 expected number of devices in working condition,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([18462, 10908])","tensor([ 101, 2742, 1022, 1012, 2654, 3517, 2193, 1997, 5733, 1999, 2551, 4650,
         102])"
3058,1,"['probability', 'condition']", CONDITIONAL EXPECTATIONS,seg_585,"the lifetime of a device in years is distributed as exp( ), where   = 1∕8. if n such devices are put together in a satellite, find the following: (i) probability that half or more of the devices are in good working condition after 5 years. (ii) expected number of devices in working condition after 8 years.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([ 101, 1996, 6480, 1997, 1037, 5080, 1999, 2086, 2003, 5500, 2004, 4654,
        2361, 1006, 1007, 1010, 2073, 1027,  100, 1012, 2065, 1050, 2107, 5733,
        2024, 2404, 2362, 1999, 1037, 5871, 1010, 2424, 1996, 2206, 1024, 1006,
        1045, 1007, 9723, 2008, 2431, 2030, 2062, 1997, 1996, 5733, 2024, 1999,
        2204, 2551, 4650, 2044, 1019, 2086, 1012, 1006, 2462, 1007, 3517, 2193,
        1997, 5733, 1999, 2551, 4650, 2044, 1022, 2086, 1012,  102])"
3059,1,['probability'], CONDITIONAL EXPECTATIONS,seg_585,"solution 8.28 put t = 5 to get the probability that any device is working after 5 years as   exp(−5 ∗  ) = 0.0669. probability that it is not working is 1 −   exp(−5 ) = 0.9331. as there are n such devices, probability that at least half of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  5576,  1022,  1012,  2654,  2404,  1056,  1027,  1019,  2000,
         2131,  1996,  9723,  2008,  2151,  5080,  2003,  2551,  2044,  1019,
         2086,  2004,  4654,  2361,  1006,  1597,  2629,  1598,  1007,  1027,
         1014,  1012,  5757,  2575,  2683,  1012,  9723,  2008,  2009,  2003,
         2025,  2551,  2003,  1015,  1597,  4654,  2361,  1006,  1597,  2629,
         1007,  1027,  1014,  1012,  6109, 21486,  1012,  2004,  2045,  2024,
         1050,  2107,  5733,  1010,  9723,  2008,  2012,  2560,  2431,  1997,
          102])"
3060,0,[], CONDITIONAL EXPECTATIONS,seg_585,the devices are working is∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([18462, 10908])","tensor([ 101, 1996, 5733, 2024, 2551,  100,  102])"
3061,1,"['expected value', 'probability', 'condition', 'binomial', 'case']", CONDITIONAL EXPECTATIONS,seg_585,"ship between binomial sf and ibf, this can be written as ic(n∕2, n∕2 + 1), where c = 0.0669. for case (ii), we need to find the expected value after 8 years. the probability of good working condition is   exp(−8 ). the number of devices in working condition is a binomial variate, so that the expected value is np = n  ∗ exp(−8 ) = 0.04598493 ∗ n.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2911,  2090,  8026, 20936,  2389, 16420,  1998, 21307,  2546,
         1010,  2023,  2064,  2022,  2517,  2004, 24582,  1006,   100,  1010,
          100,  1009,  1015,  1007,  1010,  2073,  1039,  1027,  1014,  1012,
         5757,  2575,  2683,  1012,  2005,  2553,  1006,  2462,  1007,  1010,
         2057,  2342,  2000,  2424,  1996,  3517,  3643,  2044,  1022,  2086,
         1012,  1996,  9723,  1997,  2204,  2551,  4650,  2003,  4654,  2361,
         1006,  1597,  2620,  1007,  1012,  1996,  2193,  1997,  5733,  1999,
         2551,  4650,  2003,  1037,  8026, 20936,  2389, 13075, 13143,  1010,
         2061,  2008,  1996,  3517,  3643,  2003, 27937,  1027,  1050,  1598,
         4654,  2361,  1006,  1597,  2620,  1007,  1027,  1014,  1012,  5840,
        28154,  2620, 26224,  2509,  1598,  1050,  1012,   102])"
3062,1,"['beta distribution', 'mean', 'distribution', 'noncentral beta', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,example 8.29 mean of noncentral beta distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0.])","tensor([18462, 10908])","tensor([  101,  2742,  1022,  1012,  2756,  2812,  1997,  2512, 13013,  7941,
         8247,  4353,   102])"
3063,1,"['beta distribution', 'mean', 'conditional expectation', 'expectation', 'distribution', 'noncentral beta', 'conditional', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,find the mean of noncentral beta distribution using conditional expectation.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0., 1., 1., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2424,  1996,  2812,  1997,  2512, 13013,  7941,  8247,  4353,
         2478, 18462, 17626,  1012,   102])"
3064,1,"['beta distribution', 'mean', 'beta distributions', 'random variable', 'distributions', 'poisson', 'random', 'distribution', 'poisson distribution', 'noncentral beta', 'conditional', 'variable', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,"solution 8.29 the noncentral beta distribution is an infinite sum of poisson weighted central beta distributions [7]. depending on whether the central beta distribution is of first or second kind, there exist noncentral beta distribution (ncb) of two kinds [4]. symbolically, ncb of first kind has cdf ix(a, b;  ) ≡ ix(a + n, b), where n ∼ p(   2 ) has a poisson distribution. hence conditional on n, the random variable x has a central beta distribution of first kind. from this, an expression for the mean is easily obtained as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  5576,  1022,  1012,  2756,  1996,  2512, 13013,  7941,  8247,
         4353,  2003,  2019, 10709,  7680,  1997, 13433, 24077, 18215,  2430,
         8247, 20611,  1031,  1021,  1033,  1012,  5834,  2006,  3251,  1996,
         2430,  8247,  4353,  2003,  1997,  2034,  2030,  2117,  2785,  1010,
         2045,  4839,  2512, 13013,  7941,  8247,  4353,  1006, 13316,  2497,
         1007,  1997,  2048,  7957,  1031,  1018,  1033,  1012, 12613,  3973,
         1010, 13316,  2497,  1997,  2034,  2785,  2038,  3729,  2546, 11814,
         1006,  1037,  1010,  1038,  1025,  1007,  1607, 11814,  1006,  1037,
         1009,  1050,  1010,  1038,  1007,  1010,  2073,  1050,   100,  1052,
         1006,  1016,  1007,  2038,  1037, 13433, 24077,  4353,  1012,  6516,
        18462,  2006,  1050,  1010,  1996,  6721,  8023,  1060,  2038,  1037,
         2430,  8247,  4353,  1997,  2034,  2785,  1012,  2013,  2023,  1010,
         2019,  3670,  2005,  1996,  2812,  2003,  4089,  4663,  2004,  4076,
         1024,   102])"
3065,1,"['beta distribution', 'mean', 'distribution']", CONDITIONAL EXPECTATIONS,seg_585,where we have used the fact that the mean of a beta distribution of first kind is a∕(a + b). write the numerator (a + n) as (a + b + n) − b and simplify to get the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2073,  2057,  2031,  2109,  1996,  2755,  2008,  1996,  2812,
         1997,  1037,  8247,  4353,  1997,  2034,  2785,  2003,   100,  1006,
         1037,  1009,  1038,  1007,  1012,  4339,  1996, 16371,  5017,  8844,
         1006,  1037,  1009,  1050,  1007,  2004,  1006,  1037,  1009,  1038,
         1009,  1050,  1007,  1597,  1038,  1998, 21934, 28250,  2000,  2131,
         1996,   102])"
3066,1,"['displaced poisson distribution', 'moment', 'poisson distributed', 'poisson', 'distribution', 'poisson distribution']", CONDITIONAL EXPECTATIONS,seg_585,"rhs as 1 − b ∗ e[1∕(a + b + n)]. as n is poisson distributed, the expression in the bracket is the first inverse moment of displaced poisson distribution, which −  1 e is given as e (a+n) = a 1f1[a,a + 1;  ], where a = a + b, and 1f1[a,a +",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  1054,  7898,  2004,  1015,  1597,  1038,  1598,  1041,  1031,
          100,  1006,  1037,  1009,  1038,  1009,  1050,  1007,  1033,  1012,
         2004,  1050,  2003, 13433, 24077,  5500,  1010,  1996,  3670,  1999,
         1996, 21605,  2003,  1996,  2034, 19262,  2617,  1997, 12936, 13433,
        24077,  4353,  1010,  2029,  1597,  1015,  1041,  2003,  2445,  2004,
         1041,  1006,  1037,  1009,  1050,  1007,  1027,  1037,  1015,  2546,
         2487,  1031,  1037,  1010,  1037,  1009,  1015,  1025,  1033,  1010,
         2073,  1037,  1027,  1037,  1009,  1038,  1010,  1998,  1015,  2546,
         2487,  1031,  1037,  1010,  1037,  1009,   102])"
3067,1,"['hypergeometric', 'function', 'hypergeometric function']", CONDITIONAL EXPECTATIONS,seg_585,1;  ] is the confluent hypergeometric function.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([18462, 10908])","tensor([  101,  1015,  1025,  1033,  2003,  1996,  9530, 10258, 24997,  2102,
        23760,  3351, 28993,  3853,  1012,   102])"
3068,1,['dependent'], CONDITIONAL EXPECTATIONS,seg_585,"as the numerator and the denominator are dependent, we use the following formula:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2004,  1996, 16371,  5017,  8844,  1998,  1996,  7939, 20936,
        27413,  2024,  7790,  1010,  2057,  2224,  1996,  2206,  5675,  1024,
          102])"
3069,1,['mean'], CONDITIONAL EXPECTATIONS,seg_585,"where  x and  y denote the mean of x and y, respectively. here,  x = e[b] = b,  y = e(a + b + n) = (a + b +  ∕2),cov(x,y) = 0,var(x) = 0,var(y) = var(a + b + n) = var(n) (using section 5, p. 354) =  ∕2. hence equation (8.21) becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2073,  1060,  1998,  1061, 19090,  1996,  2812,  1997,  1060,
         1998,  1061,  1010,  4414,  1012,  2182,  1010,  1060,  1027,  1041,
         1031,  1038,  1033,  1027,  1038,  1010,  1061,  1027,  1041,  1006,
         1037,  1009,  1038,  1009,  1050,  1007,  1027,  1006,  1037,  1009,
         1038,  1009,   100,  1007,  1010,  2522,  2615,  1006,  1060,  1010,
         1061,  1007,  1027,  1014,  1010, 13075,  1006,  1060,  1007,  1027,
         1014,  1010, 13075,  1006,  1061,  1007,  1027, 13075,  1006,  1037,
         1009,  1038,  1009,  1050,  1007,  1027, 13075,  1006,  1050,  1007,
         1006,  2478,  2930,  1019,  1010,  1052,  1012, 27878,  1007,  1027,
          100,  1012,  6516,  8522,  1006,  1022,  1012,  2538,  1007,  4150,
          102])"
3070,1,"['mean', 'table']", CONDITIONAL EXPECTATIONS,seg_585,"2 . some approximations are given in table 8.3, where the actual mean is an infinite sum as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  1016,  1012,  2070, 20167,  2015,  2024,  2445,  1999,  2795,
         1022,  1012,  1017,  1010,  2073,  1996,  5025,  2812,  2003,  2019,
        10709,  7680,  2004,   102])"
3071,1,"['parameter', 'representations', 'noncentrality parameter', 'noncentrality', 'moments', 'results']", CONDITIONAL EXPECTATIONS,seg_585,"the difference between actual and approximate values are given in the last column. the results are quite good for increasing noncentrality parameter ( ) values. the biggest advantage of equation (8.22) is that it takes only 10 arithmetic operations (including the computation of c once), whereas equation (8.23) takes a large number of operations when is large. see reference 282 for integral representations of moments.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([18462, 10908])","tensor([  101,  1996,  4489,  2090,  5025,  1998, 15796,  5300,  2024,  2445,
         1999,  1996,  2197,  5930,  1012,  1996,  3463,  2024,  3243,  2204,
         2005,  4852,  2512, 13013,  7941,  3012, 16381,  1006,  1007,  5300,
         1012,  1996,  5221,  5056,  1997,  8522,  1006,  1022,  1012,  2570,
         1007,  2003,  2008,  2009,  3138,  2069,  2184, 20204,  3136,  1006,
         2164,  1996, 22334,  1997,  1039,  2320,  1007,  1010,  6168,  8522,
         1006,  1022,  1012,  2603,  1007,  3138,  1037,  2312,  2193,  1997,
         3136,  2043,  2003,  2312,  1012,  2156,  4431, 26267,  2005,  9897,
        15066,  1997,  5312,  1012,   102])"
3072,1,"['mean', 'noncentral', 'distribution']", CONDITIONAL EXPECTATIONS,seg_585,example 8.30 mean of noncentral  2 distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 1., 0.])","tensor([18462, 10908])","tensor([  101,  2742,  1022,  1012,  2382,  2812,  1997,  2512, 13013,  7941,
         1016,  4353,   102])"
3073,1,"['mean', 'conditional expectation', 'expectation', 'distribution', 'conditional', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,find the mean of noncentral chi-square distribution using conditional expectation.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 1., 0., 1., 1., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2424,  1996,  2812,  1997,  2512, 13013,  7941,  9610,  1011,
         2675,  4353,  2478, 18462, 17626,  1012,   102])"
3074,1,"['parameter', 'poisson', 'distribution', 'poisson distribution', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,"solution 8.30 let y be distributed as noncentral chi-square. as this is a poisson weighted central chi-square distribution we write y ∼ 2 n+2n , where n has poisson distribution with parameter ∕2. from this we get e(n) = ∕2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  5576,  1022,  1012,  2382,  2292,  1061,  2022,  5500,  2004,
         2512, 13013,  7941,  9610,  1011,  2675,  1012,  2004,  2023,  2003,
         1037, 13433, 24077, 18215,  2430,  9610,  1011,  2675,  4353,  2057,
         4339,  1061,   100,  1016,  1050,  1009,  1016,  2078,  1010,  2073,
         1050,  2038, 13433, 24077,  4353,  2007, 16381,   100,  1012,  2013,
         2023,  2057,  2131,  1041,  1006,  1050,  1007,  1027,   100,  1012,
          102])"
3075,1,"['mean', 'noncentral f', 'distribution', 'f distribution', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,example 8.31 mean of noncentral f distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0.])","tensor([18462, 10908])","tensor([  101,  2742,  1022,  1012,  2861,  2812,  1997,  2512, 13013,  7941,
         1042,  4353,   102])"
3076,1,"['mean', 'noncentral f', 'distribution', 'f distribution', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,find the mean of noncentral f distribution.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([18462, 10908])","tensor([  101,  2424,  1996,  2812,  1997,  2512, 13013,  7941,  1042,  4353,
         1012,   102])"
3077,1,"['noncentral f', 'distribution', 'f distribution', 'noncentral', 'independent']", CONDITIONAL EXPECTATIONS,seg_585,"solution 8.31 the noncentral f distribution is the distribution of the scaled ratio of a noncentral 2( ) over an independent central 2 distribution. symbolically f(p, q, ) = (q∕p) 2 p+2n∕ q2, where p and q are the dof of numerator and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  5576,  1022,  1012,  2861,  1996,  2512, 13013,  7941,  1042,
         4353,  2003,  1996,  4353,  1997,  1996, 18953,  6463,  1997,  1037,
         2512, 13013,  7941,  1016,  1006,  1007,  2058,  2019,  2981,  2430,
         1016,  4353,  1012, 12613,  3973,  1042,  1006,  1052,  1010,  1053,
         1010,  1007,  1027,  1006,   100,  1007,  1016,  1052,  1009,   100,
         1053,  2475,  1010,  2073,  1052,  1998,  1053,  2024,  1996,  2079,
         2546,  1997, 16371,  5017,  8844,  1998,   102])"
3078,1,"['parameter', 'noncentrality parameter', 'noncentrality']", CONDITIONAL EXPECTATIONS,seg_585,"denominator  2, and   is the noncentrality parameter.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([18462, 10908])","tensor([  101,  7939, 20936, 27413,  1016,  1010,  1998,  2003,  1996,  2512,
        13013,  7941,  3012, 16381,  1012,   102])"
3079,1,"['noncentral f', 'moments', 'distribution', 'f distribution', 'conditional', 'noncentral']", CONDITIONAL EXPECTATIONS,seg_585,"(p + 2n) 2p + 2n∕(p+2n) this may be written as z f(p, q,  ) ∼ . conditional on n, the p 2q∕q noncentral f distribution is a multiple of central f distribution [129, 283]. we write this as f(p, q,  ) ∼ p + 2n fp+2n,q. the moments follow by the same argument as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([  101,  1006,  1052,  1009,  1016,  2078,  1007,  1016,  2361,  1009,
          100,  1006,  1052,  1009,  1016,  2078,  1007,  2023,  2089,  2022,
         2517,  2004,  1062,  1042,  1006,  1052,  1010,  1053,  1010,  1007,
          100,  1012, 18462,  2006,  1050,  1010,  1996,  1052,   100,  2512,
        13013,  7941,  1042,  4353,  2003,  1037,  3674,  1997,  2430,  1042,
         4353,  1031, 14378,  1010, 25504,  1033,  1012,  2057,  4339,  2023,
         2004,  1042,  1006,  1052,  1010,  1053,  1010,  1007,   100,  1052,
         1009,  1016,  2078,  1042,  2361,  1009,  1016,  2078,  1010,  1053,
         1012,  1996,  5312,  3582,  2011,  1996,  2168,  6685,  2004,   102])"
3080,1,['mean'], CONDITIONAL EXPECTATIONS,seg_585,"where we have used the fact that the mean of central f(p, q) is q∕(q − 2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 10908])","tensor([ 101, 2073, 2057, 2031, 2109, 1996, 2755, 2008, 1996, 2812, 1997, 2430,
        1042, 1006, 1052, 1010, 1053, 1007, 2003,  100, 1006, 1053, 1597, 1016,
        1007, 1012,  102])"
3081,1,"['variance', 'table', 'random variable', 'random', 'results', 'random variables', 'expectation', 'conditional variance', 'variables', 'conditional', 'variable', 'independent']", Conditional Variances,seg_587,"the variance of a random variable, conditionally on another variable or on the count of iid (independent identically distributed) random variables occur in several applications. the conditional variance of y for a given x is var(y|x) = e{[y − e(y|x)]2|x}. expanding the quadratic and taking term by term expectation results in var(y|x) = e(y2|x) − [e(y|x)]2 (see table 8.4).",tensor(1),"tensor([0., 0., 1., 0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0.])","tensor([18462, 23284,  2015])","tensor([  101,  1996, 23284,  1997,  1037,  6721,  8023,  1010, 18462,  2135,
         2006,  2178,  8023,  2030,  2006,  1996,  4175,  1997,  2462,  2094,
         1006,  2981,  7235,  2135,  5500,  1007,  6721, 10857,  5258,  1999,
         2195,  5097,  1012,  1996, 18462, 23284,  1997,  1061,  2005,  1037,
         2445,  1060,  2003, 13075,  1006,  1061,  1064,  1060,  1007,  1027,
         1041,  1063,  1031,  1061,  1597,  1041,  1006,  1061,  1064,  1060,
         1007,  1033,  1016,  1064,  1060,  1065,  1012,  9186,  1996, 17718,
        23671,  1998,  2635,  2744,  2011,  2744, 17626,  3463,  1999, 13075,
         1006,  1061,  1064,  1060,  1007,  1027,  1041,  1006,  1061,  2475,
         1064,  1060,  1007,  1597,  1031,  1041,  1006,  1061,  1064,  1060,
         1007,  1033,  1016,  1006,  2156,  2795,  1022,  1012,  1018,  1007,
         1012,   102])"
3082,1,"['expectations', 'random variable', 'random', 'random variables', 'variables', 'variable']", Conditional Variances,seg_587,"theorem 8.18 let n be an integer valued random variable that takes values ≥ 1. let x1,x2, … xn be n iid random variables. define sn = x1 + x2 + · · · + xn . then (i) e(s) = e(x)e(n), provided the expectations exist, (ii) psn (t) = pn(px(t)), and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 23284,  2015])","tensor([  101,  9872,  1022,  1012,  2324,  2292,  1050,  2022,  2019, 16109,
        11126,  6721,  8023,  2008,  3138,  5300,  1609,  1015,  1012,  2292,
         1060,  2487,  1010,  1060,  2475,  1010,  1529,  1060,  2078,  2022,
         1050,  2462,  2094,  6721, 10857,  1012,  9375,  1055,  2078,  1027,
         1060,  2487,  1009,  1060,  2475,  1009,  1087,  1087,  1087,  1009,
         1060,  2078,  1012,  2059,  1006,  1045,  1007,  1041,  1006,  1055,
         1007,  1027,  1041,  1006,  1060,  1007,  1041,  1006,  1050,  1007,
         1010,  3024,  1996, 10908,  4839,  1010,  1006,  2462,  1007,  8827,
         2078,  1006,  1056,  1007,  1027,  1052,  2078,  1006,  1052,  2595,
         1006,  1056,  1007,  1007,  1010,  1998,   102])"
3083,1,['independence'], Conditional Variances,seg_587,msn (t) = mn(kx(t)) = (kx(t))n due to independence.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([18462, 23284,  2015])","tensor([  101,  5796,  2078,  1006,  1056,  1007,  1027, 24098,  1006,  1047,
         2595,  1006,  1056,  1007,  1007,  1027,  1006,  1047,  2595,  1006,
         1056,  1007,  1007,  1050,  2349,  2000,  4336,  1012,   102])"
3084,1,"['vary', 'expectation', 'range']", Conditional Variances,seg_587,"proof: assume that n is fixed. then e(s) = e(x1 + x2 + · · · + xn) = e(x1) + e(x2) + · · · + e(xn). as each of the xi’s are iid, the above becomes e(s) = ne(x). now allow n to vary in its range and take the expectation of both sides to get e(s) = e(n)e(x) (because e(e(s)) = e(s) and e(e(x)) = e(x)).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 23284,  2015])","tensor([  101,  6947,  1024,  7868,  2008,  1050,  2003,  4964,  1012,  2059,
         1041,  1006,  1055,  1007,  1027,  1041,  1006,  1060,  2487,  1009,
         1060,  2475,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  1007,
         1027,  1041,  1006,  1060,  2487,  1007,  1009,  1041,  1006,  1060,
         2475,  1007,  1009,  1087,  1087,  1087,  1009,  1041,  1006,  1060,
         2078,  1007,  1012,  2004,  2169,  1997,  1996,  8418,  1521,  1055,
         2024,  2462,  2094,  1010,  1996,  2682,  4150,  1041,  1006,  1055,
         1007,  1027, 11265,  1006,  1060,  1007,  1012,  2085,  3499,  1050,
         2000,  8137,  1999,  2049,  2846,  1998,  2202,  1996, 17626,  1997,
         2119,  3903,  2000,  2131,  1041,  1006,  1055,  1007,  1027,  1041,
         1006,  1050,  1007,  1041,  1006,  1060,  1007,  1006,  2138,  1041,
         1006,  1041,  1006,  1055,  1007,  1007,  1027,  1041,  1006,  1055,
         1007,  1998,  1041,  1006,  1041,  1006,  1060,  1007,  1007,  1027,
         1041,  1006,  1060,  1007,  1007,  1012,   102])"
3085,1,['expectation'], Conditional Variances,seg_587,"e(tx)n = [px(t)]n . taking expectation of both sides, we get the desired result. next consider msn (t) = e(etsn ) = e(et[x1+x2+···+xn ]) = mx1 (t) ∗ mx2 (t) ∗ · · · ∗",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 23284,  2015])","tensor([  101,  1041,  1006, 19067,  1007,  1050,  1027,  1031,  1052,  2595,
         1006,  1056,  1007,  1033,  1050,  1012,  2635, 17626,  1997,  2119,
         3903,  1010,  2057,  2131,  1996,  9059,  2765,  1012,  2279,  5136,
         5796,  2078,  1006,  1056,  1007,  1027,  1041,  1006,  3802,  2015,
         2078,  1007,  1027,  1041,  1006,  3802,  1031,  1060,  2487,  1009,
         1060,  2475,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  1033,
         1007,  1027, 25630,  2487,  1006,  1056,  1007,  1598, 25630,  2475,
         1006,  1056,  1007,  1598,  1087,  1087,  1087,  1598,   102])"
3086,1,['vary'], Conditional Variances,seg_587,"mxn (t) = [mx(t)]n . taking log of both sides, we get ksn (t) = log (msn (t)) = n ∗ log (mx(t)) = nkx(t). now allow n to vary to get the result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([18462, 23284,  2015])","tensor([  101, 25630,  2078,  1006,  1056,  1007,  1027,  1031, 25630,  1006,
         1056,  1007,  1033,  1050,  1012,  2635,  8833,  1997,  2119,  3903,
         1010,  2057,  2131, 29535,  2078,  1006,  1056,  1007,  1027,  8833,
         1006,  5796,  2078,  1006,  1056,  1007,  1007,  1027,  1050,  1598,
         8833,  1006, 25630,  1006,  1056,  1007,  1007,  1027, 25930,  2595,
         1006,  1056,  1007,  1012,  2085,  3499,  1050,  2000,  8137,  2000,
         2131,  1996,  2765,  1012,   102])"
3087,1,"['variance', 'variances', 'conditional variances', 'conditional']", Law of Conditional Variances,seg_589,"theorem 8.19 the unconditional variance can be expressed in terms of conditional variances as v(x) = e[v(x|y)] + v[e[x|y]] where v(x) = variance(x), assuming that the variances exist.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  9872,  1022,  1012,  2539,  1996,  4895,  8663, 27064, 23284,
         2064,  2022,  5228,  1999,  3408,  1997, 18462, 23284,  2015,  2004,
         1058,  1006,  1060,  1007,  1027,  1041,  1031,  1058,  1006,  1060,
         1064,  1061,  1007,  1033,  1009,  1058,  1031,  1041,  1031,  1060,
         1064,  1061,  1033,  1033,  2073,  1058,  1006,  1060,  1007,  1027,
        23284,  1006,  1060,  1007,  1010, 10262,  2008,  1996, 23284,  2015,
         4839,  1012,   102])"
3088,1,['expectation'], Law of Conditional Variances,seg_589,"proof: subtract and add e[x|y], and write x − e[x] = (x − e[x|y]) + (e[x|y] − e[x]). square both sides and take expectation of each term to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  6947,  1024,  4942,  6494,  6593,  1998,  5587,  1041,  1031,
         1060,  1064,  1061,  1033,  1010,  1998,  4339,  1060,  1597,  1041,
         1031,  1060,  1033,  1027,  1006,  1060,  1597,  1041,  1031,  1060,
         1064,  1061,  1033,  1007,  1009,  1006,  1041,  1031,  1060,  1064,
         1061,  1033,  1597,  1041,  1031,  1060,  1033,  1007,  1012,  2675,
         2119,  3903,  1998,  2202, 17626,  1997,  2169,  2744,  2000,  2131,
          102])"
3089,1,"['mean', 'deviation', 'expectation']", Law of Conditional Variances,seg_589,"as e(e[x|y]) = e(x), the last term (3) is zero. substitute e(x) = e(e[x|y]) in the second term e(e[x ∣ y] − e[x])2 to get (2) = e(e[x ∣ y] − e(e[x|y]))2. as this is the expectation of the squared deviation of e[x ∣ y] from its mean, it is var(e[x|y]). symbolically, (2) = var(e[x|y]).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  2004,  1041,  1006,  1041,  1031,  1060,  1064,  1061,  1033,
         1007,  1027,  1041,  1006,  1060,  1007,  1010,  1996,  2197,  2744,
         1006,  1017,  1007,  2003,  5717,  1012,  7681,  1041,  1006,  1060,
         1007,  1027,  1041,  1006,  1041,  1031,  1060,  1064,  1061,  1033,
         1007,  1999,  1996,  2117,  2744,  1041,  1006,  1041,  1031,  1060,
          100,  1061,  1033,  1597,  1041,  1031,  1060,  1033,  1007,  1016,
         2000,  2131,  1006,  1016,  1007,  1027,  1041,  1006,  1041,  1031,
         1060,   100,  1061,  1033,  1597,  1041,  1006,  1041,  1031,  1060,
         1064,  1061,  1033,  1007,  1007,  1016,  1012,  2004,  2023,  2003,
         1996, 17626,  1997,  1996, 19942, 24353,  1997,  1041,  1031,  1060,
          100,  1061,  1033,  2013,  2049,  2812,  1010,  2009,  2003, 13075,
         1006,  1041,  1031,  1060,  1064,  1061,  1033,  1007,  1012, 12613,
         3973,  1010,  1006,  1016,  1007,  1027, 13075,  1006,  1041,  1031,
         1060,  1064,  1061,  1033,  1007,  1012,   102])"
3090,1,"['expected value', 'expectation']", Law of Conditional Variances,seg_589,"using the law of total expectation we have v(x|y) = e[x2|y] − e[x|y]2. take expectation of both sides to get e[v(x|y)] = e{e[x2|y]} − e{e[x|y]2}. write the first term e(x − e[x ∣ y])2 in equation (8.25) as e{e(x − e[x ∣ y])2|y}. expand the quadratic and take term by term expectation to get e{e[x2|y]} − 2e{e(x)e[x|y]} + e{e[x|y]2}. substitute e(x) = e(e[x|y]) in the second term, and cancel out the third term. this reduces to e{e[x2|y]} − e{e[x|y]2} showing that it is the expected value of v[x|y]. symbolically, (1) = e[v(x|y)]. substitute for (1) and (2) in equation (8.25) to get the result.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  2478,  1996,  2375,  1997,  2561, 17626,  2057,  2031,  1058,
         1006,  1060,  1064,  1061,  1007,  1027,  1041,  1031,  1060,  2475,
         1064,  1061,  1033,  1597,  1041,  1031,  1060,  1064,  1061,  1033,
         1016,  1012,  2202, 17626,  1997,  2119,  3903,  2000,  2131,  1041,
         1031,  1058,  1006,  1060,  1064,  1061,  1007,  1033,  1027,  1041,
         1063,  1041,  1031,  1060,  2475,  1064,  1061,  1033,  1065,  1597,
         1041,  1063,  1041,  1031,  1060,  1064,  1061,  1033,  1016,  1065,
         1012,  4339,  1996,  2034,  2744,  1041,  1006,  1060,  1597,  1041,
         1031,  1060,   100,  1061,  1033,  1007,  1016,  1999,  8522,  1006,
         1022,  1012,  2423,  1007,  2004,  1041,  1063,  1041,  1006,  1060,
         1597,  1041,  1031,  1060,   100,  1061,  1033,  1007,  1016,  1064,
         1061,  1065,  1012,  7818,  1996, 17718, 23671,  1998,  2202,  2744,
         2011,  2744, 17626,  2000,  2131,  1041,  1063,  1041,  1031,  1060,
         2475,  1064,  1061,  1033,  1065,  1597,  1016,  2063,  1063,  1041,
         1006,  1060,  1007,  1041,  1031,  1060,  1064,  1061,  1033,  1065,
         1009,  1041,  1063,  1041,  1031,  1060,  1064,  1061,  1033,  1016,
         1065,  1012,  7681,  1041,  1006,  1060,  1007,  1027,  1041,  1006,
         1041,  1031,  1060,  1064,  1061,  1033,  1007,  1999,  1996,  2117,
         2744,  1010,  1998, 17542,  2041,  1996,  2353,  2744,  1012,  2023,
        13416,  2000,  1041,  1063,  1041,  1031,  1060,  2475,  1064,  1061,
         1033,  1065,  1597,  1041,  1063,  1041,  1031,  1060,  1064,  1061,
         1033,  1016,  1065,  4760,  2008,  2009,  2003,  1996,  3517,  3643,
         1997,  1058,  1031,  1060,  1064,  1061,  1033,  1012, 12613,  3973,
         1010,  1006,  1015,  1007,  1027,  1041,  1031,  1058,  1006,  1060,
         1064,  1061,  1007,  1033,  1012,  7681,  2005,  1006,  1015,  1007,
         1998,  1006,  1016,  1007,  1999,  8522,  1006,  1022,  1012,  2423,
         1007,  2000,  2131,  1996,  2765,  1012,   102])"
3091,1,"['variance', 'noncentral']", Law of Conditional Variances,seg_589,example 8.32 variance of noncentral chi-square,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  2742,  1022,  1012,  3590, 23284,  1997,  2512, 13013,  7941,
         9610,  1011,  2675,   102])"
3092,1,"['variance', 'distribution', 'conditional', 'noncentral']", Law of Conditional Variances,seg_589,find the variance of noncentral chi-square distribution using conditional expectation.,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  2424,  1996, 23284,  1997,  2512, 13013,  7941,  9610,  1011,
         2675,  4353,  2478, 18462, 17626,  1012,   102])"
3093,1,"['linear combination', 'linear', 'distributions', 'poisson', 'combination', 'independent', 'distribution', 'conditional', 'noncentral']", Law of Conditional Variances,seg_589,"solution 8.32 we know that the noncentral chi-square distribution is a poisson weighted linear combination of independent central chi-square distributions. this allows us to write it as y ∼ x + 2n, where conditional on n, x is a central chi-square distribution. for convenience let the dof of central chi-square be denoted by p and n has pois( /2). then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        1., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  5576,  1022,  1012,  3590,  2057,  2113,  2008,  1996,  2512,
        13013,  7941,  9610,  1011,  2675,  4353,  2003,  1037, 13433, 24077,
        18215,  7399,  5257,  1997,  2981,  2430,  9610,  1011,  2675, 20611,
         1012,  2023,  4473,  2149,  2000,  4339,  2009,  2004,  1061,   100,
         1060,  1009,  1016,  2078,  1010,  2073, 18462,  2006,  1050,  1010,
         1060,  2003,  1037,  2430,  9610,  1011,  2675,  4353,  1012,  2005,
        15106,  2292,  1996,  2079,  2546,  1997,  2430,  9610,  1011,  2675,
         2022, 19537,  2011,  1052,  1998,  1050,  2038, 13433,  2483,  1006,
         1013,  1016,  1007,  1012,  2059,   102])"
3094,1,"['poisson', 'poisson distribution', 'table', 'distribution']", Law of Conditional Variances,seg_589,"where we have used the facts that v(c + b ∗ x) = b2v(x) and e(x) = v(x) =   for a poisson distribution [7, 283] (table 8.4).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 2375,  1997, 18462, 23284,  2015])","tensor([  101,  2073,  2057,  2031,  2109,  1996,  8866,  2008,  1058,  1006,
         1039,  1009,  1038,  1598,  1060,  1007,  1027,  1038,  2475,  2615,
         1006,  1060,  1007,  1998,  1041,  1006,  1060,  1007,  1027,  1058,
         1006,  1060,  1007,  1027,  2005,  1037, 13433, 24077,  4353,  1031,
         1021,  1010, 25504,  1033,  1006,  2795,  1022,  1012,  1018,  1007,
         1012,   102])"
3095,1,"['moments', 'case']", INVERSE MOMENTS,seg_591,the definition of ordinary moments can be extended to the case where the order is a negative integer as follows:,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([19262,  5312])","tensor([  101,  1996,  6210,  1997,  6623,  5312,  2064,  2022,  3668,  2000,
         1996,  2553,  2073,  1996,  2344,  2003,  1037,  4997, 16109,  2004,
         4076,  1024,   102])"
3096,1,"['continuous', 'discrete']", INVERSE MOMENTS,seg_591,∞ ⎧⎪ ∑ xj −kpj if x is discrete; ⎪⎨j=−∞ e(1∕xk) = ∞ ⎪ x−kf (x)dx if x is continuous. ⎪⎩∫−∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0.])","tensor([19262,  5312])","tensor([  101,  1601,   100,   100,  1060,  3501,  1597,  2243,  2361,  3501,
         2065,  1060,  2003, 16246,  1025,   100,  1027,  1597, 30128,  1041,
         1006,   100,  1007,  1027,  1601,   100,  1060, 22543,  2243,  2546,
         1006,  1060,  1007,  1040,  2595,  2065,  1060,  2003,  7142,  1012,
          100,   102])"
3097,1,"['moment', 'gamma', 'distributions', 'poisson', 'moments', 'weibull', 'condition', 'distribution', 'poisson distribution']", INVERSE MOMENTS,seg_591,"a necessary condition for the existence of the first inverse moment is that f (0) = 0. for instance, the poisson distribution has p(x = 0) = e−  0∕0! = e− , which is nonzero ∀ . hence the first inverse moment does not exist. however, there are a large number of distributions that satisfy the necessary condition. examples are chi-square (and gamma), snedecor’s f, beta, and weibull distributions. the exponent k is an integer in most of the applications of inverse moments. however, inverse moments could also be defined for fractional k (called fractional inverse moments).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([19262,  5312])","tensor([  101,  1037,  4072,  4650,  2005,  1996,  4598,  1997,  1996,  2034,
        19262,  2617,  2003,  2008,  1042,  1006,  1014,  1007,  1027,  1014,
         1012,  2005,  6013,  1010,  1996, 13433, 24077,  4353,  2038,  1052,
         1006,  1060,  1027,  1014,  1007,  1027,  1041, 22543,   100,   999,
         1027,  1041, 22543,  1010,  2029,  2003,  2512,  6290,  2080,   100,
         1012,  6516,  1996,  2034, 19262,  2617,  2515,  2025,  4839,  1012,
         2174,  1010,  2045,  2024,  1037,  2312,  2193,  1997, 20611,  2008,
        13225,  1996,  4072,  4650,  1012,  4973,  2024,  9610,  1011,  2675,
         1006,  1998, 13091,  1007,  1010,  1055,  7228,  8586,  2953,  1521,
         1055,  1042,  1010,  8247,  1010,  1998, 11417,  8569,  3363, 20611,
         1012,  1996, 16258, 21576,  1047,  2003,  2019, 16109,  1999,  2087,
         1997,  1996,  5097,  1997, 19262,  5312,  1012,  2174,  1010, 19262,
         5312,  2071,  2036,  2022,  4225,  2005, 12884,  2389,  1047,  1006,
         2170, 12884,  2389, 19262,  5312,  1007,  1012,   102])"
3098,1,"['moment', 'distribution']", INVERSE MOMENTS,seg_591,example 8.33 inverse moment of central  2 distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])","tensor([19262,  5312])","tensor([  101,  2742,  1022,  1012,  3943, 19262,  2617,  1997,  2430,  1016,
         4353,   102])"
3099,1,"['moment', 'distribution']", INVERSE MOMENTS,seg_591,find first inverse moment of central  2 distribution.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.])","tensor([19262,  5312])","tensor([  101,  2424,  2034, 19262,  2617,  1997,  2430,  1016,  4353,  1012,
          102])"
3100,1,"['tail', 'moment', 'range', 'random variable', 'moments', 'random', 'summation', 'variable']", INCOMPLETE MOMENTS,seg_593,ordinary and central moments discussed above are defined for the entire range of the random variable x. there are several applications when the summation or integration is carried out partially over the range of x. the omitted range can either be in the left tail or in the right tail. we define the first incomplete moment as ei(x) = ∑x,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([12958,  5312])","tensor([  101,  6623,  1998,  2430,  5312,  6936,  2682,  2024,  4225,  2005,
         1996,  2972,  2846,  1997,  1996,  6721,  8023,  1060,  1012,  2045,
         2024,  2195,  5097,  2043,  1996,  7680, 28649,  2030,  8346,  2003,
         3344,  2041,  6822,  2058,  1996,  2846,  1997,  1060,  1012,  1996,
        16647,  2846,  2064,  2593,  2022,  1999,  1996,  2187,  5725,  2030,
         1999,  1996,  2157,  5725,  1012,  2057,  9375,  1996,  2034, 12958,
         2617,  2004,  1041,  2072,  1006,  1060,  1007,  1027,   100,   102])"
3101,1,"['random', 'random variables', 'expected values', 'variables']", DISTANCES AS EXPECTED VALUES,seg_595,"statistical distances can be expressed as expected values. consider two real-valued random variables x and y. the k-norm distance between them is dk(x,y) = ‖x − y||k = [e(|y − x|k)]1∕k. this is also called the k-metric. it satisfies the following properties:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([12103,  2004,  3517,  5300])","tensor([  101,  7778, 12103,  2064,  2022,  5228,  2004,  3517,  5300,  1012,
         5136,  2048,  2613,  1011, 11126,  6721, 10857,  1060,  1998,  1061,
         1012,  1996,  1047,  1011, 13373,  3292,  2090,  2068,  2003,  1040,
         2243,  1006,  1060,  1010,  1061,  1007,  1027,  1519,  1060,  1597,
         1061,  1064,  1064,  1047,  1027,  1031,  1041,  1006,  1064,  1061,
         1597,  1060,  1064,  1047,  1007,  1033,   100,  1012,  2023,  2003,
         2036,  2170,  1996,  1047,  1011, 12046,  1012,  2009,  2938,  2483,
        14213,  1996,  2206,  5144,  1024,   102])"
3102,1,['inequality'], DISTANCES AS EXPECTED VALUES,seg_595,"(i) dk(x,y) ≥ 0, (ii) dk(x,y) = 0 iff x = y , (iii) dk(x,y) + dk(y ,z) ≥ dk(x,z) (triangle inequality).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([12103,  2004,  3517,  5300])","tensor([  101,  1006,  1045,  1007,  1040,  2243,  1006,  1060,  1010,  1061,
         1007,  1609,  1014,  1010,  1006,  2462,  1007,  1040,  2243,  1006,
         1060,  1010,  1061,  1007,  1027,  1014,  2065,  2546,  1060,  1027,
         1061,  1010,  1006,  3523,  1007,  1040,  2243,  1006,  1060,  1010,
         1061,  1007,  1009,  1040,  2243,  1006,  1061,  1010,  1062,  1007,
         1609,  1040,  2243,  1006,  1060,  1010,  1062,  1007,  1006,  9546,
        16440,  1007,  1012,   102])"
3103,1,"['dissimilarity metrics', 'expectations', 'sample', 'random', 'results', 'random variables', 'variables']", DISTANCES AS EXPECTED VALUES,seg_595,"particular values of k give various distances such as euclidean metric, manhattan metric, and so on [22]. the sample analogs of these distances are used in cluster analysis as dissimilarity metrics. the above definition can be extended from scalar random variables to vectors and matrices. for instance, if x is an m × n matrix of real-valued random variables, where xij denotes the (i, j)th entry, we define e(x) as that matrix whose (i, j) entry is e[xij], provided the individual expectations exist. using matrix commutativity, associativity, and so on with respect to addition, we could obtain the following results:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([12103,  2004,  3517,  5300])","tensor([  101,  3327,  5300,  1997,  1047,  2507,  2536, 12103,  2107,  2004,
        25826, 12046,  1010,  7128, 12046,  1010,  1998,  2061,  2006,  1031,
         2570,  1033,  1012,  1996,  7099, 11698,  2015,  1997,  2122, 12103,
         2024,  2109,  1999,  9324,  4106,  2004,  4487, 18719,  4328,  8017,
         3012, 12046,  2015,  1012,  1996,  2682,  6210,  2064,  2022,  3668,
         2013, 26743,  2099,  6721, 10857,  2000, 19019,  1998, 21520,  1012,
         2005,  6013,  1010,  2065,  1060,  2003,  2019,  1049,  1095,  1050,
         8185,  1997,  2613,  1011, 11126,  6721, 10857,  1010,  2073,  8418,
         3501, 14796,  1996,  1006,  1045,  1010,  1046,  1007, 16215,  4443,
         1010,  2057,  9375,  1041,  1006,  1060,  1007,  2004,  2008,  8185,
         3005,  1006,  1045,  1010,  1046,  1007,  4443,  2003,  1041,  1031,
         8418,  3501,  1033,  1010,  3024,  1996,  3265, 10908,  4839,  1012,
         2478,  8185,  4012, 28120, 10450, 24872,  1010,  4632, 10085,  2401,
        29068,  3012,  1010,  1998,  2061,  2006,  2007,  4847,  2000,  2804,
         1010,  2057,  2071,  6855,  1996,  2206,  3463,  1024,   102])"
3104,1,"['table', 'independent']", DISTANCES AS EXPECTED VALUES,seg_595,"(i) e(x + y) = e(x) + e(y) if x and y are compatible matrices, (ii) e(ax) = ae(x) if a is a scalar m × n matrix and x has as many rows as columns of a matrix (i.e., a is n × p), and (iii) if x and y are independent, then e(xy) = e(x)e(y) (table 8.5).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([12103,  2004,  3517,  5300])","tensor([  101,  1006,  1045,  1007,  1041,  1006,  1060,  1009,  1061,  1007,
         1027,  1041,  1006,  1060,  1007,  1009,  1041,  1006,  1061,  1007,
         2065,  1060,  1998,  1061,  2024, 11892, 21520,  1010,  1006,  2462,
         1007,  1041,  1006, 22260,  1007,  1027, 29347,  1006,  1060,  1007,
         2065,  1037,  2003,  1037, 26743,  2099,  1049,  1095,  1050,  8185,
         1998,  1060,  2038,  2004,  2116, 10281,  2004,  7753,  1997,  1037,
         8185,  1006,  1045,  1012,  1041,  1012,  1010,  1037,  2003,  1050,
         1095,  1052,  1007,  1010,  1998,  1006,  3523,  1007,  2065,  1060,
         1998,  1061,  2024,  2981,  1010,  2059,  1041,  1006,  1060,  2100,
         1007,  1027,  1041,  1006,  1060,  1007,  1041,  1006,  1061,  1007,
         1006,  2795,  1022,  1012,  1019,  1007,  1012,   102])"
3105,1,"['tail', 'function', 'random variable', 'random', 'expected value', 'variable']", Chebychev Inequality,seg_597,this is a useful result connecting the expected value of a function of a random variable and the tail area of it. let x be a random variable and g(x) be a nonnegative function of it. then the right tail area of g(x) is related to its expected value as p[g(x) ≥ c] ≤ e[g(x)]∕c.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18178,  3762, 16179, 16440])","tensor([  101,  2023,  2003,  1037,  6179,  2765,  7176,  1996,  3517,  3643,
         1997,  1037,  3853,  1997,  1037,  6721,  8023,  1998,  1996,  5725,
         2181,  1997,  2009,  1012,  2292,  1060,  2022,  1037,  6721,  8023,
         1998,  1043,  1006,  1060,  1007,  2022,  1037,  2512,  2638, 26792,
         3853,  1997,  2009,  1012,  2059,  1996,  2157,  5725,  2181,  1997,
         1043,  1006,  1060,  1007,  2003,  3141,  2000,  2049,  3517,  3643,
         2004,  1052,  1031,  1043,  1006,  1060,  1007,  1609,  1039,  1033,
         1608,  1041,  1031,  1043,  1006,  1060,  1007,  1033,   100,  1012,
          102])"
3106,1,"['continuous', 'mathematical expectation', 'average', 'table', 'random', 'conditional expectation', 'expectation', 'conditional']", SUMMARY,seg_599,"this chapter introduced the basic ideas and rules of both the mathematical expectation and conditional expectation, see table 8.5. mathematical expectation plays an important role in digital signal processing, actuarial sciences, astronomy, and many other fields. for example, the average energy (t) of a periodic or random signal in the time domain is represented for continuous signals as (t) = ∫−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.,
        0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2023,  3127,  3107,  1996,  3937,  4784,  1998,  3513,  1997,
         2119,  1996,  8045, 17626,  1998, 18462, 17626,  1010,  2156,  2795,
         1022,  1012,  1019,  1012,  8045, 17626,  3248,  2019,  2590,  2535,
         1999,  3617,  4742,  6364,  1010,  2552,  6692, 14482,  4163,  1010,
        12799,  1010,  1998,  2116,  2060,  4249,  1012,  2005,  2742,  1010,
         1996,  2779,  2943,  1006,  1056,  1007,  1997,  1037, 15861,  2030,
         6721,  4742,  1999,  1996,  2051,  5884,  2003,  3421,  2005,  7142,
         7755,  2004,  1006,  1056,  1007,  1027,   100,   102])"
3107,1,['average'], SUMMARY,seg_599,"∞ ∞ f (t)dt, from which the average power of the signal over a time period t1 to t2 is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1601,  1601,  1042,  1006,  1056,  1007, 26718,  1010,  2013,
         2029,  1996,  2779,  2373,  1997,  1996,  4742,  2058,  1037,  2051,
         2558,  1056,  2487,  2000,  1056,  2475,  2003,  2445,  2011,   102])"
3108,1,"['function', 'transform', 'fourier transform', 'frequency transforms', 'frequency']", SUMMARY,seg_599,"if f1(t) = f2(t), where f (t) represents the signal value as a time-varying function. as the spectra of periodic signals are more revealing in the frequency domain, most dsp applications use one of the frequency transforms such as fourier transform, cosine transform, wavelet transform, and so on under the assumption that ∫−",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2065, 20069,  1006,  1056,  1007,  1027,  1042,  2475,  1006,
         1056,  1007,  1010,  2073,  1042,  1006,  1056,  1007,  5836,  1996,
         4742,  3643,  2004,  1037,  2051,  1011,  9671,  3853,  1012,  2004,
         1996, 29237,  1997, 15861,  7755,  2024,  2062,  8669,  1999,  1996,
         6075,  5884,  1010,  2087, 16233,  2361,  5097,  2224,  2028,  1997,
         1996,  6075, 21743,  2107,  2004, 26899, 10938,  1010,  2522, 11493,
         2063, 10938,  1010,  4400,  7485, 10938,  1010,  1998,  2061,  2006,
         2104,  1996, 11213,  2008,   100,   102])"
3109,1,"['frequency', 'random variable', 'random', 'average', 'expected value', 'variable']", SUMMARY,seg_599,∞ ∞ |xt (t)|dt   ∞ where |xt (t)| emphasizes that it is a random variable in the time-domain. the average power in the frequency domain can then be represented by expected value,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1601,  1601,  1064,  1060,  2102,  1006,  1056,  1007,  1064,
        26718,  1601,  2073,  1064,  1060,  2102,  1006,  1056,  1007,  1064,
        20618,  2008,  2009,  2003,  1037,  6721,  8023,  1999,  1996,  2051,
         1011,  5884,  1012,  1996,  2779,  2373,  1999,  1996,  6075,  5884,
         2064,  2059,  2022,  3421,  2011,  3517,  3643,   102])"
3110,1,"['processes', 'stationary']", SUMMARY,seg_599,"∞ ∞ |xt(f )|2df . as t → ∞,e[|xt (f )|] will stabilize for stationary processes and signals, resulting in power spectral density of the signal. see references 285, 286 for further examples.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1601,  1601,  1064,  1060,  2102,  1006,  1042,  1007,  1064,
        14134,  2546,  1012,  2004,  1056,  1585,  1601,  1010,  1041,  1031,
         1064,  1060,  2102,  1006,  1042,  1007,  1064,  1033,  2097, 27790,
         2005, 17337,  6194,  1998,  7755,  1010,  4525,  1999,  2373, 17435,
         4304,  1997,  1996,  4742,  1012,  2156,  7604, 21777,  1010, 24921,
         2005,  2582,  4973,  1012,   102])"
3111,1,"['random variable', 'random', 'expected value', 'variable']", SUMMARY,seg_599,a) expected value of a random variable always exist,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1037, 1007, 3517, 3643, 1997, 1037, 6721, 8023, 2467, 4839,  102])"
3112,1,"['change of scale', 'expected value', 'transformation']", SUMMARY,seg_599,b) expected value is unchanged by a change of scale transformation,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1038,  1007,  3517,  3643,  2003, 15704,  2011,  1037,  2689,
         1997,  4094,  8651,   102])"
3113,1,"['inequality', 'chebychev inequality', 'expected values']", SUMMARY,seg_599,c) chebychev inequality can provide an upper bound on expected values,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1039,  1007, 18178,  3762, 16179, 16440,  2064,  3073,  2019,
         3356,  5391,  2006,  3517,  5300,   102])"
3114,1,"['variance', 'distribution']", SUMMARY,seg_599,"d) variance of a distribution defined in [0, 1] can be   1",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1040,  1007, 23284,  1997,  1037,  4353,  4225,  1999,  1031,
         1014,  1010,  1015,  1033,  2064,  2022,  1015,   102])"
3115,1,"['random', 'random variables', 'variables']", SUMMARY,seg_599,e) e(1∕x) ≥ 1∕e(x) for all random variables x.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1041,  1007,  1041,  1006,   100,  1007,  1609,   100,  1006,
         1060,  1007,  2005,  2035,  6721, 10857,  1060,  1012,   102])"
3116,1,"['random', 'random variables', 'variables']", SUMMARY,seg_599,f) |e[x]| ≤ √e[x2] for all random variables x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1042,  1007,  1064,  1041,  1031,  1060,  1033,  1064,  1608,
         1600,  2063,  1031,  1060,  2475,  1033,  2005,  2035,  6721, 10857,
         1060,   102])"
3117,1,"['linear', 'expectation']", SUMMARY,seg_599,h) expectation “e” is a linear and monotone operator.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1044,  1007, 17626,  1523,  1041,  1524,  2003,  1037,  7399,
         1998, 18847,  5524,  6872,  1012,   102])"
3118,1,"['sample', 'sample space']", SUMMARY,seg_599,8.2 a——assigns a value to each element of the sample space: (a) generating func-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  1016,  1037,  1517,  1517, 24022,  1037,  3643,
         2000,  2169,  5783,  1997,  1996,  7099,  2686,  1024,  1006,  1037,
         1007, 11717,  4569,  2278,  1011,   102])"
3119,1,"['random variable', 'cumulant', 'random', 'expected value', 'variable']", SUMMARY,seg_599,tion (b) random variable (c) cumulant (d) expected value.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        1., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  1006,  1038,  1007,  6721,  8023,  1006,  1039,
         1007, 13988,  7068,  3372,  1006,  1040,  1007,  3517,  3643,  1012,
          102])"
3120,1,['uniformly distributed'], SUMMARY,seg_599,"8.3 if x1,x2, … ,xn are iid, and 8.11 if x is uniformly distributed in",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  1017,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  2024,  2462,  2094,  1010,  1998,
         1022,  1012,  2340,  2065,  1060,  2003, 27423,  5500,  1999,   102])"
3121,1,['expected value'], SUMMARY,seg_599,"y = ∑ixi prove that my (t) = [a, b] find the expected value of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1061, 1027,  100, 6011, 2008, 2026, 1006, 1056, 1007, 1027, 1031,
        1037, 1010, 1038, 1033, 2424, 1996, 3517, 3643, 1997,  102])"
3122,1,['discrete'], SUMMARY,seg_599,"8.4 if p(x= 0) = q2, p(x= 1) = 2pq, p 8.12 if x is a nonnegative discrete ran-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  1018,  2065,  1052,  1006,  1060,  1027,  1014,
         1007,  1027,  1053,  2475,  1010,  1052,  1006,  1060,  1027,  1015,
         1007,  1027,  1016,  2361,  4160,  1010,  1052,  1022,  1012,  2260,
         2065,  1060,  2003,  1037,  2512,  2638, 26792, 16246,  2743,  1011,
          102])"
3123,1,['variable'], SUMMARY,seg_599,"(x= 2) = p2, find the cdf and dom variable, prove that e(x2) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  1060,  1027,  1016,  1007,  1027,  1052,  2475,  1010,
         2424,  1996,  3729,  2546,  1998, 14383,  8023,  1010,  6011,  2008,
         1041,  1006,  1060,  2475,  1007,  1027,   102])"
3124,1,['expectation'], SUMMARY,seg_599,"bell-shaped curves?. 1∕e[x], if each expectation exists.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4330,  1011,  5044, 10543,  1029,  1012,   100,  1031,  1060,
         1033,  1010,  2065,  2169, 17626,  6526,  1012,   102])"
3125,1,"['moments', 'expected value']", SUMMARY,seg_599,"tor fluctuates according to arcsin that c = a∕ba. find the cdf and law. find the expected value of the power = r ∗ i2, where r is the mgf, and obtain the first two moments where x   0. resistance (given).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 17153, 19857,  6593, 20598,  2015,  2429,  2000, 29137,  2378,
         2008,  1039,  1027,   100,  1012,  2424,  1996,  3729,  2546,  1998,
         2375,  1012,  2424,  1996,  3517,  3643,  1997,  1996,  2373,  1027,
         1054,  1598,  1045,  2475,  1010,  2073,  1054,  2003,  1996, 11460,
         2546,  1010,  1998,  6855,  1996,  2034,  2048,  5312,  2073,  1060,
         1014,  1012,  5012,  1006,  2445,  1007,  1012,   102])"
3126,1,"['random', 'discrete']", SUMMARY,seg_599,8.16 consider a discrete random vari8.7 prove that c = e(x) minimizes the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  2385,  5136,  1037, 16246,  6721, 13075,  2072,
         2620,  1012,  1021,  6011,  2008,  1039,  1027,  1041,  1006,  1060,
         1007, 18478,  2015,  1996,   102])"
3127,0,[], SUMMARY,seg_599,"expression e(x − c)2 able p(x = k) = 4∕( 2k2) for k = 1, 2, … . verify whether the 8.8 prove that c = median(x) miniexpected value exists.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  3670,  1041,  1006,  1060,  1597,  1039,  1007,  1016,  2583,
         1052,  1006,  1060,  1027,  1047,  1007,  1027,   100,  1006,  1016,
         2243,  2475,  1007,  2005,  1047,  1027,  1015,  1010,  1016,  1010,
         1529,  1012, 20410,  3251,  1996,  1022,  1012,  1022,  6011,  2008,
         1039,  1027,  3991,  1006,  1060,  1007,  7163, 10288,  5051, 10985,
         3643,  6526,  1012,   102])"
3128,1,['cumulants'], SUMMARY,seg_599,"mizes the expression e|x − c|. 8.17 if x ∼ beta(a, b), where a   b, 8.9 show that all cumulants except the find e[[x(1 − x)]k]",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2771, 11254,  1996,  3670,  1041,  1064,  1060,  1597,  1039,
         1064,  1012,  1022,  1012,  2459,  2065,  1060,   100,  8247,  1006,
         1037,  1010,  1038,  1007,  1010,  2073,  1037,  1038,  1010,  1022,
         1012,  1023,  2265,  2008,  2035, 13988,  7068,  7666,  3272,  1996,
         2424,  1041,  1031,  1031,  1060,  1006,  1015,  1597,  1060,  1007,
         1033,  1047,  1033,   102])"
3129,1,"['variable', 'random variable', 'random', 'distribution', 'symmetric']", SUMMARY,seg_599,"first one vanish for a symmetric 8.18 prove that cov(x,y − z) = distribution. cov(x,y) − cov(x,z). 8.10 if x is a negative random variable",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  2034,  2028, 25887,  2005,  1037, 19490,  1022,  1012,  2324,
         6011,  2008,  2522,  2615,  1006,  1060,  1010,  1061,  1597,  1062,
         1007,  1027,  4353,  1012,  2522,  2615,  1006,  1060,  1010,  1061,
         1007,  1597,  2522,  2615,  1006,  1060,  1010,  1062,  1007,  1012,
         1022,  1012,  2184,  2065,  1060,  2003,  1037,  4997,  6721,  8023,
          102])"
3130,1,"['geometric', 'geometric distribution', 'distribution']", SUMMARY,seg_599,"(values of x are always  0), prove 8.19 for the geometric distribution that e(x) = ∫0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1006,  5300,  1997,  1060,  2024,  2467,  1014,  1007,  1010,
         6011,  1022,  1012,  2539,  2005,  1996, 14965,  4353,  2008,  1041,
         1006,  1060,  1007,  1027,   100,   102])"
3131,0,[], SUMMARY,seg_599,die (marked 1–6) is thrown and the max+b(t) = ebtmx(at). deduce that player losses k dollars if the top m(x− )∕ (t) = e− t∕ mx(t∕ ).,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  3280,  1006,  4417,  1015,  1516,  1020,  1007,  2003,  6908,
         1998,  1996,  4098,  1009,  1038,  1006,  1056,  1007,  1027,  1041,
        19279, 22984,  1006,  2012,  1007,  1012,  2139,  8566,  3401,  2008,
         2447,  6409,  1047,  6363,  2065,  1996,  2327,  1049,  1006,  1060,
        22543,  1007,   100,  1006,  1056,  1007,  1027,  1041, 22543,   100,
        25630,  1006,   100,  1007,  1012,   102])"
3132,1,"['continuous', 'expected value', 'continuous distribution', 'distribution']", SUMMARY,seg_599,"point k is odd, and gains 2k dollars 8.28 prove that the expected value of if it is even. find e(x),v(x). 1 md is e(md) =  √ 1 − , where 8.21 for any continuous distribution, n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2391,  1047,  2003,  5976,  1010,  1998, 12154,  1016,  2243,
         6363,  1022,  1012,  2654,  6011,  2008,  1996,  3517,  3643,  1997,
         2065,  2009,  2003,  2130,  1012,  2424,  1041,  1006,  1060,  1007,
         1010,  1058,  1006,  1060,  1007,  1012,  1015,  9108,  2003,  1041,
         1006,  9108,  1007,  1027,  1600,  1015,  1597,  1010,  2073,  1022,
         1012,  2538,  2005,  2151,  7142,  4353,  1010,  1050,   102])"
3133,1,"['sample', 'sample size', 'population', 'median']", SUMMARY,seg_599,"n is the sample size and   is the prove that e|x − c| is minimum population md. when c is the median. 8.29 if f (x) = kx exp(−x) for x ≥ 0, 8.22 if f (x, y) = x + y for 0   x   find k,e(x), and the mgf.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1050,  2003,  1996,  7099,  2946,  1998,  2003,  1996,  6011,
         2008,  1041,  1064,  1060,  1597,  1039,  1064,  2003,  6263,  2313,
         9108,  1012,  2043,  1039,  2003,  1996,  3991,  1012,  1022,  1012,
         2756,  2065,  1042,  1006,  1060,  1007,  1027,  1047,  2595,  4654,
         2361,  1006,  1597,  2595,  1007,  2005,  1060,  1609,  1014,  1010,
         1022,  1012,  2570,  2065,  1042,  1006,  1060,  1010,  1061,  1007,
         1027,  1060,  1009,  1061,  2005,  1014,  1060,  2424,  1047,  1010,
         1041,  1006,  1060,  1007,  1010,  1998,  1996, 11460,  2546,  1012,
          102])"
3134,1,"['random', 'random variable', 'variable']", SUMMARY,seg_599,"e(x|y). 8.30 if f (x) = k exp(−|x|) for −∞   x   ∞, find k, e(x), and the mgf. 8.23 let x be a random variable that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])",tensor([12654]),"tensor([  101,  1041,  1006,  1060,  1064,  1061,  1007,  1012,  1022,  1012,
         2382,  2065,  1042,  1006,  1060,  1007,  1027,  1047,  4654,  2361,
         1006,  1597,  1064,  1060,  1064,  1007,  2005,  1597, 30128,  1060,
         1601,  1010,  2424,  1047,  1010,  1041,  1006,  1060,  1007,  1010,
         1998,  1996, 11460,  2546,  1012,  1022,  1012,  2603,  2292,  1060,
         2022,  1037,  6721,  8023,  2008,   102])"
3135,1,['expected value'], SUMMARY,seg_599,"thrown. define the pdf of x and 8.32 if x ∼ exp ( ), find e[√ x] find its expected value e(x). does",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  6908,  1012,  9375,  1996, 11135,  1997,  1060,  1998,  1022,
         1012,  3590,  2065,  1060,   100,  4654,  2361,  1006,  1007,  1010,
         2424,  1041,  1031,  1600,  1060,  1033,  2424,  2049,  3517,  3643,
         1041,  1006,  1060,  1007,  1012,  2515,   102])"
3136,0,[], SUMMARY,seg_599,"1, … , find the mgf and derive the 8.24 find the normalizing constant k",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1015,  1010,  1529,  1010,  2424,  1996, 11460,  2546,  1998,
        18547,  1996,  1022,  1012,  2484,  2424,  1996,  3671,  6026,  5377,
         1047,   102])"
3137,1,"['moments', 'function']", SUMMARY,seg_599,"in f (x) = k∕(x + c)n+1, where n is first two moments. what is the suran integer and c is a real constant. vival function?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1999,  1042,  1006,  1060,  1007,  1027,   100,  1006,  1060,
         1009,  1039,  1007,  1050,  1009,  1015,  1010,  2073,  1050,  2003,
         2034,  2048,  5312,  1012,  2054,  2003,  1996,  7505,  2319, 16109,
         1998,  1039,  2003,  1037,  2613,  5377,  1012, 20022,  2140,  3853,
         1029,   102])"
3138,1,['moments'], SUMMARY,seg_599,prove that all ordinary moments of 8.34 prove that  2 = e(x(x − 1)) + order up to n − 1 are non-existent e(x) − [e(x)]2. apply it to find,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6011,  2008,  2035,  6623,  5312,  1997,  1022,  1012,  4090,
         6011,  2008,  1016,  1027,  1041,  1006,  1060,  1006,  1060,  1597,
         1015,  1007,  1007,  1009,  2344,  2039,  2000,  1050,  1597,  1015,
         2024,  2512,  1011, 25953,  1041,  1006,  1060,  1007,  1597,  1031,
         1041,  1006,  1060,  1007,  1033,  1016,  1012,  6611,  2009,  2000,
         2424,   102])"
3139,1,"['geometric', 'variance', 'distribution']", SUMMARY,seg_599,for this distribution. the variance of geometric and,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2005,  2023,  4353,  1012,  1996, 23284,  1997, 14965,  1998,
          102])"
3140,1,"['distributions', 'poisson', 'poisson distributions']", SUMMARY,seg_599,"8.25 when is cov(x,y) = − x y? poisson distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  2423,  2043,  2003,  2522,  2615,  1006,  1060,
         1010,  1061,  1007,  1027,  1597,  1060,  1061,  1029, 13433, 24077,
        20611,  1012,   102])"
3141,1,"['poisson', 'poisson distribution', 'distribution']", SUMMARY,seg_599,"8.35 for the poisson distribution (pois( )), prove that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1022,  1012,  3486,  2005,  1996, 13433, 24077,  4353,  1006,
        13433,  2483,  1006,  1007,  1007,  1010,  6011,  2008,   102])"
3142,1,['moment'], SUMMARY,seg_599,| | use this result to derive the first incomplete moment ∑x=0 xe−  x∕x!.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1064,  1064,  2224,  2023,  2765,  2000, 18547,  1996,  2034,
        12958,  2617,   100,  1027,  1014,  1060,  2063, 22543,   100,   999,
         1012,   102])"
3143,1,['binomial'], SUMMARY,seg_599,x )n) for the binomial,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1060,  1007,  1050,  1007,  2005,  1996,  8026, 20936,  2389,
          102])"
3144,1,"['trials', 'distribution', 'successes']", SUMMARY,seg_599,"[e(x) − k]2 distribution with n trials, where x is the number of successes. what 8.37 find e( 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1031,  1041,  1006,  1060,  1007,  1597,  1047,  1033,  1016,
         4353,  2007,  1050,  7012,  1010,  2073,  1060,  2003,  1996,  2193,
         1997, 14152,  1012,  2054,  1022,  1012,  4261,  2424,  1041,  1006,
         1015,   102])"
3145,1,"['limit', 'expectation']", SUMMARY,seg_599,2 ) for the is the limit of this expectation as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1016,  1007,  2005,  1996,  2003,  1996,  5787,  1997,  2023,
        17626,  2004,   102])"
3146,1,['variable'], SUMMARY,seg_599,random variable in q 8.22. n → ∞?,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 6721, 8023, 1999, 1053, 1022, 1012, 2570, 1012, 1050, 1585, 1601,
        1029,  102])"
3147,1,"['random', 'discrete']", SUMMARY,seg_599,8.39 find the mgf of logarith8.51 the pdf of a discrete random,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  4464,  2424,  1996, 11460,  2546,  1997,  8833,
         8486,  2705,  2620,  1012,  4868,  1996, 11135,  1997,  1037, 16246,
         6721,   102])"
3148,1,"['mean', 'variance', 'distribution', 'variable']", SUMMARY,seg_599,"mic series distribution f (x) = variable is given by f (x) = cx2 for x = {1, 2, 3}. find the mean and c x∕x, x = 1, 2, …where c = −1∕ variance. log (1 −  ), and 0       1. prove",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 23025,  2186,  4353,  1042,  1006,  1060,  1007,  1027,  8023,
         2003,  2445,  2011,  1042,  1006,  1060,  1007,  1027,  1039,  2595,
         2475,  2005,  1060,  1027,  1063,  1015,  1010,  1016,  1010,  1017,
         1065,  1012,  2424,  1996,  2812,  1998,  1039,   100,  1010,  1060,
         1027,  1015,  1010,  1016,  1010,  1529,  2073,  1039,  1027,   100,
        23284,  1012,  8833,  1006,  1015,  1597,  1007,  1010,  1998,  1014,
         1015,  1012,  6011,   102])"
3149,1,"['factorial moment', 'moment', 'moment ', 'factorial']", SUMMARY,seg_599,that rth factorial moment  (r) = 8.52 verify if f (x) = 1 e−|x|∕( ∕√ 2) is c(r − 1)![ (1 −  )]r. √,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2008, 19387,  2232,  5387,  4818,  2617,  1006,  1054,  1007,
         1027,  1022,  1012,  4720, 20410,  2065,  1042,  1006,  1060,  1007,
         1027,  1015,  1041, 22543,  1064,  1060,  1064,   100,  1006,   100,
         1016,  1007,  2003,  1039,  1006,  1054,  1597,  1015,  1007,   999,
         1031,  1006,  1015,  1597,  1007,  1033,  1054,  1012,  1600,   102])"
3150,1,['expected value'], SUMMARY,seg_599,"8.40 find the expected value for a bino8.53 if f (x) = kx(x + 1) for x = 1, 2,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1022, 1012, 2871, 2424, 1996, 3517, 3643, 2005, 1037, 8026, 2080,
        2620, 1012, 5187, 2065, 1042, 1006, 1060, 1007, 1027, 1047, 2595, 1006,
        1060, 1009, 1015, 1007, 2005, 1060, 1027, 1015, 1010, 1016, 1010,  102])"
3151,1,['distribution'], SUMMARY,seg_599,"mial distribution bino(n, p). 3, 4; find the e[x] and p[x ≥ 2].",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 8764, 2140, 4353, 8026, 2080, 1006, 1050, 1010, 1052, 1007, 1012,
        1017, 1010, 1018, 1025, 2424, 1996, 1041, 1031, 1060, 1033, 1998, 1052,
        1031, 1060, 1609, 1016, 1033, 1012,  102])"
3152,1,['probability'], SUMMARY,seg_599,"e(x) = a∕(a + b). find k, e[x] and the probability",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 1041, 1006, 1060, 1007, 1027,  100, 1006, 1037, 1009, 1038, 1007,
        1012, 2424, 1047, 1010, 1041, 1031, 1060, 1033, 1998, 1996, 9723,  102])"
3153,1,"['mean', 'variance']", SUMMARY,seg_599,"γ(b) mx( t)= 1f1(a, b; x) = γ(a)γ(b−a) 8.55 find the mean and variance for",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1157,  1006,  1038,  1007, 25630,  1006,  1056,  1007,  1027,
         1015,  2546,  2487,  1006,  1037,  1010,  1038,  1025,  1060,  1007,
         1027,  1157,  1006,  1037,  1007,  1157,  1006,  1038, 22543,  2050,
         1007,  1022,  1012,  4583,  2424,  1996,  2812,  1998, 23284,  2005,
          102])"
3154,1,"['hypergeometric', 'distribution']", SUMMARY,seg_599,∫0 1 eytta−1(1 − t)b−a−1dt is the the distribution f (x) = (1 − n )n confluent hypergeometric func( n x) n−,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,   100,  1015,  1041, 22123,  2696, 27944,  1006,  1015,  1597,
         1056,  1007,  1038, 22543,  2050, 27944, 11927,  2003,  1996,  1996,
         4353,  1042,  1006,  1060,  1007,  1027,  1006,  1015,  1597,  1050,
         1007,  1050,  9530, 10258, 24997,  2102, 23760,  3351, 28993,  4569,
         2278,  1006,  1050,  1060,  1007,  1050, 22543,   102])"
3155,1,['independent'], SUMMARY,seg_599,"functions a pdf. then find e(x) e(x2 + y2)? and e(x2) (a) f (x) = kx2(1 − x) for 0   x   1, (b) k∕xa+1, a   8.57 if x and y are independent ran-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4972,  1037, 11135,  1012,  2059,  2424,  1041,  1006,  1060,
         1007,  1041,  1006,  1060,  2475,  1009,  1061,  2475,  1007,  1029,
         1998,  1041,  1006,  1060,  2475,  1007,  1006,  1037,  1007,  1042,
         1006,  1060,  1007,  1027,  1047,  2595,  2475,  1006,  1015,  1597,
         1060,  1007,  2005,  1014,  1060,  1015,  1010,  1006,  1038,  1007,
          100,  1009,  1015,  1010,  1037,  1022,  1012,  5401,  2065,  1060,
         1998,  1061,  2024,  2981,  2743,  1011,   102])"
3156,1,['variables'], SUMMARY,seg_599,"1, x   0, (c) f (x) = k(x2 + 1) for dom variables with e(x) = −3 and e(y) = 5, find e(2x − 3)(y + x ∈ { − 2,−1, 0, 1, 2}. 5).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1010,  1060,  1014,  1010,  1006,  1039,  1007,  1042,
         1006,  1060,  1007,  1027,  1047,  1006,  1060,  2475,  1009,  1015,
         1007,  2005, 14383, 10857,  2007,  1041,  1006,  1060,  1007,  1027,
         1597,  2509,  1998,  1041,  1006,  1061,  1007,  1027,  1019,  1010,
         2424,  1041,  1006,  1016,  2595,  1597,  1017,  1007,  1006,  1061,
         1009,  1060,  1596,  1063,  1597,  1016,  1010,  1597,  2487,  1010,
         1014,  1010,  1015,  1010,  1016,  1065,  1012,  1019,  1007,  1012,
          102])"
3157,1,['monotonic'], SUMMARY,seg_599,"8.44 if f (x) = 1∕  for 0   x    , show 8.58 if  (x) is a real-valued, monotonic",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  4008,  2065,  1042,  1006,  1060,  1007,  1027,
          100,  2005,  1014,  1060,  1010,  2265,  1022,  1012,  5388,  2065,
         1006,  1060,  1007,  2003,  1037,  2613,  1011, 11126,  1010, 18847,
        25009,   102])"
3158,1,"['random', 'function']", SUMMARY,seg_599,that e[sin(x)] = 2∕ . function of a positive random,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 2008, 1041, 1031, 8254, 1006, 1060, 1007, 1033, 1027,  100, 1012,
        3853, 1997, 1037, 3893, 6721,  102])"
3159,1,['variable'], SUMMARY,seg_599,"8.45 if x   0, find constants a,b,c such variable x, prove that e[ (x)] =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1022, 1012, 3429, 2065, 1060, 1014, 1010, 2424, 5377, 2015, 1037,
        1010, 1038, 1010, 1039, 2107, 8023, 1060, 1010, 6011, 2008, 1041, 1031,
        1006, 1060, 1007, 1033, 1027,  102])"
3160,0,[], SUMMARY,seg_599,1)p[x   k] 8.59 what are the conditions for,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1015, 1007, 1052, 1031, 1060, 1047, 1033, 1022, 1012, 5354, 2054,
        2024, 1996, 3785, 2005,  102])"
3161,1,"['function', 'moment', 'expected value']", SUMMARY,seg_599,a function to be a moment 8.47 what is the expected value of an generating function? are,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  3853,  2000,  2022,  1037,  2617,  1022,  1012,  4700,
         2054,  2003,  1996,  3517,  3643,  1997,  2019, 11717,  3853,  1029,
         2024,   102])"
3162,1,"['functions', 'variable']", SUMMARY,seg_599,indicator variable? the following functions true,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101, 17245,  8023,  1029,  1996,  2206,  4972,  2995,   102])"
3163,0,[], SUMMARY,seg_599,"8.48 if x ∼ bino(n, p) find e( x",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1022, 1012, 4466, 2065, 1060,  100, 8026, 2080, 1006, 1050, 1010,
        1052, 1007, 2424, 1041, 1006, 1060,  102])"
3164,1,"['random', 'discrete']", SUMMARY,seg_599,8.50 the pdf of a discrete random 8.60 suppose an urn contains m red,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  2753,  1996, 11135,  1997,  1037, 16246,  6721,
         1022,  1012,  3438,  6814,  2019, 24471,  2078,  3397,  1049,  2417,
          102])"
3165,1,"['with replacement', 'replacement']", SUMMARY,seg_599,"variable is given by f (x) = k(|x| + balls and n blue balls. if r balls 1) for x = −3,−2,−1, 0, 1, 2, 3. are drawn with replacement, what find k and the cdf. evaluate f(2) is expected number of blue balls and p[x ≥ 0]. drawn?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  8023,  2003,  2445,  2011,  1042,  1006,  1060,  1007,  1027,
         1047,  1006,  1064,  1060,  1064,  1009,  7395,  1998,  1050,  2630,
         7395,  1012,  2065,  1054,  7395,  1015,  1007,  2005,  1060,  1027,
         1597,  2509,  1010,  1597,  2475,  1010,  1597,  2487,  1010,  1014,
         1010,  1015,  1010,  1016,  1010,  1017,  1012,  2024,  4567,  2007,
         6110,  1010,  2054,  2424,  1047,  1998,  1996,  3729,  2546,  1012,
        16157,  1042,  1006,  1016,  1007,  2003,  3517,  2193,  1997,  2630,
         7395,  1998,  1052,  1031,  1060,  1609,  1014,  1033,  1012,  4567,
         1029,   102])"
3166,1,['expected values'], SUMMARY,seg_599,8.61 suppose an urn contains n coins find the expected values of a pois-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6079,  6814,  2019, 24471,  2078,  3397,  1050,
         7824,  2424,  1996,  3517,  5300,  1997,  1037, 13433,  2483,  1011,
          102])"
3167,1,"['without replacement', 'random variable', 'random', 'replacement', 'variable']", SUMMARY,seg_599,"numbered 1 – n. if r coins are son random variable. what is the drawn without replacement, what expression to find e[x4]?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 8597, 1015, 1516, 1050, 1012, 2065, 1054, 7824, 2024, 2365, 6721,
        8023, 1012, 2054, 2003, 1996, 4567, 2302, 6110, 1010, 2054, 3670, 2000,
        2424, 1041, 1031, 1060, 2549, 1033, 1029,  102])"
3168,1,"['mean', 'variance']", SUMMARY,seg_599,is the expected sum of the num8.67 find the mean and variance of the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2003,  1996,  3517,  7680,  1997,  1996, 16371,  2213,  2620,
         1012,  6163,  2424,  1996,  2812,  1998, 23284,  1997,  1996,   102])"
3169,1,['distributions'], SUMMARY,seg_599,"bers? distributions: (i) f (x, n) = (n∕2) sin 8.62 if x and y are iid distributed as (nx), 0 ≤ x ≤  ∕n, n   0 is real;",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2022,  2869,  1029, 20611,  1024,  1006,  1045,  1007,  1042,
         1006,  1060,  1010,  1050,  1007,  1027,  1006,   100,  1007,  8254,
         1022,  1012,  5786,  2065,  1060,  1998,  1061,  2024,  2462,  2094,
         5500,  2004,  1006,  1050,  2595,  1007,  1010,  1014,  1608,  1060,
         1608,   100,  1010,  1050,  1014,  2003,  2613,  1025,   102])"
3170,1,"['discrete', 'symmetric']", SUMMARY,seg_599,k f (y|x) − 8.63 if x is a discrete symmetric ran-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1047,  1042,  1006,  1061,  1064,  1060,  1007,  1597,  1022,
         1012,  6191,  2065,  1060,  2003,  1037, 16246, 19490,  2743,  1011,
          102])"
3171,1,['variable'], SUMMARY,seg_599,dom variable (p[x = k] = p[x =  y,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14383,  8023,  1006,  1052,  1031,  1060,  1027,  1047,  1033,
         1027,  1052,  1031,  1060,  1027,  1061,   102])"
3172,1,['expected value'], SUMMARY,seg_599,"−k]), find expected value of 8.69 if the second derivative of h(x) is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1597,  2243,  1033,  1007,  1010,  2424,  3517,  3643,  1997,
         1022,  1012,  6353,  2065,  1996,  2117, 13819,  1997,  1044,  1006,
         1060,  1007,  2003,   102])"
3173,1,['continuous'], SUMMARY,seg_599,"8.64 prove that cov(x,xi − x) = 0 8.70 if x is continuous, prove",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1022, 1012, 4185, 6011, 2008, 2522, 2615, 1006, 1060, 1010, 8418,
        1597, 1060, 1007, 1027, 1014, 1022, 1012, 3963, 2065, 1060, 2003, 7142,
        1010, 6011,  102])"
3174,1,"['sample', 'random', 'random sample']", SUMMARY,seg_599,for any random sample. that  r ′ = ∫0 ∞ rxr−1[1 − fx(x) +,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2005,  2151,  6721,  7099,  1012,  2008,  1054,  1531,  1027,
          100,  1601,  1054,  2595,  2099, 27944,  1031,  1015,  1597, 23292,
         1006,  1060,  1007,  1009,   102])"
3175,1,"['random sample', 'sample', 'random', 'expected values']", SUMMARY,seg_599,any random sample. 8.71 find the expected values of x2 and,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2151, 6721, 7099, 1012, 1022, 1012, 6390, 2424, 1996, 3517, 5300,
        1997, 1060, 2475, 1998,  102])"
3176,1,"['random', 'experiment']", SUMMARY,seg_599,8.66 use x2 = x(x − 1) + x and x3 = x3 in a random experiment of toss-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  5764,  2224,  1060,  2475,  1027,  1060,  1006,
         1060,  1597,  1015,  1007,  1009,  1060,  1998,  1060,  2509,  1027,
         1060,  2509,  1999,  1037,  6721,  7551,  1997, 10055,  1011,   102])"
3177,1,"['factorial moments', 'distributions', 'moments', 'factorial']", SUMMARY,seg_599,8.72 prove that the factorial moments for the following distributions are as given:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1022,  1012,  5824,  6011,  2008,  1996,  5387,  4818,  5312,
         2005,  1996,  2206, 20611,  2024,  2004,  2445,  1024,   102])"
3178,1,"['random', 'random variables', 'variables', 'independent']", SUMMARY,seg_599,"8.73 if x1,x2, … ,xn are independent identical random variables with the same",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6421,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  2024,  2981,  7235,  6721, 10857,
         2007,  1996,  2168,   102])"
3179,1,"['mean', 'arithmetic mean', 'expected value', 'variance']", SUMMARY,seg_599,"mean  , and same variance  2, find the expected value and variance of the arithmetic mean of xi",tensor(1),"tensor([0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  2812,  1010,  1998,  2168, 23284,  1016,  1010,  2424,  1996,
         3517,  3643,  1998, 23284,  1997,  1996, 20204,  2812,  1997,  8418,
          102])"
3180,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'variable']", SUMMARY,seg_599,"8.74 if x is a nonnegative continuous random variable, and y = exp (x2) find the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6356,  2065,  1060,  2003,  1037,  2512,  2638,
        26792,  7142,  6721,  8023,  1010,  1998,  1061,  1027,  4654,  2361,
         1006,  1060,  2475,  1007,  2424,  1996,   102])"
3181,1,"['geometric distribution', 'moments', 'distribution', 'geometric']", SUMMARY,seg_599,8.75 find the mgf and first three moments of the geometric distribution f (x) =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  4293,  2424,  1996, 11460,  2546,  1998,  2034,
         2093,  5312,  1997,  1996, 14965,  4353,  1042,  1006,  1060,  1007,
         1027,   102])"
3182,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'variable']", SUMMARY,seg_599,"8.76 if x is a real-valued continuous random variable, prove that e[x2] =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6146,  2065,  1060,  2003,  1037,  2613,  1011,
        11126,  7142,  6721,  8023,  1010,  6011,  2008,  1041,  1031,  1060,
         2475,  1033,  1027,   102])"
3183,0,[], SUMMARY,seg_599,8.77 the number of mms messages arriving in emily’s cell phone between 9 am,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1022, 1012, 6255, 1996, 2193, 1997, 3461, 2015, 7696, 7194, 1999,
        6253, 1521, 1055, 3526, 3042, 2090, 1023, 2572,  102])"
3184,1,"['poisson', 'interval', 'poisson distributed']", SUMMARY,seg_599,and 5 pm is poisson distributed with   = 1 for a 10-min interval. what is the expected number of mms messages received in 1 h? what is the total expected number of messages she will receive between 1 pm and 5 pm?,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1998,  1019,  7610,  2003, 13433, 24077,  5500,  2007,  1027,
         1015,  2005,  1037,  2184,  1011,  8117, 13483,  1012,  2054,  2003,
         1996,  3517,  2193,  1997,  3461,  2015,  7696,  2363,  1999,  1015,
         1044,  1029,  2054,  2003,  1996,  2561,  3517,  2193,  1997,  7696,
         2016,  2097,  4374,  2090,  1015,  7610,  1998,  1019,  7610,  1029,
          102])"
3185,1,['function'], SUMMARY,seg_599,8.78 the mean-excess function of a variate is defined as ∆[x] = (1∕s(x))∑∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6275,  1996,  2812,  1011,  9987,  3853,  1997,
         1037, 13075, 13143,  2003,  4225,  2004,  1594,  1031,  1060,  1033,
         1027,  1006,   100,  1006,  1060,  1007,  1007,   100,   102])"
3186,1,['discrete'], SUMMARY,seg_599,"u (1 − f(x)) if x is discrete, and ∆[x] = (1∕s(x)) ∫u",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1057,  1006,  1015,  1597,  1042,  1006,  1060,  1007,  1007,
         2065,  1060,  2003, 16246,  1010,  1998,  1594,  1031,  1060,  1033,
         1027,  1006,   100,  1006,  1060,  1007,  1007,   100,   102])"
3187,1,"['function', 'poisson', 'exponential', 'variates']", SUMMARY,seg_599,"ous, where s(x) = 1 − f(x) is the survival function. find ∆[x] of poisson and exponential variates.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101, 15068,  2015,  1010,  2073,  1055,  1006,  1060,  1007,  1027,
         1015,  1597,  1042,  1006,  1060,  1007,  2003,  1996,  7691,  3853,
         1012,  2424,  1594,  1031,  1060,  1033,  1997, 13433, 24077,  1998,
        27258, 13075, 13143,  2015,  1012,   102])"
3188,1,"['random', 'random variables', 'variables']", SUMMARY,seg_599,"8.79 suppose x1,x2, … ,xn are iid random variables, with e(xi) =   and",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6535,  6814,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  2024,  2462,  2094,  6721, 10857,
         1010,  2007,  1041,  1006,  8418,  1007,  1027,  1998,   102])"
3189,1,"['variance', 'random variable', 'random', 'variable', 'independent']", SUMMARY,seg_599,"var(xi) =  2. define y = x1 + x2 + · · · + xn , where n is another random variable independent of x. prove that e(y|n) = n , and var(y|n) = n 2. use e(y) = e[e(y|n)] to show that e(y) =   , where   = e(n). show that the unconditional variance of y is   2 +  2 2 where  2 is variance of n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101, 13075,  1006,  8418,  1007,  1027,  1016,  1012,  9375,  1061,
         1027,  1060,  2487,  1009,  1060,  2475,  1009,  1087,  1087,  1087,
         1009,  1060,  2078,  1010,  2073,  1050,  2003,  2178,  6721,  8023,
         2981,  1997,  1060,  1012,  6011,  2008,  1041,  1006,  1061,  1064,
         1050,  1007,  1027,  1050,  1010,  1998, 13075,  1006,  1061,  1064,
         1050,  1007,  1027,  1050,  1016,  1012,  2224,  1041,  1006,  1061,
         1007,  1027,  1041,  1031,  1041,  1006,  1061,  1064,  1050,  1007,
         1033,  2000,  2265,  2008,  1041,  1006,  1061,  1007,  1027,  1010,
         2073,  1027,  1041,  1006,  1050,  1007,  1012,  2265,  2008,  1996,
         4895,  8663, 27064, 23284,  1997,  1061,  2003,  1016,  1009,  1016,
         1016,  2073,  1016,  2003, 23284,  1997,  1050,  1012,   102])"
3190,0,[], SUMMARY,seg_599,"8.80 when a cell phone is powered on, it is registered with a base station. each",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1022, 1012, 3770, 2043, 1037, 3526, 3042, 2003, 6113, 2006, 1010,
        2009, 2003, 5068, 2007, 1037, 2918, 2276, 1012, 2169,  102])"
3191,1,"['percentage', 'poisson', 'distribution', 'poisson distribution']", SUMMARY,seg_599,"base station has a “cell” which is the coverage region (say a circular or square region) around it. when the caller moves from place to place, they may move out of one region and into an adjacent region. the phone company automatically detects it and “hands over” the phone identity to the new base station. a phone company has noticed that the majority of subscribers do not change their base station during their call, but the proportion of subscribers who change their base station is an upper truncated poisson distribution with = 0.04, and truncation point 4. find the expected percentage of subscribers who change their base station, and pr[x ≥ 2], where x denotes the number of hand overs.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  2918,  2276,  2038,  1037,  1523,  3526,  1524,  2029,  2003,
         1996,  6325,  2555,  1006,  2360,  1037,  8206,  2030,  2675,  2555,
         1007,  2105,  2009,  1012,  2043,  1996, 20587,  5829,  2013,  2173,
         2000,  2173,  1010,  2027,  2089,  2693,  2041,  1997,  2028,  2555,
         1998,  2046,  2019,  5516,  2555,  1012,  1996,  3042,  2194,  8073,
        11487,  2015,  2009,  1998,  1523,  2398,  2058,  1524,  1996,  3042,
         4767,  2000,  1996,  2047,  2918,  2276,  1012,  1037,  3042,  2194,
         2038,  4384,  2008,  1996,  3484,  1997, 17073,  2079,  2025,  2689,
         2037,  2918,  2276,  2076,  2037,  2655,  1010,  2021,  1996, 10817,
         1997, 17073,  2040,  2689,  2037,  2918,  2276,  2003,  2019,  3356,
        25449, 13433, 24077,  4353,  2007,  1027,  1014,  1012,  5840,  1010,
         1998, 19817,  4609, 10719,  2391,  1018,  1012,  2424,  1996,  3517,
         7017,  1997, 17073,  2040,  2689,  2037,  2918,  2276,  1010,  1998,
        10975,  1031,  1060,  1609,  1016,  1033,  1010,  2073,  1060, 14796,
         1996,  2193,  1997,  2192, 15849,  1012,   102])"
3192,1,"['discrete random variable', 'discrete', 'random variable', 'random', 'variable']", SUMMARY,seg_599,8.81 if the cdf of a discrete random variable is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6282,  2065,  1996,  3729,  2546,  1997,  1037,
        16246,  6721,  8023,  2003,   102])"
3193,1,['mean'], SUMMARY,seg_599,find the pdf and the mean.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2424,  1996, 11135,  1998,  1996,  2812,  1012,   102])"
3194,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'variable']", SUMMARY,seg_599,8.82 if the cdf of a continuous random variable is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1022, 1012, 6445, 2065, 1996, 3729, 2546, 1997, 1037, 7142, 6721,
        8023, 2003,  102])"
3195,1,['mean'], SUMMARY,seg_599,find the pdf and the mean.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2424,  1996, 11135,  1998,  1996,  2812,  1012,   102])"
3196,1,"['discrete random variable', 'discrete', 'random variable', 'random', 'variable']", SUMMARY,seg_599,8.83 if the cdf of a discrete random variable is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6640,  2065,  1996,  3729,  2546,  1997,  1037,
        16246,  6721,  8023,  2003,   102])"
3197,1,['mean'], SUMMARY,seg_599,how is the mean related to p[x = 1].,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2129, 2003, 1996, 2812, 3141, 2000, 1052, 1031, 1060, 1027, 1015,
        1033, 1012,  102])"
3198,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'variable']", SUMMARY,seg_599,8.84 if the cdf of a continuous random variable is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1022, 1012, 6391, 2065, 1996, 3729, 2546, 1997, 1037, 7142, 6721,
        8023, 2003,  102])"
3199,1,['mean'], SUMMARY,seg_599,find the pdf and the mean.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2424,  1996, 11135,  1998,  1996,  2812,  1012,   102])"
3200,1,"['discrete random variable', 'discrete', 'random variable', 'random', 'variable']", SUMMARY,seg_599,8.85 if the pdf of a discrete random variable is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  5594,  2065,  1996, 11135,  1997,  1037, 16246,
         6721,  8023,  2003,   102])"
3201,1,['mean'], SUMMARY,seg_599,prove that the mean is  ∕q. find the pgf.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6011,  2008,  1996,  2812,  2003,   100,  1012,  2424,  1996,
        18720,  2546,  1012,   102])"
3202,1,"['continuous', 'continuous random variable', 'random variable', 'random', 'variable']", SUMMARY,seg_599,8.86 if the cdf of a continuous random variable is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([12654]),"tensor([ 101, 1022, 1012, 6564, 2065, 1996, 3729, 2546, 1997, 1037, 7142, 6721,
        8023, 2003,  102])"
3203,1,['mean'], SUMMARY,seg_599,prove that the mean is  ∕4. find the mgf.,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6011,  2008,  1996,  2812,  2003,   100,  1012,  2424,  1996,
        11460,  2546,  1012,   102])"
3204,0,[], SUMMARY,seg_599,8.87 prove that the memory-less propn,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012,  6584,  6011,  2008,  1996,  3638,  1011,  2625,
        17678,  2078,   102])"
3205,1,"['exponential', 'exponential distribution', 'distribution']", SUMMARY,seg_599,"8.89 if f (x; n,  ) = ( x) (1 −  ∕n)n x∕ erty of exponential distribution is (n −  )x where x = 0, 1, … , n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6486,  2065,  1042,  1006,  1060,  1025,  1050,
         1010,  1007,  1027,  1006,  1060,  1007,  1006,  1015,  1597,   100,
         1007,  1050,   100,  9413,  3723,  1997, 27258,  4353,  2003,  1006,
         1050,  1597,  1007,  1060,  2073,  1060,  1027,  1014,  1010,  1015,
         1010,  1529,  1010,  1050,   102])"
3206,1,"['normal', 'independent']", SUMMARY,seg_599,"8.90 if x, y are independent normal 8.88 if both x and y are independent",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])",tensor([12654]),"tensor([ 101, 1022, 1012, 3938, 2065, 1060, 1010, 1061, 2024, 2981, 3671, 1022,
        1012, 6070, 2065, 2119, 1060, 1998, 1061, 2024, 2981,  102])"
3207,1,"['gamma distributed', 'variance', 'gamma', 'variables']", SUMMARY,seg_599,"random variables with the same gamma distributed, prove that (i) variance, find e[(x + y)4|(x − e(y|x) = cx + b, (ii) var(y|x) =",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6721, 10857,  2007,  1996,  2168, 13091,  5500,  1010,  6011,
         2008,  1006,  1045,  1007, 23284,  1010,  2424,  1041,  1031,  1006,
         1060,  1009,  1061,  1007,  1018,  1064,  1006,  1060,  1597,  1041,
         1006,  1061,  1064,  1060,  1007,  1027,  1039,  2595,  1009,  1038,
         1010,  1006,  2462,  1007, 13075,  1006,  1061,  1064,  1060,  1007,
         1027,   102])"
3208,1,"['exponential', 'exponential distribution', 'distribution']", SUMMARY,seg_599,8.91 suppose you toss a fair die once exponential distribution with,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6205,  6814,  2017, 10055,  1037,  4189,  3280,
         2320, 27258,  4353,  2007,   102])"
3209,1,['variance'], SUMMARY,seg_599,and note down the number n that = 1∕2400 s and truncation point shows up (1 ≤ n ≤ 6). you then 20 s. what is the expected percenttoss a fair coin n times. let x age of phone calls that take more denote the number of heads that than 5 min? what is the variance you get in n tosses of the coin. of duration of all phone calls?,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1998,  3602,  2091,  1996,  2193,  1050,  2008,  1027,   100,
         1055,  1998, 19817,  4609, 10719,  2391,  3065,  2039,  1006,  1015,
         1608,  1050,  1608,  1020,  1007,  1012,  2017,  2059,  2322,  1055,
         1012,  2054,  2003,  1996,  3517,  3867, 13122,  2015,  1037,  4189,
         9226,  1050,  2335,  1012,  2292,  1060,  2287,  1997,  3042,  4455,
         2008,  2202,  2062, 19090,  1996,  2193,  1997,  4641,  2008,  2084,
         1019,  8117,  1029,  2054,  2003,  1996, 23284,  2017,  2131,  1999,
         1050, 10055,  2229,  1997,  1996,  9226,  1012,  1997,  9367,  1997,
         2035,  3042,  4455,  1029,   102])"
3210,1,['independent'], SUMMARY,seg_599,8.92 if x and y are independent nections. the number of new cus-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6227,  2065,  1060,  1998,  1061,  2024,  2981,
        26785,  9285,  1012,  1996,  2193,  1997,  2047, 12731,  2015,  1011,
          102])"
3211,1,['variables'], SUMMARY,seg_599,"random variables, prove that tomers who connect to http p(y ≤ x) = ∫−",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  6721, 10857,  1010,  6011,  2008, 21269,  2869,  2040,  7532,
         2000,  8299,  1052,  1006,  1061,  1608,  1060,  1007,  1027,   100,
          102])"
3212,1,"['poisson', 'poisson distributed']", SUMMARY,seg_599,∞ ∞ fy (x)fx(x)dx = server is poisson distributed with 1 − ∫−,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1601,  1601,  1042,  2100,  1006,  1060,  1007, 23292,  1006,
         1060,  1007,  1040,  2595,  1027,  8241,  2003, 13433, 24077,  5500,
         2007,  1015,  1597,   100,   102])"
3213,1,"['variance', 'interval', 'poisson', 'population', 'population variance']", SUMMARY,seg_599,∞ ∞ fx(y)fy (y)dy. = 20 for a time interval of 1 min. on the ftp server is poisson dis8.93 prove that the population variance tributed with = 3 for same time,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1601,  1601, 23292,  1006,  1061,  1007,  1042,  2100,  1006,
         1061,  1007,  1040,  2100,  1012,  1027,  2322,  2005,  1037,  2051,
        13483,  1997,  1015,  8117,  1012,  2006,  1996,  3027,  2361,  8241,
         2003, 13433, 24077,  4487,  2015,  2620,  1012,  6109,  6011,  2008,
         1996,  2313, 23284,  7050,  2094,  2007,  1027,  1017,  2005,  2168,
         2051,   102])"
3214,1,['events'], SUMMARY,seg_599,"can be expressed as the values period. if both events are indepenof cdf (fx(x)) and its first two dent, what is the expected number derivatives evaluated at x = 1. of customers connecting to the site",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2064,  2022,  5228,  2004,  1996,  5300,  2558,  1012,  2065,
         2119,  2824,  2024, 27427, 13699, 16515,  2546,  3729,  2546,  1006,
        23292,  1006,  1060,  1007,  1007,  1998,  2049,  2034,  2048, 21418,
         1010,  2054,  2003,  1996,  3517,  2193, 16942, 16330,  2012,  1060,
         1027,  1015,  1012,  1997,  6304,  7176,  2000,  1996,  2609,   102])"
3215,1,"['population variance', 'variance', 'population']", SUMMARY,seg_599,8.94 prove that the population variance in 4 min?.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  6365,  6011,  2008,  1996,  2313, 23284,  1999,
         1018,  8117,  1029,  1012,   102])"
3216,0,[], SUMMARY,seg_599,can be expressed using the second derivative of kx(t) as kx,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2064,  2022,  5228,  2478,  1996,  2117, 13819,  1997,  1047,
         2595,  1006,  1056,  1007,  2004,  1047,  2595,   102])"
3217,1,"['poisson', 'poisson distributed']", SUMMARY,seg_599,′′(x) evalu8.98 the number of cars that arrive at a gas station between 7 am ated at x = 0. and 9 am is poisson distributed,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0.])",tensor([12654]),"tensor([  101,  1531,  1531,  1006,  1060,  1007,  9345,  7630,  2620,  1012,
         5818,  1996,  2193,  1997,  3765,  2008,  7180,  2012,  1037,  3806,
         2276,  2090,  1021,  2572,  8823,  2094,  2012,  1060,  1027,  1014,
         1012,  1998,  1023,  2572,  2003, 13433, 24077,  5500,   102])"
3218,1,['mean'], SUMMARY,seg_599,8.95 an electronic circuit has n2 comwith mean 3 in 5 min. what is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  5345,  2019,  4816,  4984,  2038,  1050,  2475,
         4012, 24415,  2812,  1017,  1999,  1019,  8117,  1012,  2054,  2003,
          102])"
3219,1,['expected value'], SUMMARY,seg_599,"ponents that look identical. a the expected number of minutes technician has time to inspect just a person has to wait if there are n of the components in any trip. no others in the queue? what is what is the expected number of the expected number of cars that trips needed to inspect every comarrive in 27 s? ponent if the components are cho8.99 if x is cuni(a, b) find the distrisen arbitrarily in each repair trip, bution and expected value of y = and inspected components are not (2x − (a + b))∕(b − a). marked.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13433, 21576,  2015,  2008,  2298,  7235,  1012,  1037,  1996,
         3517,  2193,  1997,  2781, 16661,  2038,  2051,  2000, 22459,  2074,
         1037,  2711,  2038,  2000,  3524,  2065,  2045,  2024,  1050,  1997,
         1996,  6177,  1999,  2151,  4440,  1012,  2053,  2500,  1999,  1996,
        24240,  1029,  2054,  2003,  2054,  2003,  1996,  3517,  2193,  1997,
         1996,  3517,  2193,  1997,  3765,  2008,  9109,  2734,  2000, 22459,
         2296, 16571, 18752,  3726,  1999,  2676,  1055,  1029, 13433, 21576,
         2065,  1996,  6177,  2024, 16480,  2620,  1012,  5585,  2065,  1060,
         2003, 12731,  3490,  1006,  1037,  1010,  1038,  1007,  2424,  1996,
         4487,  3367, 29346,  2078, 12098, 16313, 19848,  6588,  1999,  2169,
         7192,  4440,  1010,  2021,  3258,  1998,  3517,  3643,  1997,  1061,
         1027,  1998, 20456,  6177,  2024,  2025,  1006,  1016,  2595,  1597,
         1006,  1037,  1009,  1038,  1007,  1007,   100,  1006,  1038,  1597,
         1037,  1007,  1012,  4417,  1012,   102])"
3220,0,[], SUMMARY,seg_599,8.100 what is the expression to find 8.96 a telephone carrier notices,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012,  2531,  2054,  2003,  1996,  3670,  2000,  2424,
         1022,  1012,  5986,  1037,  7026,  6839, 14444,   102])"
3221,1,['average'], SUMMARY,seg_599,that the average duration of e[x4] in terms of x(x − 1)(x − cell-phone calls among teenagers 2)(x − 3) and lower order prodis distributed as a left-truncated ucts?,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2008,  1996,  2779,  9367,  1997,  1041,  1031,  1060,  2549,
         1033,  1999,  3408,  1997,  1060,  1006,  1060,  1597,  1015,  1007,
         1006,  1060,  1597,  3526,  1011,  3042,  4455,  2426, 12908,  1016,
         1007,  1006,  1060,  1597,  1017,  1007,  1998,  2896,  2344,  4013,
        10521,  5500,  2004,  1037,  2187,  1011, 25449, 15384,  3215,  1029,
          102])"
3222,0,[], SUMMARY,seg_599,8.102 high-rise structures at earth-quake-prone areas are designed to withstand,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012,  9402,  2152,  1011,  4125,  5090,  2012,  3011,
         1011, 27785,  1011, 13047,  2752,  2024,  2881,  2000, 19319,   102])"
3223,1,"['probability', 'data']", SUMMARY,seg_599,"powerful earthquakes. from past data, it is found that the probability of an earthquake in a year is 0.091, and the probability of a building collapse after",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3928, 17932,  1012,  2013,  2627,  2951,  1010,  2009,  2003,
         2179,  2008,  1996,  9723,  1997,  2019,  8372,  1999,  1037,  2095,
         2003,  1014,  1012,  5641,  2487,  1010,  1998,  1996,  9723,  1997,
         1037,  2311,  7859,  2044,   102])"
3224,1,"['information', 'expected value']", SUMMARY,seg_599,"the earthquake is 0.004. the cost of constructing a high-rise building is c0 and the cost of repair after damage is cr. if a building portfolio comprises of n (  2) buildings in a city neighborhood, find the expected value of the cost incurred in 10 years: (i) if no information on the earthquakes are available and (ii) if it is assumed that at least two earthquakes are likely to occur.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  8372,  2003,  1014,  1012,  4002,  2549,  1012,  1996,
         3465,  1997, 15696,  1037,  2152,  1011,  4125,  2311,  2003,  1039,
         2692,  1998,  1996,  3465,  1997,  7192,  2044,  4053,  2003, 13675,
         1012,  2065,  1037,  2311, 11103,  8681,  1997,  1050,  1006,  1016,
         1007,  3121,  1999,  1037,  2103,  5101,  1010,  2424,  1996,  3517,
         3643,  1997,  1996,  3465, 22667,  1999,  2184,  2086,  1024,  1006,
         1045,  1007,  2065,  2053,  2592,  2006,  1996, 17932,  2024,  2800,
         1998,  1006,  2462,  1007,  2065,  2009,  2003,  5071,  2008,  2012,
         2560,  2048, 17932,  2024,  3497,  2000,  5258,  1012,   102])"
3225,0,[], SUMMARY,seg_599,8.103 a pop (post-office protocol) based mail server sends each message and then,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012,  9800,  1037,  3769,  1006,  2695,  1011,  2436,
         8778,  1007,  2241,  5653,  8241, 10255,  2169,  4471,  1998,  2059,
          102])"
3226,1,"['mean', 'exponentially distributed', 'exponentially', 'successful']", SUMMARY,seg_599,"waits for an ack from the receiver. only after the receipt of the ack will the mail server send the next message in the queue. it is known that the delay in receipt of the ack is exponentially distributed with mean 1/2 s. if three messages, each of size 1 k are to be sent, what is the expected number of seconds elapsed for successful transmission if the sending of each message itself takes half-second?.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 18074,  2005,  2019,  9353,  2243,  2013,  1996,  8393,  1012,
         2069,  2044,  1996, 24306,  1997,  1996,  9353,  2243,  2097,  1996,
         5653,  8241,  4604,  1996,  2279,  4471,  1999,  1996, 24240,  1012,
         2009,  2003,  2124,  2008,  1996,  8536,  1999, 24306,  1997,  1996,
         9353,  2243,  2003, 27258,  2135,  5500,  2007,  2812,  1015,  1013,
         1016,  1055,  1012,  2065,  2093,  7696,  1010,  2169,  1997,  2946,
         1015,  1047,  2024,  2000,  2022,  2741,  1010,  2054,  2003,  1996,
         3517,  2193,  1997,  3823,  3449,  9331,  6924,  2005,  3144,  6726,
         2065,  1996,  6016,  1997,  2169,  4471,  2993,  3138,  2431,  1011,
         2117,  1029,  1012,   102])"
3227,0,[], SUMMARY,seg_599,8.104 an automated robot controlled inventory warehouse has racks of length 120 m,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012,  9645,  2019, 12978,  8957,  4758, 12612,  9746,
         2038, 27259,  1997,  3091,  6036,  1049,   102])"
3228,0,[], SUMMARY,seg_599,on both sides of an alley. the robot is equally likely to break down anywhere on the stretch of 120 m. where should a spare robot be located so that it can immediately take over the task of the broken down robot in minimal waste of time?,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2006,  2119,  3903,  1997,  2019,  8975,  1012,  1996,  8957,
         2003,  8053,  3497,  2000,  3338,  2091,  5973,  2006,  1996,  7683,
         1997,  6036,  1049,  1012,  2073,  2323,  1037,  8622,  8957,  2022,
         2284,  2061,  2008,  2009,  2064,  3202,  2202,  2058,  1996,  4708,
         1997,  1996,  3714,  2091,  8957,  1999, 10124,  5949,  1997,  2051,
         1029,   102])"
3229,1,['error'], SUMMARY,seg_599,8.105 a computer virus can infect a laprun-time exception (kind of error),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012,  8746,  1037,  3274,  7865,  2064,  1999, 25969,
         1037,  5001, 15532,  1011,  2051,  6453,  1006,  2785,  1997,  7561,
         1007,   102])"
3230,1,"['poisson', 'probability', 'probabilities']", SUMMARY,seg_599,"top independently through (i) an in 8 h of use is pois (0.03), email, (ii) an http, or (iii) a muland independently the last three timedia with respective poisson subsystems is pois (0.05). if the probabilities 2%, 0.09%, and 5% software is used for 80 h, (i) in 1 day. if you use both email and what is the expected number of multimedia connection for 30 h, exceptions? (ii) probability that no what is the expected number of exceptions occurred.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2327,  9174,  2083,  1006,  1045,  1007,  2019,  1999,  1022,
         1044,  1997,  2224,  2003, 13433,  2483,  1006,  1014,  1012,  6021,
         1007,  1010, 10373,  1010,  1006,  2462,  1007,  2019,  8299,  1010,
         2030,  1006,  3523,  1007,  1037, 14163,  3122,  9174,  1996,  2197,
         2093, 22313,  2401,  2007,  7972, 13433, 24077,  4942, 29390,  2003,
        13433,  2483,  1006,  1014,  1012,  5709,  1007,  1012,  2065,  1996,
         4013,  3676, 14680,  1016,  1003,  1010,  1014,  1012,  5641,  1003,
         1010,  1998,  1019,  1003,  4007,  2003,  2109,  2005,  3770,  1044,
         1010,  1006,  1045,  1007,  1999,  1015,  2154,  1012,  2065,  2017,
         2224,  2119, 10373,  1998,  2054,  2003,  1996,  3517,  2193,  1997,
        14959,  4434,  2005,  2382,  1044,  1010, 11790,  1029,  1006,  2462,
         1007,  9723,  2008,  2053,  2054,  2003,  1996,  3517,  2193,  1997,
        11790,  4158,  1012,   102])"
3231,1,"['average', 'test']", SUMMARY,seg_599,"computer virus infections? if you 8.108 an auto-emission test center has use both http and multimedia for found that on an average one in 20 h and email for 10 h, what is the eight automobiles fail in the emis-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3274,  7865, 15245,  1029,  2065,  2017,  1022,  1012, 10715,
         2019,  8285,  1011, 15760,  3231,  2415,  2038,  2224,  2119,  8299,
         1998, 14959,  2005,  2179,  2008,  2006,  2019,  2779,  2028,  1999,
         2322,  1044,  1998, 10373,  2005,  2184,  1044,  1010,  2054,  2003,
         1996,  2809, 19207,  8246,  1999,  1996, 12495,  2015,  1011,   102])"
3232,1,['test'], SUMMARY,seg_599,"expected number of infections? sion test, and needs tune-up. the",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3517,  2193,  1997, 15245,  1029,  9033,  2239,  3231,  1010,
         1998,  3791,  8694,  1011,  2039,  1012,  1996,   102])"
3233,1,['distribution'], SUMMARY,seg_599,"8.106 if xi – idd beta -2 (a, bi) find distribution of tune-up time in",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012, 10114,  2065,  8418,  1516,  8909,  2094,  8247,
         1011,  1016,  1006,  1037,  1010, 12170,  1007,  2424,  4353,  1997,
         8694,  1011,  2039,  2051,  1999,   102])"
3234,1,"['mean', 'harmonic', 'harmonic mean']", SUMMARY,seg_599,expected value of harmonic mean. hours is exp(2.5). if 100 vehi-,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3517,  3643,  1997, 19452,  2812,  1012,  2847,  2003,  4654,
         2361,  1006,  1016,  1012,  1019,  1007,  1012,  2065,  2531,  2310,
         4048,  1011,   102])"
3235,0,[], SUMMARY,seg_599,"cles are tested per month, find the 8.107 a software comprises of eight",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 18856,  2229,  2024,  7718,  2566,  3204,  1010,  2424,  1996,
         1022,  1012, 10550,  1037,  4007,  8681,  1997,  2809,   102])"
3236,1,['probability'], SUMMARY,seg_599,expected number of hours spent on subsystems. probability that the servicing of failed vehicles. first five subsystems will throw a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3517,  2193,  1997,  2847,  2985,  2006,  4942, 29390,  1012,
         9723,  2008,  1996, 26804,  1997,  3478,  4683,  1012,  2034,  2274,
         4942, 29390,  2097,  5466,  1037,   102])"
3237,0,['n'], SUMMARY,seg_599,8.109 suppose n letters are to be sent in n envelops. if the letters and envelops are,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])",tensor([12654]),"tensor([  101,  1022,  1012, 11518,  6814,  1050,  4144,  2024,  2000,  2022,
         2741,  1999,  1050,  4372, 15985, 11923,  1012,  2065,  1996,  4144,
         1998,  4372, 15985, 11923,  2024,   102])"
3238,0,[], SUMMARY,seg_599,"shuffled and each letter is randomly assigned to an envelope, find the expected number of matches (letters that get into correct envelops).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101, 18764,  1998,  2169,  3661,  2003, 18154,  4137,  2000,  2019,
        11255,  1010,  2424,  1996,  3517,  2193,  1997,  3503,  1006,  4144,
         2008,  2131,  2046,  6149,  4372, 15985, 11923,  1007,  1012,   102])"
3239,0,[], SUMMARY,seg_599,8.110 a cereals manufacturer offers a promotional coupon with a new brand of cereal,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012,  7287,  1037, 20943,  2015,  7751,  4107,  1037,
        10319,  8648,  2239,  2007,  1037,  2047,  4435,  1997, 20943,   102])"
3240,1,['probability'], SUMMARY,seg_599,"pack. two types of coupons (that carry either 1 point or 2 points) are printed, and either of them is put in selected packs so that some packs do not contain a coupon. probability that a customer will find a 1-point coupon is p, and a 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5308,  1012,  2048,  4127,  1997,  8648,  5644,  1006,  2008,
         4287,  2593,  1015,  2391,  2030,  1016,  2685,  1007,  2024,  6267,
         1010,  1998,  2593,  1997,  2068,  2003,  2404,  1999,  3479, 15173,
         2061,  2008,  2070, 15173,  2079,  2025,  5383,  1037,  8648,  2239,
         1012,  9723,  2008,  1037,  8013,  2097,  2424,  1037,  1015,  1011,
         2391,  8648,  2239,  2003,  1052,  1010,  1998,  1037,  1016,   102])"
3241,0,['n'], SUMMARY,seg_599,"points coupon is q. if a customer purchases n packs of the cereal, what is the expected number of points earned?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])",tensor([12654]),"tensor([  101,  2685,  8648,  2239,  2003,  1053,  1012,  2065,  1037,  8013,
        17402,  1050, 15173,  1997,  1996, 20943,  1010,  2054,  2003,  1996,
         3517,  2193,  1997,  2685,  3687,  1029,   102])"
3242,1,['distribution'], SUMMARY,seg_599,square distribution e(1∕x)=1∕(n − 2). with equality when relationship is,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([ 101, 2675, 4353, 1041, 1006,  100, 1007, 1027,  100, 1006, 1050, 1597,
        1016, 1007, 1012, 2007, 9945, 2043, 3276, 2003,  102])"
3243,1,['linear'], SUMMARY,seg_599,"perfectly linear. 8.112 if x ∼ exp ( ) find e[cex], where",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6669,  7399,  1012,  1022,  1012, 11176,  2065,  1060,   100,
         4654,  2361,  1006,  1007,  2424,  1041,  1031,  8292,  2595,  1033,
         1010,  2073,   102])"
3244,1,"['geometric', 'geometric distribution', 'distribution']", SUMMARY,seg_599,"c is constant. 8.117 if x has geometric distribution,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1039,  2003,  5377,  1012,  1022,  1012, 12567,  2065,  1060,
         2038, 14965,  4353,  1010,   102])"
3245,0,[], SUMMARY,seg_599,"8.118 if x ∼ bino(n, p) prove that 8.114 prove kax+b(t) = kx(at) + bt. e(n − x)2 = nq[n − p(n − 1)].",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012, 12963,  2065,  1060,   100,  8026,  2080,  1006,
         1050,  1010,  1052,  1007,  6011,  2008,  1022,  1012, 12457,  6011,
        10556,  2595,  1009,  1038,  1006,  1056,  1007,  1027,  1047,  2595,
         1006,  2012,  1007,  1009, 18411,  1012,  1041,  1006,  1050,  1597,
         1060,  1007,  1016,  1027,  1050,  4160,  1031,  1050,  1597,  1052,
         1006,  1050,  1597,  1015,  1007,  1033,  1012,   102])"
3246,1,"['convex function', 'function']", SUMMARY,seg_599,"8.115 if g(x) is a convex function, prove",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012, 10630,  2065,  1043,  1006,  1060,  1007,  2003,
         1037, 18309,  3853,  1010,  6011,   102])"
3247,0,['n'], SUMMARY,seg_599,8.119 a consignment of 2n missiles contain ( n,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012, 13285,  1037,  9530,  5332, 16206,  3672,  1997,
         1016,  2078, 10815,  5383,  1006,  1050,   102])"
3248,1,['range'], SUMMARY,seg_599,k) that have a range of 100 + k2 miles.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1047, 1007, 2008, 2031, 1037, 2846, 1997, 2531, 1009, 1047, 2475,
        2661, 1012,  102])"
3249,0,[], SUMMARY,seg_599,"if a group of m missiles are randomly picked up and fired, what is the expected miles covered from the firing point to hitting point?",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2065,  1037,  2177,  1997,  1049, 10815,  2024, 18154,  3856,
         2039,  1998,  5045,  1010,  2054,  2003,  1996,  3517,  2661,  3139,
         2013,  1996,  7493,  2391,  2000,  7294,  2391,  1029,   102])"
3250,1,"['mean', 'variance']", SUMMARY,seg_599,"8.121 if x1,x2, … ,xn are iid each with the same mean   and same variance  2, find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1022,  1012, 12606,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  2024,  2462,  2094,  2169,  2007,
         1996,  2168,  2812,  1998,  2168, 23284,  1016,  1010,  2424,   102])"
3251,1,"['moment', 'variance', 'random', 'second moment']", SUMMARY,seg_599,the second moment and variance of a random sum sn = x1 + x2 + · · · + xn .,tensor(1),"tensor([0., 0., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  2117,  2617,  1998, 23284,  1997,  1037,  6721,  7680,
         1055,  2078,  1027,  1060,  2487,  1009,  1060,  2475,  1009,  1087,
         1087,  1087,  1009,  1060,  2078,  1012,   102])"
3252,0,[], SUMMARY,seg_599,8.122 what is the limiting value of limh ↓ 0(e[ehx − 1)]/h.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012, 13092,  2054,  2003,  1996, 14879,  3643,  1997,
        18525,  2232,  1586,  1014,  1006,  1041,  1031, 15501,  2595,  1597,
         1015,  1007,  1033,  1013,  1044,  1012,   102])"
3253,0,[], SUMMARY,seg_599,8.123 an audio signal s is corrupted 8.124 suppose two fair dice are tossed.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1022,  1012, 13138,  2019,  5746,  4742,  1055,  2003, 27279,
         1022,  1012, 13412,  6814,  2048,  4189, 18740,  2024,  7463,  1012,
          102])"
3254,1,"['function', 'scores', 'density function', 'range', 'random', 'random variables', 'uniformly distributed', 'independent', 'variables', 'expected value']", SUMMARY,seg_599,"with background noise b. if s find the density function of is uniformly distributed in the (x1,x2), where x1 and x2 range −c to +c, but the noise are the scores that show up. b is uniformly distributed in the three random variables u,v,y range 0 to 2d where d c, what are defined as follows: u = is the expected value of signal min{x1,x2}, the minimum score, plus noice? what is the covariv = max{x1,x2}, the maxiance cov(s,b) assuming that sigmum score, and y = x1 + x2, nal and noise are coming from the sum of the scores. find independent sources? e(u),e(v),e(y), and e(y|x1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2007,  4281,  5005,  1038,  1012,  2065,  1055,  2424,  1996,
         4304,  3853,  1997,  2003, 27423,  5500,  1999,  1996,  1006,  1060,
         2487,  1010,  1060,  2475,  1007,  1010,  2073,  1060,  2487,  1998,
         1060,  2475,  2846,  1597,  2278,  2000,  1009,  1039,  1010,  2021,
         1996,  5005,  2024,  1996,  7644,  2008,  2265,  2039,  1012,  1038,
         2003, 27423,  5500,  1999,  1996,  2093,  6721, 10857,  1057,  1010,
         1058,  1010,  1061,  2846,  1014,  2000, 14134,  2073,  1040,  1039,
         1010,  2054,  2024,  4225,  2004,  4076,  1024,  1057,  1027,  2003,
         1996,  3517,  3643,  1997,  4742,  8117,  1063,  1060,  2487,  1010,
         1060,  2475,  1065,  1010,  1996,  6263,  3556,  1010,  4606,  2053,
         6610,  1029,  2054,  2003,  1996,  2522, 10755, 12848,  1027,  4098,
         1063,  1060,  2487,  1010,  1060,  2475,  1065,  1010,  1996, 21510,
         6651,  2522,  2615,  1006,  1055,  1010,  1038,  1007, 10262,  2008,
         9033, 21693,  2819,  3556,  1010,  1998,  1061,  1027,  1060,  2487,
         1009,  1060,  2475,  1010,  6583,  2140,  1998,  5005,  2024,  2746,
         2013,  1996,  7680,  1997,  1996,  7644,  1012,  2424,  2981,  4216,
         1029,  1041,  1006,  1057,  1007,  1010,  1041,  1006,  1058,  1007,
         1010,  1041,  1006,  1061,  1007,  1010,  1998,  1041,  1006,  1061,
         1064,  1060,  2487,  1007,  1012,   102])"
3255,0,[], GENERATING FUNCTIONS,seg_601,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11717,  4972])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
3256,1,['functions'], GENERATING FUNCTIONS,seg_601,◾ understand generating functions and their properties,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([11717,  4972])","tensor([  101,   100,  3305, 11717,  4972,  1998,  2037,  5144,   102])"
3257,1,"['functions', 'function', 'characteristic function']", GENERATING FUNCTIONS,seg_601,◾ comprehend generating functions and characteristic function,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([11717,  4972])","tensor([  101,   100, 22346, 11717,  4972,  1998,  8281,  3853,   102])"
3258,1,"['cumulants', 'functions', 'moments']", GENERATING FUNCTIONS,seg_601,◾ interpret moments and cumulants from generating functions,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 1., 0.])","tensor([11717,  4972])","tensor([  101,   100, 17841,  5312,  1998, 13988,  7068,  7666,  2013, 11717,
         4972,   102])"
3259,1,"['functions', 'discrete']", GENERATING FUNCTIONS,seg_601,◾ explore new type of generating functions for discrete cdf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])","tensor([11717,  4972])","tensor([  101,   100,  8849,  2047,  2828,  1997, 11717,  4972,  2005, 16246,
         3729,  2546,   102])"
3260,0,[], GENERATING FUNCTIONS,seg_601,◾ apply the concepts to practical problems,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([11717,  4972])","tensor([ 101,  100, 6611, 1996, 8474, 2000, 6742, 3471,  102])"
3261,0,[],,seg_603,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([]),"tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
3262,1,['functions'],,seg_603,◾ understand generating functions and their properties,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([]),"tensor([  101,   100,  3305, 11717,  4972,  1998,  2037,  5144,   102])"
3263,1,"['functions', 'function', 'characteristic function']",,seg_603,◾ comprehend generating functions and characteristic function,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0.])",tensor([]),"tensor([  101,   100, 22346, 11717,  4972,  1998,  8281,  3853,   102])"
3264,1,"['cumulants', 'functions', 'moments']",,seg_603,◾ interpret moments and cumulants from generating functions,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 1., 1., 0., 0., 1., 0.])",tensor([]),"tensor([  101,   100, 17841,  5312,  1998, 13988,  7068,  7666,  2013, 11717,
         4972,   102])"
3265,1,"['functions', 'discrete']",,seg_603,◾ explore new type of generating functions for discrete cdf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.])",tensor([]),"tensor([  101,   100,  8849,  2047,  2828,  1997, 11717,  4972,  2005, 16246,
         3729,  2546,   102])"
3266,0,[],,seg_603,◾ apply the concepts to practical problems,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([]),"tensor([ 101,  100, 6611, 1996, 8474, 2000, 6742, 3471,  102])"
3267,1,['functions'],,seg_603,9.1 types of generating functions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([]),"tensor([  101,  1023,  1012,  1015,  4127,  1997, 11717,  4972,   102])"
3268,1,['functions'],,seg_603,"generating functions find a variety of applications in engineering and applied sciences. as the name implies, generating functions are used to generate different quantities with minimal work.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([]),"tensor([  101, 11717,  4972,  2424,  1037,  3528,  1997,  5097,  1999,  3330,
         1998,  4162,  4163,  1012,  2004,  1996,  2171, 12748,  1010, 11717,
         4972,  2024,  2109,  2000,  9699,  2367, 12450,  2007, 10124,  2147,
         1012,   102])"
3269,1,"['dummy variables', 'function', 'coefficients', 'variables']",,seg_603,"definition 9.1 a generating function is a simple and concise expression in one or more dummy variables that captures the coefficients of a finite or infinite power series expansion, and generates a quantity of interest using calculus or algebraic operations, or simple substitutions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([]),"tensor([  101,  6210,  1023,  1012,  1015,  1037, 11717,  3853,  2003,  1037,
         3722,  1998,  9530, 18380,  3670,  1999,  2028,  2030,  2062, 24369,
        10857,  2008, 19566,  1996, 21374,  1997,  1037, 10713,  2030, 10709,
         2373,  2186,  4935,  1010,  1998, 19421,  1037, 11712,  1997,  3037,
         2478, 19276,  2030, 17390,  3136,  1010,  2030,  3722, 20885,  2015,
         1012,   102])"
3270,1,"['function', 'moment', 'linear', 'probability', 'functions', 'random variable', 'probabilities', 'moments', 'random', 'population', 'distribution', 'moment generating function', 'variable']",,seg_603,"depending on what we wish to generate, there are different generating functions. for example, moment generating function (mgf) generates moments of a population and probability generating function generates corresponding probabilities. these are specific to each distribution. an advantage is that if the mgf of an arbitrary random variable x is known, we can mathematically derive the mgf of any linear combination of the form a ∗ x + b. this reasoning holds for other generating functions too.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0., 1., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0.])",tensor([]),"tensor([  101,  5834,  2006,  2054,  2057,  4299,  2000,  9699,  1010,  2045,
         2024,  2367, 11717,  4972,  1012,  2005,  2742,  1010,  2617, 11717,
         3853,  1006, 11460,  2546,  1007, 19421,  5312,  1997,  1037,  2313,
         1998,  9723, 11717,  3853, 19421,  7978,  4013,  3676, 14680,  1012,
         2122,  2024,  3563,  2000,  2169,  4353,  1012,  2019,  5056,  2003,
         2008,  2065,  1996, 11460,  2546,  1997,  2019, 15275,  6721,  8023,
         1060,  2003,  2124,  1010,  2057,  2064,  8045,  2135, 18547,  1996,
        11460,  2546,  1997,  2151,  7399,  5257,  1997,  1996,  2433,  1037,
         1598,  1060,  1009,  1038,  1012,  2023, 13384,  4324,  2005,  2060,
        11717,  4972,  2205,  1012,   102])"
3271,1,"['function', 'coefficients', 'dummy variable', 'variable']",,seg_603,"∞ =0 anxn is called the ordinary generating function (ogf) of {an}. here, x is a dummy variable, n is the indexvar, and a′ns are known constants. for different values of an, we get different ogfs. for example, if all an = 1, we get f (x) = (1 − x)−1, and if an = −1 for n odd and an = +1 for n even, we get (1 + x)−1. similarly, if even coefficients a2n = +1, and odd coefficients a2n+1 = 0, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([]),"tensor([  101,  1601,  1027,  1014,  2019,  2595,  2078,  2003,  2170,  1996,
         6623, 11717,  3853,  1006, 13958,  2546,  1007,  1997,  1063,  2019,
         1065,  1012,  2182,  1010,  1060,  2003,  1037, 24369,  8023,  1010,
         1050,  2003,  1996,  5950, 10755,  1010,  1998,  1037,  1531, 24978,
         2024,  2124,  5377,  2015,  1012,  2005,  2367,  5300,  1997,  2019,
         1010,  2057,  2131,  2367, 13958, 10343,  1012,  2005,  2742,  1010,
         2065,  2035,  2019,  1027,  1015,  1010,  2057,  2131,  1042,  1006,
         1060,  1007,  1027,  1006,  1015,  1597,  1060,  1007,  1597,  2487,
         1010,  1998,  2065,  2019,  1027,  1597,  2487,  2005,  1050,  5976,
         1998,  2019,  1027,  1009,  1015,  2005,  1050,  2130,  1010,  2057,
         2131,  1006,  1015,  1009,  1060,  1007,  1597,  2487,  1012,  6660,
         1010,  2065,  2130, 21374, 22441,  2078,  1027,  1009,  1015,  1010,
         1998,  5976, 21374, 22441,  2078,  1009,  1015,  1027,  1014,  1010,
         2057,  2131,   102])"
3272,1,['function'],,seg_603,(1 − x2)−1. the function g(x) = ∑n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([]),"tensor([ 101, 1006, 1015, 1597, 1060, 2475, 1007, 1597, 2487, 1012, 1996, 3853,
        1043, 1006, 1060, 1007, 1027,  100,  102])"
3273,1,"['functions', 'continuous random variables', 'statistics', 'discrete', 'continuous', 'function', 'sample spaces', 'random variables', 'sample', 'random', 'exponential', 'variables']",,seg_603,"∞ =0 anxn∕n! is called the exponential generating function (egf), where the divisor of the nth term is n!. the generating functions used in statistics can be finite or infinite, because they are defined on (sample spaces of) random variables. the above is a discrete generating function as it is defined for a discrete sequence. they may also be defined on continuous random variables as shown below.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.])",tensor([]),"tensor([  101,  1601,  1027,  1014,   100,   999,  2003,  2170,  1996, 27258,
        11717,  3853,  1006,  1041, 25708,  1007,  1010,  2073,  1996,  4487,
        11365,  2953,  1997,  1996, 23961,  2232,  2744,  2003,  1050,   999,
         1012,  1996, 11717,  4972,  2109,  1999,  6747,  2064,  2022, 10713,
         2030, 10709,  1010,  2138,  2027,  2024,  4225,  2006,  1006,  7099,
         7258,  1997,  1007,  6721, 10857,  1012,  1996,  2682,  2003,  1037,
        16246, 11717,  3853,  2004,  2009,  2003,  4225,  2005,  1037, 16246,
         5537,  1012,  2027,  2089,  2036,  2022,  4225,  2006,  7142,  6721,
        10857,  2004,  3491,  2917,  1012,   102])"
3274,0,[],,seg_603,example 9.1 kth derivative of egf,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([]),"tensor([  101,  2742,  1023,  1012,  1015,  1047,  2705, 13819,  1997,  1041,
        25708,   102])"
3275,1,"['summation', 'coefficients', 'process']",,seg_603,"solution 9.1 consider g (x) = a0 + a1x∕1! + a2x2∕2! + a3x3∕3! + · · · + akxk∕ k! + · · ·. take the derivative with respect to x of both sides. as a0 is a constant, its derivative is zero. use derivative of xn = n ∗ xn−1 for each term to get g′ (x) = a1 + a2x∕1! + a3x2∕2! + · · · + akxk−1∕ (k − 1)! + · · ·. differentiate again (this time a1 being a constant vanishes) to get g′′ (x) = a2 + a3x∕1! + a4x2∕2! + · · · + akxk−2∕ (k − 2)! + · · ·. repeat this process k times. all the terms whose coefficients are below ak will vanish. what remains is g(k) (x) = ak + ak+1x∕1! + ak+2x2∕2! + · · ·. this can be expressed using the summation notation introduced in chapter 1 as g(k) (x) = ∑n",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([]),"tensor([  101,  5576,  1023,  1012,  1015,  5136,  1043,  1006,  1060,  1007,
         1027,  1037,  2692,  1009,   100,   999,  1009,   100,   999,  1009,
          100,   999,  1009,  1087,  1087,  1087,  1009,   100,  1047,   999,
         1009,  1087,  1087,  1087,  1012,  2202,  1996, 13819,  2007,  4847,
         2000,  1060,  1997,  2119,  3903,  1012,  2004,  1037,  2692,  2003,
         1037,  5377,  1010,  2049, 13819,  2003,  5717,  1012,  2224, 13819,
         1997,  1060,  2078,  1027,  1050,  1598,  1060,  2078, 27944,  2005,
         2169,  2744,  2000,  2131,  1043,  1531,  1006,  1060,  1007,  1027,
        17350,  1009,   100,   999,  1009,   100,   999,  1009,  1087,  1087,
         1087,  1009,   100,  1006,  1047,  1597,  1015,  1007,   999,  1009,
         1087,  1087,  1087,  1012, 21032,  2153,  1006,  2023,  2051, 17350,
         2108,  1037,  5377, 25887,  2229,  1007,  2000,  2131,  1043,  1531,
         1531,  1006,  1060,  1007,  1027, 22441,  1009,   100,   999,  1009,
          100,   999,  1009,  1087,  1087,  1087,  1009,   100,  1006,  1047,
         1597,  1016,  1007,   999,  1009,  1087,  1087,  1087,  1012,  9377,
         2023,  2832,  1047,  2335,  1012,  2035,  1996,  3408,  3005, 21374,
         2024,  2917, 17712,  2097, 25887,  1012,  2054,  3464,  2003,  1043,
         1006,  1047,  1007,  1006,  1060,  1007,  1027, 17712,  1009, 17712,
         1009,   100,   999,  1009, 17712,  1009,   100,   999,  1009,  1087,
         1087,  1087,  1012,  2023,  2064,  2022,  5228,  2478,  1996,  7680,
        28649, 14869,  3107,  1999,  3127,  1015,  2004,  1043,  1006,  1047,
         1007,  1006,  1060,  1007,  1027,   100,   102])"
3276,0,['n'],,seg_603,∞ =k anxn−k∕ (n − k)!. using the change of indexvar introduced in section 1.5 this can be written as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0])",tensor([]),"tensor([  101,  1601,  1027,  1047,   100,  1006,  1050,  1597,  1047,  1007,
          999,  1012,  2478,  1996,  2689,  1997,  5950, 10755,  3107,  1999,
         2930,  1015,  1012,  1019,  2023,  2064,  2022,  2517,  2004,   102])"
3277,0,[],,seg_603,solution 9.2 by definition f (x) = a0 + a1x + a2x2 + · · · + anxn + · · ·. expand (1 − x)−1 as a power series 1 + x + x2 + .. and multiply with f(x) to get the rhs,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([]),"tensor([  101,  5576,  1023,  1012,  1016,  2011,  6210,  1042,  1006,  1060,
         1007,  1027,  1037,  2692,  1009, 17350,  2595,  1009, 22441,  2595,
         2475,  1009,  1087,  1087,  1087,  1009,  2019,  2595,  2078,  1009,
         1087,  1087,  1087,  1012,  7818,  1006,  1015,  1597,  1060,  1007,
         1597,  2487,  2004,  1037,  2373,  2186,  1015,  1009,  1060,  1009,
         1060,  2475,  1009,  1012,  1012,  1998,  4800, 22086,  2007,  1042,
         1006,  1060,  1007,  2000,  2131,  1996,  1054,  7898,   102])"
3278,1,['summation'],,seg_603,change the order of summation to get,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([]),"tensor([  101,  2689,  1996,  2344,  1997,  7680, 28649,  2000,  2131,   102])"
3279,0,[],,seg_603,this is the ogf of the given sequence.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([]),"tensor([  101,  2023,  2003,  1996, 13958,  2546,  1997,  1996,  2445,  5537,
         1012,   102])"
3280,1,"['factorial moments', 'function', 'functions', 'even moments', 'cumulant', 'moments', 'factorial']", Generating Functions in Statistics,seg_605,"there are four popular generating functions used in statistics—namely (i) probability generating function (pgf), denoted by px (t), (ii) mgf, denoted by mx (t), (iii) cumulant generating function (cgf), denoted by kx (t), and (iv) characteristic function, denoted by x(t). in addition, there are still others to generate factorial moments (fmgf), inverse moments (imgf), inverse factorial moments (ifmgf), absolute moments, as well as for odd moments and even moments separately. these are called “canonical functions” in some fields.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  1999,  6747])","tensor([  101,  2045,  2024,  2176,  2759, 11717,  4972,  2109,  1999,  6747,
         1517,  8419,  1006,  1045,  1007,  9723, 11717,  3853,  1006, 18720,
         2546,  1007,  1010, 19537,  2011,  1052,  2595,  1006,  1056,  1007,
         1010,  1006,  2462,  1007, 11460,  2546,  1010, 19537,  2011, 25630,
         1006,  1056,  1007,  1010,  1006,  3523,  1007, 13988,  7068,  3372,
        11717,  3853,  1006,  1039, 25708,  1007,  1010, 19537,  2011,  1047,
         2595,  1006,  1056,  1007,  1010,  1998,  1006,  4921,  1007,  8281,
         3853,  1010, 19537,  2011,  1060,  1006,  1056,  1007,  1012,  1999,
         2804,  1010,  2045,  2024,  2145,  2500,  2000,  9699,  5387,  4818,
         5312,  1006,  4718, 25708,  1007,  1010, 19262,  5312,  1006, 10047,
        25708,  1007,  1010, 19262,  5387,  4818,  5312,  1006,  2065, 24798,
         2546,  1007,  1010,  7619,  5312,  1010,  2004,  2092,  2004,  2005,
         5976,  5312,  1998,  2130,  5312, 10329,  1012,  2122,  2024,  2170,
         1523, 18562,  4972,  1524,  1999,  2070,  4249,  1012,   102])"
3281,1,"['function', 'cumulants', 'random variable', 'probabilities', 'characteristic function', 'random', 'distribution', 'factorial', 'variable']", Generating Functions in Statistics,seg_605,"the pgf generates the probabilities of a random variable and is of type ogf. mgf (page 382) has further subdivisions as ordinary, and central mgf, factorial mgf, inverse mgf, inverse factorial mgf, cgf, and characteristic function (chf). all of these can also be defined for arbitrary origin. the cgf is defined in terms of the mgf as kx (t) = ln (mx (t)), which when expanded as a polynomial in t gives the cumulants. as every distribution does not possess an mgf, the concept is extended to the complex domain by defining the chf as  x (t) = e (eitx). note that the logarithm is to the base e (ln). if all of them exist for a distribution, then",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([11717,  4972,  1999,  6747])","tensor([  101,  1996, 18720,  2546, 19421,  1996,  4013,  3676, 14680,  1997,
         1037,  6721,  8023,  1998,  2003,  1997,  2828, 13958,  2546,  1012,
        11460,  2546,  1006,  3931,  4229,  2475,  1007,  2038,  2582, 22095,
         2004,  6623,  1010,  1998,  2430, 11460,  2546,  1010,  5387,  4818,
        11460,  2546,  1010, 19262, 11460,  2546,  1010, 19262,  5387,  4818,
        11460,  2546,  1010,  1039, 25708,  1010,  1998,  8281,  3853,  1006,
        10381,  2546,  1007,  1012,  2035,  1997,  2122,  2064,  2036,  2022,
         4225,  2005, 15275,  4761,  1012,  1996,  1039, 25708,  2003,  4225,
         1999,  3408,  1997,  1996, 11460,  2546,  2004,  1047,  2595,  1006,
         1056,  1007,  1027,  1048,  2078,  1006, 25630,  1006,  1056,  1007,
         1007,  1010,  2029,  2043,  4423,  2004,  1037, 17505,  1999,  1056,
         3957,  1996, 13988,  7068,  7666,  1012,  2004,  2296,  4353,  2515,
         2025, 10295,  2019, 11460,  2546,  1010,  1996,  4145,  2003,  3668,
         2000,  1996,  3375,  5884,  2011, 12854,  1996, 10381,  2546,  2004,
         1060,  1006,  1056,  1007,  1027,  1041,  1006,  1041,  4183,  2595,
         1007,  1012,  3602,  2008,  1996,  8833,  8486,  2705,  2213,  2003,
         2000,  1996,  2918,  1041,  1006,  1048,  2078,  1007,  1012,  2065,
         2035,  1997,  2068,  4839,  2005,  1037,  4353,  1010,  2059,   102])"
3282,1,['table'], Generating Functions in Statistics,seg_605,this can also be written in the alternate forms px (eit) = mx (it) = ekx(it)) =  x (−t) or as px (t) = mx (ln (t)) = ekx(ln(t))) =  x (i ln (t)) (see table 9.1).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  1999,  6747])","tensor([  101,  2023,  2064,  2036,  2022,  2517,  1999,  1996,  6585,  3596,
         1052,  2595,  1006,  1041,  4183,  1007,  1027, 25630,  1006,  2009,
         1007,  1027, 23969,  2595,  1006,  2009,  1007,  1007,  1027,  1060,
         1006,  1597,  2102,  1007,  2030,  2004,  1052,  2595,  1006,  1056,
         1007,  1027, 25630,  1006,  1048,  2078,  1006,  1056,  1007,  1007,
         1027, 23969,  2595,  1006,  1048,  2078,  1006,  1056,  1007,  1007,
         1007,  1027,  1060,  1006,  1045,  1048,  2078,  1006,  1056,  1007,
         1007,  1006,  2156,  2795,  1023,  1012,  1015,  1007,  1012,   102])"
3283,1,"['probabilities', 'random variable', 'random', 'variable']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,the pgf of a random variable is used to generate probabilities. it is defined as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  1996, 18720,  2546,  1997,  1037,  6721,  8023,  2003,  2109,
         2000,  9699,  4013,  3676, 14680,  1012,  2009,  2003,  4225,  2004,
          102])"
3284,1,"['range', 'distributions', 'summation']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"where the summation is over the range of x. this is a finite series for distributions with finite range. it may or may not possess a closed-form expression for other distributions. it converges for |t| 1, and appropriate derivatives exist. differentiating both sides of equation (9.4) k times with respect to t, we get ( k∕ tk)px (t) = k!p (k) +terms involving t. if we put t= 0, all higher-order terms that have “t” or higher powers vanish, giving k! p(k), from which p (k) is obtained as ( k∕ tk)px (0) ∕k!. if the px (t) involves powers or exponents, we take the log (with respect to e) of both sides and differentiate k times, and then use the following result on px (t = 1) to simplify the differentiation.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2073,  1996,  7680, 28649,  2003,  2058,  1996,  2846,  1997,
         1060,  1012,  2023,  2003,  1037, 10713,  2186,  2005, 20611,  2007,
        10713,  2846,  1012,  2009,  2089,  2030,  2089,  2025, 10295,  1037,
         2701,  1011,  2433,  3670,  2005,  2060, 20611,  1012,  2009, 28314,
         2015,  2005,  1064,  1056,  1064,  1015,  1010,  1998,  6413, 16942,
         4839,  1012,  2367, 15370,  2119,  3903,  1997,  8522,  1006,  1023,
         1012,  1018,  1007,  1047,  2335,  2007,  4847,  2000,  1056,  1010,
         2057,  2131,  1006,   100,  1056,  2243,  1007,  1052,  2595,  1006,
         1056,  1007,  1027,  1047,   999,  1052,  1006,  1047,  1007,  1009,
         3408,  5994,  1056,  1012,  2065,  2057,  2404,  1056,  1027,  1014,
         1010,  2035,  3020,  1011,  2344,  3408,  2008,  2031,  1523,  1056,
         1524,  2030,  3020,  4204, 25887,  1010,  3228,  1047,   999,  1052,
         1006,  1047,  1007,  1010,  2013,  2029,  1052,  1006,  1047,  1007,
         2003,  4663,  2004,  1006,   100,  1056,  2243,  1007,  1052,  2595,
         1006,  1014,  1007,   100,   999,  1012,  2065,  1996,  1052,  2595,
         1006,  1056,  1007,  7336,  4204,  2030, 16258, 21576,  2015,  1010,
         2057,  2202,  1996,  8833,  1006,  2007,  4847,  2000,  1041,  1007,
         1997,  2119,  3903,  1998, 21032,  1047,  2335,  1010,  1998,  2059,
         2224,  1996,  2206,  2765,  2006,  1052,  2595,  1006,  1056,  1027,
         1015,  1007,  2000, 21934, 28250,  1996, 20582,  1012,   102])"
3285,1,"['discrete distribution', 'discrete', 'distribution']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,find px(t = 0) and px(t = 1) from the pgf of a discrete distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2424,  1052,  2595,  1006,  1056,  1027,  1014,  1007,  1998,
         1052,  2595,  1006,  1056,  1027,  1015,  1007,  2013,  1996, 18720,
         2546,  1997,  1037, 16246,  4353,  1012,   102])"
3286,1,"['probability', 'probabilities']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"solution 9.3 as ∑kp (k), being the sum of the probabilities, is one, it follows trivially by putting t = 1 in equation (9.4) that is px (t = 1) = 1. put t = 0 in equation (9.4) to get px (t = 0) = p(0), the first probability. similarly, put t = −1 to get the rhs as [p (0) + p (2) + · · · +] − [p (1) + p[3] + p[5] + · · · ].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  5576,  1023,  1012,  1017,  2004,   100,  1006,  1047,  1007,
         1010,  2108,  1996,  7680,  1997,  1996,  4013,  3676, 14680,  1010,
         2003,  2028,  1010,  2009,  4076, 20610,  2135,  2011,  5128,  1056,
         1027,  1015,  1999,  8522,  1006,  1023,  1012,  1018,  1007,  2008,
         2003,  1052,  2595,  1006,  1056,  1027,  1015,  1007,  1027,  1015,
         1012,  2404,  1056,  1027,  1014,  1999,  8522,  1006,  1023,  1012,
         1018,  1007,  2000,  2131,  1052,  2595,  1006,  1056,  1027,  1014,
         1007,  1027,  1052,  1006,  1014,  1007,  1010,  1996,  2034,  9723,
         1012,  6660,  1010,  2404,  1056,  1027,  1597,  2487,  2000,  2131,
         1996,  1054,  7898,  2004,  1031,  1052,  1006,  1014,  1007,  1009,
         1052,  1006,  1016,  1007,  1009,  1087,  1087,  1087,  1009,  1033,
         1597,  1031,  1052,  1006,  1015,  1007,  1009,  1052,  1031,  1017,
         1033,  1009,  1052,  1031,  1019,  1033,  1009,  1087,  1087,  1087,
         1033,  1012,   102])"
3287,1,"['poisson', 'poisson distribution', 'distribution']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,example 9.4 pgf of poisson distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2742,  1023,  1012,  1018, 18720,  2546,  1997, 13433, 24077,
         4353,   102])"
3288,1,"['poisson', 'poisson distribution', 'probabilities', 'distribution']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"find the pgf of a poisson distribution, and obtain the difference between the sum of even and odd probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2424,  1996, 18720,  2546,  1997,  1037, 13433, 24077,  4353,
         1010,  1998,  6855,  1996,  4489,  2090,  1996,  7680,  1997,  2130,
         1998,  5976,  4013,  3676, 14680,  1012,   102])"
3289,1,"['poisson', 'poisson distribution', 'distribution']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,solution 9.4 the pgf of a poisson distribution is ∞ ∞ ( t)x px (t) = e (tx) = ∑ txe−  x∕x! = e− ∑ = e− et  = e− [1−t]. (9.5) x! x=0 x=0,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  5576,  1023,  1012,  1018,  1996, 18720,  2546,  1997,  1037,
        13433, 24077,  4353,  2003,  1601,  1601,  1006,  1056,  1007,  1060,
         1052,  2595,  1006,  1056,  1007,  1027,  1041,  1006, 19067,  1007,
         1027,   100, 19067,  2063, 22543,   100,   999,  1027,  1041, 22543,
          100,  1027,  1041, 22543,  3802,  1027,  1041, 22543,  1031,  1015,
        22543,  2102,  1033,  1012,  1006,  1023,  1012,  1019,  1007,  1060,
          999,  1060,  1027,  1014,  1060,  1027,  1014,   102])"
3290,1,"['geometric', 'geometric distribution', 'distribution']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,example 9.5 pgf of geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2742,  1023,  1012,  1019, 18720,  2546,  1997, 14965,  4353,
          102])"
3291,1,"['geometric', 'probabilities', 'geometric distribution', 'distribution']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"find the pgf of a geometric distribution, and obtain the difference between the sum of even and odd probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2424,  1996, 18720,  2546,  1997,  1037, 14965,  4353,  1010,
         1998,  6855,  1996,  4489,  2090,  1996,  7680,  1997,  2130,  1998,
         5976,  4013,  3676, 14680,  1012,   102])"
3292,1,"['geometric', 'geometric distribution', 'distribution']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"solution 9.5 as the geometric distribution takes x = 0, 1, 2, … ∞ values, we get the pgf as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  5576,  1023,  1012,  1019,  2004,  1996, 14965,  4353,  3138,
         1060,  1027,  1014,  1010,  1015,  1010,  1016,  1010,  1529,  1601,
         5300,  1010,  2057,  2131,  1996, 18720,  2546,  2004,   102])"
3293,1,"['continuous', 'continuous distributions', 'distributions', 'discrete distributions', 'discrete']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,closed-form expressions for px (t) are available for most of the common discrete distributions. they are seldom used for continuous distributions because ∫ txf (x) dx may not be convergent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2701,  1011,  2433, 11423,  2005,  1052,  2595,  1006,  1056,
         1007,  2024,  2800,  2005,  2087,  1997,  1996,  2691, 16246, 20611,
         1012,  2027,  2024, 15839,  2109,  2005,  7142, 20611,  2138,   100,
        19067,  2546,  1006,  1060,  1007,  1040,  2595,  2089,  2025,  2022,
        28314,  3372,  1012,   102])"
3294,0,[], PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"example 9.6 pgf of bino(n, p)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2742,  1023,  1012,  1020, 18720,  2546,  1997,  8026,  2080,
         1006,  1050,  1010,  1052,  1007,   102])"
3295,1,['mean'], PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"find the pgf of bino(n, p) and obtain the mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  2424,  1996, 18720,  2546,  1997,  8026,  2080,  1006,  1050,
         1010,  1052,  1007,  1998,  6855,  1996,  2812,  1012,   102])"
3296,0,[], PROBABILITY GENERATING FUNCTIONS PGF,seg_607,solution 9.6 by definition,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([ 101, 5576, 1023, 1012, 1020, 2011, 6210,  102])"
3297,1,"['mean', 'probability', 'coefficient', 'random variable', 'random', 'variable']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,"the coefficient of tx gives the probability that the random variable takes the value x. to find the mean, we take the log of both sides. then log(px (t)) = n*log(q + pt). differentiate both sides with respect to t to get p′x (t) ∕px (t) = n ∗ p∕ (q + pt). now put t = 1 and use px (t = 1) = 1 to get the rhs as n*p/ (q + p) = np as q + p = 1.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  1996, 19064,  1997, 19067,  3957,  1996,  9723,  2008,  1996,
         6721,  8023,  3138,  1996,  3643,  1060,  1012,  2000,  2424,  1996,
         2812,  1010,  2057,  2202,  1996,  8833,  1997,  2119,  3903,  1012,
         2059,  8833,  1006,  1052,  2595,  1006,  1056,  1007,  1007,  1027,
         1050,  1008,  8833,  1006,  1053,  1009, 13866,  1007,  1012, 21032,
         2119,  3903,  2007,  4847,  2000,  1056,  2000,  2131,  1052,  1531,
         1060,  1006,  1056,  1007,   100,  1006,  1056,  1007,  1027,  1050,
         1598,   100,  1006,  1053,  1009, 13866,  1007,  1012,  2085,  2404,
         1056,  1027,  1015,  1998,  2224,  1052,  2595,  1006,  1056,  1027,
         1015,  1007,  1027,  1015,  2000,  2131,  1996,  1054,  7898,  2004,
         1050,  1008,  1052,  1013,  1006,  1053,  1009,  1052,  1007,  1027,
        27937,  2004,  1053,  1009,  1052,  1027,  1015,  1012,   102])"
3298,1,"['factorial moments', 'table', 'moments', 'factorial']", PROBABILITY GENERATING FUNCTIONS PGF,seg_607,lemma 1 the pgf (e(tx)) can be used to obtain the factorial moments using the relationship  (r) = p(xr) (1) (see table 9.1).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 9723, 11717,  4972, 18720,  2546])","tensor([  101,  3393, 14760,  1015,  1996, 18720,  2546,  1006,  1041,  1006,
        19067,  1007,  1007,  2064,  2022,  2109,  2000,  6855,  1996,  5387,
         4818,  5312,  2478,  1996,  3276,  1006,  1054,  1007,  1027,  1052,
         1006,  1060,  2099,  1007,  1006,  1015,  1007,  1006,  2156,  2795,
         1023,  1012,  1015,  1007,  1012,   102])"
3299,1,"['factorial moment', 'moment', 'factorial']", Properties of PGF,seg_609,"by putting t = 1 in equation 9.8, the rhs becomes e[x (x − 1) · · · (x − r + 1)], which is the rth factorial moment. hence, some authors call this the factorial mgf (see section 9.8, p. 391).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 18720,  2546])","tensor([  101,  2011,  5128,  1056,  1027,  1015,  1999,  8522,  1023,  1012,
         1022,  1010,  1996,  1054,  7898,  4150,  1041,  1031,  1060,  1006,
         1060,  1597,  1015,  1007,  1087,  1087,  1087,  1006,  1060,  1597,
         1054,  1009,  1015,  1007,  1033,  1010,  2029,  2003,  1996, 19387,
         2232,  5387,  4818,  2617,  1012,  6516,  1010,  2070,  6048,  2655,
         2023,  1996,  5387,  4818, 11460,  2546,  1006,  2156,  2930,  1023,
         1012,  1022,  1010,  1052,  1012,  4464,  2487,  1007,  1012,   102])"
3300,1,['results'], Properties of PGF,seg_609,this result follows from the fact that v (x) = e[x2] − e[x]2 = e[x (x − 1)] + e[x] − e[x]2. now use the above results. 1 5. ∫tp (t) dt = e (x+1),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 18720,  2546])","tensor([  101,  2023,  2765,  4076,  2013,  1996,  2755,  2008,  1058,  1006,
         1060,  1007,  1027,  1041,  1031,  1060,  2475,  1033,  1597,  1041,
         1031,  1060,  1033,  1016,  1027,  1041,  1031,  1060,  1006,  1060,
         1597,  1015,  1007,  1033,  1009,  1041,  1031,  1060,  1033,  1597,
         1041,  1031,  1060,  1033,  1016,  1012,  2085,  2224,  1996,  2682,
         3463,  1012,  1015,  1019,  1012,   100,  1006,  1056,  1007, 26718,
         1027,  1041,  1006,  1060,  1009,  1015,  1007,   102])"
3301,1,"['moment', 'random', 'random variables', 'variables']", Properties of PGF,seg_609,"this is the first inverse moment, and holds for positive random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5144,  1997, 18720,  2546])","tensor([  101,  2023,  2003,  1996,  2034, 19262,  2617,  1010,  1998,  4324,
         2005,  3893,  6721, 10857,  1012,   102])"
3302,0,[], Properties of PGF,seg_609,this follows by writing tcx as (tc)x .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997, 18720,  2546])","tensor([  101,  2023,  4076,  2011,  3015, 22975,  2595,  2004,  1006, 22975,
         1007,  1060,  1012,   102])"
3303,1,"['change of origin', 'change of origin and scale', 'transformation']", Properties of PGF,seg_609,this is called the change of origin and scale transformation of pgf. this follows by combining (6) and (7).,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997, 18720,  2546])","tensor([  101,  2023,  2003,  2170,  1996,  2689,  1997,  4761,  1998,  4094,
         8651,  1997, 18720,  2546,  1012,  2023,  4076,  2011, 11566,  1006,
         1020,  1007,  1998,  1006,  1021,  1007,  1012,   102])"
3304,1,"['tail', 'random variable', 'probabilities', 'tail probabilities', 'random', 'variable']", GENERATING FUNCTIONS FOR CDF GFCDF,seg_611,"as the pgf of a random variable generates probabilities, it can be used to generate the sum of left tail probabilities (cdf) as follows. we have seen in example 9.2 that if f(x) is the ogf of the sequence a0, a1, … , an, … , finite or infinite, then f(x)/(1−x) is the ogf of the sequence a0, a0 + a1, a0 + a1 + a2, … by replacing ai’s by probabilities, we obtain a gf that generates the sum of probabilities as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0.])","tensor([11717,  4972,  2005,  3729,  2546,  1043, 11329, 20952])","tensor([  101,  2004,  1996, 18720,  2546,  1997,  1037,  6721,  8023, 19421,
         4013,  3676, 14680,  1010,  2009,  2064,  2022,  2109,  2000,  9699,
         1996,  7680,  1997,  2187,  5725,  4013,  3676, 14680,  1006,  3729,
         2546,  1007,  2004,  4076,  1012,  2057,  2031,  2464,  1999,  2742,
         1023,  1012,  1016,  2008,  2065,  1042,  1006,  1060,  1007,  2003,
         1996, 13958,  2546,  1997,  1996,  5537,  1037,  2692,  1010, 17350,
         1010,  1529,  1010,  2019,  1010,  1529,  1010, 10713,  2030, 10709,
         1010,  2059,  1042,  1006,  1060,  1007,  1013,  1006,  1015, 22543,
         2595,  1007,  2003,  1996, 13958,  2546,  1997,  1996,  5537,  1037,
         2692,  1010,  1037,  2692,  1009, 17350,  1010,  1037,  2692,  1009,
        17350,  1009, 22441,  1010,  1529,  2011,  6419,  9932,  1521,  1055,
         2011,  4013,  3676, 14680,  1010,  2057,  6855,  1037,  1043,  2546,
         2008, 19421,  1996,  7680,  1997,  4013,  3676, 14680,  2004,   102])"
3305,1,"['distributions', 'discrete distributions', 'discrete']", GENERATING FUNCTIONS FOR CDF GFCDF,seg_611,this works only for discrete distributions.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([11717,  4972,  2005,  3729,  2546,  1043, 11329, 20952])","tensor([  101,  2023,  2573,  2069,  2005, 16246, 20611,  1012,   102])"
3306,1,"['geometric', 'geometric distribution', 'distribution']", GENERATING FUNCTIONS FOR CDF GFCDF,seg_611,example 9.7 gf for cdf of geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([11717,  4972,  2005,  3729,  2546,  1043, 11329, 20952])","tensor([  101,  2742,  1023,  1012,  1021,  1043,  2546,  2005,  3729,  2546,
         1997, 14965,  4353,   102])"
3307,1,"['geometric', 'geometric distribution', 'distribution']", GENERATING FUNCTIONS FOR CDF GFCDF,seg_611,obtain the gf for cdf of a geometric distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([11717,  4972,  2005,  3729,  2546,  1043, 11329, 20952])","tensor([  101,  6855,  1996,  1043,  2546,  2005,  3729,  2546,  1997,  1037,
        14965,  4353,  1012,   102])"
3308,1,"['geometric', 'geometric distribution', 'distribution']", GENERATING FUNCTIONS FOR CDF GFCDF,seg_611,solution 9.7 we know that the pgf of geometric distribution is p∕ (1 − qt) from which the gfcdf is obtained as g (t) = p(1 − t)−1∕ (1 − qt). expand both (1 − t)−1 and (1 − qt)−1 as infinite series’ and combine like powers to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  3729,  2546,  1043, 11329, 20952])","tensor([  101,  5576,  1023,  1012,  1021,  2057,  2113,  2008,  1996, 18720,
         2546,  1997, 14965,  4353,  2003,   100,  1006,  1015,  1597,  1053,
         2102,  1007,  2013,  2029,  1996,  1043, 11329, 20952,  2003,  4663,
         2004,  1043,  1006,  1056,  1007,  1027,  1052,  1006,  1015,  1597,
         1056,  1007,   100,  1006,  1015,  1597,  1053,  2102,  1007,  1012,
         7818,  2119,  1006,  1015,  1597,  1056,  1007,  1597,  2487,  1998,
         1006,  1015,  1597,  1053,  2102,  1007,  1597,  2487,  2004, 10709,
         2186,  1521,  1998, 11506,  2066,  4204,  2000,  2131,   102])"
3309,1,"['geometric', 'function']", GENERATING FUNCTIONS FOR CDF GFCDF,seg_611,write (1 + q + q2 + q3 + · · · + qk) as (1 − qk+1) ∕ (1 − q) and cancel (1 − q) = p with the numerator to get the generating function for geometric cdf as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 1., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  3729,  2546,  1043, 11329, 20952])","tensor([  101,  4339,  1006,  1015,  1009,  1053,  1009,  1053,  2475,  1009,
         1053,  2509,  1009,  1087,  1087,  1087,  1009,  1053,  2243,  1007,
         2004,  1006,  1015,  1597,  1053,  2243,  1009,  1015,  1007,   100,
         1006,  1015,  1597,  1053,  1007,  1998, 17542,  1006,  1015,  1597,
         1053,  1007,  1027,  1052,  2007,  1996, 16371,  5017,  8844,  2000,
         2131,  1996, 11717,  3853,  2005, 14965,  3729,  2546,  2004,   102])"
3310,1,"['mean', 'distributions', 'deviations', 'discrete distributions', 'discrete']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,the above result can be extended to obtain a gf for mean deviations of discrete distributions. we have seen in chapter 6 that the md of discrete distributions is given by,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  1996,  2682,  2765,  2064,  2022,  3668,  2000,  6855,  1037,
         1043,  2546,  2005,  2812, 24353,  2015,  1997, 16246, 20611,  1012,
         2057,  2031,  2464,  1999,  3127,  1020,  2008,  1996,  9108,  1997,
        16246, 20611,  2003,  2445,  2011,   102])"
3311,1,"['mean', 'arithmetic mean', 'limit', 'distribution']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,"where ll is the lower limit of the distribution,   is the arithmetic mean, and f(x) is the cdf. to obtain a gf for md, first rewrite equation (9.9) as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  2073,  2222,  2003,  1996,  2896,  5787,  1997,  1996,  4353,
         1010,  2003,  1996, 20204,  2812,  1010,  1998,  1042,  1006,  1060,
         1007,  2003,  1996,  3729,  2546,  1012,  2000,  6855,  1037,  1043,
         2546,  2005,  9108,  1010,  2034,  2128, 26373,  8522,  1006,  1023,
         1012,  1023,  1007,  2004,   102])"
3312,1,['probabilities'], GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,where gk denotes the sum of probabilities. multiply both sides by (1 − t)−1 and denote the lhs (1 − t)−1g (t) by h(t) to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  2073,  1043,  2243, 14796,  1996,  7680,  1997,  4013,  3676,
        14680,  1012,  4800, 22086,  2119,  3903,  2011,  1006,  1015,  1597,
         1056,  1007,  1597,  2487,  1998, 19090,  1996,  1048,  7898,  1006,
         1015,  1597,  1056,  1007,  1597,  2487,  2290,  1006,  1056,  1007,
         2011,  1044,  1006,  1056,  1007,  2000,  2131,   102])"
3313,1,"['tail', 'coefficients', 'coefficient', 'probabilities', 'tail probabilities']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,"the above step is equivalent to applying the result in example 9.2 in page 376 where pk = gk. as coefficients of h(t) accumulate the sum of the cdf (“sum of the sum” of left tail probabilities), the md is easily found as twice the coefficient of t −1 in h(t). this can be stated as the following theorem.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  1996,  2682,  3357,  2003,  5662,  2000, 11243,  1996,  2765,
         1999,  2742,  1023,  1012,  1016,  1999,  3931,  4261,  2575,  2073,
         1052,  2243,  1027,  1043,  2243,  1012,  2004, 21374,  1997,  1044,
         1006,  1056,  1007, 27598,  1996,  7680,  1997,  1996,  3729,  2546,
         1006,  1523,  7680,  1997,  1996,  7680,  1524,  1997,  2187,  5725,
         4013,  3676, 14680,  1007,  1010,  1996,  9108,  2003,  4089,  2179,
         2004,  3807,  1996, 19064,  1997,  1056,  1597,  2487,  1999,  1044,
         1006,  1056,  1007,  1012,  2023,  2064,  2022,  3090,  2004,  1996,
         2206,  9872,  1012,   102])"
3314,1,"['mean', 'function', 'probability', 'coefficient', 'distribution', 'discrete distribution', 'discrete']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,"theorem 9.1 the md of a discrete distribution is twice the coefficient of t −1 in the power series expansion of (1 − t)−2px (t), where   is the mean (or the nearest integer to it) and px (t) is the probability generating function.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  9872,  1023,  1012,  1015,  1996,  9108,  1997,  1037, 16246,
         4353,  2003,  3807,  1996, 19064,  1997,  1056,  1597,  2487,  1999,
         1996,  2373,  2186,  4935,  1997,  1006,  1015,  1597,  1056,  1007,
         1597,  2475,  2361,  2595,  1006,  1056,  1007,  1010,  2073,  2003,
         1996,  2812,  1006,  2030,  1996,  7205, 16109,  2000,  2009,  1007,
         1998,  1052,  2595,  1006,  1056,  1007,  2003,  1996,  9723, 11717,
         3853,  1012,   102])"
3315,1,"['tail', 'tail probabilities', 'probabilities', 'right tail probabilities']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,"in the above derivation, we have marked the probabilities as p1, p2, and so on. if they are denoted as p0, p1, p2, and so on, we need to consider the sums p0 + p1 and so on. a similar result could be obtained using right tail probabilities.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  1999,  1996,  2682, 29280,  1010,  2057,  2031,  4417,  1996,
         4013,  3676, 14680,  2004,  1052,  2487,  1010,  1052,  2475,  1010,
         1998,  2061,  2006,  1012,  2065,  2027,  2024, 19537,  2004,  1052,
         2692,  1010,  1052,  2487,  1010,  1052,  2475,  1010,  1998,  2061,
         2006,  1010,  2057,  2342,  2000,  5136,  1996, 20571,  1052,  2692,
         1009,  1052,  2487,  1998,  2061,  2006,  1012,  1037,  2714,  2765,
         2071,  2022,  4663,  2478,  2157,  5725,  4013,  3676, 14680,  1012,
          102])"
3316,1,"['geometric', 'geometric distribution', 'distribution']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,example 9.8 md of geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  2742,  1023,  1012,  1022,  9108,  1997, 14965,  4353,   102])"
3317,1,"['geometric', 'geometric distribution', 'distribution']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,find the md of geometric distribution using theorem 9.1.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  2424,  1996,  9108,  1997, 14965,  4353,  2478,  9872,  1023,
         1012,  1015,  1012,   102])"
3318,1,"['geometric', 'geometric distribution', 'distribution']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,solution 9.8 we have seen in example 9.7 in page 381 that the gf for cdf of a geometric distribution is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101,  5576,  1023,  1012,  1022,  2057,  2031,  2464,  1999,  2742,
         1023,  1012,  1021,  1999,  3931, 29335,  2008,  1996,  1043,  2546,
         2005,  3729,  2546,  1997,  1037, 14965,  4353,  2003,   102])"
3319,1,"['mean', 'coefficients', 'coefficient', 'integer part', 'distribution']", GENERATING FUNCTIONS FOR MEAN DEVIATION GFMD,seg_613,"denote (1 − qk+1) by gk (note that there is no (1 − q) term in equation (9.15) showing that the md is zero when q p or equivalently p 1/2) and obtain the gfmd with coefficients hk = ∑ gk = ∑(1 − qk+1). as the mean of a geometric distribution is q/p, we can simply fetch the coefficient of t −1 = t[q∕p−1] in [q∕p−1] h (t) and multiply by 2 to get the md as 2 ∑k=0 (1 − qk+1), where [q∕p − 1] denotes the integer part. see chapter 6, p. 217 for further simplifications.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11717,  4972,  2005,  2812, 24353,  1043, 16715,  2094])","tensor([  101, 19090,  1006,  1015,  1597,  1053,  2243,  1009,  1015,  1007,
         2011,  1043,  2243,  1006,  3602,  2008,  2045,  2003,  2053,  1006,
         1015,  1597,  1053,  1007,  2744,  1999,  8522,  1006,  1023,  1012,
         2321,  1007,  4760,  2008,  1996,  9108,  2003,  5717,  2043,  1053,
         1052,  2030,  5662,  2135,  1052,  1015,  1013,  1016,  1007,  1998,
         6855,  1996,  1043, 16715,  2094,  2007, 21374, 22563,  1027,   100,
         1043,  2243,  1027,   100,  1006,  1015,  1597,  1053,  2243,  1009,
         1015,  1007,  1012,  2004,  1996,  2812,  1997,  1037, 14965,  4353,
         2003,  1053,  1013,  1052,  1010,  2057,  2064,  3432, 18584,  1996,
        19064,  1997,  1056,  1597,  2487,  1027,  1056,  1031,   100,  1033,
         1999,  1031,   100,  1033,  1044,  1006,  1056,  1007,  1998,  4800,
        22086,  2011,  1016,  2000,  2131,  1996,  9108,  2004,  1016,   100,
         1027,  1014,  1006,  1015,  1597,  1053,  2243,  1009,  1015,  1007,
         1010,  2073,  1031,   100,  1597,  1015,  1033, 14796,  1996, 16109,
         2112,  1012,  2156,  3127,  1020,  1010,  1052,  1012, 20335,  2005,
         2582, 21934, 24759,  9031,  2015,  1012,   102])"
3320,1,"['discrete random variable', 'discrete', 'random variable', 'moments', 'random', 'expectation', 'variable']", MOMENT GENERATING FUNCTIONS MGF,seg_615,"the mgf of a random variable is used to generate the moments algebraically. let x be a discrete random variable defined for all values of x. as etx has an infinite expansion in powers of x as etx = 1 + (tx) ∕1! + (tx)2∕2! + · · · + (tx)n∕n! + · · ·, we multiply both the sides by f(x), and take expectation on both the sides to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  1996, 11460,  2546,  1997,  1037,  6721,  8023,  2003,  2109,
         2000,  9699,  1996,  5312, 17390,  3973,  1012,  2292,  1060,  2022,
         1037, 16246,  6721,  8023,  4225,  2005,  2035,  5300,  1997,  1060,
         1012,  2004,  3802,  2595,  2038,  2019, 10709,  4935,  1999,  4204,
         1997,  1060,  2004,  3802,  2595,  1027,  1015,  1009,  1006, 19067,
         1007,   100,   999,  1009,  1006, 19067,  1007,   100,   999,  1009,
         1087,  1087,  1087,  1009,  1006, 19067,  1007,   100,   999,  1009,
         1087,  1087,  1087,  1010,  2057,  4800, 22086,  2119,  1996,  3903,
         2011,  1042,  1006,  1060,  1007,  1010,  1998,  2202, 17626,  2006,
         2119,  1996,  3903,  2000,  2131,   102])"
3321,1,['discrete'], MOMENT GENERATING FUNCTIONS MGF,seg_615,⎧⎪∑ etxp (x) if x is discrete; mx (t) = e (etx) = ⎨ x,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,   100,  3802,  2595,  2361,  1006,  1060,  1007,  2065,  1060,
         2003, 16246,  1025, 25630,  1006,  1056,  1007,  1027,  1041,  1006,
         3802,  2595,  1007,  1027,   100,  1060,   102])"
3322,1,['continuous'], MOMENT GENERATING FUNCTIONS MGF,seg_615,∞ ∞ etxf x dx if x is continuous. ⎪ ( ),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([ 101, 1601, 1601, 3802, 2595, 2546, 1060, 1040, 2595, 2065, 1060, 2003,
        7142, 1012,  100, 1006, 1007,  102])"
3323,1,"['discrete', 'case']", MOMENT GENERATING FUNCTIONS MGF,seg_615,"in the discrete case, this becomes mx (t) = ∑x",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  1999,  1996, 16246,  2553,  1010,  2023,  4150, 25630,  1006,
         1056,  1007,  1027,   100,   102])"
3324,1,['distribution'], MOMENT GENERATING FUNCTIONS MGF,seg_615,"∞ =0 xkf (x) by  k to obtain the following series (which is theoretically defined for all values, but depends on the distribution)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  1601,  1027,  1014,  1060,  2243,  2546,  1006,  1060,  1007,
         2011,  1047,  2000,  6855,  1996,  2206,  2186,  1006,  2029,  2003,
        22634,  4225,  2005,  2035,  5300,  1010,  2021,  9041,  2006,  1996,
         4353,  1007,   102])"
3325,1,"['continuous', 'random', 'random variables', 'variables', 'summation', 'case']", MOMENT GENERATING FUNCTIONS MGF,seg_615,"analogous result holds for the continuous case by replacing summation by integration. by choosing |t| 1, the above series can be made convergent for most random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101, 19639,  2765,  4324,  2005,  1996,  7142,  2553,  2011,  6419,
         7680, 28649,  2011,  8346,  1012,  2011, 10549,  1064,  1056,  1064,
         1015,  1010,  1996,  2682,  2186,  2064,  2022,  2081, 28314,  3372,
         2005,  2087,  6721, 10857,  1012,   102])"
3326,1,"['continuous', 'continuous random variables', 'random', 'random variables', 'variables']", MOMENT GENERATING FUNCTIONS MGF,seg_615,proof: this follows trivially by replacing t by et in equation (9.4). note that it is also applicable to continuous random variables. put t = 0 and use e0 = 1 to get the second part.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  6947,  1024,  2023,  4076, 20610,  2135,  2011,  6419,  1056,
         2011,  3802,  1999,  8522,  1006,  1023,  1012,  1018,  1007,  1012,
         3602,  2008,  2009,  2003,  2036, 12711,  2000,  7142,  6721, 10857,
         1012,  2404,  1056,  1027,  1014,  1998,  2224,  1041,  2692,  1027,
         1015,  2000,  2131,  1996,  2117,  2112,  1012,   102])"
3327,1,"['binomial distribution', 'binomial', 'distribution']", MOMENT GENERATING FUNCTIONS MGF,seg_615,example 9.9 mgf of binomial distribution from pgf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  2742,  1023,  1012,  1023, 11460,  2546,  1997,  8026, 20936,
         2389,  4353,  2013, 18720,  2546,   102])"
3328,1,['mean'], MOMENT GENERATING FUNCTIONS MGF,seg_615,"if the pgf of bino(n, p) is (q + pt)n, obtain the mgf and derive the mean.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  2065,  1996, 18720,  2546,  1997,  8026,  2080,  1006,  1050,
         1010,  1052,  1007,  2003,  1006,  1053,  1009, 13866,  1007,  1050,
         1010,  6855,  1996, 11460,  2546,  1998, 18547,  1996,  2812,  1012,
          102])"
3329,1,['mean'], MOMENT GENERATING FUNCTIONS MGF,seg_615,get the mean as np. take log again to get log (mx ′ (t)) − log (mx (t)) =,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  2131,  1996,  2812,  2004, 27937,  1012,  2202,  8833,  2153,
         2000,  2131,  8833,  1006, 25630,  1531,  1006,  1056,  1007,  1007,
         1597,  8833,  1006, 25630,  1006,  1056,  1007,  1007,  1027,   102])"
3330,0,[], MOMENT GENERATING FUNCTIONS MGF,seg_615,"log (np) + t − log (q + pet). differentiate again, and denote mx",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  8833,  1006, 27937,  1007,  1009,  1056,  1597,  8833,  1006,
         1053,  1009,  9004,  1007,  1012, 21032,  2153,  1010,  1998, 19090,
        25630,   102])"
3331,1,"['exponential', 'exponential distribution', 'distribution']", MOMENT GENERATING FUNCTIONS MGF,seg_615,example 9.10 mgf of exponential distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  2742,  1023,  1012,  2184, 11460,  2546,  1997, 27258,  4353,
          102])"
3332,1,"['exponential', 'exponential distribution', 'distribution']", MOMENT GENERATING FUNCTIONS MGF,seg_615,obtain the mgf of an exponential distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 2617, 11717,  4972, 11460,  2546])","tensor([  101,  6855,  1996, 11460,  2546,  1997,  2019, 27258,  4353,  1012,
          102])"
3333,1,['variable'], Properties of Moment Generating Functions,seg_617,1. mgf of an origin changed variate can be found from mgf of original variable,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1015,  1012, 11460,  2546,  1997,  2019,  4761,  2904, 13075,
        13143,  2064,  2022,  2179,  2013, 11460,  2546,  1997,  2434,  8023,
          102])"
3334,1,['variable'], Properties of Moment Generating Functions,seg_617,2. mgf of a scale changed variate can be found from mgf of original variable as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1016,  1012, 11460,  2546,  1997,  1037,  4094,  2904, 13075,
        13143,  2064,  2022,  2179,  2013, 11460,  2546,  1997,  2434,  8023,
         2004,   102])"
3335,1,['variable'], Properties of Moment Generating Functions,seg_617,3. mgf of origin and scale changed variate can be found from mgf of original variable as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1017,  1012, 11460,  2546,  1997,  4761,  1998,  4094,  2904,
        13075, 13143,  2064,  2022,  2179,  2013, 11460,  2546,  1997,  2434,
         8023,  2004,   102])"
3336,1,['cases'], Properties of Moment Generating Functions,seg_617,this follows by combining both the cases above.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2023,  4076,  2011, 11566,  2119,  1996,  3572,  2682,  1012,
          102])"
3337,1,"['random', 'random variables', 'independent random variables', 'variables', 'independent']", Properties of Moment Generating Functions,seg_617,theorem 9.3 the mgf of a sum of independent random variables is the product of their mgfs. symbolically mx+y (t) = mx (t) ∗ my (t).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  9872,  1023,  1012,  1017,  1996, 11460,  2546,  1997,  1037,
         7680,  1997,  2981,  6721, 10857,  2003,  1996,  4031,  1997,  2037,
        11460, 10343,  1012, 12613,  3973, 25630,  1009,  1061,  1006,  1056,
         1007,  1027, 25630,  1006,  1056,  1007,  1598,  2026,  1006,  1056,
         1007,  1012,   102])"
3338,1,"['continuous', 'discrete', 'pairwise independent', 'random', 'random variables', 'independent', 'independent random variables', 'variables', 'case']", Properties of Moment Generating Functions,seg_617,"proof: we prove the result for the discrete case. mx+y (t) = e (et(x+y)) = e (etxety). if x and y are independent, we write the rhs as ∑xetxf (x) ∗ ∑yetyf (y) = mx (t) ∗ my (t). the proof for the continuous case follows similarly. this result can be extended to any number of pairwise independent random variables.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  6947,  1024,  2057,  6011,  1996,  2765,  2005,  1996, 16246,
         2553,  1012, 25630,  1009,  1061,  1006,  1056,  1007,  1027,  1041,
         1006,  3802,  1006,  1060,  1009,  1061,  1007,  1007,  1027,  1041,
         1006,  3802,  2595, 27405,  1007,  1012,  2065,  1060,  1998,  1061,
         2024,  2981,  1010,  2057,  4339,  1996,  1054,  7898,  2004,   100,
         1006,  1060,  1007,  1598,   100,  1006,  1061,  1007,  1027, 25630,
         1006,  1056,  1007,  1598,  2026,  1006,  1056,  1007,  1012,  1996,
         6947,  2005,  1996,  7142,  2553,  4076,  6660,  1012,  2023,  2765,
         2064,  2022,  3668,  2000,  2151,  2193,  1997,  3940, 14244,  2981,
         6721, 10857,  1012,   102])"
3339,1,['independent'], Properties of Moment Generating Functions,seg_617,"if x1,x2, … ,xn are independent, and y = ∑ixi then my (t) = ∏imxi (t).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([ 101, 2065, 1060, 2487, 1010, 1060, 2475, 1010, 1529, 1010, 1060, 2078,
        2024, 2981, 1010, 1998, 1061, 1027,  100, 2059, 2026, 1006, 1056, 1007,
        1027,  100, 1006, 1056, 1007, 1012,  102])"
3340,1,['moments'], Properties of Moment Generating Functions,seg_617,example 9.11 moments from mx (t),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2742,  1023,  1012,  2340,  5312,  2013, 25630,  1006,  1056,
         1007,   102])"
3341,0,[], Properties of Moment Generating Functions,seg_617,with rspect to t gives  ,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2007, 12667,  5051,  6593,  2000,  1056,  3957,   102])"
3342,1,['variable'], Properties of Moment Generating Functions,seg_617,"  t etx) = e (xetx) because x is considered as a constant (and t is our variable). putting t = 0 on the rhs  2 we get the result, as e0 = 1. differentiating a second time, we get  t2 mx (t) =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1056,  3802,  2595,  1007,  1027,  1041,  1006,  1060,  3388,
         2595,  1007,  2138,  1060,  2003,  2641,  2004,  1037,  5377,  1006,
         1998,  1056,  2003,  2256,  8023,  1007,  1012,  5128,  1056,  1027,
         1014,  2006,  1996,  1054,  7898,  1016,  2057,  2131,  1996,  2765,
         1010,  2004,  1041,  2692,  1027,  1015,  1012,  2367, 15370,  1037,
         2117,  2051,  1010,  2057,  2131,  1056,  2475, 25630,  1006,  1056,
         1007,  1027,   102])"
3343,1,['moment'], Properties of Moment Generating Functions,seg_617,′′ (t = 0) = e (x2). repeated application of this operation allows us to find the kth moment as mx (k) (t = 0) = e (xk). this gives  2 = mx ′′ (t = 0) − [mx ′ (t = 0)]2.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1531,  1531,  1006,  1056,  1027,  1014,  1007,  1027,  1041,
         1006,  1060,  2475,  1007,  1012,  5567,  4646,  1997,  2023,  3169,
         4473,  2149,  2000,  2424,  1996,  1047,  2705,  2617,  2004, 25630,
         1006,  1047,  1007,  1006,  1056,  1027,  1014,  1007,  1027,  1041,
         1006,  1060,  2243,  1007,  1012,  2023,  3957,  1016,  1027, 25630,
         1531,  1531,  1006,  1056,  1027,  1014,  1007,  1597,  1031, 25630,
         1531,  1006,  1056,  1027,  1014,  1007,  1033,  1016,  1012,   102])"
3344,0,[], Properties of Moment Generating Functions,seg_617,"example 9.12 mgf of bino(n, p)",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2742,  1023,  1012,  2260, 11460,  2546,  1997,  8026,  2080,
         1006,  1050,  1010,  1052,  1007,   102])"
3345,1,['moments'], Properties of Moment Generating Functions,seg_617,"find the mgf of bino(n, p), and obtain the first two moments.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2424,  1996, 11460,  2546,  1997,  8026,  2080,  1006,  1050,
         1010,  1052,  1007,  1010,  1998,  6855,  1996,  2034,  2048,  5312,
         1012,   102])"
3346,1,"['poisson', 'poisson distribution', 'distribution']", Properties of Moment Generating Functions,seg_617,example 9.13 mgf of a poisson distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2742,  1023,  1012,  2410, 11460,  2546,  1997,  1037, 13433,
        24077,  4353,   102])"
3347,1,"['poisson', 'moments', 'distribution', 'poisson distribution']", Properties of Moment Generating Functions,seg_617,"find the mgf for central moments of a poisson distribution. hence, show that",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2424,  1996, 11460,  2546,  2005,  2430,  5312,  1997,  1037,
        13433, 24077,  4353,  1012,  6516,  1010,  2265,  2008,   102])"
3348,0,['e'], Properties of Moment Generating Functions,seg_617,solution 9.13 first consider the ordinary mgf defined as mx (t) = e (etx) =,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  5576,  1023,  1012,  2410,  2034,  5136,  1996,  6623, 11460,
         2546,  4225,  2004, 25630,  1006,  1056,  1007,  1027,  1041,  1006,
         3802,  2595,  1007,  1027,   102])"
3349,1,"['poisson', 'poisson distribution', 'distribution']", Properties of Moment Generating Functions,seg_617,"mean of a poisson distribution is   =  , we use the property 1 to get",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2812,  1997,  1037, 13433, 24077,  4353,  2003,  1027,  1010,
         2057,  2224,  1996,  3200,  1015,  2000,  2131,   102])"
3350,0,[], Properties of Moment Generating Functions,seg_617,expand et as an infinite series. the rhs becomes  ∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  7818,  3802,  2004,  2019, 10709,  2186,  1012,  1996,  1054,
         7898,  4150,   100,   102])"
3351,0,[], Properties of Moment Generating Functions,seg_617,can be written as  ∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([ 101, 2064, 2022, 2517, 2004,  100,  102])"
3352,1,['coefficients'], Properties of Moment Generating Functions,seg_617,∞ =0  jt j+k∕[j!k!]. equate coefficients of tr on both,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1601,  1027,  1014,  1046,  2102,  1046,  1009,   100,  1031,
         1046,   999,  1047,   999,  1033,  1012,  1041, 16211,  2618, 21374,
         1997, 19817,  2006,  2119,   102])"
3353,1,"['binomial coefficients', 'coefficients', 'binomial']", Properties of Moment Generating Functions,seg_617,"0 r)!]. cross-multiplying and identifying the binomial coefficients, this becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1014,  1054,  1007,   999,  1033,  1012,  2892,  1011,  4800,
        22086,  2075,  1998, 12151,  1996,  8026, 20936,  2389, 21374,  1010,
         2023,  4150,   102])"
3354,1,"['continuous', 'summation', 'discrete', 'case']", Properties of Moment Generating Functions,seg_617,"proof: we prove the result for the continuous case. the proof for discrete case follows easily by replacing integration by summation. as e[|x|k] exists, we have ∫x|x|kdf (x)   ∞. now consider an arbitrary j   k for which",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  6947,  1024,  2057,  6011,  1996,  2765,  2005,  1996,  7142,
         2553,  1012,  1996,  6947,  2005, 16246,  2553,  4076,  4089,  2011,
         6419,  8346,  2011,  7680, 28649,  1012,  2004,  1041,  1031,  1064,
         1060,  1064,  1047,  1033,  6526,  1010,  2057,  2031,   100,  1064,
         1060,  1064,  1047, 20952,  1006,  1060,  1007,  1601,  1012,  2085,
         5136,  2019, 15275,  1046,  1047,  2005,  2029,   102])"
3355,0,[], Properties of Moment Generating Functions,seg_617,"the rhs of equation (9.24) is upper bounded by 1 + e[|x|k], and is  ∞. this proves that the lhs exists for each j.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  1996,  1054,  7898,  1997,  8522,  1006,  1023,  1012,  2484,
         1007,  2003,  3356, 10351,  2011,  1015,  1009,  1041,  1031,  1064,
         1060,  1064,  1047,  1033,  1010,  1998,  2003,  1601,  1012,  2023,
        16481,  2008,  1996,  1048,  7898,  6526,  2005,  2169,  1046,  1012,
          102])"
3356,1,"['gamma', 'gamma distribution', 'distribution']", Properties of Moment Generating Functions,seg_617,example 9.14 mgf of a gamma distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2742,  1023,  1012,  2403, 11460,  2546,  1997,  1037, 13091,
         4353,   102])"
3357,1,"['gamma', 'moments', 'gamma distribution', 'distribution']", Properties of Moment Generating Functions,seg_617,"find the mgf of a gamma distribution f (x) =  me− xxm−1∕γ (m), where x ≥ 0 and     0, and obtain the first two moments.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2424,  1996, 11460,  2546,  1997,  1037, 13091,  4353,  1042,
         1006,  1060,  1007,  1027,  2033, 22543,   100,  1006,  1049,  1007,
         1010,  2073,  1060,  1609,  1014,  1998,  1014,  1010,  1998,  6855,
         1996,  2034,  2048,  5312,  1012,   102])"
3358,1,['moment'], Properties of Moment Generating Functions,seg_617,"−m∕ (1 − t∕ ) (−1∕ ) from which by putting t = 0 we get the first moment as (m∕ ). taking the derivative again, we get [mx (t)m′′x (t) − (mx",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,   100,  1006,  1015,  1597,   100,  1007,  1006,   100,  1007,
         2013,  2029,  2011,  5128,  1056,  1027,  1014,  2057,  2131,  1996,
         2034,  2617,  2004,  1006,   100,  1007,  1012,  2635,  1996, 13819,
         2153,  1010,  2057,  2131,  1031, 25630,  1006,  1056,  1007,  1049,
         1531,  1531,  1060,  1006,  1056,  1007,  1597,  1006, 25630,   102])"
3359,1,['variance'], Properties of Moment Generating Functions,seg_617,"get m′′x (t = 0) = (m∕ )2 + (m∕ 2), from which the variance is obtained using  2 = mx",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5144,  1997,  2617, 11717,  4972])","tensor([  101,  2131,  1049,  1531,  1531,  1060,  1006,  1056,  1027,  1014,
         1007,  1027,  1006,   100,  1007,  1016,  1009,  1006,   100,  1016,
         1007,  1010,  2013,  2029,  1996, 23284,  2003,  4663,  2478,  1016,
         1027, 25630,   102])"
3360,1,"['cases', 'distribution']", CHARACTERISTIC FUNCTIONS CHF,seg_619,the mgf of a distribution need not always exist. those cases can be dealt with in the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  1996, 11460,  2546,  1997,  1037,  4353,  2342,  2025,  2467,
         4839,  1012,  2216,  3572,  2064,  2022,  9411,  2007,  1999,  1996,
          102])"
3361,1,['expected value'], CHARACTERISTIC FUNCTIONS CHF,seg_619,"complex domain by finding the expected value of eitx, where i = √",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([ 101, 3375, 5884, 2011, 4531, 1996, 3517, 3643, 1997, 1041, 4183, 2595,
        1010, 2073, 1045, 1027, 1600,  102])"
3362,1,"['random', 'random variable', 'variable']", CHARACTERISTIC FUNCTIONS CHF,seg_619,"−1, which always exist. thus, the chf of a random variable is defined as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  1597,  2487,  1010,  2029,  2467,  4839,  1012,  2947,  1010,
         1996, 10381,  2546,  1997,  1037,  6721,  8023,  2003,  4225,  2004,
          102])"
3363,1,['discrete'], CHARACTERISTIC FUNCTIONS CHF,seg_619,eitxp if x is discrete; chf = e (eitx) = ∑∞,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  1041,  4183,  2595,  2361,  2065,  1060,  2003, 16246,  1025,
        10381,  2546,  1027,  1041,  1006,  1041,  4183,  2595,  1007,  1027,
          100,   102])"
3364,1,['continuous'], CHARACTERISTIC FUNCTIONS CHF,seg_619,∫x=−∞ e f (x) dx if x is continuous.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,   100,  1027,  1597, 30128,  1041,  1042,  1006,  1060,  1007,
         1040,  2595,  2065,  1060,  2003,  7142,  1012,   102])"
3365,1,"['continuous', 'discrete', 'random variable', 'moments', 'random', 'mcclaurin series', 'variable']", CHARACTERISTIC FUNCTIONS CHF,seg_619,"we have seen above that the chf, if it exists, can generate the moments. irrespective of whether the random variable is discrete or continuous, we could expand the chf as a mcclaurin series as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  2057,  2031,  2464,  2682,  2008,  1996, 10381,  2546,  1010,
         2065,  2009,  6526,  1010,  2064,  9699,  1996,  5312,  1012, 20868,
         6072,  5051, 15277,  1997,  3251,  1996,  6721,  8023,  2003, 16246,
         2030,  7142,  1010,  2057,  2071,  7818,  1996, 10381,  2546,  2004,
         1037, 23680, 17298,  6657,  2186,  2004,   102])"
3366,1,"['continuous', 'case', 'distribution']", CHARACTERISTIC FUNCTIONS CHF,seg_619,which is convergent for an appropriate choice of t (which depends on the distribution). as x (t) in the continuous case can be represented as x (t) = ∫−,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  2029,  2003, 28314,  3372,  2005,  2019,  6413,  3601,  1997,
         1056,  1006,  2029,  9041,  2006,  1996,  4353,  1007,  1012,  2004,
         1060,  1006,  1056,  1007,  1999,  1996,  7142,  2553,  2064,  2022,
         3421,  2004,  1060,  1006,  1056,  1007,  1027,   100,   102])"
3367,0,['n'], CHARACTERISTIC FUNCTIONS CHF,seg_619,"∞ ∞ eitxdf (x), successive derivatives with t gives ∫ inxndf (x) = in n",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  1601,  1601,  1041,  4183,  2595, 20952,  1006,  1060,  1007,
         1010, 11165, 16942,  2007,  1056,  3957,   100,  1999,  2595,  4859,
         2546,  1006,  1060,  1007,  1027,  1999,  1050,   102])"
3368,1,['function'], CHARACTERISTIC FUNCTIONS CHF,seg_619,"′ . define  (n) (x) as the nth derivative of the delta function. then, the pdf can be written as an infinite sum as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  1531,  1012,  9375,  1006,  1050,  1007,  1006,  1060,  1007,
         2004,  1996, 23961,  2232, 13819,  1997,  1996,  7160,  3853,  1012,
         2059,  1010,  1996, 11135,  2064,  2022,  2517,  2004,  2019, 10709,
         7680,  2004,   102])"
3369,0,[], CHARACTERISTIC FUNCTIONS CHF,seg_619,see references 134 and 287 for further details.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  2156,  7604, 15170,  1998, 23090,  2005,  2582,  4751,  1012,
          102])"
3370,1,"['function', 'cauchy', 'characteristic function', 'cauchy distribution', 'distribution']", CHARACTERISTIC FUNCTIONS CHF,seg_619,example 9.15 characteristic function of the cauchy distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  2742,  1023,  1012,  2321,  8281,  3853,  1997,  1996,  6187,
        10875,  2100,  4353,   102])"
3371,1,"['function', 'cauchy', 'characteristic function', 'cauchy distribution', 'distribution']", CHARACTERISTIC FUNCTIONS CHF,seg_619,find the characteristic function of the cauchy distribution.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 8281,  4972, 10381,  2546])","tensor([  101,  2424,  1996,  8281,  3853,  1997,  1996,  6187, 10875,  2100,
         4353,  1012,   102])"
3372,1,"['continuous', 'continuous distributions', 'functions', 'distributions']", Properties of Characteristic Functions,seg_621,"characteristic functions are laplace transforms of the corresponding pdf. as all laplace transforms have an inverse, we could invert it to get the pdf. hence, there is a one-to-one correspondence between the chf and pdf. this is especially useful for continuous distributions as shown below. there are many simple properties satisfied by the chf.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  8281,  4972,  2024,  5001, 19217, 21743,  1997,  1996,  7978,
        11135,  1012,  2004,  2035,  5001, 19217, 21743,  2031,  2019, 19262,
         1010,  2057,  2071,  1999, 16874,  2009,  2000,  2131,  1996, 11135,
         1012,  6516,  1010,  2045,  2003,  1037,  2028,  1011,  2000,  1011,
         2028, 11061,  2090,  1996, 10381,  2546,  1998, 11135,  1012,  2023,
         2003,  2926,  6179,  2005,  7142, 20611,  2004,  3491,  2917,  1012,
         2045,  2024,  2116,  3722,  5144,  8510,  2011,  1996, 10381,  2546,
         1012,   102])"
3373,0,[], Properties of Characteristic Functions,seg_621,"1. (t) = (−t) , (0) = 1, and | (±t) | ≤ 1. in words, this means that the complex conjugate of the chf is the same as that obtained by replacing t with -t in the chf. the assertion (0) = 1 follows easily because this makes eitx to be 1.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  1015,  1012,  1006,  1056,  1007,  1027,  1006,  1597,  2102,
         1007,  1010,  1006,  1014,  1007,  1027,  1015,  1010,  1998,  1064,
         1006,  1081,  2102,  1007,  1064,  1608,  1015,  1012,  1999,  2616,
         1010,  2023,  2965,  2008,  1996,  3375,  9530,  9103,  5867,  1997,
         1996, 10381,  2546,  2003,  1996,  2168,  2004,  2008,  4663,  2011,
         6419,  1056,  2007,  1011,  1056,  1999,  1996, 10381,  2546,  1012,
         1996, 23617,  1006,  1014,  1007,  1027,  1015,  4076,  4089,  2138,
         2023,  3084,  1041,  4183,  2595,  2000,  2022,  1015,  1012,   102])"
3374,0,[], Properties of Characteristic Functions,seg_621,2. ax+b (t) = eibt x (at). this result is trivial as it follows directly from the definition.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  1016,  1012, 22260,  1009,  1038,  1006,  1056,  1007,  1027,
         1041, 12322,  2102,  1060,  1006,  2012,  1007,  1012,  2023,  2765,
         2003, 20610,  2004,  2009,  4076,  3495,  2013,  1996,  6210,  1012,
          102])"
3375,1,['independent'], Properties of Characteristic Functions,seg_621,"3. if x and y are independent,  ax+by (t) =  x (at) . y (bt). putting a = b = 1, we get  x+y (t) =  x (t) . y (t) if x and y are independent.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  1017,  1012,  2065,  1060,  1998,  1061,  2024,  2981,  1010,
        22260,  1009,  2011,  1006,  1056,  1007,  1027,  1060,  1006,  2012,
         1007,  1012,  1061,  1006, 18411,  1007,  1012,  5128,  1037,  1027,
         1038,  1027,  1015,  1010,  2057,  2131,  1060,  1009,  1061,  1006,
         1056,  1007,  1027,  1060,  1006,  1056,  1007,  1012,  1061,  1006,
         1056,  1007,  2065,  1060,  1998,  1061,  2024,  2981,  1012,   102])"
3376,1,['continuous'], Properties of Characteristic Functions,seg_621,"4.   (t) is continuous in t, and convex for t   0. this means that if t1 and t2 are two values of t   0, then   ((t1 + t2) ∕2) ≤ 1 2 [ (t1) +  (t2)].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  1018,  1012,  1006,  1056,  1007,  2003,  7142,  1999,  1056,
         1010,  1998, 18309,  2005,  1056,  1014,  1012,  2023,  2965,  2008,
         2065,  1056,  2487,  1998,  1056,  2475,  2024,  2048,  5300,  1997,
         1056,  1014,  1010,  2059,  1006,  1006,  1056,  2487,  1009,  1056,
         2475,  1007,   100,  1007,  1608,  1015,  1016,  1031,  1006,  1056,
         2487,  1007,  1009,  1006,  1056,  2475,  1007,  1033,  1012,   102])"
3377,1,"['symmetric', 'random', 'random variables', 'variables']", Properties of Characteristic Functions,seg_621,example 9.16 symmetric random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  2742,  1023,  1012,  2385, 19490,  6721, 10857,   102])"
3378,1,"['variable', 'random variable', 'random', 'symmetric']", Properties of Characteristic Functions,seg_621,prove that the random variable x is symmetric about the origin if the chf   (it) is real-valued for all t.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  6011,  2008,  1996,  6721,  8023,  1060,  2003, 19490,  2055,
         1996,  4761,  2065,  1996, 10381,  2546,  1006,  2009,  1007,  2003,
         2613,  1011, 11126,  2005,  2035,  1056,  1012,   102])"
3379,1,"['function', 'symmetric']", Properties of Characteristic Functions,seg_621,"solution 9.16 assume that x is symmetric about the origin, so that f (−x) = f (x). then for a bounded and odd borel function g (x)we have ∫ g (x) df (x) = 0. as g (x) is odd, this is equivalent to ∫ sin (tx) df (x) = 0. hence,   (t) = e (eitx)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  5576,  1023,  1012,  2385,  7868,  2008,  1060,  2003, 19490,
         2055,  1996,  4761,  1010,  2061,  2008,  1042,  1006,  1597,  2595,
         1007,  1027,  1042,  1006,  1060,  1007,  1012,  2059,  2005,  1037,
        10351,  1998,  5976,  8501,  2140,  3853,  1043,  1006,  1060,  1007,
         2057,  2031,   100,  1043,  1006,  1060,  1007,  1040,  2546,  1006,
         1060,  1007,  1027,  1014,  1012,  2004,  1043,  1006,  1060,  1007,
         2003,  5976,  1010,  2023,  2003,  5662,  2000,   100,  8254,  1006,
        19067,  1007,  1040,  2546,  1006,  1060,  1007,  1027,  1014,  1012,
         6516,  1010,  1006,  1056,  1007,  1027,  1041,  1006,  1041,  4183,
         2595,  1007,   102])"
3380,1,['table'], Properties of Characteristic Functions,seg_621,"= e[cos(tx)] is real. also, as  −x (t) =  x (−t) =  x (t) =  x (t),fx (x) and f−x (x) are the same (table 9.2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  1027,  1041,  1031,  2522,  2015,  1006, 19067,  1007,  1033,
         2003,  2613,  1012,  2036,  1010,  2004,  1597,  2595,  1006,  1056,
         1007,  1027,  1060,  1006,  1597,  2102,  1007,  1027,  1060,  1006,
         1056,  1007,  1027,  1060,  1006,  1056,  1007,  1010, 23292,  1006,
         1060,  1007,  1998,  1042, 22543,  2595,  1006,  1060,  1007,  2024,
         1996,  2168,  1006,  2795,  1023,  1012,  1016,  1007,  1012,   102])"
3381,1,"['function', 'characteristic function', 'distribution']", Properties of Characteristic Functions,seg_621,theorem 9.4 the characteristic function uniquely determines a distribution. the inversion theorem provides a means to find the pdf from the characteristic function as f (x) = 1∕ (2 ) ∫−,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  9872,  1023,  1012,  1018,  1996,  8281,  3853, 20640, 16463,
         1037,  4353,  1012,  1996, 28527,  9872,  3640,  1037,  2965,  2000,
         2424,  1996, 11135,  2013,  1996,  8281,  3853,  2004,  1042,  1006,
         1060,  1007,  1027,   100,  1006,  1016,  1007,   100,   102])"
3382,1,"['probability', 'random', 'random variables', 'distribution', 'variables', 'probability distribution']", Properties of Characteristic Functions,seg_621,"9.6.1.1 uniqueness theorem let the random variables x and y have mgf mx (t) and my (t), respectively. if mx (t) = my (t) ∀t, then x and y have the same probability distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([5144, 1997, 8281, 4972])","tensor([  101,  1023,  1012,  1020,  1012,  1015,  1012,  1015,  4310,  2791,
         9872,  2292,  1996,  6721, 10857,  1060,  1998,  1061,  2031, 11460,
         2546, 25630,  1006,  1056,  1007,  1998,  2026,  1006,  1056,  1007,
         1010,  4414,  1012,  2065, 25630,  1006,  1056,  1007,  1027,  2026,
         1006,  1056,  1007,   100,  1010,  2059,  1060,  1998,  1061,  2031,
         1996,  2168,  9723,  4353,  1012,   102])"
3383,1,"['poisson', 'normal', 'exponential']", CUMULANT GENERATING FUNCTIONS CGF,seg_623,"the cgf is slightly easier to work with for exponential, normal, and poisson distributions. it is defined in terms of the mgf as kx (t) = ln (mx (t)) = ∑j",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13988,  7068,  3372, 11717,  4972,  1039, 25708])","tensor([  101,  1996,  1039, 25708,  2003,  3621,  6082,  2000,  2147,  2007,
         2005, 27258,  1010,  3671,  1010,  1998, 13433, 24077, 20611,  1012,
         2009,  2003,  4225,  1999,  3408,  1997,  1996, 11460,  2546,  2004,
         1047,  2595,  1006,  1056,  1007,  1027,  1048,  2078,  1006, 25630,
         1006,  1056,  1007,  1007,  1027,   100,   102])"
3384,1,"['mean', 'normal distribution', 'variance', 'cumulants', 'functions', 'cumulant', 'moments', 'normal', 'distribution']", CUMULANT GENERATING FUNCTIONS CGF,seg_623,"∞ =1 kjtj∕j!, where kj is the jth cumulant. this relationship shows that cumulants are polynomial functions of moments (low-order cumulants can also be exactly equal to corresponding moments). for example, for the general univariate normal distribution with mean 1 = and variance 2 = 2, the first and second cumulants are, respectively, 1 = and 2 = 2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([13988,  7068,  3372, 11717,  4972,  1039, 25708])","tensor([  101,  1601,  1027,  1015,   100,   999,  1010,  2073,  1047,  3501,
         2003,  1996,  1046,  2705, 13988,  7068,  3372,  1012,  2023,  3276,
         3065,  2008, 13988,  7068,  7666,  2024, 17505,  4972,  1997,  5312,
         1006,  2659,  1011,  2344, 13988,  7068,  7666,  2064,  2036,  2022,
         3599,  5020,  2000,  7978,  5312,  1007,  1012,  2005,  2742,  1010,
         2005,  1996,  2236,  4895, 28739, 13143,  3671,  4353,  2007,  2812,
         1015,  1027,  1998, 23284,  1016,  1027,  1016,  1010,  1996,  2034,
         1998,  2117, 13988,  7068,  7666,  2024,  1010,  4414,  1010,  1015,
         1027,  1998,  1016,  1027,  1016,  1012,   102])"
3385,1,"['standardized variable', 'standardized', 'variable']", CUMULANT GENERATING FUNCTIONS CGF,seg_623,corollary 2 cgf of a standardized variable can be expressed as k(x− )∕  (t) = (− ∕ ) t + kx (t∕ ).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([13988,  7068,  3372, 11717,  4972,  1039, 25708])","tensor([  101,  2522, 28402,  5649,  1016,  1039, 25708,  1997,  1037, 16367,
         8023,  2064,  2022,  5228,  2004,  1047,  1006,  1060, 22543,  1007,
          100,  1006,  1056,  1007,  1027,  1006,  1597,   100,  1007,  1056,
         1009,  1047,  2595,  1006,   100,  1007,  1012,   102])"
3386,0,[], CUMULANT GENERATING FUNCTIONS CGF,seg_623,proof: this follows from the above theorem by setting a = 1∕  and b = − ∕ .,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([13988,  7068,  3372, 11717,  4972,  1039, 25708])","tensor([ 101, 6947, 1024, 2023, 4076, 2013, 1996, 2682, 9872, 2011, 4292, 1037,
        1027,  100, 1998, 1038, 1027, 1597,  100, 1012,  102])"
3387,1,"['moments', 'cumulants']", CUMULANT GENERATING FUNCTIONS CGF,seg_623,"the cumulants can be obtained from moments and vice versa [225, 288]. this holds for cumulants about any origin (including zero) in terms of moments about the same origin.",tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([13988,  7068,  3372, 11717,  4972,  1039, 25708])","tensor([  101,  1996, 13988,  7068,  7666,  2064,  2022,  4663,  2013,  5312,
         1998,  3580, 18601,  1031, 14993,  1010, 24841,  1033,  1012,  2023,
         4324,  2005, 13988,  7068,  7666,  2055,  2151,  4761,  1006,  2164,
         5717,  1007,  1999,  3408,  1997,  5312,  2055,  1996,  2168,  4761,
         1012,   102])"
3388,1,['moments'], Relations Among Moments and Cumulants,seg_625,"we have seen in chapter 8, equation 8.19 (p. 357) that the central and raw moments",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  2057,  2031,  2464,  1999,  3127,  1022,  1010,  8522,  1022,
         1012,  2539,  1006,  1052,  1012, 26231,  1007,  2008,  1996,  2430,
         1998,  6315,  5312,   102])"
3389,0,[], Relations Among Moments and Cumulants,seg_625,′. as the cgfs of some distribu-,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  1531,  1012,  2004,  1996,  1039, 25708,  2015,  1997,  2070,
         4487,  3367,  3089,  8569,  1011,   102])"
3390,1,"['moment', 'cumulants', 'moments']", Relations Among Moments and Cumulants,seg_625,"tions are easier to work with, we can find cumulants and use the relationship with moments to obtain the desired moment.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101, 14841,  5644,  2024,  6082,  2000,  2147,  2007,  1010,  2057,
         2064,  2424, 13988,  7068,  7666,  1998,  2224,  1996,  3276,  2007,
         5312,  2000,  6855,  1996,  9059,  2617,  1012,   102])"
3391,1,['cumulant'], Relations Among Moments and Cumulants,seg_625,theorem 9.6 the rth cumulant can be obtained from the cgf as  r =  r,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  9872,  1023,  1012,  1020,  1996, 19387,  2232, 13988,  7068,
         3372,  2064,  2022,  4663,  2013,  1996,  1039, 25708,  2004,  1054,
         1027,  1054,   102])"
3392,0,[], Relations Among Moments and Cumulants,seg_625,proof: we have,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([ 101, 6947, 1024, 2057, 2031,  102])"
3393,1,"['cumulant', 'case']", Relations Among Moments and Cumulants,seg_625,"as done in the case of mgf, differentiate (9.27) k times and put t = 0 to get the kth cumulant. see references 134 and 289 for details.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  2004,  2589,  1999,  1996,  2553,  1997, 11460,  2546,  1010,
        21032,  1006,  1023,  1012,  2676,  1007,  1047,  2335,  1998,  2404,
         1056,  1027,  1014,  2000,  2131,  1996,  1047,  2705, 13988,  7068,
         3372,  1012,  2156,  7604, 15170,  1998, 27054,  2005,  4751,  1012,
          102])"
3394,1,"['moments', 'cumulants']", Relations Among Moments and Cumulants,seg_625,example 9.17 moments from cumulants,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  2742,  1023,  1012,  2459,  5312,  2013, 13988,  7068,  7666,
          102])"
3395,0,[], Relations Among Moments and Cumulants,seg_625,substitute for kx (t) also to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([ 101, 7681, 2005, 1047, 2595, 1006, 1056, 1007, 2036, 2000, 2131,  102])"
3396,0,['n'], Relations Among Moments and Cumulants,seg_625,differentiate n times and put t = 0 to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101, 21032,  1050,  2335,  1998,  2404,  1056,  1027,  1014,  2000,
         2131,   102])"
3397,1,['cumulants'], Relations Among Moments and Cumulants,seg_625,"put n = 0,1, and so on to get the desired result. there is another way to get the result for low order cumulants. truncate mx (t) as 1 + t∕1! 1 + t2∕2! 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  2404,  1050,  1027,  1014,  1010,  1015,  1010,  1998,  2061,
         2006,  2000,  2131,  1996,  9059,  2765,  1012,  2045,  2003,  2178,
         2126,  2000,  2131,  1996,  2765,  2005,  2659,  2344, 13988,  7068,
         7666,  1012, 19817,  4609, 16280, 25630,  1006,  1056,  1007,  2004,
         1015,  1009,   100,   999,  1015,  1009,   100,   999,  1016,   102])"
3398,1,['coefficients'], Relations Among Moments and Cumulants,seg_625,"compare the coefficients of tk∕k! to get  1 =  1,  2 =  2 −  1",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101, 12826,  1996, 21374,  1997,   100,   999,  2000,  2131,  1015,
         1027,  1015,  1010,  1016,  1027,  1016,  1597,  1015,   102])"
3399,0,[], Relations Among Moments and Cumulants,seg_625,"next, write mx (t) as 1 + [tx∕1! + (tx)2∕2! + · · ·], expand kx (t) = log (mx (t)) as an infinite series to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  2279,  1010,  4339, 25630,  1006,  1056,  1007,  2004,  1015,
         1009,  1031,   100,   999,  1009,  1006, 19067,  1007,   100,   999,
         1009,  1087,  1087,  1087,  1033,  1010,  7818,  1047,  2595,  1006,
         1056,  1007,  1027,  8833,  1006, 25630,  1006,  1056,  1007,  1007,
         2004,  2019, 10709,  2186,  2000,  2131,   102])"
3400,1,['coefficients'], Relations Among Moments and Cumulants,seg_625,equate like coefficients of t to get,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  1041, 16211,  2618,  2066, 21374,  1997,  1056,  2000,  2131,
          102])"
3401,1,"['normal distribution', 'moments', 'normal', 'distribution']", Relations Among Moments and Cumulants,seg_625,example 9.18 moments of normal distribution from cgf,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  2742,  1023,  1012,  2324,  5312,  1997,  3671,  4353,  2013,
         1039, 25708,   102])"
3402,1,"['normal distribution', 'moments', 'method', 'normal', 'distribution']", Relations Among Moments and Cumulants,seg_625,obtain the first three moments of normal distribution using cgf method.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  6855,  1996,  2034,  2093,  5312,  1997,  3671,  4353,  2478,
         1039, 25708,  4118,  1012,   102])"
3403,1,['coefficients'], Relations Among Moments and Cumulants,seg_625,"taking natural log, we get kx (t) = t  + 1 2 t2 2. comparing the coefficients of t∕1! and t2∕2!, we get  1 =   and  2 =  2. as the t3 term is missing,  3 = 0.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4262,  2426,  5312,  1998, 13988,  7068,  7666])","tensor([  101,  2635,  3019,  8833,  1010,  2057,  2131,  1047,  2595,  1006,
         1056,  1007,  1027,  1056,  1009,  1015,  1016,  1056,  2475,  1016,
         1012, 13599,  1996, 21374,  1997,   100,   999,  1998,   100,   999,
         1010,  2057,  2131,  1015,  1027,  1998,  1016,  1027,  1016,  1012,
         2004,  1996,  1056,  2509,  2744,  2003,  4394,  1010,  1017,  1027,
         1014,  1012,   102])"
3404,1,"['factorial moment', 'factorial moments', 'moment', 'falling factorial', 'hypergeometric', 'distributions', 'poisson', 'moments', 'poisson distributions', 'stirling number', 'binomial', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"there are two types of factorial moments known as falling factorial and raising factorial moments. among these, the falling factorial moments are more popular. the kth (falling) factorial moment of x is defined as e[x (x − 1) (x − 2) · · · (x − k + 1)] = e[x!∕ (x − k)!], where k is an integer ≥ 1. it is easier to evaluate for those distributions that have an x! or γ (x + 1) in the denominator (e.g., binomial, negative binomial, hypergeometric, and poisson distributions). the factorial moments and ordinary moments are related through the stirling number of first kind as follows:–",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 1., 1., 1., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 1.,
        1., 1., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2045,  2024,  2048,  4127,  1997,  5387,  4818,  5312,  2124,
         2004,  4634,  5387,  4818,  1998,  6274,  5387,  4818,  5312,  1012,
         2426,  2122,  1010,  1996,  4634,  5387,  4818,  5312,  2024,  2062,
         2759,  1012,  1996,  1047,  2705,  1006,  4634,  1007,  5387,  4818,
         2617,  1997,  1060,  2003,  4225,  2004,  1041,  1031,  1060,  1006,
         1060,  1597,  1015,  1007,  1006,  1060,  1597,  1016,  1007,  1087,
         1087,  1087,  1006,  1060,  1597,  1047,  1009,  1015,  1007,  1033,
         1027,  1041,  1031,  1060,   999,   100,  1006,  1060,  1597,  1047,
         1007,   999,  1033,  1010,  2073,  1047,  2003,  2019, 16109,  1609,
         1015,  1012,  2009,  2003,  6082,  2000, 16157,  2005,  2216, 20611,
         2008,  2031,  2019,  1060,   999,  2030,  1157,  1006,  1060,  1009,
         1015,  1007,  1999,  1996,  7939, 20936, 27413,  1006,  1041,  1012,
         1043,  1012,  1010,  8026, 20936,  2389,  1010,  4997,  8026, 20936,
         2389,  1010, 23760,  3351, 28993,  1010,  1998, 13433, 24077, 20611,
         1007,  1012,  1996,  5387,  4818,  5312,  1998,  6623,  5312,  2024,
         3141,  2083,  1996, 15597,  2193,  1997,  2034,  2785,  2004,  4076,
         1024,  1516,   102])"
3405,1,"['factorial moments', 'moments', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,a reverse relationship exists between the ordinary and factorial moments using the,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([ 101, 1037, 7901, 3276, 6526, 2090, 1996, 6623, 1998, 5387, 4818, 5312,
        2478, 1996,  102])"
3406,1,['stirling number'], FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"′ j), where s (r, j) is the stirling number of second kind [134].",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  1531,  1046,  1007,  1010,  2073,  1055,  1006,  1054,  1010,
         1046,  1007,  2003,  1996, 15597,  2193,  1997,  2117,  2785,  1031,
        15170,  1033,  1012,   102])"
3407,1,"['factorial moments', 'moments', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"there are two ways to get (falling) factorial moments. the simplest way is by differentiating the pgf (see section 9.2.1, p. 379). as px (t) = e (tx) = e (ex log(t)) = mx (log (t)), we could differentiate it k times as in equation (9.8), page 380, and put t = 1 to get factorial moments.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2045,  2024,  2048,  3971,  2000,  2131,  1006,  4634,  1007,
         5387,  4818,  5312,  1012,  1996, 21304,  2126,  2003,  2011,  2367,
        15370,  1996, 18720,  2546,  1006,  2156,  2930,  1023,  1012,  1016,
         1012,  1015,  1010,  1052,  1012,  4261,  2683,  1007,  1012,  2004,
         1052,  2595,  1006,  1056,  1007,  1027,  1041,  1006, 19067,  1007,
         1027,  1041,  1006,  4654,  8833,  1006,  1056,  1007,  1007,  1027,
        25630,  1006,  8833,  1006,  1056,  1007,  1007,  1010,  2057,  2071,
        21032,  2009,  1047,  2335,  2004,  1999,  8522,  1006,  1023,  1012,
         1022,  1007,  1010,  3931, 17014,  1010,  1998,  2404,  1056,  1027,
         1015,  2000,  2131,  5387,  4818,  5312,  1012,   102])"
3408,1,"['binomial', 'binomial theorem']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"we define it as e[(1 + t)x], because if we expand it using binomial theorem, we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2057,  9375,  2009,  2004,  1041,  1031,  1006,  1015,  1009,
         1056,  1007,  1060,  1033,  1010,  2138,  2065,  2057,  7818,  2009,
         2478,  8026, 20936,  2389,  9872,  1010,  2057,  2131,   102])"
3409,1,"['factorial moment', 'factorial moments', 'moment', 'expectations', 'moments', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"by taking term-by-term expectations on the rhs, we get the factorial moments. the raising factorial moment is defined as e[x (x + 1) (x + 2) · · · (x + k − 1)] = e[(x + k − 1)!∕ (x − 1)!]. an analogous expression can also be obtained",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2011,  2635,  2744,  1011,  2011,  1011,  2744, 10908,  2006,
         1996,  1054,  7898,  1010,  2057,  2131,  1996,  5387,  4818,  5312,
         1012,  1996,  6274,  5387,  4818,  2617,  2003,  4225,  2004,  1041,
         1031,  1060,  1006,  1060,  1009,  1015,  1007,  1006,  1060,  1009,
         1016,  1007,  1087,  1087,  1087,  1006,  1060,  1009,  1047,  1597,
         1015,  1007,  1033,  1027,  1041,  1031,  1006,  1060,  1009,  1047,
         1597,  1015,  1007,   999,   100,  1006,  1060,  1597,  1015,  1007,
          999,  1033,  1012,  2019, 19639,  3670,  2064,  2036,  2022,  4663,
          102])"
3410,0,[], FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,for raising factorials using the expansion (1 − t)−x = ∑k,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2005,  6274,  5387, 26340,  2478,  1996,  4935,  1006,  1015,
         1597,  1056,  1007,  1597,  2595,  1027,   100,   102])"
3411,1,"['factorial moments', 'expectations', 'moments', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"ing term-by-term expectations as e[(1 − t)−x] = e[1 + tx + t2x (x + 1) ∕2! + t3x (x + 1) (x + 2) ∕3! + · · ·], we get raising factorial moments. we could also get raising factorial moments from pgf px (t) = e (t−x). differentiating it once gives px′ (t) = e (−xt−x−1). from this, we get px′ (1) = e (−x). differentiating it r times,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101, 13749,  2744,  1011,  2011,  1011,  2744, 10908,  2004,  1041,
         1031,  1006,  1015,  1597,  1056,  1007,  1597,  2595,  1033,  1027,
         1041,  1031,  1015,  1009, 19067,  1009,  1056,  2475,  2595,  1006,
         1060,  1009,  1015,  1007,   100,   999,  1009,  1056,  2509,  2595,
         1006,  1060,  1009,  1015,  1007,  1006,  1060,  1009,  1016,  1007,
          100,   999,  1009,  1087,  1087,  1087,  1033,  1010,  2057,  2131,
         6274,  5387,  4818,  5312,  1012,  2057,  2071,  2036,  2131,  6274,
         5387,  4818,  5312,  2013, 18720,  2546,  1052,  2595,  1006,  1056,
         1007,  1027,  1041,  1006,  1056, 22543,  2595,  1007,  1012,  2367,
        15370,  2009,  2320,  3957,  1052,  2595,  1531,  1006,  1056,  1007,
         1027,  1041,  1006,  1597, 18413, 22543,  2595, 27944,  1007,  1012,
         2013,  2023,  1010,  2057,  2131,  1052,  2595,  1531,  1006,  1015,
         1007,  1027,  1041,  1006,  1597,  2595,  1007,  1012,  2367, 15370,
         2009,  1054,  2335,  1010,   102])"
3412,1,"['continuous', 'continuous distributions', 'distributions', 'results', 'summation']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,replacing the summation by integration gives us the corresponding results for the continuous distributions.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  6419,  1996,  7680, 28649,  2011,  8346,  3957,  2149,  1996,
         7978,  3463,  2005,  1996,  7142, 20611,  1012,   102])"
3413,1,"['factorial moment', 'mean', 'moment', 'falling factorial', 'moment ', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"to distinguish between the two, we will denote the falling factorial moment as e (x(k)) or  (k) and the raising factorial moment as e (x(k)) or  (k). unless otherwise specified, factorial moment will mean falling factorial moment  (k).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2000, 10782,  2090,  1996,  2048,  1010,  2057,  2097, 19090,
         1996,  4634,  5387,  4818,  2617,  2004,  1041,  1006,  1060,  1006,
         1047,  1007,  1007,  2030,  1006,  1047,  1007,  1998,  1996,  6274,
         5387,  4818,  2617,  2004,  1041,  1006,  1060,  1006,  1047,  1007,
         1007,  2030,  1006,  1047,  1007,  1012,  4983,  4728,  9675,  1010,
         5387,  4818,  2617,  2097,  2812,  4634,  5387,  4818,  2617,  1006,
         1047,  1007,  1012,   102])"
3414,1,"['factorial moment', 'moment', 'poisson', 'distribution', 'poisson distribution', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,example 9.19 factorial moment of the poisson distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2742,  1023,  1012,  2539,  5387,  4818,  2617,  1997,  1996,
        13433, 24077,  4353,   102])"
3415,1,"['factorial moment', 'moment', 'poisson', 'moments', 'distribution', 'poisson distribution', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"find the kth factorial moment of the poisson distribution, and obtain the first two moments.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2424,  1996,  1047,  2705,  5387,  4818,  2617,  1997,  1996,
        13433, 24077,  4353,  1010,  1998,  6855,  1996,  2034,  2048,  5312,
         1012,   102])"
3416,0,[], FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,solution 9.19 by definition,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([ 101, 5576, 1023, 1012, 2539, 2011, 6210,  102])"
3417,1,"['factorial moment', 'moment', 'moments', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"alternatively, we could obtain the fmgf directly and get the desired moments. fmgfx (t) = e[(1 + t)x] = ∑∞ x=0 (1 + t)xe−  x∕x! = e− ∑∞ x=0 [  (1 + t)]x∕x! = e− e (1+t) = e t. the kth factorial moment is obtained by differentiating this expression k times and putting t = 0. we know that the kth derivative of e t is  ke t, from which the kth factorial moment is obtained as  k. putting k = 1 and 2 gives the desired moments.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101, 14084,  1010,  2057,  2071,  6855,  1996,  4718, 25708,  3495,
         1998,  2131,  1996,  9059,  5312,  1012,  4718, 25708,  2595,  1006,
         1056,  1007,  1027,  1041,  1031,  1006,  1015,  1009,  1056,  1007,
         1060,  1033,  1027,   100,  1060,  1027,  1014,  1006,  1015,  1009,
         1056,  1007,  1060,  2063, 22543,   100,   999,  1027,  1041, 22543,
          100,  1060,  1027,  1014,  1031,  1006,  1015,  1009,  1056,  1007,
         1033,   100,   999,  1027,  1041, 22543,  1041,  1006,  1015,  1009,
         1056,  1007,  1027,  1041,  1056,  1012,  1996,  1047,  2705,  5387,
         4818,  2617,  2003,  4663,  2011,  2367, 15370,  2023,  3670,  1047,
         2335,  1998,  5128,  1056,  1027,  1014,  1012,  2057,  2113,  2008,
         1996,  1047,  2705, 13819,  1997,  1041,  1056,  2003, 17710,  1056,
         1010,  2013,  2029,  1996,  1047,  2705,  5387,  4818,  2617,  2003,
         4663,  2004,  1047,  1012,  5128,  1047,  1027,  1015,  1998,  1016,
         3957,  1996,  9059,  5312,  1012,   102])"
3418,1,"['factorial moments', 'poisson', 'moments', 'distribution', 'poisson distribution', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"corollary 3 the factorial moments of a poisson distribution are related as  (k) =  r (k−r). in particular,  (k) =   (k−1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2522, 28402,  5649,  1017,  1996,  5387,  4818,  5312,  1997,
         1037, 13433, 24077,  4353,  2024,  3141,  2004,  1006,  1047,  1007,
         1027,  1054,  1006,  1047, 22543,  2099,  1007,  1012,  1999,  3327,
         1010,  1006,  1047,  1007,  1027,  1006,  1047, 27944,  1007,  1012,
          102])"
3419,1,"['geometric distribution', 'distribution', 'geometric', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,example 9.20 factorial mgf of the geometric distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2742,  1023,  1012,  2322,  5387,  4818, 11460,  2546,  1997,
         1996, 14965,  4353,   102])"
3420,1,"['geometric distribution', 'distribution', 'geometric', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,find the factorial mgf of the geometric distribution.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2424,  1996,  5387,  4818, 11460,  2546,  1997,  1996, 14965,
         4353,  1012,   102])"
3421,0,[], FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,solution 9.20 by definition fmgfx (t) =,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  5576,  1023,  1012,  2322,  2011,  6210,  4718, 25708,  2595,
         1006,  1056,  1007,  1027,   102])"
3422,1,"['factorial moment', 'moment', 'factorial']", FACTORIAL MOMENT GENERATING FUNCTIONS FMGF,seg_627,"as 1 − q = p, the denominator becomes [1 − q (1 + t)] = p − qt. hence, fmgfx (t) = p∕ (p − qt). the kth factorial moment is obtained by differentiating this expression k times and putting t = 0. we know that the kth derivative of 1∕ (ax + b) is arr!(−1)r∕(ax + b)r+1. hence, kth derivative of 1∕[1 − q (1 + t)] is r!qr∕pr+1, as q = 1 − p. this gives the kth factorial moment as pr!qr∕pr+1 = r!(q∕p)r.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 5387,  4818,  2617, 11717,  4972,  4718, 25708])","tensor([  101,  2004,  1015,  1597,  1053,  1027,  1052,  1010,  1996,  7939,
        20936, 27413,  4150,  1031,  1015,  1597,  1053,  1006,  1015,  1009,
         1056,  1007,  1033,  1027,  1052,  1597,  1053,  2102,  1012,  6516,
         1010,  4718, 25708,  2595,  1006,  1056,  1007,  1027,   100,  1006,
         1052,  1597,  1053,  2102,  1007,  1012,  1996,  1047,  2705,  5387,
         4818,  2617,  2003,  4663,  2011,  2367, 15370,  2023,  3670,  1047,
         2335,  1998,  5128,  1056,  1027,  1014,  1012,  2057,  2113,  2008,
         1996,  1047,  2705, 13819,  1997,   100,  1006, 22260,  1009,  1038,
         1007,  2003, 12098,  2099,   999,  1006,  1597,  2487,  1007,   100,
         1006, 22260,  1009,  1038,  1007,  1054,  1009,  1015,  1012,  6516,
         1010,  1047,  2705, 13819,  1997,   100,  1031,  1015,  1597,  1053,
         1006,  1015,  1009,  1056,  1007,  1033,  2003,  1054,   999,   100,
         1009,  1015,  1010,  2004,  1053,  1027,  1015,  1597,  1052,  1012,
         2023,  3957,  1996,  1047,  2705,  5387,  4818,  2617,  2004, 10975,
          999,   100,  1009,  1015,  1027,  1054,   999,  1006,   100,  1007,
         1054,  1012,   102])"
3423,1,"['random variable', 'random', 'random variables', 'variables', 'variable']", CONDITIONAL MOMENT GENERATING FUNCTIONS CMGF,seg_629,consider an integer random variable that takes values ≥ 1. we define a sum of independent random variables as sn = ∑i,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0.])","tensor([18462,  2617, 11717,  4972,  4642, 25708])","tensor([  101,  5136,  2019, 16109,  6721,  8023,  2008,  3138,  5300,  1609,
         1015,  1012,  2057,  9375,  1037,  7680,  1997,  2981,  6721, 10857,
         2004,  1055,  2078,  1027,   100,   102])"
3424,1,['distribution'], CONDITIONAL MOMENT GENERATING FUNCTIONS CMGF,seg_629,"n =1 xi. for a fixed value of n = n, the distribution",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([18462,  2617, 11717,  4972,  4642, 25708])","tensor([ 101, 1050, 1027, 1015, 8418, 1012, 2005, 1037, 4964, 3643, 1997, 1050,
        1027, 1050, 1010, 1996, 4353,  102])"
3425,1,"['table', 'distributions', 'variates', 'conditional', 'independent']", CONDITIONAL MOMENT GENERATING FUNCTIONS CMGF,seg_629,"of the finite sum sn can be obtained in closed form for many distributions when the variates are independent (see table 7.47, chapter 7). the conditional mgf can be expressed as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        1., 1., 1., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  2617, 11717,  4972,  4642, 25708])","tensor([  101,  1997,  1996, 10713,  7680,  1055,  2078,  2064,  2022,  4663,
         1999,  2701,  2433,  2005,  2116, 20611,  2043,  1996, 13075, 13143,
         2015,  2024,  2981,  1006,  2156,  2795,  1021,  1012,  4700,  1010,
         3127,  1021,  1007,  1012,  1996, 18462, 11460,  2546,  2064,  2022,
         5228,  2004,   102])"
3426,1,"['function', 'mutually independent', 'characteristic function', 'variates', 'conditional', 'independent']", CONDITIONAL MOMENT GENERATING FUNCTIONS CMGF,seg_629,"replacing t by “it” gives the corresponding conditional characteristic function. if the variates are mutually independent, this becomes ms|n (t|n) = [mx (t)]n .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1.,
        1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462,  2617, 11717,  4972,  4642, 25708])","tensor([  101,  6419,  1056,  2011,  1523,  2009,  1524,  3957,  1996,  7978,
        18462,  8281,  3853,  1012,  2065,  1996, 13075, 13143,  2015,  2024,
        20271,  2981,  1010,  2023,  4150,  5796,  1064,  1050,  1006,  1056,
         1064,  1050,  1007,  1027,  1031, 25630,  1006,  1056,  1007,  1033,
         1050,  1012,   102])"
3427,1,"['functions', 'distributions', 'random', 'random variables', 'variables']", CONVERGENCE OF GENERATING FUNCTIONS,seg_631,properties of generating functions are useful in deriving the distributions to which a sequence of generating functions converge. let xn be a sequence of random variables with chf  n,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([19143,  1997, 11717,  4972])","tensor([  101,  5144,  1997, 11717,  4972,  2024,  6179,  1999,  4315, 14966,
         1996, 20611,  2000,  2029,  1037,  5537,  1997, 11717,  4972, 28314,
         1012,  2292,  1060,  2078,  2022,  1037,  5537,  1997,  6721, 10857,
         2007, 10381,  2546,  1050,   102])"
3428,1,"['limit', 'distribution']", CONVERGENCE OF GENERATING FUNCTIONS,seg_631,"x (t) converges to a unique limit, say  x (t) for all points in n→∞ a neighborhood of t = 0, then that limit determines the unique cdf to which the distribution of xn converge. symbolically,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([19143,  1997, 11717,  4972])","tensor([  101,  1060,  1006,  1056,  1007, 28314,  2015,  2000,  1037,  4310,
         5787,  1010,  2360,  1060,  1006,  1056,  1007,  2005,  2035,  2685,
         1999,  1050, 30113, 30128,  1037,  5101,  1997,  1056,  1027,  1014,
         1010,  2059,  2008,  5787, 16463,  1996,  4310,  3729,  2546,  2000,
         2029,  1996,  4353,  1997,  1060,  2078, 28314,  1012, 12613,  3973,
         1010,   102])"
3429,1,"['mean', 'function', 'deviation', 'probability', 'functions', 'coefficient', 'distributions', 'statistics', 'discrete distributions', 'discrete']", SUMMARY,seg_633,"this chapter introduced various generating functions encountered in statistics. these have wide applications in many other fields including astrophysics, fluid mechanics, spectroscopy, and various engineering fields. examples are included to illustrate the use of various generating functions. the classical probability generating function of discrete distributions is extended to get a new generating function for the cdf. this is then used to derive the mean deviation by extracting just one coefficient.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2023,  3127,  3107,  2536, 11717,  4972,  8567,  1999,  6747,
         1012,  2122,  2031,  2898,  5097,  1999,  2116,  2060,  4249,  2164,
        28625, 15638,  1010,  8331,  9760,  1010, 25458,  1010,  1998,  2536,
         3330,  4249,  1012,  4973,  2024,  2443,  2000, 19141,  1996,  2224,
         1997,  2536, 11717,  4972,  1012,  1996,  4556,  9723, 11717,  3853,
         1997, 16246, 20611,  2003,  3668,  2000,  2131,  1037,  2047, 11717,
         3853,  2005,  1996,  3729,  2546,  1012,  2023,  2003,  2059,  2109,
         2000, 18547,  1996,  2812, 24353,  2011, 14817,  2075,  2074,  2028,
        19064,  1012,   102])"
3430,1,['information'], SUMMARY,seg_633,"see references 134, 284, 287 and 290 for further information.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2156,  7604, 15170,  1010, 26871,  1010, 23090,  1998, 17222,
         2005,  2582,  2592,  1012,   102])"
3431,1,"['discrete distribution', 'discrete', 'distribution']", SUMMARY,seg_633,a) pgf of discrete distribution can be obtained from its mgf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  1007, 18720,  2546,  1997, 16246,  4353,  2064,  2022,
         4663,  2013,  2049, 11460,  2546,   102])"
3432,1,"['continuous', 'continuous distributions', 'distributions']", SUMMARY,seg_633,b) pgfs of continuous distributions do not exist,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1038,  1007, 18720, 10343,  1997,  7142, 20611,  2079,  2025,
         4839,   102])"
3433,1,"['random', 'random variables', 'variables']", SUMMARY,seg_633,c) mgf is defined only for positive random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1039,  1007, 11460,  2546,  2003,  4225,  2069,  2005,  3893,
         6721, 10857,   102])"
3434,1,['moments'], SUMMARY,seg_633,"d) moments of order k   n of a bino(n,p) are all zeros",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1040, 1007, 5312, 1997, 2344, 1047, 1050, 1997, 1037, 8026, 2080,
        1006, 1050, 1010, 1052, 1007, 2024, 2035, 5717, 2015,  102])"
3435,1,"['functions', 'moments', 'distribution', 'f distribution']", SUMMARY,seg_633,e) all moments of f distribution are functions of numerator df,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1041,  1007,  2035,  5312,  1997,  1042,  4353,  2024,  4972,
         1997, 16371,  5017,  8844,  1040,  2546,   102])"
3436,1,"['cauchy', 'moments', 'cauchy distribution', 'distribution']", SUMMARY,seg_633,f) all odd moments of cauchy distribution are nonexistent,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1042,  1007,  2035,  5976,  5312,  1997,  6187, 10875,  2100,
         4353,  2024,  3904,  9048, 16173,  2102,   102])"
3437,1,"['functions', 'characteristic functions']", SUMMARY,seg_633,g) all characteristic functions are periodic with period 2 ,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1043,  1007,  2035,  8281,  4972,  2024, 15861,  2007,  2558,
         1016,   102])"
3438,1,"['random', 'random variables', 'variables']", SUMMARY,seg_633,h) chf of a sum of random variables is always the product of the chf.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1044,  1007, 10381,  2546,  1997,  1037,  7680,  1997,  6721,
        10857,  2003,  2467,  1996,  4031,  1997,  1996, 10381,  2546,  1012,
          102])"
3439,0,[], SUMMARY,seg_633,9.2 find the cdf and mgf of the dis9.13 what are the conditions for a,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])",tensor([12654]),"tensor([  101,  1023,  1012,  1016,  2424,  1996,  3729,  2546,  1998, 11460,
         2546,  1997,  1996,  4487,  2015,  2683,  1012,  2410,  2054,  2024,
         1996,  3785,  2005,  1037,   102])"
3440,1,"['function', 'moment', 'moments']", SUMMARY,seg_633,"a tribution f (x; a, b) = xa−1e−(x∕b)a , function to be a moment generba ating function? are these funcand obtain the first two moments. tions true mgf? (a) ea(t−1)+b(t−1)2 , 9.3 prove that max (t) = mx (at) and (b) ea(t−1)∕(1−bt), (c) ea(t−1)+b(",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1037, 13012, 29446,  1042,  1006,  1060,  1025,  1037,  1010,
         1038,  1007,  1027,  1060,  2050, 27944,  2063, 22543,  1006,   100,
         1007,  1037,  1010,  3853,  2000,  2022,  1037,  2617,  4962, 28483,
         2012,  2075,  3853,  1029,  2024,  2122,  4569,  9336,  2094,  6855,
         1996,  2034,  2048,  5312,  1012, 14841,  5644,  2995, 11460,  2546,
         1029,  1006,  1037,  1007, 19413,  1006,  1056, 27944,  1007,  1009,
         1038,  1006,  1056, 27944,  1007,  1016,  1010,  1023,  1012,  1017,
         6011,  2008,  4098,  1006,  1056,  1007,  1027, 25630,  1006,  2012,
         1007,  1998,  1006,  1038,  1007, 19413,  1006,  1056, 27944,  1007,
          100,  1006,  1015, 22543, 19279,  1007,  1010,  1006,  1039,  1007,
        19413,  1006,  1056, 27944,  1007,  1009,  1038,  1006,   102])"
3441,1,"['geometric distribution', 'moments', 'distribution', 'geometric']", SUMMARY,seg_633,"t2−1), max+b (t) = ebtmx (at). deduce (d) e|(t−1)∕(t2−1) | that m(x− )∕  (t) = e− t∕ mx (t∕ ). 9.14 find the mgf and first three 9.4 for geometric distribution with moments of the triangular distri-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1056,  2475, 27944,  1007,  1010,  4098,  1009,  1038,  1006,
         1056,  1007,  1027,  1041, 19279, 22984,  1006,  2012,  1007,  1012,
         2139,  8566,  3401,  1006,  1040,  1007,  1041,  1064,  1006,  1056,
        27944,  1007,   100,  1006,  1056,  2475, 27944,  1007,  1064,  2008,
         1049,  1006,  1060, 22543,  1007,   100,  1006,  1056,  1007,  1027,
         1041, 22543,   100, 25630,  1006,   100,  1007,  1012,  1023,  1012,
         2403,  2424,  1996, 11460,  2546,  1998,  2034,  2093,  1023,  1012,
         1018,  2005, 14965,  4353,  2007,  5312,  1997,  1996, 14023,  4487,
         3367,  3089,  1011,   102])"
3442,1,"['moments', 'pareto']", SUMMARY,seg_633,"9.5 if x1,x2, … ,xn are iid and moments of the pareto distribu-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  1019,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  2024,  2462,  2094,  1998,  5312,
         1997,  1996, 11968, 18903,  4487,  3367,  3089,  8569,  1011,   102])"
3443,1,['independent'], SUMMARY,seg_633,9.6 find the mgf and derive the ky (t) if x and y are independent.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  1020,  2424,  1996, 11460,  2546,  1998, 18547,
         1996, 18712,  1006,  1056,  1007,  2065,  1060,  1998,  1061,  2024,
         2981,  1012,   102])"
3444,1,['moments'], SUMMARY,seg_633,first two moments for the distri-,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2034, 2048, 5312, 2005, 1996, 4487, 3367, 3089, 1011,  102])"
3445,1,"['exponential', 'exponential distribution', 'distribution']", SUMMARY,seg_633,"r, r + 1, … 9.18 prove that the mgf of a truncated 9.7 what do you get as the result of exponential distribution is  ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1054,  1010,  1054,  1009,  1015,  1010,  1529,  1023,  1012,
         2324,  6011,  2008,  1996, 11460,  2546,  1997,  1037, 25449,  1023,
         1012,  1021,  2054,  2079,  2017,  2131,  2004,  1996,  2765,  1997,
        27258,  4353,  2003,   102])"
3446,1,"['function', 'random variable', 'random', 'variable']", SUMMARY,seg_633,probability generating function? 9.19 the mgf of a random variable,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  9723, 11717,  3853,  1029,  1023,  1012,  2539,  1996, 11460,
         2546,  1997,  1037,  6721,  8023,   102])"
3447,1,['mean'], SUMMARY,seg_633,"9.8 if mx (t) = 1∕ (b2 − t2) find the is (e2t − e−2t) ∕4t. find the mean,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  1022,  2065, 25630,  1006,  1056,  1007,  1027,
          100,  1006,  1038,  2475,  1597,  1056,  2475,  1007,  2424,  1996,
         2003,  1006,  1041,  2475,  2102,  1597,  1041, 22543,  2475,  2102,
         1007,   100,  1012,  2424,  1996,  2812,  1010,   102])"
3448,1,"['probability', 'variance']", SUMMARY,seg_633,mean and variance. and the probability that p[|x −,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2812,  1998, 23284,  1012,  1998,  1996,  9723,  2008,  1052,
         1031,  1064,  1060,  1597,   102])"
3449,1,"['moments', 'even moments']", SUMMARY,seg_633,a sequence of bounded numprove that the even moments are bers with egf∑n,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  5537,  1997, 10351, 16371,  8737, 17597,  2008,  1996,
         2130,  5312,  2024,  2022,  2869,  2007,   100,   102])"
3450,1,"['discrete distribution', 'discrete', 'distribution']", SUMMARY,seg_633,9.21 check whether the pgf exists for a xn∕n!. a discrete distribution with f (x) =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  2538,  4638,  3251,  1996, 18720,  2546,  6526,
         2005,  1037,   100,   999,  1012,  1037, 16246,  4353,  2007,  1042,
         1006,  1060,  1007,  1027,   102])"
3451,1,"['mean', 'variance']", SUMMARY,seg_633,"9.11 find the pgf, mean, and variance c∕[x (x + 1)], for x = 1, 2, …",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  2340,  2424,  1996, 18720,  2546,  1010,  2812,
         1010,  1998, 23284,   100,  1031,  1060,  1006,  1060,  1009,  1015,
         1007,  1033,  1010,  2005,  1060,  1027,  1015,  1010,  1016,  1010,
         1529,   102])"
3452,0,[], SUMMARY,seg_633,"(2y − (a + b)) ∕ (b − a), find the 9.12 for the logarithmic series distrimoments of x from those of y.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1006,  1016,  2100,  1597,  1006,  1037,  1009,  1038,  1007,
         1007,   100,  1006,  1038,  1597,  1037,  1007,  1010,  2424,  1996,
         1023,  1012,  2260,  2005,  1996,  8833,  8486,  2705,  7712,  2186,
         4487,  3367, 20026,  8462,  7666,  1997,  1060,  2013,  2216,  1997,
         1061,  1012,   102])"
3453,1,"['factorial moment', 'moment', 'factorial']", SUMMARY,seg_633,"that the rth factorial moment 9.23 if x and y are iid, and z = cx +  (r) = c (r − 1)![  (1 −  )]r. (1 − c)y , find the mgf of z in",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2008,  1996, 19387,  2232,  5387,  4818,  2617,  1023,  1012,
         2603,  2065,  1060,  1998,  1061,  2024,  2462,  2094,  1010,  1998,
         1062,  1027,  1039,  2595,  1009,  1006,  1054,  1007,  1027,  1039,
         1006,  1054,  1597,  1015,  1007,   999,  1031,  1006,  1015,  1597,
         1007,  1033,  1054,  1012,  1006,  1015,  1597,  1039,  1007,  1061,
         1010,  2424,  1996, 11460,  2546,  1997,  1062,  1999,   102])"
3454,1,"['moments', 'distribution']", SUMMARY,seg_633,"terms of mgf of x and y. deduce 9.33 the maxwell distribution gives the first two moments. the velocity of a molecule at absolute temperature x as f (x) = 9.24 how are the pgf (px (t)), mgf 2 2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  3408,  1997, 11460,  2546,  1997,  1060,  1998,  1061,  1012,
         2139,  8566,  3401,  1023,  1012,  3943,  1996, 10691,  4353,  3957,
         1996,  2034,  2048,  5312,  1012,  1996, 10146,  1997,  1037, 13922,
         2012,  7619,  4860,  1060,  2004,  1042,  1006,  1060,  1007,  1027,
         1023,  1012,  2484,  2129,  2024,  1996, 18720,  2546,  1006,  1052,
         2595,  1006,  1056,  1007,  1007,  1010, 11460,  2546,  1016,  1016,
          102])"
3455,0,[], SUMMARY,seg_633,(kx (t)) related. boltzmann constant. find the pgf,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1006,  1047,  2595,  1006,  1056,  1007,  1007,  3141,  1012,
        10053, 24340,  2078,  5377,  1012,  2424,  1996, 18720,  2546,   102])"
3456,1,"['random', 'random variable', 'variable']", SUMMARY,seg_633,the random variable n − x. what temperature tr.,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1996,  6721,  8023,  1050,  1597,  1060,  1012,  2054,  4860,
        19817,  1012,   102])"
3457,1,"['continuous', 'random']", SUMMARY,seg_633,does px (t = −1) give? 9.34 if the pdf of a continuous random,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  2515,  1052,  2595,  1006,  1056,  1027,  1597,  2487,  1007,
         2507,  1029,  1023,  1012,  4090,  2065,  1996, 11135,  1997,  1037,
         7142,  6721,   102])"
3458,0,[], SUMMARY,seg_633,9.26 obtain the cdf generating funcvariable is f (x) =,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1023,  1012,  2656,  6855,  1996,  3729,  2546, 11717,  4569,
         2278, 10755, 19210,  2003,  1042,  1006,  1060,  1007,  1027,   102])"
3459,1,"['mean', 'deviation', 'poisson', 'distribution', 'poisson distribution']", SUMMARY,seg_633,"tion for the poisson distribution, and obtain the mean deviation. 2 (b + x) ∕[b (a + b)] ⎧ 9.27 obtain the cdf generating func⎪ if − b ≤ x 0",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  2005,  1996, 13433, 24077,  4353,  1010,  1998,
         6855,  1996,  2812, 24353,  1012,  1016,  1006,  1038,  1009,  1060,
         1007,   100,  1031,  1038,  1006,  1037,  1009,  1038,  1007,  1033,
          100,  1023,  1012,  2676,  6855,  1996,  3729,  2546, 11717,   100,
         2065,  1597,  1038,  1608,  1060,  1014,   102])"
3460,1,"['mean', 'deviation', 'distribution']", SUMMARY,seg_633,"tion for the logarithmic series ⎪⎪2 (a − x) ∕[a (a + b)] distribution, and obtain the mean ⎨ deviation. if 0 ≤ x   a ⎪⎪",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  2005,  1996,  8833,  8486,  2705,  7712,  2186,
          100,  1006,  1037,  1597,  1060,  1007,   100,  1031,  1037,  1006,
         1037,  1009,  1038,  1007,  1033,  4353,  1010,  1998,  6855,  1996,
         2812,   100, 24353,  1012,  2065,  1014,  1608,  1060,  1037,   100,
          102])"
3461,1,"['mean', 'function']", SUMMARY,seg_633,"differentiable function of x with e[x]   ∞, then e[g (x) (x −  )] =  2e[g′(x)]. find the mgf and the mean.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2367, 19210,  3853,  1997,  1060,  2007,  1041,  1031,  1060,
         1033,  1601,  1010,  2059,  1041,  1031,  1043,  1006,  1060,  1007,
         1006,  1060,  1597,  1007,  1033,  1027,  1016,  2063,  1031,  1043,
         1531,  1006,  1060,  1007,  1033,  1012,  2424,  1996, 11460,  2546,
         1998,  1996,  2812,  1012,   102])"
3462,1,"['continuous', 'random']", SUMMARY,seg_633,9.35 if the pdf of a continuous random 9.29 if f (y|x) = exp (− (y − x)) for,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  3486,  2065,  1996, 11135,  1997,  1037,  7142,
         6721,  1023,  1012,  2756,  2065,  1042,  1006,  1061,  1064,  1060,
         1007,  1027,  4654,  2361,  1006,  1597,  1006,  1061,  1597,  1060,
         1007,  1007,  2005,   102])"
3463,1,"['random', 'random variable', 'variable']", SUMMARY,seg_633,9.30 if x is a positive random variable ⎪(a − x) ∕a2 if 0 ≤ x   a,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1023, 1012, 2382, 2065, 1060, 2003, 1037, 3893, 6721, 8023,  100,
        1006, 1037, 1597, 1060, 1007,  100, 2065, 1014, 1608, 1060, 1037,  102])"
3464,1,"['random', 'random variables', 'variables']", SUMMARY,seg_633,"⎨ with pgf px (t) find the pgf of the ⎪0 elsewhere random variables x − c, and |x|. ⎩",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,   100,  2007, 18720,  2546,  1052,  2595,  1006,  1056,  1007,
         2424,  1996, 18720,  2546,  1997,  1996,   100,  6974,  6721, 10857,
         1060,  1597,  1039,  1010,  1998,  1064,  1060,  1064,  1012,   100,
          102])"
3465,1,['variable'], SUMMARY,seg_633,dom variable e[x2] = 2 ∫0,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14383,  8023,  1041,  1031,  1060,  2475,  1033,  1027,  1016,
          100,   102])"
3466,1,['mean'], SUMMARY,seg_633,∞ x[1 − find the mgf and the mean.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1601,  1060,  1031,  1015,  1597,  2424,  1996, 11460,  2546,
         1998,  1996,  2812,  1012,   102])"
3467,1,['bernoulli'], SUMMARY,seg_633,fx (x)]dx. 9.36 what does [kx (t) + kx (−t)]∕2 generate? 9.32 in a sequence of iid bernoulli,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0.])",tensor([12654]),"tensor([  101, 23292,  1006,  1060,  1007,  1033,  1040,  2595,  1012,  1023,
         1012,  4029,  2054,  2515,  1031,  1047,  2595,  1006,  1056,  1007,
         1009,  1047,  2595,  1006,  1597,  2102,  1007,  1033,   100,  9699,
         1029,  1023,  1012,  3590,  1999,  1037,  5537,  1997,  2462,  2094,
        16595,  7140,  6894,   102])"
3468,1,"['probability', 'probability of success', 'success']", SUMMARY,seg_633,"trials with probability of success 9.37 what does [px (t) + px (−t)]∕2 p, suppose we count either the generate?",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 7012, 2007, 9723, 1997, 3112, 1023, 1012, 4261, 2054, 2515, 1031,
        1052, 2595, 1006, 1056, 1007, 1009, 1052, 2595, 1006, 1597, 2102, 1007,
        1033,  100, 1052, 1010, 6814, 2057, 4175, 2593, 1996, 9699, 1029,  102])"
3469,1,"['failure', 'failures', 'moments', 'successes']", SUMMARY,seg_633,"number of successes needed to 9.38 if all moments of x exist, prove get the first failure, or the number of failures needed to get the that (t) = ∑k",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2193,  1997, 14152,  2734,  2000,  1023,  1012,  4229,  2065,
         2035,  5312,  1997,  1060,  4839,  1010,  6011,  2131,  1996,  2034,
         4945,  1010,  2030,  1996,  2193,  1997, 15428,  2734,  2000,  2131,
         1996,  2008,  1006,  1056,  1007,  1027,   100,   102])"
3470,1,"['function', 'probability', 'success']", SUMMARY,seg_633,"first success. find the pdf and the 9.39 if f (x) = (c + 1) xc for 0   x   1, probability generating function. find the pgf and e[ln (x)].",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2034,  3112,  1012,  2424,  1996, 11135,  1998,  1996,  1023,
         1012,  4464,  2065,  1042,  1006,  1060,  1007,  1027,  1006,  1039,
         1009,  1015,  1007,  1060,  2278,  2005,  1014,  1060,  1015,  1010,
         9723, 11717,  3853,  1012,  2424,  1996, 18720,  2546,  1998,  1041,
         1031,  1048,  2078,  1006,  1060,  1007,  1033,  1012,   102])"
3471,1,"['function', 'random variable', 'random', 'monotonic', 'monotonic function', 'variable']", SUMMARY,seg_633,"9.40 if   (x) is a real-valued, monotonic function of a positive random variable",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  2871,  2065,  1006,  1060,  1007,  2003,  1037,
         2613,  1011, 11126,  1010, 18847, 25009,  3853,  1997,  1037,  3893,
         6721,  8023,   102])"
3472,1,['function'], SUMMARY,seg_633,"1 eytta−1 γ(b) (1 − t)b−a−1dt where k = and 1f1 (a, b; y) is the confluent hypergeoγ(a)γ(b−a) metric function. hence, show that e (y) = a∕b.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1041, 22123,  2696, 27944,  1157,  1006,  1038,  1007,
         1006,  1015,  1597,  1056,  1007,  1038, 22543,  2050, 27944, 11927,
         2073,  1047,  1027,  1998,  1015,  2546,  2487,  1006,  1037,  1010,
         1038,  1025,  1061,  1007,  2003,  1996,  9530, 10258, 24997,  2102,
        23760,  3351,  2080, 29721,  1006,  1037,  1007,  1157,  1006,  1038,
        22543,  2050,  1007, 12046,  3853,  1012,  6516,  1010,  2265,  2008,
         1041,  1006,  1061,  1007,  1027,   100,  1012,   102])"
3473,1,"['hypergeometric', 'negative binomial', 'binomial', 'factorial']", SUMMARY,seg_633,9.42 find the factorial mgf of hypergeometric and negative binomial distribu-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  4413,  2424,  1996,  5387,  4818, 11460,  2546,
         1997, 23760,  3351, 28993,  1998,  4997,  8026, 20936,  2389,  4487,
         3367,  3089,  8569,  1011,   102])"
3474,1,"['factorial moments', 'moments', 'factorial']", SUMMARY,seg_633,"tions and show that the factorial moments are as given: (i) hypg(n,n,p):",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  5644,  1998,  2265,  2008,  1996,  5387,  4818,  5312,
         2024,  2004,  2445,  1024,  1006,  1045,  1007,  1044, 22571,  2290,
         1006,  1050,  1010,  1050,  1010,  1052,  1007,  1024,   102])"
3475,1,"['distributions', 'geometric distributions', 'geometric', 'binomial', 'factorial']", SUMMARY,seg_633,9.43 find the factorial mgf of binomial and geometric distributions and show,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1023,  1012,  4724,  2424,  1996,  5387,  4818, 11460,  2546,
         1997,  8026, 20936,  2389,  1998, 14965, 20611,  1998,  2265,   102])"
3476,1,"['factorial moments', 'moments', 'factorial']", SUMMARY,seg_633,"that the factorial moments are as given: (i) bino(n, p): n(r)pr. (ii) geom(p): r!qr−1∕pr.",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2008,  1996,  5387,  4818,  5312,  2024,  2004,  2445,  1024,
         1006,  1045,  1007,  8026,  2080,  1006,  1050,  1010,  1052,  1007,
         1024,  1050,  1006,  1054,  1007, 10975,  1012,  1006,  2462,  1007,
        20248,  2213,  1006,  1052,  1007,  1024,  1054,   999,   100,  1012,
          102])"
3477,0,[], FUNCTIONS OF RANDOM VARIABLES,seg_635,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4972,  1997,  6721, 10857])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
3478,1,"['functions', 'random', 'random variables', 'distribution', 'variables']", FUNCTIONS OF RANDOM VARIABLES,seg_635,◾ understand distribution of functions of random variables,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 1., 1., 0.])","tensor([ 4972,  1997,  6721, 10857])","tensor([  101,   100,  3305,  4353,  1997,  4972,  1997,  6721, 10857,   102])"
3479,1,"['linear', 'random', 'random variables', 'variables', 'transformations']", FUNCTIONS OF RANDOM VARIABLES,seg_635,◾ distinguish linear and other transformations of random variables,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 4972,  1997,  6721, 10857])","tensor([  101,   100, 10782,  7399,  1998,  2060, 21865,  1997,  6721, 10857,
          102])"
3480,1,"['random', 'random variables', 'variables', 'transformations']", FUNCTIONS OF RANDOM VARIABLES,seg_635,◾ comprehend trigonometric transformations of random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 4972,  1997,  6721, 10857])","tensor([  101,   100, 22346, 13012,  7446, 28993, 21865,  1997,  6721, 10857,
          102])"
3481,1,"['arbitrary transformations', 'transformations']", FUNCTIONS OF RANDOM VARIABLES,seg_635,◾ describe arbitrary transformations,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])","tensor([ 4972,  1997,  6721, 10857])","tensor([  101,   100,  6235, 15275, 21865,   102])"
3482,1,['transformations'], FUNCTIONS OF RANDOM VARIABLES,seg_635,◾ apply various transformations to practical problems,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4972,  1997,  6721, 10857])","tensor([  101,   100,  6611,  2536, 21865,  2000,  6742,  3471,   102])"
3483,0,[],,seg_637,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([]),"tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
3484,1,"['functions', 'random', 'random variables', 'distribution', 'variables']",,seg_637,◾ understand distribution of functions of random variables,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 1., 1., 0.])",tensor([]),"tensor([  101,   100,  3305,  4353,  1997,  4972,  1997,  6721, 10857,   102])"
3485,1,"['linear', 'random', 'random variables', 'variables', 'transformations']",,seg_637,◾ distinguish linear and other transformations of random variables,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 0., 1., 1., 0.])",tensor([]),"tensor([  101,   100, 10782,  7399,  1998,  2060, 21865,  1997,  6721, 10857,
          102])"
3486,1,"['random', 'random variables', 'variables', 'transformations']",,seg_637,◾ comprehend trigonometric transformations of random variables,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])",tensor([]),"tensor([  101,   100, 22346, 13012,  7446, 28993, 21865,  1997,  6721, 10857,
          102])"
3487,1,"['arbitrary transformations', 'transformations']",,seg_637,◾ describe arbitrary transformations,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])",tensor([]),"tensor([  101,   100,  6235, 15275, 21865,   102])"
3488,1,['transformations'],,seg_637,◾ apply various transformations to practical problems,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([]),"tensor([  101,   100,  6611,  2536, 21865,  2000,  6742,  3471,   102])"
3489,1,"['functions', 'random', 'random variables', 'variables']",,seg_637,10.1 functions of random variables,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 0.])",tensor([]),"tensor([  101,  2184,  1012,  1015,  4972,  1997,  6721, 10857,   102])"
3490,1,"['variates', 'functions', 'variable', 'standard normal', 'random variable', 'distributions', 'random', 'normal', 'random variables', 'standard', 'distribution', 'variables', 'independent']",,seg_637,"this chapter discusses the distribution of functions of a single random variable. there are many situations where simple functions of random variables have well-known distributions. one example is the relation between a standard normal and a chi-square distribution. as shown below, the square of a standard normal is chi-square distributed with one dof. if there are several independent normal variates, the sum of the squares is also chi-square distributed with n dof, where n is the number of variates.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.])",tensor([]),"tensor([  101,  2023,  3127, 15841,  1996,  4353,  1997,  4972,  1997,  1037,
         2309,  6721,  8023,  1012,  2045,  2024,  2116,  8146,  2073,  3722,
         4972,  1997,  6721, 10857,  2031,  2092,  1011,  2124, 20611,  1012,
         2028,  2742,  2003,  1996,  7189,  2090,  1037,  3115,  3671,  1998,
         1037,  9610,  1011,  2675,  4353,  1012,  2004,  3491,  2917,  1010,
         1996,  2675,  1997,  1037,  3115,  3671,  2003,  9610,  1011,  2675,
         5500,  2007,  2028,  2079,  2546,  1012,  2065,  2045,  2024,  2195,
         2981,  3671, 13075, 13143,  2015,  1010,  1996,  7680,  1997,  1996,
        14320,  2003,  2036,  9610,  1011,  2675,  5500,  2007,  1050,  2079,
         2546,  1010,  2073,  1050,  2003,  1996,  2193,  1997, 13075, 13143,
         2015,  1012,   102])"
3491,1,"['change of origin', 'transformed', 'method', 'normal', 'function', 'standard', 'transformation', 'standard normal', 'random', 'distribution', 'distribution function', 'change of origin and scale', 'variable']",,seg_637,"distribution of a function of random variable(s) has many applications in statistical inference. for instance, any general normal variate can be transformed into the standard normal (n(0, 1)) using a simple change of origin and scale transformation. the classical method known as the method of distribution function (modf) is useful when the cdf has closed form. the cdf of the transformed variable is easily",tensor(1),"tensor([0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0., 0., 0., 1.,
        0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([]),"tensor([  101,  4353,  1997,  1037,  3853,  1997,  6721,  8023,  1006,  1055,
         1007,  2038,  2116,  5097,  1999,  7778, 28937,  1012,  2005,  6013,
         1010,  2151,  2236,  3671, 13075, 13143,  2064,  2022,  8590,  2046,
         1996,  3115,  3671,  1006,  1050,  1006,  1014,  1010,  1015,  1007,
         1007,  2478,  1037,  3722,  2689,  1997,  4761,  1998,  4094,  8651,
         1012,  1996,  4556,  4118,  2124,  2004,  1996,  4118,  1997,  4353,
         3853,  1006, 16913,  2546,  1007,  2003,  6179,  2043,  1996,  3729,
         2546,  2038,  2701,  2433,  1012,  1996,  3729,  2546,  1997,  1996,
         8590,  8023,  2003,  4089,   102])"
3492,1,"['continuous', 'function', 'table', 'distributions', 'gumbel', 'method', 'logistic', 'pareto', 'transformation', 'case']",,seg_637,"obtained using modf when the transformation is strictly increasing or decreasing function, from which the pdf follows readily by differentiation (see table above) in the continuous case. this method can be used to find the pdf of the logistic, gumbel, pareto, and uniform distributions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 1., 0., 0.,
        0., 1., 0., 0.])",tensor([]),"tensor([  101,  4663,  2478, 16913,  2546,  2043,  1996,  8651,  2003,  9975,
         4852,  2030, 16922,  3853,  1010,  2013,  2029,  1996, 11135,  4076,
        12192,  2011, 20582,  1006,  2156,  2795,  2682,  1007,  1999,  1996,
         7142,  2553,  1012,  2023,  4118,  2064,  2022,  2109,  2000,  2424,
         1996, 11135,  1997,  1996,  8833,  6553,  1010, 16031,  8671,  1010,
        11968, 18903,  1010,  1998,  6375, 20611,  1012,   102])"
3493,1,"['functions', 'dependent', 'dependent and independent variables', 'distribution', 'variables', 'independent']",,seg_637,"we come across functions of a variate in engineering applications as well. these are sometimes governed by physical laws such as that between resistance and current in a circuit. these are usually represented as exact or approximate functional relationships among dependent and independent variables. if the distribution of one of them is known, the behavior of the other can easily be modeled. as an example, consider the",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([]),"tensor([  101,  2057,  2272,  2408,  4972,  1997,  1037, 13075, 13143,  1999,
         3330,  5097,  2004,  2092,  1012,  2122,  2024,  2823,  9950,  2011,
         3558,  4277,  2107,  2004,  2008,  2090,  5012,  1998,  2783,  1999,
         1037,  4984,  1012,  2122,  2024,  2788,  3421,  2004,  6635,  2030,
        15796,  8360,  6550,  2426,  7790,  1998,  2981, 10857,  1012,  2065,
         1996,  4353,  1997,  2028,  1997,  2068,  2003,  2124,  1010,  1996,
         5248,  1997,  1996,  2060,  2064,  4089,  2022, 14440,  1012,  2004,
         2019,  2742,  1010,  5136,  1996,   102])"
3494,0,[],,seg_637,"electrical resistance of semiconductors, which depends on the temperature in ∘k as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([]),"tensor([  101,  5992,  5012,  1997, 20681,  2015,  1010,  2029,  9041,  2006,
         1996,  4860,  1999,  1599,  2243,  2004,   102])"
3495,1,"['variation', 'exponential', 'distribution', 'parameters']",,seg_637,"if the temperature variation is known, the resistance distribution can be derived for some values of the parameters. similarly, the potential energy of weakly interacting dielectric gas subjected to an external electric field is modeled using an exponential law as f (y) = exp(−y∕(kt)), where y = potential energy, k = boltzmann constant, and t = absolute temperature in ∘k.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([]),"tensor([  101,  2065,  1996,  4860,  8386,  2003,  2124,  1010,  1996,  5012,
         4353,  2064,  2022,  5173,  2005,  2070,  5300,  1997,  1996, 11709,
         1012,  6660,  1010,  1996,  4022,  2943,  1997, 17541, 21935,  3280,
         2571, 22601,  3806, 13532,  2000,  2019,  6327,  3751,  2492,  2003,
        14440,  2478,  2019, 27258,  2375,  2004,  1042,  1006,  1061,  1007,
         1027,  4654,  2361,  1006,   100,  1006,  1047,  2102,  1007,  1007,
         1010,  2073,  1061,  1027,  4022,  2943,  1010,  1047,  1027, 10053,
        24340,  2078,  5377,  1010,  1998,  1056,  1027,  7619,  4860,  1999,
         1599,  2243,  1012,   102])"
3496,1,"['distributions', 'method', 'geometric', 'transformations']",,seg_637,"there are many ways to derive such related distributions (see references 137, 225, 291–293. the most popular among them are the (i) cdf method (ii) mgf (or chf) method (iii) trigonometric transformations (iv) geometric reasoning and (v) using jacobians.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([]),"tensor([  101,  2045,  2024,  2116,  3971,  2000, 18547,  2107,  3141, 20611,
         1006,  2156,  7604, 14989,  1010, 14993,  1010, 27173,  1516, 26953,
         1012,  1996,  2087,  2759,  2426,  2068,  2024,  1996,  1006,  1045,
         1007,  3729,  2546,  4118,  1006,  2462,  1007, 11460,  2546,  1006,
         2030, 10381,  2546,  1007,  4118,  1006,  3523,  1007, 13012,  7446,
        28993, 21865,  1006,  4921,  1007, 14965, 13384,  1998,  1006,  1058,
         1007,  2478,  6213,  7066,  1012,   102])"
3497,1,"['location', 'mean', 'change of origin', 'range', 'transformation', 'change of scale', 'symmetric', 'location measure', 'results', 'distribution', 'transformations', 'median']", DISTRIBUTION OF TRANSLATIONS,seg_639,"these are obtained by a change of origin transformation y = x ± c. as the variate values are shifted either to the right (c is positive) or to the left (c is negative), the pdf remains the same, but the range is modified accordingly. a special translation is called reflection as y = −x + c, where c is a location measure. if x is symmetric, y = −x + c results in the same distribution if c is the mean, median, or mode (all of which coincides for symmetric laws). this transformation is usually applied along with one of the following transformations such as change of scale or square transformation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 1., 0., 0., 1., 0., 0.])","tensor([ 4353,  1997, 11913])","tensor([  101,  2122,  2024,  4663,  2011,  1037,  2689,  1997,  4761,  8651,
         1061,  1027,  1060,  1081,  1039,  1012,  2004,  1996, 13075, 13143,
         5300,  2024,  5429,  2593,  2000,  1996,  2157,  1006,  1039,  2003,
         3893,  1007,  2030,  2000,  1996,  2187,  1006,  1039,  2003,  4997,
         1007,  1010,  1996, 11135,  3464,  1996,  2168,  1010,  2021,  1996,
         2846,  2003,  6310, 11914,  1012,  1037,  2569,  5449,  2003,  2170,
         9185,  2004,  1061,  1027,  1597,  2595,  1009,  1039,  1010,  2073,
         1039,  2003,  1037,  3295,  5468,  1012,  2065,  1060,  2003, 19490,
         1010,  1061,  1027,  1597,  2595,  1009,  1039,  3463,  1999,  1996,
         2168,  4353,  2065,  1039,  2003,  1996,  2812,  1010,  3991,  1010,
         2030,  5549,  1006,  2035,  1997,  2029, 19680,  2015,  2005, 19490,
         4277,  1007,  1012,  2023,  8651,  2003,  2788,  4162,  2247,  2007,
         2028,  1997,  1996,  2206, 21865,  2107,  2004,  2689,  1997,  4094,
         2030,  2675,  8651,  1012,   102])"
3498,1,['distribution'], DISTRIBUTION OF TRANSLATIONS,seg_639,"example 10.1 translations of cuni(a, b) distribution",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4353,  1997, 11913])","tensor([  101,  2742,  2184,  1012,  1015, 11913,  1997, 12731,  3490,  1006,
         1037,  1010,  1038,  1007,  4353,   102])"
3499,1,['distribution'], DISTRIBUTION OF TRANSLATIONS,seg_639,"if x is cuni(a, b), find the distribution of (i) y = x − a (ii) y = (x − (a + b)∕2).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 11913])","tensor([  101,  2065,  1060,  2003, 12731,  3490,  1006,  1037,  1010,  1038,
         1007,  1010,  2424,  1996,  4353,  1997,  1006,  1045,  1007,  1061,
         1027,  1060,  1597,  1037,  1006,  2462,  1007,  1061,  1027,  1006,
         1060,  1597,  1006,  1037,  1009,  1038,  1007,   100,  1007,  1012,
          102])"
3500,1,"['change of origin', 'mean', 'rectangular distribution', 'limit', 'distribution', 'transformations', 'transformation', 'case']", DISTRIBUTION OF TRANSLATIONS,seg_639,"solution 10.1 as both of these are change of origin transformations, the pdf remains the same as f (y) = 1∕(b − a). in case (i) the lower limit becomes 0 and upper limit becomes (b − a), so that f (y) = 1∕(b − a), 0   y   (b − a). in case (ii) the lower limit is a− (a + b)/2 = (a − b)/2, and the upper limit is b − (a + b)∕2 = (b − a)∕2 = f (y) = 1∕(b − a). this gives f (y) = 1∕(b − a),−(b − a)∕2   y   (b − a)∕2. as (a + b)∕2 is the mean of a rectangular distribution, this transformation is a reflection.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 11913])","tensor([  101,  5576,  2184,  1012,  1015,  2004,  2119,  1997,  2122,  2024,
         2689,  1997,  4761, 21865,  1010,  1996, 11135,  3464,  1996,  2168,
         2004,  1042,  1006,  1061,  1007,  1027,   100,  1006,  1038,  1597,
         1037,  1007,  1012,  1999,  2553,  1006,  1045,  1007,  1996,  2896,
         5787,  4150,  1014,  1998,  3356,  5787,  4150,  1006,  1038,  1597,
         1037,  1007,  1010,  2061,  2008,  1042,  1006,  1061,  1007,  1027,
          100,  1006,  1038,  1597,  1037,  1007,  1010,  1014,  1061,  1006,
         1038,  1597,  1037,  1007,  1012,  1999,  2553,  1006,  2462,  1007,
         1996,  2896,  5787,  2003,  1037, 22543,  1006,  1037,  1009,  1038,
         1007,  1013,  1016,  1027,  1006,  1037,  1597,  1038,  1007,  1013,
         1016,  1010,  1998,  1996,  3356,  5787,  2003,  1038,  1597,  1006,
         1037,  1009,  1038,  1007,   100,  1027,  1006,  1038,  1597,  1037,
         1007,   100,  1027,  1042,  1006,  1061,  1007,  1027,   100,  1006,
         1038,  1597,  1037,  1007,  1012,  2023,  3957,  1042,  1006,  1061,
         1007,  1027,   100,  1006,  1038,  1597,  1037,  1007,  1010,  1597,
         1006,  1038,  1597,  1037,  1007,   100,  1061,  1006,  1038,  1597,
         1037,  1007,   100,  1012,  2004,  1006,  1037,  1009,  1038,  1007,
          100,  2003,  1996,  2812,  1997,  1037, 10806,  4353,  1010,  2023,
         8651,  2003,  1037,  9185,  1012,   102])"
3501,1,"['discrete random variable', 'discrete', 'transformation', 'change of scale', 'random variable', 'poisson', 'random', 'distribution', 'poisson distribution', 'discrete distribution', 'variable', 'case']", DISTRIBUTION OF CONSTANT MULTIPLES,seg_641,"first, consider the case of a discrete random variable x. if c is an integer, then y = c ∗ x is a change of scale transformation that maps x values to positive or negative numbers. hence, depending on the sign of c, y could belong to the same family of distribution. as an example, if x is poisson ( ) with mgf exp( (et − 1)), y has mgf exp( (ect − 1)). this is the mgf of a poisson distribution. if c is a fraction, the distribution is still well defined if we assume that x takes fractional values (but still it is discrete distribution due to the discontinuity).",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([4353, 1997, 5377, 3674, 2015])","tensor([  101,  2034,  1010,  5136,  1996,  2553,  1997,  1037, 16246,  6721,
         8023,  1060,  1012,  2065,  1039,  2003,  2019, 16109,  1010,  2059,
         1061,  1027,  1039,  1598,  1060,  2003,  1037,  2689,  1997,  4094,
         8651,  2008,  7341,  1060,  5300,  2000,  3893,  2030,  4997,  3616,
         1012,  6516,  1010,  5834,  2006,  1996,  3696,  1997,  1039,  1010,
         1061,  2071,  7141,  2000,  1996,  2168,  2155,  1997,  4353,  1012,
         2004,  2019,  2742,  1010,  2065,  1060,  2003, 13433, 24077,  1006,
         1007,  2007, 11460,  2546,  4654,  2361,  1006,  1006,  3802,  1597,
         1015,  1007,  1007,  1010,  1061,  2038, 11460,  2546,  4654,  2361,
         1006,  1006, 14925,  2102,  1597,  1015,  1007,  1007,  1012,  2023,
         2003,  1996, 11460,  2546,  1997,  1037, 13433, 24077,  4353,  1012,
         2065,  1039,  2003,  1037, 12884,  1010,  1996,  4353,  2003,  2145,
         2092,  4225,  2065,  2057,  7868,  2008,  1060,  3138, 12884,  2389,
         5300,  1006,  2021,  2145,  2009,  2003, 16246,  4353,  2349,  2000,
         1996, 12532, 16778, 11231,  3012,  1007,  1012,   102])"
3502,1,['distribution'], DISTRIBUTION OF CONSTANT MULTIPLES,seg_641,"example 10.2 constant multiple of cuni(a, b) distribution",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([4353, 1997, 5377, 3674, 2015])","tensor([  101,  2742,  2184,  1012,  1016,  5377,  3674,  1997, 12731,  3490,
         1006,  1037,  1010,  1038,  1007,  4353,   102])"
3503,1,['distribution'], DISTRIBUTION OF CONSTANT MULTIPLES,seg_641,"if x is cuni(a, b) find the distribution of y = (2x − (a + b))∕(b − a).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 1997, 5377, 3674, 2015])","tensor([  101,  2065,  1060,  2003, 12731,  3490,  1006,  1037,  1010,  1038,
         1007,  2424,  1996,  4353,  1997,  1061,  1027,  1006,  1016,  2595,
         1597,  1006,  1037,  1009,  1038,  1007,  1007,   100,  1006,  1038,
         1597,  1037,  1007,  1012,   102])"
3504,1,['range'], DISTRIBUTION OF CONSTANT MULTIPLES,seg_641,"solution 10.2 write y = (2x − (a + b))∕(b − a) as c ∗ x + d, where c = 2∕(b − a) and d = −(a + b)∕(b − a). solve for x to get x = (y − d)∕c. then use (10.3) to get g(y) = f ((y − d)∕c)∕c. as x is cuni(a, b), f (x) = 1∕(b − a), a   x   b. as this does not involve x, putting x = (y − d)∕c has no effect. the range is modified as −1 and +1. substitute the values of c and d to get g(y) = (1∕(b − a))∕(2∕(b − a)) = 1∕2,−1   y   1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 1997, 5377, 3674, 2015])","tensor([  101,  5576,  2184,  1012,  1016,  4339,  1061,  1027,  1006,  1016,
         2595,  1597,  1006,  1037,  1009,  1038,  1007,  1007,   100,  1006,
         1038,  1597,  1037,  1007,  2004,  1039,  1598,  1060,  1009,  1040,
         1010,  2073,  1039,  1027,   100,  1006,  1038,  1597,  1037,  1007,
         1998,  1040,  1027,  1597,  1006,  1037,  1009,  1038,  1007,   100,
         1006,  1038,  1597,  1037,  1007,  1012,  9611,  2005,  1060,  2000,
         2131,  1060,  1027,  1006,  1061,  1597,  1040,  1007,   100,  1012,
         2059,  2224,  1006,  2184,  1012,  1017,  1007,  2000,  2131,  1043,
         1006,  1061,  1007,  1027,  1042,  1006,  1006,  1061,  1597,  1040,
         1007,   100,  1007,   100,  1012,  2004,  1060,  2003, 12731,  3490,
         1006,  1037,  1010,  1038,  1007,  1010,  1042,  1006,  1060,  1007,
         1027,   100,  1006,  1038,  1597,  1037,  1007,  1010,  1037,  1060,
         1038,  1012,  2004,  2023,  2515,  2025,  9125,  1060,  1010,  5128,
         1060,  1027,  1006,  1061,  1597,  1040,  1007,   100,  2038,  2053,
         3466,  1012,  1996,  2846,  2003,  6310,  2004,  1597,  2487,  1998,
         1009,  1015,  1012,  7681,  1996,  5300,  1997,  1039,  1998,  1040,
         2000,  2131,  1043,  1006,  1061,  1007,  1027,  1006,   100,  1006,
         1038,  1597,  1037,  1007,  1007,   100,  1006,   100,  1006,  1038,
         1597,  1037,  1007,  1007,  1027,   100,  1010,  1597,  2487,  1061,
         1015,  1012,   102])"
3505,1,"['continuous', 'function', 'range', 'method', 'distribution', 'transformations', 'transformation']", METHOD OF DISTRIBUTION FUNCTIONS MODF,seg_643,"the modf is a simple and powerful method to find the pdf of a variety of continuous transformations. consider the general transformation y = h(x). the modf works when (i) h(x) is either an increasing or a decreasing function of x without discontinuities, (ii) the first derivative of h(x) exists throughout the range of the variate, (iii) h(x) is invertible (so that x = h−1(y), is uniquely solvable), and (iv) f(x) is differentiable once. we illustrate the use of modf for various forms of h(x) in their respective sections. consider the transformation y = h(x) = c ∗ x + b, where x has a known distribution. it satisfies all the three conditions on h(x). the cdf of y is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4118,  1997,  4353,  4972, 16913,  2546])","tensor([  101,  1996, 16913,  2546,  2003,  1037,  3722,  1998,  3928,  4118,
         2000,  2424,  1996, 11135,  1997,  1037,  3528,  1997,  7142, 21865,
         1012,  5136,  1996,  2236,  8651,  1061,  1027,  1044,  1006,  1060,
         1007,  1012,  1996, 16913,  2546,  2573,  2043,  1006,  1045,  1007,
         1044,  1006,  1060,  1007,  2003,  2593,  2019,  4852,  2030,  1037,
        16922,  3853,  1997,  1060,  2302, 12532, 16778, 11231,  6447,  1010,
         1006,  2462,  1007,  1996,  2034, 13819,  1997,  1044,  1006,  1060,
         1007,  6526,  2802,  1996,  2846,  1997,  1996, 13075, 13143,  1010,
         1006,  3523,  1007,  1044,  1006,  1060,  1007,  2003,  1999, 16874,
         7028,  1006,  2061,  2008,  1060,  1027,  1044, 27944,  1006,  1061,
         1007,  1010,  2003, 20640, 14017, 12423,  1007,  1010,  1998,  1006,
         4921,  1007,  1042,  1006,  1060,  1007,  2003,  2367, 19210,  2320,
         1012,  2057, 19141,  1996,  2224,  1997, 16913,  2546,  2005,  2536,
         3596,  1997,  1044,  1006,  1060,  1007,  1999,  2037,  7972,  5433,
         1012,  5136,  1996,  8651,  1061,  1027,  1044,  1006,  1060,  1007,
         1027,  1039,  1598,  1060,  1009,  1038,  1010,  2073,  1060,  2038,
         1037,  2124,  4353,  1012,  2009,  2938,  2483, 14213,  2035,  1996,
         2093,  3785,  2006,  1044,  1006,  1060,  1007,  1012,  1996,  3729,
         2546,  1997,  1061,  2003,   102])"
3506,0,[], METHOD OF DISTRIBUTION FUNCTIONS MODF,seg_643,"note that in equation (10.2), g(.) is the cdf of y, and f(.) is the cdf of x. as the cdf of y contains only y; and the constants (b,c), we have simply expressed y in terms of x. differentiate with respect to y to get",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4118,  1997,  4353,  4972, 16913,  2546])","tensor([  101,  3602,  2008,  1999,  8522,  1006,  2184,  1012,  1016,  1007,
         1010,  1043,  1006,  1012,  1007,  2003,  1996,  3729,  2546,  1997,
         1061,  1010,  1998,  1042,  1006,  1012,  1007,  2003,  1996,  3729,
         2546,  1997,  1060,  1012,  2004,  1996,  3729,  2546,  1997,  1061,
         3397,  2069,  1061,  1025,  1998,  1996,  5377,  2015,  1006,  1038,
         1010,  1039,  1007,  1010,  2057,  2031,  3432,  5228,  1061,  1999,
         3408,  1997,  1060,  1012, 21032,  2007,  4847,  2000,  1061,  2000,
         2131,   102])"
3507,1,"['cases', 'function']", METHOD OF DISTRIBUTION FUNCTIONS MODF,seg_643,"here, we need to consider two cases as c   0 or c   0. the above result holds for c   0. when c   0 (y = h(x) is a decreasing function), we get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])","tensor([ 4118,  1997,  4353,  4972, 16913,  2546])","tensor([  101,  2182,  1010,  2057,  2342,  2000,  5136,  2048,  3572,  2004,
         1039,  1014,  2030,  1039,  1014,  1012,  1996,  2682,  2765,  4324,
         2005,  1039,  1014,  1012,  2043,  1039,  1014,  1006,  1061,  1027,
         1044,  1006,  1060,  1007,  2003,  1037, 16922,  3853,  1007,  1010,
         2057,  2131,   102])"
3508,1,['cases'], METHOD OF DISTRIBUTION FUNCTIONS MODF,seg_643,differentiation gives us g(y) = (− ∕ y)f((y − b)∕c) = (−1∕c) ∗ f ((y − b)∕c). combine both cases to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4118,  1997,  4353,  4972, 16913,  2546])","tensor([  101, 20582,  3957,  2149,  1043,  1006,  1061,  1007,  1027,  1006,
         1597,   100,  1061,  1007,  1042,  1006,  1006,  1061,  1597,  1038,
         1007,   100,  1007,  1027,  1006,   100,  1007,  1598,  1042,  1006,
         1006,  1061,  1597,  1038,  1007,   100,  1007,  1012, 11506,  2119,
         3572,  2000,  2131,   102])"
3509,1,['linear'], METHOD OF DISTRIBUTION FUNCTIONS MODF,seg_643,"where the vertical line means “absolute value,” which absorbs the ± sign. thus, the pdf of y is easily obtained from that of x. the only assumption we have made is that f(y) is differentiable, as the other conditions are satisfied by the linear",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0.])","tensor([ 4118,  1997,  4353,  4972, 16913,  2546])","tensor([  101,  2073,  1996,  7471,  2240,  2965,  1523,  7619,  3643,  1010,
         1524,  2029, 16888,  2015,  1996,  1081,  3696,  1012,  2947,  1010,
         1996, 11135,  1997,  1061,  2003,  4089,  4663,  2013,  2008,  1997,
         1060,  1012,  1996,  2069, 11213,  2057,  2031,  2081,  2003,  2008,
         1042,  1006,  1061,  1007,  2003,  2367, 19210,  1010,  2004,  1996,
         2060,  3785,  2024,  8510,  2011,  1996,  7399,   102])"
3510,1,['range'], METHOD OF DISTRIBUTION FUNCTIONS MODF,seg_643,"transformation. the constant c can be any nonzero real number. depending on whether |c|   1 or   1, the new range is either expanded or contracted.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4118,  1997,  4353,  4972, 16913,  2546])","tensor([  101,  8651,  1012,  1996,  5377,  1039,  2064,  2022,  2151,  2512,
         6290,  2080,  2613,  2193,  1012,  5834,  2006,  3251,  1064,  1039,
         1064,  1015,  2030,  1015,  1010,  1996,  2047,  2846,  2003,  2593,
         4423,  2030, 11016,  1012,   102])"
3511,1,['distribution'], Distribution of Absolute Value X Using MoDF,seg_645,"the modf can easily be adapted to find the distribution of y = |x|. this is meaningful only when x takes both positive and negative values (if x assumes only negative values, then |x| = −x). as above, let g(y) be the cdf of y. then,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101,  1996, 16913,  2546,  2064,  4089,  2022,  5967,  2000,  2424,
         1996,  4353,  1997,  1061,  1027,  1064,  1060,  1064,  1012,  2023,
         2003, 15902,  2069,  2043,  1060,  3138,  2119,  3893,  1998,  4997,
         5300,  1006,  2065,  1060, 15980,  2069,  4997,  5300,  1010,  2059,
         1064,  1060,  1064,  1027,  1597,  2595,  1007,  1012,  2004,  2682,
         1010,  2292,  1043,  1006,  1061,  1007,  2022,  1996,  3729,  2546,
         1997,  1061,  1012,  2059,  1010,   102])"
3512,1,"['symmetric', 'case']", Distribution of Absolute Value X Using MoDF,seg_645,"differentiate both sides to get g(y) = f (y) + f (−y). in the particular case when y is symmetric, f (y) = f (−y) so that g(y) = 2 f (y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101, 21032,  2119,  3903,  2000,  2131,  1043,  1006,  1061,  1007,
         1027,  1042,  1006,  1061,  1007,  1009,  1042,  1006,  1597,  2100,
         1007,  1012,  1999,  1996,  3327,  2553,  2043,  1061,  2003, 19490,
         1010,  1042,  1006,  1061,  1007,  1027,  1042,  1006,  1597,  2100,
         1007,  2061,  2008,  1043,  1006,  1061,  1007,  1027,  1016,  1042,
         1006,  1061,  1007,  1012,   102])"
3513,1,['absolute value'], Distribution of Absolute Value X Using MoDF,seg_645,"example 10.3 absolute value of cuni(− ∕2,  ∕2)",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101,  2742,  2184,  1012,  1017,  7619,  3643,  1997, 12731,  3490,
         1006,  1597,   100,  1010,   100,  1007,   102])"
3514,1,['distribution'], Distribution of Absolute Value X Using MoDF,seg_645,"if x is cuni(− ∕2,  ∕2) variate, find the distribution of y = |x|.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101,  2065,  1060,  2003, 12731,  3490,  1006,  1597,   100,  1010,
          100,  1007, 13075, 13143,  1010,  2424,  1996,  4353,  1997,  1061,
         1027,  1064,  1060,  1064,  1012,   102])"
3515,1,['distribution'], Distribution of Absolute Value X Using MoDF,seg_645,"solution 10.3 as the cuni(− ∕2, ∕2) distribution exhibits special symmetry around zero point, f (−x) = f (x). we know f (x) = 1∕ for − ∕2 ≤ x ≤ ∕2. thus, using equation (10.8) the pdf of y = |x| is f (y) = 2 ∗ f (x) = 2∕ for 0 ≤ y ≤ ∕2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101,  5576,  2184,  1012,  1017,  2004,  1996, 12731,  3490,  1006,
         1597,   100,  1010,   100,  1007,  4353, 10637,  2569, 14991,  2105,
         5717,  2391,  1010,  1042,  1006,  1597,  2595,  1007,  1027,  1042,
         1006,  1060,  1007,  1012,  2057,  2113,  1042,  1006,  1060,  1007,
         1027,   100,  2005,  1597,   100,  1608,  1060,  1608,   100,  1012,
         2947,  1010,  2478,  8522,  1006,  2184,  1012,  1022,  1007,  1996,
        11135,  1997,  1061,  1027,  1064,  1060,  1064,  2003,  1042,  1006,
         1061,  1007,  1027,  1016,  1598,  1042,  1006,  1060,  1007,  1027,
          100,  2005,  1014,  1608,  1061,  1608,   100,  1012,   102])"
3516,1,"['absolute value', 'cauchy', 'distribution']", Distribution of Absolute Value X Using MoDF,seg_645,example 10.4 distribution of absolute value of cauchy variate,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101,  2742,  2184,  1012,  1018,  4353,  1997,  7619,  3643,  1997,
         6187, 10875,  2100, 13075, 13143,   102])"
3517,1,"['cauchy', 'standard', 'distribution']", Distribution of Absolute Value X Using MoDF,seg_645,"if x is a standard cauchy variate, find the distribution of y = |x|.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101,  2065,  1060,  2003,  1037,  3115,  6187, 10875,  2100, 13075,
        13143,  1010,  2424,  1996,  4353,  1997,  1061,  1027,  1064,  1060,
         1064,  1012,   102])"
3518,1,"['symmetric', 'distribution']", Distribution of Absolute Value X Using MoDF,seg_645,"solution 10.4 we know that f (x) = 1∕[ (1 + x2)], which is symmetric in x. using equation (10.8), the distribution of y is 2 ∗ f (x) = 2∕[ (1 + x2)] for 0 ≤ x ≤ ∞.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  7619,  3643,  1060,  2478, 16913,  2546])","tensor([  101,  5576,  2184,  1012,  1018,  2057,  2113,  2008,  1042,  1006,
         1060,  1007,  1027,   100,  1031,  1006,  1015,  1009,  1060,  2475,
         1007,  1033,  1010,  2029,  2003, 19490,  1999,  1060,  1012,  2478,
         8522,  1006,  2184,  1012,  1022,  1007,  1010,  1996,  4353,  1997,
         1061,  2003,  1016,  1598,  1042,  1006,  1060,  1007,  1027,   100,
         1031,  1006,  1015,  1009,  1060,  2475,  1007,  1033,  2005,  1014,
         1608,  1060,  1608,  1601,  1012,   102])"
3519,1,"['continuous', 'continuous random variable', 'range', 'random variable', 'random', 'distribution', 'variable']", Distribution of Fx and Fx Using MoDF,seg_647,"let f(x) be the cdf and f−1(x) be the inverse cdf of a continuous random variable. obviously, the minimum value that f(x) can take is 0, and the maximum value is 1. the following section derives the distribution of f(x), irrespective of the range.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2292,  1042,  1006,  1060,  1007,  2022,  1996,  3729,  2546,
         1998,  1042, 27944,  1006,  1060,  1007,  2022,  1996, 19262,  3729,
         2546,  1997,  1037,  7142,  6721,  8023,  1012,  5525,  1010,  1996,
         6263,  3643,  2008,  1042,  1006,  1060,  1007,  2064,  2202,  2003,
         1014,  1010,  1998,  1996,  4555,  3643,  2003,  1015,  1012,  1996,
         2206,  2930, 12153,  1996,  4353,  1997,  1042,  1006,  1060,  1007,
         1010, 20868,  6072,  5051, 15277,  1997,  1996,  2846,  1012,   102])"
3520,1,"['continuous', 'uniformly distributed', 'distribution']", Distribution of Fx and Fx Using MoDF,seg_647,"10.4.2.1 distribution of f(x) if x is a continuous variate, u = f(x) is uniformly distributed in [0, 1]. consider",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2184,  1012,  1018,  1012,  1016,  1012,  1015,  4353,  1997,
         1042,  1006,  1060,  1007,  2065,  1060,  2003,  1037,  7142, 13075,
        13143,  1010,  1057,  1027,  1042,  1006,  1060,  1007,  2003, 27423,
         5500,  1999,  1031,  1014,  1010,  1015,  1033,  1012,  5136,   102])"
3521,1,"['rectangular distribution', 'distribution']", Distribution of Fx and Fx Using MoDF,seg_647,"we have seen in chapter 7 that the cdf of a rectangular distribution is (x − a)∕(b − a). put a = 0, b = 1 to get f(x) = x. equation (10.7) then shows that f(u) has a unit rectangular distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2057,  2031,  2464,  1999,  3127,  1021,  2008,  1996,  3729,
         2546,  1997,  1037, 10806,  4353,  2003,  1006,  1060,  1597,  1037,
         1007,   100,  1006,  1038,  1597,  1037,  1007,  1012,  2404,  1037,
         1027,  1014,  1010,  1038,  1027,  1015,  2000,  2131,  1042,  1006,
         1060,  1007,  1027,  1060,  1012,  8522,  1006,  2184,  1012,  1021,
         1007,  2059,  3065,  2008,  1042,  1006,  1057,  1007,  2038,  1037,
         3131, 10806,  4353,  1012,   102])"
3522,1,"['continuous', 'cases', 'interval', 'distribution', 'case']", Distribution of Fx and Fx Using MoDF,seg_647,"10.4.2.2 distribution of f−1(x) distribution of y = f−1(x) is well tractable in the continuous case when x is defined on unit interval. if we define f−1(x) as the minimum value of y satisfying f(y) ≥ x, we could use the modf to find the distribution in certain cases. obviously, f−1(x) is nondecreasing and satisfy (i) f−1(f(x)) ≤ x, for −∞   x   ∞ and (ii) f(f−1(y)) ≥ y for 0   y   1. let y = f−1(x). if there are no discontinuities,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2184,  1012,  1018,  1012,  1016,  1012,  1016,  4353,  1997,
         1042, 27944,  1006,  1060,  1007,  4353,  1997,  1061,  1027,  1042,
        27944,  1006,  1060,  1007,  2003,  2092, 12859,  3085,  1999,  1996,
         7142,  2553,  2043,  1060,  2003,  4225,  2006,  3131, 13483,  1012,
         2065,  2057,  9375,  1042, 27944,  1006,  1060,  1007,  2004,  1996,
         6263,  3643,  1997,  1061, 17087,  1042,  1006,  1061,  1007,  1609,
         1060,  1010,  2057,  2071,  2224,  1996, 16913,  2546,  2000,  2424,
         1996,  4353,  1999,  3056,  3572,  1012,  5525,  1010,  1042, 27944,
         1006,  1060,  1007,  2003,  2512,  3207, 16748, 21369,  3070,  1998,
        13225,  1006,  1045,  1007,  1042, 27944,  1006,  1042,  1006,  1060,
         1007,  1007,  1608,  1060,  1010,  2005,  1597, 30128,  1060,  1601,
         1998,  1006,  2462,  1007,  1042,  1006,  1042, 27944,  1006,  1061,
         1007,  1007,  1609,  1061,  2005,  1014,  1061,  1015,  1012,  2292,
         1061,  1027,  1042, 27944,  1006,  1060,  1007,  1012,  2065,  2045,
         2024,  2053, 12532, 16778, 11231,  6447,  1010,   102])"
3523,1,"['range', 'interval', 'uniformly distributed', 'case']", Distribution of Fx and Fx Using MoDF,seg_647,"where we have used f(f−1(x)) = x (strictly). in the particular case, when y is cuni[0,1], we have f(y) = y. substitute in the last term (in square bracket) of equation (10.8) to get the cdf of f−1(x) as g(y) = f(f(y)) = f(y) = y showing that y is uniformly distributed with unit range. next, consider the general case. as the derivative of f(f(y)) is unambiguously determined when the argument (of outer f()) ranges over the unit interval, we could differentiate both sides of equation (10.8) to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2073,  2057,  2031,  2109,  1042,  1006,  1042, 27944,  1006,
         1060,  1007,  1007,  1027,  1060,  1006,  9975,  1007,  1012,  1999,
         1996,  3327,  2553,  1010,  2043,  1061,  2003, 12731,  3490,  1031,
         1014,  1010,  1015,  1033,  1010,  2057,  2031,  1042,  1006,  1061,
         1007,  1027,  1061,  1012,  7681,  1999,  1996,  2197,  2744,  1006,
         1999,  2675, 21605,  1007,  1997,  8522,  1006,  2184,  1012,  1022,
         1007,  2000,  2131,  1996,  3729,  2546,  1997,  1042, 27944,  1006,
         1060,  1007,  2004,  1043,  1006,  1061,  1007,  1027,  1042,  1006,
         1042,  1006,  1061,  1007,  1007,  1027,  1042,  1006,  1061,  1007,
         1027,  1061,  4760,  2008,  1061,  2003, 27423,  5500,  2007,  3131,
         2846,  1012,  2279,  1010,  5136,  1996,  2236,  2553,  1012,  2004,
         1996, 13819,  1997,  1042,  1006,  1042,  1006,  1061,  1007,  1007,
         2003, 14477, 14905,  8004, 28078,  4340,  2043,  1996,  6685,  1006,
         1997,  6058,  1042,  1006,  1007,  1007,  8483,  2058,  1996,  3131,
        13483,  1010,  2057,  2071, 21032,  2119,  3903,  1997,  8522,  1006,
         2184,  1012,  1022,  1007,  2000,  2131,   102])"
3524,1,"['continuous', 'mean', 'continuous distributions', 'deviation', 'distributions', 'discrete', 'case']", Distribution of Fx and Fx Using MoDF,seg_647,"where we have used the function-of-a-function rule of differentiation because inner f(y), being the cdf, satisfies 0 ≤ f(y) ≤ 1. use f(y) − f(y − 1) = f (y) in the discrete case. an application of the above result is to find the mean deviation of continuous distributions given below.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2073,  2057,  2031,  2109,  1996,  3853,  1011,  1997,  1011,
         1037,  1011,  3853,  3627,  1997, 20582,  2138,  5110,  1042,  1006,
         1061,  1007,  1010,  2108,  1996,  3729,  2546,  1010,  2938,  2483,
        14213,  1014,  1608,  1042,  1006,  1061,  1007,  1608,  1015,  1012,
         2224,  1042,  1006,  1061,  1007,  1597,  1042,  1006,  1061,  1597,
         1015,  1007,  1027,  1042,  1006,  1061,  1007,  1999,  1996, 16246,
         2553,  1012,  2019,  4646,  1997,  1996,  2682,  2765,  2003,  2000,
         2424,  1996,  2812, 24353,  1997,  7142, 20611,  2445,  2917,  1012,
          102])"
3525,1,"['continuous', 'mean', 'range', 'deviation', 'continuous distribution', 'distribution']", Distribution of Fx and Fx Using MoDF,seg_647,"theorem 10.1 if f (f−1(x)) of a continuous distribution has closed form, and is integrable in the proper range, the mean deviation is given by",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0.,
        0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  9872,  2184,  1012,  1015,  2065,  1042,  1006,  1042, 27944,
         1006,  1060,  1007,  1007,  1997,  1037,  7142,  4353,  2038,  2701,
         2433,  1010,  1998,  2003, 20014, 13910, 16670,  1999,  1996,  5372,
         2846,  1010,  1996,  2812, 24353,  2003,  2445,  2011,   102])"
3526,1,['functions'], Distribution of Fx and Fx Using MoDF,seg_647,proof: the proof follows easily by putting y = f−1(x) and using properties of distribution functions in the above result. this is illustrated below.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  6947,  1024,  1996,  6947,  4076,  4089,  2011,  5128,  1061,
         1027,  1042, 27944,  1006,  1060,  1007,  1998,  2478,  5144,  1997,
         4353,  4972,  1999,  1996,  2682,  2765,  1012,  2023,  2003,  7203,
         2917,  1012,   102])"
3527,1,"['mean', 'deviation', 'exponential distribution', 'distribution', 'exponential']", Distribution of Fx and Fx Using MoDF,seg_647,example 10.5 mean deviation of exponential distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2742,  2184,  1012,  1019,  2812, 24353,  1997, 27258,  4353,
          102])"
3528,1,"['mean', 'deviation']", Distribution of Fx and Fx Using MoDF,seg_647,if x is exp( ) find the mean deviation.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2065,  1060,  2003,  4654,  2361,  1006,  1007,  2424,  1996,
         2812, 24353,  1012,   102])"
3529,1,"['exponential', 'mean', 'exponential distribution', 'distribution']", Distribution of Fx and Fx Using MoDF,seg_647,"solution 10.5 consider the exponential distribution f (x) =  e− x with mean   = 1∕  and cdf 1 − e− x. put x = 1∕  in the cdf to get f( ) = 1 − e− (1∕ ) = 1 − e−1 = (e − 1)∕e. the inverse cdf is f−1(x) = −(log (1 − x))∕ , where log is to the base e (i.e., ln(1 − x)). put the values in equation (10.10) to get the simple integral (e−1)∕e md = 2 tdt∕ (1 − t). (10.11) ∫t=0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  5576,  2184,  1012,  1019,  5136,  1996, 27258,  4353,  1042,
         1006,  1060,  1007,  1027,  1041, 22543,  1060,  2007,  2812,  1027,
          100,  1998,  3729,  2546,  1015,  1597,  1041, 22543,  1060,  1012,
         2404,  1060,  1027,   100,  1999,  1996,  3729,  2546,  2000,  2131,
         1042,  1006,  1007,  1027,  1015,  1597,  1041, 22543,  1006,   100,
         1007,  1027,  1015,  1597,  1041, 27944,  1027,  1006,  1041,  1597,
         1015,  1007,   100,  1012,  1996, 19262,  3729,  2546,  2003,  1042,
        27944,  1006,  1060,  1007,  1027,  1597,  1006,  8833,  1006,  1015,
         1597,  1060,  1007,  1007,   100,  1010,  2073,  8833,  2003,  2000,
         1996,  2918,  1041,  1006,  1045,  1012,  1041,  1012,  1010,  1048,
         2078,  1006,  1015,  1597,  1060,  1007,  1007,  1012,  2404,  1996,
         5300,  1999,  8522,  1006,  2184,  1012,  2184,  1007,  2000,  2131,
         1996,  3722,  9897,  1006,  1041, 27944,  1007,   100,  9108,  1027,
         1016,   100,  1006,  1015,  1597,  1056,  1007,  1012,  1006,  2184,
         1012,  2340,  1007,   100,  1027,  1014,   102])"
3530,0,[], Distribution of Fx and Fx Using MoDF,seg_647,where we have used,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([ 101, 2073, 2057, 2031, 2109,  102])"
3531,1,"['mean', 'deviation']", Distribution of Fx and Fx Using MoDF,seg_647,write t in the numerator as 1 − (1 − t) and split the integral into two. they evaluate to (1∕e − 1)∕ and 1∕ . adding them together gives the mean deviation as 1/(e ).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  4339,  1056,  1999,  1996, 16371,  5017,  8844,  2004,  1015,
         1597,  1006,  1015,  1597,  1056,  1007,  1998,  3975,  1996,  9897,
         2046,  2048,  1012,  2027, 16157,  2000,  1006,   100,  1597,  1015,
         1007,   100,  1998,   100,  1012,  5815,  2068,  2362,  3957,  1996,
         2812, 24353,  2004,  1015,  1013,  1006,  1041,  1007,  1012,   102])"
3532,1,"['distribution function', 'function', 'distribution']", Distribution of Fx and Fx Using MoDF,seg_647,"example 10.6 inverse of cuni(a, b) distribution function",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2742,  2184,  1012,  1020, 19262,  1997, 12731,  3490,  1006,
         1037,  1010,  1038,  1007,  4353,  3853,   102])"
3533,1,['distribution'], Distribution of Fx and Fx Using MoDF,seg_647,"if x is cuni(a, b) find the distribution of f−1(x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2065,  1060,  2003, 12731,  3490,  1006,  1037,  1010,  1038,
         1007,  2424,  1996,  4353,  1997,  1042, 27944,  1006,  1060,  1007,
         1012,   102])"
3534,1,['range'], Distribution of Fx and Fx Using MoDF,seg_647,"solution 10.6 we know that the cdf of cuni(a, b) is f(x) = (x − a)∕(b − a). using equation (10.9), the pdf of y = f−1(x) is f ((y − a)∕(b − a)) ∗ f (y). as f (y) = 1∕(b − a) irrespective of the value of y, and f ((y − a)∕(b − a)) has unit range, we get the pdf of y as g(y) = 1∕(b − a), a ≤ y ≤ b.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  5576,  2184,  1012,  1020,  2057,  2113,  2008,  1996,  3729,
         2546,  1997, 12731,  3490,  1006,  1037,  1010,  1038,  1007,  2003,
         1042,  1006,  1060,  1007,  1027,  1006,  1060,  1597,  1037,  1007,
          100,  1006,  1038,  1597,  1037,  1007,  1012,  2478,  8522,  1006,
         2184,  1012,  1023,  1007,  1010,  1996, 11135,  1997,  1061,  1027,
         1042, 27944,  1006,  1060,  1007,  2003,  1042,  1006,  1006,  1061,
         1597,  1037,  1007,   100,  1006,  1038,  1597,  1037,  1007,  1007,
         1598,  1042,  1006,  1061,  1007,  1012,  2004,  1042,  1006,  1061,
         1007,  1027,   100,  1006,  1038,  1597,  1037,  1007, 20868,  6072,
         5051, 15277,  1997,  1996,  3643,  1997,  1061,  1010,  1998,  1042,
         1006,  1006,  1061,  1597,  1037,  1007,   100,  1006,  1038,  1597,
         1037,  1007,  1007,  2038,  3131,  2846,  1010,  2057,  2131,  1996,
        11135,  1997,  1061,  2004,  1043,  1006,  1061,  1007,  1027,   100,
         1006,  1038,  1597,  1037,  1007,  1010,  1037,  1608,  1061,  1608,
         1038,  1012,   102])"
3535,1,"['mean', 'deviation', 'uniform distribution', 'distribution']", Distribution of Fx and Fx Using MoDF,seg_647,example 10.7 mean deviation of uniform distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2742,  2184,  1012,  1021,  2812, 24353,  1997,  6375,  4353,
          102])"
3536,1,"['mean', 'deviation']", Distribution of Fx and Fx Using MoDF,seg_647,"if x is cuni(a, b), find the mean deviation.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2065,  1060,  2003, 12731,  3490,  1006,  1037,  1010,  1038,
         1007,  1010,  2424,  1996,  2812, 24353,  1012,   102])"
3537,1,"['mean', 'symmetry', 'range']", Distribution of Fx and Fx Using MoDF,seg_647,"solution 10.7 as the cdf of cuni(a, b) is f(x) = (x − a)∕(b − a),f( ) = f((a + b)∕2) = 1∕2 (this also follows trivially from the fact that cuni(a,b) has special symmetry so that the area up to the mean is 1/2). as the density is constant throughout the range, f (f−1(t)) = 1∕(b − a) always. substitute these values in equation (10.10) to get the md as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  5576,  2184,  1012,  1021,  2004,  1996,  3729,  2546,  1997,
        12731,  3490,  1006,  1037,  1010,  1038,  1007,  2003,  1042,  1006,
         1060,  1007,  1027,  1006,  1060,  1597,  1037,  1007,   100,  1006,
         1038,  1597,  1037,  1007,  1010,  1042,  1006,  1007,  1027,  1042,
         1006,  1006,  1037,  1009,  1038,  1007,   100,  1007,  1027,   100,
         1006,  2023,  2036,  4076, 20610,  2135,  2013,  1996,  2755,  2008,
        12731,  3490,  1006,  1037,  1010,  1038,  1007,  2038,  2569, 14991,
         2061,  2008,  1996,  2181,  2039,  2000,  1996,  2812,  2003,  1015,
         1013,  1016,  1007,  1012,  2004,  1996,  4304,  2003,  5377,  2802,
         1996,  2846,  1010,  1042,  1006,  1042, 27944,  1006,  1056,  1007,
         1007,  1027,   100,  1006,  1038,  1597,  1037,  1007,  2467,  1012,
         7681,  2122,  5300,  1999,  8522,  1006,  2184,  1012,  2184,  1007,
         2000,  2131,  1996,  9108,  2004,   102])"
3538,0,[], Distribution of Fx and Fx Using MoDF,seg_647,this tallies with the result given in page 264.,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 23292,  1998, 23292,  2478, 16913,  2546])","tensor([  101,  2023,  4206,  3111,  2007,  1996,  2765,  2445,  1999,  3931,
        21611,  1012,   102])"
3539,1,"['continuous', 'transformation', 'functions', 'distributions', 'method', 'random', 'random variables', 'change of variable', 'variables', 'average', 'variable']", CHANGE OF VARIABLE TECHNIQUE,seg_649,the change of variable technique (cov-t) (also called transformation of variable technique (tov-t)) is a useful method to find distributions of simple continuous differentiable functions of real-valued random variables. it works on the principle that the average value of an integral favg(x) = 1∕(b − a) ∫a,tensor(1),"tensor([0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 1.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  1996,  2689,  1997,  8023,  6028,  1006,  2522,  2615,  1011,
         1056,  1007,  1006,  2036,  2170,  8651,  1997,  8023,  6028,  1006,
         2000,  2615,  1011,  1056,  1007,  1007,  2003,  1037,  6179,  4118,
         2000,  2424, 20611,  1997,  3722,  7142,  2367, 19210,  4972,  1997,
         2613,  1011, 11126,  6721, 10857,  1012,  2009,  2573,  2006,  1996,
         6958,  2008,  1996,  2779,  3643,  1997,  2019,  9897,  6904,  2615,
         2290,  1006,  1060,  1007,  1027,   100,  1006,  1038,  1597,  1037,
         1007,   100,   102])"
3540,1,"['continuous', 'transformation']", CHANGE OF VARIABLE TECHNIQUE,seg_649,an arbitrary continuous transformation y = h(x) by the integral gavg(y) = 1∕(h(b) −,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  2019, 15275,  7142,  8651,  1061,  1027,  1044,  1006,  1060,
         1007,  2011,  1996,  9897, 11721,  2615,  2290,  1006,  1061,  1007,
         1027,   100,  1006,  1044,  1006,  1038,  1007,  1597,   102])"
3541,1,"['function', 'interval', 'method', 'jacobian', 'transformation']", CHANGE OF VARIABLE TECHNIQUE,seg_649,"now consider limb→a[(h(b) − h(a))∕(b − a)], which is the limiting value of the derivative h(x) at x = a. if this derivative of h′ (x) exists for each point x in the interval (a, b), then the rhs will be finite. when b → a from above, the lhs integral approaches f (x) and rhs integral approaches g(y)∕h′ (y). this allows us to equate the width of an infinitesimal strip under the function f (x) as f (x)dx = g(y)dy for all points x in (a, b). because y = h(x) is invertible, we get g(y) = f (x)| h(y)∕ y| = |1∕j|f (h−1(y)), where j is called the jacobian of the transformation. the only conditions in this transformation are that the mapping is once differentiable (i.e., h′ (x) exists) and it is invertible (x can be expressed in terms of y). this can also be proved using the cdf method as follows.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  2085,  5136, 15291, 30113,  2050,  1031,  1006,  1044,  1006,
         1038,  1007,  1597,  1044,  1006,  1037,  1007,  1007,   100,  1006,
         1038,  1597,  1037,  1007,  1033,  1010,  2029,  2003,  1996, 14879,
         3643,  1997,  1996, 13819,  1044,  1006,  1060,  1007,  2012,  1060,
         1027,  1037,  1012,  2065,  2023, 13819,  1997,  1044,  1531,  1006,
         1060,  1007,  6526,  2005,  2169,  2391,  1060,  1999,  1996, 13483,
         1006,  1037,  1010,  1038,  1007,  1010,  2059,  1996,  1054,  7898,
         2097,  2022, 10713,  1012,  2043,  1038,  1585,  1037,  2013,  2682,
         1010,  1996,  1048,  7898,  9897,  8107,  1042,  1006,  1060,  1007,
         1998,  1054,  7898,  9897,  8107,  1043,  1006,  1061,  1007,   100,
         1531,  1006,  1061,  1007,  1012,  2023,  4473,  2149,  2000,  1041,
        16211,  2618,  1996,  9381,  1997,  2019, 10709,  5332,  9067,  6167,
         2104,  1996,  3853,  1042,  1006,  1060,  1007,  2004,  1042,  1006,
         1060,  1007,  1040,  2595,  1027,  1043,  1006,  1061,  1007,  1040,
         2100,  2005,  2035,  2685,  1060,  1999,  1006,  1037,  1010,  1038,
         1007,  1012,  2138,  1061,  1027,  1044,  1006,  1060,  1007,  2003,
         1999, 16874,  7028,  1010,  2057,  2131,  1043,  1006,  1061,  1007,
         1027,  1042,  1006,  1060,  1007,  1064,  1044,  1006,  1061,  1007,
          100,  1061,  1064,  1027,  1064,   100,  1064,  1042,  1006,  1044,
        27944,  1006,  1061,  1007,  1007,  1010,  2073,  1046,  2003,  2170,
         1996,  6213,  2937,  1997,  1996,  8651,  1012,  1996,  2069,  3785,
         1999,  2023,  8651,  2024,  2008,  1996, 12375,  2003,  2320,  2367,
        19210,  1006,  1045,  1012,  1041,  1012,  1010,  1044,  1531,  1006,
         1060,  1007,  6526,  1007,  1998,  2009,  2003,  1999, 16874,  7028,
         1006,  1060,  2064,  2022,  5228,  1999,  3408,  1997,  1061,  1007,
         1012,  2023,  2064,  2036,  2022,  4928,  2478,  1996,  3729,  2546,
         4118,  2004,  4076,  1012,   102])"
3542,1,"['cases', 'transformation']", CHANGE OF VARIABLE TECHNIQUE,seg_649,theorem 10.2 the cdf of one-variable transformation is given by g(y) = f(u−1(y)) if u(x) is strictly increasing and 1 − f(u−1(y)) if u(x) is strictly decreasing. the pdf in both cases is g(y) = f (u−1(y))|  ,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  9872,  2184,  1012,  1016,  1996,  3729,  2546,  1997,  2028,
         1011,  8023,  8651,  2003,  2445,  2011,  1043,  1006,  1061,  1007,
         1027,  1042,  1006,  1057, 27944,  1006,  1061,  1007,  1007,  2065,
         1057,  1006,  1060,  1007,  2003,  9975,  4852,  1998,  1015,  1597,
         1042,  1006,  1057, 27944,  1006,  1061,  1007,  1007,  2065,  1057,
         1006,  1060,  1007,  2003,  9975, 16922,  1012,  1996, 11135,  1999,
         2119,  3572,  2003,  1043,  1006,  1061,  1007,  1027,  1042,  1006,
         1057, 27944,  1006,  1061,  1007,  1007,  1064,   102])"
3543,1,['function'], CHANGE OF VARIABLE TECHNIQUE,seg_649,"proof: if u(x) is a strictly increasing function and invertible,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  6947,  1024,  2065,  1057,  1006,  1060,  1007,  2003,  1037,
         9975,  4852,  3853,  1998,  1999, 16874,  7028,  1010,   102])"
3544,1,"['results', 'transformation']", CHANGE OF VARIABLE TECHNIQUE,seg_649,"as the derivative is positive, the transformation results in g(y) y = f (x) x, so that g(y) = f (u−1(y))|  ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  2004,  1996, 13819,  2003,  3893,  1010,  1996,  8651,  3463,
         1999,  1043,  1006,  1061,  1007,  1061,  1027,  1042,  1006,  1060,
         1007,  1060,  1010,  2061,  2008,  1043,  1006,  1061,  1007,  1027,
         1042,  1006,  1057, 27944,  1006,  1061,  1007,  1007,  1064,   102])"
3545,1,['function'], CHANGE OF VARIABLE TECHNIQUE,seg_649,"x y |. if u(x) is a strictly decreasing function, the derivative is negative",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  1060,  1061,  1064,  1012,  2065,  1057,  1006,  1060,  1007,
         2003,  1037,  9975, 16922,  3853,  1010,  1996, 13819,  2003,  4997,
          102])"
3546,1,"['results', 'transformation']", CHANGE OF VARIABLE TECHNIQUE,seg_649,so that the transformation results in g(y) = 1 − f(u−1(y)) and g(y) = −f (u−1(y))|  ,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  2061,  2008,  1996,  8651,  3463,  1999,  1043,  1006,  1061,
         1007,  1027,  1015,  1597,  1042,  1006,  1057, 27944,  1006,  1061,
         1007,  1007,  1998,  1043,  1006,  1061,  1007,  1027,  1597,  2546,
         1006,  1057, 27944,  1006,  1061,  1007,  1007,  1064,   102])"
3547,1,"['absolute value', 'results', 'jacobian']", CHANGE OF VARIABLE TECHNIQUE,seg_649,"x y |. this is the reason why we take the absolute value of the jacobian. these results can easily be generalized to n-dimensions, as shown in chapter 11.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  1060,  1061,  1064,  1012,  2023,  2003,  1996,  3114,  2339,
         2057,  2202,  1996,  7619,  3643,  1997,  1996,  6213,  2937,  1012,
         2122,  3463,  2064,  4089,  2022, 18960,  2000,  1050,  1011,  9646,
         1010,  2004,  3491,  1999,  3127,  2340,  1012,   102])"
3548,1,"['mean', 'deviation', 'normal distribution', 'standard normal distribution', 'standardization', 'standard normal', 'results', 'normal', 'standard deviation', 'standard', 'jacobian', 'distribution', 'transformation', 'case']", CHANGE OF VARIABLE TECHNIQUE,seg_649,"the standardization transformation z = (x −  )∕ , where   is the mean and   is the standard deviation, is the simplest and the most frequent covt. the jacobian in this case is | z∕ x| = 1∕ . when applied to an arbitrary normal distribution, this results in a standard normal distribution, which is extensively tabulated.",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2689, 1997, 8023, 6028])","tensor([  101,  1996, 28648,  8651,  1062,  1027,  1006,  1060,  1597,  1007,
          100,  1010,  2073,  2003,  1996,  2812,  1998,  2003,  1996,  3115,
        24353,  1010,  2003,  1996, 21304,  1998,  1996,  2087,  6976,  2522,
         2615,  2102,  1012,  1996,  6213,  2937,  1999,  2023,  2553,  2003,
         1064,   100,  1060,  1064,  1027,   100,  1012,  2043,  4162,  2000,
         2019, 15275,  3671,  4353,  1010,  2023,  3463,  1999,  1037,  3115,
         3671,  4353,  1010,  2029,  2003,  8077, 21628,  8898,  1012,   102])"
3549,1,"['random variable', 'transformed', 'random', 'variable']", Linear Transformations,seg_651,"any random variable x can be transformed linearly using y = cx + b, where c ≠ 0. as they are linearly related, we could directly invert it to get x = (y − b)∕c and |j| = 1∕|c|. let gy (y) denote the pdf of y, and fx(x) denote the pdf of x. then,",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7399, 21865])","tensor([  101,  2151,  6721,  8023,  1060,  2064,  2022,  8590,  7399,  2135,
         2478,  1061,  1027,  1039,  2595,  1009,  1038,  1010,  2073,  1039,
         1027,  1014,  1012,  2004,  2027,  2024,  7399,  2135,  3141,  1010,
         2057,  2071,  3495,  1999, 16874,  2009,  2000,  2131,  1060,  1027,
         1006,  1061,  1597,  1038,  1007,   100,  1998,  1064,  1046,  1064,
         1027,   100,  1064,  1039,  1064,  1012,  2292,  1043,  2100,  1006,
         1061,  1007, 19090,  1996, 11135,  1997,  1061,  1010,  1998, 23292,
         1006,  1060,  1007, 19090,  1996, 11135,  1997,  1060,  1012,  2059,
         1010,   102])"
3550,1,"['continuous', 'discrete']", Linear Transformations,seg_651,"which is the same result obtained by the modf technique. when the variate is discrete, we simply ignore the 1∕|c| multiplier. in general, if the transformation is y = h(x), the pdf of y is g(y) = f (h−1(y)) if x is discrete and g(y) = f (h−1(y))| h−1(y)∕ y| if x is continuous.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 7399, 21865])","tensor([  101,  2029,  2003,  1996,  2168,  2765,  4663,  2011,  1996, 16913,
         2546,  6028,  1012,  2043,  1996, 13075, 13143,  2003, 16246,  1010,
         2057,  3432,  8568,  1996,   100,  1064,  1039,  1064,  4800, 24759,
         3771,  1012,  1999,  2236,  1010,  2065,  1996,  8651,  2003,  1061,
         1027,  1044,  1006,  1060,  1007,  1010,  1996, 11135,  1997,  1061,
         2003,  1043,  1006,  1061,  1007,  1027,  1042,  1006,  1044, 27944,
         1006,  1061,  1007,  1007,  2065,  1060,  2003, 16246,  1998,  1043,
         1006,  1061,  1007,  1027,  1042,  1006,  1044, 27944,  1006,  1061,
         1007,  1007,  1064,  1044, 27944,  1006,  1061,  1007,   100,  1061,
         1064,  2065,  1060,  2003,  7142,  1012,   102])"
3551,1,"['linear', 'functions', 'distribution', 'binomial', 'binomial distribution']", Linear Transformations,seg_651,example 10.8 linear functions of binomial distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0.])","tensor([ 7399, 21865])","tensor([  101,  2742,  2184,  1012,  1022,  7399,  4972,  1997,  8026, 20936,
         2389,  4353,   102])"
3552,1,['distributions'], Linear Transformations,seg_651,"if x ∼ bino(n, p) find distributions of y = n − x, and find e(y),v(y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7399, 21865])","tensor([  101,  2065,  1060,   100,  8026,  2080,  1006,  1050,  1010,  1052,
         1007,  2424, 20611,  1997,  1061,  1027,  1050,  1597,  1060,  1010,
         1998,  2424,  1041,  1006,  1061,  1007,  1010,  1058,  1006,  1061,
         1007,  1012,   102])"
3553,0,['n'], Linear Transformations,seg_651,"solution 10.8 as y = n − x takes integer values in reverse, it has the same dis-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0])","tensor([ 7399, 21865])","tensor([  101,  5576,  2184,  1012,  1022,  2004,  1061,  1027,  1050,  1597,
         1060,  3138, 16109,  5300,  1999,  7901,  1010,  2009,  2038,  1996,
         2168,  4487,  2015,  1011,   102])"
3554,0,[], Linear Transformations,seg_651,"y), this can also",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7399, 21865])","tensor([ 101, 1061, 1007, 1010, 2023, 2064, 2036,  102])"
3555,0,[], Linear Transformations,seg_651,"y)qypn−y, y = 0, 1, .., n; which is the pmf of a bino(n, q).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 7399, 21865])","tensor([  101,  1061,  1007,  1053, 22571,  2078, 22543,  2100,  1010,  1061,
         1027,  1014,  1010,  1015,  1010,  1012,  1012,  1010,  1050,  1025,
         2029,  2003,  1996,  7610,  2546,  1997,  1037,  8026,  2080,  1006,
         1050,  1010,  1053,  1007,  1012,   102])"
3556,1,"['cases', 'regression', 'functions', 'treatment', 'analysis of variance', 'dependent', 'linear regression', 'multiple linear regression', 'confidence', 'normality', 'independent', 'coefficients', 'normal', 'statistical', 'case', 'linear', 'variances', 'random variables', 'anova', 'sample variance', 'regression coefficients', 'confidence intervals', 'significance', 'variates', 'sum of squares', 'variance', 'distributions', 'sample', 'random', 'statistical inference', 'intervals', 'distribution', 'f distribution', 'variables']", DISTRIBUTION OF SQUARES,seg_653,"distribution of squares is especially important in statistical inference and analysis of variance. this is because we encounter sums of squares or functions thereof. for instance, the anova procedure is dependent on decomposing the total sum of squares as between treatment and within sums of squares. similarly, confidence intervals for variances are constructed using the distribution of sample variance, and testing of regression coefficients in multiple linear regression (mlr) uses the ratio of sums of squares. all of these require the distribution of appropriate sums of squares under normality assumption. in such cases we need to find the distribution of sums of independent normal random variates. although the distribution of squares of other random variables is seldom used in practice, they do have great theoretical significance. a special case of the above is the relation between student’s t and snedecor’s f distributions. if t ∼ tn, then the pdf of tn2 has an f distribution with 1",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 1., 1., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 1., 1., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,  4353,  1997, 14320,  2003,  2926,  2590,  1999,  7778, 28937,
         1998,  4106,  1997, 23284,  1012,  2023,  2003,  2138,  2057,  8087,
        20571,  1997, 14320,  2030,  4972, 21739,  1012,  2005,  6013,  1010,
         1996,  2019,  7103,  7709,  2003,  7790,  2006, 21933,  8737, 18606,
         1996,  2561,  7680,  1997, 14320,  2004,  2090,  3949,  1998,  2306,
        20571,  1997, 14320,  1012,  6660,  1010,  7023, 14025,  2005, 23284,
         2015,  2024,  3833,  2478,  1996,  4353,  1997,  7099, 23284,  1010,
         1998,  5604,  1997, 26237, 21374,  1999,  3674,  7399, 26237,  1006,
        19875,  2099,  1007,  3594,  1996,  6463,  1997, 20571,  1997, 14320,
         1012,  2035,  1997,  2122,  5478,  1996,  4353,  1997,  6413, 20571,
         1997, 14320,  2104,  3671,  3012, 11213,  1012,  1999,  2107,  3572,
         2057,  2342,  2000,  2424,  1996,  4353,  1997, 20571,  1997,  2981,
         3671,  6721, 13075, 13143,  2015,  1012,  2348,  1996,  4353,  1997,
        14320,  1997,  2060,  6721, 10857,  2003, 15839,  2109,  1999,  3218,
         1010,  2027,  2079,  2031,  2307,  9373,  7784,  1012,  1037,  2569,
         2553,  1997,  1996,  2682,  2003,  1996,  7189,  2090,  3076,  1521,
         1055,  1056,  1998,  1055,  7228,  8586,  2953,  1521,  1055,  1042,
        20611,  1012,  2065,  1056,   100, 28286,  1010,  2059,  1996, 11135,
         1997, 28286,  2475,  2038,  2019,  1042,  4353,  2007,  1015,   102])"
3557,1,"['f distribution', 'independent', 'distribution']", DISTRIBUTION OF SQUARES,seg_653," 2n∕n so that tn2 = z2∕( 2n∕n). as the numerator and denominator are independent, both of them are chi-squared distributed so that their ratio has an f distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,   100,  2061,  2008, 28286,  2475,  1027,   100,  1006,   100,
         1007,  1012,  2004,  1996, 16371,  5017,  8844,  1998,  7939, 20936,
        27413,  2024,  2981,  1010,  2119,  1997,  2068,  2024,  9610,  1011,
        19942,  5500,  2061,  2008,  2037,  6463,  2038,  2019,  1042,  4353,
         1012,   102])"
3558,1,['distribution'], DISTRIBUTION OF SQUARES,seg_653,"there exist many methods to derive the distribution of squares. let y = x2 so that dy∕dx = 2x and dx∕dy = 1∕(2√y). if x takes positive values, the pdf of y is obtained as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,  2045,  4839,  2116,  4725,  2000, 18547,  1996,  4353,  1997,
        14320,  1012,  2292,  1061,  1027,  1060,  2475,  2061,  2008,   100,
         1027,  1016,  2595,  1998,   100,  1027,   100,  1006,  1016, 30127,
         2100,  1007,  1012,  2065,  1060,  3138,  3893,  5300,  1010,  1996,
        11135,  1997,  1061,  2003,  4663,  2004,   102])"
3559,1,"['functions', 'distribution']", DISTRIBUTION OF SQUARES,seg_653,the corresponding relationship between distribution functions for strictly increasing functions is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([ 101, 1996, 7978, 3276, 2090, 4353, 4972, 2005, 9975, 4852, 4972, 2003,
         102])"
3560,1,['table'], DISTRIBUTION OF SQUARES,seg_653,"as (10.17) is valid for any x(−∞   x  ∞), we differentiate it with respect to y to get the pdf as g(y) = (f (√y) + f (−√y))∕2√y (see table 10.1).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,  2004,  1006,  2184,  1012,  2459,  1007,  2003,  9398,  2005,
         2151,  1060,  1006,  1597, 30128,  1060,  1601,  1007,  1010,  2057,
        21032,  2009,  2007,  4847,  2000,  1061,  2000,  2131,  1996, 11135,
         2004,  1043,  1006,  1061,  1007,  1027,  1006,  1042,  1006,  1600,
         2100,  1007,  1009,  1042,  1006,  1597, 30127,  2100,  1007,  1007,
          100,  1006,  2156,  2795,  2184,  1012,  1015,  1007,  1012,   102])"
3561,1,['distribution'], DISTRIBUTION OF SQUARES,seg_653,example 10.9 distribution of the square of a t variate,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,  2742,  2184,  1012,  1023,  4353,  1997,  1996,  2675,  1997,
         1037,  1056, 13075, 13143,   102])"
3562,1,['distribution'], DISTRIBUTION OF SQUARES,seg_653,"if x is t(n), find the distribution of x2∕n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([ 101, 2065, 1060, 2003, 1056, 1006, 1050, 1007, 1010, 2424, 1996, 4353,
        1997,  100, 1012,  102])"
3563,1,"['t distribution', 'distribution']", DISTRIBUTION OF SQUARES,seg_653,solution 10.9 the pdf of student’s t distribution is given in section 7.18 (p. 7–85) as f (t) = k(1 + t2∕n)−(n+1)∕2. (10.18),tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,  5576,  2184,  1012,  1023,  1996, 11135,  1997,  3076,  1521,
         1055,  1056,  4353,  2003,  2445,  1999,  2930,  1021,  1012,  2324,
         1006,  1052,  1012,  1021,  1516,  5594,  1007,  2004,  1042,  1006,
         1056,  1007,  1027,  1047,  1006,  1015,  1009,   100,  1007,  1597,
         1006,  1050,  1009,  1015,  1007,   100,  1012,  1006,  2184,  1012,
         2324,  1007,   102])"
3564,0,[], DISTRIBUTION OF SQUARES,seg_653,differentiate (10.19) with respect to y to get the pdf of y as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 14320])","tensor([  101, 21032,  1006,  2184,  1012,  2539,  1007,  2007,  4847,  2000,
         1061,  2000,  2131,  1996, 11135,  1997,  1061,  2004,   102])"
3565,1,"['t distribution', 'symmetric', 'distribution']", DISTRIBUTION OF SQUARES,seg_653,"as the t distribution is symmetric, f (√y) = f (−√y). substitute in",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,  2004,  1996,  1056,  4353,  2003, 19490,  1010,  1042,  1006,
         1600,  2100,  1007,  1027,  1042,  1006,  1597, 30127,  2100,  1007,
         1012,  7681,  1999,   102])"
3566,0,[], DISTRIBUTION OF SQUARES,seg_653,"equation (10.18), and cancel out √n to get the desired pdf as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 14320])","tensor([  101,  8522,  1006,  2184,  1012,  2324,  1007,  1010,  1998, 17542,
         2041,  1600,  2078,  2000,  2131,  1996,  9059, 11135,  2004,   102])"
3567,1,['distribution'], DISTRIBUTION OF SQUARES,seg_653,write √y in the denominator as y1∕2−1 and take numerator expression to the denominator. then this is found to be a beta-ii distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4353,  1997, 14320])","tensor([  101,  4339,  1600,  2100,  1999,  1996,  7939, 20936, 27413,  2004,
          100,  1998,  2202, 16371,  5017,  8844,  3670,  2000,  1996,  7939,
        20936, 27413,  1012,  2059,  2023,  2003,  2179,  2000,  2022,  1037,
         8247,  1011,  2462,  4353,   102])"
3568,1,"['continuous', 'transformation', 'random', 'random variables', 'variables']", DISTRIBUTION OF SQUAREROOTS,seg_655,"as the square root of a negative number is imaginary, this transformation is defined only for random variables that take positive values. it makes sense for continuous",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  2004,  1996,  2675,  7117,  1997,  1037,  4997,  2193,  2003,
        15344,  1010,  2023,  8651,  2003,  4225,  2069,  2005,  6721, 10857,
         2008,  2202,  3893,  5300,  1012,  2009,  3084,  3168,  2005,  7142,
          102])"
3569,1,['discrete'], DISTRIBUTION OF SQUAREROOTS,seg_655,variates than discrete ones. let y = √,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101, 13075, 13143,  2015,  2084, 16246,  3924,  1012,  2292,  1061,
         1027,  1600,   102])"
3570,0,[], DISTRIBUTION OF SQUAREROOTS,seg_655,"x, which gives x = y2 and dx∕dy = 2y. the straightforward way to find the pdf of y is to use",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  1060,  1010,  2029,  3957,  1060,  1027,  1061,  2475,  1998,
          100,  1027,  1016,  2100,  1012,  1996, 19647,  2126,  2000,  2424,
         1996, 11135,  1997,  1061,  2003,  2000,  2224,   102])"
3571,1,"['symmetric', 'distribution']", DISTRIBUTION OF SQUAREROOTS,seg_655,"if the resulting distribution of y is symmetric, we need to divide the final density by 2 to get the correct pdf, because both (−y)2 and (+y)2 map to x. symbolically, g(y) = yf (y2) if y is symmetric. this is summarized as",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  2065,  1996,  4525,  4353,  1997,  1061,  2003, 19490,  1010,
         2057,  2342,  2000, 11443,  1996,  2345,  4304,  2011,  1016,  2000,
         2131,  1996,  6149, 11135,  1010,  2138,  2119,  1006,  1597,  2100,
         1007,  1016,  1998,  1006,  1009,  1061,  1007,  1016,  4949,  2000,
         1060,  1012, 12613,  3973,  1010,  1043,  1006,  1061,  1007,  1027,
         1061,  2546,  1006,  1061,  2475,  1007,  2065,  1061,  2003, 19490,
         1012,  2023,  2003, 22539,  2004,   102])"
3572,1,"['symmetric', 'asymmetric']", DISTRIBUTION OF SQUAREROOTS,seg_655,2yf (y2) if y is asymmetric; g(y) = f (x)| x∕ y| = { yf (y2) if y is symmetric.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  1016,  2100,  2546,  1006,  1061,  2475,  1007,  2065,  1061,
         2003,  2004, 24335, 12589,  1025,  1043,  1006,  1061,  1007,  1027,
         1042,  1006,  1060,  1007,  1064,   100,  1061,  1064,  1027,  1063,
         1061,  2546,  1006,  1061,  2475,  1007,  2065,  1061,  2003, 19490,
         1012,   102])"
3573,1,['distribution'], DISTRIBUTION OF SQUAREROOTS,seg_655,example 10.10 distribution of the square-root of a  2 variate,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  2742,  2184,  1012,  2184,  4353,  1997,  1996,  2675,  1011,
         7117,  1997,  1037,  1016, 13075, 13143,   102])"
3574,1,['distribution'], DISTRIBUTION OF SQUAREROOTS,seg_655,"if x is  n2, find the distribution of √ x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([ 101, 2065, 1060, 2003, 1050, 2475, 1010, 2424, 1996, 4353, 1997, 1600,
        1060, 1012,  102])"
3575,1,"['rayleigh distribution', 'standard', 'distribution']", DISTRIBUTION OF SQUAREROOTS,seg_655,"as y ∗ (y2)n∕2−1 = yn−1 the pdf becomes f (y) = e−y2∕2yn−1∕[2n∕2−1γ(n∕2)]. this is the chi-distribution, or the standard form of rayleigh distribution (p. 7–107).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  2004,  1061,  1598,  1006,  1061,  2475,  1007,   100,  1027,
         1061,  2078, 27944,  1996, 11135,  4150,  1042,  1006,  1061,  1007,
         1027,   100,  1031,   100,  1006,   100,  1007,  1033,  1012,  2023,
         2003,  1996,  9610,  1011,  4353,  1010,  2030,  1996,  3115,  2433,
         1997,  4097, 13615,  4353,  1006,  1052,  1012,  1021,  1516, 10550,
         1007,  1012,   102])"
3576,1,['distribution'], DISTRIBUTION OF SQUAREROOTS,seg_655,example 10.11 distribution of the square-root of an f variate,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  2742,  2184,  1012,  2340,  4353,  1997,  1996,  2675,  1011,
         7117,  1997,  2019,  1042, 13075, 13143,   102])"
3577,1,['distribution'], DISTRIBUTION OF SQUAREROOTS,seg_655,"if x is f(1, n), find the distribution of √ x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([ 101, 2065, 1060, 2003, 1042, 1006, 1015, 1010, 1050, 1007, 1010, 2424,
        1996, 4353, 1997, 1600, 1060, 1012,  102])"
3578,1,"['f distribution', 'distribution']", DISTRIBUTION OF SQUAREROOTS,seg_655,solution 10.11 the pdf of f distribution was given in chapter 7 (p. 316) as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  5576,  2184,  1012,  2340,  1996, 11135,  1997,  1042,  4353,
         2001,  2445,  1999,  3127,  1021,  1006,  1052,  1012, 23980,  1007,
         2004,   102])"
3579,1,['symmetric'], DISTRIBUTION OF SQUAREROOTS,seg_655,"the y cancels out with (y2)1∕2−1 = 1∕y. take n outside from the bracket in the denominator and cancel out with nn∕2 in the numerator to get a √n in the denominator. as the pdf now involves only powers of y2, it is symmetric. hence, we need to divide the resulting pdf by 2 to get the correct pdf as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([  101,  1996,  1061, 17542,  2015,  2041,  2007,  1006,  1061,  2475,
         1007,   100,  1027,   100,  1012,  2202,  1050,  2648,  2013,  1996,
        21605,  1999,  1996,  7939, 20936, 27413,  1998, 17542,  2041,  2007,
          100,  1999,  1996, 16371,  5017,  8844,  2000,  2131,  1037,  1600,
         2078,  1999,  1996,  7939, 20936, 27413,  1012,  2004,  1996, 11135,
         2085,  7336,  2069,  4204,  1997,  1061,  2475,  1010,  2009,  2003,
        19490,  1012,  6516,  1010,  2057,  2342,  2000, 11443,  1996,  4525,
        11135,  2011,  1016,  2000,  2131,  1996,  6149, 11135,  2004,   102])"
3580,1,['distribution'], DISTRIBUTION OF SQUAREROOTS,seg_655,which is the student’s t(n) distribution.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 4353,  1997,  2675,  3217, 12868])","tensor([ 101, 2029, 2003, 1996, 3076, 1521, 1055, 1056, 1006, 1050, 1007, 4353,
        1012,  102])"
3581,1,"['cases', 'random variable', 'random', 'distribution', 'variable']", DISTRIBUTION OF RECIPROCALS,seg_657,"distribution of reciprocals is defined only in some particular cases. if the value of a random variable x at x = 0 is nonzero, the random variable y = 1∕x is well defined. it can also be used (along with section 10.5.1 discussed in p. 404) to find the distribution of (x − 1)∕x = 1 − 1∕x and (1 − x)∕x = 1∕x − 1. the straightforward way to find the pdf of y is to use",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 28309,  2015])","tensor([  101,  4353,  1997, 28309,  2015,  2003,  4225,  2069,  1999,  2070,
         3327,  3572,  1012,  2065,  1996,  3643,  1997,  1037,  6721,  8023,
         1060,  2012,  1060,  1027,  1014,  2003,  2512,  6290,  2080,  1010,
         1996,  6721,  8023,  1061,  1027,   100,  2003,  2092,  4225,  1012,
         2009,  2064,  2036,  2022,  2109,  1006,  2247,  2007,  2930,  2184,
         1012,  1019,  1012,  1015,  6936,  1999,  1052,  1012, 24837,  1007,
         2000,  2424,  1996,  4353,  1997,  1006,  1060,  1597,  1015,  1007,
          100,  1027,  1015,  1597,   100,  1998,  1006,  1015,  1597,  1060,
         1007,   100,  1027,   100,  1597,  1015,  1012,  1996, 19647,  2126,
         2000,  2424,  1996, 11135,  1997,  1061,  2003,  2000,  2224,   102])"
3582,1,"['cauchy', 'distribution']", DISTRIBUTION OF RECIPROCALS,seg_657,example 10.12 distribution of the reciprocal of a cauchy variate,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0.])","tensor([ 4353,  1997, 28309,  2015])","tensor([  101,  2742,  2184,  1012,  2260,  4353,  1997,  1996, 28309,  1997,
         1037,  6187, 10875,  2100, 13075, 13143,   102])"
3583,1,"['cauchy', 'cauchy distributed', 'distribution']", DISTRIBUTION OF RECIPROCALS,seg_657,"if x is cauchy distributed, find the distribution of y = 1∕x.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 28309,  2015])","tensor([  101,  2065,  1060,  2003,  6187, 10875,  2100,  5500,  1010,  2424,
         1996,  4353,  1997,  1061,  1027,   100,  1012,   102])"
3584,1,"['cauchy', 'distribution']", DISTRIBUTION OF RECIPROCALS,seg_657,"1 1 solution 10.12 we have seen in chapter 7 that f (x) = , −∞   x     1 + x2 ∞. as f (x = 0) is 1∕ , distribution of the reciprocal is well-defined. using 1 1 equation (10.29) the pdf becomes f (y) =   1 + (1∕y)2 ∕y2. the y2 cancels out 1 1 from the numerator and denominator, giving f (y) = , which is cauchy   1 + y2 distributed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4353,  1997, 28309,  2015])","tensor([  101,  1015,  1015,  5576,  2184,  1012,  2260,  2057,  2031,  2464,
         1999,  3127,  1021,  2008,  1042,  1006,  1060,  1007,  1027,  1010,
         1597, 30128,  1060,  1015,  1009,  1060,  2475,  1601,  1012,  2004,
         1042,  1006,  1060,  1027,  1014,  1007,  2003,   100,  1010,  4353,
         1997,  1996, 28309,  2003,  2092,  1011,  4225,  1012,  2478,  1015,
         1015,  8522,  1006,  2184,  1012,  2756,  1007,  1996, 11135,  4150,
         1042,  1006,  1061,  1007,  1027,  1015,  1009,  1006,   100,  1007,
         1016,   100,  1012,  1996,  1061,  2475, 17542,  2015,  2041,  1015,
         1015,  2013,  1996, 16371,  5017,  8844,  1998,  7939, 20936, 27413,
         1010,  3228,  1042,  1006,  1061,  1007,  1027,  1010,  2029,  2003,
         6187, 10875,  2100,  1015,  1009,  1061,  2475,  5500,  1012,   102])"
3585,0,[], DISTRIBUTION OF RECIPROCALS,seg_657,example 10.13 reciprocal of a unit rectangular variate,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 28309,  2015])","tensor([  101,  2742,  2184,  1012,  2410, 28309,  1997,  1037,  3131, 10806,
        13075, 13143,   102])"
3586,1,['distribution'], DISTRIBUTION OF RECIPROCALS,seg_657,"if x is u(0, 1) distributed, find the distribution of y = 1∕x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4353,  1997, 28309,  2015])","tensor([ 101, 2065, 1060, 2003, 1057, 1006, 1014, 1010, 1015, 1007, 5500, 1010,
        2424, 1996, 4353, 1997, 1061, 1027,  100, 1012,  102])"
3587,1,"['order statistics', 'random sample', 'sample', 'random', 'statistics', 'distribution', 'model']", DISTRIBUTION OF MINIMUM AND MAXIMUM,seg_659,"the distribution of minimum and maximum (called extremes) finds applications in many fields. for example, distribution of maximum is used in life sciences to model the survival time of species, produce, machines, and various products. it is also used in reliability theory to model the life of equipments and parts, various devices, and consumer items (such as light bulbs and computer chips). the study of extremes is called order statistics. let x1,x2, … ,xn be a random sample from an arbitrary distribution with pdf f (y) and cdf f(y). let y1 = min(x1,x2, … ,xn). then,",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 1997, 6263, 1998, 4555])","tensor([  101,  1996,  4353,  1997,  6263,  1998,  4555,  1006,  2170, 28800,
         1007,  4858,  5097,  1999,  2116,  4249,  1012,  2005,  2742,  1010,
         4353,  1997,  4555,  2003,  2109,  1999,  2166,  4163,  2000,  2944,
         1996,  7691,  2051,  1997,  2427,  1010,  3965,  1010,  6681,  1010,
         1998,  2536,  3688,  1012,  2009,  2003,  2036,  2109,  1999, 15258,
         3399,  2000,  2944,  1996,  2166,  1997,  3941,  2015,  1998,  3033,
         1010,  2536,  5733,  1010,  1998,  7325,  5167,  1006,  2107,  2004,
         2422, 25548,  1998,  3274, 11772,  1007,  1012,  1996,  2817,  1997,
        28800,  2003,  2170,  2344,  6747,  1012,  2292,  1060,  2487,  1010,
         1060,  2475,  1010,  1529,  1010,  1060,  2078,  2022,  1037,  6721,
         7099,  2013,  2019, 15275,  4353,  2007, 11135,  1042,  1006,  1061,
         1007,  1998,  3729,  2546,  1042,  1006,  1061,  1007,  1012,  2292,
         1061,  2487,  1027,  8117,  1006,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  1007,  1012,  2059,  1010,   102])"
3588,1,['independence'], DISTRIBUTION OF MINIMUM AND MAXIMUM,seg_659,using independence. differentiate the above to get the pdf of y1 as,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 1997, 6263, 1998, 4555])","tensor([  101,  2478,  4336,  1012, 21032,  1996,  2682,  2000,  2131,  1996,
        11135,  1997,  1061,  2487,  2004,   102])"
3589,1,['method'], DISTRIBUTION OF MINIMUM AND MAXIMUM,seg_659,"similarly, the pdf of yn using cdf method is f (yn) = nf (y)[f(y)]n−1.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 1997, 6263, 1998, 4555])","tensor([  101,  6660,  1010,  1996, 11135,  1997,  1061,  2078,  2478,  3729,
         2546,  4118,  2003,  1042,  1006,  1061,  2078,  1007,  1027,  1050,
         2546,  1006,  1061,  1007,  1031,  1042,  1006,  1061,  1007,  1033,
         1050, 27944,  1012,   102])"
3590,1,"['normalized', 'geometric', 'functions', 'cauchy', 'coefficient', 'distributions', 'correlation coefficient', 'random', 'correlation', 'standard', 'random variables', 'distribution', 'cauchy distribution', 'variables']", DISTRIBUTION OF TRIGONOMETRIC FUNCTIONS,seg_661,"trigonometric functions of some random variables are easy to work with. one example is the cauchy distribution. if x has a standard cauchy distribution, then cos(x) has the same distribution. trigonometric functions are also utilized to derive some distributions using geometric concepts. one example is the correlation coefficient. the cosine of the angle between two normalized vectors in n-dimensional euclidean space is called the correlation coefficient.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0.])","tensor([ 4353,  1997, 13012,  7446, 28993,  4972])","tensor([  101, 13012,  7446, 28993,  4972,  1997,  2070,  6721, 10857,  2024,
         3733,  2000,  2147,  2007,  1012,  2028,  2742,  2003,  1996,  6187,
        10875,  2100,  4353,  1012,  2065,  1060,  2038,  1037,  3115,  6187,
        10875,  2100,  4353,  1010,  2059,  2522,  2015,  1006,  1060,  1007,
         2038,  1996,  2168,  4353,  1012, 13012,  7446, 28993,  4972,  2024,
         2036, 12550,  2000, 18547,  2070, 20611,  2478, 14965,  8474,  1012,
         2028,  2742,  2003,  1996, 16902, 19064,  1012,  1996,  2522, 11493,
         2063,  1997,  1996,  6466,  2090,  2048,  3671,  3550, 19019,  1999,
         1050,  1011,  8789, 25826,  2686,  2003,  2170,  1996, 16902, 19064,
         1012,   102])"
3591,1,['distribution'], DISTRIBUTION OF TRIGONOMETRIC FUNCTIONS,seg_661,example 10.14 distribution of u = tan(x),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 13012,  7446, 28993,  4972])","tensor([ 101, 2742, 2184, 1012, 2403, 4353, 1997, 1057, 1027, 9092, 1006, 1060,
        1007,  102])"
3592,1,['distribution'], DISTRIBUTION OF TRIGONOMETRIC FUNCTIONS,seg_661,"if x has a u(0, 1) distribution, find the distribution of u = tan(x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 13012,  7446, 28993,  4972])","tensor([ 101, 2065, 1060, 2038, 1037, 1057, 1006, 1014, 1010, 1015, 1007, 4353,
        1010, 2424, 1996, 4353, 1997, 1057, 1027, 9092, 1006, 1060, 1007, 1012,
         102])"
3593,1,"['range', 'distribution', 'transformation']", DISTRIBUTION OF TRIGONOMETRIC FUNCTIONS,seg_661,"solution 10.14 the pdf of x is f (x) = 1, 0   x   1. the inverse transformation is x = tan−1(u). this gives | x∕ u| = 1∕(1 + u2). the range of u is modified as tan(0) = 0 to tan(1) =  ∕4. hence, the distribution of u is f (u) = 1∕(1 + u2) for 0   u    ∕4.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4353,  1997, 13012,  7446, 28993,  4972])","tensor([  101,  5576,  2184,  1012,  2403,  1996, 11135,  1997,  1060,  2003,
         1042,  1006,  1060,  1007,  1027,  1015,  1010,  1014,  1060,  1015,
         1012,  1996, 19262,  8651,  2003,  1060,  1027,  9092, 27944,  1006,
         1057,  1007,  1012,  2023,  3957,  1064,   100,  1057,  1064,  1027,
          100,  1006,  1015,  1009, 23343,  1007,  1012,  1996,  2846,  1997,
         1057,  2003,  6310,  2004,  9092,  1006,  1014,  1007,  1027,  1014,
         2000,  9092,  1006,  1015,  1007,  1027,   100,  1012,  6516,  1010,
         1996,  4353,  1997,  1057,  2003,  1042,  1006,  1057,  1007,  1027,
          100,  1006,  1015,  1009, 23343,  1007,  2005,  1014,  1057,   100,
         1012,   102])"
3594,1,['distribution'], DISTRIBUTION OF TRIGONOMETRIC FUNCTIONS,seg_661,example 10.15 distribution of u = sin(x),tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 13012,  7446, 28993,  4972])","tensor([ 101, 2742, 2184, 1012, 2321, 4353, 1997, 1057, 1027, 8254, 1006, 1060,
        1007,  102])"
3595,1,['distribution'], DISTRIBUTION OF TRIGONOMETRIC FUNCTIONS,seg_661,"if x has a cuni[− ∕2,  ∕2] distribution, find the distribution of u = sin(x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 13012,  7446, 28993,  4972])","tensor([  101,  2065,  1060,  2038,  1037, 12731,  3490,  1031,  1597,   100,
         1010,   100,  1033,  4353,  1010,  2424,  1996,  4353,  1997,  1057,
         1027,  8254,  1006,  1060,  1007,  1012,   102])"
3596,1,['transformation'], DISTRIBUTION OF TRIGONOMETRIC FUNCTIONS,seg_661,solution 10.15 the inverse transformation is x = sin−1(u) so that | x∕ u| =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 13012,  7446, 28993,  4972])","tensor([  101,  5576,  2184,  1012,  2321,  1996, 19262,  8651,  2003,  1060,
         1027,  8254, 27944,  1006,  1057,  1007,  2061,  2008,  1064,   100,
         1057,  1064,  1027,   102])"
3597,1,"['function', 'dependent variable', 'functions', 'dependent', 'distribution', 'variables', 'variable', 'independent']", DISTRIBUTION OF TRANSCENDENTAL FUNCTIONS,seg_663,"distributions of transcendental functions are quite useful in engineering and related fields. several laws and principles in engineering and physical sciences are modeled as mathematical equations called functionals involving the unknown variables and known constants. in most applications, one variable (called dependent variable) is modeled as a function of two or more other variables (called independent variables), which can include time. if the number of variables involved is two, the covt technique is useful to derive the distribution of one, using the distribution of the other. for",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  9099, 23865, 21050,  4972])","tensor([  101, 20611,  1997,  9099, 23865, 21050,  4972,  2024,  3243,  6179,
         1999,  3330,  1998,  3141,  4249,  1012,  2195,  4277,  1998,  6481,
         1999,  3330,  1998,  3558,  4163,  2024, 14440,  2004,  8045, 11380,
         2170,  8360,  2015,  5994,  1996,  4242, 10857,  1998,  2124,  5377,
         2015,  1012,  1999,  2087,  5097,  1010,  2028,  8023,  1006,  2170,
         7790,  8023,  1007,  2003, 14440,  2004,  1037,  3853,  1997,  2048,
         2030,  2062,  2060, 10857,  1006,  2170,  2981, 10857,  1007,  1010,
         2029,  2064,  2421,  2051,  1012,  2065,  1996,  2193,  1997, 10857,
         2920,  2003,  2048,  1010,  1996,  2522,  2615,  2102,  6028,  2003,
         6179,  2000, 18547,  1996,  4353,  1997,  2028,  1010,  2478,  1996,
         4353,  1997,  1996,  2060,  1012,  2005,   102])"
3598,1,['data'], DISTRIBUTION OF TRANSCENDENTAL FUNCTIONS,seg_663,"example, in data compression and telecommunications, the speech amplitude is mod-",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  9099, 23865, 21050,  4972])","tensor([  101,  2742,  1010,  1999,  2951, 13379,  1998, 12108,  1010,  1996,
         4613, 22261,  2003, 16913,  1011,   102])"
3599,1,"['set', 'lognormal', 'distribution', 'lognormal distribution']", DISTRIBUTION OF TRANSCENDENTAL FUNCTIONS,seg_663,"2) exp(−√ 2|x|∕ ), and compressed using the −law as a ∗ sign(x)[ln(1 + |x|)∕ ln(1 + )], where “a” is the peak input magnitude and is the compression constant (typically set to high, say 255). similarly, in wireless communication of fading channels, if x is n( , 2) distributed, y = ex has a lognormal distribution. this has applications in mining engineering, reliability, and spectroscopy among many other fields (chapter 7, p. 297).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  9099, 23865, 21050,  4972])","tensor([  101,  1016,  1007,  4654,  2361,  1006,  1597, 30127,  1016,  1064,
         1060,  1064,   100,  1007,  1010,  1998, 16620,  2478,  1996,  1597,
        14919,  2004,  1037,  1598,  3696,  1006,  1060,  1007,  1031,  1048,
         2078,  1006,  1015,  1009,  1064,  1060,  1064,  1007,   100,  1048,
         2078,  1006,  1015,  1009,  1007,  1033,  1010,  2073,  1523,  1037,
         1524,  2003,  1996,  4672,  7953, 10194,  1998,  2003,  1996, 13379,
         5377,  1006,  4050,  2275,  2000,  2152,  1010,  2360, 20637,  1007,
         1012,  6660,  1010,  1999,  9949,  4807,  1997, 14059,  6833,  1010,
         2065,  1060,  2003,  1050,  1006,  1010,  1016,  1007,  5500,  1010,
         1061,  1027,  4654,  2038,  1037,  8833, 12131,  9067,  4353,  1012,
         2023,  2038,  5097,  1999,  5471,  3330,  1010, 15258,  1010,  1998,
        25458,  2426,  2116,  2060,  4249,  1006,  3127,  1021,  1010,  1052,
         1012, 27502,  1007,  1012,   102])"
3600,1,"['transformation', 'distribution']", DISTRIBUTION OF TRANSCENDENTAL FUNCTIONS,seg_663,example 10.16 logarithmic transformation of cuni distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])","tensor([ 4353,  1997,  9099, 23865, 21050,  4972])","tensor([  101,  2742,  2184,  1012,  2385,  8833,  8486,  2705,  7712,  8651,
         1997, 12731,  3490,  4353,   102])"
3601,1,['distribution'], DISTRIBUTION OF TRANSCENDENTAL FUNCTIONS,seg_663,"if x is cuni[a, b] distributed (chapter 7, p. 261), find the distribution of y = − log (x − a)∕(b − a).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  9099, 23865, 21050,  4972])","tensor([  101,  2065,  1060,  2003, 12731,  3490,  1031,  1037,  1010,  1038,
         1033,  5500,  1006,  3127,  1021,  1010,  1052,  1012, 24441,  1007,
         1010,  2424,  1996,  4353,  1997,  1061,  1027,  1597,  8833,  1006,
         1060,  1597,  1037,  1007,   100,  1006,  1038,  1597,  1037,  1007,
         1012,   102])"
3602,1,"['transformation', 'distribution']", DISTRIBUTION OF TRANSCENDENTAL FUNCTIONS,seg_663,example 10.17 transformation of arc-sine distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4353,  1997,  9099, 23865, 21050,  4972])","tensor([ 101, 2742, 2184, 1012, 2459, 8651, 1997, 8115, 1011, 8254, 2063, 4353,
         102])"
3603,1,['distribution'], DISTRIBUTION OF TRANSCENDENTAL FUNCTIONS,seg_663,"if x is arc-sine distributed (chapter 7, p. 279), find the distribution of y = − log (x).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  9099, 23865, 21050,  4972])","tensor([  101,  2065,  1060,  2003,  8115,  1011,  8254,  2063,  5500,  1006,
         3127,  1021,  1010,  1052,  1012, 25745,  1007,  1010,  2424,  1996,
         4353,  1997,  1061,  1027,  1597,  8833,  1006,  1060,  1007,  1012,
          102])"
3604,1,"['continuous', 'random', 'convolution', 'random variables', 'independent random variables', 'distribution', 'variables', 'independent']", Distribution of Sums,seg_665,"if x and y are independent random variables, we may need to find the distribution of u = x + y . this is easy to find using convolution of integrals when both x and y are continuous. let fu(u) be the cdf of u. then,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2981,  6721, 10857,  1010,
         2057,  2089,  2342,  2000,  2424,  1996,  4353,  1997,  1057,  1027,
         1060,  1009,  1061,  1012,  2023,  2003,  3733,  2000,  2424,  2478,
         9530,  6767,  7630,  3508,  1997,  9897,  2015,  2043,  2119,  1060,
         1998,  1061,  2024,  7142,  1012,  2292, 11865,  1006,  1057,  1007,
         2022,  1996,  3729,  2546,  1997,  1057,  1012,  2059,  1010,   102])"
3605,1,"['adjusted', 'independence']", Distribution of Sums,seg_665,"due to the assumption of independence. as x + y ≤ u represents the region below a straight line, the limits can be adjusted as ∫x",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  2349,  2000,  1996, 11213,  1997,  4336,  1012,  2004,  1060,
         1009,  1061,  1608,  1057,  5836,  1996,  2555,  2917,  1037,  3442,
         2240,  1010,  1996,  6537,  2064,  2022, 10426,  2004,   100,   102])"
3606,0,[], Distribution of Sums,seg_665,above then becomes ∫x,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 20571])","tensor([ 101, 2682, 2059, 4150,  100,  102])"
3607,1,['symmetry'], Distribution of Sums,seg_665,"∞ =−∞ gy (u − x)f (x)dx. owing to the symmetry of x and y,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  1601,  1027,  1597, 30128,  1043,  2100,  1006,  1057,  1597,
         1060,  1007,  1042,  1006,  1060,  1007,  1040,  2595,  1012, 11427,
         2000,  1996, 14991,  1997,  1060,  1998,  1061,  1010,   102])"
3608,0,[], Distribution of Sums,seg_665,we can rearrange the integrals to get a similar expression as ∫x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 20571])","tensor([  101,  2057,  2064,  4373, 24388,  2063,  1996,  9897,  2015,  2000,
         2131,  1037,  2714,  3670,  2004,   100,   102])"
3609,1,"['method', 'random', 'random variables', 'convolution', 'independent random variables', 'distribution', 'variables', 'independent']", Distribution of Sums,seg_665,this is called the convolution of x and y. the mgf is related as mx+y (t) = mx(t) ∗ my (t) and the cgf is related as kx+y (t) = kx(t) + ky (t) if x and y are independent. this method can easily be extended to find the distribution of the difference of independent random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  2023,  2003,  2170,  1996,  9530,  6767,  7630,  3508,  1997,
         1060,  1998,  1061,  1012,  1996, 11460,  2546,  2003,  3141,  2004,
        25630,  1009,  1061,  1006,  1056,  1007,  1027, 25630,  1006,  1056,
         1007,  1598,  2026,  1006,  1056,  1007,  1998,  1996,  1039, 25708,
         2003,  3141,  2004,  1047,  2595,  1009,  1061,  1006,  1056,  1007,
         1027,  1047,  2595,  1006,  1056,  1007,  1009, 18712,  1006,  1056,
         1007,  2065,  1060,  1998,  1061,  2024,  2981,  1012,  2023,  4118,
         2064,  4089,  2022,  3668,  2000,  2424,  1996,  4353,  1997,  1996,
         4489,  1997,  2981,  6721, 10857,  1012,   102])"
3610,1,"['poisson', 'variates']", Distribution of Sums,seg_665,example 10.18 sum of poisson variates,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  2742,  2184,  1012,  2324,  7680,  1997, 13433, 24077, 13075,
        13143,  2015,   102])"
3611,1,"['poisson', 'parameters']", Distribution of Sums,seg_665,"if x and y are poisson with parameters  1 and  2, find the pmf of x + y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  2065,  1060,  1998,  1061,  2024, 13433, 24077,  2007, 11709,
         1015,  1998,  1016,  1010,  2424,  1996,  7610,  2546,  1997,  1060,
         1009,  1061,  1012,   102])"
3612,1,"['change of variable', 'joint', 'variable']", Distribution of Sums,seg_665,"solution 10.18 we could easily get the required pdf using the mgf technique. however, we proceed as follows to clarify the change of variable technique. the joint pmf of x and y is f (x, y) = e− 1 1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  5576,  2184,  1012,  2324,  2057,  2071,  4089,  2131,  1996,
         3223, 11135,  2478,  1996, 11460,  2546,  6028,  1012,  2174,  1010,
         2057, 10838,  2004,  4076,  2000, 25037,  1996,  2689,  1997,  8023,
         6028,  1012,  1996,  4101,  7610,  2546,  1997,  1060,  1998,  1061,
         2003,  1042,  1006,  1060,  1010,  1061,  1007,  1027,  1041, 22543,
         1015,  1015,   102])"
3613,1,['range'], Distribution of Sums,seg_665," )!e− 2 2  ∕ !, where v = 0,1,2.. and u =  ,   + 1,... the pmf of u is obtained by summing over the entire range of v. as u has v as the lower bound, we need sum over v from 0 to u. hence fu(u) = e−( 1+ 2)∑ ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  1007,   999,  1041, 22543,  1016,  1016,   100,   999,  1010,
         2073,  1058,  1027,  1014,  1010,  1015,  1010,  1016,  1012,  1012,
         1998,  1057,  1027,  1010,  1009,  1015,  1010,  1012,  1012,  1012,
         1996,  7610,  2546,  1997,  1057,  2003,  4663,  2011,  7680,  6562,
         2058,  1996,  2972,  2846,  1997,  1058,  1012,  2004,  1057,  2038,
         1058,  2004,  1996,  2896,  5391,  1010,  2057,  2342,  7680,  2058,
         1058,  2013,  1014,  2000,  1057,  1012,  6516, 11865,  1006,  1057,
         1007,  1027,  1041, 22543,  1006,  1015,  1009,  1016,  1007,   100,
          102])"
3614,1,['summation'], Distribution of Sums,seg_665,and divide by u! and take it outside the summation in the denominator. this gives fu(u) =,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  1998, 11443,  2011,  1057,   999,  1998,  2202,  2009,  2648,
         1996,  7680, 28649,  1999,  1996,  7939, 20936, 27413,  1012,  2023,
         3957, 11865,  1006,  1057,  1007,  1027,   102])"
3615,1,"['exponential', 'variates']", Distribution of Sums,seg_665,example 10.19 sum of exponential variates,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  2742,  2184,  1012,  2539,  7680,  1997, 27258, 13075, 13143,
         2015,   102])"
3616,1,"['parameter', 'distribution', 'exponential', 'variates', 'shape parameter', 'independent']", Distribution of Sums,seg_665,"if x and y are independent exponential variates with the same shape parameter, find the distribution of u = x + y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2981, 27258, 13075, 13143,
         2015,  2007,  1996,  2168,  4338, 16381,  1010,  2424,  1996,  4353,
         1997,  1057,  1027,  1060,  1009,  1061,  1012,   102])"
3617,1,['independent'], Distribution of Sums,seg_665,"solution 10.19 we could use equation (10.35) to get the pdf. it is much easier to use the mgf. we know that the mgf of x is (1 − t∕ )−1. as x and y are independent, mx+y (t) = mx(t) ∗ my (t) = (1 − t∕ )−2, which is the mgf of gamma(2, ).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4353,  1997, 20571])","tensor([  101,  5576,  2184,  1012,  2539,  2057,  2071,  2224,  8522,  1006,
         2184,  1012,  3486,  1007,  2000,  2131,  1996, 11135,  1012,  2009,
         2003,  2172,  6082,  2000,  2224,  1996, 11460,  2546,  1012,  2057,
         2113,  2008,  1996, 11460,  2546,  1997,  1060,  2003,  1006,  1015,
         1597,   100,  1007,  1597,  2487,  1012,  2004,  1060,  1998,  1061,
         2024,  2981,  1010, 25630,  1009,  1061,  1006,  1056,  1007,  1027,
        25630,  1006,  1056,  1007,  1598,  2026,  1006,  1056,  1007,  1027,
         1006,  1015,  1597,   100,  1007,  1597,  2475,  1010,  2029,  2003,
         1996, 11460,  2546,  1997, 13091,  1006,  1016,  1010,  1007,  1012,
          102])"
3618,1,"['joint', 'table']", Distribution of Sums,seg_665,the joint pmf of x and y is given in table 10.2. find the pmf of u = x + y .,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([ 101, 1996, 4101, 7610, 2546, 1997, 1060, 1998, 1061, 2003, 2445, 1999,
        2795, 2184, 1012, 1016, 1012, 2424, 1996, 7610, 2546, 1997, 1057, 1027,
        1060, 1009, 1061, 1012,  102])"
3619,1,"['range', 'results', 'tables']", Distribution of Sums,seg_665,"solution 10.20 clearly, x + y takes values in the range [2,5]. p[x + y = 2] = p[x = 1,y = 1] = 1∕12. p[x + y = 3] = p[x = 1,y = 2] + p[x = 2,y = 1] = 2∕12 + 3∕12 = 5∕12. similarly, p[x + y = 4] = p[x = 1,y = 3] + p[x = 2, y = 2] + p[x = 3,y = 1] = 2∕12 + 3∕12 = 5∕12, and so on. the results are given in tables 10.2 and 10.3.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 20571])","tensor([ 101, 5576, 2184, 1012, 2322, 4415, 1010, 1060, 1009, 1061, 3138, 5300,
        1999, 1996, 2846, 1031, 1016, 1010, 1019, 1033, 1012, 1052, 1031, 1060,
        1009, 1061, 1027, 1016, 1033, 1027, 1052, 1031, 1060, 1027, 1015, 1010,
        1061, 1027, 1015, 1033, 1027,  100, 1012, 1052, 1031, 1060, 1009, 1061,
        1027, 1017, 1033, 1027, 1052, 1031, 1060, 1027, 1015, 1010, 1061, 1027,
        1016, 1033, 1009, 1052, 1031, 1060, 1027, 1016, 1010, 1061, 1027, 1015,
        1033, 1027,  100, 1009,  100, 1027,  100, 1012, 6660, 1010, 1052, 1031,
        1060, 1009, 1061, 1027, 1018, 1033, 1027, 1052, 1031, 1060, 1027, 1015,
        1010, 1061, 1027, 1017, 1033, 1009, 1052, 1031, 1060, 1027, 1016, 1010,
        1061, 1027, 1016, 1033, 1009, 1052, 1031, 1060, 1027, 1017, 1010, 1061,
        1027, 1015, 1033, 1027,  100, 1009,  100, 1027,  100, 1010, 1998, 2061,
        2006, 1012, 1996, 3463, 2024, 2445, 1999, 7251, 2184, 1012, 1016, 1998,
        2184, 1012, 1017, 1012,  102])"
3620,1,"['continuous', 'transformation', 'case']", Distribution of Arbitrary Functions,seg_667,"consider the transformation y = g(x), where g(x) is a one–one mapping that is invertible. this means that x can be expressed in terms of y as x = g−1(y). then, the pdf of y can be represented in the continuous case as follows. first express the cdf of y in terms of the cdf of x as",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  5136,  1996,  8651,  1061,  1027,  1043,  1006,  1060,  1007,
         1010,  2073,  1043,  1006,  1060,  1007,  2003,  1037,  2028,  1516,
         2028, 12375,  2008,  2003,  1999, 16874,  7028,  1012,  2023,  2965,
         2008,  1060,  2064,  2022,  5228,  1999,  3408,  1997,  1061,  2004,
         1060,  1027,  1043, 27944,  1006,  1061,  1007,  1012,  2059,  1010,
         1996, 11135,  1997,  1061,  2064,  2022,  3421,  1999,  1996,  7142,
         2553,  2004,  4076,  1012,  2034,  4671,  1996,  3729,  2546,  1997,
         1061,  1999,  3408,  1997,  1996,  3729,  2546,  1997,  1060,  2004,
          102])"
3621,0,[], Distribution of Arbitrary Functions,seg_667,differentiate both sides to get the pdf as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101, 21032,  2119,  3903,  2000,  2131,  1996, 11135,  2004,   102])"
3622,1,"['discrete', 'case']", Distribution of Arbitrary Functions,seg_667,and in the discrete case y = r(x) as,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  1998,  1999,  1996, 16246,  2553,  1061,  1027,  1054,  1006,
         1060,  1007,  2004,   102])"
3623,1,"['integer part', 'distribution']", Distribution of Arbitrary Functions,seg_667,example 10.21 distribution of integer part,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  2742,  2184,  1012,  2538,  4353,  1997, 16109,  2112,   102])"
3624,1,"['cauchy', 'cauchy distribution', 'integer part', 'distribution']", Distribution of Arbitrary Functions,seg_667,"if x has cauchy distribution, find the distribution of the integer part y = ⌊x⌋.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  2065,  1060,  2038,  6187, 10875,  2100,  4353,  1010,  2424,
         1996,  4353,  1997,  1996, 16109,  2112,  1061,  1027,   100,  1060,
          100,  1012,   102])"
3625,1,"['random', 'random variable', 'variable']", Distribution of Arbitrary Functions,seg_667,"solution 10.21 we have f (x) = 1∕[ (1 + x2)] for −∞   x   ∞. the random variable y takes integer values on the entire real line including y = ∓∞ (see discussion in section 7.2.1, p. 260). specifically,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  5576,  2184,  1012,  2538,  2057,  2031,  1042,  1006,  1060,
         1007,  1027,   100,  1031,  1006,  1015,  1009,  1060,  2475,  1007,
         1033,  2005,  1597, 30128,  1060,  1601,  1012,  1996,  6721,  8023,
         1061,  3138, 16109,  5300,  2006,  1996,  2972,  2613,  2240,  2164,
         1061,  1027,   100,  1006,  2156,  6594,  1999,  2930,  1021,  1012,
         1016,  1012,  1015,  1010,  1052,  1012, 13539,  1007,  1012,  4919,
         1010,   102])"
3626,1,['probabilities'], Distribution of Arbitrary Functions,seg_667,"a similar expression could be obtained for x 0 as pr[y = y] = pr[y − 1 ≤ x ≤ y]. as alternate terms in above equation (10.40) cancel out, this form is useful to compute the cdf, and to prove that the probabilities add up to 1. for example, sum from −∞ to ∞ to get tan(∞) − tan(−∞) = ∕2 − (− ∕2) = , which cancels with in the denominator. now use the identity tan−1(x) − tan−1(y) = tan−1 ((x − y)∕(1 + xy)) to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  1037,  2714,  3670,  2071,  2022,  4663,  2005,  1060,  1014,
         2004, 10975,  1031,  1061,  1027,  1061,  1033,  1027, 10975,  1031,
         1061,  1597,  1015,  1608,  1060,  1608,  1061,  1033,  1012,  2004,
         6585,  3408,  1999,  2682,  8522,  1006,  2184,  1012,  2871,  1007,
        17542,  2041,  1010,  2023,  2433,  2003,  6179,  2000, 24134,  1996,
         3729,  2546,  1010,  1998,  2000,  6011,  2008,  1996,  4013,  3676,
        14680,  5587,  2039,  2000,  1015,  1012,  2005,  2742,  1010,  7680,
         2013,  1597, 30128,  2000,  1601,  2000,  2131,  9092,  1006,  1601,
         1007,  1597,  9092,  1006,  1597, 30128,  1007,  1027,   100,  1597,
         1006,  1597,   100,  1007,  1027,  1010,  2029, 17542,  2015,  2007,
         1999,  1996,  7939, 20936, 27413,  1012,  2085,  2224,  1996,  4767,
         9092, 27944,  1006,  1060,  1007,  1597,  9092, 27944,  1006,  1061,
         1007,  1027,  9092, 27944,  1006,  1006,  1060,  1597,  1061,  1007,
          100,  1006,  1015,  1009,  1060,  2100,  1007,  1007,  2000,  2131,
          102])"
3627,0,[], Distribution of Arbitrary Functions,seg_667,"which is the desired form. as the terms do not cancel, this form is not useful to compute the cdf.",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  2029,  2003,  1996,  9059,  2433,  1012,  2004,  1996,  3408,
         2079,  2025, 17542,  1010,  2023,  2433,  2003,  2025,  6179,  2000,
        24134,  1996,  3729,  2546,  1012,   102])"
3628,1,"['range', 'functions', 'tails', 'unimodal', 'distributions', 'distribution', 'discrete distributions', 'discrete']", Distribution of Arbitrary Functions,seg_667,"this example has an enormous use. it shows another way to specify a pmf as the difference of two functions (say [tan−1(x + 1) − tan−1(x)] or [exp(− x) − exp(− (x + 1))]) that simply cancels out when summed over the proper range of x, leaving behind only two extreme terms whose difference appears as the normalizing constant in the denominator. this allows us to define a variety of new discrete distributions. as the pmf should be positive, we should form the difference separately for positive and negative values, to make it non-negative. the shape of the distribution (whether it is unimodal and tails off to the extremes, or it is u-shaped or j-shaped, etc.) must be known to form the pmf.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        1., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  2023,  2742,  2038,  2019,  8216,  2224,  1012,  2009,  3065,
         2178,  2126,  2000, 20648,  1037,  7610,  2546,  2004,  1996,  4489,
         1997,  2048,  4972,  1006,  2360,  1031,  9092, 27944,  1006,  1060,
         1009,  1015,  1007,  1597,  9092, 27944,  1006,  1060,  1007,  1033,
         2030,  1031,  4654,  2361,  1006,  1597,  1060,  1007,  1597,  4654,
         2361,  1006,  1597,  1006,  1060,  1009,  1015,  1007,  1007,  1033,
         1007,  2008,  3432, 17542,  2015,  2041,  2043,  7680,  7583,  2058,
         1996,  5372,  2846,  1997,  1060,  1010,  2975,  2369,  2069,  2048,
         6034,  3408,  3005,  4489,  3544,  2004,  1996,  3671,  6026,  5377,
         1999,  1996,  7939, 20936, 27413,  1012,  2023,  4473,  2149,  2000,
         9375,  1037,  3528,  1997,  2047, 16246, 20611,  1012,  2004,  1996,
         7610,  2546,  2323,  2022,  3893,  1010,  2057,  2323,  2433,  1996,
         4489, 10329,  2005,  3893,  1998,  4997,  5300,  1010,  2000,  2191,
         2009,  2512,  1011,  4997,  1012,  1996,  4338,  1997,  1996,  4353,
         1006,  3251,  2009,  2003,  4895, 16339,  9305,  1998, 17448,  2125,
         2000,  1996, 28800,  1010,  2030,  2009,  2003,  1057,  1011,  5044,
         2030,  1046,  1011,  5044,  1010,  4385,  1012,  1007,  2442,  2022,
         2124,  2000,  2433,  1996,  7610,  2546,  1012,   102])"
3629,1,['distribution'], Distribution of Arbitrary Functions,seg_667,example 10.22 distribution of fractional part,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  2742,  2184,  1012,  2570,  4353,  1997, 12884,  2389,  2112,
          102])"
3630,1,"['exponential', 'exponential distribution', 'distribution']", Distribution of Arbitrary Functions,seg_667,"if x has an exponential distribution, find the distribution of the fractional part y = x − ⌊x⌋.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  2065,  1060,  2038,  2019, 27258,  4353,  1010,  2424,  1996,
         4353,  1997,  1996, 12884,  2389,  2112,  1061,  1027,  1060,  1597,
          100,  1060,   100,  1012,   102])"
3631,1,['distribution'], Distribution of Arbitrary Functions,seg_667,"solution 10.22 it was shown in chapter 6 (p. 218) that if x has an exponential distribution, the distribution of y = ⌊x⌋ is geo(1 − exp(− )). the possible values of y = x − ⌊x⌋ are 0 ≤ y ≤ 1. if we assume that the integer and fractional",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  5576,  2184,  1012,  2570,  2009,  2001,  3491,  1999,  3127,
         1020,  1006,  1052,  1012, 20741,  1007,  2008,  2065,  1060,  2038,
         2019, 27258,  4353,  1010,  1996,  4353,  1997,  1061,  1027,   100,
         1060,   100,  2003, 20248,  1006,  1015,  1597,  4654,  2361,  1006,
         1597,  1007,  1007,  1012,  1996,  2825,  5300,  1997,  1061,  1027,
         1060,  1597,   100,  1060,   100,  2024,  1014,  1608,  1061,  1608,
         1015,  1012,  2065,  2057,  7868,  2008,  1996, 16109,  1998, 12884,
         2389,   102])"
3632,1,"['continuous', 'geometric', 'discrete', 'geometric distribution', 'random', 'random variables', 'continuous distribution', 'distribution', 'exponential', 'variables', 'geometric random variables', 'independent']", Distribution of Arbitrary Functions,seg_667,"parts are independent, y is the difference between an exponential and geometric random variables. this is of mixed type (as geometric distribution is discrete), where the continuous distribution dominates. this means that y has a continuous distribution. using the modf it is easy to show that y is distributed as f (y) = exp(− y)∕[1 − exp(− )], for 0 ≤ y ≤ 1.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997, 15275,  4972])","tensor([  101,  3033,  2024,  2981,  1010,  1061,  2003,  1996,  4489,  2090,
         2019, 27258,  1998, 14965,  6721, 10857,  1012,  2023,  2003,  1997,
         3816,  2828,  1006,  2004, 14965,  4353,  2003, 16246,  1007,  1010,
         2073,  1996,  7142,  4353, 29532,  1012,  2023,  2965,  2008,  1061,
         2038,  1037,  7142,  4353,  1012,  2478,  1996, 16913,  2546,  2009,
         2003,  3733,  2000,  2265,  2008,  1061,  2003,  5500,  2004,  1042,
         1006,  1061,  1007,  1027,  4654,  2361,  1006,  1597,  1061,  1007,
          100,  1031,  1015,  1597,  4654,  2361,  1006,  1597,  1007,  1033,
         1010,  2005,  1014,  1608,  1061,  1608,  1015,  1012,   102])"
3633,1,"['continuous', 'function', 'range', 'transformation', 'random variable', 'continuous random variables', 'method', 'random', 'random variables', 'variables', 'variable']", Distribution of Logarithms,seg_669,"the logarithmic transformation can be applied to any random variable that takes non-negative values. as log(0) = −∞, this transforms (0,∞) to the new range (−∞,∞). as the log() is a real function of its argument, this transformation is applied to continuous random variables. unless otherwise stated, the base of the logarithm is assumed to be e. a special transformation encountered in communication theory is y = log2(1 + x). using the method described above, the pdf of y is given by gy (y) = ln(2) f (2y − 1)2y.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([4353, 1997, 8833, 8486, 2705, 5244])","tensor([  101,  1996,  8833,  8486,  2705,  7712,  8651,  2064,  2022,  4162,
         2000,  2151,  6721,  8023,  2008,  3138,  2512,  1011,  4997,  5300,
         1012,  2004,  8833,  1006,  1014,  1007,  1027,  1597, 30128,  1010,
         2023, 21743,  1006,  1014,  1010,  1601,  1007,  2000,  1996,  2047,
         2846,  1006,  1597, 30128,  1010,  1601,  1007,  1012,  2004,  1996,
         8833,  1006,  1007,  2003,  1037,  2613,  3853,  1997,  2049,  6685,
         1010,  2023,  8651,  2003,  4162,  2000,  7142,  6721, 10857,  1012,
         4983,  4728,  3090,  1010,  1996,  2918,  1997,  1996,  8833,  8486,
         2705,  2213,  2003,  5071,  2000,  2022,  1041,  1012,  1037,  2569,
         8651,  8567,  1999,  4807,  3399,  2003,  1061,  1027,  8833,  2475,
         1006,  1015,  1009,  1060,  1007,  1012,  2478,  1996,  4118,  2649,
         2682,  1010,  1996, 11135,  1997,  1061,  2003,  2445,  2011,  1043,
         2100,  1006,  1061,  1007,  1027,  1048,  2078,  1006,  1016,  1007,
         1042,  1006,  1016,  2100,  1597,  1015,  1007,  1016,  2100,  1012,
          102])"
3634,1,"['symmetric', 'functions', 'skew', 'variables']", Special Functions,seg_671,"there exist many symmetric and skew symmetric functions that possess interesting properties. these can be in single or multiple variables. examples are x∕(1 − x), (1 +",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([2569, 4972])","tensor([  101,  2045,  4839,  2116, 19490,  1998, 15315,  7974, 19490,  4972,
         2008, 10295,  5875,  5144,  1012,  2122,  2064,  2022,  1999,  2309,
         2030,  3674, 10857,  1012,  4973,  2024,   100,  1006,  1015,  1597,
         1060,  1007,  1010,  1006,  1015,  1009,   102])"
3635,0,[], Special Functions,seg_671,1 + x2. square both sides to get y2 =,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([2569, 4972])","tensor([ 101, 1015, 1009, 1060, 2475, 1012, 2675, 2119, 3903, 2000, 2131, 1061,
        2475, 1027,  102])"
3636,1,"['cauchy', 'cauchy distributed', 'standard']", Special Functions,seg_671,"if x is standard cauchy distributed, then y = x∕√",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([2569, 4972])","tensor([  101,  2065,  1060,  2003,  3115,  6187, 10875,  2100,  5500,  1010,
         2059,  1061,  1027,   100,   102])"
3637,1,['distribution'], Special Functions,seg_671,example 10.23 distribution of ratio of sums,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([2569, 4972])","tensor([  101,  2742,  2184,  1012,  2603,  4353,  1997,  6463,  1997, 20571,
          102])"
3638,1,"['independent', 'distribution']", Special Functions,seg_671,"let xi’s be iid exp(  ) for i = 1, 2, ..,m. let yj’s be iid exp( ) for j = 1, 2, .., n. if xi’s and yj’s are pair-wise independent, find the distribution of the ratio w =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2569, 4972])","tensor([ 101, 2292, 8418, 1521, 1055, 2022, 2462, 2094, 4654, 2361, 1006, 1007,
        2005, 1045, 1027, 1015, 1010, 1016, 1010, 1012, 1012, 1010, 1049, 1012,
        2292, 1061, 3501, 1521, 1055, 2022, 2462, 2094, 4654, 2361, 1006, 1007,
        2005, 1046, 1027, 1015, 1010, 1016, 1010, 1012, 1012, 1010, 1050, 1012,
        2065, 8418, 1521, 1055, 1998, 1061, 3501, 1521, 1055, 2024, 3940, 1011,
        7968, 2981, 1010, 2424, 1996, 4353, 1997, 1996, 6463, 1059, 1027,  102])"
3639,1,"['gamma', 'distributions', 'gamma distributions', 'distribution', 'variates', 'joint', 'independent']", Special Functions,seg_671,"solution 10.23 as xi’s are iid, the joint pdf is the product of individual pdfs. we first use the mgf technique to find the distribution of numerator and denominator. the mgf of exp( ) is mx(t) = 1∕[1 − t]. as the xi’s are iid, mu(t) = 1∕[1 − t]m. similarly, m (t) = 1∕[1 − t]n. these are the mgfs of gamma distributions. hence, w is the ratio of two independent gamma variates. see references 134, 138, 285 and 294 for further properties.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2569, 4972])","tensor([  101,  5576,  2184,  1012,  2603,  2004,  8418,  1521,  1055,  2024,
         2462,  2094,  1010,  1996,  4101, 11135,  2003,  1996,  4031,  1997,
         3265, 11135,  2015,  1012,  2057,  2034,  2224,  1996, 11460,  2546,
         6028,  2000,  2424,  1996,  4353,  1997, 16371,  5017,  8844,  1998,
         7939, 20936, 27413,  1012,  1996, 11460,  2546,  1997,  4654,  2361,
         1006,  1007,  2003, 25630,  1006,  1056,  1007,  1027,   100,  1031,
         1015,  1597,  1056,  1033,  1012,  2004,  1996,  8418,  1521,  1055,
         2024,  2462,  2094,  1010, 14163,  1006,  1056,  1007,  1027,   100,
         1031,  1015,  1597,  1056,  1033,  1049,  1012,  6660,  1010,  1049,
         1006,  1056,  1007,  1027,   100,  1031,  1015,  1597,  1056,  1033,
         1050,  1012,  2122,  2024,  1996, 11460, 10343,  1997, 13091, 20611,
         1012,  6516,  1010,  1059,  2003,  1996,  6463,  1997,  2048,  2981,
        13091, 13075, 13143,  2015,  1012,  2156,  7604, 15170,  1010, 15028,
         1010, 21777,  1998, 28135,  2005,  2582,  5144,  1012,   102])"
3640,1,"['normal', 'transformations']", TRANSFORMATIONS OF NORMAL VARIATES,seg_673,"most of the transformations discussed above are applicable to the normal variate. as this has many practical applications, this section briefly discusses some of them.",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([21865,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2087,  1997,  1996, 21865,  6936,  2682,  2024, 12711,  2000,
         1996,  3671, 13075, 13143,  1012,  2004,  2023,  2038,  2116,  6742,
         5097,  1010,  2023,  2930,  4780, 15841,  2070,  1997,  2068,  1012,
          102])"
3641,1,"['normally distributed', 'method', 'normal', 'variates', 'combination', 'independent']", Linear Combination of Normal Variates,seg_675,"linear combination of any number of independent normal variates is normally distributed. this can be proved using induction. a simpler method is to use the mgf technique. we saw in chapter 9 that the chf of n( ,  2) is exp(it  − 1",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 7399,  5257,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  7399,  5257,  1997,  2151,  2193,  1997,  2981,  3671, 13075,
        13143,  2015,  2003,  5373,  5500,  1012,  2023,  2064,  2022,  4928,
         2478, 15946,  1012,  1037, 16325,  4118,  2003,  2000,  2224,  1996,
        11460,  2546,  6028,  1012,  2057,  2387,  1999,  3127,  1023,  2008,
         1996, 10381,  2546,  1997,  1050,  1006,  1010,  1016,  1007,  2003,
         4654,  2361,  1006,  2009,  1597,  1015,   102])"
3642,1,"['random', 'normal', 'random variables', 'variables', 'independent']", Linear Combination of Normal Variates,seg_675,"2 t2 2). if x1,x2, … ,xn are independent normal random variables n( i,  i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 7399,  5257,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  1016,  1056,  2475,  1016,  1007,  1012,  2065,  1060,  2487,
         1010,  1060,  2475,  1010,  1529,  1010,  1060,  2078,  2024,  2981,
         3671,  6721, 10857,  1050,  1006,  1045,  1010,  1045,   102])"
3643,1,"['mean', 'normal', 'variance']", Linear Combination of Normal Variates,seg_675,as this is the chf of a normal variate with mean ∑i i and variance ∑i i,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 1.,
        0., 0., 0.])","tensor([ 7399,  5257,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2004,  2023,  2003,  1996, 10381,  2546,  1997,  1037,  3671,
        13075, 13143,  2007,  2812,   100,  1045,  1998, 23284,   100,  1045,
          102])"
3644,1,"['normally distributed', 'case']", Linear Combination of Normal Variates,seg_675,"2, it follows ′ that y is normally distributed. in the particular case, when each of the  i s and  i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 7399,  5257,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 1016, 1010, 2009, 4076, 1531, 2008, 1061, 2003, 5373, 5500, 1012,
        1999, 1996, 3327, 2553, 1010, 2043, 2169, 1997, 1996, 1045, 1055, 1998,
        1045,  102])"
3645,1,"['mean', 'normal', 'variance']", Linear Combination of Normal Variates,seg_675,"this shows that ∑iciyi is normal with mean   = ∑ici i, and variance  2 = ∑ici",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0.])","tensor([ 7399,  5257,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2023,  3065,  2008,   100,  2003,  3671,  2007,  2812,  1027,
          100,  1045,  1010,  1998, 23284,  1016,  1027,   100,   102])"
3646,1,"['mean', 'normal', 'variance']", Linear Combination of Normal Variates,seg_675,′2 corollary 1 cx + b is normal with mean  ′ = c ∗   + b and variance   = c2 2.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 7399,  5257,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  1531,  1016,  2522, 28402,  5649,  1015,  1039,  2595,  1009,
         1038,  2003,  3671,  2007,  2812,  1531,  1027,  1039,  1598,  1009,
         1038,  1998, 23284,  1027, 29248,  1016,  1012,   102])"
3647,1,['normal'], Square of Normal Variates,seg_677,the square of a normal variate is  2,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  1996,  2675,  1997,  1037,  3671, 13075, 13143,  2003,  1016,
          102])"
3648,1,"['cauchy', 'normal', 'variates', 'cauchy distributed', 'sum of squares', 'independent']", Square of Normal Variates,seg_677,"1 distributed. in general, the sum of squares of any number of independent normal variates is  2n distributed. similarly, the ratio of independent normal variates is cauchy distributed. this is proved in chapter 11.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  1015,  5500,  1012,  1999,  2236,  1010,  1996,  7680,  1997,
        14320,  1997,  2151,  2193,  1997,  2981,  3671, 13075, 13143,  2015,
         2003,  1016,  2078,  5500,  1012,  6660,  1010,  1996,  6463,  1997,
         2981,  3671, 13075, 13143,  2015,  2003,  6187, 10875,  2100,  5500,
         1012,  2023,  2003,  4928,  1999,  3127,  2340,  1012,   102])"
3649,1,"['normal', 'distribution']", Square of Normal Variates,seg_677,example 10.24 distribution of the square of a normal variate,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2742,  2184,  1012,  2484,  4353,  1997,  1996,  2675,  1997,
         1037,  3671, 13075, 13143,   102])"
3650,1,['distribution'], Square of Normal Variates,seg_677,"if x is n(0, 1), find the distribution of x2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([ 101, 2065, 1060, 2003, 1050, 1006, 1014, 1010, 1015, 1007, 1010, 2424,
        1996, 4353, 1997, 1060, 2475, 1012,  102])"
3651,0,[], Square of Normal Variates,seg_677,differentiate with respect to y to get,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([  101, 21032,  2007,  4847,  2000,  1061,  2000,  2131,   102])"
3652,1,['leibnitz theorem'], Square of Normal Variates,seg_677,using leibnitz theorem this reduces to (1∕√ 2 )(e−y∕2 ∗ 1∕(2√y) − e−y∕2 ∗,tensor(1),"tensor([0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2478, 26947, 24700,  8838,  9872,  2023, 13416,  2000,  1006,
          100,  1016,  1007,  1006,   100,  1598,   100,  1006,  1016, 30127,
         2100,  1007,  1597,   100,  1598,   102])"
3653,0,[], Square of Normal Variates,seg_677,(−1)∕(2√y)) = (1∕√ 2 )y1∕2−1e−y∕2. this is the pdf of a chi-square variate,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  1006,  1597,  2487,  1007,   100,  1006,  1016, 30127,  2100,
         1007,  1007,  1027,  1006,   100,  1016,  1007,   100,  1012,  2023,
         2003,  1996, 11135,  1997,  1037,  9610,  1011,  2675, 13075, 13143,
          102])"
3654,0,[], Square of Normal Variates,seg_677,"with 1 dof. alternatively, write (10.46) as  ",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 2675,  1997,  3671, 13075, 13143,  2015])","tensor([  101,  2007,  1015,  2079,  2546,  1012, 14084,  1010,  4339,  1006,
         2184,  1012,  4805,  1007,  2004,   102])"
3655,1,"['treatment', 'transformations', 'symmetric', 'independent', 'mean', 'continuous distributions', 'continuous random variables', 'independent random variables', 'probability distribution', 'continuous', 'deviation', 'probability', 'results', 'random variables', 'distributions', 'random', 'distribution', 'variables']", SUMMARY,seg_679,"this chapter derives and explains the formulas for the probability distribution of a sum, difference, product, and ratio of two independent random variables. the distribution of squares, square-roots, of univariate and other transformations of two or more random variables are derived and illustrated. distribution of integer and fractional parts of some continuous random variables are discussed, as also the distribution of cdf (f(x)) and its inverse (f−1(x)). these known results are used to derive an expression for the mean deviation of some continuous distributions as twice the simple integral of t∕f (f−1(t)) from zero to f( ), where is the mean and f(x) is the cdf (f( ) = 1∕2 for symmetric laws). several examples are included to understand the need and usefulness of the transformations. advanced treatment can be found in references 134, 138, 225 and 295 and engineering applications in references 285 and 291.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2023,  3127, 12153,  1998,  7607,  1996, 25814,  2005,  1996,
         9723,  4353,  1997,  1037,  7680,  1010,  4489,  1010,  4031,  1010,
         1998,  6463,  1997,  2048,  2981,  6721, 10857,  1012,  1996,  4353,
         1997, 14320,  1010,  2675,  1011,  6147,  1010,  1997,  4895, 28739,
        13143,  1998,  2060, 21865,  1997,  2048,  2030,  2062,  6721, 10857,
         2024,  5173,  1998,  7203,  1012,  4353,  1997, 16109,  1998, 12884,
         2389,  3033,  1997,  2070,  7142,  6721, 10857,  2024,  6936,  1010,
         2004,  2036,  1996,  4353,  1997,  3729,  2546,  1006,  1042,  1006,
         1060,  1007,  1007,  1998,  2049, 19262,  1006,  1042, 27944,  1006,
         1060,  1007,  1007,  1012,  2122,  2124,  3463,  2024,  2109,  2000,
        18547,  2019,  3670,  2005,  1996,  2812, 24353,  1997,  2070,  7142,
        20611,  2004,  3807,  1996,  3722,  9897,  1997,   100,  1006,  1042,
        27944,  1006,  1056,  1007,  1007,  2013,  5717,  2000,  1042,  1006,
         1007,  1010,  2073,  2003,  1996,  2812,  1998,  1042,  1006,  1060,
         1007,  2003,  1996,  3729,  2546,  1006,  1042,  1006,  1007,  1027,
          100,  2005, 19490,  4277,  1007,  1012,  2195,  4973,  2024,  2443,
         2000,  3305,  1996,  2342,  1998,  6179,  2791,  1997,  1996, 21865,
         1012,  3935,  3949,  2064,  2022,  2179,  1999,  7604, 15170,  1010,
        15028,  1010, 14993,  1998, 21679,  1998,  3330,  5097,  1999,  7604,
        21777,  1998, 27173,  1012,   102])"
3656,1,"['continuous', 'continuous distributions', 'distributions', 'discrete']", SUMMARY,seg_679,a) the covt is applicable to both discrete and continuous distributions.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1037,  1007,  1996,  2522,  2615,  2102,  2003, 12711,  2000,
         2119, 16246,  1998,  7142, 20611,  1012,   102])"
3657,1,"['range', 'transformation', 'random variable', 'random', 'variable']", SUMMARY,seg_679,"b) if the range of a random variable x includes the origin, we cannot use the transformation y = 1∕x",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1038, 1007, 2065, 1996, 2846, 1997, 1037, 6721, 8023, 1060, 2950,
        1996, 4761, 1010, 2057, 3685, 2224, 1996, 8651, 1061, 1027,  100,  102])"
3658,1,"['variates', 'discrete']", SUMMARY,seg_679,c) a translation y = x ± c is not applicable to discrete variates,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        0.])",tensor([12654]),"tensor([  101,  1039,  1007,  1037,  5449,  1061,  1027,  1060,  1081,  1039,
         2003,  2025, 12711,  2000, 16246, 13075, 13143,  2015,   102])"
3659,1,"['normal', 'distribution']", SUMMARY,seg_679,d) the distribution of the square of a normal variate is student’s t,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  1040,  1007,  1996,  4353,  1997,  1996,  2675,  1997,  1037,
         3671, 13075, 13143,  2003,  3076,  1521,  1055,  1056,   102])"
3660,1,"['cauchy', 'cauchy distributed']", SUMMARY,seg_679,e) the reciprocal of a cauchy variate is cauchy distributed.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 1., 1., 0.,
        0.])",tensor([12654]),"tensor([  101,  1041,  1007,  1996, 28309,  1997,  1037,  6187, 10875,  2100,
        13075, 13143,  2003,  6187, 10875,  2100,  5500,  1012,   102])"
3661,1,['distribution'], SUMMARY,seg_679,"tion of (i) y = c ∗ x + d, (ii) distribution of y = √x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  1997,  1006,  1045,  1007,  1061,  1027,  1039,
         1598,  1060,  1009,  1040,  1010,  1006,  2462,  1007,  4353,  1997,
         1061,  1027,  1600,  2595,  1012,   102])"
3662,0,[], SUMMARY,seg_679,"y = |x −  |. 10.5 if x is bino(n, p) find distri-",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])",tensor([12654]),"tensor([ 101, 1061, 1027, 1064, 1060, 1597, 1064, 1012, 2184, 1012, 1019, 2065,
        1060, 2003, 8026, 2080, 1006, 1050, 1010, 1052, 1007, 2424, 4487, 3367,
        3089, 1011,  102])"
3663,1,['exponentially'], SUMMARY,seg_679,"10.6 if x is geom(p), find the dis10.17 if x and y are exponentially dis",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2184,  1012,  1020,  2065,  1060,  2003, 20248,  2213,  1006,
         1052,  1007,  1010,  2424,  1996,  4487,  2015, 10790,  1012,  2459,
         2065,  1060,  1998,  1061,  2024, 27258,  2135,  4487,  2015,   102])"
3664,1,"['independent', 'distribution']", SUMMARY,seg_679,"n =1 xi, where tributed, find the distribution of each xi is independent. x + y and x − y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1050, 1027, 1015, 8418, 1010, 2073, 7050, 2094, 1010, 2424, 1996,
        4353, 1997, 2169, 8418, 2003, 2981, 1012, 1060, 1009, 1061, 1998, 1060,
        1597, 1061, 1012,  102])"
3665,1,['gamma'], SUMMARY,seg_679,10.7 if f and g are two cdf’s sym10.18 if x is distributed as gamma,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  2184,  1012,  1021,  2065,  1042,  1998,  1043,  2024,  2048,
         3729,  2546,  1521,  1055, 25353,  2213, 10790,  1012,  2324,  2065,
         1060,  2003,  5500,  2004, 13091,   102])"
3666,1,"['moment', 'second moment', 'distribution']", SUMMARY,seg_679,"metric around zero, with unit ( , 1), find the distribution of y = second moment, prove that h = log (x∕ ).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 12046,  2105,  5717,  1010,  2007,  3131,  1006,  1010,  1015,
         1007,  1010,  2424,  1996,  4353,  1997,  1061,  1027,  2117,  2617,
         1010,  6011,  2008,  1044,  1027,  8833,  1006,   100,  1007,  1012,
          102])"
3667,1,['distribution'], SUMMARY,seg_679,"distributed. of y = − log (x). if a = −b, find 10.8 if x is duni(k) with f (x) = the distribution of y = x2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  5500,  1012,  1997,  1061,  1027,  1597,  8833,  1006,  1060,
         1007,  1012,  2065,  1037,  1027,  1597,  2497,  1010,  2424,  2184,
         1012,  1022,  2065,  1060,  2003, 24654,  2072,  1006,  1047,  1007,
         2007,  1042,  1006,  1060,  1007,  1027,  1996,  4353,  1997,  1061,
         1027,  1060,  2475,  1012,   102])"
3668,1,"['exponential', 'standard', 'distribution']", SUMMARY,seg_679,"− ln (x) is standard exponential. show that the variate y = what is the distribution when the ln (x∕(1 − x)) is generalized logarithm is not to the base e. logistic(p, q).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1597,  1048,  2078,  1006,  1060,  1007,  2003,  3115, 27258,
         1012,  2265,  2008,  1996, 13075, 13143,  1061,  1027,  2054,  2003,
         1996,  4353,  2043,  1996,  1048,  2078,  1006,   100,  1006,  1015,
         1597,  1060,  1007,  1007,  2003, 18960,  8833,  8486,  2705,  2213,
         2003,  2025,  2000,  1996,  2918,  1041,  1012,  8833,  6553,  1006,
         1052,  1010,  1053,  1007,  1012,   102])"
3669,1,"['function', 'distribution', 'monotonic', 'monotonic function']", SUMMARY,seg_679,"10.11 if h(x) is a monotonic function, 10.22 find the distribution of abso-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2184,  1012,  2340,  2065,  1044,  1006,  1060,  1007,  2003,
         1037, 18847, 25009,  3853,  1010,  2184,  1012,  2570,  2424,  1996,
         4353,  1997, 14689,  2080,  1011,   102])"
3670,1,"['mean', 'normal']", SUMMARY,seg_679,"prove that the cdf of y = h(x) lute value of a general normal can be expressed as fy (y) = n( ,  2), and its mean. fx(h−1(y)) if x is increasing,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6011,  2008,  1996,  3729,  2546,  1997,  1061,  1027,  1044,
         1006,  1060,  1007, 11320,  2618,  3643,  1997,  1037,  2236,  3671,
         2064,  2022,  5228,  2004,  1042,  2100,  1006,  1061,  1007,  1027,
         1050,  1006,  1010,  1016,  1007,  1010,  1998,  2049,  2812,  1012,
        23292,  1006,  1044, 27944,  1006,  1061,  1007,  1007,  2065,  1060,
         2003,  4852,  1010,   102])"
3671,0,[], SUMMARY,seg_679,"and fy (y) = 1 − fx(h−1(y)) 10.23 if x ∼ weibull(a, b), find the disotherwise. tribution of y = log (x∕b).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])",tensor([12654]),"tensor([  101,  1998,  1042,  2100,  1006,  1061,  1007,  1027,  1015,  1597,
        23292,  1006,  1044, 27944,  1006,  1061,  1007,  1007,  2184,  1012,
         2603,  2065,  1060,   100, 11417,  8569,  3363,  1006,  1037,  1010,
         1038,  1007,  1010,  2424,  1996,  4487,  6499, 12399, 14244,  1012,
        13012, 29446,  1997,  1061,  1027,  8833,  1006,   100,  1007,  1012,
          102])"
3672,1,"['weibull', 'standard']", SUMMARY,seg_679,bution of u = c ∗ tan(1∕x) 10.25 if x ∼ standard weibull distribu-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2021,  3258,  1997,  1057,  1027,  1039,  1598,  9092,  1006,
          100,  1007,  2184,  1012,  2423,  2065,  1060,   100,  3115, 11417,
         8569,  3363,  4487,  3367,  3089,  8569,  1011,   102])"
3673,1,['distribution'], SUMMARY,seg_679,"tion with pdf f (x) = bxb−1e−xb 10.14 if x1,x2 are iid cuni(0, 1), find the distribution of y = x(b).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  2007, 11135,  1042,  1006,  1060,  1007,  1027,
         1038,  2595,  2497, 27944,  2063, 22543,  2595,  2497,  2184,  1012,
         2403,  2065,  1060,  2487,  1010,  1060,  2475,  2024,  2462,  2094,
        12731,  3490,  1006,  1014,  1010,  1015,  1007,  1010,  2424,  1996,
         4353,  1997,  1061,  1027,  1060,  1006,  1038,  1007,  1012,   102])"
3674,1,['distribution'], SUMMARY,seg_679,find the distribution of y1 =,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2424, 1996, 4353, 1997, 1061, 2487, 1027,  102])"
3675,1,['transformation'], SUMMARY,seg_679,"√−2loge(x1) cos(2 x2) and y2 = 10.26 if u is cuni(0, 1) find the dis√−2loge(x1) sin(2 x2) (the intribution of (i) |u − 1 2 |, (ii) 1/ verse transformation being x1 = (1 + u).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1600, 22543,  2475, 21197,  2063,  1006,  1060,  2487,  1007,
         2522,  2015,  1006,  1016,  1060,  2475,  1007,  1998,  1061,  2475,
         1027,  2184,  1012,  2656,  2065,  1057,  2003, 12731,  3490,  1006,
         1014,  1010,  1015,  1007,  2424,  1996,  4487,  2015, 30127, 22543,
         2475, 21197,  2063,  1006,  1060,  2487,  1007,  8254,  1006,  1016,
         1060,  2475,  1007,  1006,  1996, 20014,  3089, 29446,  1997,  1006,
         1045,  1007,  1064,  1057,  1597,  1015,  1016,  1064,  1010,  1006,
         2462,  1007,  1015,  1013,  7893,  8651,  2108,  1060,  2487,  1027,
         1006,  1015,  1009,  1057,  1007,  1012,   102])"
3676,1,"['mean', 'variance', 'distribution']", SUMMARY,seg_679,"1 10.27 if f (x) = (c − 1)∕(1 + x)c for 0 arctan(y2∕y1)). x ∞, find the distribution of y = 1∕(1 + x)c and find the mean 10.15 prove that the sum of indepenand variance.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  2184,  1012,  2676,  2065,  1042,  1006,  1060,  1007,
         1027,  1006,  1039,  1597,  1015,  1007,   100,  1006,  1015,  1009,
         1060,  1007,  1039,  2005,  1014,  8115,  5794,  1006,   100,  1007,
         1007,  1012,  1060,  1601,  1010,  2424,  1996,  4353,  1997,  1061,
         1027,   100,  1006,  1015,  1009,  1060,  1007,  1039,  1998,  2424,
         1996,  2812,  2184,  1012,  2321,  6011,  2008,  1996,  7680,  1997,
        27427, 13699,  8189,  4859, 23284,  1012,   102])"
3677,1,"['exponential', 'random']", SUMMARY,seg_679,dent exponential random vari-,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 21418, 27258,  6721, 13075,  2072,  1011,   102])"
3678,1,"['gamma', 'gamma distribution', 'distribution']", SUMMARY,seg_679,ables has a gamma distribution. 10.28 if y = g(x) is an arbitrary func-,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2583,  2015,  2038,  1037, 13091,  4353,  1012,  2184,  1012,
         2654,  2065,  1061,  1027,  1043,  1006,  1060,  1007,  2003,  2019,
        15275,  4569,  2278,  1011,   102])"
3679,1,"['random', 'conditional distribution', 'distribution', 'conditional', 'discrete']", SUMMARY,seg_679,tion of a discrete random vari10.16 if conditional distribution of x,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  1997,  1037, 16246,  6721, 13075,  2072, 10790,
         1012,  2385,  2065, 18462,  4353,  1997,  1060,   102])"
3680,1,"['mean', 'variance']", SUMMARY,seg_679,"able, prove that the pmf of y is is bino(n, p), where p is disf (y) = ∑x∈g−1(y)f (x). tributed as beta(p, q), find the mean and variance of x.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  2583,  1010,  6011,  2008,  1996,  7610,  2546,  1997,  1061,
         2003,  2003,  8026,  2080,  1006,  1050,  1010,  1052,  1007,  1010,
         2073,  1052,  2003,  4487, 22747,  1006,  1061,  1007,  1027,   100,
         1006,  1061,  1007,  1042,  1006,  1060,  1007,  1012,  7050,  2094,
         2004,  8247,  1006,  1052,  1010,  1053,  1007,  1010,  2424,  1996,
         2812,  1998, 23284,  1997,  1060,  1012,   102])"
3681,0,[], JOINT DISTRIBUTIONS,seg_681,"after finishing the chapter, students will be able to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4101, 20611])","tensor([ 101, 2044, 5131, 1996, 3127, 1010, 2493, 2097, 2022, 2583, 2000,  102])"
3682,1,"['joint and conditional distributions', 'distributions', 'joint', 'conditional', 'conditional distributions']", JOINT DISTRIBUTIONS,seg_681,◾ distinguish joint and conditional distributions,tensor(1),"tensor([0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4101, 20611])","tensor([  101,   100, 10782,  4101,  1998, 18462, 20611,   102])"
3683,1,"['functions', 'random variable', 'random', 'distribution', 'variable']", JOINT DISTRIBUTIONS,seg_681,◾ find distribution of functions of a random variable,tensor(1),"tensor([0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 0.])","tensor([ 4101, 20611])","tensor([ 101,  100, 2424, 4353, 1997, 4972, 1997, 1037, 6721, 8023,  102])"
3684,1,"['linear', 'linear transformations', 'random', 'random variables', 'variables', 'transformations']", JOINT DISTRIBUTIONS,seg_681,◾ understand linear transformations of random variables,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 0.])","tensor([ 4101, 20611])","tensor([  101,   100,  3305,  7399, 21865,  1997,  6721, 10857,   102])"
3685,1,"['jacobian', 'transformations']", JOINT DISTRIBUTIONS,seg_681,◾ comprehend jacobian of transformations,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 0.])","tensor([ 4101, 20611])","tensor([  101,   100, 22346,  6213,  2937,  1997, 21865,   102])"
3686,1,"['arbitrary transformations', 'transformations']", JOINT DISTRIBUTIONS,seg_681,◾ describe arbitrary transformations,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])","tensor([ 4101, 20611])","tensor([  101,   100,  6235, 15275, 21865,   102])"
3687,1,"['polar transformations', 'transformations']", JOINT DISTRIBUTIONS,seg_681,◾ apply polar transformations,tensor(1),"tensor([0., 0., 0., 1., 1., 0.])","tensor([ 4101, 20611])","tensor([  101,   100,  6611, 11508, 21865,   102])"
3688,0,[], JOINT DISTRIBUTIONS,seg_681,◾ utilize “do-little” technique to quickly find jacobians,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4101, 20611])","tensor([  101,   100, 16462,  1523,  2079,  1011,  2210,  1524,  6028,  2000,
         2855,  2424,  6213,  7066,   102])"
3689,1,"['random', 'dependent', 'random variables', 'distribution', 'variables', 'joint', 'independent']", JOINT AND CONDITIONAL DISTRIBUTIONS,seg_683,definition 11.1 joint distribution is the distribution of two or more (dependent or independent) random variables.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 1.,
        0., 1., 1., 0., 0.])","tensor([ 4101,  1998, 18462, 20611])","tensor([  101,  6210,  2340,  1012,  1015,  4101,  4353,  2003,  1996,  4353,
         1997,  2048,  2030,  2062,  1006,  7790,  2030,  2981,  1007,  6721,
        10857,  1012,   102])"
3690,1,"['continuous', 'variables', 'discrete']", JOINT AND CONDITIONAL DISTRIBUTIONS,seg_683,"usually, the variables involved are either all discrete or all continuous. symbolically, it is represented as p(x, y) = p(x = x and y = y) (such that ∑(x,y)∈ap(x, y) = 1",tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4101,  1998, 18462, 20611])","tensor([  101,  2788,  1010,  1996, 10857,  2920,  2024,  2593,  2035, 16246,
         2030,  2035,  7142,  1012, 12613,  3973,  1010,  2009,  2003,  3421,
         2004,  1052,  1006,  1060,  1010,  1061,  1007,  1027,  1052,  1006,
         1060,  1027,  1060,  1998,  1061,  1027,  1061,  1007,  1006,  2107,
         2008,   100,  1006,  1060,  1010,  1061,  1007,  1596,  9331,  1006,
         1060,  1010,  1061,  1007,  1027,  1015,   102])"
3691,1,"['continuous', 'discrete', 'case']", JOINT AND CONDITIONAL DISTRIBUTIONS,seg_683,"for discrete case and (∫ ∫ap(x, y)dxdy = 1 for the continuous case).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0.])","tensor([ 4101,  1998, 18462, 20611])","tensor([  101,  2005, 16246,  2553,  1998,  1006,   100,   100,  1006,  1060,
         1010,  1061,  1007,  1040,  2595,  5149,  1027,  1015,  2005,  1996,
         7142,  2553,  1007,  1012,   102])"
3692,1,"['marginal', 'distributions', 'variates', 'marginal distributions']", Marginal Distributions,seg_685,definition 11.2 marginal distributions are distributions of individual variates.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 1., 1., 1., 0., 0.])","tensor([14785, 20611])","tensor([  101,  6210,  2340,  1012,  1016, 14785, 20611,  2024, 20611,  1997,
         3265, 13075, 13143,  2015,  1012,   102])"
3693,1,"['continuous', 'joint', 'summation', 'discrete', 'case']", Marginal Distributions,seg_685,marginal pdf’s can be obtained from joint pdf’s by summation (in discrete case) or integration (in continuous case) as follows:,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([14785, 20611])","tensor([  101, 14785, 11135,  1521,  1055,  2064,  2022,  4663,  2013,  4101,
        11135,  1521,  1055,  2011,  7680, 28649,  1006,  1999, 16246,  2553,
         1007,  2030,  8346,  1006,  1999,  7142,  2553,  1007,  2004,  4076,
         1024,   102])"
3694,1,"['continuous', 'discrete']", Marginal Distributions,seg_685,"f (x) = ∑ f (x, y) and f (y) = ∑ f (x, y) (discrete), (11.1) y=−∞ x=−∞ ∞ ∞ f (x) = f (x, y)dy and f (y) = f (x, y)dx (continuous), (11.2) ∫y=−∞ ∫x=−∞",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14785, 20611])","tensor([  101,  1042,  1006,  1060,  1007,  1027,   100,  1042,  1006,  1060,
         1010,  1061,  1007,  1998,  1042,  1006,  1061,  1007,  1027,   100,
         1042,  1006,  1060,  1010,  1061,  1007,  1006, 16246,  1007,  1010,
         1006,  2340,  1012,  1015,  1007,  1061,  1027,  1597, 30128,  1060,
         1027,  1597, 30128,  1601,  1601,  1042,  1006,  1060,  1007,  1027,
         1042,  1006,  1060,  1010,  1061,  1007,  1040,  2100,  1998,  1042,
         1006,  1061,  1007,  1027,  1042,  1006,  1060,  1010,  1061,  1007,
         1040,  2595,  1006,  7142,  1007,  1010,  1006,  2340,  1012,  1016,
         1007,   100,  1027,  1597, 30128,   100,  1027,  1597, 30128,   102])"
3695,1,"['range', 'variates', 'marginal', 'joint', 'variables', 'summation', 'independent']", Marginal Distributions,seg_685,where the summation or integration is carried out only throughout the range of proper variate. extension to more than two variates is straightforward. joint pdf is the product of constituent marginal pdfs when the variables are independent.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0.])","tensor([14785, 20611])","tensor([  101,  2073,  1996,  7680, 28649,  2030,  8346,  2003,  3344,  2041,
         2069,  2802,  1996,  2846,  1997,  5372, 13075, 13143,  1012,  5331,
         2000,  2062,  2084,  2048, 13075, 13143,  2015,  2003, 19647,  1012,
         4101, 11135,  2003,  1996,  4031,  1997, 13794, 14785, 11135,  2015,
         2043,  1996, 10857,  2024,  2981,  1012,   102])"
3696,1,['estimators'], Marginal Distributions,seg_685,"this has important applications in obtaining likelihoods, finding estimators, and so on.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([14785, 20611])","tensor([  101,  2023,  2038,  2590,  5097,  1999, 11381, 16593,  2015,  1010,
         4531,  9765,  9581,  6591,  1010,  1998,  2061,  2006,  1012,   102])"
3697,1,"['marginal distribution', 'marginal', 'distribution']", Marginal Distributions,seg_685,example 11.1 find marginal distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([14785, 20611])","tensor([  101,  2742,  2340,  1012,  1015,  2424, 14785,  4353,   102])"
3698,1,"['joint', 'marginal']", Marginal Distributions,seg_685,"if the joint pdf of x and y is given by f (x, y) = kx(1 + y), {x = 1, 2}, {y = 1, 2, 3} find the marginal pmf of x and y.",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([14785, 20611])","tensor([  101,  2065,  1996,  4101, 11135,  1997,  1060,  1998,  1061,  2003,
         2445,  2011,  1042,  1006,  1060,  1010,  1061,  1007,  1027,  1047,
         2595,  1006,  1015,  1009,  1061,  1007,  1010,  1063,  1060,  1027,
         1015,  1010,  1016,  1065,  1010,  1063,  1061,  1027,  1015,  1010,
         1016,  1010,  1017,  1065,  2424,  1996, 14785,  7610,  2546,  1997,
         1060,  1998,  1061,  1012,   102])"
3699,1,"['probability', 'discrete', 'total probability']", Marginal Distributions,seg_685,"solution 11.1 both x and y are discrete in this example. as the total probability is unity, we have k[2 + 3 + 4 + 4 + 6 + 8] = 1, giving k = 1∕27.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14785, 20611])","tensor([  101,  5576,  2340,  1012,  1015,  2119,  1060,  1998,  1061,  2024,
        16246,  1999,  2023,  2742,  1012,  2004,  1996,  2561,  9723,  2003,
         8499,  1010,  2057,  2031,  1047,  1031,  1016,  1009,  1017,  1009,
         1018,  1009,  1018,  1009,  1020,  1009,  1022,  1033,  1027,  1015,
         1010,  3228,  1047,  1027,   100,  1012,   102])"
3700,1,"['range', 'marginal', 'distribution', 'marginal distribution']", Marginal Distributions,seg_685,"to obtain the marginal distribution of x, we sum out y over its entire range. hence, f (x) = (x∕27)[9] = x∕3, {x = 1, 2}. similarly, f (y) = ((1 + y)∕27)[3] = (1 + y)∕9, {y = 1, 2, 3}.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([14785, 20611])","tensor([  101,  2000,  6855,  1996, 14785,  4353,  1997,  1060,  1010,  2057,
         7680,  2041,  1061,  2058,  2049,  2972,  2846,  1012,  6516,  1010,
         1042,  1006,  1060,  1007,  1027,  1006,   100,  1007,  1031,  1023,
         1033,  1027,   100,  1010,  1063,  1060,  1027,  1015,  1010,  1016,
         1065,  1012,  6660,  1010,  1042,  1006,  1061,  1007,  1027,  1006,
         1006,  1015,  1009,  1061,  1007,   100,  1007,  1031,  1017,  1033,
         1027,  1006,  1015,  1009,  1061,  1007,   100,  1010,  1063,  1061,
         1027,  1015,  1010,  1016,  1010,  1017,  1065,  1012,   102])"
3701,1,"['marginal distribution', 'marginal', 'distribution']", Marginal Distributions,seg_685,example 11.2 find marginal distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([14785, 20611])","tensor([  101,  2742,  2340,  1012,  1016,  2424, 14785,  4353,   102])"
3702,1,"['poisson', 'probability', 'interval']", Marginal Distributions,seg_685,a radioactive source is emitting -particles intermittently in different directions. the number of particles emitted in a fixed time interval is poisson( ). a particle recorder is placed at a point in direct line-of-sight. it has probability p of recording any particle coming toward it. find the pmf of the number of particles recorded.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([14785, 20611])","tensor([  101,  1037, 17669,  3120,  2003, 12495, 13027,  1011,  9309, 23852,
         2135,  1999,  2367,  7826,  1012,  1996,  2193,  1997,  9309, 22627,
         1999,  1037,  4964,  2051, 13483,  2003, 13433, 24077,  1006,  1007,
         1012,  1037, 10811, 14520,  2003,  2872,  2012,  1037,  2391,  1999,
         3622,  2240,  1011,  1997,  1011,  4356,  1012,  2009,  2038,  9723,
         1052,  1997,  3405,  2151, 10811,  2746,  2646,  2009,  1012,  2424,
         1996,  7610,  2546,  1997,  1996,  2193,  1997,  9309,  2680,  1012,
          102])"
3703,0,[], Marginal Distributions,seg_685,"solution 11.2 let x be the number of particles emitted and y be the number of particles recorded. then, we are given that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0])","tensor([14785, 20611])","tensor([  101,  5576,  2340,  1012,  1016,  2292,  1060,  2022,  1996,  2193,
         1997,  9309, 22627,  1998,  1061,  2022,  1996,  2193,  1997,  9309,
         2680,  1012,  2059,  1010,  2057,  2024,  2445,  2008,   102])"
3704,1,"['marginal distribution', 'independent', 'marginal', 'distribution']", Marginal Distributions,seg_685,"as these two sources are independent, f (x, y) is the product of the individual pdfs. from this the marginal distribution of y is obtained using equation (11.1) as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0.])","tensor([14785, 20611])","tensor([  101,  2004,  2122,  2048,  4216,  2024,  2981,  1010,  1042,  1006,
         1060,  1010,  1061,  1007,  2003,  1996,  4031,  1997,  1996,  3265,
        11135,  2015,  1012,  2013,  2023,  1996, 14785,  4353,  1997,  1061,
         2003,  4663,  2478,  8522,  1006,  2340,  1012,  1015,  1007,  2004,
          102])"
3705,1,"['joint distributions', 'probabilities', 'distributions', 'conditional probabilities', 'joint', 'variables', 'conditional']", Conditional Distributions,seg_687,conditional distributions are obtained from joint distributions by conditioning on one or more variables. conditional pdf’s can be expressed in terms of joint pdf’s using laws of conditional probabilities.,tensor(1),"tensor([0., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        1., 0., 0.])","tensor([18462, 20611])","tensor([  101, 18462, 20611,  2024,  4663,  2013,  4101, 20611,  2011, 14372,
         2006,  2028,  2030,  2062, 10857,  1012, 18462, 11135,  1521,  1055,
         2064,  2022,  5228,  1999,  3408,  1997,  4101, 11135,  1521,  1055,
         2478,  4277,  1997, 18462,  4013,  3676, 14680,  1012,   102])"
3706,1,"['distributions', 'levels', 'conditional', 'conditional distributions']", Conditional Distributions,seg_687,it is easy to see that multiple conditional distributions exist by conditioning y at different levels.,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0.,
        0.])","tensor([18462, 20611])","tensor([  101,  2009,  2003,  3733,  2000,  2156,  2008,  3674, 18462, 20611,
         4839,  2011, 14372,  1061,  2012,  2367,  3798,  1012,   102])"
3707,1,"['poisson', 'gamma', 'gamma distributed', 'parameter']", Conditional Distributions,seg_687,example 11.3 gamma distributed poisson parameter,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0.])","tensor([18462, 20611])","tensor([  101,  2742,  2340,  1012,  1017, 13091,  5500, 13433, 24077, 16381,
          102])"
3708,1,"['parameter', 'gamma', 'negative binomial', 'poisson', 'distribution', 'binomial']", Conditional Distributions,seg_687,"assume that the number of accidents follows a poisson law with parameter  . if   itself is distributed according to the gamma law, prove that the unconditional distribution is negative binomial distributed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1.,
        1., 0., 0., 0.])","tensor([18462, 20611])","tensor([  101,  7868,  2008,  1996,  2193,  1997, 13436,  4076,  1037, 13433,
        24077,  2375,  2007, 16381,  1012,  2065,  2993,  2003,  5500,  2429,
         2000,  1996, 13091,  2375,  1010,  6011,  2008,  1996,  4895,  8663,
        27064,  4353,  2003,  4997,  8026, 20936,  2389,  5500,  1012,   102])"
3709,1,"['gamma', 'independence', 'poisson', 'distribution', 'poisson distribution', 'joint']", Conditional Distributions,seg_687,"solution 11.3 let f (x,  ) represent the pdf of poisson distribution and f ( ,m, p) denote the gamma pmf. owing to independence, the joint distribution is the product of the marginals and the unconditional distribution of x is obtained by integrating out   as",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 20611])","tensor([  101,  5576,  2340,  1012,  1017,  2292,  1042,  1006,  1060,  1010,
         1007,  5050,  1996, 11135,  1997, 13433, 24077,  4353,  1998,  1042,
         1006,  1010,  1049,  1010,  1052,  1007, 19090,  1996, 13091,  7610,
         2546,  1012, 11427,  2000,  4336,  1010,  1996,  4101,  4353,  2003,
         1996,  4031,  1997,  1996, 14785,  2015,  1998,  1996,  4895,  8663,
        27064,  4353,  1997,  1060,  2003,  4663,  2011, 22380,  2041,  2004,
          102])"
3710,1,['independent'], Conditional Distributions,seg_687,take constants independent of   outside the integral to get,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 20611])","tensor([ 101, 2202, 5377, 2015, 2981, 1997, 2648, 1996, 9897, 2000, 2131,  102])"
3711,1,['gamma'], Conditional Distributions,seg_687,"the integral in equation (11.9) is easily seen to be the gamma integral, so that it becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([18462, 20611])","tensor([  101,  1996,  9897,  1999,  8522,  1006,  2340,  1012,  1023,  1007,
         2003,  4089,  2464,  2000,  2022,  1996, 13091,  9897,  1010,  2061,
         2008,  2009,  4150,   102])"
3712,1,"['negative binomial distribution', 'gamma', 'functions', 'negative binomial', 'distribution', 'binomial', 'binomial distribution']", Conditional Distributions,seg_687,where the last expression is obtained by writing (1 + m)x+p = (1 + m)x ∗ (1 + m)p and expanding the gamma functions as γ(x + p) = (x + p − 1)! and γ(p) = (p − 1)!. this is a negative binomial distribution with p = 1∕(1 + m).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 20611])","tensor([  101,  2073,  1996,  2197,  3670,  2003,  4663,  2011,  3015,  1006,
         1015,  1009,  1049,  1007,  1060,  1009,  1052,  1027,  1006,  1015,
         1009,  1049,  1007,  1060,  1598,  1006,  1015,  1009,  1049,  1007,
         1052,  1998,  9186,  1996, 13091,  4972,  2004,  1157,  1006,  1060,
         1009,  1052,  1007,  1027,  1006,  1060,  1009,  1052,  1597,  1015,
         1007,   999,  1998,  1157,  1006,  1052,  1007,  1027,  1006,  1052,
         1597,  1015,  1007,   999,  1012,  2023,  2003,  1037,  4997,  8026,
        20936,  2389,  4353,  2007,  1052,  1027,   100,  1006,  1015,  1009,
         1049,  1007,  1012,   102])"
3713,1,"['conditional distribution', 'distribution', 'conditional', 'trinomial']", Conditional Distributions,seg_687,example 11.4 find conditional distribution from trinomial,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 1., 1., 1., 0.])","tensor([18462, 20611])","tensor([  101,  2742,  2340,  1012,  1018,  2424, 18462,  4353,  2013, 13012,
         3630, 10092,  2140,   102])"
3714,1,"['jointly', 'trinomial']", Conditional Distributions,seg_687,let x and y be jointly distributed as trinomial with pmf,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.])","tensor([18462, 20611])","tensor([  101,  2292,  1060,  1998,  1061,  2022, 10776,  5500,  2004, 13012,
         3630, 10092,  2140,  2007,  7610,  2546,   102])"
3715,1,"['conditional', 'conditional distribution', 'distribution']", Conditional Distributions,seg_687,find the conditional distribution of (i) y|x = x and (ii) x|x + y = n. obtain e(y|x) and e(x|x + y = n).,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 20611])","tensor([  101,  2424,  1996, 18462,  4353,  1997,  1006,  1045,  1007,  1061,
         1064,  1060,  1027,  1060,  1998,  1006,  2462,  1007,  1060,  1064,
         1060,  1009,  1061,  1027,  1050,  1012,  6855,  1041,  1006,  1061,
         1064,  1060,  1007,  1998,  1041,  1006,  1060,  1064,  1060,  1009,
         1061,  1027,  1050,  1007,  1012,   102])"
3716,1,['marginal'], Conditional Distributions,seg_687,solution 11.4 we get the marginal pmf of y (resp x) by summing over x (resp y). multiply and divide the rhs by (n − y)! and sum over x to get,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18462, 20611])","tensor([  101,  5576,  2340,  1012,  1018,  2057,  2131,  1996, 14785,  7610,
         2546,  1997,  1061,  1006, 24501,  2361,  1060,  1007,  2011,  7680,
         6562,  2058,  1060,  1006, 24501,  2361,  1061,  1007,  1012,  4800,
        22086,  1998, 11443,  1996,  1054,  7898,  2011,  1006,  1050,  1597,
         1061,  1007,   999,  1998,  7680,  2058,  1060,  2000,  2131,   102])"
3717,1,"['summation', 'binomial']", Conditional Distributions,seg_687,"where p3 = 1 − p1 − p2. expression inside the summation is simply the successive terms of the binomial expansion of (p1 + p3)n−y. however, (p1 + p3) = p1 +",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([18462, 20611])","tensor([  101,  2073,  1052,  2509,  1027,  1015,  1597,  1052,  2487,  1597,
         1052,  2475,  1012,  3670,  2503,  1996,  7680, 28649,  2003,  3432,
         1996, 11165,  3408,  1997,  1996,  8026, 20936,  2389,  4935,  1997,
         1006,  1052,  2487,  1009,  1052,  2509,  1007,  1050, 22543,  2100,
         1012,  2174,  1010,  1006,  1052,  2487,  1009,  1052,  2509,  1007,
         1027,  1052,  2487,  1009,   102])"
3718,0,[], Conditional Distributions,seg_687,"which is bino(n, p2). similarly, x ∼ bino(n, p1). the pmf of y|x is",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462, 20611])","tensor([ 101, 2029, 2003, 8026, 2080, 1006, 1050, 1010, 1052, 2475, 1007, 1012,
        6660, 1010, 1060,  100, 8026, 2080, 1006, 1050, 1010, 1052, 2487, 1007,
        1012, 1996, 7610, 2546, 1997, 1061, 1064, 1060, 2003,  102])"
3719,0,[], Conditional Distributions,seg_687,"where y = 0, 1, …, n − x. this is the pmf of bino(n − x, p2∕(1 − p1)). hence, e(y|x) = (n − x)p2∕(1 − p1). (ii) x + y is clearly distributed as a bino(n, p1 + p2), so that",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18462, 20611])","tensor([ 101, 2073, 1061, 1027, 1014, 1010, 1015, 1010, 1529, 1010, 1050, 1597,
        1060, 1012, 2023, 2003, 1996, 7610, 2546, 1997, 8026, 2080, 1006, 1050,
        1597, 1060, 1010,  100, 1006, 1015, 1597, 1052, 2487, 1007, 1007, 1012,
        6516, 1010, 1041, 1006, 1061, 1064, 1060, 1007, 1027, 1006, 1050, 1597,
        1060, 1007,  100, 1006, 1015, 1597, 1052, 2487, 1007, 1012, 1006, 2462,
        1007, 1060, 1009, 1061, 2003, 4415, 5500, 2004, 1037, 8026, 2080, 1006,
        1050, 1010, 1052, 2487, 1009, 1052, 2475, 1007, 1010, 2061, 2008,  102])"
3720,0,[], Conditional Distributions,seg_687,"(p1 + p2)n as (p1 + p2)x(p1 + p2)n−x, the above reduces to a bino(n, p1∕(p1 + p2)). from this, we get e(x|x + y = n) = np1∕(p1 + p2).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0])","tensor([18462, 20611])","tensor([  101,  1006,  1052,  2487,  1009,  1052,  2475,  1007,  1050,  2004,
         1006,  1052,  2487,  1009,  1052,  2475,  1007,  1060,  1006,  1052,
         2487,  1009,  1052,  2475,  1007,  1050, 22543,  2595,  1010,  1996,
         2682, 13416,  2000,  1037,  8026,  2080,  1006,  1050,  1010,   100,
         1006,  1052,  2487,  1009,  1052,  2475,  1007,  1007,  1012,  2013,
         2023,  1010,  2057,  2131,  1041,  1006,  1060,  1064,  1060,  1009,
         1061,  1027,  1050,  1007,  1027,   100,  1006,  1052,  2487,  1009,
         1052,  2475,  1007,  1012,   102])"
3721,1,"['mean', 'determinant', 'jacobian', 'statistics', 'transformation']", JACOBIAN OF TRANSFORMATIONS,seg_689,"the jacobian is a useful concept in various fields of applied sciences, including vector calculus, differential equations, atmospheric sciences, astronomy, and statistics, to name a few. the jacobian determinant measures the stretching effect of a mapping or transformation as explained later. carl gustav jacobi (1804–1851), whose work originated in mathematical physics, invented it in 1841. it could mean either the jacobian matrix or its determinant (if the matrix is square).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 6213,  2937,  1997, 21865])","tensor([  101,  1996,  6213,  2937,  2003,  1037,  6179,  4145,  1999,  2536,
         4249,  1997,  4162,  4163,  1010,  2164,  9207, 19276,  1010, 11658,
        11380,  1010, 12483,  4163,  1010, 12799,  1010,  1998,  6747,  1010,
         2000,  2171,  1037,  2261,  1012,  1996,  6213,  2937, 28283, 22311,
         3372,  5761,  1996, 10917,  3466,  1997,  1037, 12375,  2030,  8651,
         2004,  4541,  2101,  1012,  5529, 13430,  6213,  2072,  1006, 13140,
         1516,  8792,  1007,  1010,  3005,  2147,  7940,  1999,  8045,  5584,
         1010,  8826,  2009,  1999,  9840,  1012,  2009,  2071,  2812,  2593,
         1996,  6213,  2937,  8185,  2030,  2049, 28283, 22311,  3372,  1006,
         2065,  1996,  8185,  2003,  2675,  1007,  1012,   102])"
3722,1,"['sensitivity', 'levels', 'jacobian', 'variables']", JACOBIAN OF TRANSFORMATIONS,seg_689,"the jacobian matrix could be rectangular when a mapping is induced from the euclidean space ℝn → ℝm, where m   n. this matrix contains the partial derivatives of the output variables with respect to the input variables in modeling problems that involve many input and output variables (which need not tally in number). in other words, the jacobian relates infinitesimal areas in the input space to infinitesimal areas in the output space of the same dimensionality (areas in 2d, volume elements in ≥ 3d). by analyzing the rows of the jacobian matrix, we can study the impact or sensitivity on output variables due to a selected subset of input variables (by keeping the other variables at fixed levels).",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 6213,  2937,  1997, 21865])","tensor([  101,  1996,  6213,  2937,  8185,  2071,  2022, 10806,  2043,  1037,
        12375,  2003, 10572,  2013,  1996, 25826,  2686,  1579,  2078,  1585,
         1579,  2213,  1010,  2073,  1049,  1050,  1012,  2023,  8185,  3397,
         1996,  7704, 16942,  1997,  1996,  6434, 10857,  2007,  4847,  2000,
         1996,  7953, 10857,  1999, 11643,  3471,  2008,  9125,  2116,  7953,
         1998,  6434, 10857,  1006,  2029,  2342,  2025, 19552,  1999,  2193,
         1007,  1012,  1999,  2060,  2616,  1010,  1996,  6213,  2937, 14623,
        10709,  5332,  9067,  2752,  1999,  1996,  7953,  2686,  2000, 10709,
         5332,  9067,  2752,  1999,  1996,  6434,  2686,  1997,  1996,  2168,
         8789,  3012,  1006,  2752,  1999, 14134,  1010,  3872,  3787,  1999,
         1609,  7605,  1007,  1012,  2011, 20253,  1996, 10281,  1997,  1996,
         6213,  2937,  8185,  1010,  2057,  2064,  2817,  1996,  4254,  2030,
        14639,  2006,  6434, 10857,  2349,  2000,  1037,  3479, 16745,  1997,
         7953, 10857,  1006,  2011,  4363,  1996,  2060, 10857,  2012,  4964,
         3798,  1007,  1012,   102])"
3723,1,"['determinant', 'functions', 'jacobian', 'transformations']", JACOBIAN OF TRANSFORMATIONS,seg_689,"as the determinant of a square matrix exists only if the matrix is of full-rank, there are some regularity conditions to be satisfied by the transformations. we assume that there are m real-valued functions y1 = f1(x1, x2, …, xn), y2 = f2(x1, x2, …, xn), …, ym = fm(x1, x2, …, xn). then the jacobian matrix comprises of all first-order partial derivatives of mapping functions:",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])","tensor([ 6213,  2937,  1997, 21865])","tensor([  101,  2004,  1996, 28283, 22311,  3372,  1997,  1037,  2675,  8185,
         6526,  2069,  2065,  1996,  8185,  2003,  1997,  2440,  1011,  4635,
         1010,  2045,  2024,  2070,  3180,  3012,  3785,  2000,  2022,  8510,
         2011,  1996, 21865,  1012,  2057,  7868,  2008,  2045,  2024,  1049,
         2613,  1011, 11126,  4972,  1061,  2487,  1027, 20069,  1006,  1060,
         2487,  1010,  1060,  2475,  1010,  1529,  1010,  1060,  2078,  1007,
         1010,  1061,  2475,  1027,  1042,  2475,  1006,  1060,  2487,  1010,
         1060,  2475,  1010,  1529,  1010,  1060,  2078,  1007,  1010,  1529,
         1010,  1061,  2213,  1027,  4718,  1006,  1060,  2487,  1010,  1060,
         2475,  1010,  1529,  1010,  1060,  2078,  1007,  1012,  2059,  1996,
         6213,  2937,  8185,  8681,  1997,  2035,  2034,  1011,  2344,  7704,
        16942,  1997, 12375,  4972,  1024,   102])"
3724,1,"['geometric', 'determinant', 'linear', 'transformation', 'transformed', 'statistical', 'variable']", JACOBIAN OF TRANSFORMATIONS,seg_689,"the (i,j)th entry of the above matrix affirms that a small change dxi in the original variate x should contract to ( yi∕ x)dxi in the transformed space. when m = n, the transformation is concisely expressed as the determinant of above matrix. the determinant of a square matrix |j| is the same as the determinant of its transpose matrix |j′|. this means that the variable order is unimportant in statistical applications. a geometric interpretation of jacobians is that it represents the best linear approximation to mapped domain at a general point using a tangent plane in the transformed",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 6213,  2937,  1997, 21865])","tensor([  101,  1996,  1006,  1045,  1010,  1046,  1007, 16215,  4443,  1997,
         1996,  2682,  8185, 21358, 27972,  2015,  2008,  1037,  2235,  2689,
         1040,  9048,  1999,  1996,  2434, 13075, 13143,  1060,  2323,  3206,
         2000,  1006,   100,  1060,  1007,  1040,  9048,  1999,  1996,  8590,
         2686,  1012,  2043,  1049,  1027,  1050,  1010,  1996,  8651,  2003,
         9530, 18380,  2135,  5228,  2004,  1996, 28283, 22311,  3372,  1997,
         2682,  8185,  1012,  1996, 28283, 22311,  3372,  1997,  1037,  2675,
         8185,  1064,  1046,  1064,  2003,  1996,  2168,  2004,  1996, 28283,
        22311,  3372,  1997,  2049,  9099, 20688,  8185,  1064,  1046,  1531,
         1064,  1012,  2023,  2965,  2008,  1996,  8023,  2344,  2003,  4895,
         5714,  6442,  4630,  1999,  7778,  5097,  1012,  1037, 14965,  7613,
         1997,  6213,  7066,  2003,  2008,  2009,  5836,  1996,  2190,  7399,
        20167,  2000, 17715,  5884,  2012,  1037,  2236,  2391,  2478,  1037,
        27250,  4946,  1999,  1996,  8590,   102])"
3725,1,"['function', 'transformed', 'factor', 'jacobian']", JACOBIAN OF TRANSFORMATIONS,seg_689,"space. thus, we get equivalent density contractions of space in transformed domain by multiplying the original function by the jacobian (which acts as a magnification or contraction factor). for example,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 6213,  2937,  1997, 21865])","tensor([  101,  2686,  1012,  2947,  1010,  2057,  2131,  5662,  4304, 21963,
         2015,  1997,  2686,  1999,  8590,  5884,  2011,  4800, 22086,  2075,
         1996,  2434,  3853,  2011,  1996,  6213,  2937,  1006,  2029,  4490,
         2004,  1037, 23848,  3490, 10803,  2030, 21963,  5387,  1007,  1012,
         2005,  2742,  1010,   102])"
3726,1,"['probability theory', 'absolute value', 'functions', 'table', 'cardinality', 'independent', 'continuous random variables', 'statistics', 'continuous', 'probability', 'random variables', 'jacobian', 'variates', 'transformation', 'determinant', 'set', 'random', 'distribution', 'variables']", JACOBIAN OF TRANSFORMATIONS,seg_689,"jacobian determinant is used to obtain the distribution of one-to-one (bijective) invertible functions of continuous random variables in statistics (the one-to-one condition can be relaxed in certain situations). derivation is considerably simplified when the original variates are either statistically independent, or are identically distributed. all such transformation functions should be at least once differentiable. we denote the jacobian determinant simply as |j| (instead of ‖j‖), where the vertical line has double meaning—it denotes the absolute value of the determinant (the double vertical bar | has various meanings in different fields—it denotes the absolute value of the argument in algebra, determinant in matrices, norm of a vector or a matrix in geometry, cardinality of a set or a set expression (such as a∩b) in set-theory and probability theory, and so on. in some of the discussions below, the |j| denotes only the determinant without absolute value. see example 11.8 (p. 431), table 11.1 (p. 425), etc).",tensor(1),"tensor([0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 6213,  2937,  1997, 21865])","tensor([  101,  6213,  2937, 28283, 22311,  3372,  2003,  2109,  2000,  6855,
         1996,  4353,  1997,  2028,  1011,  2000,  1011,  2028,  1006, 12170,
        20614,  3512,  1007,  1999, 16874,  7028,  4972,  1997,  7142,  6721,
        10857,  1999,  6747,  1006,  1996,  2028,  1011,  2000,  1011,  2028,
         4650,  2064,  2022,  8363,  1999,  3056,  8146,  1007,  1012, 29280,
         2003,  9839, 11038,  2043,  1996,  2434, 13075, 13143,  2015,  2024,
         2593,  7778,  2135,  2981,  1010,  2030,  2024,  7235,  2135,  5500,
         1012,  2035,  2107,  8651,  4972,  2323,  2022,  2012,  2560,  2320,
         2367, 19210,  1012,  2057, 19090,  1996,  6213,  2937, 28283, 22311,
         3372,  3432,  2004,  1064,  1046,  1064,  1006,  2612,  1997,  1519,
         1046,  1519,  1007,  1010,  2073,  1996,  7471,  2240,  2038,  3313,
         3574,  1517,  2009, 14796,  1996,  7619,  3643,  1997,  1996, 28283,
        22311,  3372,  1006,  1996,  3313,  7471,  3347,  1064,  2038,  2536,
        15383,  1999,  2367,  4249,  1517,  2009, 14796,  1996,  7619,  3643,
         1997,  1996,  6685,  1999, 11208,  1010, 28283, 22311,  3372,  1999,
        21520,  1010, 13373,  1997,  1037,  9207,  2030,  1037,  8185,  1999,
        10988,  1010,  7185,  3012,  1997,  1037,  2275,  2030,  1037,  2275,
         3670,  1006,  2107,  2004,  1037, 30131,  2497,  1007,  1999,  2275,
         1011,  3399,  1998,  9723,  3399,  1010,  1998,  2061,  2006,  1012,
         1999,  2070,  1997,  1996, 10287,  2917,  1010,  1996,  1064,  1046,
         1064, 14796,  2069,  1996, 28283, 22311,  3372,  2302,  7619,  3643,
         1012,  2156,  2742,  2340,  1012,  1022,  1006,  1052,  1012,  4724,
         2487,  1007,  1010,  2795,  2340,  1012,  1015,  1006,  1052,  1012,
        23285,  1007,  1010,  4385,  1007,  1012,   102])"
3727,1,"['table', 'functions', 'transformations', 'independent', 'function', 'jacobian', 'variates', 'set', 'random', 'distribution', 'variables', 'joint', 'variable']", Functions of Several Variables,seg_691,"distribution of a function of random variable(s) has many applications in engineering and applied sciences. these are easily obtained when the variates are independent. it is fairly easy to obtain the joint distribution of identically distributed variables using a correct set of transformations. in majority of problems of this type, we have to employ one of the transformations summarized in table 11.1. for functions of two variables, we have to choose a convenient auxiliary function such that the jacobian is nonzero, and auxiliary variable is easy to integrate out.",tensor(1),"tensor([0., 1., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4972,  1997,  2195, 10857])","tensor([  101,  4353,  1997,  1037,  3853,  1997,  6721,  8023,  1006,  1055,
         1007,  2038,  2116,  5097,  1999,  3330,  1998,  4162,  4163,  1012,
         2122,  2024,  4089,  4663,  2043,  1996, 13075, 13143,  2015,  2024,
         2981,  1012,  2009,  2003,  7199,  3733,  2000,  6855,  1996,  4101,
         4353,  1997,  7235,  2135,  5500, 10857,  2478,  1037,  6149,  2275,
         1997, 21865,  1012,  1999,  3484,  1997,  3471,  1997,  2023,  2828,
         1010,  2057,  2031,  2000, 12666,  2028,  1997,  1996, 21865, 22539,
         1999,  2795,  2340,  1012,  1015,  1012,  2005,  4972,  1997,  2048,
        10857,  1010,  2057,  2031,  2000,  5454,  1037, 14057,  9830,  3853,
         2107,  2008,  1996,  6213,  2937,  2003,  2512,  6290,  2080,  1010,
         1998,  9830,  8023,  2003,  3733,  2000, 17409,  2041,  1012,   102])"
3728,1,"['average', 'jacobian']", Functions of Several Variables,seg_691,"the 2d jacobian works on the principle that the average value of a double integral favg(x, y) = 1∕[(b − a) ∗ (d − c)] ∫a",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4972,  1997,  2195, 10857])","tensor([  101,  1996, 14134,  6213,  2937,  2573,  2006,  1996,  6958,  2008,
         1996,  2779,  3643,  1997,  1037,  3313,  9897,  6904,  2615,  2290,
         1006,  1060,  1010,  1061,  1007,  1027,   100,  1031,  1006,  1038,
         1597,  1037,  1007,  1598,  1006,  1040,  1597,  1039,  1007,  1033,
          100,   102])"
3729,1,"['limit', 'jacobian', 'transformation', 'case']", Functions of Several Variables,seg_691,"transformation u = h(x, y);   = g(x, y) as done in the univariate case. if the derivatives of h(x, y) and g(x, y) exist for each point in the rectangular region [a, b]x[c, d], then the above limit will be finite. this allows us to equate the width of an infinitesimal strip under the surface f (x, y) as f (x, y)dxdy =  (u,  )dud  for all points within the region. from this, we get  (u,  ) = f (x, y)|j| = |j|f (h−1(u,  ), g−1(u,  )), where j is the jacobian of the transformation. the only conditions in this transformation are that the mapping is once differentiable (i.e., h−1(u,  ), g−1(u,  )) exists), and it is invertible (x, y can be expressed in terms of u,  ).",tensor(1),"tensor([0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4972,  1997,  2195, 10857])","tensor([  101,  8651,  1057,  1027,  1044,  1006,  1060,  1010,  1061,  1007,
         1025,  1027,  1043,  1006,  1060,  1010,  1061,  1007,  2004,  2589,
         1999,  1996,  4895, 28739, 13143,  2553,  1012,  2065,  1996, 16942,
         1997,  1044,  1006,  1060,  1010,  1061,  1007,  1998,  1043,  1006,
         1060,  1010,  1061,  1007,  4839,  2005,  2169,  2391,  1999,  1996,
        10806,  2555,  1031,  1037,  1010,  1038,  1033,  1060,  1031,  1039,
         1010,  1040,  1033,  1010,  2059,  1996,  2682,  5787,  2097,  2022,
        10713,  1012,  2023,  4473,  2149,  2000,  1041, 16211,  2618,  1996,
         9381,  1997,  2019, 10709,  5332,  9067,  6167,  2104,  1996,  3302,
         1042,  1006,  1060,  1010,  1061,  1007,  2004,  1042,  1006,  1060,
         1010,  1061,  1007,  1040,  2595,  5149,  1027,  1006,  1057,  1010,
         1007,  4241,  2094,  2005,  2035,  2685,  2306,  1996,  2555,  1012,
         2013,  2023,  1010,  2057,  2131,  1006,  1057,  1010,  1007,  1027,
         1042,  1006,  1060,  1010,  1061,  1007,  1064,  1046,  1064,  1027,
         1064,  1046,  1064,  1042,  1006,  1044, 27944,  1006,  1057,  1010,
         1007,  1010,  1043, 27944,  1006,  1057,  1010,  1007,  1007,  1010,
         2073,  1046,  2003,  1996,  6213,  2937,  1997,  1996,  8651,  1012,
         1996,  2069,  3785,  1999,  2023,  8651,  2024,  2008,  1996, 12375,
         2003,  2320,  2367, 19210,  1006,  1045,  1012,  1041,  1012,  1010,
         1044, 27944,  1006,  1057,  1010,  1007,  1010,  1043, 27944,  1006,
         1057,  1010,  1007,  1007,  6526,  1007,  1010,  1998,  2009,  2003,
         1999, 16874,  7028,  1006,  1060,  1010,  1061,  2064,  2022,  5228,
         1999,  3408,  1997,  1057,  1010,  1007,  1012,   102])"
3730,1,"['functions', 'bivariate', 'jointly', 'transformations', 'transformation']", Arbitrary Transformations,seg_693,"the above transformation can be applied to arbitrary continuously differentiable, and invertible functions in higher dimensions (as bivariate, trivariate, and multivariate transformations). let x, y be jointly distributed according to some pdf f (x, y). consider arbitrary continuously differentiable, and invertible functions of the form",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([15275, 21865])","tensor([  101,  1996,  2682,  8651,  2064,  2022,  4162,  2000, 15275, 10843,
         2367, 19210,  1010,  1998,  1999, 16874,  7028,  4972,  1999,  3020,
         9646,  1006,  2004, 12170, 10755, 13143,  1010, 13012, 10755, 13143,
         1010,  1998,  4800, 10755, 13143, 21865,  1007,  1012,  2292,  1060,
         1010,  1061,  2022, 10776,  5500,  2429,  2000,  2070, 11135,  1042,
         1006,  1060,  1010,  1061,  1007,  1012,  5136, 15275, 10843,  2367,
        19210,  1010,  1998,  1999, 16874,  7028,  4972,  1997,  1996,  2433,
          102])"
3731,1,"['function', 'transformation', 'variables']", Arbitrary Transformations,seg_693,"here, either u or v is the required transformation, and the other is called the auxiliary function. the choice of the auxiliary function is quite often arbitrary. it can be as simple as one of the original variables, provided that the inverse transformation is easy to find. it can be polar or trigonometric transformation when expressions such",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([15275, 21865])","tensor([  101,  2182,  1010,  2593,  1057,  2030,  1058,  2003,  1996,  3223,
         8651,  1010,  1998,  1996,  2060,  2003,  2170,  1996,  9830,  3853,
         1012,  1996,  3601,  1997,  1996,  9830,  3853,  2003,  3243,  2411,
        15275,  1012,  2009,  2064,  2022,  2004,  3722,  2004,  2028,  1997,
         1996,  2434, 10857,  1010,  3024,  2008,  1996, 19262,  8651,  2003,
         3733,  2000,  2424,  1012,  2009,  2064,  2022, 11508,  2030, 13012,
         7446, 28993,  8651,  2043, 11423,  2107,   102])"
3732,1,"['linear', 'bivariate', 'linear transformation', 'transformation', 'case']", Arbitrary Transformations,seg_693,"2 or x2 ± y2 are present. bivariate linear transformation is a special case of the above in which the dependency is u = c1x + c2y and   = c3x + c4y, where c′",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([15275, 21865])","tensor([  101,  1016,  2030,  1060,  2475,  1081,  1061,  2475,  2024,  2556,
         1012, 12170, 10755, 13143,  7399,  8651,  2003,  1037,  2569,  2553,
         1997,  1996,  2682,  1999,  2029,  1996, 24394,  2003,  1057,  1027,
        27723,  2595,  1009, 29248,  2100,  1998,  1027,  1039,  2509,  2595,
         1009,  1039,  2549,  2100,  1010,  2073,  1039,  1531,   102])"
3733,1,"['jacobian', 'transformation']", Arbitrary Transformations,seg_693,i s are arbitrary constants. the jacobian of the transformation considerably simplifies in,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0.,
        0., 0.])","tensor([15275, 21865])","tensor([  101,  1045,  1055,  2024, 15275,  5377,  2015,  1012,  1996,  6213,
         2937,  1997,  1996,  8651,  9839, 21934, 24759, 14144,  1999,   102])"
3734,1,['case'], Arbitrary Transformations,seg_693,"this case as  (x, y)",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([15275, 21865])","tensor([ 101, 2023, 2553, 2004, 1006, 1060, 1010, 1061, 1007,  102])"
3735,1,"['range', 'transformed', 'bivariate', 'transformations', 'case']", Arbitrary Transformations,seg_693,"a challenge in this type of transformations is the range mapping (see figure 11.4). we could visualize the transformed mapping easily in the bivariate case, but it is not easy in higher dimensions.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([15275, 21865])","tensor([  101,  1037,  4119,  1999,  2023,  2828,  1997, 21865,  2003,  1996,
         2846, 12375,  1006,  2156,  3275,  2340,  1012,  1018,  1007,  1012,
         2057,  2071,  5107,  4697,  1996,  8590, 12375,  4089,  1999,  1996,
        12170, 10755, 13143,  2553,  1010,  2021,  2009,  2003,  2025,  3733,
         1999,  3020,  9646,  1012,   102])"
3736,1,"['cases', 'function', 'determinant', 'transformation', 'table', 'method', 'jacobian', 'independent', 'variables', 'variable', 'case']", Arbitrary Transformations,seg_693,"finding the determinant of a transformation involves much work in some cases. this can be reduced by the do-little method. consider the transformation u = g(x, y) and = h(x, y). if = y (or analogously u = x), we can reduce the work as follows. simply substitute for y = in u to get u = g(x, ). next, find the derivative u∕ x = g(x, )∕ x. substitute for any x and take the reciprocal to get the jacobian. alternatively, express x = g(u, ) and find j = x∕ u = g(u, )∕ u. as examples, consider the transformation u = x + y, = y. put y = to get u = x + , and 1∕j = u∕ x = 1; as v is constant. alternatively, solve for x to get x = u − y = u − . then, j = x∕ u = ( ∕ u)(u − ) = 1. similarly, if u = xy, = y, then x = u∕ , and j = x∕ u = 1∕ ; and for u = x∕y, = y we have x = uv and j = x∕ u = . as another example, if u = x∕(x + y) and = y, x = uv∕(1 − u), and j = x∕ u = ∕(1 − u)2. this works even for constant multiples. if u = kx∕y, = y; we have x = uv∕k and j = ∕k. this idea can be extended to those cases where one of the input variables is a function of just one output variable in the two variables case. consider x = u2 − 2 and y = 2 (independent of u) so that j = 2u∗2 = 4u (see table 11.1).",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0., 0.,
        1., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([15275, 21865])","tensor([  101,  4531,  1996, 28283, 22311,  3372,  1997,  1037,  8651,  7336,
         2172,  2147,  1999,  2070,  3572,  1012,  2023,  2064,  2022,  4359,
         2011,  1996,  2079,  1011,  2210,  4118,  1012,  5136,  1996,  8651,
         1057,  1027,  1043,  1006,  1060,  1010,  1061,  1007,  1998,  1027,
         1044,  1006,  1060,  1010,  1061,  1007,  1012,  2065,  1027,  1061,
         1006,  2030, 19639,  2135,  1057,  1027,  1060,  1007,  1010,  2057,
         2064,  5547,  1996,  2147,  2004,  4076,  1012,  3432,  7681,  2005,
         1061,  1027,  1999,  1057,  2000,  2131,  1057,  1027,  1043,  1006,
         1060,  1010,  1007,  1012,  2279,  1010,  2424,  1996, 13819,   100,
         1060,  1027,  1043,  1006,  1060,  1010,  1007,   100,  1060,  1012,
         7681,  2005,  2151,  1060,  1998,  2202,  1996, 28309,  2000,  2131,
         1996,  6213,  2937,  1012, 14084,  1010,  4671,  1060,  1027,  1043,
         1006,  1057,  1010,  1007,  1998,  2424,  1046,  1027,   100,  1057,
         1027,  1043,  1006,  1057,  1010,  1007,   100,  1057,  1012,  2004,
         4973,  1010,  5136,  1996,  8651,  1057,  1027,  1060,  1009,  1061,
         1010,  1027,  1061,  1012,  2404,  1061,  1027,  2000,  2131,  1057,
         1027,  1060,  1009,  1010,  1998,   100,  1027,   100,  1060,  1027,
         1015,  1025,  2004,  1058,  2003,  5377,  1012, 14084,  1010,  9611,
         2005,  1060,  2000,  2131,  1060,  1027,  1057,  1597,  1061,  1027,
         1057,  1597,  1012,  2059,  1010,  1046,  1027,   100,  1057,  1027,
         1006,   100,  1057,  1007,  1006,  1057,  1597,  1007,  1027,  1015,
         1012,  6660,  1010,  2065,  1057,  1027,  1060,  2100,  1010,  1027,
         1061,  1010,  2059,  1060,  1027,   100,  1010,  1998,  1046,  1027,
          100,  1057,  1027,   100,  1025,  1998,  2005,  1057,  1027,   100,
         1010,  1027,  1061,  2057,  2031,  1060,  1027, 23068,  1998,  1046,
         1027,   100,  1057,  1027,  1012,  2004,  2178,  2742,  1010,  2065,
         1057,  1027,   100,  1006,  1060,  1009,  1061,  1007,  1998,  1027,
         1061,  1010,  1060,  1027,   100,  1006,  1015,  1597,  1057,  1007,
         1010,  1998,  1046,  1027,   100,  1057,  1027,   100,  1006,  1015,
         1597,  1057,  1007,  1016,  1012,  2023,  2573,  2130,  2005,  5377,
         3674,  2015,  1012,  2065,  1057,  1027,   100,  1010,  1027,  1061,
         1025,  2057,  2031,  1060,  1027,   100,  1998,  1046,  1027,   100,
         1012,  2023,  2801,  2064,  2022,  3668,  2000,  2216,  3572,  2073,
         2028,  1997,  1996,  7953, 10857,  2003,  1037,  3853,  1997,  2074,
         2028,  6434,  8023,  1999,  1996,  2048, 10857,  2553,  1012,  5136,
         1060,  1027, 23343,  1597,  1016,  1998,  1061,  1027,  1016,  1006,
         2981,  1997,  1057,  1007,  2061,  2008,  1046,  1027,  1016,  2226,
        30125,  2475,  1027,  1018,  2226,  1006,  2156,  2795,  2340,  1012,
         1015,  1007,  1012,   102])"
3737,1,"['variates', 'distribution']", Arbitrary Transformations,seg_693,example 11.5 distribution of sum of rectangular variates,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([15275, 21865])","tensor([  101,  2742,  2340,  1012,  1019,  4353,  1997,  7680,  1997, 10806,
        13075, 13143,  2015,   102])"
3738,1,"['independent', 'distribution']", Arbitrary Transformations,seg_693,"an electronic circuit consists of two independent identical transistors connected in parallel. let x and y be the lifetimes of them, distributed as cuni(0, b) with pdf f (x) = 1∕b, 0   x   b. find the distribution of (i) z = x + y (ii) u = xy .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([15275, 21865])","tensor([  101,  2019,  4816,  4984,  3774,  1997,  2048,  2981,  7235,  9099,
        20483,  2869,  4198,  1999,  5903,  1012,  2292,  1060,  1998,  1061,
         2022,  1996,  6480,  2015,  1997,  2068,  1010,  5500,  2004, 12731,
         3490,  1006,  1014,  1010,  1038,  1007,  2007, 11135,  1042,  1006,
         1060,  1007,  1027,   100,  1010,  1014,  1060,  1038,  1012,  2424,
         1996,  4353,  1997,  1006,  1045,  1007,  1062,  1027,  1060,  1009,
         1061,  1006,  2462,  1007,  1057,  1027,  1060,  2100,  1012,   102])"
3739,1,"['absolute value', 'jacobian', 'transformation']", Arbitrary Transformations,seg_693,"solution 11.5 consider the transformation z = x + y ,w = y . the inverse transformation is y = w,x = z − w. the absolute value of the jacobian is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 1., 1., 0., 0.])","tensor([15275, 21865])","tensor([  101,  5576,  2340,  1012,  1019,  5136,  1996,  8651,  1062,  1027,
         1060,  1009,  1061,  1010,  1059,  1027,  1061,  1012,  1996, 19262,
         8651,  2003,  1061,  1027,  1059,  1010,  1060,  1027,  1062,  1597,
         1059,  1012,  1996,  7619,  3643,  1997,  1996,  6213,  2937,  2003,
          102])"
3740,1,"['determinant', 'range', 'absolute value', 'results', 'condition', 'joint']", Arbitrary Transformations,seg_693,"(here the first vertical bar denotes determinant and second one denotes absolute value). as x and y are iid, the joint pdf is f (x, y) = 1∕b2. the joint pdf of w and z is f ( , z) = 1∕b2|j| = 1∕b2. the range for z is [0, + 2b], and for w is [0, b]. as 0   x   b, we need to impose the condition 0   z −    b. this in turn results in two regions of integration as shown in figure 11.1. for 0   z   b, w varies between 0 and z so that f (z) = ∫ f ( , z)dw = ∫ ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([15275, 21865])","tensor([  101,  1006,  2182,  1996,  2034,  7471,  3347, 14796, 28283, 22311,
         3372,  1998,  2117,  2028, 14796,  7619,  3643,  1007,  1012,  2004,
         1060,  1998,  1061,  2024,  2462,  2094,  1010,  1996,  4101, 11135,
         2003,  1042,  1006,  1060,  1010,  1061,  1007,  1027,   100,  1012,
         1996,  4101, 11135,  1997,  1059,  1998,  1062,  2003,  1042,  1006,
         1010,  1062,  1007,  1027,   100,  1064,  1046,  1064,  1027,   100,
         1012,  1996,  2846,  2005,  1062,  2003,  1031,  1014,  1010,  1009,
         1016,  2497,  1033,  1010,  1998,  2005,  1059,  2003,  1031,  1014,
         1010,  1038,  1033,  1012,  2004,  1014,  1060,  1038,  1010,  2057,
         2342,  2000, 17607,  1996,  4650,  1014,  1062,  1597,  1038,  1012,
         2023,  1999,  2735,  3463,  1999,  2048,  4655,  1997,  8346,  2004,
         3491,  1999,  3275,  2340,  1012,  1015,  1012,  2005,  1014,  1062,
         1038,  1010,  1059,  9783,  2090,  1014,  1998,  1062,  2061,  2008,
         1042,  1006,  1062,  1007,  1027,   100,  1042,  1006,  1010,  1062,
         1007,  1040,  2860,  1027,   100,   102])"
3741,1,"['cases', 'range', 'condition', 'joint', 'case']", Arbitrary Transformations,seg_693,"b =z−b dw∕b2 = (2b − z)∕b2. combining both the cases, we can write the pdf as f (z) = (b − |b − z|)∕b2 for 0   z   2b, because when z   b, |b − z| = b − z; and for z ≥ b, |b − z| = z − b. in the second case, we put u = xy and v = y so that x = u∕v , and j = 1∕ . the range for u is [0, b2], and for v is [0, b]. as 0   x   b, we need to impose the condition 0   u∕v   b, or equivalently u   bv. the region of integration is shown in figure 11.2. the joint pdf of u and v is f (u,  ) = 1∕( b2), 0   u   bv   b2. the pdf of u is obtained as f (u) = ∫u",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([15275, 21865])","tensor([  101,  1038,  1027,  1062, 22543,  2497,   100,  1027,  1006,  1016,
         2497,  1597,  1062,  1007,   100,  1012, 11566,  2119,  1996,  3572,
         1010,  2057,  2064,  4339,  1996, 11135,  2004,  1042,  1006,  1062,
         1007,  1027,  1006,  1038,  1597,  1064,  1038,  1597,  1062,  1064,
         1007,   100,  2005,  1014,  1062,  1016,  2497,  1010,  2138,  2043,
         1062,  1038,  1010,  1064,  1038,  1597,  1062,  1064,  1027,  1038,
         1597,  1062,  1025,  1998,  2005,  1062,  1609,  1038,  1010,  1064,
         1038,  1597,  1062,  1064,  1027,  1062,  1597,  1038,  1012,  1999,
         1996,  2117,  2553,  1010,  2057,  2404,  1057,  1027,  1060,  2100,
         1998,  1058,  1027,  1061,  2061,  2008,  1060,  1027,   100,  1010,
         1998,  1046,  1027,   100,  1012,  1996,  2846,  2005,  1057,  2003,
         1031,  1014,  1010,  1038,  2475,  1033,  1010,  1998,  2005,  1058,
         2003,  1031,  1014,  1010,  1038,  1033,  1012,  2004,  1014,  1060,
         1038,  1010,  2057,  2342,  2000, 17607,  1996,  4650,  1014,   100,
         1038,  1010,  2030,  5662,  2135,  1057,  1038,  2615,  1012,  1996,
         2555,  1997,  8346,  2003,  3491,  1999,  3275,  2340,  1012,  1016,
         1012,  1996,  4101, 11135,  1997,  1057,  1998,  1058,  2003,  1042,
         1006,  1057,  1010,  1007,  1027,   100,  1006,  1038,  2475,  1007,
         1010,  1014,  1057,  1038,  2615,  1038,  2475,  1012,  1996, 11135,
         1997,  1057,  2003,  4663,  2004,  1042,  1006,  1057,  1007,  1027,
          100,   102])"
3742,1,['jacobian'], Image Jacobian Matrices,seg_695,"image jacobian matrices used in robotics, unmanned aerial vehicles (uavs), image and video compression, medical imaging, and so on are often rectangular. in image",tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  3746,  6213,  2937, 21520,  2109,  1999, 21331,  1010, 24075,
         9682,  4683,  1006, 25423, 15088,  1007,  1010,  3746,  1998,  2678,
        13379,  1010,  2966, 12126,  1010,  1998,  2061,  2006,  2024,  2411,
        10806,  1012,  1999,  3746,   102])"
3743,1,"['loss', 'residual', 'residual distortions', 'jacobian', 'case']", Image Jacobian Matrices,seg_695,"compression and video processing applications, we look for an unknown displacement vector (or matrix) to minimize two successive time frames (or subframes of appropriate sizes) so as to align successive images with minimal loss of information. sparse residual distortions indicate almost still image frames. in this case, the jacobian matrix becomes",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101, 13379,  1998,  2678,  6364,  5097,  1010,  2057,  2298,  2005,
         2019,  4242, 13508,  9207,  1006,  2030,  8185,  1007,  2000, 18478,
         2048, 11165,  2051, 11048,  1006,  2030,  4942, 15643,  2015,  1997,
         6413, 10826,  1007,  2061,  2004,  2000, 25705, 11165,  4871,  2007,
        10124,  3279,  1997,  2592,  1012, 20288, 21961, 20870,  2015,  5769,
         2471,  2145,  3746, 11048,  1012,  1999,  2023,  2553,  1010,  1996,
         6213,  2937,  8185,  4150,   102])"
3744,1,['determinant'], Image Jacobian Matrices,seg_695,"with the determinant sign (when the matrix is square, i.e., m = n) indicating volumetric expansion (|j| 1), shrinkage (|j| 1), or steadiness (|j| = 1).",tensor(1),"tensor([0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  2007,  1996, 28283, 22311,  3372,  3696,  1006,  2043,  1996,
         8185,  2003,  2675,  1010,  1045,  1012,  1041,  1012,  1010,  1049,
         1027,  1050,  1007,  8131,  3872, 12412,  4935,  1006,  1064,  1046,
         1064,  1015,  1007,  1010, 22802,  4270,  1006,  1064,  1046,  1064,
         1015,  1007,  1010,  2030, 26261, 17190,  2791,  1006,  1064,  1046,
         1064,  1027,  1015,  1007,  1012,   102])"
3745,1,"['table', 'absolute value', 'functions', 'transformed', 'method', 'transformations', 'statistics', 'adjusted', 'statistical', 'function', 'linear', 'jacobian', 'interactions', 'variates', 'transformation', 'range', 'determinant', 'linear transformations', 'variables', 'variable']", Image Jacobian Matrices,seg_695,"the jacobian determinant is a function of the variates (or a constant) when applied to variate transformations in statistics (table 11.1). this means that the determinant can be made nonzero almost always. as the first derivative of linear functions is a constant, |j| is a scalar constant for linear transformations (if y = ax, then |j| = |a| for multivariate transformation). the range of the transformed variates should be adjusted to account for this fact. as the jacobian determinant is used as a multiplier, we take the absolute value of jacobian in statistical applications (the sign of a determinant depends on the order of the columns (variables) in the corresponding matrix). we can do better without the jacobian method for simple transformation of variates such as translations (u = x + c, = y + d), and scaling (u = c ∗ x, = d ∗ y) (using the cdf or mgf methods). the power of the jacobian method becomes apparent when variable interactions are present. see references 137, 293 and 296 for further examples.",tensor(1),"tensor([0., 0., 1., 1., 1., 1., 1., 0., 0., 1., 0., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 1., 0., 1., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  1996,  6213,  2937, 28283, 22311,  3372,  2003,  1037,  3853,
         1997,  1996, 13075, 13143,  2015,  1006,  2030,  1037,  5377,  1007,
         2043,  4162,  2000, 13075, 13143, 21865,  1999,  6747,  1006,  2795,
         2340,  1012,  1015,  1007,  1012,  2023,  2965,  2008,  1996, 28283,
        22311,  3372,  2064,  2022,  2081,  2512,  6290,  2080,  2471,  2467,
         1012,  2004,  1996,  2034, 13819,  1997,  7399,  4972,  2003,  1037,
         5377,  1010,  1064,  1046,  1064,  2003,  1037, 26743,  2099,  5377,
         2005,  7399, 21865,  1006,  2065,  1061,  1027, 22260,  1010,  2059,
         1064,  1046,  1064,  1027,  1064,  1037,  1064,  2005,  4800, 10755,
        13143,  8651,  1007,  1012,  1996,  2846,  1997,  1996,  8590, 13075,
        13143,  2015,  2323,  2022, 10426,  2000,  4070,  2005,  2023,  2755,
         1012,  2004,  1996,  6213,  2937, 28283, 22311,  3372,  2003,  2109,
         2004,  1037,  4800, 24759,  3771,  1010,  2057,  2202,  1996,  7619,
         3643,  1997,  6213,  2937,  1999,  7778,  5097,  1006,  1996,  3696,
         1997,  1037, 28283, 22311,  3372,  9041,  2006,  1996,  2344,  1997,
         1996,  7753,  1006, 10857,  1007,  1999,  1996,  7978,  8185,  1007,
         1012,  2057,  2064,  2079,  2488,  2302,  1996,  6213,  2937,  4118,
         2005,  3722,  8651,  1997, 13075, 13143,  2015,  2107,  2004, 11913,
         1006,  1057,  1027,  1060,  1009,  1039,  1010,  1027,  1061,  1009,
         1040,  1007,  1010,  1998, 25169,  1006,  1057,  1027,  1039,  1598,
         1060,  1010,  1027,  1040,  1598,  1061,  1007,  1006,  2478,  1996,
         3729,  2546,  2030, 11460,  2546,  4725,  1007,  1012,  1996,  2373,
         1997,  1996,  6213,  2937,  4118,  4150,  6835,  2043,  8023, 10266,
         2024,  2556,  1012,  2156,  7604, 14989,  1010, 26953,  1998, 27200,
         2005,  2582,  4973,  1012,   102])"
3746,1,"['functions', 'exponential distribution', 'distribution', 'exponential']", Image Jacobian Matrices,seg_695,example 11.6 functions of exponential distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  2742,  2340,  1012,  1020,  4972,  1997, 27258,  4353,   102])"
3747,1,"['variates', 'joint', 'distribution']", Image Jacobian Matrices,seg_695,"1 let xi’s be iid exp( ) with pdf f (xi) =  e−xi∕ . define new variates yi’s as y1 = x1∕(x1 + x2 + · · · + xn),y2 = (x1 + x2)∕(x1 + x2 + · · · + xn), etc yk = (x1 + x2 + · · · + xk)∕(x1 + x2 + · · · + xn), and yn = (x1 + x2 + · · · + xn). prove that the joint distribution of (y1,y2, …,yn) depends on yn and yn−1 only.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  1015,  2292,  8418,  1521,  1055,  2022,  2462,  2094,  4654,
         2361,  1006,  1007,  2007, 11135,  1042,  1006,  8418,  1007,  1027,
          100,  1012,  9375,  2047, 13075, 13143,  2015, 12316,  1521,  1055,
         2004,  1061,  2487,  1027,   100,  1006,  1060,  2487,  1009,  1060,
         2475,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  1007,  1010,
         1061,  2475,  1027,  1006,  1060,  2487,  1009,  1060,  2475,  1007,
          100,  1006,  1060,  2487,  1009,  1060,  2475,  1009,  1087,  1087,
         1087,  1009,  1060,  2078,  1007,  1010,  4385,  1061,  2243,  1027,
         1006,  1060,  2487,  1009,  1060,  2475,  1009,  1087,  1087,  1087,
         1009,  1060,  2243,  1007,   100,  1006,  1060,  2487,  1009,  1060,
         2475,  1009,  1087,  1087,  1087,  1009,  1060,  2078,  1007,  1010,
         1998,  1061,  2078,  1027,  1006,  1060,  2487,  1009,  1060,  2475,
         1009,  1087,  1087,  1087,  1009,  1060,  2078,  1007,  1012,  6011,
         2008,  1996,  4101,  4353,  1997,  1006,  1061,  2487,  1010,  1061,
         2475,  1010,  1529,  1010,  1061,  2078,  1007,  9041,  2006,  1061,
         2078,  1998,  1061,  2078, 27944,  2069,  1012,   102])"
3748,1,['joint'], Image Jacobian Matrices,seg_695,"solution 11.6 as xi’s are iid, the joint pdf is the product of individual pdfs. 1 thus f (x1, x2, …, xn) =  n e−∑i",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  5576,  2340,  1012,  1020,  2004,  8418,  1521,  1055,  2024,
         2462,  2094,  1010,  1996,  4101, 11135,  2003,  1996,  4031,  1997,
         3265, 11135,  2015,  1012,  1015,  2947,  1042,  1006,  1060,  2487,
         1010,  1060,  2475,  1010,  1529,  1010,  1060,  2078,  1007,  1027,
         1050,   100,   102])"
3749,1,['jacobian'], Image Jacobian Matrices,seg_695,"n =1 xi∕ . the inverse mapping is x1 = y1yn, x2 = yn(y2 − y1) , x3 = yn(y3 − y2), xk = yn(yk − yk−1) …, xn = yn(1 − yn−1). the jacobian is || (x1, x2, …, xn) || |j| = | | | (y1, y2, …, yn) |",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  1050,  1027,  1015,   100,  1012,  1996, 19262, 12375,  2003,
         1060,  2487,  1027,  1061,  2487,  6038,  1010,  1060,  2475,  1027,
         1061,  2078,  1006,  1061,  2475,  1597,  1061,  2487,  1007,  1010,
         1060,  2509,  1027,  1061,  2078,  1006,  1061,  2509,  1597,  1061,
         2475,  1007,  1010,  1060,  2243,  1027,  1061,  2078,  1006,  1061,
         2243,  1597,  1061,  2243, 27944,  1007,  1529,  1010,  1060,  2078,
         1027,  1061,  2078,  1006,  1015,  1597,  1061,  2078, 27944,  1007,
         1012,  1996,  6213,  2937,  2003,  1064,  1064,  1006,  1060,  2487,
         1010,  1060,  2475,  1010,  1529,  1010,  1060,  2078,  1007,  1064,
         1064,  1064,  1046,  1064,  1027,  1064,  1064,  1064,  1006,  1061,
         2487,  1010,  1061,  2475,  1010,  1529,  1010,  1061,  2078,  1007,
         1064,   102])"
3750,1,"['transformations', 'determinant']", Image Jacobian Matrices,seg_695,"to evaluate this determinant, we apply the row transformations r′ 2 = r2 + r1, r′ 3 = r3 + r′",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  2000, 16157,  2023, 28283, 22311,  3372,  1010,  2057,  6611,
         1996,  5216, 21865,  1054,  1531,  1016,  1027,  1054,  2475,  1009,
         1054,  2487,  1010,  1054,  1531,  1017,  1027,  1054,  2509,  1009,
         1054,  1531,   102])"
3751,1,['determinant'], Image Jacobian Matrices,seg_695,"by expanding this determinant along the first column, we get |j| = ynn(1 − yn−1). 1 thus, f (y1, y2, …, yn) =  n e−yn∕ ynn(1 − yn−1).",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  2011,  9186,  2023, 28283, 22311,  3372,  2247,  1996,  2034,
         5930,  1010,  2057,  2131,  1064,  1046,  1064,  1027,  1061, 10695,
         1006,  1015,  1597,  1061,  2078, 27944,  1007,  1012,  1015,  2947,
         1010,  1042,  1006,  1061,  2487,  1010,  1061,  2475,  1010,  1529,
         1010,  1061,  2078,  1007,  1027,  1050,   100,  1061, 10695,  1006,
         1015,  1597,  1061,  2078, 27944,  1007,  1012,   102])"
3752,1,"['transformation', 'discrete', 'functions', 'discrete random variables', 'random', 'bivariate', 'random variables', 'variables', 'joint']", Image Jacobian Matrices,seg_695,"this technique is applicable to discrete random variables as well. let u = g(x, y) and   = h(x, y) be the bivariate mapping as before. find the inverse transformation (express x and y as functions of u and v, say x = f1(u,  ) and y = f2(u,  ). then the joint pmf of u and   is puv (u,  ) = pxy (f1(u,  ), f2(u,  )).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 3746,  6213,  2937, 21520])","tensor([  101,  2023,  6028,  2003, 12711,  2000, 16246,  6721, 10857,  2004,
         2092,  1012,  2292,  1057,  1027,  1043,  1006,  1060,  1010,  1061,
         1007,  1998,  1027,  1044,  1006,  1060,  1010,  1061,  1007,  2022,
         1996, 12170, 10755, 13143, 12375,  2004,  2077,  1012,  2424,  1996,
        19262,  8651,  1006,  4671,  1060,  1998,  1061,  2004,  4972,  1997,
         1057,  1998,  1058,  1010,  2360,  1060,  1027, 20069,  1006,  1057,
         1010,  1007,  1998,  1061,  1027,  1042,  2475,  1006,  1057,  1010,
         1007,  1012,  2059,  1996,  4101,  7610,  2546,  1997,  1057,  1998,
         2003, 16405,  2615,  1006,  1057,  1010,  1007,  1027,  1052, 18037,
         1006, 20069,  1006,  1057,  1010,  1007,  1010,  1042,  2475,  1006,
         1057,  1010,  1007,  1007,  1012,   102])"
3753,1,"['continuous', 'transformation', 'marginal', 'independence', 'method', 'random', 'random variables', 'jacobian', 'independent random variables', 'distribution', 'variables', 'joint', 'independent']", Distribution of Products and Ratios,seg_697,"the distribution of products and ratios of independent random variables are of interest in some applications. these can be obtained by the jacobian technique when the variables involved are continuous and independent. make the transformation u = x∕y and v = xy . then, x = √u , and y = √ ∕u, so that the jacobian is 1∕(2u). the joint pdf is the product of the marginal pdfs (due to independence assumption). from this, the pdf of either of them can be obtained by integrating out the other. an alternate and simple method exists using the modf discussed in the last chapter.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 0., 0., 1., 0., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1996,  4353,  1997,  3688,  1998, 21879,  1997,  2981,  6721,
        10857,  2024,  1997,  3037,  1999,  2070,  5097,  1012,  2122,  2064,
         2022,  4663,  2011,  1996,  6213,  2937,  6028,  2043,  1996, 10857,
         2920,  2024,  7142,  1998,  2981,  1012,  2191,  1996,  8651,  1057,
         1027,   100,  1998,  1058,  1027,  1060,  2100,  1012,  2059,  1010,
         1060,  1027,  1600,  2226,  1010,  1998,  1061,  1027,  1600,   100,
         1010,  2061,  2008,  1996,  6213,  2937,  2003,   100,  1006,  1016,
         2226,  1007,  1012,  1996,  4101, 11135,  2003,  1996,  4031,  1997,
         1996, 14785, 11135,  2015,  1006,  2349,  2000,  4336, 11213,  1007,
         1012,  2013,  2023,  1010,  1996, 11135,  1997,  2593,  1997,  2068,
         2064,  2022,  4663,  2011, 22380,  2041,  1996,  2060,  1012,  2019,
         6585,  1998,  3722,  4118,  6526,  2478,  1996, 16913,  2546,  6936,
         1999,  1996,  2197,  3127,  1012,   102])"
3754,1,"['curve', 'range']", Distribution of Products and Ratios,seg_697,"as xy = c represents a parabolic curve, we split the range of integration of y from (−∞, z∕x] and from [z∕x,∞) to get",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2004,  1060,  2100,  1027,  1039,  5836,  1037, 11498, 18647,
         7774,  1010,  2057,  3975,  1996,  2846,  1997,  8346,  1997,  1061,
         2013,  1006,  1597, 30128,  1010,   100,  1033,  1998,  2013,  1031,
          100,  1010,  1601,  1007,  2000,  2131,   102])"
3755,1,['transformation'], Distribution of Products and Ratios,seg_697,using the transformation u = xy this becomes,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([ 101, 2478, 1996, 8651, 1057, 1027, 1060, 2100, 2023, 4150,  102])"
3756,0,[], Distribution of Products and Ratios,seg_697,"this, on rearrangement, becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2023,  1010,  2006,  4373, 24388, 13665,  1010,  4150,   102])"
3757,0,[], Distribution of Products and Ratios,seg_697,differentiate with respect to z to get the pdf as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101, 21032,  2007,  4847,  2000,  1062,  2000,  2131,  1996, 11135,
         2004,   102])"
3758,1,"['cauchy', 'normal', 'cauchy distribution', 'distribution', 'variates']", Distribution of Products and Ratios,seg_697,"it is shown below that if x and y are iid normal variates, the ratio x/y has a cauchy distribution. analogously u = x∕y has pdf",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2009,  2003,  3491,  2917,  2008,  2065,  1060,  1998,  1061,
         2024,  2462,  2094,  3671, 13075, 13143,  2015,  1010,  1996,  6463,
         1060,  1013,  1061,  2038,  1037,  6187, 10875,  2100,  4353,  1012,
        19639,  2135,  1057,  1027,   100,  2038, 11135,   102])"
3759,1,['distributions'], Distribution of Products and Ratios,seg_697,example 11.7 ratio of uniform distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2742,  2340,  1012,  1021,  6463,  1997,  6375, 20611,   102])"
3760,1,['distribution'], Distribution of Products and Ratios,seg_697,"if x and y are cuni(0, b) distributed, find the distribution of u = x∕y .",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2065,  1060,  1998,  1061,  2024, 12731,  3490,  1006,  1014,
         1010,  1038,  1007,  5500,  1010,  2424,  1996,  4353,  1997,  1057,
         1027,   100,  1012,   102])"
3761,1,"['curve', 'jacobian', 'plot', 'joint']", Distribution of Products and Ratios,seg_697,"solution 11.7 let u = x∕y ,v = y so that the inverse mapping is y = v ,x = uv . the jacobian is |j| =  . the joint pdf is f (x, y) = 1∕b2. hence, f (u,  ) =  ∕b2. the pdf of u is obtained by integrating out v. a plot of the mapping is shown in figure 11.3. the region of interest is a rectangle of sides 1 × b at the left, and a curve uv = b to its right. integrating out v, we obtain f (u) = ∫0",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  5576,  2340,  1012,  1021,  2292,  1057,  1027,   100,  1010,
         1058,  1027,  1061,  2061,  2008,  1996, 19262, 12375,  2003,  1061,
         1027,  1058,  1010,  1060,  1027, 23068,  1012,  1996,  6213,  2937,
         2003,  1064,  1046,  1064,  1027,  1012,  1996,  4101, 11135,  2003,
         1042,  1006,  1060,  1010,  1061,  1007,  1027,   100,  1012,  6516,
         1010,  1042,  1006,  1057,  1010,  1007,  1027,   100,  1012,  1996,
        11135,  1997,  1057,  2003,  4663,  2011, 22380,  2041,  1058,  1012,
         1037,  5436,  1997,  1996, 12375,  2003,  3491,  1999,  3275,  2340,
         1012,  1017,  1012,  1996,  2555,  1997,  3037,  2003,  1037, 28667,
        23395,  1997,  3903,  1015,  1095,  1038,  2012,  1996,  2187,  1010,
         1998,  1037,  7774, 23068,  1027,  1038,  2000,  2049,  2157,  1012,
        22380,  2041,  1058,  1010,  2057,  6855,  1042,  1006,  1057,  1007,
         1027,   100,   102])"
3762,1,"['exponential', 'gamma', 'variates', 'distribution']", Distribution of Products and Ratios,seg_697,"see reference 294 for the distribution of ratios of exponential variates, and reference 297 for ratios of gamma variates.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2156,  4431, 28135,  2005,  1996,  4353,  1997, 21879,  1997,
        27258, 13075, 13143,  2015,  1010,  1998,  4431, 27502,  2005, 21879,
         1997, 13091, 13075, 13143,  2015,  1012,   102])"
3763,1,"['gamma', 'gamma distribution', 'distribution']", Distribution of Products and Ratios,seg_697,example 11.8 sum and ratio of gamma distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2742,  2340,  1012,  1022,  7680,  1998,  6463,  1997, 13091,
         4353,   102])"
3764,1,['distribution'], Distribution of Products and Ratios,seg_697,"if x and y are iid gamm( ,  i), find the distribution of (i) x + y , (ii) x/y.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2462,  2094, 11721,  7382,
         1006,  1010,  1045,  1007,  1010,  2424,  1996,  4353,  1997,  1006,
         1045,  1007,  1060,  1009,  1061,  1010,  1006,  2462,  1007,  1060,
         1013,  1061,  1012,   102])"
3765,1,"['jacobian', 'transformation']", Distribution of Products and Ratios,seg_697,"solution 11.8 let u = x + y and v = x∕y . solving for x and y in terms of u u  u and v, we get x = , and y = . the jacobian of the transformation is 1+  1+    u | | ||1 +   (1 +  )2 || −u |j| = | | = (1 +  )2 . 1 u | | − ||1 +   (1 +  )2 ||",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  5576,  2340,  1012,  1022,  2292,  1057,  1027,  1060,  1009,
         1061,  1998,  1058,  1027,   100,  1012, 13729,  2005,  1060,  1998,
         1061,  1999,  3408,  1997,  1057,  1057,  1057,  1998,  1058,  1010,
         2057,  2131,  1060,  1027,  1010,  1998,  1061,  1027,  1012,  1996,
         6213,  2937,  1997,  1996,  8651,  2003,  1015,  1009,  1015,  1009,
         1057,  1064,  1064,  1064,  1064,  1015,  1009,  1006,  1015,  1009,
         1007,  1016,  1064,  1064,  1597,  2226,  1064,  1046,  1064,  1027,
         1064,  1064,  1027,  1006,  1015,  1009,  1007,  1016,  1012,  1015,
         1057,  1064,  1064,  1597,  1064,  1064,  1015,  1009,  1006,  1015,
         1009,  1007,  1016,  1064,  1064,   102])"
3766,1,"['joint', 'jacobian']", Distribution of Products and Ratios,seg_697,"  1+ 2 the joint pdf of x and y is f (x, y) = e− (x+y)x 1−1y 2−1. multiply by γ( 1)γ( 2) the jacobian, and substitute for x, y to get",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1015,  1009,  1016,  1996,  4101, 11135,  1997,  1060,  1998,
         1061,  2003,  1042,  1006,  1060,  1010,  1061,  1007,  1027,  1041,
        22543,  1006,  1060,  1009,  1061,  1007,  1060,  1015, 27944,  2100,
         1016, 27944,  1012,  4800, 22086,  2011,  1157,  1006,  1015,  1007,
         1157,  1006,  1016,  1007,  1996,  6213,  2937,  1010,  1998,  7681,
         2005,  1060,  1010,  1061,  2000,  2131,   102])"
3767,0,[], Distribution of Products and Ratios,seg_697,the pdf of u is obtained by integrating out v as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1996, 11135,  1997,  1057,  2003,  4663,  2011, 22380,  2041,
         1058,  2004,   102])"
3768,1,['gamma'], Distribution of Products and Ratios,seg_697,"which is gamma( 1,  2).",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2029,  2003, 13091,  1006,  1015,  1010,  1016,  1007,  1012,
          102])"
3769,0,[], Distribution of Products and Ratios,seg_697,the pdf of v is found by integrating out u as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1996, 11135,  1997,  1058,  2003,  2179,  2011, 22380,  2041,
         1057,  2004,   102])"
3770,1,"['pearson', 'distribution']", Distribution of Products and Ratios,seg_697,"1 + 2 , which is beta2( 1,  2) (also called γ( 1)γ( 2) pearson type vi distribution).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1015,  1009,  1016,  1010,  2029,  2003,  8247,  2475,  1006,
         1015,  1010,  1016,  1007,  1006,  2036,  2170,  1157,  1006,  1015,
         1007,  1157,  1006,  1016,  1007, 12874,  2828,  6819,  4353,  1007,
         1012,   102])"
3771,1,"['pairwise independent', 'independent', 'distributions']", Distribution of Products and Ratios,seg_697,example 11.9 ratio of pairwise independent distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2742,  2340,  1012,  1023,  6463,  1997,  3940, 14244,  2981,
        20611,   102])"
3772,1,"['independent', 'distribution']", Distribution of Products and Ratios,seg_697,"let xi’s be iid exp(  ) for i = 1, 2, ..,m. let yj’s be iid exp( ) for j = 1, 2, .., n. if xi’s and yj’s are pair-wise independent, find the distribution of w = u∕v =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([ 101, 2292, 8418, 1521, 1055, 2022, 2462, 2094, 4654, 2361, 1006, 1007,
        2005, 1045, 1027, 1015, 1010, 1016, 1010, 1012, 1012, 1010, 1049, 1012,
        2292, 1061, 3501, 1521, 1055, 2022, 2462, 2094, 4654, 2361, 1006, 1007,
        2005, 1046, 1027, 1015, 1010, 1016, 1010, 1012, 1012, 1010, 1050, 1012,
        2065, 8418, 1521, 1055, 1998, 1061, 3501, 1521, 1055, 2024, 3940, 1011,
        7968, 2981, 1010, 2424, 1996, 4353, 1997, 1059, 1027,  100, 1027,  102])"
3773,1,"['gamma', 'distributions', 'gamma distributions', 'distribution', 'variates', 'joint', 'independent']", Distribution of Products and Ratios,seg_697,"solution 11.9 as xi’s are iid, the joint pdf is the product of individual pdfs. we first use the mgf technique to find the distribution of numerator and denominator. the mgf of exp( ) is mx(t) = 1∕[1 − t]. as the xi’s are iid, mu(t) = 1∕[1 − t]m. similarly, m (t) = 1∕[1 − t]n. these are the mgfs of gamma distributions. hence, w is the ratio of two independent gamma variates, whose distribution is found in example 11.8.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  5576,  2340,  1012,  1023,  2004,  8418,  1521,  1055,  2024,
         2462,  2094,  1010,  1996,  4101, 11135,  2003,  1996,  4031,  1997,
         3265, 11135,  2015,  1012,  2057,  2034,  2224,  1996, 11460,  2546,
         6028,  2000,  2424,  1996,  4353,  1997, 16371,  5017,  8844,  1998,
         7939, 20936, 27413,  1012,  1996, 11460,  2546,  1997,  4654,  2361,
         1006,  1007,  2003, 25630,  1006,  1056,  1007,  1027,   100,  1031,
         1015,  1597,  1056,  1033,  1012,  2004,  1996,  8418,  1521,  1055,
         2024,  2462,  2094,  1010, 14163,  1006,  1056,  1007,  1027,   100,
         1031,  1015,  1597,  1056,  1033,  1049,  1012,  6660,  1010,  1049,
         1006,  1056,  1007,  1027,   100,  1031,  1015,  1597,  1056,  1033,
         1050,  1012,  2122,  2024,  1996, 11460, 10343,  1997, 13091, 20611,
         1012,  6516,  1010,  1059,  2003,  1996,  6463,  1997,  2048,  2981,
        13091, 13075, 13143,  2015,  1010,  3005,  4353,  2003,  2179,  1999,
         2742,  2340,  1012,  1022,  1012,   102])"
3774,1,['gamma'], Distribution of Products and Ratios,seg_697,example 11.10 from gamma to beta,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2742,  2340,  1012,  2184,  2013, 13091,  2000,  8247,   102])"
3775,1,"['joint', 'distribution']", Distribution of Products and Ratios,seg_697,"solution 11.10 we find the distribution of u = x + y and v = x∕(x + y). the joint pdf is   1+ 2 f (x, y) = x 1−1y 2−1e− (x+y). (11.27) γ( 1)γ( 2)]",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  5576,  2340,  1012,  2184,  2057,  2424,  1996,  4353,  1997,
         1057,  1027,  1060,  1009,  1061,  1998,  1058,  1027,   100,  1006,
         1060,  1009,  1061,  1007,  1012,  1996,  4101, 11135,  2003,  1015,
         1009,  1016,  1042,  1006,  1060,  1010,  1061,  1007,  1027,  1060,
         1015, 27944,  2100,  1016, 27944,  2063, 22543,  1006,  1060,  1009,
         1061,  1007,  1012,  1006,  2340,  1012,  2676,  1007,  1157,  1006,
         1015,  1007,  1157,  1006,  1016,  1007,  1033,   102])"
3776,1,"['joint', 'jacobian']", Distribution of Products and Ratios,seg_697,"the inverse mapping is x = uv, y = u(1 −  ), so that the jacobian is u. the joint pdf of u and v is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1996, 19262, 12375,  2003,  1060,  1027, 23068,  1010,  1061,
         1027,  1057,  1006,  1015,  1597,  1007,  1010,  2061,  2008,  1996,
         6213,  2937,  2003,  1057,  1012,  1996,  4101, 11135,  1997,  1057,
         1998,  1058,  2003,   102])"
3777,0,[], Distribution of Products and Ratios,seg_697,"0   u   1, 0       ∞. combining common terms this becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1014,  1057,  1015,  1010,  1014,  1601,  1012, 11566,  2691,
         3408,  2023,  4150,   102])"
3778,1,['distribution'], Distribution of Products and Ratios,seg_697,"integrating out u, it is easy to show that v has a beta1( 1,  2) distribution.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101, 22380,  2041,  1057,  1010,  2009,  2003,  3733,  2000,  2265,
         2008,  1058,  2038,  1037,  8247,  2487,  1006,  1015,  1010,  1016,
         1007,  4353,  1012,   102])"
3779,1,"['normal distributions', 'distributions', 'normal', 'independent']", Distribution of Products and Ratios,seg_697,example 11.11 ratio of independent normal distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2742,  2340,  1012,  2340,  6463,  1997,  2981,  3671, 20611,
          102])"
3780,1,['distribution'], Distribution of Products and Ratios,seg_697,"if x,y are iid n(0,  i 2), find the distribution of u = x∕y , and v =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([ 101, 2065, 1060, 1010, 1061, 2024, 2462, 2094, 1050, 1006, 1014, 1010,
        1045, 1016, 1007, 1010, 2424, 1996, 4353, 1997, 1057, 1027,  100, 1010,
        1998, 1058, 1027,  102])"
3781,1,['range'], Distribution of Products and Ratios,seg_697,"solution 11.11 here, both u and v have range −∞ to ∞. from u = x∕y , we",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  5576,  2340,  1012,  2340,  2182,  1010,  2119,  1057,  1998,
         1058,  2031,  2846,  1597, 30128,  2000,  1601,  1012,  2013,  1057,
         1027,   100,  1010,  2057,   102])"
3782,0,[], Distribution of Products and Ratios,seg_697,"within the square-root in the denominator outside, and canceling it out with the",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2306,  1996,  2675,  1011,  7117,  1999,  1996,  7939, 20936,
        27413,  2648,  1010,  1998, 17542,  2075,  2009,  2041,  2007,  1996,
          102])"
3783,1,['jacobian'], Distribution of Products and Ratios,seg_697,x =  √ u2 + 1. the jacobian is easily obtained as,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1060,  1027,  1600, 23343,  1009,  1015,  1012,  1996,  6213,
         2937,  2003,  4089,  4663,  2004,   102])"
3784,1,"['joint', 'distribution']", Distribution of Products and Ratios,seg_697,we first find the distribution of u. the joint pdf of x and y is,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2057,  2034,  2424,  1996,  4353,  1997,  1057,  1012,  1996,
         4101, 11135,  1997,  1060,  1998,  1061,  2003,   102])"
3785,0,[], Distribution of Products and Ratios,seg_697,"substituting the values of x and y, (x2∕ 1",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  4942, 21532,  1996,  5300,  1997,  1060,  1998,  1061,  1010,
         1006,   100,  1015,   102])"
3786,1,['independent'], Distribution of Products and Ratios,seg_697,"write a = (1 + u2)( 1 + 1 ), which is independent of v. then, f (u,  ) =  12  22u2",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  4339,  1037,  1027,  1006,  1015,  1009, 23343,  1007,  1006,
         1015,  1009,  1015,  1007,  1010,  2029,  2003,  2981,  1997,  1058,
         1012,  2059,  1010,  1042,  1006,  1057,  1010,  1007,  1027,  2260,
         2570,  2226,  2475,   102])"
3787,1,['jacobian'], Distribution of Products and Ratios,seg_697,"1 e− 2 1 a 2 . multiply by the jacobian, and integrate out v, to get the pdf of u 2  1 2 as ∞ f (u) = 1 (1 + 1∕u2)  e− 1 2 a 2 dv. (11.31) 2  1 2 ∫−∞",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1015,  1041, 22543,  1016,  1015,  1037,  1016,  1012,  4800,
        22086,  2011,  1996,  6213,  2937,  1010,  1998, 17409,  2041,  1058,
         1010,  2000,  2131,  1996, 11135,  1997,  1057,  1016,  1015,  1016,
         2004,  1601,  1042,  1006,  1057,  1007,  1027,  1015,  1006,  1015,
         1009,   100,  1007,  1041, 22543,  1015,  1016,  1037,  1016,  1040,
         2615,  1012,  1006,  2340,  1012,  2861,  1007,  1016,  1015,  1016,
          100,   102])"
3788,0,[], Distribution of Products and Ratios,seg_697,substituting a = (1 + u2)( 1 + 1 ) this becomes  12  22u2,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  4942, 21532,  1037,  1027,  1006,  1015,  1009, 23343,  1007,
         1006,  1015,  1009,  1015,  1007,  2023,  4150,  2260,  2570,  2226,
         2475,   102])"
3789,0,[], Distribution of Products and Ratios,seg_697,"this, after simplification, becomes",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2023,  1010,  2044, 21934, 24759,  9031,  1010,  4150,   102])"
3790,1,"['variance', 'cauchy', 'factor', 'normal', 'standard', 'cauchy distribution', 'distribution', 'cauchy distributed', 'independent']", Distribution of Products and Ratios,seg_697,"this is the pdf of a scaled cauchy distribution with scaling factor  2∕ 1. when  1 =  2, equation (11.34) reduces to the standard cauchy distribution. thus, the ratio of two independent normals (with same variance) is cauchy distributed. this result can be used to characterize the normal law as follows:",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 1.,
        1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2023,  2003,  1996, 11135,  1997,  1037, 18953,  6187, 10875,
         2100,  4353,  2007, 25169,  5387,   100,  1015,  1012,  2043,  1015,
         1027,  1016,  1010,  8522,  1006,  2340,  1012,  4090,  1007, 13416,
         2000,  1996,  3115,  6187, 10875,  2100,  4353,  1012,  2947,  1010,
         1996,  6463,  1997,  2048,  2981,  3671,  2015,  1006,  2007,  2168,
        23284,  1007,  2003,  6187, 10875,  2100,  5500,  1012,  2023,  2765,
         2064,  2022,  2109,  2000,  2839,  4697,  1996,  3671,  2375,  2004,
         4076,  1024,   102])"
3791,1,"['variance', 'cauchy', 'random', 'random variables', 'independent random variables', 'variables', 'cauchy distributed', 'independent']", Distribution of Products and Ratios,seg_697,"remark 1 if x and y are independent random variables with the same variance, whose ratio is cauchy distributed, then x and y are n(0,  2) distributed.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101, 17674,  1015,  2065,  1060,  1998,  1061,  2024,  2981,  6721,
        10857,  2007,  1996,  2168, 23284,  1010,  3005,  6463,  2003,  6187,
        10875,  2100,  5500,  1010,  2059,  1060,  1998,  1061,  2024,  1050,
         1006,  1014,  1010,  1016,  1007,  5500,  1012,   102])"
3792,1,"['cauchy', 'independence', 'dependent', 'correlation', 'normal', 'variates', 'cauchy distributed']", Distribution of Products and Ratios,seg_697,"we have assumed the independence of the normal variates in the above derivation. if they are dependent with correlation  , the ratio is no longer cauchy distributed.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2057,  2031,  5071,  1996,  4336,  1997,  1996,  3671, 13075,
        13143,  2015,  1999,  1996,  2682, 29280,  1012,  2065,  2027,  2024,
         7790,  2007, 16902,  1010,  1996,  6463,  2003,  2053,  2936,  6187,
        10875,  2100,  5500,  1012,   102])"
3793,0,[], Distribution of Products and Ratios,seg_697,"to find the pdf of v, integrate out u from −∞ to ∞. write the exponent as",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2000,  2424,  1996, 11135,  1997,  1058,  1010, 17409,  2041,
         1057,  2013,  1597, 30128,  2000,  1601,  1012,  4339,  1996, 16258,
        21576,  2004,   102])"
3794,1,['jacobian'], Distribution of Products and Ratios,seg_697,"multiply by the jacobian, and integrate out u, to get the pdf of v as",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  4800, 22086,  2011,  1996,  6213,  2937,  1010,  1998, 17409,
         2041,  1057,  1010,  2000,  2131,  1996, 11135,  1997,  1058,  2004,
          102])"
3795,0,[], Distribution of Products and Ratios,seg_697,"to evaluate i1, we use the formula",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  2000, 16157,  1045,  2487,  1010,  2057,  2224,  1996,  5675,
          102])"
3796,0,['e'], Distribution of Products and Ratios,seg_697,2 √ 2 e  1 2 . substitute these values in equation (11.35) to get the pdf of v as,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1016,  1600,  1016,  1041,  1015,  1016,  1012,  7681,  2122,
         5300,  1999,  8522,  1006,  2340,  1012,  3486,  1007,  2000,  2131,
         1996, 11135,  1997,  1058,  2004,   102])"
3797,1,['factors'], Distribution of Products and Ratios,seg_697,"canceling out common factors ( ,√",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101, 17542,  2075,  2041,  2691,  5876,  1006,  1010,  1600,   102])"
3798,0,[], Distribution of Products and Ratios,seg_697,"2  from numerator and denominator) and taking the  1 2 in the denominator into the brackets, we simplify this to the form",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1016,  2013, 16371,  5017,  8844,  1998,  7939, 20936, 27413,
         1007,  1998,  2635,  1996,  1015,  1016,  1999,  1996,  7939, 20936,
        27413,  2046,  1996, 19719,  1010,  2057, 21934, 28250,  2023,  2000,
         1996,  2433,   102])"
3799,1,"['normal', 'normal distribution', 'variance', 'distribution']", Distribution of Products and Ratios,seg_697,"2 + 1∕ 2 2), and note that (1∕ 1 2 + 1∕ 2 2 + ) = (1∕ 1 + 1∕ 2)2,  1 2 we find that this is the pdf of a normal distribution with variance ( 1 2∕[ 1 +  2])2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 1., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101,  1016,  1009,   100,  1016,  1016,  1007,  1010,  1998,  3602,
         2008,  1006,   100,  1015,  1016,  1009,   100,  1016,  1016,  1009,
         1007,  1027,  1006,   100,  1015,  1009,   100,  1016,  1007,  1016,
         1010,  1015,  1016,  2057,  2424,  2008,  2023,  2003,  1996, 11135,
         1997,  1037,  3671,  4353,  2007, 23284,  1006,  1015,   100,  1031,
         1015,  1009,  1016,  1033,  1007,  1016,  1012,   102])"
3800,1,"['continuous', 'variances', 'continuous random variables', 'random', 'random variables', 'variables', 'independent']", Distribution of Products and Ratios,seg_697,remark 2 if x and y are independent continuous random variables with variances,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 1., 1., 0.])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([  101, 17674,  1016,  2065,  1060,  1998,  1061,  2024,  2981,  7142,
         6721, 10857,  2007, 23284,  2015,   102])"
3801,0,[], Distribution of Products and Ratios,seg_697,2) distributed.,tensor(0),"tensor([0, 0, 0, 0, 0, 0])","tensor([ 4353,  1997,  3688,  1998, 21879])","tensor([ 101, 1016, 1007, 5500, 1012,  102])"
3802,1,"['polar transformation', 'set', 'transformations', 'polar transformations', 'treatment', 'transformed', 'statistics', 'transformation']", POLAR TRANSFORMATIONS,seg_699,"polar transformation finds applications in integral calculus, differential equations, statistics, and image-based computing (log-polar transformations), among many other fields. it is so-called because the cartesian points that use horizontal and vertical coordinate axes are transformed into polar coordinates that use radius and angle with respect to a fixed set of coordinate axes. the most popular polar transformations are discussed in the following section. advanced treatment on this topic can be found in references 296, 299 and 300, and so on.",tensor(1),"tensor([0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([11508, 21865])","tensor([  101, 11508,  8651,  4858,  5097,  1999,  9897, 19276,  1010, 11658,
        11380,  1010,  6747,  1010,  1998,  3746,  1011,  2241,  9798,  1006,
         8833,  1011, 11508, 21865,  1007,  1010,  2426,  2116,  2060,  4249,
         1012,  2009,  2003,  2061,  1011,  2170,  2138,  1996, 11122, 25253,
         2685,  2008,  2224,  9876,  1998,  7471, 13530, 19589,  2024,  8590,
         2046, 11508, 12093,  2008,  2224, 12177,  1998,  6466,  2007,  4847,
         2000,  1037,  4964,  2275,  1997, 13530, 19589,  1012,  1996,  2087,
         2759, 11508, 21865,  2024,  6936,  1999,  1996,  2206,  2930,  1012,
         3935,  3949,  2006,  2023,  8476,  2064,  2022,  2179,  1999,  7604,
        27200,  1010, 25926,  1998,  3998,  1010,  1998,  2061,  2006,  1012,
          102])"
3803,0,[], Plane Polar Transformations PPT,seg_701,"the name comes from the fact that it is applied in 2d for cartesian to polar mapping. let (x, y) represent the cartesian coordinates and (r,  ) denote the corresponding polar coordinates. then, the mapping is defined by the relation x = r cos( ) and y =",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  1996,  2171,  3310,  2013,  1996,  2755,  2008,  2009,  2003,
         4162,  1999, 14134,  2005, 11122, 25253,  2000, 11508, 12375,  1012,
         2292,  1006,  1060,  1010,  1061,  1007,  5050,  1996, 11122, 25253,
        12093,  1998,  1006,  1054,  1010,  1007, 19090,  1996,  7978, 11508,
        12093,  1012,  2059,  1010,  1996, 12375,  2003,  4225,  2011,  1996,
         7189,  1060,  1027,  1054,  2522,  2015,  1006,  1007,  1998,  1061,
         1027,   102])"
3804,1,"['jacobian', 'transformation']", Plane Polar Transformations PPT,seg_701,"2,   = tan−1(y∕x). the jacobian of the transformation is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  1016,  1010,  1027,  9092, 27944,  1006,   100,  1007,  1012,
         1996,  6213,  2937,  1997,  1996,  8651,  2003,   102])"
3805,1,"['functions', 'statistics', 'transformation', 'case']", Plane Polar Transformations PPT,seg_701,"as x2 + y2 = r2, this transformation is especially useful in statistics when the pdf contains functions of the form x2 or 1 ± x2 (in the univariate case) and ∑ixi",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  2004,  1060,  2475,  1009,  1061,  2475,  1027,  1054,  2475,
         1010,  2023,  8651,  2003,  2926,  6179,  1999,  6747,  2043,  1996,
        11135,  3397,  4972,  1997,  1996,  2433,  1060,  2475,  2030,  1015,
         1081,  1060,  2475,  1006,  1999,  1996,  4895, 28739, 13143,  2553,
         1007,  1998,   100,   102])"
3806,1,['case'], Plane Polar Transformations PPT,seg_701,2 (in the multivariate case).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  1016,  1006,  1999,  1996,  4800, 10755, 13143,  2553,  1007,
         1012,   102])"
3807,1,['distribution'], Plane Polar Transformations PPT,seg_701,example 11.12 find distribution of √ x2 + y2,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([ 101, 2742, 2340, 1012, 2260, 2424, 4353, 1997, 1600, 1060, 2475, 1009,
        1061, 2475,  102])"
3808,1,"['standard normal', 'normal', 'standard']", Plane Polar Transformations PPT,seg_701,"if x and y are iid standard normal n(0,  2), find the pdf of √ x2 + y2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  2065,  1060,  1998,  1061,  2024,  2462,  2094,  3115,  3671,
         1050,  1006,  1014,  1010,  1016,  1007,  1010,  2424,  1996, 11135,
         1997,  1600,  1060,  2475,  1009,  1061,  2475,  1012,   102])"
3809,1,"['joint', 'independent']", Plane Polar Transformations PPT,seg_701,"solution 11.12 as they are independent, the joint pdf is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 1., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  5576,  2340,  1012,  2260,  2004,  2027,  2024,  2981,  1010,
         1996,  4101, 11135,  2003,   102])"
3810,1,"['joint', 'jacobian', 'transformation']", Plane Polar Transformations PPT,seg_701,"make the transformation x = r cos( ) and y = r sin( ), so that x2 + y2 = r2 and   = tan−1(y∕x). the jacobian is r. hence, the joint pdf of r and   is f (r,  ) = 1 −r2∕2 2 re . the density of r is found by integrating out   as 2  2",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  2191,  1996,  8651,  1060,  1027,  1054,  2522,  2015,  1006,
         1007,  1998,  1061,  1027,  1054,  8254,  1006,  1007,  1010,  2061,
         2008,  1060,  2475,  1009,  1061,  2475,  1027,  1054,  2475,  1998,
         1027,  9092, 27944,  1006,   100,  1007,  1012,  1996,  6213,  2937,
         2003,  1054,  1012,  6516,  1010,  1996,  4101, 11135,  1997,  1054,
         1998,  2003,  1042,  1006,  1054,  1010,  1007,  1027,  1015,   100,
         1016,  2128,  1012,  1996,  4304,  1997,  1054,  2003,  2179,  2011,
        22380,  2041,  2004,  1016,  1016,   102])"
3811,1,"['distribution', 'uniformly distributed', 'rayleigh distribution', 'joint', 'independent']", Plane Polar Transformations PPT,seg_701,"which is the rayleigh distribution. as the joint pdf of r and   is independent of  , this is an indication that   is uniformly distributed.",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 1., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  2029,  2003,  1996,  4097, 13615,  4353,  1012,  2004,  1996,
         4101, 11135,  1997,  1054,  1998,  2003,  2981,  1997,  1010,  2023,
         2003,  2019, 12407,  2008,  2003, 27423,  5500,  1012,   102])"
3812,1,"['t distribution', 'distribution']", Plane Polar Transformations PPT,seg_701,example 11.13  2n to student’s t distribution,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([ 101, 2742, 2340, 1012, 2410, 1016, 2078, 2000, 3076, 1521, 1055, 1056,
        4353,  102])"
3813,1,"['jacobian', 'polar transformation', 'transformation']", Plane Polar Transformations PPT,seg_701,"solution 11.13 consider the polar transformation x = r cos2( ) and y = r sin2( ). then, x + y = r(sin2( ) + cos2( )) = r, x − y = r(cos2( ) − sin2( )) = r r2 r cos(2 ),√xy = r sin( ) cos( ) = sin(2 ), so that xy = sin2(2 ). the 2 4 jacobian of the transformation is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  5576,  2340,  1012,  2410,  5136,  1996, 11508,  8651,  1060,
         1027,  1054,  2522,  2015,  2475,  1006,  1007,  1998,  1061,  1027,
         1054,  8254,  2475,  1006,  1007,  1012,  2059,  1010,  1060,  1009,
         1061,  1027,  1054,  1006,  8254,  2475,  1006,  1007,  1009,  2522,
         2015,  2475,  1006,  1007,  1007,  1027,  1054,  1010,  1060,  1597,
         1061,  1027,  1054,  1006,  2522,  2015,  2475,  1006,  1007,  1597,
         8254,  2475,  1006,  1007,  1007,  1027,  1054,  1054,  2475,  1054,
         2522,  2015,  1006,  1016,  1007,  1010,  1600, 18037,  1027,  1054,
         8254,  1006,  1007,  2522,  2015,  1006,  1007,  1027,  8254,  1006,
         1016,  1007,  1010,  2061,  2008,  1060,  2100,  1027,  8254,  2475,
         1006,  1016,  1007,  1012,  1996,  1016,  1018,  6213,  2937,  1997,
         1996,  8651,  2003,   102])"
3814,1,['joint'], Plane Polar Transformations PPT,seg_701,xy √n cot(2 ). the joint pdf of x and y is,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.,
        0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  1060,  2100,  1600,  2078, 26046,  1006,  1016,  1007,  1012,
         1996,  4101, 11135,  1997,  1060,  1998,  1061,  2003,   102])"
3815,1,['jacobian'], Plane Polar Transformations PPT,seg_701,multiply by the jacobian and substitute the values of x and y to get,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  4800, 22086,  2011,  1996,  6213,  2937,  1998,  7681,  1996,
         5300,  1997,  1060,  1998,  1061,  2000,  2131,   102])"
3816,0,[], Plane Polar Transformations PPT,seg_701,"this, after simplification, reduces to",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  2023,  1010,  2044, 21934, 24759,  9031,  1010, 13416,  2000,
          102])"
3817,0,[], Plane Polar Transformations PPT,seg_701,"distribution of   is obtained by integrating out r. thus,",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  4353,  1997,  2003,  4663,  2011, 22380,  2041,  1054,  1012,
         2947,  1010,   102])"
3818,1,"['jacobian', 'transformation']", Plane Polar Transformations PPT,seg_701,"   consider the transformation t = √n cot(2 ), so that = 1∕[2√n cosec2  t (2 )] = 1∕[2√n(1 + cot2(2 )]. writing sin(2 ) = 1∕√1 + cot2(2 ), and multiplying by the jacobian, we get",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  5136,  1996,  8651,  1056,  1027,  1600,  2078, 26046,  1006,
         1016,  1007,  1010,  2061,  2008,  1027,   100,  1031,  1016, 30127,
         2078,  2522,  3366,  2278,  2475,  1056,  1006,  1016,  1007,  1033,
         1027,   100,  1031,  1016, 30127,  2078,  1006,  1015,  1009, 26046,
         2475,  1006,  1016,  1007,  1033,  1012,  3015,  8254,  1006,  1016,
         1007,  1027,   100,  1009, 26046,  2475,  1006,  1016,  1007,  1010,
         1998,  4800, 22086,  2075,  2011,  1996,  6213,  2937,  1010,  2057,
         2131,   102])"
3819,1,"['student t distribution', 'results', 't distribution', 'distribution']", Plane Polar Transformations PPT,seg_701,"multiply the numerator and denominator by γ((n + 1)∕2)γ(1∕2) and use the formula γ(n)γ(1∕2) = 2n−1γ(n∕2)γ( n+1 ) to get the constant multiplier in the form 2 1∕[√nb( 1 2 , n 2 )] (where γ(1∕2) = √ ). this is the student t distribution t(n). see cacoullos [254] for a cdf derivation of this and related results.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  4800, 22086,  1996, 16371,  5017,  8844,  1998,  7939, 20936,
        27413,  2011,  1157,  1006,  1006,  1050,  1009,  1015,  1007,   100,
         1007,  1157,  1006,   100,  1007,  1998,  2224,  1996,  5675,  1157,
         1006,  1050,  1007,  1157,  1006,   100,  1007,  1027,  1016,  2078,
        27944, 29721,  1006,   100,  1007,  1157,  1006,  1050,  1009,  1015,
         1007,  2000,  2131,  1996,  5377,  4800, 24759,  3771,  1999,  1996,
         2433,  1016,   100,  1031,  1600, 27698,  1006,  1015,  1016,  1010,
         1050,  1016,  1007,  1033,  1006,  2073,  1157,  1006,   100,  1007,
         1027,  1600,  1007,  1012,  2023,  2003,  1996,  3076,  1056,  4353,
         1056,  1006,  1050,  1007,  1012,  2156,  6187,  3597, 18083,  2891,
         1031, 22234,  1033,  2005,  1037,  3729,  2546, 29280,  1997,  2023,
         1998,  3141,  3463,  1012,   102])"
3820,1,"['functions', 'distributions', 'weibull']", Plane Polar Transformations PPT,seg_701,example 11.14 functions of weibull distributions,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 1., 1., 1., 1., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  2742,  2340,  1012,  2403,  4972,  1997, 11417,  8569,  3363,
        20611,   102])"
3821,1,['independent'], Plane Polar Transformations PPT,seg_701,"2 −x2∕b2 if x, y are iid weibull(2, b) with pdf f (x, b) = xe , for x ≥ 0, show that b2 z = xy∕(x2 + y2) has pdf f (z) = 2z∕√ 1 − 4z2, which is independent of b.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  1016,   100,  2065,  1060,  1010,  1061,  2024,  2462,  2094,
        11417,  8569,  3363,  1006,  1016,  1010,  1038,  1007,  2007, 11135,
         1042,  1006,  1060,  1010,  1038,  1007,  1027,  1060,  2063,  1010,
         2005,  1060,  1609,  1014,  1010,  2265,  2008,  1038,  2475,  1062,
         1027,   100,  1006,  1060,  2475,  1009,  1061,  2475,  1007,  2038,
        11135,  1042,  1006,  1062,  1007,  1027,   100,  1015,  1597,  1018,
         2480,  2475,  1010,  2029,  2003,  2981,  1997,  1038,  1012,   102])"
3822,1,"['joint', 'jacobian', 'transformation']", Plane Polar Transformations PPT,seg_701,"solution 11.14 put x = r cos( ) and y = r sin( ), so that x2 + y2 = r2 and   = tan−1(y∕x). the jacobian of the transformation is r. hence, the joint pdf of 4r3 2 2 r and   is f (r,  ) = sin( ) cos( )e−r ∕b . using 2 sin( ) cos( ) = sin(2 ) this b4 2r3 2 2 becomes f (r,  ) = sin(2 )e−r ∕b . the pdf of   is obtained by integrating out b4 r as ∞ f ( ) = 2 sin(2 ) r3e−r2∕b2 dr. (11.47) b",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([ 4946, 11508, 21865,  4903,  2102])","tensor([  101,  5576,  2340,  1012,  2403,  2404,  1060,  1027,  1054,  2522,
         2015,  1006,  1007,  1998,  1061,  1027,  1054,  8254,  1006,  1007,
         1010,  2061,  2008,  1060,  2475,  1009,  1061,  2475,  1027,  1054,
         2475,  1998,  1027,  9092, 27944,  1006,   100,  1007,  1012,  1996,
         6213,  2937,  1997,  1996,  8651,  2003,  1054,  1012,  6516,  1010,
         1996,  4101, 11135,  1997,  1018,  2099,  2509,  1016,  1016,  1054,
         1998,  2003,  1042,  1006,  1054,  1010,  1007,  1027,  8254,  1006,
         1007,  2522,  2015,  1006,  1007,  1041, 22543,  2099,   100,  1012,
         2478,  1016,  8254,  1006,  1007,  2522,  2015,  1006,  1007,  1027,
         8254,  1006,  1016,  1007,  2023,  1038,  2549,  1016,  2099,  2509,
         1016,  1016,  4150,  1042,  1006,  1054,  1010,  1007,  1027,  8254,
         1006,  1016,  1007,  1041, 22543,  2099,   100,  1012,  1996, 11135,
         1997,  2003,  4663,  2011, 22380,  2041,  1038,  2549,  1054,  2004,
         1601,  1042,  1006,  1007,  1027,  1016,  8254,  1006,  1016,  1007,
          100,  2852,  1012,  1006,  2340,  1012,  4700,  1007,  1038,   102])"
3823,1,"['jacobian', 'transformation']", Cylindrical Polar Transformations CPT,seg_703,"this transformation is a simple extension of the above to 3d. the mapping is defined by the relations x = r cos( ), y = r sin( ), and z = z. the jacobian of this transformation also is r. this defines a cylinder of base r in the polar coordinates. inverse",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18797, 11508, 21865, 18133,  2102])","tensor([  101,  2023,  8651,  2003,  1037,  3722,  5331,  1997,  1996,  2682,
         2000,  7605,  1012,  1996, 12375,  2003,  4225,  2011,  1996,  4262,
         1060,  1027,  1054,  2522,  2015,  1006,  1007,  1010,  1061,  1027,
         1054,  8254,  1006,  1007,  1010,  1998,  1062,  1027,  1062,  1012,
         1996,  6213,  2937,  1997,  2023,  8651,  2036,  2003,  1054,  1012,
         2023, 11859,  1037,  7956,  1997,  2918,  1054,  1999,  1996, 11508,
        12093,  1012, 19262,   102])"
3824,0,[], Cylindrical Polar Transformations CPT,seg_703,mapping is easily obtained as r = √x2 + y,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])","tensor([18797, 11508, 21865, 18133,  2102])","tensor([  101, 12375,  2003,  4089,  4663,  2004,  1054,  1027,  1600,  2595,
         2475,  1009,  1061,   102])"
3825,1,"['jacobian', 'transformation']", Spherical Polar Transformations SPT,seg_705,"is defined as r = √x2 + y2 + z2,   = tan−1(y∕x), and   = sin−1(z∕r). the jacobian of this transformation is r2cos2( ). an equivalent mapping is defined by the relations x = r cos( ) sin( ), y = r sin( ) sin( ), and z = r cos( ). the inverse mapping is",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([18970, 11508, 21865, 11867,  2102])","tensor([  101,  2003,  4225,  2004,  1054,  1027,  1600,  2595,  2475,  1009,
         1061,  2475,  1009,  1062,  2475,  1010,  1027,  9092, 27944,  1006,
          100,  1007,  1010,  1998,  1027,  8254, 27944,  1006,   100,  1007,
         1012,  1996,  6213,  2937,  1997,  2023,  8651,  2003,  1054,  2475,
        13186,  2475,  1006,  1007,  1012,  2019,  5662, 12375,  2003,  4225,
         2011,  1996,  4262,  1060,  1027,  1054,  2522,  2015,  1006,  1007,
         8254,  1006,  1007,  1010,  1061,  1027,  1054,  8254,  1006,  1007,
         8254,  1006,  1007,  1010,  1998,  1062,  1027,  1054,  2522,  2015,
         1006,  1007,  1012,  1996, 19262, 12375,  2003,   102])"
3826,1,"['functions', 'jacobian', 'transformation']", Spherical Polar Transformations SPT,seg_705,2∕z). the jacobian of this transformation is −r2 sin( ) (so that dxdydz = r2 sin( )drd d ). the name spherical transformation comes from the fact that its domain is of the form x2 + y2 + z2 or arithmetic functions of it.,tensor(1),"tensor([0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])","tensor([18970, 11508, 21865, 11867,  2102])","tensor([  101,   100,  1007,  1012,  1996,  6213,  2937,  1997,  2023,  8651,
         2003,  1597,  2099,  2475,  8254,  1006,  1007,  1006,  2061,  2008,
         1040,  2595,  5149,  2094,  2480,  1027,  1054,  2475,  8254,  1006,
         1007,  2852,  2094,  1040,  1007,  1012,  1996,  2171, 18970,  8651,
         3310,  2013,  1996,  2755,  2008,  2049,  5884,  2003,  1997,  1996,
         2433,  1060,  2475,  1009,  1061,  2475,  1009,  1062,  2475,  2030,
        20204,  4972,  1997,  2009,  1012,   102])"
3827,1,"['helmert transformation', 'jacobian', 'transformation']", Other Methods,seg_707,"the spt can be generalized to n-dimensions in multiple ways. one simple way is to use the helmert transformation x1 = r cos( 1), x2 = r sin( 1) cos( 2), x3 = r sin( 1) sin( 2) cos( 3), · · · , xn−1 = r sin( 1) sin( 2) … sin( n−2) cos( n−3), and xn = r sin( 1) sin( 2) … sin( n−1). the jacobian is given by |j| = rn−1sinn−2( 1)sinn−3 ( 2)sinn−4( 3) · · · sin( n−2). squaring and adding each term, we get r2 = x1",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([  101,  1996, 11867,  2102,  2064,  2022, 18960,  2000,  1050,  1011,
         9646,  1999,  3674,  3971,  1012,  2028,  3722,  2126,  2003,  2000,
         2224,  1996, 16254,  8743,  8651,  1060,  2487,  1027,  1054,  2522,
         2015,  1006,  1015,  1007,  1010,  1060,  2475,  1027,  1054,  8254,
         1006,  1015,  1007,  2522,  2015,  1006,  1016,  1007,  1010,  1060,
         2509,  1027,  1054,  8254,  1006,  1015,  1007,  8254,  1006,  1016,
         1007,  2522,  2015,  1006,  1017,  1007,  1010,  1087,  1087,  1087,
         1010,  1060,  2078, 27944,  1027,  1054,  8254,  1006,  1015,  1007,
         8254,  1006,  1016,  1007,  1529,  8254,  1006,  1050, 22543,  2475,
         1007,  2522,  2015,  1006,  1050, 22543,  2509,  1007,  1010,  1998,
         1060,  2078,  1027,  1054,  8254,  1006,  1015,  1007,  8254,  1006,
         1016,  1007,  1529,  8254,  1006,  1050, 27944,  1007,  1012,  1996,
         6213,  2937,  2003,  2445,  2011,  1064,  1046,  1064,  1027, 29300,
        27944, 11493,  2078, 22543,  2475,  1006,  1015,  1007, 26403, 22543,
         2509,  1006,  1016,  1007, 26403, 22543,  2549,  1006,  1017,  1007,
         1087,  1087,  1087,  8254,  1006,  1050, 22543,  2475,  1007,  1012,
         5490,  6692,  4892,  1998,  5815,  2169,  2744,  1010,  2057,  2131,
         1054,  2475,  1027,  1060,  2487,   102])"
3828,1,"['polar transformation', 'transformation', 'table']", Other Methods,seg_707,"toroidal polar transformation (tpt) is an extension of spt (see table 11.2), defined as",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([  101, 23790, 16975, 11508,  8651,  1006,  1056, 13876,  1007,  2003,
         2019,  5331,  1997, 11867,  2102,  1006,  2156,  2795,  2340,  1012,
         1016,  1007,  1010,  4225,  2004,   102])"
3829,1,['jacobian'], Other Methods,seg_707,the jacobian is 1/j=,tensor(1),"tensor([0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([ 101, 1996, 6213, 2937, 2003, 1015, 1013, 1046, 1027,  102])"
3830,1,"['jacobian', 'determinant']", Other Methods,seg_707,"where b = (r cos( ) + r). to evaluate this determinant, take out b from second row, r from third row, multiply new first column by cos( ), new second column by sin( ), and add new second column to the first column (c1 = c1 + c2). the (2, 2)th element also becomes zero. then, expand the determinant along second row to get the jacobian as b = (r cos( ) + r).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])","tensor([2060, 4725])","tensor([  101,  2073,  1038,  1027,  1006,  1054,  2522,  2015,  1006,  1007,
         1009,  1054,  1007,  1012,  2000, 16157,  2023, 28283, 22311,  3372,
         1010,  2202,  2041,  1038,  2013,  2117,  5216,  1010,  1054,  2013,
         2353,  5216,  1010,  4800, 22086,  2047,  2034,  5930,  2011,  2522,
         2015,  1006,  1007,  1010,  2047,  2117,  5930,  2011,  8254,  1006,
         1007,  1010,  1998,  5587,  2047,  2117,  5930,  2000,  1996,  2034,
         5930,  1006, 27723,  1027, 27723,  1009, 29248,  1007,  1012,  1996,
         1006,  1016,  1010,  1016,  1007, 16215,  5783,  2036,  4150,  5717,
         1012,  2059,  1010,  7818,  1996, 28283, 22311,  3372,  2247,  2117,
         5216,  2000,  2131,  1996,  6213,  2937,  2004,  1038,  1027,  1006,
         1054,  2522,  2015,  1006,  1007,  1009,  1054,  1007,  1012,   102])"
3831,1,['transformation'], Other Methods,seg_707,"another general transformation is given by x = r cos( ) cos( ), y = r sin( )",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([ 101, 2178, 2236, 8651, 2003, 2445, 2011, 1060, 1027, 1054, 2522, 2015,
        1006, 1007, 2522, 2015, 1006, 1007, 1010, 1061, 1027, 1054, 8254, 1006,
        1007,  102])"
3832,1,"['jacobian', 'case']", Other Methods,seg_707,"1 − m2sin2( ), z = r sin( )√ 1 − n2sin2( ), where m2 + n2 = 1. squaring and adding gives us x2 + y2 + z2 = r2. the jacobian in this case is 1/j=",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([  101,  1015,  1597, 25525, 11493,  2475,  1006,  1007,  1010,  1062,
         1027,  1054,  8254,  1006,  1007,  1600,  1015,  1597,  1050,  2475,
        11493,  2475,  1006,  1007,  1010,  2073, 25525,  1009,  1050,  2475,
         1027,  1015,  1012,  5490,  6692,  4892,  1998,  5815,  3957,  2149,
         1060,  2475,  1009,  1061,  2475,  1009,  1062,  2475,  1027,  1054,
         2475,  1012,  1996,  6213,  2937,  1999,  2023,  2553,  2003,  1015,
         1013,  1046,  1027,   102])"
3833,1,"['factor', 'determinant']", Other Methods,seg_707,"to evaluate this determinant, take r as a common factor from second and third columns, multiply first column by sin( ) and second column by cos( ), and apply c1 = c1 + c2 (i.e., add new second column to new first column). the first element at (1,1) reduces to zero, so that the determinant becomes that of two 2×2 matrices. using the relationship m2 + n2 = 1, this is easily seen to be r2 (m2cos2( ) +",tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([  101,  2000, 16157,  2023, 28283, 22311,  3372,  1010,  2202,  1054,
         2004,  1037,  2691,  5387,  2013,  2117,  1998,  2353,  7753,  1010,
         4800, 22086,  2034,  5930,  2011,  8254,  1006,  1007,  1998,  2117,
         5930,  2011,  2522,  2015,  1006,  1007,  1010,  1998,  6611, 27723,
         1027, 27723,  1009, 29248,  1006,  1045,  1012,  1041,  1012,  1010,
         5587,  2047,  2117,  5930,  2000,  2047,  2034,  5930,  1007,  1012,
         1996,  2034,  5783,  2012,  1006,  1015,  1010,  1015,  1007, 13416,
         2000,  5717,  1010,  2061,  2008,  1996, 28283, 22311,  3372,  4150,
         2008,  1997,  2048,  1016, 26306,  2475, 21520,  1012,  2478,  1996,
         3276, 25525,  1009,  1050,  2475,  1027,  1015,  1010,  2023,  2003,
         4089,  2464,  2000,  2022,  1054,  2475,  1006, 25525, 13186,  2475,
         1006,  1007,  1009,   102])"
3834,1,['table'], Other Methods,seg_707,2sin2( )] (see table 11.2).,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([  101,  1016, 11493,  2475,  1006,  1007,  1033,  1006,  2156,  2795,
         2340,  1012,  1016,  1007,  1012,   102])"
3835,1,"['function', 'transformation', 'variates', 'characteristic function', 'transformed', 'distribution', 'variables']", Other Methods,seg_707,"there are many other ways to find the distribution of transformed variables. one possibility is to use the characteristic function (if it is easily invertible) of the original variates. let u = g(x1, x2, …, xn) be the transformation required. if  z(t) = e(eitg(x)) = ∫ ∫ eitg(x)f (x1, x2, …, xn)dx1..dxn is easy to evaluate, we could simply use inversion theorem to get the pdf of u.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1.,
        1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])","tensor([2060, 4725])","tensor([  101,  2045,  2024,  2116,  2060,  3971,  2000,  2424,  1996,  4353,
         1997,  8590, 10857,  1012,  2028,  6061,  2003,  2000,  2224,  1996,
         8281,  3853,  1006,  2065,  2009,  2003,  4089,  1999, 16874,  7028,
         1007,  1997,  1996,  2434, 13075, 13143,  2015,  1012,  2292,  1057,
         1027,  1043,  1006,  1060,  2487,  1010,  1060,  2475,  1010,  1529,
         1010,  1060,  2078,  1007,  2022,  1996,  8651,  3223,  1012,  2065,
         1062,  1006,  1056,  1007,  1027,  1041,  1006,  1041,  4183,  2290,
         1006,  1060,  1007,  1007,  1027,   100,   100,  1041,  4183,  2290,
         1006,  1060,  1007,  1042,  1006,  1060,  2487,  1010,  1060,  2475,
         1010,  1529,  1010,  1060,  2078,  1007,  1040,  2595,  2487,  1012,
         1012,  1040,  2595,  2078,  2003,  3733,  2000, 16157,  1010,  2057,
         2071,  3432,  2224, 28527,  9872,  2000,  2131,  1996, 11135,  1997,
         1057,  1012,   102])"
3836,1,"['functions', 'conditional', 'joint probability', 'conditional probability', 'continuous distributions', 'continuous random variables', 'normal', 'discrete', 'probability distribution', 'continuous', 'probability distributions', 'marginal', 'probability', 'random variables', 'jacobian', 'variates', 'distributions', 'random', 'distribution', 'exponential', 'variables', 'joint']", SUMMARY,seg_709,"this chapter discusses the methodology to obtain the marginal, joint, and conditional probability distributions for both the discrete (i.e., count) distributions and continuous distributions. the concept and tools for the jacobian to derive the joint probability distribution of functions of continuous random variables are introduced and illustrated in this chapter. distribution of functions of two or more variates has received much attention in the literature. most of the research in this field uses the normal [218] and exponential [294] distributions",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 1., 1., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 1., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 1., 1., 1., 0., 1., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 1., 0., 0., 0., 0., 1., 1., 1.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        0., 0., 0., 0., 1., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  2023,  3127, 15841,  1996, 16134,  2000,  6855,  1996, 14785,
         1010,  4101,  1010,  1998, 18462,  9723, 20611,  2005,  2119,  1996,
        16246,  1006,  1045,  1012,  1041,  1012,  1010,  4175,  1007, 20611,
         1998,  7142, 20611,  1012,  1996,  4145,  1998,  5906,  2005,  1996,
         6213,  2937,  2000, 18547,  1996,  4101,  9723,  4353,  1997,  4972,
         1997,  7142,  6721, 10857,  2024,  3107,  1998,  7203,  1999,  2023,
         3127,  1012,  4353,  1997,  4972,  1997,  2048,  2030,  2062, 13075,
        13143,  2015,  2038,  2363,  2172,  3086,  1999,  1996,  3906,  1012,
         2087,  1997,  1996,  2470,  1999,  2023,  2492,  3594,  1996,  3671,
         1031, 20741,  1033,  1998, 27258,  1031, 28135,  1033, 20611,   102])"
3837,0,[], SUMMARY,seg_709,"see shepp [217], quine [218], baringhaus et al. [301], and jones [302] for alternative derivations of the result in example 11.0 (p. 433). bansal et al. [303] uses the",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2156,  2016,  9397,  1031, 20335,  1033,  1010, 21864,  2638,
         1031, 20741,  1033,  1010, 22466,  3070, 13821,  3802,  2632,  1012,
         1031, 19123,  1033,  1010,  1998,  3557,  1031, 22060,  1033,  2005,
         4522, 29280,  2015,  1997,  1996,  2765,  1999,  2742,  2340,  1012,
         1014,  1006,  1052,  1012,  4724,  2509,  1007,  1012,  7221, 12002,
         3802,  2632,  1012,  1031, 19988,  1033,  3594,  1996,   102])"
3838,1,"['moments', 'distribution']", SUMMARY,seg_709,uniqueness of moments to prove that the distribution of 2xy/√,tensor(1),"tensor([0., 0., 0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4310,  2791,  1997,  5312,  2000,  6011,  2008,  1996,  4353,
         1997,  1016, 18037,  1013,  1600,   102])"
3839,1,"['continuous', 'discrete', 'method', 'jacobian', 'transformations']", SUMMARY,seg_709,a) the jacobian method is applicable to both discrete and continuous variate transformations.,tensor(1),"tensor([0., 0., 0., 0., 1., 1., 1., 0., 0., 0., 0., 1., 0., 1., 0., 0., 1., 0.,
        0.])",tensor([12654]),"tensor([  101,  1037,  1007,  1996,  6213,  2937,  4118,  2003, 12711,  2000,
         2119, 16246,  1998,  7142, 13075, 13143, 21865,  1012,   102])"
3840,1,"['range', 'transformation', 'random variable', 'random', 'variable']", SUMMARY,seg_709,"b) if the range of a random variable x includes the origin, we cannot use the transformation y = 1∕x.",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1038, 1007, 2065, 1996, 2846, 1997, 1037, 6721, 8023, 1060, 2950,
        1996, 4761, 1010, 2057, 3685, 2224, 1996, 8651, 1061, 1027,  100, 1012,
         102])"
3841,1,"['marginal', 'joint distributions', 'distributions', 'joint', 'marginal distributions']", SUMMARY,seg_709,c) marginal distributions can be obtained from joint distributions.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1039,  1007, 14785, 20611,  2064,  2022,  4663,  2013,  4101,
        20611,  1012,   102])"
3842,1,"['marginal', 'joint distributions', 'distributions', 'variates', 'joint', 'marginal distributions', 'independent']", SUMMARY,seg_709,d) marginal distributions determine joint distributions only when variates are independent.,tensor(1),"tensor([0., 0., 0., 1., 1., 0., 1., 1., 0., 0., 1., 1., 1., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  1040,  1007, 14785, 20611,  5646,  4101, 20611,  2069,  2043,
        13075, 13143,  2015,  2024,  2981,  1012,   102])"
3843,1,"['random', 'random variables', 'variables', 'joint']", SUMMARY,seg_709,e) joint pdf of random variables can be obtained uniquely from joint cdf.,tensor(1),"tensor([0., 0., 0., 1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1041,  1007,  4101, 11135,  1997,  6721, 10857,  2064,  2022,
         4663, 20640,  2013,  4101,  3729,  2546,  1012,   102])"
3844,1,['joint'], SUMMARY,seg_709,"11.2 if f (x, y) = c(x + y) is the joint f (x, y, z) = k(x + 2y + 3z) for 0  ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2340, 1012, 1016, 2065, 1042, 1006, 1060, 1010, 1061, 1007, 1027,
        1039, 1006, 1060, 1009, 1061, 1007, 2003, 1996, 4101, 1042, 1006, 1060,
        1010, 1061, 1010, 1062, 1007, 1027, 1047, 1006, 1060, 1009, 1016, 2100,
        1009, 1017, 2480, 1007, 2005, 1014,  102])"
3845,1,"['random', 'discrete']", SUMMARY,seg_709,"x   1, 0   y   2, 0   z   1. pdf of two discrete random vari-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0.])",tensor([12654]),"tensor([  101,  1060,  1015,  1010,  1014,  1061,  1016,  1010,  1014,  1062,
         1015,  1012, 11135,  1997,  2048, 16246,  6721, 13075,  2072,  1011,
          102])"
3846,1,['jacobian'], SUMMARY,seg_709,"ables (x = 1, 2, 3; y = 1, 2, 3, 4), 11.5 what is the jacobian of the trans-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 2583, 2015, 1006, 1060, 1027, 1015, 1010, 1016, 1010, 1017, 1025,
        1061, 1027, 1015, 1010, 1016, 1010, 1017, 1010, 1018, 1007, 1010, 2340,
        1012, 1019, 2054, 2003, 1996, 6213, 2937, 1997, 1996, 9099, 1011,  102])"
3847,0,[], SUMMARY,seg_709,"find the constant c and hence formation u = ax + by ,   = cx −",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  2424,  1996,  5377,  1039,  1998,  6516,  4195,  1057,  1027,
        22260,  1009,  2011,  1010,  1027,  1039,  2595,  1597,   102])"
3848,1,"['conditional', 'conditional distribution', 'distribution']", SUMMARY,seg_709,"obtain the conditional distribution dy . if x and y are triangular, find of y given x = k, and the distributhe distribution of u and v.",tensor(1),"tensor([0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.,
        0.])",tensor([12654]),"tensor([  101,  6855,  1996, 18462,  4353,  1040,  2100,  1012,  2065,  1060,
         1998,  1061,  2024, 14023,  1010,  2424,  1997,  1061,  2445,  1060,
         1027,  1047,  1010,  1998,  1996,  4487,  3367,  3089,  8569, 10760,
         4353,  1997,  1057,  1998,  1058,  1012,   102])"
3849,1,['jacobian'], SUMMARY,seg_709,tion of x2. 11.6 find the jacobian of the rotation,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 14841,  2239,  1997,  1060,  2475,  1012,  2340,  1012,  1020,
         2424,  1996,  6213,  2937,  1997,  1996,  9963,   102])"
3850,1,['jacobian'], SUMMARY,seg_709,11.3 what is the jacobian of the transtransformation u = x cos( ) − y,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  1017,  2054,  2003,  1996,  6213,  2937,  1997,
         1996,  9099,  6494,  3619, 14192,  3370,  1057,  1027,  1060,  2522,
         2015,  1006,  1007,  1597,  1061,   102])"
3851,1,"['independent', 'distribution']", SUMMARY,seg_709,"use it to find the distribution of u 11.7 if f (x, y) = k ∗ x3y2e−(x+(y∕2)) for and v when x and y are (i) cuni(0, x, y   0, find constant k. are x 1) and (ii) beta(0, 1). and y independent?",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2224,  2009,  2000,  2424,  1996,  4353,  1997,  1057,  2340,
         1012,  1021,  2065,  1042,  1006,  1060,  1010,  1061,  1007,  1027,
         1047,  1598,  1060,  2509,  2100,  2475,  2063, 22543,  1006,  1060,
         1009,  1006,   100,  1007,  1007,  2005,  1998,  1058,  2043,  1060,
         1998,  1061,  2024,  1006,  1045,  1007, 12731,  3490,  1006,  1014,
         1010,  1060,  1010,  1061,  1014,  1010,  2424,  5377,  1047,  1012,
         2024,  1060,  1015,  1007,  1998,  1006,  2462,  1007,  8247,  1006,
         1014,  1010,  1015,  1007,  1012,  1998,  1061,  2981,  1029,   102])"
3852,1,['jacobian'], SUMMARY,seg_709,11.4 find the unknown k in the fol11.8 what is the jacobian of the trans-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        1., 1., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  1018,  2424,  1996,  4242,  1047,  1999,  1996,
         1042,  4747, 14526,  1012,  1022,  2054,  2003,  1996,  6213,  2937,
         1997,  1996,  9099,  1011,   102])"
3853,1,['joint'], SUMMARY,seg_709,"lowing joint pdfs: (a) f (x, y) = formation x = r cosh( ) cosh( ), y",tensor(1),"tensor([0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2659,  2075,  4101, 11135,  2015,  1024,  1006,  1037,  1007,
         1042,  1006,  1060,  1010,  1061,  1007,  1027,  4195,  1060,  1027,
         1054,  2522,  4095,  1006,  1007,  2522,  4095,  1006,  1007,  1010,
         1061,   102])"
3854,1,"['marginal', 'distributions', 'marginal distributions']", SUMMARY,seg_709,"1, 0   y   1 find constant k and (ii) gamm(mi, p), i = 1, 2, and obtain the marginal distributions. (iii)  2n.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1015,  1010,  1014,  1061,  1015,  2424,  5377,  1047,  1998,
         1006,  2462,  1007, 11721,  7382,  1006,  2771,  1010,  1052,  1007,
         1010,  1045,  1027,  1015,  1010,  1016,  1010,  1998,  6855,  1996,
        14785, 20611,  1012,  1006,  3523,  1007,  1016,  2078,  1012,   102])"
3855,1,"['transformation', 'transform', 'variables', 'distributions', 'beta distributed', 'independent']", SUMMARY,seg_709,"jacobian for the transformation b − 1)]xa−1yb−1(1 − x − y)m−a−b−1, u = 2xy∕(x2 + y2), = x2 + y2 prove that the marginals and con+ z2, = (x2 + y2)∕z2 (hint: use ditional distributions of x|y, y|x spherical polar transform). are all beta distributed when the variables are independent. 11.11 find the inverse mapping and",tensor(1),"tensor([0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 1., 1., 0., 0., 1., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6213,  2937,  2005,  1996,  8651,  1038,  1597,  1015,  1007,
         1033,  1060,  2050, 27944,  2100,  2497, 27944,  1006,  1015,  1597,
         1060,  1597,  1061,  1007,  1049, 22543,  2050, 22543,  2497, 27944,
         1010,  1057,  1027,   100,  1006,  1060,  2475,  1009,  1061,  2475,
         1007,  1010,  1027,  1060,  2475,  1009,  1061,  2475,  6011,  2008,
         1996, 14785,  2015,  1998,  9530,  1009,  1062,  2475,  1010,  1027,
         1006,  1060,  2475,  1009,  1061,  2475,  1007,   100,  1006,  9374,
         1024,  2224,  4487,  3508,  2389, 20611,  1997,  1060,  1064,  1061,
         1010,  1061,  1064,  1060, 18970, 11508, 10938,  1007,  1012,  2024,
         2035,  8247,  5500,  2043,  1996, 10857,  2024,  2981,  1012,  2340,
         1012,  2340,  2424,  1996, 19262, 12375,  1998,   102])"
3856,1,"['jacobian', 'variates', 'transformation']", SUMMARY,seg_709,"jacobian for the transformation 11.14 find the jacobian of the rotau = x + y, = x2 − y2 if x and y tion transformation u = x cos( ) − are iid chi-square variates. y sin( ), and = x sin( ) + y cos( ). 11.12 find the jacobian of the shear",tensor(1),"tensor([0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  6213,  2937,  2005,  1996,  8651,  2340,  1012,  2403,  2424,
         1996,  6213,  2937,  1997,  1996, 18672,  4887,  1027,  1060,  1009,
         1061,  1010,  1027,  1060,  2475,  1597,  1061,  2475,  2065,  1060,
         1998,  1061, 14841,  2239,  8651,  1057,  1027,  1060,  2522,  2015,
         1006,  1007,  1597,  2024,  2462,  2094,  9610,  1011,  2675, 13075,
        13143,  2015,  1012,  1061,  8254,  1006,  1007,  1010,  1998,  1027,
         1060,  8254,  1006,  1007,  1009,  1061,  2522,  2015,  1006,  1007,
         1012,  2340,  1012,  2260,  2424,  1996,  6213,  2937,  1997,  1996,
        18330,   102])"
3857,1,['distribution'], SUMMARY,seg_709,"transformation (parallel to the 11.15 if x is beta-i(p, q) and y is indey-axis) u = ax + y, = y. use it to pendent beta-i(p + q, r) find the find the distribution of u and v distribution of x∕(x + y).",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  8651,  1006,  5903,  2000,  1996,  2340,  1012,  2321,  2065,
         1060,  2003,  8247,  1011,  1045,  1006,  1052,  1010,  1053,  1007,
         1998,  1061,  2003, 27427,  3240,  1011,  8123,  1007,  1057,  1027,
        22260,  1009,  1061,  1010,  1027,  1061,  1012,  2224,  2009,  2000,
         7279, 16454,  8247,  1011,  1045,  1006,  1052,  1009,  1053,  1010,
         1054,  1007,  2424,  1996,  2424,  1996,  4353,  1997,  1057,  1998,
         1058,  4353,  1997,   100,  1006,  1060,  1009,  1061,  1007,  1012,
          102])"
3858,1,['distribution'], SUMMARY,seg_709,"11.16 if x1,x2 are iid n(0,1), find the distribution of y1 = √−2log e(x1) cos(2 x2)",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  2385,  2065,  1060,  2487,  1010,  1060,  2475,
         2024,  2462,  2094,  1050,  1006,  1014,  1010,  1015,  1007,  1010,
         2424,  1996,  4353,  1997,  1061,  2487,  1027,  1600, 22543,  2475,
        21197,  1041,  1006,  1060,  2487,  1007,  2522,  2015,  1006,  1016,
         1060,  2475,  1007,   102])"
3859,1,"['cauchy', 'independent']", SUMMARY,seg_709,11.17 if x and y are independent cauchy prove that e( |x) = (a + x)∕(a +,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  2459,  2065,  1060,  1998,  1061,  2024,  2981,
         6187, 10875,  2100,  6011,  2008,  1041,  1006,  1064,  1060,  1007,
         1027,  1006,  1037,  1009,  1060,  1007,   100,  1006,  1037,  1009,
          102])"
3860,1,"['cauchy', 'cauchy distributed', 'jacobian']", SUMMARY,seg_709,xy) are also cauchy distributed. and jacobian for the transfor-,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 1., 1., 0., 0., 1., 1., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  1060,  2100,  1007,  2024,  2036,  6187, 10875,  2100,  5500,
         1012,  1998,  6213,  2937,  2005,  1996,  9099, 29278,  1011,   102])"
3861,1,['independent'], SUMMARY,seg_709,"11.18 if x and y are independent mation x = r sin( ) sin( ), y =",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  2324,  2065,  1060,  1998,  1061,  2024,  2981,
        13523,  3258,  1060,  1027,  1054,  8254,  1006,  1007,  8254,  1006,
         1007,  1010,  1061,  1027,   102])"
3862,1,"['function', 'jacobian', 'density function']", SUMMARY,seg_709,"gamma distributed, prove that r sin( ) cos( ), z = r cos( ) sin( ), z = x∕(x + y) is type i beta dis= r cos( ) cos( ). tributed. 11.22 suppose two fair dice are tossed. 11.19 find the jacobian of the find the density function of",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.,
        0., 0., 0., 1., 1., 0., 0.])",tensor([12654]),"tensor([  101, 13091,  5500,  1010,  6011,  2008,  1054,  8254,  1006,  1007,
         2522,  2015,  1006,  1007,  1010,  1062,  1027,  1054,  2522,  2015,
         1006,  1007,  8254,  1006,  1007,  1010,  1062,  1027,   100,  1006,
         1060,  1009,  1061,  1007,  2003,  2828,  1045,  8247,  4487,  2015,
         1027,  1054,  2522,  2015,  1006,  1007,  2522,  2015,  1006,  1007,
         1012,  7050,  2094,  1012,  2340,  1012,  2570,  6814,  2048,  4189,
        18740,  2024,  7463,  1012,  2340,  1012,  2539,  2424,  1996,  6213,
         2937,  1997,  1996,  2424,  1996,  4304,  3853,  1997,   102])"
3863,0,[], SUMMARY,seg_709,transformation u1 = x,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 8651, 1057, 2487, 1027, 1060,  102])"
3864,1,"['joint', 'scores', 'distribution']", SUMMARY,seg_709,"1 ,u2 = (x1,x2) where x1 and x2 are the x2 , …,un−1 = xn−1 , and x1 2 + scores that show up. xn xn x2 2 + · · · + xn2 = 1. if xi ′s are iid 11.23 if x,y are iid cuni(a, b), find n(0,1), find the joint distribution",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101,  1015,  1010, 23343,  1027,  1006,  1060,  2487,  1010,  1060,
         2475,  1007,  2073,  1060,  2487,  1998,  1060,  2475,  2024,  1996,
         1060,  2475,  1010,  1529,  1010,  4895, 27944,  1027,  1060,  2078,
        27944,  1010,  1998,  1060,  2487,  1016,  1009,  7644,  2008,  2265,
         2039,  1012,  1060,  2078,  1060,  2078,  1060,  2475,  1016,  1009,
         1087,  1087,  1087,  1009,  1060,  2078,  2475,  1027,  1015,  1012,
         2065,  8418,  1531,  1055,  2024,  2462,  2094,  2340,  1012,  2603,
         2065,  1060,  1010,  1061,  2024,  2462,  2094, 12731,  3490,  1006,
         1037,  1010,  1038,  1007,  1010,  2424,  1050,  1006,  1014,  1010,
         1015,  1007,  1010,  2424,  1996,  4101,  4353,   102])"
3865,1,['distribution'], SUMMARY,seg_709,"a=−b, find the distribution of 11.20 suppose that x∼bino(n,  ), v = x2.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1037, 1027, 1597, 2497, 1010, 2424, 1996, 4353, 1997, 2340, 1012,
        2322, 6814, 2008,  100, 1006, 1050, 1010, 1007, 1010, 1058, 1027, 1060,
        2475, 1012,  102])"
3866,1,['distribution'], SUMMARY,seg_709,"where   ∼ beta(a, b). find the −(ax+by) 11.24 if f (x, y) = ke , find k and unconditional distribution of x,",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 1., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2073,   100,  8247,  1006,  1037,  1010,  1038,  1007,  1012,
         2424,  1996,  1597,  1006, 22260,  1009,  2011,  1007,  2340,  1012,
         2484,  2065,  1042,  1006,  1060,  1010,  1061,  1007,  1027, 17710,
         1010,  2424,  1047,  1998,  4895,  8663, 27064,  4353,  1997,  1060,
         1010,   102])"
3867,1,['distribution'], SUMMARY,seg_709,conditional distribution of  |x and obtain the pdf of x/y and x − y .,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101, 18462,  4353,  1997,  1064,  1060,  1998,  6855,  1996, 11135,
         1997,  1060,  1013,  1061,  1998,  1060,  1597,  1061,  1012,   102])"
3868,1,['jacobian'], SUMMARY,seg_709,"11.26 if x ∼  m2 , and y ∼  n2 prove that zx , prove that the jacobian is a",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  2656,  2065,  1060,   100, 25525,  1010,  1998,
         1061,   100,  1050,  2475,  6011,  2008,  1062,  2595,  1010,  6011,
         2008,  1996,  6213,  2937,  2003,  1037,   102])"
3869,1,['distribution'], SUMMARY,seg_709,"y x∕(x + y) ∼ beta(m∕2, n∕2), constant. find the distribution of u when x,y, z are (i) gamm(m, and x∕y ∼ beta2(m∕2, n∕2). p) and (ii) cuni(0, b). 11.27 if x ∼  2m, y∼  2n and z∼  2p find",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  1061,   100,  1006,  1060,  1009,  1061,  1007,   100,  8247,
         1006,   100,  1010,   100,  1007,  1010,  5377,  1012,  2424,  1996,
         4353,  1997,  1057,  2043,  1060,  1010,  1061,  1010,  1062,  2024,
         1006,  1045,  1007, 11721,  7382,  1006,  1049,  1010,  1998,   100,
          100,  8247,  2475,  1006,   100,  1010,   100,  1007,  1012,  1052,
         1007,  1998,  1006,  2462,  1007, 12731,  3490,  1006,  1014,  1010,
         1038,  1007,  1012,  2340,  1012,  2676,  2065,  1060,   100,  1016,
         2213,  1010,   100,  1016,  2078,  1998,   100,  1016,  2361,  2424,
          102])"
3870,0,[], SUMMARY,seg_709,"2m+2n and y ∼ as gamma(mn, p).",tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([  101,  1016,  2213,  1009,  1016,  2078,  1998,  1061,   100,  2004,
        13091,  1006, 24098,  1010,  1052,  1007,  1012,   102])"
3871,1,"['independent', 'distribution']", SUMMARY,seg_709,"beta1(p, q) be independent, find 11.33 express the cartesian coordinates distribution of xy and x(1 − y). in terms of cylindrical and spheri-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  8247,  2487,  1006,  1052,  1010,  1053,  1007,  2022,  2981,
         1010,  2424,  2340,  1012,  3943,  4671,  1996, 11122, 25253, 12093,
         4353,  1997,  1060,  2100,  1998,  1060,  1006,  1015,  1597,  1061,
         1007,  1012,  1999,  3408,  1997, 18797,  1998, 11867,  5886,  2072,
         1011,   102])"
3872,1,"['gamma', 'gamma distributed']", SUMMARY,seg_709,cal polar coordinates. 11.29 if x and y are gamma distributed,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 0.])",tensor([12654]),"tensor([  101, 10250, 11508, 12093,  1012,  2340,  1012,  2756,  2065,  1060,
         1998,  1061,  2024, 13091,  5500,   102])"
3873,1,"['exponentially', 'distribution', 'parameters']", SUMMARY,seg_709,"with parameters (p,m) and (q,m) 11.34 if x and y are exponentially disfind the distribution of x/y and tributed, find the distribution of",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 1., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 1., 0., 0.])",tensor([12654]),"tensor([  101,  2007, 11709,  1006,  1052,  1010,  1049,  1007,  1998,  1006,
         1053,  1010,  1049,  1007,  2340,  1012,  4090,  2065,  1060,  1998,
         1061,  2024, 27258,  2135,  4487, 22747, 22254,  1996,  4353,  1997,
         1060,  1013,  1061,  1998,  7050,  2094,  1010,  2424,  1996,  4353,
         1997,   102])"
3874,1,['joint'], SUMMARY,seg_709,"11.35 if x1,x2,x3 are iid gamma(mk, p) for k = 1,2,3 prove that the joint dis-",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,
        0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  3486,  2065,  1060,  2487,  1010,  1060,  2475,
         1010,  1060,  2509,  2024,  2462,  2094, 13091,  1006, 12395,  1010,
         1052,  1007,  2005,  1047,  1027,  1015,  1010,  1016,  1010,  1017,
         6011,  2008,  1996,  4101,  4487,  2015,  1011,   102])"
3875,1,['bivariate'], SUMMARY,seg_709,"tribution of y1 = x1∕x3 and y2 = x2∕x3 is bivariate beta-ii(mk) with pdf m −1 m −1 1 2 f (y1, y2) = γ",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 1., 1., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13012, 29446,  1997,  1061,  2487,  1027,   100,  1998,  1061,
         2475,  1027,   100,  2003, 12170, 10755, 13143,  8247,  1011,  2462,
         1006, 12395,  1007,  2007, 11135,  1049,  1597,  2487,  1049,  1597,
         2487,  1015,  1016,  1042,  1006,  1061,  2487,  1010,  1061,  2475,
         1007,  1027,  1157,   102])"
3876,1,"['jacobian', 'transformation']", SUMMARY,seg_709,11.36 find the jacobian of the transformation x1 = r sin( 1) sin( 2) · · · sin( n−2) sin,tensor(1),"tensor([0., 0., 0., 0., 0., 0., 1., 1., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  2340,  1012,  4029,  2424,  1996,  6213,  2937,  1997,  1996,
         8651,  1060,  2487,  1027,  1054,  8254,  1006,  1015,  1007,  8254,
         1006,  1016,  1007,  1087,  1087,  1087,  8254,  1006,  1050, 22543,
         2475,  1007,  8254,   102])"
3877,1,['distribution'], SUMMARY,seg_709,"the distribution of (i) u + v , (ii) xn)∕√n(n − 1) for i = 3, 4, ..n.",tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([ 101, 1996, 4353, 1997, 1006, 1045, 1007, 1057, 1009, 1058, 1010, 1006,
        2462, 1007, 1060, 2078, 1007,  100, 1006, 1050, 1597, 1015, 1007, 2005,
        1045, 1027, 1017, 1010, 1018, 1010, 1012, 1012, 1050, 1012,  102])"
3878,0,[], SUMMARY,seg_709,|u − v| 11.40 if y has a chi-distribution with,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 1064, 1057, 1597, 1058, 1064, 2340, 1012, 2871, 2065, 1061, 2038,
        1037, 9610, 1011, 4353, 2007,  102])"
3879,1,"['joint', 'independent']", SUMMARY,seg_709,"m dof and z is beta-i((m − 11.38 if x and y have joint pdf f (x, y) = 1)∕2, (m − 1)∕2) is independent",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 1., 0.])",tensor([12654]),"tensor([  101,  1049,  2079,  2546,  1998,  1062,  2003,  8247,  1011,  1045,
         1006,  1006,  1049,  1597,  2340,  1012,  4229,  2065,  1060,  1998,
         1061,  2031,  4101, 11135,  1042,  1006,  1060,  1010,  1061,  1007,
         1027,  1015,  1007,   100,  1010,  1006,  1049,  1597,  1015,  1007,
          100,  1007,  2003,  2981,   102])"
3880,1,['standard'], SUMMARY,seg_709,"exp(−x − y), x, y ≥ 0, find the disof y, then (2z − 1)y is standard tribution of x/y and x + y assumnormal.",tensor(1),"tensor([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101,  4654,  2361,  1006,  1597,  2595,  1597,  1061,  1007,  1010,
         1060,  1010,  1061,  1609,  1014,  1010,  2424,  1996,  4487,  6499,
         2546,  1061,  1010,  2059,  1006,  1016,  2480,  1597,  1015,  1007,
         1061,  2003,  3115, 13012, 29446,  1997,  1060,  1013,  1061,  1998,
         1060,  1009,  1061,  4632,  2819, 12131,  9067,  1012,   102])"
3881,1,"['jacobian', 'independence']", SUMMARY,seg_709,ing independence. 11.41 find the inverse mapping and 11.39 find the jacobian of the jacobian for the transforma-,tensor(1),"tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,
        1., 0., 0., 1., 1., 0., 0., 0., 0., 0., 0.])",tensor([12654]),"tensor([  101, 13749,  4336,  1012,  2340,  1012,  4601,  2424,  1996, 19262,
        12375,  1998,  2340,  1012,  4464,  2424,  1996,  6213,  2937,  1997,
         1996,  6213,  2937,  2005,  1996, 10938,  2050,  1011,   102])"
3882,0,[], SUMMARY,seg_709,transformation y1 = ∑i,tensor(0),"tensor([0, 0, 0, 0, 0, 0, 0])",tensor([12654]),"tensor([ 101, 8651, 1061, 2487, 1027,  100,  102])"
